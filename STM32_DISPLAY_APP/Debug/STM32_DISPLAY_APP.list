
STM32_DISPLAY_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000134ac  080081d0  080081d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026b0  0801b680  0801b680  00014680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dd30  0801dd30  00017250  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801dd30  0801dd30  00016d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dd38  0801dd38  00017250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dd38  0801dd38  00016d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801dd3c  0801dd3c  00016d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000250  20000000  0801dd40  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014194  20000250  0801df90  00017250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200143e4  0801df90  000173e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017250  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021d8c  00000000  00000000  00017280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005834  00000000  00000000  0003900c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e98  00000000  00000000  0003e840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001809  00000000  00000000  000406d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284f9  00000000  00000000  00041ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000262f0  00000000  00000000  0006a3da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2b32  00000000  00000000  000906ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001731fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096e8  00000000  00000000  00173240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0017c928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d0 <__do_global_dtors_aux>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	4c05      	ldr	r4, [pc, #20]	@ (80081e8 <__do_global_dtors_aux+0x18>)
 80081d4:	7823      	ldrb	r3, [r4, #0]
 80081d6:	b933      	cbnz	r3, 80081e6 <__do_global_dtors_aux+0x16>
 80081d8:	4b04      	ldr	r3, [pc, #16]	@ (80081ec <__do_global_dtors_aux+0x1c>)
 80081da:	b113      	cbz	r3, 80081e2 <__do_global_dtors_aux+0x12>
 80081dc:	4804      	ldr	r0, [pc, #16]	@ (80081f0 <__do_global_dtors_aux+0x20>)
 80081de:	f3af 8000 	nop.w
 80081e2:	2301      	movs	r3, #1
 80081e4:	7023      	strb	r3, [r4, #0]
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	20000250 	.word	0x20000250
 80081ec:	00000000 	.word	0x00000000
 80081f0:	0801b664 	.word	0x0801b664

080081f4 <frame_dummy>:
 80081f4:	b508      	push	{r3, lr}
 80081f6:	4b03      	ldr	r3, [pc, #12]	@ (8008204 <frame_dummy+0x10>)
 80081f8:	b11b      	cbz	r3, 8008202 <frame_dummy+0xe>
 80081fa:	4903      	ldr	r1, [pc, #12]	@ (8008208 <frame_dummy+0x14>)
 80081fc:	4803      	ldr	r0, [pc, #12]	@ (800820c <frame_dummy+0x18>)
 80081fe:	f3af 8000 	nop.w
 8008202:	bd08      	pop	{r3, pc}
 8008204:	00000000 	.word	0x00000000
 8008208:	20000254 	.word	0x20000254
 800820c:	0801b664 	.word	0x0801b664

08008210 <strcmp>:
 8008210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008218:	2a01      	cmp	r2, #1
 800821a:	bf28      	it	cs
 800821c:	429a      	cmpcs	r2, r3
 800821e:	d0f7      	beq.n	8008210 <strcmp>
 8008220:	1ad0      	subs	r0, r2, r3
 8008222:	4770      	bx	lr
	...

08008230 <memchr>:
 8008230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008234:	2a10      	cmp	r2, #16
 8008236:	db2b      	blt.n	8008290 <memchr+0x60>
 8008238:	f010 0f07 	tst.w	r0, #7
 800823c:	d008      	beq.n	8008250 <memchr+0x20>
 800823e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008242:	3a01      	subs	r2, #1
 8008244:	428b      	cmp	r3, r1
 8008246:	d02d      	beq.n	80082a4 <memchr+0x74>
 8008248:	f010 0f07 	tst.w	r0, #7
 800824c:	b342      	cbz	r2, 80082a0 <memchr+0x70>
 800824e:	d1f6      	bne.n	800823e <memchr+0xe>
 8008250:	b4f0      	push	{r4, r5, r6, r7}
 8008252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800825a:	f022 0407 	bic.w	r4, r2, #7
 800825e:	f07f 0700 	mvns.w	r7, #0
 8008262:	2300      	movs	r3, #0
 8008264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008268:	3c08      	subs	r4, #8
 800826a:	ea85 0501 	eor.w	r5, r5, r1
 800826e:	ea86 0601 	eor.w	r6, r6, r1
 8008272:	fa85 f547 	uadd8	r5, r5, r7
 8008276:	faa3 f587 	sel	r5, r3, r7
 800827a:	fa86 f647 	uadd8	r6, r6, r7
 800827e:	faa5 f687 	sel	r6, r5, r7
 8008282:	b98e      	cbnz	r6, 80082a8 <memchr+0x78>
 8008284:	d1ee      	bne.n	8008264 <memchr+0x34>
 8008286:	bcf0      	pop	{r4, r5, r6, r7}
 8008288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800828c:	f002 0207 	and.w	r2, r2, #7
 8008290:	b132      	cbz	r2, 80082a0 <memchr+0x70>
 8008292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008296:	3a01      	subs	r2, #1
 8008298:	ea83 0301 	eor.w	r3, r3, r1
 800829c:	b113      	cbz	r3, 80082a4 <memchr+0x74>
 800829e:	d1f8      	bne.n	8008292 <memchr+0x62>
 80082a0:	2000      	movs	r0, #0
 80082a2:	4770      	bx	lr
 80082a4:	3801      	subs	r0, #1
 80082a6:	4770      	bx	lr
 80082a8:	2d00      	cmp	r5, #0
 80082aa:	bf06      	itte	eq
 80082ac:	4635      	moveq	r5, r6
 80082ae:	3803      	subeq	r0, #3
 80082b0:	3807      	subne	r0, #7
 80082b2:	f015 0f01 	tst.w	r5, #1
 80082b6:	d107      	bne.n	80082c8 <memchr+0x98>
 80082b8:	3001      	adds	r0, #1
 80082ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80082be:	bf02      	ittt	eq
 80082c0:	3001      	addeq	r0, #1
 80082c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80082c6:	3001      	addeq	r0, #1
 80082c8:	bcf0      	pop	{r4, r5, r6, r7}
 80082ca:	3801      	subs	r0, #1
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop

080082d0 <strlen>:
 80082d0:	4603      	mov	r3, r0
 80082d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	d1fb      	bne.n	80082d2 <strlen+0x2>
 80082da:	1a18      	subs	r0, r3, r0
 80082dc:	3801      	subs	r0, #1
 80082de:	4770      	bx	lr

080082e0 <__aeabi_drsub>:
 80082e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80082e4:	e002      	b.n	80082ec <__adddf3>
 80082e6:	bf00      	nop

080082e8 <__aeabi_dsub>:
 80082e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080082ec <__adddf3>:
 80082ec:	b530      	push	{r4, r5, lr}
 80082ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80082f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	bf1f      	itttt	ne
 8008302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800830a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800830e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008312:	f000 80e2 	beq.w	80084da <__adddf3+0x1ee>
 8008316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800831a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800831e:	bfb8      	it	lt
 8008320:	426d      	neglt	r5, r5
 8008322:	dd0c      	ble.n	800833e <__adddf3+0x52>
 8008324:	442c      	add	r4, r5
 8008326:	ea80 0202 	eor.w	r2, r0, r2
 800832a:	ea81 0303 	eor.w	r3, r1, r3
 800832e:	ea82 0000 	eor.w	r0, r2, r0
 8008332:	ea83 0101 	eor.w	r1, r3, r1
 8008336:	ea80 0202 	eor.w	r2, r0, r2
 800833a:	ea81 0303 	eor.w	r3, r1, r3
 800833e:	2d36      	cmp	r5, #54	@ 0x36
 8008340:	bf88      	it	hi
 8008342:	bd30      	pophi	{r4, r5, pc}
 8008344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800834c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008354:	d002      	beq.n	800835c <__adddf3+0x70>
 8008356:	4240      	negs	r0, r0
 8008358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800835c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008368:	d002      	beq.n	8008370 <__adddf3+0x84>
 800836a:	4252      	negs	r2, r2
 800836c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008370:	ea94 0f05 	teq	r4, r5
 8008374:	f000 80a7 	beq.w	80084c6 <__adddf3+0x1da>
 8008378:	f1a4 0401 	sub.w	r4, r4, #1
 800837c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008380:	db0d      	blt.n	800839e <__adddf3+0xb2>
 8008382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008386:	fa22 f205 	lsr.w	r2, r2, r5
 800838a:	1880      	adds	r0, r0, r2
 800838c:	f141 0100 	adc.w	r1, r1, #0
 8008390:	fa03 f20e 	lsl.w	r2, r3, lr
 8008394:	1880      	adds	r0, r0, r2
 8008396:	fa43 f305 	asr.w	r3, r3, r5
 800839a:	4159      	adcs	r1, r3
 800839c:	e00e      	b.n	80083bc <__adddf3+0xd0>
 800839e:	f1a5 0520 	sub.w	r5, r5, #32
 80083a2:	f10e 0e20 	add.w	lr, lr, #32
 80083a6:	2a01      	cmp	r2, #1
 80083a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80083ac:	bf28      	it	cs
 80083ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80083b2:	fa43 f305 	asr.w	r3, r3, r5
 80083b6:	18c0      	adds	r0, r0, r3
 80083b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80083bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80083c0:	d507      	bpl.n	80083d2 <__adddf3+0xe6>
 80083c2:	f04f 0e00 	mov.w	lr, #0
 80083c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80083ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80083ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80083d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80083d6:	d31b      	bcc.n	8008410 <__adddf3+0x124>
 80083d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80083dc:	d30c      	bcc.n	80083f8 <__adddf3+0x10c>
 80083de:	0849      	lsrs	r1, r1, #1
 80083e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80083e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80083e8:	f104 0401 	add.w	r4, r4, #1
 80083ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80083f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80083f4:	f080 809a 	bcs.w	800852c <__adddf3+0x240>
 80083f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80083fc:	bf08      	it	eq
 80083fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008402:	f150 0000 	adcs.w	r0, r0, #0
 8008406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800840a:	ea41 0105 	orr.w	r1, r1, r5
 800840e:	bd30      	pop	{r4, r5, pc}
 8008410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008414:	4140      	adcs	r0, r0
 8008416:	eb41 0101 	adc.w	r1, r1, r1
 800841a:	3c01      	subs	r4, #1
 800841c:	bf28      	it	cs
 800841e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8008422:	d2e9      	bcs.n	80083f8 <__adddf3+0x10c>
 8008424:	f091 0f00 	teq	r1, #0
 8008428:	bf04      	itt	eq
 800842a:	4601      	moveq	r1, r0
 800842c:	2000      	moveq	r0, #0
 800842e:	fab1 f381 	clz	r3, r1
 8008432:	bf08      	it	eq
 8008434:	3320      	addeq	r3, #32
 8008436:	f1a3 030b 	sub.w	r3, r3, #11
 800843a:	f1b3 0220 	subs.w	r2, r3, #32
 800843e:	da0c      	bge.n	800845a <__adddf3+0x16e>
 8008440:	320c      	adds	r2, #12
 8008442:	dd08      	ble.n	8008456 <__adddf3+0x16a>
 8008444:	f102 0c14 	add.w	ip, r2, #20
 8008448:	f1c2 020c 	rsb	r2, r2, #12
 800844c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008450:	fa21 f102 	lsr.w	r1, r1, r2
 8008454:	e00c      	b.n	8008470 <__adddf3+0x184>
 8008456:	f102 0214 	add.w	r2, r2, #20
 800845a:	bfd8      	it	le
 800845c:	f1c2 0c20 	rsble	ip, r2, #32
 8008460:	fa01 f102 	lsl.w	r1, r1, r2
 8008464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008468:	bfdc      	itt	le
 800846a:	ea41 010c 	orrle.w	r1, r1, ip
 800846e:	4090      	lslle	r0, r2
 8008470:	1ae4      	subs	r4, r4, r3
 8008472:	bfa2      	ittt	ge
 8008474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008478:	4329      	orrge	r1, r5
 800847a:	bd30      	popge	{r4, r5, pc}
 800847c:	ea6f 0404 	mvn.w	r4, r4
 8008480:	3c1f      	subs	r4, #31
 8008482:	da1c      	bge.n	80084be <__adddf3+0x1d2>
 8008484:	340c      	adds	r4, #12
 8008486:	dc0e      	bgt.n	80084a6 <__adddf3+0x1ba>
 8008488:	f104 0414 	add.w	r4, r4, #20
 800848c:	f1c4 0220 	rsb	r2, r4, #32
 8008490:	fa20 f004 	lsr.w	r0, r0, r4
 8008494:	fa01 f302 	lsl.w	r3, r1, r2
 8008498:	ea40 0003 	orr.w	r0, r0, r3
 800849c:	fa21 f304 	lsr.w	r3, r1, r4
 80084a0:	ea45 0103 	orr.w	r1, r5, r3
 80084a4:	bd30      	pop	{r4, r5, pc}
 80084a6:	f1c4 040c 	rsb	r4, r4, #12
 80084aa:	f1c4 0220 	rsb	r2, r4, #32
 80084ae:	fa20 f002 	lsr.w	r0, r0, r2
 80084b2:	fa01 f304 	lsl.w	r3, r1, r4
 80084b6:	ea40 0003 	orr.w	r0, r0, r3
 80084ba:	4629      	mov	r1, r5
 80084bc:	bd30      	pop	{r4, r5, pc}
 80084be:	fa21 f004 	lsr.w	r0, r1, r4
 80084c2:	4629      	mov	r1, r5
 80084c4:	bd30      	pop	{r4, r5, pc}
 80084c6:	f094 0f00 	teq	r4, #0
 80084ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80084ce:	bf06      	itte	eq
 80084d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80084d4:	3401      	addeq	r4, #1
 80084d6:	3d01      	subne	r5, #1
 80084d8:	e74e      	b.n	8008378 <__adddf3+0x8c>
 80084da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80084de:	bf18      	it	ne
 80084e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80084e4:	d029      	beq.n	800853a <__adddf3+0x24e>
 80084e6:	ea94 0f05 	teq	r4, r5
 80084ea:	bf08      	it	eq
 80084ec:	ea90 0f02 	teqeq	r0, r2
 80084f0:	d005      	beq.n	80084fe <__adddf3+0x212>
 80084f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80084f6:	bf04      	itt	eq
 80084f8:	4619      	moveq	r1, r3
 80084fa:	4610      	moveq	r0, r2
 80084fc:	bd30      	pop	{r4, r5, pc}
 80084fe:	ea91 0f03 	teq	r1, r3
 8008502:	bf1e      	ittt	ne
 8008504:	2100      	movne	r1, #0
 8008506:	2000      	movne	r0, #0
 8008508:	bd30      	popne	{r4, r5, pc}
 800850a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800850e:	d105      	bne.n	800851c <__adddf3+0x230>
 8008510:	0040      	lsls	r0, r0, #1
 8008512:	4149      	adcs	r1, r1
 8008514:	bf28      	it	cs
 8008516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800851a:	bd30      	pop	{r4, r5, pc}
 800851c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8008520:	bf3c      	itt	cc
 8008522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8008526:	bd30      	popcc	{r4, r5, pc}
 8008528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800852c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8008530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008534:	f04f 0000 	mov.w	r0, #0
 8008538:	bd30      	pop	{r4, r5, pc}
 800853a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800853e:	bf1a      	itte	ne
 8008540:	4619      	movne	r1, r3
 8008542:	4610      	movne	r0, r2
 8008544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008548:	bf1c      	itt	ne
 800854a:	460b      	movne	r3, r1
 800854c:	4602      	movne	r2, r0
 800854e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008552:	bf06      	itte	eq
 8008554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008558:	ea91 0f03 	teqeq	r1, r3
 800855c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008560:	bd30      	pop	{r4, r5, pc}
 8008562:	bf00      	nop

08008564 <__aeabi_ui2d>:
 8008564:	f090 0f00 	teq	r0, #0
 8008568:	bf04      	itt	eq
 800856a:	2100      	moveq	r1, #0
 800856c:	4770      	bxeq	lr
 800856e:	b530      	push	{r4, r5, lr}
 8008570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008578:	f04f 0500 	mov.w	r5, #0
 800857c:	f04f 0100 	mov.w	r1, #0
 8008580:	e750      	b.n	8008424 <__adddf3+0x138>
 8008582:	bf00      	nop

08008584 <__aeabi_i2d>:
 8008584:	f090 0f00 	teq	r0, #0
 8008588:	bf04      	itt	eq
 800858a:	2100      	moveq	r1, #0
 800858c:	4770      	bxeq	lr
 800858e:	b530      	push	{r4, r5, lr}
 8008590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800859c:	bf48      	it	mi
 800859e:	4240      	negmi	r0, r0
 80085a0:	f04f 0100 	mov.w	r1, #0
 80085a4:	e73e      	b.n	8008424 <__adddf3+0x138>
 80085a6:	bf00      	nop

080085a8 <__aeabi_f2d>:
 80085a8:	0042      	lsls	r2, r0, #1
 80085aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80085ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80085b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80085b6:	bf1f      	itttt	ne
 80085b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80085bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80085c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80085c4:	4770      	bxne	lr
 80085c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80085ca:	bf08      	it	eq
 80085cc:	4770      	bxeq	lr
 80085ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80085d2:	bf04      	itt	eq
 80085d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80085d8:	4770      	bxeq	lr
 80085da:	b530      	push	{r4, r5, lr}
 80085dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80085e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80085e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80085e8:	e71c      	b.n	8008424 <__adddf3+0x138>
 80085ea:	bf00      	nop

080085ec <__aeabi_ul2d>:
 80085ec:	ea50 0201 	orrs.w	r2, r0, r1
 80085f0:	bf08      	it	eq
 80085f2:	4770      	bxeq	lr
 80085f4:	b530      	push	{r4, r5, lr}
 80085f6:	f04f 0500 	mov.w	r5, #0
 80085fa:	e00a      	b.n	8008612 <__aeabi_l2d+0x16>

080085fc <__aeabi_l2d>:
 80085fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008600:	bf08      	it	eq
 8008602:	4770      	bxeq	lr
 8008604:	b530      	push	{r4, r5, lr}
 8008606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800860a:	d502      	bpl.n	8008612 <__aeabi_l2d+0x16>
 800860c:	4240      	negs	r0, r0
 800860e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800861a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800861e:	f43f aed8 	beq.w	80083d2 <__adddf3+0xe6>
 8008622:	f04f 0203 	mov.w	r2, #3
 8008626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800862a:	bf18      	it	ne
 800862c:	3203      	addne	r2, #3
 800862e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008632:	bf18      	it	ne
 8008634:	3203      	addne	r2, #3
 8008636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800863a:	f1c2 0320 	rsb	r3, r2, #32
 800863e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008642:	fa20 f002 	lsr.w	r0, r0, r2
 8008646:	fa01 fe03 	lsl.w	lr, r1, r3
 800864a:	ea40 000e 	orr.w	r0, r0, lr
 800864e:	fa21 f102 	lsr.w	r1, r1, r2
 8008652:	4414      	add	r4, r2
 8008654:	e6bd      	b.n	80083d2 <__adddf3+0xe6>
 8008656:	bf00      	nop

08008658 <__aeabi_dmul>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800865e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008666:	bf1d      	ittte	ne
 8008668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800866c:	ea94 0f0c 	teqne	r4, ip
 8008670:	ea95 0f0c 	teqne	r5, ip
 8008674:	f000 f8de 	bleq	8008834 <__aeabi_dmul+0x1dc>
 8008678:	442c      	add	r4, r5
 800867a:	ea81 0603 	eor.w	r6, r1, r3
 800867e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800868a:	bf18      	it	ne
 800868c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008698:	d038      	beq.n	800870c <__aeabi_dmul+0xb4>
 800869a:	fba0 ce02 	umull	ip, lr, r0, r2
 800869e:	f04f 0500 	mov.w	r5, #0
 80086a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80086a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80086aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80086ae:	f04f 0600 	mov.w	r6, #0
 80086b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80086b6:	f09c 0f00 	teq	ip, #0
 80086ba:	bf18      	it	ne
 80086bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80086c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80086c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80086c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80086cc:	d204      	bcs.n	80086d8 <__aeabi_dmul+0x80>
 80086ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80086d2:	416d      	adcs	r5, r5
 80086d4:	eb46 0606 	adc.w	r6, r6, r6
 80086d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80086dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80086e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80086e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80086e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80086ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80086f0:	bf88      	it	hi
 80086f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80086f6:	d81e      	bhi.n	8008736 <__aeabi_dmul+0xde>
 80086f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80086fc:	bf08      	it	eq
 80086fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008702:	f150 0000 	adcs.w	r0, r0, #0
 8008706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8008710:	ea46 0101 	orr.w	r1, r6, r1
 8008714:	ea40 0002 	orr.w	r0, r0, r2
 8008718:	ea81 0103 	eor.w	r1, r1, r3
 800871c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008720:	bfc2      	ittt	gt
 8008722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800872a:	bd70      	popgt	{r4, r5, r6, pc}
 800872c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008730:	f04f 0e00 	mov.w	lr, #0
 8008734:	3c01      	subs	r4, #1
 8008736:	f300 80ab 	bgt.w	8008890 <__aeabi_dmul+0x238>
 800873a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800873e:	bfde      	ittt	le
 8008740:	2000      	movle	r0, #0
 8008742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8008746:	bd70      	pople	{r4, r5, r6, pc}
 8008748:	f1c4 0400 	rsb	r4, r4, #0
 800874c:	3c20      	subs	r4, #32
 800874e:	da35      	bge.n	80087bc <__aeabi_dmul+0x164>
 8008750:	340c      	adds	r4, #12
 8008752:	dc1b      	bgt.n	800878c <__aeabi_dmul+0x134>
 8008754:	f104 0414 	add.w	r4, r4, #20
 8008758:	f1c4 0520 	rsb	r5, r4, #32
 800875c:	fa00 f305 	lsl.w	r3, r0, r5
 8008760:	fa20 f004 	lsr.w	r0, r0, r4
 8008764:	fa01 f205 	lsl.w	r2, r1, r5
 8008768:	ea40 0002 	orr.w	r0, r0, r2
 800876c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8008770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008778:	fa21 f604 	lsr.w	r6, r1, r4
 800877c:	eb42 0106 	adc.w	r1, r2, r6
 8008780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008784:	bf08      	it	eq
 8008786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	f1c4 040c 	rsb	r4, r4, #12
 8008790:	f1c4 0520 	rsb	r5, r4, #32
 8008794:	fa00 f304 	lsl.w	r3, r0, r4
 8008798:	fa20 f005 	lsr.w	r0, r0, r5
 800879c:	fa01 f204 	lsl.w	r2, r1, r4
 80087a0:	ea40 0002 	orr.w	r0, r0, r2
 80087a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80087ac:	f141 0100 	adc.w	r1, r1, #0
 80087b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087b4:	bf08      	it	eq
 80087b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	f1c4 0520 	rsb	r5, r4, #32
 80087c0:	fa00 f205 	lsl.w	r2, r0, r5
 80087c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80087c8:	fa20 f304 	lsr.w	r3, r0, r4
 80087cc:	fa01 f205 	lsl.w	r2, r1, r5
 80087d0:	ea43 0302 	orr.w	r3, r3, r2
 80087d4:	fa21 f004 	lsr.w	r0, r1, r4
 80087d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087dc:	fa21 f204 	lsr.w	r2, r1, r4
 80087e0:	ea20 0002 	bic.w	r0, r0, r2
 80087e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80087e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087ec:	bf08      	it	eq
 80087ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087f2:	bd70      	pop	{r4, r5, r6, pc}
 80087f4:	f094 0f00 	teq	r4, #0
 80087f8:	d10f      	bne.n	800881a <__aeabi_dmul+0x1c2>
 80087fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80087fe:	0040      	lsls	r0, r0, #1
 8008800:	eb41 0101 	adc.w	r1, r1, r1
 8008804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008808:	bf08      	it	eq
 800880a:	3c01      	subeq	r4, #1
 800880c:	d0f7      	beq.n	80087fe <__aeabi_dmul+0x1a6>
 800880e:	ea41 0106 	orr.w	r1, r1, r6
 8008812:	f095 0f00 	teq	r5, #0
 8008816:	bf18      	it	ne
 8008818:	4770      	bxne	lr
 800881a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800881e:	0052      	lsls	r2, r2, #1
 8008820:	eb43 0303 	adc.w	r3, r3, r3
 8008824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008828:	bf08      	it	eq
 800882a:	3d01      	subeq	r5, #1
 800882c:	d0f7      	beq.n	800881e <__aeabi_dmul+0x1c6>
 800882e:	ea43 0306 	orr.w	r3, r3, r6
 8008832:	4770      	bx	lr
 8008834:	ea94 0f0c 	teq	r4, ip
 8008838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800883c:	bf18      	it	ne
 800883e:	ea95 0f0c 	teqne	r5, ip
 8008842:	d00c      	beq.n	800885e <__aeabi_dmul+0x206>
 8008844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008848:	bf18      	it	ne
 800884a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800884e:	d1d1      	bne.n	80087f4 <__aeabi_dmul+0x19c>
 8008850:	ea81 0103 	eor.w	r1, r1, r3
 8008854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008858:	f04f 0000 	mov.w	r0, #0
 800885c:	bd70      	pop	{r4, r5, r6, pc}
 800885e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008862:	bf06      	itte	eq
 8008864:	4610      	moveq	r0, r2
 8008866:	4619      	moveq	r1, r3
 8008868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800886c:	d019      	beq.n	80088a2 <__aeabi_dmul+0x24a>
 800886e:	ea94 0f0c 	teq	r4, ip
 8008872:	d102      	bne.n	800887a <__aeabi_dmul+0x222>
 8008874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008878:	d113      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800887a:	ea95 0f0c 	teq	r5, ip
 800887e:	d105      	bne.n	800888c <__aeabi_dmul+0x234>
 8008880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008884:	bf1c      	itt	ne
 8008886:	4610      	movne	r0, r2
 8008888:	4619      	movne	r1, r3
 800888a:	d10a      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800888c:	ea81 0103 	eor.w	r1, r1, r3
 8008890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8008898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800889c:	f04f 0000 	mov.w	r0, #0
 80088a0:	bd70      	pop	{r4, r5, r6, pc}
 80088a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80088a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80088aa:	bd70      	pop	{r4, r5, r6, pc}

080088ac <__aeabi_ddiv>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80088b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80088b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80088ba:	bf1d      	ittte	ne
 80088bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80088c0:	ea94 0f0c 	teqne	r4, ip
 80088c4:	ea95 0f0c 	teqne	r5, ip
 80088c8:	f000 f8a7 	bleq	8008a1a <__aeabi_ddiv+0x16e>
 80088cc:	eba4 0405 	sub.w	r4, r4, r5
 80088d0:	ea81 0e03 	eor.w	lr, r1, r3
 80088d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80088d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80088dc:	f000 8088 	beq.w	80089f0 <__aeabi_ddiv+0x144>
 80088e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80088e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80088e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80088ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80088f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80088f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80088f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80088fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8008904:	429d      	cmp	r5, r3
 8008906:	bf08      	it	eq
 8008908:	4296      	cmpeq	r6, r2
 800890a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800890e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8008912:	d202      	bcs.n	800891a <__aeabi_ddiv+0x6e>
 8008914:	085b      	lsrs	r3, r3, #1
 8008916:	ea4f 0232 	mov.w	r2, r2, rrx
 800891a:	1ab6      	subs	r6, r6, r2
 800891c:	eb65 0503 	sbc.w	r5, r5, r3
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	ea4f 0232 	mov.w	r2, r2, rrx
 8008926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800892a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800892e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008936:	bf22      	ittt	cs
 8008938:	1ab6      	subcs	r6, r6, r2
 800893a:	4675      	movcs	r5, lr
 800893c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008940:	085b      	lsrs	r3, r3, #1
 8008942:	ea4f 0232 	mov.w	r2, r2, rrx
 8008946:	ebb6 0e02 	subs.w	lr, r6, r2
 800894a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800894e:	bf22      	ittt	cs
 8008950:	1ab6      	subcs	r6, r6, r2
 8008952:	4675      	movcs	r5, lr
 8008954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008958:	085b      	lsrs	r3, r3, #1
 800895a:	ea4f 0232 	mov.w	r2, r2, rrx
 800895e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008966:	bf22      	ittt	cs
 8008968:	1ab6      	subcs	r6, r6, r2
 800896a:	4675      	movcs	r5, lr
 800896c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008970:	085b      	lsrs	r3, r3, #1
 8008972:	ea4f 0232 	mov.w	r2, r2, rrx
 8008976:	ebb6 0e02 	subs.w	lr, r6, r2
 800897a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800897e:	bf22      	ittt	cs
 8008980:	1ab6      	subcs	r6, r6, r2
 8008982:	4675      	movcs	r5, lr
 8008984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008988:	ea55 0e06 	orrs.w	lr, r5, r6
 800898c:	d018      	beq.n	80089c0 <__aeabi_ddiv+0x114>
 800898e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800899a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800899e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80089a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80089a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80089aa:	d1c0      	bne.n	800892e <__aeabi_ddiv+0x82>
 80089ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089b0:	d10b      	bne.n	80089ca <__aeabi_ddiv+0x11e>
 80089b2:	ea41 0100 	orr.w	r1, r1, r0
 80089b6:	f04f 0000 	mov.w	r0, #0
 80089ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80089be:	e7b6      	b.n	800892e <__aeabi_ddiv+0x82>
 80089c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089c4:	bf04      	itt	eq
 80089c6:	4301      	orreq	r1, r0
 80089c8:	2000      	moveq	r0, #0
 80089ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80089ce:	bf88      	it	hi
 80089d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80089d4:	f63f aeaf 	bhi.w	8008736 <__aeabi_dmul+0xde>
 80089d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80089dc:	bf04      	itt	eq
 80089de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80089e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80089e6:	f150 0000 	adcs.w	r0, r0, #0
 80089ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80089f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80089f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80089fc:	bfc2      	ittt	gt
 80089fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008a06:	bd70      	popgt	{r4, r5, r6, pc}
 8008a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008a0c:	f04f 0e00 	mov.w	lr, #0
 8008a10:	3c01      	subs	r4, #1
 8008a12:	e690      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a14:	ea45 0e06 	orr.w	lr, r5, r6
 8008a18:	e68d      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008a1e:	ea94 0f0c 	teq	r4, ip
 8008a22:	bf08      	it	eq
 8008a24:	ea95 0f0c 	teqeq	r5, ip
 8008a28:	f43f af3b 	beq.w	80088a2 <__aeabi_dmul+0x24a>
 8008a2c:	ea94 0f0c 	teq	r4, ip
 8008a30:	d10a      	bne.n	8008a48 <__aeabi_ddiv+0x19c>
 8008a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008a36:	f47f af34 	bne.w	80088a2 <__aeabi_dmul+0x24a>
 8008a3a:	ea95 0f0c 	teq	r5, ip
 8008a3e:	f47f af25 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a42:	4610      	mov	r0, r2
 8008a44:	4619      	mov	r1, r3
 8008a46:	e72c      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a48:	ea95 0f0c 	teq	r5, ip
 8008a4c:	d106      	bne.n	8008a5c <__aeabi_ddiv+0x1b0>
 8008a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008a52:	f43f aefd 	beq.w	8008850 <__aeabi_dmul+0x1f8>
 8008a56:	4610      	mov	r0, r2
 8008a58:	4619      	mov	r1, r3
 8008a5a:	e722      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008a60:	bf18      	it	ne
 8008a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008a66:	f47f aec5 	bne.w	80087f4 <__aeabi_dmul+0x19c>
 8008a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008a6e:	f47f af0d 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008a76:	f47f aeeb 	bne.w	8008850 <__aeabi_dmul+0x1f8>
 8008a7a:	e712      	b.n	80088a2 <__aeabi_dmul+0x24a>

08008a7c <__gedf2>:
 8008a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8008a80:	e006      	b.n	8008a90 <__cmpdf2+0x4>
 8008a82:	bf00      	nop

08008a84 <__ledf2>:
 8008a84:	f04f 0c01 	mov.w	ip, #1
 8008a88:	e002      	b.n	8008a90 <__cmpdf2+0x4>
 8008a8a:	bf00      	nop

08008a8c <__cmpdf2>:
 8008a8c:	f04f 0c01 	mov.w	ip, #1
 8008a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008aa0:	bf18      	it	ne
 8008aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008aa6:	d01b      	beq.n	8008ae0 <__cmpdf2+0x54>
 8008aa8:	b001      	add	sp, #4
 8008aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008aae:	bf0c      	ite	eq
 8008ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008ab4:	ea91 0f03 	teqne	r1, r3
 8008ab8:	bf02      	ittt	eq
 8008aba:	ea90 0f02 	teqeq	r0, r2
 8008abe:	2000      	moveq	r0, #0
 8008ac0:	4770      	bxeq	lr
 8008ac2:	f110 0f00 	cmn.w	r0, #0
 8008ac6:	ea91 0f03 	teq	r1, r3
 8008aca:	bf58      	it	pl
 8008acc:	4299      	cmppl	r1, r3
 8008ace:	bf08      	it	eq
 8008ad0:	4290      	cmpeq	r0, r2
 8008ad2:	bf2c      	ite	cs
 8008ad4:	17d8      	asrcs	r0, r3, #31
 8008ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008ada:	f040 0001 	orr.w	r0, r0, #1
 8008ade:	4770      	bx	lr
 8008ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ae8:	d102      	bne.n	8008af0 <__cmpdf2+0x64>
 8008aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008aee:	d107      	bne.n	8008b00 <__cmpdf2+0x74>
 8008af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008af8:	d1d6      	bne.n	8008aa8 <__cmpdf2+0x1c>
 8008afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008afe:	d0d3      	beq.n	8008aa8 <__cmpdf2+0x1c>
 8008b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop

08008b08 <__aeabi_cdrcmple>:
 8008b08:	4684      	mov	ip, r0
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	4662      	mov	r2, ip
 8008b0e:	468c      	mov	ip, r1
 8008b10:	4619      	mov	r1, r3
 8008b12:	4663      	mov	r3, ip
 8008b14:	e000      	b.n	8008b18 <__aeabi_cdcmpeq>
 8008b16:	bf00      	nop

08008b18 <__aeabi_cdcmpeq>:
 8008b18:	b501      	push	{r0, lr}
 8008b1a:	f7ff ffb7 	bl	8008a8c <__cmpdf2>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	bf48      	it	mi
 8008b22:	f110 0f00 	cmnmi.w	r0, #0
 8008b26:	bd01      	pop	{r0, pc}

08008b28 <__aeabi_dcmpeq>:
 8008b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b2c:	f7ff fff4 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b30:	bf0c      	ite	eq
 8008b32:	2001      	moveq	r0, #1
 8008b34:	2000      	movne	r0, #0
 8008b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b3a:	bf00      	nop

08008b3c <__aeabi_dcmplt>:
 8008b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b40:	f7ff ffea 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b44:	bf34      	ite	cc
 8008b46:	2001      	movcc	r0, #1
 8008b48:	2000      	movcs	r0, #0
 8008b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b4e:	bf00      	nop

08008b50 <__aeabi_dcmple>:
 8008b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b54:	f7ff ffe0 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b58:	bf94      	ite	ls
 8008b5a:	2001      	movls	r0, #1
 8008b5c:	2000      	movhi	r0, #0
 8008b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b62:	bf00      	nop

08008b64 <__aeabi_dcmpge>:
 8008b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b68:	f7ff ffce 	bl	8008b08 <__aeabi_cdrcmple>
 8008b6c:	bf94      	ite	ls
 8008b6e:	2001      	movls	r0, #1
 8008b70:	2000      	movhi	r0, #0
 8008b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b76:	bf00      	nop

08008b78 <__aeabi_dcmpgt>:
 8008b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b7c:	f7ff ffc4 	bl	8008b08 <__aeabi_cdrcmple>
 8008b80:	bf34      	ite	cc
 8008b82:	2001      	movcc	r0, #1
 8008b84:	2000      	movcs	r0, #0
 8008b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b8a:	bf00      	nop

08008b8c <__aeabi_dcmpun>:
 8008b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b94:	d102      	bne.n	8008b9c <__aeabi_dcmpun+0x10>
 8008b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008b9a:	d10a      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ba4:	d102      	bne.n	8008bac <__aeabi_dcmpun+0x20>
 8008ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008baa:	d102      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008bac:	f04f 0000 	mov.w	r0, #0
 8008bb0:	4770      	bx	lr
 8008bb2:	f04f 0001 	mov.w	r0, #1
 8008bb6:	4770      	bx	lr

08008bb8 <__aeabi_d2iz>:
 8008bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008bc0:	d215      	bcs.n	8008bee <__aeabi_d2iz+0x36>
 8008bc2:	d511      	bpl.n	8008be8 <__aeabi_d2iz+0x30>
 8008bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008bcc:	d912      	bls.n	8008bf4 <__aeabi_d2iz+0x3c>
 8008bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008bde:	fa23 f002 	lsr.w	r0, r3, r2
 8008be2:	bf18      	it	ne
 8008be4:	4240      	negne	r0, r0
 8008be6:	4770      	bx	lr
 8008be8:	f04f 0000 	mov.w	r0, #0
 8008bec:	4770      	bx	lr
 8008bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008bf2:	d105      	bne.n	8008c00 <__aeabi_d2iz+0x48>
 8008bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008bf8:	bf08      	it	eq
 8008bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008bfe:	4770      	bx	lr
 8008c00:	f04f 0000 	mov.w	r0, #0
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop

08008c08 <__aeabi_d2uiz>:
 8008c08:	004a      	lsls	r2, r1, #1
 8008c0a:	d211      	bcs.n	8008c30 <__aeabi_d2uiz+0x28>
 8008c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008c10:	d211      	bcs.n	8008c36 <__aeabi_d2uiz+0x2e>
 8008c12:	d50d      	bpl.n	8008c30 <__aeabi_d2uiz+0x28>
 8008c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008c1c:	d40e      	bmi.n	8008c3c <__aeabi_d2uiz+0x34>
 8008c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8008c2e:	4770      	bx	lr
 8008c30:	f04f 0000 	mov.w	r0, #0
 8008c34:	4770      	bx	lr
 8008c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008c3a:	d102      	bne.n	8008c42 <__aeabi_d2uiz+0x3a>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	4770      	bx	lr
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	4770      	bx	lr

08008c48 <__aeabi_uldivmod>:
 8008c48:	b953      	cbnz	r3, 8008c60 <__aeabi_uldivmod+0x18>
 8008c4a:	b94a      	cbnz	r2, 8008c60 <__aeabi_uldivmod+0x18>
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	bf08      	it	eq
 8008c50:	2800      	cmpeq	r0, #0
 8008c52:	bf1c      	itt	ne
 8008c54:	f04f 31ff 	movne.w	r1, #4294967295
 8008c58:	f04f 30ff 	movne.w	r0, #4294967295
 8008c5c:	f000 b9be 	b.w	8008fdc <__aeabi_idiv0>
 8008c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8008c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008c68:	f000 f83c 	bl	8008ce4 <__udivmoddi4>
 8008c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c74:	b004      	add	sp, #16
 8008c76:	4770      	bx	lr

08008c78 <__aeabi_d2lz>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	460d      	mov	r5, r1
 8008c82:	f7ff ff5b 	bl	8008b3c <__aeabi_dcmplt>
 8008c86:	b928      	cbnz	r0, 8008c94 <__aeabi_d2lz+0x1c>
 8008c88:	4620      	mov	r0, r4
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c90:	f000 b80a 	b.w	8008ca8 <__aeabi_d2ulz>
 8008c94:	4620      	mov	r0, r4
 8008c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8008c9a:	f000 f805 	bl	8008ca8 <__aeabi_d2ulz>
 8008c9e:	4240      	negs	r0, r0
 8008ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008ca4:	bd38      	pop	{r3, r4, r5, pc}
 8008ca6:	bf00      	nop

08008ca8 <__aeabi_d2ulz>:
 8008ca8:	b5d0      	push	{r4, r6, r7, lr}
 8008caa:	4b0c      	ldr	r3, [pc, #48]	@ (8008cdc <__aeabi_d2ulz+0x34>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460f      	mov	r7, r1
 8008cb2:	f7ff fcd1 	bl	8008658 <__aeabi_dmul>
 8008cb6:	f7ff ffa7 	bl	8008c08 <__aeabi_d2uiz>
 8008cba:	4604      	mov	r4, r0
 8008cbc:	f7ff fc52 	bl	8008564 <__aeabi_ui2d>
 8008cc0:	4b07      	ldr	r3, [pc, #28]	@ (8008ce0 <__aeabi_d2ulz+0x38>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f7ff fcc8 	bl	8008658 <__aeabi_dmul>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4630      	mov	r0, r6
 8008cce:	4639      	mov	r1, r7
 8008cd0:	f7ff fb0a 	bl	80082e8 <__aeabi_dsub>
 8008cd4:	f7ff ff98 	bl	8008c08 <__aeabi_d2uiz>
 8008cd8:	4621      	mov	r1, r4
 8008cda:	bdd0      	pop	{r4, r6, r7, pc}
 8008cdc:	3df00000 	.word	0x3df00000
 8008ce0:	41f00000 	.word	0x41f00000

08008ce4 <__udivmoddi4>:
 8008ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce8:	9d08      	ldr	r5, [sp, #32]
 8008cea:	468e      	mov	lr, r1
 8008cec:	4604      	mov	r4, r0
 8008cee:	4688      	mov	r8, r1
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d14a      	bne.n	8008d8a <__udivmoddi4+0xa6>
 8008cf4:	428a      	cmp	r2, r1
 8008cf6:	4617      	mov	r7, r2
 8008cf8:	d962      	bls.n	8008dc0 <__udivmoddi4+0xdc>
 8008cfa:	fab2 f682 	clz	r6, r2
 8008cfe:	b14e      	cbz	r6, 8008d14 <__udivmoddi4+0x30>
 8008d00:	f1c6 0320 	rsb	r3, r6, #32
 8008d04:	fa01 f806 	lsl.w	r8, r1, r6
 8008d08:	fa20 f303 	lsr.w	r3, r0, r3
 8008d0c:	40b7      	lsls	r7, r6
 8008d0e:	ea43 0808 	orr.w	r8, r3, r8
 8008d12:	40b4      	lsls	r4, r6
 8008d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008d18:	fa1f fc87 	uxth.w	ip, r7
 8008d1c:	fbb8 f1fe 	udiv	r1, r8, lr
 8008d20:	0c23      	lsrs	r3, r4, #16
 8008d22:	fb0e 8811 	mls	r8, lr, r1, r8
 8008d26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008d2a:	fb01 f20c 	mul.w	r2, r1, ip
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d909      	bls.n	8008d46 <__udivmoddi4+0x62>
 8008d32:	18fb      	adds	r3, r7, r3
 8008d34:	f101 30ff 	add.w	r0, r1, #4294967295
 8008d38:	f080 80ea 	bcs.w	8008f10 <__udivmoddi4+0x22c>
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	f240 80e7 	bls.w	8008f10 <__udivmoddi4+0x22c>
 8008d42:	3902      	subs	r1, #2
 8008d44:	443b      	add	r3, r7
 8008d46:	1a9a      	subs	r2, r3, r2
 8008d48:	b2a3      	uxth	r3, r4
 8008d4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8008d4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8008d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d56:	fb00 fc0c 	mul.w	ip, r0, ip
 8008d5a:	459c      	cmp	ip, r3
 8008d5c:	d909      	bls.n	8008d72 <__udivmoddi4+0x8e>
 8008d5e:	18fb      	adds	r3, r7, r3
 8008d60:	f100 32ff 	add.w	r2, r0, #4294967295
 8008d64:	f080 80d6 	bcs.w	8008f14 <__udivmoddi4+0x230>
 8008d68:	459c      	cmp	ip, r3
 8008d6a:	f240 80d3 	bls.w	8008f14 <__udivmoddi4+0x230>
 8008d6e:	443b      	add	r3, r7
 8008d70:	3802      	subs	r0, #2
 8008d72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008d76:	eba3 030c 	sub.w	r3, r3, ip
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	b11d      	cbz	r5, 8008d86 <__udivmoddi4+0xa2>
 8008d7e:	40f3      	lsrs	r3, r6
 8008d80:	2200      	movs	r2, #0
 8008d82:	e9c5 3200 	strd	r3, r2, [r5]
 8008d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8a:	428b      	cmp	r3, r1
 8008d8c:	d905      	bls.n	8008d9a <__udivmoddi4+0xb6>
 8008d8e:	b10d      	cbz	r5, 8008d94 <__udivmoddi4+0xb0>
 8008d90:	e9c5 0100 	strd	r0, r1, [r5]
 8008d94:	2100      	movs	r1, #0
 8008d96:	4608      	mov	r0, r1
 8008d98:	e7f5      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008d9a:	fab3 f183 	clz	r1, r3
 8008d9e:	2900      	cmp	r1, #0
 8008da0:	d146      	bne.n	8008e30 <__udivmoddi4+0x14c>
 8008da2:	4573      	cmp	r3, lr
 8008da4:	d302      	bcc.n	8008dac <__udivmoddi4+0xc8>
 8008da6:	4282      	cmp	r2, r0
 8008da8:	f200 8105 	bhi.w	8008fb6 <__udivmoddi4+0x2d2>
 8008dac:	1a84      	subs	r4, r0, r2
 8008dae:	eb6e 0203 	sbc.w	r2, lr, r3
 8008db2:	2001      	movs	r0, #1
 8008db4:	4690      	mov	r8, r2
 8008db6:	2d00      	cmp	r5, #0
 8008db8:	d0e5      	beq.n	8008d86 <__udivmoddi4+0xa2>
 8008dba:	e9c5 4800 	strd	r4, r8, [r5]
 8008dbe:	e7e2      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008dc0:	2a00      	cmp	r2, #0
 8008dc2:	f000 8090 	beq.w	8008ee6 <__udivmoddi4+0x202>
 8008dc6:	fab2 f682 	clz	r6, r2
 8008dca:	2e00      	cmp	r6, #0
 8008dcc:	f040 80a4 	bne.w	8008f18 <__udivmoddi4+0x234>
 8008dd0:	1a8a      	subs	r2, r1, r2
 8008dd2:	0c03      	lsrs	r3, r0, #16
 8008dd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008dd8:	b280      	uxth	r0, r0
 8008dda:	b2bc      	uxth	r4, r7
 8008ddc:	2101      	movs	r1, #1
 8008dde:	fbb2 fcfe 	udiv	ip, r2, lr
 8008de2:	fb0e 221c 	mls	r2, lr, ip, r2
 8008de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dea:	fb04 f20c 	mul.w	r2, r4, ip
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d907      	bls.n	8008e02 <__udivmoddi4+0x11e>
 8008df2:	18fb      	adds	r3, r7, r3
 8008df4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008df8:	d202      	bcs.n	8008e00 <__udivmoddi4+0x11c>
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	f200 80e0 	bhi.w	8008fc0 <__udivmoddi4+0x2dc>
 8008e00:	46c4      	mov	ip, r8
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	fbb3 f2fe 	udiv	r2, r3, lr
 8008e08:	fb0e 3312 	mls	r3, lr, r2, r3
 8008e0c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8008e10:	fb02 f404 	mul.w	r4, r2, r4
 8008e14:	429c      	cmp	r4, r3
 8008e16:	d907      	bls.n	8008e28 <__udivmoddi4+0x144>
 8008e18:	18fb      	adds	r3, r7, r3
 8008e1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8008e1e:	d202      	bcs.n	8008e26 <__udivmoddi4+0x142>
 8008e20:	429c      	cmp	r4, r3
 8008e22:	f200 80ca 	bhi.w	8008fba <__udivmoddi4+0x2d6>
 8008e26:	4602      	mov	r2, r0
 8008e28:	1b1b      	subs	r3, r3, r4
 8008e2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8008e2e:	e7a5      	b.n	8008d7c <__udivmoddi4+0x98>
 8008e30:	f1c1 0620 	rsb	r6, r1, #32
 8008e34:	408b      	lsls	r3, r1
 8008e36:	fa22 f706 	lsr.w	r7, r2, r6
 8008e3a:	431f      	orrs	r7, r3
 8008e3c:	fa0e f401 	lsl.w	r4, lr, r1
 8008e40:	fa20 f306 	lsr.w	r3, r0, r6
 8008e44:	fa2e fe06 	lsr.w	lr, lr, r6
 8008e48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008e4c:	4323      	orrs	r3, r4
 8008e4e:	fa00 f801 	lsl.w	r8, r0, r1
 8008e52:	fa1f fc87 	uxth.w	ip, r7
 8008e56:	fbbe f0f9 	udiv	r0, lr, r9
 8008e5a:	0c1c      	lsrs	r4, r3, #16
 8008e5c:	fb09 ee10 	mls	lr, r9, r0, lr
 8008e60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008e64:	fb00 fe0c 	mul.w	lr, r0, ip
 8008e68:	45a6      	cmp	lr, r4
 8008e6a:	fa02 f201 	lsl.w	r2, r2, r1
 8008e6e:	d909      	bls.n	8008e84 <__udivmoddi4+0x1a0>
 8008e70:	193c      	adds	r4, r7, r4
 8008e72:	f100 3aff 	add.w	sl, r0, #4294967295
 8008e76:	f080 809c 	bcs.w	8008fb2 <__udivmoddi4+0x2ce>
 8008e7a:	45a6      	cmp	lr, r4
 8008e7c:	f240 8099 	bls.w	8008fb2 <__udivmoddi4+0x2ce>
 8008e80:	3802      	subs	r0, #2
 8008e82:	443c      	add	r4, r7
 8008e84:	eba4 040e 	sub.w	r4, r4, lr
 8008e88:	fa1f fe83 	uxth.w	lr, r3
 8008e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8008e90:	fb09 4413 	mls	r4, r9, r3, r4
 8008e94:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8008e98:	fb03 fc0c 	mul.w	ip, r3, ip
 8008e9c:	45a4      	cmp	ip, r4
 8008e9e:	d908      	bls.n	8008eb2 <__udivmoddi4+0x1ce>
 8008ea0:	193c      	adds	r4, r7, r4
 8008ea2:	f103 3eff 	add.w	lr, r3, #4294967295
 8008ea6:	f080 8082 	bcs.w	8008fae <__udivmoddi4+0x2ca>
 8008eaa:	45a4      	cmp	ip, r4
 8008eac:	d97f      	bls.n	8008fae <__udivmoddi4+0x2ca>
 8008eae:	3b02      	subs	r3, #2
 8008eb0:	443c      	add	r4, r7
 8008eb2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008eb6:	eba4 040c 	sub.w	r4, r4, ip
 8008eba:	fba0 ec02 	umull	lr, ip, r0, r2
 8008ebe:	4564      	cmp	r4, ip
 8008ec0:	4673      	mov	r3, lr
 8008ec2:	46e1      	mov	r9, ip
 8008ec4:	d362      	bcc.n	8008f8c <__udivmoddi4+0x2a8>
 8008ec6:	d05f      	beq.n	8008f88 <__udivmoddi4+0x2a4>
 8008ec8:	b15d      	cbz	r5, 8008ee2 <__udivmoddi4+0x1fe>
 8008eca:	ebb8 0203 	subs.w	r2, r8, r3
 8008ece:	eb64 0409 	sbc.w	r4, r4, r9
 8008ed2:	fa04 f606 	lsl.w	r6, r4, r6
 8008ed6:	fa22 f301 	lsr.w	r3, r2, r1
 8008eda:	431e      	orrs	r6, r3
 8008edc:	40cc      	lsrs	r4, r1
 8008ede:	e9c5 6400 	strd	r6, r4, [r5]
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	e74f      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008ee6:	fbb1 fcf2 	udiv	ip, r1, r2
 8008eea:	0c01      	lsrs	r1, r0, #16
 8008eec:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8008ef0:	b280      	uxth	r0, r0
 8008ef2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8008ef6:	463b      	mov	r3, r7
 8008ef8:	4638      	mov	r0, r7
 8008efa:	463c      	mov	r4, r7
 8008efc:	46b8      	mov	r8, r7
 8008efe:	46be      	mov	lr, r7
 8008f00:	2620      	movs	r6, #32
 8008f02:	fbb1 f1f7 	udiv	r1, r1, r7
 8008f06:	eba2 0208 	sub.w	r2, r2, r8
 8008f0a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8008f0e:	e766      	b.n	8008dde <__udivmoddi4+0xfa>
 8008f10:	4601      	mov	r1, r0
 8008f12:	e718      	b.n	8008d46 <__udivmoddi4+0x62>
 8008f14:	4610      	mov	r0, r2
 8008f16:	e72c      	b.n	8008d72 <__udivmoddi4+0x8e>
 8008f18:	f1c6 0220 	rsb	r2, r6, #32
 8008f1c:	fa2e f302 	lsr.w	r3, lr, r2
 8008f20:	40b7      	lsls	r7, r6
 8008f22:	40b1      	lsls	r1, r6
 8008f24:	fa20 f202 	lsr.w	r2, r0, r2
 8008f28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	fbb3 f8fe 	udiv	r8, r3, lr
 8008f32:	b2bc      	uxth	r4, r7
 8008f34:	fb0e 3318 	mls	r3, lr, r8, r3
 8008f38:	0c11      	lsrs	r1, r2, #16
 8008f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008f3e:	fb08 f904 	mul.w	r9, r8, r4
 8008f42:	40b0      	lsls	r0, r6
 8008f44:	4589      	cmp	r9, r1
 8008f46:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8008f4a:	b280      	uxth	r0, r0
 8008f4c:	d93e      	bls.n	8008fcc <__udivmoddi4+0x2e8>
 8008f4e:	1879      	adds	r1, r7, r1
 8008f50:	f108 3cff 	add.w	ip, r8, #4294967295
 8008f54:	d201      	bcs.n	8008f5a <__udivmoddi4+0x276>
 8008f56:	4589      	cmp	r9, r1
 8008f58:	d81f      	bhi.n	8008f9a <__udivmoddi4+0x2b6>
 8008f5a:	eba1 0109 	sub.w	r1, r1, r9
 8008f5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8008f62:	fb09 f804 	mul.w	r8, r9, r4
 8008f66:	fb0e 1119 	mls	r1, lr, r9, r1
 8008f6a:	b292      	uxth	r2, r2
 8008f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008f70:	4542      	cmp	r2, r8
 8008f72:	d229      	bcs.n	8008fc8 <__udivmoddi4+0x2e4>
 8008f74:	18ba      	adds	r2, r7, r2
 8008f76:	f109 31ff 	add.w	r1, r9, #4294967295
 8008f7a:	d2c4      	bcs.n	8008f06 <__udivmoddi4+0x222>
 8008f7c:	4542      	cmp	r2, r8
 8008f7e:	d2c2      	bcs.n	8008f06 <__udivmoddi4+0x222>
 8008f80:	f1a9 0102 	sub.w	r1, r9, #2
 8008f84:	443a      	add	r2, r7
 8008f86:	e7be      	b.n	8008f06 <__udivmoddi4+0x222>
 8008f88:	45f0      	cmp	r8, lr
 8008f8a:	d29d      	bcs.n	8008ec8 <__udivmoddi4+0x1e4>
 8008f8c:	ebbe 0302 	subs.w	r3, lr, r2
 8008f90:	eb6c 0c07 	sbc.w	ip, ip, r7
 8008f94:	3801      	subs	r0, #1
 8008f96:	46e1      	mov	r9, ip
 8008f98:	e796      	b.n	8008ec8 <__udivmoddi4+0x1e4>
 8008f9a:	eba7 0909 	sub.w	r9, r7, r9
 8008f9e:	4449      	add	r1, r9
 8008fa0:	f1a8 0c02 	sub.w	ip, r8, #2
 8008fa4:	fbb1 f9fe 	udiv	r9, r1, lr
 8008fa8:	fb09 f804 	mul.w	r8, r9, r4
 8008fac:	e7db      	b.n	8008f66 <__udivmoddi4+0x282>
 8008fae:	4673      	mov	r3, lr
 8008fb0:	e77f      	b.n	8008eb2 <__udivmoddi4+0x1ce>
 8008fb2:	4650      	mov	r0, sl
 8008fb4:	e766      	b.n	8008e84 <__udivmoddi4+0x1a0>
 8008fb6:	4608      	mov	r0, r1
 8008fb8:	e6fd      	b.n	8008db6 <__udivmoddi4+0xd2>
 8008fba:	443b      	add	r3, r7
 8008fbc:	3a02      	subs	r2, #2
 8008fbe:	e733      	b.n	8008e28 <__udivmoddi4+0x144>
 8008fc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8008fc4:	443b      	add	r3, r7
 8008fc6:	e71c      	b.n	8008e02 <__udivmoddi4+0x11e>
 8008fc8:	4649      	mov	r1, r9
 8008fca:	e79c      	b.n	8008f06 <__udivmoddi4+0x222>
 8008fcc:	eba1 0109 	sub.w	r1, r1, r9
 8008fd0:	46c4      	mov	ip, r8
 8008fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8008fd6:	fb09 f804 	mul.w	r8, r9, r4
 8008fda:	e7c4      	b.n	8008f66 <__udivmoddi4+0x282>

08008fdc <__aeabi_idiv0>:
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop

08008fe0 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8008fe0:	b590      	push	{r4, r7, lr}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
	int len = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	7a1b      	ldrb	r3, [r3, #8]
 8008ff0:	2b03      	cmp	r3, #3
 8008ff2:	d102      	bne.n	8008ffa <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8008ff4:	230c      	movs	r3, #12
 8008ff6:	60fb      	str	r3, [r7, #12]
 8008ff8:	e005      	b.n	8009006 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	7a1b      	ldrb	r3, [r3, #8]
 8008ffe:	2b04      	cmp	r3, #4
 8009000:	d101      	bne.n	8009006 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8009002:	230a      	movs	r3, #10
 8009004:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	330c      	adds	r3, #12
 800900a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800900e:	f000 fb5e 	bl	80096ce <MQTTstrlen>
 8009012:	4603      	mov	r3, r0
 8009014:	3302      	adds	r3, #2
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	4413      	add	r3, r2
 800901a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	7edb      	ldrb	r3, [r3, #27]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d013      	beq.n	800904c <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	3324      	adds	r3, #36	@ 0x24
 8009028:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800902c:	f000 fb4f 	bl	80096ce <MQTTstrlen>
 8009030:	4603      	mov	r3, r0
 8009032:	1c9c      	adds	r4, r3, #2
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3330      	adds	r3, #48	@ 0x30
 8009038:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800903c:	f000 fb47 	bl	80096ce <MQTTstrlen>
 8009040:	4603      	mov	r3, r0
 8009042:	4423      	add	r3, r4
 8009044:	3302      	adds	r3, #2
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	4413      	add	r3, r2
 800904a:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009050:	2b00      	cmp	r3, #0
 8009052:	d103      	bne.n	800905c <MQTTSerialize_connectLength+0x7c>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00a      	beq.n	8009072 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	3340      	adds	r3, #64	@ 0x40
 8009060:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009064:	f000 fb33 	bl	80096ce <MQTTstrlen>
 8009068:	4603      	mov	r3, r0
 800906a:	3302      	adds	r3, #2
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	4413      	add	r3, r2
 8009070:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009076:	2b00      	cmp	r3, #0
 8009078:	d103      	bne.n	8009082 <MQTTSerialize_connectLength+0xa2>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00a      	beq.n	8009098 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	334c      	adds	r3, #76	@ 0x4c
 8009086:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800908a:	f000 fb20 	bl	80096ce <MQTTstrlen>
 800908e:	4603      	mov	r3, r0
 8009090:	3302      	adds	r3, #2
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	4413      	add	r3, r2
 8009096:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8009098:	68fb      	ldr	r3, [r7, #12]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3714      	adds	r7, #20
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd90      	pop	{r4, r7, pc}
	...

080090a4 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b08a      	sub	sp, #40	@ 0x28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 80090b4:	2300      	movs	r3, #0
 80090b6:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 80090b8:	2300      	movs	r3, #0
 80090ba:	617b      	str	r3, [r7, #20]
	int len = 0;
 80090bc:	2300      	movs	r3, #0
 80090be:	623b      	str	r3, [r7, #32]
	int rc = -1;
 80090c0:	f04f 33ff 	mov.w	r3, #4294967295
 80090c4:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7ff ff8a 	bl	8008fe0 <MQTTSerialize_connectLength>
 80090cc:	6238      	str	r0, [r7, #32]
 80090ce:	6a38      	ldr	r0, [r7, #32]
 80090d0:	f000 f9b2 	bl	8009438 <MQTTPacket_len>
 80090d4:	4602      	mov	r2, r0
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	4293      	cmp	r3, r2
 80090da:	da03      	bge.n	80090e4 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80090dc:	f06f 0301 	mvn.w	r3, #1
 80090e0:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 80090e2:	e0c2      	b.n	800926a <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 80090e4:	2300      	movs	r3, #0
 80090e6:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 80090e8:	7e3b      	ldrb	r3, [r7, #24]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f362 1307 	bfi	r3, r2, #4, #4
 80090f0:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80090f2:	7e3a      	ldrb	r2, [r7, #24]
 80090f4:	f107 031c 	add.w	r3, r7, #28
 80090f8:	4611      	mov	r1, r2
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 fa2b 	bl	8009556 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	6a39      	ldr	r1, [r7, #32]
 8009104:	4618      	mov	r0, r3
 8009106:	f000 f92b 	bl	8009360 <MQTTPacket_encode>
 800910a:	4602      	mov	r2, r0
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	4413      	add	r3, r2
 8009110:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	7a1b      	ldrb	r3, [r3, #8]
 8009116:	2b04      	cmp	r3, #4
 8009118:	d10c      	bne.n	8009134 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800911a:	f107 031c 	add.w	r3, r7, #28
 800911e:	4955      	ldr	r1, [pc, #340]	@ (8009274 <MQTTSerialize_connect+0x1d0>)
 8009120:	4618      	mov	r0, r3
 8009122:	f000 fa56 	bl	80095d2 <writeCString>
		writeChar(&ptr, (char) 4);
 8009126:	f107 031c 	add.w	r3, r7, #28
 800912a:	2104      	movs	r1, #4
 800912c:	4618      	mov	r0, r3
 800912e:	f000 fa12 	bl	8009556 <writeChar>
 8009132:	e00b      	b.n	800914c <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8009134:	f107 031c 	add.w	r3, r7, #28
 8009138:	494f      	ldr	r1, [pc, #316]	@ (8009278 <MQTTSerialize_connect+0x1d4>)
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fa49 	bl	80095d2 <writeCString>
		writeChar(&ptr, (char) 3);
 8009140:	f107 031c 	add.w	r3, r7, #28
 8009144:	2103      	movs	r1, #3
 8009146:	4618      	mov	r0, r3
 8009148:	f000 fa05 	bl	8009556 <writeChar>
	}

	flags.all = 0;
 800914c:	2300      	movs	r3, #0
 800914e:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	7e9b      	ldrb	r3, [r3, #26]
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	b2da      	uxtb	r2, r3
 800915a:	7d3b      	ldrb	r3, [r7, #20]
 800915c:	f362 0341 	bfi	r3, r2, #1, #1
 8009160:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	7edb      	ldrb	r3, [r3, #27]
 8009166:	2b00      	cmp	r3, #0
 8009168:	bf14      	ite	ne
 800916a:	2301      	movne	r3, #1
 800916c:	2300      	moveq	r3, #0
 800916e:	b2da      	uxtb	r2, r3
 8009170:	7d3b      	ldrb	r3, [r7, #20]
 8009172:	f362 0382 	bfi	r3, r2, #2, #1
 8009176:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8009178:	7d3b      	ldrb	r3, [r7, #20]
 800917a:	f003 0304 	and.w	r3, r3, #4
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b00      	cmp	r3, #0
 8009182:	d013      	beq.n	80091ac <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800918a:	f003 0303 	and.w	r3, r3, #3
 800918e:	b2da      	uxtb	r2, r3
 8009190:	7d3b      	ldrb	r3, [r7, #20]
 8009192:	f362 03c4 	bfi	r3, r2, #3, #2
 8009196:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800919e:	f003 0301 	and.w	r3, r3, #1
 80091a2:	b2da      	uxtb	r2, r3
 80091a4:	7d3b      	ldrb	r3, [r7, #20]
 80091a6:	f362 1345 	bfi	r3, r2, #5, #1
 80091aa:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d103      	bne.n	80091bc <MQTTSerialize_connect+0x118>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d003      	beq.n	80091c4 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 80091bc:	7d3b      	ldrb	r3, [r7, #20]
 80091be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091c2:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d103      	bne.n	80091d4 <MQTTSerialize_connect+0x130>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d003      	beq.n	80091dc <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 80091d4:	7d3b      	ldrb	r3, [r7, #20]
 80091d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091da:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 80091dc:	7d3a      	ldrb	r2, [r7, #20]
 80091de:	f107 031c 	add.w	r3, r7, #28
 80091e2:	4611      	mov	r1, r2
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 f9b6 	bl	8009556 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	8b1b      	ldrh	r3, [r3, #24]
 80091ee:	461a      	mov	r2, r3
 80091f0:	f107 031c 	add.w	r3, r7, #28
 80091f4:	4611      	mov	r1, r2
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 f9c2 	bl	8009580 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f107 001c 	add.w	r0, r7, #28
 8009202:	330c      	adds	r3, #12
 8009204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009206:	f000 fa03 	bl	8009610 <writeMQTTString>
	if (options->willFlag)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	7edb      	ldrb	r3, [r3, #27]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00d      	beq.n	800922e <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f107 001c 	add.w	r0, r7, #28
 8009218:	3324      	adds	r3, #36	@ 0x24
 800921a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800921c:	f000 f9f8 	bl	8009610 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f107 001c 	add.w	r0, r7, #28
 8009226:	3330      	adds	r3, #48	@ 0x30
 8009228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800922a:	f000 f9f1 	bl	8009610 <writeMQTTString>
	}
	if (flags.bits.username)
 800922e:	7d3b      	ldrb	r3, [r7, #20]
 8009230:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b00      	cmp	r3, #0
 8009238:	d006      	beq.n	8009248 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f107 001c 	add.w	r0, r7, #28
 8009240:	3340      	adds	r3, #64	@ 0x40
 8009242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009244:	f000 f9e4 	bl	8009610 <writeMQTTString>
	if (flags.bits.password)
 8009248:	7d3b      	ldrb	r3, [r7, #20]
 800924a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800924e:	b2db      	uxtb	r3, r3
 8009250:	2b00      	cmp	r3, #0
 8009252:	d006      	beq.n	8009262 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f107 001c 	add.w	r0, r7, #28
 800925a:	334c      	adds	r3, #76	@ 0x4c
 800925c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800925e:	f000 f9d7 	bl	8009610 <writeMQTTString>

	rc = ptr - buf;
 8009262:	69fa      	ldr	r2, [r7, #28]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800926a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800926c:	4618      	mov	r0, r3
 800926e:	3728      	adds	r7, #40	@ 0x28
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	0801b680 	.word	0x0801b680
 8009278:	0801b688 	.word	0x0801b688

0800927c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08a      	sub	sp, #40	@ 0x28
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800928a:	2300      	movs	r3, #0
 800928c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800928e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009290:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8009292:	2300      	movs	r3, #0
 8009294:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 800929a:	2300      	movs	r3, #0
 800929c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800929e:	f107 0318 	add.w	r3, r7, #24
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 f943 	bl	800952e <readChar>
 80092a8:	4603      	mov	r3, r0
 80092aa:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 80092ac:	7f3b      	ldrb	r3, [r7, #28]
 80092ae:	f023 030f 	bic.w	r3, r3, #15
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b30      	cmp	r3, #48	@ 0x30
 80092b6:	d14b      	bne.n	8009350 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 80092b8:	7f3b      	ldrb	r3, [r7, #28]
 80092ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	461a      	mov	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 80092c6:	7f3b      	ldrb	r3, [r7, #28]
 80092c8:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	461a      	mov	r2, r3
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 80092d4:	7f3b      	ldrb	r3, [r7, #28]
 80092d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	461a      	mov	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen));
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	f107 0214 	add.w	r2, r7, #20
 80092e8:	4611      	mov	r1, r2
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 f8ee 	bl	80094cc <MQTTPacket_decodeBuf>
 80092f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80092f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	4413      	add	r3, r2
 80092f8:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	4413      	add	r3, r2
 8009300:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8009302:	f107 0318 	add.w	r3, r7, #24
 8009306:	6a3a      	ldr	r2, [r7, #32]
 8009308:	4619      	mov	r1, r3
 800930a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800930c:	f000 f9ae 	bl	800966c <readMQTTLenString>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d01e      	beq.n	8009354 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0)
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	6a3a      	ldr	r2, [r7, #32]
 800931a:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800931c:	2b00      	cmp	r3, #0
 800931e:	db19      	blt.n	8009354 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	dd08      	ble.n	800933a <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8009328:	f107 0318 	add.w	r3, r7, #24
 800932c:	4618      	mov	r0, r3
 800932e:	f000 f8e3 	bl	80094f8 <readInt>
 8009332:	4603      	mov	r3, r0
 8009334:	b29a      	uxth	r2, r3
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	6a3a      	ldr	r2, [r7, #32]
 800933e:	1ad2      	subs	r2, r2, r3
 8009340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009342:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8009344:	69ba      	ldr	r2, [r7, #24]
 8009346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009348:	601a      	str	r2, [r3, #0]
	rc = 1;
 800934a:	2301      	movs	r3, #1
 800934c:	627b      	str	r3, [r7, #36]	@ 0x24
 800934e:	e002      	b.n	8009356 <MQTTDeserialize_publish+0xda>
		goto exit;
 8009350:	bf00      	nop
 8009352:	e000      	b.n	8009356 <MQTTDeserialize_publish+0xda>
		goto exit;
 8009354:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8009356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009358:	4618      	mov	r0, r3
 800935a:	3728      	adds	r7, #40	@ 0x28
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800936a:	2300      	movs	r3, #0
 800936c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	425a      	negs	r2, r3
 8009372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009376:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800937a:	bf58      	it	pl
 800937c:	4253      	negpl	r3, r2
 800937e:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	da00      	bge.n	8009388 <MQTTPacket_encode+0x28>
 8009386:	337f      	adds	r3, #127	@ 0x7f
 8009388:	11db      	asrs	r3, r3, #7
 800938a:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	dd03      	ble.n	800939a <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8009392:	7afb      	ldrb	r3, [r7, #11]
 8009394:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009398:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	1c5a      	adds	r2, r3, #1
 800939e:	60fa      	str	r2, [r7, #12]
 80093a0:	461a      	mov	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4413      	add	r3, r2
 80093a6:	7afa      	ldrb	r2, [r7, #11]
 80093a8:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	dcde      	bgt.n	800936e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 80093b0:	68fb      	ldr	r3, [r7, #12]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3714      	adds	r7, #20
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b086      	sub	sp, #24
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 80093c8:	2301      	movs	r3, #1
 80093ca:	617b      	str	r3, [r7, #20]
	int len = 0;
 80093cc:	2300      	movs	r3, #0
 80093ce:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	2200      	movs	r2, #0
 80093d4:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 80093d6:	f04f 33ff 	mov.w	r3, #4294967295
 80093da:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	3301      	adds	r3, #1
 80093e0:	613b      	str	r3, [r7, #16]
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	2b04      	cmp	r3, #4
 80093e6:	dd03      	ble.n	80093f0 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 80093e8:	f04f 33ff 	mov.w	r3, #4294967295
 80093ec:	60fb      	str	r3, [r7, #12]
			goto exit;
 80093ee:	e01d      	b.n	800942c <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 80093f0:	f107 020b 	add.w	r2, r7, #11
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2101      	movs	r1, #1
 80093f8:	4610      	mov	r0, r2
 80093fa:	4798      	blx	r3
 80093fc:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d112      	bne.n	800942a <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	7afb      	ldrb	r3, [r7, #11]
 800940a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800940e:	6979      	ldr	r1, [r7, #20]
 8009410:	fb01 f303 	mul.w	r3, r1, r3
 8009414:	441a      	add	r2, r3
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	01db      	lsls	r3, r3, #7
 800941e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8009420:	7afb      	ldrb	r3, [r7, #11]
 8009422:	b25b      	sxtb	r3, r3
 8009424:	2b00      	cmp	r3, #0
 8009426:	dbd6      	blt.n	80093d6 <MQTTPacket_decode+0x18>
exit:
 8009428:	e000      	b.n	800942c <MQTTPacket_decode+0x6e>
			goto exit;
 800942a:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800942c:	693b      	ldr	r3, [r7, #16]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3718      	adds	r7, #24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
	...

08009438 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3301      	adds	r3, #1
 8009444:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2b7f      	cmp	r3, #127	@ 0x7f
 800944a:	dc03      	bgt.n	8009454 <MQTTPacket_len+0x1c>
		rem_len += 1;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	3301      	adds	r3, #1
 8009450:	607b      	str	r3, [r7, #4]
 8009452:	e012      	b.n	800947a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800945a:	da03      	bge.n	8009464 <MQTTPacket_len+0x2c>
		rem_len += 2;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	3302      	adds	r3, #2
 8009460:	607b      	str	r3, [r7, #4]
 8009462:	e00a      	b.n	800947a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a08      	ldr	r2, [pc, #32]	@ (8009488 <MQTTPacket_len+0x50>)
 8009468:	4293      	cmp	r3, r2
 800946a:	dc03      	bgt.n	8009474 <MQTTPacket_len+0x3c>
		rem_len += 3;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	3303      	adds	r3, #3
 8009470:	607b      	str	r3, [r7, #4]
 8009472:	e002      	b.n	800947a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	3304      	adds	r3, #4
 8009478:	607b      	str	r3, [r7, #4]
	return rem_len;
 800947a:	687b      	ldr	r3, [r7, #4]
}
 800947c:	4618      	mov	r0, r3
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	001ffffe 	.word	0x001ffffe

0800948c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8009496:	2300      	movs	r3, #0
 8009498:	60fb      	str	r3, [r7, #12]
 800949a:	e00a      	b.n	80094b2 <bufchar+0x26>
		*c = *bufptr++;
 800949c:	4b0a      	ldr	r3, [pc, #40]	@ (80094c8 <bufchar+0x3c>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	1c5a      	adds	r2, r3, #1
 80094a2:	4909      	ldr	r1, [pc, #36]	@ (80094c8 <bufchar+0x3c>)
 80094a4:	600a      	str	r2, [r1, #0]
 80094a6:	781a      	ldrb	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3301      	adds	r3, #1
 80094b0:	60fb      	str	r3, [r7, #12]
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	dbf0      	blt.n	800949c <bufchar+0x10>
	return count;
 80094ba:	683b      	ldr	r3, [r7, #0]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	2000026c 	.word	0x2000026c

080094cc <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 80094d6:	4a06      	ldr	r2, [pc, #24]	@ (80094f0 <MQTTPacket_decodeBuf+0x24>)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	4805      	ldr	r0, [pc, #20]	@ (80094f4 <MQTTPacket_decodeBuf+0x28>)
 80094e0:	f7ff ff6d 	bl	80093be <MQTTPacket_decode>
 80094e4:	4603      	mov	r3, r0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	2000026c 	.word	0x2000026c
 80094f4:	0800948d 	.word	0x0800948d

080094f8 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	021b      	lsls	r3, r3, #8
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	3201      	adds	r2, #1
 8009510:	7812      	ldrb	r2, [r2, #0]
 8009512:	4413      	add	r3, r2
 8009514:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	1c9a      	adds	r2, r3, #2
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	601a      	str	r2, [r3, #0]
	return len;
 8009520:	68bb      	ldr	r3, [r7, #8]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3714      	adds	r7, #20
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr

0800952e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800952e:	b480      	push	{r7}
 8009530:	b085      	sub	sp, #20
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	601a      	str	r2, [r3, #0]
	return c;
 8009548:	7bfb      	ldrb	r3, [r7, #15]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3714      	adds	r7, #20
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	460b      	mov	r3, r1
 8009560:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	78fa      	ldrb	r2, [r7, #3]
 8009568:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	1c5a      	adds	r2, r3, #1
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	601a      	str	r2, [r3, #0]
}
 8009574:	bf00      	nop
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	da00      	bge.n	8009592 <writeInt+0x12>
 8009590:	33ff      	adds	r3, #255	@ 0xff
 8009592:	121b      	asrs	r3, r3, #8
 8009594:	461a      	mov	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	b2d2      	uxtb	r2, r2
 800959c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	1c5a      	adds	r2, r3, #1
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	425a      	negs	r2, r3
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	b2d2      	uxtb	r2, r2
 80095b0:	bf58      	it	pl
 80095b2:	4253      	negpl	r3, r2
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	6812      	ldr	r2, [r2, #0]
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	1c5a      	adds	r2, r3, #1
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	601a      	str	r2, [r3, #0]
}
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b084      	sub	sp, #16
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 80095dc:	6838      	ldr	r0, [r7, #0]
 80095de:	f7fe fe77 	bl	80082d0 <strlen>
 80095e2:	4603      	mov	r3, r0
 80095e4:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 80095e6:	68f9      	ldr	r1, [r7, #12]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f7ff ffc9 	bl	8009580 <writeInt>
	memcpy(*pptr, string, len);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	6839      	ldr	r1, [r7, #0]
 80095f6:	4618      	mov	r0, r3
 80095f8:	f00f f873 	bl	80186e2 <memcpy>
	*pptr += len;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	441a      	add	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	601a      	str	r2, [r3, #0]
}
 8009608:	bf00      	nop
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	4638      	mov	r0, r7
 800961a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	dd12      	ble.n	800964a <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4619      	mov	r1, r3
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f7ff ffa9 	bl	8009580 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68b9      	ldr	r1, [r7, #8]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	4618      	mov	r0, r3
 8009638:	f00f f853 	bl	80186e2 <memcpy>
		*pptr += mqttstring.lenstring.len;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	441a      	add	r2, r3
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8009648:	e00c      	b.n	8009664 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d005      	beq.n	800965c <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	4619      	mov	r1, r3
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f7ff ffbc 	bl	80095d2 <writeCString>
}
 800965a:	e003      	b.n	8009664 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 800965c:	2100      	movs	r1, #0
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f7ff ff8e 	bl	8009580 <writeInt>
}
 8009664:	bf00      	nop
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	2b01      	cmp	r3, #1
 8009686:	dd1a      	ble.n	80096be <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8009688:	68b8      	ldr	r0, [r7, #8]
 800968a:	f7ff ff35 	bl	80094f8 <readInt>
 800968e:	4602      	mov	r2, r0
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	6852      	ldr	r2, [r2, #4]
 800969c:	4413      	add	r3, r2
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d30c      	bcc.n	80096be <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	6852      	ldr	r2, [r2, #4]
 80096b4:	441a      	add	r2, r3
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	601a      	str	r2, [r3, #0]
			rc = 1;
 80096ba:	2301      	movs	r3, #1
 80096bc:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 80096c4:	697b      	ldr	r3, [r7, #20]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b086      	sub	sp, #24
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	1d3b      	adds	r3, r7, #4
 80096d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d006      	beq.n	80096f2 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fe fdf2 	bl	80082d0 <strlen>
 80096ec:	4603      	mov	r3, r0
 80096ee:	617b      	str	r3, [r7, #20]
 80096f0:	e001      	b.n	80096f6 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	617b      	str	r3, [r7, #20]
	return rc;
 80096f6:	697b      	ldr	r3, [r7, #20]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3718      	adds	r7, #24
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	4638      	mov	r0, r7
 800970a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 800970e:	2300      	movs	r3, #0
 8009710:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8009712:	463b      	mov	r3, r7
 8009714:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009718:	f7ff ffd9 	bl	80096ce <MQTTstrlen>
 800971c:	4603      	mov	r3, r0
 800971e:	1c9a      	adds	r2, r3, #2
 8009720:	6a3b      	ldr	r3, [r7, #32]
 8009722:	4413      	add	r3, r2
 8009724:	697a      	ldr	r2, [r7, #20]
 8009726:	4413      	add	r3, r2
 8009728:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2b00      	cmp	r3, #0
 800972e:	dd02      	ble.n	8009736 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	3302      	adds	r3, #2
 8009734:	617b      	str	r3, [r7, #20]
	return len;
 8009736:	697b      	ldr	r3, [r7, #20]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3718      	adds	r7, #24
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b08a      	sub	sp, #40	@ 0x28
 8009744:	af02      	add	r7, sp, #8
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	603b      	str	r3, [r7, #0]
 800974c:	4613      	mov	r3, r2
 800974e:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8009754:	2300      	movs	r3, #0
 8009756:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8009758:	2300      	movs	r3, #0
 800975a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800975c:	2300      	movs	r3, #0
 800975e:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8009760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009768:	cb0e      	ldmia	r3, {r1, r2, r3}
 800976a:	6838      	ldr	r0, [r7, #0]
 800976c:	f7ff ffc8 	bl	8009700 <MQTTSerialize_publishLength>
 8009770:	61b8      	str	r0, [r7, #24]
 8009772:	69b8      	ldr	r0, [r7, #24]
 8009774:	f7ff fe60 	bl	8009438 <MQTTPacket_len>
 8009778:	4602      	mov	r2, r0
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	4293      	cmp	r3, r2
 800977e:	da03      	bge.n	8009788 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8009780:	f06f 0301 	mvn.w	r3, #1
 8009784:	61fb      	str	r3, [r7, #28]
		goto exit;
 8009786:	e04c      	b.n	8009822 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 8009788:	7c3b      	ldrb	r3, [r7, #16]
 800978a:	2203      	movs	r2, #3
 800978c:	f362 1307 	bfi	r3, r2, #4, #4
 8009790:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8009792:	79fb      	ldrb	r3, [r7, #7]
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	b2da      	uxtb	r2, r3
 800979a:	7c3b      	ldrb	r3, [r7, #16]
 800979c:	f362 03c3 	bfi	r3, r2, #3, #1
 80097a0:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	f003 0303 	and.w	r3, r3, #3
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	7c3b      	ldrb	r3, [r7, #16]
 80097ac:	f362 0342 	bfi	r3, r2, #1, #2
 80097b0:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 80097b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	b2da      	uxtb	r2, r3
 80097bc:	7c3b      	ldrb	r3, [r7, #16]
 80097be:	f362 0300 	bfi	r3, r2, #0, #1
 80097c2:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 80097c4:	7c3a      	ldrb	r2, [r7, #16]
 80097c6:	f107 0314 	add.w	r3, r7, #20
 80097ca:	4611      	mov	r1, r2
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7ff fec2 	bl	8009556 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	69b9      	ldr	r1, [r7, #24]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7ff fdc2 	bl	8009360 <MQTTPacket_encode>
 80097dc:	4602      	mov	r2, r0
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	4413      	add	r3, r2
 80097e2:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 80097e4:	f107 0014 	add.w	r0, r7, #20
 80097e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80097ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097ee:	f7ff ff0f 	bl	8009610 <writeMQTTString>

	if (qos > 0)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	dd06      	ble.n	8009806 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 80097f8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80097fa:	f107 0314 	add.w	r3, r7, #20
 80097fe:	4611      	mov	r1, r2
 8009800:	4618      	mov	r0, r3
 8009802:	f7ff febd 	bl	8009580 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800980a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800980c:	4618      	mov	r0, r3
 800980e:	f00e ff68 	bl	80186e2 <memcpy>
	ptr += payloadlen;
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009816:	4413      	add	r3, r2
 8009818:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8009822:	69fb      	ldr	r3, [r7, #28]
}
 8009824:	4618      	mov	r0, r3
 8009826:	3720      	adds	r7, #32
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <SIM800_MQTT_StateMachineHandler>:

mqtt_state_t mqttState = MQTT_STATE_INIT;
int mqttError = 0;

void SIM800_MQTT_StateMachineHandler(void)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b0ba      	sub	sp, #232	@ 0xe8
 8009830:	af02      	add	r7, sp, #8
	char str[128] = {0};
 8009832:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009836:	2280      	movs	r2, #128	@ 0x80
 8009838:	2100      	movs	r1, #0
 800983a:	4618      	mov	r0, r3
 800983c:	f00e fe7e 	bl	801853c <memset>
	static uint8_t tcp_wait_counter = 0;

	switch(mqttState)
 8009840:	4b97      	ldr	r3, [pc, #604]	@ (8009aa0 <SIM800_MQTT_StateMachineHandler+0x274>)
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	2b0a      	cmp	r3, #10
 8009846:	f200 8127 	bhi.w	8009a98 <SIM800_MQTT_StateMachineHandler+0x26c>
 800984a:	a201      	add	r2, pc, #4	@ (adr r2, 8009850 <SIM800_MQTT_StateMachineHandler+0x24>)
 800984c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009850:	0800987d 	.word	0x0800987d
 8009854:	080098d7 	.word	0x080098d7
 8009858:	0800990f 	.word	0x0800990f
 800985c:	08009951 	.word	0x08009951
 8009860:	08009971 	.word	0x08009971
 8009864:	08009985 	.word	0x08009985
 8009868:	080099cf 	.word	0x080099cf
 800986c:	08009a11 	.word	0x08009a11
 8009870:	08009a75 	.word	0x08009a75
 8009874:	08009a97 	.word	0x08009a97
 8009878:	08009a83 	.word	0x08009a83
	{
		case MQTT_STATE_INIT:
			HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 800987c:	2201      	movs	r2, #1
 800987e:	4989      	ldr	r1, [pc, #548]	@ (8009aa4 <SIM800_MQTT_StateMachineHandler+0x278>)
 8009880:	4889      	ldr	r0, [pc, #548]	@ (8009aa8 <SIM800_MQTT_StateMachineHandler+0x27c>)
 8009882:	f009 f82e 	bl	80128e2 <HAL_UART_Receive_IT>
			mqttError = SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY);
 8009886:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800988a:	4988      	ldr	r1, [pc, #544]	@ (8009aac <SIM800_MQTT_StateMachineHandler+0x280>)
 800988c:	4888      	ldr	r0, [pc, #544]	@ (8009ab0 <SIM800_MQTT_StateMachineHandler+0x284>)
 800988e:	f000 fa31 	bl	8009cf4 <SIM800_SendCommand>
 8009892:	4603      	mov	r3, r0
 8009894:	4a87      	ldr	r2, [pc, #540]	@ (8009ab4 <SIM800_MQTT_StateMachineHandler+0x288>)
 8009896:	6013      	str	r3, [r2, #0]
			mqttError += SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY);
 8009898:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800989c:	4983      	ldr	r1, [pc, #524]	@ (8009aac <SIM800_MQTT_StateMachineHandler+0x280>)
 800989e:	4886      	ldr	r0, [pc, #536]	@ (8009ab8 <SIM800_MQTT_StateMachineHandler+0x28c>)
 80098a0:	f000 fa28 	bl	8009cf4 <SIM800_SendCommand>
 80098a4:	4602      	mov	r2, r0
 80098a6:	4b83      	ldr	r3, [pc, #524]	@ (8009ab4 <SIM800_MQTT_StateMachineHandler+0x288>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4413      	add	r3, r2
 80098ac:	4a81      	ldr	r2, [pc, #516]	@ (8009ab4 <SIM800_MQTT_StateMachineHandler+0x288>)
 80098ae:	6013      	str	r3, [r2, #0]
			mqttError += SIM800_SendCommand("AT+CIPSHUT\r\n", "SHUT OK\r\n", CMD_DELAY);
 80098b0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80098b4:	4981      	ldr	r1, [pc, #516]	@ (8009abc <SIM800_MQTT_StateMachineHandler+0x290>)
 80098b6:	4882      	ldr	r0, [pc, #520]	@ (8009ac0 <SIM800_MQTT_StateMachineHandler+0x294>)
 80098b8:	f000 fa1c 	bl	8009cf4 <SIM800_SendCommand>
 80098bc:	4602      	mov	r2, r0
 80098be:	4b7d      	ldr	r3, [pc, #500]	@ (8009ab4 <SIM800_MQTT_StateMachineHandler+0x288>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4413      	add	r3, r2
 80098c4:	4a7b      	ldr	r2, [pc, #492]	@ (8009ab4 <SIM800_MQTT_StateMachineHandler+0x288>)
 80098c6:	6013      	str	r3, [r2, #0]
			safe_printf("SIM800 Init Done\r\n");
 80098c8:	487e      	ldr	r0, [pc, #504]	@ (8009ac4 <SIM800_MQTT_StateMachineHandler+0x298>)
 80098ca:	f006 fb25 	bl	800ff18 <safe_printf>
			mqttState = MQTT_STATE_CGATT_ATTACH;
 80098ce:	4b74      	ldr	r3, [pc, #464]	@ (8009aa0 <SIM800_MQTT_StateMachineHandler+0x274>)
 80098d0:	2201      	movs	r2, #1
 80098d2:	701a      	strb	r2, [r3, #0]
			break;
 80098d4:	e0e0      	b.n	8009a98 <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_CGATT_ATTACH:
			mqttError += SIM800_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
 80098d6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80098da:	4974      	ldr	r1, [pc, #464]	@ (8009aac <SIM800_MQTT_StateMachineHandler+0x280>)
 80098dc:	487a      	ldr	r0, [pc, #488]	@ (8009ac8 <SIM800_MQTT_StateMachineHandler+0x29c>)
 80098de:	f000 fa09 	bl	8009cf4 <SIM800_SendCommand>
 80098e2:	4602      	mov	r2, r0
 80098e4:	4b73      	ldr	r3, [pc, #460]	@ (8009ab4 <SIM800_MQTT_StateMachineHandler+0x288>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4413      	add	r3, r2
 80098ea:	4a72      	ldr	r2, [pc, #456]	@ (8009ab4 <SIM800_MQTT_StateMachineHandler+0x288>)
 80098ec:	6013      	str	r3, [r2, #0]
			mqttError += SIM800_SendCommand("AT+CIPMODE=1\r\n", "OK\r\n", CMD_DELAY);
 80098ee:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80098f2:	496e      	ldr	r1, [pc, #440]	@ (8009aac <SIM800_MQTT_StateMachineHandler+0x280>)
 80098f4:	4875      	ldr	r0, [pc, #468]	@ (8009acc <SIM800_MQTT_StateMachineHandler+0x2a0>)
 80098f6:	f000 f9fd 	bl	8009cf4 <SIM800_SendCommand>
 80098fa:	4602      	mov	r2, r0
 80098fc:	4b6d      	ldr	r3, [pc, #436]	@ (8009ab4 <SIM800_MQTT_StateMachineHandler+0x288>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4413      	add	r3, r2
 8009902:	4a6c      	ldr	r2, [pc, #432]	@ (8009ab4 <SIM800_MQTT_StateMachineHandler+0x288>)
 8009904:	6013      	str	r3, [r2, #0]
			mqttState = MQTT_STATE_APN_CONFIG;
 8009906:	4b66      	ldr	r3, [pc, #408]	@ (8009aa0 <SIM800_MQTT_StateMachineHandler+0x274>)
 8009908:	2202      	movs	r2, #2
 800990a:	701a      	strb	r2, [r3, #0]
			break;
 800990c:	e0c4      	b.n	8009a98 <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_APN_CONFIG:
			snprintf(str, sizeof(str), "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n",
 800990e:	4b70      	ldr	r3, [pc, #448]	@ (8009ad0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 8009910:	6819      	ldr	r1, [r3, #0]
 8009912:	4b6f      	ldr	r3, [pc, #444]	@ (8009ad0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	4a6e      	ldr	r2, [pc, #440]	@ (8009ad0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 8009918:	6892      	ldr	r2, [r2, #8]
 800991a:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800991e:	9201      	str	r2, [sp, #4]
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	460b      	mov	r3, r1
 8009924:	4a6b      	ldr	r2, [pc, #428]	@ (8009ad4 <SIM800_MQTT_StateMachineHandler+0x2a8>)
 8009926:	2180      	movs	r1, #128	@ 0x80
 8009928:	f00e fc6e 	bl	8018208 <sniprintf>
					 SIM800.sim.apn, SIM800.sim.apn_user, SIM800.sim.apn_pass);
			mqttError += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 800992c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009930:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8009934:	495d      	ldr	r1, [pc, #372]	@ (8009aac <SIM800_MQTT_StateMachineHandler+0x280>)
 8009936:	4618      	mov	r0, r3
 8009938:	f000 f9dc 	bl	8009cf4 <SIM800_SendCommand>
 800993c:	4602      	mov	r2, r0
 800993e:	4b5d      	ldr	r3, [pc, #372]	@ (8009ab4 <SIM800_MQTT_StateMachineHandler+0x288>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4413      	add	r3, r2
 8009944:	4a5b      	ldr	r2, [pc, #364]	@ (8009ab4 <SIM800_MQTT_StateMachineHandler+0x288>)
 8009946:	6013      	str	r3, [r2, #0]
			mqttState = MQTT_STATE_CIICR_BRINGUP;
 8009948:	4b55      	ldr	r3, [pc, #340]	@ (8009aa0 <SIM800_MQTT_StateMachineHandler+0x274>)
 800994a:	2203      	movs	r2, #3
 800994c:	701a      	strb	r2, [r3, #0]
			break;
 800994e:	e0a3      	b.n	8009a98 <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_CIICR_BRINGUP:
			mqttError += SIM800_SendCommand("AT+CIICR\r\n", "OK\r\n", CMD_DELAY);
 8009950:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8009954:	4955      	ldr	r1, [pc, #340]	@ (8009aac <SIM800_MQTT_StateMachineHandler+0x280>)
 8009956:	4860      	ldr	r0, [pc, #384]	@ (8009ad8 <SIM800_MQTT_StateMachineHandler+0x2ac>)
 8009958:	f000 f9cc 	bl	8009cf4 <SIM800_SendCommand>
 800995c:	4602      	mov	r2, r0
 800995e:	4b55      	ldr	r3, [pc, #340]	@ (8009ab4 <SIM800_MQTT_StateMachineHandler+0x288>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4413      	add	r3, r2
 8009964:	4a53      	ldr	r2, [pc, #332]	@ (8009ab4 <SIM800_MQTT_StateMachineHandler+0x288>)
 8009966:	6013      	str	r3, [r2, #0]
			mqttState = MQTT_STATE_GET_IP;
 8009968:	4b4d      	ldr	r3, [pc, #308]	@ (8009aa0 <SIM800_MQTT_StateMachineHandler+0x274>)
 800996a:	2204      	movs	r2, #4
 800996c:	701a      	strb	r2, [r3, #0]
			break;
 800996e:	e093      	b.n	8009a98 <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_GET_IP:
			SIM800_SendCommand("AT+CIFSR\r\n", "", CMD_DELAY);
 8009970:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8009974:	4959      	ldr	r1, [pc, #356]	@ (8009adc <SIM800_MQTT_StateMachineHandler+0x2b0>)
 8009976:	485a      	ldr	r0, [pc, #360]	@ (8009ae0 <SIM800_MQTT_StateMachineHandler+0x2b4>)
 8009978:	f000 f9bc 	bl	8009cf4 <SIM800_SendCommand>
			mqttState = MQTT_STATE_TCP_CONNECT;
 800997c:	4b48      	ldr	r3, [pc, #288]	@ (8009aa0 <SIM800_MQTT_StateMachineHandler+0x274>)
 800997e:	2205      	movs	r2, #5
 8009980:	701a      	strb	r2, [r3, #0]
			break;
 8009982:	e089      	b.n	8009a98 <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_TCP_CONNECT:
			sprintf(str, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", SIM800.mqttServer.host, SIM800.mqttServer.port);
 8009984:	4b52      	ldr	r3, [pc, #328]	@ (8009ad0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 8009986:	68da      	ldr	r2, [r3, #12]
 8009988:	4b51      	ldr	r3, [pc, #324]	@ (8009ad0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800998a:	8a1b      	ldrh	r3, [r3, #16]
 800998c:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8009990:	4954      	ldr	r1, [pc, #336]	@ (8009ae4 <SIM800_MQTT_StateMachineHandler+0x2b8>)
 8009992:	f00e fc6f 	bl	8018274 <siprintf>
			safe_printf("Connecting TCP: %s\r\n", str);
 8009996:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800999a:	4619      	mov	r1, r3
 800999c:	4852      	ldr	r0, [pc, #328]	@ (8009ae8 <SIM800_MQTT_StateMachineHandler+0x2bc>)
 800999e:	f006 fabb 	bl	800ff18 <safe_printf>
			if (SIM800_SendCommand(str, "OK\r\n", CMD_DELAY) == 0)
 80099a2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80099a6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80099aa:	4940      	ldr	r1, [pc, #256]	@ (8009aac <SIM800_MQTT_StateMachineHandler+0x280>)
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 f9a1 	bl	8009cf4 <SIM800_SendCommand>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d106      	bne.n	80099c6 <SIM800_MQTT_StateMachineHandler+0x19a>
			{
				tcp_wait_counter = 0;
 80099b8:	4b4c      	ldr	r3, [pc, #304]	@ (8009aec <SIM800_MQTT_StateMachineHandler+0x2c0>)
 80099ba:	2200      	movs	r2, #0
 80099bc:	701a      	strb	r2, [r3, #0]
				mqttState = MQTT_STATE_WAIT_TCP_RESPONSE;
 80099be:	4b38      	ldr	r3, [pc, #224]	@ (8009aa0 <SIM800_MQTT_StateMachineHandler+0x274>)
 80099c0:	2206      	movs	r2, #6
 80099c2:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				mqttState = MQTT_STATE_RECONNECT;
			}
			break;
 80099c4:	e068      	b.n	8009a98 <SIM800_MQTT_StateMachineHandler+0x26c>
				mqttState = MQTT_STATE_RECONNECT;
 80099c6:	4b36      	ldr	r3, [pc, #216]	@ (8009aa0 <SIM800_MQTT_StateMachineHandler+0x274>)
 80099c8:	220a      	movs	r2, #10
 80099ca:	701a      	strb	r2, [r3, #0]
			break;
 80099cc:	e064      	b.n	8009a98 <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_WAIT_TCP_RESPONSE:
			// Wait until SIM800.mqttServer.connect becomes 1 from RX callback
			if (SIM800.mqttServer.connect == 1)
 80099ce:	4b40      	ldr	r3, [pc, #256]	@ (8009ad0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 80099d0:	7c9b      	ldrb	r3, [r3, #18]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d106      	bne.n	80099e4 <SIM800_MQTT_StateMachineHandler+0x1b8>
			{
				safe_printf("TCP connected to MQTT broker\r\n");
 80099d6:	4846      	ldr	r0, [pc, #280]	@ (8009af0 <SIM800_MQTT_StateMachineHandler+0x2c4>)
 80099d8:	f006 fa9e 	bl	800ff18 <safe_printf>
				mqttState = MQTT_STATE_MQTT_CONNECT;
 80099dc:	4b30      	ldr	r3, [pc, #192]	@ (8009aa0 <SIM800_MQTT_StateMachineHandler+0x274>)
 80099de:	2207      	movs	r2, #7
 80099e0:	701a      	strb	r2, [r3, #0]
				vTaskDelay(pdMS_TO_TICKS(1000));
	#else
				HAL_Delay(1000);
	#endif
			}
			break;
 80099e2:	e059      	b.n	8009a98 <SIM800_MQTT_StateMachineHandler+0x26c>
			else if (++tcp_wait_counter > 5)
 80099e4:	4b41      	ldr	r3, [pc, #260]	@ (8009aec <SIM800_MQTT_StateMachineHandler+0x2c0>)
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	3301      	adds	r3, #1
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	4b3f      	ldr	r3, [pc, #252]	@ (8009aec <SIM800_MQTT_StateMachineHandler+0x2c0>)
 80099ee:	701a      	strb	r2, [r3, #0]
 80099f0:	4b3e      	ldr	r3, [pc, #248]	@ (8009aec <SIM800_MQTT_StateMachineHandler+0x2c0>)
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	2b05      	cmp	r3, #5
 80099f6:	d906      	bls.n	8009a06 <SIM800_MQTT_StateMachineHandler+0x1da>
				safe_printf("MQTT TCP connect timeout\r\n");
 80099f8:	483e      	ldr	r0, [pc, #248]	@ (8009af4 <SIM800_MQTT_StateMachineHandler+0x2c8>)
 80099fa:	f006 fa8d 	bl	800ff18 <safe_printf>
				mqttState = MQTT_STATE_RECONNECT;
 80099fe:	4b28      	ldr	r3, [pc, #160]	@ (8009aa0 <SIM800_MQTT_StateMachineHandler+0x274>)
 8009a00:	220a      	movs	r2, #10
 8009a02:	701a      	strb	r2, [r3, #0]
			break;
 8009a04:	e048      	b.n	8009a98 <SIM800_MQTT_StateMachineHandler+0x26c>
				vTaskDelay(pdMS_TO_TICKS(1000));
 8009a06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009a0a:	f00a ff3f 	bl	801488c <vTaskDelay>
			break;
 8009a0e:	e043      	b.n	8009a98 <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_MQTT_CONNECT:
		{
			MQTTPacket_connectData datas = MQTTPacket_connectData_initializer;
 8009a10:	4a39      	ldr	r2, [pc, #228]	@ (8009af8 <SIM800_MQTT_StateMachineHandler+0x2cc>)
 8009a12:	1d3b      	adds	r3, r7, #4
 8009a14:	4611      	mov	r1, r2
 8009a16:	2258      	movs	r2, #88	@ 0x58
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f00e fe62 	bl	80186e2 <memcpy>
			datas.username.cstring = SIM800.mqttClient.username;
 8009a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8009ad0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	647b      	str	r3, [r7, #68]	@ 0x44
			datas.password.cstring = SIM800.mqttClient.pass;
 8009a24:	4b2a      	ldr	r3, [pc, #168]	@ (8009ad0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	653b      	str	r3, [r7, #80]	@ 0x50
			datas.clientID.cstring = SIM800.mqttClient.clientID;
 8009a2a:	4b29      	ldr	r3, [pc, #164]	@ (8009ad0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 8009a2c:	69db      	ldr	r3, [r3, #28]
 8009a2e:	613b      	str	r3, [r7, #16]
			datas.keepAliveInterval = SIM800.mqttClient.keepAliveInterval;
 8009a30:	4b27      	ldr	r3, [pc, #156]	@ (8009ad0 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 8009a32:	8c1b      	ldrh	r3, [r3, #32]
 8009a34:	83bb      	strh	r3, [r7, #28]
			datas.cleansession = 1;
 8009a36:	2301      	movs	r3, #1
 8009a38:	77bb      	strb	r3, [r7, #30]

			int mqtt_len = MQTTSerialize_connect((unsigned char *)str, sizeof(str), &datas);
 8009a3a:	1d3a      	adds	r2, r7, #4
 8009a3c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009a40:	2180      	movs	r1, #128	@ 0x80
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7ff fb2e 	bl	80090a4 <MQTTSerialize_connect>
 8009a48:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
			HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)str, mqtt_len);
 8009a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009a56:	4619      	mov	r1, r3
 8009a58:	4813      	ldr	r0, [pc, #76]	@ (8009aa8 <SIM800_MQTT_StateMachineHandler+0x27c>)
 8009a5a:	f008 ff0c 	bl	8012876 <HAL_UART_Transmit_IT>
			safe_printf("MQTT CONNECT sent\r\n");
 8009a5e:	4827      	ldr	r0, [pc, #156]	@ (8009afc <SIM800_MQTT_StateMachineHandler+0x2d0>)
 8009a60:	f006 fa5a 	bl	800ff18 <safe_printf>

	#if FREERTOS == 1
			vTaskDelay(pdMS_TO_TICKS(2000));
 8009a64:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8009a68:	f00a ff10 	bl	801488c <vTaskDelay>
	#else
			HAL_Delay(2000);
	#endif
			mqttState = MQTT_STATE_MQTT_CONNECTED;
 8009a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8009aa0 <SIM800_MQTT_StateMachineHandler+0x274>)
 8009a6e:	2208      	movs	r2, #8
 8009a70:	701a      	strb	r2, [r3, #0]
			break;
 8009a72:	e011      	b.n	8009a98 <SIM800_MQTT_StateMachineHandler+0x26c>
		}

		case MQTT_STATE_MQTT_CONNECTED:
			safe_printf("MQTT connected and ready.\r\n");
 8009a74:	4822      	ldr	r0, [pc, #136]	@ (8009b00 <SIM800_MQTT_StateMachineHandler+0x2d4>)
 8009a76:	f006 fa4f 	bl	800ff18 <safe_printf>
			mqttState = MQTT_STATE_IDLE;
 8009a7a:	4b09      	ldr	r3, [pc, #36]	@ (8009aa0 <SIM800_MQTT_StateMachineHandler+0x274>)
 8009a7c:	2209      	movs	r2, #9
 8009a7e:	701a      	strb	r2, [r3, #0]
			break;
 8009a80:	e00a      	b.n	8009a98 <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_IDLE:
			break;

		case MQTT_STATE_RECONNECT:
			safe_printf("Reconnecting...\r\n");
 8009a82:	4820      	ldr	r0, [pc, #128]	@ (8009b04 <SIM800_MQTT_StateMachineHandler+0x2d8>)
 8009a84:	f006 fa48 	bl	800ff18 <safe_printf>
			mqttError = 0;
 8009a88:	4b0a      	ldr	r3, [pc, #40]	@ (8009ab4 <SIM800_MQTT_StateMachineHandler+0x288>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	601a      	str	r2, [r3, #0]
			mqttState = MQTT_STATE_INIT;
 8009a8e:	4b04      	ldr	r3, [pc, #16]	@ (8009aa0 <SIM800_MQTT_StateMachineHandler+0x274>)
 8009a90:	2200      	movs	r2, #0
 8009a92:	701a      	strb	r2, [r3, #0]
			break;
 8009a94:	e000      	b.n	8009a98 <SIM800_MQTT_StateMachineHandler+0x26c>
			break;
 8009a96:	bf00      	nop
	}
}
 8009a98:	bf00      	nop
 8009a9a:	37e0      	adds	r7, #224	@ 0xe0
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	20000de2 	.word	0x20000de2
 8009aa4:	20000270 	.word	0x20000270
 8009aa8:	20001060 	.word	0x20001060
 8009aac:	0801b690 	.word	0x0801b690
 8009ab0:	0801b698 	.word	0x0801b698
 8009ab4:	20000de4 	.word	0x20000de4
 8009ab8:	0801b6a0 	.word	0x0801b6a0
 8009abc:	0801b6a8 	.word	0x0801b6a8
 8009ac0:	0801b6b4 	.word	0x0801b6b4
 8009ac4:	0801b6c4 	.word	0x0801b6c4
 8009ac8:	0801b6d8 	.word	0x0801b6d8
 8009acc:	0801b6e8 	.word	0x0801b6e8
 8009ad0:	2000131c 	.word	0x2000131c
 8009ad4:	0801b6f8 	.word	0x0801b6f8
 8009ad8:	0801b714 	.word	0x0801b714
 8009adc:	0801b720 	.word	0x0801b720
 8009ae0:	0801b724 	.word	0x0801b724
 8009ae4:	0801b730 	.word	0x0801b730
 8009ae8:	0801b74c 	.word	0x0801b74c
 8009aec:	20000de8 	.word	0x20000de8
 8009af0:	0801b764 	.word	0x0801b764
 8009af4:	0801b784 	.word	0x0801b784
 8009af8:	0801b7e4 	.word	0x0801b7e4
 8009afc:	0801b7a0 	.word	0x0801b7a0
 8009b00:	0801b7b4 	.word	0x0801b7b4
 8009b04:	0801b7d0 	.word	0x0801b7d0

08009b08 <Sim800_RxCallBack>:
 * Call back function for release read SIM800 UART buffer.
 * @param NONE
 * @return NONE
 */
void Sim800_RxCallBack(void)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	af00      	add	r7, sp, #0
    rx_buffer[rx_index++] = rx_data;
 8009b0c:	4b56      	ldr	r3, [pc, #344]	@ (8009c68 <Sim800_RxCallBack+0x160>)
 8009b0e:	881b      	ldrh	r3, [r3, #0]
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	b291      	uxth	r1, r2
 8009b14:	4a54      	ldr	r2, [pc, #336]	@ (8009c68 <Sim800_RxCallBack+0x160>)
 8009b16:	8011      	strh	r1, [r2, #0]
 8009b18:	461a      	mov	r2, r3
 8009b1a:	4b54      	ldr	r3, [pc, #336]	@ (8009c6c <Sim800_RxCallBack+0x164>)
 8009b1c:	7819      	ldrb	r1, [r3, #0]
 8009b1e:	4b54      	ldr	r3, [pc, #336]	@ (8009c70 <Sim800_RxCallBack+0x168>)
 8009b20:	5499      	strb	r1, [r3, r2]
    if (rx_data == 0xD0 && pingreq_sent == 1)
 8009b22:	4b52      	ldr	r3, [pc, #328]	@ (8009c6c <Sim800_RxCallBack+0x164>)
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	2bd0      	cmp	r3, #208	@ 0xd0
 8009b28:	d106      	bne.n	8009b38 <Sim800_RxCallBack+0x30>
 8009b2a:	4b52      	ldr	r3, [pc, #328]	@ (8009c74 <Sim800_RxCallBack+0x16c>)
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d102      	bne.n	8009b38 <Sim800_RxCallBack+0x30>
    {
        pingreq_sent = 0;
 8009b32:	4b50      	ldr	r3, [pc, #320]	@ (8009c74 <Sim800_RxCallBack+0x16c>)
 8009b34:	2200      	movs	r2, #0
 8009b36:	701a      	strb	r2, [r3, #0]
    }

    if (SIM800.mqttServer.connect == 0)
 8009b38:	4b4f      	ldr	r3, [pc, #316]	@ (8009c78 <Sim800_RxCallBack+0x170>)
 8009b3a:	7c9b      	ldrb	r3, [r3, #18]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d135      	bne.n	8009bac <Sim800_RxCallBack+0xa4>
    {
        if (strstr((char *)rx_buffer, "\r\n") != NULL && rx_index == 2)
 8009b40:	494e      	ldr	r1, [pc, #312]	@ (8009c7c <Sim800_RxCallBack+0x174>)
 8009b42:	484b      	ldr	r0, [pc, #300]	@ (8009c70 <Sim800_RxCallBack+0x168>)
 8009b44:	f00e fd27 	bl	8018596 <strstr>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d007      	beq.n	8009b5e <Sim800_RxCallBack+0x56>
 8009b4e:	4b46      	ldr	r3, [pc, #280]	@ (8009c68 <Sim800_RxCallBack+0x160>)
 8009b50:	881b      	ldrh	r3, [r3, #0]
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d103      	bne.n	8009b5e <Sim800_RxCallBack+0x56>
        {
            rx_index = 0;
 8009b56:	4b44      	ldr	r3, [pc, #272]	@ (8009c68 <Sim800_RxCallBack+0x160>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	801a      	strh	r2, [r3, #0]
 8009b5c:	e026      	b.n	8009bac <Sim800_RxCallBack+0xa4>
        }
        else if (strstr((char *)rx_buffer, "\r\n") != NULL)
 8009b5e:	4947      	ldr	r1, [pc, #284]	@ (8009c7c <Sim800_RxCallBack+0x174>)
 8009b60:	4843      	ldr	r0, [pc, #268]	@ (8009c70 <Sim800_RxCallBack+0x168>)
 8009b62:	f00e fd18 	bl	8018596 <strstr>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d01f      	beq.n	8009bac <Sim800_RxCallBack+0xa4>
        {
            memcpy(mqtt_buffer, rx_buffer, sizeof(rx_buffer));
 8009b6c:	4a44      	ldr	r2, [pc, #272]	@ (8009c80 <Sim800_RxCallBack+0x178>)
 8009b6e:	4b40      	ldr	r3, [pc, #256]	@ (8009c70 <Sim800_RxCallBack+0x168>)
 8009b70:	4610      	mov	r0, r2
 8009b72:	4619      	mov	r1, r3
 8009b74:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8009b78:	461a      	mov	r2, r3
 8009b7a:	f00e fdb2 	bl	80186e2 <memcpy>
            clearRxBuffer();
 8009b7e:	f000 f891 	bl	8009ca4 <clearRxBuffer>
            if (strstr(mqtt_buffer, "DY CONNECT\r\n"))
 8009b82:	4940      	ldr	r1, [pc, #256]	@ (8009c84 <Sim800_RxCallBack+0x17c>)
 8009b84:	483e      	ldr	r0, [pc, #248]	@ (8009c80 <Sim800_RxCallBack+0x178>)
 8009b86:	f00e fd06 	bl	8018596 <strstr>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d003      	beq.n	8009b98 <Sim800_RxCallBack+0x90>
            {
                SIM800.mqttServer.connect = 0;
 8009b90:	4b39      	ldr	r3, [pc, #228]	@ (8009c78 <Sim800_RxCallBack+0x170>)
 8009b92:	2200      	movs	r2, #0
 8009b94:	749a      	strb	r2, [r3, #18]
 8009b96:	e009      	b.n	8009bac <Sim800_RxCallBack+0xa4>
            }
            else if (strstr(mqtt_buffer, "CONNECT\r\n"))
 8009b98:	493b      	ldr	r1, [pc, #236]	@ (8009c88 <Sim800_RxCallBack+0x180>)
 8009b9a:	4839      	ldr	r0, [pc, #228]	@ (8009c80 <Sim800_RxCallBack+0x178>)
 8009b9c:	f00e fcfb 	bl	8018596 <strstr>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d002      	beq.n	8009bac <Sim800_RxCallBack+0xa4>
            {
                SIM800.mqttServer.connect = 1;
 8009ba6:	4b34      	ldr	r3, [pc, #208]	@ (8009c78 <Sim800_RxCallBack+0x170>)
 8009ba8:	2201      	movs	r2, #1
 8009baa:	749a      	strb	r2, [r3, #18]
            }
        }
    }
    if (strstr((char *)rx_buffer, "CLOSED\r\n") || strstr((char *)rx_buffer, "ERROR\r\n") || strstr((char *)rx_buffer, "DEACT\r\n"))
 8009bac:	4937      	ldr	r1, [pc, #220]	@ (8009c8c <Sim800_RxCallBack+0x184>)
 8009bae:	4830      	ldr	r0, [pc, #192]	@ (8009c70 <Sim800_RxCallBack+0x168>)
 8009bb0:	f00e fcf1 	bl	8018596 <strstr>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10d      	bne.n	8009bd6 <Sim800_RxCallBack+0xce>
 8009bba:	4935      	ldr	r1, [pc, #212]	@ (8009c90 <Sim800_RxCallBack+0x188>)
 8009bbc:	482c      	ldr	r0, [pc, #176]	@ (8009c70 <Sim800_RxCallBack+0x168>)
 8009bbe:	f00e fcea 	bl	8018596 <strstr>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d106      	bne.n	8009bd6 <Sim800_RxCallBack+0xce>
 8009bc8:	4932      	ldr	r1, [pc, #200]	@ (8009c94 <Sim800_RxCallBack+0x18c>)
 8009bca:	4829      	ldr	r0, [pc, #164]	@ (8009c70 <Sim800_RxCallBack+0x168>)
 8009bcc:	f00e fce3 	bl	8018596 <strstr>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d002      	beq.n	8009bdc <Sim800_RxCallBack+0xd4>
    {
        SIM800.mqttServer.connect = 0;
 8009bd6:	4b28      	ldr	r3, [pc, #160]	@ (8009c78 <Sim800_RxCallBack+0x170>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	749a      	strb	r2, [r3, #18]
    }
    if (SIM800.mqttServer.connect == 1 && rx_data == 48)
 8009bdc:	4b26      	ldr	r3, [pc, #152]	@ (8009c78 <Sim800_RxCallBack+0x170>)
 8009bde:	7c9b      	ldrb	r3, [r3, #18]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d106      	bne.n	8009bf2 <Sim800_RxCallBack+0xea>
 8009be4:	4b21      	ldr	r3, [pc, #132]	@ (8009c6c <Sim800_RxCallBack+0x164>)
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b30      	cmp	r3, #48	@ 0x30
 8009bea:	d102      	bne.n	8009bf2 <Sim800_RxCallBack+0xea>
    {
        mqtt_receive = 1;
 8009bec:	4b2a      	ldr	r3, [pc, #168]	@ (8009c98 <Sim800_RxCallBack+0x190>)
 8009bee:	2201      	movs	r2, #1
 8009bf0:	701a      	strb	r2, [r3, #0]
    }
    if (mqtt_receive == 1)
 8009bf2:	4b29      	ldr	r3, [pc, #164]	@ (8009c98 <Sim800_RxCallBack+0x190>)
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d124      	bne.n	8009c44 <Sim800_RxCallBack+0x13c>
    {
        mqtt_buffer[mqtt_index++] = rx_data;
 8009bfa:	4b28      	ldr	r3, [pc, #160]	@ (8009c9c <Sim800_RxCallBack+0x194>)
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	1c5a      	adds	r2, r3, #1
 8009c00:	b291      	uxth	r1, r2
 8009c02:	4a26      	ldr	r2, [pc, #152]	@ (8009c9c <Sim800_RxCallBack+0x194>)
 8009c04:	8011      	strh	r1, [r2, #0]
 8009c06:	461a      	mov	r2, r3
 8009c08:	4b18      	ldr	r3, [pc, #96]	@ (8009c6c <Sim800_RxCallBack+0x164>)
 8009c0a:	7819      	ldrb	r1, [r3, #0]
 8009c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8009c80 <Sim800_RxCallBack+0x178>)
 8009c0e:	5499      	strb	r1, [r3, r2]
        if (mqtt_index > 1 && mqtt_index - 1 > mqtt_buffer[1])
 8009c10:	4b22      	ldr	r3, [pc, #136]	@ (8009c9c <Sim800_RxCallBack+0x194>)
 8009c12:	881b      	ldrh	r3, [r3, #0]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d90d      	bls.n	8009c34 <Sim800_RxCallBack+0x12c>
 8009c18:	4b20      	ldr	r3, [pc, #128]	@ (8009c9c <Sim800_RxCallBack+0x194>)
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	4a18      	ldr	r2, [pc, #96]	@ (8009c80 <Sim800_RxCallBack+0x178>)
 8009c20:	7852      	ldrb	r2, [r2, #1]
 8009c22:	4293      	cmp	r3, r2
 8009c24:	dd06      	ble.n	8009c34 <Sim800_RxCallBack+0x12c>
        {
            MQTT_Receive((unsigned char *)mqtt_buffer);
 8009c26:	4816      	ldr	r0, [pc, #88]	@ (8009c80 <Sim800_RxCallBack+0x178>)
 8009c28:	f000 f95c 	bl	8009ee4 <MQTT_Receive>
            clearRxBuffer();
 8009c2c:	f000 f83a 	bl	8009ca4 <clearRxBuffer>
            clearMqttBuffer();
 8009c30:	f000 f84a 	bl	8009cc8 <clearMqttBuffer>
        }
        if (mqtt_index >= sizeof(mqtt_buffer))
 8009c34:	4b19      	ldr	r3, [pc, #100]	@ (8009c9c <Sim800_RxCallBack+0x194>)
 8009c36:	881b      	ldrh	r3, [r3, #0]
 8009c38:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d901      	bls.n	8009c44 <Sim800_RxCallBack+0x13c>
        {
            clearMqttBuffer();
 8009c40:	f000 f842 	bl	8009cc8 <clearMqttBuffer>
        }
    }
    if (rx_index >= sizeof(mqtt_buffer))
 8009c44:	4b08      	ldr	r3, [pc, #32]	@ (8009c68 <Sim800_RxCallBack+0x160>)
 8009c46:	881b      	ldrh	r3, [r3, #0]
 8009c48:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d903      	bls.n	8009c58 <Sim800_RxCallBack+0x150>
    {
        clearRxBuffer();
 8009c50:	f000 f828 	bl	8009ca4 <clearRxBuffer>
        clearMqttBuffer();
 8009c54:	f000 f838 	bl	8009cc8 <clearMqttBuffer>
    }
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8009c58:	2201      	movs	r2, #1
 8009c5a:	4904      	ldr	r1, [pc, #16]	@ (8009c6c <Sim800_RxCallBack+0x164>)
 8009c5c:	4810      	ldr	r0, [pc, #64]	@ (8009ca0 <Sim800_RxCallBack+0x198>)
 8009c5e:	f008 fe40 	bl	80128e2 <HAL_UART_Receive_IT>
}
 8009c62:	bf00      	nop
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	20000828 	.word	0x20000828
 8009c6c:	20000270 	.word	0x20000270
 8009c70:	20000274 	.word	0x20000274
 8009c74:	20000f4c 	.word	0x20000f4c
 8009c78:	2000131c 	.word	0x2000131c
 8009c7c:	0801b83c 	.word	0x0801b83c
 8009c80:	2000082c 	.word	0x2000082c
 8009c84:	0801b840 	.word	0x0801b840
 8009c88:	0801b850 	.word	0x0801b850
 8009c8c:	0801b85c 	.word	0x0801b85c
 8009c90:	0801b868 	.word	0x0801b868
 8009c94:	0801b870 	.word	0x0801b870
 8009c98:	2000082a 	.word	0x2000082a
 8009c9c:	20000de0 	.word	0x20000de0
 8009ca0:	20001060 	.word	0x20001060

08009ca4 <clearRxBuffer>:
 * Clear SIM800 UART RX buffer.
 * @param NONE
 * @return NONE
 */
void clearRxBuffer(void)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	af00      	add	r7, sp, #0
    rx_index = 0;
 8009ca8:	4b05      	ldr	r3, [pc, #20]	@ (8009cc0 <clearRxBuffer+0x1c>)
 8009caa:	2200      	movs	r2, #0
 8009cac:	801a      	strh	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8009cae:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	4803      	ldr	r0, [pc, #12]	@ (8009cc4 <clearRxBuffer+0x20>)
 8009cb6:	f00e fc41 	bl	801853c <memset>
}
 8009cba:	bf00      	nop
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	20000828 	.word	0x20000828
 8009cc4:	20000274 	.word	0x20000274

08009cc8 <clearMqttBuffer>:
 * Clear MQTT buffer.
 * @param NONE
 * @return NONE
 */
void clearMqttBuffer(void)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
    mqtt_receive = 0;
 8009ccc:	4b06      	ldr	r3, [pc, #24]	@ (8009ce8 <clearMqttBuffer+0x20>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	701a      	strb	r2, [r3, #0]
    mqtt_index = 0;
 8009cd2:	4b06      	ldr	r3, [pc, #24]	@ (8009cec <clearMqttBuffer+0x24>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	801a      	strh	r2, [r3, #0]
    memset(mqtt_buffer, 0, sizeof(mqtt_buffer));
 8009cd8:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8009cdc:	2100      	movs	r1, #0
 8009cde:	4804      	ldr	r0, [pc, #16]	@ (8009cf0 <clearMqttBuffer+0x28>)
 8009ce0:	f00e fc2c 	bl	801853c <memset>
}
 8009ce4:	bf00      	nop
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	2000082a 	.word	0x2000082a
 8009cec:	20000de0 	.word	0x20000de0
 8009cf0:	2000082c 	.word	0x2000082c

08009cf4 <SIM800_SendCommand>:
 * @param reply to be used to set the correct answer to the command
 * @param delay to be used to the set pause to the reply
 * @return error, 0 is OK
 */
int SIM800_SendCommand(char *command, char *reply, uint16_t delay)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
                         (uint16_t)strlen(command));
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f7fe fae4 	bl	80082d0 <strlen>
 8009d08:	4603      	mov	r3, r0
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	68f9      	ldr	r1, [r7, #12]
 8009d10:	4810      	ldr	r0, [pc, #64]	@ (8009d54 <SIM800_SendCommand+0x60>)
 8009d12:	f008 fdb0 	bl	8012876 <HAL_UART_Transmit_IT>

#if FREERTOS == 1
    vTaskDelay(pdMS_TO_TICKS(delay));
 8009d16:	88fb      	ldrh	r3, [r7, #6]
 8009d18:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009d1c:	fb02 f303 	mul.w	r3, r2, r3
 8009d20:	4a0d      	ldr	r2, [pc, #52]	@ (8009d58 <SIM800_SendCommand+0x64>)
 8009d22:	fba2 2303 	umull	r2, r3, r2, r3
 8009d26:	099b      	lsrs	r3, r3, #6
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f00a fdaf 	bl	801488c <vTaskDelay>
#else
    HAL_Delay(delay);
#endif

    if (strstr(mqtt_buffer, reply) != NULL)
 8009d2e:	68b9      	ldr	r1, [r7, #8]
 8009d30:	480a      	ldr	r0, [pc, #40]	@ (8009d5c <SIM800_SendCommand+0x68>)
 8009d32:	f00e fc30 	bl	8018596 <strstr>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d003      	beq.n	8009d44 <SIM800_SendCommand+0x50>
    {
        clearRxBuffer();
 8009d3c:	f7ff ffb2 	bl	8009ca4 <clearRxBuffer>
        return 0;
 8009d40:	2300      	movs	r3, #0
 8009d42:	e002      	b.n	8009d4a <SIM800_SendCommand+0x56>
    }
    clearRxBuffer();
 8009d44:	f7ff ffae 	bl	8009ca4 <clearRxBuffer>
    return 1;
 8009d48:	2301      	movs	r3, #1
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	20001060 	.word	0x20001060
 8009d58:	10624dd3 	.word	0x10624dd3
 8009d5c:	2000082c 	.word	0x2000082c

08009d60 <MQTT_Pub>:
 * @param topic to be used to the set topic
 * @param payload to be used to the set message for topic
 * @return NONE
 */
void MQTT_Pub(char *topic, char *payload)
{
 8009d60:	b590      	push	{r4, r7, lr}
 8009d62:	b0cf      	sub	sp, #316	@ 0x13c
 8009d64:	af08      	add	r7, sp, #32
 8009d66:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009d6a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009d6e:	6018      	str	r0, [r3, #0]
 8009d70:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009d74:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8009d78:	6019      	str	r1, [r3, #0]
    unsigned char buf[256] = {0};
 8009d7a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009d7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d82:	4618      	mov	r0, r3
 8009d84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d88:	461a      	mov	r2, r3
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	f00e fbd6 	bl	801853c <memset>

    MQTTString topicString = MQTTString_initializer;
 8009d90:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009d94:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009d98:	2200      	movs	r2, #0
 8009d9a:	601a      	str	r2, [r3, #0]
 8009d9c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009da0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009da4:	2200      	movs	r2, #0
 8009da6:	605a      	str	r2, [r3, #4]
 8009da8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009dac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009db0:	2200      	movs	r2, #0
 8009db2:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 8009db4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009db8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009dbc:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8009dc0:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8009dc4:	6812      	ldr	r2, [r2, #0]
 8009dc6:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
                                         topicString, (unsigned char *)payload, (int)strlen(payload));
 8009dc8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009dcc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8009dd0:	6818      	ldr	r0, [r3, #0]
 8009dd2:	f7fe fa7d 	bl	80082d0 <strlen>
 8009dd6:	4603      	mov	r3, r0
    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
 8009dd8:	f107 0414 	add.w	r4, r7, #20
 8009ddc:	9306      	str	r3, [sp, #24]
 8009dde:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009de2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	9305      	str	r3, [sp, #20]
 8009dea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009dee:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8009df2:	ab02      	add	r3, sp, #8
 8009df4:	ca07      	ldmia	r2, {r0, r1, r2}
 8009df6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	9301      	str	r3, [sp, #4]
 8009dfe:	2300      	movs	r3, #0
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	2300      	movs	r3, #0
 8009e04:	2200      	movs	r2, #0
 8009e06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f7ff fc98 	bl	8009740 <MQTTSerialize_publish>
 8009e10:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8009e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e18:	b29a      	uxth	r2, r3
 8009e1a:	f107 0314 	add.w	r3, r7, #20
 8009e1e:	4619      	mov	r1, r3
 8009e20:	4805      	ldr	r0, [pc, #20]	@ (8009e38 <MQTT_Pub+0xd8>)
 8009e22:	f008 fd28 	bl	8012876 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    vTaskDelay(pdMS_TO_TICKS(100));
 8009e26:	2064      	movs	r0, #100	@ 0x64
 8009e28:	f00a fd30 	bl	801488c <vTaskDelay>
#else
    HAL_Delay(100);
#endif
}
 8009e2c:	bf00      	nop
 8009e2e:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd90      	pop	{r4, r7, pc}
 8009e36:	bf00      	nop
 8009e38:	20001060 	.word	0x20001060

08009e3c <MQTT_Sub>:
 * Subscribe on the MQTT broker of the message in a topic
 * @param topic to be used to the set topic
 * @return NONE
 */
void MQTT_Sub(char *topic)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b0ca      	sub	sp, #296	@ 0x128
 8009e40:	af04      	add	r7, sp, #16
 8009e42:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009e46:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009e4a:	6018      	str	r0, [r3, #0]
    unsigned char buf[256] = {0};
 8009e4c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009e50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e54:	4618      	mov	r0, r3
 8009e56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	f00e fb6d 	bl	801853c <memset>

    MQTTString topicString = MQTTString_initializer;
 8009e62:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009e66:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009e72:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e76:	2200      	movs	r2, #0
 8009e78:	605a      	str	r2, [r3, #4]
 8009e7a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009e7e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e82:	2200      	movs	r2, #0
 8009e84:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 8009e86:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009e8a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009e8e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8009e92:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8009e96:	6812      	ldr	r2, [r2, #0]
 8009e98:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_subscribe(buf, sizeof(buf), 0, 1, 1,
 8009e9a:	f107 0014 	add.w	r0, r7, #20
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	9302      	str	r3, [sp, #8]
 8009ea2:	f107 0308 	add.w	r3, r7, #8
 8009ea6:	9301      	str	r3, [sp, #4]
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	2301      	movs	r3, #1
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009eb4:	f000 f889 	bl	8009fca <MQTTSerialize_subscribe>
 8009eb8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
                                           &topicString, 0);
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8009ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	f107 0314 	add.w	r3, r7, #20
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	4805      	ldr	r0, [pc, #20]	@ (8009ee0 <MQTT_Sub+0xa4>)
 8009eca:	f008 fcd4 	bl	8012876 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    vTaskDelay(pdMS_TO_TICKS(100));
 8009ece:	2064      	movs	r0, #100	@ 0x64
 8009ed0:	f00a fcdc 	bl	801488c <vTaskDelay>
#else
    HAL_Delay(100);
#endif
}
 8009ed4:	bf00      	nop
 8009ed6:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	20001060 	.word	0x20001060

08009ee4 <MQTT_Receive>:
 * Receive message from MQTT broker
 * @param receive mqtt bufer
 * @return NONE
 */
void MQTT_Receive(unsigned char *buf)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b08c      	sub	sp, #48	@ 0x30
 8009ee8:	af06      	add	r7, sp, #24
 8009eea:	6078      	str	r0, [r7, #4]
    memset(SIM800.mqttReceive.topic, 0, sizeof(SIM800.mqttReceive.topic));
 8009eec:	2280      	movs	r2, #128	@ 0x80
 8009eee:	2100      	movs	r1, #0
 8009ef0:	481a      	ldr	r0, [pc, #104]	@ (8009f5c <MQTT_Receive+0x78>)
 8009ef2:	f00e fb23 	bl	801853c <memset>
    memset(SIM800.mqttReceive.payload, 0, sizeof(SIM800.mqttReceive.payload));
 8009ef6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009efa:	2100      	movs	r1, #0
 8009efc:	4818      	ldr	r0, [pc, #96]	@ (8009f60 <MQTT_Receive+0x7c>)
 8009efe:	f00e fb1d 	bl	801853c <memset>
    MQTTString receivedTopic;
    unsigned char *payload;
    MQTTDeserialize_publish(&SIM800.mqttReceive.dup, &SIM800.mqttReceive.qos, &SIM800.mqttReceive.retained,
 8009f02:	2304      	movs	r3, #4
 8009f04:	9304      	str	r3, [sp, #16]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	9303      	str	r3, [sp, #12]
 8009f0a:	4b16      	ldr	r3, [pc, #88]	@ (8009f64 <MQTT_Receive+0x80>)
 8009f0c:	9302      	str	r3, [sp, #8]
 8009f0e:	f107 0308 	add.w	r3, r7, #8
 8009f12:	9301      	str	r3, [sp, #4]
 8009f14:	f107 030c 	add.w	r3, r7, #12
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	4b13      	ldr	r3, [pc, #76]	@ (8009f68 <MQTT_Receive+0x84>)
 8009f1c:	4a13      	ldr	r2, [pc, #76]	@ (8009f6c <MQTT_Receive+0x88>)
 8009f1e:	4914      	ldr	r1, [pc, #80]	@ (8009f70 <MQTT_Receive+0x8c>)
 8009f20:	4814      	ldr	r0, [pc, #80]	@ (8009f74 <MQTT_Receive+0x90>)
 8009f22:	f7ff f9ab 	bl	800927c <MQTTDeserialize_publish>
                            &SIM800.mqttReceive.msgId,
                            &receivedTopic, &payload, &SIM800.mqttReceive.payloadLen, buf,
                            sizeof(buf));
    memcpy(SIM800.mqttReceive.topic, receivedTopic.lenstring.data, receivedTopic.lenstring.len);
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	480b      	ldr	r0, [pc, #44]	@ (8009f5c <MQTT_Receive+0x78>)
 8009f2e:	f00e fbd8 	bl	80186e2 <memcpy>
    SIM800.mqttReceive.topicLen = receivedTopic.lenstring.len;
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	4a10      	ldr	r2, [pc, #64]	@ (8009f78 <MQTT_Receive+0x94>)
 8009f36:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
    memcpy(SIM800.mqttReceive.payload, payload, SIM800.mqttReceive.payloadLen);
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	4a0e      	ldr	r2, [pc, #56]	@ (8009f78 <MQTT_Receive+0x94>)
 8009f3e:	f8d2 2130 	ldr.w	r2, [r2, #304]	@ 0x130
 8009f42:	4619      	mov	r1, r3
 8009f44:	4806      	ldr	r0, [pc, #24]	@ (8009f60 <MQTT_Receive+0x7c>)
 8009f46:	f00e fbcc 	bl	80186e2 <memcpy>
    SIM800.mqttReceive.newEvent = 1;
 8009f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8009f78 <MQTT_Receive+0x94>)
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8009f52:	bf00      	nop
 8009f54:	3718      	adds	r7, #24
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	20001450 	.word	0x20001450
 8009f60:	2000134c 	.word	0x2000134c
 8009f64:	2000144c 	.word	0x2000144c
 8009f68:	2000134a 	.word	0x2000134a
 8009f6c:	20001348 	.word	0x20001348
 8009f70:	20001344 	.word	0x20001344
 8009f74:	20001341 	.word	0x20001341
 8009f78:	2000131c 	.word	0x2000131c

08009f7c <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8009f86:	2302      	movs	r3, #2
 8009f88:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	60fb      	str	r3, [r7, #12]
 8009f8e:	e013      	b.n	8009fb8 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	4613      	mov	r3, r2
 8009f94:	005b      	lsls	r3, r3, #1
 8009f96:	4413      	add	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009fa4:	f7ff fb93 	bl	80096ce <MQTTstrlen>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	3303      	adds	r3, #3
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	4413      	add	r3, r2
 8009fb0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	60fb      	str	r3, [r7, #12]
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	dbe7      	blt.n	8009f90 <MQTTSerialize_subscribeLength+0x14>
	return len;
 8009fc0:	68bb      	ldr	r3, [r7, #8]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b08a      	sub	sp, #40	@ 0x28
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	60f8      	str	r0, [r7, #12]
 8009fd2:	60b9      	str	r1, [r7, #8]
 8009fd4:	4611      	mov	r1, r2
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	460b      	mov	r3, r1
 8009fda:	71fb      	strb	r3, [r7, #7]
 8009fdc:	4613      	mov	r3, r2
 8009fde:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8009fec:	2300      	movs	r3, #0
 8009fee:	627b      	str	r3, [r7, #36]	@ 0x24
	int i = 0;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8009ff4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009ff6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ff8:	f7ff ffc0 	bl	8009f7c <MQTTSerialize_subscribeLength>
 8009ffc:	61f8      	str	r0, [r7, #28]
 8009ffe:	69f8      	ldr	r0, [r7, #28]
 800a000:	f7ff fa1a 	bl	8009438 <MQTTPacket_len>
 800a004:	4602      	mov	r2, r0
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	4293      	cmp	r3, r2
 800a00a:	da03      	bge.n	800a014 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800a00c:	f06f 0301 	mvn.w	r3, #1
 800a010:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 800a012:	e051      	b.n	800a0b8 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 800a014:	2300      	movs	r3, #0
 800a016:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 800a018:	7d3b      	ldrb	r3, [r7, #20]
 800a01a:	2208      	movs	r2, #8
 800a01c:	f362 1307 	bfi	r3, r2, #4, #4
 800a020:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 800a022:	79fb      	ldrb	r3, [r7, #7]
 800a024:	f003 0301 	and.w	r3, r3, #1
 800a028:	b2da      	uxtb	r2, r3
 800a02a:	7d3b      	ldrb	r3, [r7, #20]
 800a02c:	f362 03c3 	bfi	r3, r2, #3, #1
 800a030:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 800a032:	7d3b      	ldrb	r3, [r7, #20]
 800a034:	2201      	movs	r2, #1
 800a036:	f362 0342 	bfi	r3, r2, #1, #2
 800a03a:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 800a03c:	7d3a      	ldrb	r2, [r7, #20]
 800a03e:	f107 0318 	add.w	r3, r7, #24
 800a042:	4611      	mov	r1, r2
 800a044:	4618      	mov	r0, r3
 800a046:	f7ff fa86 	bl	8009556 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	69f9      	ldr	r1, [r7, #28]
 800a04e:	4618      	mov	r0, r3
 800a050:	f7ff f986 	bl	8009360 <MQTTPacket_encode>
 800a054:	4602      	mov	r2, r0
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	4413      	add	r3, r2
 800a05a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 800a05c:	88ba      	ldrh	r2, [r7, #4]
 800a05e:	f107 0318 	add.w	r3, r7, #24
 800a062:	4611      	mov	r1, r2
 800a064:	4618      	mov	r0, r3
 800a066:	f7ff fa8b 	bl	8009580 <writeInt>

	for (i = 0; i < count; ++i)
 800a06a:	2300      	movs	r3, #0
 800a06c:	623b      	str	r3, [r7, #32]
 800a06e:	e01b      	b.n	800a0a8 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 800a070:	6a3a      	ldr	r2, [r7, #32]
 800a072:	4613      	mov	r3, r2
 800a074:	005b      	lsls	r3, r3, #1
 800a076:	4413      	add	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	461a      	mov	r2, r3
 800a07c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a07e:	4413      	add	r3, r2
 800a080:	f107 0018 	add.w	r0, r7, #24
 800a084:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a086:	f7ff fac3 	bl	8009610 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800a08a:	6a3b      	ldr	r3, [r7, #32]
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a090:	4413      	add	r3, r2
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	b2da      	uxtb	r2, r3
 800a096:	f107 0318 	add.w	r3, r7, #24
 800a09a:	4611      	mov	r1, r2
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7ff fa5a 	bl	8009556 <writeChar>
	for (i = 0; i < count; ++i)
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	623b      	str	r3, [r7, #32]
 800a0a8:	6a3a      	ldr	r2, [r7, #32]
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	dbdf      	blt.n	800a070 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 800a0b0:	69ba      	ldr	r2, [r7, #24]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	627b      	str	r3, [r7, #36]	@ 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3728      	adds	r7, #40	@ 0x28
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b082      	sub	sp, #8
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	80fb      	strh	r3, [r7, #6]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	80bb      	strh	r3, [r7, #4]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 800a0d4:	88fb      	ldrh	r3, [r7, #6]
 800a0d6:	88b9      	ldrh	r1, [r7, #4]
 800a0d8:	887a      	ldrh	r2, [r7, #2]
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f000 fe24 	bl	800ad28 <ST7735_DrawPixel>
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800a0e8:	b590      	push	{r4, r7, lr}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af02      	add	r7, sp, #8
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	4608      	mov	r0, r1
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	4623      	mov	r3, r4
 800a0f8:	80fb      	strh	r3, [r7, #6]
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	80bb      	strh	r3, [r7, #4]
 800a0fe:	460b      	mov	r3, r1
 800a100:	807b      	strh	r3, [r7, #2]
 800a102:	4613      	mov	r3, r2
 800a104:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 800a106:	88f8      	ldrh	r0, [r7, #6]
 800a108:	88b9      	ldrh	r1, [r7, #4]
 800a10a:	887a      	ldrh	r2, [r7, #2]
 800a10c:	883c      	ldrh	r4, [r7, #0]
 800a10e:	8b3b      	ldrh	r3, [r7, #24]
 800a110:	9300      	str	r3, [sp, #0]
 800a112:	4623      	mov	r3, r4
 800a114:	f000 ff12 	bl	800af3c <ST7735_FillRectangle>
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd90      	pop	{r4, r7, pc}

0800a120 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	4603      	mov	r3, r0
 800a128:	80fb      	strh	r3, [r7, #6]
 800a12a:	460b      	mov	r3, r1
 800a12c:	80bb      	strh	r3, [r7, #4]
 800a12e:	4613      	mov	r3, r2
 800a130:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 800a132:	887a      	ldrh	r2, [r7, #2]
 800a134:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a138:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7ff ffc0 	bl	800a0c2 <drawPixel>
}
 800a142:	bf00      	nop
 800a144:	3708      	adds	r7, #8
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800a14a:	b590      	push	{r4, r7, lr}
 800a14c:	b089      	sub	sp, #36	@ 0x24
 800a14e:	af00      	add	r7, sp, #0
 800a150:	4604      	mov	r4, r0
 800a152:	4608      	mov	r0, r1
 800a154:	4611      	mov	r1, r2
 800a156:	461a      	mov	r2, r3
 800a158:	4623      	mov	r3, r4
 800a15a:	80fb      	strh	r3, [r7, #6]
 800a15c:	4603      	mov	r3, r0
 800a15e:	80bb      	strh	r3, [r7, #4]
 800a160:	460b      	mov	r3, r1
 800a162:	807b      	strh	r3, [r7, #2]
 800a164:	4613      	mov	r3, r2
 800a166:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800a168:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a16c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a170:	1ad3      	subs	r3, r2, r3
 800a172:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800a176:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800a17a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800a17e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a182:	1acb      	subs	r3, r1, r3
 800a184:	2b00      	cmp	r3, #0
 800a186:	bfb8      	it	lt
 800a188:	425b      	neglt	r3, r3
 800a18a:	429a      	cmp	r2, r3
 800a18c:	bfcc      	ite	gt
 800a18e:	2301      	movgt	r3, #1
 800a190:	2300      	movle	r3, #0
 800a192:	b2db      	uxtb	r3, r3
 800a194:	837b      	strh	r3, [r7, #26]
    if (steep) {
 800a196:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00b      	beq.n	800a1b6 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 800a19e:	88fb      	ldrh	r3, [r7, #6]
 800a1a0:	833b      	strh	r3, [r7, #24]
 800a1a2:	88bb      	ldrh	r3, [r7, #4]
 800a1a4:	80fb      	strh	r3, [r7, #6]
 800a1a6:	8b3b      	ldrh	r3, [r7, #24]
 800a1a8:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 800a1aa:	887b      	ldrh	r3, [r7, #2]
 800a1ac:	82fb      	strh	r3, [r7, #22]
 800a1ae:	883b      	ldrh	r3, [r7, #0]
 800a1b0:	807b      	strh	r3, [r7, #2]
 800a1b2:	8afb      	ldrh	r3, [r7, #22]
 800a1b4:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800a1b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a1ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	dd0b      	ble.n	800a1da <writeLine+0x90>
        _swap_int16_t(x0, x1);
 800a1c2:	88fb      	ldrh	r3, [r7, #6]
 800a1c4:	82bb      	strh	r3, [r7, #20]
 800a1c6:	887b      	ldrh	r3, [r7, #2]
 800a1c8:	80fb      	strh	r3, [r7, #6]
 800a1ca:	8abb      	ldrh	r3, [r7, #20]
 800a1cc:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 800a1ce:	88bb      	ldrh	r3, [r7, #4]
 800a1d0:	827b      	strh	r3, [r7, #18]
 800a1d2:	883b      	ldrh	r3, [r7, #0]
 800a1d4:	80bb      	strh	r3, [r7, #4]
 800a1d6:	8a7b      	ldrh	r3, [r7, #18]
 800a1d8:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 800a1da:	887a      	ldrh	r2, [r7, #2]
 800a1dc:	88fb      	ldrh	r3, [r7, #6]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 800a1e4:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a1e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	bfb8      	it	lt
 800a1f2:	425b      	neglt	r3, r3
 800a1f4:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 800a1f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a1fa:	0fda      	lsrs	r2, r3, #31
 800a1fc:	4413      	add	r3, r2
 800a1fe:	105b      	asrs	r3, r3, #1
 800a200:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 800a202:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a206:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	da02      	bge.n	800a214 <writeLine+0xca>
        ystep = 1;
 800a20e:	2301      	movs	r3, #1
 800a210:	83bb      	strh	r3, [r7, #28]
 800a212:	e031      	b.n	800a278 <writeLine+0x12e>
    } else {
        ystep = -1;
 800a214:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a218:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 800a21a:	e02d      	b.n	800a278 <writeLine+0x12e>
        if (steep) {
 800a21c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d008      	beq.n	800a236 <writeLine+0xec>
            writePixel(y0, x0, color);
 800a224:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800a226:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800a22a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a22e:	4618      	mov	r0, r3
 800a230:	f7ff ff76 	bl	800a120 <writePixel>
 800a234:	e007      	b.n	800a246 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 800a236:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800a238:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a23c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a240:	4618      	mov	r0, r3
 800a242:	f7ff ff6d 	bl	800a120 <writePixel>
        }
        err -= dy;
 800a246:	8bfa      	ldrh	r2, [r7, #30]
 800a248:	89fb      	ldrh	r3, [r7, #14]
 800a24a:	1ad3      	subs	r3, r2, r3
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 800a250:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a254:	2b00      	cmp	r3, #0
 800a256:	da09      	bge.n	800a26c <writeLine+0x122>
            y0 += ystep;
 800a258:	88ba      	ldrh	r2, [r7, #4]
 800a25a:	8bbb      	ldrh	r3, [r7, #28]
 800a25c:	4413      	add	r3, r2
 800a25e:	b29b      	uxth	r3, r3
 800a260:	80bb      	strh	r3, [r7, #4]
            err += dx;
 800a262:	8bfa      	ldrh	r2, [r7, #30]
 800a264:	8a3b      	ldrh	r3, [r7, #16]
 800a266:	4413      	add	r3, r2
 800a268:	b29b      	uxth	r3, r3
 800a26a:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 800a26c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a270:	b29b      	uxth	r3, r3
 800a272:	3301      	adds	r3, #1
 800a274:	b29b      	uxth	r3, r3
 800a276:	80fb      	strh	r3, [r7, #6]
 800a278:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a27c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a280:	429a      	cmp	r2, r3
 800a282:	ddcb      	ble.n	800a21c <writeLine+0xd2>
        }
    }
}
 800a284:	bf00      	nop
 800a286:	bf00      	nop
 800a288:	3724      	adds	r7, #36	@ 0x24
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd90      	pop	{r4, r7, pc}

0800a28e <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800a28e:	b590      	push	{r4, r7, lr}
 800a290:	b085      	sub	sp, #20
 800a292:	af02      	add	r7, sp, #8
 800a294:	4604      	mov	r4, r0
 800a296:	4608      	mov	r0, r1
 800a298:	4611      	mov	r1, r2
 800a29a:	461a      	mov	r2, r3
 800a29c:	4623      	mov	r3, r4
 800a29e:	80fb      	strh	r3, [r7, #6]
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	80bb      	strh	r3, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	807b      	strh	r3, [r7, #2]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 800a2ac:	88ba      	ldrh	r2, [r7, #4]
 800a2ae:	887b      	ldrh	r3, [r7, #2]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	b21c      	sxth	r4, r3
 800a2ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a2be:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a2c2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a2c6:	883b      	ldrh	r3, [r7, #0]
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	4623      	mov	r3, r4
 800a2cc:	f7ff ff3d 	bl	800a14a <writeLine>
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd90      	pop	{r4, r7, pc}

0800a2d8 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800a2d8:	b590      	push	{r4, r7, lr}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af02      	add	r7, sp, #8
 800a2de:	4604      	mov	r4, r0
 800a2e0:	4608      	mov	r0, r1
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	4623      	mov	r3, r4
 800a2e8:	80fb      	strh	r3, [r7, #6]
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	80bb      	strh	r3, [r7, #4]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	807b      	strh	r3, [r7, #2]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 800a2f6:	88fa      	ldrh	r2, [r7, #6]
 800a2f8:	887b      	ldrh	r3, [r7, #2]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	3b01      	subs	r3, #1
 800a300:	b29b      	uxth	r3, r3
 800a302:	b21a      	sxth	r2, r3
 800a304:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800a308:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a30c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a310:	883b      	ldrh	r3, [r7, #0]
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	4623      	mov	r3, r4
 800a316:	f7ff ff18 	bl	800a14a <writeLine>
}
 800a31a:	bf00      	nop
 800a31c:	370c      	adds	r7, #12
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd90      	pop	{r4, r7, pc}

0800a322 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800a322:	b590      	push	{r4, r7, lr}
 800a324:	b087      	sub	sp, #28
 800a326:	af02      	add	r7, sp, #8
 800a328:	4604      	mov	r4, r0
 800a32a:	4608      	mov	r0, r1
 800a32c:	4611      	mov	r1, r2
 800a32e:	461a      	mov	r2, r3
 800a330:	4623      	mov	r3, r4
 800a332:	80fb      	strh	r3, [r7, #6]
 800a334:	4603      	mov	r3, r0
 800a336:	80bb      	strh	r3, [r7, #4]
 800a338:	460b      	mov	r3, r1
 800a33a:	807b      	strh	r3, [r7, #2]
 800a33c:	4613      	mov	r3, r2
 800a33e:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 800a340:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a344:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d11a      	bne.n	800a382 <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 800a34c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a350:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a354:	429a      	cmp	r2, r3
 800a356:	dd05      	ble.n	800a364 <drawLine+0x42>
 800a358:	88bb      	ldrh	r3, [r7, #4]
 800a35a:	81bb      	strh	r3, [r7, #12]
 800a35c:	883b      	ldrh	r3, [r7, #0]
 800a35e:	80bb      	strh	r3, [r7, #4]
 800a360:	89bb      	ldrh	r3, [r7, #12]
 800a362:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 800a364:	883a      	ldrh	r2, [r7, #0]
 800a366:	88bb      	ldrh	r3, [r7, #4]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	3301      	adds	r3, #1
 800a36e:	b29b      	uxth	r3, r3
 800a370:	b21a      	sxth	r2, r3
 800a372:	8c3b      	ldrh	r3, [r7, #32]
 800a374:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a378:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a37c:	f7ff ff87 	bl	800a28e <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 800a380:	e02d      	b.n	800a3de <drawLine+0xbc>
    } else if(y0 == y1){
 800a382:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a386:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d11a      	bne.n	800a3c4 <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 800a38e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a392:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a396:	429a      	cmp	r2, r3
 800a398:	dd05      	ble.n	800a3a6 <drawLine+0x84>
 800a39a:	88fb      	ldrh	r3, [r7, #6]
 800a39c:	81fb      	strh	r3, [r7, #14]
 800a39e:	887b      	ldrh	r3, [r7, #2]
 800a3a0:	80fb      	strh	r3, [r7, #6]
 800a3a2:	89fb      	ldrh	r3, [r7, #14]
 800a3a4:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 800a3a6:	887a      	ldrh	r2, [r7, #2]
 800a3a8:	88fb      	ldrh	r3, [r7, #6]
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	b21a      	sxth	r2, r3
 800a3b4:	8c3b      	ldrh	r3, [r7, #32]
 800a3b6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a3ba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a3be:	f7ff ff8b 	bl	800a2d8 <drawFastHLine>
}
 800a3c2:	e00c      	b.n	800a3de <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 800a3c4:	f9b7 4000 	ldrsh.w	r4, [r7]
 800a3c8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800a3cc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a3d0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a3d4:	8c3b      	ldrh	r3, [r7, #32]
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	4623      	mov	r3, r4
 800a3da:	f7ff feb6 	bl	800a14a <writeLine>
}
 800a3de:	bf00      	nop
 800a3e0:	3714      	adds	r7, #20
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd90      	pop	{r4, r7, pc}

0800a3e6 <drawCircleHelper>:
        writePixel(x0 - y, y0 - x, color);
    }
}

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 800a3e6:	b590      	push	{r4, r7, lr}
 800a3e8:	b087      	sub	sp, #28
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	4608      	mov	r0, r1
 800a3f0:	4611      	mov	r1, r2
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	4623      	mov	r3, r4
 800a3f6:	80fb      	strh	r3, [r7, #6]
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	80bb      	strh	r3, [r7, #4]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	807b      	strh	r3, [r7, #2]
 800a400:	4613      	mov	r3, r2
 800a402:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 800a404:	887b      	ldrh	r3, [r7, #2]
 800a406:	f1c3 0301 	rsb	r3, r3, #1
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 800a40e:	2301      	movs	r3, #1
 800a410:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800a412:	887b      	ldrh	r3, [r7, #2]
 800a414:	461a      	mov	r2, r3
 800a416:	03d2      	lsls	r2, r2, #15
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	005b      	lsls	r3, r3, #1
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800a420:	2300      	movs	r3, #0
 800a422:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 800a424:	887b      	ldrh	r3, [r7, #2]
 800a426:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 800a428:	e0a5      	b.n	800a576 <drawCircleHelper+0x190>
        if (f >= 0) {
 800a42a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	db0e      	blt.n	800a450 <drawCircleHelper+0x6a>
            y--;
 800a432:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a436:	b29b      	uxth	r3, r3
 800a438:	3b01      	subs	r3, #1
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800a43e:	8a7b      	ldrh	r3, [r7, #18]
 800a440:	3302      	adds	r3, #2
 800a442:	b29b      	uxth	r3, r3
 800a444:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 800a446:	8afa      	ldrh	r2, [r7, #22]
 800a448:	8a7b      	ldrh	r3, [r7, #18]
 800a44a:	4413      	add	r3, r2
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800a450:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a454:	b29b      	uxth	r3, r3
 800a456:	3301      	adds	r3, #1
 800a458:	b29b      	uxth	r3, r3
 800a45a:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800a45c:	8abb      	ldrh	r3, [r7, #20]
 800a45e:	3302      	adds	r3, #2
 800a460:	b29b      	uxth	r3, r3
 800a462:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800a464:	8afa      	ldrh	r2, [r7, #22]
 800a466:	8abb      	ldrh	r3, [r7, #20]
 800a468:	4413      	add	r3, r2
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 800a46e:	787b      	ldrb	r3, [r7, #1]
 800a470:	f003 0304 	and.w	r3, r3, #4
 800a474:	2b00      	cmp	r3, #0
 800a476:	d01b      	beq.n	800a4b0 <drawCircleHelper+0xca>
            writePixel(x0 + x, y0 + y, color);
 800a478:	88fa      	ldrh	r2, [r7, #6]
 800a47a:	8a3b      	ldrh	r3, [r7, #16]
 800a47c:	4413      	add	r3, r2
 800a47e:	b29b      	uxth	r3, r3
 800a480:	b218      	sxth	r0, r3
 800a482:	88ba      	ldrh	r2, [r7, #4]
 800a484:	89fb      	ldrh	r3, [r7, #14]
 800a486:	4413      	add	r3, r2
 800a488:	b29b      	uxth	r3, r3
 800a48a:	b21b      	sxth	r3, r3
 800a48c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a48e:	4619      	mov	r1, r3
 800a490:	f7ff fe46 	bl	800a120 <writePixel>
            writePixel(x0 + y, y0 + x, color);
 800a494:	88fa      	ldrh	r2, [r7, #6]
 800a496:	89fb      	ldrh	r3, [r7, #14]
 800a498:	4413      	add	r3, r2
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	b218      	sxth	r0, r3
 800a49e:	88ba      	ldrh	r2, [r7, #4]
 800a4a0:	8a3b      	ldrh	r3, [r7, #16]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	b21b      	sxth	r3, r3
 800a4a8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	f7ff fe38 	bl	800a120 <writePixel>
        }
        if (cornername & 0x2) {
 800a4b0:	787b      	ldrb	r3, [r7, #1]
 800a4b2:	f003 0302 	and.w	r3, r3, #2
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d01b      	beq.n	800a4f2 <drawCircleHelper+0x10c>
            writePixel(x0 + x, y0 - y, color);
 800a4ba:	88fa      	ldrh	r2, [r7, #6]
 800a4bc:	8a3b      	ldrh	r3, [r7, #16]
 800a4be:	4413      	add	r3, r2
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	b218      	sxth	r0, r3
 800a4c4:	88ba      	ldrh	r2, [r7, #4]
 800a4c6:	89fb      	ldrh	r3, [r7, #14]
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	b21b      	sxth	r3, r3
 800a4ce:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	f7ff fe25 	bl	800a120 <writePixel>
            writePixel(x0 + y, y0 - x, color);
 800a4d6:	88fa      	ldrh	r2, [r7, #6]
 800a4d8:	89fb      	ldrh	r3, [r7, #14]
 800a4da:	4413      	add	r3, r2
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	b218      	sxth	r0, r3
 800a4e0:	88ba      	ldrh	r2, [r7, #4]
 800a4e2:	8a3b      	ldrh	r3, [r7, #16]
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	b21b      	sxth	r3, r3
 800a4ea:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	f7ff fe17 	bl	800a120 <writePixel>
        }
        if (cornername & 0x8) {
 800a4f2:	787b      	ldrb	r3, [r7, #1]
 800a4f4:	f003 0308 	and.w	r3, r3, #8
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d01b      	beq.n	800a534 <drawCircleHelper+0x14e>
            writePixel(x0 - y, y0 + x, color);
 800a4fc:	88fa      	ldrh	r2, [r7, #6]
 800a4fe:	89fb      	ldrh	r3, [r7, #14]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	b29b      	uxth	r3, r3
 800a504:	b218      	sxth	r0, r3
 800a506:	88ba      	ldrh	r2, [r7, #4]
 800a508:	8a3b      	ldrh	r3, [r7, #16]
 800a50a:	4413      	add	r3, r2
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	b21b      	sxth	r3, r3
 800a510:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a512:	4619      	mov	r1, r3
 800a514:	f7ff fe04 	bl	800a120 <writePixel>
            writePixel(x0 - x, y0 + y, color);
 800a518:	88fa      	ldrh	r2, [r7, #6]
 800a51a:	8a3b      	ldrh	r3, [r7, #16]
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	b29b      	uxth	r3, r3
 800a520:	b218      	sxth	r0, r3
 800a522:	88ba      	ldrh	r2, [r7, #4]
 800a524:	89fb      	ldrh	r3, [r7, #14]
 800a526:	4413      	add	r3, r2
 800a528:	b29b      	uxth	r3, r3
 800a52a:	b21b      	sxth	r3, r3
 800a52c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a52e:	4619      	mov	r1, r3
 800a530:	f7ff fdf6 	bl	800a120 <writePixel>
        }
        if (cornername & 0x1) {
 800a534:	787b      	ldrb	r3, [r7, #1]
 800a536:	f003 0301 	and.w	r3, r3, #1
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d01b      	beq.n	800a576 <drawCircleHelper+0x190>
            writePixel(x0 - y, y0 - x, color);
 800a53e:	88fa      	ldrh	r2, [r7, #6]
 800a540:	89fb      	ldrh	r3, [r7, #14]
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	b29b      	uxth	r3, r3
 800a546:	b218      	sxth	r0, r3
 800a548:	88ba      	ldrh	r2, [r7, #4]
 800a54a:	8a3b      	ldrh	r3, [r7, #16]
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	b29b      	uxth	r3, r3
 800a550:	b21b      	sxth	r3, r3
 800a552:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a554:	4619      	mov	r1, r3
 800a556:	f7ff fde3 	bl	800a120 <writePixel>
            writePixel(x0 - x, y0 - y, color);
 800a55a:	88fa      	ldrh	r2, [r7, #6]
 800a55c:	8a3b      	ldrh	r3, [r7, #16]
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	b29b      	uxth	r3, r3
 800a562:	b218      	sxth	r0, r3
 800a564:	88ba      	ldrh	r2, [r7, #4]
 800a566:	89fb      	ldrh	r3, [r7, #14]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	b21b      	sxth	r3, r3
 800a56e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a570:	4619      	mov	r1, r3
 800a572:	f7ff fdd5 	bl	800a120 <writePixel>
    while (x<y) {
 800a576:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800a57a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a57e:	429a      	cmp	r2, r3
 800a580:	f6ff af53 	blt.w	800a42a <drawCircleHelper+0x44>
        }
    }
}
 800a584:	bf00      	nop
 800a586:	bf00      	nop
 800a588:	371c      	adds	r7, #28
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd90      	pop	{r4, r7, pc}

0800a58e <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 800a58e:	b590      	push	{r4, r7, lr}
 800a590:	b087      	sub	sp, #28
 800a592:	af00      	add	r7, sp, #0
 800a594:	4604      	mov	r4, r0
 800a596:	4608      	mov	r0, r1
 800a598:	4611      	mov	r1, r2
 800a59a:	461a      	mov	r2, r3
 800a59c:	4623      	mov	r3, r4
 800a59e:	80fb      	strh	r3, [r7, #6]
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	80bb      	strh	r3, [r7, #4]
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	807b      	strh	r3, [r7, #2]
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 800a5ac:	887b      	ldrh	r3, [r7, #2]
 800a5ae:	f1c3 0301 	rsb	r3, r3, #1
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800a5ba:	887b      	ldrh	r3, [r7, #2]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	03d2      	lsls	r2, r2, #15
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	005b      	lsls	r3, r3, #1
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 800a5cc:	887b      	ldrh	r3, [r7, #2]
 800a5ce:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 800a5d0:	8a3b      	ldrh	r3, [r7, #16]
 800a5d2:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 800a5d4:	89fb      	ldrh	r3, [r7, #14]
 800a5d6:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 800a5d8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	3301      	adds	r3, #1
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	853b      	strh	r3, [r7, #40]	@ 0x28

    while(x < y) {
 800a5e4:	e095      	b.n	800a712 <fillCircleHelper+0x184>
        if (f >= 0) {
 800a5e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	db0e      	blt.n	800a60c <fillCircleHelper+0x7e>
            y--;
 800a5ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800a5fa:	8a7b      	ldrh	r3, [r7, #18]
 800a5fc:	3302      	adds	r3, #2
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 800a602:	8afa      	ldrh	r2, [r7, #22]
 800a604:	8a7b      	ldrh	r3, [r7, #18]
 800a606:	4413      	add	r3, r2
 800a608:	b29b      	uxth	r3, r3
 800a60a:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800a60c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a610:	b29b      	uxth	r3, r3
 800a612:	3301      	adds	r3, #1
 800a614:	b29b      	uxth	r3, r3
 800a616:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800a618:	8abb      	ldrh	r3, [r7, #20]
 800a61a:	3302      	adds	r3, #2
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800a620:	8afa      	ldrh	r2, [r7, #22]
 800a622:	8abb      	ldrh	r3, [r7, #20]
 800a624:	4413      	add	r3, r2
 800a626:	b29b      	uxth	r3, r3
 800a628:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 800a62a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a62e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a632:	429a      	cmp	r2, r3
 800a634:	db31      	blt.n	800a69a <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 800a636:	787b      	ldrb	r3, [r7, #1]
 800a638:	f003 0301 	and.w	r3, r3, #1
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d013      	beq.n	800a668 <fillCircleHelper+0xda>
 800a640:	88fa      	ldrh	r2, [r7, #6]
 800a642:	8a3b      	ldrh	r3, [r7, #16]
 800a644:	4413      	add	r3, r2
 800a646:	b29b      	uxth	r3, r3
 800a648:	b218      	sxth	r0, r3
 800a64a:	88ba      	ldrh	r2, [r7, #4]
 800a64c:	89fb      	ldrh	r3, [r7, #14]
 800a64e:	1ad3      	subs	r3, r2, r3
 800a650:	b29b      	uxth	r3, r3
 800a652:	b219      	sxth	r1, r3
 800a654:	89fb      	ldrh	r3, [r7, #14]
 800a656:	005b      	lsls	r3, r3, #1
 800a658:	b29a      	uxth	r2, r3
 800a65a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a65c:	4413      	add	r3, r2
 800a65e:	b29b      	uxth	r3, r3
 800a660:	b21a      	sxth	r2, r3
 800a662:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a664:	f7ff fe13 	bl	800a28e <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 800a668:	787b      	ldrb	r3, [r7, #1]
 800a66a:	f003 0302 	and.w	r3, r3, #2
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d013      	beq.n	800a69a <fillCircleHelper+0x10c>
 800a672:	88fa      	ldrh	r2, [r7, #6]
 800a674:	8a3b      	ldrh	r3, [r7, #16]
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	b29b      	uxth	r3, r3
 800a67a:	b218      	sxth	r0, r3
 800a67c:	88ba      	ldrh	r2, [r7, #4]
 800a67e:	89fb      	ldrh	r3, [r7, #14]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	b29b      	uxth	r3, r3
 800a684:	b219      	sxth	r1, r3
 800a686:	89fb      	ldrh	r3, [r7, #14]
 800a688:	005b      	lsls	r3, r3, #1
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a68e:	4413      	add	r3, r2
 800a690:	b29b      	uxth	r3, r3
 800a692:	b21a      	sxth	r2, r3
 800a694:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a696:	f7ff fdfa 	bl	800a28e <drawFastVLine>
        }
        if(y != py) {
 800a69a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a69e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d033      	beq.n	800a70e <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 800a6a6:	787b      	ldrb	r3, [r7, #1]
 800a6a8:	f003 0301 	and.w	r3, r3, #1
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d013      	beq.n	800a6d8 <fillCircleHelper+0x14a>
 800a6b0:	88fa      	ldrh	r2, [r7, #6]
 800a6b2:	897b      	ldrh	r3, [r7, #10]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	b218      	sxth	r0, r3
 800a6ba:	88ba      	ldrh	r2, [r7, #4]
 800a6bc:	89bb      	ldrh	r3, [r7, #12]
 800a6be:	1ad3      	subs	r3, r2, r3
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	b219      	sxth	r1, r3
 800a6c4:	89bb      	ldrh	r3, [r7, #12]
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a6cc:	4413      	add	r3, r2
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	b21a      	sxth	r2, r3
 800a6d2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a6d4:	f7ff fddb 	bl	800a28e <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 800a6d8:	787b      	ldrb	r3, [r7, #1]
 800a6da:	f003 0302 	and.w	r3, r3, #2
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d013      	beq.n	800a70a <fillCircleHelper+0x17c>
 800a6e2:	88fa      	ldrh	r2, [r7, #6]
 800a6e4:	897b      	ldrh	r3, [r7, #10]
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	b218      	sxth	r0, r3
 800a6ec:	88ba      	ldrh	r2, [r7, #4]
 800a6ee:	89bb      	ldrh	r3, [r7, #12]
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	b219      	sxth	r1, r3
 800a6f6:	89bb      	ldrh	r3, [r7, #12]
 800a6f8:	005b      	lsls	r3, r3, #1
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a6fe:	4413      	add	r3, r2
 800a700:	b29b      	uxth	r3, r3
 800a702:	b21a      	sxth	r2, r3
 800a704:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a706:	f7ff fdc2 	bl	800a28e <drawFastVLine>
            py = y;
 800a70a:	89fb      	ldrh	r3, [r7, #14]
 800a70c:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 800a70e:	8a3b      	ldrh	r3, [r7, #16]
 800a710:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 800a712:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800a716:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	f6ff af63 	blt.w	800a5e6 <fillCircleHelper+0x58>
    }
}
 800a720:	bf00      	nop
 800a722:	bf00      	nop
 800a724:	371c      	adds	r7, #28
 800a726:	46bd      	mov	sp, r7
 800a728:	bd90      	pop	{r4, r7, pc}

0800a72a <drawRoundRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 800a72a:	b590      	push	{r4, r7, lr}
 800a72c:	b087      	sub	sp, #28
 800a72e:	af02      	add	r7, sp, #8
 800a730:	4604      	mov	r4, r0
 800a732:	4608      	mov	r0, r1
 800a734:	4611      	mov	r1, r2
 800a736:	461a      	mov	r2, r3
 800a738:	4623      	mov	r3, r4
 800a73a:	80fb      	strh	r3, [r7, #6]
 800a73c:	4603      	mov	r3, r0
 800a73e:	80bb      	strh	r3, [r7, #4]
 800a740:	460b      	mov	r3, r1
 800a742:	807b      	strh	r3, [r7, #2]
 800a744:	4613      	mov	r3, r2
 800a746:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 800a748:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a74c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a750:	4293      	cmp	r3, r2
 800a752:	bfa8      	it	ge
 800a754:	4613      	movge	r3, r2
 800a756:	b21b      	sxth	r3, r3
 800a758:	0fda      	lsrs	r2, r3, #31
 800a75a:	4413      	add	r3, r2
 800a75c:	105b      	asrs	r3, r3, #1
 800a75e:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 800a760:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a764:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a768:	429a      	cmp	r2, r3
 800a76a:	dd01      	ble.n	800a770 <drawRoundRect+0x46>
 800a76c:	89fb      	ldrh	r3, [r7, #14]
 800a76e:	843b      	strh	r3, [r7, #32]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 800a770:	88fa      	ldrh	r2, [r7, #6]
 800a772:	8c3b      	ldrh	r3, [r7, #32]
 800a774:	4413      	add	r3, r2
 800a776:	b29b      	uxth	r3, r3
 800a778:	b218      	sxth	r0, r3
 800a77a:	887a      	ldrh	r2, [r7, #2]
 800a77c:	8c3b      	ldrh	r3, [r7, #32]
 800a77e:	005b      	lsls	r3, r3, #1
 800a780:	b29b      	uxth	r3, r3
 800a782:	1ad3      	subs	r3, r2, r3
 800a784:	b29b      	uxth	r3, r3
 800a786:	b21a      	sxth	r2, r3
 800a788:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a78a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a78e:	f7ff fda3 	bl	800a2d8 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 800a792:	88fa      	ldrh	r2, [r7, #6]
 800a794:	8c3b      	ldrh	r3, [r7, #32]
 800a796:	4413      	add	r3, r2
 800a798:	b29b      	uxth	r3, r3
 800a79a:	b218      	sxth	r0, r3
 800a79c:	88ba      	ldrh	r2, [r7, #4]
 800a79e:	883b      	ldrh	r3, [r7, #0]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	b219      	sxth	r1, r3
 800a7aa:	887a      	ldrh	r2, [r7, #2]
 800a7ac:	8c3b      	ldrh	r3, [r7, #32]
 800a7ae:	005b      	lsls	r3, r3, #1
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	b21a      	sxth	r2, r3
 800a7b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a7ba:	f7ff fd8d 	bl	800a2d8 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 800a7be:	88ba      	ldrh	r2, [r7, #4]
 800a7c0:	8c3b      	ldrh	r3, [r7, #32]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	b219      	sxth	r1, r3
 800a7c8:	883a      	ldrh	r2, [r7, #0]
 800a7ca:	8c3b      	ldrh	r3, [r7, #32]
 800a7cc:	005b      	lsls	r3, r3, #1
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	b21a      	sxth	r2, r3
 800a7d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a7d8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800a7dc:	f7ff fd57 	bl	800a28e <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 800a7e0:	88fa      	ldrh	r2, [r7, #6]
 800a7e2:	887b      	ldrh	r3, [r7, #2]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	b218      	sxth	r0, r3
 800a7ee:	88ba      	ldrh	r2, [r7, #4]
 800a7f0:	8c3b      	ldrh	r3, [r7, #32]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	b219      	sxth	r1, r3
 800a7f8:	883a      	ldrh	r2, [r7, #0]
 800a7fa:	8c3b      	ldrh	r3, [r7, #32]
 800a7fc:	005b      	lsls	r3, r3, #1
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	b29b      	uxth	r3, r3
 800a804:	b21a      	sxth	r2, r3
 800a806:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a808:	f7ff fd41 	bl	800a28e <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 800a80c:	88fa      	ldrh	r2, [r7, #6]
 800a80e:	8c3b      	ldrh	r3, [r7, #32]
 800a810:	4413      	add	r3, r2
 800a812:	b29b      	uxth	r3, r3
 800a814:	b218      	sxth	r0, r3
 800a816:	88ba      	ldrh	r2, [r7, #4]
 800a818:	8c3b      	ldrh	r3, [r7, #32]
 800a81a:	4413      	add	r3, r2
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	b219      	sxth	r1, r3
 800a820:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a824:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	2301      	movs	r3, #1
 800a82a:	f7ff fddc 	bl	800a3e6 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 800a82e:	88fa      	ldrh	r2, [r7, #6]
 800a830:	887b      	ldrh	r3, [r7, #2]
 800a832:	4413      	add	r3, r2
 800a834:	b29a      	uxth	r2, r3
 800a836:	8c3b      	ldrh	r3, [r7, #32]
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	3b01      	subs	r3, #1
 800a83e:	b29b      	uxth	r3, r3
 800a840:	b218      	sxth	r0, r3
 800a842:	88ba      	ldrh	r2, [r7, #4]
 800a844:	8c3b      	ldrh	r3, [r7, #32]
 800a846:	4413      	add	r3, r2
 800a848:	b29b      	uxth	r3, r3
 800a84a:	b219      	sxth	r1, r3
 800a84c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a850:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a852:	9300      	str	r3, [sp, #0]
 800a854:	2302      	movs	r3, #2
 800a856:	f7ff fdc6 	bl	800a3e6 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 800a85a:	88fa      	ldrh	r2, [r7, #6]
 800a85c:	887b      	ldrh	r3, [r7, #2]
 800a85e:	4413      	add	r3, r2
 800a860:	b29a      	uxth	r2, r3
 800a862:	8c3b      	ldrh	r3, [r7, #32]
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	b29b      	uxth	r3, r3
 800a868:	3b01      	subs	r3, #1
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	b218      	sxth	r0, r3
 800a86e:	88ba      	ldrh	r2, [r7, #4]
 800a870:	883b      	ldrh	r3, [r7, #0]
 800a872:	4413      	add	r3, r2
 800a874:	b29a      	uxth	r2, r3
 800a876:	8c3b      	ldrh	r3, [r7, #32]
 800a878:	1ad3      	subs	r3, r2, r3
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	3b01      	subs	r3, #1
 800a87e:	b29b      	uxth	r3, r3
 800a880:	b219      	sxth	r1, r3
 800a882:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a886:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a888:	9300      	str	r3, [sp, #0]
 800a88a:	2304      	movs	r3, #4
 800a88c:	f7ff fdab 	bl	800a3e6 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 800a890:	88fa      	ldrh	r2, [r7, #6]
 800a892:	8c3b      	ldrh	r3, [r7, #32]
 800a894:	4413      	add	r3, r2
 800a896:	b29b      	uxth	r3, r3
 800a898:	b218      	sxth	r0, r3
 800a89a:	88ba      	ldrh	r2, [r7, #4]
 800a89c:	883b      	ldrh	r3, [r7, #0]
 800a89e:	4413      	add	r3, r2
 800a8a0:	b29a      	uxth	r2, r3
 800a8a2:	8c3b      	ldrh	r3, [r7, #32]
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	b219      	sxth	r1, r3
 800a8ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a8b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	2308      	movs	r3, #8
 800a8b8:	f7ff fd95 	bl	800a3e6 <drawCircleHelper>
}
 800a8bc:	bf00      	nop
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd90      	pop	{r4, r7, pc}

0800a8c4 <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 800a8c4:	b590      	push	{r4, r7, lr}
 800a8c6:	b087      	sub	sp, #28
 800a8c8:	af02      	add	r7, sp, #8
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	4623      	mov	r3, r4
 800a8d4:	80fb      	strh	r3, [r7, #6]
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	80bb      	strh	r3, [r7, #4]
 800a8da:	460b      	mov	r3, r1
 800a8dc:	807b      	strh	r3, [r7, #2]
 800a8de:	4613      	mov	r3, r2
 800a8e0:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 800a8e2:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a8e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	bfa8      	it	ge
 800a8ee:	4613      	movge	r3, r2
 800a8f0:	b21b      	sxth	r3, r3
 800a8f2:	0fda      	lsrs	r2, r3, #31
 800a8f4:	4413      	add	r3, r2
 800a8f6:	105b      	asrs	r3, r3, #1
 800a8f8:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 800a8fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a8fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a902:	429a      	cmp	r2, r3
 800a904:	dd01      	ble.n	800a90a <fillRoundRect+0x46>
 800a906:	89fb      	ldrh	r3, [r7, #14]
 800a908:	843b      	strh	r3, [r7, #32]
    // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 800a90a:	88fa      	ldrh	r2, [r7, #6]
 800a90c:	8c3b      	ldrh	r3, [r7, #32]
 800a90e:	4413      	add	r3, r2
 800a910:	b29b      	uxth	r3, r3
 800a912:	b218      	sxth	r0, r3
 800a914:	887a      	ldrh	r2, [r7, #2]
 800a916:	8c3b      	ldrh	r3, [r7, #32]
 800a918:	005b      	lsls	r3, r3, #1
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	b29b      	uxth	r3, r3
 800a920:	b21a      	sxth	r2, r3
 800a922:	f9b7 4000 	ldrsh.w	r4, [r7]
 800a926:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800a92a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	4623      	mov	r3, r4
 800a930:	f7ff fbda 	bl	800a0e8 <fillRect>
    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 800a934:	88fa      	ldrh	r2, [r7, #6]
 800a936:	887b      	ldrh	r3, [r7, #2]
 800a938:	4413      	add	r3, r2
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	8c3b      	ldrh	r3, [r7, #32]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	b29b      	uxth	r3, r3
 800a942:	3b01      	subs	r3, #1
 800a944:	b29b      	uxth	r3, r3
 800a946:	b218      	sxth	r0, r3
 800a948:	88ba      	ldrh	r2, [r7, #4]
 800a94a:	8c3b      	ldrh	r3, [r7, #32]
 800a94c:	4413      	add	r3, r2
 800a94e:	b29b      	uxth	r3, r3
 800a950:	b219      	sxth	r1, r3
 800a952:	883a      	ldrh	r2, [r7, #0]
 800a954:	8c3b      	ldrh	r3, [r7, #32]
 800a956:	005b      	lsls	r3, r3, #1
 800a958:	b29b      	uxth	r3, r3
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	3b01      	subs	r3, #1
 800a960:	b29b      	uxth	r3, r3
 800a962:	b21b      	sxth	r3, r3
 800a964:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800a968:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a96a:	9201      	str	r2, [sp, #4]
 800a96c:	9300      	str	r3, [sp, #0]
 800a96e:	2301      	movs	r3, #1
 800a970:	4622      	mov	r2, r4
 800a972:	f7ff fe0c 	bl	800a58e <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 800a976:	88fa      	ldrh	r2, [r7, #6]
 800a978:	8c3b      	ldrh	r3, [r7, #32]
 800a97a:	4413      	add	r3, r2
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	b218      	sxth	r0, r3
 800a980:	88ba      	ldrh	r2, [r7, #4]
 800a982:	8c3b      	ldrh	r3, [r7, #32]
 800a984:	4413      	add	r3, r2
 800a986:	b29b      	uxth	r3, r3
 800a988:	b219      	sxth	r1, r3
 800a98a:	883a      	ldrh	r2, [r7, #0]
 800a98c:	8c3b      	ldrh	r3, [r7, #32]
 800a98e:	005b      	lsls	r3, r3, #1
 800a990:	b29b      	uxth	r3, r3
 800a992:	1ad3      	subs	r3, r2, r3
 800a994:	b29b      	uxth	r3, r3
 800a996:	3b01      	subs	r3, #1
 800a998:	b29b      	uxth	r3, r3
 800a99a:	b21b      	sxth	r3, r3
 800a99c:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800a9a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a9a2:	9201      	str	r2, [sp, #4]
 800a9a4:	9300      	str	r3, [sp, #0]
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	4622      	mov	r2, r4
 800a9aa:	f7ff fdf0 	bl	800a58e <fillCircleHelper>
}
 800a9ae:	bf00      	nop
 800a9b0:	3714      	adds	r7, #20
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd90      	pop	{r4, r7, pc}
	...

0800a9b8 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af02      	add	r7, sp, #8
 800a9be:	4603      	mov	r3, r0
 800a9c0:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800a9c2:	4b08      	ldr	r3, [pc, #32]	@ (800a9e4 <fillScreen+0x2c>)
 800a9c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a9c8:	4b07      	ldr	r3, [pc, #28]	@ (800a9e8 <fillScreen+0x30>)
 800a9ca:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a9ce:	88fb      	ldrh	r3, [r7, #6]
 800a9d0:	9300      	str	r3, [sp, #0]
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	f7ff fb86 	bl	800a0e8 <fillRect>
}
 800a9dc:	bf00      	nop
 800a9de:	3708      	adds	r7, #8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	20000dea 	.word	0x20000dea
 800a9e8:	20000dec 	.word	0x20000dec

0800a9ec <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	2102      	movs	r1, #2
 800a9f4:	4802      	ldr	r0, [pc, #8]	@ (800aa00 <ST7735_Select+0x14>)
 800a9f6:	f005 fe7d 	bl	80106f4 <HAL_GPIO_WritePin>
}
 800a9fa:	bf00      	nop
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	40020000 	.word	0x40020000

0800aa04 <ST7735_Unselect>:

void ST7735_Unselect()
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800aa08:	2201      	movs	r2, #1
 800aa0a:	2102      	movs	r1, #2
 800aa0c:	4802      	ldr	r0, [pc, #8]	@ (800aa18 <ST7735_Unselect+0x14>)
 800aa0e:	f005 fe71 	bl	80106f4 <HAL_GPIO_WritePin>
}
 800aa12:	bf00      	nop
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	40020000 	.word	0x40020000

0800aa1c <ST7735_Reset>:

void ST7735_Reset()
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800aa20:	2200      	movs	r2, #0
 800aa22:	2110      	movs	r1, #16
 800aa24:	4806      	ldr	r0, [pc, #24]	@ (800aa40 <ST7735_Reset+0x24>)
 800aa26:	f005 fe65 	bl	80106f4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800aa2a:	2005      	movs	r0, #5
 800aa2c:	f005 fb1e 	bl	801006c <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800aa30:	2201      	movs	r2, #1
 800aa32:	2110      	movs	r1, #16
 800aa34:	4802      	ldr	r0, [pc, #8]	@ (800aa40 <ST7735_Reset+0x24>)
 800aa36:	f005 fe5d 	bl	80106f4 <HAL_GPIO_WritePin>
}
 800aa3a:	bf00      	nop
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	40020000 	.word	0x40020000

0800aa44 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800aa4e:	2200      	movs	r2, #0
 800aa50:	2110      	movs	r1, #16
 800aa52:	4807      	ldr	r0, [pc, #28]	@ (800aa70 <ST7735_WriteCommand+0x2c>)
 800aa54:	f005 fe4e 	bl	80106f4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800aa58:	1df9      	adds	r1, r7, #7
 800aa5a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa5e:	2201      	movs	r2, #1
 800aa60:	4804      	ldr	r0, [pc, #16]	@ (800aa74 <ST7735_WriteCommand+0x30>)
 800aa62:	f006 fd00 	bl	8011466 <HAL_SPI_Transmit>
}
 800aa66:	bf00      	nop
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	40020800 	.word	0x40020800
 800aa74:	20000f58 	.word	0x20000f58

0800aa78 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800aa82:	2201      	movs	r2, #1
 800aa84:	2110      	movs	r1, #16
 800aa86:	4807      	ldr	r0, [pc, #28]	@ (800aaa4 <ST7735_WriteData+0x2c>)
 800aa88:	f005 fe34 	bl	80106f4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	f04f 33ff 	mov.w	r3, #4294967295
 800aa94:	6879      	ldr	r1, [r7, #4]
 800aa96:	4804      	ldr	r0, [pc, #16]	@ (800aaa8 <ST7735_WriteData+0x30>)
 800aa98:	f006 fce5 	bl	8011466 <HAL_SPI_Transmit>
}
 800aa9c:	bf00      	nop
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	40020800 	.word	0x40020800
 800aaa8:	20000f58 	.word	0x20000f58

0800aaac <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	1c5a      	adds	r2, r3, #1
 800aab8:	607a      	str	r2, [r7, #4]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800aabe:	e034      	b.n	800ab2a <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	1c5a      	adds	r2, r3, #1
 800aac4:	607a      	str	r2, [r7, #4]
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800aaca:	7afb      	ldrb	r3, [r7, #11]
 800aacc:	4618      	mov	r0, r3
 800aace:	f7ff ffb9 	bl	800aa44 <ST7735_WriteCommand>

        numArgs = *addr++;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	1c5a      	adds	r2, r3, #1
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800aadc:	7abb      	ldrb	r3, [r7, #10]
 800aade:	b29b      	uxth	r3, r3
 800aae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aae4:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800aae6:	7abb      	ldrb	r3, [r7, #10]
 800aae8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aaec:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800aaee:	7abb      	ldrb	r3, [r7, #10]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d008      	beq.n	800ab06 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800aaf4:	7abb      	ldrb	r3, [r7, #10]
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f7ff ffbd 	bl	800aa78 <ST7735_WriteData>
            addr += numArgs;
 800aafe:	7abb      	ldrb	r3, [r7, #10]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	4413      	add	r3, r2
 800ab04:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800ab06:	89bb      	ldrh	r3, [r7, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00e      	beq.n	800ab2a <DisplayInit+0x7e>
            ms = *addr++;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	1c5a      	adds	r2, r3, #1
 800ab10:	607a      	str	r2, [r7, #4]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800ab16:	89bb      	ldrh	r3, [r7, #12]
 800ab18:	2bff      	cmp	r3, #255	@ 0xff
 800ab1a:	d102      	bne.n	800ab22 <DisplayInit+0x76>
 800ab1c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800ab20:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800ab22:	89bb      	ldrh	r3, [r7, #12]
 800ab24:	4618      	mov	r0, r3
 800ab26:	f005 faa1 	bl	801006c <HAL_Delay>
    while(numCommands--) {
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
 800ab2c:	1e5a      	subs	r2, r3, #1
 800ab2e:	73fa      	strb	r2, [r7, #15]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1c5      	bne.n	800aac0 <DisplayInit+0x14>
        }
    }
}
 800ab34:	bf00      	nop
 800ab36:	bf00      	nop
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
	...

0800ab40 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800ab40:	b590      	push	{r4, r7, lr}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	4604      	mov	r4, r0
 800ab48:	4608      	mov	r0, r1
 800ab4a:	4611      	mov	r1, r2
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	4623      	mov	r3, r4
 800ab50:	71fb      	strb	r3, [r7, #7]
 800ab52:	4603      	mov	r3, r0
 800ab54:	71bb      	strb	r3, [r7, #6]
 800ab56:	460b      	mov	r3, r1
 800ab58:	717b      	strb	r3, [r7, #5]
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800ab5e:	202a      	movs	r0, #42	@ 0x2a
 800ab60:	f7ff ff70 	bl	800aa44 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800ab64:	2300      	movs	r3, #0
 800ab66:	733b      	strb	r3, [r7, #12]
 800ab68:	4b17      	ldr	r3, [pc, #92]	@ (800abc8 <ST7735_SetAddressWindow+0x88>)
 800ab6a:	781a      	ldrb	r2, [r3, #0]
 800ab6c:	79fb      	ldrb	r3, [r7, #7]
 800ab6e:	4413      	add	r3, r2
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	737b      	strb	r3, [r7, #13]
 800ab74:	2300      	movs	r3, #0
 800ab76:	73bb      	strb	r3, [r7, #14]
 800ab78:	4b13      	ldr	r3, [pc, #76]	@ (800abc8 <ST7735_SetAddressWindow+0x88>)
 800ab7a:	781a      	ldrb	r2, [r3, #0]
 800ab7c:	797b      	ldrb	r3, [r7, #5]
 800ab7e:	4413      	add	r3, r2
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800ab84:	f107 030c 	add.w	r3, r7, #12
 800ab88:	2104      	movs	r1, #4
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7ff ff74 	bl	800aa78 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800ab90:	202b      	movs	r0, #43	@ 0x2b
 800ab92:	f7ff ff57 	bl	800aa44 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800ab96:	4b0d      	ldr	r3, [pc, #52]	@ (800abcc <ST7735_SetAddressWindow+0x8c>)
 800ab98:	781a      	ldrb	r2, [r3, #0]
 800ab9a:	79bb      	ldrb	r3, [r7, #6]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800aba2:	4b0a      	ldr	r3, [pc, #40]	@ (800abcc <ST7735_SetAddressWindow+0x8c>)
 800aba4:	781a      	ldrb	r2, [r3, #0]
 800aba6:	793b      	ldrb	r3, [r7, #4]
 800aba8:	4413      	add	r3, r2
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800abae:	f107 030c 	add.w	r3, r7, #12
 800abb2:	2104      	movs	r1, #4
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7ff ff5f 	bl	800aa78 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800abba:	202c      	movs	r0, #44	@ 0x2c
 800abbc:	f7ff ff42 	bl	800aa44 <ST7735_WriteCommand>
}
 800abc0:	bf00      	nop
 800abc2:	3714      	adds	r7, #20
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd90      	pop	{r4, r7, pc}
 800abc8:	20000df1 	.word	0x20000df1
 800abcc:	20000df2 	.word	0x20000df2

0800abd0 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	4603      	mov	r3, r0
 800abd8:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800abda:	f7ff ff07 	bl	800a9ec <ST7735_Select>
    ST7735_Reset();
 800abde:	f7ff ff1d 	bl	800aa1c <ST7735_Reset>
    DisplayInit(init_cmds1);
 800abe2:	480c      	ldr	r0, [pc, #48]	@ (800ac14 <ST7735_Init+0x44>)
 800abe4:	f7ff ff62 	bl	800aaac <DisplayInit>
    DisplayInit(init_cmds2);
 800abe8:	480b      	ldr	r0, [pc, #44]	@ (800ac18 <ST7735_Init+0x48>)
 800abea:	f7ff ff5f 	bl	800aaac <DisplayInit>
    DisplayInit(init_cmds3);
 800abee:	480b      	ldr	r0, [pc, #44]	@ (800ac1c <ST7735_Init+0x4c>)
 800abf0:	f7ff ff5c 	bl	800aaac <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 800abf4:	4b0a      	ldr	r3, [pc, #40]	@ (800ac20 <ST7735_Init+0x50>)
 800abf6:	2200      	movs	r2, #0
 800abf8:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800abfa:	4b0a      	ldr	r3, [pc, #40]	@ (800ac24 <ST7735_Init+0x54>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 800ac00:	79fb      	ldrb	r3, [r7, #7]
 800ac02:	4618      	mov	r0, r3
 800ac04:	f000 f810 	bl	800ac28 <ST7735_SetRotation>
    ST7735_Unselect();
 800ac08:	f7ff fefc 	bl	800aa04 <ST7735_Unselect>

}
 800ac0c:	bf00      	nop
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	0801bda8 	.word	0x0801bda8
 800ac18:	0801bde0 	.word	0x0801bde0
 800ac1c:	0801bdf0 	.word	0x0801bdf0
 800ac20:	20000def 	.word	0x20000def
 800ac24:	20000df0 	.word	0x20000df0

0800ac28 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	4603      	mov	r3, r0
 800ac30:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800ac32:	2300      	movs	r3, #0
 800ac34:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800ac36:	79fb      	ldrb	r3, [r7, #7]
 800ac38:	f003 0303 	and.w	r3, r3, #3
 800ac3c:	b2da      	uxtb	r2, r3
 800ac3e:	4b33      	ldr	r3, [pc, #204]	@ (800ad0c <ST7735_SetRotation+0xe4>)
 800ac40:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800ac42:	4b32      	ldr	r3, [pc, #200]	@ (800ad0c <ST7735_SetRotation+0xe4>)
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	2b03      	cmp	r3, #3
 800ac48:	d84e      	bhi.n	800ace8 <ST7735_SetRotation+0xc0>
 800ac4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac50 <ST7735_SetRotation+0x28>)
 800ac4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac50:	0800ac61 	.word	0x0800ac61
 800ac54:	0800ac83 	.word	0x0800ac83
 800ac58:	0800aca5 	.word	0x0800aca5
 800ac5c:	0800acc7 	.word	0x0800acc7
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 800ac60:	23c0      	movs	r3, #192	@ 0xc0
 800ac62:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800ac64:	4b2a      	ldr	r3, [pc, #168]	@ (800ad10 <ST7735_SetRotation+0xe8>)
 800ac66:	22a0      	movs	r2, #160	@ 0xa0
 800ac68:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800ac6a:	4b2a      	ldr	r3, [pc, #168]	@ (800ad14 <ST7735_SetRotation+0xec>)
 800ac6c:	2280      	movs	r2, #128	@ 0x80
 800ac6e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 800ac70:	4b29      	ldr	r3, [pc, #164]	@ (800ad18 <ST7735_SetRotation+0xf0>)
 800ac72:	781a      	ldrb	r2, [r3, #0]
 800ac74:	4b29      	ldr	r3, [pc, #164]	@ (800ad1c <ST7735_SetRotation+0xf4>)
 800ac76:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 800ac78:	4b29      	ldr	r3, [pc, #164]	@ (800ad20 <ST7735_SetRotation+0xf8>)
 800ac7a:	781a      	ldrb	r2, [r3, #0]
 800ac7c:	4b29      	ldr	r3, [pc, #164]	@ (800ad24 <ST7735_SetRotation+0xfc>)
 800ac7e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800ac80:	e032      	b.n	800ace8 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800ac82:	23a0      	movs	r3, #160	@ 0xa0
 800ac84:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800ac86:	4b23      	ldr	r3, [pc, #140]	@ (800ad14 <ST7735_SetRotation+0xec>)
 800ac88:	22a0      	movs	r2, #160	@ 0xa0
 800ac8a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800ac8c:	4b20      	ldr	r3, [pc, #128]	@ (800ad10 <ST7735_SetRotation+0xe8>)
 800ac8e:	2280      	movs	r2, #128	@ 0x80
 800ac90:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800ac92:	4b21      	ldr	r3, [pc, #132]	@ (800ad18 <ST7735_SetRotation+0xf0>)
 800ac94:	781a      	ldrb	r2, [r3, #0]
 800ac96:	4b23      	ldr	r3, [pc, #140]	@ (800ad24 <ST7735_SetRotation+0xfc>)
 800ac98:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800ac9a:	4b21      	ldr	r3, [pc, #132]	@ (800ad20 <ST7735_SetRotation+0xf8>)
 800ac9c:	781a      	ldrb	r2, [r3, #0]
 800ac9e:	4b1f      	ldr	r3, [pc, #124]	@ (800ad1c <ST7735_SetRotation+0xf4>)
 800aca0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800aca2:	e021      	b.n	800ace8 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800aca4:	2300      	movs	r3, #0
 800aca6:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800aca8:	4b19      	ldr	r3, [pc, #100]	@ (800ad10 <ST7735_SetRotation+0xe8>)
 800acaa:	22a0      	movs	r2, #160	@ 0xa0
 800acac:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800acae:	4b19      	ldr	r3, [pc, #100]	@ (800ad14 <ST7735_SetRotation+0xec>)
 800acb0:	2280      	movs	r2, #128	@ 0x80
 800acb2:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 800acb4:	4b18      	ldr	r3, [pc, #96]	@ (800ad18 <ST7735_SetRotation+0xf0>)
 800acb6:	781a      	ldrb	r2, [r3, #0]
 800acb8:	4b18      	ldr	r3, [pc, #96]	@ (800ad1c <ST7735_SetRotation+0xf4>)
 800acba:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 800acbc:	4b18      	ldr	r3, [pc, #96]	@ (800ad20 <ST7735_SetRotation+0xf8>)
 800acbe:	781a      	ldrb	r2, [r3, #0]
 800acc0:	4b18      	ldr	r3, [pc, #96]	@ (800ad24 <ST7735_SetRotation+0xfc>)
 800acc2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800acc4:	e010      	b.n	800ace8 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800acc6:	2360      	movs	r3, #96	@ 0x60
 800acc8:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800acca:	4b12      	ldr	r3, [pc, #72]	@ (800ad14 <ST7735_SetRotation+0xec>)
 800accc:	22a0      	movs	r2, #160	@ 0xa0
 800acce:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800acd0:	4b0f      	ldr	r3, [pc, #60]	@ (800ad10 <ST7735_SetRotation+0xe8>)
 800acd2:	2280      	movs	r2, #128	@ 0x80
 800acd4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800acd6:	4b10      	ldr	r3, [pc, #64]	@ (800ad18 <ST7735_SetRotation+0xf0>)
 800acd8:	781a      	ldrb	r2, [r3, #0]
 800acda:	4b12      	ldr	r3, [pc, #72]	@ (800ad24 <ST7735_SetRotation+0xfc>)
 800acdc:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800acde:	4b10      	ldr	r3, [pc, #64]	@ (800ad20 <ST7735_SetRotation+0xf8>)
 800ace0:	781a      	ldrb	r2, [r3, #0]
 800ace2:	4b0e      	ldr	r3, [pc, #56]	@ (800ad1c <ST7735_SetRotation+0xf4>)
 800ace4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800ace6:	bf00      	nop
  }
  ST7735_Select();
 800ace8:	f7ff fe80 	bl	800a9ec <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800acec:	2036      	movs	r0, #54	@ 0x36
 800acee:	f7ff fea9 	bl	800aa44 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800acf2:	f107 030f 	add.w	r3, r7, #15
 800acf6:	2101      	movs	r1, #1
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7ff febd 	bl	800aa78 <ST7735_WriteData>
  ST7735_Unselect();
 800acfe:	f7ff fe81 	bl	800aa04 <ST7735_Unselect>
}
 800ad02:	bf00      	nop
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	20000dee 	.word	0x20000dee
 800ad10:	20000dec 	.word	0x20000dec
 800ad14:	20000dea 	.word	0x20000dea
 800ad18:	20000def 	.word	0x20000def
 800ad1c:	20000df1 	.word	0x20000df1
 800ad20:	20000df0 	.word	0x20000df0
 800ad24:	20000df2 	.word	0x20000df2

0800ad28 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	4603      	mov	r3, r0
 800ad30:	80fb      	strh	r3, [r7, #6]
 800ad32:	460b      	mov	r3, r1
 800ad34:	80bb      	strh	r3, [r7, #4]
 800ad36:	4613      	mov	r3, r2
 800ad38:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800ad3a:	88fb      	ldrh	r3, [r7, #6]
 800ad3c:	4a17      	ldr	r2, [pc, #92]	@ (800ad9c <ST7735_DrawPixel+0x74>)
 800ad3e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ad42:	4293      	cmp	r3, r2
 800ad44:	da26      	bge.n	800ad94 <ST7735_DrawPixel+0x6c>
 800ad46:	88bb      	ldrh	r3, [r7, #4]
 800ad48:	4a15      	ldr	r2, [pc, #84]	@ (800ada0 <ST7735_DrawPixel+0x78>)
 800ad4a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	da20      	bge.n	800ad94 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 800ad52:	f7ff fe4b 	bl	800a9ec <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800ad56:	88fb      	ldrh	r3, [r7, #6]
 800ad58:	b2d8      	uxtb	r0, r3
 800ad5a:	88bb      	ldrh	r3, [r7, #4]
 800ad5c:	b2d9      	uxtb	r1, r3
 800ad5e:	88fb      	ldrh	r3, [r7, #6]
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	3301      	adds	r3, #1
 800ad64:	b2da      	uxtb	r2, r3
 800ad66:	88bb      	ldrh	r3, [r7, #4]
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	f7ff fee7 	bl	800ab40 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800ad72:	887b      	ldrh	r3, [r7, #2]
 800ad74:	0a1b      	lsrs	r3, r3, #8
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	733b      	strb	r3, [r7, #12]
 800ad7c:	887b      	ldrh	r3, [r7, #2]
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800ad82:	f107 030c 	add.w	r3, r7, #12
 800ad86:	2102      	movs	r1, #2
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7ff fe75 	bl	800aa78 <ST7735_WriteData>

    ST7735_Unselect();
 800ad8e:	f7ff fe39 	bl	800aa04 <ST7735_Unselect>
 800ad92:	e000      	b.n	800ad96 <ST7735_DrawPixel+0x6e>
        return;
 800ad94:	bf00      	nop
}
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	20000dea 	.word	0x20000dea
 800ada0:	20000dec 	.word	0x20000dec

0800ada4 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800ada4:	b082      	sub	sp, #8
 800ada6:	b590      	push	{r4, r7, lr}
 800ada8:	b089      	sub	sp, #36	@ 0x24
 800adaa:	af00      	add	r7, sp, #0
 800adac:	637b      	str	r3, [r7, #52]	@ 0x34
 800adae:	4603      	mov	r3, r0
 800adb0:	80fb      	strh	r3, [r7, #6]
 800adb2:	460b      	mov	r3, r1
 800adb4:	80bb      	strh	r3, [r7, #4]
 800adb6:	4613      	mov	r3, r2
 800adb8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800adba:	88fb      	ldrh	r3, [r7, #6]
 800adbc:	b2d8      	uxtb	r0, r3
 800adbe:	88bb      	ldrh	r3, [r7, #4]
 800adc0:	b2d9      	uxtb	r1, r3
 800adc2:	88fb      	ldrh	r3, [r7, #6]
 800adc4:	b2da      	uxtb	r2, r3
 800adc6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800adca:	4413      	add	r3, r2
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	3b01      	subs	r3, #1
 800add0:	b2dc      	uxtb	r4, r3
 800add2:	88bb      	ldrh	r3, [r7, #4]
 800add4:	b2da      	uxtb	r2, r3
 800add6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800adda:	4413      	add	r3, r2
 800addc:	b2db      	uxtb	r3, r3
 800adde:	3b01      	subs	r3, #1
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	4622      	mov	r2, r4
 800ade4:	f7ff feac 	bl	800ab40 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800ade8:	2300      	movs	r3, #0
 800adea:	61fb      	str	r3, [r7, #28]
 800adec:	e043      	b.n	800ae76 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800adee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800adf0:	78fb      	ldrb	r3, [r7, #3]
 800adf2:	3b20      	subs	r3, #32
 800adf4:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800adf8:	fb01 f303 	mul.w	r3, r1, r3
 800adfc:	4619      	mov	r1, r3
 800adfe:	69fb      	ldr	r3, [r7, #28]
 800ae00:	440b      	add	r3, r1
 800ae02:	005b      	lsls	r3, r3, #1
 800ae04:	4413      	add	r3, r2
 800ae06:	881b      	ldrh	r3, [r3, #0]
 800ae08:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	61bb      	str	r3, [r7, #24]
 800ae0e:	e029      	b.n	800ae64 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800ae10:	697a      	ldr	r2, [r7, #20]
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	fa02 f303 	lsl.w	r3, r2, r3
 800ae18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00e      	beq.n	800ae3e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800ae20:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ae22:	0a1b      	lsrs	r3, r3, #8
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	743b      	strb	r3, [r7, #16]
 800ae2a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800ae30:	f107 0310 	add.w	r3, r7, #16
 800ae34:	2102      	movs	r1, #2
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7ff fe1e 	bl	800aa78 <ST7735_WriteData>
 800ae3c:	e00f      	b.n	800ae5e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800ae3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ae42:	0a1b      	lsrs	r3, r3, #8
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	733b      	strb	r3, [r7, #12]
 800ae4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800ae52:	f107 030c 	add.w	r3, r7, #12
 800ae56:	2102      	movs	r1, #2
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7ff fe0d 	bl	800aa78 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	3301      	adds	r3, #1
 800ae62:	61bb      	str	r3, [r7, #24]
 800ae64:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800ae68:	461a      	mov	r2, r3
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d3cf      	bcc.n	800ae10 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	3301      	adds	r3, #1
 800ae74:	61fb      	str	r3, [r7, #28]
 800ae76:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d3b5      	bcc.n	800adee <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800ae82:	bf00      	nop
 800ae84:	bf00      	nop
 800ae86:	3724      	adds	r7, #36	@ 0x24
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800ae8e:	b002      	add	sp, #8
 800ae90:	4770      	bx	lr
	...

0800ae94 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800ae94:	b082      	sub	sp, #8
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b086      	sub	sp, #24
 800ae9a:	af04      	add	r7, sp, #16
 800ae9c:	603a      	str	r2, [r7, #0]
 800ae9e:	617b      	str	r3, [r7, #20]
 800aea0:	4603      	mov	r3, r0
 800aea2:	80fb      	strh	r3, [r7, #6]
 800aea4:	460b      	mov	r3, r1
 800aea6:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800aea8:	f7ff fda0 	bl	800a9ec <ST7735_Select>

    while(*str) {
 800aeac:	e033      	b.n	800af16 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 800aeae:	88fb      	ldrh	r3, [r7, #6]
 800aeb0:	7d3a      	ldrb	r2, [r7, #20]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	4a1f      	ldr	r2, [pc, #124]	@ (800af34 <ST7735_WriteString+0xa0>)
 800aeb6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800aeba:	4293      	cmp	r3, r2
 800aebc:	db16      	blt.n	800aeec <ST7735_WriteString+0x58>
            x = 0;
 800aebe:	2300      	movs	r3, #0
 800aec0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800aec2:	7d7b      	ldrb	r3, [r7, #21]
 800aec4:	461a      	mov	r2, r3
 800aec6:	88bb      	ldrh	r3, [r7, #4]
 800aec8:	4413      	add	r3, r2
 800aeca:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 800aecc:	88bb      	ldrh	r3, [r7, #4]
 800aece:	7d7a      	ldrb	r2, [r7, #21]
 800aed0:	4413      	add	r3, r2
 800aed2:	4a19      	ldr	r2, [pc, #100]	@ (800af38 <ST7735_WriteString+0xa4>)
 800aed4:	f9b2 2000 	ldrsh.w	r2, [r2]
 800aed8:	4293      	cmp	r3, r2
 800aeda:	da21      	bge.n	800af20 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	2b20      	cmp	r3, #32
 800aee2:	d103      	bne.n	800aeec <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	3301      	adds	r3, #1
 800aee8:	603b      	str	r3, [r7, #0]
                continue;
 800aeea:	e014      	b.n	800af16 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	781a      	ldrb	r2, [r3, #0]
 800aef0:	88b9      	ldrh	r1, [r7, #4]
 800aef2:	88f8      	ldrh	r0, [r7, #6]
 800aef4:	8c3b      	ldrh	r3, [r7, #32]
 800aef6:	9302      	str	r3, [sp, #8]
 800aef8:	8bbb      	ldrh	r3, [r7, #28]
 800aefa:	9301      	str	r3, [sp, #4]
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	9300      	str	r3, [sp, #0]
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	f7ff ff4f 	bl	800ada4 <ST7735_WriteChar>
        x += font.width;
 800af06:	7d3b      	ldrb	r3, [r7, #20]
 800af08:	461a      	mov	r2, r3
 800af0a:	88fb      	ldrh	r3, [r7, #6]
 800af0c:	4413      	add	r3, r2
 800af0e:	80fb      	strh	r3, [r7, #6]
        str++;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	3301      	adds	r3, #1
 800af14:	603b      	str	r3, [r7, #0]
    while(*str) {
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d1c7      	bne.n	800aeae <ST7735_WriteString+0x1a>
 800af1e:	e000      	b.n	800af22 <ST7735_WriteString+0x8e>
                break;
 800af20:	bf00      	nop
    }

    ST7735_Unselect();
 800af22:	f7ff fd6f 	bl	800aa04 <ST7735_Unselect>
}
 800af26:	bf00      	nop
 800af28:	3708      	adds	r7, #8
 800af2a:	46bd      	mov	sp, r7
 800af2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af30:	b002      	add	sp, #8
 800af32:	4770      	bx	lr
 800af34:	20000dea 	.word	0x20000dea
 800af38:	20000dec 	.word	0x20000dec

0800af3c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800af3c:	b590      	push	{r4, r7, lr}
 800af3e:	b085      	sub	sp, #20
 800af40:	af00      	add	r7, sp, #0
 800af42:	4604      	mov	r4, r0
 800af44:	4608      	mov	r0, r1
 800af46:	4611      	mov	r1, r2
 800af48:	461a      	mov	r2, r3
 800af4a:	4623      	mov	r3, r4
 800af4c:	80fb      	strh	r3, [r7, #6]
 800af4e:	4603      	mov	r3, r0
 800af50:	80bb      	strh	r3, [r7, #4]
 800af52:	460b      	mov	r3, r1
 800af54:	807b      	strh	r3, [r7, #2]
 800af56:	4613      	mov	r3, r2
 800af58:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 800af5a:	88fb      	ldrh	r3, [r7, #6]
 800af5c:	4a37      	ldr	r2, [pc, #220]	@ (800b03c <ST7735_FillRectangle+0x100>)
 800af5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800af62:	4293      	cmp	r3, r2
 800af64:	da66      	bge.n	800b034 <ST7735_FillRectangle+0xf8>
 800af66:	88bb      	ldrh	r3, [r7, #4]
 800af68:	4a35      	ldr	r2, [pc, #212]	@ (800b040 <ST7735_FillRectangle+0x104>)
 800af6a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800af6e:	4293      	cmp	r3, r2
 800af70:	da60      	bge.n	800b034 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 800af72:	88fa      	ldrh	r2, [r7, #6]
 800af74:	887b      	ldrh	r3, [r7, #2]
 800af76:	4413      	add	r3, r2
 800af78:	4a30      	ldr	r2, [pc, #192]	@ (800b03c <ST7735_FillRectangle+0x100>)
 800af7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800af7e:	4293      	cmp	r3, r2
 800af80:	dd06      	ble.n	800af90 <ST7735_FillRectangle+0x54>
 800af82:	4b2e      	ldr	r3, [pc, #184]	@ (800b03c <ST7735_FillRectangle+0x100>)
 800af84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800af88:	b29a      	uxth	r2, r3
 800af8a:	88fb      	ldrh	r3, [r7, #6]
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 800af90:	88ba      	ldrh	r2, [r7, #4]
 800af92:	883b      	ldrh	r3, [r7, #0]
 800af94:	4413      	add	r3, r2
 800af96:	4a2a      	ldr	r2, [pc, #168]	@ (800b040 <ST7735_FillRectangle+0x104>)
 800af98:	f9b2 2000 	ldrsh.w	r2, [r2]
 800af9c:	4293      	cmp	r3, r2
 800af9e:	dd06      	ble.n	800afae <ST7735_FillRectangle+0x72>
 800afa0:	4b27      	ldr	r3, [pc, #156]	@ (800b040 <ST7735_FillRectangle+0x104>)
 800afa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	88bb      	ldrh	r3, [r7, #4]
 800afaa:	1ad3      	subs	r3, r2, r3
 800afac:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800afae:	f7ff fd1d 	bl	800a9ec <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800afb2:	88fb      	ldrh	r3, [r7, #6]
 800afb4:	b2d8      	uxtb	r0, r3
 800afb6:	88bb      	ldrh	r3, [r7, #4]
 800afb8:	b2d9      	uxtb	r1, r3
 800afba:	88fb      	ldrh	r3, [r7, #6]
 800afbc:	b2da      	uxtb	r2, r3
 800afbe:	887b      	ldrh	r3, [r7, #2]
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	4413      	add	r3, r2
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	3b01      	subs	r3, #1
 800afc8:	b2dc      	uxtb	r4, r3
 800afca:	88bb      	ldrh	r3, [r7, #4]
 800afcc:	b2da      	uxtb	r2, r3
 800afce:	883b      	ldrh	r3, [r7, #0]
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	4413      	add	r3, r2
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	3b01      	subs	r3, #1
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	4622      	mov	r2, r4
 800afdc:	f7ff fdb0 	bl	800ab40 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800afe0:	8c3b      	ldrh	r3, [r7, #32]
 800afe2:	0a1b      	lsrs	r3, r3, #8
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	733b      	strb	r3, [r7, #12]
 800afea:	8c3b      	ldrh	r3, [r7, #32]
 800afec:	b2db      	uxtb	r3, r3
 800afee:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800aff0:	2201      	movs	r2, #1
 800aff2:	2110      	movs	r1, #16
 800aff4:	4813      	ldr	r0, [pc, #76]	@ (800b044 <ST7735_FillRectangle+0x108>)
 800aff6:	f005 fb7d 	bl	80106f4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800affa:	883b      	ldrh	r3, [r7, #0]
 800affc:	80bb      	strh	r3, [r7, #4]
 800affe:	e013      	b.n	800b028 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 800b000:	887b      	ldrh	r3, [r7, #2]
 800b002:	80fb      	strh	r3, [r7, #6]
 800b004:	e00a      	b.n	800b01c <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800b006:	f107 010c 	add.w	r1, r7, #12
 800b00a:	f04f 33ff 	mov.w	r3, #4294967295
 800b00e:	2202      	movs	r2, #2
 800b010:	480d      	ldr	r0, [pc, #52]	@ (800b048 <ST7735_FillRectangle+0x10c>)
 800b012:	f006 fa28 	bl	8011466 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800b016:	88fb      	ldrh	r3, [r7, #6]
 800b018:	3b01      	subs	r3, #1
 800b01a:	80fb      	strh	r3, [r7, #6]
 800b01c:	88fb      	ldrh	r3, [r7, #6]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1f1      	bne.n	800b006 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 800b022:	88bb      	ldrh	r3, [r7, #4]
 800b024:	3b01      	subs	r3, #1
 800b026:	80bb      	strh	r3, [r7, #4]
 800b028:	88bb      	ldrh	r3, [r7, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1e8      	bne.n	800b000 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 800b02e:	f7ff fce9 	bl	800aa04 <ST7735_Unselect>
 800b032:	e000      	b.n	800b036 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 800b034:	bf00      	nop
}
 800b036:	3714      	adds	r7, #20
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd90      	pop	{r4, r7, pc}
 800b03c:	20000dea 	.word	0x20000dea
 800b040:	20000dec 	.word	0x20000dec
 800b044:	40020800 	.word	0x40020800
 800b048:	20000f58 	.word	0x20000f58

0800b04c <displayOnwardsLogoOptimized>:
    ST7735_WriteString(start_x, start_y, "on", Font_16x26, RED, BLACK);
    ST7735_WriteString(start_x + 32, start_y, "words", Font_16x26, WHITE, BLACK);
}

// Optimized version with exact positioning
void displayOnwardsLogoOptimized(void) {
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b086      	sub	sp, #24
 800b050:	af04      	add	r7, sp, #16
    ST7735_SetRotation(1);
 800b052:	2001      	movs	r0, #1
 800b054:	f7ff fde8 	bl	800ac28 <ST7735_SetRotation>
    fillScreen(BLACK);
 800b058:	2000      	movs	r0, #0
 800b05a:	f7ff fcad 	bl	800a9b8 <fillScreen>
    // Exact calculations for 160×128 display
    // Font_16x26: each character is 16px wide, 26px tall
    // "onwards" = 7 characters = 112px total width

    // Perfect center positioning
    int x_pos = 24;  // (160 - 112) / 2 = 24
 800b05e:	2318      	movs	r3, #24
 800b060:	607b      	str	r3, [r7, #4]
    int y_pos = 51;  // (128 - 26) / 2 = 51
 800b062:	2333      	movs	r3, #51	@ 0x33
 800b064:	603b      	str	r3, [r7, #0]

    // Draw "on" in red (positions 0-1, 32px wide)
    ST7735_WriteString(x_pos, y_pos, "on", Font_16x26, RED, BLACK);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	b298      	uxth	r0, r3
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	b299      	uxth	r1, r3
 800b06e:	4b11      	ldr	r3, [pc, #68]	@ (800b0b4 <displayOnwardsLogoOptimized+0x68>)
 800b070:	2200      	movs	r2, #0
 800b072:	9202      	str	r2, [sp, #8]
 800b074:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800b078:	9201      	str	r2, [sp, #4]
 800b07a:	685a      	ldr	r2, [r3, #4]
 800b07c:	9200      	str	r2, [sp, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a0d      	ldr	r2, [pc, #52]	@ (800b0b8 <displayOnwardsLogoOptimized+0x6c>)
 800b082:	f7ff ff07 	bl	800ae94 <ST7735_WriteString>

    // Draw "wards" in white (positions 2-6, 80px wide)
    ST7735_WriteString(x_pos + 32, y_pos, "words", Font_16x26, WHITE, BLACK);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	b29b      	uxth	r3, r3
 800b08a:	3320      	adds	r3, #32
 800b08c:	b298      	uxth	r0, r3
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	b299      	uxth	r1, r3
 800b092:	4b08      	ldr	r3, [pc, #32]	@ (800b0b4 <displayOnwardsLogoOptimized+0x68>)
 800b094:	2200      	movs	r2, #0
 800b096:	9202      	str	r2, [sp, #8]
 800b098:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b09c:	9201      	str	r2, [sp, #4]
 800b09e:	685a      	ldr	r2, [r3, #4]
 800b0a0:	9200      	str	r2, [sp, #0]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a05      	ldr	r2, [pc, #20]	@ (800b0bc <displayOnwardsLogoOptimized+0x70>)
 800b0a6:	f7ff fef5 	bl	800ae94 <ST7735_WriteString>
}
 800b0aa:	bf00      	nop
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20000008 	.word	0x20000008
 800b0b8:	0801b884 	.word	0x0801b884
 800b0bc:	0801b888 	.word	0x0801b888

0800b0c0 <showStartupLogoAndMenu>:
    HAL_Delay(3000);
    printf("Logo display complete\n");
}

// Integration with your menu system
void showStartupLogoAndMenu(void) {
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	af00      	add	r7, sp, #0
    // Show logo first
    displayOnwardsLogoOptimized();
 800b0c4:	f7ff ffc2 	bl	800b04c <displayOnwardsLogoOptimized>
    HAL_Delay(3000);
 800b0c8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800b0cc:	f004 ffce 	bl	801006c <HAL_Delay>

    // Transition to menu
    fillScreen(BLACK);
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	f7ff fc71 	bl	800a9b8 <fillScreen>
    HAL_Delay(200);
 800b0d6:	20c8      	movs	r0, #200	@ 0xc8
 800b0d8:	f004 ffc8 	bl	801006c <HAL_Delay>
}
 800b0dc:	bf00      	nop
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d002      	beq.n	800b0f6 <case_insensitive_strcmp+0x16>
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e056      	b.n	800b1a8 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d10d      	bne.n	800b11e <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800b102:	2300      	movs	r3, #0
 800b104:	e050      	b.n	800b1a8 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d101      	bne.n	800b112 <case_insensitive_strcmp+0x32>
        {
            return 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	e04a      	b.n	800b1a8 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	3301      	adds	r3, #1
 800b116:	607b      	str	r3, [r7, #4]
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	3301      	adds	r3, #1
 800b11c:	603b      	str	r3, [r7, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	73fb      	strb	r3, [r7, #15]
 800b124:	7bfb      	ldrb	r3, [r7, #15]
 800b126:	3301      	adds	r3, #1
 800b128:	4a22      	ldr	r2, [pc, #136]	@ (800b1b4 <case_insensitive_strcmp+0xd4>)
 800b12a:	4413      	add	r3, r2
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	f003 0303 	and.w	r3, r3, #3
 800b132:	2b01      	cmp	r3, #1
 800b134:	d103      	bne.n	800b13e <case_insensitive_strcmp+0x5e>
 800b136:	7bfb      	ldrb	r3, [r7, #15]
 800b138:	f103 0220 	add.w	r2, r3, #32
 800b13c:	e000      	b.n	800b140 <case_insensitive_strcmp+0x60>
 800b13e:	7bfa      	ldrb	r2, [r7, #15]
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	73bb      	strb	r3, [r7, #14]
 800b146:	7bbb      	ldrb	r3, [r7, #14]
 800b148:	3301      	adds	r3, #1
 800b14a:	491a      	ldr	r1, [pc, #104]	@ (800b1b4 <case_insensitive_strcmp+0xd4>)
 800b14c:	440b      	add	r3, r1
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	f003 0303 	and.w	r3, r3, #3
 800b154:	2b01      	cmp	r3, #1
 800b156:	d102      	bne.n	800b15e <case_insensitive_strcmp+0x7e>
 800b158:	7bbb      	ldrb	r3, [r7, #14]
 800b15a:	3320      	adds	r3, #32
 800b15c:	e000      	b.n	800b160 <case_insensitive_strcmp+0x80>
 800b15e:	7bbb      	ldrb	r3, [r7, #14]
 800b160:	429a      	cmp	r2, r3
 800b162:	d0d0      	beq.n	800b106 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	737b      	strb	r3, [r7, #13]
 800b16a:	7b7b      	ldrb	r3, [r7, #13]
 800b16c:	3301      	adds	r3, #1
 800b16e:	4a11      	ldr	r2, [pc, #68]	@ (800b1b4 <case_insensitive_strcmp+0xd4>)
 800b170:	4413      	add	r3, r2
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	f003 0303 	and.w	r3, r3, #3
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d103      	bne.n	800b184 <case_insensitive_strcmp+0xa4>
 800b17c:	7b7b      	ldrb	r3, [r7, #13]
 800b17e:	f103 0220 	add.w	r2, r3, #32
 800b182:	e000      	b.n	800b186 <case_insensitive_strcmp+0xa6>
 800b184:	7b7a      	ldrb	r2, [r7, #13]
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	733b      	strb	r3, [r7, #12]
 800b18c:	7b3b      	ldrb	r3, [r7, #12]
 800b18e:	3301      	adds	r3, #1
 800b190:	4908      	ldr	r1, [pc, #32]	@ (800b1b4 <case_insensitive_strcmp+0xd4>)
 800b192:	440b      	add	r3, r1
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	f003 0303 	and.w	r3, r3, #3
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d102      	bne.n	800b1a4 <case_insensitive_strcmp+0xc4>
 800b19e:	7b3b      	ldrb	r3, [r7, #12]
 800b1a0:	3320      	adds	r3, #32
 800b1a2:	e000      	b.n	800b1a6 <case_insensitive_strcmp+0xc6>
 800b1a4:	7b3b      	ldrb	r3, [r7, #12]
 800b1a6:	1ad3      	subs	r3, r2, r3
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3714      	adds	r7, #20
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr
 800b1b4:	0801db30 	.word	0x0801db30

0800b1b8 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d101      	bne.n	800b1d4 <cJSON_strdup+0x1c>
    {
        return NULL;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	e015      	b.n	800b200 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f7fd f87b 	bl	80082d0 <strlen>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	3301      	adds	r3, #1
 800b1de:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	4798      	blx	r3
 800b1e8:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d101      	bne.n	800b1f4 <cJSON_strdup+0x3c>
    {
        return NULL;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	e005      	b.n	800b200 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	6879      	ldr	r1, [r7, #4]
 800b1f8:	68b8      	ldr	r0, [r7, #8]
 800b1fa:	f00d fa72 	bl	80186e2 <memcpy>

    return copy;
 800b1fe:	68bb      	ldr	r3, [r7, #8]
}
 800b200:	4618      	mov	r0, r3
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2028      	movs	r0, #40	@ 0x28
 800b216:	4798      	blx	r3
 800b218:	60f8      	str	r0, [r7, #12]
    if (node)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d004      	beq.n	800b22a <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800b220:	2228      	movs	r2, #40	@ 0x28
 800b222:	2100      	movs	r1, #0
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f00d f989 	bl	801853c <memset>
    }

    return node;
 800b22a:	68fb      	ldr	r3, [r7, #12]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800b23c:	2300      	movs	r3, #0
 800b23e:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800b240:	e03d      	b.n	800b2be <cJSON_Delete+0x8a>
    {
        next = item->next;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b250:	2b00      	cmp	r3, #0
 800b252:	d108      	bne.n	800b266 <cJSON_Delete+0x32>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d004      	beq.n	800b266 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	4618      	mov	r0, r3
 800b262:	f7ff ffe7 	bl	800b234 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10c      	bne.n	800b28c <cJSON_Delete+0x58>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	691b      	ldr	r3, [r3, #16]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d008      	beq.n	800b28c <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 800b27a:	4b15      	ldr	r3, [pc, #84]	@ (800b2d0 <cJSON_Delete+0x9c>)
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	6912      	ldr	r2, [r2, #16]
 800b282:	4610      	mov	r0, r2
 800b284:	4798      	blx	r3
            item->valuestring = NULL;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b294:	2b00      	cmp	r3, #0
 800b296:	d10c      	bne.n	800b2b2 <cJSON_Delete+0x7e>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6a1b      	ldr	r3, [r3, #32]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d008      	beq.n	800b2b2 <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 800b2a0:	4b0b      	ldr	r3, [pc, #44]	@ (800b2d0 <cJSON_Delete+0x9c>)
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	6a12      	ldr	r2, [r2, #32]
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	4798      	blx	r3
            item->string = NULL;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 800b2b2:	4b07      	ldr	r3, [pc, #28]	@ (800b2d0 <cJSON_Delete+0x9c>)
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	4798      	blx	r3
        item = next;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1be      	bne.n	800b242 <cJSON_Delete+0xe>
    }
}
 800b2c4:	bf00      	nop
 800b2c6:	bf00      	nop
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	20000010 	.word	0x20000010

0800b2d4 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800b2d8:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr
 800b2e4:	0000      	movs	r0, r0
	...

0800b2e8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b098      	sub	sp, #96	@ 0x60
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
    double number = 0;
 800b2f2:	f04f 0200 	mov.w	r2, #0
 800b2f6:	f04f 0300 	mov.w	r3, #0
 800b2fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 800b2fe:	2300      	movs	r3, #0
 800b300:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800b302:	f7ff ffe7 	bl	800b2d4 <get_decimal_point>
 800b306:	4603      	mov	r3, r0
 800b308:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800b30c:	2300      	movs	r3, #0
 800b30e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d003      	beq.n	800b31e <parse_number+0x36>
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d101      	bne.n	800b322 <parse_number+0x3a>
    {
        return false;
 800b31e:	2300      	movs	r3, #0
 800b320:	e0a0      	b.n	800b464 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800b322:	2300      	movs	r3, #0
 800b324:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b326:	e03d      	b.n	800b3a4 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	6899      	ldr	r1, [r3, #8]
 800b330:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b332:	440b      	add	r3, r1
 800b334:	4413      	add	r3, r2
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	2b45      	cmp	r3, #69	@ 0x45
 800b33a:	dc17      	bgt.n	800b36c <parse_number+0x84>
 800b33c:	2b2b      	cmp	r3, #43	@ 0x2b
 800b33e:	db40      	blt.n	800b3c2 <parse_number+0xda>
 800b340:	3b2b      	subs	r3, #43	@ 0x2b
 800b342:	2201      	movs	r2, #1
 800b344:	409a      	lsls	r2, r3
 800b346:	4b4c      	ldr	r3, [pc, #304]	@ (800b478 <parse_number+0x190>)
 800b348:	4013      	ands	r3, r2
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	bf14      	ite	ne
 800b34e:	2301      	movne	r3, #1
 800b350:	2300      	moveq	r3, #0
 800b352:	b2db      	uxtb	r3, r3
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10b      	bne.n	800b370 <parse_number+0x88>
 800b358:	f002 0308 	and.w	r3, r2, #8
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	bf14      	ite	ne
 800b360:	2301      	movne	r3, #1
 800b362:	2300      	moveq	r3, #0
 800b364:	b2db      	uxtb	r3, r3
 800b366:	2b00      	cmp	r3, #0
 800b368:	d111      	bne.n	800b38e <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800b36a:	e02a      	b.n	800b3c2 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800b36c:	2b65      	cmp	r3, #101	@ 0x65
 800b36e:	d128      	bne.n	800b3c2 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	6899      	ldr	r1, [r3, #8]
 800b378:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b37a:	440b      	add	r3, r1
 800b37c:	4413      	add	r3, r2
 800b37e:	7819      	ldrb	r1, [r3, #0]
 800b380:	f107 0208 	add.w	r2, r7, #8
 800b384:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b386:	4413      	add	r3, r2
 800b388:	460a      	mov	r2, r1
 800b38a:	701a      	strb	r2, [r3, #0]
                break;
 800b38c:	e007      	b.n	800b39e <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800b38e:	f107 0208 	add.w	r2, r7, #8
 800b392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b394:	4413      	add	r3, r2
 800b396:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800b39a:	701a      	strb	r2, [r3, #0]
                break;
 800b39c:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800b39e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b3a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3a6:	2b3e      	cmp	r3, #62	@ 0x3e
 800b3a8:	d80d      	bhi.n	800b3c6 <parse_number+0xde>
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00a      	beq.n	800b3c6 <parse_number+0xde>
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	689a      	ldr	r2, [r3, #8]
 800b3b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3b6:	441a      	add	r2, r3
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d3b3      	bcc.n	800b328 <parse_number+0x40>
        }
    }
loop_end:
 800b3c0:	e001      	b.n	800b3c6 <parse_number+0xde>
                goto loop_end;
 800b3c2:	bf00      	nop
 800b3c4:	e000      	b.n	800b3c8 <parse_number+0xe0>
loop_end:
 800b3c6:	bf00      	nop
    number_c_string[i] = '\0';
 800b3c8:	f107 0208 	add.w	r2, r7, #8
 800b3cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3ce:	4413      	add	r3, r2
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800b3d4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800b3d8:	f107 0308 	add.w	r3, r7, #8
 800b3dc:	4611      	mov	r1, r2
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f00c f9ee 	bl	80177c0 <strtod>
 800b3e4:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 800b3e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3ea:	f107 0308 	add.w	r3, r7, #8
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d101      	bne.n	800b3f6 <parse_number+0x10e>
    {
        return false; /* parse_error */
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	e036      	b.n	800b464 <parse_number+0x17c>
    }

    item->valuedouble = number;
 800b3f6:	6879      	ldr	r1, [r7, #4]
 800b3f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b3fc:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800b400:	a31b      	add	r3, pc, #108	@ (adr r3, 800b470 <parse_number+0x188>)
 800b402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b406:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800b40a:	f7fd fbab 	bl	8008b64 <__aeabi_dcmpge>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d004      	beq.n	800b41e <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800b41a:	615a      	str	r2, [r3, #20]
 800b41c:	e015      	b.n	800b44a <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800b41e:	f04f 0200 	mov.w	r2, #0
 800b422:	4b16      	ldr	r3, [pc, #88]	@ (800b47c <parse_number+0x194>)
 800b424:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800b428:	f7fd fb92 	bl	8008b50 <__aeabi_dcmple>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d004      	beq.n	800b43c <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b438:	615a      	str	r2, [r3, #20]
 800b43a:	e006      	b.n	800b44a <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800b43c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800b440:	f7fd fbba 	bl	8008bb8 <__aeabi_d2iz>
 800b444:	4602      	mov	r2, r0
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2208      	movs	r2, #8
 800b44e:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b456:	f107 0208 	add.w	r2, r7, #8
 800b45a:	1a8a      	subs	r2, r1, r2
 800b45c:	441a      	add	r2, r3
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	609a      	str	r2, [r3, #8]
    return true;
 800b462:	2301      	movs	r3, #1
}
 800b464:	4618      	mov	r0, r3
 800b466:	3760      	adds	r7, #96	@ 0x60
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	f3af 8000 	nop.w
 800b470:	ffc00000 	.word	0xffc00000
 800b474:	41dfffff 	.word	0x41dfffff
 800b478:	04007fe5 	.word	0x04007fe5
 800b47c:	c1e00000 	.word	0xc1e00000

0800b480 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800b48a:	2300      	movs	r3, #0
 800b48c:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800b48e:	2300      	movs	r3, #0
 800b490:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d003      	beq.n	800b4a0 <ensure+0x20>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d101      	bne.n	800b4a4 <ensure+0x24>
    {
        return NULL;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	e083      	b.n	800b5ac <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d007      	beq.n	800b4bc <ensure+0x3c>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	689a      	ldr	r2, [r3, #8]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d301      	bcc.n	800b4bc <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	e077      	b.n	800b5ac <ensure+0x12c>
    }

    if (needed > INT_MAX)
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	da01      	bge.n	800b4c6 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	e072      	b.n	800b5ac <ensure+0x12c>
    }

    needed += p->offset + 1;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	689a      	ldr	r2, [r3, #8]
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	683a      	ldr	r2, [r7, #0]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d805      	bhi.n	800b4e8 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	e061      	b.n	800b5ac <ensure+0x12c>
    }

    if (p->noalloc) {
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d001      	beq.n	800b4f4 <ensure+0x74>
        return NULL;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	e05b      	b.n	800b5ac <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4fa:	d308      	bcc.n	800b50e <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	db03      	blt.n	800b50a <ensure+0x8a>
        {
            newsize = INT_MAX;
 800b502:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b506:	60bb      	str	r3, [r7, #8]
 800b508:	e004      	b.n	800b514 <ensure+0x94>
        }
        else
        {
            return NULL;
 800b50a:	2300      	movs	r3, #0
 800b50c:	e04e      	b.n	800b5ac <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	005b      	lsls	r3, r3, #1
 800b512:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6a1b      	ldr	r3, [r3, #32]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d018      	beq.n	800b54e <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6a1b      	ldr	r3, [r3, #32]
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	6812      	ldr	r2, [r2, #0]
 800b524:	68b9      	ldr	r1, [r7, #8]
 800b526:	4610      	mov	r0, r2
 800b528:	4798      	blx	r3
 800b52a:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d132      	bne.n	800b598 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	69db      	ldr	r3, [r3, #28]
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	6812      	ldr	r2, [r2, #0]
 800b53a:	4610      	mov	r0, r2
 800b53c:	4798      	blx	r3
            p->length = 0;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	601a      	str	r2, [r3, #0]

            return NULL;
 800b54a:	2300      	movs	r3, #0
 800b54c:	e02e      	b.n	800b5ac <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	699b      	ldr	r3, [r3, #24]
 800b552:	68b8      	ldr	r0, [r7, #8]
 800b554:	4798      	blx	r3
 800b556:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10d      	bne.n	800b57a <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	69db      	ldr	r3, [r3, #28]
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	6812      	ldr	r2, [r2, #0]
 800b566:	4610      	mov	r0, r2
 800b568:	4798      	blx	r3
            p->length = 0;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	601a      	str	r2, [r3, #0]

            return NULL;
 800b576:	2300      	movs	r3, #0
 800b578:	e018      	b.n	800b5ac <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6819      	ldr	r1, [r3, #0]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	3301      	adds	r3, #1
 800b584:	461a      	mov	r2, r3
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f00d f8ab 	bl	80186e2 <memcpy>
        p->hooks.deallocate(p->buffer);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	69db      	ldr	r3, [r3, #28]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	6812      	ldr	r2, [r2, #0]
 800b594:	4610      	mov	r0, r2
 800b596:	4798      	blx	r3
    }
    p->length = newsize;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	68ba      	ldr	r2, [r7, #8]
 800b59c:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	4413      	add	r3, r2
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800b5b4:	b590      	push	{r4, r7, lr}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d013      	beq.n	800b5ee <update_offset+0x3a>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00f      	beq.n	800b5ee <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	4413      	add	r3, r2
 800b5d8:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	689c      	ldr	r4, [r3, #8]
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f7fc fe76 	bl	80082d0 <strlen>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	18e2      	adds	r2, r4, r3
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	609a      	str	r2, [r3, #8]
 800b5ec:	e000      	b.n	800b5f0 <update_offset+0x3c>
        return;
 800b5ee:	bf00      	nop
}
 800b5f0:	3714      	adds	r7, #20
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd90      	pop	{r4, r7, pc}
	...

0800b5f8 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 800b5f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b5fc:	b087      	sub	sp, #28
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	ed87 0b02 	vstr	d0, [r7, #8]
 800b604:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 800b608:	68b8      	ldr	r0, [r7, #8]
 800b60a:	68fe      	ldr	r6, [r7, #12]
 800b60c:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 800b610:	683a      	ldr	r2, [r7, #0]
 800b612:	687e      	ldr	r6, [r7, #4]
 800b614:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b618:	f7fd faae 	bl	8008b78 <__aeabi_dcmpgt>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d004      	beq.n	800b62c <compare_double+0x34>
 800b622:	68bc      	ldr	r4, [r7, #8]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800b62a:	e003      	b.n	800b634 <compare_double+0x3c>
 800b62c:	683c      	ldr	r4, [r7, #0]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800b634:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 800b638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b63c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b640:	f7fc fe52 	bl	80082e8 <__aeabi_dsub>
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	4690      	mov	r8, r2
 800b64a:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800b64e:	f04f 0200 	mov.w	r2, #0
 800b652:	4b0c      	ldr	r3, [pc, #48]	@ (800b684 <compare_double+0x8c>)
 800b654:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b658:	f7fc fffe 	bl	8008658 <__aeabi_dmul>
 800b65c:	4602      	mov	r2, r0
 800b65e:	460b      	mov	r3, r1
 800b660:	2101      	movs	r1, #1
 800b662:	460c      	mov	r4, r1
 800b664:	4640      	mov	r0, r8
 800b666:	4649      	mov	r1, r9
 800b668:	f7fd fa72 	bl	8008b50 <__aeabi_dcmple>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d101      	bne.n	800b676 <compare_double+0x7e>
 800b672:	2300      	movs	r3, #0
 800b674:	461c      	mov	r4, r3
 800b676:	b2e3      	uxtb	r3, r4
}
 800b678:	4618      	mov	r0, r3
 800b67a:	371c      	adds	r7, #28
 800b67c:	46bd      	mov	sp, r7
 800b67e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b682:	bf00      	nop
 800b684:	3cb00000 	.word	0x3cb00000

0800b688 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 800b688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b68a:	b093      	sub	sp, #76	@ 0x4c
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800b692:	2300      	movs	r3, #0
 800b694:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b69c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 800b6a8:	f107 0314 	add.w	r3, r7, #20
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	601a      	str	r2, [r3, #0]
 800b6b0:	605a      	str	r2, [r3, #4]
 800b6b2:	609a      	str	r2, [r3, #8]
 800b6b4:	60da      	str	r2, [r3, #12]
 800b6b6:	611a      	str	r2, [r3, #16]
 800b6b8:	615a      	str	r2, [r3, #20]
 800b6ba:	831a      	strh	r2, [r3, #24]
    unsigned char decimal_point = get_decimal_point();
 800b6bc:	f7ff fe0a 	bl	800b2d4 <get_decimal_point>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 800b6c6:	f04f 0200 	mov.w	r2, #0
 800b6ca:	f04f 0300 	mov.w	r3, #0
 800b6ce:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d101      	bne.n	800b6dc <print_number+0x54>
    {
        return false;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	e0b4      	b.n	800b846 <print_number+0x1be>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800b6dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800b6e0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800b6e4:	f7fd fa52 	bl	8008b8c <__aeabi_dcmpun>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d121      	bne.n	800b732 <print_number+0xaa>
 800b6ee:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 800b6f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6f2:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	461e      	mov	r6, r3
 800b6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b6fe:	4b54      	ldr	r3, [pc, #336]	@ (800b850 <print_number+0x1c8>)
 800b700:	4620      	mov	r0, r4
 800b702:	4629      	mov	r1, r5
 800b704:	f7fd fa42 	bl	8008b8c <__aeabi_dcmpun>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d10b      	bne.n	800b726 <print_number+0x9e>
 800b70e:	f04f 32ff 	mov.w	r2, #4294967295
 800b712:	4b4f      	ldr	r3, [pc, #316]	@ (800b850 <print_number+0x1c8>)
 800b714:	4620      	mov	r0, r4
 800b716:	4629      	mov	r1, r5
 800b718:	f7fd fa1a 	bl	8008b50 <__aeabi_dcmple>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d101      	bne.n	800b726 <print_number+0x9e>
 800b722:	2300      	movs	r3, #0
 800b724:	461e      	mov	r6, r3
 800b726:	b2f3      	uxtb	r3, r6
 800b728:	f083 0301 	eor.w	r3, r3, #1
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d007      	beq.n	800b742 <print_number+0xba>
    {
        length = sprintf((char*)number_buffer, "null");
 800b732:	f107 0314 	add.w	r3, r7, #20
 800b736:	4947      	ldr	r1, [pc, #284]	@ (800b854 <print_number+0x1cc>)
 800b738:	4618      	mov	r0, r3
 800b73a:	f00c fd9b 	bl	8018274 <siprintf>
 800b73e:	6478      	str	r0, [r7, #68]	@ 0x44
 800b740:	e03f      	b.n	800b7c2 <print_number+0x13a>
    }
    else if(d == (double)item->valueint)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	695b      	ldr	r3, [r3, #20]
 800b746:	4618      	mov	r0, r3
 800b748:	f7fc ff1c 	bl	8008584 <__aeabi_i2d>
 800b74c:	4602      	mov	r2, r0
 800b74e:	460b      	mov	r3, r1
 800b750:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800b754:	f7fd f9e8 	bl	8008b28 <__aeabi_dcmpeq>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d009      	beq.n	800b772 <print_number+0xea>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	695a      	ldr	r2, [r3, #20]
 800b762:	f107 0314 	add.w	r3, r7, #20
 800b766:	493c      	ldr	r1, [pc, #240]	@ (800b858 <print_number+0x1d0>)
 800b768:	4618      	mov	r0, r3
 800b76a:	f00c fd83 	bl	8018274 <siprintf>
 800b76e:	6478      	str	r0, [r7, #68]	@ 0x44
 800b770:	e027      	b.n	800b7c2 <print_number+0x13a>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 800b772:	f107 0014 	add.w	r0, r7, #20
 800b776:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800b77a:	4938      	ldr	r1, [pc, #224]	@ (800b85c <print_number+0x1d4>)
 800b77c:	f00c fd7a 	bl	8018274 <siprintf>
 800b780:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 800b782:	f107 0208 	add.w	r2, r7, #8
 800b786:	f107 0314 	add.w	r3, r7, #20
 800b78a:	4935      	ldr	r1, [pc, #212]	@ (800b860 <print_number+0x1d8>)
 800b78c:	4618      	mov	r0, r3
 800b78e:	f00c fd93 	bl	80182b8 <siscanf>
 800b792:	4603      	mov	r3, r0
 800b794:	2b01      	cmp	r3, #1
 800b796:	d10c      	bne.n	800b7b2 <print_number+0x12a>
 800b798:	ed97 7b02 	vldr	d7, [r7, #8]
 800b79c:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 800b7a0:	eeb0 0a47 	vmov.f32	s0, s14
 800b7a4:	eef0 0a67 	vmov.f32	s1, s15
 800b7a8:	f7ff ff26 	bl	800b5f8 <compare_double>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d107      	bne.n	800b7c2 <print_number+0x13a>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 800b7b2:	f107 0014 	add.w	r0, r7, #20
 800b7b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800b7ba:	492a      	ldr	r1, [pc, #168]	@ (800b864 <print_number+0x1dc>)
 800b7bc:	f00c fd5a 	bl	8018274 <siprintf>
 800b7c0:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800b7c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	db02      	blt.n	800b7ce <print_number+0x146>
 800b7c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7ca:	2b19      	cmp	r3, #25
 800b7cc:	dd01      	ble.n	800b7d2 <print_number+0x14a>
    {
        return false;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	e039      	b.n	800b846 <print_number+0x1be>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800b7d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	6838      	ldr	r0, [r7, #0]
 800b7da:	f7ff fe51 	bl	800b480 <ensure>
 800b7de:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 800b7e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d101      	bne.n	800b7ea <print_number+0x162>
    {
        return false;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	e02d      	b.n	800b846 <print_number+0x1be>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7ee:	e01a      	b.n	800b826 <print_number+0x19e>
    {
        if (number_buffer[i] == decimal_point)
 800b7f0:	f107 0214 	add.w	r2, r7, #20
 800b7f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7f6:	4413      	add	r3, r2
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d105      	bne.n	800b80e <print_number+0x186>
        {
            output_pointer[i] = '.';
 800b802:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b806:	4413      	add	r3, r2
 800b808:	222e      	movs	r2, #46	@ 0x2e
 800b80a:	701a      	strb	r2, [r3, #0]
            continue;
 800b80c:	e008      	b.n	800b820 <print_number+0x198>
        }

        output_pointer[i] = number_buffer[i];
 800b80e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b812:	4413      	add	r3, r2
 800b814:	f107 0114 	add.w	r1, r7, #20
 800b818:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b81a:	440a      	add	r2, r1
 800b81c:	7812      	ldrb	r2, [r2, #0]
 800b81e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800b820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b822:	3301      	adds	r3, #1
 800b824:	643b      	str	r3, [r7, #64]	@ 0x40
 800b826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b828:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d3e0      	bcc.n	800b7f0 <print_number+0x168>
    }
    output_pointer[i] = '\0';
 800b82e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b832:	4413      	add	r3, r2
 800b834:	2200      	movs	r2, #0
 800b836:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	689a      	ldr	r2, [r3, #8]
 800b83c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b83e:	441a      	add	r2, r3
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	609a      	str	r2, [r3, #8]

    return true;
 800b844:	2301      	movs	r3, #1
}
 800b846:	4618      	mov	r0, r3
 800b848:	374c      	adds	r7, #76	@ 0x4c
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b84e:	bf00      	nop
 800b850:	7fefffff 	.word	0x7fefffff
 800b854:	0801b8e0 	.word	0x0801b8e0
 800b858:	0801b8e8 	.word	0x0801b8e8
 800b85c:	0801b8ec 	.word	0x0801b8ec
 800b860:	0801b8f4 	.word	0x0801b8f4
 800b864:	0801b8f8 	.word	0x0801b8f8

0800b868 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800b874:	2300      	movs	r3, #0
 800b876:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800b878:	2300      	movs	r3, #0
 800b87a:	60bb      	str	r3, [r7, #8]
 800b87c:	e04c      	b.n	800b918 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	4413      	add	r3, r2
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	2b2f      	cmp	r3, #47	@ 0x2f
 800b888:	d90f      	bls.n	800b8aa <parse_hex4+0x42>
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	4413      	add	r3, r2
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	2b39      	cmp	r3, #57	@ 0x39
 800b894:	d809      	bhi.n	800b8aa <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	4413      	add	r3, r2
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	3b30      	subs	r3, #48	@ 0x30
 800b8a6:	60fb      	str	r3, [r7, #12]
 800b8a8:	e02d      	b.n	800b906 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	2b40      	cmp	r3, #64	@ 0x40
 800b8b4:	d90f      	bls.n	800b8d6 <parse_hex4+0x6e>
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	2b46      	cmp	r3, #70	@ 0x46
 800b8c0:	d809      	bhi.n	800b8d6 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	3b37      	subs	r3, #55	@ 0x37
 800b8d2:	60fb      	str	r3, [r7, #12]
 800b8d4:	e017      	b.n	800b906 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	4413      	add	r3, r2
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	2b60      	cmp	r3, #96	@ 0x60
 800b8e0:	d90f      	bls.n	800b902 <parse_hex4+0x9a>
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	2b66      	cmp	r3, #102	@ 0x66
 800b8ec:	d809      	bhi.n	800b902 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	3b57      	subs	r3, #87	@ 0x57
 800b8fe:	60fb      	str	r3, [r7, #12]
 800b900:	e001      	b.n	800b906 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800b902:	2300      	movs	r3, #0
 800b904:	e00c      	b.n	800b920 <parse_hex4+0xb8>
        }

        if (i < 3)
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	2b02      	cmp	r3, #2
 800b90a:	d802      	bhi.n	800b912 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	011b      	lsls	r3, r3, #4
 800b910:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	3301      	adds	r3, #1
 800b916:	60bb      	str	r3, [r7, #8]
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	2b03      	cmp	r3, #3
 800b91c:	d9af      	bls.n	800b87e <parse_hex4+0x16>
        }
    }

    return h;
 800b91e:	68fb      	ldr	r3, [r7, #12]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3714      	adds	r7, #20
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b08a      	sub	sp, #40	@ 0x28
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800b938:	2300      	movs	r3, #0
 800b93a:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800b93c:	2300      	movs	r3, #0
 800b93e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800b944:	2300      	movs	r3, #0
 800b946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 800b94a:	2300      	movs	r3, #0
 800b94c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 800b950:	2300      	movs	r3, #0
 800b952:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 800b956:	2300      	movs	r3, #0
 800b958:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800b95c:	68ba      	ldr	r2, [r7, #8]
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	1ad3      	subs	r3, r2, r3
 800b962:	2b05      	cmp	r3, #5
 800b964:	f340 80b7 	ble.w	800bad6 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	3302      	adds	r3, #2
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7ff ff7b 	bl	800b868 <parse_hex4>
 800b972:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800b97a:	d304      	bcc.n	800b986 <utf16_literal_to_utf8+0x5a>
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800b982:	f0c0 80aa 	bcc.w	800bada <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800b98c:	d337      	bcc.n	800b9fe <utf16_literal_to_utf8+0xd2>
 800b98e:	69fb      	ldr	r3, [r7, #28]
 800b990:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800b994:	d233      	bcs.n	800b9fe <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	3306      	adds	r3, #6
 800b99a:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800b99c:	2300      	movs	r3, #0
 800b99e:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800b9a0:	230c      	movs	r3, #12
 800b9a2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	1ad3      	subs	r3, r2, r3
 800b9ac:	2b05      	cmp	r3, #5
 800b9ae:	f340 8096 	ble.w	800bade <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	2b5c      	cmp	r3, #92	@ 0x5c
 800b9b8:	f040 8093 	bne.w	800bae2 <utf16_literal_to_utf8+0x1b6>
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	2b75      	cmp	r3, #117	@ 0x75
 800b9c4:	f040 808d 	bne.w	800bae2 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	3302      	adds	r3, #2
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7ff ff4b 	bl	800b868 <parse_hex4>
 800b9d2:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800b9da:	f0c0 8084 	bcc.w	800bae6 <utf16_literal_to_utf8+0x1ba>
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800b9e4:	d27f      	bcs.n	800bae6 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	029a      	lsls	r2, r3, #10
 800b9ea:	4b43      	ldr	r3, [pc, #268]	@ (800baf8 <utf16_literal_to_utf8+0x1cc>)
 800b9ec:	4013      	ands	r3, r2
 800b9ee:	693a      	ldr	r2, [r7, #16]
 800b9f0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800b9fa:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 800b9fc:	e004      	b.n	800ba08 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800b9fe:	2306      	movs	r3, #6
 800ba00:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800ba08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba0a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba0c:	d803      	bhi.n	800ba16 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ba14:	e01f      	b.n	800ba56 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800ba16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba1c:	d206      	bcs.n	800ba2c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800ba1e:	2302      	movs	r3, #2
 800ba20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800ba24:	23c0      	movs	r3, #192	@ 0xc0
 800ba26:	f887 3020 	strb.w	r3, [r7, #32]
 800ba2a:	e014      	b.n	800ba56 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba32:	d206      	bcs.n	800ba42 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800ba34:	2303      	movs	r3, #3
 800ba36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800ba3a:	23e0      	movs	r3, #224	@ 0xe0
 800ba3c:	f887 3020 	strb.w	r3, [r7, #32]
 800ba40:	e009      	b.n	800ba56 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800ba42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba44:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800ba48:	d24f      	bcs.n	800baea <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800ba4a:	2304      	movs	r3, #4
 800ba4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800ba50:	23f0      	movs	r3, #240	@ 0xf0
 800ba52:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800ba56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800ba60:	e015      	b.n	800ba8e <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800ba62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba6a:	b2da      	uxtb	r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6819      	ldr	r1, [r3, #0]
 800ba70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ba74:	440b      	add	r3, r1
 800ba76:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ba7a:	b2d2      	uxtb	r2, r2
 800ba7c:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba80:	099b      	lsrs	r3, r3, #6
 800ba82:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800ba84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ba88:	3b01      	subs	r3, #1
 800ba8a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800ba8e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1e5      	bne.n	800ba62 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800ba96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d909      	bls.n	800bab2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800ba9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa0:	b2d9      	uxtb	r1, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800baaa:	430a      	orrs	r2, r1
 800baac:	b2d2      	uxtb	r2, r2
 800baae:	701a      	strb	r2, [r3, #0]
 800bab0:	e007      	b.n	800bac2 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800bab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab4:	b2da      	uxtb	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800babe:	b2d2      	uxtb	r2, r2
 800bac0:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800baca:	441a      	add	r2, r3
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800bad0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800bad4:	e00b      	b.n	800baee <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800bad6:	bf00      	nop
 800bad8:	e008      	b.n	800baec <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800bada:	bf00      	nop
 800badc:	e006      	b.n	800baec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800bade:	bf00      	nop
 800bae0:	e004      	b.n	800baec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800bae2:	bf00      	nop
 800bae4:	e002      	b.n	800baec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800bae6:	bf00      	nop
 800bae8:	e000      	b.n	800baec <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800baea:	bf00      	nop

fail:
    return 0;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3728      	adds	r7, #40	@ 0x28
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	000ffc00 	.word	0x000ffc00

0800bafc <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b08a      	sub	sp, #40	@ 0x28
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	4413      	add	r3, r2
 800bb12:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	4413      	add	r3, r2
 800bb20:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800bb22:	2300      	movs	r3, #0
 800bb24:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800bb26:	2300      	movs	r3, #0
 800bb28:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	4413      	add	r3, r2
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	2b22      	cmp	r3, #34	@ 0x22
 800bb38:	f040 8103 	bne.w	800bd42 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800bb40:	2300      	movs	r3, #0
 800bb42:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800bb44:	e017      	b.n	800bb76 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800bb46:	6a3b      	ldr	r3, [r7, #32]
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	2b5c      	cmp	r3, #92	@ 0x5c
 800bb4c:	d110      	bne.n	800bb70 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800bb4e:	6a3b      	ldr	r3, [r7, #32]
 800bb50:	1c5a      	adds	r2, r3, #1
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	1ad3      	subs	r3, r2, r3
 800bb58:	461a      	mov	r2, r3
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	f080 80f1 	bcs.w	800bd46 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	3301      	adds	r3, #1
 800bb68:	61bb      	str	r3, [r7, #24]
                input_end++;
 800bb6a:	6a3b      	ldr	r3, [r7, #32]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800bb70:	6a3b      	ldr	r3, [r7, #32]
 800bb72:	3301      	adds	r3, #1
 800bb74:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	6a3a      	ldr	r2, [r7, #32]
 800bb7c:	1ad3      	subs	r3, r2, r3
 800bb7e:	461a      	mov	r2, r3
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d203      	bcs.n	800bb90 <parse_string+0x94>
 800bb88:	6a3b      	ldr	r3, [r7, #32]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	2b22      	cmp	r3, #34	@ 0x22
 800bb8e:	d1da      	bne.n	800bb46 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	6a3a      	ldr	r2, [r7, #32]
 800bb96:	1ad3      	subs	r3, r2, r3
 800bb98:	461a      	mov	r2, r3
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	f080 80d3 	bcs.w	800bd4a <parse_string+0x24e>
 800bba4:	6a3b      	ldr	r3, [r7, #32]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	2b22      	cmp	r3, #34	@ 0x22
 800bbaa:	f040 80ce 	bne.w	800bd4a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	6a3a      	ldr	r2, [r7, #32]
 800bbba:	1ad3      	subs	r3, r2, r3
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	1ad3      	subs	r3, r2, r3
 800bbc2:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	691b      	ldr	r3, [r3, #16]
 800bbc8:	693a      	ldr	r2, [r7, #16]
 800bbca:	3201      	adds	r2, #1
 800bbcc:	4610      	mov	r0, r2
 800bbce:	4798      	blx	r3
 800bbd0:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f000 80ba 	beq.w	800bd4e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800bbde:	e094      	b.n	800bd0a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 800bbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	2b5c      	cmp	r3, #92	@ 0x5c
 800bbe6:	d008      	beq.n	800bbfa <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800bbe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbea:	1c53      	adds	r3, r2, #1
 800bbec:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	1c59      	adds	r1, r3, #1
 800bbf2:	60f9      	str	r1, [r7, #12]
 800bbf4:	7812      	ldrb	r2, [r2, #0]
 800bbf6:	701a      	strb	r2, [r3, #0]
 800bbf8:	e087      	b.n	800bd0a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800bbfa:	2302      	movs	r3, #2
 800bbfc:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800bbfe:	6a3a      	ldr	r2, [r7, #32]
 800bc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc02:	1ad3      	subs	r3, r2, r3
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	f340 80a4 	ble.w	800bd52 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800bc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	2b75      	cmp	r3, #117	@ 0x75
 800bc12:	f300 80a0 	bgt.w	800bd56 <parse_string+0x25a>
 800bc16:	2b5c      	cmp	r3, #92	@ 0x5c
 800bc18:	da04      	bge.n	800bc24 <parse_string+0x128>
 800bc1a:	2b22      	cmp	r3, #34	@ 0x22
 800bc1c:	d05c      	beq.n	800bcd8 <parse_string+0x1dc>
 800bc1e:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc20:	d05a      	beq.n	800bcd8 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800bc22:	e098      	b.n	800bd56 <parse_string+0x25a>
            switch (input_pointer[1])
 800bc24:	3b5c      	subs	r3, #92	@ 0x5c
 800bc26:	2b19      	cmp	r3, #25
 800bc28:	f200 8095 	bhi.w	800bd56 <parse_string+0x25a>
 800bc2c:	a201      	add	r2, pc, #4	@ (adr r2, 800bc34 <parse_string+0x138>)
 800bc2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc32:	bf00      	nop
 800bc34:	0800bcd9 	.word	0x0800bcd9
 800bc38:	0800bd57 	.word	0x0800bd57
 800bc3c:	0800bd57 	.word	0x0800bd57
 800bc40:	0800bd57 	.word	0x0800bd57
 800bc44:	0800bd57 	.word	0x0800bd57
 800bc48:	0800bd57 	.word	0x0800bd57
 800bc4c:	0800bc9d 	.word	0x0800bc9d
 800bc50:	0800bd57 	.word	0x0800bd57
 800bc54:	0800bd57 	.word	0x0800bd57
 800bc58:	0800bd57 	.word	0x0800bd57
 800bc5c:	0800bca9 	.word	0x0800bca9
 800bc60:	0800bd57 	.word	0x0800bd57
 800bc64:	0800bd57 	.word	0x0800bd57
 800bc68:	0800bd57 	.word	0x0800bd57
 800bc6c:	0800bd57 	.word	0x0800bd57
 800bc70:	0800bd57 	.word	0x0800bd57
 800bc74:	0800bd57 	.word	0x0800bd57
 800bc78:	0800bd57 	.word	0x0800bd57
 800bc7c:	0800bcb5 	.word	0x0800bcb5
 800bc80:	0800bd57 	.word	0x0800bd57
 800bc84:	0800bd57 	.word	0x0800bd57
 800bc88:	0800bd57 	.word	0x0800bd57
 800bc8c:	0800bcc1 	.word	0x0800bcc1
 800bc90:	0800bd57 	.word	0x0800bd57
 800bc94:	0800bccd 	.word	0x0800bccd
 800bc98:	0800bce9 	.word	0x0800bce9
                    *output_pointer++ = '\b';
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	1c5a      	adds	r2, r3, #1
 800bca0:	60fa      	str	r2, [r7, #12]
 800bca2:	2208      	movs	r2, #8
 800bca4:	701a      	strb	r2, [r3, #0]
                    break;
 800bca6:	e02c      	b.n	800bd02 <parse_string+0x206>
                    *output_pointer++ = '\f';
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	1c5a      	adds	r2, r3, #1
 800bcac:	60fa      	str	r2, [r7, #12]
 800bcae:	220c      	movs	r2, #12
 800bcb0:	701a      	strb	r2, [r3, #0]
                    break;
 800bcb2:	e026      	b.n	800bd02 <parse_string+0x206>
                    *output_pointer++ = '\n';
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	1c5a      	adds	r2, r3, #1
 800bcb8:	60fa      	str	r2, [r7, #12]
 800bcba:	220a      	movs	r2, #10
 800bcbc:	701a      	strb	r2, [r3, #0]
                    break;
 800bcbe:	e020      	b.n	800bd02 <parse_string+0x206>
                    *output_pointer++ = '\r';
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	1c5a      	adds	r2, r3, #1
 800bcc4:	60fa      	str	r2, [r7, #12]
 800bcc6:	220d      	movs	r2, #13
 800bcc8:	701a      	strb	r2, [r3, #0]
                    break;
 800bcca:	e01a      	b.n	800bd02 <parse_string+0x206>
                    *output_pointer++ = '\t';
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	1c5a      	adds	r2, r3, #1
 800bcd0:	60fa      	str	r2, [r7, #12]
 800bcd2:	2209      	movs	r2, #9
 800bcd4:	701a      	strb	r2, [r3, #0]
                    break;
 800bcd6:	e014      	b.n	800bd02 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 800bcd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcda:	1c5a      	adds	r2, r3, #1
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	1c59      	adds	r1, r3, #1
 800bce0:	60f9      	str	r1, [r7, #12]
 800bce2:	7812      	ldrb	r2, [r2, #0]
 800bce4:	701a      	strb	r2, [r3, #0]
                    break;
 800bce6:	e00c      	b.n	800bd02 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800bce8:	f107 030c 	add.w	r3, r7, #12
 800bcec:	461a      	mov	r2, r3
 800bcee:	6a39      	ldr	r1, [r7, #32]
 800bcf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bcf2:	f7ff fe1b 	bl	800b92c <utf16_literal_to_utf8>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800bcfa:	7dfb      	ldrb	r3, [r7, #23]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d02c      	beq.n	800bd5a <parse_string+0x25e>
                    break;
 800bd00:	bf00      	nop
            }
            input_pointer += sequence_length;
 800bd02:	7dfb      	ldrb	r3, [r7, #23]
 800bd04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd06:	4413      	add	r3, r2
 800bd08:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800bd0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd0c:	6a3b      	ldr	r3, [r7, #32]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	f4ff af66 	bcc.w	800bbe0 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2200      	movs	r2, #0
 800bd18:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2210      	movs	r2, #16
 800bd1e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	69fa      	ldr	r2, [r7, #28]
 800bd24:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	6a3a      	ldr	r2, [r7, #32]
 800bd2c:	1ad3      	subs	r3, r2, r3
 800bd2e:	461a      	mov	r2, r3
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	1c5a      	adds	r2, r3, #1
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	609a      	str	r2, [r3, #8]

    return true;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e020      	b.n	800bd84 <parse_string+0x288>
        goto fail;
 800bd42:	bf00      	nop
 800bd44:	e00a      	b.n	800bd5c <parse_string+0x260>
                    goto fail;
 800bd46:	bf00      	nop
 800bd48:	e008      	b.n	800bd5c <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800bd4a:	bf00      	nop
 800bd4c:	e006      	b.n	800bd5c <parse_string+0x260>
            goto fail; /* allocation failure */
 800bd4e:	bf00      	nop
 800bd50:	e004      	b.n	800bd5c <parse_string+0x260>
                goto fail;
 800bd52:	bf00      	nop
 800bd54:	e002      	b.n	800bd5c <parse_string+0x260>
                    goto fail;
 800bd56:	bf00      	nop
 800bd58:	e000      	b.n	800bd5c <parse_string+0x260>
                        goto fail;
 800bd5a:	bf00      	nop

fail:
    if (output != NULL)
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d005      	beq.n	800bd6e <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	695b      	ldr	r3, [r3, #20]
 800bd66:	69f8      	ldr	r0, [r7, #28]
 800bd68:	4798      	blx	r3
        output = NULL;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 800bd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d006      	beq.n	800bd82 <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	609a      	str	r2, [r3, #8]
    }

    return false;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3728      	adds	r7, #40	@ 0x28
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b088      	sub	sp, #32
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 800bd96:	2300      	movs	r3, #0
 800bd98:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800bda2:	2300      	movs	r3, #0
 800bda4:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 800bda6:	2300      	movs	r3, #0
 800bda8:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d101      	bne.n	800bdb4 <print_string_ptr+0x28>
    {
        return false;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	e110      	b.n	800bfd6 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d111      	bne.n	800bdde <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 800bdba:	2103      	movs	r1, #3
 800bdbc:	6838      	ldr	r0, [r7, #0]
 800bdbe:	f7ff fb5f 	bl	800b480 <ensure>
 800bdc2:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d101      	bne.n	800bdce <print_string_ptr+0x42>
        {
            return false;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	e103      	b.n	800bfd6 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	4a83      	ldr	r2, [pc, #524]	@ (800bfe0 <print_string_ptr+0x254>)
 800bdd2:	8811      	ldrh	r1, [r2, #0]
 800bdd4:	7892      	ldrb	r2, [r2, #2]
 800bdd6:	8019      	strh	r1, [r3, #0]
 800bdd8:	709a      	strb	r2, [r3, #2]

        return true;
 800bdda:	2301      	movs	r3, #1
 800bddc:	e0fb      	b.n	800bfd6 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	61fb      	str	r3, [r7, #28]
 800bde2:	e024      	b.n	800be2e <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 800bde4:	69fb      	ldr	r3, [r7, #28]
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	2b22      	cmp	r3, #34	@ 0x22
 800bdea:	dc0f      	bgt.n	800be0c <print_string_ptr+0x80>
 800bdec:	2b08      	cmp	r3, #8
 800bdee:	db13      	blt.n	800be18 <print_string_ptr+0x8c>
 800bdf0:	3b08      	subs	r3, #8
 800bdf2:	4a7c      	ldr	r2, [pc, #496]	@ (800bfe4 <print_string_ptr+0x258>)
 800bdf4:	fa22 f303 	lsr.w	r3, r2, r3
 800bdf8:	f003 0301 	and.w	r3, r3, #1
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	bf14      	ite	ne
 800be00:	2301      	movne	r3, #1
 800be02:	2300      	moveq	r3, #0
 800be04:	b2db      	uxtb	r3, r3
 800be06:	2b00      	cmp	r3, #0
 800be08:	d102      	bne.n	800be10 <print_string_ptr+0x84>
 800be0a:	e005      	b.n	800be18 <print_string_ptr+0x8c>
 800be0c:	2b5c      	cmp	r3, #92	@ 0x5c
 800be0e:	d103      	bne.n	800be18 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	3301      	adds	r3, #1
 800be14:	617b      	str	r3, [r7, #20]
                break;
 800be16:	e007      	b.n	800be28 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	2b1f      	cmp	r3, #31
 800be1e:	d802      	bhi.n	800be26 <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	3305      	adds	r3, #5
 800be24:	617b      	str	r3, [r7, #20]
                }
                break;
 800be26:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	3301      	adds	r3, #1
 800be2c:	61fb      	str	r3, [r7, #28]
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d1d6      	bne.n	800bde4 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800be36:	69fa      	ldr	r2, [r7, #28]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	1ad3      	subs	r3, r2, r3
 800be3c:	461a      	mov	r2, r3
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	4413      	add	r3, r2
 800be42:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	3303      	adds	r3, #3
 800be48:	4619      	mov	r1, r3
 800be4a:	6838      	ldr	r0, [r7, #0]
 800be4c:	f7ff fb18 	bl	800b480 <ensure>
 800be50:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d101      	bne.n	800be5c <print_string_ptr+0xd0>
    {
        return false;
 800be58:	2300      	movs	r3, #0
 800be5a:	e0bc      	b.n	800bfd6 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d117      	bne.n	800be92 <print_string_ptr+0x106>
    {
        output[0] = '\"';
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	2222      	movs	r2, #34	@ 0x22
 800be66:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	3301      	adds	r3, #1
 800be6c:	68fa      	ldr	r2, [r7, #12]
 800be6e:	6879      	ldr	r1, [r7, #4]
 800be70:	4618      	mov	r0, r3
 800be72:	f00c fc36 	bl	80186e2 <memcpy>
        output[output_length + 1] = '\"';
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	3301      	adds	r3, #1
 800be7a:	693a      	ldr	r2, [r7, #16]
 800be7c:	4413      	add	r3, r2
 800be7e:	2222      	movs	r2, #34	@ 0x22
 800be80:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	3302      	adds	r3, #2
 800be86:	693a      	ldr	r2, [r7, #16]
 800be88:	4413      	add	r3, r2
 800be8a:	2200      	movs	r2, #0
 800be8c:	701a      	strb	r2, [r3, #0]

        return true;
 800be8e:	2301      	movs	r3, #1
 800be90:	e0a1      	b.n	800bfd6 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	2222      	movs	r2, #34	@ 0x22
 800be96:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	3301      	adds	r3, #1
 800be9c:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	61fb      	str	r3, [r7, #28]
 800bea2:	e086      	b.n	800bfb2 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	2b1f      	cmp	r3, #31
 800beaa:	d90c      	bls.n	800bec6 <print_string_ptr+0x13a>
 800beac:	69fb      	ldr	r3, [r7, #28]
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	2b22      	cmp	r3, #34	@ 0x22
 800beb2:	d008      	beq.n	800bec6 <print_string_ptr+0x13a>
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	2b5c      	cmp	r3, #92	@ 0x5c
 800beba:	d004      	beq.n	800bec6 <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	781a      	ldrb	r2, [r3, #0]
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	701a      	strb	r2, [r3, #0]
 800bec4:	e06f      	b.n	800bfa6 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	1c5a      	adds	r2, r3, #1
 800beca:	61ba      	str	r2, [r7, #24]
 800becc:	225c      	movs	r2, #92	@ 0x5c
 800bece:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800bed0:	69fb      	ldr	r3, [r7, #28]
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	2b22      	cmp	r3, #34	@ 0x22
 800bed6:	dc3d      	bgt.n	800bf54 <print_string_ptr+0x1c8>
 800bed8:	2b08      	cmp	r3, #8
 800beda:	db59      	blt.n	800bf90 <print_string_ptr+0x204>
 800bedc:	3b08      	subs	r3, #8
 800bede:	2b1a      	cmp	r3, #26
 800bee0:	d856      	bhi.n	800bf90 <print_string_ptr+0x204>
 800bee2:	a201      	add	r2, pc, #4	@ (adr r2, 800bee8 <print_string_ptr+0x15c>)
 800bee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee8:	0800bf69 	.word	0x0800bf69
 800beec:	0800bf89 	.word	0x0800bf89
 800bef0:	0800bf79 	.word	0x0800bf79
 800bef4:	0800bf91 	.word	0x0800bf91
 800bef8:	0800bf71 	.word	0x0800bf71
 800befc:	0800bf81 	.word	0x0800bf81
 800bf00:	0800bf91 	.word	0x0800bf91
 800bf04:	0800bf91 	.word	0x0800bf91
 800bf08:	0800bf91 	.word	0x0800bf91
 800bf0c:	0800bf91 	.word	0x0800bf91
 800bf10:	0800bf91 	.word	0x0800bf91
 800bf14:	0800bf91 	.word	0x0800bf91
 800bf18:	0800bf91 	.word	0x0800bf91
 800bf1c:	0800bf91 	.word	0x0800bf91
 800bf20:	0800bf91 	.word	0x0800bf91
 800bf24:	0800bf91 	.word	0x0800bf91
 800bf28:	0800bf91 	.word	0x0800bf91
 800bf2c:	0800bf91 	.word	0x0800bf91
 800bf30:	0800bf91 	.word	0x0800bf91
 800bf34:	0800bf91 	.word	0x0800bf91
 800bf38:	0800bf91 	.word	0x0800bf91
 800bf3c:	0800bf91 	.word	0x0800bf91
 800bf40:	0800bf91 	.word	0x0800bf91
 800bf44:	0800bf91 	.word	0x0800bf91
 800bf48:	0800bf91 	.word	0x0800bf91
 800bf4c:	0800bf91 	.word	0x0800bf91
 800bf50:	0800bf61 	.word	0x0800bf61
 800bf54:	2b5c      	cmp	r3, #92	@ 0x5c
 800bf56:	d11b      	bne.n	800bf90 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	225c      	movs	r2, #92	@ 0x5c
 800bf5c:	701a      	strb	r2, [r3, #0]
                    break;
 800bf5e:	e022      	b.n	800bfa6 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	2222      	movs	r2, #34	@ 0x22
 800bf64:	701a      	strb	r2, [r3, #0]
                    break;
 800bf66:	e01e      	b.n	800bfa6 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	2262      	movs	r2, #98	@ 0x62
 800bf6c:	701a      	strb	r2, [r3, #0]
                    break;
 800bf6e:	e01a      	b.n	800bfa6 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	2266      	movs	r2, #102	@ 0x66
 800bf74:	701a      	strb	r2, [r3, #0]
                    break;
 800bf76:	e016      	b.n	800bfa6 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	226e      	movs	r2, #110	@ 0x6e
 800bf7c:	701a      	strb	r2, [r3, #0]
                    break;
 800bf7e:	e012      	b.n	800bfa6 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	2272      	movs	r2, #114	@ 0x72
 800bf84:	701a      	strb	r2, [r3, #0]
                    break;
 800bf86:	e00e      	b.n	800bfa6 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	2274      	movs	r2, #116	@ 0x74
 800bf8c:	701a      	strb	r2, [r3, #0]
                    break;
 800bf8e:	e00a      	b.n	800bfa6 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	461a      	mov	r2, r3
 800bf96:	4914      	ldr	r1, [pc, #80]	@ (800bfe8 <print_string_ptr+0x25c>)
 800bf98:	69b8      	ldr	r0, [r7, #24]
 800bf9a:	f00c f96b 	bl	8018274 <siprintf>
                    output_pointer += 4;
 800bf9e:	69bb      	ldr	r3, [r7, #24]
 800bfa0:	3304      	adds	r3, #4
 800bfa2:	61bb      	str	r3, [r7, #24]
                    break;
 800bfa4:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	61fb      	str	r3, [r7, #28]
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	61bb      	str	r3, [r7, #24]
 800bfb2:	69fb      	ldr	r3, [r7, #28]
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f47f af74 	bne.w	800bea4 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	693a      	ldr	r2, [r7, #16]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	2222      	movs	r2, #34	@ 0x22
 800bfc6:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	3302      	adds	r3, #2
 800bfcc:	693a      	ldr	r2, [r7, #16]
 800bfce:	4413      	add	r3, r2
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	701a      	strb	r2, [r3, #0]

    return true;
 800bfd4:	2301      	movs	r3, #1
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3720      	adds	r7, #32
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	0801b900 	.word	0x0801b900
 800bfe4:	04000037 	.word	0x04000037
 800bfe8:	0801b904 	.word	0x0801b904

0800bfec <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7ff fec5 	bl	800bd8c <print_string_ptr>
 800c002:	4603      	mov	r3, r0
}
 800c004:	4618      	mov	r0, r3
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d003      	beq.n	800c022 <buffer_skip_whitespace+0x16>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d101      	bne.n	800c026 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800c022:	2300      	movs	r3, #0
 800c024:	e02c      	b.n	800c080 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d005      	beq.n	800c038 <buffer_skip_whitespace+0x2c>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	689a      	ldr	r2, [r3, #8]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	429a      	cmp	r2, r3
 800c036:	d306      	bcc.n	800c046 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	e021      	b.n	800c080 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	1c5a      	adds	r2, r3, #1
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00d      	beq.n	800c068 <buffer_skip_whitespace+0x5c>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	689a      	ldr	r2, [r3, #8]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	429a      	cmp	r2, r3
 800c056:	d207      	bcs.n	800c068 <buffer_skip_whitespace+0x5c>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	4413      	add	r3, r2
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	2b20      	cmp	r3, #32
 800c066:	d9e9      	bls.n	800c03c <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	689a      	ldr	r2, [r3, #8]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	429a      	cmp	r2, r3
 800c072:	d104      	bne.n	800c07e <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	1e5a      	subs	r2, r3, #1
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800c07e:	687b      	ldr	r3, [r7, #4]
}
 800c080:	4618      	mov	r0, r3
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr

0800c08c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d007      	beq.n	800c0aa <skip_utf8_bom+0x1e>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d003      	beq.n	800c0aa <skip_utf8_bom+0x1e>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d001      	beq.n	800c0ae <skip_utf8_bom+0x22>
    {
        return NULL;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	e01c      	b.n	800c0e8 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d018      	beq.n	800c0e6 <skip_utf8_bom+0x5a>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	1d1a      	adds	r2, r3, #4
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d211      	bcs.n	800c0e6 <skip_utf8_bom+0x5a>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	2203      	movs	r2, #3
 800c0ce:	4908      	ldr	r1, [pc, #32]	@ (800c0f0 <skip_utf8_bom+0x64>)
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f00c fa3b 	bl	801854c <strncmp>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d104      	bne.n	800c0e6 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	1cda      	adds	r2, r3, #3
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800c0e6:	687b      	ldr	r3, [r7, #4]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	0801b90c 	.word	0x0801b90c

0800c0f4 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d101      	bne.n	800c10a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800c106:	2300      	movs	r3, #0
 800c108:	e00c      	b.n	800c124 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800c10a:	68f8      	ldr	r0, [r7, #12]
 800c10c:	f7fc f8e0 	bl	80082d0 <strlen>
 800c110:	4603      	mov	r3, r0
 800c112:	3301      	adds	r3, #1
 800c114:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	68ba      	ldr	r2, [r7, #8]
 800c11a:	6979      	ldr	r1, [r7, #20]
 800c11c:	68f8      	ldr	r0, [r7, #12]
 800c11e:	f000 f805 	bl	800c12c <cJSON_ParseWithLengthOpts>
 800c122:	4603      	mov	r3, r0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3718      	adds	r7, #24
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b08e      	sub	sp, #56	@ 0x38
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]
 800c138:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800c13a:	f107 0318 	add.w	r3, r7, #24
 800c13e:	2200      	movs	r2, #0
 800c140:	601a      	str	r2, [r3, #0]
 800c142:	605a      	str	r2, [r3, #4]
 800c144:	609a      	str	r2, [r3, #8]
 800c146:	60da      	str	r2, [r3, #12]
 800c148:	611a      	str	r2, [r3, #16]
 800c14a:	615a      	str	r2, [r3, #20]
 800c14c:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800c14e:	2300      	movs	r3, #0
 800c150:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 800c152:	4b41      	ldr	r3, [pc, #260]	@ (800c258 <cJSON_ParseWithLengthOpts+0x12c>)
 800c154:	2200      	movs	r2, #0
 800c156:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800c158:	4b3f      	ldr	r3, [pc, #252]	@ (800c258 <cJSON_ParseWithLengthOpts+0x12c>)
 800c15a:	2200      	movs	r2, #0
 800c15c:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d042      	beq.n	800c1ea <cJSON_ParseWithLengthOpts+0xbe>
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d03f      	beq.n	800c1ea <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800c172:	2300      	movs	r3, #0
 800c174:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800c176:	4a39      	ldr	r2, [pc, #228]	@ (800c25c <cJSON_ParseWithLengthOpts+0x130>)
 800c178:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c17c:	ca07      	ldmia	r2, {r0, r1, r2}
 800c17e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800c182:	4836      	ldr	r0, [pc, #216]	@ (800c25c <cJSON_ParseWithLengthOpts+0x130>)
 800c184:	f7ff f840 	bl	800b208 <cJSON_New_Item>
 800c188:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 800c18a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d02e      	beq.n	800c1ee <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800c190:	f107 0318 	add.w	r3, r7, #24
 800c194:	4618      	mov	r0, r3
 800c196:	f7ff ff79 	bl	800c08c <skip_utf8_bom>
 800c19a:	4603      	mov	r3, r0
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7ff ff35 	bl	800c00c <buffer_skip_whitespace>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c1a8:	f000 f902 	bl	800c3b0 <parse_value>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d01f      	beq.n	800c1f2 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00e      	beq.n	800c1d6 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800c1b8:	f107 0318 	add.w	r3, r7, #24
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7ff ff25 	bl	800c00c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800c1c2:	6a3a      	ldr	r2, [r7, #32]
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d215      	bcs.n	800c1f6 <cJSON_ParseWithLengthOpts+0xca>
 800c1ca:	69ba      	ldr	r2, [r7, #24]
 800c1cc:	6a3b      	ldr	r3, [r7, #32]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d10f      	bne.n	800c1f6 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d004      	beq.n	800c1e6 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800c1dc:	69ba      	ldr	r2, [r7, #24]
 800c1de:	6a3b      	ldr	r3, [r7, #32]
 800c1e0:	441a      	add	r2, r3
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	601a      	str	r2, [r3, #0]
    }

    return item;
 800c1e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1e8:	e031      	b.n	800c24e <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800c1ea:	bf00      	nop
 800c1ec:	e004      	b.n	800c1f8 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800c1ee:	bf00      	nop
 800c1f0:	e002      	b.n	800c1f8 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800c1f2:	bf00      	nop
 800c1f4:	e000      	b.n	800c1f8 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800c1f6:	bf00      	nop

fail:
    if (item != NULL)
 800c1f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d002      	beq.n	800c204 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800c1fe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c200:	f7ff f818 	bl	800b234 <cJSON_Delete>
    }

    if (value != NULL)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d020      	beq.n	800c24c <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800c20e:	2300      	movs	r3, #0
 800c210:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800c212:	6a3a      	ldr	r2, [r7, #32]
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	429a      	cmp	r2, r3
 800c218:	d202      	bcs.n	800c220 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800c21a:	6a3b      	ldr	r3, [r7, #32]
 800c21c:	617b      	str	r3, [r7, #20]
 800c21e:	e005      	b.n	800c22c <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d002      	beq.n	800c22c <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	3b01      	subs	r3, #1
 800c22a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d004      	beq.n	800c23c <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800c232:	693a      	ldr	r2, [r7, #16]
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	441a      	add	r2, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800c23c:	4b06      	ldr	r3, [pc, #24]	@ (800c258 <cJSON_ParseWithLengthOpts+0x12c>)
 800c23e:	461a      	mov	r2, r3
 800c240:	f107 0310 	add.w	r3, r7, #16
 800c244:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c248:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3738      	adds	r7, #56	@ 0x38
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	20000df4 	.word	0x20000df4
 800c25c:	20000010 	.word	0x20000010

0800c260 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800c268:	2200      	movs	r2, #0
 800c26a:	2100      	movs	r1, #0
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f7ff ff41 	bl	800c0f4 <cJSON_ParseWithOpts>
 800c272:	4603      	mov	r3, r0
}
 800c274:	4618      	mov	r0, r3
 800c276:	3708      	adds	r7, #8
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b08e      	sub	sp, #56	@ 0x38
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 800c288:	2300      	movs	r3, #0
 800c28a:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 800c28c:	f107 0310 	add.w	r3, r7, #16
 800c290:	2224      	movs	r2, #36	@ 0x24
 800c292:	2100      	movs	r1, #0
 800c294:	4618      	mov	r0, r3
 800c296:	f00c f951 	bl	801853c <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a3b      	ldr	r2, [pc, #236]	@ (800c38c <print+0x110>)
 800c2a0:	6812      	ldr	r2, [r2, #0]
 800c2a2:	4610      	mov	r0, r2
 800c2a4:	4798      	blx	r3
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800c2aa:	4b38      	ldr	r3, [pc, #224]	@ (800c38c <print+0x110>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c2ba:	ca07      	ldmia	r2, {r0, r1, r2}
 800c2bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d042      	beq.n	800c34c <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800c2c6:	f107 0310 	add.w	r3, r7, #16
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	68f8      	ldr	r0, [r7, #12]
 800c2ce:	f000 f95b 	bl	800c588 <print_value>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d03b      	beq.n	800c350 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 800c2d8:	f107 0310 	add.w	r3, r7, #16
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7ff f969 	bl	800b5b4 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00d      	beq.n	800c306 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	6938      	ldr	r0, [r7, #16]
 800c2f0:	69ba      	ldr	r2, [r7, #24]
 800c2f2:	3201      	adds	r2, #1
 800c2f4:	4611      	mov	r1, r2
 800c2f6:	4798      	blx	r3
 800c2f8:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 800c2fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d029      	beq.n	800c354 <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 800c300:	2300      	movs	r3, #0
 800c302:	613b      	str	r3, [r7, #16]
 800c304:	e020      	b.n	800c348 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	69ba      	ldr	r2, [r7, #24]
 800c30c:	3201      	adds	r2, #1
 800c30e:	4610      	mov	r0, r2
 800c310:	4798      	blx	r3
 800c312:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 800c314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c316:	2b00      	cmp	r3, #0
 800c318:	d01e      	beq.n	800c358 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800c31a:	6939      	ldr	r1, [r7, #16]
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	1c5a      	adds	r2, r3, #1
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	4293      	cmp	r3, r2
 800c324:	bf28      	it	cs
 800c326:	4613      	movcs	r3, r2
 800c328:	461a      	mov	r2, r3
 800c32a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c32c:	f00c f9d9 	bl	80186e2 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c334:	4413      	add	r3, r2
 800c336:	2200      	movs	r2, #0
 800c338:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	693a      	ldr	r2, [r7, #16]
 800c340:	4610      	mov	r0, r2
 800c342:	4798      	blx	r3
        buffer->buffer = NULL;
 800c344:	2300      	movs	r3, #0
 800c346:	613b      	str	r3, [r7, #16]
    }

    return printed;
 800c348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c34a:	e01a      	b.n	800c382 <print+0x106>
        goto fail;
 800c34c:	bf00      	nop
 800c34e:	e004      	b.n	800c35a <print+0xde>
        goto fail;
 800c350:	bf00      	nop
 800c352:	e002      	b.n	800c35a <print+0xde>
            goto fail;
 800c354:	bf00      	nop
 800c356:	e000      	b.n	800c35a <print+0xde>
            goto fail;
 800c358:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d006      	beq.n	800c36e <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	693a      	ldr	r2, [r7, #16]
 800c366:	4610      	mov	r0, r2
 800c368:	4798      	blx	r3
        buffer->buffer = NULL;
 800c36a:	2300      	movs	r3, #0
 800c36c:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 800c36e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c370:	2b00      	cmp	r3, #0
 800c372:	d005      	beq.n	800c380 <print+0x104>
    {
        hooks->deallocate(printed);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c37a:	4798      	blx	r3
        printed = NULL;
 800c37c:	2300      	movs	r3, #0
 800c37e:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	3738      	adds	r7, #56	@ 0x38
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	0801d8d4 	.word	0x0801d8d4

0800c390 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 800c398:	4a04      	ldr	r2, [pc, #16]	@ (800c3ac <cJSON_PrintUnformatted+0x1c>)
 800c39a:	2100      	movs	r1, #0
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7ff ff6d 	bl	800c27c <print>
 800c3a2:	4603      	mov	r3, r0
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	20000010 	.word	0x20000010

0800c3b0 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d003      	beq.n	800c3c8 <parse_value+0x18>
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d101      	bne.n	800c3cc <parse_value+0x1c>
    {
        return false; /* no input */
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	e0d2      	b.n	800c572 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d01d      	beq.n	800c40e <parse_value+0x5e>
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	1d1a      	adds	r2, r3, #4
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d816      	bhi.n	800c40e <parse_value+0x5e>
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	4413      	add	r3, r2
 800c3ea:	2204      	movs	r2, #4
 800c3ec:	4963      	ldr	r1, [pc, #396]	@ (800c57c <parse_value+0x1cc>)
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f00c f8ac 	bl	801854c <strncmp>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d109      	bne.n	800c40e <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2204      	movs	r2, #4
 800c3fe:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	689b      	ldr	r3, [r3, #8]
 800c404:	1d1a      	adds	r2, r3, #4
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	609a      	str	r2, [r3, #8]
        return true;
 800c40a:	2301      	movs	r3, #1
 800c40c:	e0b1      	b.n	800c572 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d01d      	beq.n	800c450 <parse_value+0xa0>
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	1d5a      	adds	r2, r3, #5
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d816      	bhi.n	800c450 <parse_value+0xa0>
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	4413      	add	r3, r2
 800c42c:	2205      	movs	r2, #5
 800c42e:	4954      	ldr	r1, [pc, #336]	@ (800c580 <parse_value+0x1d0>)
 800c430:	4618      	mov	r0, r3
 800c432:	f00c f88b 	bl	801854c <strncmp>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d109      	bne.n	800c450 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2201      	movs	r2, #1
 800c440:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	1d5a      	adds	r2, r3, #5
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	609a      	str	r2, [r3, #8]
        return true;
 800c44c:	2301      	movs	r3, #1
 800c44e:	e090      	b.n	800c572 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d020      	beq.n	800c498 <parse_value+0xe8>
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	1d1a      	adds	r2, r3, #4
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	429a      	cmp	r2, r3
 800c462:	d819      	bhi.n	800c498 <parse_value+0xe8>
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	4413      	add	r3, r2
 800c46e:	2204      	movs	r2, #4
 800c470:	4944      	ldr	r1, [pc, #272]	@ (800c584 <parse_value+0x1d4>)
 800c472:	4618      	mov	r0, r3
 800c474:	f00c f86a 	bl	801854c <strncmp>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d10c      	bne.n	800c498 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2202      	movs	r2, #2
 800c482:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	689b      	ldr	r3, [r3, #8]
 800c48e:	1d1a      	adds	r2, r3, #4
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	609a      	str	r2, [r3, #8]
        return true;
 800c494:	2301      	movs	r3, #1
 800c496:	e06c      	b.n	800c572 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d013      	beq.n	800c4c6 <parse_value+0x116>
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	689a      	ldr	r2, [r3, #8]
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d20d      	bcs.n	800c4c6 <parse_value+0x116>
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	681a      	ldr	r2, [r3, #0]
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	4413      	add	r3, r2
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	2b22      	cmp	r3, #34	@ 0x22
 800c4b8:	d105      	bne.n	800c4c6 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800c4ba:	6839      	ldr	r1, [r7, #0]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f7ff fb1d 	bl	800bafc <parse_string>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	e055      	b.n	800c572 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d023      	beq.n	800c514 <parse_value+0x164>
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	689a      	ldr	r2, [r3, #8]
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d21d      	bcs.n	800c514 <parse_value+0x164>
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	2b2d      	cmp	r3, #45	@ 0x2d
 800c4e6:	d00f      	beq.n	800c508 <parse_value+0x158>
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	689b      	ldr	r3, [r3, #8]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	2b2f      	cmp	r3, #47	@ 0x2f
 800c4f6:	d90d      	bls.n	800c514 <parse_value+0x164>
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	4413      	add	r3, r2
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	2b39      	cmp	r3, #57	@ 0x39
 800c506:	d805      	bhi.n	800c514 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7fe feec 	bl	800b2e8 <parse_number>
 800c510:	4603      	mov	r3, r0
 800c512:	e02e      	b.n	800c572 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d013      	beq.n	800c542 <parse_value+0x192>
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	689a      	ldr	r2, [r3, #8]
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	429a      	cmp	r2, r3
 800c524:	d20d      	bcs.n	800c542 <parse_value+0x192>
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	4413      	add	r3, r2
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	2b5b      	cmp	r3, #91	@ 0x5b
 800c534:	d105      	bne.n	800c542 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800c536:	6839      	ldr	r1, [r7, #0]
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 f909 	bl	800c750 <parse_array>
 800c53e:	4603      	mov	r3, r0
 800c540:	e017      	b.n	800c572 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d013      	beq.n	800c570 <parse_value+0x1c0>
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	689a      	ldr	r2, [r3, #8]
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	429a      	cmp	r2, r3
 800c552:	d20d      	bcs.n	800c570 <parse_value+0x1c0>
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	689b      	ldr	r3, [r3, #8]
 800c55c:	4413      	add	r3, r2
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	2b7b      	cmp	r3, #123	@ 0x7b
 800c562:	d105      	bne.n	800c570 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800c564:	6839      	ldr	r1, [r7, #0]
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 fa3c 	bl	800c9e4 <parse_object>
 800c56c:	4603      	mov	r3, r0
 800c56e:	e000      	b.n	800c572 <parse_value+0x1c2>
    }

    return false;
 800c570:	2300      	movs	r3, #0
}
 800c572:	4618      	mov	r0, r3
 800c574:	3708      	adds	r7, #8
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	0801b8e0 	.word	0x0801b8e0
 800c580:	0801b910 	.word	0x0801b910
 800c584:	0801b918 	.word	0x0801b918

0800c588 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800c592:	2300      	movs	r3, #0
 800c594:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d002      	beq.n	800c5a2 <print_value+0x1a>
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d101      	bne.n	800c5a6 <print_value+0x1e>
    {
        return false;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	e0c9      	b.n	800c73a <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	2b80      	cmp	r3, #128	@ 0x80
 800c5ae:	f000 808e 	beq.w	800c6ce <print_value+0x146>
 800c5b2:	2b80      	cmp	r3, #128	@ 0x80
 800c5b4:	f300 80c0 	bgt.w	800c738 <print_value+0x1b0>
 800c5b8:	2b20      	cmp	r3, #32
 800c5ba:	dc49      	bgt.n	800c650 <print_value+0xc8>
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	f340 80bb 	ble.w	800c738 <print_value+0x1b0>
 800c5c2:	3b01      	subs	r3, #1
 800c5c4:	2b1f      	cmp	r3, #31
 800c5c6:	f200 80b7 	bhi.w	800c738 <print_value+0x1b0>
 800c5ca:	a201      	add	r2, pc, #4	@ (adr r2, 800c5d0 <print_value+0x48>)
 800c5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d0:	0800c67b 	.word	0x0800c67b
 800c5d4:	0800c69f 	.word	0x0800c69f
 800c5d8:	0800c739 	.word	0x0800c739
 800c5dc:	0800c657 	.word	0x0800c657
 800c5e0:	0800c739 	.word	0x0800c739
 800c5e4:	0800c739 	.word	0x0800c739
 800c5e8:	0800c739 	.word	0x0800c739
 800c5ec:	0800c6c3 	.word	0x0800c6c3
 800c5f0:	0800c739 	.word	0x0800c739
 800c5f4:	0800c739 	.word	0x0800c739
 800c5f8:	0800c739 	.word	0x0800c739
 800c5fc:	0800c739 	.word	0x0800c739
 800c600:	0800c739 	.word	0x0800c739
 800c604:	0800c739 	.word	0x0800c739
 800c608:	0800c739 	.word	0x0800c739
 800c60c:	0800c715 	.word	0x0800c715
 800c610:	0800c739 	.word	0x0800c739
 800c614:	0800c739 	.word	0x0800c739
 800c618:	0800c739 	.word	0x0800c739
 800c61c:	0800c739 	.word	0x0800c739
 800c620:	0800c739 	.word	0x0800c739
 800c624:	0800c739 	.word	0x0800c739
 800c628:	0800c739 	.word	0x0800c739
 800c62c:	0800c739 	.word	0x0800c739
 800c630:	0800c739 	.word	0x0800c739
 800c634:	0800c739 	.word	0x0800c739
 800c638:	0800c739 	.word	0x0800c739
 800c63c:	0800c739 	.word	0x0800c739
 800c640:	0800c739 	.word	0x0800c739
 800c644:	0800c739 	.word	0x0800c739
 800c648:	0800c739 	.word	0x0800c739
 800c64c:	0800c721 	.word	0x0800c721
 800c650:	2b40      	cmp	r3, #64	@ 0x40
 800c652:	d06b      	beq.n	800c72c <print_value+0x1a4>
 800c654:	e070      	b.n	800c738 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800c656:	2105      	movs	r1, #5
 800c658:	6838      	ldr	r0, [r7, #0]
 800c65a:	f7fe ff11 	bl	800b480 <ensure>
 800c65e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d101      	bne.n	800c66a <print_value+0xe2>
            {
                return false;
 800c666:	2300      	movs	r3, #0
 800c668:	e067      	b.n	800c73a <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	4a35      	ldr	r2, [pc, #212]	@ (800c744 <print_value+0x1bc>)
 800c66e:	6810      	ldr	r0, [r2, #0]
 800c670:	6018      	str	r0, [r3, #0]
 800c672:	7912      	ldrb	r2, [r2, #4]
 800c674:	711a      	strb	r2, [r3, #4]
            return true;
 800c676:	2301      	movs	r3, #1
 800c678:	e05f      	b.n	800c73a <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 800c67a:	2106      	movs	r1, #6
 800c67c:	6838      	ldr	r0, [r7, #0]
 800c67e:	f7fe feff 	bl	800b480 <ensure>
 800c682:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d101      	bne.n	800c68e <print_value+0x106>
            {
                return false;
 800c68a:	2300      	movs	r3, #0
 800c68c:	e055      	b.n	800c73a <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	4a2d      	ldr	r2, [pc, #180]	@ (800c748 <print_value+0x1c0>)
 800c692:	6810      	ldr	r0, [r2, #0]
 800c694:	6018      	str	r0, [r3, #0]
 800c696:	8892      	ldrh	r2, [r2, #4]
 800c698:	809a      	strh	r2, [r3, #4]
            return true;
 800c69a:	2301      	movs	r3, #1
 800c69c:	e04d      	b.n	800c73a <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800c69e:	2105      	movs	r1, #5
 800c6a0:	6838      	ldr	r0, [r7, #0]
 800c6a2:	f7fe feed 	bl	800b480 <ensure>
 800c6a6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d101      	bne.n	800c6b2 <print_value+0x12a>
            {
                return false;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	e043      	b.n	800c73a <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	4a25      	ldr	r2, [pc, #148]	@ (800c74c <print_value+0x1c4>)
 800c6b6:	6810      	ldr	r0, [r2, #0]
 800c6b8:	6018      	str	r0, [r3, #0]
 800c6ba:	7912      	ldrb	r2, [r2, #4]
 800c6bc:	711a      	strb	r2, [r3, #4]
            return true;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e03b      	b.n	800c73a <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800c6c2:	6839      	ldr	r1, [r7, #0]
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f7fe ffdf 	bl	800b688 <print_number>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	e035      	b.n	800c73a <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	691b      	ldr	r3, [r3, #16]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d101      	bne.n	800c6de <print_value+0x156>
            {
                return false;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	e02d      	b.n	800c73a <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7fb fdf4 	bl	80082d0 <strlen>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800c6ee:	68b9      	ldr	r1, [r7, #8]
 800c6f0:	6838      	ldr	r0, [r7, #0]
 800c6f2:	f7fe fec5 	bl	800b480 <ensure>
 800c6f6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d101      	bne.n	800c702 <print_value+0x17a>
            {
                return false;
 800c6fe:	2300      	movs	r3, #0
 800c700:	e01b      	b.n	800c73a <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	691b      	ldr	r3, [r3, #16]
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	4619      	mov	r1, r3
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f00b ffe9 	bl	80186e2 <memcpy>
            return true;
 800c710:	2301      	movs	r3, #1
 800c712:	e012      	b.n	800c73a <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 800c714:	6839      	ldr	r1, [r7, #0]
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f7ff fc68 	bl	800bfec <print_string>
 800c71c:	4603      	mov	r3, r0
 800c71e:	e00c      	b.n	800c73a <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 800c720:	6839      	ldr	r1, [r7, #0]
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 f8d8 	bl	800c8d8 <print_array>
 800c728:	4603      	mov	r3, r0
 800c72a:	e006      	b.n	800c73a <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 800c72c:	6839      	ldr	r1, [r7, #0]
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 fa64 	bl	800cbfc <print_object>
 800c734:	4603      	mov	r3, r0
 800c736:	e000      	b.n	800c73a <print_value+0x1b2>

        default:
            return false;
 800c738:	2300      	movs	r3, #0
    }
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	0801b8e0 	.word	0x0801b8e0
 800c748:	0801b910 	.word	0x0801b910
 800c74c:	0801b918 	.word	0x0801b918

0800c750 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b086      	sub	sp, #24
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800c75a:	2300      	movs	r3, #0
 800c75c:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800c75e:	2300      	movs	r3, #0
 800c760:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c76a:	d301      	bcc.n	800c770 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800c76c:	2300      	movs	r3, #0
 800c76e:	e0af      	b.n	800c8d0 <parse_array+0x180>
    }
    input_buffer->depth++;
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	1c5a      	adds	r2, r3, #1
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	4413      	add	r3, r2
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	2b5b      	cmp	r3, #91	@ 0x5b
 800c788:	f040 8094 	bne.w	800c8b4 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	1c5a      	adds	r2, r3, #1
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800c796:	6838      	ldr	r0, [r7, #0]
 800c798:	f7ff fc38 	bl	800c00c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00d      	beq.n	800c7be <parse_array+0x6e>
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	689a      	ldr	r2, [r3, #8]
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d207      	bcs.n	800c7be <parse_array+0x6e>
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	2b5d      	cmp	r3, #93	@ 0x5d
 800c7bc:	d061      	beq.n	800c882 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d005      	beq.n	800c7d0 <parse_array+0x80>
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	689a      	ldr	r2, [r3, #8]
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d305      	bcc.n	800c7dc <parse_array+0x8c>
    {
        input_buffer->offset--;
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	1e5a      	subs	r2, r3, #1
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	609a      	str	r2, [r3, #8]
        goto fail;
 800c7da:	e072      	b.n	800c8c2 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	1e5a      	subs	r2, r3, #1
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	3310      	adds	r3, #16
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7fe fd0c 	bl	800b208 <cJSON_New_Item>
 800c7f0:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d05f      	beq.n	800c8b8 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d104      	bne.n	800c808 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	617b      	str	r3, [r7, #20]
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	613b      	str	r3, [r7, #16]
 800c806:	e007      	b.n	800c818 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	693a      	ldr	r2, [r7, #16]
 800c812:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	1c5a      	adds	r2, r3, #1
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800c822:	6838      	ldr	r0, [r7, #0]
 800c824:	f7ff fbf2 	bl	800c00c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800c828:	6839      	ldr	r1, [r7, #0]
 800c82a:	6938      	ldr	r0, [r7, #16]
 800c82c:	f7ff fdc0 	bl	800c3b0 <parse_value>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d042      	beq.n	800c8bc <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800c836:	6838      	ldr	r0, [r7, #0]
 800c838:	f7ff fbe8 	bl	800c00c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00d      	beq.n	800c85e <parse_array+0x10e>
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	689a      	ldr	r2, [r3, #8]
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d207      	bcs.n	800c85e <parse_array+0x10e>
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	689b      	ldr	r3, [r3, #8]
 800c856:	4413      	add	r3, r2
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	2b2c      	cmp	r3, #44	@ 0x2c
 800c85c:	d0c3      	beq.n	800c7e6 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d02d      	beq.n	800c8c0 <parse_array+0x170>
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	689a      	ldr	r2, [r3, #8]
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d227      	bcs.n	800c8c0 <parse_array+0x170>
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	4413      	add	r3, r2
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	2b5d      	cmp	r3, #93	@ 0x5d
 800c87e:	d11f      	bne.n	800c8c0 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800c880:	e000      	b.n	800c884 <parse_array+0x134>
        goto success;
 800c882:	bf00      	nop
    input_buffer->depth--;
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	1e5a      	subs	r2, r3, #1
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d002      	beq.n	800c89a <parse_array+0x14a>
        head->prev = current_item;
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	693a      	ldr	r2, [r7, #16]
 800c898:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2220      	movs	r2, #32
 800c89e:	60da      	str	r2, [r3, #12]
    item->child = head;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	697a      	ldr	r2, [r7, #20]
 800c8a4:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	689b      	ldr	r3, [r3, #8]
 800c8aa:	1c5a      	adds	r2, r3, #1
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	609a      	str	r2, [r3, #8]

    return true;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e00d      	b.n	800c8d0 <parse_array+0x180>
        goto fail;
 800c8b4:	bf00      	nop
 800c8b6:	e004      	b.n	800c8c2 <parse_array+0x172>
            goto fail; /* allocation failure */
 800c8b8:	bf00      	nop
 800c8ba:	e002      	b.n	800c8c2 <parse_array+0x172>
            goto fail; /* failed to parse value */
 800c8bc:	bf00      	nop
 800c8be:	e000      	b.n	800c8c2 <parse_array+0x172>
        goto fail; /* expected end of array */
 800c8c0:	bf00      	nop

fail:
    if (head != NULL)
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d002      	beq.n	800c8ce <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800c8c8:	6978      	ldr	r0, [r7, #20]
 800c8ca:	f7fe fcb3 	bl	800b234 <cJSON_Delete>
    }

    return false;
 800c8ce:	2300      	movs	r3, #0
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3718      	adds	r7, #24
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b086      	sub	sp, #24
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d101      	bne.n	800c8fa <print_array+0x22>
    {
        return false;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	e070      	b.n	800c9dc <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800c8fa:	2101      	movs	r1, #1
 800c8fc:	6838      	ldr	r0, [r7, #0]
 800c8fe:	f7fe fdbf 	bl	800b480 <ensure>
 800c902:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d101      	bne.n	800c90e <print_array+0x36>
    {
        return false;
 800c90a:	2300      	movs	r3, #0
 800c90c:	e066      	b.n	800c9dc <print_array+0x104>
    }

    *output_pointer = '[';
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	225b      	movs	r2, #91	@ 0x5b
 800c912:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	1c5a      	adds	r2, r3, #1
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	1c5a      	adds	r2, r3, #1
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800c928:	e03d      	b.n	800c9a6 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800c92a:	6839      	ldr	r1, [r7, #0]
 800c92c:	6938      	ldr	r0, [r7, #16]
 800c92e:	f7ff fe2b 	bl	800c588 <print_value>
 800c932:	4603      	mov	r3, r0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d101      	bne.n	800c93c <print_array+0x64>
        {
            return false;
 800c938:	2300      	movs	r3, #0
 800c93a:	e04f      	b.n	800c9dc <print_array+0x104>
        }
        update_offset(output_buffer);
 800c93c:	6838      	ldr	r0, [r7, #0]
 800c93e:	f7fe fe39 	bl	800b5b4 <update_offset>
        if (current_element->next)
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d02a      	beq.n	800c9a0 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	695b      	ldr	r3, [r3, #20]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d001      	beq.n	800c956 <print_array+0x7e>
 800c952:	2302      	movs	r3, #2
 800c954:	e000      	b.n	800c958 <print_array+0x80>
 800c956:	2301      	movs	r3, #1
 800c958:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	3301      	adds	r3, #1
 800c95e:	4619      	mov	r1, r3
 800c960:	6838      	ldr	r0, [r7, #0]
 800c962:	f7fe fd8d 	bl	800b480 <ensure>
 800c966:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d101      	bne.n	800c972 <print_array+0x9a>
            {
                return false;
 800c96e:	2300      	movs	r3, #0
 800c970:	e034      	b.n	800c9dc <print_array+0x104>
            }
            *output_pointer++ = ',';
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	1c5a      	adds	r2, r3, #1
 800c976:	617a      	str	r2, [r7, #20]
 800c978:	222c      	movs	r2, #44	@ 0x2c
 800c97a:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	695b      	ldr	r3, [r3, #20]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d004      	beq.n	800c98e <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	1c5a      	adds	r2, r3, #1
 800c988:	617a      	str	r2, [r7, #20]
 800c98a:	2220      	movs	r2, #32
 800c98c:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	2200      	movs	r2, #0
 800c992:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	689a      	ldr	r2, [r3, #8]
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	441a      	add	r2, r3
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d1be      	bne.n	800c92a <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 800c9ac:	2102      	movs	r1, #2
 800c9ae:	6838      	ldr	r0, [r7, #0]
 800c9b0:	f7fe fd66 	bl	800b480 <ensure>
 800c9b4:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d101      	bne.n	800c9c0 <print_array+0xe8>
    {
        return false;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	e00d      	b.n	800c9dc <print_array+0x104>
    }
    *output_pointer++ = ']';
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	1c5a      	adds	r2, r3, #1
 800c9c4:	617a      	str	r2, [r7, #20]
 800c9c6:	225d      	movs	r2, #93	@ 0x5d
 800c9c8:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	1e5a      	subs	r2, r3, #1
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	60da      	str	r2, [r3, #12]

    return true;
 800c9da:	2301      	movs	r3, #1
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3718      	adds	r7, #24
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c9fe:	d301      	bcc.n	800ca04 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800ca00:	2300      	movs	r3, #0
 800ca02:	e0f7      	b.n	800cbf4 <parse_object+0x210>
    }
    input_buffer->depth++;
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	1c5a      	adds	r2, r3, #1
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	f000 80db 	beq.w	800cbcc <parse_object+0x1e8>
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	689a      	ldr	r2, [r3, #8]
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	f080 80d4 	bcs.w	800cbcc <parse_object+0x1e8>
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	4413      	add	r3, r2
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	2b7b      	cmp	r3, #123	@ 0x7b
 800ca32:	f040 80cb 	bne.w	800cbcc <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	1c5a      	adds	r2, r3, #1
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800ca40:	6838      	ldr	r0, [r7, #0]
 800ca42:	f7ff fae3 	bl	800c00c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d00e      	beq.n	800ca6a <parse_object+0x86>
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	689a      	ldr	r2, [r3, #8]
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	685b      	ldr	r3, [r3, #4]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d208      	bcs.n	800ca6a <parse_object+0x86>
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	4413      	add	r3, r2
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	2b7d      	cmp	r3, #125	@ 0x7d
 800ca66:	f000 8098 	beq.w	800cb9a <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d005      	beq.n	800ca7c <parse_object+0x98>
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	689a      	ldr	r2, [r3, #8]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d305      	bcc.n	800ca88 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	1e5a      	subs	r2, r3, #1
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	609a      	str	r2, [r3, #8]
        goto fail;
 800ca86:	e0ae      	b.n	800cbe6 <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	1e5a      	subs	r2, r3, #1
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	3310      	adds	r3, #16
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7fe fbb6 	bl	800b208 <cJSON_New_Item>
 800ca9c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f000 8095 	beq.w	800cbd0 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d104      	bne.n	800cab6 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	617b      	str	r3, [r7, #20]
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	613b      	str	r3, [r7, #16]
 800cab4:	e007      	b.n	800cac6 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	68fa      	ldr	r2, [r7, #12]
 800caba:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	693a      	ldr	r2, [r7, #16]
 800cac0:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f000 8083 	beq.w	800cbd4 <parse_object+0x1f0>
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	1c5a      	adds	r2, r3, #1
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d27b      	bcs.n	800cbd4 <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	689b      	ldr	r3, [r3, #8]
 800cae0:	1c5a      	adds	r2, r3, #1
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800cae6:	6838      	ldr	r0, [r7, #0]
 800cae8:	f7ff fa90 	bl	800c00c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800caec:	6839      	ldr	r1, [r7, #0]
 800caee:	6938      	ldr	r0, [r7, #16]
 800caf0:	f7ff f804 	bl	800bafc <parse_string>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d06e      	beq.n	800cbd8 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800cafa:	6838      	ldr	r0, [r7, #0]
 800cafc:	f7ff fa86 	bl	800c00c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	691a      	ldr	r2, [r3, #16]
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d063      	beq.n	800cbdc <parse_object+0x1f8>
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	689a      	ldr	r2, [r3, #8]
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d25d      	bcs.n	800cbdc <parse_object+0x1f8>
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	4413      	add	r3, r2
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	2b3a      	cmp	r3, #58	@ 0x3a
 800cb2e:	d155      	bne.n	800cbdc <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	689b      	ldr	r3, [r3, #8]
 800cb34:	1c5a      	adds	r2, r3, #1
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800cb3a:	6838      	ldr	r0, [r7, #0]
 800cb3c:	f7ff fa66 	bl	800c00c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800cb40:	6839      	ldr	r1, [r7, #0]
 800cb42:	6938      	ldr	r0, [r7, #16]
 800cb44:	f7ff fc34 	bl	800c3b0 <parse_value>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d048      	beq.n	800cbe0 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800cb4e:	6838      	ldr	r0, [r7, #0]
 800cb50:	f7ff fa5c 	bl	800c00c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d00d      	beq.n	800cb76 <parse_object+0x192>
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	689a      	ldr	r2, [r3, #8]
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d207      	bcs.n	800cb76 <parse_object+0x192>
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	689b      	ldr	r3, [r3, #8]
 800cb6e:	4413      	add	r3, r2
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	2b2c      	cmp	r3, #44	@ 0x2c
 800cb74:	d08d      	beq.n	800ca92 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d033      	beq.n	800cbe4 <parse_object+0x200>
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	689a      	ldr	r2, [r3, #8]
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d22d      	bcs.n	800cbe4 <parse_object+0x200>
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	689b      	ldr	r3, [r3, #8]
 800cb90:	4413      	add	r3, r2
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	2b7d      	cmp	r3, #125	@ 0x7d
 800cb96:	d125      	bne.n	800cbe4 <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 800cb98:	e000      	b.n	800cb9c <parse_object+0x1b8>
        goto success; /* empty object */
 800cb9a:	bf00      	nop
    input_buffer->depth--;
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	1e5a      	subs	r2, r3, #1
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d002      	beq.n	800cbb2 <parse_object+0x1ce>
        head->prev = current_item;
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	693a      	ldr	r2, [r7, #16]
 800cbb0:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2240      	movs	r2, #64	@ 0x40
 800cbb6:	60da      	str	r2, [r3, #12]
    item->child = head;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	697a      	ldr	r2, [r7, #20]
 800cbbc:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	689b      	ldr	r3, [r3, #8]
 800cbc2:	1c5a      	adds	r2, r3, #1
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	609a      	str	r2, [r3, #8]
    return true;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e013      	b.n	800cbf4 <parse_object+0x210>
        goto fail; /* not an object */
 800cbcc:	bf00      	nop
 800cbce:	e00a      	b.n	800cbe6 <parse_object+0x202>
            goto fail; /* allocation failure */
 800cbd0:	bf00      	nop
 800cbd2:	e008      	b.n	800cbe6 <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 800cbd4:	bf00      	nop
 800cbd6:	e006      	b.n	800cbe6 <parse_object+0x202>
            goto fail; /* failed to parse name */
 800cbd8:	bf00      	nop
 800cbda:	e004      	b.n	800cbe6 <parse_object+0x202>
            goto fail; /* invalid object */
 800cbdc:	bf00      	nop
 800cbde:	e002      	b.n	800cbe6 <parse_object+0x202>
            goto fail; /* failed to parse value */
 800cbe0:	bf00      	nop
 800cbe2:	e000      	b.n	800cbe6 <parse_object+0x202>
        goto fail; /* expected end of object */
 800cbe4:	bf00      	nop

fail:
    if (head != NULL)
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d002      	beq.n	800cbf2 <parse_object+0x20e>
    {
        cJSON_Delete(head);
 800cbec:	6978      	ldr	r0, [r7, #20]
 800cbee:	f7fe fb21 	bl	800b234 <cJSON_Delete>
    }

    return false;
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3718      	adds	r7, #24
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b088      	sub	sp, #32
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800cc06:	2300      	movs	r3, #0
 800cc08:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	689b      	ldr	r3, [r3, #8]
 800cc12:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d101      	bne.n	800cc1e <print_object+0x22>
    {
        return false;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	e108      	b.n	800ce30 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	695b      	ldr	r3, [r3, #20]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d001      	beq.n	800cc2a <print_object+0x2e>
 800cc26:	2302      	movs	r3, #2
 800cc28:	e000      	b.n	800cc2c <print_object+0x30>
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	3301      	adds	r3, #1
 800cc32:	4619      	mov	r1, r3
 800cc34:	6838      	ldr	r0, [r7, #0]
 800cc36:	f7fe fc23 	bl	800b480 <ensure>
 800cc3a:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800cc3c:	69fb      	ldr	r3, [r7, #28]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d101      	bne.n	800cc46 <print_object+0x4a>
    {
        return false;
 800cc42:	2300      	movs	r3, #0
 800cc44:	e0f4      	b.n	800ce30 <print_object+0x234>
    }

    *output_pointer++ = '{';
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	1c5a      	adds	r2, r3, #1
 800cc4a:	61fa      	str	r2, [r7, #28]
 800cc4c:	227b      	movs	r2, #123	@ 0x7b
 800cc4e:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	1c5a      	adds	r2, r3, #1
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	695b      	ldr	r3, [r3, #20]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d004      	beq.n	800cc6c <print_object+0x70>
    {
        *output_pointer++ = '\n';
 800cc62:	69fb      	ldr	r3, [r7, #28]
 800cc64:	1c5a      	adds	r2, r3, #1
 800cc66:	61fa      	str	r2, [r7, #28]
 800cc68:	220a      	movs	r2, #10
 800cc6a:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	689a      	ldr	r2, [r3, #8]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	441a      	add	r2, r3
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	609a      	str	r2, [r3, #8]

    while (current_item)
 800cc78:	e0a0      	b.n	800cdbc <print_object+0x1c0>
    {
        if (output_buffer->format)
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	695b      	ldr	r3, [r3, #20]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d022      	beq.n	800ccc8 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	68db      	ldr	r3, [r3, #12]
 800cc86:	4619      	mov	r1, r3
 800cc88:	6838      	ldr	r0, [r7, #0]
 800cc8a:	f7fe fbf9 	bl	800b480 <ensure>
 800cc8e:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 800cc90:	69fb      	ldr	r3, [r7, #28]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d101      	bne.n	800cc9a <print_object+0x9e>
            {
                return false;
 800cc96:	2300      	movs	r3, #0
 800cc98:	e0ca      	b.n	800ce30 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	617b      	str	r3, [r7, #20]
 800cc9e:	e007      	b.n	800ccb0 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	1c5a      	adds	r2, r3, #1
 800cca4:	61fa      	str	r2, [r7, #28]
 800cca6:	2209      	movs	r2, #9
 800cca8:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	3301      	adds	r3, #1
 800ccae:	617b      	str	r3, [r7, #20]
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	697a      	ldr	r2, [r7, #20]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d3f2      	bcc.n	800cca0 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	689a      	ldr	r2, [r3, #8]
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	68db      	ldr	r3, [r3, #12]
 800ccc2:	441a      	add	r2, r3
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	6a1b      	ldr	r3, [r3, #32]
 800cccc:	6839      	ldr	r1, [r7, #0]
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7ff f85c 	bl	800bd8c <print_string_ptr>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d101      	bne.n	800ccde <print_object+0xe2>
        {
            return false;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	e0a8      	b.n	800ce30 <print_object+0x234>
        }
        update_offset(output_buffer);
 800ccde:	6838      	ldr	r0, [r7, #0]
 800cce0:	f7fe fc68 	bl	800b5b4 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	695b      	ldr	r3, [r3, #20]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d001      	beq.n	800ccf0 <print_object+0xf4>
 800ccec:	2302      	movs	r3, #2
 800ccee:	e000      	b.n	800ccf2 <print_object+0xf6>
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800ccf4:	68f9      	ldr	r1, [r7, #12]
 800ccf6:	6838      	ldr	r0, [r7, #0]
 800ccf8:	f7fe fbc2 	bl	800b480 <ensure>
 800ccfc:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d101      	bne.n	800cd08 <print_object+0x10c>
        {
            return false;
 800cd04:	2300      	movs	r3, #0
 800cd06:	e093      	b.n	800ce30 <print_object+0x234>
        }
        *output_pointer++ = ':';
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	1c5a      	adds	r2, r3, #1
 800cd0c:	61fa      	str	r2, [r7, #28]
 800cd0e:	223a      	movs	r2, #58	@ 0x3a
 800cd10:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	695b      	ldr	r3, [r3, #20]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d004      	beq.n	800cd24 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 800cd1a:	69fb      	ldr	r3, [r7, #28]
 800cd1c:	1c5a      	adds	r2, r3, #1
 800cd1e:	61fa      	str	r2, [r7, #28]
 800cd20:	2209      	movs	r2, #9
 800cd22:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	689a      	ldr	r2, [r3, #8]
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	441a      	add	r2, r3
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800cd30:	6839      	ldr	r1, [r7, #0]
 800cd32:	69b8      	ldr	r0, [r7, #24]
 800cd34:	f7ff fc28 	bl	800c588 <print_value>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d101      	bne.n	800cd42 <print_object+0x146>
        {
            return false;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	e076      	b.n	800ce30 <print_object+0x234>
        }
        update_offset(output_buffer);
 800cd42:	6838      	ldr	r0, [r7, #0]
 800cd44:	f7fe fc36 	bl	800b5b4 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	695b      	ldr	r3, [r3, #20]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d001      	beq.n	800cd54 <print_object+0x158>
 800cd50:	2201      	movs	r2, #1
 800cd52:	e000      	b.n	800cd56 <print_object+0x15a>
 800cd54:	2200      	movs	r2, #0
 800cd56:	69bb      	ldr	r3, [r7, #24]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d001      	beq.n	800cd62 <print_object+0x166>
 800cd5e:	2301      	movs	r3, #1
 800cd60:	e000      	b.n	800cd64 <print_object+0x168>
 800cd62:	2300      	movs	r3, #0
 800cd64:	4413      	add	r3, r2
 800cd66:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	6838      	ldr	r0, [r7, #0]
 800cd70:	f7fe fb86 	bl	800b480 <ensure>
 800cd74:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800cd76:	69fb      	ldr	r3, [r7, #28]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d101      	bne.n	800cd80 <print_object+0x184>
        {
            return false;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	e057      	b.n	800ce30 <print_object+0x234>
        }
        if (current_item->next)
 800cd80:	69bb      	ldr	r3, [r7, #24]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d004      	beq.n	800cd92 <print_object+0x196>
        {
            *output_pointer++ = ',';
 800cd88:	69fb      	ldr	r3, [r7, #28]
 800cd8a:	1c5a      	adds	r2, r3, #1
 800cd8c:	61fa      	str	r2, [r7, #28]
 800cd8e:	222c      	movs	r2, #44	@ 0x2c
 800cd90:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	695b      	ldr	r3, [r3, #20]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d004      	beq.n	800cda4 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 800cd9a:	69fb      	ldr	r3, [r7, #28]
 800cd9c:	1c5a      	adds	r2, r3, #1
 800cd9e:	61fa      	str	r2, [r7, #28]
 800cda0:	220a      	movs	r2, #10
 800cda2:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	2200      	movs	r2, #0
 800cda8:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	689a      	ldr	r2, [r3, #8]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	441a      	add	r2, r3
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	61bb      	str	r3, [r7, #24]
    while (current_item)
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	f47f af5b 	bne.w	800cc7a <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	695b      	ldr	r3, [r3, #20]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d003      	beq.n	800cdd4 <print_object+0x1d8>
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	e000      	b.n	800cdd6 <print_object+0x1da>
 800cdd4:	2302      	movs	r3, #2
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	6838      	ldr	r0, [r7, #0]
 800cdda:	f7fe fb51 	bl	800b480 <ensure>
 800cdde:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d101      	bne.n	800cdea <print_object+0x1ee>
    {
        return false;
 800cde6:	2300      	movs	r3, #0
 800cde8:	e022      	b.n	800ce30 <print_object+0x234>
    }
    if (output_buffer->format)
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d010      	beq.n	800ce14 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	613b      	str	r3, [r7, #16]
 800cdf6:	e007      	b.n	800ce08 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	1c5a      	adds	r2, r3, #1
 800cdfc:	61fa      	str	r2, [r7, #28]
 800cdfe:	2209      	movs	r2, #9
 800ce00:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	3301      	adds	r3, #1
 800ce06:	613b      	str	r3, [r7, #16]
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	693a      	ldr	r2, [r7, #16]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d3f1      	bcc.n	800cdf8 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	1c5a      	adds	r2, r3, #1
 800ce18:	61fa      	str	r2, [r7, #28]
 800ce1a:	227d      	movs	r2, #125	@ 0x7d
 800ce1c:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800ce1e:	69fb      	ldr	r3, [r7, #28]
 800ce20:	2200      	movs	r2, #0
 800ce22:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	1e5a      	subs	r2, r3, #1
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	60da      	str	r2, [r3, #12]

    return true;
 800ce2e:	2301      	movs	r3, #1
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3720      	adds	r7, #32
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b086      	sub	sp, #24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800ce44:	2300      	movs	r3, #0
 800ce46:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d002      	beq.n	800ce54 <get_object_item+0x1c>
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d101      	bne.n	800ce58 <get_object_item+0x20>
    {
        return NULL;
 800ce54:	2300      	movs	r3, #0
 800ce56:	e033      	b.n	800cec0 <get_object_item+0x88>
    }

    current_element = object->child;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	689b      	ldr	r3, [r3, #8]
 800ce5c:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d017      	beq.n	800ce94 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800ce64:	e002      	b.n	800ce6c <get_object_item+0x34>
        {
            current_element = current_element->next;
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d01c      	beq.n	800ceac <get_object_item+0x74>
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	6a1b      	ldr	r3, [r3, #32]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d018      	beq.n	800ceac <get_object_item+0x74>
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	6a1b      	ldr	r3, [r3, #32]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	68b8      	ldr	r0, [r7, #8]
 800ce82:	f7fb f9c5 	bl	8008210 <strcmp>
 800ce86:	4603      	mov	r3, r0
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d1ec      	bne.n	800ce66 <get_object_item+0x2e>
 800ce8c:	e00e      	b.n	800ceac <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d008      	beq.n	800ceac <get_object_item+0x74>
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	6a1b      	ldr	r3, [r3, #32]
 800ce9e:	4619      	mov	r1, r3
 800cea0:	68b8      	ldr	r0, [r7, #8]
 800cea2:	f7fe f91d 	bl	800b0e0 <case_insensitive_strcmp>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d1f0      	bne.n	800ce8e <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d003      	beq.n	800ceba <get_object_item+0x82>
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	6a1b      	ldr	r3, [r3, #32]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d101      	bne.n	800cebe <get_object_item+0x86>
        return NULL;
 800ceba:	2300      	movs	r3, #0
 800cebc:	e000      	b.n	800cec0 <get_object_item+0x88>
    }

    return current_element;
 800cebe:	697b      	ldr	r3, [r7, #20]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3718      	adds	r7, #24
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800ced2:	2200      	movs	r2, #0
 800ced4:	6839      	ldr	r1, [r7, #0]
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f7ff ffae 	bl	800ce38 <get_object_item>
 800cedc:	4603      	mov	r3, r0
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3708      	adds	r7, #8
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}

0800cee6 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 800cee6:	b480      	push	{r7}
 800cee8:	b083      	sub	sp, #12
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	6078      	str	r0, [r7, #4]
 800ceee:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	683a      	ldr	r2, [r7, #0]
 800cef4:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	605a      	str	r2, [r3, #4]
}
 800cefc:	bf00      	nop
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 800cf12:	2300      	movs	r3, #0
 800cf14:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d006      	beq.n	800cf2a <add_item_to_array+0x22>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d003      	beq.n	800cf2a <add_item_to_array+0x22>
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d101      	bne.n	800cf2e <add_item_to_array+0x26>
    {
        return false;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	e01e      	b.n	800cf6c <add_item_to_array+0x64>
    }

    child = array->child;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d109      	bne.n	800cf4e <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	683a      	ldr	r2, [r7, #0]
 800cf3e:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	683a      	ldr	r2, [r7, #0]
 800cf44:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	601a      	str	r2, [r3, #0]
 800cf4c:	e00d      	b.n	800cf6a <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d009      	beq.n	800cf6a <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	6839      	ldr	r1, [r7, #0]
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7ff ffc2 	bl	800cee6 <suffix_object>
            array->child->prev = item;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	689b      	ldr	r3, [r3, #8]
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 800cf6a:	2301      	movs	r3, #1
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3710      	adds	r7, #16
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
    return (void*)string;
 800cf7c:	687b      	ldr	r3, [r7, #4]
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	370c      	adds	r7, #12
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr

0800cf8a <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b086      	sub	sp, #24
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	60f8      	str	r0, [r7, #12]
 800cf92:	60b9      	str	r1, [r7, #8]
 800cf94:	607a      	str	r2, [r7, #4]
 800cf96:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d009      	beq.n	800cfba <add_item_to_object+0x30>
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d006      	beq.n	800cfba <add_item_to_object+0x30>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d003      	beq.n	800cfba <add_item_to_object+0x30>
 800cfb2:	68fa      	ldr	r2, [r7, #12]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d101      	bne.n	800cfbe <add_item_to_object+0x34>
    {
        return false;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	e036      	b.n	800d02c <add_item_to_object+0xa2>
    }

    if (constant_key)
 800cfbe:	6a3b      	ldr	r3, [r7, #32]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d009      	beq.n	800cfd8 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 800cfc4:	68b8      	ldr	r0, [r7, #8]
 800cfc6:	f7ff ffd5 	bl	800cf74 <cast_away_const>
 800cfca:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cfd4:	613b      	str	r3, [r7, #16]
 800cfd6:	e00e      	b.n	800cff6 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 800cfd8:	6839      	ldr	r1, [r7, #0]
 800cfda:	68b8      	ldr	r0, [r7, #8]
 800cfdc:	f7fe f8ec 	bl	800b1b8 <cJSON_strdup>
 800cfe0:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d101      	bne.n	800cfec <add_item_to_object+0x62>
        {
            return false;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	e01f      	b.n	800d02c <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	68db      	ldr	r3, [r3, #12]
 800cff0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cff4:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d109      	bne.n	800d016 <add_item_to_object+0x8c>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6a1b      	ldr	r3, [r3, #32]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d005      	beq.n	800d016 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	6a12      	ldr	r2, [r2, #32]
 800d012:	4610      	mov	r0, r2
 800d014:	4798      	blx	r3
    }

    item->string = new_key;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	697a      	ldr	r2, [r7, #20]
 800d01a:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	693a      	ldr	r2, [r7, #16]
 800d020:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800d022:	6879      	ldr	r1, [r7, #4]
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	f7ff ff6f 	bl	800cf08 <add_item_to_array>
 800d02a:	4603      	mov	r3, r0
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3718      	adds	r7, #24
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b088      	sub	sp, #32
 800d038:	af02      	add	r7, sp, #8
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	60b9      	str	r1, [r7, #8]
 800d03e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 800d042:	ed97 0b00 	vldr	d0, [r7]
 800d046:	f000 f81b 	bl	800d080 <cJSON_CreateNumber>
 800d04a:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 800d04c:	2300      	movs	r3, #0
 800d04e:	9300      	str	r3, [sp, #0]
 800d050:	4b09      	ldr	r3, [pc, #36]	@ (800d078 <cJSON_AddNumberToObject+0x44>)
 800d052:	697a      	ldr	r2, [r7, #20]
 800d054:	68b9      	ldr	r1, [r7, #8]
 800d056:	68f8      	ldr	r0, [r7, #12]
 800d058:	f7ff ff97 	bl	800cf8a <add_item_to_object>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d001      	beq.n	800d066 <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	e003      	b.n	800d06e <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 800d066:	6978      	ldr	r0, [r7, #20]
 800d068:	f7fe f8e4 	bl	800b234 <cJSON_Delete>
    return NULL;
 800d06c:	2300      	movs	r3, #0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3718      	adds	r7, #24
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	20000010 	.word	0x20000010
 800d07c:	00000000 	.word	0x00000000

0800d080 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 800d08a:	481f      	ldr	r0, [pc, #124]	@ (800d108 <cJSON_CreateNumber+0x88>)
 800d08c:	f7fe f8bc 	bl	800b208 <cJSON_New_Item>
 800d090:	60f8      	str	r0, [r7, #12]
    if(item)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d02c      	beq.n	800d0f2 <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2208      	movs	r2, #8
 800d09c:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 800d09e:	68f9      	ldr	r1, [r7, #12]
 800d0a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0a4:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 800d0a8:	a315      	add	r3, pc, #84	@ (adr r3, 800d100 <cJSON_CreateNumber+0x80>)
 800d0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0b2:	f7fb fd57 	bl	8008b64 <__aeabi_dcmpge>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d004      	beq.n	800d0c6 <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800d0c2:	615a      	str	r2, [r3, #20]
 800d0c4:	e015      	b.n	800d0f2 <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 800d0c6:	f04f 0200 	mov.w	r2, #0
 800d0ca:	4b10      	ldr	r3, [pc, #64]	@ (800d10c <cJSON_CreateNumber+0x8c>)
 800d0cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0d0:	f7fb fd3e 	bl	8008b50 <__aeabi_dcmple>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d004      	beq.n	800d0e4 <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d0e0:	615a      	str	r2, [r3, #20]
 800d0e2:	e006      	b.n	800d0f2 <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 800d0e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0e8:	f7fb fd66 	bl	8008bb8 <__aeabi_d2iz>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3710      	adds	r7, #16
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	f3af 8000 	nop.w
 800d100:	ffc00000 	.word	0xffc00000
 800d104:	41dfffff 	.word	0x41dfffff
 800d108:	20000010 	.word	0x20000010
 800d10c:	c1e00000 	.word	0xc1e00000

0800d110 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800d116:	4807      	ldr	r0, [pc, #28]	@ (800d134 <cJSON_CreateObject+0x24>)
 800d118:	f7fe f876 	bl	800b208 <cJSON_New_Item>
 800d11c:	6078      	str	r0, [r7, #4]
    if (item)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d002      	beq.n	800d12a <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2240      	movs	r2, #64	@ 0x40
 800d128:	60da      	str	r2, [r3, #12]
    }

    return item;
 800d12a:	687b      	ldr	r3, [r7, #4]
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	20000010 	.word	0x20000010

0800d138 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d101      	bne.n	800d14a <cJSON_IsNumber+0x12>
    {
        return false;
 800d146:	2300      	movs	r3, #0
 800d148:	e007      	b.n	800d15a <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	2b08      	cmp	r3, #8
 800d152:	bf0c      	ite	eq
 800d154:	2301      	moveq	r3, #1
 800d156:	2300      	movne	r3, #0
 800d158:	b2db      	uxtb	r3, r3
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	370c      	adds	r7, #12
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr

0800d166 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 800d166:	b480      	push	{r7}
 800d168:	b083      	sub	sp, #12
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d101      	bne.n	800d178 <cJSON_IsString+0x12>
    {
        return false;
 800d174:	2300      	movs	r3, #0
 800d176:	e007      	b.n	800d188 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	68db      	ldr	r3, [r3, #12]
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	2b10      	cmp	r3, #16
 800d180:	bf0c      	ite	eq
 800d182:	2301      	moveq	r3, #1
 800d184:	2300      	movne	r3, #0
 800d186:	b2db      	uxtb	r3, r3
}
 800d188:	4618      	mov	r0, r3
 800d18a:	370c      	adds	r7, #12
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr

0800d194 <Display_Handler>:

button_position_t current_buttons[6];
int button_count = 0;

void Display_Handler(void *param)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Menu_Handler();
 800d19c:	f001 f9de 	bl	800e55c <Menu_Handler>
 800d1a0:	e7fc      	b.n	800d19c <Display_Handler+0x8>
	...

0800d1a4 <updateToDisplayMenu>:
	}
}

void updateToDisplayMenu(void)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	af00      	add	r7, sp, #0
	if(current_menu == MENU_TOTAL_CONTROL)
 800d1a8:	4b10      	ldr	r3, [pc, #64]	@ (800d1ec <updateToDisplayMenu+0x48>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d106      	bne.n	800d1be <updateToDisplayMenu+0x1a>
	{
		last_selection = current_selection;
 800d1b0:	4b0f      	ldr	r3, [pc, #60]	@ (800d1f0 <updateToDisplayMenu+0x4c>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a0f      	ldr	r2, [pc, #60]	@ (800d1f4 <updateToDisplayMenu+0x50>)
 800d1b6:	6013      	str	r3, [r2, #0]
		displayTotalControlMenu();
 800d1b8:	f000 fb44 	bl	800d844 <displayTotalControlMenu>
	else if(current_menu == MENU_DEVICE_CONTROL)
	{
		last_selection = current_selection;
		displayDeviceControlMenu();
	}
}
 800d1bc:	e014      	b.n	800d1e8 <updateToDisplayMenu+0x44>
	else if(current_menu == MENU_SEPARATE_CONTROL)
 800d1be:	4b0b      	ldr	r3, [pc, #44]	@ (800d1ec <updateToDisplayMenu+0x48>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	2b02      	cmp	r3, #2
 800d1c4:	d106      	bne.n	800d1d4 <updateToDisplayMenu+0x30>
		last_selection = current_selection;
 800d1c6:	4b0a      	ldr	r3, [pc, #40]	@ (800d1f0 <updateToDisplayMenu+0x4c>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4a0a      	ldr	r2, [pc, #40]	@ (800d1f4 <updateToDisplayMenu+0x50>)
 800d1cc:	6013      	str	r3, [r2, #0]
		displaySeparateControlMenu();
 800d1ce:	f000 fc17 	bl	800da00 <displaySeparateControlMenu>
}
 800d1d2:	e009      	b.n	800d1e8 <updateToDisplayMenu+0x44>
	else if(current_menu == MENU_DEVICE_CONTROL)
 800d1d4:	4b05      	ldr	r3, [pc, #20]	@ (800d1ec <updateToDisplayMenu+0x48>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2b03      	cmp	r3, #3
 800d1da:	d105      	bne.n	800d1e8 <updateToDisplayMenu+0x44>
		last_selection = current_selection;
 800d1dc:	4b04      	ldr	r3, [pc, #16]	@ (800d1f0 <updateToDisplayMenu+0x4c>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a04      	ldr	r2, [pc, #16]	@ (800d1f4 <updateToDisplayMenu+0x50>)
 800d1e2:	6013      	str	r3, [r2, #0]
		displayDeviceControlMenu();
 800d1e4:	f000 fce6 	bl	800dbb4 <displayDeviceControlMenu>
}
 800d1e8:	bf00      	nop
 800d1ea:	bd80      	pop	{r7, pc}
 800d1ec:	20000dfc 	.word	0x20000dfc
 800d1f0:	20000e00 	.word	0x20000e00
 800d1f4:	2000001c 	.word	0x2000001c

0800d1f8 <drawSingleButton>:


void drawSingleButton(int x, int y, int width, int height, char* text, int selected, int button_id)
{
 800d1f8:	b590      	push	{r4, r7, lr}
 800d1fa:	b089      	sub	sp, #36	@ 0x24
 800d1fc:	af04      	add	r7, sp, #16
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	607a      	str	r2, [r7, #4]
 800d204:	603b      	str	r3, [r7, #0]
    fillRect(x-1, y-1, width+2, height+2, BLACK);
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	b29b      	uxth	r3, r3
 800d20a:	3b01      	subs	r3, #1
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	b218      	sxth	r0, r3
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	b29b      	uxth	r3, r3
 800d214:	3b01      	subs	r3, #1
 800d216:	b29b      	uxth	r3, r3
 800d218:	b219      	sxth	r1, r3
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	3302      	adds	r3, #2
 800d220:	b29b      	uxth	r3, r3
 800d222:	b21a      	sxth	r2, r3
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	b29b      	uxth	r3, r3
 800d228:	3302      	adds	r3, #2
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	b21b      	sxth	r3, r3
 800d22e:	2400      	movs	r4, #0
 800d230:	9400      	str	r4, [sp, #0]
 800d232:	f7fc ff59 	bl	800a0e8 <fillRect>

    if (selected)
 800d236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d03e      	beq.n	800d2ba <drawSingleButton+0xc2>
    {
        drawRoundRect(x-1, y-1, width+2, height+2, 3, WHITE);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	b29b      	uxth	r3, r3
 800d240:	3b01      	subs	r3, #1
 800d242:	b29b      	uxth	r3, r3
 800d244:	b218      	sxth	r0, r3
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	b29b      	uxth	r3, r3
 800d24a:	3b01      	subs	r3, #1
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	b219      	sxth	r1, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	b29b      	uxth	r3, r3
 800d254:	3302      	adds	r3, #2
 800d256:	b29b      	uxth	r3, r3
 800d258:	b21a      	sxth	r2, r3
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	3302      	adds	r3, #2
 800d260:	b29b      	uxth	r3, r3
 800d262:	b21b      	sxth	r3, r3
 800d264:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800d268:	9401      	str	r4, [sp, #4]
 800d26a:	2403      	movs	r4, #3
 800d26c:	9400      	str	r4, [sp, #0]
 800d26e:	f7fd fa5c 	bl	800a72a <drawRoundRect>
        fillRoundRect(x, y, width, height, 3, GREEN);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	b218      	sxth	r0, r3
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	b219      	sxth	r1, r3
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	b21a      	sxth	r2, r3
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	b21b      	sxth	r3, r3
 800d282:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 800d286:	9401      	str	r4, [sp, #4]
 800d288:	2403      	movs	r4, #3
 800d28a:	9400      	str	r4, [sp, #0]
 800d28c:	f7fd fb1a 	bl	800a8c4 <fillRoundRect>
        ST7735_WriteString(x+5, y+4, text, Font_7x10, BLACK, GREEN);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	b29b      	uxth	r3, r3
 800d294:	3305      	adds	r3, #5
 800d296:	b298      	uxth	r0, r3
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	3304      	adds	r3, #4
 800d29e:	b299      	uxth	r1, r3
 800d2a0:	4b4d      	ldr	r3, [pc, #308]	@ (800d3d8 <drawSingleButton+0x1e0>)
 800d2a2:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800d2a6:	9202      	str	r2, [sp, #8]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	9201      	str	r2, [sp, #4]
 800d2ac:	685a      	ldr	r2, [r3, #4]
 800d2ae:	9200      	str	r2, [sp, #0]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	6a3a      	ldr	r2, [r7, #32]
 800d2b4:	f7fd fdee 	bl	800ae94 <ST7735_WriteString>
 800d2b8:	e03e      	b.n	800d338 <drawSingleButton+0x140>
    }
    else
    {
        drawRoundRect(x-1, y-1, width+2, height+2, 3, WHITE);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	3b01      	subs	r3, #1
 800d2c0:	b29b      	uxth	r3, r3
 800d2c2:	b218      	sxth	r0, r3
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	b219      	sxth	r1, r3
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	3302      	adds	r3, #2
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	b21a      	sxth	r2, r3
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	3302      	adds	r3, #2
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	b21b      	sxth	r3, r3
 800d2e2:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800d2e6:	9401      	str	r4, [sp, #4]
 800d2e8:	2403      	movs	r4, #3
 800d2ea:	9400      	str	r4, [sp, #0]
 800d2ec:	f7fd fa1d 	bl	800a72a <drawRoundRect>
        fillRoundRect(x, y, width, height, 3, GRAY);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	b218      	sxth	r0, r3
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	b219      	sxth	r1, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	b21a      	sxth	r2, r3
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	b21b      	sxth	r3, r3
 800d300:	f242 1404 	movw	r4, #8452	@ 0x2104
 800d304:	9401      	str	r4, [sp, #4]
 800d306:	2403      	movs	r4, #3
 800d308:	9400      	str	r4, [sp, #0]
 800d30a:	f7fd fadb 	bl	800a8c4 <fillRoundRect>
        ST7735_WriteString(x+5, y+4, text, Font_7x10, WHITE, GRAY);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	b29b      	uxth	r3, r3
 800d312:	3305      	adds	r3, #5
 800d314:	b298      	uxth	r0, r3
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	b29b      	uxth	r3, r3
 800d31a:	3304      	adds	r3, #4
 800d31c:	b299      	uxth	r1, r3
 800d31e:	4b2e      	ldr	r3, [pc, #184]	@ (800d3d8 <drawSingleButton+0x1e0>)
 800d320:	f242 1204 	movw	r2, #8452	@ 0x2104
 800d324:	9202      	str	r2, [sp, #8]
 800d326:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d32a:	9201      	str	r2, [sp, #4]
 800d32c:	685a      	ldr	r2, [r3, #4]
 800d32e:	9200      	str	r2, [sp, #0]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	6a3a      	ldr	r2, [r7, #32]
 800d334:	f7fd fdae 	bl	800ae94 <ST7735_WriteString>
    }

    // Store button position AND TEXT for future updates
    if (button_id < 6)
 800d338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d33a:	2b05      	cmp	r3, #5
 800d33c:	dc48      	bgt.n	800d3d0 <drawSingleButton+0x1d8>
    {
        current_buttons[button_id].x = x;
 800d33e:	4927      	ldr	r1, [pc, #156]	@ (800d3dc <drawSingleButton+0x1e4>)
 800d340:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d342:	4613      	mov	r3, r2
 800d344:	005b      	lsls	r3, r3, #1
 800d346:	4413      	add	r3, r2
 800d348:	011b      	lsls	r3, r3, #4
 800d34a:	440b      	add	r3, r1
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].y = y;
 800d350:	4922      	ldr	r1, [pc, #136]	@ (800d3dc <drawSingleButton+0x1e4>)
 800d352:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d354:	4613      	mov	r3, r2
 800d356:	005b      	lsls	r3, r3, #1
 800d358:	4413      	add	r3, r2
 800d35a:	011b      	lsls	r3, r3, #4
 800d35c:	440b      	add	r3, r1
 800d35e:	3304      	adds	r3, #4
 800d360:	68ba      	ldr	r2, [r7, #8]
 800d362:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].width = width;
 800d364:	491d      	ldr	r1, [pc, #116]	@ (800d3dc <drawSingleButton+0x1e4>)
 800d366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d368:	4613      	mov	r3, r2
 800d36a:	005b      	lsls	r3, r3, #1
 800d36c:	4413      	add	r3, r2
 800d36e:	011b      	lsls	r3, r3, #4
 800d370:	440b      	add	r3, r1
 800d372:	3308      	adds	r3, #8
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].height = height;
 800d378:	4918      	ldr	r1, [pc, #96]	@ (800d3dc <drawSingleButton+0x1e4>)
 800d37a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d37c:	4613      	mov	r3, r2
 800d37e:	005b      	lsls	r3, r3, #1
 800d380:	4413      	add	r3, r2
 800d382:	011b      	lsls	r3, r3, #4
 800d384:	440b      	add	r3, r1
 800d386:	330c      	adds	r3, #12
 800d388:	683a      	ldr	r2, [r7, #0]
 800d38a:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].button_id = button_id;
 800d38c:	4913      	ldr	r1, [pc, #76]	@ (800d3dc <drawSingleButton+0x1e4>)
 800d38e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d390:	4613      	mov	r3, r2
 800d392:	005b      	lsls	r3, r3, #1
 800d394:	4413      	add	r3, r2
 800d396:	011b      	lsls	r3, r3, #4
 800d398:	440b      	add	r3, r1
 800d39a:	3310      	adds	r3, #16
 800d39c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d39e:	601a      	str	r2, [r3, #0]
        strncpy(current_buttons[button_id].text, text, 24);
 800d3a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3a2:	4613      	mov	r3, r2
 800d3a4:	005b      	lsls	r3, r3, #1
 800d3a6:	4413      	add	r3, r2
 800d3a8:	011b      	lsls	r3, r3, #4
 800d3aa:	3310      	adds	r3, #16
 800d3ac:	4a0b      	ldr	r2, [pc, #44]	@ (800d3dc <drawSingleButton+0x1e4>)
 800d3ae:	4413      	add	r3, r2
 800d3b0:	3304      	adds	r3, #4
 800d3b2:	2218      	movs	r2, #24
 800d3b4:	6a39      	ldr	r1, [r7, #32]
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f00b f8da 	bl	8018570 <strncpy>
        current_buttons[button_id].text[24] = '\0';
 800d3bc:	4907      	ldr	r1, [pc, #28]	@ (800d3dc <drawSingleButton+0x1e4>)
 800d3be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3c0:	4613      	mov	r3, r2
 800d3c2:	005b      	lsls	r3, r3, #1
 800d3c4:	4413      	add	r3, r2
 800d3c6:	011b      	lsls	r3, r3, #4
 800d3c8:	440b      	add	r3, r1
 800d3ca:	332c      	adds	r3, #44	@ 0x2c
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	701a      	strb	r2, [r3, #0]
    }
}
 800d3d0:	bf00      	nop
 800d3d2:	3714      	adds	r7, #20
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd90      	pop	{r4, r7, pc}
 800d3d8:	20000000 	.word	0x20000000
 800d3dc:	20000e28 	.word	0x20000e28

0800d3e0 <updateButtonSelection>:

void updateButtonSelection(int old_selection, int new_selection)

{
 800d3e0:	b590      	push	{r4, r7, lr}
 800d3e2:	b089      	sub	sp, #36	@ 0x24
 800d3e4:	af04      	add	r7, sp, #16
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
    // Update old button (unselect)
    if (old_selection >= 0 && old_selection < button_count)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	db74      	blt.n	800d4da <updateButtonSelection+0xfa>
 800d3f0:	4b77      	ldr	r3, [pc, #476]	@ (800d5d0 <updateButtonSelection+0x1f0>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	da6f      	bge.n	800d4da <updateButtonSelection+0xfa>
    {
        button_position_t *old_btn = &current_buttons[old_selection];
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	4613      	mov	r3, r2
 800d3fe:	005b      	lsls	r3, r3, #1
 800d400:	4413      	add	r3, r2
 800d402:	011b      	lsls	r3, r3, #4
 800d404:	4a73      	ldr	r2, [pc, #460]	@ (800d5d4 <updateButtonSelection+0x1f4>)
 800d406:	4413      	add	r3, r2
 800d408:	60fb      	str	r3, [r7, #12]

        // Clear and redraw unselected button with text
        fillRect(old_btn->x-1, old_btn->y-1, old_btn->width+2, old_btn->height+2, BLACK);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	b29b      	uxth	r3, r3
 800d410:	3b01      	subs	r3, #1
 800d412:	b29b      	uxth	r3, r3
 800d414:	b218      	sxth	r0, r3
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	685b      	ldr	r3, [r3, #4]
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	3b01      	subs	r3, #1
 800d41e:	b29b      	uxth	r3, r3
 800d420:	b219      	sxth	r1, r3
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	689b      	ldr	r3, [r3, #8]
 800d426:	b29b      	uxth	r3, r3
 800d428:	3302      	adds	r3, #2
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	b21a      	sxth	r2, r3
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	68db      	ldr	r3, [r3, #12]
 800d432:	b29b      	uxth	r3, r3
 800d434:	3302      	adds	r3, #2
 800d436:	b29b      	uxth	r3, r3
 800d438:	b21b      	sxth	r3, r3
 800d43a:	2400      	movs	r4, #0
 800d43c:	9400      	str	r4, [sp, #0]
 800d43e:	f7fc fe53 	bl	800a0e8 <fillRect>
        drawRoundRect(old_btn->x-1, old_btn->y-1, old_btn->width+2, old_btn->height+2, 3, WHITE);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	b29b      	uxth	r3, r3
 800d448:	3b01      	subs	r3, #1
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	b218      	sxth	r0, r3
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	b29b      	uxth	r3, r3
 800d454:	3b01      	subs	r3, #1
 800d456:	b29b      	uxth	r3, r3
 800d458:	b219      	sxth	r1, r3
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	689b      	ldr	r3, [r3, #8]
 800d45e:	b29b      	uxth	r3, r3
 800d460:	3302      	adds	r3, #2
 800d462:	b29b      	uxth	r3, r3
 800d464:	b21a      	sxth	r2, r3
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	68db      	ldr	r3, [r3, #12]
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	3302      	adds	r3, #2
 800d46e:	b29b      	uxth	r3, r3
 800d470:	b21b      	sxth	r3, r3
 800d472:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800d476:	9401      	str	r4, [sp, #4]
 800d478:	2403      	movs	r4, #3
 800d47a:	9400      	str	r4, [sp, #0]
 800d47c:	f7fd f955 	bl	800a72a <drawRoundRect>
        fillRoundRect(old_btn->x, old_btn->y, old_btn->width, old_btn->height, 3, GRAY);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	b218      	sxth	r0, r3
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	b219      	sxth	r1, r3
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	689b      	ldr	r3, [r3, #8]
 800d490:	b21a      	sxth	r2, r3
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	68db      	ldr	r3, [r3, #12]
 800d496:	b21b      	sxth	r3, r3
 800d498:	f242 1404 	movw	r4, #8452	@ 0x2104
 800d49c:	9401      	str	r4, [sp, #4]
 800d49e:	2403      	movs	r4, #3
 800d4a0:	9400      	str	r4, [sp, #0]
 800d4a2:	f7fd fa0f 	bl	800a8c4 <fillRoundRect>
        ST7735_WriteString(old_btn->x+5, old_btn->y+4, old_btn->text, Font_7x10, WHITE, GRAY);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	3305      	adds	r3, #5
 800d4ae:	b298      	uxth	r0, r3
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	b29b      	uxth	r3, r3
 800d4b6:	3304      	adds	r3, #4
 800d4b8:	b299      	uxth	r1, r3
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f103 0414 	add.w	r4, r3, #20
 800d4c0:	4b45      	ldr	r3, [pc, #276]	@ (800d5d8 <updateButtonSelection+0x1f8>)
 800d4c2:	f242 1204 	movw	r2, #8452	@ 0x2104
 800d4c6:	9202      	str	r2, [sp, #8]
 800d4c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d4cc:	9201      	str	r2, [sp, #4]
 800d4ce:	685a      	ldr	r2, [r3, #4]
 800d4d0:	9200      	str	r2, [sp, #0]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4622      	mov	r2, r4
 800d4d6:	f7fd fcdd 	bl	800ae94 <ST7735_WriteString>
    }

    // Update new button (select)
    if (new_selection >= 0 && new_selection < button_count)
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	db73      	blt.n	800d5c8 <updateButtonSelection+0x1e8>
 800d4e0:	4b3b      	ldr	r3, [pc, #236]	@ (800d5d0 <updateButtonSelection+0x1f0>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	683a      	ldr	r2, [r7, #0]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	da6e      	bge.n	800d5c8 <updateButtonSelection+0x1e8>
    {
        button_position_t *new_btn = &current_buttons[new_selection];
 800d4ea:	683a      	ldr	r2, [r7, #0]
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	005b      	lsls	r3, r3, #1
 800d4f0:	4413      	add	r3, r2
 800d4f2:	011b      	lsls	r3, r3, #4
 800d4f4:	4a37      	ldr	r2, [pc, #220]	@ (800d5d4 <updateButtonSelection+0x1f4>)
 800d4f6:	4413      	add	r3, r2
 800d4f8:	60bb      	str	r3, [r7, #8]

        // Clear and redraw selected button with text
        fillRect(new_btn->x-1, new_btn->y-1, new_btn->width+2, new_btn->height+2, BLACK);
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	3b01      	subs	r3, #1
 800d502:	b29b      	uxth	r3, r3
 800d504:	b218      	sxth	r0, r3
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	3b01      	subs	r3, #1
 800d50e:	b29b      	uxth	r3, r3
 800d510:	b219      	sxth	r1, r3
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	b29b      	uxth	r3, r3
 800d518:	3302      	adds	r3, #2
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	b21a      	sxth	r2, r3
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	68db      	ldr	r3, [r3, #12]
 800d522:	b29b      	uxth	r3, r3
 800d524:	3302      	adds	r3, #2
 800d526:	b29b      	uxth	r3, r3
 800d528:	b21b      	sxth	r3, r3
 800d52a:	2400      	movs	r4, #0
 800d52c:	9400      	str	r4, [sp, #0]
 800d52e:	f7fc fddb 	bl	800a0e8 <fillRect>
        drawRoundRect(new_btn->x-1, new_btn->y-1, new_btn->width+2, new_btn->height+2, 3, WHITE);
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	b29b      	uxth	r3, r3
 800d538:	3b01      	subs	r3, #1
 800d53a:	b29b      	uxth	r3, r3
 800d53c:	b218      	sxth	r0, r3
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	b29b      	uxth	r3, r3
 800d544:	3b01      	subs	r3, #1
 800d546:	b29b      	uxth	r3, r3
 800d548:	b219      	sxth	r1, r3
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	689b      	ldr	r3, [r3, #8]
 800d54e:	b29b      	uxth	r3, r3
 800d550:	3302      	adds	r3, #2
 800d552:	b29b      	uxth	r3, r3
 800d554:	b21a      	sxth	r2, r3
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	3302      	adds	r3, #2
 800d55e:	b29b      	uxth	r3, r3
 800d560:	b21b      	sxth	r3, r3
 800d562:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800d566:	9401      	str	r4, [sp, #4]
 800d568:	2403      	movs	r4, #3
 800d56a:	9400      	str	r4, [sp, #0]
 800d56c:	f7fd f8dd 	bl	800a72a <drawRoundRect>
        fillRoundRect(new_btn->x, new_btn->y, new_btn->width, new_btn->height, 3, GREEN);
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	b218      	sxth	r0, r3
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	b219      	sxth	r1, r3
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	b21a      	sxth	r2, r3
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	68db      	ldr	r3, [r3, #12]
 800d586:	b21b      	sxth	r3, r3
 800d588:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 800d58c:	9401      	str	r4, [sp, #4]
 800d58e:	2403      	movs	r4, #3
 800d590:	9400      	str	r4, [sp, #0]
 800d592:	f7fd f997 	bl	800a8c4 <fillRoundRect>
        ST7735_WriteString(new_btn->x+5, new_btn->y+4, new_btn->text, Font_7x10, BLACK, GREEN);
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	3305      	adds	r3, #5
 800d59e:	b298      	uxth	r0, r3
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	3304      	adds	r3, #4
 800d5a8:	b299      	uxth	r1, r3
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	f103 0414 	add.w	r4, r3, #20
 800d5b0:	4b09      	ldr	r3, [pc, #36]	@ (800d5d8 <updateButtonSelection+0x1f8>)
 800d5b2:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800d5b6:	9202      	str	r2, [sp, #8]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	9201      	str	r2, [sp, #4]
 800d5bc:	685a      	ldr	r2, [r3, #4]
 800d5be:	9200      	str	r2, [sp, #0]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4622      	mov	r2, r4
 800d5c4:	f7fd fc66 	bl	800ae94 <ST7735_WriteString>
    }
}
 800d5c8:	bf00      	nop
 800d5ca:	3714      	adds	r7, #20
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd90      	pop	{r4, r7, pc}
 800d5d0:	20000f48 	.word	0x20000f48
 800d5d4:	20000e28 	.word	0x20000e28
 800d5d8:	20000000 	.word	0x20000000

0800d5dc <updateStatusInfo>:
    snprintf(status, sizeof(status), "[%s]", is_on ? "ON" : "OFF");
    ST7735_WriteString(text_x + 70, text_y, status, Font_7x10, WHITE, GRAY);
}

void updateStatusInfo(char* status, uint16_t color)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b086      	sub	sp, #24
 800d5e0:	af04      	add	r7, sp, #16
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	807b      	strh	r3, [r7, #2]
    fillRect(MARGIN_X, TITLE_HEIGHT + 5, BUTTON_WIDTH, 12, BLACK);
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	9300      	str	r3, [sp, #0]
 800d5ec:	230c      	movs	r3, #12
 800d5ee:	228c      	movs	r2, #140	@ 0x8c
 800d5f0:	2114      	movs	r1, #20
 800d5f2:	200a      	movs	r0, #10
 800d5f4:	f7fc fd78 	bl	800a0e8 <fillRect>
    ST7735_WriteString(MARGIN_X + 2, TITLE_HEIGHT + 7, status, Font_7x10, color, BLACK);
 800d5f8:	4b08      	ldr	r3, [pc, #32]	@ (800d61c <updateStatusInfo+0x40>)
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	9202      	str	r2, [sp, #8]
 800d5fe:	887a      	ldrh	r2, [r7, #2]
 800d600:	9201      	str	r2, [sp, #4]
 800d602:	685a      	ldr	r2, [r3, #4]
 800d604:	9200      	str	r2, [sp, #0]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	687a      	ldr	r2, [r7, #4]
 800d60a:	2116      	movs	r1, #22
 800d60c:	200c      	movs	r0, #12
 800d60e:	f7fd fc41 	bl	800ae94 <ST7735_WriteString>
}
 800d612:	bf00      	nop
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	20000000 	.word	0x20000000

0800d620 <updateDeviceCount>:

void updateDeviceCount(int total_on)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b08c      	sub	sp, #48	@ 0x30
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
    char status[35];
    if(total_on > 0)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	dd0e      	ble.n	800d64c <updateDeviceCount+0x2c>
    {
    	snprintf(status, sizeof(status), "Status: %d/4 devices", total_on);
 800d62e:	f107 000c 	add.w	r0, r7, #12
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	4a0e      	ldr	r2, [pc, #56]	@ (800d670 <updateDeviceCount+0x50>)
 800d636:	2123      	movs	r1, #35	@ 0x23
 800d638:	f00a fde6 	bl	8018208 <sniprintf>
    	updateStatusInfo(status, GREEN);
 800d63c:	f107 030c 	add.w	r3, r7, #12
 800d640:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800d644:	4618      	mov	r0, r3
 800d646:	f7ff ffc9 	bl	800d5dc <updateStatusInfo>
    else
    {
    	snprintf(status, sizeof(status), "Status: %d/4 devices", total_on);
		updateStatusInfo(status, RED);
    }
}
 800d64a:	e00d      	b.n	800d668 <updateDeviceCount+0x48>
    	snprintf(status, sizeof(status), "Status: %d/4 devices", total_on);
 800d64c:	f107 000c 	add.w	r0, r7, #12
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	4a07      	ldr	r2, [pc, #28]	@ (800d670 <updateDeviceCount+0x50>)
 800d654:	2123      	movs	r1, #35	@ 0x23
 800d656:	f00a fdd7 	bl	8018208 <sniprintf>
		updateStatusInfo(status, RED);
 800d65a:	f107 030c 	add.w	r3, r7, #12
 800d65e:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800d662:	4618      	mov	r0, r3
 800d664:	f7ff ffba 	bl	800d5dc <updateStatusInfo>
}
 800d668:	bf00      	nop
 800d66a:	3730      	adds	r7, #48	@ 0x30
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	0801b930 	.word	0x0801b930

0800d674 <updateDeviceControlStatus>:

void updateDeviceControlStatus(int device, bool is_on)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b08a      	sub	sp, #40	@ 0x28
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	460b      	mov	r3, r1
 800d67e:	70fb      	strb	r3, [r7, #3]
    char status[25];
    snprintf(status, sizeof(status), "Status: %s", is_on ? "ON" : "OFF");
 800d680:	78fb      	ldrb	r3, [r7, #3]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d001      	beq.n	800d68a <updateDeviceControlStatus+0x16>
 800d686:	4b0e      	ldr	r3, [pc, #56]	@ (800d6c0 <updateDeviceControlStatus+0x4c>)
 800d688:	e000      	b.n	800d68c <updateDeviceControlStatus+0x18>
 800d68a:	4b0e      	ldr	r3, [pc, #56]	@ (800d6c4 <updateDeviceControlStatus+0x50>)
 800d68c:	f107 000c 	add.w	r0, r7, #12
 800d690:	4a0d      	ldr	r2, [pc, #52]	@ (800d6c8 <updateDeviceControlStatus+0x54>)
 800d692:	2119      	movs	r1, #25
 800d694:	f00a fdb8 	bl	8018208 <sniprintf>
    uint16_t status_color = is_on ? GREEN : RED;
 800d698:	78fb      	ldrb	r3, [r7, #3]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d002      	beq.n	800d6a4 <updateDeviceControlStatus+0x30>
 800d69e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800d6a2:	e001      	b.n	800d6a8 <updateDeviceControlStatus+0x34>
 800d6a4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800d6a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    updateStatusInfo(status, status_color);
 800d6aa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d6ac:	f107 030c 	add.w	r3, r7, #12
 800d6b0:	4611      	mov	r1, r2
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7ff ff92 	bl	800d5dc <updateStatusInfo>
}
 800d6b8:	bf00      	nop
 800d6ba:	3728      	adds	r7, #40	@ 0x28
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	0801b920 	.word	0x0801b920
 800d6c4:	0801b924 	.word	0x0801b924
 800d6c8:	0801b948 	.word	0x0801b948

0800d6cc <drawTitleBar>:
        fillRoundRect(x, y, width, height, 3, GRAY);
        ST7735_WriteString(x+5, y+4, text, Font_7x10, WHITE, GRAY);
    }
}

void drawTitleBar(char* title) {
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b08a      	sub	sp, #40	@ 0x28
 800d6d0:	af04      	add	r7, sp, #16
 800d6d2:	6078      	str	r0, [r7, #4]
    fillRect(0, 0, DISPLAY_WIDTH, TITLE_HEIGHT, BLUE);
 800d6d4:	231f      	movs	r3, #31
 800d6d6:	9300      	str	r3, [sp, #0]
 800d6d8:	230f      	movs	r3, #15
 800d6da:	22a0      	movs	r2, #160	@ 0xa0
 800d6dc:	2100      	movs	r1, #0
 800d6de:	2000      	movs	r0, #0
 800d6e0:	f7fc fd02 	bl	800a0e8 <fillRect>
    int title_length = strlen(title);
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f7fa fdf3 	bl	80082d0 <strlen>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	613b      	str	r3, [r7, #16]
    int title_width = title_length * 7;
 800d6ee:	693a      	ldr	r2, [r7, #16]
 800d6f0:	4613      	mov	r3, r2
 800d6f2:	00db      	lsls	r3, r3, #3
 800d6f4:	1a9b      	subs	r3, r3, r2
 800d6f6:	60fb      	str	r3, [r7, #12]
    int center_x = (DISPLAY_WIDTH - title_width) / 2;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 800d6fe:	0fda      	lsrs	r2, r3, #31
 800d700:	4413      	add	r3, r2
 800d702:	105b      	asrs	r3, r3, #1
 800d704:	617b      	str	r3, [r7, #20]

    if (center_x < 2) center_x = 2;
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	2b01      	cmp	r3, #1
 800d70a:	dc01      	bgt.n	800d710 <drawTitleBar+0x44>
 800d70c:	2302      	movs	r3, #2
 800d70e:	617b      	str	r3, [r7, #20]

    ST7735_WriteString(center_x, 2, title, Font_7x10, WHITE, BLUE);
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	b298      	uxth	r0, r3
 800d714:	4b0c      	ldr	r3, [pc, #48]	@ (800d748 <drawTitleBar+0x7c>)
 800d716:	221f      	movs	r2, #31
 800d718:	9202      	str	r2, [sp, #8]
 800d71a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d71e:	9201      	str	r2, [sp, #4]
 800d720:	685a      	ldr	r2, [r3, #4]
 800d722:	9200      	str	r2, [sp, #0]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	2102      	movs	r1, #2
 800d72a:	f7fd fbb3 	bl	800ae94 <ST7735_WriteString>

    drawLine(0, TITLE_HEIGHT, DISPLAY_WIDTH, TITLE_HEIGHT, WHITE);
 800d72e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	230f      	movs	r3, #15
 800d736:	22a0      	movs	r2, #160	@ 0xa0
 800d738:	210f      	movs	r1, #15
 800d73a:	2000      	movs	r0, #0
 800d73c:	f7fc fdf1 	bl	800a322 <drawLine>
}
 800d740:	bf00      	nop
 800d742:	3718      	adds	r7, #24
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	20000000 	.word	0x20000000

0800d74c <displayMainMenu>:
    ST7735_WriteString(MARGIN_X + 2, TITLE_HEIGHT + 7, status, Font_7x10, color, BLACK);
}


void displayMainMenu(void)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b086      	sub	sp, #24
 800d750:	af04      	add	r7, sp, #16
	if (current_menu != last_menu || !menu_drawn)
 800d752:	4b32      	ldr	r3, [pc, #200]	@ (800d81c <displayMainMenu+0xd0>)
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	4b32      	ldr	r3, [pc, #200]	@ (800d820 <displayMainMenu+0xd4>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d106      	bne.n	800d76c <displayMainMenu+0x20>
 800d75e:	4b31      	ldr	r3, [pc, #196]	@ (800d824 <displayMainMenu+0xd8>)
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	f083 0301 	eor.w	r3, r3, #1
 800d766:	b2db      	uxtb	r3, r3
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d012      	beq.n	800d792 <displayMainMenu+0x46>
	{
		ST7735_SetRotation(1);
 800d76c:	2001      	movs	r0, #1
 800d76e:	f7fd fa5b 	bl	800ac28 <ST7735_SetRotation>
		fillScreen(BLACK);
 800d772:	2000      	movs	r0, #0
 800d774:	f7fd f920 	bl	800a9b8 <fillScreen>
		drawTitleBar("HOME MENU");
 800d778:	482b      	ldr	r0, [pc, #172]	@ (800d828 <displayMainMenu+0xdc>)
 800d77a:	f7ff ffa7 	bl	800d6cc <drawTitleBar>
		menu_drawn = true;
 800d77e:	4b29      	ldr	r3, [pc, #164]	@ (800d824 <displayMainMenu+0xd8>)
 800d780:	2201      	movs	r2, #1
 800d782:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 800d784:	4b29      	ldr	r3, [pc, #164]	@ (800d82c <displayMainMenu+0xe0>)
 800d786:	2200      	movs	r2, #0
 800d788:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 800d78a:	4b24      	ldr	r3, [pc, #144]	@ (800d81c <displayMainMenu+0xd0>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4a24      	ldr	r2, [pc, #144]	@ (800d820 <displayMainMenu+0xd4>)
 800d790:	6013      	str	r3, [r2, #0]
	}

	if (!buttons_drawn || last_selection != current_selection)
 800d792:	4b26      	ldr	r3, [pc, #152]	@ (800d82c <displayMainMenu+0xe0>)
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	f083 0301 	eor.w	r3, r3, #1
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d105      	bne.n	800d7ac <displayMainMenu+0x60>
 800d7a0:	4b23      	ldr	r3, [pc, #140]	@ (800d830 <displayMainMenu+0xe4>)
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	4b23      	ldr	r3, [pc, #140]	@ (800d834 <displayMainMenu+0xe8>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d02f      	beq.n	800d80c <displayMainMenu+0xc0>
	{
		int start_y = TITLE_HEIGHT + 15;
 800d7ac:	231e      	movs	r3, #30
 800d7ae:	607b      	str	r3, [r7, #4]
		button_count = 2;
 800d7b0:	4b21      	ldr	r3, [pc, #132]	@ (800d838 <displayMainMenu+0xec>)
 800d7b2:	2202      	movs	r2, #2
 800d7b4:	601a      	str	r2, [r3, #0]

		drawSingleButton(MARGIN_X, start_y, BUTTON_WIDTH, BUTTON_HEIGHT,
 800d7b6:	4b1f      	ldr	r3, [pc, #124]	@ (800d834 <displayMainMenu+0xe8>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	bf0c      	ite	eq
 800d7be:	2301      	moveq	r3, #1
 800d7c0:	2300      	movne	r3, #0
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	9302      	str	r3, [sp, #8]
 800d7ca:	9201      	str	r2, [sp, #4]
 800d7cc:	4b1b      	ldr	r3, [pc, #108]	@ (800d83c <displayMainMenu+0xf0>)
 800d7ce:	9300      	str	r3, [sp, #0]
 800d7d0:	2312      	movs	r3, #18
 800d7d2:	228c      	movs	r2, #140	@ 0x8c
 800d7d4:	6879      	ldr	r1, [r7, #4]
 800d7d6:	200a      	movs	r0, #10
 800d7d8:	f7ff fd0e 	bl	800d1f8 <drawSingleButton>
						"MASTER CONTROL", (current_selection == 0), 0);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT,
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f103 0116 	add.w	r1, r3, #22
 800d7e2:	4b14      	ldr	r3, [pc, #80]	@ (800d834 <displayMainMenu+0xe8>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2b01      	cmp	r3, #1
 800d7e8:	bf0c      	ite	eq
 800d7ea:	2301      	moveq	r3, #1
 800d7ec:	2300      	movne	r3, #0
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	9302      	str	r3, [sp, #8]
 800d7f6:	9201      	str	r2, [sp, #4]
 800d7f8:	4b11      	ldr	r3, [pc, #68]	@ (800d840 <displayMainMenu+0xf4>)
 800d7fa:	9300      	str	r3, [sp, #0]
 800d7fc:	2312      	movs	r3, #18
 800d7fe:	228c      	movs	r2, #140	@ 0x8c
 800d800:	200a      	movs	r0, #10
 800d802:	f7ff fcf9 	bl	800d1f8 <drawSingleButton>
						"DEVICE LIST", (current_selection == 1), 1);

		buttons_drawn = true;
 800d806:	4b09      	ldr	r3, [pc, #36]	@ (800d82c <displayMainMenu+0xe0>)
 800d808:	2201      	movs	r2, #1
 800d80a:	701a      	strb	r2, [r3, #0]
	}

	last_selection = current_selection;
 800d80c:	4b09      	ldr	r3, [pc, #36]	@ (800d834 <displayMainMenu+0xe8>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a07      	ldr	r2, [pc, #28]	@ (800d830 <displayMainMenu+0xe4>)
 800d812:	6013      	str	r3, [r2, #0]
}
 800d814:	bf00      	nop
 800d816:	3708      	adds	r7, #8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	20000dfc 	.word	0x20000dfc
 800d820:	20000020 	.word	0x20000020
 800d824:	20000e24 	.word	0x20000e24
 800d828:	0801b954 	.word	0x0801b954
 800d82c:	20000e25 	.word	0x20000e25
 800d830:	2000001c 	.word	0x2000001c
 800d834:	20000e00 	.word	0x20000e00
 800d838:	20000f48 	.word	0x20000f48
 800d83c:	0801b960 	.word	0x0801b960
 800d840:	0801b970 	.word	0x0801b970

0800d844 <displayTotalControlMenu>:

void displayTotalControlMenu(void)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b08a      	sub	sp, #40	@ 0x28
 800d848:	af04      	add	r7, sp, #16
	bool states_changed = false;
 800d84a:	2300      	movs	r3, #0
 800d84c:	75fb      	strb	r3, [r7, #23]
	syncDisplayDeviceStates();
 800d84e:	f000 fc9b 	bl	800e188 <syncDisplayDeviceStates>

	for (int i = 0; i < 4; i++)
 800d852:	2300      	movs	r3, #0
 800d854:	613b      	str	r3, [r7, #16]
 800d856:	e016      	b.n	800d886 <displayTotalControlMenu+0x42>
	{
		if (device_states[i] != last_device_states[i])
 800d858:	4a5c      	ldr	r2, [pc, #368]	@ (800d9cc <displayTotalControlMenu+0x188>)
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d860:	495b      	ldr	r1, [pc, #364]	@ (800d9d0 <displayTotalControlMenu+0x18c>)
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d009      	beq.n	800d880 <displayTotalControlMenu+0x3c>
		{
			states_changed = true;
 800d86c:	2301      	movs	r3, #1
 800d86e:	75fb      	strb	r3, [r7, #23]
			last_device_states[i] = device_states[i];
 800d870:	4a56      	ldr	r2, [pc, #344]	@ (800d9cc <displayTotalControlMenu+0x188>)
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d878:	4955      	ldr	r1, [pc, #340]	@ (800d9d0 <displayTotalControlMenu+0x18c>)
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++)
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	3301      	adds	r3, #1
 800d884:	613b      	str	r3, [r7, #16]
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	2b03      	cmp	r3, #3
 800d88a:	dde5      	ble.n	800d858 <displayTotalControlMenu+0x14>
		}
	}

	if (current_menu != last_menu || !menu_drawn)
 800d88c:	4b51      	ldr	r3, [pc, #324]	@ (800d9d4 <displayTotalControlMenu+0x190>)
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	4b51      	ldr	r3, [pc, #324]	@ (800d9d8 <displayTotalControlMenu+0x194>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	429a      	cmp	r2, r3
 800d896:	d106      	bne.n	800d8a6 <displayTotalControlMenu+0x62>
 800d898:	4b50      	ldr	r3, [pc, #320]	@ (800d9dc <displayTotalControlMenu+0x198>)
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	f083 0301 	eor.w	r3, r3, #1
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d014      	beq.n	800d8d0 <displayTotalControlMenu+0x8c>
	{
		ST7735_SetRotation(1);
 800d8a6:	2001      	movs	r0, #1
 800d8a8:	f7fd f9be 	bl	800ac28 <ST7735_SetRotation>
		fillScreen(BLACK);
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	f7fd f883 	bl	800a9b8 <fillScreen>
		drawTitleBar("MASTER CONTROL");
 800d8b2:	484b      	ldr	r0, [pc, #300]	@ (800d9e0 <displayTotalControlMenu+0x19c>)
 800d8b4:	f7ff ff0a 	bl	800d6cc <drawTitleBar>
		menu_drawn = true;
 800d8b8:	4b48      	ldr	r3, [pc, #288]	@ (800d9dc <displayTotalControlMenu+0x198>)
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 800d8be:	4b49      	ldr	r3, [pc, #292]	@ (800d9e4 <displayTotalControlMenu+0x1a0>)
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 800d8c4:	4b43      	ldr	r3, [pc, #268]	@ (800d9d4 <displayTotalControlMenu+0x190>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a43      	ldr	r2, [pc, #268]	@ (800d9d8 <displayTotalControlMenu+0x194>)
 800d8ca:	6013      	str	r3, [r2, #0]
		states_changed = true;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	75fb      	strb	r3, [r7, #23]
	}

	if (states_changed)
 800d8d0:	7dfb      	ldrb	r3, [r7, #23]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d016      	beq.n	800d904 <displayTotalControlMenu+0xc0>
	{
		int total_on = 0;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < 4; i++)
 800d8da:	2300      	movs	r3, #0
 800d8dc:	60bb      	str	r3, [r7, #8]
 800d8de:	e00b      	b.n	800d8f8 <displayTotalControlMenu+0xb4>
		{
			if (device_states[i]) total_on++;
 800d8e0:	4a3a      	ldr	r2, [pc, #232]	@ (800d9cc <displayTotalControlMenu+0x188>)
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d002      	beq.n	800d8f2 <displayTotalControlMenu+0xae>
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < 4; i++)
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	60bb      	str	r3, [r7, #8]
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	2b03      	cmp	r3, #3
 800d8fc:	ddf0      	ble.n	800d8e0 <displayTotalControlMenu+0x9c>
		}
		updateDeviceCount(total_on);
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f7ff fe8e 	bl	800d620 <updateDeviceCount>
	}

	if (!buttons_drawn)
 800d904:	4b37      	ldr	r3, [pc, #220]	@ (800d9e4 <displayTotalControlMenu+0x1a0>)
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	f083 0301 	eor.w	r3, r3, #1
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d045      	beq.n	800d99e <displayTotalControlMenu+0x15a>
	{
		int start_y = TITLE_HEIGHT + 25;
 800d912:	2328      	movs	r3, #40	@ 0x28
 800d914:	607b      	str	r3, [r7, #4]
		button_count = 3;
 800d916:	4b34      	ldr	r3, [pc, #208]	@ (800d9e8 <displayTotalControlMenu+0x1a4>)
 800d918:	2203      	movs	r2, #3
 800d91a:	601a      	str	r2, [r3, #0]

		drawSingleButton(MARGIN_X, start_y, BUTTON_WIDTH, BUTTON_HEIGHT,
 800d91c:	4b33      	ldr	r3, [pc, #204]	@ (800d9ec <displayTotalControlMenu+0x1a8>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	bf0c      	ite	eq
 800d924:	2301      	moveq	r3, #1
 800d926:	2300      	movne	r3, #0
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	461a      	mov	r2, r3
 800d92c:	2300      	movs	r3, #0
 800d92e:	9302      	str	r3, [sp, #8]
 800d930:	9201      	str	r2, [sp, #4]
 800d932:	4b2f      	ldr	r3, [pc, #188]	@ (800d9f0 <displayTotalControlMenu+0x1ac>)
 800d934:	9300      	str	r3, [sp, #0]
 800d936:	2312      	movs	r3, #18
 800d938:	228c      	movs	r2, #140	@ 0x8c
 800d93a:	6879      	ldr	r1, [r7, #4]
 800d93c:	200a      	movs	r0, #10
 800d93e:	f7ff fc5b 	bl	800d1f8 <drawSingleButton>
						"TOTAL ON", (current_selection == 0), 0);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT,
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f103 0116 	add.w	r1, r3, #22
 800d948:	4b28      	ldr	r3, [pc, #160]	@ (800d9ec <displayTotalControlMenu+0x1a8>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	bf0c      	ite	eq
 800d950:	2301      	moveq	r3, #1
 800d952:	2300      	movne	r3, #0
 800d954:	b2db      	uxtb	r3, r3
 800d956:	461a      	mov	r2, r3
 800d958:	2301      	movs	r3, #1
 800d95a:	9302      	str	r3, [sp, #8]
 800d95c:	9201      	str	r2, [sp, #4]
 800d95e:	4b25      	ldr	r3, [pc, #148]	@ (800d9f4 <displayTotalControlMenu+0x1b0>)
 800d960:	9300      	str	r3, [sp, #0]
 800d962:	2312      	movs	r3, #18
 800d964:	228c      	movs	r2, #140	@ 0x8c
 800d966:	200a      	movs	r0, #10
 800d968:	f7ff fc46 	bl	800d1f8 <drawSingleButton>
						"TOTAL OFF", (current_selection == 1), 1);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING*2, BUTTON_WIDTH, BUTTON_HEIGHT,
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 800d972:	4b1e      	ldr	r3, [pc, #120]	@ (800d9ec <displayTotalControlMenu+0x1a8>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	2b02      	cmp	r3, #2
 800d978:	bf0c      	ite	eq
 800d97a:	2301      	moveq	r3, #1
 800d97c:	2300      	movne	r3, #0
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	461a      	mov	r2, r3
 800d982:	2302      	movs	r3, #2
 800d984:	9302      	str	r3, [sp, #8]
 800d986:	9201      	str	r2, [sp, #4]
 800d988:	4b1b      	ldr	r3, [pc, #108]	@ (800d9f8 <displayTotalControlMenu+0x1b4>)
 800d98a:	9300      	str	r3, [sp, #0]
 800d98c:	2312      	movs	r3, #18
 800d98e:	228c      	movs	r2, #140	@ 0x8c
 800d990:	200a      	movs	r0, #10
 800d992:	f7ff fc31 	bl	800d1f8 <drawSingleButton>
						"GO BACK", (current_selection == 2), 2);

		buttons_drawn = true;
 800d996:	4b13      	ldr	r3, [pc, #76]	@ (800d9e4 <displayTotalControlMenu+0x1a0>)
 800d998:	2201      	movs	r2, #1
 800d99a:	701a      	strb	r2, [r3, #0]
 800d99c:	e00d      	b.n	800d9ba <displayTotalControlMenu+0x176>
	}
	else if (last_selection != current_selection)
 800d99e:	4b17      	ldr	r3, [pc, #92]	@ (800d9fc <displayTotalControlMenu+0x1b8>)
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	4b12      	ldr	r3, [pc, #72]	@ (800d9ec <displayTotalControlMenu+0x1a8>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d007      	beq.n	800d9ba <displayTotalControlMenu+0x176>
	{
		updateButtonSelection(last_selection, current_selection);
 800d9aa:	4b14      	ldr	r3, [pc, #80]	@ (800d9fc <displayTotalControlMenu+0x1b8>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4a0f      	ldr	r2, [pc, #60]	@ (800d9ec <displayTotalControlMenu+0x1a8>)
 800d9b0:	6812      	ldr	r2, [r2, #0]
 800d9b2:	4611      	mov	r1, r2
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7ff fd13 	bl	800d3e0 <updateButtonSelection>
	}

	last_selection = current_selection;
 800d9ba:	4b0c      	ldr	r3, [pc, #48]	@ (800d9ec <displayTotalControlMenu+0x1a8>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	4a0f      	ldr	r2, [pc, #60]	@ (800d9fc <displayTotalControlMenu+0x1b8>)
 800d9c0:	6013      	str	r3, [r2, #0]
}
 800d9c2:	bf00      	nop
 800d9c4:	3718      	adds	r7, #24
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	20000e14 	.word	0x20000e14
 800d9d0:	20000024 	.word	0x20000024
 800d9d4:	20000dfc 	.word	0x20000dfc
 800d9d8:	20000020 	.word	0x20000020
 800d9dc:	20000e24 	.word	0x20000e24
 800d9e0:	0801b960 	.word	0x0801b960
 800d9e4:	20000e25 	.word	0x20000e25
 800d9e8:	20000f48 	.word	0x20000f48
 800d9ec:	20000e00 	.word	0x20000e00
 800d9f0:	0801b97c 	.word	0x0801b97c
 800d9f4:	0801b988 	.word	0x0801b988
 800d9f8:	0801b994 	.word	0x0801b994
 800d9fc:	2000001c 	.word	0x2000001c

0800da00 <displaySeparateControlMenu>:

void displaySeparateControlMenu(void)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b08e      	sub	sp, #56	@ 0x38
 800da04:	af04      	add	r7, sp, #16
	bool states_changed = false;
 800da06:	2300      	movs	r3, #0
 800da08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	syncDisplayDeviceStates();
 800da0c:	f000 fbbc 	bl	800e188 <syncDisplayDeviceStates>

	for (int i = 0; i < 4; i++) {
 800da10:	2300      	movs	r3, #0
 800da12:	623b      	str	r3, [r7, #32]
 800da14:	e017      	b.n	800da46 <displaySeparateControlMenu+0x46>
		if (device_states[i] != last_device_states[i]) {
 800da16:	4a59      	ldr	r2, [pc, #356]	@ (800db7c <displaySeparateControlMenu+0x17c>)
 800da18:	6a3b      	ldr	r3, [r7, #32]
 800da1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800da1e:	4958      	ldr	r1, [pc, #352]	@ (800db80 <displaySeparateControlMenu+0x180>)
 800da20:	6a3b      	ldr	r3, [r7, #32]
 800da22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800da26:	429a      	cmp	r2, r3
 800da28:	d00a      	beq.n	800da40 <displaySeparateControlMenu+0x40>
			states_changed = true;
 800da2a:	2301      	movs	r3, #1
 800da2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			last_device_states[i] = device_states[i];
 800da30:	4a52      	ldr	r2, [pc, #328]	@ (800db7c <displaySeparateControlMenu+0x17c>)
 800da32:	6a3b      	ldr	r3, [r7, #32]
 800da34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800da38:	4951      	ldr	r1, [pc, #324]	@ (800db80 <displaySeparateControlMenu+0x180>)
 800da3a:	6a3b      	ldr	r3, [r7, #32]
 800da3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 800da40:	6a3b      	ldr	r3, [r7, #32]
 800da42:	3301      	adds	r3, #1
 800da44:	623b      	str	r3, [r7, #32]
 800da46:	6a3b      	ldr	r3, [r7, #32]
 800da48:	2b03      	cmp	r3, #3
 800da4a:	dde4      	ble.n	800da16 <displaySeparateControlMenu+0x16>
		}
	}

	if (current_menu != last_menu || !menu_drawn) {
 800da4c:	4b4d      	ldr	r3, [pc, #308]	@ (800db84 <displaySeparateControlMenu+0x184>)
 800da4e:	681a      	ldr	r2, [r3, #0]
 800da50:	4b4d      	ldr	r3, [pc, #308]	@ (800db88 <displaySeparateControlMenu+0x188>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	429a      	cmp	r2, r3
 800da56:	d106      	bne.n	800da66 <displaySeparateControlMenu+0x66>
 800da58:	4b4c      	ldr	r3, [pc, #304]	@ (800db8c <displaySeparateControlMenu+0x18c>)
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	f083 0301 	eor.w	r3, r3, #1
 800da60:	b2db      	uxtb	r3, r3
 800da62:	2b00      	cmp	r3, #0
 800da64:	d015      	beq.n	800da92 <displaySeparateControlMenu+0x92>
		ST7735_SetRotation(1);
 800da66:	2001      	movs	r0, #1
 800da68:	f7fd f8de 	bl	800ac28 <ST7735_SetRotation>
		fillScreen(BLACK);
 800da6c:	2000      	movs	r0, #0
 800da6e:	f7fc ffa3 	bl	800a9b8 <fillScreen>
		drawTitleBar("DEVICE LIST");
 800da72:	4847      	ldr	r0, [pc, #284]	@ (800db90 <displaySeparateControlMenu+0x190>)
 800da74:	f7ff fe2a 	bl	800d6cc <drawTitleBar>
		menu_drawn = true;
 800da78:	4b44      	ldr	r3, [pc, #272]	@ (800db8c <displaySeparateControlMenu+0x18c>)
 800da7a:	2201      	movs	r2, #1
 800da7c:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 800da7e:	4b45      	ldr	r3, [pc, #276]	@ (800db94 <displaySeparateControlMenu+0x194>)
 800da80:	2200      	movs	r2, #0
 800da82:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 800da84:	4b3f      	ldr	r3, [pc, #252]	@ (800db84 <displaySeparateControlMenu+0x184>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a3f      	ldr	r2, [pc, #252]	@ (800db88 <displaySeparateControlMenu+0x188>)
 800da8a:	6013      	str	r3, [r2, #0]
		states_changed = true;
 800da8c:	2301      	movs	r3, #1
 800da8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	if (!buttons_drawn || states_changed) {
 800da92:	4b40      	ldr	r3, [pc, #256]	@ (800db94 <displaySeparateControlMenu+0x194>)
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	f083 0301 	eor.w	r3, r3, #1
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d103      	bne.n	800daa8 <displaySeparateControlMenu+0xa8>
 800daa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d053      	beq.n	800db50 <displaySeparateControlMenu+0x150>
		int start_y = TITLE_HEIGHT + 10;
 800daa8:	2319      	movs	r3, #25
 800daaa:	61bb      	str	r3, [r7, #24]
		button_count = 5;
 800daac:	4b3a      	ldr	r3, [pc, #232]	@ (800db98 <displaySeparateControlMenu+0x198>)
 800daae:	2205      	movs	r2, #5
 800dab0:	601a      	str	r2, [r3, #0]

		for (int i = 0; i < 4; i++)
 800dab2:	2300      	movs	r3, #0
 800dab4:	61fb      	str	r3, [r7, #28]
 800dab6:	e02f      	b.n	800db18 <displaySeparateControlMenu+0x118>
		{
			char device_text[20];
			snprintf(device_text, sizeof(device_text), "DEVICE %d [%s]",
 800dab8:	69fb      	ldr	r3, [r7, #28]
 800daba:	1c5a      	adds	r2, r3, #1
					i + 1, device_states[i] ? "ON" : "OFF");
 800dabc:	492f      	ldr	r1, [pc, #188]	@ (800db7c <displaySeparateControlMenu+0x17c>)
 800dabe:	69fb      	ldr	r3, [r7, #28]
 800dac0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			snprintf(device_text, sizeof(device_text), "DEVICE %d [%s]",
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d001      	beq.n	800dacc <displaySeparateControlMenu+0xcc>
 800dac8:	4b34      	ldr	r3, [pc, #208]	@ (800db9c <displaySeparateControlMenu+0x19c>)
 800daca:	e000      	b.n	800dace <displaySeparateControlMenu+0xce>
 800dacc:	4b34      	ldr	r3, [pc, #208]	@ (800dba0 <displaySeparateControlMenu+0x1a0>)
 800dace:	1d38      	adds	r0, r7, #4
 800dad0:	9300      	str	r3, [sp, #0]
 800dad2:	4613      	mov	r3, r2
 800dad4:	4a33      	ldr	r2, [pc, #204]	@ (800dba4 <displaySeparateControlMenu+0x1a4>)
 800dad6:	2114      	movs	r1, #20
 800dad8:	f00a fb96 	bl	8018208 <sniprintf>
			drawSingleButton(MARGIN_X, start_y + i * 20, BUTTON_WIDTH, 16,
 800dadc:	69fa      	ldr	r2, [r7, #28]
 800dade:	4613      	mov	r3, r2
 800dae0:	009b      	lsls	r3, r3, #2
 800dae2:	4413      	add	r3, r2
 800dae4:	009b      	lsls	r3, r3, #2
 800dae6:	461a      	mov	r2, r3
 800dae8:	69bb      	ldr	r3, [r7, #24]
 800daea:	18d1      	adds	r1, r2, r3
 800daec:	4b2e      	ldr	r3, [pc, #184]	@ (800dba8 <displaySeparateControlMenu+0x1a8>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	69fa      	ldr	r2, [r7, #28]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	bf0c      	ite	eq
 800daf6:	2301      	moveq	r3, #1
 800daf8:	2300      	movne	r3, #0
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	461a      	mov	r2, r3
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	9302      	str	r3, [sp, #8]
 800db02:	9201      	str	r2, [sp, #4]
 800db04:	1d3b      	adds	r3, r7, #4
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	2310      	movs	r3, #16
 800db0a:	228c      	movs	r2, #140	@ 0x8c
 800db0c:	200a      	movs	r0, #10
 800db0e:	f7ff fb73 	bl	800d1f8 <drawSingleButton>
		for (int i = 0; i < 4; i++)
 800db12:	69fb      	ldr	r3, [r7, #28]
 800db14:	3301      	adds	r3, #1
 800db16:	61fb      	str	r3, [r7, #28]
 800db18:	69fb      	ldr	r3, [r7, #28]
 800db1a:	2b03      	cmp	r3, #3
 800db1c:	ddcc      	ble.n	800dab8 <displaySeparateControlMenu+0xb8>
						   device_text, (current_selection == i), i);
		}

		drawSingleButton(MARGIN_X, start_y + 4 * 20, BUTTON_WIDTH, 16,
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800db24:	4b20      	ldr	r3, [pc, #128]	@ (800dba8 <displaySeparateControlMenu+0x1a8>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b04      	cmp	r3, #4
 800db2a:	bf0c      	ite	eq
 800db2c:	2301      	moveq	r3, #1
 800db2e:	2300      	movne	r3, #0
 800db30:	b2db      	uxtb	r3, r3
 800db32:	461a      	mov	r2, r3
 800db34:	2304      	movs	r3, #4
 800db36:	9302      	str	r3, [sp, #8]
 800db38:	9201      	str	r2, [sp, #4]
 800db3a:	4b1c      	ldr	r3, [pc, #112]	@ (800dbac <displaySeparateControlMenu+0x1ac>)
 800db3c:	9300      	str	r3, [sp, #0]
 800db3e:	2310      	movs	r3, #16
 800db40:	228c      	movs	r2, #140	@ 0x8c
 800db42:	200a      	movs	r0, #10
 800db44:	f7ff fb58 	bl	800d1f8 <drawSingleButton>
					   "GO BACK", (current_selection == 4), 4);

		buttons_drawn = true;
 800db48:	4b12      	ldr	r3, [pc, #72]	@ (800db94 <displaySeparateControlMenu+0x194>)
 800db4a:	2201      	movs	r2, #1
 800db4c:	701a      	strb	r2, [r3, #0]
	if (!buttons_drawn || states_changed) {
 800db4e:	e00d      	b.n	800db6c <displaySeparateControlMenu+0x16c>
	} else if (last_selection != current_selection) {
 800db50:	4b17      	ldr	r3, [pc, #92]	@ (800dbb0 <displaySeparateControlMenu+0x1b0>)
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	4b14      	ldr	r3, [pc, #80]	@ (800dba8 <displaySeparateControlMenu+0x1a8>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	429a      	cmp	r2, r3
 800db5a:	d007      	beq.n	800db6c <displaySeparateControlMenu+0x16c>
		updateButtonSelection(last_selection, current_selection);
 800db5c:	4b14      	ldr	r3, [pc, #80]	@ (800dbb0 <displaySeparateControlMenu+0x1b0>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4a11      	ldr	r2, [pc, #68]	@ (800dba8 <displaySeparateControlMenu+0x1a8>)
 800db62:	6812      	ldr	r2, [r2, #0]
 800db64:	4611      	mov	r1, r2
 800db66:	4618      	mov	r0, r3
 800db68:	f7ff fc3a 	bl	800d3e0 <updateButtonSelection>
	}

	last_selection = current_selection;
 800db6c:	4b0e      	ldr	r3, [pc, #56]	@ (800dba8 <displaySeparateControlMenu+0x1a8>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4a0f      	ldr	r2, [pc, #60]	@ (800dbb0 <displaySeparateControlMenu+0x1b0>)
 800db72:	6013      	str	r3, [r2, #0]
}
 800db74:	bf00      	nop
 800db76:	3728      	adds	r7, #40	@ 0x28
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	20000e14 	.word	0x20000e14
 800db80:	20000024 	.word	0x20000024
 800db84:	20000dfc 	.word	0x20000dfc
 800db88:	20000020 	.word	0x20000020
 800db8c:	20000e24 	.word	0x20000e24
 800db90:	0801b970 	.word	0x0801b970
 800db94:	20000e25 	.word	0x20000e25
 800db98:	20000f48 	.word	0x20000f48
 800db9c:	0801b920 	.word	0x0801b920
 800dba0:	0801b924 	.word	0x0801b924
 800dba4:	0801b99c 	.word	0x0801b99c
 800dba8:	20000e00 	.word	0x20000e00
 800dbac:	0801b994 	.word	0x0801b994
 800dbb0:	2000001c 	.word	0x2000001c

0800dbb4 <displayDeviceControlMenu>:

void displayDeviceControlMenu(void) {
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b08e      	sub	sp, #56	@ 0x38
 800dbb8:	af04      	add	r7, sp, #16
	bool state_changed = false;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	syncDisplayDeviceStates();
 800dbc0:	f000 fae2 	bl	800e188 <syncDisplayDeviceStates>

	if (device_states[current_device] != last_device_states[current_device]) {
 800dbc4:	4b68      	ldr	r3, [pc, #416]	@ (800dd68 <displayDeviceControlMenu+0x1b4>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4a68      	ldr	r2, [pc, #416]	@ (800dd6c <displayDeviceControlMenu+0x1b8>)
 800dbca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dbce:	4b66      	ldr	r3, [pc, #408]	@ (800dd68 <displayDeviceControlMenu+0x1b4>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4967      	ldr	r1, [pc, #412]	@ (800dd70 <displayDeviceControlMenu+0x1bc>)
 800dbd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d00c      	beq.n	800dbf6 <displayDeviceControlMenu+0x42>
		state_changed = true;
 800dbdc:	2301      	movs	r3, #1
 800dbde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		last_device_states[current_device] = device_states[current_device];
 800dbe2:	4b61      	ldr	r3, [pc, #388]	@ (800dd68 <displayDeviceControlMenu+0x1b4>)
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	4b60      	ldr	r3, [pc, #384]	@ (800dd68 <displayDeviceControlMenu+0x1b4>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4960      	ldr	r1, [pc, #384]	@ (800dd6c <displayDeviceControlMenu+0x1b8>)
 800dbec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800dbf0:	495f      	ldr	r1, [pc, #380]	@ (800dd70 <displayDeviceControlMenu+0x1bc>)
 800dbf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (current_menu != last_menu || !menu_drawn) {
 800dbf6:	4b5f      	ldr	r3, [pc, #380]	@ (800dd74 <displayDeviceControlMenu+0x1c0>)
 800dbf8:	681a      	ldr	r2, [r3, #0]
 800dbfa:	4b5f      	ldr	r3, [pc, #380]	@ (800dd78 <displayDeviceControlMenu+0x1c4>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d106      	bne.n	800dc10 <displayDeviceControlMenu+0x5c>
 800dc02:	4b5e      	ldr	r3, [pc, #376]	@ (800dd7c <displayDeviceControlMenu+0x1c8>)
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	f083 0301 	eor.w	r3, r3, #1
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d01e      	beq.n	800dc4e <displayDeviceControlMenu+0x9a>
		ST7735_SetRotation(1);
 800dc10:	2001      	movs	r0, #1
 800dc12:	f7fd f809 	bl	800ac28 <ST7735_SetRotation>
		fillScreen(BLACK);
 800dc16:	2000      	movs	r0, #0
 800dc18:	f7fc fece 	bl	800a9b8 <fillScreen>

		char title[30];
		snprintf(title, sizeof(title), "DEVICE %d CONTROL", current_device + 1);
 800dc1c:	4b52      	ldr	r3, [pc, #328]	@ (800dd68 <displayDeviceControlMenu+0x1b4>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	3301      	adds	r3, #1
 800dc22:	4638      	mov	r0, r7
 800dc24:	4a56      	ldr	r2, [pc, #344]	@ (800dd80 <displayDeviceControlMenu+0x1cc>)
 800dc26:	211e      	movs	r1, #30
 800dc28:	f00a faee 	bl	8018208 <sniprintf>
		drawTitleBar(title);
 800dc2c:	463b      	mov	r3, r7
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7ff fd4c 	bl	800d6cc <drawTitleBar>

		menu_drawn = true;
 800dc34:	4b51      	ldr	r3, [pc, #324]	@ (800dd7c <displayDeviceControlMenu+0x1c8>)
 800dc36:	2201      	movs	r2, #1
 800dc38:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 800dc3a:	4b52      	ldr	r3, [pc, #328]	@ (800dd84 <displayDeviceControlMenu+0x1d0>)
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 800dc40:	4b4c      	ldr	r3, [pc, #304]	@ (800dd74 <displayDeviceControlMenu+0x1c0>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4a4c      	ldr	r2, [pc, #304]	@ (800dd78 <displayDeviceControlMenu+0x1c4>)
 800dc46:	6013      	str	r3, [r2, #0]
		state_changed = true;
 800dc48:	2301      	movs	r3, #1
 800dc4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	if (state_changed) {
 800dc4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00f      	beq.n	800dc76 <displayDeviceControlMenu+0xc2>
		updateDeviceControlStatus(current_device, device_states[current_device]);
 800dc56:	4b44      	ldr	r3, [pc, #272]	@ (800dd68 <displayDeviceControlMenu+0x1b4>)
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	4b43      	ldr	r3, [pc, #268]	@ (800dd68 <displayDeviceControlMenu+0x1b4>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	4943      	ldr	r1, [pc, #268]	@ (800dd6c <displayDeviceControlMenu+0x1b8>)
 800dc60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	bf14      	ite	ne
 800dc68:	2301      	movne	r3, #1
 800dc6a:	2300      	moveq	r3, #0
 800dc6c:	b2db      	uxtb	r3, r3
 800dc6e:	4619      	mov	r1, r3
 800dc70:	4610      	mov	r0, r2
 800dc72:	f7ff fcff 	bl	800d674 <updateDeviceControlStatus>
	}

	if (!buttons_drawn) {
 800dc76:	4b43      	ldr	r3, [pc, #268]	@ (800dd84 <displayDeviceControlMenu+0x1d0>)
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	f083 0301 	eor.w	r3, r3, #1
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d05a      	beq.n	800dd3a <displayDeviceControlMenu+0x186>
		int start_y = TITLE_HEIGHT + 25;
 800dc84:	2328      	movs	r3, #40	@ 0x28
 800dc86:	623b      	str	r3, [r7, #32]
		button_count = 4;
 800dc88:	4b3f      	ldr	r3, [pc, #252]	@ (800dd88 <displayDeviceControlMenu+0x1d4>)
 800dc8a:	2204      	movs	r2, #4
 800dc8c:	601a      	str	r2, [r3, #0]

		drawSingleButton(MARGIN_X, start_y, BUTTON_WIDTH, BUTTON_HEIGHT,
 800dc8e:	4b3f      	ldr	r3, [pc, #252]	@ (800dd8c <displayDeviceControlMenu+0x1d8>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	bf0c      	ite	eq
 800dc96:	2301      	moveq	r3, #1
 800dc98:	2300      	movne	r3, #0
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	2300      	movs	r3, #0
 800dca0:	9302      	str	r3, [sp, #8]
 800dca2:	9201      	str	r2, [sp, #4]
 800dca4:	4b3a      	ldr	r3, [pc, #232]	@ (800dd90 <displayDeviceControlMenu+0x1dc>)
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	2312      	movs	r3, #18
 800dcaa:	228c      	movs	r2, #140	@ 0x8c
 800dcac:	6a39      	ldr	r1, [r7, #32]
 800dcae:	200a      	movs	r0, #10
 800dcb0:	f7ff faa2 	bl	800d1f8 <drawSingleButton>
						"TURN ON", (current_selection == 0), 0);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT,
 800dcb4:	6a3b      	ldr	r3, [r7, #32]
 800dcb6:	f103 0116 	add.w	r1, r3, #22
 800dcba:	4b34      	ldr	r3, [pc, #208]	@ (800dd8c <displayDeviceControlMenu+0x1d8>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	bf0c      	ite	eq
 800dcc2:	2301      	moveq	r3, #1
 800dcc4:	2300      	movne	r3, #0
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	461a      	mov	r2, r3
 800dcca:	2301      	movs	r3, #1
 800dccc:	9302      	str	r3, [sp, #8]
 800dcce:	9201      	str	r2, [sp, #4]
 800dcd0:	4b30      	ldr	r3, [pc, #192]	@ (800dd94 <displayDeviceControlMenu+0x1e0>)
 800dcd2:	9300      	str	r3, [sp, #0]
 800dcd4:	2312      	movs	r3, #18
 800dcd6:	228c      	movs	r2, #140	@ 0x8c
 800dcd8:	200a      	movs	r0, #10
 800dcda:	f7ff fa8d 	bl	800d1f8 <drawSingleButton>
						"TURN OFF", (current_selection == 1), 1);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING*2, BUTTON_WIDTH, BUTTON_HEIGHT,
 800dcde:	6a3b      	ldr	r3, [r7, #32]
 800dce0:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 800dce4:	4b29      	ldr	r3, [pc, #164]	@ (800dd8c <displayDeviceControlMenu+0x1d8>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	2b02      	cmp	r3, #2
 800dcea:	bf0c      	ite	eq
 800dcec:	2301      	moveq	r3, #1
 800dcee:	2300      	movne	r3, #0
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	2302      	movs	r3, #2
 800dcf6:	9302      	str	r3, [sp, #8]
 800dcf8:	9201      	str	r2, [sp, #4]
 800dcfa:	4b27      	ldr	r3, [pc, #156]	@ (800dd98 <displayDeviceControlMenu+0x1e4>)
 800dcfc:	9300      	str	r3, [sp, #0]
 800dcfe:	2312      	movs	r3, #18
 800dd00:	228c      	movs	r2, #140	@ 0x8c
 800dd02:	200a      	movs	r0, #10
 800dd04:	f7ff fa78 	bl	800d1f8 <drawSingleButton>
						"GO BACK", (current_selection == 2), 2);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING*3, BUTTON_WIDTH, BUTTON_HEIGHT,
 800dd08:	6a3b      	ldr	r3, [r7, #32]
 800dd0a:	f103 0142 	add.w	r1, r3, #66	@ 0x42
 800dd0e:	4b1f      	ldr	r3, [pc, #124]	@ (800dd8c <displayDeviceControlMenu+0x1d8>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	2b03      	cmp	r3, #3
 800dd14:	bf0c      	ite	eq
 800dd16:	2301      	moveq	r3, #1
 800dd18:	2300      	movne	r3, #0
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	2303      	movs	r3, #3
 800dd20:	9302      	str	r3, [sp, #8]
 800dd22:	9201      	str	r2, [sp, #4]
 800dd24:	4b1d      	ldr	r3, [pc, #116]	@ (800dd9c <displayDeviceControlMenu+0x1e8>)
 800dd26:	9300      	str	r3, [sp, #0]
 800dd28:	2312      	movs	r3, #18
 800dd2a:	228c      	movs	r2, #140	@ 0x8c
 800dd2c:	200a      	movs	r0, #10
 800dd2e:	f7ff fa63 	bl	800d1f8 <drawSingleButton>
						"GO TO HOME", (current_selection == 3), 3);

		buttons_drawn = true;
 800dd32:	4b14      	ldr	r3, [pc, #80]	@ (800dd84 <displayDeviceControlMenu+0x1d0>)
 800dd34:	2201      	movs	r2, #1
 800dd36:	701a      	strb	r2, [r3, #0]
 800dd38:	e00d      	b.n	800dd56 <displayDeviceControlMenu+0x1a2>
	} else if (last_selection != current_selection) {
 800dd3a:	4b19      	ldr	r3, [pc, #100]	@ (800dda0 <displayDeviceControlMenu+0x1ec>)
 800dd3c:	681a      	ldr	r2, [r3, #0]
 800dd3e:	4b13      	ldr	r3, [pc, #76]	@ (800dd8c <displayDeviceControlMenu+0x1d8>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d007      	beq.n	800dd56 <displayDeviceControlMenu+0x1a2>
		updateButtonSelection(last_selection, current_selection);
 800dd46:	4b16      	ldr	r3, [pc, #88]	@ (800dda0 <displayDeviceControlMenu+0x1ec>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	4a10      	ldr	r2, [pc, #64]	@ (800dd8c <displayDeviceControlMenu+0x1d8>)
 800dd4c:	6812      	ldr	r2, [r2, #0]
 800dd4e:	4611      	mov	r1, r2
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7ff fb45 	bl	800d3e0 <updateButtonSelection>
	}

	last_selection = current_selection;
 800dd56:	4b0d      	ldr	r3, [pc, #52]	@ (800dd8c <displayDeviceControlMenu+0x1d8>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4a11      	ldr	r2, [pc, #68]	@ (800dda0 <displayDeviceControlMenu+0x1ec>)
 800dd5c:	6013      	str	r3, [r2, #0]
}
 800dd5e:	bf00      	nop
 800dd60:	3728      	adds	r7, #40	@ 0x28
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	20000e04 	.word	0x20000e04
 800dd6c:	20000e14 	.word	0x20000e14
 800dd70:	20000024 	.word	0x20000024
 800dd74:	20000dfc 	.word	0x20000dfc
 800dd78:	20000020 	.word	0x20000020
 800dd7c:	20000e24 	.word	0x20000e24
 800dd80:	0801b9ac 	.word	0x0801b9ac
 800dd84:	20000e25 	.word	0x20000e25
 800dd88:	20000f48 	.word	0x20000f48
 800dd8c:	20000e00 	.word	0x20000e00
 800dd90:	0801b9c0 	.word	0x0801b9c0
 800dd94:	0801b9c8 	.word	0x0801b9c8
 800dd98:	0801b994 	.word	0x0801b994
 800dd9c:	0801b9d4 	.word	0x0801b9d4
 800dda0:	2000001c 	.word	0x2000001c

0800dda4 <setDeviceState>:


void setDeviceState(int device, int state) {
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b08c      	sub	sp, #48	@ 0x30
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
    GPIO_TypeDef* gpio_led_port;
    GPIO_TypeDef *gpio_relay_port;
    uint16_t gpio_led_pin, gpio_relay_pin;
    char deviceItem[15];

    switch(device) {
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2b03      	cmp	r3, #3
 800ddb2:	f200 80c9 	bhi.w	800df48 <setDeviceState+0x1a4>
 800ddb6:	a201      	add	r2, pc, #4	@ (adr r2, 800ddbc <setDeviceState+0x18>)
 800ddb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddbc:	0800ddcd 	.word	0x0800ddcd
 800ddc0:	0800dded 	.word	0x0800dded
 800ddc4:	0800de0d 	.word	0x0800de0d
 800ddc8:	0800de2d 	.word	0x0800de2d
        case 0:
            gpio_led_port = TOUCH_LED1_GPIO_Port;
 800ddcc:	4b60      	ldr	r3, [pc, #384]	@ (800df50 <setDeviceState+0x1ac>)
 800ddce:	62fb      	str	r3, [r7, #44]	@ 0x2c
            gpio_relay_port = L_RELAY_1_GPIO_Port;
 800ddd0:	4b5f      	ldr	r3, [pc, #380]	@ (800df50 <setDeviceState+0x1ac>)
 800ddd2:	62bb      	str	r3, [r7, #40]	@ 0x28
            gpio_led_pin = TOUCH_LED1_Pin;
 800ddd4:	2308      	movs	r3, #8
 800ddd6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            gpio_relay_pin = L_RELAY_1_Pin;
 800ddd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dddc:	84bb      	strh	r3, [r7, #36]	@ 0x24
            sprintf(deviceItem, "device1");
 800ddde:	f107 030c 	add.w	r3, r7, #12
 800dde2:	495c      	ldr	r1, [pc, #368]	@ (800df54 <setDeviceState+0x1b0>)
 800dde4:	4618      	mov	r0, r3
 800dde6:	f00a fa45 	bl	8018274 <siprintf>
            break;
 800ddea:	e02f      	b.n	800de4c <setDeviceState+0xa8>
        case 1:
            gpio_led_port = TOUCH_LED2_GPIO_Port;
 800ddec:	4b58      	ldr	r3, [pc, #352]	@ (800df50 <setDeviceState+0x1ac>)
 800ddee:	62fb      	str	r3, [r7, #44]	@ 0x2c
            gpio_relay_port = L_RELAY_2_GPIO_Port;
 800ddf0:	4b57      	ldr	r3, [pc, #348]	@ (800df50 <setDeviceState+0x1ac>)
 800ddf2:	62bb      	str	r3, [r7, #40]	@ 0x28
            gpio_led_pin = TOUCH_LED2_Pin;
 800ddf4:	2304      	movs	r3, #4
 800ddf6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            gpio_relay_pin = L_RELAY_2_Pin;
 800ddf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ddfc:	84bb      	strh	r3, [r7, #36]	@ 0x24
            sprintf(deviceItem, "device2");
 800ddfe:	f107 030c 	add.w	r3, r7, #12
 800de02:	4955      	ldr	r1, [pc, #340]	@ (800df58 <setDeviceState+0x1b4>)
 800de04:	4618      	mov	r0, r3
 800de06:	f00a fa35 	bl	8018274 <siprintf>
            break;
 800de0a:	e01f      	b.n	800de4c <setDeviceState+0xa8>
        case 2:
            gpio_led_port = TOUCH_LED3_GPIO_Port;
 800de0c:	4b53      	ldr	r3, [pc, #332]	@ (800df5c <setDeviceState+0x1b8>)
 800de0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            gpio_relay_port = L_RELAY_3_GPIO_Port;
 800de10:	4b53      	ldr	r3, [pc, #332]	@ (800df60 <setDeviceState+0x1bc>)
 800de12:	62bb      	str	r3, [r7, #40]	@ 0x28
            gpio_led_pin = TOUCH_LED3_Pin;
 800de14:	2302      	movs	r3, #2
 800de16:	84fb      	strh	r3, [r7, #38]	@ 0x26
            gpio_relay_pin = L_RELAY_3_Pin;
 800de18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
            sprintf(deviceItem, "device3");
 800de1e:	f107 030c 	add.w	r3, r7, #12
 800de22:	4950      	ldr	r1, [pc, #320]	@ (800df64 <setDeviceState+0x1c0>)
 800de24:	4618      	mov	r0, r3
 800de26:	f00a fa25 	bl	8018274 <siprintf>
            break;
 800de2a:	e00f      	b.n	800de4c <setDeviceState+0xa8>
        case 3:
            gpio_led_port = TOUCH_LED4_GPIO_Port;
 800de2c:	4b4c      	ldr	r3, [pc, #304]	@ (800df60 <setDeviceState+0x1bc>)
 800de2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            gpio_relay_port = L_RELAY_4_GPIO_Port;
 800de30:	4b47      	ldr	r3, [pc, #284]	@ (800df50 <setDeviceState+0x1ac>)
 800de32:	62bb      	str	r3, [r7, #40]	@ 0x28
            gpio_led_pin = TOUCH_LED4_Pin;
 800de34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800de38:	84fb      	strh	r3, [r7, #38]	@ 0x26
            gpio_relay_pin = L_RELAY_4_Pin;
 800de3a:	2340      	movs	r3, #64	@ 0x40
 800de3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
            sprintf(deviceItem, "device4");
 800de3e:	f107 030c 	add.w	r3, r7, #12
 800de42:	4949      	ldr	r1, [pc, #292]	@ (800df68 <setDeviceState+0x1c4>)
 800de44:	4618      	mov	r0, r3
 800de46:	f00a fa15 	bl	8018274 <siprintf>
            break;
 800de4a:	bf00      	nop
        default:
            return;
    }

    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 800de4c:	4b47      	ldr	r3, [pc, #284]	@ (800df6c <setDeviceState+0x1c8>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2164      	movs	r1, #100	@ 0x64
 800de52:	4618      	mov	r0, r3
 800de54:	f006 f93e 	bl	80140d4 <xQueueSemaphoreTake>
 800de58:	4603      	mov	r3, r0
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d175      	bne.n	800df4a <setDeviceState+0x1a6>
		if (state) {
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d016      	beq.n	800de92 <setDeviceState+0xee>
			HAL_GPIO_WritePin(gpio_led_port, gpio_led_pin, GPIO_PIN_SET);
 800de64:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de66:	2201      	movs	r2, #1
 800de68:	4619      	mov	r1, r3
 800de6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de6c:	f002 fc42 	bl	80106f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gpio_relay_port, gpio_relay_pin, GPIO_PIN_SET);
 800de70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800de72:	2201      	movs	r2, #1
 800de74:	4619      	mov	r1, r3
 800de76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de78:	f002 fc3c 	bl	80106f4 <HAL_GPIO_WritePin>
			global_device_states[device] = 1;
 800de7c:	4a3c      	ldr	r2, [pc, #240]	@ (800df70 <setDeviceState+0x1cc>)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2101      	movs	r1, #1
 800de82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			device_states[device] = 1;
 800de86:	4a3b      	ldr	r2, [pc, #236]	@ (800df74 <setDeviceState+0x1d0>)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2101      	movs	r1, #1
 800de8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800de90:	e015      	b.n	800debe <setDeviceState+0x11a>
		} else {
			HAL_GPIO_WritePin(gpio_led_port, gpio_led_pin, GPIO_PIN_RESET);
 800de92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de94:	2200      	movs	r2, #0
 800de96:	4619      	mov	r1, r3
 800de98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de9a:	f002 fc2b 	bl	80106f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gpio_relay_port, gpio_relay_pin, GPIO_PIN_RESET);
 800de9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dea0:	2200      	movs	r2, #0
 800dea2:	4619      	mov	r1, r3
 800dea4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dea6:	f002 fc25 	bl	80106f4 <HAL_GPIO_WritePin>
			global_device_states[device] = 0;
 800deaa:	4a31      	ldr	r2, [pc, #196]	@ (800df70 <setDeviceState+0x1cc>)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2100      	movs	r1, #0
 800deb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			device_states[device] = 0;
 800deb4:	4a2f      	ldr	r2, [pc, #188]	@ (800df74 <setDeviceState+0x1d0>)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2100      	movs	r1, #0
 800deba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		xSemaphoreGive(deviceStateMutex);
 800debe:	4b2b      	ldr	r3, [pc, #172]	@ (800df6c <setDeviceState+0x1c8>)
 800dec0:	6818      	ldr	r0, [r3, #0]
 800dec2:	2300      	movs	r3, #0
 800dec4:	2200      	movs	r2, #0
 800dec6:	2100      	movs	r1, #0
 800dec8:	f005 fe72 	bl	8013bb0 <xQueueGenericSend>

		cJSON *resp = cJSON_CreateObject();
 800decc:	f7ff f920 	bl	800d110 <cJSON_CreateObject>
 800ded0:	6238      	str	r0, [r7, #32]
		cJSON_AddNumberToObject(resp, deviceItem, device_states[device]);
 800ded2:	4a28      	ldr	r2, [pc, #160]	@ (800df74 <setDeviceState+0x1d0>)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fa fb52 	bl	8008584 <__aeabi_i2d>
 800dee0:	f107 030c 	add.w	r3, r7, #12
 800dee4:	ec41 0b10 	vmov	d0, r0, r1
 800dee8:	4619      	mov	r1, r3
 800deea:	6a38      	ldr	r0, [r7, #32]
 800deec:	f7ff f8a2 	bl	800d034 <cJSON_AddNumberToObject>
		char *respStr = cJSON_PrintUnformatted(resp);
 800def0:	6a38      	ldr	r0, [r7, #32]
 800def2:	f7fe fa4d 	bl	800c390 <cJSON_PrintUnformatted>
 800def6:	61f8      	str	r0, [r7, #28]
		if (respStr)
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d014      	beq.n	800df28 <setDeviceState+0x184>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)respStr, strlen(respStr), HAL_MAX_DELAY);
 800defe:	69f8      	ldr	r0, [r7, #28]
 800df00:	f7fa f9e6 	bl	80082d0 <strlen>
 800df04:	4603      	mov	r3, r0
 800df06:	b29a      	uxth	r2, r3
 800df08:	f04f 33ff 	mov.w	r3, #4294967295
 800df0c:	69f9      	ldr	r1, [r7, #28]
 800df0e:	481a      	ldr	r0, [pc, #104]	@ (800df78 <setDeviceState+0x1d4>)
 800df10:	f004 fc26 	bl	8012760 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800df14:	f04f 33ff 	mov.w	r3, #4294967295
 800df18:	2201      	movs	r2, #1
 800df1a:	4918      	ldr	r1, [pc, #96]	@ (800df7c <setDeviceState+0x1d8>)
 800df1c:	4816      	ldr	r0, [pc, #88]	@ (800df78 <setDeviceState+0x1d4>)
 800df1e:	f004 fc1f 	bl	8012760 <HAL_UART_Transmit>
			free(respStr);
 800df22:	69f8      	ldr	r0, [r7, #28]
 800df24:	f008 fd5e 	bl	80169e4 <free>
		}
		cJSON_Delete(resp);
 800df28:	6a38      	ldr	r0, [r7, #32]
 800df2a:	f7fd f983 	bl	800b234 <cJSON_Delete>

		safe_printf("DISPLAY: Device %d set to %s\n", device + 1, state ? "ON" : "OFF");
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	1c59      	adds	r1, r3, #1
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d001      	beq.n	800df3c <setDeviceState+0x198>
 800df38:	4b11      	ldr	r3, [pc, #68]	@ (800df80 <setDeviceState+0x1dc>)
 800df3a:	e000      	b.n	800df3e <setDeviceState+0x19a>
 800df3c:	4b11      	ldr	r3, [pc, #68]	@ (800df84 <setDeviceState+0x1e0>)
 800df3e:	461a      	mov	r2, r3
 800df40:	4811      	ldr	r0, [pc, #68]	@ (800df88 <setDeviceState+0x1e4>)
 800df42:	f001 ffe9 	bl	800ff18 <safe_printf>
 800df46:	e000      	b.n	800df4a <setDeviceState+0x1a6>
            return;
 800df48:	bf00      	nop
	}
}
 800df4a:	3730      	adds	r7, #48	@ 0x30
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	40020800 	.word	0x40020800
 800df54:	0801b9e0 	.word	0x0801b9e0
 800df58:	0801b9e8 	.word	0x0801b9e8
 800df5c:	40021c00 	.word	0x40021c00
 800df60:	40020400 	.word	0x40020400
 800df64:	0801b9f0 	.word	0x0801b9f0
 800df68:	0801b9f8 	.word	0x0801b9f8
 800df6c:	20001310 	.word	0x20001310
 800df70:	200014d4 	.word	0x200014d4
 800df74:	20000e14 	.word	0x20000e14
 800df78:	200010f0 	.word	0x200010f0
 800df7c:	0801ba00 	.word	0x0801ba00
 800df80:	0801b920 	.word	0x0801b920
 800df84:	0801b924 	.word	0x0801b924
 800df88:	0801ba04 	.word	0x0801ba04

0800df8c <setAllDevicesState>:

void setAllDevicesState(int state) {
 800df8c:	b590      	push	{r4, r7, lr}
 800df8e:	b08d      	sub	sp, #52	@ 0x34
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
	const char *devices[] = {"device1", "device2", "device3", "device4"};
 800df94:	4b70      	ldr	r3, [pc, #448]	@ (800e158 <setAllDevicesState+0x1cc>)
 800df96:	f107 0408 	add.w	r4, r7, #8
 800df9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	cJSON *resp = cJSON_CreateObject();
 800dfa0:	f7ff f8b6 	bl	800d110 <cJSON_CreateObject>
 800dfa4:	61f8      	str	r0, [r7, #28]
    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 800dfa6:	4b6d      	ldr	r3, [pc, #436]	@ (800e15c <setAllDevicesState+0x1d0>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2164      	movs	r1, #100	@ 0x64
 800dfac:	4618      	mov	r0, r3
 800dfae:	f006 f891 	bl	80140d4 <xQueueSemaphoreTake>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	2b01      	cmp	r3, #1
 800dfb6:	f040 80ca 	bne.w	800e14e <setAllDevicesState+0x1c2>
        for (int i = 0; i < 4; i++) {
 800dfba:	2300      	movs	r3, #0
 800dfbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dfbe:	e092      	b.n	800e0e6 <setAllDevicesState+0x15a>
        	GPIO_TypeDef* gpio_led_port;
        	GPIO_TypeDef *gpio_relay_port;
			uint16_t gpio_led_pin, gpio_relay_pin;

            switch(i) {
 800dfc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc2:	2b03      	cmp	r3, #3
 800dfc4:	d832      	bhi.n	800e02c <setAllDevicesState+0xa0>
 800dfc6:	a201      	add	r2, pc, #4	@ (adr r2, 800dfcc <setAllDevicesState+0x40>)
 800dfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfcc:	0800dfdd 	.word	0x0800dfdd
 800dfd0:	0800dff1 	.word	0x0800dff1
 800dfd4:	0800e005 	.word	0x0800e005
 800dfd8:	0800e019 	.word	0x0800e019
                case 0:
                	gpio_led_port = TOUCH_LED1_GPIO_Port;
 800dfdc:	4b60      	ldr	r3, [pc, #384]	@ (800e160 <setAllDevicesState+0x1d4>)
 800dfde:	62bb      	str	r3, [r7, #40]	@ 0x28
					gpio_relay_port = L_RELAY_1_GPIO_Port;
 800dfe0:	4b5f      	ldr	r3, [pc, #380]	@ (800e160 <setAllDevicesState+0x1d4>)
 800dfe2:	627b      	str	r3, [r7, #36]	@ 0x24
					gpio_led_pin = TOUCH_LED1_Pin;
 800dfe4:	2308      	movs	r3, #8
 800dfe6:	847b      	strh	r3, [r7, #34]	@ 0x22
					gpio_relay_pin = L_RELAY_1_Pin;
 800dfe8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dfec:	843b      	strh	r3, [r7, #32]
                    break;
 800dfee:	e01d      	b.n	800e02c <setAllDevicesState+0xa0>
                case 1:
                	gpio_led_port = TOUCH_LED2_GPIO_Port;
 800dff0:	4b5b      	ldr	r3, [pc, #364]	@ (800e160 <setAllDevicesState+0x1d4>)
 800dff2:	62bb      	str	r3, [r7, #40]	@ 0x28
					gpio_relay_port = L_RELAY_2_GPIO_Port;
 800dff4:	4b5a      	ldr	r3, [pc, #360]	@ (800e160 <setAllDevicesState+0x1d4>)
 800dff6:	627b      	str	r3, [r7, #36]	@ 0x24
					gpio_led_pin = TOUCH_LED2_Pin;
 800dff8:	2304      	movs	r3, #4
 800dffa:	847b      	strh	r3, [r7, #34]	@ 0x22
					gpio_relay_pin = L_RELAY_2_Pin;
 800dffc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e000:	843b      	strh	r3, [r7, #32]
                    break;
 800e002:	e013      	b.n	800e02c <setAllDevicesState+0xa0>
                case 2:
                	gpio_led_port = TOUCH_LED3_GPIO_Port;
 800e004:	4b57      	ldr	r3, [pc, #348]	@ (800e164 <setAllDevicesState+0x1d8>)
 800e006:	62bb      	str	r3, [r7, #40]	@ 0x28
					gpio_relay_port = L_RELAY_3_GPIO_Port;
 800e008:	4b57      	ldr	r3, [pc, #348]	@ (800e168 <setAllDevicesState+0x1dc>)
 800e00a:	627b      	str	r3, [r7, #36]	@ 0x24
					gpio_led_pin = TOUCH_LED3_Pin;
 800e00c:	2302      	movs	r3, #2
 800e00e:	847b      	strh	r3, [r7, #34]	@ 0x22
					gpio_relay_pin = L_RELAY_3_Pin;
 800e010:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e014:	843b      	strh	r3, [r7, #32]
                    break;
 800e016:	e009      	b.n	800e02c <setAllDevicesState+0xa0>
                case 3:
                	gpio_led_port = TOUCH_LED4_GPIO_Port;
 800e018:	4b53      	ldr	r3, [pc, #332]	@ (800e168 <setAllDevicesState+0x1dc>)
 800e01a:	62bb      	str	r3, [r7, #40]	@ 0x28
					gpio_relay_port = L_RELAY_4_GPIO_Port;
 800e01c:	4b50      	ldr	r3, [pc, #320]	@ (800e160 <setAllDevicesState+0x1d4>)
 800e01e:	627b      	str	r3, [r7, #36]	@ 0x24
					gpio_led_pin = TOUCH_LED4_Pin;
 800e020:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e024:	847b      	strh	r3, [r7, #34]	@ 0x22
					gpio_relay_pin = L_RELAY_4_Pin;
 800e026:	2340      	movs	r3, #64	@ 0x40
 800e028:	843b      	strh	r3, [r7, #32]
                    break;
 800e02a:	bf00      	nop
            }

            if (state) {
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d02b      	beq.n	800e08a <setAllDevicesState+0xfe>
            	HAL_GPIO_WritePin(gpio_led_port, gpio_led_pin, GPIO_PIN_SET);
 800e032:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e034:	2201      	movs	r2, #1
 800e036:	4619      	mov	r1, r3
 800e038:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e03a:	f002 fb5b 	bl	80106f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(gpio_relay_port, gpio_relay_pin, GPIO_PIN_SET);
 800e03e:	8c3b      	ldrh	r3, [r7, #32]
 800e040:	2201      	movs	r2, #1
 800e042:	4619      	mov	r1, r3
 800e044:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e046:	f002 fb55 	bl	80106f4 <HAL_GPIO_WritePin>
                global_device_states[i] = 1;
 800e04a:	4a48      	ldr	r2, [pc, #288]	@ (800e16c <setAllDevicesState+0x1e0>)
 800e04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e04e:	2101      	movs	r1, #1
 800e050:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                device_states[i] = 1;
 800e054:	4a46      	ldr	r2, [pc, #280]	@ (800e170 <setAllDevicesState+0x1e4>)
 800e056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e058:	2101      	movs	r1, #1
 800e05a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                cJSON_AddNumberToObject(resp, devices[i], device_states[i]);
 800e05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e060:	009b      	lsls	r3, r3, #2
 800e062:	3330      	adds	r3, #48	@ 0x30
 800e064:	443b      	add	r3, r7
 800e066:	f853 4c28 	ldr.w	r4, [r3, #-40]
 800e06a:	4a41      	ldr	r2, [pc, #260]	@ (800e170 <setAllDevicesState+0x1e4>)
 800e06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e06e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e072:	4618      	mov	r0, r3
 800e074:	f7fa fa86 	bl	8008584 <__aeabi_i2d>
 800e078:	4602      	mov	r2, r0
 800e07a:	460b      	mov	r3, r1
 800e07c:	ec43 2b10 	vmov	d0, r2, r3
 800e080:	4621      	mov	r1, r4
 800e082:	69f8      	ldr	r0, [r7, #28]
 800e084:	f7fe ffd6 	bl	800d034 <cJSON_AddNumberToObject>
 800e088:	e02a      	b.n	800e0e0 <setAllDevicesState+0x154>
            } else {
            	HAL_GPIO_WritePin(gpio_led_port, gpio_led_pin, GPIO_PIN_RESET);
 800e08a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e08c:	2200      	movs	r2, #0
 800e08e:	4619      	mov	r1, r3
 800e090:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e092:	f002 fb2f 	bl	80106f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(gpio_relay_port, gpio_relay_pin, GPIO_PIN_RESET);
 800e096:	8c3b      	ldrh	r3, [r7, #32]
 800e098:	2200      	movs	r2, #0
 800e09a:	4619      	mov	r1, r3
 800e09c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e09e:	f002 fb29 	bl	80106f4 <HAL_GPIO_WritePin>
                global_device_states[i] = 0;
 800e0a2:	4a32      	ldr	r2, [pc, #200]	@ (800e16c <setAllDevicesState+0x1e0>)
 800e0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a6:	2100      	movs	r1, #0
 800e0a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                device_states[i] = 0;
 800e0ac:	4a30      	ldr	r2, [pc, #192]	@ (800e170 <setAllDevicesState+0x1e4>)
 800e0ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0b0:	2100      	movs	r1, #0
 800e0b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                cJSON_AddNumberToObject(resp, devices[i], device_states[i]);
 800e0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0b8:	009b      	lsls	r3, r3, #2
 800e0ba:	3330      	adds	r3, #48	@ 0x30
 800e0bc:	443b      	add	r3, r7
 800e0be:	f853 4c28 	ldr.w	r4, [r3, #-40]
 800e0c2:	4a2b      	ldr	r2, [pc, #172]	@ (800e170 <setAllDevicesState+0x1e4>)
 800e0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7fa fa5a 	bl	8008584 <__aeabi_i2d>
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	460b      	mov	r3, r1
 800e0d4:	ec43 2b10 	vmov	d0, r2, r3
 800e0d8:	4621      	mov	r1, r4
 800e0da:	69f8      	ldr	r0, [r7, #28]
 800e0dc:	f7fe ffaa 	bl	800d034 <cJSON_AddNumberToObject>
        for (int i = 0; i < 4; i++) {
 800e0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0e8:	2b03      	cmp	r3, #3
 800e0ea:	f77f af69 	ble.w	800dfc0 <setAllDevicesState+0x34>
            }
        }

        xSemaphoreGive(deviceStateMutex);
 800e0ee:	4b1b      	ldr	r3, [pc, #108]	@ (800e15c <setAllDevicesState+0x1d0>)
 800e0f0:	6818      	ldr	r0, [r3, #0]
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	2100      	movs	r1, #0
 800e0f8:	f005 fd5a 	bl	8013bb0 <xQueueGenericSend>

        char *respStr = cJSON_PrintUnformatted(resp);
 800e0fc:	69f8      	ldr	r0, [r7, #28]
 800e0fe:	f7fe f947 	bl	800c390 <cJSON_PrintUnformatted>
 800e102:	61b8      	str	r0, [r7, #24]
		if (respStr)
 800e104:	69bb      	ldr	r3, [r7, #24]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d014      	beq.n	800e134 <setAllDevicesState+0x1a8>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)respStr, strlen(respStr), HAL_MAX_DELAY);
 800e10a:	69b8      	ldr	r0, [r7, #24]
 800e10c:	f7fa f8e0 	bl	80082d0 <strlen>
 800e110:	4603      	mov	r3, r0
 800e112:	b29a      	uxth	r2, r3
 800e114:	f04f 33ff 	mov.w	r3, #4294967295
 800e118:	69b9      	ldr	r1, [r7, #24]
 800e11a:	4816      	ldr	r0, [pc, #88]	@ (800e174 <setAllDevicesState+0x1e8>)
 800e11c:	f004 fb20 	bl	8012760 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800e120:	f04f 33ff 	mov.w	r3, #4294967295
 800e124:	2201      	movs	r2, #1
 800e126:	4914      	ldr	r1, [pc, #80]	@ (800e178 <setAllDevicesState+0x1ec>)
 800e128:	4812      	ldr	r0, [pc, #72]	@ (800e174 <setAllDevicesState+0x1e8>)
 800e12a:	f004 fb19 	bl	8012760 <HAL_UART_Transmit>
			free(respStr);
 800e12e:	69b8      	ldr	r0, [r7, #24]
 800e130:	f008 fc58 	bl	80169e4 <free>
		}
		cJSON_Delete(resp);
 800e134:	69f8      	ldr	r0, [r7, #28]
 800e136:	f7fd f87d 	bl	800b234 <cJSON_Delete>

        safe_printf("DISPLAY: All devices set to %s\n", state ? "ON" : "OFF");
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d001      	beq.n	800e144 <setAllDevicesState+0x1b8>
 800e140:	4b0e      	ldr	r3, [pc, #56]	@ (800e17c <setAllDevicesState+0x1f0>)
 800e142:	e000      	b.n	800e146 <setAllDevicesState+0x1ba>
 800e144:	4b0e      	ldr	r3, [pc, #56]	@ (800e180 <setAllDevicesState+0x1f4>)
 800e146:	4619      	mov	r1, r3
 800e148:	480e      	ldr	r0, [pc, #56]	@ (800e184 <setAllDevicesState+0x1f8>)
 800e14a:	f001 fee5 	bl	800ff18 <safe_printf>
    }
}
 800e14e:	bf00      	nop
 800e150:	3734      	adds	r7, #52	@ 0x34
 800e152:	46bd      	mov	sp, r7
 800e154:	bd90      	pop	{r4, r7, pc}
 800e156:	bf00      	nop
 800e158:	0801ba44 	.word	0x0801ba44
 800e15c:	20001310 	.word	0x20001310
 800e160:	40020800 	.word	0x40020800
 800e164:	40021c00 	.word	0x40021c00
 800e168:	40020400 	.word	0x40020400
 800e16c:	200014d4 	.word	0x200014d4
 800e170:	20000e14 	.word	0x20000e14
 800e174:	200010f0 	.word	0x200010f0
 800e178:	0801ba00 	.word	0x0801ba00
 800e17c:	0801b920 	.word	0x0801b920
 800e180:	0801b924 	.word	0x0801b924
 800e184:	0801ba24 	.word	0x0801ba24

0800e188 <syncDisplayDeviceStates>:

void syncDisplayDeviceStates(void) {
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(10)) == pdTRUE) {
 800e18e:	4b12      	ldr	r3, [pc, #72]	@ (800e1d8 <syncDisplayDeviceStates+0x50>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	210a      	movs	r1, #10
 800e194:	4618      	mov	r0, r3
 800e196:	f005 ff9d 	bl	80140d4 <xQueueSemaphoreTake>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d117      	bne.n	800e1d0 <syncDisplayDeviceStates+0x48>
        for (int i = 0; i < 4; i++) {
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	607b      	str	r3, [r7, #4]
 800e1a4:	e00a      	b.n	800e1bc <syncDisplayDeviceStates+0x34>
            device_states[i] = global_device_states[i];
 800e1a6:	4a0d      	ldr	r2, [pc, #52]	@ (800e1dc <syncDisplayDeviceStates+0x54>)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e1ae:	490c      	ldr	r1, [pc, #48]	@ (800e1e0 <syncDisplayDeviceStates+0x58>)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < 4; i++) {
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	607b      	str	r3, [r7, #4]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2b03      	cmp	r3, #3
 800e1c0:	ddf1      	ble.n	800e1a6 <syncDisplayDeviceStates+0x1e>
        }
        xSemaphoreGive(deviceStateMutex);
 800e1c2:	4b05      	ldr	r3, [pc, #20]	@ (800e1d8 <syncDisplayDeviceStates+0x50>)
 800e1c4:	6818      	ldr	r0, [r3, #0]
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	2100      	movs	r1, #0
 800e1cc:	f005 fcf0 	bl	8013bb0 <xQueueGenericSend>
    }
}
 800e1d0:	bf00      	nop
 800e1d2:	3708      	adds	r7, #8
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}
 800e1d8:	20001310 	.word	0x20001310
 800e1dc:	200014d4 	.word	0x200014d4
 800e1e0:	20000e14 	.word	0x20000e14

0800e1e4 <handleNavigation>:
    HAL_Delay(800);
    fillRect(MARGIN_X, DISPLAY_HEIGHT - 15, BUTTON_WIDTH, 12, BLACK);
}


void handleNavigation(void) {
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
    int max_options;

    switch(current_menu) {
 800e1ea:	4b96      	ldr	r3, [pc, #600]	@ (800e444 <handleNavigation+0x260>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2b03      	cmp	r3, #3
 800e1f0:	d816      	bhi.n	800e220 <handleNavigation+0x3c>
 800e1f2:	a201      	add	r2, pc, #4	@ (adr r2, 800e1f8 <handleNavigation+0x14>)
 800e1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f8:	0800e209 	.word	0x0800e209
 800e1fc:	0800e20f 	.word	0x0800e20f
 800e200:	0800e215 	.word	0x0800e215
 800e204:	0800e21b 	.word	0x0800e21b
        case MENU_MAIN:
            max_options = MAIN_MENU_OPTIONS;
 800e208:	2302      	movs	r3, #2
 800e20a:	60fb      	str	r3, [r7, #12]
            break;
 800e20c:	e00b      	b.n	800e226 <handleNavigation+0x42>
        case MENU_TOTAL_CONTROL:
            max_options = TOTAL_CONTROL_OPTIONS;
 800e20e:	2303      	movs	r3, #3
 800e210:	60fb      	str	r3, [r7, #12]
            break;
 800e212:	e008      	b.n	800e226 <handleNavigation+0x42>
        case MENU_SEPARATE_CONTROL:
            max_options = SEPARATE_CONTROL_OPTIONS;
 800e214:	2305      	movs	r3, #5
 800e216:	60fb      	str	r3, [r7, #12]
            break;
 800e218:	e005      	b.n	800e226 <handleNavigation+0x42>
        case MENU_DEVICE_CONTROL:
            max_options = DEVICE_CONTROL_OPTIONS;
 800e21a:	2304      	movs	r3, #4
 800e21c:	60fb      	str	r3, [r7, #12]
            break;
 800e21e:	e002      	b.n	800e226 <handleNavigation+0x42>
        default:
            max_options = 2;
 800e220:	2302      	movs	r3, #2
 800e222:	60fb      	str	r3, [r7, #12]
            break;
 800e224:	bf00      	nop
    }

    if (upbutton) {
 800e226:	4b88      	ldr	r3, [pc, #544]	@ (800e448 <handleNavigation+0x264>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d052      	beq.n	800e2d4 <handleNavigation+0xf0>
        HAL_Delay(200);
 800e22e:	20c8      	movs	r0, #200	@ 0xc8
 800e230:	f001 ff1c 	bl	801006c <HAL_Delay>
        int old_selection = current_selection;
 800e234:	4b85      	ldr	r3, [pc, #532]	@ (800e44c <handleNavigation+0x268>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	60bb      	str	r3, [r7, #8]
        current_selection = (current_selection - 1 + max_options) % max_options;
 800e23a:	4b84      	ldr	r3, [pc, #528]	@ (800e44c <handleNavigation+0x268>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	1e5a      	subs	r2, r3, #1
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	4413      	add	r3, r2
 800e244:	68fa      	ldr	r2, [r7, #12]
 800e246:	fb93 f2f2 	sdiv	r2, r3, r2
 800e24a:	68f9      	ldr	r1, [r7, #12]
 800e24c:	fb01 f202 	mul.w	r2, r1, r2
 800e250:	1a9b      	subs	r3, r3, r2
 800e252:	4a7e      	ldr	r2, [pc, #504]	@ (800e44c <handleNavigation+0x268>)
 800e254:	6013      	str	r3, [r2, #0]
        upbutton = 0;
 800e256:	4b7c      	ldr	r3, [pc, #496]	@ (800e448 <handleNavigation+0x264>)
 800e258:	2200      	movs	r2, #0
 800e25a:	601a      	str	r2, [r3, #0]

        // Quick highlight update instead of full redraw
        switch(current_menu) {
 800e25c:	4b79      	ldr	r3, [pc, #484]	@ (800e444 <handleNavigation+0x260>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2b03      	cmp	r3, #3
 800e262:	d837      	bhi.n	800e2d4 <handleNavigation+0xf0>
 800e264:	a201      	add	r2, pc, #4	@ (adr r2, 800e26c <handleNavigation+0x88>)
 800e266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e26a:	bf00      	nop
 800e26c:	0800e27d 	.word	0x0800e27d
 800e270:	0800e293 	.word	0x0800e293
 800e274:	0800e2a9 	.word	0x0800e2a9
 800e278:	0800e2bf 	.word	0x0800e2bf
            case MENU_MAIN:
                updateButtonSelection(old_selection, current_selection);
 800e27c:	4b73      	ldr	r3, [pc, #460]	@ (800e44c <handleNavigation+0x268>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4619      	mov	r1, r3
 800e282:	68b8      	ldr	r0, [r7, #8]
 800e284:	f7ff f8ac 	bl	800d3e0 <updateButtonSelection>
                last_selection = current_selection;
 800e288:	4b70      	ldr	r3, [pc, #448]	@ (800e44c <handleNavigation+0x268>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4a70      	ldr	r2, [pc, #448]	@ (800e450 <handleNavigation+0x26c>)
 800e28e:	6013      	str	r3, [r2, #0]
                break;
 800e290:	e020      	b.n	800e2d4 <handleNavigation+0xf0>
            case MENU_TOTAL_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 800e292:	4b6e      	ldr	r3, [pc, #440]	@ (800e44c <handleNavigation+0x268>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4619      	mov	r1, r3
 800e298:	68b8      	ldr	r0, [r7, #8]
 800e29a:	f7ff f8a1 	bl	800d3e0 <updateButtonSelection>
                last_selection = current_selection;
 800e29e:	4b6b      	ldr	r3, [pc, #428]	@ (800e44c <handleNavigation+0x268>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	4a6b      	ldr	r2, [pc, #428]	@ (800e450 <handleNavigation+0x26c>)
 800e2a4:	6013      	str	r3, [r2, #0]
                break;
 800e2a6:	e015      	b.n	800e2d4 <handleNavigation+0xf0>
            case MENU_SEPARATE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 800e2a8:	4b68      	ldr	r3, [pc, #416]	@ (800e44c <handleNavigation+0x268>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	68b8      	ldr	r0, [r7, #8]
 800e2b0:	f7ff f896 	bl	800d3e0 <updateButtonSelection>
                last_selection = current_selection;
 800e2b4:	4b65      	ldr	r3, [pc, #404]	@ (800e44c <handleNavigation+0x268>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4a65      	ldr	r2, [pc, #404]	@ (800e450 <handleNavigation+0x26c>)
 800e2ba:	6013      	str	r3, [r2, #0]
                break;
 800e2bc:	e00a      	b.n	800e2d4 <handleNavigation+0xf0>
            case MENU_DEVICE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 800e2be:	4b63      	ldr	r3, [pc, #396]	@ (800e44c <handleNavigation+0x268>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	68b8      	ldr	r0, [r7, #8]
 800e2c6:	f7ff f88b 	bl	800d3e0 <updateButtonSelection>
                last_selection = current_selection;
 800e2ca:	4b60      	ldr	r3, [pc, #384]	@ (800e44c <handleNavigation+0x268>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	4a60      	ldr	r2, [pc, #384]	@ (800e450 <handleNavigation+0x26c>)
 800e2d0:	6013      	str	r3, [r2, #0]
                break;
 800e2d2:	bf00      	nop
        }
    }

    if (downbutton) {
 800e2d4:	4b5f      	ldr	r3, [pc, #380]	@ (800e454 <handleNavigation+0x270>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d04f      	beq.n	800e37c <handleNavigation+0x198>
        HAL_Delay(200);
 800e2dc:	20c8      	movs	r0, #200	@ 0xc8
 800e2de:	f001 fec5 	bl	801006c <HAL_Delay>
        int old_selection = current_selection;
 800e2e2:	4b5a      	ldr	r3, [pc, #360]	@ (800e44c <handleNavigation+0x268>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	607b      	str	r3, [r7, #4]
        current_selection = (current_selection + 1) % max_options;
 800e2e8:	4b58      	ldr	r3, [pc, #352]	@ (800e44c <handleNavigation+0x268>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	68fa      	ldr	r2, [r7, #12]
 800e2f0:	fb93 f2f2 	sdiv	r2, r3, r2
 800e2f4:	68f9      	ldr	r1, [r7, #12]
 800e2f6:	fb01 f202 	mul.w	r2, r1, r2
 800e2fa:	1a9b      	subs	r3, r3, r2
 800e2fc:	4a53      	ldr	r2, [pc, #332]	@ (800e44c <handleNavigation+0x268>)
 800e2fe:	6013      	str	r3, [r2, #0]
        downbutton = 0;
 800e300:	4b54      	ldr	r3, [pc, #336]	@ (800e454 <handleNavigation+0x270>)
 800e302:	2200      	movs	r2, #0
 800e304:	601a      	str	r2, [r3, #0]

        switch(current_menu) {
 800e306:	4b4f      	ldr	r3, [pc, #316]	@ (800e444 <handleNavigation+0x260>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2b03      	cmp	r3, #3
 800e30c:	d836      	bhi.n	800e37c <handleNavigation+0x198>
 800e30e:	a201      	add	r2, pc, #4	@ (adr r2, 800e314 <handleNavigation+0x130>)
 800e310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e314:	0800e325 	.word	0x0800e325
 800e318:	0800e33b 	.word	0x0800e33b
 800e31c:	0800e351 	.word	0x0800e351
 800e320:	0800e367 	.word	0x0800e367
            case MENU_MAIN:
                updateButtonSelection(old_selection, current_selection);
 800e324:	4b49      	ldr	r3, [pc, #292]	@ (800e44c <handleNavigation+0x268>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4619      	mov	r1, r3
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f7ff f858 	bl	800d3e0 <updateButtonSelection>
                last_selection = current_selection;
 800e330:	4b46      	ldr	r3, [pc, #280]	@ (800e44c <handleNavigation+0x268>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	4a46      	ldr	r2, [pc, #280]	@ (800e450 <handleNavigation+0x26c>)
 800e336:	6013      	str	r3, [r2, #0]
                break;
 800e338:	e020      	b.n	800e37c <handleNavigation+0x198>
            case MENU_TOTAL_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 800e33a:	4b44      	ldr	r3, [pc, #272]	@ (800e44c <handleNavigation+0x268>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	4619      	mov	r1, r3
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f7ff f84d 	bl	800d3e0 <updateButtonSelection>
                last_selection = current_selection;
 800e346:	4b41      	ldr	r3, [pc, #260]	@ (800e44c <handleNavigation+0x268>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4a41      	ldr	r2, [pc, #260]	@ (800e450 <handleNavigation+0x26c>)
 800e34c:	6013      	str	r3, [r2, #0]
                break;
 800e34e:	e015      	b.n	800e37c <handleNavigation+0x198>
            case MENU_SEPARATE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 800e350:	4b3e      	ldr	r3, [pc, #248]	@ (800e44c <handleNavigation+0x268>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4619      	mov	r1, r3
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f7ff f842 	bl	800d3e0 <updateButtonSelection>
                last_selection = current_selection;
 800e35c:	4b3b      	ldr	r3, [pc, #236]	@ (800e44c <handleNavigation+0x268>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4a3b      	ldr	r2, [pc, #236]	@ (800e450 <handleNavigation+0x26c>)
 800e362:	6013      	str	r3, [r2, #0]
                break;
 800e364:	e00a      	b.n	800e37c <handleNavigation+0x198>
            case MENU_DEVICE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 800e366:	4b39      	ldr	r3, [pc, #228]	@ (800e44c <handleNavigation+0x268>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	4619      	mov	r1, r3
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f7ff f837 	bl	800d3e0 <updateButtonSelection>
                last_selection = current_selection;
 800e372:	4b36      	ldr	r3, [pc, #216]	@ (800e44c <handleNavigation+0x268>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	4a36      	ldr	r2, [pc, #216]	@ (800e450 <handleNavigation+0x26c>)
 800e378:	6013      	str	r3, [r2, #0]
                break;
 800e37a:	bf00      	nop
        }
    }

    if (enter) {
 800e37c:	4b36      	ldr	r3, [pc, #216]	@ (800e458 <handleNavigation+0x274>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	2b00      	cmp	r3, #0
 800e382:	f000 80df 	beq.w	800e544 <handleNavigation+0x360>
        HAL_Delay(200);
 800e386:	20c8      	movs	r0, #200	@ 0xc8
 800e388:	f001 fe70 	bl	801006c <HAL_Delay>
        enter = 0;
 800e38c:	4b32      	ldr	r3, [pc, #200]	@ (800e458 <handleNavigation+0x274>)
 800e38e:	2200      	movs	r2, #0
 800e390:	601a      	str	r2, [r3, #0]

        switch(current_menu) {
 800e392:	4b2c      	ldr	r3, [pc, #176]	@ (800e444 <handleNavigation+0x260>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2b03      	cmp	r3, #3
 800e398:	f200 80d4 	bhi.w	800e544 <handleNavigation+0x360>
 800e39c:	a201      	add	r2, pc, #4	@ (adr r2, 800e3a4 <handleNavigation+0x1c0>)
 800e39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3a2:	bf00      	nop
 800e3a4:	0800e3b5 	.word	0x0800e3b5
 800e3a8:	0800e3f7 	.word	0x0800e3f7
 800e3ac:	0800e461 	.word	0x0800e461
 800e3b0:	0800e4bd 	.word	0x0800e4bd
            case MENU_MAIN:
                if (current_selection == 0) {
 800e3b4:	4b25      	ldr	r3, [pc, #148]	@ (800e44c <handleNavigation+0x268>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d10b      	bne.n	800e3d4 <handleNavigation+0x1f0>
                    current_menu = MENU_TOTAL_CONTROL;
 800e3bc:	4b21      	ldr	r3, [pc, #132]	@ (800e444 <handleNavigation+0x260>)
 800e3be:	2201      	movs	r2, #1
 800e3c0:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800e3c2:	4b22      	ldr	r3, [pc, #136]	@ (800e44c <handleNavigation+0x268>)
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 800e3c8:	4b24      	ldr	r3, [pc, #144]	@ (800e45c <handleNavigation+0x278>)
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	701a      	strb	r2, [r3, #0]
                    displayTotalControlMenu();
 800e3ce:	f7ff fa39 	bl	800d844 <displayTotalControlMenu>
                    current_menu = MENU_SEPARATE_CONTROL;
                    current_selection = 0;
                    menu_drawn = false; // Force menu redraw
                    displaySeparateControlMenu();
                }
                break;
 800e3d2:	e0b0      	b.n	800e536 <handleNavigation+0x352>
                } else if (current_selection == 1) {
 800e3d4:	4b1d      	ldr	r3, [pc, #116]	@ (800e44c <handleNavigation+0x268>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	f040 80ac 	bne.w	800e536 <handleNavigation+0x352>
                    current_menu = MENU_SEPARATE_CONTROL;
 800e3de:	4b19      	ldr	r3, [pc, #100]	@ (800e444 <handleNavigation+0x260>)
 800e3e0:	2202      	movs	r2, #2
 800e3e2:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800e3e4:	4b19      	ldr	r3, [pc, #100]	@ (800e44c <handleNavigation+0x268>)
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 800e3ea:	4b1c      	ldr	r3, [pc, #112]	@ (800e45c <handleNavigation+0x278>)
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	701a      	strb	r2, [r3, #0]
                    displaySeparateControlMenu();
 800e3f0:	f7ff fb06 	bl	800da00 <displaySeparateControlMenu>
                break;
 800e3f4:	e09f      	b.n	800e536 <handleNavigation+0x352>

            case MENU_TOTAL_CONTROL:
                if (current_selection == 0) {
 800e3f6:	4b15      	ldr	r3, [pc, #84]	@ (800e44c <handleNavigation+0x268>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d103      	bne.n	800e406 <handleNavigation+0x222>
                    setAllDevicesState(1);
 800e3fe:	2001      	movs	r0, #1
 800e400:	f7ff fdc4 	bl	800df8c <setAllDevicesState>
                    menu_drawn = false; // Force menu redraw
                    displayOnwardsLogoOptimized();
                    HAL_Delay(600);
                    displayMainMenu();
                }
                break;
 800e404:	e099      	b.n	800e53a <handleNavigation+0x356>
                } else if (current_selection == 1) {
 800e406:	4b11      	ldr	r3, [pc, #68]	@ (800e44c <handleNavigation+0x268>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d103      	bne.n	800e416 <handleNavigation+0x232>
                    setAllDevicesState(0);
 800e40e:	2000      	movs	r0, #0
 800e410:	f7ff fdbc 	bl	800df8c <setAllDevicesState>
                break;
 800e414:	e091      	b.n	800e53a <handleNavigation+0x356>
                } else if (current_selection == 2) {
 800e416:	4b0d      	ldr	r3, [pc, #52]	@ (800e44c <handleNavigation+0x268>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2b02      	cmp	r3, #2
 800e41c:	f040 808d 	bne.w	800e53a <handleNavigation+0x356>
                    current_menu = MENU_MAIN;
 800e420:	4b08      	ldr	r3, [pc, #32]	@ (800e444 <handleNavigation+0x260>)
 800e422:	2200      	movs	r2, #0
 800e424:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800e426:	4b09      	ldr	r3, [pc, #36]	@ (800e44c <handleNavigation+0x268>)
 800e428:	2200      	movs	r2, #0
 800e42a:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 800e42c:	4b0b      	ldr	r3, [pc, #44]	@ (800e45c <handleNavigation+0x278>)
 800e42e:	2200      	movs	r2, #0
 800e430:	701a      	strb	r2, [r3, #0]
                    displayOnwardsLogoOptimized();
 800e432:	f7fc fe0b 	bl	800b04c <displayOnwardsLogoOptimized>
                    HAL_Delay(600);
 800e436:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800e43a:	f001 fe17 	bl	801006c <HAL_Delay>
                    displayMainMenu();
 800e43e:	f7ff f985 	bl	800d74c <displayMainMenu>
                break;
 800e442:	e07a      	b.n	800e53a <handleNavigation+0x356>
 800e444:	20000dfc 	.word	0x20000dfc
 800e448:	20000e0c 	.word	0x20000e0c
 800e44c:	20000e00 	.word	0x20000e00
 800e450:	2000001c 	.word	0x2000001c
 800e454:	20000e08 	.word	0x20000e08
 800e458:	20000e10 	.word	0x20000e10
 800e45c:	20000e24 	.word	0x20000e24

            case MENU_SEPARATE_CONTROL:
                if (current_selection >= 0 && current_selection <= 3) {
 800e460:	4b3a      	ldr	r3, [pc, #232]	@ (800e54c <handleNavigation+0x368>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	2b00      	cmp	r3, #0
 800e466:	db13      	blt.n	800e490 <handleNavigation+0x2ac>
 800e468:	4b38      	ldr	r3, [pc, #224]	@ (800e54c <handleNavigation+0x368>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b03      	cmp	r3, #3
 800e46e:	dc0f      	bgt.n	800e490 <handleNavigation+0x2ac>
                    current_device = current_selection;
 800e470:	4b36      	ldr	r3, [pc, #216]	@ (800e54c <handleNavigation+0x368>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4a36      	ldr	r2, [pc, #216]	@ (800e550 <handleNavigation+0x36c>)
 800e476:	6013      	str	r3, [r2, #0]
                    current_menu = MENU_DEVICE_CONTROL;
 800e478:	4b36      	ldr	r3, [pc, #216]	@ (800e554 <handleNavigation+0x370>)
 800e47a:	2203      	movs	r2, #3
 800e47c:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800e47e:	4b33      	ldr	r3, [pc, #204]	@ (800e54c <handleNavigation+0x368>)
 800e480:	2200      	movs	r2, #0
 800e482:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 800e484:	4b34      	ldr	r3, [pc, #208]	@ (800e558 <handleNavigation+0x374>)
 800e486:	2200      	movs	r2, #0
 800e488:	701a      	strb	r2, [r3, #0]
                    displayDeviceControlMenu();
 800e48a:	f7ff fb93 	bl	800dbb4 <displayDeviceControlMenu>
                    menu_drawn = false; // Force menu redraw
                    displayOnwardsLogoOptimized();
                    HAL_Delay(600);
                    displayMainMenu();
                }
                break;
 800e48e:	e056      	b.n	800e53e <handleNavigation+0x35a>
                } else if (current_selection == 4) {
 800e490:	4b2e      	ldr	r3, [pc, #184]	@ (800e54c <handleNavigation+0x368>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	2b04      	cmp	r3, #4
 800e496:	d152      	bne.n	800e53e <handleNavigation+0x35a>
                    current_menu = MENU_MAIN;
 800e498:	4b2e      	ldr	r3, [pc, #184]	@ (800e554 <handleNavigation+0x370>)
 800e49a:	2200      	movs	r2, #0
 800e49c:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800e49e:	4b2b      	ldr	r3, [pc, #172]	@ (800e54c <handleNavigation+0x368>)
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 800e4a4:	4b2c      	ldr	r3, [pc, #176]	@ (800e558 <handleNavigation+0x374>)
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	701a      	strb	r2, [r3, #0]
                    displayOnwardsLogoOptimized();
 800e4aa:	f7fc fdcf 	bl	800b04c <displayOnwardsLogoOptimized>
                    HAL_Delay(600);
 800e4ae:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800e4b2:	f001 fddb 	bl	801006c <HAL_Delay>
                    displayMainMenu();
 800e4b6:	f7ff f949 	bl	800d74c <displayMainMenu>
                break;
 800e4ba:	e040      	b.n	800e53e <handleNavigation+0x35a>

            case MENU_DEVICE_CONTROL:
                if (current_selection == 0) {
 800e4bc:	4b23      	ldr	r3, [pc, #140]	@ (800e54c <handleNavigation+0x368>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d106      	bne.n	800e4d2 <handleNavigation+0x2ee>
                    setDeviceState(current_device, 1);
 800e4c4:	4b22      	ldr	r3, [pc, #136]	@ (800e550 <handleNavigation+0x36c>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2101      	movs	r1, #1
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7ff fc6a 	bl	800dda4 <setDeviceState>
                    menu_drawn = false; // Force menu redraw
                    displayOnwardsLogoOptimized();
                    HAL_Delay(600);
                    displayMainMenu();
                }
                break;
 800e4d0:	e037      	b.n	800e542 <handleNavigation+0x35e>
                } else if (current_selection == 1) {
 800e4d2:	4b1e      	ldr	r3, [pc, #120]	@ (800e54c <handleNavigation+0x368>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d106      	bne.n	800e4e8 <handleNavigation+0x304>
                    setDeviceState(current_device, 0);
 800e4da:	4b1d      	ldr	r3, [pc, #116]	@ (800e550 <handleNavigation+0x36c>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2100      	movs	r1, #0
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7ff fc5f 	bl	800dda4 <setDeviceState>
                break;
 800e4e6:	e02c      	b.n	800e542 <handleNavigation+0x35e>
                } else if (current_selection == 2) {
 800e4e8:	4b18      	ldr	r3, [pc, #96]	@ (800e54c <handleNavigation+0x368>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	2b02      	cmp	r3, #2
 800e4ee:	d10c      	bne.n	800e50a <handleNavigation+0x326>
                    current_menu = MENU_SEPARATE_CONTROL;
 800e4f0:	4b18      	ldr	r3, [pc, #96]	@ (800e554 <handleNavigation+0x370>)
 800e4f2:	2202      	movs	r2, #2
 800e4f4:	601a      	str	r2, [r3, #0]
                    current_selection = current_device;
 800e4f6:	4b16      	ldr	r3, [pc, #88]	@ (800e550 <handleNavigation+0x36c>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	4a14      	ldr	r2, [pc, #80]	@ (800e54c <handleNavigation+0x368>)
 800e4fc:	6013      	str	r3, [r2, #0]
                    menu_drawn = false; // Force menu redraw
 800e4fe:	4b16      	ldr	r3, [pc, #88]	@ (800e558 <handleNavigation+0x374>)
 800e500:	2200      	movs	r2, #0
 800e502:	701a      	strb	r2, [r3, #0]
                    displaySeparateControlMenu();
 800e504:	f7ff fa7c 	bl	800da00 <displaySeparateControlMenu>
                break;
 800e508:	e01b      	b.n	800e542 <handleNavigation+0x35e>
                }else if (current_selection == 3) {
 800e50a:	4b10      	ldr	r3, [pc, #64]	@ (800e54c <handleNavigation+0x368>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b03      	cmp	r3, #3
 800e510:	d117      	bne.n	800e542 <handleNavigation+0x35e>
                    current_menu = MENU_MAIN;
 800e512:	4b10      	ldr	r3, [pc, #64]	@ (800e554 <handleNavigation+0x370>)
 800e514:	2200      	movs	r2, #0
 800e516:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800e518:	4b0c      	ldr	r3, [pc, #48]	@ (800e54c <handleNavigation+0x368>)
 800e51a:	2200      	movs	r2, #0
 800e51c:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 800e51e:	4b0e      	ldr	r3, [pc, #56]	@ (800e558 <handleNavigation+0x374>)
 800e520:	2200      	movs	r2, #0
 800e522:	701a      	strb	r2, [r3, #0]
                    displayOnwardsLogoOptimized();
 800e524:	f7fc fd92 	bl	800b04c <displayOnwardsLogoOptimized>
                    HAL_Delay(600);
 800e528:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800e52c:	f001 fd9e 	bl	801006c <HAL_Delay>
                    displayMainMenu();
 800e530:	f7ff f90c 	bl	800d74c <displayMainMenu>
                break;
 800e534:	e005      	b.n	800e542 <handleNavigation+0x35e>
                break;
 800e536:	bf00      	nop
 800e538:	e004      	b.n	800e544 <handleNavigation+0x360>
                break;
 800e53a:	bf00      	nop
 800e53c:	e002      	b.n	800e544 <handleNavigation+0x360>
                break;
 800e53e:	bf00      	nop
 800e540:	e000      	b.n	800e544 <handleNavigation+0x360>
                break;
 800e542:	bf00      	nop
        }
    }
}
 800e544:	bf00      	nop
 800e546:	3710      	adds	r7, #16
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}
 800e54c:	20000e00 	.word	0x20000e00
 800e550:	20000e04 	.word	0x20000e04
 800e554:	20000dfc 	.word	0x20000dfc
 800e558:	20000e24 	.word	0x20000e24

0800e55c <Menu_Handler>:


void Menu_Handler(void) {
 800e55c:	b580      	push	{r7, lr}
 800e55e:	af00      	add	r7, sp, #0
    switch(current_menu) {
 800e560:	4b0f      	ldr	r3, [pc, #60]	@ (800e5a0 <Menu_Handler+0x44>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	2b03      	cmp	r3, #3
 800e566:	d817      	bhi.n	800e598 <Menu_Handler+0x3c>
 800e568:	a201      	add	r2, pc, #4	@ (adr r2, 800e570 <Menu_Handler+0x14>)
 800e56a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e56e:	bf00      	nop
 800e570:	0800e581 	.word	0x0800e581
 800e574:	0800e587 	.word	0x0800e587
 800e578:	0800e58d 	.word	0x0800e58d
 800e57c:	0800e593 	.word	0x0800e593
        case MENU_MAIN:
            displayMainMenu();
 800e580:	f7ff f8e4 	bl	800d74c <displayMainMenu>
            break;
 800e584:	e008      	b.n	800e598 <Menu_Handler+0x3c>
        case MENU_TOTAL_CONTROL:
            displayTotalControlMenu();
 800e586:	f7ff f95d 	bl	800d844 <displayTotalControlMenu>
            break;
 800e58a:	e005      	b.n	800e598 <Menu_Handler+0x3c>
        case MENU_SEPARATE_CONTROL:
            displaySeparateControlMenu();
 800e58c:	f7ff fa38 	bl	800da00 <displaySeparateControlMenu>
            break;
 800e590:	e002      	b.n	800e598 <Menu_Handler+0x3c>
        case MENU_DEVICE_CONTROL:
            displayDeviceControlMenu();
 800e592:	f7ff fb0f 	bl	800dbb4 <displayDeviceControlMenu>
            break;
 800e596:	bf00      	nop
    }

    handleNavigation();
 800e598:	f7ff fe24 	bl	800e1e4 <handleNavigation>
}
 800e59c:	bf00      	nop
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	20000dfc 	.word	0x20000dfc

0800e5a4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800e5a4:	b480      	push	{r7}
 800e5a6:	b083      	sub	sp, #12
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_10) { // ENTER button
 800e5ae:	88fb      	ldrh	r3, [r7, #6]
 800e5b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e5b4:	d108      	bne.n	800e5c8 <HAL_GPIO_EXTI_Callback+0x24>
        downbutton = 0;
 800e5b6:	4b14      	ldr	r3, [pc, #80]	@ (800e608 <HAL_GPIO_EXTI_Callback+0x64>)
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	601a      	str	r2, [r3, #0]
        upbutton = 0;
 800e5bc:	4b13      	ldr	r3, [pc, #76]	@ (800e60c <HAL_GPIO_EXTI_Callback+0x68>)
 800e5be:	2200      	movs	r2, #0
 800e5c0:	601a      	str	r2, [r3, #0]
        enter = 1;
 800e5c2:	4b13      	ldr	r3, [pc, #76]	@ (800e610 <HAL_GPIO_EXTI_Callback+0x6c>)
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	601a      	str	r2, [r3, #0]
    }

    if (GPIO_Pin == GPIO_PIN_11) { // DOWN button
 800e5c8:	88fb      	ldrh	r3, [r7, #6]
 800e5ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e5ce:	d108      	bne.n	800e5e2 <HAL_GPIO_EXTI_Callback+0x3e>
        downbutton = 1;
 800e5d0:	4b0d      	ldr	r3, [pc, #52]	@ (800e608 <HAL_GPIO_EXTI_Callback+0x64>)
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	601a      	str	r2, [r3, #0]
        upbutton = 0;
 800e5d6:	4b0d      	ldr	r3, [pc, #52]	@ (800e60c <HAL_GPIO_EXTI_Callback+0x68>)
 800e5d8:	2200      	movs	r2, #0
 800e5da:	601a      	str	r2, [r3, #0]
        enter = 0;
 800e5dc:	4b0c      	ldr	r3, [pc, #48]	@ (800e610 <HAL_GPIO_EXTI_Callback+0x6c>)
 800e5de:	2200      	movs	r2, #0
 800e5e0:	601a      	str	r2, [r3, #0]
    }

    if (GPIO_Pin == GPIO_PIN_9) { // UP button
 800e5e2:	88fb      	ldrh	r3, [r7, #6]
 800e5e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e5e8:	d108      	bne.n	800e5fc <HAL_GPIO_EXTI_Callback+0x58>
        downbutton = 0;
 800e5ea:	4b07      	ldr	r3, [pc, #28]	@ (800e608 <HAL_GPIO_EXTI_Callback+0x64>)
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	601a      	str	r2, [r3, #0]
        upbutton = 1;
 800e5f0:	4b06      	ldr	r3, [pc, #24]	@ (800e60c <HAL_GPIO_EXTI_Callback+0x68>)
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	601a      	str	r2, [r3, #0]
        enter = 0;
 800e5f6:	4b06      	ldr	r3, [pc, #24]	@ (800e610 <HAL_GPIO_EXTI_Callback+0x6c>)
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	601a      	str	r2, [r3, #0]
    }
}
 800e5fc:	bf00      	nop
 800e5fe:	370c      	adds	r7, #12
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr
 800e608:	20000e08 	.word	0x20000e08
 800e60c:	20000e0c 	.word	0x20000e0c
 800e610:	20000e10 	.word	0x20000e10

0800e614 <initializeMenu>:


void initializeMenu(void) {
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
    safe_printf("display_init\n\r");
 800e61a:	481c      	ldr	r0, [pc, #112]	@ (800e68c <initializeMenu+0x78>)
 800e61c:	f001 fc7c 	bl	800ff18 <safe_printf>
    current_menu = MENU_MAIN;
 800e620:	4b1b      	ldr	r3, [pc, #108]	@ (800e690 <initializeMenu+0x7c>)
 800e622:	2200      	movs	r2, #0
 800e624:	601a      	str	r2, [r3, #0]
    current_selection = 0;
 800e626:	4b1b      	ldr	r3, [pc, #108]	@ (800e694 <initializeMenu+0x80>)
 800e628:	2200      	movs	r2, #0
 800e62a:	601a      	str	r2, [r3, #0]
    current_device = 0;
 800e62c:	4b1a      	ldr	r3, [pc, #104]	@ (800e698 <initializeMenu+0x84>)
 800e62e:	2200      	movs	r2, #0
 800e630:	601a      	str	r2, [r3, #0]
    last_selection = -1;
 800e632:	4b1a      	ldr	r3, [pc, #104]	@ (800e69c <initializeMenu+0x88>)
 800e634:	f04f 32ff 	mov.w	r2, #4294967295
 800e638:	601a      	str	r2, [r3, #0]
    last_menu = -1;
 800e63a:	4b19      	ldr	r3, [pc, #100]	@ (800e6a0 <initializeMenu+0x8c>)
 800e63c:	f04f 32ff 	mov.w	r2, #4294967295
 800e640:	601a      	str	r2, [r3, #0]
    menu_drawn = false;
 800e642:	4b18      	ldr	r3, [pc, #96]	@ (800e6a4 <initializeMenu+0x90>)
 800e644:	2200      	movs	r2, #0
 800e646:	701a      	strb	r2, [r3, #0]
    buttons_drawn = false;
 800e648:	4b17      	ldr	r3, [pc, #92]	@ (800e6a8 <initializeMenu+0x94>)
 800e64a:	2200      	movs	r2, #0
 800e64c:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < 4; i++) {
 800e64e:	2300      	movs	r3, #0
 800e650:	607b      	str	r3, [r7, #4]
 800e652:	e011      	b.n	800e678 <initializeMenu+0x64>
        device_states[i] = 0;
 800e654:	4a15      	ldr	r2, [pc, #84]	@ (800e6ac <initializeMenu+0x98>)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2100      	movs	r1, #0
 800e65a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        last_device_states[i] = -1;
 800e65e:	4a14      	ldr	r2, [pc, #80]	@ (800e6b0 <initializeMenu+0x9c>)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f04f 31ff 	mov.w	r1, #4294967295
 800e666:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        setDeviceState(i, 0);
 800e66a:	2100      	movs	r1, #0
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f7ff fb99 	bl	800dda4 <setDeviceState>
    for (int i = 0; i < 4; i++) {
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	3301      	adds	r3, #1
 800e676:	607b      	str	r3, [r7, #4]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2b03      	cmp	r3, #3
 800e67c:	ddea      	ble.n	800e654 <initializeMenu+0x40>
    }
    displayMainMenu();
 800e67e:	f7ff f865 	bl	800d74c <displayMainMenu>
}
 800e682:	bf00      	nop
 800e684:	3708      	adds	r7, #8
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	0801ba54 	.word	0x0801ba54
 800e690:	20000dfc 	.word	0x20000dfc
 800e694:	20000e00 	.word	0x20000e00
 800e698:	20000e04 	.word	0x20000e04
 800e69c:	2000001c 	.word	0x2000001c
 800e6a0:	20000020 	.word	0x20000020
 800e6a4:	20000e24 	.word	0x20000e24
 800e6a8:	20000e25 	.word	0x20000e25
 800e6ac:	20000e14 	.word	0x20000e14
 800e6b0:	20000024 	.word	0x20000024

0800e6b4 <GSM_init>:
uint8_t pingreq_sent = 0;
uint32_t pingreq_time = 0;
uint32_t pingresp_timeout_ms = 5000;

void GSM_init(void)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	af00      	add	r7, sp, #0
	SIM800.sim.apn = "internet";
 800e6b8:	4b10      	ldr	r3, [pc, #64]	@ (800e6fc <GSM_init+0x48>)
 800e6ba:	4a11      	ldr	r2, [pc, #68]	@ (800e700 <GSM_init+0x4c>)
 800e6bc:	601a      	str	r2, [r3, #0]
	SIM800.sim.apn_user = "";
 800e6be:	4b0f      	ldr	r3, [pc, #60]	@ (800e6fc <GSM_init+0x48>)
 800e6c0:	4a10      	ldr	r2, [pc, #64]	@ (800e704 <GSM_init+0x50>)
 800e6c2:	605a      	str	r2, [r3, #4]
	SIM800.sim.apn_pass = "";
 800e6c4:	4b0d      	ldr	r3, [pc, #52]	@ (800e6fc <GSM_init+0x48>)
 800e6c6:	4a0f      	ldr	r2, [pc, #60]	@ (800e704 <GSM_init+0x50>)
 800e6c8:	609a      	str	r2, [r3, #8]
	SIM800.mqttServer.host = "mqtt.onwords.in";
 800e6ca:	4b0c      	ldr	r3, [pc, #48]	@ (800e6fc <GSM_init+0x48>)
 800e6cc:	4a0e      	ldr	r2, [pc, #56]	@ (800e708 <GSM_init+0x54>)
 800e6ce:	60da      	str	r2, [r3, #12]
	SIM800.mqttServer.port = 1883;
 800e6d0:	4b0a      	ldr	r3, [pc, #40]	@ (800e6fc <GSM_init+0x48>)
 800e6d2:	f240 725b 	movw	r2, #1883	@ 0x75b
 800e6d6:	821a      	strh	r2, [r3, #16]
	SIM800.mqttClient.username = "Appteam";
 800e6d8:	4b08      	ldr	r3, [pc, #32]	@ (800e6fc <GSM_init+0x48>)
 800e6da:	4a0c      	ldr	r2, [pc, #48]	@ (800e70c <GSM_init+0x58>)
 800e6dc:	615a      	str	r2, [r3, #20]
	SIM800.mqttClient.pass = "Appteam@321";
 800e6de:	4b07      	ldr	r3, [pc, #28]	@ (800e6fc <GSM_init+0x48>)
 800e6e0:	4a0b      	ldr	r2, [pc, #44]	@ (800e710 <GSM_init+0x5c>)
 800e6e2:	619a      	str	r2, [r3, #24]
	SIM800.mqttClient.clientID = "TestSub";
 800e6e4:	4b05      	ldr	r3, [pc, #20]	@ (800e6fc <GSM_init+0x48>)
 800e6e6:	4a0b      	ldr	r2, [pc, #44]	@ (800e714 <GSM_init+0x60>)
 800e6e8:	61da      	str	r2, [r3, #28]
	SIM800.mqttClient.keepAliveInterval = 60;
 800e6ea:	4b04      	ldr	r3, [pc, #16]	@ (800e6fc <GSM_init+0x48>)
 800e6ec:	223c      	movs	r2, #60	@ 0x3c
 800e6ee:	841a      	strh	r2, [r3, #32]
}
 800e6f0:	bf00      	nop
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f8:	4770      	bx	lr
 800e6fa:	bf00      	nop
 800e6fc:	2000131c 	.word	0x2000131c
 800e700:	0801ba90 	.word	0x0801ba90
 800e704:	0801ba9c 	.word	0x0801ba9c
 800e708:	0801baa0 	.word	0x0801baa0
 800e70c:	0801bab0 	.word	0x0801bab0
 800e710:	0801bab8 	.word	0x0801bab8
 800e714:	0801bac4 	.word	0x0801bac4

0800e718 <GSM_MQTT_Task>:

void GSM_MQTT_Task(void *pvParameters)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b086      	sub	sp, #24
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
    print_task_info();
 800e720:	f001 fbe0 	bl	800fee4 <print_task_info>
    static uint8_t sub_done = 0;

    while (1)
    {
    	SIM800_MQTT_StateMachineHandler();
 800e724:	f7fb f882 	bl	800982c <SIM800_MQTT_StateMachineHandler>
        if (mqttState == MQTT_STATE_MQTT_CONNECTED || mqttState == MQTT_STATE_IDLE)
 800e728:	4b3f      	ldr	r3, [pc, #252]	@ (800e828 <GSM_MQTT_Task+0x110>)
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	2b08      	cmp	r3, #8
 800e72e:	d003      	beq.n	800e738 <GSM_MQTT_Task+0x20>
 800e730:	4b3d      	ldr	r3, [pc, #244]	@ (800e828 <GSM_MQTT_Task+0x110>)
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	2b09      	cmp	r3, #9
 800e736:	d16d      	bne.n	800e814 <GSM_MQTT_Task+0xfc>
        {
            if (sub_done == 0)
 800e738:	4b3c      	ldr	r3, [pc, #240]	@ (800e82c <GSM_MQTT_Task+0x114>)
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d10e      	bne.n	800e75e <GSM_MQTT_Task+0x46>
            {
                MQTT_Sub("onwords/4ltc01/status");
 800e740:	483b      	ldr	r0, [pc, #236]	@ (800e830 <GSM_MQTT_Task+0x118>)
 800e742:	f7fb fb7b 	bl	8009e3c <MQTT_Sub>
                MQTT_Sub("onwords/4ltc01/getCurrentStatus");
 800e746:	483b      	ldr	r0, [pc, #236]	@ (800e834 <GSM_MQTT_Task+0x11c>)
 800e748:	f7fb fb78 	bl	8009e3c <MQTT_Sub>
                MQTT_Sub("onwords/4ltc01/currentStatus");
 800e74c:	483a      	ldr	r0, [pc, #232]	@ (800e838 <GSM_MQTT_Task+0x120>)
 800e74e:	f7fb fb75 	bl	8009e3c <MQTT_Sub>
                sub_done = 1;
 800e752:	4b36      	ldr	r3, [pc, #216]	@ (800e82c <GSM_MQTT_Task+0x114>)
 800e754:	2201      	movs	r2, #1
 800e756:	701a      	strb	r2, [r3, #0]
                safe_printf("MQTT Subscribed to topics\r\n");
 800e758:	4838      	ldr	r0, [pc, #224]	@ (800e83c <GSM_MQTT_Task+0x124>)
 800e75a:	f001 fbdd 	bl	800ff18 <safe_printf>
            }
            if (SIM800.mqttReceive.newEvent)
 800e75e:	4b38      	ldr	r3, [pc, #224]	@ (800e840 <GSM_MQTT_Task+0x128>)
 800e760:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e764:	2b00      	cmp	r3, #0
 800e766:	d013      	beq.n	800e790 <GSM_MQTT_Task+0x78>
            {
                SIM800.mqttReceive.newEvent = 0;
 800e768:	4b35      	ldr	r3, [pc, #212]	@ (800e840 <GSM_MQTT_Task+0x128>)
 800e76a:	2200      	movs	r2, #0
 800e76c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                unsigned char *topic = SIM800.mqttReceive.topic;
 800e770:	4b34      	ldr	r3, [pc, #208]	@ (800e844 <GSM_MQTT_Task+0x12c>)
 800e772:	617b      	str	r3, [r7, #20]
                unsigned char *payload = SIM800.mqttReceive.payload;
 800e774:	4b34      	ldr	r3, [pc, #208]	@ (800e848 <GSM_MQTT_Task+0x130>)
 800e776:	613b      	str	r3, [r7, #16]

                safe_printf("Topic: %s\r\n", topic);
 800e778:	6979      	ldr	r1, [r7, #20]
 800e77a:	4834      	ldr	r0, [pc, #208]	@ (800e84c <GSM_MQTT_Task+0x134>)
 800e77c:	f001 fbcc 	bl	800ff18 <safe_printf>
                safe_printf("Payload: %s\r\n", payload);
 800e780:	6939      	ldr	r1, [r7, #16]
 800e782:	4833      	ldr	r0, [pc, #204]	@ (800e850 <GSM_MQTT_Task+0x138>)
 800e784:	f001 fbc8 	bl	800ff18 <safe_printf>

                MQTT_Pub("bala", (char *)payload);
 800e788:	6939      	ldr	r1, [r7, #16]
 800e78a:	4832      	ldr	r0, [pc, #200]	@ (800e854 <GSM_MQTT_Task+0x13c>)
 800e78c:	f7fb fae8 	bl	8009d60 <MQTT_Pub>
            }
            if (!pingreq_sent && (millis() - lastKeepAliveTime) >= (KEEP_ALIVE_INTERVAL * 500))
 800e790:	4b31      	ldr	r3, [pc, #196]	@ (800e858 <GSM_MQTT_Task+0x140>)
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d122      	bne.n	800e7de <GSM_MQTT_Task+0xc6>
 800e798:	f000 f86c 	bl	800e874 <millis>
 800e79c:	4602      	mov	r2, r0
 800e79e:	4b2f      	ldr	r3, [pc, #188]	@ (800e85c <GSM_MQTT_Task+0x144>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	1ad3      	subs	r3, r2, r3
 800e7a4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	d918      	bls.n	800e7de <GSM_MQTT_Task+0xc6>
            {
                uint8_t pingreq_packet[2] = {0xC0, 0x00};
 800e7ac:	23c0      	movs	r3, #192	@ 0xc0
 800e7ae:	81bb      	strh	r3, [r7, #12]
                HAL_UART_Transmit(UART_SIM800, pingreq_packet, 2, 100);
 800e7b0:	f107 010c 	add.w	r1, r7, #12
 800e7b4:	2364      	movs	r3, #100	@ 0x64
 800e7b6:	2202      	movs	r2, #2
 800e7b8:	4829      	ldr	r0, [pc, #164]	@ (800e860 <GSM_MQTT_Task+0x148>)
 800e7ba:	f003 ffd1 	bl	8012760 <HAL_UART_Transmit>
                lastKeepAliveTime = millis();
 800e7be:	f000 f859 	bl	800e874 <millis>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	4a25      	ldr	r2, [pc, #148]	@ (800e85c <GSM_MQTT_Task+0x144>)
 800e7c6:	6013      	str	r3, [r2, #0]
                pingreq_sent = 1;
 800e7c8:	4b23      	ldr	r3, [pc, #140]	@ (800e858 <GSM_MQTT_Task+0x140>)
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	701a      	strb	r2, [r3, #0]
                pingreq_time = millis();
 800e7ce:	f000 f851 	bl	800e874 <millis>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	4a23      	ldr	r2, [pc, #140]	@ (800e864 <GSM_MQTT_Task+0x14c>)
 800e7d6:	6013      	str	r3, [r2, #0]
                safe_printf("MQTT PINGREQ sent\r\n");
 800e7d8:	4823      	ldr	r0, [pc, #140]	@ (800e868 <GSM_MQTT_Task+0x150>)
 800e7da:	f001 fb9d 	bl	800ff18 <safe_printf>
            }
            if (pingreq_sent && (millis() - pingreq_time) > pingresp_timeout_ms)
 800e7de:	4b1e      	ldr	r3, [pc, #120]	@ (800e858 <GSM_MQTT_Task+0x140>)
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d01a      	beq.n	800e81c <GSM_MQTT_Task+0x104>
 800e7e6:	f000 f845 	bl	800e874 <millis>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	4b1d      	ldr	r3, [pc, #116]	@ (800e864 <GSM_MQTT_Task+0x14c>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	1ad2      	subs	r2, r2, r3
 800e7f2:	4b1e      	ldr	r3, [pc, #120]	@ (800e86c <GSM_MQTT_Task+0x154>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d910      	bls.n	800e81c <GSM_MQTT_Task+0x104>
            {
                safe_printf("MQTT PINGRESP timeout! Forcing reconnect...\r\n");
 800e7fa:	481d      	ldr	r0, [pc, #116]	@ (800e870 <GSM_MQTT_Task+0x158>)
 800e7fc:	f001 fb8c 	bl	800ff18 <safe_printf>
                mqttState = MQTT_STATE_RECONNECT;
 800e800:	4b09      	ldr	r3, [pc, #36]	@ (800e828 <GSM_MQTT_Task+0x110>)
 800e802:	220a      	movs	r2, #10
 800e804:	701a      	strb	r2, [r3, #0]
                SIM800.mqttServer.connect = 0;
 800e806:	4b0e      	ldr	r3, [pc, #56]	@ (800e840 <GSM_MQTT_Task+0x128>)
 800e808:	2200      	movs	r2, #0
 800e80a:	749a      	strb	r2, [r3, #18]
                pingreq_sent = 0;
 800e80c:	4b12      	ldr	r3, [pc, #72]	@ (800e858 <GSM_MQTT_Task+0x140>)
 800e80e:	2200      	movs	r2, #0
 800e810:	701a      	strb	r2, [r3, #0]
            if (pingreq_sent && (millis() - pingreq_time) > pingresp_timeout_ms)
 800e812:	e003      	b.n	800e81c <GSM_MQTT_Task+0x104>
            }
        }
        else
        {
            sub_done = 0;
 800e814:	4b05      	ldr	r3, [pc, #20]	@ (800e82c <GSM_MQTT_Task+0x114>)
 800e816:	2200      	movs	r2, #0
 800e818:	701a      	strb	r2, [r3, #0]
 800e81a:	e000      	b.n	800e81e <GSM_MQTT_Task+0x106>
            if (pingreq_sent && (millis() - pingreq_time) > pingresp_timeout_ms)
 800e81c:	bf00      	nop
        }

        vTaskDelay(pdMS_TO_TICKS(100));
 800e81e:	2064      	movs	r0, #100	@ 0x64
 800e820:	f006 f834 	bl	801488c <vTaskDelay>
    	SIM800_MQTT_StateMachineHandler();
 800e824:	e77e      	b.n	800e724 <GSM_MQTT_Task+0xc>
 800e826:	bf00      	nop
 800e828:	20000de2 	.word	0x20000de2
 800e82c:	20000f54 	.word	0x20000f54
 800e830:	0801bacc 	.word	0x0801bacc
 800e834:	0801bae4 	.word	0x0801bae4
 800e838:	0801bb04 	.word	0x0801bb04
 800e83c:	0801bb24 	.word	0x0801bb24
 800e840:	2000131c 	.word	0x2000131c
 800e844:	20001450 	.word	0x20001450
 800e848:	2000134c 	.word	0x2000134c
 800e84c:	0801bb40 	.word	0x0801bb40
 800e850:	0801bb4c 	.word	0x0801bb4c
 800e854:	0801bb5c 	.word	0x0801bb5c
 800e858:	20000f4c 	.word	0x20000f4c
 800e85c:	200014e4 	.word	0x200014e4
 800e860:	20001060 	.word	0x20001060
 800e864:	20000f50 	.word	0x20000f50
 800e868:	0801bb64 	.word	0x0801bb64
 800e86c:	20000034 	.word	0x20000034
 800e870:	0801bb78 	.word	0x0801bb78

0800e874 <millis>:
    }
}

uint32_t millis() {
 800e874:	b580      	push	{r7, lr}
 800e876:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800e878:	f001 fbec 	bl	8010054 <HAL_GetTick>
 800e87c:	4603      	mov	r3, r0
}
 800e87e:	4618      	mov	r0, r3
 800e880:	bd80      	pop	{r7, pc}

0800e882 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e882:	b580      	push	{r7, lr}
 800e884:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e886:	f001 fbaf 	bl	800ffe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e88a:	f000 f813 	bl	800e8b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e88e:	f000 f9a3 	bl	800ebd8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800e892:	f000 f881 	bl	800e998 <MX_SPI1_Init>
  MX_SPI2_Init();
 800e896:	f000 f8b7 	bl	800ea08 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800e89a:	f000 f949 	bl	800eb30 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800e89e:	f000 f971 	bl	800eb84 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 800e8a2:	f000 f8e5 	bl	800ea70 <MX_SPI3_Init>
  MX_UART4_Init();
 800e8a6:	f000 f919 	bl	800eadc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  user_app_init();
 800e8aa:	f001 facd 	bl	800fe48 <user_app_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800e8ae:	bf00      	nop
 800e8b0:	e7fd      	b.n	800e8ae <main+0x2c>
	...

0800e8b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b094      	sub	sp, #80	@ 0x50
 800e8b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e8ba:	f107 031c 	add.w	r3, r7, #28
 800e8be:	2234      	movs	r2, #52	@ 0x34
 800e8c0:	2100      	movs	r1, #0
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f009 fe3a 	bl	801853c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e8c8:	f107 0308 	add.w	r3, r7, #8
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	601a      	str	r2, [r3, #0]
 800e8d0:	605a      	str	r2, [r3, #4]
 800e8d2:	609a      	str	r2, [r3, #8]
 800e8d4:	60da      	str	r2, [r3, #12]
 800e8d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800e8d8:	2300      	movs	r3, #0
 800e8da:	607b      	str	r3, [r7, #4]
 800e8dc:	4b2c      	ldr	r3, [pc, #176]	@ (800e990 <SystemClock_Config+0xdc>)
 800e8de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8e0:	4a2b      	ldr	r2, [pc, #172]	@ (800e990 <SystemClock_Config+0xdc>)
 800e8e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e8e6:	6413      	str	r3, [r2, #64]	@ 0x40
 800e8e8:	4b29      	ldr	r3, [pc, #164]	@ (800e990 <SystemClock_Config+0xdc>)
 800e8ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e8f0:	607b      	str	r3, [r7, #4]
 800e8f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	603b      	str	r3, [r7, #0]
 800e8f8:	4b26      	ldr	r3, [pc, #152]	@ (800e994 <SystemClock_Config+0xe0>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4a25      	ldr	r2, [pc, #148]	@ (800e994 <SystemClock_Config+0xe0>)
 800e8fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e902:	6013      	str	r3, [r2, #0]
 800e904:	4b23      	ldr	r3, [pc, #140]	@ (800e994 <SystemClock_Config+0xe0>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e90c:	603b      	str	r3, [r7, #0]
 800e90e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800e910:	2302      	movs	r3, #2
 800e912:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800e914:	2301      	movs	r3, #1
 800e916:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800e918:	2310      	movs	r3, #16
 800e91a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e91c:	2302      	movs	r3, #2
 800e91e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800e920:	2300      	movs	r3, #0
 800e922:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800e924:	2308      	movs	r3, #8
 800e926:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800e928:	23b4      	movs	r3, #180	@ 0xb4
 800e92a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e92c:	2302      	movs	r3, #2
 800e92e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800e930:	2302      	movs	r3, #2
 800e932:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800e934:	2302      	movs	r3, #2
 800e936:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e938:	f107 031c 	add.w	r3, r7, #28
 800e93c:	4618      	mov	r0, r3
 800e93e:	f002 fa6b 	bl	8010e18 <HAL_RCC_OscConfig>
 800e942:	4603      	mov	r3, r0
 800e944:	2b00      	cmp	r3, #0
 800e946:	d001      	beq.n	800e94c <SystemClock_Config+0x98>
  {
    Error_Handler();
 800e948:	f000 fa30 	bl	800edac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800e94c:	f001 ff1e 	bl	801078c <HAL_PWREx_EnableOverDrive>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	d001      	beq.n	800e95a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800e956:	f000 fa29 	bl	800edac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e95a:	230f      	movs	r3, #15
 800e95c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e95e:	2302      	movs	r3, #2
 800e960:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e962:	2300      	movs	r3, #0
 800e964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e966:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800e96a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e96c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e970:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800e972:	f107 0308 	add.w	r3, r7, #8
 800e976:	2105      	movs	r1, #5
 800e978:	4618      	mov	r0, r3
 800e97a:	f001 ff57 	bl	801082c <HAL_RCC_ClockConfig>
 800e97e:	4603      	mov	r3, r0
 800e980:	2b00      	cmp	r3, #0
 800e982:	d001      	beq.n	800e988 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800e984:	f000 fa12 	bl	800edac <Error_Handler>
  }
}
 800e988:	bf00      	nop
 800e98a:	3750      	adds	r7, #80	@ 0x50
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	40023800 	.word	0x40023800
 800e994:	40007000 	.word	0x40007000

0800e998 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800e99c:	4b18      	ldr	r3, [pc, #96]	@ (800ea00 <MX_SPI1_Init+0x68>)
 800e99e:	4a19      	ldr	r2, [pc, #100]	@ (800ea04 <MX_SPI1_Init+0x6c>)
 800e9a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800e9a2:	4b17      	ldr	r3, [pc, #92]	@ (800ea00 <MX_SPI1_Init+0x68>)
 800e9a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800e9a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800e9aa:	4b15      	ldr	r3, [pc, #84]	@ (800ea00 <MX_SPI1_Init+0x68>)
 800e9ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800e9b0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800e9b2:	4b13      	ldr	r3, [pc, #76]	@ (800ea00 <MX_SPI1_Init+0x68>)
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e9b8:	4b11      	ldr	r3, [pc, #68]	@ (800ea00 <MX_SPI1_Init+0x68>)
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e9be:	4b10      	ldr	r3, [pc, #64]	@ (800ea00 <MX_SPI1_Init+0x68>)
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800e9c4:	4b0e      	ldr	r3, [pc, #56]	@ (800ea00 <MX_SPI1_Init+0x68>)
 800e9c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800e9cc:	4b0c      	ldr	r3, [pc, #48]	@ (800ea00 <MX_SPI1_Init+0x68>)
 800e9ce:	2208      	movs	r2, #8
 800e9d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e9d2:	4b0b      	ldr	r3, [pc, #44]	@ (800ea00 <MX_SPI1_Init+0x68>)
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800e9d8:	4b09      	ldr	r3, [pc, #36]	@ (800ea00 <MX_SPI1_Init+0x68>)
 800e9da:	2200      	movs	r2, #0
 800e9dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e9de:	4b08      	ldr	r3, [pc, #32]	@ (800ea00 <MX_SPI1_Init+0x68>)
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800e9e4:	4b06      	ldr	r3, [pc, #24]	@ (800ea00 <MX_SPI1_Init+0x68>)
 800e9e6:	220a      	movs	r2, #10
 800e9e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800e9ea:	4805      	ldr	r0, [pc, #20]	@ (800ea00 <MX_SPI1_Init+0x68>)
 800e9ec:	f002 fcb2 	bl	8011354 <HAL_SPI_Init>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d001      	beq.n	800e9fa <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800e9f6:	f000 f9d9 	bl	800edac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800e9fa:	bf00      	nop
 800e9fc:	bd80      	pop	{r7, pc}
 800e9fe:	bf00      	nop
 800ea00:	20000f58 	.word	0x20000f58
 800ea04:	40013000 	.word	0x40013000

0800ea08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800ea0c:	4b16      	ldr	r3, [pc, #88]	@ (800ea68 <MX_SPI2_Init+0x60>)
 800ea0e:	4a17      	ldr	r2, [pc, #92]	@ (800ea6c <MX_SPI2_Init+0x64>)
 800ea10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800ea12:	4b15      	ldr	r3, [pc, #84]	@ (800ea68 <MX_SPI2_Init+0x60>)
 800ea14:	2200      	movs	r2, #0
 800ea16:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800ea18:	4b13      	ldr	r3, [pc, #76]	@ (800ea68 <MX_SPI2_Init+0x60>)
 800ea1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ea1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800ea20:	4b11      	ldr	r3, [pc, #68]	@ (800ea68 <MX_SPI2_Init+0x60>)
 800ea22:	2200      	movs	r2, #0
 800ea24:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ea26:	4b10      	ldr	r3, [pc, #64]	@ (800ea68 <MX_SPI2_Init+0x60>)
 800ea28:	2200      	movs	r2, #0
 800ea2a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ea2c:	4b0e      	ldr	r3, [pc, #56]	@ (800ea68 <MX_SPI2_Init+0x60>)
 800ea2e:	2200      	movs	r2, #0
 800ea30:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800ea32:	4b0d      	ldr	r3, [pc, #52]	@ (800ea68 <MX_SPI2_Init+0x60>)
 800ea34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea38:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ea3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ea68 <MX_SPI2_Init+0x60>)
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800ea40:	4b09      	ldr	r3, [pc, #36]	@ (800ea68 <MX_SPI2_Init+0x60>)
 800ea42:	2200      	movs	r2, #0
 800ea44:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ea46:	4b08      	ldr	r3, [pc, #32]	@ (800ea68 <MX_SPI2_Init+0x60>)
 800ea48:	2200      	movs	r2, #0
 800ea4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800ea4c:	4b06      	ldr	r3, [pc, #24]	@ (800ea68 <MX_SPI2_Init+0x60>)
 800ea4e:	220a      	movs	r2, #10
 800ea50:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800ea52:	4805      	ldr	r0, [pc, #20]	@ (800ea68 <MX_SPI2_Init+0x60>)
 800ea54:	f002 fc7e 	bl	8011354 <HAL_SPI_Init>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d001      	beq.n	800ea62 <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 800ea5e:	f000 f9a5 	bl	800edac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800ea62:	bf00      	nop
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	20000fb0 	.word	0x20000fb0
 800ea6c:	40003800 	.word	0x40003800

0800ea70 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800ea74:	4b17      	ldr	r3, [pc, #92]	@ (800ead4 <MX_SPI3_Init+0x64>)
 800ea76:	4a18      	ldr	r2, [pc, #96]	@ (800ead8 <MX_SPI3_Init+0x68>)
 800ea78:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800ea7a:	4b16      	ldr	r3, [pc, #88]	@ (800ead4 <MX_SPI3_Init+0x64>)
 800ea7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800ea80:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800ea82:	4b14      	ldr	r3, [pc, #80]	@ (800ead4 <MX_SPI3_Init+0x64>)
 800ea84:	2200      	movs	r2, #0
 800ea86:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800ea88:	4b12      	ldr	r3, [pc, #72]	@ (800ead4 <MX_SPI3_Init+0x64>)
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ea8e:	4b11      	ldr	r3, [pc, #68]	@ (800ead4 <MX_SPI3_Init+0x64>)
 800ea90:	2200      	movs	r2, #0
 800ea92:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ea94:	4b0f      	ldr	r3, [pc, #60]	@ (800ead4 <MX_SPI3_Init+0x64>)
 800ea96:	2200      	movs	r2, #0
 800ea98:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800ea9a:	4b0e      	ldr	r3, [pc, #56]	@ (800ead4 <MX_SPI3_Init+0x64>)
 800ea9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eaa0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800eaa2:	4b0c      	ldr	r3, [pc, #48]	@ (800ead4 <MX_SPI3_Init+0x64>)
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800eaa8:	4b0a      	ldr	r3, [pc, #40]	@ (800ead4 <MX_SPI3_Init+0x64>)
 800eaaa:	2200      	movs	r2, #0
 800eaac:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800eaae:	4b09      	ldr	r3, [pc, #36]	@ (800ead4 <MX_SPI3_Init+0x64>)
 800eab0:	2200      	movs	r2, #0
 800eab2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eab4:	4b07      	ldr	r3, [pc, #28]	@ (800ead4 <MX_SPI3_Init+0x64>)
 800eab6:	2200      	movs	r2, #0
 800eab8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800eaba:	4b06      	ldr	r3, [pc, #24]	@ (800ead4 <MX_SPI3_Init+0x64>)
 800eabc:	220a      	movs	r2, #10
 800eabe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800eac0:	4804      	ldr	r0, [pc, #16]	@ (800ead4 <MX_SPI3_Init+0x64>)
 800eac2:	f002 fc47 	bl	8011354 <HAL_SPI_Init>
 800eac6:	4603      	mov	r3, r0
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d001      	beq.n	800ead0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800eacc:	f000 f96e 	bl	800edac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800ead0:	bf00      	nop
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	20001008 	.word	0x20001008
 800ead8:	40003c00 	.word	0x40003c00

0800eadc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800eae0:	4b11      	ldr	r3, [pc, #68]	@ (800eb28 <MX_UART4_Init+0x4c>)
 800eae2:	4a12      	ldr	r2, [pc, #72]	@ (800eb2c <MX_UART4_Init+0x50>)
 800eae4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800eae6:	4b10      	ldr	r3, [pc, #64]	@ (800eb28 <MX_UART4_Init+0x4c>)
 800eae8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800eaec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800eaee:	4b0e      	ldr	r3, [pc, #56]	@ (800eb28 <MX_UART4_Init+0x4c>)
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800eaf4:	4b0c      	ldr	r3, [pc, #48]	@ (800eb28 <MX_UART4_Init+0x4c>)
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800eafa:	4b0b      	ldr	r3, [pc, #44]	@ (800eb28 <MX_UART4_Init+0x4c>)
 800eafc:	2200      	movs	r2, #0
 800eafe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800eb00:	4b09      	ldr	r3, [pc, #36]	@ (800eb28 <MX_UART4_Init+0x4c>)
 800eb02:	220c      	movs	r2, #12
 800eb04:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800eb06:	4b08      	ldr	r3, [pc, #32]	@ (800eb28 <MX_UART4_Init+0x4c>)
 800eb08:	2200      	movs	r2, #0
 800eb0a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800eb0c:	4b06      	ldr	r3, [pc, #24]	@ (800eb28 <MX_UART4_Init+0x4c>)
 800eb0e:	2200      	movs	r2, #0
 800eb10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800eb12:	4805      	ldr	r0, [pc, #20]	@ (800eb28 <MX_UART4_Init+0x4c>)
 800eb14:	f003 fdd4 	bl	80126c0 <HAL_UART_Init>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d001      	beq.n	800eb22 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800eb1e:	f000 f945 	bl	800edac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800eb22:	bf00      	nop
 800eb24:	bd80      	pop	{r7, pc}
 800eb26:	bf00      	nop
 800eb28:	20001060 	.word	0x20001060
 800eb2c:	40004c00 	.word	0x40004c00

0800eb30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800eb34:	4b11      	ldr	r3, [pc, #68]	@ (800eb7c <MX_USART2_UART_Init+0x4c>)
 800eb36:	4a12      	ldr	r2, [pc, #72]	@ (800eb80 <MX_USART2_UART_Init+0x50>)
 800eb38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800eb3a:	4b10      	ldr	r3, [pc, #64]	@ (800eb7c <MX_USART2_UART_Init+0x4c>)
 800eb3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800eb40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800eb42:	4b0e      	ldr	r3, [pc, #56]	@ (800eb7c <MX_USART2_UART_Init+0x4c>)
 800eb44:	2200      	movs	r2, #0
 800eb46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800eb48:	4b0c      	ldr	r3, [pc, #48]	@ (800eb7c <MX_USART2_UART_Init+0x4c>)
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800eb4e:	4b0b      	ldr	r3, [pc, #44]	@ (800eb7c <MX_USART2_UART_Init+0x4c>)
 800eb50:	2200      	movs	r2, #0
 800eb52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800eb54:	4b09      	ldr	r3, [pc, #36]	@ (800eb7c <MX_USART2_UART_Init+0x4c>)
 800eb56:	220c      	movs	r2, #12
 800eb58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800eb5a:	4b08      	ldr	r3, [pc, #32]	@ (800eb7c <MX_USART2_UART_Init+0x4c>)
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800eb60:	4b06      	ldr	r3, [pc, #24]	@ (800eb7c <MX_USART2_UART_Init+0x4c>)
 800eb62:	2200      	movs	r2, #0
 800eb64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800eb66:	4805      	ldr	r0, [pc, #20]	@ (800eb7c <MX_USART2_UART_Init+0x4c>)
 800eb68:	f003 fdaa 	bl	80126c0 <HAL_UART_Init>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d001      	beq.n	800eb76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800eb72:	f000 f91b 	bl	800edac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800eb76:	bf00      	nop
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	200010a8 	.word	0x200010a8
 800eb80:	40004400 	.word	0x40004400

0800eb84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800eb88:	4b11      	ldr	r3, [pc, #68]	@ (800ebd0 <MX_USART3_UART_Init+0x4c>)
 800eb8a:	4a12      	ldr	r2, [pc, #72]	@ (800ebd4 <MX_USART3_UART_Init+0x50>)
 800eb8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800eb8e:	4b10      	ldr	r3, [pc, #64]	@ (800ebd0 <MX_USART3_UART_Init+0x4c>)
 800eb90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800eb94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800eb96:	4b0e      	ldr	r3, [pc, #56]	@ (800ebd0 <MX_USART3_UART_Init+0x4c>)
 800eb98:	2200      	movs	r2, #0
 800eb9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800eb9c:	4b0c      	ldr	r3, [pc, #48]	@ (800ebd0 <MX_USART3_UART_Init+0x4c>)
 800eb9e:	2200      	movs	r2, #0
 800eba0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800eba2:	4b0b      	ldr	r3, [pc, #44]	@ (800ebd0 <MX_USART3_UART_Init+0x4c>)
 800eba4:	2200      	movs	r2, #0
 800eba6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800eba8:	4b09      	ldr	r3, [pc, #36]	@ (800ebd0 <MX_USART3_UART_Init+0x4c>)
 800ebaa:	220c      	movs	r2, #12
 800ebac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ebae:	4b08      	ldr	r3, [pc, #32]	@ (800ebd0 <MX_USART3_UART_Init+0x4c>)
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ebb4:	4b06      	ldr	r3, [pc, #24]	@ (800ebd0 <MX_USART3_UART_Init+0x4c>)
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ebba:	4805      	ldr	r0, [pc, #20]	@ (800ebd0 <MX_USART3_UART_Init+0x4c>)
 800ebbc:	f003 fd80 	bl	80126c0 <HAL_UART_Init>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d001      	beq.n	800ebca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800ebc6:	f000 f8f1 	bl	800edac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800ebca:	bf00      	nop
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	200010f0 	.word	0x200010f0
 800ebd4:	40004800 	.word	0x40004800

0800ebd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b08a      	sub	sp, #40	@ 0x28
 800ebdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ebde:	f107 0314 	add.w	r3, r7, #20
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	601a      	str	r2, [r3, #0]
 800ebe6:	605a      	str	r2, [r3, #4]
 800ebe8:	609a      	str	r2, [r3, #8]
 800ebea:	60da      	str	r2, [r3, #12]
 800ebec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ebee:	2300      	movs	r3, #0
 800ebf0:	613b      	str	r3, [r7, #16]
 800ebf2:	4b60      	ldr	r3, [pc, #384]	@ (800ed74 <MX_GPIO_Init+0x19c>)
 800ebf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebf6:	4a5f      	ldr	r2, [pc, #380]	@ (800ed74 <MX_GPIO_Init+0x19c>)
 800ebf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ebfc:	6313      	str	r3, [r2, #48]	@ 0x30
 800ebfe:	4b5d      	ldr	r3, [pc, #372]	@ (800ed74 <MX_GPIO_Init+0x19c>)
 800ec00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec06:	613b      	str	r3, [r7, #16]
 800ec08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	60fb      	str	r3, [r7, #12]
 800ec0e:	4b59      	ldr	r3, [pc, #356]	@ (800ed74 <MX_GPIO_Init+0x19c>)
 800ec10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec12:	4a58      	ldr	r2, [pc, #352]	@ (800ed74 <MX_GPIO_Init+0x19c>)
 800ec14:	f043 0304 	orr.w	r3, r3, #4
 800ec18:	6313      	str	r3, [r2, #48]	@ 0x30
 800ec1a:	4b56      	ldr	r3, [pc, #344]	@ (800ed74 <MX_GPIO_Init+0x19c>)
 800ec1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec1e:	f003 0304 	and.w	r3, r3, #4
 800ec22:	60fb      	str	r3, [r7, #12]
 800ec24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ec26:	2300      	movs	r3, #0
 800ec28:	60bb      	str	r3, [r7, #8]
 800ec2a:	4b52      	ldr	r3, [pc, #328]	@ (800ed74 <MX_GPIO_Init+0x19c>)
 800ec2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec2e:	4a51      	ldr	r2, [pc, #324]	@ (800ed74 <MX_GPIO_Init+0x19c>)
 800ec30:	f043 0301 	orr.w	r3, r3, #1
 800ec34:	6313      	str	r3, [r2, #48]	@ 0x30
 800ec36:	4b4f      	ldr	r3, [pc, #316]	@ (800ed74 <MX_GPIO_Init+0x19c>)
 800ec38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec3a:	f003 0301 	and.w	r3, r3, #1
 800ec3e:	60bb      	str	r3, [r7, #8]
 800ec40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ec42:	2300      	movs	r3, #0
 800ec44:	607b      	str	r3, [r7, #4]
 800ec46:	4b4b      	ldr	r3, [pc, #300]	@ (800ed74 <MX_GPIO_Init+0x19c>)
 800ec48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec4a:	4a4a      	ldr	r2, [pc, #296]	@ (800ed74 <MX_GPIO_Init+0x19c>)
 800ec4c:	f043 0302 	orr.w	r3, r3, #2
 800ec50:	6313      	str	r3, [r2, #48]	@ 0x30
 800ec52:	4b48      	ldr	r3, [pc, #288]	@ (800ed74 <MX_GPIO_Init+0x19c>)
 800ec54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec56:	f003 0302 	and.w	r3, r3, #2
 800ec5a:	607b      	str	r3, [r7, #4]
 800ec5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin, GPIO_PIN_RESET);
 800ec5e:	2200      	movs	r2, #0
 800ec60:	2102      	movs	r1, #2
 800ec62:	4845      	ldr	r0, [pc, #276]	@ (800ed78 <MX_GPIO_Init+0x1a0>)
 800ec64:	f001 fd46 	bl	80106f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4|L_RELAY_4_Pin, GPIO_PIN_RESET);
 800ec68:	2200      	movs	r2, #0
 800ec6a:	215c      	movs	r1, #92	@ 0x5c
 800ec6c:	4843      	ldr	r0, [pc, #268]	@ (800ed7c <MX_GPIO_Init+0x1a4>)
 800ec6e:	f001 fd41 	bl	80106f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_BACKLIT_Pin|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 800ec72:	2200      	movs	r2, #0
 800ec74:	2113      	movs	r1, #19
 800ec76:	4842      	ldr	r0, [pc, #264]	@ (800ed80 <MX_GPIO_Init+0x1a8>)
 800ec78:	f001 fd3c 	bl	80106f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_LED4_GPIO_Port, TOUCH_LED4_Pin, GPIO_PIN_RESET);
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ec82:	4840      	ldr	r0, [pc, #256]	@ (800ed84 <MX_GPIO_Init+0x1ac>)
 800ec84:	f001 fd36 	bl	80106f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L_RELAY_2_Pin|L_RELAY_1_Pin, GPIO_PIN_SET);
 800ec88:	2201      	movs	r2, #1
 800ec8a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800ec8e:	483b      	ldr	r0, [pc, #236]	@ (800ed7c <MX_GPIO_Init+0x1a4>)
 800ec90:	f001 fd30 	bl	80106f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_RELAY_3_GPIO_Port, L_RELAY_3_Pin, GPIO_PIN_SET);
 800ec94:	2201      	movs	r2, #1
 800ec96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ec9a:	483a      	ldr	r0, [pc, #232]	@ (800ed84 <MX_GPIO_Init+0x1ac>)
 800ec9c:	f001 fd2a 	bl	80106f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOUCH_LED3_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED3_Pin;
 800eca0:	2302      	movs	r3, #2
 800eca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800eca4:	2301      	movs	r3, #1
 800eca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ecac:	2300      	movs	r3, #0
 800ecae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_LED3_GPIO_Port, &GPIO_InitStruct);
 800ecb0:	f107 0314 	add.w	r3, r7, #20
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	4830      	ldr	r0, [pc, #192]	@ (800ed78 <MX_GPIO_Init+0x1a0>)
 800ecb8:	f001 fb70 	bl	801039c <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_LED2_Pin TOUCH_LED1_Pin PC4 L_RELAY_2_Pin
                           L_RELAY_1_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4|L_RELAY_2_Pin
 800ecbc:	f44f 7347 	mov.w	r3, #796	@ 0x31c
 800ecc0:	617b      	str	r3, [r7, #20]
                          |L_RELAY_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ecca:	2300      	movs	r3, #0
 800eccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ecce:	f107 0314 	add.w	r3, r7, #20
 800ecd2:	4619      	mov	r1, r3
 800ecd4:	4829      	ldr	r0, [pc, #164]	@ (800ed7c <MX_GPIO_Init+0x1a4>)
 800ecd6:	f001 fb61 	bl	801039c <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_BACKLIT_Pin PA1 PA4 */
  GPIO_InitStruct.Pin = DISP_BACKLIT_Pin|GPIO_PIN_1|GPIO_PIN_4;
 800ecda:	2313      	movs	r3, #19
 800ecdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ecde:	2301      	movs	r3, #1
 800ece0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ece2:	2300      	movs	r3, #0
 800ece4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ece6:	2300      	movs	r3, #0
 800ece8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ecea:	f107 0314 	add.w	r3, r7, #20
 800ecee:	4619      	mov	r1, r3
 800ecf0:	4823      	ldr	r0, [pc, #140]	@ (800ed80 <MX_GPIO_Init+0x1a8>)
 800ecf2:	f001 fb53 	bl	801039c <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_LED4_Pin L_RELAY_3_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED4_Pin|L_RELAY_3_Pin;
 800ecf6:	f44f 4382 	mov.w	r3, #16640	@ 0x4100
 800ecfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed00:	2300      	movs	r3, #0
 800ed02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed04:	2300      	movs	r3, #0
 800ed06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ed08:	f107 0314 	add.w	r3, r7, #20
 800ed0c:	4619      	mov	r1, r3
 800ed0e:	481d      	ldr	r0, [pc, #116]	@ (800ed84 <MX_GPIO_Init+0x1ac>)
 800ed10:	f001 fb44 	bl	801039c <HAL_GPIO_Init>

  /*Configure GPIO pin : L_RELAY_4_Pin */
  GPIO_InitStruct.Pin = L_RELAY_4_Pin;
 800ed14:	2340      	movs	r3, #64	@ 0x40
 800ed16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ed18:	2301      	movs	r3, #1
 800ed1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ed1c:	2302      	movs	r3, #2
 800ed1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed20:	2300      	movs	r3, #0
 800ed22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(L_RELAY_4_GPIO_Port, &GPIO_InitStruct);
 800ed24:	f107 0314 	add.w	r3, r7, #20
 800ed28:	4619      	mov	r1, r3
 800ed2a:	4814      	ldr	r0, [pc, #80]	@ (800ed7c <MX_GPIO_Init+0x1a4>)
 800ed2c:	f001 fb36 	bl	801039c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800ed30:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 800ed34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800ed36:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800ed3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ed3c:	2302      	movs	r3, #2
 800ed3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed40:	f107 0314 	add.w	r3, r7, #20
 800ed44:	4619      	mov	r1, r3
 800ed46:	480e      	ldr	r0, [pc, #56]	@ (800ed80 <MX_GPIO_Init+0x1a8>)
 800ed48:	f001 fb28 	bl	801039c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	2100      	movs	r1, #0
 800ed50:	2017      	movs	r0, #23
 800ed52:	f001 fa67 	bl	8010224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800ed56:	2017      	movs	r0, #23
 800ed58:	f001 fa80 	bl	801025c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	2100      	movs	r1, #0
 800ed60:	2028      	movs	r0, #40	@ 0x28
 800ed62:	f001 fa5f 	bl	8010224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800ed66:	2028      	movs	r0, #40	@ 0x28
 800ed68:	f001 fa78 	bl	801025c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800ed6c:	bf00      	nop
 800ed6e:	3728      	adds	r7, #40	@ 0x28
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	40023800 	.word	0x40023800
 800ed78:	40021c00 	.word	0x40021c00
 800ed7c:	40020800 	.word	0x40020800
 800ed80:	40020000 	.word	0x40020000
 800ed84:	40020400 	.word	0x40020400

0800ed88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4a04      	ldr	r2, [pc, #16]	@ (800eda8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d101      	bne.n	800ed9e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800ed9a:	f001 f947 	bl	801002c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800ed9e:	bf00      	nop
 800eda0:	3708      	adds	r7, #8
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	40010000 	.word	0x40010000

0800edac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800edac:	b480      	push	{r7}
 800edae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800edb0:	b672      	cpsid	i
}
 800edb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800edb4:	bf00      	nop
 800edb6:	e7fd      	b.n	800edb4 <Error_Handler+0x8>

0800edb8 <SPI_Handler>:
volatile uint16_t spiHead = 0;
volatile uint16_t spiTail = 0;
uint8_t spiRxByte;

void SPI_Handler(void *param)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b0a4      	sub	sp, #144	@ 0x90
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
    uint8_t jsonBuffer[SPI_RING_BUFFER_SIZE];
    uint8_t index = 0;
 800edc0:	2300      	movs	r3, #0
 800edc2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    bool collecting = false;
 800edc6:	2300      	movs	r3, #0
 800edc8:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    while (1)
    {
        if(spiHead != spiTail)
 800edcc:	4b37      	ldr	r3, [pc, #220]	@ (800eeac <SPI_Handler+0xf4>)
 800edce:	881b      	ldrh	r3, [r3, #0]
 800edd0:	b29a      	uxth	r2, r3
 800edd2:	4b37      	ldr	r3, [pc, #220]	@ (800eeb0 <SPI_Handler+0xf8>)
 800edd4:	881b      	ldrh	r3, [r3, #0]
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	429a      	cmp	r2, r3
 800edda:	d062      	beq.n	800eea2 <SPI_Handler+0xea>
        {
        	uint8_t byte = spiRingBuffer[spiTail];
 800eddc:	4b34      	ldr	r3, [pc, #208]	@ (800eeb0 <SPI_Handler+0xf8>)
 800edde:	881b      	ldrh	r3, [r3, #0]
 800ede0:	b29b      	uxth	r3, r3
 800ede2:	461a      	mov	r2, r3
 800ede4:	4b33      	ldr	r3, [pc, #204]	@ (800eeb4 <SPI_Handler+0xfc>)
 800ede6:	5c9b      	ldrb	r3, [r3, r2]
 800ede8:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
        	spiTail = (spiTail + 1) % SPI_RING_BUFFER_SIZE;
 800edec:	4b30      	ldr	r3, [pc, #192]	@ (800eeb0 <SPI_Handler+0xf8>)
 800edee:	881b      	ldrh	r3, [r3, #0]
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	3301      	adds	r3, #1
 800edf4:	425a      	negs	r2, r3
 800edf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800edfa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800edfe:	bf58      	it	pl
 800ee00:	4253      	negpl	r3, r2
 800ee02:	b29a      	uxth	r2, r3
 800ee04:	4b2a      	ldr	r3, [pc, #168]	@ (800eeb0 <SPI_Handler+0xf8>)
 800ee06:	801a      	strh	r2, [r3, #0]

        	if(byte == '{')
 800ee08:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800ee0c:	2b7b      	cmp	r3, #123	@ 0x7b
 800ee0e:	d111      	bne.n	800ee34 <SPI_Handler+0x7c>
        	{
        		collecting = true;
 800ee10:	2301      	movs	r3, #1
 800ee12:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        		index = 0;
 800ee16:	2300      	movs	r3, #0
 800ee18:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        		jsonBuffer[index++] = byte;
 800ee1c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ee20:	1c5a      	adds	r2, r3, #1
 800ee22:	f887 208f 	strb.w	r2, [r7, #143]	@ 0x8f
 800ee26:	3390      	adds	r3, #144	@ 0x90
 800ee28:	443b      	add	r3, r7
 800ee2a:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800ee2e:	f803 2c84 	strb.w	r2, [r3, #-132]
 800ee32:	e7cb      	b.n	800edcc <SPI_Handler+0x14>
        	}
        	else if(collecting)
 800ee34:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d0c7      	beq.n	800edcc <SPI_Handler+0x14>
        	{
        		if(index < SPI_RING_BUFFER_SIZE - 1)
 800ee3c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ee40:	2b7e      	cmp	r3, #126	@ 0x7e
 800ee42:	d827      	bhi.n	800ee94 <SPI_Handler+0xdc>
        		{
        			jsonBuffer[index++] = byte;
 800ee44:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ee48:	1c5a      	adds	r2, r3, #1
 800ee4a:	f887 208f 	strb.w	r2, [r7, #143]	@ 0x8f
 800ee4e:	3390      	adds	r3, #144	@ 0x90
 800ee50:	443b      	add	r3, r7
 800ee52:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800ee56:	f803 2c84 	strb.w	r2, [r3, #-132]
        			if(byte == '}')
 800ee5a:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800ee5e:	2b7d      	cmp	r3, #125	@ 0x7d
 800ee60:	d1b4      	bne.n	800edcc <SPI_Handler+0x14>
        			{
        				jsonBuffer[index] = '\0';
 800ee62:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ee66:	3390      	adds	r3, #144	@ 0x90
 800ee68:	443b      	add	r3, r7
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f803 2c84 	strb.w	r2, [r3, #-132]
        				safe_printf("JSON received: %s\n", jsonBuffer);
 800ee70:	f107 030c 	add.w	r3, r7, #12
 800ee74:	4619      	mov	r1, r3
 800ee76:	4810      	ldr	r0, [pc, #64]	@ (800eeb8 <SPI_Handler+0x100>)
 800ee78:	f001 f84e 	bl	800ff18 <safe_printf>
        				process_spi_json(jsonBuffer);
 800ee7c:	f107 030c 	add.w	r3, r7, #12
 800ee80:	4618      	mov	r0, r3
 800ee82:	f000 f81b 	bl	800eebc <process_spi_json>
        				collecting = false;
 800ee86:	2300      	movs	r3, #0
 800ee88:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        				index = 0;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800ee92:	e79b      	b.n	800edcc <SPI_Handler+0x14>
        			}
        		}
        		else
        		{
        			collecting = false;
 800ee94:	2300      	movs	r3, #0
 800ee96:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        			index = 0;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800eea0:	e794      	b.n	800edcc <SPI_Handler+0x14>
        		}
        	}
        }
        else
        {
        	vTaskDelay(pdMS_TO_TICKS(5));
 800eea2:	2005      	movs	r0, #5
 800eea4:	f005 fcf2 	bl	801488c <vTaskDelay>
        if(spiHead != spiTail)
 800eea8:	e790      	b.n	800edcc <SPI_Handler+0x14>
 800eeaa:	bf00      	nop
 800eeac:	200011b8 	.word	0x200011b8
 800eeb0:	200011ba 	.word	0x200011ba
 800eeb4:	20001138 	.word	0x20001138
 800eeb8:	0801bba8 	.word	0x0801bba8

0800eebc <process_spi_json>:
    }
}


void process_spi_json(uint8_t *jsonBuffer)
{
 800eebc:	b590      	push	{r4, r7, lr}
 800eebe:	b089      	sub	sp, #36	@ 0x24
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
	uint8_t deviceState;
	GPIO_PinState state;
	int deviceIndex = -1;
 800eec4:	f04f 33ff 	mov.w	r3, #4294967295
 800eec8:	61fb      	str	r3, [r7, #28]
	cJSON *jsonObj = cJSON_Parse((char *)jsonBuffer);
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f7fd f9c8 	bl	800c260 <cJSON_Parse>
 800eed0:	61b8      	str	r0, [r7, #24]
	if(jsonObj)
 800eed2:	69bb      	ldr	r3, [r7, #24]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	f000 80b8 	beq.w	800f04a <process_spi_json+0x18e>
	{
		cJSON *device = cJSON_GetObjectItem(jsonObj, "device");
 800eeda:	495e      	ldr	r1, [pc, #376]	@ (800f054 <process_spi_json+0x198>)
 800eedc:	69b8      	ldr	r0, [r7, #24]
 800eede:	f7fd fff3 	bl	800cec8 <cJSON_GetObjectItem>
 800eee2:	6178      	str	r0, [r7, #20]
		if(device)
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d03c      	beq.n	800ef64 <process_spi_json+0xa8>
		{
			if(strcmp(device->valuestring, "L1") == 0) deviceIndex = 0;
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	691b      	ldr	r3, [r3, #16]
 800eeee:	495a      	ldr	r1, [pc, #360]	@ (800f058 <process_spi_json+0x19c>)
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7f9 f98d 	bl	8008210 <strcmp>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d102      	bne.n	800ef02 <process_spi_json+0x46>
 800eefc:	2300      	movs	r3, #0
 800eefe:	61fb      	str	r3, [r7, #28]
 800ef00:	e030      	b.n	800ef64 <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "L2") == 0) deviceIndex = 1;
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	691b      	ldr	r3, [r3, #16]
 800ef06:	4955      	ldr	r1, [pc, #340]	@ (800f05c <process_spi_json+0x1a0>)
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7f9 f981 	bl	8008210 <strcmp>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d102      	bne.n	800ef1a <process_spi_json+0x5e>
 800ef14:	2301      	movs	r3, #1
 800ef16:	61fb      	str	r3, [r7, #28]
 800ef18:	e024      	b.n	800ef64 <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "L3") == 0) deviceIndex = 2;
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	691b      	ldr	r3, [r3, #16]
 800ef1e:	4950      	ldr	r1, [pc, #320]	@ (800f060 <process_spi_json+0x1a4>)
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7f9 f975 	bl	8008210 <strcmp>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d102      	bne.n	800ef32 <process_spi_json+0x76>
 800ef2c:	2302      	movs	r3, #2
 800ef2e:	61fb      	str	r3, [r7, #28]
 800ef30:	e018      	b.n	800ef64 <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "L4") == 0) deviceIndex = 3;
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	691b      	ldr	r3, [r3, #16]
 800ef36:	494b      	ldr	r1, [pc, #300]	@ (800f064 <process_spi_json+0x1a8>)
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7f9 f969 	bl	8008210 <strcmp>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d102      	bne.n	800ef4a <process_spi_json+0x8e>
 800ef44:	2303      	movs	r3, #3
 800ef46:	61fb      	str	r3, [r7, #28]
 800ef48:	e00c      	b.n	800ef64 <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "D1") == 0)
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	691b      	ldr	r3, [r3, #16]
 800ef4e:	4946      	ldr	r1, [pc, #280]	@ (800f068 <process_spi_json+0x1ac>)
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7f9 f95d 	bl	8008210 <strcmp>
 800ef56:	4603      	mov	r3, r0
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d103      	bne.n	800ef64 <process_spi_json+0xa8>
			{
				HAL_GPIO_TogglePin(DISP_BACKLIT_GPIO_Port, DISP_BACKLIT_Pin);
 800ef5c:	2101      	movs	r1, #1
 800ef5e:	4843      	ldr	r0, [pc, #268]	@ (800f06c <process_spi_json+0x1b0>)
 800ef60:	f001 fbe1 	bl	8010726 <HAL_GPIO_TogglePin>
			}
		}
		if(deviceIndex != -1)
 800ef64:	69fb      	ldr	r3, [r7, #28]
 800ef66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef6a:	d06e      	beq.n	800f04a <process_spi_json+0x18e>
		{
			cJSON *status = cJSON_CreateObject();
 800ef6c:	f7fe f8d0 	bl	800d110 <cJSON_CreateObject>
 800ef70:	6138      	str	r0, [r7, #16]
			if(xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800ef72:	4b3f      	ldr	r3, [pc, #252]	@ (800f070 <process_spi_json+0x1b4>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	2164      	movs	r1, #100	@ 0x64
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f005 f8ab 	bl	80140d4 <xQueueSemaphoreTake>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	d15a      	bne.n	800f03a <process_spi_json+0x17e>
			{
				HAL_GPIO_TogglePin(led_ports[deviceIndex], led_pins[deviceIndex]);
 800ef84:	4a3b      	ldr	r2, [pc, #236]	@ (800f074 <process_spi_json+0x1b8>)
 800ef86:	69fb      	ldr	r3, [r7, #28]
 800ef88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ef8c:	493a      	ldr	r1, [pc, #232]	@ (800f078 <process_spi_json+0x1bc>)
 800ef8e:	69fb      	ldr	r3, [r7, #28]
 800ef90:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ef94:	4619      	mov	r1, r3
 800ef96:	4610      	mov	r0, r2
 800ef98:	f001 fbc5 	bl	8010726 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(relay_ports[deviceIndex], relay_pins[deviceIndex]);
 800ef9c:	4a37      	ldr	r2, [pc, #220]	@ (800f07c <process_spi_json+0x1c0>)
 800ef9e:	69fb      	ldr	r3, [r7, #28]
 800efa0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800efa4:	4936      	ldr	r1, [pc, #216]	@ (800f080 <process_spi_json+0x1c4>)
 800efa6:	69fb      	ldr	r3, [r7, #28]
 800efa8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800efac:	4619      	mov	r1, r3
 800efae:	4610      	mov	r0, r2
 800efb0:	f001 fbb9 	bl	8010726 <HAL_GPIO_TogglePin>
				state = HAL_GPIO_ReadPin(led_ports[deviceIndex], led_pins[deviceIndex]);
 800efb4:	4a2f      	ldr	r2, [pc, #188]	@ (800f074 <process_spi_json+0x1b8>)
 800efb6:	69fb      	ldr	r3, [r7, #28]
 800efb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800efbc:	492e      	ldr	r1, [pc, #184]	@ (800f078 <process_spi_json+0x1bc>)
 800efbe:	69fb      	ldr	r3, [r7, #28]
 800efc0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800efc4:	4619      	mov	r1, r3
 800efc6:	4610      	mov	r0, r2
 800efc8:	f001 fb7c 	bl	80106c4 <HAL_GPIO_ReadPin>
 800efcc:	4603      	mov	r3, r0
 800efce:	73fb      	strb	r3, [r7, #15]
				deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800efd0:	7bfb      	ldrb	r3, [r7, #15]
 800efd2:	2b01      	cmp	r3, #1
 800efd4:	bf0c      	ite	eq
 800efd6:	2301      	moveq	r3, #1
 800efd8:	2300      	movne	r3, #0
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	73bb      	strb	r3, [r7, #14]
				global_device_states[deviceIndex] = deviceState;
 800efde:	7bba      	ldrb	r2, [r7, #14]
 800efe0:	4928      	ldr	r1, [pc, #160]	@ (800f084 <process_spi_json+0x1c8>)
 800efe2:	69fb      	ldr	r3, [r7, #28]
 800efe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				cJSON_AddNumberToObject(status, devices[deviceIndex], global_device_states[deviceIndex]);
 800efe8:	4a27      	ldr	r2, [pc, #156]	@ (800f088 <process_spi_json+0x1cc>)
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eff0:	4a24      	ldr	r2, [pc, #144]	@ (800f084 <process_spi_json+0x1c8>)
 800eff2:	69fb      	ldr	r3, [r7, #28]
 800eff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eff8:	4618      	mov	r0, r3
 800effa:	f7f9 fac3 	bl	8008584 <__aeabi_i2d>
 800effe:	4602      	mov	r2, r0
 800f000:	460b      	mov	r3, r1
 800f002:	ec43 2b10 	vmov	d0, r2, r3
 800f006:	4621      	mov	r1, r4
 800f008:	6938      	ldr	r0, [r7, #16]
 800f00a:	f7fe f813 	bl	800d034 <cJSON_AddNumberToObject>
				safe_printf("TOUCH: Device %d set to %s\n", deviceIndex + 1, global_device_states[deviceIndex] ? "ON" : "OFF");
 800f00e:	69fb      	ldr	r3, [r7, #28]
 800f010:	1c59      	adds	r1, r3, #1
 800f012:	4a1c      	ldr	r2, [pc, #112]	@ (800f084 <process_spi_json+0x1c8>)
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d001      	beq.n	800f022 <process_spi_json+0x166>
 800f01e:	4b1b      	ldr	r3, [pc, #108]	@ (800f08c <process_spi_json+0x1d0>)
 800f020:	e000      	b.n	800f024 <process_spi_json+0x168>
 800f022:	4b1b      	ldr	r3, [pc, #108]	@ (800f090 <process_spi_json+0x1d4>)
 800f024:	461a      	mov	r2, r3
 800f026:	481b      	ldr	r0, [pc, #108]	@ (800f094 <process_spi_json+0x1d8>)
 800f028:	f000 ff76 	bl	800ff18 <safe_printf>
				xSemaphoreGive(deviceStateMutex);
 800f02c:	4b10      	ldr	r3, [pc, #64]	@ (800f070 <process_spi_json+0x1b4>)
 800f02e:	6818      	ldr	r0, [r3, #0]
 800f030:	2300      	movs	r3, #0
 800f032:	2200      	movs	r2, #0
 800f034:	2100      	movs	r1, #0
 800f036:	f004 fdbb 	bl	8013bb0 <xQueueGenericSend>
			}
			updateToDisplayMenu();
 800f03a:	f7fe f8b3 	bl	800d1a4 <updateToDisplayMenu>
			send_json_response(status);
 800f03e:	6938      	ldr	r0, [r7, #16]
 800f040:	f000 fc7a 	bl	800f938 <send_json_response>
			cJSON_Delete(status);
 800f044:	6938      	ldr	r0, [r7, #16]
 800f046:	f7fc f8f5 	bl	800b234 <cJSON_Delete>
		}
	}
}
 800f04a:	bf00      	nop
 800f04c:	3724      	adds	r7, #36	@ 0x24
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd90      	pop	{r4, r7, pc}
 800f052:	bf00      	nop
 800f054:	0801bbbc 	.word	0x0801bbbc
 800f058:	0801bbc4 	.word	0x0801bbc4
 800f05c:	0801bbc8 	.word	0x0801bbc8
 800f060:	0801bbcc 	.word	0x0801bbcc
 800f064:	0801bbd0 	.word	0x0801bbd0
 800f068:	0801bbd4 	.word	0x0801bbd4
 800f06c:	40020000 	.word	0x40020000
 800f070:	20001310 	.word	0x20001310
 800f074:	2000004c 	.word	0x2000004c
 800f078:	2000006c 	.word	0x2000006c
 800f07c:	2000005c 	.word	0x2000005c
 800f080:	20000074 	.word	0x20000074
 800f084:	200014d4 	.word	0x200014d4
 800f088:	2000003c 	.word	0x2000003c
 800f08c:	0801bbd8 	.word	0x0801bbd8
 800f090:	0801bbdc 	.word	0x0801bbdc
 800f094:	0801bbe0 	.word	0x0801bbe0

0800f098 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	4a1b      	ldr	r2, [pc, #108]	@ (800f114 <HAL_SPI_RxCpltCallback+0x7c>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d125      	bne.n	800f0f6 <HAL_SPI_RxCpltCallback+0x5e>
    {
        uint16_t nextHead = (spiHead + 1) % SPI_RING_BUFFER_SIZE;
 800f0aa:	4b1b      	ldr	r3, [pc, #108]	@ (800f118 <HAL_SPI_RxCpltCallback+0x80>)
 800f0ac:	881b      	ldrh	r3, [r3, #0]
 800f0ae:	b29b      	uxth	r3, r3
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	425a      	negs	r2, r3
 800f0b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f0b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f0bc:	bf58      	it	pl
 800f0be:	4253      	negpl	r3, r2
 800f0c0:	81fb      	strh	r3, [r7, #14]
        if(nextHead != spiTail)
 800f0c2:	4b16      	ldr	r3, [pc, #88]	@ (800f11c <HAL_SPI_RxCpltCallback+0x84>)
 800f0c4:	881b      	ldrh	r3, [r3, #0]
 800f0c6:	b29b      	uxth	r3, r3
 800f0c8:	89fa      	ldrh	r2, [r7, #14]
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d00b      	beq.n	800f0e6 <HAL_SPI_RxCpltCallback+0x4e>
        {
        	spiRingBuffer[spiHead] = spiRxByte;
 800f0ce:	4b12      	ldr	r3, [pc, #72]	@ (800f118 <HAL_SPI_RxCpltCallback+0x80>)
 800f0d0:	881b      	ldrh	r3, [r3, #0]
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	4b12      	ldr	r3, [pc, #72]	@ (800f120 <HAL_SPI_RxCpltCallback+0x88>)
 800f0d8:	7819      	ldrb	r1, [r3, #0]
 800f0da:	4b12      	ldr	r3, [pc, #72]	@ (800f124 <HAL_SPI_RxCpltCallback+0x8c>)
 800f0dc:	5499      	strb	r1, [r3, r2]
        	spiHead = nextHead;
 800f0de:	4a0e      	ldr	r2, [pc, #56]	@ (800f118 <HAL_SPI_RxCpltCallback+0x80>)
 800f0e0:	89fb      	ldrh	r3, [r7, #14]
 800f0e2:	8013      	strh	r3, [r2, #0]
 800f0e4:	e002      	b.n	800f0ec <HAL_SPI_RxCpltCallback+0x54>
        }
        else
        {
        	safe_printf("SPI ring buffer overflow\n");
 800f0e6:	4810      	ldr	r0, [pc, #64]	@ (800f128 <HAL_SPI_RxCpltCallback+0x90>)
 800f0e8:	f000 ff16 	bl	800ff18 <safe_printf>
        }
        HAL_SPI_Receive_IT(&hspi2, &spiRxByte, 1);
 800f0ec:	2201      	movs	r2, #1
 800f0ee:	490c      	ldr	r1, [pc, #48]	@ (800f120 <HAL_SPI_RxCpltCallback+0x88>)
 800f0f0:	480e      	ldr	r0, [pc, #56]	@ (800f12c <HAL_SPI_RxCpltCallback+0x94>)
 800f0f2:	f002 fafd 	bl	80116f0 <HAL_SPI_Receive_IT>
    }
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	60bb      	str	r3, [r7, #8]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	68db      	ldr	r3, [r3, #12]
 800f100:	60bb      	str	r3, [r7, #8]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	689b      	ldr	r3, [r3, #8]
 800f108:	60bb      	str	r3, [r7, #8]
 800f10a:	68bb      	ldr	r3, [r7, #8]
}
 800f10c:	bf00      	nop
 800f10e:	3710      	adds	r7, #16
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}
 800f114:	40003800 	.word	0x40003800
 800f118:	200011b8 	.word	0x200011b8
 800f11c:	200011ba 	.word	0x200011ba
 800f120:	200011bc 	.word	0x200011bc
 800f124:	20001138 	.word	0x20001138
 800f128:	0801bbfc 	.word	0x0801bbfc
 800f12c:	20000fb0 	.word	0x20000fb0

0800f130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f130:	b480      	push	{r7}
 800f132:	b083      	sub	sp, #12
 800f134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f136:	2300      	movs	r3, #0
 800f138:	607b      	str	r3, [r7, #4]
 800f13a:	4b10      	ldr	r3, [pc, #64]	@ (800f17c <HAL_MspInit+0x4c>)
 800f13c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f13e:	4a0f      	ldr	r2, [pc, #60]	@ (800f17c <HAL_MspInit+0x4c>)
 800f140:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f144:	6453      	str	r3, [r2, #68]	@ 0x44
 800f146:	4b0d      	ldr	r3, [pc, #52]	@ (800f17c <HAL_MspInit+0x4c>)
 800f148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f14a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f14e:	607b      	str	r3, [r7, #4]
 800f150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f152:	2300      	movs	r3, #0
 800f154:	603b      	str	r3, [r7, #0]
 800f156:	4b09      	ldr	r3, [pc, #36]	@ (800f17c <HAL_MspInit+0x4c>)
 800f158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f15a:	4a08      	ldr	r2, [pc, #32]	@ (800f17c <HAL_MspInit+0x4c>)
 800f15c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f160:	6413      	str	r3, [r2, #64]	@ 0x40
 800f162:	4b06      	ldr	r3, [pc, #24]	@ (800f17c <HAL_MspInit+0x4c>)
 800f164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f16a:	603b      	str	r3, [r7, #0]
 800f16c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f16e:	bf00      	nop
 800f170:	370c      	adds	r7, #12
 800f172:	46bd      	mov	sp, r7
 800f174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f178:	4770      	bx	lr
 800f17a:	bf00      	nop
 800f17c:	40023800 	.word	0x40023800

0800f180 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b08e      	sub	sp, #56	@ 0x38
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f18c:	2200      	movs	r2, #0
 800f18e:	601a      	str	r2, [r3, #0]
 800f190:	605a      	str	r2, [r3, #4]
 800f192:	609a      	str	r2, [r3, #8]
 800f194:	60da      	str	r2, [r3, #12]
 800f196:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	4a66      	ldr	r2, [pc, #408]	@ (800f338 <HAL_SPI_MspInit+0x1b8>)
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	d12c      	bne.n	800f1fc <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	623b      	str	r3, [r7, #32]
 800f1a6:	4b65      	ldr	r3, [pc, #404]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f1a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1aa:	4a64      	ldr	r2, [pc, #400]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f1ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800f1b0:	6453      	str	r3, [r2, #68]	@ 0x44
 800f1b2:	4b62      	ldr	r3, [pc, #392]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f1b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f1ba:	623b      	str	r3, [r7, #32]
 800f1bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f1be:	2300      	movs	r3, #0
 800f1c0:	61fb      	str	r3, [r7, #28]
 800f1c2:	4b5e      	ldr	r3, [pc, #376]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f1c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1c6:	4a5d      	ldr	r2, [pc, #372]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f1c8:	f043 0301 	orr.w	r3, r3, #1
 800f1cc:	6313      	str	r3, [r2, #48]	@ 0x30
 800f1ce:	4b5b      	ldr	r3, [pc, #364]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f1d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1d2:	f003 0301 	and.w	r3, r3, #1
 800f1d6:	61fb      	str	r3, [r7, #28]
 800f1d8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800f1da:	23a0      	movs	r3, #160	@ 0xa0
 800f1dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1de:	2302      	movs	r3, #2
 800f1e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f1e6:	2303      	movs	r3, #3
 800f1e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800f1ea:	2305      	movs	r3, #5
 800f1ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f1ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	4852      	ldr	r0, [pc, #328]	@ (800f340 <HAL_SPI_MspInit+0x1c0>)
 800f1f6:	f001 f8d1 	bl	801039c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 800f1fa:	e099      	b.n	800f330 <HAL_SPI_MspInit+0x1b0>
  else if(hspi->Instance==SPI2)
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	4a50      	ldr	r2, [pc, #320]	@ (800f344 <HAL_SPI_MspInit+0x1c4>)
 800f202:	4293      	cmp	r3, r2
 800f204:	d153      	bne.n	800f2ae <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800f206:	2300      	movs	r3, #0
 800f208:	61bb      	str	r3, [r7, #24]
 800f20a:	4b4c      	ldr	r3, [pc, #304]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f20c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f20e:	4a4b      	ldr	r2, [pc, #300]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f210:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f214:	6413      	str	r3, [r2, #64]	@ 0x40
 800f216:	4b49      	ldr	r3, [pc, #292]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f21a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f21e:	61bb      	str	r3, [r7, #24]
 800f220:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f222:	2300      	movs	r3, #0
 800f224:	617b      	str	r3, [r7, #20]
 800f226:	4b45      	ldr	r3, [pc, #276]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f22a:	4a44      	ldr	r2, [pc, #272]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f22c:	f043 0304 	orr.w	r3, r3, #4
 800f230:	6313      	str	r3, [r2, #48]	@ 0x30
 800f232:	4b42      	ldr	r3, [pc, #264]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f236:	f003 0304 	and.w	r3, r3, #4
 800f23a:	617b      	str	r3, [r7, #20]
 800f23c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f23e:	2300      	movs	r3, #0
 800f240:	613b      	str	r3, [r7, #16]
 800f242:	4b3e      	ldr	r3, [pc, #248]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f246:	4a3d      	ldr	r2, [pc, #244]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f248:	f043 0302 	orr.w	r3, r3, #2
 800f24c:	6313      	str	r3, [r2, #48]	@ 0x30
 800f24e:	4b3b      	ldr	r3, [pc, #236]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f252:	f003 0302 	and.w	r3, r3, #2
 800f256:	613b      	str	r3, [r7, #16]
 800f258:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800f25a:	2302      	movs	r3, #2
 800f25c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f25e:	2302      	movs	r3, #2
 800f260:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f262:	2300      	movs	r3, #0
 800f264:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f266:	2303      	movs	r3, #3
 800f268:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800f26a:	2307      	movs	r3, #7
 800f26c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f26e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f272:	4619      	mov	r1, r3
 800f274:	4834      	ldr	r0, [pc, #208]	@ (800f348 <HAL_SPI_MspInit+0x1c8>)
 800f276:	f001 f891 	bl	801039c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800f27a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f27e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f280:	2302      	movs	r3, #2
 800f282:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f284:	2300      	movs	r3, #0
 800f286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f288:	2303      	movs	r3, #3
 800f28a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f28c:	2305      	movs	r3, #5
 800f28e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f294:	4619      	mov	r1, r3
 800f296:	482d      	ldr	r0, [pc, #180]	@ (800f34c <HAL_SPI_MspInit+0x1cc>)
 800f298:	f001 f880 	bl	801039c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800f29c:	2200      	movs	r2, #0
 800f29e:	2105      	movs	r1, #5
 800f2a0:	2024      	movs	r0, #36	@ 0x24
 800f2a2:	f000 ffbf 	bl	8010224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800f2a6:	2024      	movs	r0, #36	@ 0x24
 800f2a8:	f000 ffd8 	bl	801025c <HAL_NVIC_EnableIRQ>
}
 800f2ac:	e040      	b.n	800f330 <HAL_SPI_MspInit+0x1b0>
  else if(hspi->Instance==SPI3)
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	4a27      	ldr	r2, [pc, #156]	@ (800f350 <HAL_SPI_MspInit+0x1d0>)
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d13b      	bne.n	800f330 <HAL_SPI_MspInit+0x1b0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	60fb      	str	r3, [r7, #12]
 800f2bc:	4b1f      	ldr	r3, [pc, #124]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f2be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2c0:	4a1e      	ldr	r2, [pc, #120]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f2c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f2c6:	6413      	str	r3, [r2, #64]	@ 0x40
 800f2c8:	4b1c      	ldr	r3, [pc, #112]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f2ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f2d0:	60fb      	str	r3, [r7, #12]
 800f2d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	60bb      	str	r3, [r7, #8]
 800f2d8:	4b18      	ldr	r3, [pc, #96]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f2da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2dc:	4a17      	ldr	r2, [pc, #92]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f2de:	f043 0302 	orr.w	r3, r3, #2
 800f2e2:	6313      	str	r3, [r2, #48]	@ 0x30
 800f2e4:	4b15      	ldr	r3, [pc, #84]	@ (800f33c <HAL_SPI_MspInit+0x1bc>)
 800f2e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2e8:	f003 0302 	and.w	r3, r3, #2
 800f2ec:	60bb      	str	r3, [r7, #8]
 800f2ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f2f4:	2302      	movs	r3, #2
 800f2f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f2fc:	2303      	movs	r3, #3
 800f2fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800f300:	2307      	movs	r3, #7
 800f302:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f308:	4619      	mov	r1, r3
 800f30a:	4810      	ldr	r0, [pc, #64]	@ (800f34c <HAL_SPI_MspInit+0x1cc>)
 800f30c:	f001 f846 	bl	801039c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800f310:	2318      	movs	r3, #24
 800f312:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f314:	2302      	movs	r3, #2
 800f316:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f318:	2300      	movs	r3, #0
 800f31a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f31c:	2303      	movs	r3, #3
 800f31e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800f320:	2306      	movs	r3, #6
 800f322:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f324:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f328:	4619      	mov	r1, r3
 800f32a:	4808      	ldr	r0, [pc, #32]	@ (800f34c <HAL_SPI_MspInit+0x1cc>)
 800f32c:	f001 f836 	bl	801039c <HAL_GPIO_Init>
}
 800f330:	bf00      	nop
 800f332:	3738      	adds	r7, #56	@ 0x38
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	40013000 	.word	0x40013000
 800f33c:	40023800 	.word	0x40023800
 800f340:	40020000 	.word	0x40020000
 800f344:	40003800 	.word	0x40003800
 800f348:	40020800 	.word	0x40020800
 800f34c:	40020400 	.word	0x40020400
 800f350:	40003c00 	.word	0x40003c00

0800f354 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b08e      	sub	sp, #56	@ 0x38
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f35c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f360:	2200      	movs	r2, #0
 800f362:	601a      	str	r2, [r3, #0]
 800f364:	605a      	str	r2, [r3, #4]
 800f366:	609a      	str	r2, [r3, #8]
 800f368:	60da      	str	r2, [r3, #12]
 800f36a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	4a63      	ldr	r2, [pc, #396]	@ (800f500 <HAL_UART_MspInit+0x1ac>)
 800f372:	4293      	cmp	r3, r2
 800f374:	d135      	bne.n	800f3e2 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800f376:	2300      	movs	r3, #0
 800f378:	623b      	str	r3, [r7, #32]
 800f37a:	4b62      	ldr	r3, [pc, #392]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f37c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f37e:	4a61      	ldr	r2, [pc, #388]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f380:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f384:	6413      	str	r3, [r2, #64]	@ 0x40
 800f386:	4b5f      	ldr	r3, [pc, #380]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f38a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f38e:	623b      	str	r3, [r7, #32]
 800f390:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f392:	2300      	movs	r3, #0
 800f394:	61fb      	str	r3, [r7, #28]
 800f396:	4b5b      	ldr	r3, [pc, #364]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f39a:	4a5a      	ldr	r2, [pc, #360]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f39c:	f043 0304 	orr.w	r3, r3, #4
 800f3a0:	6313      	str	r3, [r2, #48]	@ 0x30
 800f3a2:	4b58      	ldr	r3, [pc, #352]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f3a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3a6:	f003 0304 	and.w	r3, r3, #4
 800f3aa:	61fb      	str	r3, [r7, #28]
 800f3ac:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800f3ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800f3b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f3b4:	2302      	movs	r3, #2
 800f3b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f3bc:	2303      	movs	r3, #3
 800f3be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800f3c0:	2308      	movs	r3, #8
 800f3c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f3c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	484f      	ldr	r0, [pc, #316]	@ (800f508 <HAL_UART_MspInit+0x1b4>)
 800f3cc:	f000 ffe6 	bl	801039c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	2100      	movs	r1, #0
 800f3d4:	2034      	movs	r0, #52	@ 0x34
 800f3d6:	f000 ff25 	bl	8010224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800f3da:	2034      	movs	r0, #52	@ 0x34
 800f3dc:	f000 ff3e 	bl	801025c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800f3e0:	e089      	b.n	800f4f6 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART2)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	4a49      	ldr	r2, [pc, #292]	@ (800f50c <HAL_UART_MspInit+0x1b8>)
 800f3e8:	4293      	cmp	r3, r2
 800f3ea:	d12c      	bne.n	800f446 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	61bb      	str	r3, [r7, #24]
 800f3f0:	4b44      	ldr	r3, [pc, #272]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f3f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3f4:	4a43      	ldr	r2, [pc, #268]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f3f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f3fa:	6413      	str	r3, [r2, #64]	@ 0x40
 800f3fc:	4b41      	ldr	r3, [pc, #260]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f3fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f404:	61bb      	str	r3, [r7, #24]
 800f406:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f408:	2300      	movs	r3, #0
 800f40a:	617b      	str	r3, [r7, #20]
 800f40c:	4b3d      	ldr	r3, [pc, #244]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f40e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f410:	4a3c      	ldr	r2, [pc, #240]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f412:	f043 0301 	orr.w	r3, r3, #1
 800f416:	6313      	str	r3, [r2, #48]	@ 0x30
 800f418:	4b3a      	ldr	r3, [pc, #232]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f41a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f41c:	f003 0301 	and.w	r3, r3, #1
 800f420:	617b      	str	r3, [r7, #20]
 800f422:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800f424:	230c      	movs	r3, #12
 800f426:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f428:	2302      	movs	r3, #2
 800f42a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f42c:	2300      	movs	r3, #0
 800f42e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f430:	2303      	movs	r3, #3
 800f432:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800f434:	2307      	movs	r3, #7
 800f436:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f438:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f43c:	4619      	mov	r1, r3
 800f43e:	4834      	ldr	r0, [pc, #208]	@ (800f510 <HAL_UART_MspInit+0x1bc>)
 800f440:	f000 ffac 	bl	801039c <HAL_GPIO_Init>
}
 800f444:	e057      	b.n	800f4f6 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	4a32      	ldr	r2, [pc, #200]	@ (800f514 <HAL_UART_MspInit+0x1c0>)
 800f44c:	4293      	cmp	r3, r2
 800f44e:	d152      	bne.n	800f4f6 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800f450:	2300      	movs	r3, #0
 800f452:	613b      	str	r3, [r7, #16]
 800f454:	4b2b      	ldr	r3, [pc, #172]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f458:	4a2a      	ldr	r2, [pc, #168]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f45a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f45e:	6413      	str	r3, [r2, #64]	@ 0x40
 800f460:	4b28      	ldr	r3, [pc, #160]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f464:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f468:	613b      	str	r3, [r7, #16]
 800f46a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f46c:	2300      	movs	r3, #0
 800f46e:	60fb      	str	r3, [r7, #12]
 800f470:	4b24      	ldr	r3, [pc, #144]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f474:	4a23      	ldr	r2, [pc, #140]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f476:	f043 0304 	orr.w	r3, r3, #4
 800f47a:	6313      	str	r3, [r2, #48]	@ 0x30
 800f47c:	4b21      	ldr	r3, [pc, #132]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f47e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f480:	f003 0304 	and.w	r3, r3, #4
 800f484:	60fb      	str	r3, [r7, #12]
 800f486:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f488:	2300      	movs	r3, #0
 800f48a:	60bb      	str	r3, [r7, #8]
 800f48c:	4b1d      	ldr	r3, [pc, #116]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f48e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f490:	4a1c      	ldr	r2, [pc, #112]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f492:	f043 0302 	orr.w	r3, r3, #2
 800f496:	6313      	str	r3, [r2, #48]	@ 0x30
 800f498:	4b1a      	ldr	r3, [pc, #104]	@ (800f504 <HAL_UART_MspInit+0x1b0>)
 800f49a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f49c:	f003 0302 	and.w	r3, r3, #2
 800f4a0:	60bb      	str	r3, [r7, #8]
 800f4a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800f4a4:	2320      	movs	r3, #32
 800f4a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4a8:	2302      	movs	r3, #2
 800f4aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4b0:	2303      	movs	r3, #3
 800f4b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800f4b4:	2307      	movs	r3, #7
 800f4b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f4b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f4bc:	4619      	mov	r1, r3
 800f4be:	4812      	ldr	r0, [pc, #72]	@ (800f508 <HAL_UART_MspInit+0x1b4>)
 800f4c0:	f000 ff6c 	bl	801039c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800f4c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f4c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4ca:	2302      	movs	r3, #2
 800f4cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4d2:	2303      	movs	r3, #3
 800f4d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800f4d6:	2307      	movs	r3, #7
 800f4d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f4da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f4de:	4619      	mov	r1, r3
 800f4e0:	480d      	ldr	r0, [pc, #52]	@ (800f518 <HAL_UART_MspInit+0x1c4>)
 800f4e2:	f000 ff5b 	bl	801039c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	2106      	movs	r1, #6
 800f4ea:	2027      	movs	r0, #39	@ 0x27
 800f4ec:	f000 fe9a 	bl	8010224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800f4f0:	2027      	movs	r0, #39	@ 0x27
 800f4f2:	f000 feb3 	bl	801025c <HAL_NVIC_EnableIRQ>
}
 800f4f6:	bf00      	nop
 800f4f8:	3738      	adds	r7, #56	@ 0x38
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
 800f4fe:	bf00      	nop
 800f500:	40004c00 	.word	0x40004c00
 800f504:	40023800 	.word	0x40023800
 800f508:	40020800 	.word	0x40020800
 800f50c:	40004400 	.word	0x40004400
 800f510:	40020000 	.word	0x40020000
 800f514:	40004800 	.word	0x40004800
 800f518:	40020400 	.word	0x40020400

0800f51c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b08c      	sub	sp, #48	@ 0x30
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800f524:	2300      	movs	r3, #0
 800f526:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800f528:	2300      	movs	r3, #0
 800f52a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800f52c:	2300      	movs	r3, #0
 800f52e:	60bb      	str	r3, [r7, #8]
 800f530:	4b2f      	ldr	r3, [pc, #188]	@ (800f5f0 <HAL_InitTick+0xd4>)
 800f532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f534:	4a2e      	ldr	r2, [pc, #184]	@ (800f5f0 <HAL_InitTick+0xd4>)
 800f536:	f043 0301 	orr.w	r3, r3, #1
 800f53a:	6453      	str	r3, [r2, #68]	@ 0x44
 800f53c:	4b2c      	ldr	r3, [pc, #176]	@ (800f5f0 <HAL_InitTick+0xd4>)
 800f53e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f540:	f003 0301 	and.w	r3, r3, #1
 800f544:	60bb      	str	r3, [r7, #8]
 800f546:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800f548:	f107 020c 	add.w	r2, r7, #12
 800f54c:	f107 0310 	add.w	r3, r7, #16
 800f550:	4611      	mov	r1, r2
 800f552:	4618      	mov	r0, r3
 800f554:	f001 fa84 	bl	8010a60 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800f558:	f001 fa6e 	bl	8010a38 <HAL_RCC_GetPCLK2Freq>
 800f55c:	4603      	mov	r3, r0
 800f55e:	005b      	lsls	r3, r3, #1
 800f560:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800f562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f564:	4a23      	ldr	r2, [pc, #140]	@ (800f5f4 <HAL_InitTick+0xd8>)
 800f566:	fba2 2303 	umull	r2, r3, r2, r3
 800f56a:	0c9b      	lsrs	r3, r3, #18
 800f56c:	3b01      	subs	r3, #1
 800f56e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800f570:	4b21      	ldr	r3, [pc, #132]	@ (800f5f8 <HAL_InitTick+0xdc>)
 800f572:	4a22      	ldr	r2, [pc, #136]	@ (800f5fc <HAL_InitTick+0xe0>)
 800f574:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800f576:	4b20      	ldr	r3, [pc, #128]	@ (800f5f8 <HAL_InitTick+0xdc>)
 800f578:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800f57c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800f57e:	4a1e      	ldr	r2, [pc, #120]	@ (800f5f8 <HAL_InitTick+0xdc>)
 800f580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f582:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800f584:	4b1c      	ldr	r3, [pc, #112]	@ (800f5f8 <HAL_InitTick+0xdc>)
 800f586:	2200      	movs	r2, #0
 800f588:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f58a:	4b1b      	ldr	r3, [pc, #108]	@ (800f5f8 <HAL_InitTick+0xdc>)
 800f58c:	2200      	movs	r2, #0
 800f58e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f590:	4b19      	ldr	r3, [pc, #100]	@ (800f5f8 <HAL_InitTick+0xdc>)
 800f592:	2200      	movs	r2, #0
 800f594:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800f596:	4818      	ldr	r0, [pc, #96]	@ (800f5f8 <HAL_InitTick+0xdc>)
 800f598:	f002 fdf7 	bl	801218a <HAL_TIM_Base_Init>
 800f59c:	4603      	mov	r3, r0
 800f59e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800f5a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d11b      	bne.n	800f5e2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800f5aa:	4813      	ldr	r0, [pc, #76]	@ (800f5f8 <HAL_InitTick+0xdc>)
 800f5ac:	f002 fe46 	bl	801223c <HAL_TIM_Base_Start_IT>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800f5b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d111      	bne.n	800f5e2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800f5be:	2019      	movs	r0, #25
 800f5c0:	f000 fe4c 	bl	801025c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2b0f      	cmp	r3, #15
 800f5c8:	d808      	bhi.n	800f5dc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	6879      	ldr	r1, [r7, #4]
 800f5ce:	2019      	movs	r0, #25
 800f5d0:	f000 fe28 	bl	8010224 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800f5d4:	4a0a      	ldr	r2, [pc, #40]	@ (800f600 <HAL_InitTick+0xe4>)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6013      	str	r3, [r2, #0]
 800f5da:	e002      	b.n	800f5e2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800f5dc:	2301      	movs	r3, #1
 800f5de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800f5e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3730      	adds	r7, #48	@ 0x30
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}
 800f5ee:	bf00      	nop
 800f5f0:	40023800 	.word	0x40023800
 800f5f4:	431bde83 	.word	0x431bde83
 800f5f8:	200011c0 	.word	0x200011c0
 800f5fc:	40010000 	.word	0x40010000
 800f600:	2000007c 	.word	0x2000007c

0800f604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f604:	b480      	push	{r7}
 800f606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800f608:	bf00      	nop
 800f60a:	e7fd      	b.n	800f608 <NMI_Handler+0x4>

0800f60c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f60c:	b480      	push	{r7}
 800f60e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f610:	bf00      	nop
 800f612:	e7fd      	b.n	800f610 <HardFault_Handler+0x4>

0800f614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f614:	b480      	push	{r7}
 800f616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f618:	bf00      	nop
 800f61a:	e7fd      	b.n	800f618 <MemManage_Handler+0x4>

0800f61c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f61c:	b480      	push	{r7}
 800f61e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f620:	bf00      	nop
 800f622:	e7fd      	b.n	800f620 <BusFault_Handler+0x4>

0800f624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f624:	b480      	push	{r7}
 800f626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f628:	bf00      	nop
 800f62a:	e7fd      	b.n	800f628 <UsageFault_Handler+0x4>

0800f62c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f62c:	b480      	push	{r7}
 800f62e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f630:	bf00      	nop
 800f632:	46bd      	mov	sp, r7
 800f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f638:	4770      	bx	lr

0800f63a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800f63a:	b580      	push	{r7, lr}
 800f63c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800f63e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800f642:	f001 f88b 	bl	801075c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800f646:	bf00      	nop
 800f648:	bd80      	pop	{r7, pc}
	...

0800f64c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800f650:	4802      	ldr	r0, [pc, #8]	@ (800f65c <TIM1_UP_TIM10_IRQHandler+0x10>)
 800f652:	f002 fe63 	bl	801231c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800f656:	bf00      	nop
 800f658:	bd80      	pop	{r7, pc}
 800f65a:	bf00      	nop
 800f65c:	200011c0 	.word	0x200011c0

0800f660 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800f664:	4802      	ldr	r0, [pc, #8]	@ (800f670 <SPI2_IRQHandler+0x10>)
 800f666:	f002 f969 	bl	801193c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800f66a:	bf00      	nop
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	20000fb0 	.word	0x20000fb0

0800f674 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800f678:	4802      	ldr	r0, [pc, #8]	@ (800f684 <USART3_IRQHandler+0x10>)
 800f67a:	f003 f957 	bl	801292c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800f67e:	bf00      	nop
 800f680:	bd80      	pop	{r7, pc}
 800f682:	bf00      	nop
 800f684:	200010f0 	.word	0x200010f0

0800f688 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800f68c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800f690:	f001 f864 	bl	801075c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800f694:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800f698:	f001 f860 	bl	801075c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800f69c:	bf00      	nop
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800f6a4:	4802      	ldr	r0, [pc, #8]	@ (800f6b0 <UART4_IRQHandler+0x10>)
 800f6a6:	f003 f941 	bl	801292c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800f6aa:	bf00      	nop
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	20001060 	.word	0x20001060

0800f6b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	af00      	add	r7, sp, #0
  return 1;
 800f6b8:	2301      	movs	r3, #1
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c2:	4770      	bx	lr

0800f6c4 <_kill>:

int _kill(int pid, int sig)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b082      	sub	sp, #8
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800f6ce:	f008 ffd3 	bl	8018678 <__errno>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	2216      	movs	r2, #22
 800f6d6:	601a      	str	r2, [r3, #0]
  return -1;
 800f6d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3708      	adds	r7, #8
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}

0800f6e4 <_exit>:

void _exit (int status)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800f6ec:	f04f 31ff 	mov.w	r1, #4294967295
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f7ff ffe7 	bl	800f6c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800f6f6:	bf00      	nop
 800f6f8:	e7fd      	b.n	800f6f6 <_exit+0x12>

0800f6fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800f6fa:	b580      	push	{r7, lr}
 800f6fc:	b086      	sub	sp, #24
 800f6fe:	af00      	add	r7, sp, #0
 800f700:	60f8      	str	r0, [r7, #12]
 800f702:	60b9      	str	r1, [r7, #8]
 800f704:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f706:	2300      	movs	r3, #0
 800f708:	617b      	str	r3, [r7, #20]
 800f70a:	e00a      	b.n	800f722 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800f70c:	f3af 8000 	nop.w
 800f710:	4601      	mov	r1, r0
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	1c5a      	adds	r2, r3, #1
 800f716:	60ba      	str	r2, [r7, #8]
 800f718:	b2ca      	uxtb	r2, r1
 800f71a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	3301      	adds	r3, #1
 800f720:	617b      	str	r3, [r7, #20]
 800f722:	697a      	ldr	r2, [r7, #20]
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	429a      	cmp	r2, r3
 800f728:	dbf0      	blt.n	800f70c <_read+0x12>
  }

  return len;
 800f72a:	687b      	ldr	r3, [r7, #4]
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3718      	adds	r7, #24
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b086      	sub	sp, #24
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	60b9      	str	r1, [r7, #8]
 800f73e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f740:	2300      	movs	r3, #0
 800f742:	617b      	str	r3, [r7, #20]
 800f744:	e009      	b.n	800f75a <_write+0x26>
  {
    __io_putchar(*ptr++);
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	1c5a      	adds	r2, r3, #1
 800f74a:	60ba      	str	r2, [r7, #8]
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	4618      	mov	r0, r3
 800f750:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	3301      	adds	r3, #1
 800f758:	617b      	str	r3, [r7, #20]
 800f75a:	697a      	ldr	r2, [r7, #20]
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	429a      	cmp	r2, r3
 800f760:	dbf1      	blt.n	800f746 <_write+0x12>
  }
  return len;
 800f762:	687b      	ldr	r3, [r7, #4]
}
 800f764:	4618      	mov	r0, r3
 800f766:	3718      	adds	r7, #24
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}

0800f76c <_close>:

int _close(int file)
{
 800f76c:	b480      	push	{r7}
 800f76e:	b083      	sub	sp, #12
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800f774:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f778:	4618      	mov	r0, r3
 800f77a:	370c      	adds	r7, #12
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr

0800f784 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800f784:	b480      	push	{r7}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800f794:	605a      	str	r2, [r3, #4]
  return 0;
 800f796:	2300      	movs	r3, #0
}
 800f798:	4618      	mov	r0, r3
 800f79a:	370c      	adds	r7, #12
 800f79c:	46bd      	mov	sp, r7
 800f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a2:	4770      	bx	lr

0800f7a4 <_isatty>:

int _isatty(int file)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b083      	sub	sp, #12
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800f7ac:	2301      	movs	r3, #1
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	370c      	adds	r7, #12
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b8:	4770      	bx	lr

0800f7ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800f7ba:	b480      	push	{r7}
 800f7bc:	b085      	sub	sp, #20
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	60f8      	str	r0, [r7, #12]
 800f7c2:	60b9      	str	r1, [r7, #8]
 800f7c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800f7c6:	2300      	movs	r3, #0
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3714      	adds	r7, #20
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d2:	4770      	bx	lr

0800f7d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f7d8:	4b07      	ldr	r3, [pc, #28]	@ (800f7f8 <SystemInit+0x24>)
 800f7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7de:	4a06      	ldr	r2, [pc, #24]	@ (800f7f8 <SystemInit+0x24>)
 800f7e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f7e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800f7e8:	4b03      	ldr	r3, [pc, #12]	@ (800f7f8 <SystemInit+0x24>)
 800f7ea:	4a04      	ldr	r2, [pc, #16]	@ (800f7fc <SystemInit+0x28>)
 800f7ec:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800f7ee:	bf00      	nop
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr
 800f7f8:	e000ed00 	.word	0xe000ed00
 800f7fc:	08008000 	.word	0x08008000

0800f800 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800f800:	b480      	push	{r7}
 800f802:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800f804:	f3bf 8f4f 	dsb	sy
}
 800f808:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800f80a:	4b06      	ldr	r3, [pc, #24]	@ (800f824 <__NVIC_SystemReset+0x24>)
 800f80c:	68db      	ldr	r3, [r3, #12]
 800f80e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800f812:	4904      	ldr	r1, [pc, #16]	@ (800f824 <__NVIC_SystemReset+0x24>)
 800f814:	4b04      	ldr	r3, [pc, #16]	@ (800f828 <__NVIC_SystemReset+0x28>)
 800f816:	4313      	orrs	r3, r2
 800f818:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f81a:	f3bf 8f4f 	dsb	sy
}
 800f81e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800f820:	bf00      	nop
 800f822:	e7fd      	b.n	800f820 <__NVIC_SystemReset+0x20>
 800f824:	e000ed00 	.word	0xe000ed00
 800f828:	05fa0004 	.word	0x05fa0004

0800f82c <UART_Handler>:
volatile uint16_t uartHead = 0;
volatile uint16_t uartTail = 0;
uint8_t uartRxByte;

void UART_Handler(void *param)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b0aa      	sub	sp, #168	@ 0xa8
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
    uint8_t jsonBuffer[JSON_BUFFER_SIZE];
    uint8_t index = 0;
 800f834:	2300      	movs	r3, #0
 800f836:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    bool collecting = false;
 800f83a:	2300      	movs	r3, #0
 800f83c:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
    while (1)
    {
        if (uartHead != uartTail)
 800f840:	4b39      	ldr	r3, [pc, #228]	@ (800f928 <UART_Handler+0xfc>)
 800f842:	881b      	ldrh	r3, [r3, #0]
 800f844:	b29a      	uxth	r2, r3
 800f846:	4b39      	ldr	r3, [pc, #228]	@ (800f92c <UART_Handler+0x100>)
 800f848:	881b      	ldrh	r3, [r3, #0]
 800f84a:	b29b      	uxth	r3, r3
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d066      	beq.n	800f91e <UART_Handler+0xf2>
        {
            uint8_t byte = uartRingBuffer[uartTail];
 800f850:	4b36      	ldr	r3, [pc, #216]	@ (800f92c <UART_Handler+0x100>)
 800f852:	881b      	ldrh	r3, [r3, #0]
 800f854:	b29b      	uxth	r3, r3
 800f856:	461a      	mov	r2, r3
 800f858:	4b35      	ldr	r3, [pc, #212]	@ (800f930 <UART_Handler+0x104>)
 800f85a:	5c9b      	ldrb	r3, [r3, r2]
 800f85c:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
            uartTail = (uartTail + 1) % UART_RING_BUFFER_SIZE;
 800f860:	4b32      	ldr	r3, [pc, #200]	@ (800f92c <UART_Handler+0x100>)
 800f862:	881b      	ldrh	r3, [r3, #0]
 800f864:	b29b      	uxth	r3, r3
 800f866:	3301      	adds	r3, #1
 800f868:	425a      	negs	r2, r3
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	b2d2      	uxtb	r2, r2
 800f86e:	bf58      	it	pl
 800f870:	4253      	negpl	r3, r2
 800f872:	b29a      	uxth	r2, r3
 800f874:	4b2d      	ldr	r3, [pc, #180]	@ (800f92c <UART_Handler+0x100>)
 800f876:	801a      	strh	r2, [r3, #0]

            if (byte == '{')
 800f878:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800f87c:	2b7b      	cmp	r3, #123	@ 0x7b
 800f87e:	d111      	bne.n	800f8a4 <UART_Handler+0x78>
            {
                collecting = true;
 800f880:	2301      	movs	r3, #1
 800f882:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
                index = 0;
 800f886:	2300      	movs	r3, #0
 800f888:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                jsonBuffer[index++] = byte;
 800f88c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800f890:	1c5a      	adds	r2, r3, #1
 800f892:	f887 20a7 	strb.w	r2, [r7, #167]	@ 0xa7
 800f896:	33a8      	adds	r3, #168	@ 0xa8
 800f898:	443b      	add	r3, r7
 800f89a:	f897 20a5 	ldrb.w	r2, [r7, #165]	@ 0xa5
 800f89e:	f803 2c9c 	strb.w	r2, [r3, #-156]
 800f8a2:	e7cd      	b.n	800f840 <UART_Handler+0x14>
            }
            else if (collecting)
 800f8a4:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d032      	beq.n	800f912 <UART_Handler+0xe6>
            {
                if (index < JSON_BUFFER_SIZE - 1)
 800f8ac:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800f8b0:	2b94      	cmp	r3, #148	@ 0x94
 800f8b2:	d827      	bhi.n	800f904 <UART_Handler+0xd8>
                {
                    jsonBuffer[index++] = byte;
 800f8b4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800f8b8:	1c5a      	adds	r2, r3, #1
 800f8ba:	f887 20a7 	strb.w	r2, [r7, #167]	@ 0xa7
 800f8be:	33a8      	adds	r3, #168	@ 0xa8
 800f8c0:	443b      	add	r3, r7
 800f8c2:	f897 20a5 	ldrb.w	r2, [r7, #165]	@ 0xa5
 800f8c6:	f803 2c9c 	strb.w	r2, [r3, #-156]

                    if (byte == '}')
 800f8ca:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800f8ce:	2b7d      	cmp	r3, #125	@ 0x7d
 800f8d0:	d1b6      	bne.n	800f840 <UART_Handler+0x14>
                    {
                        jsonBuffer[index] = '\0';
 800f8d2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800f8d6:	33a8      	adds	r3, #168	@ 0xa8
 800f8d8:	443b      	add	r3, r7
 800f8da:	2200      	movs	r2, #0
 800f8dc:	f803 2c9c 	strb.w	r2, [r3, #-156]
                        safe_printf("JSON received: %s\n", jsonBuffer);
 800f8e0:	f107 030c 	add.w	r3, r7, #12
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	4813      	ldr	r0, [pc, #76]	@ (800f934 <UART_Handler+0x108>)
 800f8e8:	f000 fb16 	bl	800ff18 <safe_printf>
                        process_json(jsonBuffer);
 800f8ec:	f107 030c 	add.w	r3, r7, #12
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f000 f96d 	bl	800fbd0 <process_json>
                        collecting = false;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
                        index = 0;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800f902:	e79d      	b.n	800f840 <UART_Handler+0x14>
                    }
                }
                else
                {
                    collecting = false;
 800f904:	2300      	movs	r3, #0
 800f906:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
                    index = 0;
 800f90a:	2300      	movs	r3, #0
 800f90c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800f910:	e796      	b.n	800f840 <UART_Handler+0x14>
                }
            }
            else if (byte == BOOT_CMD)
 800f912:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800f916:	2b50      	cmp	r3, #80	@ 0x50
 800f918:	d192      	bne.n	800f840 <UART_Handler+0x14>
            {
                NVIC_SystemReset();
 800f91a:	f7ff ff71 	bl	800f800 <__NVIC_SystemReset>
            }
        }
        else
        {
            vTaskDelay(pdMS_TO_TICKS(5));
 800f91e:	2005      	movs	r0, #5
 800f920:	f004 ffb4 	bl	801488c <vTaskDelay>
        if (uartHead != uartTail)
 800f924:	e78c      	b.n	800f840 <UART_Handler+0x14>
 800f926:	bf00      	nop
 800f928:	20001308 	.word	0x20001308
 800f92c:	2000130a 	.word	0x2000130a
 800f930:	20001208 	.word	0x20001208
 800f934:	0801bc18 	.word	0x0801bc18

0800f938 <send_json_response>:
    }
}


void send_json_response(cJSON *jsonObj)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b084      	sub	sp, #16
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
    char *response = cJSON_PrintUnformatted(jsonObj);
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f7fc fd25 	bl	800c390 <cJSON_PrintUnformatted>
 800f946:	60f8      	str	r0, [r7, #12]
    if (response)
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d018      	beq.n	800f980 <send_json_response+0x48>
    {
    	safe_printf("Device State JSON: %s\n", response);
 800f94e:	68f9      	ldr	r1, [r7, #12]
 800f950:	480d      	ldr	r0, [pc, #52]	@ (800f988 <send_json_response+0x50>)
 800f952:	f000 fae1 	bl	800ff18 <safe_printf>
        HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 800f956:	68f8      	ldr	r0, [r7, #12]
 800f958:	f7f8 fcba 	bl	80082d0 <strlen>
 800f95c:	4603      	mov	r3, r0
 800f95e:	b29a      	uxth	r2, r3
 800f960:	f04f 33ff 	mov.w	r3, #4294967295
 800f964:	68f9      	ldr	r1, [r7, #12]
 800f966:	4809      	ldr	r0, [pc, #36]	@ (800f98c <send_json_response+0x54>)
 800f968:	f002 fefa 	bl	8012760 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800f96c:	f04f 33ff 	mov.w	r3, #4294967295
 800f970:	2201      	movs	r2, #1
 800f972:	4907      	ldr	r1, [pc, #28]	@ (800f990 <send_json_response+0x58>)
 800f974:	4805      	ldr	r0, [pc, #20]	@ (800f98c <send_json_response+0x54>)
 800f976:	f002 fef3 	bl	8012760 <HAL_UART_Transmit>
        free(response);
 800f97a:	68f8      	ldr	r0, [r7, #12]
 800f97c:	f007 f832 	bl	80169e4 <free>
    }
}
 800f980:	bf00      	nop
 800f982:	3710      	adds	r7, #16
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	0801bc2c 	.word	0x0801bc2c
 800f98c:	200010f0 	.word	0x200010f0
 800f990:	0801bc44 	.word	0x0801bc44

0800f994 <handle_get_status_request>:

void handle_get_status_request(void)
{
 800f994:	b590      	push	{r4, r7, lr}
 800f996:	b083      	sub	sp, #12
 800f998:	af00      	add	r7, sp, #0
    cJSON *resp = cJSON_CreateObject();
 800f99a:	f7fd fbb9 	bl	800d110 <cJSON_CreateObject>
 800f99e:	6038      	str	r0, [r7, #0]
    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800f9a0:	4b1a      	ldr	r3, [pc, #104]	@ (800fa0c <handle_get_status_request+0x78>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	2164      	movs	r1, #100	@ 0x64
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f004 fb94 	bl	80140d4 <xQueueSemaphoreTake>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	2b01      	cmp	r3, #1
 800f9b0:	d122      	bne.n	800f9f8 <handle_get_status_request+0x64>
    {
        for (int i = 0; i < DEVICE_COUNT; i++)
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	607b      	str	r3, [r7, #4]
 800f9b6:	e015      	b.n	800f9e4 <handle_get_status_request+0x50>
        {
            cJSON_AddNumberToObject(resp, devices[i], global_device_states[i]);
 800f9b8:	4a15      	ldr	r2, [pc, #84]	@ (800fa10 <handle_get_status_request+0x7c>)
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f9c0:	4a14      	ldr	r2, [pc, #80]	@ (800fa14 <handle_get_status_request+0x80>)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7f8 fddb 	bl	8008584 <__aeabi_i2d>
 800f9ce:	4602      	mov	r2, r0
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	ec43 2b10 	vmov	d0, r2, r3
 800f9d6:	4621      	mov	r1, r4
 800f9d8:	6838      	ldr	r0, [r7, #0]
 800f9da:	f7fd fb2b 	bl	800d034 <cJSON_AddNumberToObject>
        for (int i = 0; i < DEVICE_COUNT; i++)
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	607b      	str	r3, [r7, #4]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2b03      	cmp	r3, #3
 800f9e8:	dde6      	ble.n	800f9b8 <handle_get_status_request+0x24>
        }
        xSemaphoreGive(deviceStateMutex);
 800f9ea:	4b08      	ldr	r3, [pc, #32]	@ (800fa0c <handle_get_status_request+0x78>)
 800f9ec:	6818      	ldr	r0, [r3, #0]
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	2100      	movs	r1, #0
 800f9f4:	f004 f8dc 	bl	8013bb0 <xQueueGenericSend>
    }
    send_json_response(resp);
 800f9f8:	6838      	ldr	r0, [r7, #0]
 800f9fa:	f7ff ff9d 	bl	800f938 <send_json_response>
    cJSON_Delete(resp);
 800f9fe:	6838      	ldr	r0, [r7, #0]
 800fa00:	f7fb fc18 	bl	800b234 <cJSON_Delete>
}
 800fa04:	bf00      	nop
 800fa06:	370c      	adds	r7, #12
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd90      	pop	{r4, r7, pc}
 800fa0c:	20001310 	.word	0x20001310
 800fa10:	2000003c 	.word	0x2000003c
 800fa14:	200014d4 	.word	0x200014d4

0800fa18 <handle_device_control>:

void handle_device_control(cJSON *json)
{
 800fa18:	b590      	push	{r4, r7, lr}
 800fa1a:	b089      	sub	sp, #36	@ 0x24
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
    cJSON *resp = cJSON_CreateObject();
 800fa20:	f7fd fb76 	bl	800d110 <cJSON_CreateObject>
 800fa24:	61b8      	str	r0, [r7, #24]
    cJSON *Display = cJSON_GetObjectItem(json, "backlit");
 800fa26:	495e      	ldr	r1, [pc, #376]	@ (800fba0 <handle_device_control+0x188>)
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f7fd fa4d 	bl	800cec8 <cJSON_GetObjectItem>
 800fa2e:	6178      	str	r0, [r7, #20]

    if(Display)
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d022      	beq.n	800fa7c <handle_device_control+0x64>
	{
		if (cJSON_IsNumber(Display))
 800fa36:	6978      	ldr	r0, [r7, #20]
 800fa38:	f7fd fb7e 	bl	800d138 <cJSON_IsNumber>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d01c      	beq.n	800fa7c <handle_device_control+0x64>
		{
			GPIO_PinState state = HAL_GPIO_ReadPin(DISP_BACKLIT_GPIO_Port, DISP_BACKLIT_Pin);
 800fa42:	2101      	movs	r1, #1
 800fa44:	4857      	ldr	r0, [pc, #348]	@ (800fba4 <handle_device_control+0x18c>)
 800fa46:	f000 fe3d 	bl	80106c4 <HAL_GPIO_ReadPin>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	74fb      	strb	r3, [r7, #19]
			uint8_t dispState = (state == GPIO_PIN_SET) ? 1 : 0;
 800fa4e:	7cfb      	ldrb	r3, [r7, #19]
 800fa50:	2b01      	cmp	r3, #1
 800fa52:	bf0c      	ite	eq
 800fa54:	2301      	moveq	r3, #1
 800fa56:	2300      	movne	r3, #0
 800fa58:	b2db      	uxtb	r3, r3
 800fa5a:	74bb      	strb	r3, [r7, #18]
			if(dispState == 1)
 800fa5c:	7cbb      	ldrb	r3, [r7, #18]
 800fa5e:	2b01      	cmp	r3, #1
 800fa60:	f000 809a 	beq.w	800fb98 <handle_device_control+0x180>
			{
				return;
			}
			else
			{
				HAL_GPIO_WritePin(DISP_BACKLIT_GPIO_Port, DISP_BACKLIT_Pin, Display->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	695b      	ldr	r3, [r3, #20]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	bf14      	ite	ne
 800fa6c:	2301      	movne	r3, #1
 800fa6e:	2300      	moveq	r3, #0
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	461a      	mov	r2, r3
 800fa74:	2101      	movs	r1, #1
 800fa76:	484b      	ldr	r0, [pc, #300]	@ (800fba4 <handle_device_control+0x18c>)
 800fa78:	f000 fe3c 	bl	80106f4 <HAL_GPIO_WritePin>
			}
		}
	}


	if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800fa7c:	4b4a      	ldr	r3, [pc, #296]	@ (800fba8 <handle_device_control+0x190>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	2164      	movs	r1, #100	@ 0x64
 800fa82:	4618      	mov	r0, r3
 800fa84:	f004 fb26 	bl	80140d4 <xQueueSemaphoreTake>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	2b01      	cmp	r3, #1
 800fa8c:	d17d      	bne.n	800fb8a <handle_device_control+0x172>
	{
		for (int i = 0; i < DEVICE_COUNT; i++)
 800fa8e:	2300      	movs	r3, #0
 800fa90:	61fb      	str	r3, [r7, #28]
 800fa92:	e070      	b.n	800fb76 <handle_device_control+0x15e>
		{
			cJSON *Device = cJSON_GetObjectItem(json, devices[i]);
 800fa94:	4a45      	ldr	r2, [pc, #276]	@ (800fbac <handle_device_control+0x194>)
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa9c:	4619      	mov	r1, r3
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f7fd fa12 	bl	800cec8 <cJSON_GetObjectItem>
 800faa4:	60f8      	str	r0, [r7, #12]
			if (cJSON_IsNumber(Device))
 800faa6:	68f8      	ldr	r0, [r7, #12]
 800faa8:	f7fd fb46 	bl	800d138 <cJSON_IsNumber>
 800faac:	4603      	mov	r3, r0
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d05e      	beq.n	800fb70 <handle_device_control+0x158>
			{
				HAL_GPIO_WritePin(led_ports[i], led_pins[i], Device->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800fab2:	4a3f      	ldr	r2, [pc, #252]	@ (800fbb0 <handle_device_control+0x198>)
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800faba:	4a3e      	ldr	r2, [pc, #248]	@ (800fbb4 <handle_device_control+0x19c>)
 800fabc:	69fb      	ldr	r3, [r7, #28]
 800fabe:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	695b      	ldr	r3, [r3, #20]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	bf14      	ite	ne
 800faca:	2301      	movne	r3, #1
 800facc:	2300      	moveq	r3, #0
 800face:	b2db      	uxtb	r3, r3
 800fad0:	461a      	mov	r2, r3
 800fad2:	f000 fe0f 	bl	80106f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(relay_ports[i], relay_pins[i], Device->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800fad6:	4a38      	ldr	r2, [pc, #224]	@ (800fbb8 <handle_device_control+0x1a0>)
 800fad8:	69fb      	ldr	r3, [r7, #28]
 800fada:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fade:	4a37      	ldr	r2, [pc, #220]	@ (800fbbc <handle_device_control+0x1a4>)
 800fae0:	69fb      	ldr	r3, [r7, #28]
 800fae2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	695b      	ldr	r3, [r3, #20]
 800faea:	2b00      	cmp	r3, #0
 800faec:	bf14      	ite	ne
 800faee:	2301      	movne	r3, #1
 800faf0:	2300      	moveq	r3, #0
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	461a      	mov	r2, r3
 800faf6:	f000 fdfd 	bl	80106f4 <HAL_GPIO_WritePin>
				GPIO_PinState state = HAL_GPIO_ReadPin(led_ports[i], led_pins[i]);
 800fafa:	4a2d      	ldr	r2, [pc, #180]	@ (800fbb0 <handle_device_control+0x198>)
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fb02:	492c      	ldr	r1, [pc, #176]	@ (800fbb4 <handle_device_control+0x19c>)
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fb0a:	4619      	mov	r1, r3
 800fb0c:	4610      	mov	r0, r2
 800fb0e:	f000 fdd9 	bl	80106c4 <HAL_GPIO_ReadPin>
 800fb12:	4603      	mov	r3, r0
 800fb14:	72fb      	strb	r3, [r7, #11]
				global_device_states[i] = (state == GPIO_PIN_SET) ? 1 : 0;
 800fb16:	7afb      	ldrb	r3, [r7, #11]
 800fb18:	2b01      	cmp	r3, #1
 800fb1a:	bf0c      	ite	eq
 800fb1c:	2301      	moveq	r3, #1
 800fb1e:	2300      	movne	r3, #0
 800fb20:	b2db      	uxtb	r3, r3
 800fb22:	4619      	mov	r1, r3
 800fb24:	4a26      	ldr	r2, [pc, #152]	@ (800fbc0 <handle_device_control+0x1a8>)
 800fb26:	69fb      	ldr	r3, [r7, #28]
 800fb28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				cJSON_AddNumberToObject(resp, devices[i], global_device_states[i]);
 800fb2c:	4a1f      	ldr	r2, [pc, #124]	@ (800fbac <handle_device_control+0x194>)
 800fb2e:	69fb      	ldr	r3, [r7, #28]
 800fb30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fb34:	4a22      	ldr	r2, [pc, #136]	@ (800fbc0 <handle_device_control+0x1a8>)
 800fb36:	69fb      	ldr	r3, [r7, #28]
 800fb38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7f8 fd21 	bl	8008584 <__aeabi_i2d>
 800fb42:	4602      	mov	r2, r0
 800fb44:	460b      	mov	r3, r1
 800fb46:	ec43 2b10 	vmov	d0, r2, r3
 800fb4a:	4621      	mov	r1, r4
 800fb4c:	69b8      	ldr	r0, [r7, #24]
 800fb4e:	f7fd fa71 	bl	800d034 <cJSON_AddNumberToObject>
				safe_printf("ESP: Device %d set to %s\n", i + 1, global_device_states[i] ? "ON" : "OFF");
 800fb52:	69fb      	ldr	r3, [r7, #28]
 800fb54:	1c59      	adds	r1, r3, #1
 800fb56:	4a1a      	ldr	r2, [pc, #104]	@ (800fbc0 <handle_device_control+0x1a8>)
 800fb58:	69fb      	ldr	r3, [r7, #28]
 800fb5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d001      	beq.n	800fb66 <handle_device_control+0x14e>
 800fb62:	4b18      	ldr	r3, [pc, #96]	@ (800fbc4 <handle_device_control+0x1ac>)
 800fb64:	e000      	b.n	800fb68 <handle_device_control+0x150>
 800fb66:	4b18      	ldr	r3, [pc, #96]	@ (800fbc8 <handle_device_control+0x1b0>)
 800fb68:	461a      	mov	r2, r3
 800fb6a:	4818      	ldr	r0, [pc, #96]	@ (800fbcc <handle_device_control+0x1b4>)
 800fb6c:	f000 f9d4 	bl	800ff18 <safe_printf>
		for (int i = 0; i < DEVICE_COUNT; i++)
 800fb70:	69fb      	ldr	r3, [r7, #28]
 800fb72:	3301      	adds	r3, #1
 800fb74:	61fb      	str	r3, [r7, #28]
 800fb76:	69fb      	ldr	r3, [r7, #28]
 800fb78:	2b03      	cmp	r3, #3
 800fb7a:	dd8b      	ble.n	800fa94 <handle_device_control+0x7c>
			}
		}
		xSemaphoreGive(deviceStateMutex);
 800fb7c:	4b0a      	ldr	r3, [pc, #40]	@ (800fba8 <handle_device_control+0x190>)
 800fb7e:	6818      	ldr	r0, [r3, #0]
 800fb80:	2300      	movs	r3, #0
 800fb82:	2200      	movs	r2, #0
 800fb84:	2100      	movs	r1, #0
 800fb86:	f004 f813 	bl	8013bb0 <xQueueGenericSend>
	}
	send_json_response(resp);
 800fb8a:	69b8      	ldr	r0, [r7, #24]
 800fb8c:	f7ff fed4 	bl	800f938 <send_json_response>
	cJSON_Delete(resp);
 800fb90:	69b8      	ldr	r0, [r7, #24]
 800fb92:	f7fb fb4f 	bl	800b234 <cJSON_Delete>
 800fb96:	e000      	b.n	800fb9a <handle_device_control+0x182>
				return;
 800fb98:	bf00      	nop
}
 800fb9a:	3724      	adds	r7, #36	@ 0x24
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd90      	pop	{r4, r7, pc}
 800fba0:	0801bc48 	.word	0x0801bc48
 800fba4:	40020000 	.word	0x40020000
 800fba8:	20001310 	.word	0x20001310
 800fbac:	2000003c 	.word	0x2000003c
 800fbb0:	2000004c 	.word	0x2000004c
 800fbb4:	2000006c 	.word	0x2000006c
 800fbb8:	2000005c 	.word	0x2000005c
 800fbbc:	20000074 	.word	0x20000074
 800fbc0:	200014d4 	.word	0x200014d4
 800fbc4:	0801bc50 	.word	0x0801bc50
 800fbc8:	0801bc54 	.word	0x0801bc54
 800fbcc:	0801bc58 	.word	0x0801bc58

0800fbd0 <process_json>:

void process_json(uint8_t *jsonBuffer)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
    cJSON *json = cJSON_Parse((char *)jsonBuffer);
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f7fc fb41 	bl	800c260 <cJSON_Parse>
 800fbde:	60f8      	str	r0, [r7, #12]
    if (!json)
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d103      	bne.n	800fbee <process_json+0x1e>
    {
        safe_printf("Invalid JSON!\n");
 800fbe6:	4812      	ldr	r0, [pc, #72]	@ (800fc30 <process_json+0x60>)
 800fbe8:	f000 f996 	bl	800ff18 <safe_printf>
        return;
 800fbec:	e01c      	b.n	800fc28 <process_json+0x58>
    }

    cJSON *request = cJSON_GetObjectItem(json, "request");
 800fbee:	4911      	ldr	r1, [pc, #68]	@ (800fc34 <process_json+0x64>)
 800fbf0:	68f8      	ldr	r0, [r7, #12]
 800fbf2:	f7fd f969 	bl	800cec8 <cJSON_GetObjectItem>
 800fbf6:	60b8      	str	r0, [r7, #8]
    if (cJSON_IsString(request) && strcmp(request->valuestring, "getCurrentStatus") == 0)
 800fbf8:	68b8      	ldr	r0, [r7, #8]
 800fbfa:	f7fd fab4 	bl	800d166 <cJSON_IsString>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d00b      	beq.n	800fc1c <process_json+0x4c>
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	691b      	ldr	r3, [r3, #16]
 800fc08:	490b      	ldr	r1, [pc, #44]	@ (800fc38 <process_json+0x68>)
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7f8 fb00 	bl	8008210 <strcmp>
 800fc10:	4603      	mov	r3, r0
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d102      	bne.n	800fc1c <process_json+0x4c>
    {
        handle_get_status_request();
 800fc16:	f7ff febd 	bl	800f994 <handle_get_status_request>
 800fc1a:	e002      	b.n	800fc22 <process_json+0x52>
    }
    else
    {
        handle_device_control(json);
 800fc1c:	68f8      	ldr	r0, [r7, #12]
 800fc1e:	f7ff fefb 	bl	800fa18 <handle_device_control>
    }
    cJSON_Delete(json);
 800fc22:	68f8      	ldr	r0, [r7, #12]
 800fc24:	f7fb fb06 	bl	800b234 <cJSON_Delete>
}
 800fc28:	3710      	adds	r7, #16
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	0801bc74 	.word	0x0801bc74
 800fc34:	0801bc84 	.word	0x0801bc84
 800fc38:	0801bc8c 	.word	0x0801bc8c

0800fc3c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b084      	sub	sp, #16
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	4a1f      	ldr	r2, [pc, #124]	@ (800fcc8 <HAL_UART_RxCpltCallback+0x8c>)
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d124      	bne.n	800fc98 <HAL_UART_RxCpltCallback+0x5c>
    {
        uint16_t nextHead = (uartHead + 1) % UART_RING_BUFFER_SIZE;
 800fc4e:	4b1f      	ldr	r3, [pc, #124]	@ (800fccc <HAL_UART_RxCpltCallback+0x90>)
 800fc50:	881b      	ldrh	r3, [r3, #0]
 800fc52:	b29b      	uxth	r3, r3
 800fc54:	3301      	adds	r3, #1
 800fc56:	425a      	negs	r2, r3
 800fc58:	b2db      	uxtb	r3, r3
 800fc5a:	b2d2      	uxtb	r2, r2
 800fc5c:	bf58      	it	pl
 800fc5e:	4253      	negpl	r3, r2
 800fc60:	817b      	strh	r3, [r7, #10]
        if (nextHead != uartTail)
 800fc62:	4b1b      	ldr	r3, [pc, #108]	@ (800fcd0 <HAL_UART_RxCpltCallback+0x94>)
 800fc64:	881b      	ldrh	r3, [r3, #0]
 800fc66:	b29b      	uxth	r3, r3
 800fc68:	897a      	ldrh	r2, [r7, #10]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d00b      	beq.n	800fc86 <HAL_UART_RxCpltCallback+0x4a>
        {
            uartRingBuffer[uartHead] = uartRxByte;
 800fc6e:	4b17      	ldr	r3, [pc, #92]	@ (800fccc <HAL_UART_RxCpltCallback+0x90>)
 800fc70:	881b      	ldrh	r3, [r3, #0]
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	461a      	mov	r2, r3
 800fc76:	4b17      	ldr	r3, [pc, #92]	@ (800fcd4 <HAL_UART_RxCpltCallback+0x98>)
 800fc78:	7819      	ldrb	r1, [r3, #0]
 800fc7a:	4b17      	ldr	r3, [pc, #92]	@ (800fcd8 <HAL_UART_RxCpltCallback+0x9c>)
 800fc7c:	5499      	strb	r1, [r3, r2]
            uartHead = nextHead;
 800fc7e:	4a13      	ldr	r2, [pc, #76]	@ (800fccc <HAL_UART_RxCpltCallback+0x90>)
 800fc80:	897b      	ldrh	r3, [r7, #10]
 800fc82:	8013      	strh	r3, [r2, #0]
 800fc84:	e002      	b.n	800fc8c <HAL_UART_RxCpltCallback+0x50>
        } else {
            safe_printf("UART ring buffer overflow!\n");
 800fc86:	4815      	ldr	r0, [pc, #84]	@ (800fcdc <HAL_UART_RxCpltCallback+0xa0>)
 800fc88:	f000 f946 	bl	800ff18 <safe_printf>
        }
        HAL_UART_Receive_IT(&huart3, &uartRxByte, 1);
 800fc8c:	2201      	movs	r2, #1
 800fc8e:	4911      	ldr	r1, [pc, #68]	@ (800fcd4 <HAL_UART_RxCpltCallback+0x98>)
 800fc90:	4813      	ldr	r0, [pc, #76]	@ (800fce0 <HAL_UART_RxCpltCallback+0xa4>)
 800fc92:	f002 fe26 	bl	80128e2 <HAL_UART_Receive_IT>
    {
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		Sim800_RxCallBack();
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    }
}
 800fc96:	e012      	b.n	800fcbe <HAL_UART_RxCpltCallback+0x82>
    else if(huart == UART_SIM800)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	4a12      	ldr	r2, [pc, #72]	@ (800fce4 <HAL_UART_RxCpltCallback+0xa8>)
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d10e      	bne.n	800fcbe <HAL_UART_RxCpltCallback+0x82>
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800fca0:	2300      	movs	r3, #0
 800fca2:	60fb      	str	r3, [r7, #12]
		Sim800_RxCallBack();
 800fca4:	f7f9 ff30 	bl	8009b08 <Sim800_RxCallBack>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d007      	beq.n	800fcbe <HAL_UART_RxCpltCallback+0x82>
 800fcae:	4b0e      	ldr	r3, [pc, #56]	@ (800fce8 <HAL_UART_RxCpltCallback+0xac>)
 800fcb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fcb4:	601a      	str	r2, [r3, #0]
 800fcb6:	f3bf 8f4f 	dsb	sy
 800fcba:	f3bf 8f6f 	isb	sy
}
 800fcbe:	bf00      	nop
 800fcc0:	3710      	adds	r7, #16
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}
 800fcc6:	bf00      	nop
 800fcc8:	40004800 	.word	0x40004800
 800fccc:	20001308 	.word	0x20001308
 800fcd0:	2000130a 	.word	0x2000130a
 800fcd4:	2000130c 	.word	0x2000130c
 800fcd8:	20001208 	.word	0x20001208
 800fcdc:	0801bca0 	.word	0x0801bca0
 800fce0:	200010f0 	.word	0x200010f0
 800fce4:	20001060 	.word	0x20001060
 800fce8:	e000ed04 	.word	0xe000ed04

0800fcec <setup_freeRTOS>:
volatile int global_device_states[4] = {0, 0, 0, 0};
uint32_t lastKeepAliveTime = 0;


void setup_freeRTOS(void)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b086      	sub	sp, #24
 800fcf0:	af02      	add	r7, sp, #8
	HAL_SPI_Receive_IT(&hspi2, &spiRxByte, 1);
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	4945      	ldr	r1, [pc, #276]	@ (800fe0c <setup_freeRTOS+0x120>)
 800fcf6:	4846      	ldr	r0, [pc, #280]	@ (800fe10 <setup_freeRTOS+0x124>)
 800fcf8:	f001 fcfa 	bl	80116f0 <HAL_SPI_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &rx_data, 1);
 800fcfc:	2201      	movs	r2, #1
 800fcfe:	4945      	ldr	r1, [pc, #276]	@ (800fe14 <setup_freeRTOS+0x128>)
 800fd00:	4845      	ldr	r0, [pc, #276]	@ (800fe18 <setup_freeRTOS+0x12c>)
 800fd02:	f002 fdee 	bl	80128e2 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &uartRxByte, 1);
 800fd06:	2201      	movs	r2, #1
 800fd08:	4944      	ldr	r1, [pc, #272]	@ (800fe1c <setup_freeRTOS+0x130>)
 800fd0a:	4845      	ldr	r0, [pc, #276]	@ (800fe20 <setup_freeRTOS+0x134>)
 800fd0c:	f002 fde9 	bl	80128e2 <HAL_UART_Receive_IT>

	status = xTaskCreate(SPI_Handler, "SPIHandler", 512, NULL, 5, NULL);
 800fd10:	2300      	movs	r3, #0
 800fd12:	9301      	str	r3, [sp, #4]
 800fd14:	2305      	movs	r3, #5
 800fd16:	9300      	str	r3, [sp, #0]
 800fd18:	2300      	movs	r3, #0
 800fd1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd1e:	4941      	ldr	r1, [pc, #260]	@ (800fe24 <setup_freeRTOS+0x138>)
 800fd20:	4841      	ldr	r0, [pc, #260]	@ (800fe28 <setup_freeRTOS+0x13c>)
 800fd22:	f004 fc6d 	bl	8014600 <xTaskCreate>
 800fd26:	4603      	mov	r3, r0
 800fd28:	4a40      	ldr	r2, [pc, #256]	@ (800fe2c <setup_freeRTOS+0x140>)
 800fd2a:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800fd2c:	4b3f      	ldr	r3, [pc, #252]	@ (800fe2c <setup_freeRTOS+0x140>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	d00b      	beq.n	800fd4c <setup_freeRTOS+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800fd34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd38:	f383 8811 	msr	BASEPRI, r3
 800fd3c:	f3bf 8f6f 	isb	sy
 800fd40:	f3bf 8f4f 	dsb	sy
 800fd44:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800fd46:	bf00      	nop
 800fd48:	bf00      	nop
 800fd4a:	e7fd      	b.n	800fd48 <setup_freeRTOS+0x5c>

	status = xTaskCreate(UART_Handler, "UARTHandler", 1024, NULL, 4, NULL);
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	9301      	str	r3, [sp, #4]
 800fd50:	2304      	movs	r3, #4
 800fd52:	9300      	str	r3, [sp, #0]
 800fd54:	2300      	movs	r3, #0
 800fd56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800fd5a:	4935      	ldr	r1, [pc, #212]	@ (800fe30 <setup_freeRTOS+0x144>)
 800fd5c:	4835      	ldr	r0, [pc, #212]	@ (800fe34 <setup_freeRTOS+0x148>)
 800fd5e:	f004 fc4f 	bl	8014600 <xTaskCreate>
 800fd62:	4603      	mov	r3, r0
 800fd64:	4a31      	ldr	r2, [pc, #196]	@ (800fe2c <setup_freeRTOS+0x140>)
 800fd66:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800fd68:	4b30      	ldr	r3, [pc, #192]	@ (800fe2c <setup_freeRTOS+0x140>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	2b01      	cmp	r3, #1
 800fd6e:	d00b      	beq.n	800fd88 <setup_freeRTOS+0x9c>
        __asm volatile
 800fd70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd74:	f383 8811 	msr	BASEPRI, r3
 800fd78:	f3bf 8f6f 	isb	sy
 800fd7c:	f3bf 8f4f 	dsb	sy
 800fd80:	60bb      	str	r3, [r7, #8]
    }
 800fd82:	bf00      	nop
 800fd84:	bf00      	nop
 800fd86:	e7fd      	b.n	800fd84 <setup_freeRTOS+0x98>

	status = xTaskCreate(GSM_MQTT_Task, "GSM_MQTT_Task", 1024, NULL, 7, NULL);
 800fd88:	2300      	movs	r3, #0
 800fd8a:	9301      	str	r3, [sp, #4]
 800fd8c:	2307      	movs	r3, #7
 800fd8e:	9300      	str	r3, [sp, #0]
 800fd90:	2300      	movs	r3, #0
 800fd92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800fd96:	4928      	ldr	r1, [pc, #160]	@ (800fe38 <setup_freeRTOS+0x14c>)
 800fd98:	4828      	ldr	r0, [pc, #160]	@ (800fe3c <setup_freeRTOS+0x150>)
 800fd9a:	f004 fc31 	bl	8014600 <xTaskCreate>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	4a22      	ldr	r2, [pc, #136]	@ (800fe2c <setup_freeRTOS+0x140>)
 800fda2:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800fda4:	4b21      	ldr	r3, [pc, #132]	@ (800fe2c <setup_freeRTOS+0x140>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2b01      	cmp	r3, #1
 800fdaa:	d00b      	beq.n	800fdc4 <setup_freeRTOS+0xd8>
        __asm volatile
 800fdac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdb0:	f383 8811 	msr	BASEPRI, r3
 800fdb4:	f3bf 8f6f 	isb	sy
 800fdb8:	f3bf 8f4f 	dsb	sy
 800fdbc:	607b      	str	r3, [r7, #4]
    }
 800fdbe:	bf00      	nop
 800fdc0:	bf00      	nop
 800fdc2:	e7fd      	b.n	800fdc0 <setup_freeRTOS+0xd4>

	status = xTaskCreate(Display_Handler, "DisplayHandler", 1024, NULL, 3, NULL);
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	9301      	str	r3, [sp, #4]
 800fdc8:	2303      	movs	r3, #3
 800fdca:	9300      	str	r3, [sp, #0]
 800fdcc:	2300      	movs	r3, #0
 800fdce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800fdd2:	491b      	ldr	r1, [pc, #108]	@ (800fe40 <setup_freeRTOS+0x154>)
 800fdd4:	481b      	ldr	r0, [pc, #108]	@ (800fe44 <setup_freeRTOS+0x158>)
 800fdd6:	f004 fc13 	bl	8014600 <xTaskCreate>
 800fdda:	4603      	mov	r3, r0
 800fddc:	4a13      	ldr	r2, [pc, #76]	@ (800fe2c <setup_freeRTOS+0x140>)
 800fdde:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800fde0:	4b12      	ldr	r3, [pc, #72]	@ (800fe2c <setup_freeRTOS+0x140>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	2b01      	cmp	r3, #1
 800fde6:	d00b      	beq.n	800fe00 <setup_freeRTOS+0x114>
        __asm volatile
 800fde8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdec:	f383 8811 	msr	BASEPRI, r3
 800fdf0:	f3bf 8f6f 	isb	sy
 800fdf4:	f3bf 8f4f 	dsb	sy
 800fdf8:	603b      	str	r3, [r7, #0]
    }
 800fdfa:	bf00      	nop
 800fdfc:	bf00      	nop
 800fdfe:	e7fd      	b.n	800fdfc <setup_freeRTOS+0x110>

	vTaskStartScheduler();
 800fe00:	f004 fdf4 	bl	80149ec <vTaskStartScheduler>
}
 800fe04:	bf00      	nop
 800fe06:	3710      	adds	r7, #16
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}
 800fe0c:	200011bc 	.word	0x200011bc
 800fe10:	20000fb0 	.word	0x20000fb0
 800fe14:	20000270 	.word	0x20000270
 800fe18:	20001060 	.word	0x20001060
 800fe1c:	2000130c 	.word	0x2000130c
 800fe20:	200010f0 	.word	0x200010f0
 800fe24:	0801bcdc 	.word	0x0801bcdc
 800fe28:	0800edb9 	.word	0x0800edb9
 800fe2c:	20001314 	.word	0x20001314
 800fe30:	0801bce8 	.word	0x0801bce8
 800fe34:	0800f82d 	.word	0x0800f82d
 800fe38:	0801bcf4 	.word	0x0801bcf4
 800fe3c:	0800e719 	.word	0x0800e719
 800fe40:	0801bd04 	.word	0x0801bd04
 800fe44:	0800d195 	.word	0x0800d195

0800fe48 <user_app_init>:

void user_app_init(void)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
	ST7735_Init(0);
 800fe4e:	2000      	movs	r0, #0
 800fe50:	f7fa febe 	bl	800abd0 <ST7735_Init>
	ST7735_SetRotation(1);
 800fe54:	2001      	movs	r0, #1
 800fe56:	f7fa fee7 	bl	800ac28 <ST7735_SetRotation>
	fillScreen(BLACK);
 800fe5a:	2000      	movs	r0, #0
 800fe5c:	f7fa fdac 	bl	800a9b8 <fillScreen>
	showStartupLogoAndMenu();
 800fe60:	f7fb f92e 	bl	800b0c0 <showStartupLogoAndMenu>
	deviceStateMutex = xSemaphoreCreateMutex();
 800fe64:	2001      	movs	r0, #1
 800fe66:	f003 fe8a 	bl	8013b7e <xQueueCreateMutex>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	4a12      	ldr	r2, [pc, #72]	@ (800feb8 <user_app_init+0x70>)
 800fe6e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 4; i++) {
 800fe70:	2300      	movs	r3, #0
 800fe72:	607b      	str	r3, [r7, #4]
 800fe74:	e00c      	b.n	800fe90 <user_app_init+0x48>
	  global_device_states[i] = 0;
 800fe76:	4a11      	ldr	r2, [pc, #68]	@ (800febc <user_app_init+0x74>)
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2100      	movs	r1, #0
 800fe7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  device_states[i] = 0;
 800fe80:	4a0f      	ldr	r2, [pc, #60]	@ (800fec0 <user_app_init+0x78>)
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2100      	movs	r1, #0
 800fe86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	3301      	adds	r3, #1
 800fe8e:	607b      	str	r3, [r7, #4]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2b03      	cmp	r3, #3
 800fe94:	ddef      	ble.n	800fe76 <user_app_init+0x2e>
	}
	uartMutex = xSemaphoreCreateMutex();
 800fe96:	2001      	movs	r0, #1
 800fe98:	f003 fe71 	bl	8013b7e <xQueueCreateMutex>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	4a09      	ldr	r2, [pc, #36]	@ (800fec4 <user_app_init+0x7c>)
 800fea0:	6013      	str	r3, [r2, #0]
	initializeMenu();
 800fea2:	f7fe fbb7 	bl	800e614 <initializeMenu>
	GSM_init();
 800fea6:	f7fe fc05 	bl	800e6b4 <GSM_init>
	setup_freeRTOS();
 800feaa:	f7ff ff1f 	bl	800fcec <setup_freeRTOS>
}
 800feae:	bf00      	nop
 800feb0:	3708      	adds	r7, #8
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}
 800feb6:	bf00      	nop
 800feb8:	20001310 	.word	0x20001310
 800febc:	200014d4 	.word	0x200014d4
 800fec0:	20000e14 	.word	0x20000e14
 800fec4:	20001318 	.word	0x20001318

0800fec8 <vApplicationStackOverflowHook>:


void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
    safe_printf("Stack overflow in task: %s\n", pcTaskName);
 800fed2:	6839      	ldr	r1, [r7, #0]
 800fed4:	4802      	ldr	r0, [pc, #8]	@ (800fee0 <vApplicationStackOverflowHook+0x18>)
 800fed6:	f000 f81f 	bl	800ff18 <safe_printf>
    while(1);
 800feda:	bf00      	nop
 800fedc:	e7fd      	b.n	800feda <vApplicationStackOverflowHook+0x12>
 800fede:	bf00      	nop
 800fee0:	0801bd14 	.word	0x0801bd14

0800fee4 <print_task_info>:
}

void print_task_info(void)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800feea:	af00      	add	r7, sp, #0
    char taskList[512];
    safe_printf("Task Info:\nName               State  Prio   StackNum     ID\n");
 800feec:	4808      	ldr	r0, [pc, #32]	@ (800ff10 <print_task_info+0x2c>)
 800feee:	f000 f813 	bl	800ff18 <safe_printf>
    vTaskList(taskList);
 800fef2:	463b      	mov	r3, r7
 800fef4:	4618      	mov	r0, r3
 800fef6:	f005 fcdd 	bl	80158b4 <vTaskList>
    safe_printf("%s\n", taskList);
 800fefa:	463b      	mov	r3, r7
 800fefc:	4619      	mov	r1, r3
 800fefe:	4805      	ldr	r0, [pc, #20]	@ (800ff14 <print_task_info+0x30>)
 800ff00:	f000 f80a 	bl	800ff18 <safe_printf>
}
 800ff04:	bf00      	nop
 800ff06:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	0801bd30 	.word	0x0801bd30
 800ff14:	0801bd70 	.word	0x0801bd70

0800ff18 <safe_printf>:


void safe_printf(const char *fmt, ...)
{
 800ff18:	b40f      	push	{r0, r1, r2, r3}
 800ff1a:	b580      	push	{r7, lr}
 800ff1c:	b0c2      	sub	sp, #264	@ 0x108
 800ff1e:	af00      	add	r7, sp, #0
    if (uartMutex != NULL && xSemaphoreTake(uartMutex, pdMS_TO_TICKS(200)) == pdTRUE)
 800ff20:	4b1a      	ldr	r3, [pc, #104]	@ (800ff8c <safe_printf+0x74>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d028      	beq.n	800ff7a <safe_printf+0x62>
 800ff28:	4b18      	ldr	r3, [pc, #96]	@ (800ff8c <safe_printf+0x74>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	21c8      	movs	r1, #200	@ 0xc8
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f004 f8d0 	bl	80140d4 <xQueueSemaphoreTake>
 800ff34:	4603      	mov	r3, r0
 800ff36:	2b01      	cmp	r3, #1
 800ff38:	d11f      	bne.n	800ff7a <safe_printf+0x62>
    {
        char buffer[256];
        va_list args;
        va_start(args, fmt);
 800ff3a:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800ff3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        vsnprintf(buffer, sizeof(buffer), fmt, args);
 800ff42:	1d38      	adds	r0, r7, #4
 800ff44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ff48:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800ff4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ff50:	f008 fa52 	bl	80183f8 <vsniprintf>
        va_end(args);

        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800ff54:	1d3b      	adds	r3, r7, #4
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7f8 f9ba 	bl	80082d0 <strlen>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	b29a      	uxth	r2, r3
 800ff60:	1d39      	adds	r1, r7, #4
 800ff62:	f04f 33ff 	mov.w	r3, #4294967295
 800ff66:	480a      	ldr	r0, [pc, #40]	@ (800ff90 <safe_printf+0x78>)
 800ff68:	f002 fbfa 	bl	8012760 <HAL_UART_Transmit>
        xSemaphoreGive(uartMutex);
 800ff6c:	4b07      	ldr	r3, [pc, #28]	@ (800ff8c <safe_printf+0x74>)
 800ff6e:	6818      	ldr	r0, [r3, #0]
 800ff70:	2300      	movs	r3, #0
 800ff72:	2200      	movs	r2, #0
 800ff74:	2100      	movs	r1, #0
 800ff76:	f003 fe1b 	bl	8013bb0 <xQueueGenericSend>
    }
}
 800ff7a:	bf00      	nop
 800ff7c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800ff80:	46bd      	mov	sp, r7
 800ff82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ff86:	b004      	add	sp, #16
 800ff88:	4770      	bx	lr
 800ff8a:	bf00      	nop
 800ff8c:	20001318 	.word	0x20001318
 800ff90:	200010a8 	.word	0x200010a8

0800ff94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ff94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ffcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800ff98:	f7ff fc1c 	bl	800f7d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800ff9c:	480c      	ldr	r0, [pc, #48]	@ (800ffd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800ff9e:	490d      	ldr	r1, [pc, #52]	@ (800ffd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800ffa0:	4a0d      	ldr	r2, [pc, #52]	@ (800ffd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ffa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ffa4:	e002      	b.n	800ffac <LoopCopyDataInit>

0800ffa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ffa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ffa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ffaa:	3304      	adds	r3, #4

0800ffac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ffac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ffae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ffb0:	d3f9      	bcc.n	800ffa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ffb2:	4a0a      	ldr	r2, [pc, #40]	@ (800ffdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ffb4:	4c0a      	ldr	r4, [pc, #40]	@ (800ffe0 <LoopFillZerobss+0x22>)
  movs r3, #0
 800ffb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ffb8:	e001      	b.n	800ffbe <LoopFillZerobss>

0800ffba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ffba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ffbc:	3204      	adds	r2, #4

0800ffbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ffbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ffc0:	d3fb      	bcc.n	800ffba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800ffc2:	f008 fb5f 	bl	8018684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ffc6:	f7fe fc5c 	bl	800e882 <main>
  bx  lr    
 800ffca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ffcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ffd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ffd4:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 800ffd8:	0801dd40 	.word	0x0801dd40
  ldr r2, =_sbss
 800ffdc:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 800ffe0:	200143e4 	.word	0x200143e4

0800ffe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ffe4:	e7fe      	b.n	800ffe4 <ADC_IRQHandler>
	...

0800ffe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ffec:	4b0e      	ldr	r3, [pc, #56]	@ (8010028 <HAL_Init+0x40>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	4a0d      	ldr	r2, [pc, #52]	@ (8010028 <HAL_Init+0x40>)
 800fff2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800fff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800fff8:	4b0b      	ldr	r3, [pc, #44]	@ (8010028 <HAL_Init+0x40>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	4a0a      	ldr	r2, [pc, #40]	@ (8010028 <HAL_Init+0x40>)
 800fffe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8010002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010004:	4b08      	ldr	r3, [pc, #32]	@ (8010028 <HAL_Init+0x40>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	4a07      	ldr	r2, [pc, #28]	@ (8010028 <HAL_Init+0x40>)
 801000a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801000e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010010:	2003      	movs	r0, #3
 8010012:	f000 f8fc 	bl	801020e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010016:	200f      	movs	r0, #15
 8010018:	f7ff fa80 	bl	800f51c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801001c:	f7ff f888 	bl	800f130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010020:	2300      	movs	r3, #0
}
 8010022:	4618      	mov	r0, r3
 8010024:	bd80      	pop	{r7, pc}
 8010026:	bf00      	nop
 8010028:	40023c00 	.word	0x40023c00

0801002c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801002c:	b480      	push	{r7}
 801002e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010030:	4b06      	ldr	r3, [pc, #24]	@ (801004c <HAL_IncTick+0x20>)
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	461a      	mov	r2, r3
 8010036:	4b06      	ldr	r3, [pc, #24]	@ (8010050 <HAL_IncTick+0x24>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	4413      	add	r3, r2
 801003c:	4a04      	ldr	r2, [pc, #16]	@ (8010050 <HAL_IncTick+0x24>)
 801003e:	6013      	str	r3, [r2, #0]
}
 8010040:	bf00      	nop
 8010042:	46bd      	mov	sp, r7
 8010044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010048:	4770      	bx	lr
 801004a:	bf00      	nop
 801004c:	20000080 	.word	0x20000080
 8010050:	200014e8 	.word	0x200014e8

08010054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010054:	b480      	push	{r7}
 8010056:	af00      	add	r7, sp, #0
  return uwTick;
 8010058:	4b03      	ldr	r3, [pc, #12]	@ (8010068 <HAL_GetTick+0x14>)
 801005a:	681b      	ldr	r3, [r3, #0]
}
 801005c:	4618      	mov	r0, r3
 801005e:	46bd      	mov	sp, r7
 8010060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010064:	4770      	bx	lr
 8010066:	bf00      	nop
 8010068:	200014e8 	.word	0x200014e8

0801006c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b084      	sub	sp, #16
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010074:	f7ff ffee 	bl	8010054 <HAL_GetTick>
 8010078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010084:	d005      	beq.n	8010092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010086:	4b0a      	ldr	r3, [pc, #40]	@ (80100b0 <HAL_Delay+0x44>)
 8010088:	781b      	ldrb	r3, [r3, #0]
 801008a:	461a      	mov	r2, r3
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	4413      	add	r3, r2
 8010090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010092:	bf00      	nop
 8010094:	f7ff ffde 	bl	8010054 <HAL_GetTick>
 8010098:	4602      	mov	r2, r0
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	1ad3      	subs	r3, r2, r3
 801009e:	68fa      	ldr	r2, [r7, #12]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d8f7      	bhi.n	8010094 <HAL_Delay+0x28>
  {
  }
}
 80100a4:	bf00      	nop
 80100a6:	bf00      	nop
 80100a8:	3710      	adds	r7, #16
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	20000080 	.word	0x20000080

080100b4 <__NVIC_SetPriorityGrouping>:
{
 80100b4:	b480      	push	{r7}
 80100b6:	b085      	sub	sp, #20
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f003 0307 	and.w	r3, r3, #7
 80100c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80100c4:	4b0c      	ldr	r3, [pc, #48]	@ (80100f8 <__NVIC_SetPriorityGrouping+0x44>)
 80100c6:	68db      	ldr	r3, [r3, #12]
 80100c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80100ca:	68ba      	ldr	r2, [r7, #8]
 80100cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80100d0:	4013      	ands	r3, r2
 80100d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80100dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80100e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80100e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80100e6:	4a04      	ldr	r2, [pc, #16]	@ (80100f8 <__NVIC_SetPriorityGrouping+0x44>)
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	60d3      	str	r3, [r2, #12]
}
 80100ec:	bf00      	nop
 80100ee:	3714      	adds	r7, #20
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr
 80100f8:	e000ed00 	.word	0xe000ed00

080100fc <__NVIC_GetPriorityGrouping>:
{
 80100fc:	b480      	push	{r7}
 80100fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010100:	4b04      	ldr	r3, [pc, #16]	@ (8010114 <__NVIC_GetPriorityGrouping+0x18>)
 8010102:	68db      	ldr	r3, [r3, #12]
 8010104:	0a1b      	lsrs	r3, r3, #8
 8010106:	f003 0307 	and.w	r3, r3, #7
}
 801010a:	4618      	mov	r0, r3
 801010c:	46bd      	mov	sp, r7
 801010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010112:	4770      	bx	lr
 8010114:	e000ed00 	.word	0xe000ed00

08010118 <__NVIC_EnableIRQ>:
{
 8010118:	b480      	push	{r7}
 801011a:	b083      	sub	sp, #12
 801011c:	af00      	add	r7, sp, #0
 801011e:	4603      	mov	r3, r0
 8010120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010126:	2b00      	cmp	r3, #0
 8010128:	db0b      	blt.n	8010142 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801012a:	79fb      	ldrb	r3, [r7, #7]
 801012c:	f003 021f 	and.w	r2, r3, #31
 8010130:	4907      	ldr	r1, [pc, #28]	@ (8010150 <__NVIC_EnableIRQ+0x38>)
 8010132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010136:	095b      	lsrs	r3, r3, #5
 8010138:	2001      	movs	r0, #1
 801013a:	fa00 f202 	lsl.w	r2, r0, r2
 801013e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010142:	bf00      	nop
 8010144:	370c      	adds	r7, #12
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr
 801014e:	bf00      	nop
 8010150:	e000e100 	.word	0xe000e100

08010154 <__NVIC_SetPriority>:
{
 8010154:	b480      	push	{r7}
 8010156:	b083      	sub	sp, #12
 8010158:	af00      	add	r7, sp, #0
 801015a:	4603      	mov	r3, r0
 801015c:	6039      	str	r1, [r7, #0]
 801015e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010164:	2b00      	cmp	r3, #0
 8010166:	db0a      	blt.n	801017e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	b2da      	uxtb	r2, r3
 801016c:	490c      	ldr	r1, [pc, #48]	@ (80101a0 <__NVIC_SetPriority+0x4c>)
 801016e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010172:	0112      	lsls	r2, r2, #4
 8010174:	b2d2      	uxtb	r2, r2
 8010176:	440b      	add	r3, r1
 8010178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801017c:	e00a      	b.n	8010194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	b2da      	uxtb	r2, r3
 8010182:	4908      	ldr	r1, [pc, #32]	@ (80101a4 <__NVIC_SetPriority+0x50>)
 8010184:	79fb      	ldrb	r3, [r7, #7]
 8010186:	f003 030f 	and.w	r3, r3, #15
 801018a:	3b04      	subs	r3, #4
 801018c:	0112      	lsls	r2, r2, #4
 801018e:	b2d2      	uxtb	r2, r2
 8010190:	440b      	add	r3, r1
 8010192:	761a      	strb	r2, [r3, #24]
}
 8010194:	bf00      	nop
 8010196:	370c      	adds	r7, #12
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr
 80101a0:	e000e100 	.word	0xe000e100
 80101a4:	e000ed00 	.word	0xe000ed00

080101a8 <NVIC_EncodePriority>:
{
 80101a8:	b480      	push	{r7}
 80101aa:	b089      	sub	sp, #36	@ 0x24
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	60f8      	str	r0, [r7, #12]
 80101b0:	60b9      	str	r1, [r7, #8]
 80101b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	f003 0307 	and.w	r3, r3, #7
 80101ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80101bc:	69fb      	ldr	r3, [r7, #28]
 80101be:	f1c3 0307 	rsb	r3, r3, #7
 80101c2:	2b04      	cmp	r3, #4
 80101c4:	bf28      	it	cs
 80101c6:	2304      	movcs	r3, #4
 80101c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80101ca:	69fb      	ldr	r3, [r7, #28]
 80101cc:	3304      	adds	r3, #4
 80101ce:	2b06      	cmp	r3, #6
 80101d0:	d902      	bls.n	80101d8 <NVIC_EncodePriority+0x30>
 80101d2:	69fb      	ldr	r3, [r7, #28]
 80101d4:	3b03      	subs	r3, #3
 80101d6:	e000      	b.n	80101da <NVIC_EncodePriority+0x32>
 80101d8:	2300      	movs	r3, #0
 80101da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80101dc:	f04f 32ff 	mov.w	r2, #4294967295
 80101e0:	69bb      	ldr	r3, [r7, #24]
 80101e2:	fa02 f303 	lsl.w	r3, r2, r3
 80101e6:	43da      	mvns	r2, r3
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	401a      	ands	r2, r3
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80101f0:	f04f 31ff 	mov.w	r1, #4294967295
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	fa01 f303 	lsl.w	r3, r1, r3
 80101fa:	43d9      	mvns	r1, r3
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010200:	4313      	orrs	r3, r2
}
 8010202:	4618      	mov	r0, r3
 8010204:	3724      	adds	r7, #36	@ 0x24
 8010206:	46bd      	mov	sp, r7
 8010208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020c:	4770      	bx	lr

0801020e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801020e:	b580      	push	{r7, lr}
 8010210:	b082      	sub	sp, #8
 8010212:	af00      	add	r7, sp, #0
 8010214:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f7ff ff4c 	bl	80100b4 <__NVIC_SetPriorityGrouping>
}
 801021c:	bf00      	nop
 801021e:	3708      	adds	r7, #8
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}

08010224 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010224:	b580      	push	{r7, lr}
 8010226:	b086      	sub	sp, #24
 8010228:	af00      	add	r7, sp, #0
 801022a:	4603      	mov	r3, r0
 801022c:	60b9      	str	r1, [r7, #8]
 801022e:	607a      	str	r2, [r7, #4]
 8010230:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010232:	2300      	movs	r3, #0
 8010234:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010236:	f7ff ff61 	bl	80100fc <__NVIC_GetPriorityGrouping>
 801023a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801023c:	687a      	ldr	r2, [r7, #4]
 801023e:	68b9      	ldr	r1, [r7, #8]
 8010240:	6978      	ldr	r0, [r7, #20]
 8010242:	f7ff ffb1 	bl	80101a8 <NVIC_EncodePriority>
 8010246:	4602      	mov	r2, r0
 8010248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801024c:	4611      	mov	r1, r2
 801024e:	4618      	mov	r0, r3
 8010250:	f7ff ff80 	bl	8010154 <__NVIC_SetPriority>
}
 8010254:	bf00      	nop
 8010256:	3718      	adds	r7, #24
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}

0801025c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b082      	sub	sp, #8
 8010260:	af00      	add	r7, sp, #0
 8010262:	4603      	mov	r3, r0
 8010264:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801026a:	4618      	mov	r0, r3
 801026c:	f7ff ff54 	bl	8010118 <__NVIC_EnableIRQ>
}
 8010270:	bf00      	nop
 8010272:	3708      	adds	r7, #8
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010284:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8010286:	f7ff fee5 	bl	8010054 <HAL_GetTick>
 801028a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8010292:	b2db      	uxtb	r3, r3
 8010294:	2b02      	cmp	r3, #2
 8010296:	d008      	beq.n	80102aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	2280      	movs	r2, #128	@ 0x80
 801029c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2200      	movs	r2, #0
 80102a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80102a6:	2301      	movs	r3, #1
 80102a8:	e052      	b.n	8010350 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	681a      	ldr	r2, [r3, #0]
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	f022 0216 	bic.w	r2, r2, #22
 80102b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	695a      	ldr	r2, [r3, #20]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80102c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d103      	bne.n	80102da <HAL_DMA_Abort+0x62>
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d007      	beq.n	80102ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	681a      	ldr	r2, [r3, #0]
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	f022 0208 	bic.w	r2, r2, #8
 80102e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f022 0201 	bic.w	r2, r2, #1
 80102f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80102fa:	e013      	b.n	8010324 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80102fc:	f7ff feaa 	bl	8010054 <HAL_GetTick>
 8010300:	4602      	mov	r2, r0
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	1ad3      	subs	r3, r2, r3
 8010306:	2b05      	cmp	r3, #5
 8010308:	d90c      	bls.n	8010324 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2220      	movs	r2, #32
 801030e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2203      	movs	r2, #3
 8010314:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2200      	movs	r2, #0
 801031c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8010320:	2303      	movs	r3, #3
 8010322:	e015      	b.n	8010350 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	f003 0301 	and.w	r3, r3, #1
 801032e:	2b00      	cmp	r3, #0
 8010330:	d1e4      	bne.n	80102fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010336:	223f      	movs	r2, #63	@ 0x3f
 8010338:	409a      	lsls	r2, r3
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2201      	movs	r2, #1
 8010342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2200      	movs	r2, #0
 801034a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 801034e:	2300      	movs	r3, #0
}
 8010350:	4618      	mov	r0, r3
 8010352:	3710      	adds	r7, #16
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}

08010358 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8010358:	b480      	push	{r7}
 801035a:	b083      	sub	sp, #12
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8010366:	b2db      	uxtb	r3, r3
 8010368:	2b02      	cmp	r3, #2
 801036a:	d004      	beq.n	8010376 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2280      	movs	r2, #128	@ 0x80
 8010370:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8010372:	2301      	movs	r3, #1
 8010374:	e00c      	b.n	8010390 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	2205      	movs	r2, #5
 801037a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	681a      	ldr	r2, [r3, #0]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	f022 0201 	bic.w	r2, r2, #1
 801038c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801038e:	2300      	movs	r3, #0
}
 8010390:	4618      	mov	r0, r3
 8010392:	370c      	adds	r7, #12
 8010394:	46bd      	mov	sp, r7
 8010396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039a:	4770      	bx	lr

0801039c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801039c:	b480      	push	{r7}
 801039e:	b089      	sub	sp, #36	@ 0x24
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80103a6:	2300      	movs	r3, #0
 80103a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80103aa:	2300      	movs	r3, #0
 80103ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80103ae:	2300      	movs	r3, #0
 80103b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80103b2:	2300      	movs	r3, #0
 80103b4:	61fb      	str	r3, [r7, #28]
 80103b6:	e165      	b.n	8010684 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80103b8:	2201      	movs	r2, #1
 80103ba:	69fb      	ldr	r3, [r7, #28]
 80103bc:	fa02 f303 	lsl.w	r3, r2, r3
 80103c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	697a      	ldr	r2, [r7, #20]
 80103c8:	4013      	ands	r3, r2
 80103ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80103cc:	693a      	ldr	r2, [r7, #16]
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	429a      	cmp	r2, r3
 80103d2:	f040 8154 	bne.w	801067e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	685b      	ldr	r3, [r3, #4]
 80103da:	f003 0303 	and.w	r3, r3, #3
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d005      	beq.n	80103ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	685b      	ldr	r3, [r3, #4]
 80103e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80103ea:	2b02      	cmp	r3, #2
 80103ec:	d130      	bne.n	8010450 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	689b      	ldr	r3, [r3, #8]
 80103f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80103f4:	69fb      	ldr	r3, [r7, #28]
 80103f6:	005b      	lsls	r3, r3, #1
 80103f8:	2203      	movs	r2, #3
 80103fa:	fa02 f303 	lsl.w	r3, r2, r3
 80103fe:	43db      	mvns	r3, r3
 8010400:	69ba      	ldr	r2, [r7, #24]
 8010402:	4013      	ands	r3, r2
 8010404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	68da      	ldr	r2, [r3, #12]
 801040a:	69fb      	ldr	r3, [r7, #28]
 801040c:	005b      	lsls	r3, r3, #1
 801040e:	fa02 f303 	lsl.w	r3, r2, r3
 8010412:	69ba      	ldr	r2, [r7, #24]
 8010414:	4313      	orrs	r3, r2
 8010416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	69ba      	ldr	r2, [r7, #24]
 801041c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	685b      	ldr	r3, [r3, #4]
 8010422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010424:	2201      	movs	r2, #1
 8010426:	69fb      	ldr	r3, [r7, #28]
 8010428:	fa02 f303 	lsl.w	r3, r2, r3
 801042c:	43db      	mvns	r3, r3
 801042e:	69ba      	ldr	r2, [r7, #24]
 8010430:	4013      	ands	r3, r2
 8010432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	091b      	lsrs	r3, r3, #4
 801043a:	f003 0201 	and.w	r2, r3, #1
 801043e:	69fb      	ldr	r3, [r7, #28]
 8010440:	fa02 f303 	lsl.w	r3, r2, r3
 8010444:	69ba      	ldr	r2, [r7, #24]
 8010446:	4313      	orrs	r3, r2
 8010448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	69ba      	ldr	r2, [r7, #24]
 801044e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	f003 0303 	and.w	r3, r3, #3
 8010458:	2b03      	cmp	r3, #3
 801045a:	d017      	beq.n	801048c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	68db      	ldr	r3, [r3, #12]
 8010460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010462:	69fb      	ldr	r3, [r7, #28]
 8010464:	005b      	lsls	r3, r3, #1
 8010466:	2203      	movs	r2, #3
 8010468:	fa02 f303 	lsl.w	r3, r2, r3
 801046c:	43db      	mvns	r3, r3
 801046e:	69ba      	ldr	r2, [r7, #24]
 8010470:	4013      	ands	r3, r2
 8010472:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	689a      	ldr	r2, [r3, #8]
 8010478:	69fb      	ldr	r3, [r7, #28]
 801047a:	005b      	lsls	r3, r3, #1
 801047c:	fa02 f303 	lsl.w	r3, r2, r3
 8010480:	69ba      	ldr	r2, [r7, #24]
 8010482:	4313      	orrs	r3, r2
 8010484:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	69ba      	ldr	r2, [r7, #24]
 801048a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	685b      	ldr	r3, [r3, #4]
 8010490:	f003 0303 	and.w	r3, r3, #3
 8010494:	2b02      	cmp	r3, #2
 8010496:	d123      	bne.n	80104e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010498:	69fb      	ldr	r3, [r7, #28]
 801049a:	08da      	lsrs	r2, r3, #3
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	3208      	adds	r2, #8
 80104a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80104a6:	69fb      	ldr	r3, [r7, #28]
 80104a8:	f003 0307 	and.w	r3, r3, #7
 80104ac:	009b      	lsls	r3, r3, #2
 80104ae:	220f      	movs	r2, #15
 80104b0:	fa02 f303 	lsl.w	r3, r2, r3
 80104b4:	43db      	mvns	r3, r3
 80104b6:	69ba      	ldr	r2, [r7, #24]
 80104b8:	4013      	ands	r3, r2
 80104ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	691a      	ldr	r2, [r3, #16]
 80104c0:	69fb      	ldr	r3, [r7, #28]
 80104c2:	f003 0307 	and.w	r3, r3, #7
 80104c6:	009b      	lsls	r3, r3, #2
 80104c8:	fa02 f303 	lsl.w	r3, r2, r3
 80104cc:	69ba      	ldr	r2, [r7, #24]
 80104ce:	4313      	orrs	r3, r2
 80104d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80104d2:	69fb      	ldr	r3, [r7, #28]
 80104d4:	08da      	lsrs	r2, r3, #3
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	3208      	adds	r2, #8
 80104da:	69b9      	ldr	r1, [r7, #24]
 80104dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80104e6:	69fb      	ldr	r3, [r7, #28]
 80104e8:	005b      	lsls	r3, r3, #1
 80104ea:	2203      	movs	r2, #3
 80104ec:	fa02 f303 	lsl.w	r3, r2, r3
 80104f0:	43db      	mvns	r3, r3
 80104f2:	69ba      	ldr	r2, [r7, #24]
 80104f4:	4013      	ands	r3, r2
 80104f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	f003 0203 	and.w	r2, r3, #3
 8010500:	69fb      	ldr	r3, [r7, #28]
 8010502:	005b      	lsls	r3, r3, #1
 8010504:	fa02 f303 	lsl.w	r3, r2, r3
 8010508:	69ba      	ldr	r2, [r7, #24]
 801050a:	4313      	orrs	r3, r2
 801050c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	69ba      	ldr	r2, [r7, #24]
 8010512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	685b      	ldr	r3, [r3, #4]
 8010518:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801051c:	2b00      	cmp	r3, #0
 801051e:	f000 80ae 	beq.w	801067e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010522:	2300      	movs	r3, #0
 8010524:	60fb      	str	r3, [r7, #12]
 8010526:	4b5d      	ldr	r3, [pc, #372]	@ (801069c <HAL_GPIO_Init+0x300>)
 8010528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801052a:	4a5c      	ldr	r2, [pc, #368]	@ (801069c <HAL_GPIO_Init+0x300>)
 801052c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010530:	6453      	str	r3, [r2, #68]	@ 0x44
 8010532:	4b5a      	ldr	r3, [pc, #360]	@ (801069c <HAL_GPIO_Init+0x300>)
 8010534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801053a:	60fb      	str	r3, [r7, #12]
 801053c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801053e:	4a58      	ldr	r2, [pc, #352]	@ (80106a0 <HAL_GPIO_Init+0x304>)
 8010540:	69fb      	ldr	r3, [r7, #28]
 8010542:	089b      	lsrs	r3, r3, #2
 8010544:	3302      	adds	r3, #2
 8010546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801054a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801054c:	69fb      	ldr	r3, [r7, #28]
 801054e:	f003 0303 	and.w	r3, r3, #3
 8010552:	009b      	lsls	r3, r3, #2
 8010554:	220f      	movs	r2, #15
 8010556:	fa02 f303 	lsl.w	r3, r2, r3
 801055a:	43db      	mvns	r3, r3
 801055c:	69ba      	ldr	r2, [r7, #24]
 801055e:	4013      	ands	r3, r2
 8010560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	4a4f      	ldr	r2, [pc, #316]	@ (80106a4 <HAL_GPIO_Init+0x308>)
 8010566:	4293      	cmp	r3, r2
 8010568:	d025      	beq.n	80105b6 <HAL_GPIO_Init+0x21a>
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	4a4e      	ldr	r2, [pc, #312]	@ (80106a8 <HAL_GPIO_Init+0x30c>)
 801056e:	4293      	cmp	r3, r2
 8010570:	d01f      	beq.n	80105b2 <HAL_GPIO_Init+0x216>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	4a4d      	ldr	r2, [pc, #308]	@ (80106ac <HAL_GPIO_Init+0x310>)
 8010576:	4293      	cmp	r3, r2
 8010578:	d019      	beq.n	80105ae <HAL_GPIO_Init+0x212>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	4a4c      	ldr	r2, [pc, #304]	@ (80106b0 <HAL_GPIO_Init+0x314>)
 801057e:	4293      	cmp	r3, r2
 8010580:	d013      	beq.n	80105aa <HAL_GPIO_Init+0x20e>
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	4a4b      	ldr	r2, [pc, #300]	@ (80106b4 <HAL_GPIO_Init+0x318>)
 8010586:	4293      	cmp	r3, r2
 8010588:	d00d      	beq.n	80105a6 <HAL_GPIO_Init+0x20a>
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	4a4a      	ldr	r2, [pc, #296]	@ (80106b8 <HAL_GPIO_Init+0x31c>)
 801058e:	4293      	cmp	r3, r2
 8010590:	d007      	beq.n	80105a2 <HAL_GPIO_Init+0x206>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	4a49      	ldr	r2, [pc, #292]	@ (80106bc <HAL_GPIO_Init+0x320>)
 8010596:	4293      	cmp	r3, r2
 8010598:	d101      	bne.n	801059e <HAL_GPIO_Init+0x202>
 801059a:	2306      	movs	r3, #6
 801059c:	e00c      	b.n	80105b8 <HAL_GPIO_Init+0x21c>
 801059e:	2307      	movs	r3, #7
 80105a0:	e00a      	b.n	80105b8 <HAL_GPIO_Init+0x21c>
 80105a2:	2305      	movs	r3, #5
 80105a4:	e008      	b.n	80105b8 <HAL_GPIO_Init+0x21c>
 80105a6:	2304      	movs	r3, #4
 80105a8:	e006      	b.n	80105b8 <HAL_GPIO_Init+0x21c>
 80105aa:	2303      	movs	r3, #3
 80105ac:	e004      	b.n	80105b8 <HAL_GPIO_Init+0x21c>
 80105ae:	2302      	movs	r3, #2
 80105b0:	e002      	b.n	80105b8 <HAL_GPIO_Init+0x21c>
 80105b2:	2301      	movs	r3, #1
 80105b4:	e000      	b.n	80105b8 <HAL_GPIO_Init+0x21c>
 80105b6:	2300      	movs	r3, #0
 80105b8:	69fa      	ldr	r2, [r7, #28]
 80105ba:	f002 0203 	and.w	r2, r2, #3
 80105be:	0092      	lsls	r2, r2, #2
 80105c0:	4093      	lsls	r3, r2
 80105c2:	69ba      	ldr	r2, [r7, #24]
 80105c4:	4313      	orrs	r3, r2
 80105c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80105c8:	4935      	ldr	r1, [pc, #212]	@ (80106a0 <HAL_GPIO_Init+0x304>)
 80105ca:	69fb      	ldr	r3, [r7, #28]
 80105cc:	089b      	lsrs	r3, r3, #2
 80105ce:	3302      	adds	r3, #2
 80105d0:	69ba      	ldr	r2, [r7, #24]
 80105d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80105d6:	4b3a      	ldr	r3, [pc, #232]	@ (80106c0 <HAL_GPIO_Init+0x324>)
 80105d8:	689b      	ldr	r3, [r3, #8]
 80105da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80105dc:	693b      	ldr	r3, [r7, #16]
 80105de:	43db      	mvns	r3, r3
 80105e0:	69ba      	ldr	r2, [r7, #24]
 80105e2:	4013      	ands	r3, r2
 80105e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	685b      	ldr	r3, [r3, #4]
 80105ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d003      	beq.n	80105fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80105f2:	69ba      	ldr	r2, [r7, #24]
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	4313      	orrs	r3, r2
 80105f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80105fa:	4a31      	ldr	r2, [pc, #196]	@ (80106c0 <HAL_GPIO_Init+0x324>)
 80105fc:	69bb      	ldr	r3, [r7, #24]
 80105fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010600:	4b2f      	ldr	r3, [pc, #188]	@ (80106c0 <HAL_GPIO_Init+0x324>)
 8010602:	68db      	ldr	r3, [r3, #12]
 8010604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	43db      	mvns	r3, r3
 801060a:	69ba      	ldr	r2, [r7, #24]
 801060c:	4013      	ands	r3, r2
 801060e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	685b      	ldr	r3, [r3, #4]
 8010614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010618:	2b00      	cmp	r3, #0
 801061a:	d003      	beq.n	8010624 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 801061c:	69ba      	ldr	r2, [r7, #24]
 801061e:	693b      	ldr	r3, [r7, #16]
 8010620:	4313      	orrs	r3, r2
 8010622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010624:	4a26      	ldr	r2, [pc, #152]	@ (80106c0 <HAL_GPIO_Init+0x324>)
 8010626:	69bb      	ldr	r3, [r7, #24]
 8010628:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801062a:	4b25      	ldr	r3, [pc, #148]	@ (80106c0 <HAL_GPIO_Init+0x324>)
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010630:	693b      	ldr	r3, [r7, #16]
 8010632:	43db      	mvns	r3, r3
 8010634:	69ba      	ldr	r2, [r7, #24]
 8010636:	4013      	ands	r3, r2
 8010638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	685b      	ldr	r3, [r3, #4]
 801063e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010642:	2b00      	cmp	r3, #0
 8010644:	d003      	beq.n	801064e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8010646:	69ba      	ldr	r2, [r7, #24]
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	4313      	orrs	r3, r2
 801064c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801064e:	4a1c      	ldr	r2, [pc, #112]	@ (80106c0 <HAL_GPIO_Init+0x324>)
 8010650:	69bb      	ldr	r3, [r7, #24]
 8010652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010654:	4b1a      	ldr	r3, [pc, #104]	@ (80106c0 <HAL_GPIO_Init+0x324>)
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	43db      	mvns	r3, r3
 801065e:	69ba      	ldr	r2, [r7, #24]
 8010660:	4013      	ands	r3, r2
 8010662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801066c:	2b00      	cmp	r3, #0
 801066e:	d003      	beq.n	8010678 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8010670:	69ba      	ldr	r2, [r7, #24]
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	4313      	orrs	r3, r2
 8010676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010678:	4a11      	ldr	r2, [pc, #68]	@ (80106c0 <HAL_GPIO_Init+0x324>)
 801067a:	69bb      	ldr	r3, [r7, #24]
 801067c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801067e:	69fb      	ldr	r3, [r7, #28]
 8010680:	3301      	adds	r3, #1
 8010682:	61fb      	str	r3, [r7, #28]
 8010684:	69fb      	ldr	r3, [r7, #28]
 8010686:	2b0f      	cmp	r3, #15
 8010688:	f67f ae96 	bls.w	80103b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801068c:	bf00      	nop
 801068e:	bf00      	nop
 8010690:	3724      	adds	r7, #36	@ 0x24
 8010692:	46bd      	mov	sp, r7
 8010694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010698:	4770      	bx	lr
 801069a:	bf00      	nop
 801069c:	40023800 	.word	0x40023800
 80106a0:	40013800 	.word	0x40013800
 80106a4:	40020000 	.word	0x40020000
 80106a8:	40020400 	.word	0x40020400
 80106ac:	40020800 	.word	0x40020800
 80106b0:	40020c00 	.word	0x40020c00
 80106b4:	40021000 	.word	0x40021000
 80106b8:	40021400 	.word	0x40021400
 80106bc:	40021800 	.word	0x40021800
 80106c0:	40013c00 	.word	0x40013c00

080106c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80106c4:	b480      	push	{r7}
 80106c6:	b085      	sub	sp, #20
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	460b      	mov	r3, r1
 80106ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	691a      	ldr	r2, [r3, #16]
 80106d4:	887b      	ldrh	r3, [r7, #2]
 80106d6:	4013      	ands	r3, r2
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d002      	beq.n	80106e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80106dc:	2301      	movs	r3, #1
 80106de:	73fb      	strb	r3, [r7, #15]
 80106e0:	e001      	b.n	80106e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80106e2:	2300      	movs	r3, #0
 80106e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80106e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	3714      	adds	r7, #20
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr

080106f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b083      	sub	sp, #12
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
 80106fc:	460b      	mov	r3, r1
 80106fe:	807b      	strh	r3, [r7, #2]
 8010700:	4613      	mov	r3, r2
 8010702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010704:	787b      	ldrb	r3, [r7, #1]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d003      	beq.n	8010712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801070a:	887a      	ldrh	r2, [r7, #2]
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8010710:	e003      	b.n	801071a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8010712:	887b      	ldrh	r3, [r7, #2]
 8010714:	041a      	lsls	r2, r3, #16
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	619a      	str	r2, [r3, #24]
}
 801071a:	bf00      	nop
 801071c:	370c      	adds	r7, #12
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr

08010726 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8010726:	b480      	push	{r7}
 8010728:	b085      	sub	sp, #20
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
 801072e:	460b      	mov	r3, r1
 8010730:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	695b      	ldr	r3, [r3, #20]
 8010736:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8010738:	887a      	ldrh	r2, [r7, #2]
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	4013      	ands	r3, r2
 801073e:	041a      	lsls	r2, r3, #16
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	43d9      	mvns	r1, r3
 8010744:	887b      	ldrh	r3, [r7, #2]
 8010746:	400b      	ands	r3, r1
 8010748:	431a      	orrs	r2, r3
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	619a      	str	r2, [r3, #24]
}
 801074e:	bf00      	nop
 8010750:	3714      	adds	r7, #20
 8010752:	46bd      	mov	sp, r7
 8010754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010758:	4770      	bx	lr
	...

0801075c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b082      	sub	sp, #8
 8010760:	af00      	add	r7, sp, #0
 8010762:	4603      	mov	r3, r0
 8010764:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8010766:	4b08      	ldr	r3, [pc, #32]	@ (8010788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010768:	695a      	ldr	r2, [r3, #20]
 801076a:	88fb      	ldrh	r3, [r7, #6]
 801076c:	4013      	ands	r3, r2
 801076e:	2b00      	cmp	r3, #0
 8010770:	d006      	beq.n	8010780 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8010772:	4a05      	ldr	r2, [pc, #20]	@ (8010788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010774:	88fb      	ldrh	r3, [r7, #6]
 8010776:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010778:	88fb      	ldrh	r3, [r7, #6]
 801077a:	4618      	mov	r0, r3
 801077c:	f7fd ff12 	bl	800e5a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8010780:	bf00      	nop
 8010782:	3708      	adds	r7, #8
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}
 8010788:	40013c00 	.word	0x40013c00

0801078c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b082      	sub	sp, #8
 8010790:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8010792:	2300      	movs	r3, #0
 8010794:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8010796:	2300      	movs	r3, #0
 8010798:	603b      	str	r3, [r7, #0]
 801079a:	4b20      	ldr	r3, [pc, #128]	@ (801081c <HAL_PWREx_EnableOverDrive+0x90>)
 801079c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801079e:	4a1f      	ldr	r2, [pc, #124]	@ (801081c <HAL_PWREx_EnableOverDrive+0x90>)
 80107a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80107a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80107a6:	4b1d      	ldr	r3, [pc, #116]	@ (801081c <HAL_PWREx_EnableOverDrive+0x90>)
 80107a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80107ae:	603b      	str	r3, [r7, #0]
 80107b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80107b2:	4b1b      	ldr	r3, [pc, #108]	@ (8010820 <HAL_PWREx_EnableOverDrive+0x94>)
 80107b4:	2201      	movs	r2, #1
 80107b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80107b8:	f7ff fc4c 	bl	8010054 <HAL_GetTick>
 80107bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80107be:	e009      	b.n	80107d4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80107c0:	f7ff fc48 	bl	8010054 <HAL_GetTick>
 80107c4:	4602      	mov	r2, r0
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	1ad3      	subs	r3, r2, r3
 80107ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80107ce:	d901      	bls.n	80107d4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80107d0:	2303      	movs	r3, #3
 80107d2:	e01f      	b.n	8010814 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80107d4:	4b13      	ldr	r3, [pc, #76]	@ (8010824 <HAL_PWREx_EnableOverDrive+0x98>)
 80107d6:	685b      	ldr	r3, [r3, #4]
 80107d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80107dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80107e0:	d1ee      	bne.n	80107c0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80107e2:	4b11      	ldr	r3, [pc, #68]	@ (8010828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80107e4:	2201      	movs	r2, #1
 80107e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80107e8:	f7ff fc34 	bl	8010054 <HAL_GetTick>
 80107ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80107ee:	e009      	b.n	8010804 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80107f0:	f7ff fc30 	bl	8010054 <HAL_GetTick>
 80107f4:	4602      	mov	r2, r0
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	1ad3      	subs	r3, r2, r3
 80107fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80107fe:	d901      	bls.n	8010804 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8010800:	2303      	movs	r3, #3
 8010802:	e007      	b.n	8010814 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8010804:	4b07      	ldr	r3, [pc, #28]	@ (8010824 <HAL_PWREx_EnableOverDrive+0x98>)
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801080c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010810:	d1ee      	bne.n	80107f0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8010812:	2300      	movs	r3, #0
}
 8010814:	4618      	mov	r0, r3
 8010816:	3708      	adds	r7, #8
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}
 801081c:	40023800 	.word	0x40023800
 8010820:	420e0040 	.word	0x420e0040
 8010824:	40007000 	.word	0x40007000
 8010828:	420e0044 	.word	0x420e0044

0801082c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b084      	sub	sp, #16
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
 8010834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d101      	bne.n	8010840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801083c:	2301      	movs	r3, #1
 801083e:	e0cc      	b.n	80109da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010840:	4b68      	ldr	r3, [pc, #416]	@ (80109e4 <HAL_RCC_ClockConfig+0x1b8>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	f003 030f 	and.w	r3, r3, #15
 8010848:	683a      	ldr	r2, [r7, #0]
 801084a:	429a      	cmp	r2, r3
 801084c:	d90c      	bls.n	8010868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801084e:	4b65      	ldr	r3, [pc, #404]	@ (80109e4 <HAL_RCC_ClockConfig+0x1b8>)
 8010850:	683a      	ldr	r2, [r7, #0]
 8010852:	b2d2      	uxtb	r2, r2
 8010854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010856:	4b63      	ldr	r3, [pc, #396]	@ (80109e4 <HAL_RCC_ClockConfig+0x1b8>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	f003 030f 	and.w	r3, r3, #15
 801085e:	683a      	ldr	r2, [r7, #0]
 8010860:	429a      	cmp	r2, r3
 8010862:	d001      	beq.n	8010868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010864:	2301      	movs	r3, #1
 8010866:	e0b8      	b.n	80109da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	f003 0302 	and.w	r3, r3, #2
 8010870:	2b00      	cmp	r3, #0
 8010872:	d020      	beq.n	80108b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	f003 0304 	and.w	r3, r3, #4
 801087c:	2b00      	cmp	r3, #0
 801087e:	d005      	beq.n	801088c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010880:	4b59      	ldr	r3, [pc, #356]	@ (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 8010882:	689b      	ldr	r3, [r3, #8]
 8010884:	4a58      	ldr	r2, [pc, #352]	@ (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 8010886:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 801088a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	f003 0308 	and.w	r3, r3, #8
 8010894:	2b00      	cmp	r3, #0
 8010896:	d005      	beq.n	80108a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010898:	4b53      	ldr	r3, [pc, #332]	@ (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 801089a:	689b      	ldr	r3, [r3, #8]
 801089c:	4a52      	ldr	r2, [pc, #328]	@ (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 801089e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80108a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80108a4:	4b50      	ldr	r3, [pc, #320]	@ (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 80108a6:	689b      	ldr	r3, [r3, #8]
 80108a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	689b      	ldr	r3, [r3, #8]
 80108b0:	494d      	ldr	r1, [pc, #308]	@ (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 80108b2:	4313      	orrs	r3, r2
 80108b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f003 0301 	and.w	r3, r3, #1
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d044      	beq.n	801094c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	685b      	ldr	r3, [r3, #4]
 80108c6:	2b01      	cmp	r3, #1
 80108c8:	d107      	bne.n	80108da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80108ca:	4b47      	ldr	r3, [pc, #284]	@ (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d119      	bne.n	801090a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80108d6:	2301      	movs	r3, #1
 80108d8:	e07f      	b.n	80109da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	685b      	ldr	r3, [r3, #4]
 80108de:	2b02      	cmp	r3, #2
 80108e0:	d003      	beq.n	80108ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80108e6:	2b03      	cmp	r3, #3
 80108e8:	d107      	bne.n	80108fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80108ea:	4b3f      	ldr	r3, [pc, #252]	@ (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d109      	bne.n	801090a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80108f6:	2301      	movs	r3, #1
 80108f8:	e06f      	b.n	80109da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80108fa:	4b3b      	ldr	r3, [pc, #236]	@ (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	f003 0302 	and.w	r3, r3, #2
 8010902:	2b00      	cmp	r3, #0
 8010904:	d101      	bne.n	801090a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010906:	2301      	movs	r3, #1
 8010908:	e067      	b.n	80109da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801090a:	4b37      	ldr	r3, [pc, #220]	@ (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 801090c:	689b      	ldr	r3, [r3, #8]
 801090e:	f023 0203 	bic.w	r2, r3, #3
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	4934      	ldr	r1, [pc, #208]	@ (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 8010918:	4313      	orrs	r3, r2
 801091a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801091c:	f7ff fb9a 	bl	8010054 <HAL_GetTick>
 8010920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010922:	e00a      	b.n	801093a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010924:	f7ff fb96 	bl	8010054 <HAL_GetTick>
 8010928:	4602      	mov	r2, r0
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	1ad3      	subs	r3, r2, r3
 801092e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010932:	4293      	cmp	r3, r2
 8010934:	d901      	bls.n	801093a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010936:	2303      	movs	r3, #3
 8010938:	e04f      	b.n	80109da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801093a:	4b2b      	ldr	r3, [pc, #172]	@ (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 801093c:	689b      	ldr	r3, [r3, #8]
 801093e:	f003 020c 	and.w	r2, r3, #12
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	685b      	ldr	r3, [r3, #4]
 8010946:	009b      	lsls	r3, r3, #2
 8010948:	429a      	cmp	r2, r3
 801094a:	d1eb      	bne.n	8010924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801094c:	4b25      	ldr	r3, [pc, #148]	@ (80109e4 <HAL_RCC_ClockConfig+0x1b8>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	f003 030f 	and.w	r3, r3, #15
 8010954:	683a      	ldr	r2, [r7, #0]
 8010956:	429a      	cmp	r2, r3
 8010958:	d20c      	bcs.n	8010974 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801095a:	4b22      	ldr	r3, [pc, #136]	@ (80109e4 <HAL_RCC_ClockConfig+0x1b8>)
 801095c:	683a      	ldr	r2, [r7, #0]
 801095e:	b2d2      	uxtb	r2, r2
 8010960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010962:	4b20      	ldr	r3, [pc, #128]	@ (80109e4 <HAL_RCC_ClockConfig+0x1b8>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	f003 030f 	and.w	r3, r3, #15
 801096a:	683a      	ldr	r2, [r7, #0]
 801096c:	429a      	cmp	r2, r3
 801096e:	d001      	beq.n	8010974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8010970:	2301      	movs	r3, #1
 8010972:	e032      	b.n	80109da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f003 0304 	and.w	r3, r3, #4
 801097c:	2b00      	cmp	r3, #0
 801097e:	d008      	beq.n	8010992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010980:	4b19      	ldr	r3, [pc, #100]	@ (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 8010982:	689b      	ldr	r3, [r3, #8]
 8010984:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	4916      	ldr	r1, [pc, #88]	@ (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 801098e:	4313      	orrs	r3, r2
 8010990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	f003 0308 	and.w	r3, r3, #8
 801099a:	2b00      	cmp	r3, #0
 801099c:	d009      	beq.n	80109b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801099e:	4b12      	ldr	r3, [pc, #72]	@ (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 80109a0:	689b      	ldr	r3, [r3, #8]
 80109a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	691b      	ldr	r3, [r3, #16]
 80109aa:	00db      	lsls	r3, r3, #3
 80109ac:	490e      	ldr	r1, [pc, #56]	@ (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 80109ae:	4313      	orrs	r3, r2
 80109b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80109b2:	f000 f887 	bl	8010ac4 <HAL_RCC_GetSysClockFreq>
 80109b6:	4602      	mov	r2, r0
 80109b8:	4b0b      	ldr	r3, [pc, #44]	@ (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 80109ba:	689b      	ldr	r3, [r3, #8]
 80109bc:	091b      	lsrs	r3, r3, #4
 80109be:	f003 030f 	and.w	r3, r3, #15
 80109c2:	490a      	ldr	r1, [pc, #40]	@ (80109ec <HAL_RCC_ClockConfig+0x1c0>)
 80109c4:	5ccb      	ldrb	r3, [r1, r3]
 80109c6:	fa22 f303 	lsr.w	r3, r2, r3
 80109ca:	4a09      	ldr	r2, [pc, #36]	@ (80109f0 <HAL_RCC_ClockConfig+0x1c4>)
 80109cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80109ce:	4b09      	ldr	r3, [pc, #36]	@ (80109f4 <HAL_RCC_ClockConfig+0x1c8>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7fe fda2 	bl	800f51c <HAL_InitTick>

  return HAL_OK;
 80109d8:	2300      	movs	r3, #0
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3710      	adds	r7, #16
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	40023c00 	.word	0x40023c00
 80109e8:	40023800 	.word	0x40023800
 80109ec:	0801d8d8 	.word	0x0801d8d8
 80109f0:	20000038 	.word	0x20000038
 80109f4:	2000007c 	.word	0x2000007c

080109f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80109f8:	b480      	push	{r7}
 80109fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80109fc:	4b03      	ldr	r3, [pc, #12]	@ (8010a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80109fe:	681b      	ldr	r3, [r3, #0]
}
 8010a00:	4618      	mov	r0, r3
 8010a02:	46bd      	mov	sp, r7
 8010a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a08:	4770      	bx	lr
 8010a0a:	bf00      	nop
 8010a0c:	20000038 	.word	0x20000038

08010a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8010a14:	f7ff fff0 	bl	80109f8 <HAL_RCC_GetHCLKFreq>
 8010a18:	4602      	mov	r2, r0
 8010a1a:	4b05      	ldr	r3, [pc, #20]	@ (8010a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010a1c:	689b      	ldr	r3, [r3, #8]
 8010a1e:	0a9b      	lsrs	r3, r3, #10
 8010a20:	f003 0307 	and.w	r3, r3, #7
 8010a24:	4903      	ldr	r1, [pc, #12]	@ (8010a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010a26:	5ccb      	ldrb	r3, [r1, r3]
 8010a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	40023800 	.word	0x40023800
 8010a34:	0801d8e8 	.word	0x0801d8e8

08010a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8010a3c:	f7ff ffdc 	bl	80109f8 <HAL_RCC_GetHCLKFreq>
 8010a40:	4602      	mov	r2, r0
 8010a42:	4b05      	ldr	r3, [pc, #20]	@ (8010a58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010a44:	689b      	ldr	r3, [r3, #8]
 8010a46:	0b5b      	lsrs	r3, r3, #13
 8010a48:	f003 0307 	and.w	r3, r3, #7
 8010a4c:	4903      	ldr	r1, [pc, #12]	@ (8010a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8010a4e:	5ccb      	ldrb	r3, [r1, r3]
 8010a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010a54:	4618      	mov	r0, r3
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	40023800 	.word	0x40023800
 8010a5c:	0801d8e8 	.word	0x0801d8e8

08010a60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010a60:	b480      	push	{r7}
 8010a62:	b083      	sub	sp, #12
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	220f      	movs	r2, #15
 8010a6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010a70:	4b12      	ldr	r3, [pc, #72]	@ (8010abc <HAL_RCC_GetClockConfig+0x5c>)
 8010a72:	689b      	ldr	r3, [r3, #8]
 8010a74:	f003 0203 	and.w	r2, r3, #3
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8010a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8010abc <HAL_RCC_GetClockConfig+0x5c>)
 8010a7e:	689b      	ldr	r3, [r3, #8]
 8010a80:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8010a88:	4b0c      	ldr	r3, [pc, #48]	@ (8010abc <HAL_RCC_GetClockConfig+0x5c>)
 8010a8a:	689b      	ldr	r3, [r3, #8]
 8010a8c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8010a94:	4b09      	ldr	r3, [pc, #36]	@ (8010abc <HAL_RCC_GetClockConfig+0x5c>)
 8010a96:	689b      	ldr	r3, [r3, #8]
 8010a98:	08db      	lsrs	r3, r3, #3
 8010a9a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010aa2:	4b07      	ldr	r3, [pc, #28]	@ (8010ac0 <HAL_RCC_GetClockConfig+0x60>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	f003 020f 	and.w	r2, r3, #15
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	601a      	str	r2, [r3, #0]
}
 8010aae:	bf00      	nop
 8010ab0:	370c      	adds	r7, #12
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab8:	4770      	bx	lr
 8010aba:	bf00      	nop
 8010abc:	40023800 	.word	0x40023800
 8010ac0:	40023c00 	.word	0x40023c00

08010ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010ac8:	b0a6      	sub	sp, #152	@ 0x98
 8010aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8010acc:	2300      	movs	r3, #0
 8010ace:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010aea:	4bc8      	ldr	r3, [pc, #800]	@ (8010e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8010aec:	689b      	ldr	r3, [r3, #8]
 8010aee:	f003 030c 	and.w	r3, r3, #12
 8010af2:	2b0c      	cmp	r3, #12
 8010af4:	f200 817e 	bhi.w	8010df4 <HAL_RCC_GetSysClockFreq+0x330>
 8010af8:	a201      	add	r2, pc, #4	@ (adr r2, 8010b00 <HAL_RCC_GetSysClockFreq+0x3c>)
 8010afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010afe:	bf00      	nop
 8010b00:	08010b35 	.word	0x08010b35
 8010b04:	08010df5 	.word	0x08010df5
 8010b08:	08010df5 	.word	0x08010df5
 8010b0c:	08010df5 	.word	0x08010df5
 8010b10:	08010b3d 	.word	0x08010b3d
 8010b14:	08010df5 	.word	0x08010df5
 8010b18:	08010df5 	.word	0x08010df5
 8010b1c:	08010df5 	.word	0x08010df5
 8010b20:	08010b45 	.word	0x08010b45
 8010b24:	08010df5 	.word	0x08010df5
 8010b28:	08010df5 	.word	0x08010df5
 8010b2c:	08010df5 	.word	0x08010df5
 8010b30:	08010caf 	.word	0x08010caf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010b34:	4bb6      	ldr	r3, [pc, #728]	@ (8010e10 <HAL_RCC_GetSysClockFreq+0x34c>)
 8010b36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8010b3a:	e15f      	b.n	8010dfc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010b3c:	4bb5      	ldr	r3, [pc, #724]	@ (8010e14 <HAL_RCC_GetSysClockFreq+0x350>)
 8010b3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8010b42:	e15b      	b.n	8010dfc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010b44:	4bb1      	ldr	r3, [pc, #708]	@ (8010e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8010b46:	685b      	ldr	r3, [r3, #4]
 8010b48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010b4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010b50:	4bae      	ldr	r3, [pc, #696]	@ (8010e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d031      	beq.n	8010bc0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010b5c:	4bab      	ldr	r3, [pc, #684]	@ (8010e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8010b5e:	685b      	ldr	r3, [r3, #4]
 8010b60:	099b      	lsrs	r3, r3, #6
 8010b62:	2200      	movs	r2, #0
 8010b64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010b66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010b68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8010b70:	2300      	movs	r3, #0
 8010b72:	667b      	str	r3, [r7, #100]	@ 0x64
 8010b74:	4ba7      	ldr	r3, [pc, #668]	@ (8010e14 <HAL_RCC_GetSysClockFreq+0x350>)
 8010b76:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8010b7a:	462a      	mov	r2, r5
 8010b7c:	fb03 f202 	mul.w	r2, r3, r2
 8010b80:	2300      	movs	r3, #0
 8010b82:	4621      	mov	r1, r4
 8010b84:	fb01 f303 	mul.w	r3, r1, r3
 8010b88:	4413      	add	r3, r2
 8010b8a:	4aa2      	ldr	r2, [pc, #648]	@ (8010e14 <HAL_RCC_GetSysClockFreq+0x350>)
 8010b8c:	4621      	mov	r1, r4
 8010b8e:	fba1 1202 	umull	r1, r2, r1, r2
 8010b92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010b94:	460a      	mov	r2, r1
 8010b96:	67ba      	str	r2, [r7, #120]	@ 0x78
 8010b98:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010b9a:	4413      	add	r3, r2
 8010b9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010ba6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8010ba8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010bac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8010bb0:	f7f8 f84a 	bl	8008c48 <__aeabi_uldivmod>
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	460b      	mov	r3, r1
 8010bb8:	4613      	mov	r3, r2
 8010bba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010bbe:	e064      	b.n	8010c8a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010bc0:	4b92      	ldr	r3, [pc, #584]	@ (8010e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8010bc2:	685b      	ldr	r3, [r3, #4]
 8010bc4:	099b      	lsrs	r3, r3, #6
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8010bca:	657a      	str	r2, [r7, #84]	@ 0x54
 8010bcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010bd8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8010bdc:	4622      	mov	r2, r4
 8010bde:	462b      	mov	r3, r5
 8010be0:	f04f 0000 	mov.w	r0, #0
 8010be4:	f04f 0100 	mov.w	r1, #0
 8010be8:	0159      	lsls	r1, r3, #5
 8010bea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010bee:	0150      	lsls	r0, r2, #5
 8010bf0:	4602      	mov	r2, r0
 8010bf2:	460b      	mov	r3, r1
 8010bf4:	4621      	mov	r1, r4
 8010bf6:	1a51      	subs	r1, r2, r1
 8010bf8:	6139      	str	r1, [r7, #16]
 8010bfa:	4629      	mov	r1, r5
 8010bfc:	eb63 0301 	sbc.w	r3, r3, r1
 8010c00:	617b      	str	r3, [r7, #20]
 8010c02:	f04f 0200 	mov.w	r2, #0
 8010c06:	f04f 0300 	mov.w	r3, #0
 8010c0a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010c0e:	4659      	mov	r1, fp
 8010c10:	018b      	lsls	r3, r1, #6
 8010c12:	4651      	mov	r1, sl
 8010c14:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8010c18:	4651      	mov	r1, sl
 8010c1a:	018a      	lsls	r2, r1, #6
 8010c1c:	4651      	mov	r1, sl
 8010c1e:	ebb2 0801 	subs.w	r8, r2, r1
 8010c22:	4659      	mov	r1, fp
 8010c24:	eb63 0901 	sbc.w	r9, r3, r1
 8010c28:	f04f 0200 	mov.w	r2, #0
 8010c2c:	f04f 0300 	mov.w	r3, #0
 8010c30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010c34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010c38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010c3c:	4690      	mov	r8, r2
 8010c3e:	4699      	mov	r9, r3
 8010c40:	4623      	mov	r3, r4
 8010c42:	eb18 0303 	adds.w	r3, r8, r3
 8010c46:	60bb      	str	r3, [r7, #8]
 8010c48:	462b      	mov	r3, r5
 8010c4a:	eb49 0303 	adc.w	r3, r9, r3
 8010c4e:	60fb      	str	r3, [r7, #12]
 8010c50:	f04f 0200 	mov.w	r2, #0
 8010c54:	f04f 0300 	mov.w	r3, #0
 8010c58:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8010c5c:	4629      	mov	r1, r5
 8010c5e:	028b      	lsls	r3, r1, #10
 8010c60:	4621      	mov	r1, r4
 8010c62:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010c66:	4621      	mov	r1, r4
 8010c68:	028a      	lsls	r2, r1, #10
 8010c6a:	4610      	mov	r0, r2
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010c72:	2200      	movs	r2, #0
 8010c74:	643b      	str	r3, [r7, #64]	@ 0x40
 8010c76:	647a      	str	r2, [r7, #68]	@ 0x44
 8010c78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8010c7c:	f7f7 ffe4 	bl	8008c48 <__aeabi_uldivmod>
 8010c80:	4602      	mov	r2, r0
 8010c82:	460b      	mov	r3, r1
 8010c84:	4613      	mov	r3, r2
 8010c86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8010c8a:	4b60      	ldr	r3, [pc, #384]	@ (8010e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8010c8c:	685b      	ldr	r3, [r3, #4]
 8010c8e:	0c1b      	lsrs	r3, r3, #16
 8010c90:	f003 0303 	and.w	r3, r3, #3
 8010c94:	3301      	adds	r3, #1
 8010c96:	005b      	lsls	r3, r3, #1
 8010c98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8010c9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ca8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8010cac:	e0a6      	b.n	8010dfc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010cae:	4b57      	ldr	r3, [pc, #348]	@ (8010e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8010cb0:	685b      	ldr	r3, [r3, #4]
 8010cb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010cb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010cba:	4b54      	ldr	r3, [pc, #336]	@ (8010e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8010cbc:	685b      	ldr	r3, [r3, #4]
 8010cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d02a      	beq.n	8010d1c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010cc6:	4b51      	ldr	r3, [pc, #324]	@ (8010e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	099b      	lsrs	r3, r3, #6
 8010ccc:	2200      	movs	r2, #0
 8010cce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010cd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8010cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8010cd8:	2100      	movs	r1, #0
 8010cda:	4b4e      	ldr	r3, [pc, #312]	@ (8010e14 <HAL_RCC_GetSysClockFreq+0x350>)
 8010cdc:	fb03 f201 	mul.w	r2, r3, r1
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	fb00 f303 	mul.w	r3, r0, r3
 8010ce6:	4413      	add	r3, r2
 8010ce8:	4a4a      	ldr	r2, [pc, #296]	@ (8010e14 <HAL_RCC_GetSysClockFreq+0x350>)
 8010cea:	fba0 1202 	umull	r1, r2, r0, r2
 8010cee:	677a      	str	r2, [r7, #116]	@ 0x74
 8010cf0:	460a      	mov	r2, r1
 8010cf2:	673a      	str	r2, [r7, #112]	@ 0x70
 8010cf4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8010cf6:	4413      	add	r3, r2
 8010cf8:	677b      	str	r3, [r7, #116]	@ 0x74
 8010cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010cfe:	2200      	movs	r2, #0
 8010d00:	633b      	str	r3, [r7, #48]	@ 0x30
 8010d02:	637a      	str	r2, [r7, #52]	@ 0x34
 8010d04:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8010d08:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8010d0c:	f7f7 ff9c 	bl	8008c48 <__aeabi_uldivmod>
 8010d10:	4602      	mov	r2, r0
 8010d12:	460b      	mov	r3, r1
 8010d14:	4613      	mov	r3, r2
 8010d16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010d1a:	e05b      	b.n	8010dd4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8010e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8010d1e:	685b      	ldr	r3, [r3, #4]
 8010d20:	099b      	lsrs	r3, r3, #6
 8010d22:	2200      	movs	r2, #0
 8010d24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010d26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d2e:	623b      	str	r3, [r7, #32]
 8010d30:	2300      	movs	r3, #0
 8010d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8010d38:	4642      	mov	r2, r8
 8010d3a:	464b      	mov	r3, r9
 8010d3c:	f04f 0000 	mov.w	r0, #0
 8010d40:	f04f 0100 	mov.w	r1, #0
 8010d44:	0159      	lsls	r1, r3, #5
 8010d46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010d4a:	0150      	lsls	r0, r2, #5
 8010d4c:	4602      	mov	r2, r0
 8010d4e:	460b      	mov	r3, r1
 8010d50:	4641      	mov	r1, r8
 8010d52:	ebb2 0a01 	subs.w	sl, r2, r1
 8010d56:	4649      	mov	r1, r9
 8010d58:	eb63 0b01 	sbc.w	fp, r3, r1
 8010d5c:	f04f 0200 	mov.w	r2, #0
 8010d60:	f04f 0300 	mov.w	r3, #0
 8010d64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8010d68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8010d6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8010d70:	ebb2 040a 	subs.w	r4, r2, sl
 8010d74:	eb63 050b 	sbc.w	r5, r3, fp
 8010d78:	f04f 0200 	mov.w	r2, #0
 8010d7c:	f04f 0300 	mov.w	r3, #0
 8010d80:	00eb      	lsls	r3, r5, #3
 8010d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010d86:	00e2      	lsls	r2, r4, #3
 8010d88:	4614      	mov	r4, r2
 8010d8a:	461d      	mov	r5, r3
 8010d8c:	4643      	mov	r3, r8
 8010d8e:	18e3      	adds	r3, r4, r3
 8010d90:	603b      	str	r3, [r7, #0]
 8010d92:	464b      	mov	r3, r9
 8010d94:	eb45 0303 	adc.w	r3, r5, r3
 8010d98:	607b      	str	r3, [r7, #4]
 8010d9a:	f04f 0200 	mov.w	r2, #0
 8010d9e:	f04f 0300 	mov.w	r3, #0
 8010da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010da6:	4629      	mov	r1, r5
 8010da8:	028b      	lsls	r3, r1, #10
 8010daa:	4621      	mov	r1, r4
 8010dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010db0:	4621      	mov	r1, r4
 8010db2:	028a      	lsls	r2, r1, #10
 8010db4:	4610      	mov	r0, r2
 8010db6:	4619      	mov	r1, r3
 8010db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	61bb      	str	r3, [r7, #24]
 8010dc0:	61fa      	str	r2, [r7, #28]
 8010dc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010dc6:	f7f7 ff3f 	bl	8008c48 <__aeabi_uldivmod>
 8010dca:	4602      	mov	r2, r0
 8010dcc:	460b      	mov	r3, r1
 8010dce:	4613      	mov	r3, r2
 8010dd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8010dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8010e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	0f1b      	lsrs	r3, r3, #28
 8010dda:	f003 0307 	and.w	r3, r3, #7
 8010dde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8010de2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8010dee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8010df2:	e003      	b.n	8010dfc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010df4:	4b06      	ldr	r3, [pc, #24]	@ (8010e10 <HAL_RCC_GetSysClockFreq+0x34c>)
 8010df6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8010dfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010dfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3798      	adds	r7, #152	@ 0x98
 8010e04:	46bd      	mov	sp, r7
 8010e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010e0a:	bf00      	nop
 8010e0c:	40023800 	.word	0x40023800
 8010e10:	00f42400 	.word	0x00f42400
 8010e14:	017d7840 	.word	0x017d7840

08010e18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b086      	sub	sp, #24
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d101      	bne.n	8010e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010e26:	2301      	movs	r3, #1
 8010e28:	e28d      	b.n	8011346 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	f003 0301 	and.w	r3, r3, #1
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	f000 8083 	beq.w	8010f3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8010e38:	4b94      	ldr	r3, [pc, #592]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010e3a:	689b      	ldr	r3, [r3, #8]
 8010e3c:	f003 030c 	and.w	r3, r3, #12
 8010e40:	2b04      	cmp	r3, #4
 8010e42:	d019      	beq.n	8010e78 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8010e44:	4b91      	ldr	r3, [pc, #580]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010e46:	689b      	ldr	r3, [r3, #8]
 8010e48:	f003 030c 	and.w	r3, r3, #12
        || \
 8010e4c:	2b08      	cmp	r3, #8
 8010e4e:	d106      	bne.n	8010e5e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8010e50:	4b8e      	ldr	r3, [pc, #568]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010e52:	685b      	ldr	r3, [r3, #4]
 8010e54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010e58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010e5c:	d00c      	beq.n	8010e78 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010e5e:	4b8b      	ldr	r3, [pc, #556]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010e60:	689b      	ldr	r3, [r3, #8]
 8010e62:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8010e66:	2b0c      	cmp	r3, #12
 8010e68:	d112      	bne.n	8010e90 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010e6a:	4b88      	ldr	r3, [pc, #544]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010e72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010e76:	d10b      	bne.n	8010e90 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010e78:	4b84      	ldr	r3, [pc, #528]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d05b      	beq.n	8010f3c <HAL_RCC_OscConfig+0x124>
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d157      	bne.n	8010f3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	e25a      	b.n	8011346 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	685b      	ldr	r3, [r3, #4]
 8010e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010e98:	d106      	bne.n	8010ea8 <HAL_RCC_OscConfig+0x90>
 8010e9a:	4b7c      	ldr	r3, [pc, #496]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	4a7b      	ldr	r2, [pc, #492]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010ea4:	6013      	str	r3, [r2, #0]
 8010ea6:	e01d      	b.n	8010ee4 <HAL_RCC_OscConfig+0xcc>
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	685b      	ldr	r3, [r3, #4]
 8010eac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010eb0:	d10c      	bne.n	8010ecc <HAL_RCC_OscConfig+0xb4>
 8010eb2:	4b76      	ldr	r3, [pc, #472]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	4a75      	ldr	r2, [pc, #468]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010ebc:	6013      	str	r3, [r2, #0]
 8010ebe:	4b73      	ldr	r3, [pc, #460]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	4a72      	ldr	r2, [pc, #456]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010ec8:	6013      	str	r3, [r2, #0]
 8010eca:	e00b      	b.n	8010ee4 <HAL_RCC_OscConfig+0xcc>
 8010ecc:	4b6f      	ldr	r3, [pc, #444]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	4a6e      	ldr	r2, [pc, #440]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010ed6:	6013      	str	r3, [r2, #0]
 8010ed8:	4b6c      	ldr	r3, [pc, #432]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	4a6b      	ldr	r2, [pc, #428]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	685b      	ldr	r3, [r3, #4]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d013      	beq.n	8010f14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010eec:	f7ff f8b2 	bl	8010054 <HAL_GetTick>
 8010ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010ef2:	e008      	b.n	8010f06 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010ef4:	f7ff f8ae 	bl	8010054 <HAL_GetTick>
 8010ef8:	4602      	mov	r2, r0
 8010efa:	693b      	ldr	r3, [r7, #16]
 8010efc:	1ad3      	subs	r3, r2, r3
 8010efe:	2b64      	cmp	r3, #100	@ 0x64
 8010f00:	d901      	bls.n	8010f06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8010f02:	2303      	movs	r3, #3
 8010f04:	e21f      	b.n	8011346 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010f06:	4b61      	ldr	r3, [pc, #388]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d0f0      	beq.n	8010ef4 <HAL_RCC_OscConfig+0xdc>
 8010f12:	e014      	b.n	8010f3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f14:	f7ff f89e 	bl	8010054 <HAL_GetTick>
 8010f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f1a:	e008      	b.n	8010f2e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010f1c:	f7ff f89a 	bl	8010054 <HAL_GetTick>
 8010f20:	4602      	mov	r2, r0
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	1ad3      	subs	r3, r2, r3
 8010f26:	2b64      	cmp	r3, #100	@ 0x64
 8010f28:	d901      	bls.n	8010f2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8010f2a:	2303      	movs	r3, #3
 8010f2c:	e20b      	b.n	8011346 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f2e:	4b57      	ldr	r3, [pc, #348]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d1f0      	bne.n	8010f1c <HAL_RCC_OscConfig+0x104>
 8010f3a:	e000      	b.n	8010f3e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	f003 0302 	and.w	r3, r3, #2
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d06f      	beq.n	801102a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8010f4a:	4b50      	ldr	r3, [pc, #320]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010f4c:	689b      	ldr	r3, [r3, #8]
 8010f4e:	f003 030c 	and.w	r3, r3, #12
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d017      	beq.n	8010f86 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8010f56:	4b4d      	ldr	r3, [pc, #308]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010f58:	689b      	ldr	r3, [r3, #8]
 8010f5a:	f003 030c 	and.w	r3, r3, #12
        || \
 8010f5e:	2b08      	cmp	r3, #8
 8010f60:	d105      	bne.n	8010f6e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8010f62:	4b4a      	ldr	r3, [pc, #296]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010f64:	685b      	ldr	r3, [r3, #4]
 8010f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d00b      	beq.n	8010f86 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010f6e:	4b47      	ldr	r3, [pc, #284]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010f70:	689b      	ldr	r3, [r3, #8]
 8010f72:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8010f76:	2b0c      	cmp	r3, #12
 8010f78:	d11c      	bne.n	8010fb4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010f7a:	4b44      	ldr	r3, [pc, #272]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010f7c:	685b      	ldr	r3, [r3, #4]
 8010f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d116      	bne.n	8010fb4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010f86:	4b41      	ldr	r3, [pc, #260]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	f003 0302 	and.w	r3, r3, #2
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d005      	beq.n	8010f9e <HAL_RCC_OscConfig+0x186>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	68db      	ldr	r3, [r3, #12]
 8010f96:	2b01      	cmp	r3, #1
 8010f98:	d001      	beq.n	8010f9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	e1d3      	b.n	8011346 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010f9e:	4b3b      	ldr	r3, [pc, #236]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	691b      	ldr	r3, [r3, #16]
 8010faa:	00db      	lsls	r3, r3, #3
 8010fac:	4937      	ldr	r1, [pc, #220]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010fae:	4313      	orrs	r3, r2
 8010fb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010fb2:	e03a      	b.n	801102a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	68db      	ldr	r3, [r3, #12]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d020      	beq.n	8010ffe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010fbc:	4b34      	ldr	r3, [pc, #208]	@ (8011090 <HAL_RCC_OscConfig+0x278>)
 8010fbe:	2201      	movs	r2, #1
 8010fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010fc2:	f7ff f847 	bl	8010054 <HAL_GetTick>
 8010fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010fc8:	e008      	b.n	8010fdc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010fca:	f7ff f843 	bl	8010054 <HAL_GetTick>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	1ad3      	subs	r3, r2, r3
 8010fd4:	2b02      	cmp	r3, #2
 8010fd6:	d901      	bls.n	8010fdc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8010fd8:	2303      	movs	r3, #3
 8010fda:	e1b4      	b.n	8011346 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010fdc:	4b2b      	ldr	r3, [pc, #172]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	f003 0302 	and.w	r3, r3, #2
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d0f0      	beq.n	8010fca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010fe8:	4b28      	ldr	r3, [pc, #160]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	691b      	ldr	r3, [r3, #16]
 8010ff4:	00db      	lsls	r3, r3, #3
 8010ff6:	4925      	ldr	r1, [pc, #148]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8010ff8:	4313      	orrs	r3, r2
 8010ffa:	600b      	str	r3, [r1, #0]
 8010ffc:	e015      	b.n	801102a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010ffe:	4b24      	ldr	r3, [pc, #144]	@ (8011090 <HAL_RCC_OscConfig+0x278>)
 8011000:	2200      	movs	r2, #0
 8011002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011004:	f7ff f826 	bl	8010054 <HAL_GetTick>
 8011008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801100a:	e008      	b.n	801101e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801100c:	f7ff f822 	bl	8010054 <HAL_GetTick>
 8011010:	4602      	mov	r2, r0
 8011012:	693b      	ldr	r3, [r7, #16]
 8011014:	1ad3      	subs	r3, r2, r3
 8011016:	2b02      	cmp	r3, #2
 8011018:	d901      	bls.n	801101e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801101a:	2303      	movs	r3, #3
 801101c:	e193      	b.n	8011346 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801101e:	4b1b      	ldr	r3, [pc, #108]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f003 0302 	and.w	r3, r3, #2
 8011026:	2b00      	cmp	r3, #0
 8011028:	d1f0      	bne.n	801100c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	f003 0308 	and.w	r3, r3, #8
 8011032:	2b00      	cmp	r3, #0
 8011034:	d036      	beq.n	80110a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	695b      	ldr	r3, [r3, #20]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d016      	beq.n	801106c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801103e:	4b15      	ldr	r3, [pc, #84]	@ (8011094 <HAL_RCC_OscConfig+0x27c>)
 8011040:	2201      	movs	r2, #1
 8011042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011044:	f7ff f806 	bl	8010054 <HAL_GetTick>
 8011048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801104a:	e008      	b.n	801105e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801104c:	f7ff f802 	bl	8010054 <HAL_GetTick>
 8011050:	4602      	mov	r2, r0
 8011052:	693b      	ldr	r3, [r7, #16]
 8011054:	1ad3      	subs	r3, r2, r3
 8011056:	2b02      	cmp	r3, #2
 8011058:	d901      	bls.n	801105e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 801105a:	2303      	movs	r3, #3
 801105c:	e173      	b.n	8011346 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801105e:	4b0b      	ldr	r3, [pc, #44]	@ (801108c <HAL_RCC_OscConfig+0x274>)
 8011060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011062:	f003 0302 	and.w	r3, r3, #2
 8011066:	2b00      	cmp	r3, #0
 8011068:	d0f0      	beq.n	801104c <HAL_RCC_OscConfig+0x234>
 801106a:	e01b      	b.n	80110a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801106c:	4b09      	ldr	r3, [pc, #36]	@ (8011094 <HAL_RCC_OscConfig+0x27c>)
 801106e:	2200      	movs	r2, #0
 8011070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011072:	f7fe ffef 	bl	8010054 <HAL_GetTick>
 8011076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011078:	e00e      	b.n	8011098 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801107a:	f7fe ffeb 	bl	8010054 <HAL_GetTick>
 801107e:	4602      	mov	r2, r0
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	1ad3      	subs	r3, r2, r3
 8011084:	2b02      	cmp	r3, #2
 8011086:	d907      	bls.n	8011098 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8011088:	2303      	movs	r3, #3
 801108a:	e15c      	b.n	8011346 <HAL_RCC_OscConfig+0x52e>
 801108c:	40023800 	.word	0x40023800
 8011090:	42470000 	.word	0x42470000
 8011094:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011098:	4b8a      	ldr	r3, [pc, #552]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 801109a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801109c:	f003 0302 	and.w	r3, r3, #2
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d1ea      	bne.n	801107a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	f003 0304 	and.w	r3, r3, #4
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	f000 8097 	beq.w	80111e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80110b2:	2300      	movs	r3, #0
 80110b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80110b6:	4b83      	ldr	r3, [pc, #524]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 80110b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d10f      	bne.n	80110e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80110c2:	2300      	movs	r3, #0
 80110c4:	60bb      	str	r3, [r7, #8]
 80110c6:	4b7f      	ldr	r3, [pc, #508]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 80110c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110ca:	4a7e      	ldr	r2, [pc, #504]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 80110cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80110d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80110d2:	4b7c      	ldr	r3, [pc, #496]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 80110d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80110da:	60bb      	str	r3, [r7, #8]
 80110dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80110de:	2301      	movs	r3, #1
 80110e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80110e2:	4b79      	ldr	r3, [pc, #484]	@ (80112c8 <HAL_RCC_OscConfig+0x4b0>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d118      	bne.n	8011120 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80110ee:	4b76      	ldr	r3, [pc, #472]	@ (80112c8 <HAL_RCC_OscConfig+0x4b0>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	4a75      	ldr	r2, [pc, #468]	@ (80112c8 <HAL_RCC_OscConfig+0x4b0>)
 80110f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80110f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80110fa:	f7fe ffab 	bl	8010054 <HAL_GetTick>
 80110fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011100:	e008      	b.n	8011114 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011102:	f7fe ffa7 	bl	8010054 <HAL_GetTick>
 8011106:	4602      	mov	r2, r0
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	1ad3      	subs	r3, r2, r3
 801110c:	2b02      	cmp	r3, #2
 801110e:	d901      	bls.n	8011114 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8011110:	2303      	movs	r3, #3
 8011112:	e118      	b.n	8011346 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011114:	4b6c      	ldr	r3, [pc, #432]	@ (80112c8 <HAL_RCC_OscConfig+0x4b0>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801111c:	2b00      	cmp	r3, #0
 801111e:	d0f0      	beq.n	8011102 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	689b      	ldr	r3, [r3, #8]
 8011124:	2b01      	cmp	r3, #1
 8011126:	d106      	bne.n	8011136 <HAL_RCC_OscConfig+0x31e>
 8011128:	4b66      	ldr	r3, [pc, #408]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 801112a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801112c:	4a65      	ldr	r2, [pc, #404]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 801112e:	f043 0301 	orr.w	r3, r3, #1
 8011132:	6713      	str	r3, [r2, #112]	@ 0x70
 8011134:	e01c      	b.n	8011170 <HAL_RCC_OscConfig+0x358>
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	689b      	ldr	r3, [r3, #8]
 801113a:	2b05      	cmp	r3, #5
 801113c:	d10c      	bne.n	8011158 <HAL_RCC_OscConfig+0x340>
 801113e:	4b61      	ldr	r3, [pc, #388]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 8011140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011142:	4a60      	ldr	r2, [pc, #384]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 8011144:	f043 0304 	orr.w	r3, r3, #4
 8011148:	6713      	str	r3, [r2, #112]	@ 0x70
 801114a:	4b5e      	ldr	r3, [pc, #376]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 801114c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801114e:	4a5d      	ldr	r2, [pc, #372]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 8011150:	f043 0301 	orr.w	r3, r3, #1
 8011154:	6713      	str	r3, [r2, #112]	@ 0x70
 8011156:	e00b      	b.n	8011170 <HAL_RCC_OscConfig+0x358>
 8011158:	4b5a      	ldr	r3, [pc, #360]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 801115a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801115c:	4a59      	ldr	r2, [pc, #356]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 801115e:	f023 0301 	bic.w	r3, r3, #1
 8011162:	6713      	str	r3, [r2, #112]	@ 0x70
 8011164:	4b57      	ldr	r3, [pc, #348]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 8011166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011168:	4a56      	ldr	r2, [pc, #344]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 801116a:	f023 0304 	bic.w	r3, r3, #4
 801116e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	689b      	ldr	r3, [r3, #8]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d015      	beq.n	80111a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011178:	f7fe ff6c 	bl	8010054 <HAL_GetTick>
 801117c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801117e:	e00a      	b.n	8011196 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011180:	f7fe ff68 	bl	8010054 <HAL_GetTick>
 8011184:	4602      	mov	r2, r0
 8011186:	693b      	ldr	r3, [r7, #16]
 8011188:	1ad3      	subs	r3, r2, r3
 801118a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801118e:	4293      	cmp	r3, r2
 8011190:	d901      	bls.n	8011196 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8011192:	2303      	movs	r3, #3
 8011194:	e0d7      	b.n	8011346 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011196:	4b4b      	ldr	r3, [pc, #300]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 8011198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801119a:	f003 0302 	and.w	r3, r3, #2
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d0ee      	beq.n	8011180 <HAL_RCC_OscConfig+0x368>
 80111a2:	e014      	b.n	80111ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80111a4:	f7fe ff56 	bl	8010054 <HAL_GetTick>
 80111a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80111aa:	e00a      	b.n	80111c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80111ac:	f7fe ff52 	bl	8010054 <HAL_GetTick>
 80111b0:	4602      	mov	r2, r0
 80111b2:	693b      	ldr	r3, [r7, #16]
 80111b4:	1ad3      	subs	r3, r2, r3
 80111b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80111ba:	4293      	cmp	r3, r2
 80111bc:	d901      	bls.n	80111c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80111be:	2303      	movs	r3, #3
 80111c0:	e0c1      	b.n	8011346 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80111c2:	4b40      	ldr	r3, [pc, #256]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 80111c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111c6:	f003 0302 	and.w	r3, r3, #2
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d1ee      	bne.n	80111ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80111ce:	7dfb      	ldrb	r3, [r7, #23]
 80111d0:	2b01      	cmp	r3, #1
 80111d2:	d105      	bne.n	80111e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80111d4:	4b3b      	ldr	r3, [pc, #236]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 80111d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80111d8:	4a3a      	ldr	r2, [pc, #232]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 80111da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80111de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	699b      	ldr	r3, [r3, #24]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	f000 80ad 	beq.w	8011344 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80111ea:	4b36      	ldr	r3, [pc, #216]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 80111ec:	689b      	ldr	r3, [r3, #8]
 80111ee:	f003 030c 	and.w	r3, r3, #12
 80111f2:	2b08      	cmp	r3, #8
 80111f4:	d060      	beq.n	80112b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	699b      	ldr	r3, [r3, #24]
 80111fa:	2b02      	cmp	r3, #2
 80111fc:	d145      	bne.n	801128a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80111fe:	4b33      	ldr	r3, [pc, #204]	@ (80112cc <HAL_RCC_OscConfig+0x4b4>)
 8011200:	2200      	movs	r2, #0
 8011202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011204:	f7fe ff26 	bl	8010054 <HAL_GetTick>
 8011208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801120a:	e008      	b.n	801121e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801120c:	f7fe ff22 	bl	8010054 <HAL_GetTick>
 8011210:	4602      	mov	r2, r0
 8011212:	693b      	ldr	r3, [r7, #16]
 8011214:	1ad3      	subs	r3, r2, r3
 8011216:	2b02      	cmp	r3, #2
 8011218:	d901      	bls.n	801121e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 801121a:	2303      	movs	r3, #3
 801121c:	e093      	b.n	8011346 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801121e:	4b29      	ldr	r3, [pc, #164]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011226:	2b00      	cmp	r3, #0
 8011228:	d1f0      	bne.n	801120c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	69da      	ldr	r2, [r3, #28]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6a1b      	ldr	r3, [r3, #32]
 8011232:	431a      	orrs	r2, r3
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011238:	019b      	lsls	r3, r3, #6
 801123a:	431a      	orrs	r2, r3
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011240:	085b      	lsrs	r3, r3, #1
 8011242:	3b01      	subs	r3, #1
 8011244:	041b      	lsls	r3, r3, #16
 8011246:	431a      	orrs	r2, r3
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801124c:	061b      	lsls	r3, r3, #24
 801124e:	431a      	orrs	r2, r3
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011254:	071b      	lsls	r3, r3, #28
 8011256:	491b      	ldr	r1, [pc, #108]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 8011258:	4313      	orrs	r3, r2
 801125a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801125c:	4b1b      	ldr	r3, [pc, #108]	@ (80112cc <HAL_RCC_OscConfig+0x4b4>)
 801125e:	2201      	movs	r2, #1
 8011260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011262:	f7fe fef7 	bl	8010054 <HAL_GetTick>
 8011266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011268:	e008      	b.n	801127c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801126a:	f7fe fef3 	bl	8010054 <HAL_GetTick>
 801126e:	4602      	mov	r2, r0
 8011270:	693b      	ldr	r3, [r7, #16]
 8011272:	1ad3      	subs	r3, r2, r3
 8011274:	2b02      	cmp	r3, #2
 8011276:	d901      	bls.n	801127c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8011278:	2303      	movs	r3, #3
 801127a:	e064      	b.n	8011346 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801127c:	4b11      	ldr	r3, [pc, #68]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011284:	2b00      	cmp	r3, #0
 8011286:	d0f0      	beq.n	801126a <HAL_RCC_OscConfig+0x452>
 8011288:	e05c      	b.n	8011344 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801128a:	4b10      	ldr	r3, [pc, #64]	@ (80112cc <HAL_RCC_OscConfig+0x4b4>)
 801128c:	2200      	movs	r2, #0
 801128e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011290:	f7fe fee0 	bl	8010054 <HAL_GetTick>
 8011294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011296:	e008      	b.n	80112aa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011298:	f7fe fedc 	bl	8010054 <HAL_GetTick>
 801129c:	4602      	mov	r2, r0
 801129e:	693b      	ldr	r3, [r7, #16]
 80112a0:	1ad3      	subs	r3, r2, r3
 80112a2:	2b02      	cmp	r3, #2
 80112a4:	d901      	bls.n	80112aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80112a6:	2303      	movs	r3, #3
 80112a8:	e04d      	b.n	8011346 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80112aa:	4b06      	ldr	r3, [pc, #24]	@ (80112c4 <HAL_RCC_OscConfig+0x4ac>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d1f0      	bne.n	8011298 <HAL_RCC_OscConfig+0x480>
 80112b6:	e045      	b.n	8011344 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	699b      	ldr	r3, [r3, #24]
 80112bc:	2b01      	cmp	r3, #1
 80112be:	d107      	bne.n	80112d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80112c0:	2301      	movs	r3, #1
 80112c2:	e040      	b.n	8011346 <HAL_RCC_OscConfig+0x52e>
 80112c4:	40023800 	.word	0x40023800
 80112c8:	40007000 	.word	0x40007000
 80112cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80112d0:	4b1f      	ldr	r3, [pc, #124]	@ (8011350 <HAL_RCC_OscConfig+0x538>)
 80112d2:	685b      	ldr	r3, [r3, #4]
 80112d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	699b      	ldr	r3, [r3, #24]
 80112da:	2b01      	cmp	r3, #1
 80112dc:	d030      	beq.n	8011340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80112e8:	429a      	cmp	r2, r3
 80112ea:	d129      	bne.n	8011340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d122      	bne.n	8011340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80112fa:	68fa      	ldr	r2, [r7, #12]
 80112fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8011300:	4013      	ands	r3, r2
 8011302:	687a      	ldr	r2, [r7, #4]
 8011304:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8011306:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011308:	4293      	cmp	r3, r2
 801130a:	d119      	bne.n	8011340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011316:	085b      	lsrs	r3, r3, #1
 8011318:	3b01      	subs	r3, #1
 801131a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801131c:	429a      	cmp	r2, r3
 801131e:	d10f      	bne.n	8011340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801132a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801132c:	429a      	cmp	r2, r3
 801132e:	d107      	bne.n	8011340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801133a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801133c:	429a      	cmp	r2, r3
 801133e:	d001      	beq.n	8011344 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8011340:	2301      	movs	r3, #1
 8011342:	e000      	b.n	8011346 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8011344:	2300      	movs	r3, #0
}
 8011346:	4618      	mov	r0, r3
 8011348:	3718      	adds	r7, #24
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}
 801134e:	bf00      	nop
 8011350:	40023800 	.word	0x40023800

08011354 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b082      	sub	sp, #8
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d101      	bne.n	8011366 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011362:	2301      	movs	r3, #1
 8011364:	e07b      	b.n	801145e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801136a:	2b00      	cmp	r3, #0
 801136c:	d108      	bne.n	8011380 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011376:	d009      	beq.n	801138c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2200      	movs	r2, #0
 801137c:	61da      	str	r2, [r3, #28]
 801137e:	e005      	b.n	801138c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2200      	movs	r2, #0
 8011384:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2200      	movs	r2, #0
 801138a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2200      	movs	r2, #0
 8011390:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011398:	b2db      	uxtb	r3, r3
 801139a:	2b00      	cmp	r3, #0
 801139c:	d106      	bne.n	80113ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	2200      	movs	r2, #0
 80113a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f7fd feea 	bl	800f180 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2202      	movs	r2, #2
 80113b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	681a      	ldr	r2, [r3, #0]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80113c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	685b      	ldr	r3, [r3, #4]
 80113c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	689b      	ldr	r3, [r3, #8]
 80113d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80113d4:	431a      	orrs	r2, r3
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	68db      	ldr	r3, [r3, #12]
 80113da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80113de:	431a      	orrs	r2, r3
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	691b      	ldr	r3, [r3, #16]
 80113e4:	f003 0302 	and.w	r3, r3, #2
 80113e8:	431a      	orrs	r2, r3
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	695b      	ldr	r3, [r3, #20]
 80113ee:	f003 0301 	and.w	r3, r3, #1
 80113f2:	431a      	orrs	r2, r3
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	699b      	ldr	r3, [r3, #24]
 80113f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80113fc:	431a      	orrs	r2, r3
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	69db      	ldr	r3, [r3, #28]
 8011402:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011406:	431a      	orrs	r2, r3
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6a1b      	ldr	r3, [r3, #32]
 801140c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011410:	ea42 0103 	orr.w	r1, r2, r3
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011418:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	430a      	orrs	r2, r1
 8011422:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	699b      	ldr	r3, [r3, #24]
 8011428:	0c1b      	lsrs	r3, r3, #16
 801142a:	f003 0104 	and.w	r1, r3, #4
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011432:	f003 0210 	and.w	r2, r3, #16
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	430a      	orrs	r2, r1
 801143c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	69da      	ldr	r2, [r3, #28]
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801144c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2200      	movs	r2, #0
 8011452:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2201      	movs	r2, #1
 8011458:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 801145c:	2300      	movs	r3, #0
}
 801145e:	4618      	mov	r0, r3
 8011460:	3708      	adds	r7, #8
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}

08011466 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011466:	b580      	push	{r7, lr}
 8011468:	b088      	sub	sp, #32
 801146a:	af00      	add	r7, sp, #0
 801146c:	60f8      	str	r0, [r7, #12]
 801146e:	60b9      	str	r1, [r7, #8]
 8011470:	603b      	str	r3, [r7, #0]
 8011472:	4613      	mov	r3, r2
 8011474:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011476:	f7fe fded 	bl	8010054 <HAL_GetTick>
 801147a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 801147c:	88fb      	ldrh	r3, [r7, #6]
 801147e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011486:	b2db      	uxtb	r3, r3
 8011488:	2b01      	cmp	r3, #1
 801148a:	d001      	beq.n	8011490 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 801148c:	2302      	movs	r3, #2
 801148e:	e12a      	b.n	80116e6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d002      	beq.n	801149c <HAL_SPI_Transmit+0x36>
 8011496:	88fb      	ldrh	r3, [r7, #6]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d101      	bne.n	80114a0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 801149c:	2301      	movs	r3, #1
 801149e:	e122      	b.n	80116e6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80114a6:	2b01      	cmp	r3, #1
 80114a8:	d101      	bne.n	80114ae <HAL_SPI_Transmit+0x48>
 80114aa:	2302      	movs	r3, #2
 80114ac:	e11b      	b.n	80116e6 <HAL_SPI_Transmit+0x280>
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	2201      	movs	r2, #1
 80114b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	2203      	movs	r2, #3
 80114ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	2200      	movs	r2, #0
 80114c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	68ba      	ldr	r2, [r7, #8]
 80114c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	88fa      	ldrh	r2, [r7, #6]
 80114ce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	88fa      	ldrh	r2, [r7, #6]
 80114d4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	2200      	movs	r2, #0
 80114da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	2200      	movs	r2, #0
 80114e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	2200      	movs	r2, #0
 80114e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	2200      	movs	r2, #0
 80114ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	2200      	movs	r2, #0
 80114f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	689b      	ldr	r3, [r3, #8]
 80114f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80114fc:	d10f      	bne.n	801151e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	681a      	ldr	r2, [r3, #0]
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801150c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	681a      	ldr	r2, [r3, #0]
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801151c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011528:	2b40      	cmp	r3, #64	@ 0x40
 801152a:	d007      	beq.n	801153c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	681a      	ldr	r2, [r3, #0]
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801153a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	68db      	ldr	r3, [r3, #12]
 8011540:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011544:	d152      	bne.n	80115ec <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	685b      	ldr	r3, [r3, #4]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d002      	beq.n	8011554 <HAL_SPI_Transmit+0xee>
 801154e:	8b7b      	ldrh	r3, [r7, #26]
 8011550:	2b01      	cmp	r3, #1
 8011552:	d145      	bne.n	80115e0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011558:	881a      	ldrh	r2, [r3, #0]
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011564:	1c9a      	adds	r2, r3, #2
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801156e:	b29b      	uxth	r3, r3
 8011570:	3b01      	subs	r3, #1
 8011572:	b29a      	uxth	r2, r3
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8011578:	e032      	b.n	80115e0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	689b      	ldr	r3, [r3, #8]
 8011580:	f003 0302 	and.w	r3, r3, #2
 8011584:	2b02      	cmp	r3, #2
 8011586:	d112      	bne.n	80115ae <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801158c:	881a      	ldrh	r2, [r3, #0]
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011598:	1c9a      	adds	r2, r3, #2
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80115a2:	b29b      	uxth	r3, r3
 80115a4:	3b01      	subs	r3, #1
 80115a6:	b29a      	uxth	r2, r3
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80115ac:	e018      	b.n	80115e0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80115ae:	f7fe fd51 	bl	8010054 <HAL_GetTick>
 80115b2:	4602      	mov	r2, r0
 80115b4:	69fb      	ldr	r3, [r7, #28]
 80115b6:	1ad3      	subs	r3, r2, r3
 80115b8:	683a      	ldr	r2, [r7, #0]
 80115ba:	429a      	cmp	r2, r3
 80115bc:	d803      	bhi.n	80115c6 <HAL_SPI_Transmit+0x160>
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115c4:	d102      	bne.n	80115cc <HAL_SPI_Transmit+0x166>
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d109      	bne.n	80115e0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	2201      	movs	r2, #1
 80115d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	2200      	movs	r2, #0
 80115d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80115dc:	2303      	movs	r3, #3
 80115de:	e082      	b.n	80116e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d1c7      	bne.n	801157a <HAL_SPI_Transmit+0x114>
 80115ea:	e053      	b.n	8011694 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d002      	beq.n	80115fa <HAL_SPI_Transmit+0x194>
 80115f4:	8b7b      	ldrh	r3, [r7, #26]
 80115f6:	2b01      	cmp	r3, #1
 80115f8:	d147      	bne.n	801168a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	330c      	adds	r3, #12
 8011604:	7812      	ldrb	r2, [r2, #0]
 8011606:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801160c:	1c5a      	adds	r2, r3, #1
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011616:	b29b      	uxth	r3, r3
 8011618:	3b01      	subs	r3, #1
 801161a:	b29a      	uxth	r2, r3
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8011620:	e033      	b.n	801168a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	689b      	ldr	r3, [r3, #8]
 8011628:	f003 0302 	and.w	r3, r3, #2
 801162c:	2b02      	cmp	r3, #2
 801162e:	d113      	bne.n	8011658 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	330c      	adds	r3, #12
 801163a:	7812      	ldrb	r2, [r2, #0]
 801163c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011642:	1c5a      	adds	r2, r3, #1
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801164c:	b29b      	uxth	r3, r3
 801164e:	3b01      	subs	r3, #1
 8011650:	b29a      	uxth	r2, r3
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	86da      	strh	r2, [r3, #54]	@ 0x36
 8011656:	e018      	b.n	801168a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011658:	f7fe fcfc 	bl	8010054 <HAL_GetTick>
 801165c:	4602      	mov	r2, r0
 801165e:	69fb      	ldr	r3, [r7, #28]
 8011660:	1ad3      	subs	r3, r2, r3
 8011662:	683a      	ldr	r2, [r7, #0]
 8011664:	429a      	cmp	r2, r3
 8011666:	d803      	bhi.n	8011670 <HAL_SPI_Transmit+0x20a>
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801166e:	d102      	bne.n	8011676 <HAL_SPI_Transmit+0x210>
 8011670:	683b      	ldr	r3, [r7, #0]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d109      	bne.n	801168a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	2201      	movs	r2, #1
 801167a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	2200      	movs	r2, #0
 8011682:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8011686:	2303      	movs	r3, #3
 8011688:	e02d      	b.n	80116e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801168e:	b29b      	uxth	r3, r3
 8011690:	2b00      	cmp	r3, #0
 8011692:	d1c6      	bne.n	8011622 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011694:	69fa      	ldr	r2, [r7, #28]
 8011696:	6839      	ldr	r1, [r7, #0]
 8011698:	68f8      	ldr	r0, [r7, #12]
 801169a:	f000 fc6f 	bl	8011f7c <SPI_EndRxTxTransaction>
 801169e:	4603      	mov	r3, r0
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d002      	beq.n	80116aa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	2220      	movs	r2, #32
 80116a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	689b      	ldr	r3, [r3, #8]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d10a      	bne.n	80116c8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80116b2:	2300      	movs	r3, #0
 80116b4:	617b      	str	r3, [r7, #20]
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	68db      	ldr	r3, [r3, #12]
 80116bc:	617b      	str	r3, [r7, #20]
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	689b      	ldr	r3, [r3, #8]
 80116c4:	617b      	str	r3, [r7, #20]
 80116c6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	2201      	movs	r2, #1
 80116cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	2200      	movs	r2, #0
 80116d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d001      	beq.n	80116e4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80116e0:	2301      	movs	r3, #1
 80116e2:	e000      	b.n	80116e6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80116e4:	2300      	movs	r3, #0
  }
}
 80116e6:	4618      	mov	r0, r3
 80116e8:	3720      	adds	r7, #32
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}
	...

080116f0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b084      	sub	sp, #16
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	60f8      	str	r0, [r7, #12]
 80116f8:	60b9      	str	r1, [r7, #8]
 80116fa:	4613      	mov	r3, r2
 80116fc:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011704:	b2db      	uxtb	r3, r3
 8011706:	2b01      	cmp	r3, #1
 8011708:	d001      	beq.n	801170e <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 801170a:	2302      	movs	r3, #2
 801170c:	e07f      	b.n	801180e <HAL_SPI_Receive_IT+0x11e>
  }

  if ((pData == NULL) || (Size == 0U))
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d002      	beq.n	801171a <HAL_SPI_Receive_IT+0x2a>
 8011714:	88fb      	ldrh	r3, [r7, #6]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d101      	bne.n	801171e <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 801171a:	2301      	movs	r3, #1
 801171c:	e077      	b.n	801180e <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	689b      	ldr	r3, [r3, #8]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d110      	bne.n	8011748 <HAL_SPI_Receive_IT+0x58>
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	685b      	ldr	r3, [r3, #4]
 801172a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801172e:	d10b      	bne.n	8011748 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	2204      	movs	r2, #4
 8011734:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8011738:	88fb      	ldrh	r3, [r7, #6]
 801173a:	68ba      	ldr	r2, [r7, #8]
 801173c:	68b9      	ldr	r1, [r7, #8]
 801173e:	68f8      	ldr	r0, [r7, #12]
 8011740:	f000 f86e 	bl	8011820 <HAL_SPI_TransmitReceive_IT>
 8011744:	4603      	mov	r3, r0
 8011746:	e062      	b.n	801180e <HAL_SPI_Receive_IT+0x11e>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801174e:	2b01      	cmp	r3, #1
 8011750:	d101      	bne.n	8011756 <HAL_SPI_Receive_IT+0x66>
 8011752:	2302      	movs	r3, #2
 8011754:	e05b      	b.n	801180e <HAL_SPI_Receive_IT+0x11e>
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	2201      	movs	r2, #1
 801175a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	2204      	movs	r2, #4
 8011762:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2200      	movs	r2, #0
 801176a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	68ba      	ldr	r2, [r7, #8]
 8011770:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	88fa      	ldrh	r2, [r7, #6]
 8011776:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	88fa      	ldrh	r2, [r7, #6]
 801177c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	2200      	movs	r2, #0
 8011782:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	2200      	movs	r2, #0
 8011788:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	2200      	movs	r2, #0
 801178e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	2200      	movs	r2, #0
 8011794:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	68db      	ldr	r3, [r3, #12]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d003      	beq.n	80117a6 <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	4a1d      	ldr	r2, [pc, #116]	@ (8011818 <HAL_SPI_Receive_IT+0x128>)
 80117a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80117a4:	e002      	b.n	80117ac <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	4a1c      	ldr	r2, [pc, #112]	@ (801181c <HAL_SPI_Receive_IT+0x12c>)
 80117aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	689b      	ldr	r3, [r3, #8]
 80117b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80117b4:	d10f      	bne.n	80117d6 <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	681a      	ldr	r2, [r3, #0]
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80117c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	681a      	ldr	r2, [r3, #0]
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80117d4:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80117e0:	2b40      	cmp	r3, #64	@ 0x40
 80117e2:	d007      	beq.n	80117f4 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80117f2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	2200      	movs	r2, #0
 80117f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	685a      	ldr	r2, [r3, #4]
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 801180a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801180c:	2300      	movs	r3, #0
}
 801180e:	4618      	mov	r0, r3
 8011810:	3710      	adds	r7, #16
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}
 8011816:	bf00      	nop
 8011818:	08011d59 	.word	0x08011d59
 801181c:	08011d0f 	.word	0x08011d0f

08011820 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8011820:	b480      	push	{r7}
 8011822:	b087      	sub	sp, #28
 8011824:	af00      	add	r7, sp, #0
 8011826:	60f8      	str	r0, [r7, #12]
 8011828:	60b9      	str	r1, [r7, #8]
 801182a:	607a      	str	r2, [r7, #4]
 801182c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011834:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	685b      	ldr	r3, [r3, #4]
 801183a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801183c:	7dfb      	ldrb	r3, [r7, #23]
 801183e:	2b01      	cmp	r3, #1
 8011840:	d00c      	beq.n	801185c <HAL_SPI_TransmitReceive_IT+0x3c>
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011848:	d106      	bne.n	8011858 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	689b      	ldr	r3, [r3, #8]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d102      	bne.n	8011858 <HAL_SPI_TransmitReceive_IT+0x38>
 8011852:	7dfb      	ldrb	r3, [r7, #23]
 8011854:	2b04      	cmp	r3, #4
 8011856:	d001      	beq.n	801185c <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8011858:	2302      	movs	r3, #2
 801185a:	e061      	b.n	8011920 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801185c:	68bb      	ldr	r3, [r7, #8]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d005      	beq.n	801186e <HAL_SPI_TransmitReceive_IT+0x4e>
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d002      	beq.n	801186e <HAL_SPI_TransmitReceive_IT+0x4e>
 8011868:	887b      	ldrh	r3, [r7, #2]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d101      	bne.n	8011872 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 801186e:	2301      	movs	r3, #1
 8011870:	e056      	b.n	8011920 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8011878:	2b01      	cmp	r3, #1
 801187a:	d101      	bne.n	8011880 <HAL_SPI_TransmitReceive_IT+0x60>
 801187c:	2302      	movs	r3, #2
 801187e:	e04f      	b.n	8011920 <HAL_SPI_TransmitReceive_IT+0x100>
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	2201      	movs	r2, #1
 8011884:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801188e:	b2db      	uxtb	r3, r3
 8011890:	2b04      	cmp	r3, #4
 8011892:	d003      	beq.n	801189c <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	2205      	movs	r2, #5
 8011898:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	2200      	movs	r2, #0
 80118a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	68ba      	ldr	r2, [r7, #8]
 80118a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	887a      	ldrh	r2, [r7, #2]
 80118ac:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	887a      	ldrh	r2, [r7, #2]
 80118b2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	687a      	ldr	r2, [r7, #4]
 80118b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	887a      	ldrh	r2, [r7, #2]
 80118be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	887a      	ldrh	r2, [r7, #2]
 80118c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	68db      	ldr	r3, [r3, #12]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d006      	beq.n	80118dc <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	4a16      	ldr	r2, [pc, #88]	@ (801192c <HAL_SPI_TransmitReceive_IT+0x10c>)
 80118d2:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	4a16      	ldr	r2, [pc, #88]	@ (8011930 <HAL_SPI_TransmitReceive_IT+0x110>)
 80118d8:	645a      	str	r2, [r3, #68]	@ 0x44
 80118da:	e005      	b.n	80118e8 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	4a15      	ldr	r2, [pc, #84]	@ (8011934 <HAL_SPI_TransmitReceive_IT+0x114>)
 80118e0:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	4a14      	ldr	r2, [pc, #80]	@ (8011938 <HAL_SPI_TransmitReceive_IT+0x118>)
 80118e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80118f2:	2b40      	cmp	r3, #64	@ 0x40
 80118f4:	d007      	beq.n	8011906 <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	681a      	ldr	r2, [r3, #0]
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011904:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	2200      	movs	r2, #0
 801190a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	685a      	ldr	r2, [r3, #4]
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 801191c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801191e:	2300      	movs	r3, #0
}
 8011920:	4618      	mov	r0, r3
 8011922:	371c      	adds	r7, #28
 8011924:	46bd      	mov	sp, r7
 8011926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192a:	4770      	bx	lr
 801192c:	08011c51 	.word	0x08011c51
 8011930:	08011cb1 	.word	0x08011cb1
 8011934:	08011b8d 	.word	0x08011b8d
 8011938:	08011bf1 	.word	0x08011bf1

0801193c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b088      	sub	sp, #32
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	689b      	ldr	r3, [r3, #8]
 8011952:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8011954:	69bb      	ldr	r3, [r7, #24]
 8011956:	099b      	lsrs	r3, r3, #6
 8011958:	f003 0301 	and.w	r3, r3, #1
 801195c:	2b00      	cmp	r3, #0
 801195e:	d10f      	bne.n	8011980 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8011960:	69bb      	ldr	r3, [r7, #24]
 8011962:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8011966:	2b00      	cmp	r3, #0
 8011968:	d00a      	beq.n	8011980 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801196a:	69fb      	ldr	r3, [r7, #28]
 801196c:	099b      	lsrs	r3, r3, #6
 801196e:	f003 0301 	and.w	r3, r3, #1
 8011972:	2b00      	cmp	r3, #0
 8011974:	d004      	beq.n	8011980 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801197a:	6878      	ldr	r0, [r7, #4]
 801197c:	4798      	blx	r3
    return;
 801197e:	e0d7      	b.n	8011b30 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8011980:	69bb      	ldr	r3, [r7, #24]
 8011982:	085b      	lsrs	r3, r3, #1
 8011984:	f003 0301 	and.w	r3, r3, #1
 8011988:	2b00      	cmp	r3, #0
 801198a:	d00a      	beq.n	80119a2 <HAL_SPI_IRQHandler+0x66>
 801198c:	69fb      	ldr	r3, [r7, #28]
 801198e:	09db      	lsrs	r3, r3, #7
 8011990:	f003 0301 	and.w	r3, r3, #1
 8011994:	2b00      	cmp	r3, #0
 8011996:	d004      	beq.n	80119a2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	4798      	blx	r3
    return;
 80119a0:	e0c6      	b.n	8011b30 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80119a2:	69bb      	ldr	r3, [r7, #24]
 80119a4:	095b      	lsrs	r3, r3, #5
 80119a6:	f003 0301 	and.w	r3, r3, #1
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d10c      	bne.n	80119c8 <HAL_SPI_IRQHandler+0x8c>
 80119ae:	69bb      	ldr	r3, [r7, #24]
 80119b0:	099b      	lsrs	r3, r3, #6
 80119b2:	f003 0301 	and.w	r3, r3, #1
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d106      	bne.n	80119c8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80119ba:	69bb      	ldr	r3, [r7, #24]
 80119bc:	0a1b      	lsrs	r3, r3, #8
 80119be:	f003 0301 	and.w	r3, r3, #1
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	f000 80b4 	beq.w	8011b30 <HAL_SPI_IRQHandler+0x1f4>
 80119c8:	69fb      	ldr	r3, [r7, #28]
 80119ca:	095b      	lsrs	r3, r3, #5
 80119cc:	f003 0301 	and.w	r3, r3, #1
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	f000 80ad 	beq.w	8011b30 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80119d6:	69bb      	ldr	r3, [r7, #24]
 80119d8:	099b      	lsrs	r3, r3, #6
 80119da:	f003 0301 	and.w	r3, r3, #1
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d023      	beq.n	8011a2a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80119e8:	b2db      	uxtb	r3, r3
 80119ea:	2b03      	cmp	r3, #3
 80119ec:	d011      	beq.n	8011a12 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80119f2:	f043 0204 	orr.w	r2, r3, #4
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80119fa:	2300      	movs	r3, #0
 80119fc:	617b      	str	r3, [r7, #20]
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	68db      	ldr	r3, [r3, #12]
 8011a04:	617b      	str	r3, [r7, #20]
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	689b      	ldr	r3, [r3, #8]
 8011a0c:	617b      	str	r3, [r7, #20]
 8011a0e:	697b      	ldr	r3, [r7, #20]
 8011a10:	e00b      	b.n	8011a2a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011a12:	2300      	movs	r3, #0
 8011a14:	613b      	str	r3, [r7, #16]
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	68db      	ldr	r3, [r3, #12]
 8011a1c:	613b      	str	r3, [r7, #16]
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	689b      	ldr	r3, [r3, #8]
 8011a24:	613b      	str	r3, [r7, #16]
 8011a26:	693b      	ldr	r3, [r7, #16]
        return;
 8011a28:	e082      	b.n	8011b30 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8011a2a:	69bb      	ldr	r3, [r7, #24]
 8011a2c:	095b      	lsrs	r3, r3, #5
 8011a2e:	f003 0301 	and.w	r3, r3, #1
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d014      	beq.n	8011a60 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011a3a:	f043 0201 	orr.w	r2, r3, #1
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011a42:	2300      	movs	r3, #0
 8011a44:	60fb      	str	r3, [r7, #12]
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	689b      	ldr	r3, [r3, #8]
 8011a4c:	60fb      	str	r3, [r7, #12]
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	681a      	ldr	r2, [r3, #0]
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011a5c:	601a      	str	r2, [r3, #0]
 8011a5e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8011a60:	69bb      	ldr	r3, [r7, #24]
 8011a62:	0a1b      	lsrs	r3, r3, #8
 8011a64:	f003 0301 	and.w	r3, r3, #1
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d00c      	beq.n	8011a86 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011a70:	f043 0208 	orr.w	r2, r3, #8
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011a78:	2300      	movs	r3, #0
 8011a7a:	60bb      	str	r3, [r7, #8]
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	689b      	ldr	r3, [r3, #8]
 8011a82:	60bb      	str	r3, [r7, #8]
 8011a84:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d04f      	beq.n	8011b2e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	685a      	ldr	r2, [r3, #4]
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8011a9c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2201      	movs	r2, #1
 8011aa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8011aa6:	69fb      	ldr	r3, [r7, #28]
 8011aa8:	f003 0302 	and.w	r3, r3, #2
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d104      	bne.n	8011aba <HAL_SPI_IRQHandler+0x17e>
 8011ab0:	69fb      	ldr	r3, [r7, #28]
 8011ab2:	f003 0301 	and.w	r3, r3, #1
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d034      	beq.n	8011b24 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	685a      	ldr	r2, [r3, #4]
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	f022 0203 	bic.w	r2, r2, #3
 8011ac8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d011      	beq.n	8011af6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011ad6:	4a18      	ldr	r2, [pc, #96]	@ (8011b38 <HAL_SPI_IRQHandler+0x1fc>)
 8011ad8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f7fe fc3a 	bl	8010358 <HAL_DMA_Abort_IT>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d005      	beq.n	8011af6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011aee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d016      	beq.n	8011b2c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011b02:	4a0d      	ldr	r2, [pc, #52]	@ (8011b38 <HAL_SPI_IRQHandler+0x1fc>)
 8011b04:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7fe fc24 	bl	8010358 <HAL_DMA_Abort_IT>
 8011b10:	4603      	mov	r3, r0
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d00a      	beq.n	8011b2c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8011b22:	e003      	b.n	8011b2c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	f000 f813 	bl	8011b50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8011b2a:	e000      	b.n	8011b2e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8011b2c:	bf00      	nop
    return;
 8011b2e:	bf00      	nop
  }
}
 8011b30:	3720      	adds	r7, #32
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}
 8011b36:	bf00      	nop
 8011b38:	08011b65 	.word	0x08011b65

08011b3c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8011b3c:	b480      	push	{r7}
 8011b3e:	b083      	sub	sp, #12
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8011b44:	bf00      	nop
 8011b46:	370c      	adds	r7, #12
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4e:	4770      	bx	lr

08011b50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8011b50:	b480      	push	{r7}
 8011b52:	b083      	sub	sp, #12
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8011b58:	bf00      	nop
 8011b5a:	370c      	adds	r7, #12
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b62:	4770      	bx	lr

08011b64 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b084      	sub	sp, #16
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b70:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2200      	movs	r2, #0
 8011b76:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8011b7e:	68f8      	ldr	r0, [r7, #12]
 8011b80:	f7ff ffe6 	bl	8011b50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011b84:	bf00      	nop
 8011b86:	3710      	adds	r7, #16
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}

08011b8c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	f103 020c 	add.w	r2, r3, #12
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ba0:	7812      	ldrb	r2, [r2, #0]
 8011ba2:	b2d2      	uxtb	r2, r2
 8011ba4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011baa:	1c5a      	adds	r2, r3, #1
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	3b01      	subs	r3, #1
 8011bb8:	b29a      	uxth	r2, r3
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011bc2:	b29b      	uxth	r3, r3
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d10f      	bne.n	8011be8 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	685a      	ldr	r2, [r3, #4]
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8011bd6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011bdc:	b29b      	uxth	r3, r3
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d102      	bne.n	8011be8 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8011be2:	6878      	ldr	r0, [r7, #4]
 8011be4:	f000 fa1e 	bl	8012024 <SPI_CloseRxTx_ISR>
    }
  }
}
 8011be8:	bf00      	nop
 8011bea:	3708      	adds	r7, #8
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}

08011bf0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b082      	sub	sp, #8
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	330c      	adds	r3, #12
 8011c02:	7812      	ldrb	r2, [r2, #0]
 8011c04:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c0a:	1c5a      	adds	r2, r3, #1
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011c14:	b29b      	uxth	r3, r3
 8011c16:	3b01      	subs	r3, #1
 8011c18:	b29a      	uxth	r2, r3
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d10f      	bne.n	8011c48 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	685a      	ldr	r2, [r3, #4]
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011c36:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011c3c:	b29b      	uxth	r3, r3
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d102      	bne.n	8011c48 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f000 f9ee 	bl	8012024 <SPI_CloseRxTx_ISR>
    }
  }
}
 8011c48:	bf00      	nop
 8011c4a:	3708      	adds	r7, #8
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}

08011c50 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b082      	sub	sp, #8
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	68da      	ldr	r2, [r3, #12]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c62:	b292      	uxth	r2, r2
 8011c64:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c6a:	1c9a      	adds	r2, r3, #2
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011c74:	b29b      	uxth	r3, r3
 8011c76:	3b01      	subs	r3, #1
 8011c78:	b29a      	uxth	r2, r3
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011c82:	b29b      	uxth	r3, r3
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d10f      	bne.n	8011ca8 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	685a      	ldr	r2, [r3, #4]
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011c96:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011c9c:	b29b      	uxth	r3, r3
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d102      	bne.n	8011ca8 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f000 f9be 	bl	8012024 <SPI_CloseRxTx_ISR>
    }
  }
}
 8011ca8:	bf00      	nop
 8011caa:	3708      	adds	r7, #8
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}

08011cb0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cbc:	881a      	ldrh	r2, [r3, #0]
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cc8:	1c9a      	adds	r2, r3, #2
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011cd2:	b29b      	uxth	r3, r3
 8011cd4:	3b01      	subs	r3, #1
 8011cd6:	b29a      	uxth	r2, r3
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011ce0:	b29b      	uxth	r3, r3
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d10f      	bne.n	8011d06 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	685a      	ldr	r2, [r3, #4]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011cf4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011cfa:	b29b      	uxth	r3, r3
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d102      	bne.n	8011d06 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	f000 f98f 	bl	8012024 <SPI_CloseRxTx_ISR>
    }
  }
}
 8011d06:	bf00      	nop
 8011d08:	3708      	adds	r7, #8
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bd80      	pop	{r7, pc}

08011d0e <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8011d0e:	b580      	push	{r7, lr}
 8011d10:	b082      	sub	sp, #8
 8011d12:	af00      	add	r7, sp, #0
 8011d14:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	f103 020c 	add.w	r2, r3, #12
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d22:	7812      	ldrb	r2, [r2, #0]
 8011d24:	b2d2      	uxtb	r2, r2
 8011d26:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d2c:	1c5a      	adds	r2, r3, #1
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d36:	b29b      	uxth	r3, r3
 8011d38:	3b01      	subs	r3, #1
 8011d3a:	b29a      	uxth	r2, r3
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d44:	b29b      	uxth	r3, r3
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d102      	bne.n	8011d50 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	f000 f9de 	bl	801210c <SPI_CloseRx_ISR>
  }
}
 8011d50:	bf00      	nop
 8011d52:	3708      	adds	r7, #8
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b082      	sub	sp, #8
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	68da      	ldr	r2, [r3, #12]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d6a:	b292      	uxth	r2, r2
 8011d6c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d72:	1c9a      	adds	r2, r3, #2
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d7c:	b29b      	uxth	r3, r3
 8011d7e:	3b01      	subs	r3, #1
 8011d80:	b29a      	uxth	r2, r3
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d8a:	b29b      	uxth	r3, r3
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d102      	bne.n	8011d96 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8011d90:	6878      	ldr	r0, [r7, #4]
 8011d92:	f000 f9bb 	bl	801210c <SPI_CloseRx_ISR>
  }
}
 8011d96:	bf00      	nop
 8011d98:	3708      	adds	r7, #8
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}
	...

08011da0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b088      	sub	sp, #32
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	60f8      	str	r0, [r7, #12]
 8011da8:	60b9      	str	r1, [r7, #8]
 8011daa:	603b      	str	r3, [r7, #0]
 8011dac:	4613      	mov	r3, r2
 8011dae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011db0:	f7fe f950 	bl	8010054 <HAL_GetTick>
 8011db4:	4602      	mov	r2, r0
 8011db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011db8:	1a9b      	subs	r3, r3, r2
 8011dba:	683a      	ldr	r2, [r7, #0]
 8011dbc:	4413      	add	r3, r2
 8011dbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011dc0:	f7fe f948 	bl	8010054 <HAL_GetTick>
 8011dc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011dc6:	4b39      	ldr	r3, [pc, #228]	@ (8011eac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	015b      	lsls	r3, r3, #5
 8011dcc:	0d1b      	lsrs	r3, r3, #20
 8011dce:	69fa      	ldr	r2, [r7, #28]
 8011dd0:	fb02 f303 	mul.w	r3, r2, r3
 8011dd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011dd6:	e055      	b.n	8011e84 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dde:	d051      	beq.n	8011e84 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011de0:	f7fe f938 	bl	8010054 <HAL_GetTick>
 8011de4:	4602      	mov	r2, r0
 8011de6:	69bb      	ldr	r3, [r7, #24]
 8011de8:	1ad3      	subs	r3, r2, r3
 8011dea:	69fa      	ldr	r2, [r7, #28]
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d902      	bls.n	8011df6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8011df0:	69fb      	ldr	r3, [r7, #28]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d13d      	bne.n	8011e72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	685a      	ldr	r2, [r3, #4]
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8011e04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	685b      	ldr	r3, [r3, #4]
 8011e0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011e0e:	d111      	bne.n	8011e34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	689b      	ldr	r3, [r3, #8]
 8011e14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011e18:	d004      	beq.n	8011e24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	689b      	ldr	r3, [r3, #8]
 8011e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011e22:	d107      	bne.n	8011e34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011e32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011e3c:	d10f      	bne.n	8011e5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	681a      	ldr	r2, [r3, #0]
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8011e4c:	601a      	str	r2, [r3, #0]
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	681a      	ldr	r2, [r3, #0]
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011e5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	2201      	movs	r2, #1
 8011e62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	2200      	movs	r2, #0
 8011e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8011e6e:	2303      	movs	r3, #3
 8011e70:	e018      	b.n	8011ea4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011e72:	697b      	ldr	r3, [r7, #20]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d102      	bne.n	8011e7e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	61fb      	str	r3, [r7, #28]
 8011e7c:	e002      	b.n	8011e84 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8011e7e:	697b      	ldr	r3, [r7, #20]
 8011e80:	3b01      	subs	r3, #1
 8011e82:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	689a      	ldr	r2, [r3, #8]
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	4013      	ands	r3, r2
 8011e8e:	68ba      	ldr	r2, [r7, #8]
 8011e90:	429a      	cmp	r2, r3
 8011e92:	bf0c      	ite	eq
 8011e94:	2301      	moveq	r3, #1
 8011e96:	2300      	movne	r3, #0
 8011e98:	b2db      	uxtb	r3, r3
 8011e9a:	461a      	mov	r2, r3
 8011e9c:	79fb      	ldrb	r3, [r7, #7]
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	d19a      	bne.n	8011dd8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8011ea2:	2300      	movs	r3, #0
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	3720      	adds	r7, #32
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	20000038 	.word	0x20000038

08011eb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b086      	sub	sp, #24
 8011eb4:	af02      	add	r7, sp, #8
 8011eb6:	60f8      	str	r0, [r7, #12]
 8011eb8:	60b9      	str	r1, [r7, #8]
 8011eba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	685b      	ldr	r3, [r3, #4]
 8011ec0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011ec4:	d111      	bne.n	8011eea <SPI_EndRxTransaction+0x3a>
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	689b      	ldr	r3, [r3, #8]
 8011eca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011ece:	d004      	beq.n	8011eda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	689b      	ldr	r3, [r3, #8]
 8011ed4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011ed8:	d107      	bne.n	8011eea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	681a      	ldr	r2, [r3, #0]
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011ee8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	685b      	ldr	r3, [r3, #4]
 8011eee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011ef2:	d12a      	bne.n	8011f4a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	689b      	ldr	r3, [r3, #8]
 8011ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011efc:	d012      	beq.n	8011f24 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	9300      	str	r3, [sp, #0]
 8011f02:	68bb      	ldr	r3, [r7, #8]
 8011f04:	2200      	movs	r2, #0
 8011f06:	2180      	movs	r1, #128	@ 0x80
 8011f08:	68f8      	ldr	r0, [r7, #12]
 8011f0a:	f7ff ff49 	bl	8011da0 <SPI_WaitFlagStateUntilTimeout>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d02d      	beq.n	8011f70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011f18:	f043 0220 	orr.w	r2, r3, #32
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8011f20:	2303      	movs	r3, #3
 8011f22:	e026      	b.n	8011f72 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	9300      	str	r3, [sp, #0]
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	2101      	movs	r1, #1
 8011f2e:	68f8      	ldr	r0, [r7, #12]
 8011f30:	f7ff ff36 	bl	8011da0 <SPI_WaitFlagStateUntilTimeout>
 8011f34:	4603      	mov	r3, r0
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d01a      	beq.n	8011f70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011f3e:	f043 0220 	orr.w	r2, r3, #32
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8011f46:	2303      	movs	r3, #3
 8011f48:	e013      	b.n	8011f72 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	9300      	str	r3, [sp, #0]
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	2200      	movs	r2, #0
 8011f52:	2101      	movs	r1, #1
 8011f54:	68f8      	ldr	r0, [r7, #12]
 8011f56:	f7ff ff23 	bl	8011da0 <SPI_WaitFlagStateUntilTimeout>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d007      	beq.n	8011f70 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011f64:	f043 0220 	orr.w	r2, r3, #32
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8011f6c:	2303      	movs	r3, #3
 8011f6e:	e000      	b.n	8011f72 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8011f70:	2300      	movs	r3, #0
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	3710      	adds	r7, #16
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}
	...

08011f7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b088      	sub	sp, #32
 8011f80:	af02      	add	r7, sp, #8
 8011f82:	60f8      	str	r0, [r7, #12]
 8011f84:	60b9      	str	r1, [r7, #8]
 8011f86:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	9300      	str	r3, [sp, #0]
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	2201      	movs	r2, #1
 8011f90:	2102      	movs	r1, #2
 8011f92:	68f8      	ldr	r0, [r7, #12]
 8011f94:	f7ff ff04 	bl	8011da0 <SPI_WaitFlagStateUntilTimeout>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d007      	beq.n	8011fae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011fa2:	f043 0220 	orr.w	r2, r3, #32
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8011faa:	2303      	movs	r3, #3
 8011fac:	e032      	b.n	8012014 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8011fae:	4b1b      	ldr	r3, [pc, #108]	@ (801201c <SPI_EndRxTxTransaction+0xa0>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8012020 <SPI_EndRxTxTransaction+0xa4>)
 8011fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8011fb8:	0d5b      	lsrs	r3, r3, #21
 8011fba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011fbe:	fb02 f303 	mul.w	r3, r2, r3
 8011fc2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	685b      	ldr	r3, [r3, #4]
 8011fc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011fcc:	d112      	bne.n	8011ff4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	9300      	str	r3, [sp, #0]
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	2180      	movs	r1, #128	@ 0x80
 8011fd8:	68f8      	ldr	r0, [r7, #12]
 8011fda:	f7ff fee1 	bl	8011da0 <SPI_WaitFlagStateUntilTimeout>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d016      	beq.n	8012012 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011fe8:	f043 0220 	orr.w	r2, r3, #32
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8011ff0:	2303      	movs	r3, #3
 8011ff2:	e00f      	b.n	8012014 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8011ff4:	697b      	ldr	r3, [r7, #20]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d00a      	beq.n	8012010 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	3b01      	subs	r3, #1
 8011ffe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	689b      	ldr	r3, [r3, #8]
 8012006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801200a:	2b80      	cmp	r3, #128	@ 0x80
 801200c:	d0f2      	beq.n	8011ff4 <SPI_EndRxTxTransaction+0x78>
 801200e:	e000      	b.n	8012012 <SPI_EndRxTxTransaction+0x96>
        break;
 8012010:	bf00      	nop
  }

  return HAL_OK;
 8012012:	2300      	movs	r3, #0
}
 8012014:	4618      	mov	r0, r3
 8012016:	3718      	adds	r7, #24
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}
 801201c:	20000038 	.word	0x20000038
 8012020:	165e9f81 	.word	0x165e9f81

08012024 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b086      	sub	sp, #24
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 801202c:	4b35      	ldr	r3, [pc, #212]	@ (8012104 <SPI_CloseRxTx_ISR+0xe0>)
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	4a35      	ldr	r2, [pc, #212]	@ (8012108 <SPI_CloseRxTx_ISR+0xe4>)
 8012032:	fba2 2303 	umull	r2, r3, r2, r3
 8012036:	0a5b      	lsrs	r3, r3, #9
 8012038:	2264      	movs	r2, #100	@ 0x64
 801203a:	fb02 f303 	mul.w	r3, r2, r3
 801203e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012040:	f7fe f808 	bl	8010054 <HAL_GetTick>
 8012044:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	685a      	ldr	r2, [r3, #4]
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	f022 0220 	bic.w	r2, r2, #32
 8012054:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8012056:	693b      	ldr	r3, [r7, #16]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d106      	bne.n	801206a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012060:	f043 0220 	orr.w	r2, r3, #32
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8012068:	e009      	b.n	801207e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 801206a:	693b      	ldr	r3, [r7, #16]
 801206c:	3b01      	subs	r3, #1
 801206e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	689b      	ldr	r3, [r3, #8]
 8012076:	f003 0302 	and.w	r3, r3, #2
 801207a:	2b00      	cmp	r3, #0
 801207c:	d0eb      	beq.n	8012056 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801207e:	697a      	ldr	r2, [r7, #20]
 8012080:	2164      	movs	r1, #100	@ 0x64
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	f7ff ff7a 	bl	8011f7c <SPI_EndRxTxTransaction>
 8012088:	4603      	mov	r3, r0
 801208a:	2b00      	cmp	r3, #0
 801208c:	d005      	beq.n	801209a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012092:	f043 0220 	orr.w	r2, r3, #32
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	689b      	ldr	r3, [r3, #8]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d10a      	bne.n	80120b8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80120a2:	2300      	movs	r3, #0
 80120a4:	60fb      	str	r3, [r7, #12]
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	68db      	ldr	r3, [r3, #12]
 80120ac:	60fb      	str	r3, [r7, #12]
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	689b      	ldr	r3, [r3, #8]
 80120b4:	60fb      	str	r3, [r7, #12]
 80120b6:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d115      	bne.n	80120ec <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	2b04      	cmp	r3, #4
 80120ca:	d107      	bne.n	80120dc <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2201      	movs	r2, #1
 80120d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f7fc ffdf 	bl	800f098 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80120da:	e00e      	b.n	80120fa <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	2201      	movs	r2, #1
 80120e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f7ff fd29 	bl	8011b3c <HAL_SPI_TxRxCpltCallback>
}
 80120ea:	e006      	b.n	80120fa <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2201      	movs	r2, #1
 80120f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f7ff fd2b 	bl	8011b50 <HAL_SPI_ErrorCallback>
}
 80120fa:	bf00      	nop
 80120fc:	3718      	adds	r7, #24
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}
 8012102:	bf00      	nop
 8012104:	20000038 	.word	0x20000038
 8012108:	057619f1 	.word	0x057619f1

0801210c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b084      	sub	sp, #16
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	685a      	ldr	r2, [r3, #4]
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8012122:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8012124:	f7fd ff96 	bl	8010054 <HAL_GetTick>
 8012128:	4603      	mov	r3, r0
 801212a:	461a      	mov	r2, r3
 801212c:	2164      	movs	r1, #100	@ 0x64
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f7ff febe 	bl	8011eb0 <SPI_EndRxTransaction>
 8012134:	4603      	mov	r3, r0
 8012136:	2b00      	cmp	r3, #0
 8012138:	d005      	beq.n	8012146 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801213e:	f043 0220 	orr.w	r2, r3, #32
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	689b      	ldr	r3, [r3, #8]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d10a      	bne.n	8012164 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801214e:	2300      	movs	r3, #0
 8012150:	60fb      	str	r3, [r7, #12]
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	68db      	ldr	r3, [r3, #12]
 8012158:	60fb      	str	r3, [r7, #12]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	689b      	ldr	r3, [r3, #8]
 8012160:	60fb      	str	r3, [r7, #12]
 8012162:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2201      	movs	r2, #1
 8012168:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012170:	2b00      	cmp	r3, #0
 8012172:	d103      	bne.n	801217c <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8012174:	6878      	ldr	r0, [r7, #4]
 8012176:	f7fc ff8f 	bl	800f098 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 801217a:	e002      	b.n	8012182 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 801217c:	6878      	ldr	r0, [r7, #4]
 801217e:	f7ff fce7 	bl	8011b50 <HAL_SPI_ErrorCallback>
}
 8012182:	bf00      	nop
 8012184:	3710      	adds	r7, #16
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}

0801218a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801218a:	b580      	push	{r7, lr}
 801218c:	b082      	sub	sp, #8
 801218e:	af00      	add	r7, sp, #0
 8012190:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d101      	bne.n	801219c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012198:	2301      	movs	r3, #1
 801219a:	e041      	b.n	8012220 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80121a2:	b2db      	uxtb	r3, r3
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d106      	bne.n	80121b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2200      	movs	r2, #0
 80121ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80121b0:	6878      	ldr	r0, [r7, #4]
 80121b2:	f000 f839 	bl	8012228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	2202      	movs	r2, #2
 80121ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681a      	ldr	r2, [r3, #0]
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	3304      	adds	r3, #4
 80121c6:	4619      	mov	r1, r3
 80121c8:	4610      	mov	r0, r2
 80121ca:	f000 f9bf 	bl	801254c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	2201      	movs	r2, #1
 80121d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2201      	movs	r2, #1
 80121da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2201      	movs	r2, #1
 80121e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2201      	movs	r2, #1
 80121ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2201      	movs	r2, #1
 80121f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2201      	movs	r2, #1
 80121fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	2201      	movs	r2, #1
 8012202:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2201      	movs	r2, #1
 801220a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2201      	movs	r2, #1
 8012212:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2201      	movs	r2, #1
 801221a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801221e:	2300      	movs	r3, #0
}
 8012220:	4618      	mov	r0, r3
 8012222:	3708      	adds	r7, #8
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}

08012228 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8012228:	b480      	push	{r7}
 801222a:	b083      	sub	sp, #12
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8012230:	bf00      	nop
 8012232:	370c      	adds	r7, #12
 8012234:	46bd      	mov	sp, r7
 8012236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223a:	4770      	bx	lr

0801223c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801223c:	b480      	push	{r7}
 801223e:	b085      	sub	sp, #20
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801224a:	b2db      	uxtb	r3, r3
 801224c:	2b01      	cmp	r3, #1
 801224e:	d001      	beq.n	8012254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012250:	2301      	movs	r3, #1
 8012252:	e04e      	b.n	80122f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2202      	movs	r2, #2
 8012258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	68da      	ldr	r2, [r3, #12]
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	f042 0201 	orr.w	r2, r2, #1
 801226a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	4a23      	ldr	r2, [pc, #140]	@ (8012300 <HAL_TIM_Base_Start_IT+0xc4>)
 8012272:	4293      	cmp	r3, r2
 8012274:	d022      	beq.n	80122bc <HAL_TIM_Base_Start_IT+0x80>
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801227e:	d01d      	beq.n	80122bc <HAL_TIM_Base_Start_IT+0x80>
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	4a1f      	ldr	r2, [pc, #124]	@ (8012304 <HAL_TIM_Base_Start_IT+0xc8>)
 8012286:	4293      	cmp	r3, r2
 8012288:	d018      	beq.n	80122bc <HAL_TIM_Base_Start_IT+0x80>
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	4a1e      	ldr	r2, [pc, #120]	@ (8012308 <HAL_TIM_Base_Start_IT+0xcc>)
 8012290:	4293      	cmp	r3, r2
 8012292:	d013      	beq.n	80122bc <HAL_TIM_Base_Start_IT+0x80>
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	4a1c      	ldr	r2, [pc, #112]	@ (801230c <HAL_TIM_Base_Start_IT+0xd0>)
 801229a:	4293      	cmp	r3, r2
 801229c:	d00e      	beq.n	80122bc <HAL_TIM_Base_Start_IT+0x80>
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	4a1b      	ldr	r2, [pc, #108]	@ (8012310 <HAL_TIM_Base_Start_IT+0xd4>)
 80122a4:	4293      	cmp	r3, r2
 80122a6:	d009      	beq.n	80122bc <HAL_TIM_Base_Start_IT+0x80>
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	4a19      	ldr	r2, [pc, #100]	@ (8012314 <HAL_TIM_Base_Start_IT+0xd8>)
 80122ae:	4293      	cmp	r3, r2
 80122b0:	d004      	beq.n	80122bc <HAL_TIM_Base_Start_IT+0x80>
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	4a18      	ldr	r2, [pc, #96]	@ (8012318 <HAL_TIM_Base_Start_IT+0xdc>)
 80122b8:	4293      	cmp	r3, r2
 80122ba:	d111      	bne.n	80122e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	689b      	ldr	r3, [r3, #8]
 80122c2:	f003 0307 	and.w	r3, r3, #7
 80122c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	2b06      	cmp	r3, #6
 80122cc:	d010      	beq.n	80122f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	681a      	ldr	r2, [r3, #0]
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	f042 0201 	orr.w	r2, r2, #1
 80122dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80122de:	e007      	b.n	80122f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	681a      	ldr	r2, [r3, #0]
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	f042 0201 	orr.w	r2, r2, #1
 80122ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80122f0:	2300      	movs	r3, #0
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	3714      	adds	r7, #20
 80122f6:	46bd      	mov	sp, r7
 80122f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fc:	4770      	bx	lr
 80122fe:	bf00      	nop
 8012300:	40010000 	.word	0x40010000
 8012304:	40000400 	.word	0x40000400
 8012308:	40000800 	.word	0x40000800
 801230c:	40000c00 	.word	0x40000c00
 8012310:	40010400 	.word	0x40010400
 8012314:	40014000 	.word	0x40014000
 8012318:	40001800 	.word	0x40001800

0801231c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b084      	sub	sp, #16
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	68db      	ldr	r3, [r3, #12]
 801232a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	691b      	ldr	r3, [r3, #16]
 8012332:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012334:	68bb      	ldr	r3, [r7, #8]
 8012336:	f003 0302 	and.w	r3, r3, #2
 801233a:	2b00      	cmp	r3, #0
 801233c:	d020      	beq.n	8012380 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	f003 0302 	and.w	r3, r3, #2
 8012344:	2b00      	cmp	r3, #0
 8012346:	d01b      	beq.n	8012380 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	f06f 0202 	mvn.w	r2, #2
 8012350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	2201      	movs	r2, #1
 8012356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	699b      	ldr	r3, [r3, #24]
 801235e:	f003 0303 	and.w	r3, r3, #3
 8012362:	2b00      	cmp	r3, #0
 8012364:	d003      	beq.n	801236e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	f000 f8d2 	bl	8012510 <HAL_TIM_IC_CaptureCallback>
 801236c:	e005      	b.n	801237a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f000 f8c4 	bl	80124fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f000 f8d5 	bl	8012524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2200      	movs	r2, #0
 801237e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	f003 0304 	and.w	r3, r3, #4
 8012386:	2b00      	cmp	r3, #0
 8012388:	d020      	beq.n	80123cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	f003 0304 	and.w	r3, r3, #4
 8012390:	2b00      	cmp	r3, #0
 8012392:	d01b      	beq.n	80123cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	f06f 0204 	mvn.w	r2, #4
 801239c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	2202      	movs	r2, #2
 80123a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	699b      	ldr	r3, [r3, #24]
 80123aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d003      	beq.n	80123ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f000 f8ac 	bl	8012510 <HAL_TIM_IC_CaptureCallback>
 80123b8:	e005      	b.n	80123c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80123ba:	6878      	ldr	r0, [r7, #4]
 80123bc:	f000 f89e 	bl	80124fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	f000 f8af 	bl	8012524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	2200      	movs	r2, #0
 80123ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	f003 0308 	and.w	r3, r3, #8
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d020      	beq.n	8012418 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	f003 0308 	and.w	r3, r3, #8
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d01b      	beq.n	8012418 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	f06f 0208 	mvn.w	r2, #8
 80123e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	2204      	movs	r2, #4
 80123ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	69db      	ldr	r3, [r3, #28]
 80123f6:	f003 0303 	and.w	r3, r3, #3
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d003      	beq.n	8012406 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f000 f886 	bl	8012510 <HAL_TIM_IC_CaptureCallback>
 8012404:	e005      	b.n	8012412 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f000 f878 	bl	80124fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f000 f889 	bl	8012524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	2200      	movs	r2, #0
 8012416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	f003 0310 	and.w	r3, r3, #16
 801241e:	2b00      	cmp	r3, #0
 8012420:	d020      	beq.n	8012464 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	f003 0310 	and.w	r3, r3, #16
 8012428:	2b00      	cmp	r3, #0
 801242a:	d01b      	beq.n	8012464 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	f06f 0210 	mvn.w	r2, #16
 8012434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	2208      	movs	r2, #8
 801243a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	69db      	ldr	r3, [r3, #28]
 8012442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012446:	2b00      	cmp	r3, #0
 8012448:	d003      	beq.n	8012452 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f000 f860 	bl	8012510 <HAL_TIM_IC_CaptureCallback>
 8012450:	e005      	b.n	801245e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f000 f852 	bl	80124fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f000 f863 	bl	8012524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2200      	movs	r2, #0
 8012462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	f003 0301 	and.w	r3, r3, #1
 801246a:	2b00      	cmp	r3, #0
 801246c:	d00c      	beq.n	8012488 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	f003 0301 	and.w	r3, r3, #1
 8012474:	2b00      	cmp	r3, #0
 8012476:	d007      	beq.n	8012488 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	f06f 0201 	mvn.w	r2, #1
 8012480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f7fc fc80 	bl	800ed88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801248e:	2b00      	cmp	r3, #0
 8012490:	d00c      	beq.n	80124ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012498:	2b00      	cmp	r3, #0
 801249a:	d007      	beq.n	80124ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80124a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80124a6:	6878      	ldr	r0, [r7, #4]
 80124a8:	f000 f900 	bl	80126ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80124ac:	68bb      	ldr	r3, [r7, #8]
 80124ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d00c      	beq.n	80124d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d007      	beq.n	80124d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80124c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80124ca:	6878      	ldr	r0, [r7, #4]
 80124cc:	f000 f834 	bl	8012538 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	f003 0320 	and.w	r3, r3, #32
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d00c      	beq.n	80124f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	f003 0320 	and.w	r3, r3, #32
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d007      	beq.n	80124f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	f06f 0220 	mvn.w	r2, #32
 80124ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f000 f8d2 	bl	8012698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80124f4:	bf00      	nop
 80124f6:	3710      	adds	r7, #16
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}

080124fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80124fc:	b480      	push	{r7}
 80124fe:	b083      	sub	sp, #12
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012504:	bf00      	nop
 8012506:	370c      	adds	r7, #12
 8012508:	46bd      	mov	sp, r7
 801250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250e:	4770      	bx	lr

08012510 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012510:	b480      	push	{r7}
 8012512:	b083      	sub	sp, #12
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012518:	bf00      	nop
 801251a:	370c      	adds	r7, #12
 801251c:	46bd      	mov	sp, r7
 801251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012522:	4770      	bx	lr

08012524 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012524:	b480      	push	{r7}
 8012526:	b083      	sub	sp, #12
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801252c:	bf00      	nop
 801252e:	370c      	adds	r7, #12
 8012530:	46bd      	mov	sp, r7
 8012532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012536:	4770      	bx	lr

08012538 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012538:	b480      	push	{r7}
 801253a:	b083      	sub	sp, #12
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012540:	bf00      	nop
 8012542:	370c      	adds	r7, #12
 8012544:	46bd      	mov	sp, r7
 8012546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254a:	4770      	bx	lr

0801254c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801254c:	b480      	push	{r7}
 801254e:	b085      	sub	sp, #20
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	4a43      	ldr	r2, [pc, #268]	@ (801266c <TIM_Base_SetConfig+0x120>)
 8012560:	4293      	cmp	r3, r2
 8012562:	d013      	beq.n	801258c <TIM_Base_SetConfig+0x40>
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801256a:	d00f      	beq.n	801258c <TIM_Base_SetConfig+0x40>
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	4a40      	ldr	r2, [pc, #256]	@ (8012670 <TIM_Base_SetConfig+0x124>)
 8012570:	4293      	cmp	r3, r2
 8012572:	d00b      	beq.n	801258c <TIM_Base_SetConfig+0x40>
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	4a3f      	ldr	r2, [pc, #252]	@ (8012674 <TIM_Base_SetConfig+0x128>)
 8012578:	4293      	cmp	r3, r2
 801257a:	d007      	beq.n	801258c <TIM_Base_SetConfig+0x40>
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	4a3e      	ldr	r2, [pc, #248]	@ (8012678 <TIM_Base_SetConfig+0x12c>)
 8012580:	4293      	cmp	r3, r2
 8012582:	d003      	beq.n	801258c <TIM_Base_SetConfig+0x40>
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	4a3d      	ldr	r2, [pc, #244]	@ (801267c <TIM_Base_SetConfig+0x130>)
 8012588:	4293      	cmp	r3, r2
 801258a:	d108      	bne.n	801259e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012594:	683b      	ldr	r3, [r7, #0]
 8012596:	685b      	ldr	r3, [r3, #4]
 8012598:	68fa      	ldr	r2, [r7, #12]
 801259a:	4313      	orrs	r3, r2
 801259c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	4a32      	ldr	r2, [pc, #200]	@ (801266c <TIM_Base_SetConfig+0x120>)
 80125a2:	4293      	cmp	r3, r2
 80125a4:	d02b      	beq.n	80125fe <TIM_Base_SetConfig+0xb2>
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80125ac:	d027      	beq.n	80125fe <TIM_Base_SetConfig+0xb2>
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	4a2f      	ldr	r2, [pc, #188]	@ (8012670 <TIM_Base_SetConfig+0x124>)
 80125b2:	4293      	cmp	r3, r2
 80125b4:	d023      	beq.n	80125fe <TIM_Base_SetConfig+0xb2>
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	4a2e      	ldr	r2, [pc, #184]	@ (8012674 <TIM_Base_SetConfig+0x128>)
 80125ba:	4293      	cmp	r3, r2
 80125bc:	d01f      	beq.n	80125fe <TIM_Base_SetConfig+0xb2>
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	4a2d      	ldr	r2, [pc, #180]	@ (8012678 <TIM_Base_SetConfig+0x12c>)
 80125c2:	4293      	cmp	r3, r2
 80125c4:	d01b      	beq.n	80125fe <TIM_Base_SetConfig+0xb2>
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	4a2c      	ldr	r2, [pc, #176]	@ (801267c <TIM_Base_SetConfig+0x130>)
 80125ca:	4293      	cmp	r3, r2
 80125cc:	d017      	beq.n	80125fe <TIM_Base_SetConfig+0xb2>
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	4a2b      	ldr	r2, [pc, #172]	@ (8012680 <TIM_Base_SetConfig+0x134>)
 80125d2:	4293      	cmp	r3, r2
 80125d4:	d013      	beq.n	80125fe <TIM_Base_SetConfig+0xb2>
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	4a2a      	ldr	r2, [pc, #168]	@ (8012684 <TIM_Base_SetConfig+0x138>)
 80125da:	4293      	cmp	r3, r2
 80125dc:	d00f      	beq.n	80125fe <TIM_Base_SetConfig+0xb2>
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	4a29      	ldr	r2, [pc, #164]	@ (8012688 <TIM_Base_SetConfig+0x13c>)
 80125e2:	4293      	cmp	r3, r2
 80125e4:	d00b      	beq.n	80125fe <TIM_Base_SetConfig+0xb2>
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	4a28      	ldr	r2, [pc, #160]	@ (801268c <TIM_Base_SetConfig+0x140>)
 80125ea:	4293      	cmp	r3, r2
 80125ec:	d007      	beq.n	80125fe <TIM_Base_SetConfig+0xb2>
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	4a27      	ldr	r2, [pc, #156]	@ (8012690 <TIM_Base_SetConfig+0x144>)
 80125f2:	4293      	cmp	r3, r2
 80125f4:	d003      	beq.n	80125fe <TIM_Base_SetConfig+0xb2>
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	4a26      	ldr	r2, [pc, #152]	@ (8012694 <TIM_Base_SetConfig+0x148>)
 80125fa:	4293      	cmp	r3, r2
 80125fc:	d108      	bne.n	8012610 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	68db      	ldr	r3, [r3, #12]
 801260a:	68fa      	ldr	r2, [r7, #12]
 801260c:	4313      	orrs	r3, r2
 801260e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	695b      	ldr	r3, [r3, #20]
 801261a:	4313      	orrs	r3, r2
 801261c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	689a      	ldr	r2, [r3, #8]
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	681a      	ldr	r2, [r3, #0]
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	4a0e      	ldr	r2, [pc, #56]	@ (801266c <TIM_Base_SetConfig+0x120>)
 8012632:	4293      	cmp	r3, r2
 8012634:	d003      	beq.n	801263e <TIM_Base_SetConfig+0xf2>
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	4a10      	ldr	r2, [pc, #64]	@ (801267c <TIM_Base_SetConfig+0x130>)
 801263a:	4293      	cmp	r3, r2
 801263c:	d103      	bne.n	8012646 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801263e:	683b      	ldr	r3, [r7, #0]
 8012640:	691a      	ldr	r2, [r3, #16]
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	f043 0204 	orr.w	r2, r3, #4
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	2201      	movs	r2, #1
 8012656:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	68fa      	ldr	r2, [r7, #12]
 801265c:	601a      	str	r2, [r3, #0]
}
 801265e:	bf00      	nop
 8012660:	3714      	adds	r7, #20
 8012662:	46bd      	mov	sp, r7
 8012664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012668:	4770      	bx	lr
 801266a:	bf00      	nop
 801266c:	40010000 	.word	0x40010000
 8012670:	40000400 	.word	0x40000400
 8012674:	40000800 	.word	0x40000800
 8012678:	40000c00 	.word	0x40000c00
 801267c:	40010400 	.word	0x40010400
 8012680:	40014000 	.word	0x40014000
 8012684:	40014400 	.word	0x40014400
 8012688:	40014800 	.word	0x40014800
 801268c:	40001800 	.word	0x40001800
 8012690:	40001c00 	.word	0x40001c00
 8012694:	40002000 	.word	0x40002000

08012698 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012698:	b480      	push	{r7}
 801269a:	b083      	sub	sp, #12
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80126a0:	bf00      	nop
 80126a2:	370c      	adds	r7, #12
 80126a4:	46bd      	mov	sp, r7
 80126a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126aa:	4770      	bx	lr

080126ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80126ac:	b480      	push	{r7}
 80126ae:	b083      	sub	sp, #12
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80126b4:	bf00      	nop
 80126b6:	370c      	adds	r7, #12
 80126b8:	46bd      	mov	sp, r7
 80126ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126be:	4770      	bx	lr

080126c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b082      	sub	sp, #8
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d101      	bne.n	80126d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80126ce:	2301      	movs	r3, #1
 80126d0:	e042      	b.n	8012758 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80126d8:	b2db      	uxtb	r3, r3
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d106      	bne.n	80126ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	2200      	movs	r2, #0
 80126e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80126e6:	6878      	ldr	r0, [r7, #4]
 80126e8:	f7fc fe34 	bl	800f354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2224      	movs	r2, #36	@ 0x24
 80126f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	68da      	ldr	r2, [r3, #12]
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8012702:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f000 fe09 	bl	801331c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	691a      	ldr	r2, [r3, #16]
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8012718:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	695a      	ldr	r2, [r3, #20]
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8012728:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	68da      	ldr	r2, [r3, #12]
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8012738:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2200      	movs	r2, #0
 801273e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2220      	movs	r2, #32
 8012744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	2220      	movs	r2, #32
 801274c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2200      	movs	r2, #0
 8012754:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8012756:	2300      	movs	r3, #0
}
 8012758:	4618      	mov	r0, r3
 801275a:	3708      	adds	r7, #8
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}

08012760 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b08a      	sub	sp, #40	@ 0x28
 8012764:	af02      	add	r7, sp, #8
 8012766:	60f8      	str	r0, [r7, #12]
 8012768:	60b9      	str	r1, [r7, #8]
 801276a:	603b      	str	r3, [r7, #0]
 801276c:	4613      	mov	r3, r2
 801276e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8012770:	2300      	movs	r3, #0
 8012772:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801277a:	b2db      	uxtb	r3, r3
 801277c:	2b20      	cmp	r3, #32
 801277e:	d175      	bne.n	801286c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d002      	beq.n	801278c <HAL_UART_Transmit+0x2c>
 8012786:	88fb      	ldrh	r3, [r7, #6]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d101      	bne.n	8012790 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801278c:	2301      	movs	r3, #1
 801278e:	e06e      	b.n	801286e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	2200      	movs	r2, #0
 8012794:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	2221      	movs	r2, #33	@ 0x21
 801279a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801279e:	f7fd fc59 	bl	8010054 <HAL_GetTick>
 80127a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	88fa      	ldrh	r2, [r7, #6]
 80127a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	88fa      	ldrh	r2, [r7, #6]
 80127ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	689b      	ldr	r3, [r3, #8]
 80127b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80127b8:	d108      	bne.n	80127cc <HAL_UART_Transmit+0x6c>
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	691b      	ldr	r3, [r3, #16]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d104      	bne.n	80127cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80127c2:	2300      	movs	r3, #0
 80127c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	61bb      	str	r3, [r7, #24]
 80127ca:	e003      	b.n	80127d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80127d0:	2300      	movs	r3, #0
 80127d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80127d4:	e02e      	b.n	8012834 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80127d6:	683b      	ldr	r3, [r7, #0]
 80127d8:	9300      	str	r3, [sp, #0]
 80127da:	697b      	ldr	r3, [r7, #20]
 80127dc:	2200      	movs	r2, #0
 80127de:	2180      	movs	r1, #128	@ 0x80
 80127e0:	68f8      	ldr	r0, [r7, #12]
 80127e2:	f000 fb6d 	bl	8012ec0 <UART_WaitOnFlagUntilTimeout>
 80127e6:	4603      	mov	r3, r0
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d005      	beq.n	80127f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	2220      	movs	r2, #32
 80127f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80127f4:	2303      	movs	r3, #3
 80127f6:	e03a      	b.n	801286e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80127f8:	69fb      	ldr	r3, [r7, #28]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d10b      	bne.n	8012816 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80127fe:	69bb      	ldr	r3, [r7, #24]
 8012800:	881b      	ldrh	r3, [r3, #0]
 8012802:	461a      	mov	r2, r3
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801280c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801280e:	69bb      	ldr	r3, [r7, #24]
 8012810:	3302      	adds	r3, #2
 8012812:	61bb      	str	r3, [r7, #24]
 8012814:	e007      	b.n	8012826 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8012816:	69fb      	ldr	r3, [r7, #28]
 8012818:	781a      	ldrb	r2, [r3, #0]
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8012820:	69fb      	ldr	r3, [r7, #28]
 8012822:	3301      	adds	r3, #1
 8012824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 801282a:	b29b      	uxth	r3, r3
 801282c:	3b01      	subs	r3, #1
 801282e:	b29a      	uxth	r2, r3
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8012838:	b29b      	uxth	r3, r3
 801283a:	2b00      	cmp	r3, #0
 801283c:	d1cb      	bne.n	80127d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801283e:	683b      	ldr	r3, [r7, #0]
 8012840:	9300      	str	r3, [sp, #0]
 8012842:	697b      	ldr	r3, [r7, #20]
 8012844:	2200      	movs	r2, #0
 8012846:	2140      	movs	r1, #64	@ 0x40
 8012848:	68f8      	ldr	r0, [r7, #12]
 801284a:	f000 fb39 	bl	8012ec0 <UART_WaitOnFlagUntilTimeout>
 801284e:	4603      	mov	r3, r0
 8012850:	2b00      	cmp	r3, #0
 8012852:	d005      	beq.n	8012860 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	2220      	movs	r2, #32
 8012858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 801285c:	2303      	movs	r3, #3
 801285e:	e006      	b.n	801286e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	2220      	movs	r2, #32
 8012864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8012868:	2300      	movs	r3, #0
 801286a:	e000      	b.n	801286e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 801286c:	2302      	movs	r3, #2
  }
}
 801286e:	4618      	mov	r0, r3
 8012870:	3720      	adds	r7, #32
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}

08012876 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8012876:	b480      	push	{r7}
 8012878:	b085      	sub	sp, #20
 801287a:	af00      	add	r7, sp, #0
 801287c:	60f8      	str	r0, [r7, #12]
 801287e:	60b9      	str	r1, [r7, #8]
 8012880:	4613      	mov	r3, r2
 8012882:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801288a:	b2db      	uxtb	r3, r3
 801288c:	2b20      	cmp	r3, #32
 801288e:	d121      	bne.n	80128d4 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d002      	beq.n	801289c <HAL_UART_Transmit_IT+0x26>
 8012896:	88fb      	ldrh	r3, [r7, #6]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d101      	bne.n	80128a0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 801289c:	2301      	movs	r3, #1
 801289e:	e01a      	b.n	80128d6 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	68ba      	ldr	r2, [r7, #8]
 80128a4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	88fa      	ldrh	r2, [r7, #6]
 80128aa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	88fa      	ldrh	r2, [r7, #6]
 80128b0:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	2200      	movs	r2, #0
 80128b6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	2221      	movs	r2, #33	@ 0x21
 80128bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	68da      	ldr	r2, [r3, #12]
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80128ce:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80128d0:	2300      	movs	r3, #0
 80128d2:	e000      	b.n	80128d6 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80128d4:	2302      	movs	r3, #2
  }
}
 80128d6:	4618      	mov	r0, r3
 80128d8:	3714      	adds	r7, #20
 80128da:	46bd      	mov	sp, r7
 80128dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e0:	4770      	bx	lr

080128e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80128e2:	b580      	push	{r7, lr}
 80128e4:	b084      	sub	sp, #16
 80128e6:	af00      	add	r7, sp, #0
 80128e8:	60f8      	str	r0, [r7, #12]
 80128ea:	60b9      	str	r1, [r7, #8]
 80128ec:	4613      	mov	r3, r2
 80128ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80128f6:	b2db      	uxtb	r3, r3
 80128f8:	2b20      	cmp	r3, #32
 80128fa:	d112      	bne.n	8012922 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d002      	beq.n	8012908 <HAL_UART_Receive_IT+0x26>
 8012902:	88fb      	ldrh	r3, [r7, #6]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d101      	bne.n	801290c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8012908:	2301      	movs	r3, #1
 801290a:	e00b      	b.n	8012924 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	2200      	movs	r2, #0
 8012910:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8012912:	88fb      	ldrh	r3, [r7, #6]
 8012914:	461a      	mov	r2, r3
 8012916:	68b9      	ldr	r1, [r7, #8]
 8012918:	68f8      	ldr	r0, [r7, #12]
 801291a:	f000 fb2a 	bl	8012f72 <UART_Start_Receive_IT>
 801291e:	4603      	mov	r3, r0
 8012920:	e000      	b.n	8012924 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8012922:	2302      	movs	r3, #2
  }
}
 8012924:	4618      	mov	r0, r3
 8012926:	3710      	adds	r7, #16
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}

0801292c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b0ba      	sub	sp, #232	@ 0xe8
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	68db      	ldr	r3, [r3, #12]
 8012944:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	695b      	ldr	r3, [r3, #20]
 801294e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8012952:	2300      	movs	r3, #0
 8012954:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8012958:	2300      	movs	r3, #0
 801295a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801295e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012962:	f003 030f 	and.w	r3, r3, #15
 8012966:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 801296a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801296e:	2b00      	cmp	r3, #0
 8012970:	d10f      	bne.n	8012992 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012976:	f003 0320 	and.w	r3, r3, #32
 801297a:	2b00      	cmp	r3, #0
 801297c:	d009      	beq.n	8012992 <HAL_UART_IRQHandler+0x66>
 801297e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012982:	f003 0320 	and.w	r3, r3, #32
 8012986:	2b00      	cmp	r3, #0
 8012988:	d003      	beq.n	8012992 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801298a:	6878      	ldr	r0, [r7, #4]
 801298c:	f000 fc07 	bl	801319e <UART_Receive_IT>
      return;
 8012990:	e273      	b.n	8012e7a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8012992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012996:	2b00      	cmp	r3, #0
 8012998:	f000 80de 	beq.w	8012b58 <HAL_UART_IRQHandler+0x22c>
 801299c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80129a0:	f003 0301 	and.w	r3, r3, #1
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d106      	bne.n	80129b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80129a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80129ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	f000 80d1 	beq.w	8012b58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80129b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80129ba:	f003 0301 	and.w	r3, r3, #1
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d00b      	beq.n	80129da <HAL_UART_IRQHandler+0xae>
 80129c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80129c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d005      	beq.n	80129da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129d2:	f043 0201 	orr.w	r2, r3, #1
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80129da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80129de:	f003 0304 	and.w	r3, r3, #4
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d00b      	beq.n	80129fe <HAL_UART_IRQHandler+0xd2>
 80129e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80129ea:	f003 0301 	and.w	r3, r3, #1
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d005      	beq.n	80129fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129f6:	f043 0202 	orr.w	r2, r3, #2
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80129fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a02:	f003 0302 	and.w	r3, r3, #2
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d00b      	beq.n	8012a22 <HAL_UART_IRQHandler+0xf6>
 8012a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012a0e:	f003 0301 	and.w	r3, r3, #1
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d005      	beq.n	8012a22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a1a:	f043 0204 	orr.w	r2, r3, #4
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8012a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a26:	f003 0308 	and.w	r3, r3, #8
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d011      	beq.n	8012a52 <HAL_UART_IRQHandler+0x126>
 8012a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012a32:	f003 0320 	and.w	r3, r3, #32
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d105      	bne.n	8012a46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8012a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012a3e:	f003 0301 	and.w	r3, r3, #1
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d005      	beq.n	8012a52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a4a:	f043 0208 	orr.w	r2, r3, #8
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	f000 820a 	beq.w	8012e70 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a60:	f003 0320 	and.w	r3, r3, #32
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d008      	beq.n	8012a7a <HAL_UART_IRQHandler+0x14e>
 8012a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012a6c:	f003 0320 	and.w	r3, r3, #32
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d002      	beq.n	8012a7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8012a74:	6878      	ldr	r0, [r7, #4]
 8012a76:	f000 fb92 	bl	801319e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	695b      	ldr	r3, [r3, #20]
 8012a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012a84:	2b40      	cmp	r3, #64	@ 0x40
 8012a86:	bf0c      	ite	eq
 8012a88:	2301      	moveq	r3, #1
 8012a8a:	2300      	movne	r3, #0
 8012a8c:	b2db      	uxtb	r3, r3
 8012a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a96:	f003 0308 	and.w	r3, r3, #8
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d103      	bne.n	8012aa6 <HAL_UART_IRQHandler+0x17a>
 8012a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d04f      	beq.n	8012b46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012aa6:	6878      	ldr	r0, [r7, #4]
 8012aa8:	f000 fa9d 	bl	8012fe6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	695b      	ldr	r3, [r3, #20]
 8012ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ab6:	2b40      	cmp	r3, #64	@ 0x40
 8012ab8:	d141      	bne.n	8012b3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	3314      	adds	r3, #20
 8012ac0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012ac8:	e853 3f00 	ldrex	r3, [r3]
 8012acc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8012ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012ad4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	3314      	adds	r3, #20
 8012ae2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8012ae6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8012aea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012aee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8012af2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012af6:	e841 2300 	strex	r3, r2, [r1]
 8012afa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8012afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d1d9      	bne.n	8012aba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d013      	beq.n	8012b36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b12:	4a8a      	ldr	r2, [pc, #552]	@ (8012d3c <HAL_UART_IRQHandler+0x410>)
 8012b14:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7fd fc1c 	bl	8010358 <HAL_DMA_Abort_IT>
 8012b20:	4603      	mov	r3, r0
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d016      	beq.n	8012b54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b2c:	687a      	ldr	r2, [r7, #4]
 8012b2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8012b30:	4610      	mov	r0, r2
 8012b32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b34:	e00e      	b.n	8012b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	f000 f9ac 	bl	8012e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b3c:	e00a      	b.n	8012b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f000 f9a8 	bl	8012e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b44:	e006      	b.n	8012b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	f000 f9a4 	bl	8012e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8012b52:	e18d      	b.n	8012e70 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b54:	bf00      	nop
    return;
 8012b56:	e18b      	b.n	8012e70 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b5c:	2b01      	cmp	r3, #1
 8012b5e:	f040 8167 	bne.w	8012e30 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8012b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012b66:	f003 0310 	and.w	r3, r3, #16
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	f000 8160 	beq.w	8012e30 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8012b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012b74:	f003 0310 	and.w	r3, r3, #16
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	f000 8159 	beq.w	8012e30 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8012b7e:	2300      	movs	r3, #0
 8012b80:	60bb      	str	r3, [r7, #8]
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	60bb      	str	r3, [r7, #8]
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	685b      	ldr	r3, [r3, #4]
 8012b90:	60bb      	str	r3, [r7, #8]
 8012b92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	695b      	ldr	r3, [r3, #20]
 8012b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012b9e:	2b40      	cmp	r3, #64	@ 0x40
 8012ba0:	f040 80ce 	bne.w	8012d40 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	685b      	ldr	r3, [r3, #4]
 8012bac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012bb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	f000 80a9 	beq.w	8012d0c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	f080 80a2 	bcs.w	8012d0c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012bce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012bd4:	69db      	ldr	r3, [r3, #28]
 8012bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012bda:	f000 8088 	beq.w	8012cee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	330c      	adds	r3, #12
 8012be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012bec:	e853 3f00 	ldrex	r3, [r3]
 8012bf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8012bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	330c      	adds	r3, #12
 8012c06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8012c0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8012c0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8012c16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012c1a:	e841 2300 	strex	r3, r2, [r1]
 8012c1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8012c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d1d9      	bne.n	8012bde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	3314      	adds	r3, #20
 8012c30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012c34:	e853 3f00 	ldrex	r3, [r3]
 8012c38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8012c3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012c3c:	f023 0301 	bic.w	r3, r3, #1
 8012c40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	3314      	adds	r3, #20
 8012c4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012c4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012c52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8012c56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012c5a:	e841 2300 	strex	r3, r2, [r1]
 8012c5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012c60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d1e1      	bne.n	8012c2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	3314      	adds	r3, #20
 8012c6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012c70:	e853 3f00 	ldrex	r3, [r3]
 8012c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8012c76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012c78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	3314      	adds	r3, #20
 8012c86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8012c8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012c8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012c90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012c92:	e841 2300 	strex	r3, r2, [r1]
 8012c96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8012c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d1e3      	bne.n	8012c66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	2220      	movs	r2, #32
 8012ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	2200      	movs	r2, #0
 8012caa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	330c      	adds	r3, #12
 8012cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cb6:	e853 3f00 	ldrex	r3, [r3]
 8012cba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8012cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012cbe:	f023 0310 	bic.w	r3, r3, #16
 8012cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	330c      	adds	r3, #12
 8012ccc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012cd0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8012cd2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012cd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012cd8:	e841 2300 	strex	r3, r2, [r1]
 8012cdc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012cde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d1e3      	bne.n	8012cac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f7fd fac5 	bl	8010278 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	2202      	movs	r2, #2
 8012cf2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8012cfc:	b29b      	uxth	r3, r3
 8012cfe:	1ad3      	subs	r3, r2, r3
 8012d00:	b29b      	uxth	r3, r3
 8012d02:	4619      	mov	r1, r3
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f000 f8cf 	bl	8012ea8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8012d0a:	e0b3      	b.n	8012e74 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012d10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012d14:	429a      	cmp	r2, r3
 8012d16:	f040 80ad 	bne.w	8012e74 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d1e:	69db      	ldr	r3, [r3, #28]
 8012d20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012d24:	f040 80a6 	bne.w	8012e74 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2202      	movs	r2, #2
 8012d2c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012d32:	4619      	mov	r1, r3
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f000 f8b7 	bl	8012ea8 <HAL_UARTEx_RxEventCallback>
      return;
 8012d3a:	e09b      	b.n	8012e74 <HAL_UART_IRQHandler+0x548>
 8012d3c:	080130ad 	.word	0x080130ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8012d48:	b29b      	uxth	r3, r3
 8012d4a:	1ad3      	subs	r3, r2, r3
 8012d4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8012d54:	b29b      	uxth	r3, r3
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	f000 808e 	beq.w	8012e78 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8012d5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	f000 8089 	beq.w	8012e78 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	330c      	adds	r3, #12
 8012d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d70:	e853 3f00 	ldrex	r3, [r3]
 8012d74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	330c      	adds	r3, #12
 8012d86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8012d8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8012d8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012d90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012d92:	e841 2300 	strex	r3, r2, [r1]
 8012d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d1e3      	bne.n	8012d66 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	3314      	adds	r3, #20
 8012da4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012da8:	e853 3f00 	ldrex	r3, [r3]
 8012dac:	623b      	str	r3, [r7, #32]
   return(result);
 8012dae:	6a3b      	ldr	r3, [r7, #32]
 8012db0:	f023 0301 	bic.w	r3, r3, #1
 8012db4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	3314      	adds	r3, #20
 8012dbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012dc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8012dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012dc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012dca:	e841 2300 	strex	r3, r2, [r1]
 8012dce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d1e3      	bne.n	8012d9e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	2220      	movs	r2, #32
 8012dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	2200      	movs	r2, #0
 8012de2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	330c      	adds	r3, #12
 8012dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dec:	693b      	ldr	r3, [r7, #16]
 8012dee:	e853 3f00 	ldrex	r3, [r3]
 8012df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	f023 0310 	bic.w	r3, r3, #16
 8012dfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	330c      	adds	r3, #12
 8012e04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8012e08:	61fa      	str	r2, [r7, #28]
 8012e0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e0c:	69b9      	ldr	r1, [r7, #24]
 8012e0e:	69fa      	ldr	r2, [r7, #28]
 8012e10:	e841 2300 	strex	r3, r2, [r1]
 8012e14:	617b      	str	r3, [r7, #20]
   return(result);
 8012e16:	697b      	ldr	r3, [r7, #20]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d1e3      	bne.n	8012de4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2202      	movs	r2, #2
 8012e20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012e22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8012e26:	4619      	mov	r1, r3
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f000 f83d 	bl	8012ea8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8012e2e:	e023      	b.n	8012e78 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8012e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d009      	beq.n	8012e50 <HAL_UART_IRQHandler+0x524>
 8012e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d003      	beq.n	8012e50 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f000 f940 	bl	80130ce <UART_Transmit_IT>
    return;
 8012e4e:	e014      	b.n	8012e7a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8012e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d00e      	beq.n	8012e7a <HAL_UART_IRQHandler+0x54e>
 8012e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d008      	beq.n	8012e7a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8012e68:	6878      	ldr	r0, [r7, #4]
 8012e6a:	f000 f980 	bl	801316e <UART_EndTransmit_IT>
    return;
 8012e6e:	e004      	b.n	8012e7a <HAL_UART_IRQHandler+0x54e>
    return;
 8012e70:	bf00      	nop
 8012e72:	e002      	b.n	8012e7a <HAL_UART_IRQHandler+0x54e>
      return;
 8012e74:	bf00      	nop
 8012e76:	e000      	b.n	8012e7a <HAL_UART_IRQHandler+0x54e>
      return;
 8012e78:	bf00      	nop
  }
}
 8012e7a:	37e8      	adds	r7, #232	@ 0xe8
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	bd80      	pop	{r7, pc}

08012e80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012e80:	b480      	push	{r7}
 8012e82:	b083      	sub	sp, #12
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8012e88:	bf00      	nop
 8012e8a:	370c      	adds	r7, #12
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e92:	4770      	bx	lr

08012e94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012e94:	b480      	push	{r7}
 8012e96:	b083      	sub	sp, #12
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8012e9c:	bf00      	nop
 8012e9e:	370c      	adds	r7, #12
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea6:	4770      	bx	lr

08012ea8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012ea8:	b480      	push	{r7}
 8012eaa:	b083      	sub	sp, #12
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012eb4:	bf00      	nop
 8012eb6:	370c      	adds	r7, #12
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebe:	4770      	bx	lr

08012ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b086      	sub	sp, #24
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	60f8      	str	r0, [r7, #12]
 8012ec8:	60b9      	str	r1, [r7, #8]
 8012eca:	603b      	str	r3, [r7, #0]
 8012ecc:	4613      	mov	r3, r2
 8012ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012ed0:	e03b      	b.n	8012f4a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012ed2:	6a3b      	ldr	r3, [r7, #32]
 8012ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ed8:	d037      	beq.n	8012f4a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012eda:	f7fd f8bb 	bl	8010054 <HAL_GetTick>
 8012ede:	4602      	mov	r2, r0
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	1ad3      	subs	r3, r2, r3
 8012ee4:	6a3a      	ldr	r2, [r7, #32]
 8012ee6:	429a      	cmp	r2, r3
 8012ee8:	d302      	bcc.n	8012ef0 <UART_WaitOnFlagUntilTimeout+0x30>
 8012eea:	6a3b      	ldr	r3, [r7, #32]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d101      	bne.n	8012ef4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012ef0:	2303      	movs	r3, #3
 8012ef2:	e03a      	b.n	8012f6a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	68db      	ldr	r3, [r3, #12]
 8012efa:	f003 0304 	and.w	r3, r3, #4
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d023      	beq.n	8012f4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	2b80      	cmp	r3, #128	@ 0x80
 8012f06:	d020      	beq.n	8012f4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8012f08:	68bb      	ldr	r3, [r7, #8]
 8012f0a:	2b40      	cmp	r3, #64	@ 0x40
 8012f0c:	d01d      	beq.n	8012f4a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	f003 0308 	and.w	r3, r3, #8
 8012f18:	2b08      	cmp	r3, #8
 8012f1a:	d116      	bne.n	8012f4a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	617b      	str	r3, [r7, #20]
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	617b      	str	r3, [r7, #20]
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	685b      	ldr	r3, [r3, #4]
 8012f2e:	617b      	str	r3, [r7, #20]
 8012f30:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012f32:	68f8      	ldr	r0, [r7, #12]
 8012f34:	f000 f857 	bl	8012fe6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	2208      	movs	r2, #8
 8012f3c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	2200      	movs	r2, #0
 8012f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8012f46:	2301      	movs	r3, #1
 8012f48:	e00f      	b.n	8012f6a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	681a      	ldr	r2, [r3, #0]
 8012f50:	68bb      	ldr	r3, [r7, #8]
 8012f52:	4013      	ands	r3, r2
 8012f54:	68ba      	ldr	r2, [r7, #8]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	bf0c      	ite	eq
 8012f5a:	2301      	moveq	r3, #1
 8012f5c:	2300      	movne	r3, #0
 8012f5e:	b2db      	uxtb	r3, r3
 8012f60:	461a      	mov	r2, r3
 8012f62:	79fb      	ldrb	r3, [r7, #7]
 8012f64:	429a      	cmp	r2, r3
 8012f66:	d0b4      	beq.n	8012ed2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012f68:	2300      	movs	r3, #0
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3718      	adds	r7, #24
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}

08012f72 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012f72:	b480      	push	{r7}
 8012f74:	b085      	sub	sp, #20
 8012f76:	af00      	add	r7, sp, #0
 8012f78:	60f8      	str	r0, [r7, #12]
 8012f7a:	60b9      	str	r1, [r7, #8]
 8012f7c:	4613      	mov	r3, r2
 8012f7e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	68ba      	ldr	r2, [r7, #8]
 8012f84:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	88fa      	ldrh	r2, [r7, #6]
 8012f8a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	88fa      	ldrh	r2, [r7, #6]
 8012f90:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	2200      	movs	r2, #0
 8012f96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	2222      	movs	r2, #34	@ 0x22
 8012f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	691b      	ldr	r3, [r3, #16]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d007      	beq.n	8012fb8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	68da      	ldr	r2, [r3, #12]
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012fb6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	695a      	ldr	r2, [r3, #20]
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	f042 0201 	orr.w	r2, r2, #1
 8012fc6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	68da      	ldr	r2, [r3, #12]
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	f042 0220 	orr.w	r2, r2, #32
 8012fd6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012fd8:	2300      	movs	r3, #0
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3714      	adds	r7, #20
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe4:	4770      	bx	lr

08012fe6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012fe6:	b480      	push	{r7}
 8012fe8:	b095      	sub	sp, #84	@ 0x54
 8012fea:	af00      	add	r7, sp, #0
 8012fec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	330c      	adds	r3, #12
 8012ff4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ff8:	e853 3f00 	ldrex	r3, [r3]
 8012ffc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013000:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013004:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	330c      	adds	r3, #12
 801300c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801300e:	643a      	str	r2, [r7, #64]	@ 0x40
 8013010:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013012:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013014:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013016:	e841 2300 	strex	r3, r2, [r1]
 801301a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801301c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801301e:	2b00      	cmp	r3, #0
 8013020:	d1e5      	bne.n	8012fee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	3314      	adds	r3, #20
 8013028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801302a:	6a3b      	ldr	r3, [r7, #32]
 801302c:	e853 3f00 	ldrex	r3, [r3]
 8013030:	61fb      	str	r3, [r7, #28]
   return(result);
 8013032:	69fb      	ldr	r3, [r7, #28]
 8013034:	f023 0301 	bic.w	r3, r3, #1
 8013038:	64bb      	str	r3, [r7, #72]	@ 0x48
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	3314      	adds	r3, #20
 8013040:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013042:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013044:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013046:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013048:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801304a:	e841 2300 	strex	r3, r2, [r1]
 801304e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013052:	2b00      	cmp	r3, #0
 8013054:	d1e5      	bne.n	8013022 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801305a:	2b01      	cmp	r3, #1
 801305c:	d119      	bne.n	8013092 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	330c      	adds	r3, #12
 8013064:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	e853 3f00 	ldrex	r3, [r3]
 801306c:	60bb      	str	r3, [r7, #8]
   return(result);
 801306e:	68bb      	ldr	r3, [r7, #8]
 8013070:	f023 0310 	bic.w	r3, r3, #16
 8013074:	647b      	str	r3, [r7, #68]	@ 0x44
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	330c      	adds	r3, #12
 801307c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801307e:	61ba      	str	r2, [r7, #24]
 8013080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013082:	6979      	ldr	r1, [r7, #20]
 8013084:	69ba      	ldr	r2, [r7, #24]
 8013086:	e841 2300 	strex	r3, r2, [r1]
 801308a:	613b      	str	r3, [r7, #16]
   return(result);
 801308c:	693b      	ldr	r3, [r7, #16]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d1e5      	bne.n	801305e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	2220      	movs	r2, #32
 8013096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	2200      	movs	r2, #0
 801309e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80130a0:	bf00      	nop
 80130a2:	3754      	adds	r7, #84	@ 0x54
 80130a4:	46bd      	mov	sp, r7
 80130a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130aa:	4770      	bx	lr

080130ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b084      	sub	sp, #16
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	2200      	movs	r2, #0
 80130be:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80130c0:	68f8      	ldr	r0, [r7, #12]
 80130c2:	f7ff fee7 	bl	8012e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80130c6:	bf00      	nop
 80130c8:	3710      	adds	r7, #16
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}

080130ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80130ce:	b480      	push	{r7}
 80130d0:	b085      	sub	sp, #20
 80130d2:	af00      	add	r7, sp, #0
 80130d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80130dc:	b2db      	uxtb	r3, r3
 80130de:	2b21      	cmp	r3, #33	@ 0x21
 80130e0:	d13e      	bne.n	8013160 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	689b      	ldr	r3, [r3, #8]
 80130e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80130ea:	d114      	bne.n	8013116 <UART_Transmit_IT+0x48>
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	691b      	ldr	r3, [r3, #16]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d110      	bne.n	8013116 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6a1b      	ldr	r3, [r3, #32]
 80130f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	881b      	ldrh	r3, [r3, #0]
 80130fe:	461a      	mov	r2, r3
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013108:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	6a1b      	ldr	r3, [r3, #32]
 801310e:	1c9a      	adds	r2, r3, #2
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	621a      	str	r2, [r3, #32]
 8013114:	e008      	b.n	8013128 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	6a1b      	ldr	r3, [r3, #32]
 801311a:	1c59      	adds	r1, r3, #1
 801311c:	687a      	ldr	r2, [r7, #4]
 801311e:	6211      	str	r1, [r2, #32]
 8013120:	781a      	ldrb	r2, [r3, #0]
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 801312c:	b29b      	uxth	r3, r3
 801312e:	3b01      	subs	r3, #1
 8013130:	b29b      	uxth	r3, r3
 8013132:	687a      	ldr	r2, [r7, #4]
 8013134:	4619      	mov	r1, r3
 8013136:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8013138:	2b00      	cmp	r3, #0
 801313a:	d10f      	bne.n	801315c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	68da      	ldr	r2, [r3, #12]
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801314a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	68da      	ldr	r2, [r3, #12]
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801315a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801315c:	2300      	movs	r3, #0
 801315e:	e000      	b.n	8013162 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8013160:	2302      	movs	r3, #2
  }
}
 8013162:	4618      	mov	r0, r3
 8013164:	3714      	adds	r7, #20
 8013166:	46bd      	mov	sp, r7
 8013168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316c:	4770      	bx	lr

0801316e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801316e:	b580      	push	{r7, lr}
 8013170:	b082      	sub	sp, #8
 8013172:	af00      	add	r7, sp, #0
 8013174:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	68da      	ldr	r2, [r3, #12]
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8013184:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2220      	movs	r2, #32
 801318a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801318e:	6878      	ldr	r0, [r7, #4]
 8013190:	f7ff fe76 	bl	8012e80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8013194:	2300      	movs	r3, #0
}
 8013196:	4618      	mov	r0, r3
 8013198:	3708      	adds	r7, #8
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}

0801319e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801319e:	b580      	push	{r7, lr}
 80131a0:	b08c      	sub	sp, #48	@ 0x30
 80131a2:	af00      	add	r7, sp, #0
 80131a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80131a6:	2300      	movs	r3, #0
 80131a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80131aa:	2300      	movs	r3, #0
 80131ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80131b4:	b2db      	uxtb	r3, r3
 80131b6:	2b22      	cmp	r3, #34	@ 0x22
 80131b8:	f040 80aa 	bne.w	8013310 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	689b      	ldr	r3, [r3, #8]
 80131c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80131c4:	d115      	bne.n	80131f2 <UART_Receive_IT+0x54>
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	691b      	ldr	r3, [r3, #16]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d111      	bne.n	80131f2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	b29b      	uxth	r3, r3
 80131dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131e0:	b29a      	uxth	r2, r3
 80131e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131ea:	1c9a      	adds	r2, r3, #2
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80131f0:	e024      	b.n	801323c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	689b      	ldr	r3, [r3, #8]
 80131fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013200:	d007      	beq.n	8013212 <UART_Receive_IT+0x74>
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	689b      	ldr	r3, [r3, #8]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d10a      	bne.n	8013220 <UART_Receive_IT+0x82>
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	691b      	ldr	r3, [r3, #16]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d106      	bne.n	8013220 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	685b      	ldr	r3, [r3, #4]
 8013218:	b2da      	uxtb	r2, r3
 801321a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801321c:	701a      	strb	r2, [r3, #0]
 801321e:	e008      	b.n	8013232 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	685b      	ldr	r3, [r3, #4]
 8013226:	b2db      	uxtb	r3, r3
 8013228:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801322c:	b2da      	uxtb	r2, r3
 801322e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013230:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013236:	1c5a      	adds	r2, r3, #1
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8013240:	b29b      	uxth	r3, r3
 8013242:	3b01      	subs	r3, #1
 8013244:	b29b      	uxth	r3, r3
 8013246:	687a      	ldr	r2, [r7, #4]
 8013248:	4619      	mov	r1, r3
 801324a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 801324c:	2b00      	cmp	r3, #0
 801324e:	d15d      	bne.n	801330c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	68da      	ldr	r2, [r3, #12]
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	f022 0220 	bic.w	r2, r2, #32
 801325e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	68da      	ldr	r2, [r3, #12]
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801326e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	695a      	ldr	r2, [r3, #20]
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	f022 0201 	bic.w	r2, r2, #1
 801327e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	2220      	movs	r2, #32
 8013284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	2200      	movs	r2, #0
 801328c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013292:	2b01      	cmp	r3, #1
 8013294:	d135      	bne.n	8013302 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	2200      	movs	r2, #0
 801329a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	330c      	adds	r3, #12
 80132a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132a4:	697b      	ldr	r3, [r7, #20]
 80132a6:	e853 3f00 	ldrex	r3, [r3]
 80132aa:	613b      	str	r3, [r7, #16]
   return(result);
 80132ac:	693b      	ldr	r3, [r7, #16]
 80132ae:	f023 0310 	bic.w	r3, r3, #16
 80132b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	330c      	adds	r3, #12
 80132ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80132bc:	623a      	str	r2, [r7, #32]
 80132be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132c0:	69f9      	ldr	r1, [r7, #28]
 80132c2:	6a3a      	ldr	r2, [r7, #32]
 80132c4:	e841 2300 	strex	r3, r2, [r1]
 80132c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80132ca:	69bb      	ldr	r3, [r7, #24]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d1e5      	bne.n	801329c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	f003 0310 	and.w	r3, r3, #16
 80132da:	2b10      	cmp	r3, #16
 80132dc:	d10a      	bne.n	80132f4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80132de:	2300      	movs	r3, #0
 80132e0:	60fb      	str	r3, [r7, #12]
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	60fb      	str	r3, [r7, #12]
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	685b      	ldr	r3, [r3, #4]
 80132f0:	60fb      	str	r3, [r7, #12]
 80132f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80132f8:	4619      	mov	r1, r3
 80132fa:	6878      	ldr	r0, [r7, #4]
 80132fc:	f7ff fdd4 	bl	8012ea8 <HAL_UARTEx_RxEventCallback>
 8013300:	e002      	b.n	8013308 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8013302:	6878      	ldr	r0, [r7, #4]
 8013304:	f7fc fc9a 	bl	800fc3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8013308:	2300      	movs	r3, #0
 801330a:	e002      	b.n	8013312 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 801330c:	2300      	movs	r3, #0
 801330e:	e000      	b.n	8013312 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8013310:	2302      	movs	r3, #2
  }
}
 8013312:	4618      	mov	r0, r3
 8013314:	3730      	adds	r7, #48	@ 0x30
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
	...

0801331c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801331c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013320:	b0c0      	sub	sp, #256	@ 0x100
 8013322:	af00      	add	r7, sp, #0
 8013324:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	691b      	ldr	r3, [r3, #16]
 8013330:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8013334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013338:	68d9      	ldr	r1, [r3, #12]
 801333a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801333e:	681a      	ldr	r2, [r3, #0]
 8013340:	ea40 0301 	orr.w	r3, r0, r1
 8013344:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8013346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801334a:	689a      	ldr	r2, [r3, #8]
 801334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013350:	691b      	ldr	r3, [r3, #16]
 8013352:	431a      	orrs	r2, r3
 8013354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013358:	695b      	ldr	r3, [r3, #20]
 801335a:	431a      	orrs	r2, r3
 801335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013360:	69db      	ldr	r3, [r3, #28]
 8013362:	4313      	orrs	r3, r2
 8013364:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8013368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	68db      	ldr	r3, [r3, #12]
 8013370:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8013374:	f021 010c 	bic.w	r1, r1, #12
 8013378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801337c:	681a      	ldr	r2, [r3, #0]
 801337e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8013382:	430b      	orrs	r3, r1
 8013384:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8013386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	695b      	ldr	r3, [r3, #20]
 801338e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8013392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013396:	6999      	ldr	r1, [r3, #24]
 8013398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801339c:	681a      	ldr	r2, [r3, #0]
 801339e:	ea40 0301 	orr.w	r3, r0, r1
 80133a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80133a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80133a8:	681a      	ldr	r2, [r3, #0]
 80133aa:	4b8f      	ldr	r3, [pc, #572]	@ (80135e8 <UART_SetConfig+0x2cc>)
 80133ac:	429a      	cmp	r2, r3
 80133ae:	d005      	beq.n	80133bc <UART_SetConfig+0xa0>
 80133b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80133b4:	681a      	ldr	r2, [r3, #0]
 80133b6:	4b8d      	ldr	r3, [pc, #564]	@ (80135ec <UART_SetConfig+0x2d0>)
 80133b8:	429a      	cmp	r2, r3
 80133ba:	d104      	bne.n	80133c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80133bc:	f7fd fb3c 	bl	8010a38 <HAL_RCC_GetPCLK2Freq>
 80133c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80133c4:	e003      	b.n	80133ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80133c6:	f7fd fb23 	bl	8010a10 <HAL_RCC_GetPCLK1Freq>
 80133ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80133ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80133d2:	69db      	ldr	r3, [r3, #28]
 80133d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80133d8:	f040 810c 	bne.w	80135f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80133dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80133e0:	2200      	movs	r2, #0
 80133e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80133e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80133ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80133ee:	4622      	mov	r2, r4
 80133f0:	462b      	mov	r3, r5
 80133f2:	1891      	adds	r1, r2, r2
 80133f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80133f6:	415b      	adcs	r3, r3
 80133f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80133fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80133fe:	4621      	mov	r1, r4
 8013400:	eb12 0801 	adds.w	r8, r2, r1
 8013404:	4629      	mov	r1, r5
 8013406:	eb43 0901 	adc.w	r9, r3, r1
 801340a:	f04f 0200 	mov.w	r2, #0
 801340e:	f04f 0300 	mov.w	r3, #0
 8013412:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8013416:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801341a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801341e:	4690      	mov	r8, r2
 8013420:	4699      	mov	r9, r3
 8013422:	4623      	mov	r3, r4
 8013424:	eb18 0303 	adds.w	r3, r8, r3
 8013428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801342c:	462b      	mov	r3, r5
 801342e:	eb49 0303 	adc.w	r3, r9, r3
 8013432:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8013436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801343a:	685b      	ldr	r3, [r3, #4]
 801343c:	2200      	movs	r2, #0
 801343e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8013442:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8013446:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801344a:	460b      	mov	r3, r1
 801344c:	18db      	adds	r3, r3, r3
 801344e:	653b      	str	r3, [r7, #80]	@ 0x50
 8013450:	4613      	mov	r3, r2
 8013452:	eb42 0303 	adc.w	r3, r2, r3
 8013456:	657b      	str	r3, [r7, #84]	@ 0x54
 8013458:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 801345c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8013460:	f7f5 fbf2 	bl	8008c48 <__aeabi_uldivmod>
 8013464:	4602      	mov	r2, r0
 8013466:	460b      	mov	r3, r1
 8013468:	4b61      	ldr	r3, [pc, #388]	@ (80135f0 <UART_SetConfig+0x2d4>)
 801346a:	fba3 2302 	umull	r2, r3, r3, r2
 801346e:	095b      	lsrs	r3, r3, #5
 8013470:	011c      	lsls	r4, r3, #4
 8013472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8013476:	2200      	movs	r2, #0
 8013478:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801347c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8013480:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8013484:	4642      	mov	r2, r8
 8013486:	464b      	mov	r3, r9
 8013488:	1891      	adds	r1, r2, r2
 801348a:	64b9      	str	r1, [r7, #72]	@ 0x48
 801348c:	415b      	adcs	r3, r3
 801348e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013490:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8013494:	4641      	mov	r1, r8
 8013496:	eb12 0a01 	adds.w	sl, r2, r1
 801349a:	4649      	mov	r1, r9
 801349c:	eb43 0b01 	adc.w	fp, r3, r1
 80134a0:	f04f 0200 	mov.w	r2, #0
 80134a4:	f04f 0300 	mov.w	r3, #0
 80134a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80134ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80134b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80134b4:	4692      	mov	sl, r2
 80134b6:	469b      	mov	fp, r3
 80134b8:	4643      	mov	r3, r8
 80134ba:	eb1a 0303 	adds.w	r3, sl, r3
 80134be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80134c2:	464b      	mov	r3, r9
 80134c4:	eb4b 0303 	adc.w	r3, fp, r3
 80134c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80134cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80134d0:	685b      	ldr	r3, [r3, #4]
 80134d2:	2200      	movs	r2, #0
 80134d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80134d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80134dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80134e0:	460b      	mov	r3, r1
 80134e2:	18db      	adds	r3, r3, r3
 80134e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80134e6:	4613      	mov	r3, r2
 80134e8:	eb42 0303 	adc.w	r3, r2, r3
 80134ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80134ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80134f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80134f6:	f7f5 fba7 	bl	8008c48 <__aeabi_uldivmod>
 80134fa:	4602      	mov	r2, r0
 80134fc:	460b      	mov	r3, r1
 80134fe:	4611      	mov	r1, r2
 8013500:	4b3b      	ldr	r3, [pc, #236]	@ (80135f0 <UART_SetConfig+0x2d4>)
 8013502:	fba3 2301 	umull	r2, r3, r3, r1
 8013506:	095b      	lsrs	r3, r3, #5
 8013508:	2264      	movs	r2, #100	@ 0x64
 801350a:	fb02 f303 	mul.w	r3, r2, r3
 801350e:	1acb      	subs	r3, r1, r3
 8013510:	00db      	lsls	r3, r3, #3
 8013512:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8013516:	4b36      	ldr	r3, [pc, #216]	@ (80135f0 <UART_SetConfig+0x2d4>)
 8013518:	fba3 2302 	umull	r2, r3, r3, r2
 801351c:	095b      	lsrs	r3, r3, #5
 801351e:	005b      	lsls	r3, r3, #1
 8013520:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8013524:	441c      	add	r4, r3
 8013526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801352a:	2200      	movs	r2, #0
 801352c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8013530:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8013534:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8013538:	4642      	mov	r2, r8
 801353a:	464b      	mov	r3, r9
 801353c:	1891      	adds	r1, r2, r2
 801353e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8013540:	415b      	adcs	r3, r3
 8013542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013544:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8013548:	4641      	mov	r1, r8
 801354a:	1851      	adds	r1, r2, r1
 801354c:	6339      	str	r1, [r7, #48]	@ 0x30
 801354e:	4649      	mov	r1, r9
 8013550:	414b      	adcs	r3, r1
 8013552:	637b      	str	r3, [r7, #52]	@ 0x34
 8013554:	f04f 0200 	mov.w	r2, #0
 8013558:	f04f 0300 	mov.w	r3, #0
 801355c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8013560:	4659      	mov	r1, fp
 8013562:	00cb      	lsls	r3, r1, #3
 8013564:	4651      	mov	r1, sl
 8013566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801356a:	4651      	mov	r1, sl
 801356c:	00ca      	lsls	r2, r1, #3
 801356e:	4610      	mov	r0, r2
 8013570:	4619      	mov	r1, r3
 8013572:	4603      	mov	r3, r0
 8013574:	4642      	mov	r2, r8
 8013576:	189b      	adds	r3, r3, r2
 8013578:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801357c:	464b      	mov	r3, r9
 801357e:	460a      	mov	r2, r1
 8013580:	eb42 0303 	adc.w	r3, r2, r3
 8013584:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8013588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801358c:	685b      	ldr	r3, [r3, #4]
 801358e:	2200      	movs	r2, #0
 8013590:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8013594:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8013598:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801359c:	460b      	mov	r3, r1
 801359e:	18db      	adds	r3, r3, r3
 80135a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80135a2:	4613      	mov	r3, r2
 80135a4:	eb42 0303 	adc.w	r3, r2, r3
 80135a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80135aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80135ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80135b2:	f7f5 fb49 	bl	8008c48 <__aeabi_uldivmod>
 80135b6:	4602      	mov	r2, r0
 80135b8:	460b      	mov	r3, r1
 80135ba:	4b0d      	ldr	r3, [pc, #52]	@ (80135f0 <UART_SetConfig+0x2d4>)
 80135bc:	fba3 1302 	umull	r1, r3, r3, r2
 80135c0:	095b      	lsrs	r3, r3, #5
 80135c2:	2164      	movs	r1, #100	@ 0x64
 80135c4:	fb01 f303 	mul.w	r3, r1, r3
 80135c8:	1ad3      	subs	r3, r2, r3
 80135ca:	00db      	lsls	r3, r3, #3
 80135cc:	3332      	adds	r3, #50	@ 0x32
 80135ce:	4a08      	ldr	r2, [pc, #32]	@ (80135f0 <UART_SetConfig+0x2d4>)
 80135d0:	fba2 2303 	umull	r2, r3, r2, r3
 80135d4:	095b      	lsrs	r3, r3, #5
 80135d6:	f003 0207 	and.w	r2, r3, #7
 80135da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	4422      	add	r2, r4
 80135e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80135e4:	e106      	b.n	80137f4 <UART_SetConfig+0x4d8>
 80135e6:	bf00      	nop
 80135e8:	40011000 	.word	0x40011000
 80135ec:	40011400 	.word	0x40011400
 80135f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80135f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80135f8:	2200      	movs	r2, #0
 80135fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80135fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8013602:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8013606:	4642      	mov	r2, r8
 8013608:	464b      	mov	r3, r9
 801360a:	1891      	adds	r1, r2, r2
 801360c:	6239      	str	r1, [r7, #32]
 801360e:	415b      	adcs	r3, r3
 8013610:	627b      	str	r3, [r7, #36]	@ 0x24
 8013612:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8013616:	4641      	mov	r1, r8
 8013618:	1854      	adds	r4, r2, r1
 801361a:	4649      	mov	r1, r9
 801361c:	eb43 0501 	adc.w	r5, r3, r1
 8013620:	f04f 0200 	mov.w	r2, #0
 8013624:	f04f 0300 	mov.w	r3, #0
 8013628:	00eb      	lsls	r3, r5, #3
 801362a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801362e:	00e2      	lsls	r2, r4, #3
 8013630:	4614      	mov	r4, r2
 8013632:	461d      	mov	r5, r3
 8013634:	4643      	mov	r3, r8
 8013636:	18e3      	adds	r3, r4, r3
 8013638:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801363c:	464b      	mov	r3, r9
 801363e:	eb45 0303 	adc.w	r3, r5, r3
 8013642:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8013646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801364a:	685b      	ldr	r3, [r3, #4]
 801364c:	2200      	movs	r2, #0
 801364e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8013652:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8013656:	f04f 0200 	mov.w	r2, #0
 801365a:	f04f 0300 	mov.w	r3, #0
 801365e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8013662:	4629      	mov	r1, r5
 8013664:	008b      	lsls	r3, r1, #2
 8013666:	4621      	mov	r1, r4
 8013668:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801366c:	4621      	mov	r1, r4
 801366e:	008a      	lsls	r2, r1, #2
 8013670:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8013674:	f7f5 fae8 	bl	8008c48 <__aeabi_uldivmod>
 8013678:	4602      	mov	r2, r0
 801367a:	460b      	mov	r3, r1
 801367c:	4b60      	ldr	r3, [pc, #384]	@ (8013800 <UART_SetConfig+0x4e4>)
 801367e:	fba3 2302 	umull	r2, r3, r3, r2
 8013682:	095b      	lsrs	r3, r3, #5
 8013684:	011c      	lsls	r4, r3, #4
 8013686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801368a:	2200      	movs	r2, #0
 801368c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013690:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8013694:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8013698:	4642      	mov	r2, r8
 801369a:	464b      	mov	r3, r9
 801369c:	1891      	adds	r1, r2, r2
 801369e:	61b9      	str	r1, [r7, #24]
 80136a0:	415b      	adcs	r3, r3
 80136a2:	61fb      	str	r3, [r7, #28]
 80136a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80136a8:	4641      	mov	r1, r8
 80136aa:	1851      	adds	r1, r2, r1
 80136ac:	6139      	str	r1, [r7, #16]
 80136ae:	4649      	mov	r1, r9
 80136b0:	414b      	adcs	r3, r1
 80136b2:	617b      	str	r3, [r7, #20]
 80136b4:	f04f 0200 	mov.w	r2, #0
 80136b8:	f04f 0300 	mov.w	r3, #0
 80136bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80136c0:	4659      	mov	r1, fp
 80136c2:	00cb      	lsls	r3, r1, #3
 80136c4:	4651      	mov	r1, sl
 80136c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80136ca:	4651      	mov	r1, sl
 80136cc:	00ca      	lsls	r2, r1, #3
 80136ce:	4610      	mov	r0, r2
 80136d0:	4619      	mov	r1, r3
 80136d2:	4603      	mov	r3, r0
 80136d4:	4642      	mov	r2, r8
 80136d6:	189b      	adds	r3, r3, r2
 80136d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80136dc:	464b      	mov	r3, r9
 80136de:	460a      	mov	r2, r1
 80136e0:	eb42 0303 	adc.w	r3, r2, r3
 80136e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80136e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80136ec:	685b      	ldr	r3, [r3, #4]
 80136ee:	2200      	movs	r2, #0
 80136f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80136f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80136f4:	f04f 0200 	mov.w	r2, #0
 80136f8:	f04f 0300 	mov.w	r3, #0
 80136fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8013700:	4649      	mov	r1, r9
 8013702:	008b      	lsls	r3, r1, #2
 8013704:	4641      	mov	r1, r8
 8013706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801370a:	4641      	mov	r1, r8
 801370c:	008a      	lsls	r2, r1, #2
 801370e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8013712:	f7f5 fa99 	bl	8008c48 <__aeabi_uldivmod>
 8013716:	4602      	mov	r2, r0
 8013718:	460b      	mov	r3, r1
 801371a:	4611      	mov	r1, r2
 801371c:	4b38      	ldr	r3, [pc, #224]	@ (8013800 <UART_SetConfig+0x4e4>)
 801371e:	fba3 2301 	umull	r2, r3, r3, r1
 8013722:	095b      	lsrs	r3, r3, #5
 8013724:	2264      	movs	r2, #100	@ 0x64
 8013726:	fb02 f303 	mul.w	r3, r2, r3
 801372a:	1acb      	subs	r3, r1, r3
 801372c:	011b      	lsls	r3, r3, #4
 801372e:	3332      	adds	r3, #50	@ 0x32
 8013730:	4a33      	ldr	r2, [pc, #204]	@ (8013800 <UART_SetConfig+0x4e4>)
 8013732:	fba2 2303 	umull	r2, r3, r2, r3
 8013736:	095b      	lsrs	r3, r3, #5
 8013738:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801373c:	441c      	add	r4, r3
 801373e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8013742:	2200      	movs	r2, #0
 8013744:	673b      	str	r3, [r7, #112]	@ 0x70
 8013746:	677a      	str	r2, [r7, #116]	@ 0x74
 8013748:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 801374c:	4642      	mov	r2, r8
 801374e:	464b      	mov	r3, r9
 8013750:	1891      	adds	r1, r2, r2
 8013752:	60b9      	str	r1, [r7, #8]
 8013754:	415b      	adcs	r3, r3
 8013756:	60fb      	str	r3, [r7, #12]
 8013758:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801375c:	4641      	mov	r1, r8
 801375e:	1851      	adds	r1, r2, r1
 8013760:	6039      	str	r1, [r7, #0]
 8013762:	4649      	mov	r1, r9
 8013764:	414b      	adcs	r3, r1
 8013766:	607b      	str	r3, [r7, #4]
 8013768:	f04f 0200 	mov.w	r2, #0
 801376c:	f04f 0300 	mov.w	r3, #0
 8013770:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8013774:	4659      	mov	r1, fp
 8013776:	00cb      	lsls	r3, r1, #3
 8013778:	4651      	mov	r1, sl
 801377a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801377e:	4651      	mov	r1, sl
 8013780:	00ca      	lsls	r2, r1, #3
 8013782:	4610      	mov	r0, r2
 8013784:	4619      	mov	r1, r3
 8013786:	4603      	mov	r3, r0
 8013788:	4642      	mov	r2, r8
 801378a:	189b      	adds	r3, r3, r2
 801378c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801378e:	464b      	mov	r3, r9
 8013790:	460a      	mov	r2, r1
 8013792:	eb42 0303 	adc.w	r3, r2, r3
 8013796:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801379c:	685b      	ldr	r3, [r3, #4]
 801379e:	2200      	movs	r2, #0
 80137a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80137a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80137a4:	f04f 0200 	mov.w	r2, #0
 80137a8:	f04f 0300 	mov.w	r3, #0
 80137ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80137b0:	4649      	mov	r1, r9
 80137b2:	008b      	lsls	r3, r1, #2
 80137b4:	4641      	mov	r1, r8
 80137b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80137ba:	4641      	mov	r1, r8
 80137bc:	008a      	lsls	r2, r1, #2
 80137be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80137c2:	f7f5 fa41 	bl	8008c48 <__aeabi_uldivmod>
 80137c6:	4602      	mov	r2, r0
 80137c8:	460b      	mov	r3, r1
 80137ca:	4b0d      	ldr	r3, [pc, #52]	@ (8013800 <UART_SetConfig+0x4e4>)
 80137cc:	fba3 1302 	umull	r1, r3, r3, r2
 80137d0:	095b      	lsrs	r3, r3, #5
 80137d2:	2164      	movs	r1, #100	@ 0x64
 80137d4:	fb01 f303 	mul.w	r3, r1, r3
 80137d8:	1ad3      	subs	r3, r2, r3
 80137da:	011b      	lsls	r3, r3, #4
 80137dc:	3332      	adds	r3, #50	@ 0x32
 80137de:	4a08      	ldr	r2, [pc, #32]	@ (8013800 <UART_SetConfig+0x4e4>)
 80137e0:	fba2 2303 	umull	r2, r3, r2, r3
 80137e4:	095b      	lsrs	r3, r3, #5
 80137e6:	f003 020f 	and.w	r2, r3, #15
 80137ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	4422      	add	r2, r4
 80137f2:	609a      	str	r2, [r3, #8]
}
 80137f4:	bf00      	nop
 80137f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80137fa:	46bd      	mov	sp, r7
 80137fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013800:	51eb851f 	.word	0x51eb851f

08013804 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013804:	b480      	push	{r7}
 8013806:	b083      	sub	sp, #12
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	f103 0208 	add.w	r2, r3, #8
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	f04f 32ff 	mov.w	r2, #4294967295
 801381c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	f103 0208 	add.w	r2, r3, #8
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	f103 0208 	add.w	r2, r3, #8
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	2200      	movs	r2, #0
 8013836:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013838:	bf00      	nop
 801383a:	370c      	adds	r7, #12
 801383c:	46bd      	mov	sp, r7
 801383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013842:	4770      	bx	lr

08013844 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013844:	b480      	push	{r7}
 8013846:	b083      	sub	sp, #12
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	2200      	movs	r2, #0
 8013850:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013852:	bf00      	nop
 8013854:	370c      	adds	r7, #12
 8013856:	46bd      	mov	sp, r7
 8013858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385c:	4770      	bx	lr

0801385e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 801385e:	b480      	push	{r7}
 8013860:	b085      	sub	sp, #20
 8013862:	af00      	add	r7, sp, #0
 8013864:	6078      	str	r0, [r7, #4]
 8013866:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	685b      	ldr	r3, [r3, #4]
 801386c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	68fa      	ldr	r2, [r7, #12]
 8013872:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	689a      	ldr	r2, [r3, #8]
 8013878:	683b      	ldr	r3, [r7, #0]
 801387a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	689b      	ldr	r3, [r3, #8]
 8013880:	683a      	ldr	r2, [r7, #0]
 8013882:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	683a      	ldr	r2, [r7, #0]
 8013888:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 801388a:	683b      	ldr	r3, [r7, #0]
 801388c:	687a      	ldr	r2, [r7, #4]
 801388e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	1c5a      	adds	r2, r3, #1
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	601a      	str	r2, [r3, #0]
}
 801389a:	bf00      	nop
 801389c:	3714      	adds	r7, #20
 801389e:	46bd      	mov	sp, r7
 80138a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a4:	4770      	bx	lr

080138a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80138a6:	b480      	push	{r7}
 80138a8:	b085      	sub	sp, #20
 80138aa:	af00      	add	r7, sp, #0
 80138ac:	6078      	str	r0, [r7, #4]
 80138ae:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80138b0:	683b      	ldr	r3, [r7, #0]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138bc:	d103      	bne.n	80138c6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	691b      	ldr	r3, [r3, #16]
 80138c2:	60fb      	str	r3, [r7, #12]
 80138c4:	e00c      	b.n	80138e0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	3308      	adds	r3, #8
 80138ca:	60fb      	str	r3, [r7, #12]
 80138cc:	e002      	b.n	80138d4 <vListInsert+0x2e>
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	685b      	ldr	r3, [r3, #4]
 80138d2:	60fb      	str	r3, [r7, #12]
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	685b      	ldr	r3, [r3, #4]
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	68ba      	ldr	r2, [r7, #8]
 80138dc:	429a      	cmp	r2, r3
 80138de:	d2f6      	bcs.n	80138ce <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	685a      	ldr	r2, [r3, #4]
 80138e4:	683b      	ldr	r3, [r7, #0]
 80138e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80138e8:	683b      	ldr	r3, [r7, #0]
 80138ea:	685b      	ldr	r3, [r3, #4]
 80138ec:	683a      	ldr	r2, [r7, #0]
 80138ee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	68fa      	ldr	r2, [r7, #12]
 80138f4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	683a      	ldr	r2, [r7, #0]
 80138fa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	687a      	ldr	r2, [r7, #4]
 8013900:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	1c5a      	adds	r2, r3, #1
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	601a      	str	r2, [r3, #0]
}
 801390c:	bf00      	nop
 801390e:	3714      	adds	r7, #20
 8013910:	46bd      	mov	sp, r7
 8013912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013916:	4770      	bx	lr

08013918 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013918:	b480      	push	{r7}
 801391a:	b085      	sub	sp, #20
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	691b      	ldr	r3, [r3, #16]
 8013924:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	685b      	ldr	r3, [r3, #4]
 801392a:	687a      	ldr	r2, [r7, #4]
 801392c:	6892      	ldr	r2, [r2, #8]
 801392e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	689b      	ldr	r3, [r3, #8]
 8013934:	687a      	ldr	r2, [r7, #4]
 8013936:	6852      	ldr	r2, [r2, #4]
 8013938:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	685b      	ldr	r3, [r3, #4]
 801393e:	687a      	ldr	r2, [r7, #4]
 8013940:	429a      	cmp	r2, r3
 8013942:	d103      	bne.n	801394c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	689a      	ldr	r2, [r3, #8]
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2200      	movs	r2, #0
 8013950:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	1e5a      	subs	r2, r3, #1
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	681b      	ldr	r3, [r3, #0]
}
 8013960:	4618      	mov	r0, r3
 8013962:	3714      	adds	r7, #20
 8013964:	46bd      	mov	sp, r7
 8013966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396a:	4770      	bx	lr

0801396c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b084      	sub	sp, #16
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
 8013974:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d10b      	bne.n	8013998 <xQueueGenericReset+0x2c>
        __asm volatile
 8013980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013984:	f383 8811 	msr	BASEPRI, r3
 8013988:	f3bf 8f6f 	isb	sy
 801398c:	f3bf 8f4f 	dsb	sy
 8013990:	60bb      	str	r3, [r7, #8]
    }
 8013992:	bf00      	nop
 8013994:	bf00      	nop
 8013996:	e7fd      	b.n	8013994 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8013998:	f002 fcf0 	bl	801637c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	681a      	ldr	r2, [r3, #0]
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80139a4:	68f9      	ldr	r1, [r7, #12]
 80139a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80139a8:	fb01 f303 	mul.w	r3, r1, r3
 80139ac:	441a      	add	r2, r3
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	2200      	movs	r2, #0
 80139b6:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	681a      	ldr	r2, [r3, #0]
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	681a      	ldr	r2, [r3, #0]
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80139c8:	3b01      	subs	r3, #1
 80139ca:	68f9      	ldr	r1, [r7, #12]
 80139cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80139ce:	fb01 f303 	mul.w	r3, r1, r3
 80139d2:	441a      	add	r2, r3
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	22ff      	movs	r2, #255	@ 0xff
 80139dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	22ff      	movs	r2, #255	@ 0xff
 80139e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80139e8:	683b      	ldr	r3, [r7, #0]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d114      	bne.n	8013a18 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	691b      	ldr	r3, [r3, #16]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d01a      	beq.n	8013a2c <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	3310      	adds	r3, #16
 80139fa:	4618      	mov	r0, r3
 80139fc:	f001 fb20 	bl	8015040 <xTaskRemoveFromEventList>
 8013a00:	4603      	mov	r3, r0
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d012      	beq.n	8013a2c <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8013a06:	4b0d      	ldr	r3, [pc, #52]	@ (8013a3c <xQueueGenericReset+0xd0>)
 8013a08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a0c:	601a      	str	r2, [r3, #0]
 8013a0e:	f3bf 8f4f 	dsb	sy
 8013a12:	f3bf 8f6f 	isb	sy
 8013a16:	e009      	b.n	8013a2c <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	3310      	adds	r3, #16
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	f7ff fef1 	bl	8013804 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	3324      	adds	r3, #36	@ 0x24
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7ff feec 	bl	8013804 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8013a2c:	f002 fcd8 	bl	80163e0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8013a30:	2301      	movs	r3, #1
}
 8013a32:	4618      	mov	r0, r3
 8013a34:	3710      	adds	r7, #16
 8013a36:	46bd      	mov	sp, r7
 8013a38:	bd80      	pop	{r7, pc}
 8013a3a:	bf00      	nop
 8013a3c:	e000ed04 	.word	0xe000ed04

08013a40 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b08c      	sub	sp, #48	@ 0x30
 8013a44:	af02      	add	r7, sp, #8
 8013a46:	60f8      	str	r0, [r7, #12]
 8013a48:	60b9      	str	r1, [r7, #8]
 8013a4a:	4613      	mov	r3, r2
 8013a4c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d10b      	bne.n	8013a6c <xQueueGenericCreate+0x2c>
        __asm volatile
 8013a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a58:	f383 8811 	msr	BASEPRI, r3
 8013a5c:	f3bf 8f6f 	isb	sy
 8013a60:	f3bf 8f4f 	dsb	sy
 8013a64:	61bb      	str	r3, [r7, #24]
    }
 8013a66:	bf00      	nop
 8013a68:	bf00      	nop
 8013a6a:	e7fd      	b.n	8013a68 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	68ba      	ldr	r2, [r7, #8]
 8013a70:	fb02 f303 	mul.w	r3, r2, r3
 8013a74:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d006      	beq.n	8013a8a <xQueueGenericCreate+0x4a>
 8013a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013a7e:	68bb      	ldr	r3, [r7, #8]
 8013a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8013a84:	68fa      	ldr	r2, [r7, #12]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d101      	bne.n	8013a8e <xQueueGenericCreate+0x4e>
 8013a8a:	2301      	movs	r3, #1
 8013a8c:	e000      	b.n	8013a90 <xQueueGenericCreate+0x50>
 8013a8e:	2300      	movs	r3, #0
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d10b      	bne.n	8013aac <xQueueGenericCreate+0x6c>
        __asm volatile
 8013a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a98:	f383 8811 	msr	BASEPRI, r3
 8013a9c:	f3bf 8f6f 	isb	sy
 8013aa0:	f3bf 8f4f 	dsb	sy
 8013aa4:	617b      	str	r3, [r7, #20]
    }
 8013aa6:	bf00      	nop
 8013aa8:	bf00      	nop
 8013aaa:	e7fd      	b.n	8013aa8 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8013aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aae:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8013ab2:	d90b      	bls.n	8013acc <xQueueGenericCreate+0x8c>
        __asm volatile
 8013ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ab8:	f383 8811 	msr	BASEPRI, r3
 8013abc:	f3bf 8f6f 	isb	sy
 8013ac0:	f3bf 8f4f 	dsb	sy
 8013ac4:	613b      	str	r3, [r7, #16]
    }
 8013ac6:	bf00      	nop
 8013ac8:	bf00      	nop
 8013aca:	e7fd      	b.n	8013ac8 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ace:	3350      	adds	r3, #80	@ 0x50
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f002 fd7d 	bl	80165d0 <pvPortMalloc>
 8013ad6:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8013ad8:	6a3b      	ldr	r3, [r7, #32]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d00d      	beq.n	8013afa <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013ade:	6a3b      	ldr	r3, [r7, #32]
 8013ae0:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013ae2:	69fb      	ldr	r3, [r7, #28]
 8013ae4:	3350      	adds	r3, #80	@ 0x50
 8013ae6:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013ae8:	79fa      	ldrb	r2, [r7, #7]
 8013aea:	6a3b      	ldr	r3, [r7, #32]
 8013aec:	9300      	str	r3, [sp, #0]
 8013aee:	4613      	mov	r3, r2
 8013af0:	69fa      	ldr	r2, [r7, #28]
 8013af2:	68b9      	ldr	r1, [r7, #8]
 8013af4:	68f8      	ldr	r0, [r7, #12]
 8013af6:	f000 f805 	bl	8013b04 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8013afa:	6a3b      	ldr	r3, [r7, #32]
    }
 8013afc:	4618      	mov	r0, r3
 8013afe:	3728      	adds	r7, #40	@ 0x28
 8013b00:	46bd      	mov	sp, r7
 8013b02:	bd80      	pop	{r7, pc}

08013b04 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b084      	sub	sp, #16
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	60f8      	str	r0, [r7, #12]
 8013b0c:	60b9      	str	r1, [r7, #8]
 8013b0e:	607a      	str	r2, [r7, #4]
 8013b10:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8013b12:	68bb      	ldr	r3, [r7, #8]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d103      	bne.n	8013b20 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013b18:	69bb      	ldr	r3, [r7, #24]
 8013b1a:	69ba      	ldr	r2, [r7, #24]
 8013b1c:	601a      	str	r2, [r3, #0]
 8013b1e:	e002      	b.n	8013b26 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013b20:	69bb      	ldr	r3, [r7, #24]
 8013b22:	687a      	ldr	r2, [r7, #4]
 8013b24:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8013b26:	69bb      	ldr	r3, [r7, #24]
 8013b28:	68fa      	ldr	r2, [r7, #12]
 8013b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8013b2c:	69bb      	ldr	r3, [r7, #24]
 8013b2e:	68ba      	ldr	r2, [r7, #8]
 8013b30:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013b32:	2101      	movs	r1, #1
 8013b34:	69b8      	ldr	r0, [r7, #24]
 8013b36:	f7ff ff19 	bl	801396c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8013b3a:	69bb      	ldr	r3, [r7, #24]
 8013b3c:	78fa      	ldrb	r2, [r7, #3]
 8013b3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8013b42:	bf00      	nop
 8013b44:	3710      	adds	r7, #16
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bd80      	pop	{r7, pc}

08013b4a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8013b4a:	b580      	push	{r7, lr}
 8013b4c:	b082      	sub	sp, #8
 8013b4e:	af00      	add	r7, sp, #0
 8013b50:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d00e      	beq.n	8013b76 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2200      	movs	r2, #0
 8013b62:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	2200      	movs	r2, #0
 8013b68:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	2100      	movs	r1, #0
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	f000 f81d 	bl	8013bb0 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8013b76:	bf00      	nop
 8013b78:	3708      	adds	r7, #8
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}

08013b7e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8013b7e:	b580      	push	{r7, lr}
 8013b80:	b086      	sub	sp, #24
 8013b82:	af00      	add	r7, sp, #0
 8013b84:	4603      	mov	r3, r0
 8013b86:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013b88:	2301      	movs	r3, #1
 8013b8a:	617b      	str	r3, [r7, #20]
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013b90:	79fb      	ldrb	r3, [r7, #7]
 8013b92:	461a      	mov	r2, r3
 8013b94:	6939      	ldr	r1, [r7, #16]
 8013b96:	6978      	ldr	r0, [r7, #20]
 8013b98:	f7ff ff52 	bl	8013a40 <xQueueGenericCreate>
 8013b9c:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013b9e:	68f8      	ldr	r0, [r7, #12]
 8013ba0:	f7ff ffd3 	bl	8013b4a <prvInitialiseMutex>

        return xNewQueue;
 8013ba4:	68fb      	ldr	r3, [r7, #12]
    }
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	3718      	adds	r7, #24
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bd80      	pop	{r7, pc}
	...

08013bb0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b08e      	sub	sp, #56	@ 0x38
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	60f8      	str	r0, [r7, #12]
 8013bb8:	60b9      	str	r1, [r7, #8]
 8013bba:	607a      	str	r2, [r7, #4]
 8013bbc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8013bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d10b      	bne.n	8013be4 <xQueueGenericSend+0x34>
        __asm volatile
 8013bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bd0:	f383 8811 	msr	BASEPRI, r3
 8013bd4:	f3bf 8f6f 	isb	sy
 8013bd8:	f3bf 8f4f 	dsb	sy
 8013bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8013bde:	bf00      	nop
 8013be0:	bf00      	nop
 8013be2:	e7fd      	b.n	8013be0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013be4:	68bb      	ldr	r3, [r7, #8]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d103      	bne.n	8013bf2 <xQueueGenericSend+0x42>
 8013bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d101      	bne.n	8013bf6 <xQueueGenericSend+0x46>
 8013bf2:	2301      	movs	r3, #1
 8013bf4:	e000      	b.n	8013bf8 <xQueueGenericSend+0x48>
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d10b      	bne.n	8013c14 <xQueueGenericSend+0x64>
        __asm volatile
 8013bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c00:	f383 8811 	msr	BASEPRI, r3
 8013c04:	f3bf 8f6f 	isb	sy
 8013c08:	f3bf 8f4f 	dsb	sy
 8013c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8013c0e:	bf00      	nop
 8013c10:	bf00      	nop
 8013c12:	e7fd      	b.n	8013c10 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013c14:	683b      	ldr	r3, [r7, #0]
 8013c16:	2b02      	cmp	r3, #2
 8013c18:	d103      	bne.n	8013c22 <xQueueGenericSend+0x72>
 8013c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c1e:	2b01      	cmp	r3, #1
 8013c20:	d101      	bne.n	8013c26 <xQueueGenericSend+0x76>
 8013c22:	2301      	movs	r3, #1
 8013c24:	e000      	b.n	8013c28 <xQueueGenericSend+0x78>
 8013c26:	2300      	movs	r3, #0
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d10b      	bne.n	8013c44 <xQueueGenericSend+0x94>
        __asm volatile
 8013c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c30:	f383 8811 	msr	BASEPRI, r3
 8013c34:	f3bf 8f6f 	isb	sy
 8013c38:	f3bf 8f4f 	dsb	sy
 8013c3c:	623b      	str	r3, [r7, #32]
    }
 8013c3e:	bf00      	nop
 8013c40:	bf00      	nop
 8013c42:	e7fd      	b.n	8013c40 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c44:	f001 fc70 	bl	8015528 <xTaskGetSchedulerState>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d102      	bne.n	8013c54 <xQueueGenericSend+0xa4>
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d101      	bne.n	8013c58 <xQueueGenericSend+0xa8>
 8013c54:	2301      	movs	r3, #1
 8013c56:	e000      	b.n	8013c5a <xQueueGenericSend+0xaa>
 8013c58:	2300      	movs	r3, #0
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d10b      	bne.n	8013c76 <xQueueGenericSend+0xc6>
        __asm volatile
 8013c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c62:	f383 8811 	msr	BASEPRI, r3
 8013c66:	f3bf 8f6f 	isb	sy
 8013c6a:	f3bf 8f4f 	dsb	sy
 8013c6e:	61fb      	str	r3, [r7, #28]
    }
 8013c70:	bf00      	nop
 8013c72:	bf00      	nop
 8013c74:	e7fd      	b.n	8013c72 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8013c76:	f002 fb81 	bl	801637c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c82:	429a      	cmp	r2, r3
 8013c84:	d302      	bcc.n	8013c8c <xQueueGenericSend+0xdc>
 8013c86:	683b      	ldr	r3, [r7, #0]
 8013c88:	2b02      	cmp	r3, #2
 8013c8a:	d129      	bne.n	8013ce0 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013c8c:	683a      	ldr	r2, [r7, #0]
 8013c8e:	68b9      	ldr	r1, [r7, #8]
 8013c90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013c92:	f000 fb47 	bl	8014324 <prvCopyDataToQueue>
 8013c96:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d010      	beq.n	8013cc2 <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ca2:	3324      	adds	r3, #36	@ 0x24
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f001 f9cb 	bl	8015040 <xTaskRemoveFromEventList>
 8013caa:	4603      	mov	r3, r0
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d013      	beq.n	8013cd8 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8013cb0:	4b3f      	ldr	r3, [pc, #252]	@ (8013db0 <xQueueGenericSend+0x200>)
 8013cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013cb6:	601a      	str	r2, [r3, #0]
 8013cb8:	f3bf 8f4f 	dsb	sy
 8013cbc:	f3bf 8f6f 	isb	sy
 8013cc0:	e00a      	b.n	8013cd8 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8013cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d007      	beq.n	8013cd8 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8013cc8:	4b39      	ldr	r3, [pc, #228]	@ (8013db0 <xQueueGenericSend+0x200>)
 8013cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013cce:	601a      	str	r2, [r3, #0]
 8013cd0:	f3bf 8f4f 	dsb	sy
 8013cd4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8013cd8:	f002 fb82 	bl	80163e0 <vPortExitCritical>
                return pdPASS;
 8013cdc:	2301      	movs	r3, #1
 8013cde:	e063      	b.n	8013da8 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d103      	bne.n	8013cee <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8013ce6:	f002 fb7b 	bl	80163e0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8013cea:	2300      	movs	r3, #0
 8013cec:	e05c      	b.n	8013da8 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8013cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d106      	bne.n	8013d02 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8013cf4:	f107 0314 	add.w	r3, r7, #20
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f001 fa05 	bl	8015108 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8013cfe:	2301      	movs	r3, #1
 8013d00:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8013d02:	f002 fb6d 	bl	80163e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8013d06:	f000 fec3 	bl	8014a90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8013d0a:	f002 fb37 	bl	801637c <vPortEnterCritical>
 8013d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013d14:	b25b      	sxtb	r3, r3
 8013d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d1a:	d103      	bne.n	8013d24 <xQueueGenericSend+0x174>
 8013d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d1e:	2200      	movs	r2, #0
 8013d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013d2a:	b25b      	sxtb	r3, r3
 8013d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d30:	d103      	bne.n	8013d3a <xQueueGenericSend+0x18a>
 8013d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d34:	2200      	movs	r2, #0
 8013d36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013d3a:	f002 fb51 	bl	80163e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013d3e:	1d3a      	adds	r2, r7, #4
 8013d40:	f107 0314 	add.w	r3, r7, #20
 8013d44:	4611      	mov	r1, r2
 8013d46:	4618      	mov	r0, r3
 8013d48:	f001 f9f4 	bl	8015134 <xTaskCheckForTimeOut>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d124      	bne.n	8013d9c <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013d52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013d54:	f000 fbde 	bl	8014514 <prvIsQueueFull>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d018      	beq.n	8013d90 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d60:	3310      	adds	r3, #16
 8013d62:	687a      	ldr	r2, [r7, #4]
 8013d64:	4611      	mov	r1, r2
 8013d66:	4618      	mov	r0, r3
 8013d68:	f001 f918 	bl	8014f9c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8013d6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013d6e:	f000 fb69 	bl	8014444 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8013d72:	f000 fe9b 	bl	8014aac <xTaskResumeAll>
 8013d76:	4603      	mov	r3, r0
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	f47f af7c 	bne.w	8013c76 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8013d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8013db0 <xQueueGenericSend+0x200>)
 8013d80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d84:	601a      	str	r2, [r3, #0]
 8013d86:	f3bf 8f4f 	dsb	sy
 8013d8a:	f3bf 8f6f 	isb	sy
 8013d8e:	e772      	b.n	8013c76 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8013d90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013d92:	f000 fb57 	bl	8014444 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8013d96:	f000 fe89 	bl	8014aac <xTaskResumeAll>
 8013d9a:	e76c      	b.n	8013c76 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8013d9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013d9e:	f000 fb51 	bl	8014444 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8013da2:	f000 fe83 	bl	8014aac <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8013da6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8013da8:	4618      	mov	r0, r3
 8013daa:	3738      	adds	r7, #56	@ 0x38
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}
 8013db0:	e000ed04 	.word	0xe000ed04

08013db4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b090      	sub	sp, #64	@ 0x40
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	60f8      	str	r0, [r7, #12]
 8013dbc:	60b9      	str	r1, [r7, #8]
 8013dbe:	607a      	str	r2, [r7, #4]
 8013dc0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8013dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d10b      	bne.n	8013de4 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8013dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dd0:	f383 8811 	msr	BASEPRI, r3
 8013dd4:	f3bf 8f6f 	isb	sy
 8013dd8:	f3bf 8f4f 	dsb	sy
 8013ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8013dde:	bf00      	nop
 8013de0:	bf00      	nop
 8013de2:	e7fd      	b.n	8013de0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d103      	bne.n	8013df2 <xQueueGenericSendFromISR+0x3e>
 8013dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d101      	bne.n	8013df6 <xQueueGenericSendFromISR+0x42>
 8013df2:	2301      	movs	r3, #1
 8013df4:	e000      	b.n	8013df8 <xQueueGenericSendFromISR+0x44>
 8013df6:	2300      	movs	r3, #0
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d10b      	bne.n	8013e14 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8013dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e00:	f383 8811 	msr	BASEPRI, r3
 8013e04:	f3bf 8f6f 	isb	sy
 8013e08:	f3bf 8f4f 	dsb	sy
 8013e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8013e0e:	bf00      	nop
 8013e10:	bf00      	nop
 8013e12:	e7fd      	b.n	8013e10 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013e14:	683b      	ldr	r3, [r7, #0]
 8013e16:	2b02      	cmp	r3, #2
 8013e18:	d103      	bne.n	8013e22 <xQueueGenericSendFromISR+0x6e>
 8013e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e1e:	2b01      	cmp	r3, #1
 8013e20:	d101      	bne.n	8013e26 <xQueueGenericSendFromISR+0x72>
 8013e22:	2301      	movs	r3, #1
 8013e24:	e000      	b.n	8013e28 <xQueueGenericSendFromISR+0x74>
 8013e26:	2300      	movs	r3, #0
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d10b      	bne.n	8013e44 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8013e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e30:	f383 8811 	msr	BASEPRI, r3
 8013e34:	f3bf 8f6f 	isb	sy
 8013e38:	f3bf 8f4f 	dsb	sy
 8013e3c:	623b      	str	r3, [r7, #32]
    }
 8013e3e:	bf00      	nop
 8013e40:	bf00      	nop
 8013e42:	e7fd      	b.n	8013e40 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013e44:	f002 fb82 	bl	801654c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8013e48:	f3ef 8211 	mrs	r2, BASEPRI
 8013e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e50:	f383 8811 	msr	BASEPRI, r3
 8013e54:	f3bf 8f6f 	isb	sy
 8013e58:	f3bf 8f4f 	dsb	sy
 8013e5c:	61fa      	str	r2, [r7, #28]
 8013e5e:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8013e60:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013e62:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	d302      	bcc.n	8013e76 <xQueueGenericSendFromISR+0xc2>
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	2b02      	cmp	r3, #2
 8013e74:	d13f      	bne.n	8013ef6 <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8013e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013e7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013e86:	683a      	ldr	r2, [r7, #0]
 8013e88:	68b9      	ldr	r1, [r7, #8]
 8013e8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013e8c:	f000 fa4a 	bl	8014324 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8013e90:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8013e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e98:	d112      	bne.n	8013ec0 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d026      	beq.n	8013ef0 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ea4:	3324      	adds	r3, #36	@ 0x24
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f001 f8ca 	bl	8015040 <xTaskRemoveFromEventList>
 8013eac:	4603      	mov	r3, r0
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d01e      	beq.n	8013ef0 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d01b      	beq.n	8013ef0 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	2201      	movs	r2, #1
 8013ebc:	601a      	str	r2, [r3, #0]
 8013ebe:	e017      	b.n	8013ef0 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8013ec0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8013ec4:	2b7f      	cmp	r3, #127	@ 0x7f
 8013ec6:	d10b      	bne.n	8013ee0 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8013ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ecc:	f383 8811 	msr	BASEPRI, r3
 8013ed0:	f3bf 8f6f 	isb	sy
 8013ed4:	f3bf 8f4f 	dsb	sy
 8013ed8:	617b      	str	r3, [r7, #20]
    }
 8013eda:	bf00      	nop
 8013edc:	bf00      	nop
 8013ede:	e7fd      	b.n	8013edc <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013ee4:	3301      	adds	r3, #1
 8013ee6:	b2db      	uxtb	r3, r3
 8013ee8:	b25a      	sxtb	r2, r3
 8013eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8013ef0:	2301      	movs	r3, #1
 8013ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8013ef4:	e001      	b.n	8013efa <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013efc:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8013efe:	693b      	ldr	r3, [r7, #16]
 8013f00:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8013f04:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8013f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013f08:	4618      	mov	r0, r3
 8013f0a:	3740      	adds	r7, #64	@ 0x40
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}

08013f10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b08c      	sub	sp, #48	@ 0x30
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	60f8      	str	r0, [r7, #12]
 8013f18:	60b9      	str	r1, [r7, #8]
 8013f1a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8013f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d10b      	bne.n	8013f42 <xQueueReceive+0x32>
        __asm volatile
 8013f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f2e:	f383 8811 	msr	BASEPRI, r3
 8013f32:	f3bf 8f6f 	isb	sy
 8013f36:	f3bf 8f4f 	dsb	sy
 8013f3a:	623b      	str	r3, [r7, #32]
    }
 8013f3c:	bf00      	nop
 8013f3e:	bf00      	nop
 8013f40:	e7fd      	b.n	8013f3e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013f42:	68bb      	ldr	r3, [r7, #8]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d103      	bne.n	8013f50 <xQueueReceive+0x40>
 8013f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d101      	bne.n	8013f54 <xQueueReceive+0x44>
 8013f50:	2301      	movs	r3, #1
 8013f52:	e000      	b.n	8013f56 <xQueueReceive+0x46>
 8013f54:	2300      	movs	r3, #0
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d10b      	bne.n	8013f72 <xQueueReceive+0x62>
        __asm volatile
 8013f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f5e:	f383 8811 	msr	BASEPRI, r3
 8013f62:	f3bf 8f6f 	isb	sy
 8013f66:	f3bf 8f4f 	dsb	sy
 8013f6a:	61fb      	str	r3, [r7, #28]
    }
 8013f6c:	bf00      	nop
 8013f6e:	bf00      	nop
 8013f70:	e7fd      	b.n	8013f6e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013f72:	f001 fad9 	bl	8015528 <xTaskGetSchedulerState>
 8013f76:	4603      	mov	r3, r0
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d102      	bne.n	8013f82 <xQueueReceive+0x72>
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d101      	bne.n	8013f86 <xQueueReceive+0x76>
 8013f82:	2301      	movs	r3, #1
 8013f84:	e000      	b.n	8013f88 <xQueueReceive+0x78>
 8013f86:	2300      	movs	r3, #0
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d10b      	bne.n	8013fa4 <xQueueReceive+0x94>
        __asm volatile
 8013f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f90:	f383 8811 	msr	BASEPRI, r3
 8013f94:	f3bf 8f6f 	isb	sy
 8013f98:	f3bf 8f4f 	dsb	sy
 8013f9c:	61bb      	str	r3, [r7, #24]
    }
 8013f9e:	bf00      	nop
 8013fa0:	bf00      	nop
 8013fa2:	e7fd      	b.n	8013fa0 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8013fa4:	f002 f9ea 	bl	801637c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013fac:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d01f      	beq.n	8013ff4 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013fb4:	68b9      	ldr	r1, [r7, #8]
 8013fb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013fb8:	f000 fa1e 	bl	80143f8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fbe:	1e5a      	subs	r2, r3, #1
 8013fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fc2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fc6:	691b      	ldr	r3, [r3, #16]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d00f      	beq.n	8013fec <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fce:	3310      	adds	r3, #16
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f001 f835 	bl	8015040 <xTaskRemoveFromEventList>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d007      	beq.n	8013fec <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8013fdc:	4b3c      	ldr	r3, [pc, #240]	@ (80140d0 <xQueueReceive+0x1c0>)
 8013fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013fe2:	601a      	str	r2, [r3, #0]
 8013fe4:	f3bf 8f4f 	dsb	sy
 8013fe8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8013fec:	f002 f9f8 	bl	80163e0 <vPortExitCritical>
                return pdPASS;
 8013ff0:	2301      	movs	r3, #1
 8013ff2:	e069      	b.n	80140c8 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d103      	bne.n	8014002 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8013ffa:	f002 f9f1 	bl	80163e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8013ffe:	2300      	movs	r3, #0
 8014000:	e062      	b.n	80140c8 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8014002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014004:	2b00      	cmp	r3, #0
 8014006:	d106      	bne.n	8014016 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8014008:	f107 0310 	add.w	r3, r7, #16
 801400c:	4618      	mov	r0, r3
 801400e:	f001 f87b 	bl	8015108 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8014012:	2301      	movs	r3, #1
 8014014:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8014016:	f002 f9e3 	bl	80163e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 801401a:	f000 fd39 	bl	8014a90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 801401e:	f002 f9ad 	bl	801637c <vPortEnterCritical>
 8014022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014024:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014028:	b25b      	sxtb	r3, r3
 801402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801402e:	d103      	bne.n	8014038 <xQueueReceive+0x128>
 8014030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014032:	2200      	movs	r2, #0
 8014034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801403a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801403e:	b25b      	sxtb	r3, r3
 8014040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014044:	d103      	bne.n	801404e <xQueueReceive+0x13e>
 8014046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014048:	2200      	movs	r2, #0
 801404a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801404e:	f002 f9c7 	bl	80163e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014052:	1d3a      	adds	r2, r7, #4
 8014054:	f107 0310 	add.w	r3, r7, #16
 8014058:	4611      	mov	r1, r2
 801405a:	4618      	mov	r0, r3
 801405c:	f001 f86a 	bl	8015134 <xTaskCheckForTimeOut>
 8014060:	4603      	mov	r3, r0
 8014062:	2b00      	cmp	r3, #0
 8014064:	d123      	bne.n	80140ae <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014066:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014068:	f000 fa3e 	bl	80144e8 <prvIsQueueEmpty>
 801406c:	4603      	mov	r3, r0
 801406e:	2b00      	cmp	r3, #0
 8014070:	d017      	beq.n	80140a2 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014074:	3324      	adds	r3, #36	@ 0x24
 8014076:	687a      	ldr	r2, [r7, #4]
 8014078:	4611      	mov	r1, r2
 801407a:	4618      	mov	r0, r3
 801407c:	f000 ff8e 	bl	8014f9c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8014080:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014082:	f000 f9df 	bl	8014444 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8014086:	f000 fd11 	bl	8014aac <xTaskResumeAll>
 801408a:	4603      	mov	r3, r0
 801408c:	2b00      	cmp	r3, #0
 801408e:	d189      	bne.n	8013fa4 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8014090:	4b0f      	ldr	r3, [pc, #60]	@ (80140d0 <xQueueReceive+0x1c0>)
 8014092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014096:	601a      	str	r2, [r3, #0]
 8014098:	f3bf 8f4f 	dsb	sy
 801409c:	f3bf 8f6f 	isb	sy
 80140a0:	e780      	b.n	8013fa4 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80140a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80140a4:	f000 f9ce 	bl	8014444 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80140a8:	f000 fd00 	bl	8014aac <xTaskResumeAll>
 80140ac:	e77a      	b.n	8013fa4 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80140ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80140b0:	f000 f9c8 	bl	8014444 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80140b4:	f000 fcfa 	bl	8014aac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80140b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80140ba:	f000 fa15 	bl	80144e8 <prvIsQueueEmpty>
 80140be:	4603      	mov	r3, r0
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	f43f af6f 	beq.w	8013fa4 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80140c6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80140c8:	4618      	mov	r0, r3
 80140ca:	3730      	adds	r7, #48	@ 0x30
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}
 80140d0:	e000ed04 	.word	0xe000ed04

080140d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b08e      	sub	sp, #56	@ 0x38
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
 80140dc:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80140de:	2300      	movs	r3, #0
 80140e0:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80140e6:	2300      	movs	r3, #0
 80140e8:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80140ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d10b      	bne.n	8014108 <xQueueSemaphoreTake+0x34>
        __asm volatile
 80140f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140f4:	f383 8811 	msr	BASEPRI, r3
 80140f8:	f3bf 8f6f 	isb	sy
 80140fc:	f3bf 8f4f 	dsb	sy
 8014100:	623b      	str	r3, [r7, #32]
    }
 8014102:	bf00      	nop
 8014104:	bf00      	nop
 8014106:	e7fd      	b.n	8014104 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8014108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801410c:	2b00      	cmp	r3, #0
 801410e:	d00b      	beq.n	8014128 <xQueueSemaphoreTake+0x54>
        __asm volatile
 8014110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014114:	f383 8811 	msr	BASEPRI, r3
 8014118:	f3bf 8f6f 	isb	sy
 801411c:	f3bf 8f4f 	dsb	sy
 8014120:	61fb      	str	r3, [r7, #28]
    }
 8014122:	bf00      	nop
 8014124:	bf00      	nop
 8014126:	e7fd      	b.n	8014124 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014128:	f001 f9fe 	bl	8015528 <xTaskGetSchedulerState>
 801412c:	4603      	mov	r3, r0
 801412e:	2b00      	cmp	r3, #0
 8014130:	d102      	bne.n	8014138 <xQueueSemaphoreTake+0x64>
 8014132:	683b      	ldr	r3, [r7, #0]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d101      	bne.n	801413c <xQueueSemaphoreTake+0x68>
 8014138:	2301      	movs	r3, #1
 801413a:	e000      	b.n	801413e <xQueueSemaphoreTake+0x6a>
 801413c:	2300      	movs	r3, #0
 801413e:	2b00      	cmp	r3, #0
 8014140:	d10b      	bne.n	801415a <xQueueSemaphoreTake+0x86>
        __asm volatile
 8014142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014146:	f383 8811 	msr	BASEPRI, r3
 801414a:	f3bf 8f6f 	isb	sy
 801414e:	f3bf 8f4f 	dsb	sy
 8014152:	61bb      	str	r3, [r7, #24]
    }
 8014154:	bf00      	nop
 8014156:	bf00      	nop
 8014158:	e7fd      	b.n	8014156 <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 801415a:	f002 f90f 	bl	801637c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801415e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014162:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014166:	2b00      	cmp	r3, #0
 8014168:	d024      	beq.n	80141b4 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801416a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801416c:	1e5a      	subs	r2, r3, #1
 801416e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014170:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d104      	bne.n	8014184 <xQueueSemaphoreTake+0xb0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801417a:	f001 fc31 	bl	80159e0 <pvTaskIncrementMutexHeldCount>
 801417e:	4602      	mov	r2, r0
 8014180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014182:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014186:	691b      	ldr	r3, [r3, #16]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d00f      	beq.n	80141ac <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801418c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801418e:	3310      	adds	r3, #16
 8014190:	4618      	mov	r0, r3
 8014192:	f000 ff55 	bl	8015040 <xTaskRemoveFromEventList>
 8014196:	4603      	mov	r3, r0
 8014198:	2b00      	cmp	r3, #0
 801419a:	d007      	beq.n	80141ac <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 801419c:	4b54      	ldr	r3, [pc, #336]	@ (80142f0 <xQueueSemaphoreTake+0x21c>)
 801419e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80141a2:	601a      	str	r2, [r3, #0]
 80141a4:	f3bf 8f4f 	dsb	sy
 80141a8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80141ac:	f002 f918 	bl	80163e0 <vPortExitCritical>
                return pdPASS;
 80141b0:	2301      	movs	r3, #1
 80141b2:	e098      	b.n	80142e6 <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80141b4:	683b      	ldr	r3, [r7, #0]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d112      	bne.n	80141e0 <xQueueSemaphoreTake+0x10c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80141ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d00b      	beq.n	80141d8 <xQueueSemaphoreTake+0x104>
        __asm volatile
 80141c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141c4:	f383 8811 	msr	BASEPRI, r3
 80141c8:	f3bf 8f6f 	isb	sy
 80141cc:	f3bf 8f4f 	dsb	sy
 80141d0:	617b      	str	r3, [r7, #20]
    }
 80141d2:	bf00      	nop
 80141d4:	bf00      	nop
 80141d6:	e7fd      	b.n	80141d4 <xQueueSemaphoreTake+0x100>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80141d8:	f002 f902 	bl	80163e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80141dc:	2300      	movs	r3, #0
 80141de:	e082      	b.n	80142e6 <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 80141e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d106      	bne.n	80141f4 <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80141e6:	f107 030c 	add.w	r3, r7, #12
 80141ea:	4618      	mov	r0, r3
 80141ec:	f000 ff8c 	bl	8015108 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80141f0:	2301      	movs	r3, #1
 80141f2:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80141f4:	f002 f8f4 	bl	80163e0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80141f8:	f000 fc4a 	bl	8014a90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80141fc:	f002 f8be 	bl	801637c <vPortEnterCritical>
 8014200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014202:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014206:	b25b      	sxtb	r3, r3
 8014208:	f1b3 3fff 	cmp.w	r3, #4294967295
 801420c:	d103      	bne.n	8014216 <xQueueSemaphoreTake+0x142>
 801420e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014210:	2200      	movs	r2, #0
 8014212:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014218:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801421c:	b25b      	sxtb	r3, r3
 801421e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014222:	d103      	bne.n	801422c <xQueueSemaphoreTake+0x158>
 8014224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014226:	2200      	movs	r2, #0
 8014228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801422c:	f002 f8d8 	bl	80163e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014230:	463a      	mov	r2, r7
 8014232:	f107 030c 	add.w	r3, r7, #12
 8014236:	4611      	mov	r1, r2
 8014238:	4618      	mov	r0, r3
 801423a:	f000 ff7b 	bl	8015134 <xTaskCheckForTimeOut>
 801423e:	4603      	mov	r3, r0
 8014240:	2b00      	cmp	r3, #0
 8014242:	d132      	bne.n	80142aa <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014244:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014246:	f000 f94f 	bl	80144e8 <prvIsQueueEmpty>
 801424a:	4603      	mov	r3, r0
 801424c:	2b00      	cmp	r3, #0
 801424e:	d026      	beq.n	801429e <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d109      	bne.n	801426c <xQueueSemaphoreTake+0x198>
                        {
                            taskENTER_CRITICAL();
 8014258:	f002 f890 	bl	801637c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801425c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801425e:	689b      	ldr	r3, [r3, #8]
 8014260:	4618      	mov	r0, r3
 8014262:	f001 f97f 	bl	8015564 <xTaskPriorityInherit>
 8014266:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 8014268:	f002 f8ba 	bl	80163e0 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801426c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801426e:	3324      	adds	r3, #36	@ 0x24
 8014270:	683a      	ldr	r2, [r7, #0]
 8014272:	4611      	mov	r1, r2
 8014274:	4618      	mov	r0, r3
 8014276:	f000 fe91 	bl	8014f9c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 801427a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801427c:	f000 f8e2 	bl	8014444 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8014280:	f000 fc14 	bl	8014aac <xTaskResumeAll>
 8014284:	4603      	mov	r3, r0
 8014286:	2b00      	cmp	r3, #0
 8014288:	f47f af67 	bne.w	801415a <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 801428c:	4b18      	ldr	r3, [pc, #96]	@ (80142f0 <xQueueSemaphoreTake+0x21c>)
 801428e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014292:	601a      	str	r2, [r3, #0]
 8014294:	f3bf 8f4f 	dsb	sy
 8014298:	f3bf 8f6f 	isb	sy
 801429c:	e75d      	b.n	801415a <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 801429e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80142a0:	f000 f8d0 	bl	8014444 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80142a4:	f000 fc02 	bl	8014aac <xTaskResumeAll>
 80142a8:	e757      	b.n	801415a <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80142aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80142ac:	f000 f8ca 	bl	8014444 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80142b0:	f000 fbfc 	bl	8014aac <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80142b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80142b6:	f000 f917 	bl	80144e8 <prvIsQueueEmpty>
 80142ba:	4603      	mov	r3, r0
 80142bc:	2b00      	cmp	r3, #0
 80142be:	f43f af4c 	beq.w	801415a <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80142c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d00d      	beq.n	80142e4 <xQueueSemaphoreTake+0x210>
                        {
                            taskENTER_CRITICAL();
 80142c8:	f002 f858 	bl	801637c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80142cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80142ce:	f000 f811 	bl	80142f4 <prvGetDisinheritPriorityAfterTimeout>
 80142d2:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80142d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142d6:	689b      	ldr	r3, [r3, #8]
 80142d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80142da:	4618      	mov	r0, r3
 80142dc:	f001 fa34 	bl	8015748 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80142e0:	f002 f87e 	bl	80163e0 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80142e4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80142e6:	4618      	mov	r0, r3
 80142e8:	3738      	adds	r7, #56	@ 0x38
 80142ea:	46bd      	mov	sp, r7
 80142ec:	bd80      	pop	{r7, pc}
 80142ee:	bf00      	nop
 80142f0:	e000ed04 	.word	0xe000ed04

080142f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80142f4:	b480      	push	{r7}
 80142f6:	b085      	sub	sp, #20
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014300:	2b00      	cmp	r3, #0
 8014302:	d006      	beq.n	8014312 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	f1c3 0305 	rsb	r3, r3, #5
 801430e:	60fb      	str	r3, [r7, #12]
 8014310:	e001      	b.n	8014316 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014312:	2300      	movs	r3, #0
 8014314:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8014316:	68fb      	ldr	r3, [r7, #12]
    }
 8014318:	4618      	mov	r0, r3
 801431a:	3714      	adds	r7, #20
 801431c:	46bd      	mov	sp, r7
 801431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014322:	4770      	bx	lr

08014324 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8014324:	b580      	push	{r7, lr}
 8014326:	b086      	sub	sp, #24
 8014328:	af00      	add	r7, sp, #0
 801432a:	60f8      	str	r0, [r7, #12]
 801432c:	60b9      	str	r1, [r7, #8]
 801432e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8014330:	2300      	movs	r3, #0
 8014332:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014338:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801433e:	2b00      	cmp	r3, #0
 8014340:	d10d      	bne.n	801435e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d14d      	bne.n	80143e6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	689b      	ldr	r3, [r3, #8]
 801434e:	4618      	mov	r0, r3
 8014350:	f001 f97e 	bl	8015650 <xTaskPriorityDisinherit>
 8014354:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	2200      	movs	r2, #0
 801435a:	609a      	str	r2, [r3, #8]
 801435c:	e043      	b.n	80143e6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d119      	bne.n	8014398 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	6858      	ldr	r0, [r3, #4]
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801436c:	461a      	mov	r2, r3
 801436e:	68b9      	ldr	r1, [r7, #8]
 8014370:	f004 f9b7 	bl	80186e2 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	685a      	ldr	r2, [r3, #4]
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801437c:	441a      	add	r2, r3
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	685a      	ldr	r2, [r3, #4]
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	689b      	ldr	r3, [r3, #8]
 801438a:	429a      	cmp	r2, r3
 801438c:	d32b      	bcc.n	80143e6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	681a      	ldr	r2, [r3, #0]
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	605a      	str	r2, [r3, #4]
 8014396:	e026      	b.n	80143e6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	68d8      	ldr	r0, [r3, #12]
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80143a0:	461a      	mov	r2, r3
 80143a2:	68b9      	ldr	r1, [r7, #8]
 80143a4:	f004 f99d 	bl	80186e2 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	68da      	ldr	r2, [r3, #12]
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80143b0:	425b      	negs	r3, r3
 80143b2:	441a      	add	r2, r3
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	68da      	ldr	r2, [r3, #12]
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	429a      	cmp	r2, r3
 80143c2:	d207      	bcs.n	80143d4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	689a      	ldr	r2, [r3, #8]
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80143cc:	425b      	negs	r3, r3
 80143ce:	441a      	add	r2, r3
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2b02      	cmp	r3, #2
 80143d8:	d105      	bne.n	80143e6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80143da:	693b      	ldr	r3, [r7, #16]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d002      	beq.n	80143e6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80143e0:	693b      	ldr	r3, [r7, #16]
 80143e2:	3b01      	subs	r3, #1
 80143e4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80143e6:	693b      	ldr	r3, [r7, #16]
 80143e8:	1c5a      	adds	r2, r3, #1
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80143ee:	697b      	ldr	r3, [r7, #20]
}
 80143f0:	4618      	mov	r0, r3
 80143f2:	3718      	adds	r7, #24
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}

080143f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b082      	sub	sp, #8
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
 8014400:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014406:	2b00      	cmp	r3, #0
 8014408:	d018      	beq.n	801443c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	68da      	ldr	r2, [r3, #12]
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014412:	441a      	add	r2, r3
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	68da      	ldr	r2, [r3, #12]
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	689b      	ldr	r3, [r3, #8]
 8014420:	429a      	cmp	r2, r3
 8014422:	d303      	bcc.n	801442c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	681a      	ldr	r2, [r3, #0]
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	68d9      	ldr	r1, [r3, #12]
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014434:	461a      	mov	r2, r3
 8014436:	6838      	ldr	r0, [r7, #0]
 8014438:	f004 f953 	bl	80186e2 <memcpy>
    }
}
 801443c:	bf00      	nop
 801443e:	3708      	adds	r7, #8
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}

08014444 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b084      	sub	sp, #16
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 801444c:	f001 ff96 	bl	801637c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014456:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8014458:	e011      	b.n	801447e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801445e:	2b00      	cmp	r3, #0
 8014460:	d012      	beq.n	8014488 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	3324      	adds	r3, #36	@ 0x24
 8014466:	4618      	mov	r0, r3
 8014468:	f000 fdea 	bl	8015040 <xTaskRemoveFromEventList>
 801446c:	4603      	mov	r3, r0
 801446e:	2b00      	cmp	r3, #0
 8014470:	d001      	beq.n	8014476 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8014472:	f000 fec7 	bl	8015204 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8014476:	7bfb      	ldrb	r3, [r7, #15]
 8014478:	3b01      	subs	r3, #1
 801447a:	b2db      	uxtb	r3, r3
 801447c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 801447e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014482:	2b00      	cmp	r3, #0
 8014484:	dce9      	bgt.n	801445a <prvUnlockQueue+0x16>
 8014486:	e000      	b.n	801448a <prvUnlockQueue+0x46>
                        break;
 8014488:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	22ff      	movs	r2, #255	@ 0xff
 801448e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8014492:	f001 ffa5 	bl	80163e0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8014496:	f001 ff71 	bl	801637c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80144a0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80144a2:	e011      	b.n	80144c8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	691b      	ldr	r3, [r3, #16]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d012      	beq.n	80144d2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	3310      	adds	r3, #16
 80144b0:	4618      	mov	r0, r3
 80144b2:	f000 fdc5 	bl	8015040 <xTaskRemoveFromEventList>
 80144b6:	4603      	mov	r3, r0
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d001      	beq.n	80144c0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80144bc:	f000 fea2 	bl	8015204 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80144c0:	7bbb      	ldrb	r3, [r7, #14]
 80144c2:	3b01      	subs	r3, #1
 80144c4:	b2db      	uxtb	r3, r3
 80144c6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80144c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	dce9      	bgt.n	80144a4 <prvUnlockQueue+0x60>
 80144d0:	e000      	b.n	80144d4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80144d2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	22ff      	movs	r2, #255	@ 0xff
 80144d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80144dc:	f001 ff80 	bl	80163e0 <vPortExitCritical>
}
 80144e0:	bf00      	nop
 80144e2:	3710      	adds	r7, #16
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}

080144e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b084      	sub	sp, #16
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80144f0:	f001 ff44 	bl	801637c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d102      	bne.n	8014502 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80144fc:	2301      	movs	r3, #1
 80144fe:	60fb      	str	r3, [r7, #12]
 8014500:	e001      	b.n	8014506 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8014502:	2300      	movs	r3, #0
 8014504:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8014506:	f001 ff6b 	bl	80163e0 <vPortExitCritical>

    return xReturn;
 801450a:	68fb      	ldr	r3, [r7, #12]
}
 801450c:	4618      	mov	r0, r3
 801450e:	3710      	adds	r7, #16
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}

08014514 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b084      	sub	sp, #16
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 801451c:	f001 ff2e 	bl	801637c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014528:	429a      	cmp	r2, r3
 801452a:	d102      	bne.n	8014532 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 801452c:	2301      	movs	r3, #1
 801452e:	60fb      	str	r3, [r7, #12]
 8014530:	e001      	b.n	8014536 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8014532:	2300      	movs	r3, #0
 8014534:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8014536:	f001 ff53 	bl	80163e0 <vPortExitCritical>

    return xReturn;
 801453a:	68fb      	ldr	r3, [r7, #12]
}
 801453c:	4618      	mov	r0, r3
 801453e:	3710      	adds	r7, #16
 8014540:	46bd      	mov	sp, r7
 8014542:	bd80      	pop	{r7, pc}

08014544 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8014544:	b480      	push	{r7}
 8014546:	b085      	sub	sp, #20
 8014548:	af00      	add	r7, sp, #0
 801454a:	6078      	str	r0, [r7, #4]
 801454c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801454e:	2300      	movs	r3, #0
 8014550:	60fb      	str	r3, [r7, #12]
 8014552:	e014      	b.n	801457e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014554:	4a0f      	ldr	r2, [pc, #60]	@ (8014594 <vQueueAddToRegistry+0x50>)
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d10b      	bne.n	8014578 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014560:	490c      	ldr	r1, [pc, #48]	@ (8014594 <vQueueAddToRegistry+0x50>)
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	683a      	ldr	r2, [r7, #0]
 8014566:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 801456a:	4a0a      	ldr	r2, [pc, #40]	@ (8014594 <vQueueAddToRegistry+0x50>)
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	00db      	lsls	r3, r3, #3
 8014570:	4413      	add	r3, r2
 8014572:	687a      	ldr	r2, [r7, #4]
 8014574:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8014576:	e006      	b.n	8014586 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	3301      	adds	r3, #1
 801457c:	60fb      	str	r3, [r7, #12]
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	2b07      	cmp	r3, #7
 8014582:	d9e7      	bls.n	8014554 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8014584:	bf00      	nop
 8014586:	bf00      	nop
 8014588:	3714      	adds	r7, #20
 801458a:	46bd      	mov	sp, r7
 801458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014590:	4770      	bx	lr
 8014592:	bf00      	nop
 8014594:	200014ec 	.word	0x200014ec

08014598 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8014598:	b580      	push	{r7, lr}
 801459a:	b086      	sub	sp, #24
 801459c:	af00      	add	r7, sp, #0
 801459e:	60f8      	str	r0, [r7, #12]
 80145a0:	60b9      	str	r1, [r7, #8]
 80145a2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80145a8:	f001 fee8 	bl	801637c <vPortEnterCritical>
 80145ac:	697b      	ldr	r3, [r7, #20]
 80145ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80145b2:	b25b      	sxtb	r3, r3
 80145b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145b8:	d103      	bne.n	80145c2 <vQueueWaitForMessageRestricted+0x2a>
 80145ba:	697b      	ldr	r3, [r7, #20]
 80145bc:	2200      	movs	r2, #0
 80145be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80145c2:	697b      	ldr	r3, [r7, #20]
 80145c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80145c8:	b25b      	sxtb	r3, r3
 80145ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145ce:	d103      	bne.n	80145d8 <vQueueWaitForMessageRestricted+0x40>
 80145d0:	697b      	ldr	r3, [r7, #20]
 80145d2:	2200      	movs	r2, #0
 80145d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80145d8:	f001 ff02 	bl	80163e0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80145dc:	697b      	ldr	r3, [r7, #20]
 80145de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d106      	bne.n	80145f2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80145e4:	697b      	ldr	r3, [r7, #20]
 80145e6:	3324      	adds	r3, #36	@ 0x24
 80145e8:	687a      	ldr	r2, [r7, #4]
 80145ea:	68b9      	ldr	r1, [r7, #8]
 80145ec:	4618      	mov	r0, r3
 80145ee:	f000 fcfb 	bl	8014fe8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80145f2:	6978      	ldr	r0, [r7, #20]
 80145f4:	f7ff ff26 	bl	8014444 <prvUnlockQueue>
    }
 80145f8:	bf00      	nop
 80145fa:	3718      	adds	r7, #24
 80145fc:	46bd      	mov	sp, r7
 80145fe:	bd80      	pop	{r7, pc}

08014600 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8014600:	b580      	push	{r7, lr}
 8014602:	b08c      	sub	sp, #48	@ 0x30
 8014604:	af04      	add	r7, sp, #16
 8014606:	60f8      	str	r0, [r7, #12]
 8014608:	60b9      	str	r1, [r7, #8]
 801460a:	603b      	str	r3, [r7, #0]
 801460c:	4613      	mov	r3, r2
 801460e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014610:	88fb      	ldrh	r3, [r7, #6]
 8014612:	009b      	lsls	r3, r3, #2
 8014614:	4618      	mov	r0, r3
 8014616:	f001 ffdb 	bl	80165d0 <pvPortMalloc>
 801461a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 801461c:	697b      	ldr	r3, [r7, #20]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d00e      	beq.n	8014640 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014622:	2058      	movs	r0, #88	@ 0x58
 8014624:	f001 ffd4 	bl	80165d0 <pvPortMalloc>
 8014628:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 801462a:	69fb      	ldr	r3, [r7, #28]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d003      	beq.n	8014638 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8014630:	69fb      	ldr	r3, [r7, #28]
 8014632:	697a      	ldr	r2, [r7, #20]
 8014634:	631a      	str	r2, [r3, #48]	@ 0x30
 8014636:	e005      	b.n	8014644 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8014638:	6978      	ldr	r0, [r7, #20]
 801463a:	f002 f8ab 	bl	8016794 <vPortFree>
 801463e:	e001      	b.n	8014644 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8014640:	2300      	movs	r3, #0
 8014642:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8014644:	69fb      	ldr	r3, [r7, #28]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d013      	beq.n	8014672 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801464a:	88fa      	ldrh	r2, [r7, #6]
 801464c:	2300      	movs	r3, #0
 801464e:	9303      	str	r3, [sp, #12]
 8014650:	69fb      	ldr	r3, [r7, #28]
 8014652:	9302      	str	r3, [sp, #8]
 8014654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014656:	9301      	str	r3, [sp, #4]
 8014658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801465a:	9300      	str	r3, [sp, #0]
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	68b9      	ldr	r1, [r7, #8]
 8014660:	68f8      	ldr	r0, [r7, #12]
 8014662:	f000 f80e 	bl	8014682 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8014666:	69f8      	ldr	r0, [r7, #28]
 8014668:	f000 f8a2 	bl	80147b0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 801466c:	2301      	movs	r3, #1
 801466e:	61bb      	str	r3, [r7, #24]
 8014670:	e002      	b.n	8014678 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014672:	f04f 33ff 	mov.w	r3, #4294967295
 8014676:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8014678:	69bb      	ldr	r3, [r7, #24]
    }
 801467a:	4618      	mov	r0, r3
 801467c:	3720      	adds	r7, #32
 801467e:	46bd      	mov	sp, r7
 8014680:	bd80      	pop	{r7, pc}

08014682 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8014682:	b580      	push	{r7, lr}
 8014684:	b088      	sub	sp, #32
 8014686:	af00      	add	r7, sp, #0
 8014688:	60f8      	str	r0, [r7, #12]
 801468a:	60b9      	str	r1, [r7, #8]
 801468c:	607a      	str	r2, [r7, #4]
 801468e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014692:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	009b      	lsls	r3, r3, #2
 8014698:	461a      	mov	r2, r3
 801469a:	21a5      	movs	r1, #165	@ 0xa5
 801469c:	f003 ff4e 	bl	801853c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80146a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80146aa:	3b01      	subs	r3, #1
 80146ac:	009b      	lsls	r3, r3, #2
 80146ae:	4413      	add	r3, r2
 80146b0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80146b2:	69bb      	ldr	r3, [r7, #24]
 80146b4:	f023 0307 	bic.w	r3, r3, #7
 80146b8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80146ba:	69bb      	ldr	r3, [r7, #24]
 80146bc:	f003 0307 	and.w	r3, r3, #7
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d00b      	beq.n	80146dc <prvInitialiseNewTask+0x5a>
        __asm volatile
 80146c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146c8:	f383 8811 	msr	BASEPRI, r3
 80146cc:	f3bf 8f6f 	isb	sy
 80146d0:	f3bf 8f4f 	dsb	sy
 80146d4:	617b      	str	r3, [r7, #20]
    }
 80146d6:	bf00      	nop
 80146d8:	bf00      	nop
 80146da:	e7fd      	b.n	80146d8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80146dc:	68bb      	ldr	r3, [r7, #8]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d01f      	beq.n	8014722 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80146e2:	2300      	movs	r3, #0
 80146e4:	61fb      	str	r3, [r7, #28]
 80146e6:	e012      	b.n	801470e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80146e8:	68ba      	ldr	r2, [r7, #8]
 80146ea:	69fb      	ldr	r3, [r7, #28]
 80146ec:	4413      	add	r3, r2
 80146ee:	7819      	ldrb	r1, [r3, #0]
 80146f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80146f2:	69fb      	ldr	r3, [r7, #28]
 80146f4:	4413      	add	r3, r2
 80146f6:	3334      	adds	r3, #52	@ 0x34
 80146f8:	460a      	mov	r2, r1
 80146fa:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80146fc:	68ba      	ldr	r2, [r7, #8]
 80146fe:	69fb      	ldr	r3, [r7, #28]
 8014700:	4413      	add	r3, r2
 8014702:	781b      	ldrb	r3, [r3, #0]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d006      	beq.n	8014716 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014708:	69fb      	ldr	r3, [r7, #28]
 801470a:	3301      	adds	r3, #1
 801470c:	61fb      	str	r3, [r7, #28]
 801470e:	69fb      	ldr	r3, [r7, #28]
 8014710:	2b09      	cmp	r3, #9
 8014712:	d9e9      	bls.n	80146e8 <prvInitialiseNewTask+0x66>
 8014714:	e000      	b.n	8014718 <prvInitialiseNewTask+0x96>
            {
                break;
 8014716:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801471a:	2200      	movs	r2, #0
 801471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8014720:	e003      	b.n	801472a <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014724:	2200      	movs	r2, #0
 8014726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801472a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801472c:	2b04      	cmp	r3, #4
 801472e:	d901      	bls.n	8014734 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014730:	2304      	movs	r3, #4
 8014732:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8014734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014736:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014738:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 801473a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801473c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801473e:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8014740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014742:	2200      	movs	r2, #0
 8014744:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014748:	3304      	adds	r3, #4
 801474a:	4618      	mov	r0, r3
 801474c:	f7ff f87a 	bl	8013844 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014752:	3318      	adds	r3, #24
 8014754:	4618      	mov	r0, r3
 8014756:	f7ff f875 	bl	8013844 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801475a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801475c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801475e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014762:	f1c3 0205 	rsb	r2, r3, #5
 8014766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014768:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801476a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801476c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801476e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8014770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014772:	3350      	adds	r3, #80	@ 0x50
 8014774:	2204      	movs	r2, #4
 8014776:	2100      	movs	r1, #0
 8014778:	4618      	mov	r0, r3
 801477a:	f003 fedf 	bl	801853c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 801477e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014780:	3354      	adds	r3, #84	@ 0x54
 8014782:	2201      	movs	r2, #1
 8014784:	2100      	movs	r1, #0
 8014786:	4618      	mov	r0, r3
 8014788:	f003 fed8 	bl	801853c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801478c:	683a      	ldr	r2, [r7, #0]
 801478e:	68f9      	ldr	r1, [r7, #12]
 8014790:	69b8      	ldr	r0, [r7, #24]
 8014792:	f001 fcbd 	bl	8016110 <pxPortInitialiseStack>
 8014796:	4602      	mov	r2, r0
 8014798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801479a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 801479c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d002      	beq.n	80147a8 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80147a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80147a6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80147a8:	bf00      	nop
 80147aa:	3720      	adds	r7, #32
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}

080147b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b082      	sub	sp, #8
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80147b8:	f001 fde0 	bl	801637c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80147bc:	4b2c      	ldr	r3, [pc, #176]	@ (8014870 <prvAddNewTaskToReadyList+0xc0>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	3301      	adds	r3, #1
 80147c2:	4a2b      	ldr	r2, [pc, #172]	@ (8014870 <prvAddNewTaskToReadyList+0xc0>)
 80147c4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80147c6:	4b2b      	ldr	r3, [pc, #172]	@ (8014874 <prvAddNewTaskToReadyList+0xc4>)
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d109      	bne.n	80147e2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80147ce:	4a29      	ldr	r2, [pc, #164]	@ (8014874 <prvAddNewTaskToReadyList+0xc4>)
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80147d4:	4b26      	ldr	r3, [pc, #152]	@ (8014870 <prvAddNewTaskToReadyList+0xc0>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	2b01      	cmp	r3, #1
 80147da:	d110      	bne.n	80147fe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80147dc:	f000 fd36 	bl	801524c <prvInitialiseTaskLists>
 80147e0:	e00d      	b.n	80147fe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80147e2:	4b25      	ldr	r3, [pc, #148]	@ (8014878 <prvAddNewTaskToReadyList+0xc8>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d109      	bne.n	80147fe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80147ea:	4b22      	ldr	r3, [pc, #136]	@ (8014874 <prvAddNewTaskToReadyList+0xc4>)
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d802      	bhi.n	80147fe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80147f8:	4a1e      	ldr	r2, [pc, #120]	@ (8014874 <prvAddNewTaskToReadyList+0xc4>)
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80147fe:	4b1f      	ldr	r3, [pc, #124]	@ (801487c <prvAddNewTaskToReadyList+0xcc>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	3301      	adds	r3, #1
 8014804:	4a1d      	ldr	r2, [pc, #116]	@ (801487c <prvAddNewTaskToReadyList+0xcc>)
 8014806:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014808:	4b1c      	ldr	r3, [pc, #112]	@ (801487c <prvAddNewTaskToReadyList+0xcc>)
 801480a:	681a      	ldr	r2, [r3, #0]
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014814:	2201      	movs	r2, #1
 8014816:	409a      	lsls	r2, r3
 8014818:	4b19      	ldr	r3, [pc, #100]	@ (8014880 <prvAddNewTaskToReadyList+0xd0>)
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	4313      	orrs	r3, r2
 801481e:	4a18      	ldr	r2, [pc, #96]	@ (8014880 <prvAddNewTaskToReadyList+0xd0>)
 8014820:	6013      	str	r3, [r2, #0]
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014826:	4613      	mov	r3, r2
 8014828:	009b      	lsls	r3, r3, #2
 801482a:	4413      	add	r3, r2
 801482c:	009b      	lsls	r3, r3, #2
 801482e:	4a15      	ldr	r2, [pc, #84]	@ (8014884 <prvAddNewTaskToReadyList+0xd4>)
 8014830:	441a      	add	r2, r3
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	3304      	adds	r3, #4
 8014836:	4619      	mov	r1, r3
 8014838:	4610      	mov	r0, r2
 801483a:	f7ff f810 	bl	801385e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 801483e:	f001 fdcf 	bl	80163e0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8014842:	4b0d      	ldr	r3, [pc, #52]	@ (8014878 <prvAddNewTaskToReadyList+0xc8>)
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d00e      	beq.n	8014868 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801484a:	4b0a      	ldr	r3, [pc, #40]	@ (8014874 <prvAddNewTaskToReadyList+0xc4>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014854:	429a      	cmp	r2, r3
 8014856:	d207      	bcs.n	8014868 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8014858:	4b0b      	ldr	r3, [pc, #44]	@ (8014888 <prvAddNewTaskToReadyList+0xd8>)
 801485a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801485e:	601a      	str	r2, [r3, #0]
 8014860:	f3bf 8f4f 	dsb	sy
 8014864:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8014868:	bf00      	nop
 801486a:	3708      	adds	r7, #8
 801486c:	46bd      	mov	sp, r7
 801486e:	bd80      	pop	{r7, pc}
 8014870:	20001604 	.word	0x20001604
 8014874:	2000152c 	.word	0x2000152c
 8014878:	20001610 	.word	0x20001610
 801487c:	20001620 	.word	0x20001620
 8014880:	2000160c 	.word	0x2000160c
 8014884:	20001530 	.word	0x20001530
 8014888:	e000ed04 	.word	0xe000ed04

0801488c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 801488c:	b580      	push	{r7, lr}
 801488e:	b084      	sub	sp, #16
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8014894:	2300      	movs	r3, #0
 8014896:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d018      	beq.n	80148d0 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 801489e:	4b14      	ldr	r3, [pc, #80]	@ (80148f0 <vTaskDelay+0x64>)
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d00b      	beq.n	80148be <vTaskDelay+0x32>
        __asm volatile
 80148a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148aa:	f383 8811 	msr	BASEPRI, r3
 80148ae:	f3bf 8f6f 	isb	sy
 80148b2:	f3bf 8f4f 	dsb	sy
 80148b6:	60bb      	str	r3, [r7, #8]
    }
 80148b8:	bf00      	nop
 80148ba:	bf00      	nop
 80148bc:	e7fd      	b.n	80148ba <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80148be:	f000 f8e7 	bl	8014a90 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80148c2:	2100      	movs	r1, #0
 80148c4:	6878      	ldr	r0, [r7, #4]
 80148c6:	f001 f89f 	bl	8015a08 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80148ca:	f000 f8ef 	bl	8014aac <xTaskResumeAll>
 80148ce:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d107      	bne.n	80148e6 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 80148d6:	4b07      	ldr	r3, [pc, #28]	@ (80148f4 <vTaskDelay+0x68>)
 80148d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80148dc:	601a      	str	r2, [r3, #0]
 80148de:	f3bf 8f4f 	dsb	sy
 80148e2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80148e6:	bf00      	nop
 80148e8:	3710      	adds	r7, #16
 80148ea:	46bd      	mov	sp, r7
 80148ec:	bd80      	pop	{r7, pc}
 80148ee:	bf00      	nop
 80148f0:	2000162c 	.word	0x2000162c
 80148f4:	e000ed04 	.word	0xe000ed04

080148f8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b08a      	sub	sp, #40	@ 0x28
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	61fb      	str	r3, [r7, #28]

        configASSERT( pxTCB );
 8014904:	69fb      	ldr	r3, [r7, #28]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d10b      	bne.n	8014922 <eTaskGetState+0x2a>
        __asm volatile
 801490a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801490e:	f383 8811 	msr	BASEPRI, r3
 8014912:	f3bf 8f6f 	isb	sy
 8014916:	f3bf 8f4f 	dsb	sy
 801491a:	60fb      	str	r3, [r7, #12]
    }
 801491c:	bf00      	nop
 801491e:	bf00      	nop
 8014920:	e7fd      	b.n	801491e <eTaskGetState+0x26>

        if( pxTCB == pxCurrentTCB )
 8014922:	4b2d      	ldr	r3, [pc, #180]	@ (80149d8 <eTaskGetState+0xe0>)
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	69fa      	ldr	r2, [r7, #28]
 8014928:	429a      	cmp	r2, r3
 801492a:	d103      	bne.n	8014934 <eTaskGetState+0x3c>
        {
            /* The task calling this function is querying its own state. */
            eReturn = eRunning;
 801492c:	2300      	movs	r3, #0
 801492e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014932:	e04b      	b.n	80149cc <eTaskGetState+0xd4>
        }
        else
        {
            taskENTER_CRITICAL();
 8014934:	f001 fd22 	bl	801637c <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8014938:	69fb      	ldr	r3, [r7, #28]
 801493a:	695b      	ldr	r3, [r3, #20]
 801493c:	61bb      	str	r3, [r7, #24]
                pxDelayedList = pxDelayedTaskList;
 801493e:	4b27      	ldr	r3, [pc, #156]	@ (80149dc <eTaskGetState+0xe4>)
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	617b      	str	r3, [r7, #20]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8014944:	4b26      	ldr	r3, [pc, #152]	@ (80149e0 <eTaskGetState+0xe8>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	613b      	str	r3, [r7, #16]
            }
            taskEXIT_CRITICAL();
 801494a:	f001 fd49 	bl	80163e0 <vPortExitCritical>

            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801494e:	69ba      	ldr	r2, [r7, #24]
 8014950:	697b      	ldr	r3, [r7, #20]
 8014952:	429a      	cmp	r2, r3
 8014954:	d003      	beq.n	801495e <eTaskGetState+0x66>
 8014956:	69ba      	ldr	r2, [r7, #24]
 8014958:	693b      	ldr	r3, [r7, #16]
 801495a:	429a      	cmp	r2, r3
 801495c:	d103      	bne.n	8014966 <eTaskGetState+0x6e>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 801495e:	2302      	movs	r3, #2
 8014960:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014964:	e032      	b.n	80149cc <eTaskGetState+0xd4>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
 8014966:	69bb      	ldr	r3, [r7, #24]
 8014968:	4a1e      	ldr	r2, [pc, #120]	@ (80149e4 <eTaskGetState+0xec>)
 801496a:	4293      	cmp	r3, r2
 801496c:	d120      	bne.n	80149b0 <eTaskGetState+0xb8>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801496e:	69fb      	ldr	r3, [r7, #28]
 8014970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014972:	2b00      	cmp	r3, #0
 8014974:	d118      	bne.n	80149a8 <eTaskGetState+0xb0>
                                /* The task does not appear on the event list item of
                                 * and of the RTOS objects, but could still be in the
                                 * blocked state if it is waiting on its notification
                                 * rather than waiting on an object.  If not, is
                                 * suspended. */
                                eReturn = eSuspended;
 8014976:	2303      	movs	r3, #3
 8014978:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 801497c:	2300      	movs	r3, #0
 801497e:	623b      	str	r3, [r7, #32]
 8014980:	e00e      	b.n	80149a0 <eTaskGetState+0xa8>
                                {
                                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8014982:	69fa      	ldr	r2, [r7, #28]
 8014984:	6a3b      	ldr	r3, [r7, #32]
 8014986:	4413      	add	r3, r2
 8014988:	3354      	adds	r3, #84	@ 0x54
 801498a:	781b      	ldrb	r3, [r3, #0]
 801498c:	b2db      	uxtb	r3, r3
 801498e:	2b01      	cmp	r3, #1
 8014990:	d103      	bne.n	801499a <eTaskGetState+0xa2>
                                    {
                                        eReturn = eBlocked;
 8014992:	2302      	movs	r3, #2
 8014994:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                        break;
 8014998:	e018      	b.n	80149cc <eTaskGetState+0xd4>
                                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 801499a:	6a3b      	ldr	r3, [r7, #32]
 801499c:	3301      	adds	r3, #1
 801499e:	623b      	str	r3, [r7, #32]
 80149a0:	6a3b      	ldr	r3, [r7, #32]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	dded      	ble.n	8014982 <eTaskGetState+0x8a>
 80149a6:	e011      	b.n	80149cc <eTaskGetState+0xd4>
                            }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
 80149a8:	2302      	movs	r3, #2
 80149aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80149ae:	e00d      	b.n	80149cc <eTaskGetState+0xd4>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80149b0:	69bb      	ldr	r3, [r7, #24]
 80149b2:	4a0d      	ldr	r2, [pc, #52]	@ (80149e8 <eTaskGetState+0xf0>)
 80149b4:	4293      	cmp	r3, r2
 80149b6:	d002      	beq.n	80149be <eTaskGetState+0xc6>
 80149b8:	69bb      	ldr	r3, [r7, #24]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d103      	bne.n	80149c6 <eTaskGetState+0xce>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 80149be:	2304      	movs	r3, #4
 80149c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80149c4:	e002      	b.n	80149cc <eTaskGetState+0xd4>

            else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
            {
                /* If the task is not in any other state, it must be in the
                 * Ready (including pending ready) state. */
                eReturn = eReady;
 80149c6:	2301      	movs	r3, #1
 80149c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }

        return eReturn;
 80149cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80149d0:	4618      	mov	r0, r3
 80149d2:	3728      	adds	r7, #40	@ 0x28
 80149d4:	46bd      	mov	sp, r7
 80149d6:	bd80      	pop	{r7, pc}
 80149d8:	2000152c 	.word	0x2000152c
 80149dc:	200015bc 	.word	0x200015bc
 80149e0:	200015c0 	.word	0x200015c0
 80149e4:	200015f0 	.word	0x200015f0
 80149e8:	200015d8 	.word	0x200015d8

080149ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b086      	sub	sp, #24
 80149f0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80149f2:	4b20      	ldr	r3, [pc, #128]	@ (8014a74 <vTaskStartScheduler+0x88>)
 80149f4:	9301      	str	r3, [sp, #4]
 80149f6:	2300      	movs	r3, #0
 80149f8:	9300      	str	r3, [sp, #0]
 80149fa:	2300      	movs	r3, #0
 80149fc:	2282      	movs	r2, #130	@ 0x82
 80149fe:	491e      	ldr	r1, [pc, #120]	@ (8014a78 <vTaskStartScheduler+0x8c>)
 8014a00:	481e      	ldr	r0, [pc, #120]	@ (8014a7c <vTaskStartScheduler+0x90>)
 8014a02:	f7ff fdfd 	bl	8014600 <xTaskCreate>
 8014a06:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	2b01      	cmp	r3, #1
 8014a0c:	d102      	bne.n	8014a14 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8014a0e:	f001 f861 	bl	8015ad4 <xTimerCreateTimerTask>
 8014a12:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	2b01      	cmp	r3, #1
 8014a18:	d116      	bne.n	8014a48 <vTaskStartScheduler+0x5c>
        __asm volatile
 8014a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a1e:	f383 8811 	msr	BASEPRI, r3
 8014a22:	f3bf 8f6f 	isb	sy
 8014a26:	f3bf 8f4f 	dsb	sy
 8014a2a:	60bb      	str	r3, [r7, #8]
    }
 8014a2c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8014a2e:	4b14      	ldr	r3, [pc, #80]	@ (8014a80 <vTaskStartScheduler+0x94>)
 8014a30:	f04f 32ff 	mov.w	r2, #4294967295
 8014a34:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8014a36:	4b13      	ldr	r3, [pc, #76]	@ (8014a84 <vTaskStartScheduler+0x98>)
 8014a38:	2201      	movs	r2, #1
 8014a3a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014a3c:	4b12      	ldr	r3, [pc, #72]	@ (8014a88 <vTaskStartScheduler+0x9c>)
 8014a3e:	2200      	movs	r2, #0
 8014a40:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8014a42:	f001 fbf7 	bl	8016234 <xPortStartScheduler>
 8014a46:	e00f      	b.n	8014a68 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a4e:	d10b      	bne.n	8014a68 <vTaskStartScheduler+0x7c>
        __asm volatile
 8014a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a54:	f383 8811 	msr	BASEPRI, r3
 8014a58:	f3bf 8f6f 	isb	sy
 8014a5c:	f3bf 8f4f 	dsb	sy
 8014a60:	607b      	str	r3, [r7, #4]
    }
 8014a62:	bf00      	nop
 8014a64:	bf00      	nop
 8014a66:	e7fd      	b.n	8014a64 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8014a68:	4b08      	ldr	r3, [pc, #32]	@ (8014a8c <vTaskStartScheduler+0xa0>)
 8014a6a:	681b      	ldr	r3, [r3, #0]
}
 8014a6c:	bf00      	nop
 8014a6e:	3710      	adds	r7, #16
 8014a70:	46bd      	mov	sp, r7
 8014a72:	bd80      	pop	{r7, pc}
 8014a74:	20001628 	.word	0x20001628
 8014a78:	0801bd74 	.word	0x0801bd74
 8014a7c:	0801521d 	.word	0x0801521d
 8014a80:	20001624 	.word	0x20001624
 8014a84:	20001610 	.word	0x20001610
 8014a88:	20001608 	.word	0x20001608
 8014a8c:	0801d8f0 	.word	0x0801d8f0

08014a90 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014a90:	b480      	push	{r7}
 8014a92:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8014a94:	4b04      	ldr	r3, [pc, #16]	@ (8014aa8 <vTaskSuspendAll+0x18>)
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	3301      	adds	r3, #1
 8014a9a:	4a03      	ldr	r2, [pc, #12]	@ (8014aa8 <vTaskSuspendAll+0x18>)
 8014a9c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8014a9e:	bf00      	nop
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa6:	4770      	bx	lr
 8014aa8:	2000162c 	.word	0x2000162c

08014aac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014aac:	b580      	push	{r7, lr}
 8014aae:	b084      	sub	sp, #16
 8014ab0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8014aba:	4b42      	ldr	r3, [pc, #264]	@ (8014bc4 <xTaskResumeAll+0x118>)
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d10b      	bne.n	8014ada <xTaskResumeAll+0x2e>
        __asm volatile
 8014ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ac6:	f383 8811 	msr	BASEPRI, r3
 8014aca:	f3bf 8f6f 	isb	sy
 8014ace:	f3bf 8f4f 	dsb	sy
 8014ad2:	603b      	str	r3, [r7, #0]
    }
 8014ad4:	bf00      	nop
 8014ad6:	bf00      	nop
 8014ad8:	e7fd      	b.n	8014ad6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8014ada:	f001 fc4f 	bl	801637c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8014ade:	4b39      	ldr	r3, [pc, #228]	@ (8014bc4 <xTaskResumeAll+0x118>)
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	3b01      	subs	r3, #1
 8014ae4:	4a37      	ldr	r2, [pc, #220]	@ (8014bc4 <xTaskResumeAll+0x118>)
 8014ae6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014ae8:	4b36      	ldr	r3, [pc, #216]	@ (8014bc4 <xTaskResumeAll+0x118>)
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d161      	bne.n	8014bb4 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014af0:	4b35      	ldr	r3, [pc, #212]	@ (8014bc8 <xTaskResumeAll+0x11c>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d05d      	beq.n	8014bb4 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014af8:	e02e      	b.n	8014b58 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014afa:	4b34      	ldr	r3, [pc, #208]	@ (8014bcc <xTaskResumeAll+0x120>)
 8014afc:	68db      	ldr	r3, [r3, #12]
 8014afe:	68db      	ldr	r3, [r3, #12]
 8014b00:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	3318      	adds	r3, #24
 8014b06:	4618      	mov	r0, r3
 8014b08:	f7fe ff06 	bl	8013918 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	3304      	adds	r3, #4
 8014b10:	4618      	mov	r0, r3
 8014b12:	f7fe ff01 	bl	8013918 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b1a:	2201      	movs	r2, #1
 8014b1c:	409a      	lsls	r2, r3
 8014b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8014bd0 <xTaskResumeAll+0x124>)
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	4313      	orrs	r3, r2
 8014b24:	4a2a      	ldr	r2, [pc, #168]	@ (8014bd0 <xTaskResumeAll+0x124>)
 8014b26:	6013      	str	r3, [r2, #0]
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b2c:	4613      	mov	r3, r2
 8014b2e:	009b      	lsls	r3, r3, #2
 8014b30:	4413      	add	r3, r2
 8014b32:	009b      	lsls	r3, r3, #2
 8014b34:	4a27      	ldr	r2, [pc, #156]	@ (8014bd4 <xTaskResumeAll+0x128>)
 8014b36:	441a      	add	r2, r3
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	3304      	adds	r3, #4
 8014b3c:	4619      	mov	r1, r3
 8014b3e:	4610      	mov	r0, r2
 8014b40:	f7fe fe8d 	bl	801385e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b48:	4b23      	ldr	r3, [pc, #140]	@ (8014bd8 <xTaskResumeAll+0x12c>)
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b4e:	429a      	cmp	r2, r3
 8014b50:	d302      	bcc.n	8014b58 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8014b52:	4b22      	ldr	r3, [pc, #136]	@ (8014bdc <xTaskResumeAll+0x130>)
 8014b54:	2201      	movs	r2, #1
 8014b56:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014b58:	4b1c      	ldr	r3, [pc, #112]	@ (8014bcc <xTaskResumeAll+0x120>)
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d1cc      	bne.n	8014afa <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d001      	beq.n	8014b6a <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8014b66:	f000 fcc3 	bl	80154f0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8014be0 <xTaskResumeAll+0x134>)
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d010      	beq.n	8014b98 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8014b76:	f000 f8d5 	bl	8014d24 <xTaskIncrementTick>
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d002      	beq.n	8014b86 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8014b80:	4b16      	ldr	r3, [pc, #88]	@ (8014bdc <xTaskResumeAll+0x130>)
 8014b82:	2201      	movs	r2, #1
 8014b84:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	3b01      	subs	r3, #1
 8014b8a:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d1f1      	bne.n	8014b76 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8014b92:	4b13      	ldr	r3, [pc, #76]	@ (8014be0 <xTaskResumeAll+0x134>)
 8014b94:	2200      	movs	r2, #0
 8014b96:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8014b98:	4b10      	ldr	r3, [pc, #64]	@ (8014bdc <xTaskResumeAll+0x130>)
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d009      	beq.n	8014bb4 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8014ba0:	2301      	movs	r3, #1
 8014ba2:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8014ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8014be4 <xTaskResumeAll+0x138>)
 8014ba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014baa:	601a      	str	r2, [r3, #0]
 8014bac:	f3bf 8f4f 	dsb	sy
 8014bb0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8014bb4:	f001 fc14 	bl	80163e0 <vPortExitCritical>

    return xAlreadyYielded;
 8014bb8:	68bb      	ldr	r3, [r7, #8]
}
 8014bba:	4618      	mov	r0, r3
 8014bbc:	3710      	adds	r7, #16
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	bd80      	pop	{r7, pc}
 8014bc2:	bf00      	nop
 8014bc4:	2000162c 	.word	0x2000162c
 8014bc8:	20001604 	.word	0x20001604
 8014bcc:	200015c4 	.word	0x200015c4
 8014bd0:	2000160c 	.word	0x2000160c
 8014bd4:	20001530 	.word	0x20001530
 8014bd8:	2000152c 	.word	0x2000152c
 8014bdc:	20001618 	.word	0x20001618
 8014be0:	20001614 	.word	0x20001614
 8014be4:	e000ed04 	.word	0xe000ed04

08014be8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014be8:	b480      	push	{r7}
 8014bea:	b083      	sub	sp, #12
 8014bec:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8014bee:	4b05      	ldr	r3, [pc, #20]	@ (8014c04 <xTaskGetTickCount+0x1c>)
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8014bf4:	687b      	ldr	r3, [r7, #4]
}
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	370c      	adds	r7, #12
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c00:	4770      	bx	lr
 8014c02:	bf00      	nop
 8014c04:	20001608 	.word	0x20001608

08014c08 <uxTaskGetSystemState>:
#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                      const UBaseType_t uxArraySize,
                                      uint32_t * const pulTotalRunTime )
    {
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b086      	sub	sp, #24
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	60f8      	str	r0, [r7, #12]
 8014c10:	60b9      	str	r1, [r7, #8]
 8014c12:	607a      	str	r2, [r7, #4]
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8014c14:	2300      	movs	r3, #0
 8014c16:	617b      	str	r3, [r7, #20]
 8014c18:	2305      	movs	r3, #5
 8014c1a:	613b      	str	r3, [r7, #16]

        vTaskSuspendAll();
 8014c1c:	f7ff ff38 	bl	8014a90 <vTaskSuspendAll>
        {
            /* Is there a space in the array for each task in the system? */
            if( uxArraySize >= uxCurrentNumberOfTasks )
 8014c20:	4b3a      	ldr	r3, [pc, #232]	@ (8014d0c <uxTaskGetSystemState+0x104>)
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	68ba      	ldr	r2, [r7, #8]
 8014c26:	429a      	cmp	r2, r3
 8014c28:	d368      	bcc.n	8014cfc <uxTaskGetSystemState+0xf4>
            {
                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Ready state. */
                do
                {
                    uxQueue--;
 8014c2a:	693b      	ldr	r3, [r7, #16]
 8014c2c:	3b01      	subs	r3, #1
 8014c2e:	613b      	str	r3, [r7, #16]
                    uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8014c30:	697a      	ldr	r2, [r7, #20]
 8014c32:	4613      	mov	r3, r2
 8014c34:	00db      	lsls	r3, r3, #3
 8014c36:	4413      	add	r3, r2
 8014c38:	009b      	lsls	r3, r3, #2
 8014c3a:	461a      	mov	r2, r3
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	1898      	adds	r0, r3, r2
 8014c40:	693a      	ldr	r2, [r7, #16]
 8014c42:	4613      	mov	r3, r2
 8014c44:	009b      	lsls	r3, r3, #2
 8014c46:	4413      	add	r3, r2
 8014c48:	009b      	lsls	r3, r3, #2
 8014c4a:	4a31      	ldr	r2, [pc, #196]	@ (8014d10 <uxTaskGetSystemState+0x108>)
 8014c4c:	4413      	add	r3, r2
 8014c4e:	2201      	movs	r2, #1
 8014c50:	4619      	mov	r1, r3
 8014c52:	f000 fbcf 	bl	80153f4 <prvListTasksWithinSingleList>
 8014c56:	4602      	mov	r2, r0
 8014c58:	697b      	ldr	r3, [r7, #20]
 8014c5a:	4413      	add	r3, r2
 8014c5c:	617b      	str	r3, [r7, #20]
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c5e:	693b      	ldr	r3, [r7, #16]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d1e2      	bne.n	8014c2a <uxTaskGetSystemState+0x22>

                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Blocked state. */
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8014c64:	697a      	ldr	r2, [r7, #20]
 8014c66:	4613      	mov	r3, r2
 8014c68:	00db      	lsls	r3, r3, #3
 8014c6a:	4413      	add	r3, r2
 8014c6c:	009b      	lsls	r3, r3, #2
 8014c6e:	461a      	mov	r2, r3
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	4413      	add	r3, r2
 8014c74:	4a27      	ldr	r2, [pc, #156]	@ (8014d14 <uxTaskGetSystemState+0x10c>)
 8014c76:	6811      	ldr	r1, [r2, #0]
 8014c78:	2202      	movs	r2, #2
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f000 fbba 	bl	80153f4 <prvListTasksWithinSingleList>
 8014c80:	4602      	mov	r2, r0
 8014c82:	697b      	ldr	r3, [r7, #20]
 8014c84:	4413      	add	r3, r2
 8014c86:	617b      	str	r3, [r7, #20]
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8014c88:	697a      	ldr	r2, [r7, #20]
 8014c8a:	4613      	mov	r3, r2
 8014c8c:	00db      	lsls	r3, r3, #3
 8014c8e:	4413      	add	r3, r2
 8014c90:	009b      	lsls	r3, r3, #2
 8014c92:	461a      	mov	r2, r3
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	4413      	add	r3, r2
 8014c98:	4a1f      	ldr	r2, [pc, #124]	@ (8014d18 <uxTaskGetSystemState+0x110>)
 8014c9a:	6811      	ldr	r1, [r2, #0]
 8014c9c:	2202      	movs	r2, #2
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	f000 fba8 	bl	80153f4 <prvListTasksWithinSingleList>
 8014ca4:	4602      	mov	r2, r0
 8014ca6:	697b      	ldr	r3, [r7, #20]
 8014ca8:	4413      	add	r3, r2
 8014caa:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskDelete == 1 )
                    {
                        /* Fill in an TaskStatus_t structure with information on
                         * each task that has been deleted but not yet cleaned up. */
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8014cac:	697a      	ldr	r2, [r7, #20]
 8014cae:	4613      	mov	r3, r2
 8014cb0:	00db      	lsls	r3, r3, #3
 8014cb2:	4413      	add	r3, r2
 8014cb4:	009b      	lsls	r3, r3, #2
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	4413      	add	r3, r2
 8014cbc:	2204      	movs	r2, #4
 8014cbe:	4917      	ldr	r1, [pc, #92]	@ (8014d1c <uxTaskGetSystemState+0x114>)
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f000 fb97 	bl	80153f4 <prvListTasksWithinSingleList>
 8014cc6:	4602      	mov	r2, r0
 8014cc8:	697b      	ldr	r3, [r7, #20]
 8014cca:	4413      	add	r3, r2
 8014ccc:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskSuspend == 1 )
                    {
                        /* Fill in an TaskStatus_t structure with information on
                         * each task in the Suspended state. */
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8014cce:	697a      	ldr	r2, [r7, #20]
 8014cd0:	4613      	mov	r3, r2
 8014cd2:	00db      	lsls	r3, r3, #3
 8014cd4:	4413      	add	r3, r2
 8014cd6:	009b      	lsls	r3, r3, #2
 8014cd8:	461a      	mov	r2, r3
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	4413      	add	r3, r2
 8014cde:	2203      	movs	r2, #3
 8014ce0:	490f      	ldr	r1, [pc, #60]	@ (8014d20 <uxTaskGetSystemState+0x118>)
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	f000 fb86 	bl	80153f4 <prvListTasksWithinSingleList>
 8014ce8:	4602      	mov	r2, r0
 8014cea:	697b      	ldr	r3, [r7, #20]
 8014cec:	4413      	add	r3, r2
 8014cee:	617b      	str	r3, [r7, #20]
                            #endif
                        }
                    }
                #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
                    {
                        if( pulTotalRunTime != NULL )
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d002      	beq.n	8014cfc <uxTaskGetSystemState+0xf4>
                        {
                            *pulTotalRunTime = 0;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        ( void ) xTaskResumeAll();
 8014cfc:	f7ff fed6 	bl	8014aac <xTaskResumeAll>

        return uxTask;
 8014d00:	697b      	ldr	r3, [r7, #20]
    }
 8014d02:	4618      	mov	r0, r3
 8014d04:	3718      	adds	r7, #24
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bd80      	pop	{r7, pc}
 8014d0a:	bf00      	nop
 8014d0c:	20001604 	.word	0x20001604
 8014d10:	20001530 	.word	0x20001530
 8014d14:	200015bc 	.word	0x200015bc
 8014d18:	200015c0 	.word	0x200015c0
 8014d1c:	200015d8 	.word	0x200015d8
 8014d20:	200015f0 	.word	0x200015f0

08014d24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b086      	sub	sp, #24
 8014d28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014d2e:	4b4f      	ldr	r3, [pc, #316]	@ (8014e6c <xTaskIncrementTick+0x148>)
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	f040 808f 	bne.w	8014e56 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014d38:	4b4d      	ldr	r3, [pc, #308]	@ (8014e70 <xTaskIncrementTick+0x14c>)
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	3301      	adds	r3, #1
 8014d3e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8014d40:	4a4b      	ldr	r2, [pc, #300]	@ (8014e70 <xTaskIncrementTick+0x14c>)
 8014d42:	693b      	ldr	r3, [r7, #16]
 8014d44:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014d46:	693b      	ldr	r3, [r7, #16]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d121      	bne.n	8014d90 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8014d4c:	4b49      	ldr	r3, [pc, #292]	@ (8014e74 <xTaskIncrementTick+0x150>)
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d00b      	beq.n	8014d6e <xTaskIncrementTick+0x4a>
        __asm volatile
 8014d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d5a:	f383 8811 	msr	BASEPRI, r3
 8014d5e:	f3bf 8f6f 	isb	sy
 8014d62:	f3bf 8f4f 	dsb	sy
 8014d66:	603b      	str	r3, [r7, #0]
    }
 8014d68:	bf00      	nop
 8014d6a:	bf00      	nop
 8014d6c:	e7fd      	b.n	8014d6a <xTaskIncrementTick+0x46>
 8014d6e:	4b41      	ldr	r3, [pc, #260]	@ (8014e74 <xTaskIncrementTick+0x150>)
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	60fb      	str	r3, [r7, #12]
 8014d74:	4b40      	ldr	r3, [pc, #256]	@ (8014e78 <xTaskIncrementTick+0x154>)
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	4a3e      	ldr	r2, [pc, #248]	@ (8014e74 <xTaskIncrementTick+0x150>)
 8014d7a:	6013      	str	r3, [r2, #0]
 8014d7c:	4a3e      	ldr	r2, [pc, #248]	@ (8014e78 <xTaskIncrementTick+0x154>)
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	6013      	str	r3, [r2, #0]
 8014d82:	4b3e      	ldr	r3, [pc, #248]	@ (8014e7c <xTaskIncrementTick+0x158>)
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	3301      	adds	r3, #1
 8014d88:	4a3c      	ldr	r2, [pc, #240]	@ (8014e7c <xTaskIncrementTick+0x158>)
 8014d8a:	6013      	str	r3, [r2, #0]
 8014d8c:	f000 fbb0 	bl	80154f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8014d90:	4b3b      	ldr	r3, [pc, #236]	@ (8014e80 <xTaskIncrementTick+0x15c>)
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	693a      	ldr	r2, [r7, #16]
 8014d96:	429a      	cmp	r2, r3
 8014d98:	d348      	bcc.n	8014e2c <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014d9a:	4b36      	ldr	r3, [pc, #216]	@ (8014e74 <xTaskIncrementTick+0x150>)
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d104      	bne.n	8014dae <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014da4:	4b36      	ldr	r3, [pc, #216]	@ (8014e80 <xTaskIncrementTick+0x15c>)
 8014da6:	f04f 32ff 	mov.w	r2, #4294967295
 8014daa:	601a      	str	r2, [r3, #0]
                    break;
 8014dac:	e03e      	b.n	8014e2c <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014dae:	4b31      	ldr	r3, [pc, #196]	@ (8014e74 <xTaskIncrementTick+0x150>)
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	68db      	ldr	r3, [r3, #12]
 8014db4:	68db      	ldr	r3, [r3, #12]
 8014db6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014db8:	68bb      	ldr	r3, [r7, #8]
 8014dba:	685b      	ldr	r3, [r3, #4]
 8014dbc:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8014dbe:	693a      	ldr	r2, [r7, #16]
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	429a      	cmp	r2, r3
 8014dc4:	d203      	bcs.n	8014dce <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8014dc6:	4a2e      	ldr	r2, [pc, #184]	@ (8014e80 <xTaskIncrementTick+0x15c>)
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014dcc:	e02e      	b.n	8014e2c <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014dce:	68bb      	ldr	r3, [r7, #8]
 8014dd0:	3304      	adds	r3, #4
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	f7fe fda0 	bl	8013918 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014dd8:	68bb      	ldr	r3, [r7, #8]
 8014dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d004      	beq.n	8014dea <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014de0:	68bb      	ldr	r3, [r7, #8]
 8014de2:	3318      	adds	r3, #24
 8014de4:	4618      	mov	r0, r3
 8014de6:	f7fe fd97 	bl	8013918 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8014dea:	68bb      	ldr	r3, [r7, #8]
 8014dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014dee:	2201      	movs	r2, #1
 8014df0:	409a      	lsls	r2, r3
 8014df2:	4b24      	ldr	r3, [pc, #144]	@ (8014e84 <xTaskIncrementTick+0x160>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	4313      	orrs	r3, r2
 8014df8:	4a22      	ldr	r2, [pc, #136]	@ (8014e84 <xTaskIncrementTick+0x160>)
 8014dfa:	6013      	str	r3, [r2, #0]
 8014dfc:	68bb      	ldr	r3, [r7, #8]
 8014dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e00:	4613      	mov	r3, r2
 8014e02:	009b      	lsls	r3, r3, #2
 8014e04:	4413      	add	r3, r2
 8014e06:	009b      	lsls	r3, r3, #2
 8014e08:	4a1f      	ldr	r2, [pc, #124]	@ (8014e88 <xTaskIncrementTick+0x164>)
 8014e0a:	441a      	add	r2, r3
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	3304      	adds	r3, #4
 8014e10:	4619      	mov	r1, r3
 8014e12:	4610      	mov	r0, r2
 8014e14:	f7fe fd23 	bl	801385e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8014e8c <xTaskIncrementTick+0x168>)
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e22:	429a      	cmp	r2, r3
 8014e24:	d3b9      	bcc.n	8014d9a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8014e26:	2301      	movs	r3, #1
 8014e28:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014e2a:	e7b6      	b.n	8014d9a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014e2c:	4b17      	ldr	r3, [pc, #92]	@ (8014e8c <xTaskIncrementTick+0x168>)
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e32:	4915      	ldr	r1, [pc, #84]	@ (8014e88 <xTaskIncrementTick+0x164>)
 8014e34:	4613      	mov	r3, r2
 8014e36:	009b      	lsls	r3, r3, #2
 8014e38:	4413      	add	r3, r2
 8014e3a:	009b      	lsls	r3, r3, #2
 8014e3c:	440b      	add	r3, r1
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	2b01      	cmp	r3, #1
 8014e42:	d901      	bls.n	8014e48 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8014e44:	2301      	movs	r3, #1
 8014e46:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8014e48:	4b11      	ldr	r3, [pc, #68]	@ (8014e90 <xTaskIncrementTick+0x16c>)
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d007      	beq.n	8014e60 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8014e50:	2301      	movs	r3, #1
 8014e52:	617b      	str	r3, [r7, #20]
 8014e54:	e004      	b.n	8014e60 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8014e56:	4b0f      	ldr	r3, [pc, #60]	@ (8014e94 <xTaskIncrementTick+0x170>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	3301      	adds	r3, #1
 8014e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8014e94 <xTaskIncrementTick+0x170>)
 8014e5e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8014e60:	697b      	ldr	r3, [r7, #20]
}
 8014e62:	4618      	mov	r0, r3
 8014e64:	3718      	adds	r7, #24
 8014e66:	46bd      	mov	sp, r7
 8014e68:	bd80      	pop	{r7, pc}
 8014e6a:	bf00      	nop
 8014e6c:	2000162c 	.word	0x2000162c
 8014e70:	20001608 	.word	0x20001608
 8014e74:	200015bc 	.word	0x200015bc
 8014e78:	200015c0 	.word	0x200015c0
 8014e7c:	2000161c 	.word	0x2000161c
 8014e80:	20001624 	.word	0x20001624
 8014e84:	2000160c 	.word	0x2000160c
 8014e88:	20001530 	.word	0x20001530
 8014e8c:	2000152c 	.word	0x2000152c
 8014e90:	20001618 	.word	0x20001618
 8014e94:	20001614 	.word	0x20001614

08014e98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b088      	sub	sp, #32
 8014e9c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8014f88 <vTaskSwitchContext+0xf0>)
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d003      	beq.n	8014eae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8014ea6:	4b39      	ldr	r3, [pc, #228]	@ (8014f8c <vTaskSwitchContext+0xf4>)
 8014ea8:	2201      	movs	r2, #1
 8014eaa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8014eac:	e067      	b.n	8014f7e <vTaskSwitchContext+0xe6>
        xYieldPending = pdFALSE;
 8014eae:	4b37      	ldr	r3, [pc, #220]	@ (8014f8c <vTaskSwitchContext+0xf4>)
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8014eb4:	4b36      	ldr	r3, [pc, #216]	@ (8014f90 <vTaskSwitchContext+0xf8>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014eba:	61fb      	str	r3, [r7, #28]
 8014ebc:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8014ec0:	61bb      	str	r3, [r7, #24]
 8014ec2:	69fb      	ldr	r3, [r7, #28]
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	69ba      	ldr	r2, [r7, #24]
 8014ec8:	429a      	cmp	r2, r3
 8014eca:	d111      	bne.n	8014ef0 <vTaskSwitchContext+0x58>
 8014ecc:	69fb      	ldr	r3, [r7, #28]
 8014ece:	3304      	adds	r3, #4
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	69ba      	ldr	r2, [r7, #24]
 8014ed4:	429a      	cmp	r2, r3
 8014ed6:	d10b      	bne.n	8014ef0 <vTaskSwitchContext+0x58>
 8014ed8:	69fb      	ldr	r3, [r7, #28]
 8014eda:	3308      	adds	r3, #8
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	69ba      	ldr	r2, [r7, #24]
 8014ee0:	429a      	cmp	r2, r3
 8014ee2:	d105      	bne.n	8014ef0 <vTaskSwitchContext+0x58>
 8014ee4:	69fb      	ldr	r3, [r7, #28]
 8014ee6:	330c      	adds	r3, #12
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	69ba      	ldr	r2, [r7, #24]
 8014eec:	429a      	cmp	r2, r3
 8014eee:	d008      	beq.n	8014f02 <vTaskSwitchContext+0x6a>
 8014ef0:	4b27      	ldr	r3, [pc, #156]	@ (8014f90 <vTaskSwitchContext+0xf8>)
 8014ef2:	681a      	ldr	r2, [r3, #0]
 8014ef4:	4b26      	ldr	r3, [pc, #152]	@ (8014f90 <vTaskSwitchContext+0xf8>)
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	3334      	adds	r3, #52	@ 0x34
 8014efa:	4619      	mov	r1, r3
 8014efc:	4610      	mov	r0, r2
 8014efe:	f7fa ffe3 	bl	800fec8 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f02:	4b24      	ldr	r3, [pc, #144]	@ (8014f94 <vTaskSwitchContext+0xfc>)
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	fab3 f383 	clz	r3, r3
 8014f0e:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8014f10:	7afb      	ldrb	r3, [r7, #11]
 8014f12:	f1c3 031f 	rsb	r3, r3, #31
 8014f16:	617b      	str	r3, [r7, #20]
 8014f18:	491f      	ldr	r1, [pc, #124]	@ (8014f98 <vTaskSwitchContext+0x100>)
 8014f1a:	697a      	ldr	r2, [r7, #20]
 8014f1c:	4613      	mov	r3, r2
 8014f1e:	009b      	lsls	r3, r3, #2
 8014f20:	4413      	add	r3, r2
 8014f22:	009b      	lsls	r3, r3, #2
 8014f24:	440b      	add	r3, r1
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d10b      	bne.n	8014f44 <vTaskSwitchContext+0xac>
        __asm volatile
 8014f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f30:	f383 8811 	msr	BASEPRI, r3
 8014f34:	f3bf 8f6f 	isb	sy
 8014f38:	f3bf 8f4f 	dsb	sy
 8014f3c:	607b      	str	r3, [r7, #4]
    }
 8014f3e:	bf00      	nop
 8014f40:	bf00      	nop
 8014f42:	e7fd      	b.n	8014f40 <vTaskSwitchContext+0xa8>
 8014f44:	697a      	ldr	r2, [r7, #20]
 8014f46:	4613      	mov	r3, r2
 8014f48:	009b      	lsls	r3, r3, #2
 8014f4a:	4413      	add	r3, r2
 8014f4c:	009b      	lsls	r3, r3, #2
 8014f4e:	4a12      	ldr	r2, [pc, #72]	@ (8014f98 <vTaskSwitchContext+0x100>)
 8014f50:	4413      	add	r3, r2
 8014f52:	613b      	str	r3, [r7, #16]
 8014f54:	693b      	ldr	r3, [r7, #16]
 8014f56:	685b      	ldr	r3, [r3, #4]
 8014f58:	685a      	ldr	r2, [r3, #4]
 8014f5a:	693b      	ldr	r3, [r7, #16]
 8014f5c:	605a      	str	r2, [r3, #4]
 8014f5e:	693b      	ldr	r3, [r7, #16]
 8014f60:	685a      	ldr	r2, [r3, #4]
 8014f62:	693b      	ldr	r3, [r7, #16]
 8014f64:	3308      	adds	r3, #8
 8014f66:	429a      	cmp	r2, r3
 8014f68:	d104      	bne.n	8014f74 <vTaskSwitchContext+0xdc>
 8014f6a:	693b      	ldr	r3, [r7, #16]
 8014f6c:	685b      	ldr	r3, [r3, #4]
 8014f6e:	685a      	ldr	r2, [r3, #4]
 8014f70:	693b      	ldr	r3, [r7, #16]
 8014f72:	605a      	str	r2, [r3, #4]
 8014f74:	693b      	ldr	r3, [r7, #16]
 8014f76:	685b      	ldr	r3, [r3, #4]
 8014f78:	68db      	ldr	r3, [r3, #12]
 8014f7a:	4a05      	ldr	r2, [pc, #20]	@ (8014f90 <vTaskSwitchContext+0xf8>)
 8014f7c:	6013      	str	r3, [r2, #0]
}
 8014f7e:	bf00      	nop
 8014f80:	3720      	adds	r7, #32
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd80      	pop	{r7, pc}
 8014f86:	bf00      	nop
 8014f88:	2000162c 	.word	0x2000162c
 8014f8c:	20001618 	.word	0x20001618
 8014f90:	2000152c 	.word	0x2000152c
 8014f94:	2000160c 	.word	0x2000160c
 8014f98:	20001530 	.word	0x20001530

08014f9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b084      	sub	sp, #16
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
 8014fa4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d10b      	bne.n	8014fc4 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8014fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fb0:	f383 8811 	msr	BASEPRI, r3
 8014fb4:	f3bf 8f6f 	isb	sy
 8014fb8:	f3bf 8f4f 	dsb	sy
 8014fbc:	60fb      	str	r3, [r7, #12]
    }
 8014fbe:	bf00      	nop
 8014fc0:	bf00      	nop
 8014fc2:	e7fd      	b.n	8014fc0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014fc4:	4b07      	ldr	r3, [pc, #28]	@ (8014fe4 <vTaskPlaceOnEventList+0x48>)
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	3318      	adds	r3, #24
 8014fca:	4619      	mov	r1, r3
 8014fcc:	6878      	ldr	r0, [r7, #4]
 8014fce:	f7fe fc6a 	bl	80138a6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014fd2:	2101      	movs	r1, #1
 8014fd4:	6838      	ldr	r0, [r7, #0]
 8014fd6:	f000 fd17 	bl	8015a08 <prvAddCurrentTaskToDelayedList>
}
 8014fda:	bf00      	nop
 8014fdc:	3710      	adds	r7, #16
 8014fde:	46bd      	mov	sp, r7
 8014fe0:	bd80      	pop	{r7, pc}
 8014fe2:	bf00      	nop
 8014fe4:	2000152c 	.word	0x2000152c

08014fe8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b086      	sub	sp, #24
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	60f8      	str	r0, [r7, #12]
 8014ff0:	60b9      	str	r1, [r7, #8]
 8014ff2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d10b      	bne.n	8015012 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8014ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ffe:	f383 8811 	msr	BASEPRI, r3
 8015002:	f3bf 8f6f 	isb	sy
 8015006:	f3bf 8f4f 	dsb	sy
 801500a:	617b      	str	r3, [r7, #20]
    }
 801500c:	bf00      	nop
 801500e:	bf00      	nop
 8015010:	e7fd      	b.n	801500e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015012:	4b0a      	ldr	r3, [pc, #40]	@ (801503c <vTaskPlaceOnEventListRestricted+0x54>)
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	3318      	adds	r3, #24
 8015018:	4619      	mov	r1, r3
 801501a:	68f8      	ldr	r0, [r7, #12]
 801501c:	f7fe fc1f 	bl	801385e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d002      	beq.n	801502c <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8015026:	f04f 33ff 	mov.w	r3, #4294967295
 801502a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801502c:	6879      	ldr	r1, [r7, #4]
 801502e:	68b8      	ldr	r0, [r7, #8]
 8015030:	f000 fcea 	bl	8015a08 <prvAddCurrentTaskToDelayedList>
    }
 8015034:	bf00      	nop
 8015036:	3718      	adds	r7, #24
 8015038:	46bd      	mov	sp, r7
 801503a:	bd80      	pop	{r7, pc}
 801503c:	2000152c 	.word	0x2000152c

08015040 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b086      	sub	sp, #24
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	68db      	ldr	r3, [r3, #12]
 801504c:	68db      	ldr	r3, [r3, #12]
 801504e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8015050:	693b      	ldr	r3, [r7, #16]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d10b      	bne.n	801506e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8015056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801505a:	f383 8811 	msr	BASEPRI, r3
 801505e:	f3bf 8f6f 	isb	sy
 8015062:	f3bf 8f4f 	dsb	sy
 8015066:	60fb      	str	r3, [r7, #12]
    }
 8015068:	bf00      	nop
 801506a:	bf00      	nop
 801506c:	e7fd      	b.n	801506a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801506e:	693b      	ldr	r3, [r7, #16]
 8015070:	3318      	adds	r3, #24
 8015072:	4618      	mov	r0, r3
 8015074:	f7fe fc50 	bl	8013918 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015078:	4b1d      	ldr	r3, [pc, #116]	@ (80150f0 <xTaskRemoveFromEventList+0xb0>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d11c      	bne.n	80150ba <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015080:	693b      	ldr	r3, [r7, #16]
 8015082:	3304      	adds	r3, #4
 8015084:	4618      	mov	r0, r3
 8015086:	f7fe fc47 	bl	8013918 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 801508a:	693b      	ldr	r3, [r7, #16]
 801508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801508e:	2201      	movs	r2, #1
 8015090:	409a      	lsls	r2, r3
 8015092:	4b18      	ldr	r3, [pc, #96]	@ (80150f4 <xTaskRemoveFromEventList+0xb4>)
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	4313      	orrs	r3, r2
 8015098:	4a16      	ldr	r2, [pc, #88]	@ (80150f4 <xTaskRemoveFromEventList+0xb4>)
 801509a:	6013      	str	r3, [r2, #0]
 801509c:	693b      	ldr	r3, [r7, #16]
 801509e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150a0:	4613      	mov	r3, r2
 80150a2:	009b      	lsls	r3, r3, #2
 80150a4:	4413      	add	r3, r2
 80150a6:	009b      	lsls	r3, r3, #2
 80150a8:	4a13      	ldr	r2, [pc, #76]	@ (80150f8 <xTaskRemoveFromEventList+0xb8>)
 80150aa:	441a      	add	r2, r3
 80150ac:	693b      	ldr	r3, [r7, #16]
 80150ae:	3304      	adds	r3, #4
 80150b0:	4619      	mov	r1, r3
 80150b2:	4610      	mov	r0, r2
 80150b4:	f7fe fbd3 	bl	801385e <vListInsertEnd>
 80150b8:	e005      	b.n	80150c6 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80150ba:	693b      	ldr	r3, [r7, #16]
 80150bc:	3318      	adds	r3, #24
 80150be:	4619      	mov	r1, r3
 80150c0:	480e      	ldr	r0, [pc, #56]	@ (80150fc <xTaskRemoveFromEventList+0xbc>)
 80150c2:	f7fe fbcc 	bl	801385e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80150c6:	693b      	ldr	r3, [r7, #16]
 80150c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150ca:	4b0d      	ldr	r3, [pc, #52]	@ (8015100 <xTaskRemoveFromEventList+0xc0>)
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150d0:	429a      	cmp	r2, r3
 80150d2:	d905      	bls.n	80150e0 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80150d4:	2301      	movs	r3, #1
 80150d6:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80150d8:	4b0a      	ldr	r3, [pc, #40]	@ (8015104 <xTaskRemoveFromEventList+0xc4>)
 80150da:	2201      	movs	r2, #1
 80150dc:	601a      	str	r2, [r3, #0]
 80150de:	e001      	b.n	80150e4 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 80150e0:	2300      	movs	r3, #0
 80150e2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80150e4:	697b      	ldr	r3, [r7, #20]
}
 80150e6:	4618      	mov	r0, r3
 80150e8:	3718      	adds	r7, #24
 80150ea:	46bd      	mov	sp, r7
 80150ec:	bd80      	pop	{r7, pc}
 80150ee:	bf00      	nop
 80150f0:	2000162c 	.word	0x2000162c
 80150f4:	2000160c 	.word	0x2000160c
 80150f8:	20001530 	.word	0x20001530
 80150fc:	200015c4 	.word	0x200015c4
 8015100:	2000152c 	.word	0x2000152c
 8015104:	20001618 	.word	0x20001618

08015108 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015108:	b480      	push	{r7}
 801510a:	b083      	sub	sp, #12
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015110:	4b06      	ldr	r3, [pc, #24]	@ (801512c <vTaskInternalSetTimeOutState+0x24>)
 8015112:	681a      	ldr	r2, [r3, #0]
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8015118:	4b05      	ldr	r3, [pc, #20]	@ (8015130 <vTaskInternalSetTimeOutState+0x28>)
 801511a:	681a      	ldr	r2, [r3, #0]
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	605a      	str	r2, [r3, #4]
}
 8015120:	bf00      	nop
 8015122:	370c      	adds	r7, #12
 8015124:	46bd      	mov	sp, r7
 8015126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512a:	4770      	bx	lr
 801512c:	2000161c 	.word	0x2000161c
 8015130:	20001608 	.word	0x20001608

08015134 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b088      	sub	sp, #32
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d10b      	bne.n	801515c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8015144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015148:	f383 8811 	msr	BASEPRI, r3
 801514c:	f3bf 8f6f 	isb	sy
 8015150:	f3bf 8f4f 	dsb	sy
 8015154:	613b      	str	r3, [r7, #16]
    }
 8015156:	bf00      	nop
 8015158:	bf00      	nop
 801515a:	e7fd      	b.n	8015158 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 801515c:	683b      	ldr	r3, [r7, #0]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d10b      	bne.n	801517a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8015162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015166:	f383 8811 	msr	BASEPRI, r3
 801516a:	f3bf 8f6f 	isb	sy
 801516e:	f3bf 8f4f 	dsb	sy
 8015172:	60fb      	str	r3, [r7, #12]
    }
 8015174:	bf00      	nop
 8015176:	bf00      	nop
 8015178:	e7fd      	b.n	8015176 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 801517a:	f001 f8ff 	bl	801637c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 801517e:	4b1f      	ldr	r3, [pc, #124]	@ (80151fc <xTaskCheckForTimeOut+0xc8>)
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	685b      	ldr	r3, [r3, #4]
 8015188:	69ba      	ldr	r2, [r7, #24]
 801518a:	1ad3      	subs	r3, r2, r3
 801518c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015196:	d102      	bne.n	801519e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8015198:	2300      	movs	r3, #0
 801519a:	61fb      	str	r3, [r7, #28]
 801519c:	e026      	b.n	80151ec <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	681a      	ldr	r2, [r3, #0]
 80151a2:	4b17      	ldr	r3, [pc, #92]	@ (8015200 <xTaskCheckForTimeOut+0xcc>)
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	429a      	cmp	r2, r3
 80151a8:	d00a      	beq.n	80151c0 <xTaskCheckForTimeOut+0x8c>
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	685b      	ldr	r3, [r3, #4]
 80151ae:	69ba      	ldr	r2, [r7, #24]
 80151b0:	429a      	cmp	r2, r3
 80151b2:	d305      	bcc.n	80151c0 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80151b4:	2301      	movs	r3, #1
 80151b6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80151b8:	683b      	ldr	r3, [r7, #0]
 80151ba:	2200      	movs	r2, #0
 80151bc:	601a      	str	r2, [r3, #0]
 80151be:	e015      	b.n	80151ec <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80151c0:	683b      	ldr	r3, [r7, #0]
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	697a      	ldr	r2, [r7, #20]
 80151c6:	429a      	cmp	r2, r3
 80151c8:	d20b      	bcs.n	80151e2 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	681a      	ldr	r2, [r3, #0]
 80151ce:	697b      	ldr	r3, [r7, #20]
 80151d0:	1ad2      	subs	r2, r2, r3
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80151d6:	6878      	ldr	r0, [r7, #4]
 80151d8:	f7ff ff96 	bl	8015108 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80151dc:	2300      	movs	r3, #0
 80151de:	61fb      	str	r3, [r7, #28]
 80151e0:	e004      	b.n	80151ec <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80151e2:	683b      	ldr	r3, [r7, #0]
 80151e4:	2200      	movs	r2, #0
 80151e6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80151e8:	2301      	movs	r3, #1
 80151ea:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80151ec:	f001 f8f8 	bl	80163e0 <vPortExitCritical>

    return xReturn;
 80151f0:	69fb      	ldr	r3, [r7, #28]
}
 80151f2:	4618      	mov	r0, r3
 80151f4:	3720      	adds	r7, #32
 80151f6:	46bd      	mov	sp, r7
 80151f8:	bd80      	pop	{r7, pc}
 80151fa:	bf00      	nop
 80151fc:	20001608 	.word	0x20001608
 8015200:	2000161c 	.word	0x2000161c

08015204 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015204:	b480      	push	{r7}
 8015206:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8015208:	4b03      	ldr	r3, [pc, #12]	@ (8015218 <vTaskMissedYield+0x14>)
 801520a:	2201      	movs	r2, #1
 801520c:	601a      	str	r2, [r3, #0]
}
 801520e:	bf00      	nop
 8015210:	46bd      	mov	sp, r7
 8015212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015216:	4770      	bx	lr
 8015218:	20001618 	.word	0x20001618

0801521c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801521c:	b580      	push	{r7, lr}
 801521e:	b082      	sub	sp, #8
 8015220:	af00      	add	r7, sp, #0
 8015222:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8015224:	f000 f852 	bl	80152cc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015228:	4b06      	ldr	r3, [pc, #24]	@ (8015244 <prvIdleTask+0x28>)
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	2b01      	cmp	r3, #1
 801522e:	d9f9      	bls.n	8015224 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8015230:	4b05      	ldr	r3, [pc, #20]	@ (8015248 <prvIdleTask+0x2c>)
 8015232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015236:	601a      	str	r2, [r3, #0]
 8015238:	f3bf 8f4f 	dsb	sy
 801523c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8015240:	e7f0      	b.n	8015224 <prvIdleTask+0x8>
 8015242:	bf00      	nop
 8015244:	20001530 	.word	0x20001530
 8015248:	e000ed04 	.word	0xe000ed04

0801524c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b082      	sub	sp, #8
 8015250:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015252:	2300      	movs	r3, #0
 8015254:	607b      	str	r3, [r7, #4]
 8015256:	e00c      	b.n	8015272 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015258:	687a      	ldr	r2, [r7, #4]
 801525a:	4613      	mov	r3, r2
 801525c:	009b      	lsls	r3, r3, #2
 801525e:	4413      	add	r3, r2
 8015260:	009b      	lsls	r3, r3, #2
 8015262:	4a12      	ldr	r2, [pc, #72]	@ (80152ac <prvInitialiseTaskLists+0x60>)
 8015264:	4413      	add	r3, r2
 8015266:	4618      	mov	r0, r3
 8015268:	f7fe facc 	bl	8013804 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	3301      	adds	r3, #1
 8015270:	607b      	str	r3, [r7, #4]
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	2b04      	cmp	r3, #4
 8015276:	d9ef      	bls.n	8015258 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8015278:	480d      	ldr	r0, [pc, #52]	@ (80152b0 <prvInitialiseTaskLists+0x64>)
 801527a:	f7fe fac3 	bl	8013804 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 801527e:	480d      	ldr	r0, [pc, #52]	@ (80152b4 <prvInitialiseTaskLists+0x68>)
 8015280:	f7fe fac0 	bl	8013804 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8015284:	480c      	ldr	r0, [pc, #48]	@ (80152b8 <prvInitialiseTaskLists+0x6c>)
 8015286:	f7fe fabd 	bl	8013804 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 801528a:	480c      	ldr	r0, [pc, #48]	@ (80152bc <prvInitialiseTaskLists+0x70>)
 801528c:	f7fe faba 	bl	8013804 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8015290:	480b      	ldr	r0, [pc, #44]	@ (80152c0 <prvInitialiseTaskLists+0x74>)
 8015292:	f7fe fab7 	bl	8013804 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8015296:	4b0b      	ldr	r3, [pc, #44]	@ (80152c4 <prvInitialiseTaskLists+0x78>)
 8015298:	4a05      	ldr	r2, [pc, #20]	@ (80152b0 <prvInitialiseTaskLists+0x64>)
 801529a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801529c:	4b0a      	ldr	r3, [pc, #40]	@ (80152c8 <prvInitialiseTaskLists+0x7c>)
 801529e:	4a05      	ldr	r2, [pc, #20]	@ (80152b4 <prvInitialiseTaskLists+0x68>)
 80152a0:	601a      	str	r2, [r3, #0]
}
 80152a2:	bf00      	nop
 80152a4:	3708      	adds	r7, #8
 80152a6:	46bd      	mov	sp, r7
 80152a8:	bd80      	pop	{r7, pc}
 80152aa:	bf00      	nop
 80152ac:	20001530 	.word	0x20001530
 80152b0:	20001594 	.word	0x20001594
 80152b4:	200015a8 	.word	0x200015a8
 80152b8:	200015c4 	.word	0x200015c4
 80152bc:	200015d8 	.word	0x200015d8
 80152c0:	200015f0 	.word	0x200015f0
 80152c4:	200015bc 	.word	0x200015bc
 80152c8:	200015c0 	.word	0x200015c0

080152cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b082      	sub	sp, #8
 80152d0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80152d2:	e019      	b.n	8015308 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80152d4:	f001 f852 	bl	801637c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152d8:	4b10      	ldr	r3, [pc, #64]	@ (801531c <prvCheckTasksWaitingTermination+0x50>)
 80152da:	68db      	ldr	r3, [r3, #12]
 80152dc:	68db      	ldr	r3, [r3, #12]
 80152de:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	3304      	adds	r3, #4
 80152e4:	4618      	mov	r0, r3
 80152e6:	f7fe fb17 	bl	8013918 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80152ea:	4b0d      	ldr	r3, [pc, #52]	@ (8015320 <prvCheckTasksWaitingTermination+0x54>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	3b01      	subs	r3, #1
 80152f0:	4a0b      	ldr	r2, [pc, #44]	@ (8015320 <prvCheckTasksWaitingTermination+0x54>)
 80152f2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80152f4:	4b0b      	ldr	r3, [pc, #44]	@ (8015324 <prvCheckTasksWaitingTermination+0x58>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	3b01      	subs	r3, #1
 80152fa:	4a0a      	ldr	r2, [pc, #40]	@ (8015324 <prvCheckTasksWaitingTermination+0x58>)
 80152fc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80152fe:	f001 f86f 	bl	80163e0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8015302:	6878      	ldr	r0, [r7, #4]
 8015304:	f000 f8e4 	bl	80154d0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015308:	4b06      	ldr	r3, [pc, #24]	@ (8015324 <prvCheckTasksWaitingTermination+0x58>)
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d1e1      	bne.n	80152d4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8015310:	bf00      	nop
 8015312:	bf00      	nop
 8015314:	3708      	adds	r7, #8
 8015316:	46bd      	mov	sp, r7
 8015318:	bd80      	pop	{r7, pc}
 801531a:	bf00      	nop
 801531c:	200015d8 	.word	0x200015d8
 8015320:	20001604 	.word	0x20001604
 8015324:	200015ec 	.word	0x200015ec

08015328 <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 8015328:	b580      	push	{r7, lr}
 801532a:	b086      	sub	sp, #24
 801532c:	af00      	add	r7, sp, #0
 801532e:	60f8      	str	r0, [r7, #12]
 8015330:	60b9      	str	r1, [r7, #8]
 8015332:	607a      	str	r2, [r7, #4]
 8015334:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d102      	bne.n	8015342 <vTaskGetInfo+0x1a>
 801533c:	4b2c      	ldr	r3, [pc, #176]	@ (80153f0 <vTaskGetInfo+0xc8>)
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	e000      	b.n	8015344 <vTaskGetInfo+0x1c>
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	617b      	str	r3, [r7, #20]

        pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8015346:	68bb      	ldr	r3, [r7, #8]
 8015348:	697a      	ldr	r2, [r7, #20]
 801534a:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 801534c:	697b      	ldr	r3, [r7, #20]
 801534e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015352:	68bb      	ldr	r3, [r7, #8]
 8015354:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8015356:	697b      	ldr	r3, [r7, #20]
 8015358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801535a:	68bb      	ldr	r3, [r7, #8]
 801535c:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 801535e:	697b      	ldr	r3, [r7, #20]
 8015360:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015362:	68bb      	ldr	r3, [r7, #8]
 8015364:	61da      	str	r2, [r3, #28]
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8015366:	697b      	ldr	r3, [r7, #20]
 8015368:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801536a:	68bb      	ldr	r3, [r7, #8]
 801536c:	609a      	str	r2, [r3, #8]

        #if ( configUSE_MUTEXES == 1 )
            {
                pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 801536e:	697b      	ldr	r3, [r7, #20]
 8015370:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015372:	68bb      	ldr	r3, [r7, #8]
 8015374:	615a      	str	r2, [r3, #20]
            {
                pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
            }
        #else
            {
                pxTaskStatus->ulRunTimeCounter = 0;
 8015376:	68bb      	ldr	r3, [r7, #8]
 8015378:	2200      	movs	r2, #0
 801537a:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 801537c:	78fb      	ldrb	r3, [r7, #3]
 801537e:	2b05      	cmp	r3, #5
 8015380:	d01a      	beq.n	80153b8 <vTaskGetInfo+0x90>
        {
            if( pxTCB == pxCurrentTCB )
 8015382:	4b1b      	ldr	r3, [pc, #108]	@ (80153f0 <vTaskGetInfo+0xc8>)
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	697a      	ldr	r2, [r7, #20]
 8015388:	429a      	cmp	r2, r3
 801538a:	d103      	bne.n	8015394 <vTaskGetInfo+0x6c>
            {
                pxTaskStatus->eCurrentState = eRunning;
 801538c:	68bb      	ldr	r3, [r7, #8]
 801538e:	2200      	movs	r2, #0
 8015390:	731a      	strb	r2, [r3, #12]
 8015392:	e018      	b.n	80153c6 <vTaskGetInfo+0x9e>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 8015394:	68bb      	ldr	r3, [r7, #8]
 8015396:	78fa      	ldrb	r2, [r7, #3]
 8015398:	731a      	strb	r2, [r3, #12]
                #if ( INCLUDE_vTaskSuspend == 1 )
                    {
                        /* If the task is in the suspended list then there is a
                         *  chance it is actually just blocked indefinitely - so really
                         *  it should be reported as being in the Blocked state. */
                        if( eState == eSuspended )
 801539a:	78fb      	ldrb	r3, [r7, #3]
 801539c:	2b03      	cmp	r3, #3
 801539e:	d112      	bne.n	80153c6 <vTaskGetInfo+0x9e>
                        {
                            vTaskSuspendAll();
 80153a0:	f7ff fb76 	bl	8014a90 <vTaskSuspendAll>
                            {
                                if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80153a4:	697b      	ldr	r3, [r7, #20]
 80153a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d002      	beq.n	80153b2 <vTaskGetInfo+0x8a>
                                {
                                    pxTaskStatus->eCurrentState = eBlocked;
 80153ac:	68bb      	ldr	r3, [r7, #8]
 80153ae:	2202      	movs	r2, #2
 80153b0:	731a      	strb	r2, [r3, #12]
                                }
                            }
                            ( void ) xTaskResumeAll();
 80153b2:	f7ff fb7b 	bl	8014aac <xTaskResumeAll>
 80153b6:	e006      	b.n	80153c6 <vTaskGetInfo+0x9e>
                #endif /* INCLUDE_vTaskSuspend */
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80153b8:	6978      	ldr	r0, [r7, #20]
 80153ba:	f7ff fa9d 	bl	80148f8 <eTaskGetState>
 80153be:	4603      	mov	r3, r0
 80153c0:	461a      	mov	r2, r3
 80153c2:	68bb      	ldr	r3, [r7, #8]
 80153c4:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d009      	beq.n	80153e0 <vTaskGetInfo+0xb8>
                {
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
                }
            #else
                {
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80153cc:	697b      	ldr	r3, [r7, #20]
 80153ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153d0:	4618      	mov	r0, r3
 80153d2:	f000 f861 	bl	8015498 <prvTaskCheckFreeStackSpace>
 80153d6:	4603      	mov	r3, r0
 80153d8:	461a      	mov	r2, r3
 80153da:	68bb      	ldr	r3, [r7, #8]
 80153dc:	841a      	strh	r2, [r3, #32]
        }
        else
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }
    }
 80153de:	e002      	b.n	80153e6 <vTaskGetInfo+0xbe>
            pxTaskStatus->usStackHighWaterMark = 0;
 80153e0:	68bb      	ldr	r3, [r7, #8]
 80153e2:	2200      	movs	r2, #0
 80153e4:	841a      	strh	r2, [r3, #32]
    }
 80153e6:	bf00      	nop
 80153e8:	3718      	adds	r7, #24
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}
 80153ee:	bf00      	nop
 80153f0:	2000152c 	.word	0x2000152c

080153f4 <prvListTasksWithinSingleList>:
#if ( configUSE_TRACE_FACILITY == 1 )

    static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
                                                     List_t * pxList,
                                                     eTaskState eState )
    {
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b08a      	sub	sp, #40	@ 0x28
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	60f8      	str	r0, [r7, #12]
 80153fc:	60b9      	str	r1, [r7, #8]
 80153fe:	4613      	mov	r3, r2
 8015400:	71fb      	strb	r3, [r7, #7]
        configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
        UBaseType_t uxTask = 0;
 8015402:	2300      	movs	r3, #0
 8015404:	627b      	str	r3, [r7, #36]	@ 0x24

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8015406:	68bb      	ldr	r3, [r7, #8]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d03f      	beq.n	801548e <prvListTasksWithinSingleList+0x9a>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801540e:	68bb      	ldr	r3, [r7, #8]
 8015410:	623b      	str	r3, [r7, #32]
 8015412:	6a3b      	ldr	r3, [r7, #32]
 8015414:	685b      	ldr	r3, [r3, #4]
 8015416:	685a      	ldr	r2, [r3, #4]
 8015418:	6a3b      	ldr	r3, [r7, #32]
 801541a:	605a      	str	r2, [r3, #4]
 801541c:	6a3b      	ldr	r3, [r7, #32]
 801541e:	685a      	ldr	r2, [r3, #4]
 8015420:	6a3b      	ldr	r3, [r7, #32]
 8015422:	3308      	adds	r3, #8
 8015424:	429a      	cmp	r2, r3
 8015426:	d104      	bne.n	8015432 <prvListTasksWithinSingleList+0x3e>
 8015428:	6a3b      	ldr	r3, [r7, #32]
 801542a:	685b      	ldr	r3, [r3, #4]
 801542c:	685a      	ldr	r2, [r3, #4]
 801542e:	6a3b      	ldr	r3, [r7, #32]
 8015430:	605a      	str	r2, [r3, #4]
 8015432:	6a3b      	ldr	r3, [r7, #32]
 8015434:	685b      	ldr	r3, [r3, #4]
 8015436:	68db      	ldr	r3, [r3, #12]
 8015438:	61fb      	str	r3, [r7, #28]
             * pxTaskStatusArray array for each task that is referenced from
             * pxList.  See the definition of TaskStatus_t in task.h for the
             * meaning of each TaskStatus_t structure member. */
            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801543a:	68bb      	ldr	r3, [r7, #8]
 801543c:	61bb      	str	r3, [r7, #24]
 801543e:	69bb      	ldr	r3, [r7, #24]
 8015440:	685b      	ldr	r3, [r3, #4]
 8015442:	685a      	ldr	r2, [r3, #4]
 8015444:	69bb      	ldr	r3, [r7, #24]
 8015446:	605a      	str	r2, [r3, #4]
 8015448:	69bb      	ldr	r3, [r7, #24]
 801544a:	685a      	ldr	r2, [r3, #4]
 801544c:	69bb      	ldr	r3, [r7, #24]
 801544e:	3308      	adds	r3, #8
 8015450:	429a      	cmp	r2, r3
 8015452:	d104      	bne.n	801545e <prvListTasksWithinSingleList+0x6a>
 8015454:	69bb      	ldr	r3, [r7, #24]
 8015456:	685b      	ldr	r3, [r3, #4]
 8015458:	685a      	ldr	r2, [r3, #4]
 801545a:	69bb      	ldr	r3, [r7, #24]
 801545c:	605a      	str	r2, [r3, #4]
 801545e:	69bb      	ldr	r3, [r7, #24]
 8015460:	685b      	ldr	r3, [r3, #4]
 8015462:	68db      	ldr	r3, [r3, #12]
 8015464:	617b      	str	r3, [r7, #20]
                vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8015466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015468:	4613      	mov	r3, r2
 801546a:	00db      	lsls	r3, r3, #3
 801546c:	4413      	add	r3, r2
 801546e:	009b      	lsls	r3, r3, #2
 8015470:	461a      	mov	r2, r3
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	1899      	adds	r1, r3, r2
 8015476:	79fb      	ldrb	r3, [r7, #7]
 8015478:	2201      	movs	r2, #1
 801547a:	6978      	ldr	r0, [r7, #20]
 801547c:	f7ff ff54 	bl	8015328 <vTaskGetInfo>
                uxTask++;
 8015480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015482:	3301      	adds	r3, #1
 8015484:	627b      	str	r3, [r7, #36]	@ 0x24
            } while( pxNextTCB != pxFirstTCB );
 8015486:	697a      	ldr	r2, [r7, #20]
 8015488:	69fb      	ldr	r3, [r7, #28]
 801548a:	429a      	cmp	r2, r3
 801548c:	d1d5      	bne.n	801543a <prvListTasksWithinSingleList+0x46>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return uxTask;
 801548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8015490:	4618      	mov	r0, r3
 8015492:	3728      	adds	r7, #40	@ 0x28
 8015494:	46bd      	mov	sp, r7
 8015496:	bd80      	pop	{r7, pc}

08015498 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8015498:	b480      	push	{r7}
 801549a:	b085      	sub	sp, #20
 801549c:	af00      	add	r7, sp, #0
 801549e:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 80154a0:	2300      	movs	r3, #0
 80154a2:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80154a4:	e005      	b.n	80154b2 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	3301      	adds	r3, #1
 80154aa:	607b      	str	r3, [r7, #4]
            ulCount++;
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	3301      	adds	r3, #1
 80154b0:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	781b      	ldrb	r3, [r3, #0]
 80154b6:	2ba5      	cmp	r3, #165	@ 0xa5
 80154b8:	d0f5      	beq.n	80154a6 <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	089b      	lsrs	r3, r3, #2
 80154be:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	b29b      	uxth	r3, r3
    }
 80154c4:	4618      	mov	r0, r3
 80154c6:	3714      	adds	r7, #20
 80154c8:	46bd      	mov	sp, r7
 80154ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ce:	4770      	bx	lr

080154d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b082      	sub	sp, #8
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80154dc:	4618      	mov	r0, r3
 80154de:	f001 f959 	bl	8016794 <vPortFree>
                vPortFree( pxTCB );
 80154e2:	6878      	ldr	r0, [r7, #4]
 80154e4:	f001 f956 	bl	8016794 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80154e8:	bf00      	nop
 80154ea:	3708      	adds	r7, #8
 80154ec:	46bd      	mov	sp, r7
 80154ee:	bd80      	pop	{r7, pc}

080154f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80154f0:	b480      	push	{r7}
 80154f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80154f4:	4b0a      	ldr	r3, [pc, #40]	@ (8015520 <prvResetNextTaskUnblockTime+0x30>)
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d104      	bne.n	8015508 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80154fe:	4b09      	ldr	r3, [pc, #36]	@ (8015524 <prvResetNextTaskUnblockTime+0x34>)
 8015500:	f04f 32ff 	mov.w	r2, #4294967295
 8015504:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8015506:	e005      	b.n	8015514 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8015508:	4b05      	ldr	r3, [pc, #20]	@ (8015520 <prvResetNextTaskUnblockTime+0x30>)
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	68db      	ldr	r3, [r3, #12]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	4a04      	ldr	r2, [pc, #16]	@ (8015524 <prvResetNextTaskUnblockTime+0x34>)
 8015512:	6013      	str	r3, [r2, #0]
}
 8015514:	bf00      	nop
 8015516:	46bd      	mov	sp, r7
 8015518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551c:	4770      	bx	lr
 801551e:	bf00      	nop
 8015520:	200015bc 	.word	0x200015bc
 8015524:	20001624 	.word	0x20001624

08015528 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8015528:	b480      	push	{r7}
 801552a:	b083      	sub	sp, #12
 801552c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 801552e:	4b0b      	ldr	r3, [pc, #44]	@ (801555c <xTaskGetSchedulerState+0x34>)
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d102      	bne.n	801553c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8015536:	2301      	movs	r3, #1
 8015538:	607b      	str	r3, [r7, #4]
 801553a:	e008      	b.n	801554e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801553c:	4b08      	ldr	r3, [pc, #32]	@ (8015560 <xTaskGetSchedulerState+0x38>)
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d102      	bne.n	801554a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8015544:	2302      	movs	r3, #2
 8015546:	607b      	str	r3, [r7, #4]
 8015548:	e001      	b.n	801554e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 801554a:	2300      	movs	r3, #0
 801554c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 801554e:	687b      	ldr	r3, [r7, #4]
    }
 8015550:	4618      	mov	r0, r3
 8015552:	370c      	adds	r7, #12
 8015554:	46bd      	mov	sp, r7
 8015556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801555a:	4770      	bx	lr
 801555c:	20001610 	.word	0x20001610
 8015560:	2000162c 	.word	0x2000162c

08015564 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8015564:	b580      	push	{r7, lr}
 8015566:	b084      	sub	sp, #16
 8015568:	af00      	add	r7, sp, #0
 801556a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8015570:	2300      	movs	r3, #0
 8015572:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d05e      	beq.n	8015638 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801557a:	68bb      	ldr	r3, [r7, #8]
 801557c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801557e:	4b31      	ldr	r3, [pc, #196]	@ (8015644 <xTaskPriorityInherit+0xe0>)
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015584:	429a      	cmp	r2, r3
 8015586:	d24e      	bcs.n	8015626 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015588:	68bb      	ldr	r3, [r7, #8]
 801558a:	699b      	ldr	r3, [r3, #24]
 801558c:	2b00      	cmp	r3, #0
 801558e:	db06      	blt.n	801559e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015590:	4b2c      	ldr	r3, [pc, #176]	@ (8015644 <xTaskPriorityInherit+0xe0>)
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015596:	f1c3 0205 	rsb	r2, r3, #5
 801559a:	68bb      	ldr	r3, [r7, #8]
 801559c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801559e:	68bb      	ldr	r3, [r7, #8]
 80155a0:	6959      	ldr	r1, [r3, #20]
 80155a2:	68bb      	ldr	r3, [r7, #8]
 80155a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155a6:	4613      	mov	r3, r2
 80155a8:	009b      	lsls	r3, r3, #2
 80155aa:	4413      	add	r3, r2
 80155ac:	009b      	lsls	r3, r3, #2
 80155ae:	4a26      	ldr	r2, [pc, #152]	@ (8015648 <xTaskPriorityInherit+0xe4>)
 80155b0:	4413      	add	r3, r2
 80155b2:	4299      	cmp	r1, r3
 80155b4:	d12f      	bne.n	8015616 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80155b6:	68bb      	ldr	r3, [r7, #8]
 80155b8:	3304      	adds	r3, #4
 80155ba:	4618      	mov	r0, r3
 80155bc:	f7fe f9ac 	bl	8013918 <uxListRemove>
 80155c0:	4603      	mov	r3, r0
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d10a      	bne.n	80155dc <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80155c6:	68bb      	ldr	r3, [r7, #8]
 80155c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155ca:	2201      	movs	r2, #1
 80155cc:	fa02 f303 	lsl.w	r3, r2, r3
 80155d0:	43da      	mvns	r2, r3
 80155d2:	4b1e      	ldr	r3, [pc, #120]	@ (801564c <xTaskPriorityInherit+0xe8>)
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	4013      	ands	r3, r2
 80155d8:	4a1c      	ldr	r2, [pc, #112]	@ (801564c <xTaskPriorityInherit+0xe8>)
 80155da:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80155dc:	4b19      	ldr	r3, [pc, #100]	@ (8015644 <xTaskPriorityInherit+0xe0>)
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155e2:	68bb      	ldr	r3, [r7, #8]
 80155e4:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80155e6:	68bb      	ldr	r3, [r7, #8]
 80155e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155ea:	2201      	movs	r2, #1
 80155ec:	409a      	lsls	r2, r3
 80155ee:	4b17      	ldr	r3, [pc, #92]	@ (801564c <xTaskPriorityInherit+0xe8>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	4313      	orrs	r3, r2
 80155f4:	4a15      	ldr	r2, [pc, #84]	@ (801564c <xTaskPriorityInherit+0xe8>)
 80155f6:	6013      	str	r3, [r2, #0]
 80155f8:	68bb      	ldr	r3, [r7, #8]
 80155fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155fc:	4613      	mov	r3, r2
 80155fe:	009b      	lsls	r3, r3, #2
 8015600:	4413      	add	r3, r2
 8015602:	009b      	lsls	r3, r3, #2
 8015604:	4a10      	ldr	r2, [pc, #64]	@ (8015648 <xTaskPriorityInherit+0xe4>)
 8015606:	441a      	add	r2, r3
 8015608:	68bb      	ldr	r3, [r7, #8]
 801560a:	3304      	adds	r3, #4
 801560c:	4619      	mov	r1, r3
 801560e:	4610      	mov	r0, r2
 8015610:	f7fe f925 	bl	801385e <vListInsertEnd>
 8015614:	e004      	b.n	8015620 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015616:	4b0b      	ldr	r3, [pc, #44]	@ (8015644 <xTaskPriorityInherit+0xe0>)
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801561c:	68bb      	ldr	r3, [r7, #8]
 801561e:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8015620:	2301      	movs	r3, #1
 8015622:	60fb      	str	r3, [r7, #12]
 8015624:	e008      	b.n	8015638 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801562a:	4b06      	ldr	r3, [pc, #24]	@ (8015644 <xTaskPriorityInherit+0xe0>)
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015630:	429a      	cmp	r2, r3
 8015632:	d201      	bcs.n	8015638 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8015634:	2301      	movs	r3, #1
 8015636:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8015638:	68fb      	ldr	r3, [r7, #12]
    }
 801563a:	4618      	mov	r0, r3
 801563c:	3710      	adds	r7, #16
 801563e:	46bd      	mov	sp, r7
 8015640:	bd80      	pop	{r7, pc}
 8015642:	bf00      	nop
 8015644:	2000152c 	.word	0x2000152c
 8015648:	20001530 	.word	0x20001530
 801564c:	2000160c 	.word	0x2000160c

08015650 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8015650:	b580      	push	{r7, lr}
 8015652:	b086      	sub	sp, #24
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 801565c:	2300      	movs	r3, #0
 801565e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d065      	beq.n	8015732 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8015666:	4b35      	ldr	r3, [pc, #212]	@ (801573c <xTaskPriorityDisinherit+0xec>)
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	693a      	ldr	r2, [r7, #16]
 801566c:	429a      	cmp	r2, r3
 801566e:	d00b      	beq.n	8015688 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8015670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015674:	f383 8811 	msr	BASEPRI, r3
 8015678:	f3bf 8f6f 	isb	sy
 801567c:	f3bf 8f4f 	dsb	sy
 8015680:	60fb      	str	r3, [r7, #12]
    }
 8015682:	bf00      	nop
 8015684:	bf00      	nop
 8015686:	e7fd      	b.n	8015684 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8015688:	693b      	ldr	r3, [r7, #16]
 801568a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801568c:	2b00      	cmp	r3, #0
 801568e:	d10b      	bne.n	80156a8 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8015690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015694:	f383 8811 	msr	BASEPRI, r3
 8015698:	f3bf 8f6f 	isb	sy
 801569c:	f3bf 8f4f 	dsb	sy
 80156a0:	60bb      	str	r3, [r7, #8]
    }
 80156a2:	bf00      	nop
 80156a4:	bf00      	nop
 80156a6:	e7fd      	b.n	80156a4 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80156a8:	693b      	ldr	r3, [r7, #16]
 80156aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80156ac:	1e5a      	subs	r2, r3, #1
 80156ae:	693b      	ldr	r3, [r7, #16]
 80156b0:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80156b2:	693b      	ldr	r3, [r7, #16]
 80156b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80156b6:	693b      	ldr	r3, [r7, #16]
 80156b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80156ba:	429a      	cmp	r2, r3
 80156bc:	d039      	beq.n	8015732 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80156be:	693b      	ldr	r3, [r7, #16]
 80156c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d135      	bne.n	8015732 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80156c6:	693b      	ldr	r3, [r7, #16]
 80156c8:	3304      	adds	r3, #4
 80156ca:	4618      	mov	r0, r3
 80156cc:	f7fe f924 	bl	8013918 <uxListRemove>
 80156d0:	4603      	mov	r3, r0
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d10a      	bne.n	80156ec <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80156d6:	693b      	ldr	r3, [r7, #16]
 80156d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156da:	2201      	movs	r2, #1
 80156dc:	fa02 f303 	lsl.w	r3, r2, r3
 80156e0:	43da      	mvns	r2, r3
 80156e2:	4b17      	ldr	r3, [pc, #92]	@ (8015740 <xTaskPriorityDisinherit+0xf0>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	4013      	ands	r3, r2
 80156e8:	4a15      	ldr	r2, [pc, #84]	@ (8015740 <xTaskPriorityDisinherit+0xf0>)
 80156ea:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80156ec:	693b      	ldr	r3, [r7, #16]
 80156ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80156f0:	693b      	ldr	r3, [r7, #16]
 80156f2:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80156f4:	693b      	ldr	r3, [r7, #16]
 80156f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156f8:	f1c3 0205 	rsb	r2, r3, #5
 80156fc:	693b      	ldr	r3, [r7, #16]
 80156fe:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8015700:	693b      	ldr	r3, [r7, #16]
 8015702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015704:	2201      	movs	r2, #1
 8015706:	409a      	lsls	r2, r3
 8015708:	4b0d      	ldr	r3, [pc, #52]	@ (8015740 <xTaskPriorityDisinherit+0xf0>)
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	4313      	orrs	r3, r2
 801570e:	4a0c      	ldr	r2, [pc, #48]	@ (8015740 <xTaskPriorityDisinherit+0xf0>)
 8015710:	6013      	str	r3, [r2, #0]
 8015712:	693b      	ldr	r3, [r7, #16]
 8015714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015716:	4613      	mov	r3, r2
 8015718:	009b      	lsls	r3, r3, #2
 801571a:	4413      	add	r3, r2
 801571c:	009b      	lsls	r3, r3, #2
 801571e:	4a09      	ldr	r2, [pc, #36]	@ (8015744 <xTaskPriorityDisinherit+0xf4>)
 8015720:	441a      	add	r2, r3
 8015722:	693b      	ldr	r3, [r7, #16]
 8015724:	3304      	adds	r3, #4
 8015726:	4619      	mov	r1, r3
 8015728:	4610      	mov	r0, r2
 801572a:	f7fe f898 	bl	801385e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 801572e:	2301      	movs	r3, #1
 8015730:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8015732:	697b      	ldr	r3, [r7, #20]
    }
 8015734:	4618      	mov	r0, r3
 8015736:	3718      	adds	r7, #24
 8015738:	46bd      	mov	sp, r7
 801573a:	bd80      	pop	{r7, pc}
 801573c:	2000152c 	.word	0x2000152c
 8015740:	2000160c 	.word	0x2000160c
 8015744:	20001530 	.word	0x20001530

08015748 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8015748:	b580      	push	{r7, lr}
 801574a:	b088      	sub	sp, #32
 801574c:	af00      	add	r7, sp, #0
 801574e:	6078      	str	r0, [r7, #4]
 8015750:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015756:	2301      	movs	r3, #1
 8015758:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d079      	beq.n	8015854 <vTaskPriorityDisinheritAfterTimeout+0x10c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8015760:	69bb      	ldr	r3, [r7, #24]
 8015762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015764:	2b00      	cmp	r3, #0
 8015766:	d10b      	bne.n	8015780 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8015768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801576c:	f383 8811 	msr	BASEPRI, r3
 8015770:	f3bf 8f6f 	isb	sy
 8015774:	f3bf 8f4f 	dsb	sy
 8015778:	60fb      	str	r3, [r7, #12]
    }
 801577a:	bf00      	nop
 801577c:	bf00      	nop
 801577e:	e7fd      	b.n	801577c <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015780:	69bb      	ldr	r3, [r7, #24]
 8015782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015784:	683a      	ldr	r2, [r7, #0]
 8015786:	429a      	cmp	r2, r3
 8015788:	d902      	bls.n	8015790 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 801578a:	683b      	ldr	r3, [r7, #0]
 801578c:	61fb      	str	r3, [r7, #28]
 801578e:	e002      	b.n	8015796 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8015790:	69bb      	ldr	r3, [r7, #24]
 8015792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015794:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8015796:	69bb      	ldr	r3, [r7, #24]
 8015798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801579a:	69fa      	ldr	r2, [r7, #28]
 801579c:	429a      	cmp	r2, r3
 801579e:	d059      	beq.n	8015854 <vTaskPriorityDisinheritAfterTimeout+0x10c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80157a0:	69bb      	ldr	r3, [r7, #24]
 80157a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80157a4:	697a      	ldr	r2, [r7, #20]
 80157a6:	429a      	cmp	r2, r3
 80157a8:	d154      	bne.n	8015854 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80157aa:	4b2c      	ldr	r3, [pc, #176]	@ (801585c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	69ba      	ldr	r2, [r7, #24]
 80157b0:	429a      	cmp	r2, r3
 80157b2:	d10b      	bne.n	80157cc <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 80157b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157b8:	f383 8811 	msr	BASEPRI, r3
 80157bc:	f3bf 8f6f 	isb	sy
 80157c0:	f3bf 8f4f 	dsb	sy
 80157c4:	60bb      	str	r3, [r7, #8]
    }
 80157c6:	bf00      	nop
 80157c8:	bf00      	nop
 80157ca:	e7fd      	b.n	80157c8 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80157cc:	69bb      	ldr	r3, [r7, #24]
 80157ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157d0:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80157d2:	69bb      	ldr	r3, [r7, #24]
 80157d4:	69fa      	ldr	r2, [r7, #28]
 80157d6:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80157d8:	69bb      	ldr	r3, [r7, #24]
 80157da:	699b      	ldr	r3, [r3, #24]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	db04      	blt.n	80157ea <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80157e0:	69fb      	ldr	r3, [r7, #28]
 80157e2:	f1c3 0205 	rsb	r2, r3, #5
 80157e6:	69bb      	ldr	r3, [r7, #24]
 80157e8:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80157ea:	69bb      	ldr	r3, [r7, #24]
 80157ec:	6959      	ldr	r1, [r3, #20]
 80157ee:	693a      	ldr	r2, [r7, #16]
 80157f0:	4613      	mov	r3, r2
 80157f2:	009b      	lsls	r3, r3, #2
 80157f4:	4413      	add	r3, r2
 80157f6:	009b      	lsls	r3, r3, #2
 80157f8:	4a19      	ldr	r2, [pc, #100]	@ (8015860 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80157fa:	4413      	add	r3, r2
 80157fc:	4299      	cmp	r1, r3
 80157fe:	d129      	bne.n	8015854 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015800:	69bb      	ldr	r3, [r7, #24]
 8015802:	3304      	adds	r3, #4
 8015804:	4618      	mov	r0, r3
 8015806:	f7fe f887 	bl	8013918 <uxListRemove>
 801580a:	4603      	mov	r3, r0
 801580c:	2b00      	cmp	r3, #0
 801580e:	d10a      	bne.n	8015826 <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8015810:	69bb      	ldr	r3, [r7, #24]
 8015812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015814:	2201      	movs	r2, #1
 8015816:	fa02 f303 	lsl.w	r3, r2, r3
 801581a:	43da      	mvns	r2, r3
 801581c:	4b11      	ldr	r3, [pc, #68]	@ (8015864 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	4013      	ands	r3, r2
 8015822:	4a10      	ldr	r2, [pc, #64]	@ (8015864 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015824:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8015826:	69bb      	ldr	r3, [r7, #24]
 8015828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801582a:	2201      	movs	r2, #1
 801582c:	409a      	lsls	r2, r3
 801582e:	4b0d      	ldr	r3, [pc, #52]	@ (8015864 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	4313      	orrs	r3, r2
 8015834:	4a0b      	ldr	r2, [pc, #44]	@ (8015864 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015836:	6013      	str	r3, [r2, #0]
 8015838:	69bb      	ldr	r3, [r7, #24]
 801583a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801583c:	4613      	mov	r3, r2
 801583e:	009b      	lsls	r3, r3, #2
 8015840:	4413      	add	r3, r2
 8015842:	009b      	lsls	r3, r3, #2
 8015844:	4a06      	ldr	r2, [pc, #24]	@ (8015860 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8015846:	441a      	add	r2, r3
 8015848:	69bb      	ldr	r3, [r7, #24]
 801584a:	3304      	adds	r3, #4
 801584c:	4619      	mov	r1, r3
 801584e:	4610      	mov	r0, r2
 8015850:	f7fe f805 	bl	801385e <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8015854:	bf00      	nop
 8015856:	3720      	adds	r7, #32
 8015858:	46bd      	mov	sp, r7
 801585a:	bd80      	pop	{r7, pc}
 801585c:	2000152c 	.word	0x2000152c
 8015860:	20001530 	.word	0x20001530
 8015864:	2000160c 	.word	0x2000160c

08015868 <prvWriteNameToBuffer>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

    static char * prvWriteNameToBuffer( char * pcBuffer,
                                        const char * pcTaskName )
    {
 8015868:	b580      	push	{r7, lr}
 801586a:	b084      	sub	sp, #16
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
 8015870:	6039      	str	r1, [r7, #0]
        size_t x;

        /* Start by copying the entire string. */
        strcpy( pcBuffer, pcTaskName );
 8015872:	6839      	ldr	r1, [r7, #0]
 8015874:	6878      	ldr	r0, [r7, #4]
 8015876:	f002 ff2c 	bl	80186d2 <strcpy>

        /* Pad the end of the string with spaces to ensure columns line up when
         * printed out. */
        for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 801587a:	6878      	ldr	r0, [r7, #4]
 801587c:	f7f2 fd28 	bl	80082d0 <strlen>
 8015880:	60f8      	str	r0, [r7, #12]
 8015882:	e007      	b.n	8015894 <prvWriteNameToBuffer+0x2c>
        {
            pcBuffer[ x ] = ' ';
 8015884:	687a      	ldr	r2, [r7, #4]
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	4413      	add	r3, r2
 801588a:	2220      	movs	r2, #32
 801588c:	701a      	strb	r2, [r3, #0]
        for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	3301      	adds	r3, #1
 8015892:	60fb      	str	r3, [r7, #12]
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	2b08      	cmp	r3, #8
 8015898:	d9f4      	bls.n	8015884 <prvWriteNameToBuffer+0x1c>
        }

        /* Terminate. */
        pcBuffer[ x ] = ( char ) 0x00;
 801589a:	687a      	ldr	r2, [r7, #4]
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	4413      	add	r3, r2
 80158a0:	2200      	movs	r2, #0
 80158a2:	701a      	strb	r2, [r3, #0]

        /* Return the new end of string. */
        return &( pcBuffer[ x ] );
 80158a4:	687a      	ldr	r2, [r7, #4]
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	4413      	add	r3, r2
    }
 80158aa:	4618      	mov	r0, r3
 80158ac:	3710      	adds	r7, #16
 80158ae:	46bd      	mov	sp, r7
 80158b0:	bd80      	pop	{r7, pc}
	...

080158b4 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    void vTaskList( char * pcWriteBuffer )
    {
 80158b4:	b590      	push	{r4, r7, lr}
 80158b6:	b089      	sub	sp, #36	@ 0x24
 80158b8:	af02      	add	r7, sp, #8
 80158ba:	6078      	str	r0, [r7, #4]
         * through a call to vTaskList().
         */


        /* Make sure the write buffer does not contain a string. */
        *pcWriteBuffer = ( char ) 0x00;
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	2200      	movs	r2, #0
 80158c0:	701a      	strb	r2, [r3, #0]

        /* Take a snapshot of the number of tasks in case it changes while this
         * function is executing. */
        uxArraySize = uxCurrentNumberOfTasks;
 80158c2:	4b45      	ldr	r3, [pc, #276]	@ (80159d8 <vTaskList+0x124>)
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	60fb      	str	r3, [r7, #12]

        /* Allocate an array index for each task.  NOTE!  if
         * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
         * equate to NULL. */
        pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80158c8:	4b43      	ldr	r3, [pc, #268]	@ (80159d8 <vTaskList+0x124>)
 80158ca:	681a      	ldr	r2, [r3, #0]
 80158cc:	4613      	mov	r3, r2
 80158ce:	00db      	lsls	r3, r3, #3
 80158d0:	4413      	add	r3, r2
 80158d2:	009b      	lsls	r3, r3, #2
 80158d4:	4618      	mov	r0, r3
 80158d6:	f000 fe7b 	bl	80165d0 <pvPortMalloc>
 80158da:	60b8      	str	r0, [r7, #8]

        if( pxTaskStatusArray != NULL )
 80158dc:	68bb      	ldr	r3, [r7, #8]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d076      	beq.n	80159d0 <vTaskList+0x11c>
        {
            /* Generate the (binary) data. */
            uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 80158e2:	2200      	movs	r2, #0
 80158e4:	68f9      	ldr	r1, [r7, #12]
 80158e6:	68b8      	ldr	r0, [r7, #8]
 80158e8:	f7ff f98e 	bl	8014c08 <uxTaskGetSystemState>
 80158ec:	60f8      	str	r0, [r7, #12]

            /* Create a human readable table from the binary data. */
            for( x = 0; x < uxArraySize; x++ )
 80158ee:	2300      	movs	r3, #0
 80158f0:	617b      	str	r3, [r7, #20]
 80158f2:	e066      	b.n	80159c2 <vTaskList+0x10e>
            {
                switch( pxTaskStatusArray[ x ].eCurrentState )
 80158f4:	697a      	ldr	r2, [r7, #20]
 80158f6:	4613      	mov	r3, r2
 80158f8:	00db      	lsls	r3, r3, #3
 80158fa:	4413      	add	r3, r2
 80158fc:	009b      	lsls	r3, r3, #2
 80158fe:	461a      	mov	r2, r3
 8015900:	68bb      	ldr	r3, [r7, #8]
 8015902:	4413      	add	r3, r2
 8015904:	7b1b      	ldrb	r3, [r3, #12]
 8015906:	2b04      	cmp	r3, #4
 8015908:	d81b      	bhi.n	8015942 <vTaskList+0x8e>
 801590a:	a201      	add	r2, pc, #4	@ (adr r2, 8015910 <vTaskList+0x5c>)
 801590c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015910:	08015925 	.word	0x08015925
 8015914:	0801592b 	.word	0x0801592b
 8015918:	08015931 	.word	0x08015931
 801591c:	08015937 	.word	0x08015937
 8015920:	0801593d 	.word	0x0801593d
                {
                    case eRunning:
                        cStatus = tskRUNNING_CHAR;
 8015924:	2358      	movs	r3, #88	@ 0x58
 8015926:	74fb      	strb	r3, [r7, #19]
                        break;
 8015928:	e00e      	b.n	8015948 <vTaskList+0x94>

                    case eReady:
                        cStatus = tskREADY_CHAR;
 801592a:	2352      	movs	r3, #82	@ 0x52
 801592c:	74fb      	strb	r3, [r7, #19]
                        break;
 801592e:	e00b      	b.n	8015948 <vTaskList+0x94>

                    case eBlocked:
                        cStatus = tskBLOCKED_CHAR;
 8015930:	2342      	movs	r3, #66	@ 0x42
 8015932:	74fb      	strb	r3, [r7, #19]
                        break;
 8015934:	e008      	b.n	8015948 <vTaskList+0x94>

                    case eSuspended:
                        cStatus = tskSUSPENDED_CHAR;
 8015936:	2353      	movs	r3, #83	@ 0x53
 8015938:	74fb      	strb	r3, [r7, #19]
                        break;
 801593a:	e005      	b.n	8015948 <vTaskList+0x94>

                    case eDeleted:
                        cStatus = tskDELETED_CHAR;
 801593c:	2344      	movs	r3, #68	@ 0x44
 801593e:	74fb      	strb	r3, [r7, #19]
                        break;
 8015940:	e002      	b.n	8015948 <vTaskList+0x94>

                    case eInvalid: /* Fall through. */
                    default:       /* Should not get here, but it is included
                                    * to prevent static checking errors. */
                        cStatus = ( char ) 0x00;
 8015942:	2300      	movs	r3, #0
 8015944:	74fb      	strb	r3, [r7, #19]
                        break;
 8015946:	bf00      	nop
                }

                /* Write the task name to the string, padding with spaces so it
                 * can be printed in tabular form more easily. */
                pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8015948:	697a      	ldr	r2, [r7, #20]
 801594a:	4613      	mov	r3, r2
 801594c:	00db      	lsls	r3, r3, #3
 801594e:	4413      	add	r3, r2
 8015950:	009b      	lsls	r3, r3, #2
 8015952:	461a      	mov	r2, r3
 8015954:	68bb      	ldr	r3, [r7, #8]
 8015956:	4413      	add	r3, r2
 8015958:	685b      	ldr	r3, [r3, #4]
 801595a:	4619      	mov	r1, r3
 801595c:	6878      	ldr	r0, [r7, #4]
 801595e:	f7ff ff83 	bl	8015868 <prvWriteNameToBuffer>
 8015962:	6078      	str	r0, [r7, #4]

                /* Write the rest of the string. */
                sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8015964:	7cf9      	ldrb	r1, [r7, #19]
 8015966:	697a      	ldr	r2, [r7, #20]
 8015968:	4613      	mov	r3, r2
 801596a:	00db      	lsls	r3, r3, #3
 801596c:	4413      	add	r3, r2
 801596e:	009b      	lsls	r3, r3, #2
 8015970:	461a      	mov	r2, r3
 8015972:	68bb      	ldr	r3, [r7, #8]
 8015974:	4413      	add	r3, r2
 8015976:	6918      	ldr	r0, [r3, #16]
 8015978:	697a      	ldr	r2, [r7, #20]
 801597a:	4613      	mov	r3, r2
 801597c:	00db      	lsls	r3, r3, #3
 801597e:	4413      	add	r3, r2
 8015980:	009b      	lsls	r3, r3, #2
 8015982:	461a      	mov	r2, r3
 8015984:	68bb      	ldr	r3, [r7, #8]
 8015986:	4413      	add	r3, r2
 8015988:	8c1b      	ldrh	r3, [r3, #32]
 801598a:	461c      	mov	r4, r3
 801598c:	697a      	ldr	r2, [r7, #20]
 801598e:	4613      	mov	r3, r2
 8015990:	00db      	lsls	r3, r3, #3
 8015992:	4413      	add	r3, r2
 8015994:	009b      	lsls	r3, r3, #2
 8015996:	461a      	mov	r2, r3
 8015998:	68bb      	ldr	r3, [r7, #8]
 801599a:	4413      	add	r3, r2
 801599c:	689b      	ldr	r3, [r3, #8]
 801599e:	9301      	str	r3, [sp, #4]
 80159a0:	9400      	str	r4, [sp, #0]
 80159a2:	4603      	mov	r3, r0
 80159a4:	460a      	mov	r2, r1
 80159a6:	490d      	ldr	r1, [pc, #52]	@ (80159dc <vTaskList+0x128>)
 80159a8:	6878      	ldr	r0, [r7, #4]
 80159aa:	f002 fc63 	bl	8018274 <siprintf>
                pcWriteBuffer += strlen( pcWriteBuffer );                                                                                                                                                                                                /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	f7f2 fc8e 	bl	80082d0 <strlen>
 80159b4:	4602      	mov	r2, r0
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	4413      	add	r3, r2
 80159ba:	607b      	str	r3, [r7, #4]
            for( x = 0; x < uxArraySize; x++ )
 80159bc:	697b      	ldr	r3, [r7, #20]
 80159be:	3301      	adds	r3, #1
 80159c0:	617b      	str	r3, [r7, #20]
 80159c2:	697a      	ldr	r2, [r7, #20]
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	429a      	cmp	r2, r3
 80159c8:	d394      	bcc.n	80158f4 <vTaskList+0x40>
            }

            /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
             * is 0 then vPortFree() will be #defined to nothing. */
            vPortFree( pxTaskStatusArray );
 80159ca:	68b8      	ldr	r0, [r7, #8]
 80159cc:	f000 fee2 	bl	8016794 <vPortFree>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80159d0:	bf00      	nop
 80159d2:	371c      	adds	r7, #28
 80159d4:	46bd      	mov	sp, r7
 80159d6:	bd90      	pop	{r4, r7, pc}
 80159d8:	20001604 	.word	0x20001604
 80159dc:	0801bd7c 	.word	0x0801bd7c

080159e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80159e0:	b480      	push	{r7}
 80159e2:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80159e4:	4b07      	ldr	r3, [pc, #28]	@ (8015a04 <pvTaskIncrementMutexHeldCount+0x24>)
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d004      	beq.n	80159f6 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80159ec:	4b05      	ldr	r3, [pc, #20]	@ (8015a04 <pvTaskIncrementMutexHeldCount+0x24>)
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80159f2:	3201      	adds	r2, #1
 80159f4:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 80159f6:	4b03      	ldr	r3, [pc, #12]	@ (8015a04 <pvTaskIncrementMutexHeldCount+0x24>)
 80159f8:	681b      	ldr	r3, [r3, #0]
    }
 80159fa:	4618      	mov	r0, r3
 80159fc:	46bd      	mov	sp, r7
 80159fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a02:	4770      	bx	lr
 8015a04:	2000152c 	.word	0x2000152c

08015a08 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b084      	sub	sp, #16
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	6078      	str	r0, [r7, #4]
 8015a10:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8015a12:	4b29      	ldr	r3, [pc, #164]	@ (8015ab8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015a18:	4b28      	ldr	r3, [pc, #160]	@ (8015abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	3304      	adds	r3, #4
 8015a1e:	4618      	mov	r0, r3
 8015a20:	f7fd ff7a 	bl	8013918 <uxListRemove>
 8015a24:	4603      	mov	r3, r0
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d10b      	bne.n	8015a42 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8015a2a:	4b24      	ldr	r3, [pc, #144]	@ (8015abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a30:	2201      	movs	r2, #1
 8015a32:	fa02 f303 	lsl.w	r3, r2, r3
 8015a36:	43da      	mvns	r2, r3
 8015a38:	4b21      	ldr	r3, [pc, #132]	@ (8015ac0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	4013      	ands	r3, r2
 8015a3e:	4a20      	ldr	r2, [pc, #128]	@ (8015ac0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015a40:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a48:	d10a      	bne.n	8015a60 <prvAddCurrentTaskToDelayedList+0x58>
 8015a4a:	683b      	ldr	r3, [r7, #0]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d007      	beq.n	8015a60 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015a50:	4b1a      	ldr	r3, [pc, #104]	@ (8015abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	3304      	adds	r3, #4
 8015a56:	4619      	mov	r1, r3
 8015a58:	481a      	ldr	r0, [pc, #104]	@ (8015ac4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8015a5a:	f7fd ff00 	bl	801385e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8015a5e:	e026      	b.n	8015aae <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8015a60:	68fa      	ldr	r2, [r7, #12]
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	4413      	add	r3, r2
 8015a66:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015a68:	4b14      	ldr	r3, [pc, #80]	@ (8015abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	68ba      	ldr	r2, [r7, #8]
 8015a6e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8015a70:	68ba      	ldr	r2, [r7, #8]
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	429a      	cmp	r2, r3
 8015a76:	d209      	bcs.n	8015a8c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015a78:	4b13      	ldr	r3, [pc, #76]	@ (8015ac8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8015a7a:	681a      	ldr	r2, [r3, #0]
 8015a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8015abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	3304      	adds	r3, #4
 8015a82:	4619      	mov	r1, r3
 8015a84:	4610      	mov	r0, r2
 8015a86:	f7fd ff0e 	bl	80138a6 <vListInsert>
}
 8015a8a:	e010      	b.n	8015aae <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8015acc <prvAddCurrentTaskToDelayedList+0xc4>)
 8015a8e:	681a      	ldr	r2, [r3, #0]
 8015a90:	4b0a      	ldr	r3, [pc, #40]	@ (8015abc <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	3304      	adds	r3, #4
 8015a96:	4619      	mov	r1, r3
 8015a98:	4610      	mov	r0, r2
 8015a9a:	f7fd ff04 	bl	80138a6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8015a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8015ad0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	68ba      	ldr	r2, [r7, #8]
 8015aa4:	429a      	cmp	r2, r3
 8015aa6:	d202      	bcs.n	8015aae <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8015aa8:	4a09      	ldr	r2, [pc, #36]	@ (8015ad0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015aaa:	68bb      	ldr	r3, [r7, #8]
 8015aac:	6013      	str	r3, [r2, #0]
}
 8015aae:	bf00      	nop
 8015ab0:	3710      	adds	r7, #16
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}
 8015ab6:	bf00      	nop
 8015ab8:	20001608 	.word	0x20001608
 8015abc:	2000152c 	.word	0x2000152c
 8015ac0:	2000160c 	.word	0x2000160c
 8015ac4:	200015f0 	.word	0x200015f0
 8015ac8:	200015c0 	.word	0x200015c0
 8015acc:	200015bc 	.word	0x200015bc
 8015ad0:	20001624 	.word	0x20001624

08015ad4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b084      	sub	sp, #16
 8015ad8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8015ada:	2300      	movs	r3, #0
 8015adc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8015ade:	f000 fae1 	bl	80160a4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8015ae2:	4b12      	ldr	r3, [pc, #72]	@ (8015b2c <xTimerCreateTimerTask+0x58>)
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d00b      	beq.n	8015b02 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8015aea:	4b11      	ldr	r3, [pc, #68]	@ (8015b30 <xTimerCreateTimerTask+0x5c>)
 8015aec:	9301      	str	r3, [sp, #4]
 8015aee:	2302      	movs	r3, #2
 8015af0:	9300      	str	r3, [sp, #0]
 8015af2:	2300      	movs	r3, #0
 8015af4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8015af8:	490e      	ldr	r1, [pc, #56]	@ (8015b34 <xTimerCreateTimerTask+0x60>)
 8015afa:	480f      	ldr	r0, [pc, #60]	@ (8015b38 <xTimerCreateTimerTask+0x64>)
 8015afc:	f7fe fd80 	bl	8014600 <xTaskCreate>
 8015b00:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d10b      	bne.n	8015b20 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8015b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b0c:	f383 8811 	msr	BASEPRI, r3
 8015b10:	f3bf 8f6f 	isb	sy
 8015b14:	f3bf 8f4f 	dsb	sy
 8015b18:	603b      	str	r3, [r7, #0]
    }
 8015b1a:	bf00      	nop
 8015b1c:	bf00      	nop
 8015b1e:	e7fd      	b.n	8015b1c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8015b20:	687b      	ldr	r3, [r7, #4]
    }
 8015b22:	4618      	mov	r0, r3
 8015b24:	3708      	adds	r7, #8
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd80      	pop	{r7, pc}
 8015b2a:	bf00      	nop
 8015b2c:	20001660 	.word	0x20001660
 8015b30:	20001664 	.word	0x20001664
 8015b34:	0801bd8c 	.word	0x0801bd8c
 8015b38:	08015c75 	.word	0x08015c75

08015b3c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b08a      	sub	sp, #40	@ 0x28
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	60f8      	str	r0, [r7, #12]
 8015b44:	60b9      	str	r1, [r7, #8]
 8015b46:	607a      	str	r2, [r7, #4]
 8015b48:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d10b      	bne.n	8015b6c <xTimerGenericCommand+0x30>
        __asm volatile
 8015b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b58:	f383 8811 	msr	BASEPRI, r3
 8015b5c:	f3bf 8f6f 	isb	sy
 8015b60:	f3bf 8f4f 	dsb	sy
 8015b64:	623b      	str	r3, [r7, #32]
    }
 8015b66:	bf00      	nop
 8015b68:	bf00      	nop
 8015b6a:	e7fd      	b.n	8015b68 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8015b6c:	4b19      	ldr	r3, [pc, #100]	@ (8015bd4 <xTimerGenericCommand+0x98>)
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d02a      	beq.n	8015bca <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8015b74:	68bb      	ldr	r3, [r7, #8]
 8015b76:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015b80:	68bb      	ldr	r3, [r7, #8]
 8015b82:	2b05      	cmp	r3, #5
 8015b84:	dc18      	bgt.n	8015bb8 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015b86:	f7ff fccf 	bl	8015528 <xTaskGetSchedulerState>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	2b02      	cmp	r3, #2
 8015b8e:	d109      	bne.n	8015ba4 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015b90:	4b10      	ldr	r3, [pc, #64]	@ (8015bd4 <xTimerGenericCommand+0x98>)
 8015b92:	6818      	ldr	r0, [r3, #0]
 8015b94:	f107 0114 	add.w	r1, r7, #20
 8015b98:	2300      	movs	r3, #0
 8015b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015b9c:	f7fe f808 	bl	8013bb0 <xQueueGenericSend>
 8015ba0:	6278      	str	r0, [r7, #36]	@ 0x24
 8015ba2:	e012      	b.n	8015bca <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8015bd4 <xTimerGenericCommand+0x98>)
 8015ba6:	6818      	ldr	r0, [r3, #0]
 8015ba8:	f107 0114 	add.w	r1, r7, #20
 8015bac:	2300      	movs	r3, #0
 8015bae:	2200      	movs	r2, #0
 8015bb0:	f7fd fffe 	bl	8013bb0 <xQueueGenericSend>
 8015bb4:	6278      	str	r0, [r7, #36]	@ 0x24
 8015bb6:	e008      	b.n	8015bca <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015bb8:	4b06      	ldr	r3, [pc, #24]	@ (8015bd4 <xTimerGenericCommand+0x98>)
 8015bba:	6818      	ldr	r0, [r3, #0]
 8015bbc:	f107 0114 	add.w	r1, r7, #20
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	683a      	ldr	r2, [r7, #0]
 8015bc4:	f7fe f8f6 	bl	8013db4 <xQueueGenericSendFromISR>
 8015bc8:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8015bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8015bcc:	4618      	mov	r0, r3
 8015bce:	3728      	adds	r7, #40	@ 0x28
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}
 8015bd4:	20001660 	.word	0x20001660

08015bd8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b088      	sub	sp, #32
 8015bdc:	af02      	add	r7, sp, #8
 8015bde:	6078      	str	r0, [r7, #4]
 8015be0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015be2:	4b23      	ldr	r3, [pc, #140]	@ (8015c70 <prvProcessExpiredTimer+0x98>)
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	68db      	ldr	r3, [r3, #12]
 8015be8:	68db      	ldr	r3, [r3, #12]
 8015bea:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015bec:	697b      	ldr	r3, [r7, #20]
 8015bee:	3304      	adds	r3, #4
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	f7fd fe91 	bl	8013918 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015bf6:	697b      	ldr	r3, [r7, #20]
 8015bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015bfc:	f003 0304 	and.w	r3, r3, #4
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d023      	beq.n	8015c4c <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015c04:	697b      	ldr	r3, [r7, #20]
 8015c06:	699a      	ldr	r2, [r3, #24]
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	18d1      	adds	r1, r2, r3
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	683a      	ldr	r2, [r7, #0]
 8015c10:	6978      	ldr	r0, [r7, #20]
 8015c12:	f000 f8d5 	bl	8015dc0 <prvInsertTimerInActiveList>
 8015c16:	4603      	mov	r3, r0
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d020      	beq.n	8015c5e <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	9300      	str	r3, [sp, #0]
 8015c20:	2300      	movs	r3, #0
 8015c22:	687a      	ldr	r2, [r7, #4]
 8015c24:	2100      	movs	r1, #0
 8015c26:	6978      	ldr	r0, [r7, #20]
 8015c28:	f7ff ff88 	bl	8015b3c <xTimerGenericCommand>
 8015c2c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8015c2e:	693b      	ldr	r3, [r7, #16]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d114      	bne.n	8015c5e <prvProcessExpiredTimer+0x86>
        __asm volatile
 8015c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c38:	f383 8811 	msr	BASEPRI, r3
 8015c3c:	f3bf 8f6f 	isb	sy
 8015c40:	f3bf 8f4f 	dsb	sy
 8015c44:	60fb      	str	r3, [r7, #12]
    }
 8015c46:	bf00      	nop
 8015c48:	bf00      	nop
 8015c4a:	e7fd      	b.n	8015c48 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015c4c:	697b      	ldr	r3, [r7, #20]
 8015c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015c52:	f023 0301 	bic.w	r3, r3, #1
 8015c56:	b2da      	uxtb	r2, r3
 8015c58:	697b      	ldr	r3, [r7, #20]
 8015c5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015c5e:	697b      	ldr	r3, [r7, #20]
 8015c60:	6a1b      	ldr	r3, [r3, #32]
 8015c62:	6978      	ldr	r0, [r7, #20]
 8015c64:	4798      	blx	r3
    }
 8015c66:	bf00      	nop
 8015c68:	3718      	adds	r7, #24
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd80      	pop	{r7, pc}
 8015c6e:	bf00      	nop
 8015c70:	20001658 	.word	0x20001658

08015c74 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b084      	sub	sp, #16
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015c7c:	f107 0308 	add.w	r3, r7, #8
 8015c80:	4618      	mov	r0, r3
 8015c82:	f000 f859 	bl	8015d38 <prvGetNextExpireTime>
 8015c86:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015c88:	68bb      	ldr	r3, [r7, #8]
 8015c8a:	4619      	mov	r1, r3
 8015c8c:	68f8      	ldr	r0, [r7, #12]
 8015c8e:	f000 f805 	bl	8015c9c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8015c92:	f000 f8d7 	bl	8015e44 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015c96:	bf00      	nop
 8015c98:	e7f0      	b.n	8015c7c <prvTimerTask+0x8>
	...

08015c9c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b084      	sub	sp, #16
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
 8015ca4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8015ca6:	f7fe fef3 	bl	8014a90 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015caa:	f107 0308 	add.w	r3, r7, #8
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f000 f866 	bl	8015d80 <prvSampleTimeNow>
 8015cb4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8015cb6:	68bb      	ldr	r3, [r7, #8]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d130      	bne.n	8015d1e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015cbc:	683b      	ldr	r3, [r7, #0]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d10a      	bne.n	8015cd8 <prvProcessTimerOrBlockTask+0x3c>
 8015cc2:	687a      	ldr	r2, [r7, #4]
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	429a      	cmp	r2, r3
 8015cc8:	d806      	bhi.n	8015cd8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8015cca:	f7fe feef 	bl	8014aac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015cce:	68f9      	ldr	r1, [r7, #12]
 8015cd0:	6878      	ldr	r0, [r7, #4]
 8015cd2:	f7ff ff81 	bl	8015bd8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8015cd6:	e024      	b.n	8015d22 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8015cd8:	683b      	ldr	r3, [r7, #0]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d008      	beq.n	8015cf0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015cde:	4b13      	ldr	r3, [pc, #76]	@ (8015d2c <prvProcessTimerOrBlockTask+0x90>)
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d101      	bne.n	8015cec <prvProcessTimerOrBlockTask+0x50>
 8015ce8:	2301      	movs	r3, #1
 8015cea:	e000      	b.n	8015cee <prvProcessTimerOrBlockTask+0x52>
 8015cec:	2300      	movs	r3, #0
 8015cee:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8015d30 <prvProcessTimerOrBlockTask+0x94>)
 8015cf2:	6818      	ldr	r0, [r3, #0]
 8015cf4:	687a      	ldr	r2, [r7, #4]
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	1ad3      	subs	r3, r2, r3
 8015cfa:	683a      	ldr	r2, [r7, #0]
 8015cfc:	4619      	mov	r1, r3
 8015cfe:	f7fe fc4b 	bl	8014598 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8015d02:	f7fe fed3 	bl	8014aac <xTaskResumeAll>
 8015d06:	4603      	mov	r3, r0
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d10a      	bne.n	8015d22 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8015d0c:	4b09      	ldr	r3, [pc, #36]	@ (8015d34 <prvProcessTimerOrBlockTask+0x98>)
 8015d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015d12:	601a      	str	r2, [r3, #0]
 8015d14:	f3bf 8f4f 	dsb	sy
 8015d18:	f3bf 8f6f 	isb	sy
    }
 8015d1c:	e001      	b.n	8015d22 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8015d1e:	f7fe fec5 	bl	8014aac <xTaskResumeAll>
    }
 8015d22:	bf00      	nop
 8015d24:	3710      	adds	r7, #16
 8015d26:	46bd      	mov	sp, r7
 8015d28:	bd80      	pop	{r7, pc}
 8015d2a:	bf00      	nop
 8015d2c:	2000165c 	.word	0x2000165c
 8015d30:	20001660 	.word	0x20001660
 8015d34:	e000ed04 	.word	0xe000ed04

08015d38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8015d38:	b480      	push	{r7}
 8015d3a:	b085      	sub	sp, #20
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015d40:	4b0e      	ldr	r3, [pc, #56]	@ (8015d7c <prvGetNextExpireTime+0x44>)
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d101      	bne.n	8015d4e <prvGetNextExpireTime+0x16>
 8015d4a:	2201      	movs	r2, #1
 8015d4c:	e000      	b.n	8015d50 <prvGetNextExpireTime+0x18>
 8015d4e:	2200      	movs	r2, #0
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d105      	bne.n	8015d68 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015d5c:	4b07      	ldr	r3, [pc, #28]	@ (8015d7c <prvGetNextExpireTime+0x44>)
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	68db      	ldr	r3, [r3, #12]
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	60fb      	str	r3, [r7, #12]
 8015d66:	e001      	b.n	8015d6c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8015d68:	2300      	movs	r3, #0
 8015d6a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8015d6c:	68fb      	ldr	r3, [r7, #12]
    }
 8015d6e:	4618      	mov	r0, r3
 8015d70:	3714      	adds	r7, #20
 8015d72:	46bd      	mov	sp, r7
 8015d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d78:	4770      	bx	lr
 8015d7a:	bf00      	nop
 8015d7c:	20001658 	.word	0x20001658

08015d80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b084      	sub	sp, #16
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8015d88:	f7fe ff2e 	bl	8014be8 <xTaskGetTickCount>
 8015d8c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8015d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8015dbc <prvSampleTimeNow+0x3c>)
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	68fa      	ldr	r2, [r7, #12]
 8015d94:	429a      	cmp	r2, r3
 8015d96:	d205      	bcs.n	8015da4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8015d98:	f000 f91e 	bl	8015fd8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	2201      	movs	r2, #1
 8015da0:	601a      	str	r2, [r3, #0]
 8015da2:	e002      	b.n	8015daa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	2200      	movs	r2, #0
 8015da8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8015daa:	4a04      	ldr	r2, [pc, #16]	@ (8015dbc <prvSampleTimeNow+0x3c>)
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8015db0:	68fb      	ldr	r3, [r7, #12]
    }
 8015db2:	4618      	mov	r0, r3
 8015db4:	3710      	adds	r7, #16
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bd80      	pop	{r7, pc}
 8015dba:	bf00      	nop
 8015dbc:	20001668 	.word	0x20001668

08015dc0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b086      	sub	sp, #24
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	60f8      	str	r0, [r7, #12]
 8015dc8:	60b9      	str	r1, [r7, #8]
 8015dca:	607a      	str	r2, [r7, #4]
 8015dcc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8015dce:	2300      	movs	r3, #0
 8015dd0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	68ba      	ldr	r2, [r7, #8]
 8015dd6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	68fa      	ldr	r2, [r7, #12]
 8015ddc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8015dde:	68ba      	ldr	r2, [r7, #8]
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	429a      	cmp	r2, r3
 8015de4:	d812      	bhi.n	8015e0c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015de6:	687a      	ldr	r2, [r7, #4]
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	1ad2      	subs	r2, r2, r3
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	699b      	ldr	r3, [r3, #24]
 8015df0:	429a      	cmp	r2, r3
 8015df2:	d302      	bcc.n	8015dfa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8015df4:	2301      	movs	r3, #1
 8015df6:	617b      	str	r3, [r7, #20]
 8015df8:	e01b      	b.n	8015e32 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015dfa:	4b10      	ldr	r3, [pc, #64]	@ (8015e3c <prvInsertTimerInActiveList+0x7c>)
 8015dfc:	681a      	ldr	r2, [r3, #0]
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	3304      	adds	r3, #4
 8015e02:	4619      	mov	r1, r3
 8015e04:	4610      	mov	r0, r2
 8015e06:	f7fd fd4e 	bl	80138a6 <vListInsert>
 8015e0a:	e012      	b.n	8015e32 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015e0c:	687a      	ldr	r2, [r7, #4]
 8015e0e:	683b      	ldr	r3, [r7, #0]
 8015e10:	429a      	cmp	r2, r3
 8015e12:	d206      	bcs.n	8015e22 <prvInsertTimerInActiveList+0x62>
 8015e14:	68ba      	ldr	r2, [r7, #8]
 8015e16:	683b      	ldr	r3, [r7, #0]
 8015e18:	429a      	cmp	r2, r3
 8015e1a:	d302      	bcc.n	8015e22 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8015e1c:	2301      	movs	r3, #1
 8015e1e:	617b      	str	r3, [r7, #20]
 8015e20:	e007      	b.n	8015e32 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015e22:	4b07      	ldr	r3, [pc, #28]	@ (8015e40 <prvInsertTimerInActiveList+0x80>)
 8015e24:	681a      	ldr	r2, [r3, #0]
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	3304      	adds	r3, #4
 8015e2a:	4619      	mov	r1, r3
 8015e2c:	4610      	mov	r0, r2
 8015e2e:	f7fd fd3a 	bl	80138a6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8015e32:	697b      	ldr	r3, [r7, #20]
    }
 8015e34:	4618      	mov	r0, r3
 8015e36:	3718      	adds	r7, #24
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}
 8015e3c:	2000165c 	.word	0x2000165c
 8015e40:	20001658 	.word	0x20001658

08015e44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b08c      	sub	sp, #48	@ 0x30
 8015e48:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015e4a:	e0b2      	b.n	8015fb2 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015e4c:	68bb      	ldr	r3, [r7, #8]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	f2c0 80af 	blt.w	8015fb2 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015e54:	693b      	ldr	r3, [r7, #16]
 8015e56:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e5a:	695b      	ldr	r3, [r3, #20]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d004      	beq.n	8015e6a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e62:	3304      	adds	r3, #4
 8015e64:	4618      	mov	r0, r3
 8015e66:	f7fd fd57 	bl	8013918 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015e6a:	1d3b      	adds	r3, r7, #4
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	f7ff ff87 	bl	8015d80 <prvSampleTimeNow>
 8015e72:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8015e74:	68bb      	ldr	r3, [r7, #8]
 8015e76:	2b09      	cmp	r3, #9
 8015e78:	f200 8098 	bhi.w	8015fac <prvProcessReceivedCommands+0x168>
 8015e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8015e84 <prvProcessReceivedCommands+0x40>)
 8015e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e82:	bf00      	nop
 8015e84:	08015ead 	.word	0x08015ead
 8015e88:	08015ead 	.word	0x08015ead
 8015e8c:	08015ead 	.word	0x08015ead
 8015e90:	08015f23 	.word	0x08015f23
 8015e94:	08015f37 	.word	0x08015f37
 8015e98:	08015f83 	.word	0x08015f83
 8015e9c:	08015ead 	.word	0x08015ead
 8015ea0:	08015ead 	.word	0x08015ead
 8015ea4:	08015f23 	.word	0x08015f23
 8015ea8:	08015f37 	.word	0x08015f37
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015eb2:	f043 0301 	orr.w	r3, r3, #1
 8015eb6:	b2da      	uxtb	r2, r3
 8015eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015ebe:	68fa      	ldr	r2, [r7, #12]
 8015ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ec2:	699b      	ldr	r3, [r3, #24]
 8015ec4:	18d1      	adds	r1, r2, r3
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	6a3a      	ldr	r2, [r7, #32]
 8015eca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015ecc:	f7ff ff78 	bl	8015dc0 <prvInsertTimerInActiveList>
 8015ed0:	4603      	mov	r3, r0
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d06c      	beq.n	8015fb0 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ed8:	6a1b      	ldr	r3, [r3, #32]
 8015eda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015edc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015ee4:	f003 0304 	and.w	r3, r3, #4
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d061      	beq.n	8015fb0 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015eec:	68fa      	ldr	r2, [r7, #12]
 8015eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ef0:	699b      	ldr	r3, [r3, #24]
 8015ef2:	441a      	add	r2, r3
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	9300      	str	r3, [sp, #0]
 8015ef8:	2300      	movs	r3, #0
 8015efa:	2100      	movs	r1, #0
 8015efc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015efe:	f7ff fe1d 	bl	8015b3c <xTimerGenericCommand>
 8015f02:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8015f04:	69fb      	ldr	r3, [r7, #28]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d152      	bne.n	8015fb0 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8015f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f0e:	f383 8811 	msr	BASEPRI, r3
 8015f12:	f3bf 8f6f 	isb	sy
 8015f16:	f3bf 8f4f 	dsb	sy
 8015f1a:	61bb      	str	r3, [r7, #24]
    }
 8015f1c:	bf00      	nop
 8015f1e:	bf00      	nop
 8015f20:	e7fd      	b.n	8015f1e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015f28:	f023 0301 	bic.w	r3, r3, #1
 8015f2c:	b2da      	uxtb	r2, r3
 8015f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8015f34:	e03d      	b.n	8015fb2 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015f3c:	f043 0301 	orr.w	r3, r3, #1
 8015f40:	b2da      	uxtb	r2, r3
 8015f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015f48:	68fa      	ldr	r2, [r7, #12]
 8015f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f4c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f50:	699b      	ldr	r3, [r3, #24]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d10b      	bne.n	8015f6e <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8015f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f5a:	f383 8811 	msr	BASEPRI, r3
 8015f5e:	f3bf 8f6f 	isb	sy
 8015f62:	f3bf 8f4f 	dsb	sy
 8015f66:	617b      	str	r3, [r7, #20]
    }
 8015f68:	bf00      	nop
 8015f6a:	bf00      	nop
 8015f6c:	e7fd      	b.n	8015f6a <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f70:	699a      	ldr	r2, [r3, #24]
 8015f72:	6a3b      	ldr	r3, [r7, #32]
 8015f74:	18d1      	adds	r1, r2, r3
 8015f76:	6a3b      	ldr	r3, [r7, #32]
 8015f78:	6a3a      	ldr	r2, [r7, #32]
 8015f7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015f7c:	f7ff ff20 	bl	8015dc0 <prvInsertTimerInActiveList>
                        break;
 8015f80:	e017      	b.n	8015fb2 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015f88:	f003 0302 	and.w	r3, r3, #2
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d103      	bne.n	8015f98 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8015f90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015f92:	f000 fbff 	bl	8016794 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8015f96:	e00c      	b.n	8015fb2 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015f9e:	f023 0301 	bic.w	r3, r3, #1
 8015fa2:	b2da      	uxtb	r2, r3
 8015fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8015faa:	e002      	b.n	8015fb2 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8015fac:	bf00      	nop
 8015fae:	e000      	b.n	8015fb2 <prvProcessReceivedCommands+0x16e>
                        break;
 8015fb0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015fb2:	4b08      	ldr	r3, [pc, #32]	@ (8015fd4 <prvProcessReceivedCommands+0x190>)
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	f107 0108 	add.w	r1, r7, #8
 8015fba:	2200      	movs	r2, #0
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	f7fd ffa7 	bl	8013f10 <xQueueReceive>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	f47f af41 	bne.w	8015e4c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8015fca:	bf00      	nop
 8015fcc:	bf00      	nop
 8015fce:	3728      	adds	r7, #40	@ 0x28
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	bd80      	pop	{r7, pc}
 8015fd4:	20001660 	.word	0x20001660

08015fd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b088      	sub	sp, #32
 8015fdc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015fde:	e049      	b.n	8016074 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015fe0:	4b2e      	ldr	r3, [pc, #184]	@ (801609c <prvSwitchTimerLists+0xc4>)
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	68db      	ldr	r3, [r3, #12]
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015fea:	4b2c      	ldr	r3, [pc, #176]	@ (801609c <prvSwitchTimerLists+0xc4>)
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	68db      	ldr	r3, [r3, #12]
 8015ff0:	68db      	ldr	r3, [r3, #12]
 8015ff2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	3304      	adds	r3, #4
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f7fd fc8d 	bl	8013918 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	6a1b      	ldr	r3, [r3, #32]
 8016002:	68f8      	ldr	r0, [r7, #12]
 8016004:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801600c:	f003 0304 	and.w	r3, r3, #4
 8016010:	2b00      	cmp	r3, #0
 8016012:	d02f      	beq.n	8016074 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	699b      	ldr	r3, [r3, #24]
 8016018:	693a      	ldr	r2, [r7, #16]
 801601a:	4413      	add	r3, r2
 801601c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 801601e:	68ba      	ldr	r2, [r7, #8]
 8016020:	693b      	ldr	r3, [r7, #16]
 8016022:	429a      	cmp	r2, r3
 8016024:	d90e      	bls.n	8016044 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	68ba      	ldr	r2, [r7, #8]
 801602a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	68fa      	ldr	r2, [r7, #12]
 8016030:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016032:	4b1a      	ldr	r3, [pc, #104]	@ (801609c <prvSwitchTimerLists+0xc4>)
 8016034:	681a      	ldr	r2, [r3, #0]
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	3304      	adds	r3, #4
 801603a:	4619      	mov	r1, r3
 801603c:	4610      	mov	r0, r2
 801603e:	f7fd fc32 	bl	80138a6 <vListInsert>
 8016042:	e017      	b.n	8016074 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016044:	2300      	movs	r3, #0
 8016046:	9300      	str	r3, [sp, #0]
 8016048:	2300      	movs	r3, #0
 801604a:	693a      	ldr	r2, [r7, #16]
 801604c:	2100      	movs	r1, #0
 801604e:	68f8      	ldr	r0, [r7, #12]
 8016050:	f7ff fd74 	bl	8015b3c <xTimerGenericCommand>
 8016054:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d10b      	bne.n	8016074 <prvSwitchTimerLists+0x9c>
        __asm volatile
 801605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016060:	f383 8811 	msr	BASEPRI, r3
 8016064:	f3bf 8f6f 	isb	sy
 8016068:	f3bf 8f4f 	dsb	sy
 801606c:	603b      	str	r3, [r7, #0]
    }
 801606e:	bf00      	nop
 8016070:	bf00      	nop
 8016072:	e7fd      	b.n	8016070 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016074:	4b09      	ldr	r3, [pc, #36]	@ (801609c <prvSwitchTimerLists+0xc4>)
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d1b0      	bne.n	8015fe0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 801607e:	4b07      	ldr	r3, [pc, #28]	@ (801609c <prvSwitchTimerLists+0xc4>)
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8016084:	4b06      	ldr	r3, [pc, #24]	@ (80160a0 <prvSwitchTimerLists+0xc8>)
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	4a04      	ldr	r2, [pc, #16]	@ (801609c <prvSwitchTimerLists+0xc4>)
 801608a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 801608c:	4a04      	ldr	r2, [pc, #16]	@ (80160a0 <prvSwitchTimerLists+0xc8>)
 801608e:	697b      	ldr	r3, [r7, #20]
 8016090:	6013      	str	r3, [r2, #0]
    }
 8016092:	bf00      	nop
 8016094:	3718      	adds	r7, #24
 8016096:	46bd      	mov	sp, r7
 8016098:	bd80      	pop	{r7, pc}
 801609a:	bf00      	nop
 801609c:	20001658 	.word	0x20001658
 80160a0:	2000165c 	.word	0x2000165c

080160a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80160a4:	b580      	push	{r7, lr}
 80160a6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80160a8:	f000 f968 	bl	801637c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80160ac:	4b12      	ldr	r3, [pc, #72]	@ (80160f8 <prvCheckForValidListAndQueue+0x54>)
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d11d      	bne.n	80160f0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80160b4:	4811      	ldr	r0, [pc, #68]	@ (80160fc <prvCheckForValidListAndQueue+0x58>)
 80160b6:	f7fd fba5 	bl	8013804 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80160ba:	4811      	ldr	r0, [pc, #68]	@ (8016100 <prvCheckForValidListAndQueue+0x5c>)
 80160bc:	f7fd fba2 	bl	8013804 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80160c0:	4b10      	ldr	r3, [pc, #64]	@ (8016104 <prvCheckForValidListAndQueue+0x60>)
 80160c2:	4a0e      	ldr	r2, [pc, #56]	@ (80160fc <prvCheckForValidListAndQueue+0x58>)
 80160c4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80160c6:	4b10      	ldr	r3, [pc, #64]	@ (8016108 <prvCheckForValidListAndQueue+0x64>)
 80160c8:	4a0d      	ldr	r2, [pc, #52]	@ (8016100 <prvCheckForValidListAndQueue+0x5c>)
 80160ca:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80160cc:	2200      	movs	r2, #0
 80160ce:	210c      	movs	r1, #12
 80160d0:	200a      	movs	r0, #10
 80160d2:	f7fd fcb5 	bl	8013a40 <xQueueGenericCreate>
 80160d6:	4603      	mov	r3, r0
 80160d8:	4a07      	ldr	r2, [pc, #28]	@ (80160f8 <prvCheckForValidListAndQueue+0x54>)
 80160da:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80160dc:	4b06      	ldr	r3, [pc, #24]	@ (80160f8 <prvCheckForValidListAndQueue+0x54>)
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d005      	beq.n	80160f0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80160e4:	4b04      	ldr	r3, [pc, #16]	@ (80160f8 <prvCheckForValidListAndQueue+0x54>)
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	4908      	ldr	r1, [pc, #32]	@ (801610c <prvCheckForValidListAndQueue+0x68>)
 80160ea:	4618      	mov	r0, r3
 80160ec:	f7fe fa2a 	bl	8014544 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80160f0:	f000 f976 	bl	80163e0 <vPortExitCritical>
    }
 80160f4:	bf00      	nop
 80160f6:	bd80      	pop	{r7, pc}
 80160f8:	20001660 	.word	0x20001660
 80160fc:	20001630 	.word	0x20001630
 8016100:	20001644 	.word	0x20001644
 8016104:	20001658 	.word	0x20001658
 8016108:	2000165c 	.word	0x2000165c
 801610c:	0801bd94 	.word	0x0801bd94

08016110 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8016110:	b480      	push	{r7}
 8016112:	b085      	sub	sp, #20
 8016114:	af00      	add	r7, sp, #0
 8016116:	60f8      	str	r0, [r7, #12]
 8016118:	60b9      	str	r1, [r7, #8]
 801611a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	3b04      	subs	r3, #4
 8016120:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016128:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	3b04      	subs	r3, #4
 801612e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8016130:	68bb      	ldr	r3, [r7, #8]
 8016132:	f023 0201 	bic.w	r2, r3, #1
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	3b04      	subs	r3, #4
 801613e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8016140:	4a0c      	ldr	r2, [pc, #48]	@ (8016174 <pxPortInitialiseStack+0x64>)
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	3b14      	subs	r3, #20
 801614a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 801614c:	687a      	ldr	r2, [r7, #4]
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	3b04      	subs	r3, #4
 8016156:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	f06f 0202 	mvn.w	r2, #2
 801615e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	3b20      	subs	r3, #32
 8016164:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8016166:	68fb      	ldr	r3, [r7, #12]
}
 8016168:	4618      	mov	r0, r3
 801616a:	3714      	adds	r7, #20
 801616c:	46bd      	mov	sp, r7
 801616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016172:	4770      	bx	lr
 8016174:	08016179 	.word	0x08016179

08016178 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016178:	b480      	push	{r7}
 801617a:	b085      	sub	sp, #20
 801617c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 801617e:	2300      	movs	r3, #0
 8016180:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8016182:	4b13      	ldr	r3, [pc, #76]	@ (80161d0 <prvTaskExitError+0x58>)
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	f1b3 3fff 	cmp.w	r3, #4294967295
 801618a:	d00b      	beq.n	80161a4 <prvTaskExitError+0x2c>
        __asm volatile
 801618c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016190:	f383 8811 	msr	BASEPRI, r3
 8016194:	f3bf 8f6f 	isb	sy
 8016198:	f3bf 8f4f 	dsb	sy
 801619c:	60fb      	str	r3, [r7, #12]
    }
 801619e:	bf00      	nop
 80161a0:	bf00      	nop
 80161a2:	e7fd      	b.n	80161a0 <prvTaskExitError+0x28>
        __asm volatile
 80161a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161a8:	f383 8811 	msr	BASEPRI, r3
 80161ac:	f3bf 8f6f 	isb	sy
 80161b0:	f3bf 8f4f 	dsb	sy
 80161b4:	60bb      	str	r3, [r7, #8]
    }
 80161b6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80161b8:	bf00      	nop
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d0fc      	beq.n	80161ba <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80161c0:	bf00      	nop
 80161c2:	bf00      	nop
 80161c4:	3714      	adds	r7, #20
 80161c6:	46bd      	mov	sp, r7
 80161c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161cc:	4770      	bx	lr
 80161ce:	bf00      	nop
 80161d0:	20000084 	.word	0x20000084
	...

080161e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80161e0:	4b07      	ldr	r3, [pc, #28]	@ (8016200 <pxCurrentTCBConst2>)
 80161e2:	6819      	ldr	r1, [r3, #0]
 80161e4:	6808      	ldr	r0, [r1, #0]
 80161e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161ea:	f380 8809 	msr	PSP, r0
 80161ee:	f3bf 8f6f 	isb	sy
 80161f2:	f04f 0000 	mov.w	r0, #0
 80161f6:	f380 8811 	msr	BASEPRI, r0
 80161fa:	4770      	bx	lr
 80161fc:	f3af 8000 	nop.w

08016200 <pxCurrentTCBConst2>:
 8016200:	2000152c 	.word	0x2000152c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8016204:	bf00      	nop
 8016206:	bf00      	nop

08016208 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8016208:	4808      	ldr	r0, [pc, #32]	@ (801622c <prvPortStartFirstTask+0x24>)
 801620a:	6800      	ldr	r0, [r0, #0]
 801620c:	6800      	ldr	r0, [r0, #0]
 801620e:	f380 8808 	msr	MSP, r0
 8016212:	f04f 0000 	mov.w	r0, #0
 8016216:	f380 8814 	msr	CONTROL, r0
 801621a:	b662      	cpsie	i
 801621c:	b661      	cpsie	f
 801621e:	f3bf 8f4f 	dsb	sy
 8016222:	f3bf 8f6f 	isb	sy
 8016226:	df00      	svc	0
 8016228:	bf00      	nop
 801622a:	0000      	.short	0x0000
 801622c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8016230:	bf00      	nop
 8016232:	bf00      	nop

08016234 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016234:	b580      	push	{r7, lr}
 8016236:	b086      	sub	sp, #24
 8016238:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801623a:	4b47      	ldr	r3, [pc, #284]	@ (8016358 <xPortStartScheduler+0x124>)
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	4a47      	ldr	r2, [pc, #284]	@ (801635c <xPortStartScheduler+0x128>)
 8016240:	4293      	cmp	r3, r2
 8016242:	d10b      	bne.n	801625c <xPortStartScheduler+0x28>
        __asm volatile
 8016244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016248:	f383 8811 	msr	BASEPRI, r3
 801624c:	f3bf 8f6f 	isb	sy
 8016250:	f3bf 8f4f 	dsb	sy
 8016254:	60fb      	str	r3, [r7, #12]
    }
 8016256:	bf00      	nop
 8016258:	bf00      	nop
 801625a:	e7fd      	b.n	8016258 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801625c:	4b3e      	ldr	r3, [pc, #248]	@ (8016358 <xPortStartScheduler+0x124>)
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	4a3f      	ldr	r2, [pc, #252]	@ (8016360 <xPortStartScheduler+0x12c>)
 8016262:	4293      	cmp	r3, r2
 8016264:	d10b      	bne.n	801627e <xPortStartScheduler+0x4a>
        __asm volatile
 8016266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801626a:	f383 8811 	msr	BASEPRI, r3
 801626e:	f3bf 8f6f 	isb	sy
 8016272:	f3bf 8f4f 	dsb	sy
 8016276:	613b      	str	r3, [r7, #16]
    }
 8016278:	bf00      	nop
 801627a:	bf00      	nop
 801627c:	e7fd      	b.n	801627a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801627e:	4b39      	ldr	r3, [pc, #228]	@ (8016364 <xPortStartScheduler+0x130>)
 8016280:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016282:	697b      	ldr	r3, [r7, #20]
 8016284:	781b      	ldrb	r3, [r3, #0]
 8016286:	b2db      	uxtb	r3, r3
 8016288:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801628a:	697b      	ldr	r3, [r7, #20]
 801628c:	22ff      	movs	r2, #255	@ 0xff
 801628e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016290:	697b      	ldr	r3, [r7, #20]
 8016292:	781b      	ldrb	r3, [r3, #0]
 8016294:	b2db      	uxtb	r3, r3
 8016296:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016298:	78fb      	ldrb	r3, [r7, #3]
 801629a:	b2db      	uxtb	r3, r3
 801629c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80162a0:	b2da      	uxtb	r2, r3
 80162a2:	4b31      	ldr	r3, [pc, #196]	@ (8016368 <xPortStartScheduler+0x134>)
 80162a4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80162a6:	4b31      	ldr	r3, [pc, #196]	@ (801636c <xPortStartScheduler+0x138>)
 80162a8:	2207      	movs	r2, #7
 80162aa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80162ac:	e009      	b.n	80162c2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80162ae:	4b2f      	ldr	r3, [pc, #188]	@ (801636c <xPortStartScheduler+0x138>)
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	3b01      	subs	r3, #1
 80162b4:	4a2d      	ldr	r2, [pc, #180]	@ (801636c <xPortStartScheduler+0x138>)
 80162b6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80162b8:	78fb      	ldrb	r3, [r7, #3]
 80162ba:	b2db      	uxtb	r3, r3
 80162bc:	005b      	lsls	r3, r3, #1
 80162be:	b2db      	uxtb	r3, r3
 80162c0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80162c2:	78fb      	ldrb	r3, [r7, #3]
 80162c4:	b2db      	uxtb	r3, r3
 80162c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80162ca:	2b80      	cmp	r3, #128	@ 0x80
 80162cc:	d0ef      	beq.n	80162ae <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80162ce:	4b27      	ldr	r3, [pc, #156]	@ (801636c <xPortStartScheduler+0x138>)
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	f1c3 0307 	rsb	r3, r3, #7
 80162d6:	2b04      	cmp	r3, #4
 80162d8:	d00b      	beq.n	80162f2 <xPortStartScheduler+0xbe>
        __asm volatile
 80162da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162de:	f383 8811 	msr	BASEPRI, r3
 80162e2:	f3bf 8f6f 	isb	sy
 80162e6:	f3bf 8f4f 	dsb	sy
 80162ea:	60bb      	str	r3, [r7, #8]
    }
 80162ec:	bf00      	nop
 80162ee:	bf00      	nop
 80162f0:	e7fd      	b.n	80162ee <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80162f2:	4b1e      	ldr	r3, [pc, #120]	@ (801636c <xPortStartScheduler+0x138>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	021b      	lsls	r3, r3, #8
 80162f8:	4a1c      	ldr	r2, [pc, #112]	@ (801636c <xPortStartScheduler+0x138>)
 80162fa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80162fc:	4b1b      	ldr	r3, [pc, #108]	@ (801636c <xPortStartScheduler+0x138>)
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016304:	4a19      	ldr	r2, [pc, #100]	@ (801636c <xPortStartScheduler+0x138>)
 8016306:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	b2da      	uxtb	r2, r3
 801630c:	697b      	ldr	r3, [r7, #20]
 801630e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8016310:	4b17      	ldr	r3, [pc, #92]	@ (8016370 <xPortStartScheduler+0x13c>)
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	4a16      	ldr	r2, [pc, #88]	@ (8016370 <xPortStartScheduler+0x13c>)
 8016316:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801631a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 801631c:	4b14      	ldr	r3, [pc, #80]	@ (8016370 <xPortStartScheduler+0x13c>)
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	4a13      	ldr	r2, [pc, #76]	@ (8016370 <xPortStartScheduler+0x13c>)
 8016322:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016326:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8016328:	f000 f8e0 	bl	80164ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 801632c:	4b11      	ldr	r3, [pc, #68]	@ (8016374 <xPortStartScheduler+0x140>)
 801632e:	2200      	movs	r2, #0
 8016330:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8016332:	f000 f8ff 	bl	8016534 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016336:	4b10      	ldr	r3, [pc, #64]	@ (8016378 <xPortStartScheduler+0x144>)
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	4a0f      	ldr	r2, [pc, #60]	@ (8016378 <xPortStartScheduler+0x144>)
 801633c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8016340:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8016342:	f7ff ff61 	bl	8016208 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8016346:	f7fe fda7 	bl	8014e98 <vTaskSwitchContext>
    prvTaskExitError();
 801634a:	f7ff ff15 	bl	8016178 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 801634e:	2300      	movs	r3, #0
}
 8016350:	4618      	mov	r0, r3
 8016352:	3718      	adds	r7, #24
 8016354:	46bd      	mov	sp, r7
 8016356:	bd80      	pop	{r7, pc}
 8016358:	e000ed00 	.word	0xe000ed00
 801635c:	410fc271 	.word	0x410fc271
 8016360:	410fc270 	.word	0x410fc270
 8016364:	e000e400 	.word	0xe000e400
 8016368:	2000166c 	.word	0x2000166c
 801636c:	20001670 	.word	0x20001670
 8016370:	e000ed20 	.word	0xe000ed20
 8016374:	20000084 	.word	0x20000084
 8016378:	e000ef34 	.word	0xe000ef34

0801637c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801637c:	b480      	push	{r7}
 801637e:	b083      	sub	sp, #12
 8016380:	af00      	add	r7, sp, #0
        __asm volatile
 8016382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016386:	f383 8811 	msr	BASEPRI, r3
 801638a:	f3bf 8f6f 	isb	sy
 801638e:	f3bf 8f4f 	dsb	sy
 8016392:	607b      	str	r3, [r7, #4]
    }
 8016394:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8016396:	4b10      	ldr	r3, [pc, #64]	@ (80163d8 <vPortEnterCritical+0x5c>)
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	3301      	adds	r3, #1
 801639c:	4a0e      	ldr	r2, [pc, #56]	@ (80163d8 <vPortEnterCritical+0x5c>)
 801639e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80163a0:	4b0d      	ldr	r3, [pc, #52]	@ (80163d8 <vPortEnterCritical+0x5c>)
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	2b01      	cmp	r3, #1
 80163a6:	d110      	bne.n	80163ca <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80163a8:	4b0c      	ldr	r3, [pc, #48]	@ (80163dc <vPortEnterCritical+0x60>)
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	b2db      	uxtb	r3, r3
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d00b      	beq.n	80163ca <vPortEnterCritical+0x4e>
        __asm volatile
 80163b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163b6:	f383 8811 	msr	BASEPRI, r3
 80163ba:	f3bf 8f6f 	isb	sy
 80163be:	f3bf 8f4f 	dsb	sy
 80163c2:	603b      	str	r3, [r7, #0]
    }
 80163c4:	bf00      	nop
 80163c6:	bf00      	nop
 80163c8:	e7fd      	b.n	80163c6 <vPortEnterCritical+0x4a>
    }
}
 80163ca:	bf00      	nop
 80163cc:	370c      	adds	r7, #12
 80163ce:	46bd      	mov	sp, r7
 80163d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d4:	4770      	bx	lr
 80163d6:	bf00      	nop
 80163d8:	20000084 	.word	0x20000084
 80163dc:	e000ed04 	.word	0xe000ed04

080163e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80163e0:	b480      	push	{r7}
 80163e2:	b083      	sub	sp, #12
 80163e4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80163e6:	4b12      	ldr	r3, [pc, #72]	@ (8016430 <vPortExitCritical+0x50>)
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d10b      	bne.n	8016406 <vPortExitCritical+0x26>
        __asm volatile
 80163ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163f2:	f383 8811 	msr	BASEPRI, r3
 80163f6:	f3bf 8f6f 	isb	sy
 80163fa:	f3bf 8f4f 	dsb	sy
 80163fe:	607b      	str	r3, [r7, #4]
    }
 8016400:	bf00      	nop
 8016402:	bf00      	nop
 8016404:	e7fd      	b.n	8016402 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8016406:	4b0a      	ldr	r3, [pc, #40]	@ (8016430 <vPortExitCritical+0x50>)
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	3b01      	subs	r3, #1
 801640c:	4a08      	ldr	r2, [pc, #32]	@ (8016430 <vPortExitCritical+0x50>)
 801640e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8016410:	4b07      	ldr	r3, [pc, #28]	@ (8016430 <vPortExitCritical+0x50>)
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d105      	bne.n	8016424 <vPortExitCritical+0x44>
 8016418:	2300      	movs	r3, #0
 801641a:	603b      	str	r3, [r7, #0]
        __asm volatile
 801641c:	683b      	ldr	r3, [r7, #0]
 801641e:	f383 8811 	msr	BASEPRI, r3
    }
 8016422:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8016424:	bf00      	nop
 8016426:	370c      	adds	r7, #12
 8016428:	46bd      	mov	sp, r7
 801642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801642e:	4770      	bx	lr
 8016430:	20000084 	.word	0x20000084
	...

08016440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8016440:	f3ef 8009 	mrs	r0, PSP
 8016444:	f3bf 8f6f 	isb	sy
 8016448:	4b15      	ldr	r3, [pc, #84]	@ (80164a0 <pxCurrentTCBConst>)
 801644a:	681a      	ldr	r2, [r3, #0]
 801644c:	f01e 0f10 	tst.w	lr, #16
 8016450:	bf08      	it	eq
 8016452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801645a:	6010      	str	r0, [r2, #0]
 801645c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016460:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016464:	f380 8811 	msr	BASEPRI, r0
 8016468:	f3bf 8f4f 	dsb	sy
 801646c:	f3bf 8f6f 	isb	sy
 8016470:	f7fe fd12 	bl	8014e98 <vTaskSwitchContext>
 8016474:	f04f 0000 	mov.w	r0, #0
 8016478:	f380 8811 	msr	BASEPRI, r0
 801647c:	bc09      	pop	{r0, r3}
 801647e:	6819      	ldr	r1, [r3, #0]
 8016480:	6808      	ldr	r0, [r1, #0]
 8016482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016486:	f01e 0f10 	tst.w	lr, #16
 801648a:	bf08      	it	eq
 801648c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016490:	f380 8809 	msr	PSP, r0
 8016494:	f3bf 8f6f 	isb	sy
 8016498:	4770      	bx	lr
 801649a:	bf00      	nop
 801649c:	f3af 8000 	nop.w

080164a0 <pxCurrentTCBConst>:
 80164a0:	2000152c 	.word	0x2000152c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80164a4:	bf00      	nop
 80164a6:	bf00      	nop

080164a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b082      	sub	sp, #8
 80164ac:	af00      	add	r7, sp, #0
        __asm volatile
 80164ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80164b2:	f383 8811 	msr	BASEPRI, r3
 80164b6:	f3bf 8f6f 	isb	sy
 80164ba:	f3bf 8f4f 	dsb	sy
 80164be:	607b      	str	r3, [r7, #4]
    }
 80164c0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80164c2:	f7fe fc2f 	bl	8014d24 <xTaskIncrementTick>
 80164c6:	4603      	mov	r3, r0
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d003      	beq.n	80164d4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80164cc:	4b06      	ldr	r3, [pc, #24]	@ (80164e8 <SysTick_Handler+0x40>)
 80164ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80164d2:	601a      	str	r2, [r3, #0]
 80164d4:	2300      	movs	r3, #0
 80164d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	f383 8811 	msr	BASEPRI, r3
    }
 80164de:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80164e0:	bf00      	nop
 80164e2:	3708      	adds	r7, #8
 80164e4:	46bd      	mov	sp, r7
 80164e6:	bd80      	pop	{r7, pc}
 80164e8:	e000ed04 	.word	0xe000ed04

080164ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80164ec:	b480      	push	{r7}
 80164ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80164f0:	4b0b      	ldr	r3, [pc, #44]	@ (8016520 <vPortSetupTimerInterrupt+0x34>)
 80164f2:	2200      	movs	r2, #0
 80164f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80164f6:	4b0b      	ldr	r3, [pc, #44]	@ (8016524 <vPortSetupTimerInterrupt+0x38>)
 80164f8:	2200      	movs	r2, #0
 80164fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80164fc:	4b0a      	ldr	r3, [pc, #40]	@ (8016528 <vPortSetupTimerInterrupt+0x3c>)
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	4a0a      	ldr	r2, [pc, #40]	@ (801652c <vPortSetupTimerInterrupt+0x40>)
 8016502:	fba2 2303 	umull	r2, r3, r2, r3
 8016506:	099b      	lsrs	r3, r3, #6
 8016508:	4a09      	ldr	r2, [pc, #36]	@ (8016530 <vPortSetupTimerInterrupt+0x44>)
 801650a:	3b01      	subs	r3, #1
 801650c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801650e:	4b04      	ldr	r3, [pc, #16]	@ (8016520 <vPortSetupTimerInterrupt+0x34>)
 8016510:	2207      	movs	r2, #7
 8016512:	601a      	str	r2, [r3, #0]
}
 8016514:	bf00      	nop
 8016516:	46bd      	mov	sp, r7
 8016518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801651c:	4770      	bx	lr
 801651e:	bf00      	nop
 8016520:	e000e010 	.word	0xe000e010
 8016524:	e000e018 	.word	0xe000e018
 8016528:	20000038 	.word	0x20000038
 801652c:	10624dd3 	.word	0x10624dd3
 8016530:	e000e014 	.word	0xe000e014

08016534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8016534:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016544 <vPortEnableVFP+0x10>
 8016538:	6801      	ldr	r1, [r0, #0]
 801653a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801653e:	6001      	str	r1, [r0, #0]
 8016540:	4770      	bx	lr
 8016542:	0000      	.short	0x0000
 8016544:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8016548:	bf00      	nop
 801654a:	bf00      	nop

0801654c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 801654c:	b480      	push	{r7}
 801654e:	b085      	sub	sp, #20
 8016550:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8016552:	f3ef 8305 	mrs	r3, IPSR
 8016556:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	2b0f      	cmp	r3, #15
 801655c:	d915      	bls.n	801658a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801655e:	4a18      	ldr	r2, [pc, #96]	@ (80165c0 <vPortValidateInterruptPriority+0x74>)
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	4413      	add	r3, r2
 8016564:	781b      	ldrb	r3, [r3, #0]
 8016566:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016568:	4b16      	ldr	r3, [pc, #88]	@ (80165c4 <vPortValidateInterruptPriority+0x78>)
 801656a:	781b      	ldrb	r3, [r3, #0]
 801656c:	7afa      	ldrb	r2, [r7, #11]
 801656e:	429a      	cmp	r2, r3
 8016570:	d20b      	bcs.n	801658a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8016572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016576:	f383 8811 	msr	BASEPRI, r3
 801657a:	f3bf 8f6f 	isb	sy
 801657e:	f3bf 8f4f 	dsb	sy
 8016582:	607b      	str	r3, [r7, #4]
    }
 8016584:	bf00      	nop
 8016586:	bf00      	nop
 8016588:	e7fd      	b.n	8016586 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801658a:	4b0f      	ldr	r3, [pc, #60]	@ (80165c8 <vPortValidateInterruptPriority+0x7c>)
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8016592:	4b0e      	ldr	r3, [pc, #56]	@ (80165cc <vPortValidateInterruptPriority+0x80>)
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	429a      	cmp	r2, r3
 8016598:	d90b      	bls.n	80165b2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 801659a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801659e:	f383 8811 	msr	BASEPRI, r3
 80165a2:	f3bf 8f6f 	isb	sy
 80165a6:	f3bf 8f4f 	dsb	sy
 80165aa:	603b      	str	r3, [r7, #0]
    }
 80165ac:	bf00      	nop
 80165ae:	bf00      	nop
 80165b0:	e7fd      	b.n	80165ae <vPortValidateInterruptPriority+0x62>
    }
 80165b2:	bf00      	nop
 80165b4:	3714      	adds	r7, #20
 80165b6:	46bd      	mov	sp, r7
 80165b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165bc:	4770      	bx	lr
 80165be:	bf00      	nop
 80165c0:	e000e3f0 	.word	0xe000e3f0
 80165c4:	2000166c 	.word	0x2000166c
 80165c8:	e000ed0c 	.word	0xe000ed0c
 80165cc:	20001670 	.word	0x20001670

080165d0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80165d0:	b580      	push	{r7, lr}
 80165d2:	b08a      	sub	sp, #40	@ 0x28
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80165d8:	2300      	movs	r3, #0
 80165da:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80165dc:	f7fe fa58 	bl	8014a90 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80165e0:	4b66      	ldr	r3, [pc, #408]	@ (801677c <pvPortMalloc+0x1ac>)
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d101      	bne.n	80165ec <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80165e8:	f000 f938 	bl	801685c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80165ec:	4b64      	ldr	r3, [pc, #400]	@ (8016780 <pvPortMalloc+0x1b0>)
 80165ee:	681a      	ldr	r2, [r3, #0]
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	4013      	ands	r3, r2
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	f040 80a9 	bne.w	801674c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d02e      	beq.n	801665e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8016600:	2208      	movs	r2, #8
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8016606:	687a      	ldr	r2, [r7, #4]
 8016608:	429a      	cmp	r2, r3
 801660a:	d228      	bcs.n	801665e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 801660c:	2208      	movs	r2, #8
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	4413      	add	r3, r2
 8016612:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	f003 0307 	and.w	r3, r3, #7
 801661a:	2b00      	cmp	r3, #0
 801661c:	d022      	beq.n	8016664 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	f023 0307 	bic.w	r3, r3, #7
 8016624:	3308      	adds	r3, #8
 8016626:	687a      	ldr	r2, [r7, #4]
 8016628:	429a      	cmp	r2, r3
 801662a:	d215      	bcs.n	8016658 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	f023 0307 	bic.w	r3, r3, #7
 8016632:	3308      	adds	r3, #8
 8016634:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	f003 0307 	and.w	r3, r3, #7
 801663c:	2b00      	cmp	r3, #0
 801663e:	d011      	beq.n	8016664 <pvPortMalloc+0x94>
        __asm volatile
 8016640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016644:	f383 8811 	msr	BASEPRI, r3
 8016648:	f3bf 8f6f 	isb	sy
 801664c:	f3bf 8f4f 	dsb	sy
 8016650:	617b      	str	r3, [r7, #20]
    }
 8016652:	bf00      	nop
 8016654:	bf00      	nop
 8016656:	e7fd      	b.n	8016654 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8016658:	2300      	movs	r3, #0
 801665a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801665c:	e002      	b.n	8016664 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 801665e:	2300      	movs	r3, #0
 8016660:	607b      	str	r3, [r7, #4]
 8016662:	e000      	b.n	8016666 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016664:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d06f      	beq.n	801674c <pvPortMalloc+0x17c>
 801666c:	4b45      	ldr	r3, [pc, #276]	@ (8016784 <pvPortMalloc+0x1b4>)
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	687a      	ldr	r2, [r7, #4]
 8016672:	429a      	cmp	r2, r3
 8016674:	d86a      	bhi.n	801674c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8016676:	4b44      	ldr	r3, [pc, #272]	@ (8016788 <pvPortMalloc+0x1b8>)
 8016678:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 801667a:	4b43      	ldr	r3, [pc, #268]	@ (8016788 <pvPortMalloc+0x1b8>)
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016680:	e004      	b.n	801668c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8016682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016684:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8016686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801668c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801668e:	685b      	ldr	r3, [r3, #4]
 8016690:	687a      	ldr	r2, [r7, #4]
 8016692:	429a      	cmp	r2, r3
 8016694:	d903      	bls.n	801669e <pvPortMalloc+0xce>
 8016696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d1f1      	bne.n	8016682 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 801669e:	4b37      	ldr	r3, [pc, #220]	@ (801677c <pvPortMalloc+0x1ac>)
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166a4:	429a      	cmp	r2, r3
 80166a6:	d051      	beq.n	801674c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80166a8:	6a3b      	ldr	r3, [r7, #32]
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	2208      	movs	r2, #8
 80166ae:	4413      	add	r3, r2
 80166b0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80166b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166b4:	681a      	ldr	r2, [r3, #0]
 80166b6:	6a3b      	ldr	r3, [r7, #32]
 80166b8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80166ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166bc:	685a      	ldr	r2, [r3, #4]
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	1ad2      	subs	r2, r2, r3
 80166c2:	2308      	movs	r3, #8
 80166c4:	005b      	lsls	r3, r3, #1
 80166c6:	429a      	cmp	r2, r3
 80166c8:	d920      	bls.n	801670c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80166ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	4413      	add	r3, r2
 80166d0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80166d2:	69bb      	ldr	r3, [r7, #24]
 80166d4:	f003 0307 	and.w	r3, r3, #7
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d00b      	beq.n	80166f4 <pvPortMalloc+0x124>
        __asm volatile
 80166dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166e0:	f383 8811 	msr	BASEPRI, r3
 80166e4:	f3bf 8f6f 	isb	sy
 80166e8:	f3bf 8f4f 	dsb	sy
 80166ec:	613b      	str	r3, [r7, #16]
    }
 80166ee:	bf00      	nop
 80166f0:	bf00      	nop
 80166f2:	e7fd      	b.n	80166f0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80166f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166f6:	685a      	ldr	r2, [r3, #4]
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	1ad2      	subs	r2, r2, r3
 80166fc:	69bb      	ldr	r3, [r7, #24]
 80166fe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8016700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016702:	687a      	ldr	r2, [r7, #4]
 8016704:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016706:	69b8      	ldr	r0, [r7, #24]
 8016708:	f000 f90a 	bl	8016920 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 801670c:	4b1d      	ldr	r3, [pc, #116]	@ (8016784 <pvPortMalloc+0x1b4>)
 801670e:	681a      	ldr	r2, [r3, #0]
 8016710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016712:	685b      	ldr	r3, [r3, #4]
 8016714:	1ad3      	subs	r3, r2, r3
 8016716:	4a1b      	ldr	r2, [pc, #108]	@ (8016784 <pvPortMalloc+0x1b4>)
 8016718:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801671a:	4b1a      	ldr	r3, [pc, #104]	@ (8016784 <pvPortMalloc+0x1b4>)
 801671c:	681a      	ldr	r2, [r3, #0]
 801671e:	4b1b      	ldr	r3, [pc, #108]	@ (801678c <pvPortMalloc+0x1bc>)
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	429a      	cmp	r2, r3
 8016724:	d203      	bcs.n	801672e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016726:	4b17      	ldr	r3, [pc, #92]	@ (8016784 <pvPortMalloc+0x1b4>)
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	4a18      	ldr	r2, [pc, #96]	@ (801678c <pvPortMalloc+0x1bc>)
 801672c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 801672e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016730:	685a      	ldr	r2, [r3, #4]
 8016732:	4b13      	ldr	r3, [pc, #76]	@ (8016780 <pvPortMalloc+0x1b0>)
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	431a      	orrs	r2, r3
 8016738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801673a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 801673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801673e:	2200      	movs	r2, #0
 8016740:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8016742:	4b13      	ldr	r3, [pc, #76]	@ (8016790 <pvPortMalloc+0x1c0>)
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	3301      	adds	r3, #1
 8016748:	4a11      	ldr	r2, [pc, #68]	@ (8016790 <pvPortMalloc+0x1c0>)
 801674a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 801674c:	f7fe f9ae 	bl	8014aac <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016750:	69fb      	ldr	r3, [r7, #28]
 8016752:	f003 0307 	and.w	r3, r3, #7
 8016756:	2b00      	cmp	r3, #0
 8016758:	d00b      	beq.n	8016772 <pvPortMalloc+0x1a2>
        __asm volatile
 801675a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801675e:	f383 8811 	msr	BASEPRI, r3
 8016762:	f3bf 8f6f 	isb	sy
 8016766:	f3bf 8f4f 	dsb	sy
 801676a:	60fb      	str	r3, [r7, #12]
    }
 801676c:	bf00      	nop
 801676e:	bf00      	nop
 8016770:	e7fd      	b.n	801676e <pvPortMalloc+0x19e>
    return pvReturn;
 8016772:	69fb      	ldr	r3, [r7, #28]
}
 8016774:	4618      	mov	r0, r3
 8016776:	3728      	adds	r7, #40	@ 0x28
 8016778:	46bd      	mov	sp, r7
 801677a:	bd80      	pop	{r7, pc}
 801677c:	2001427c 	.word	0x2001427c
 8016780:	20014290 	.word	0x20014290
 8016784:	20014280 	.word	0x20014280
 8016788:	20014274 	.word	0x20014274
 801678c:	20014284 	.word	0x20014284
 8016790:	20014288 	.word	0x20014288

08016794 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b086      	sub	sp, #24
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d04f      	beq.n	8016846 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80167a6:	2308      	movs	r3, #8
 80167a8:	425b      	negs	r3, r3
 80167aa:	697a      	ldr	r2, [r7, #20]
 80167ac:	4413      	add	r3, r2
 80167ae:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80167b0:	697b      	ldr	r3, [r7, #20]
 80167b2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80167b4:	693b      	ldr	r3, [r7, #16]
 80167b6:	685a      	ldr	r2, [r3, #4]
 80167b8:	4b25      	ldr	r3, [pc, #148]	@ (8016850 <vPortFree+0xbc>)
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	4013      	ands	r3, r2
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d10b      	bne.n	80167da <vPortFree+0x46>
        __asm volatile
 80167c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167c6:	f383 8811 	msr	BASEPRI, r3
 80167ca:	f3bf 8f6f 	isb	sy
 80167ce:	f3bf 8f4f 	dsb	sy
 80167d2:	60fb      	str	r3, [r7, #12]
    }
 80167d4:	bf00      	nop
 80167d6:	bf00      	nop
 80167d8:	e7fd      	b.n	80167d6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80167da:	693b      	ldr	r3, [r7, #16]
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d00b      	beq.n	80167fa <vPortFree+0x66>
        __asm volatile
 80167e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167e6:	f383 8811 	msr	BASEPRI, r3
 80167ea:	f3bf 8f6f 	isb	sy
 80167ee:	f3bf 8f4f 	dsb	sy
 80167f2:	60bb      	str	r3, [r7, #8]
    }
 80167f4:	bf00      	nop
 80167f6:	bf00      	nop
 80167f8:	e7fd      	b.n	80167f6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80167fa:	693b      	ldr	r3, [r7, #16]
 80167fc:	685a      	ldr	r2, [r3, #4]
 80167fe:	4b14      	ldr	r3, [pc, #80]	@ (8016850 <vPortFree+0xbc>)
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	4013      	ands	r3, r2
 8016804:	2b00      	cmp	r3, #0
 8016806:	d01e      	beq.n	8016846 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8016808:	693b      	ldr	r3, [r7, #16]
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	2b00      	cmp	r3, #0
 801680e:	d11a      	bne.n	8016846 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016810:	693b      	ldr	r3, [r7, #16]
 8016812:	685a      	ldr	r2, [r3, #4]
 8016814:	4b0e      	ldr	r3, [pc, #56]	@ (8016850 <vPortFree+0xbc>)
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	43db      	mvns	r3, r3
 801681a:	401a      	ands	r2, r3
 801681c:	693b      	ldr	r3, [r7, #16]
 801681e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8016820:	f7fe f936 	bl	8014a90 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8016824:	693b      	ldr	r3, [r7, #16]
 8016826:	685a      	ldr	r2, [r3, #4]
 8016828:	4b0a      	ldr	r3, [pc, #40]	@ (8016854 <vPortFree+0xc0>)
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	4413      	add	r3, r2
 801682e:	4a09      	ldr	r2, [pc, #36]	@ (8016854 <vPortFree+0xc0>)
 8016830:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016832:	6938      	ldr	r0, [r7, #16]
 8016834:	f000 f874 	bl	8016920 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8016838:	4b07      	ldr	r3, [pc, #28]	@ (8016858 <vPortFree+0xc4>)
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	3301      	adds	r3, #1
 801683e:	4a06      	ldr	r2, [pc, #24]	@ (8016858 <vPortFree+0xc4>)
 8016840:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8016842:	f7fe f933 	bl	8014aac <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8016846:	bf00      	nop
 8016848:	3718      	adds	r7, #24
 801684a:	46bd      	mov	sp, r7
 801684c:	bd80      	pop	{r7, pc}
 801684e:	bf00      	nop
 8016850:	20014290 	.word	0x20014290
 8016854:	20014280 	.word	0x20014280
 8016858:	2001428c 	.word	0x2001428c

0801685c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 801685c:	b480      	push	{r7}
 801685e:	b085      	sub	sp, #20
 8016860:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016862:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8016866:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8016868:	4b27      	ldr	r3, [pc, #156]	@ (8016908 <prvHeapInit+0xac>)
 801686a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	f003 0307 	and.w	r3, r3, #7
 8016872:	2b00      	cmp	r3, #0
 8016874:	d00c      	beq.n	8016890 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	3307      	adds	r3, #7
 801687a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	f023 0307 	bic.w	r3, r3, #7
 8016882:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016884:	68ba      	ldr	r2, [r7, #8]
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	1ad3      	subs	r3, r2, r3
 801688a:	4a1f      	ldr	r2, [pc, #124]	@ (8016908 <prvHeapInit+0xac>)
 801688c:	4413      	add	r3, r2
 801688e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016894:	4a1d      	ldr	r2, [pc, #116]	@ (801690c <prvHeapInit+0xb0>)
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 801689a:	4b1c      	ldr	r3, [pc, #112]	@ (801690c <prvHeapInit+0xb0>)
 801689c:	2200      	movs	r2, #0
 801689e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	68ba      	ldr	r2, [r7, #8]
 80168a4:	4413      	add	r3, r2
 80168a6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80168a8:	2208      	movs	r2, #8
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	1a9b      	subs	r3, r3, r2
 80168ae:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	f023 0307 	bic.w	r3, r3, #7
 80168b6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	4a15      	ldr	r2, [pc, #84]	@ (8016910 <prvHeapInit+0xb4>)
 80168bc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80168be:	4b14      	ldr	r3, [pc, #80]	@ (8016910 <prvHeapInit+0xb4>)
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	2200      	movs	r2, #0
 80168c4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80168c6:	4b12      	ldr	r3, [pc, #72]	@ (8016910 <prvHeapInit+0xb4>)
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	2200      	movs	r2, #0
 80168cc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80168d2:	683b      	ldr	r3, [r7, #0]
 80168d4:	68fa      	ldr	r2, [r7, #12]
 80168d6:	1ad2      	subs	r2, r2, r3
 80168d8:	683b      	ldr	r3, [r7, #0]
 80168da:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80168dc:	4b0c      	ldr	r3, [pc, #48]	@ (8016910 <prvHeapInit+0xb4>)
 80168de:	681a      	ldr	r2, [r3, #0]
 80168e0:	683b      	ldr	r3, [r7, #0]
 80168e2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80168e4:	683b      	ldr	r3, [r7, #0]
 80168e6:	685b      	ldr	r3, [r3, #4]
 80168e8:	4a0a      	ldr	r2, [pc, #40]	@ (8016914 <prvHeapInit+0xb8>)
 80168ea:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80168ec:	683b      	ldr	r3, [r7, #0]
 80168ee:	685b      	ldr	r3, [r3, #4]
 80168f0:	4a09      	ldr	r2, [pc, #36]	@ (8016918 <prvHeapInit+0xbc>)
 80168f2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80168f4:	4b09      	ldr	r3, [pc, #36]	@ (801691c <prvHeapInit+0xc0>)
 80168f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80168fa:	601a      	str	r2, [r3, #0]
}
 80168fc:	bf00      	nop
 80168fe:	3714      	adds	r7, #20
 8016900:	46bd      	mov	sp, r7
 8016902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016906:	4770      	bx	lr
 8016908:	20001674 	.word	0x20001674
 801690c:	20014274 	.word	0x20014274
 8016910:	2001427c 	.word	0x2001427c
 8016914:	20014284 	.word	0x20014284
 8016918:	20014280 	.word	0x20014280
 801691c:	20014290 	.word	0x20014290

08016920 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8016920:	b480      	push	{r7}
 8016922:	b085      	sub	sp, #20
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016928:	4b28      	ldr	r3, [pc, #160]	@ (80169cc <prvInsertBlockIntoFreeList+0xac>)
 801692a:	60fb      	str	r3, [r7, #12]
 801692c:	e002      	b.n	8016934 <prvInsertBlockIntoFreeList+0x14>
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	60fb      	str	r3, [r7, #12]
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	687a      	ldr	r2, [r7, #4]
 801693a:	429a      	cmp	r2, r3
 801693c:	d8f7      	bhi.n	801692e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	685b      	ldr	r3, [r3, #4]
 8016946:	68ba      	ldr	r2, [r7, #8]
 8016948:	4413      	add	r3, r2
 801694a:	687a      	ldr	r2, [r7, #4]
 801694c:	429a      	cmp	r2, r3
 801694e:	d108      	bne.n	8016962 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	685a      	ldr	r2, [r3, #4]
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	685b      	ldr	r3, [r3, #4]
 8016958:	441a      	add	r2, r3
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	685b      	ldr	r3, [r3, #4]
 801696a:	68ba      	ldr	r2, [r7, #8]
 801696c:	441a      	add	r2, r3
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	429a      	cmp	r2, r3
 8016974:	d118      	bne.n	80169a8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	681a      	ldr	r2, [r3, #0]
 801697a:	4b15      	ldr	r3, [pc, #84]	@ (80169d0 <prvInsertBlockIntoFreeList+0xb0>)
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	429a      	cmp	r2, r3
 8016980:	d00d      	beq.n	801699e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	685a      	ldr	r2, [r3, #4]
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	685b      	ldr	r3, [r3, #4]
 801698c:	441a      	add	r2, r3
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	681a      	ldr	r2, [r3, #0]
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	601a      	str	r2, [r3, #0]
 801699c:	e008      	b.n	80169b0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801699e:	4b0c      	ldr	r3, [pc, #48]	@ (80169d0 <prvInsertBlockIntoFreeList+0xb0>)
 80169a0:	681a      	ldr	r2, [r3, #0]
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	601a      	str	r2, [r3, #0]
 80169a6:	e003      	b.n	80169b0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	681a      	ldr	r2, [r3, #0]
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80169b0:	68fa      	ldr	r2, [r7, #12]
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	429a      	cmp	r2, r3
 80169b6:	d002      	beq.n	80169be <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	687a      	ldr	r2, [r7, #4]
 80169bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80169be:	bf00      	nop
 80169c0:	3714      	adds	r7, #20
 80169c2:	46bd      	mov	sp, r7
 80169c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c8:	4770      	bx	lr
 80169ca:	bf00      	nop
 80169cc:	20014274 	.word	0x20014274
 80169d0:	2001427c 	.word	0x2001427c

080169d4 <malloc>:
 80169d4:	4b02      	ldr	r3, [pc, #8]	@ (80169e0 <malloc+0xc>)
 80169d6:	4601      	mov	r1, r0
 80169d8:	6818      	ldr	r0, [r3, #0]
 80169da:	f000 b82d 	b.w	8016a38 <_malloc_r>
 80169de:	bf00      	nop
 80169e0:	20000200 	.word	0x20000200

080169e4 <free>:
 80169e4:	4b02      	ldr	r3, [pc, #8]	@ (80169f0 <free+0xc>)
 80169e6:	4601      	mov	r1, r0
 80169e8:	6818      	ldr	r0, [r3, #0]
 80169ea:	f002 bce9 	b.w	80193c0 <_free_r>
 80169ee:	bf00      	nop
 80169f0:	20000200 	.word	0x20000200

080169f4 <sbrk_aligned>:
 80169f4:	b570      	push	{r4, r5, r6, lr}
 80169f6:	4e0f      	ldr	r6, [pc, #60]	@ (8016a34 <sbrk_aligned+0x40>)
 80169f8:	460c      	mov	r4, r1
 80169fa:	6831      	ldr	r1, [r6, #0]
 80169fc:	4605      	mov	r5, r0
 80169fe:	b911      	cbnz	r1, 8016a06 <sbrk_aligned+0x12>
 8016a00:	f001 fe18 	bl	8018634 <_sbrk_r>
 8016a04:	6030      	str	r0, [r6, #0]
 8016a06:	4621      	mov	r1, r4
 8016a08:	4628      	mov	r0, r5
 8016a0a:	f001 fe13 	bl	8018634 <_sbrk_r>
 8016a0e:	1c43      	adds	r3, r0, #1
 8016a10:	d103      	bne.n	8016a1a <sbrk_aligned+0x26>
 8016a12:	f04f 34ff 	mov.w	r4, #4294967295
 8016a16:	4620      	mov	r0, r4
 8016a18:	bd70      	pop	{r4, r5, r6, pc}
 8016a1a:	1cc4      	adds	r4, r0, #3
 8016a1c:	f024 0403 	bic.w	r4, r4, #3
 8016a20:	42a0      	cmp	r0, r4
 8016a22:	d0f8      	beq.n	8016a16 <sbrk_aligned+0x22>
 8016a24:	1a21      	subs	r1, r4, r0
 8016a26:	4628      	mov	r0, r5
 8016a28:	f001 fe04 	bl	8018634 <_sbrk_r>
 8016a2c:	3001      	adds	r0, #1
 8016a2e:	d1f2      	bne.n	8016a16 <sbrk_aligned+0x22>
 8016a30:	e7ef      	b.n	8016a12 <sbrk_aligned+0x1e>
 8016a32:	bf00      	nop
 8016a34:	20014294 	.word	0x20014294

08016a38 <_malloc_r>:
 8016a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a3c:	1ccd      	adds	r5, r1, #3
 8016a3e:	f025 0503 	bic.w	r5, r5, #3
 8016a42:	3508      	adds	r5, #8
 8016a44:	2d0c      	cmp	r5, #12
 8016a46:	bf38      	it	cc
 8016a48:	250c      	movcc	r5, #12
 8016a4a:	2d00      	cmp	r5, #0
 8016a4c:	4606      	mov	r6, r0
 8016a4e:	db01      	blt.n	8016a54 <_malloc_r+0x1c>
 8016a50:	42a9      	cmp	r1, r5
 8016a52:	d904      	bls.n	8016a5e <_malloc_r+0x26>
 8016a54:	230c      	movs	r3, #12
 8016a56:	6033      	str	r3, [r6, #0]
 8016a58:	2000      	movs	r0, #0
 8016a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016b34 <_malloc_r+0xfc>
 8016a62:	f000 f869 	bl	8016b38 <__malloc_lock>
 8016a66:	f8d8 3000 	ldr.w	r3, [r8]
 8016a6a:	461c      	mov	r4, r3
 8016a6c:	bb44      	cbnz	r4, 8016ac0 <_malloc_r+0x88>
 8016a6e:	4629      	mov	r1, r5
 8016a70:	4630      	mov	r0, r6
 8016a72:	f7ff ffbf 	bl	80169f4 <sbrk_aligned>
 8016a76:	1c43      	adds	r3, r0, #1
 8016a78:	4604      	mov	r4, r0
 8016a7a:	d158      	bne.n	8016b2e <_malloc_r+0xf6>
 8016a7c:	f8d8 4000 	ldr.w	r4, [r8]
 8016a80:	4627      	mov	r7, r4
 8016a82:	2f00      	cmp	r7, #0
 8016a84:	d143      	bne.n	8016b0e <_malloc_r+0xd6>
 8016a86:	2c00      	cmp	r4, #0
 8016a88:	d04b      	beq.n	8016b22 <_malloc_r+0xea>
 8016a8a:	6823      	ldr	r3, [r4, #0]
 8016a8c:	4639      	mov	r1, r7
 8016a8e:	4630      	mov	r0, r6
 8016a90:	eb04 0903 	add.w	r9, r4, r3
 8016a94:	f001 fdce 	bl	8018634 <_sbrk_r>
 8016a98:	4581      	cmp	r9, r0
 8016a9a:	d142      	bne.n	8016b22 <_malloc_r+0xea>
 8016a9c:	6821      	ldr	r1, [r4, #0]
 8016a9e:	1a6d      	subs	r5, r5, r1
 8016aa0:	4629      	mov	r1, r5
 8016aa2:	4630      	mov	r0, r6
 8016aa4:	f7ff ffa6 	bl	80169f4 <sbrk_aligned>
 8016aa8:	3001      	adds	r0, #1
 8016aaa:	d03a      	beq.n	8016b22 <_malloc_r+0xea>
 8016aac:	6823      	ldr	r3, [r4, #0]
 8016aae:	442b      	add	r3, r5
 8016ab0:	6023      	str	r3, [r4, #0]
 8016ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8016ab6:	685a      	ldr	r2, [r3, #4]
 8016ab8:	bb62      	cbnz	r2, 8016b14 <_malloc_r+0xdc>
 8016aba:	f8c8 7000 	str.w	r7, [r8]
 8016abe:	e00f      	b.n	8016ae0 <_malloc_r+0xa8>
 8016ac0:	6822      	ldr	r2, [r4, #0]
 8016ac2:	1b52      	subs	r2, r2, r5
 8016ac4:	d420      	bmi.n	8016b08 <_malloc_r+0xd0>
 8016ac6:	2a0b      	cmp	r2, #11
 8016ac8:	d917      	bls.n	8016afa <_malloc_r+0xc2>
 8016aca:	1961      	adds	r1, r4, r5
 8016acc:	42a3      	cmp	r3, r4
 8016ace:	6025      	str	r5, [r4, #0]
 8016ad0:	bf18      	it	ne
 8016ad2:	6059      	strne	r1, [r3, #4]
 8016ad4:	6863      	ldr	r3, [r4, #4]
 8016ad6:	bf08      	it	eq
 8016ad8:	f8c8 1000 	streq.w	r1, [r8]
 8016adc:	5162      	str	r2, [r4, r5]
 8016ade:	604b      	str	r3, [r1, #4]
 8016ae0:	4630      	mov	r0, r6
 8016ae2:	f000 f82f 	bl	8016b44 <__malloc_unlock>
 8016ae6:	f104 000b 	add.w	r0, r4, #11
 8016aea:	1d23      	adds	r3, r4, #4
 8016aec:	f020 0007 	bic.w	r0, r0, #7
 8016af0:	1ac2      	subs	r2, r0, r3
 8016af2:	bf1c      	itt	ne
 8016af4:	1a1b      	subne	r3, r3, r0
 8016af6:	50a3      	strne	r3, [r4, r2]
 8016af8:	e7af      	b.n	8016a5a <_malloc_r+0x22>
 8016afa:	6862      	ldr	r2, [r4, #4]
 8016afc:	42a3      	cmp	r3, r4
 8016afe:	bf0c      	ite	eq
 8016b00:	f8c8 2000 	streq.w	r2, [r8]
 8016b04:	605a      	strne	r2, [r3, #4]
 8016b06:	e7eb      	b.n	8016ae0 <_malloc_r+0xa8>
 8016b08:	4623      	mov	r3, r4
 8016b0a:	6864      	ldr	r4, [r4, #4]
 8016b0c:	e7ae      	b.n	8016a6c <_malloc_r+0x34>
 8016b0e:	463c      	mov	r4, r7
 8016b10:	687f      	ldr	r7, [r7, #4]
 8016b12:	e7b6      	b.n	8016a82 <_malloc_r+0x4a>
 8016b14:	461a      	mov	r2, r3
 8016b16:	685b      	ldr	r3, [r3, #4]
 8016b18:	42a3      	cmp	r3, r4
 8016b1a:	d1fb      	bne.n	8016b14 <_malloc_r+0xdc>
 8016b1c:	2300      	movs	r3, #0
 8016b1e:	6053      	str	r3, [r2, #4]
 8016b20:	e7de      	b.n	8016ae0 <_malloc_r+0xa8>
 8016b22:	230c      	movs	r3, #12
 8016b24:	6033      	str	r3, [r6, #0]
 8016b26:	4630      	mov	r0, r6
 8016b28:	f000 f80c 	bl	8016b44 <__malloc_unlock>
 8016b2c:	e794      	b.n	8016a58 <_malloc_r+0x20>
 8016b2e:	6005      	str	r5, [r0, #0]
 8016b30:	e7d6      	b.n	8016ae0 <_malloc_r+0xa8>
 8016b32:	bf00      	nop
 8016b34:	20014298 	.word	0x20014298

08016b38 <__malloc_lock>:
 8016b38:	4801      	ldr	r0, [pc, #4]	@ (8016b40 <__malloc_lock+0x8>)
 8016b3a:	f001 bdc8 	b.w	80186ce <__retarget_lock_acquire_recursive>
 8016b3e:	bf00      	nop
 8016b40:	200143dc 	.word	0x200143dc

08016b44 <__malloc_unlock>:
 8016b44:	4801      	ldr	r0, [pc, #4]	@ (8016b4c <__malloc_unlock+0x8>)
 8016b46:	f001 bdc3 	b.w	80186d0 <__retarget_lock_release_recursive>
 8016b4a:	bf00      	nop
 8016b4c:	200143dc 	.word	0x200143dc

08016b50 <realloc>:
 8016b50:	4b02      	ldr	r3, [pc, #8]	@ (8016b5c <realloc+0xc>)
 8016b52:	460a      	mov	r2, r1
 8016b54:	4601      	mov	r1, r0
 8016b56:	6818      	ldr	r0, [r3, #0]
 8016b58:	f000 b802 	b.w	8016b60 <_realloc_r>
 8016b5c:	20000200 	.word	0x20000200

08016b60 <_realloc_r>:
 8016b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b64:	4607      	mov	r7, r0
 8016b66:	4614      	mov	r4, r2
 8016b68:	460d      	mov	r5, r1
 8016b6a:	b921      	cbnz	r1, 8016b76 <_realloc_r+0x16>
 8016b6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b70:	4611      	mov	r1, r2
 8016b72:	f7ff bf61 	b.w	8016a38 <_malloc_r>
 8016b76:	b92a      	cbnz	r2, 8016b84 <_realloc_r+0x24>
 8016b78:	f002 fc22 	bl	80193c0 <_free_r>
 8016b7c:	4625      	mov	r5, r4
 8016b7e:	4628      	mov	r0, r5
 8016b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b84:	f003 fc5c 	bl	801a440 <_malloc_usable_size_r>
 8016b88:	4284      	cmp	r4, r0
 8016b8a:	4606      	mov	r6, r0
 8016b8c:	d802      	bhi.n	8016b94 <_realloc_r+0x34>
 8016b8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016b92:	d8f4      	bhi.n	8016b7e <_realloc_r+0x1e>
 8016b94:	4621      	mov	r1, r4
 8016b96:	4638      	mov	r0, r7
 8016b98:	f7ff ff4e 	bl	8016a38 <_malloc_r>
 8016b9c:	4680      	mov	r8, r0
 8016b9e:	b908      	cbnz	r0, 8016ba4 <_realloc_r+0x44>
 8016ba0:	4645      	mov	r5, r8
 8016ba2:	e7ec      	b.n	8016b7e <_realloc_r+0x1e>
 8016ba4:	42b4      	cmp	r4, r6
 8016ba6:	4622      	mov	r2, r4
 8016ba8:	4629      	mov	r1, r5
 8016baa:	bf28      	it	cs
 8016bac:	4632      	movcs	r2, r6
 8016bae:	f001 fd98 	bl	80186e2 <memcpy>
 8016bb2:	4629      	mov	r1, r5
 8016bb4:	4638      	mov	r0, r7
 8016bb6:	f002 fc03 	bl	80193c0 <_free_r>
 8016bba:	e7f1      	b.n	8016ba0 <_realloc_r+0x40>

08016bbc <sulp>:
 8016bbc:	b570      	push	{r4, r5, r6, lr}
 8016bbe:	4604      	mov	r4, r0
 8016bc0:	460d      	mov	r5, r1
 8016bc2:	ec45 4b10 	vmov	d0, r4, r5
 8016bc6:	4616      	mov	r6, r2
 8016bc8:	f003 fafc 	bl	801a1c4 <__ulp>
 8016bcc:	ec51 0b10 	vmov	r0, r1, d0
 8016bd0:	b17e      	cbz	r6, 8016bf2 <sulp+0x36>
 8016bd2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016bd6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	dd09      	ble.n	8016bf2 <sulp+0x36>
 8016bde:	051b      	lsls	r3, r3, #20
 8016be0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8016be4:	2400      	movs	r4, #0
 8016be6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8016bea:	4622      	mov	r2, r4
 8016bec:	462b      	mov	r3, r5
 8016bee:	f7f1 fd33 	bl	8008658 <__aeabi_dmul>
 8016bf2:	ec41 0b10 	vmov	d0, r0, r1
 8016bf6:	bd70      	pop	{r4, r5, r6, pc}

08016bf8 <_strtod_l>:
 8016bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bfc:	b09f      	sub	sp, #124	@ 0x7c
 8016bfe:	460c      	mov	r4, r1
 8016c00:	9217      	str	r2, [sp, #92]	@ 0x5c
 8016c02:	2200      	movs	r2, #0
 8016c04:	921a      	str	r2, [sp, #104]	@ 0x68
 8016c06:	9005      	str	r0, [sp, #20]
 8016c08:	f04f 0a00 	mov.w	sl, #0
 8016c0c:	f04f 0b00 	mov.w	fp, #0
 8016c10:	460a      	mov	r2, r1
 8016c12:	9219      	str	r2, [sp, #100]	@ 0x64
 8016c14:	7811      	ldrb	r1, [r2, #0]
 8016c16:	292b      	cmp	r1, #43	@ 0x2b
 8016c18:	d04a      	beq.n	8016cb0 <_strtod_l+0xb8>
 8016c1a:	d838      	bhi.n	8016c8e <_strtod_l+0x96>
 8016c1c:	290d      	cmp	r1, #13
 8016c1e:	d832      	bhi.n	8016c86 <_strtod_l+0x8e>
 8016c20:	2908      	cmp	r1, #8
 8016c22:	d832      	bhi.n	8016c8a <_strtod_l+0x92>
 8016c24:	2900      	cmp	r1, #0
 8016c26:	d03b      	beq.n	8016ca0 <_strtod_l+0xa8>
 8016c28:	2200      	movs	r2, #0
 8016c2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8016c2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8016c2e:	782a      	ldrb	r2, [r5, #0]
 8016c30:	2a30      	cmp	r2, #48	@ 0x30
 8016c32:	f040 80b2 	bne.w	8016d9a <_strtod_l+0x1a2>
 8016c36:	786a      	ldrb	r2, [r5, #1]
 8016c38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016c3c:	2a58      	cmp	r2, #88	@ 0x58
 8016c3e:	d16e      	bne.n	8016d1e <_strtod_l+0x126>
 8016c40:	9302      	str	r3, [sp, #8]
 8016c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c44:	9301      	str	r3, [sp, #4]
 8016c46:	ab1a      	add	r3, sp, #104	@ 0x68
 8016c48:	9300      	str	r3, [sp, #0]
 8016c4a:	4a8f      	ldr	r2, [pc, #572]	@ (8016e88 <_strtod_l+0x290>)
 8016c4c:	9805      	ldr	r0, [sp, #20]
 8016c4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016c50:	a919      	add	r1, sp, #100	@ 0x64
 8016c52:	f002 fc67 	bl	8019524 <__gethex>
 8016c56:	f010 060f 	ands.w	r6, r0, #15
 8016c5a:	4604      	mov	r4, r0
 8016c5c:	d005      	beq.n	8016c6a <_strtod_l+0x72>
 8016c5e:	2e06      	cmp	r6, #6
 8016c60:	d128      	bne.n	8016cb4 <_strtod_l+0xbc>
 8016c62:	3501      	adds	r5, #1
 8016c64:	2300      	movs	r3, #0
 8016c66:	9519      	str	r5, [sp, #100]	@ 0x64
 8016c68:	930e      	str	r3, [sp, #56]	@ 0x38
 8016c6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	f040 858e 	bne.w	801778e <_strtod_l+0xb96>
 8016c72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c74:	b1cb      	cbz	r3, 8016caa <_strtod_l+0xb2>
 8016c76:	4652      	mov	r2, sl
 8016c78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8016c7c:	ec43 2b10 	vmov	d0, r2, r3
 8016c80:	b01f      	add	sp, #124	@ 0x7c
 8016c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c86:	2920      	cmp	r1, #32
 8016c88:	d1ce      	bne.n	8016c28 <_strtod_l+0x30>
 8016c8a:	3201      	adds	r2, #1
 8016c8c:	e7c1      	b.n	8016c12 <_strtod_l+0x1a>
 8016c8e:	292d      	cmp	r1, #45	@ 0x2d
 8016c90:	d1ca      	bne.n	8016c28 <_strtod_l+0x30>
 8016c92:	2101      	movs	r1, #1
 8016c94:	910e      	str	r1, [sp, #56]	@ 0x38
 8016c96:	1c51      	adds	r1, r2, #1
 8016c98:	9119      	str	r1, [sp, #100]	@ 0x64
 8016c9a:	7852      	ldrb	r2, [r2, #1]
 8016c9c:	2a00      	cmp	r2, #0
 8016c9e:	d1c5      	bne.n	8016c2c <_strtod_l+0x34>
 8016ca0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016ca2:	9419      	str	r4, [sp, #100]	@ 0x64
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	f040 8570 	bne.w	801778a <_strtod_l+0xb92>
 8016caa:	4652      	mov	r2, sl
 8016cac:	465b      	mov	r3, fp
 8016cae:	e7e5      	b.n	8016c7c <_strtod_l+0x84>
 8016cb0:	2100      	movs	r1, #0
 8016cb2:	e7ef      	b.n	8016c94 <_strtod_l+0x9c>
 8016cb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016cb6:	b13a      	cbz	r2, 8016cc8 <_strtod_l+0xd0>
 8016cb8:	2135      	movs	r1, #53	@ 0x35
 8016cba:	a81c      	add	r0, sp, #112	@ 0x70
 8016cbc:	f003 fb7c 	bl	801a3b8 <__copybits>
 8016cc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016cc2:	9805      	ldr	r0, [sp, #20]
 8016cc4:	f002 ff52 	bl	8019b6c <_Bfree>
 8016cc8:	3e01      	subs	r6, #1
 8016cca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016ccc:	2e04      	cmp	r6, #4
 8016cce:	d806      	bhi.n	8016cde <_strtod_l+0xe6>
 8016cd0:	e8df f006 	tbb	[pc, r6]
 8016cd4:	201d0314 	.word	0x201d0314
 8016cd8:	14          	.byte	0x14
 8016cd9:	00          	.byte	0x00
 8016cda:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8016cde:	05e1      	lsls	r1, r4, #23
 8016ce0:	bf48      	it	mi
 8016ce2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016ce6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016cea:	0d1b      	lsrs	r3, r3, #20
 8016cec:	051b      	lsls	r3, r3, #20
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d1bb      	bne.n	8016c6a <_strtod_l+0x72>
 8016cf2:	f001 fcc1 	bl	8018678 <__errno>
 8016cf6:	2322      	movs	r3, #34	@ 0x22
 8016cf8:	6003      	str	r3, [r0, #0]
 8016cfa:	e7b6      	b.n	8016c6a <_strtod_l+0x72>
 8016cfc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016d00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016d04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016d08:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016d0c:	e7e7      	b.n	8016cde <_strtod_l+0xe6>
 8016d0e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8016e90 <_strtod_l+0x298>
 8016d12:	e7e4      	b.n	8016cde <_strtod_l+0xe6>
 8016d14:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016d18:	f04f 3aff 	mov.w	sl, #4294967295
 8016d1c:	e7df      	b.n	8016cde <_strtod_l+0xe6>
 8016d1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d20:	1c5a      	adds	r2, r3, #1
 8016d22:	9219      	str	r2, [sp, #100]	@ 0x64
 8016d24:	785b      	ldrb	r3, [r3, #1]
 8016d26:	2b30      	cmp	r3, #48	@ 0x30
 8016d28:	d0f9      	beq.n	8016d1e <_strtod_l+0x126>
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d09d      	beq.n	8016c6a <_strtod_l+0x72>
 8016d2e:	2301      	movs	r3, #1
 8016d30:	2700      	movs	r7, #0
 8016d32:	9308      	str	r3, [sp, #32]
 8016d34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d36:	930c      	str	r3, [sp, #48]	@ 0x30
 8016d38:	970b      	str	r7, [sp, #44]	@ 0x2c
 8016d3a:	46b9      	mov	r9, r7
 8016d3c:	220a      	movs	r2, #10
 8016d3e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8016d40:	7805      	ldrb	r5, [r0, #0]
 8016d42:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8016d46:	b2d9      	uxtb	r1, r3
 8016d48:	2909      	cmp	r1, #9
 8016d4a:	d928      	bls.n	8016d9e <_strtod_l+0x1a6>
 8016d4c:	494f      	ldr	r1, [pc, #316]	@ (8016e8c <_strtod_l+0x294>)
 8016d4e:	2201      	movs	r2, #1
 8016d50:	f001 fbfc 	bl	801854c <strncmp>
 8016d54:	2800      	cmp	r0, #0
 8016d56:	d032      	beq.n	8016dbe <_strtod_l+0x1c6>
 8016d58:	2000      	movs	r0, #0
 8016d5a:	462a      	mov	r2, r5
 8016d5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8016d5e:	464d      	mov	r5, r9
 8016d60:	4603      	mov	r3, r0
 8016d62:	2a65      	cmp	r2, #101	@ 0x65
 8016d64:	d001      	beq.n	8016d6a <_strtod_l+0x172>
 8016d66:	2a45      	cmp	r2, #69	@ 0x45
 8016d68:	d114      	bne.n	8016d94 <_strtod_l+0x19c>
 8016d6a:	b91d      	cbnz	r5, 8016d74 <_strtod_l+0x17c>
 8016d6c:	9a08      	ldr	r2, [sp, #32]
 8016d6e:	4302      	orrs	r2, r0
 8016d70:	d096      	beq.n	8016ca0 <_strtod_l+0xa8>
 8016d72:	2500      	movs	r5, #0
 8016d74:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8016d76:	1c62      	adds	r2, r4, #1
 8016d78:	9219      	str	r2, [sp, #100]	@ 0x64
 8016d7a:	7862      	ldrb	r2, [r4, #1]
 8016d7c:	2a2b      	cmp	r2, #43	@ 0x2b
 8016d7e:	d07a      	beq.n	8016e76 <_strtod_l+0x27e>
 8016d80:	2a2d      	cmp	r2, #45	@ 0x2d
 8016d82:	d07e      	beq.n	8016e82 <_strtod_l+0x28a>
 8016d84:	f04f 0c00 	mov.w	ip, #0
 8016d88:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016d8c:	2909      	cmp	r1, #9
 8016d8e:	f240 8085 	bls.w	8016e9c <_strtod_l+0x2a4>
 8016d92:	9419      	str	r4, [sp, #100]	@ 0x64
 8016d94:	f04f 0800 	mov.w	r8, #0
 8016d98:	e0a5      	b.n	8016ee6 <_strtod_l+0x2ee>
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	e7c8      	b.n	8016d30 <_strtod_l+0x138>
 8016d9e:	f1b9 0f08 	cmp.w	r9, #8
 8016da2:	bfd8      	it	le
 8016da4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8016da6:	f100 0001 	add.w	r0, r0, #1
 8016daa:	bfda      	itte	le
 8016dac:	fb02 3301 	mlale	r3, r2, r1, r3
 8016db0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8016db2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8016db6:	f109 0901 	add.w	r9, r9, #1
 8016dba:	9019      	str	r0, [sp, #100]	@ 0x64
 8016dbc:	e7bf      	b.n	8016d3e <_strtod_l+0x146>
 8016dbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016dc0:	1c5a      	adds	r2, r3, #1
 8016dc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8016dc4:	785a      	ldrb	r2, [r3, #1]
 8016dc6:	f1b9 0f00 	cmp.w	r9, #0
 8016dca:	d03b      	beq.n	8016e44 <_strtod_l+0x24c>
 8016dcc:	900a      	str	r0, [sp, #40]	@ 0x28
 8016dce:	464d      	mov	r5, r9
 8016dd0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8016dd4:	2b09      	cmp	r3, #9
 8016dd6:	d912      	bls.n	8016dfe <_strtod_l+0x206>
 8016dd8:	2301      	movs	r3, #1
 8016dda:	e7c2      	b.n	8016d62 <_strtod_l+0x16a>
 8016ddc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016dde:	1c5a      	adds	r2, r3, #1
 8016de0:	9219      	str	r2, [sp, #100]	@ 0x64
 8016de2:	785a      	ldrb	r2, [r3, #1]
 8016de4:	3001      	adds	r0, #1
 8016de6:	2a30      	cmp	r2, #48	@ 0x30
 8016de8:	d0f8      	beq.n	8016ddc <_strtod_l+0x1e4>
 8016dea:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016dee:	2b08      	cmp	r3, #8
 8016df0:	f200 84d2 	bhi.w	8017798 <_strtod_l+0xba0>
 8016df4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016df6:	900a      	str	r0, [sp, #40]	@ 0x28
 8016df8:	2000      	movs	r0, #0
 8016dfa:	930c      	str	r3, [sp, #48]	@ 0x30
 8016dfc:	4605      	mov	r5, r0
 8016dfe:	3a30      	subs	r2, #48	@ 0x30
 8016e00:	f100 0301 	add.w	r3, r0, #1
 8016e04:	d018      	beq.n	8016e38 <_strtod_l+0x240>
 8016e06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016e08:	4419      	add	r1, r3
 8016e0a:	910a      	str	r1, [sp, #40]	@ 0x28
 8016e0c:	462e      	mov	r6, r5
 8016e0e:	f04f 0e0a 	mov.w	lr, #10
 8016e12:	1c71      	adds	r1, r6, #1
 8016e14:	eba1 0c05 	sub.w	ip, r1, r5
 8016e18:	4563      	cmp	r3, ip
 8016e1a:	dc15      	bgt.n	8016e48 <_strtod_l+0x250>
 8016e1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8016e20:	182b      	adds	r3, r5, r0
 8016e22:	2b08      	cmp	r3, #8
 8016e24:	f105 0501 	add.w	r5, r5, #1
 8016e28:	4405      	add	r5, r0
 8016e2a:	dc1a      	bgt.n	8016e62 <_strtod_l+0x26a>
 8016e2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016e2e:	230a      	movs	r3, #10
 8016e30:	fb03 2301 	mla	r3, r3, r1, r2
 8016e34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016e36:	2300      	movs	r3, #0
 8016e38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016e3a:	1c51      	adds	r1, r2, #1
 8016e3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8016e3e:	7852      	ldrb	r2, [r2, #1]
 8016e40:	4618      	mov	r0, r3
 8016e42:	e7c5      	b.n	8016dd0 <_strtod_l+0x1d8>
 8016e44:	4648      	mov	r0, r9
 8016e46:	e7ce      	b.n	8016de6 <_strtod_l+0x1ee>
 8016e48:	2e08      	cmp	r6, #8
 8016e4a:	dc05      	bgt.n	8016e58 <_strtod_l+0x260>
 8016e4c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8016e4e:	fb0e f606 	mul.w	r6, lr, r6
 8016e52:	960b      	str	r6, [sp, #44]	@ 0x2c
 8016e54:	460e      	mov	r6, r1
 8016e56:	e7dc      	b.n	8016e12 <_strtod_l+0x21a>
 8016e58:	2910      	cmp	r1, #16
 8016e5a:	bfd8      	it	le
 8016e5c:	fb0e f707 	mulle.w	r7, lr, r7
 8016e60:	e7f8      	b.n	8016e54 <_strtod_l+0x25c>
 8016e62:	2b0f      	cmp	r3, #15
 8016e64:	bfdc      	itt	le
 8016e66:	230a      	movle	r3, #10
 8016e68:	fb03 2707 	mlale	r7, r3, r7, r2
 8016e6c:	e7e3      	b.n	8016e36 <_strtod_l+0x23e>
 8016e6e:	2300      	movs	r3, #0
 8016e70:	930a      	str	r3, [sp, #40]	@ 0x28
 8016e72:	2301      	movs	r3, #1
 8016e74:	e77a      	b.n	8016d6c <_strtod_l+0x174>
 8016e76:	f04f 0c00 	mov.w	ip, #0
 8016e7a:	1ca2      	adds	r2, r4, #2
 8016e7c:	9219      	str	r2, [sp, #100]	@ 0x64
 8016e7e:	78a2      	ldrb	r2, [r4, #2]
 8016e80:	e782      	b.n	8016d88 <_strtod_l+0x190>
 8016e82:	f04f 0c01 	mov.w	ip, #1
 8016e86:	e7f8      	b.n	8016e7a <_strtod_l+0x282>
 8016e88:	0801daf4 	.word	0x0801daf4
 8016e8c:	0801d8f4 	.word	0x0801d8f4
 8016e90:	7ff00000 	.word	0x7ff00000
 8016e94:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016e96:	1c51      	adds	r1, r2, #1
 8016e98:	9119      	str	r1, [sp, #100]	@ 0x64
 8016e9a:	7852      	ldrb	r2, [r2, #1]
 8016e9c:	2a30      	cmp	r2, #48	@ 0x30
 8016e9e:	d0f9      	beq.n	8016e94 <_strtod_l+0x29c>
 8016ea0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8016ea4:	2908      	cmp	r1, #8
 8016ea6:	f63f af75 	bhi.w	8016d94 <_strtod_l+0x19c>
 8016eaa:	3a30      	subs	r2, #48	@ 0x30
 8016eac:	9209      	str	r2, [sp, #36]	@ 0x24
 8016eae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016eb0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016eb2:	f04f 080a 	mov.w	r8, #10
 8016eb6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016eb8:	1c56      	adds	r6, r2, #1
 8016eba:	9619      	str	r6, [sp, #100]	@ 0x64
 8016ebc:	7852      	ldrb	r2, [r2, #1]
 8016ebe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016ec2:	f1be 0f09 	cmp.w	lr, #9
 8016ec6:	d939      	bls.n	8016f3c <_strtod_l+0x344>
 8016ec8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016eca:	1a76      	subs	r6, r6, r1
 8016ecc:	2e08      	cmp	r6, #8
 8016ece:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8016ed2:	dc03      	bgt.n	8016edc <_strtod_l+0x2e4>
 8016ed4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016ed6:	4588      	cmp	r8, r1
 8016ed8:	bfa8      	it	ge
 8016eda:	4688      	movge	r8, r1
 8016edc:	f1bc 0f00 	cmp.w	ip, #0
 8016ee0:	d001      	beq.n	8016ee6 <_strtod_l+0x2ee>
 8016ee2:	f1c8 0800 	rsb	r8, r8, #0
 8016ee6:	2d00      	cmp	r5, #0
 8016ee8:	d14e      	bne.n	8016f88 <_strtod_l+0x390>
 8016eea:	9908      	ldr	r1, [sp, #32]
 8016eec:	4308      	orrs	r0, r1
 8016eee:	f47f aebc 	bne.w	8016c6a <_strtod_l+0x72>
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	f47f aed4 	bne.w	8016ca0 <_strtod_l+0xa8>
 8016ef8:	2a69      	cmp	r2, #105	@ 0x69
 8016efa:	d028      	beq.n	8016f4e <_strtod_l+0x356>
 8016efc:	dc25      	bgt.n	8016f4a <_strtod_l+0x352>
 8016efe:	2a49      	cmp	r2, #73	@ 0x49
 8016f00:	d025      	beq.n	8016f4e <_strtod_l+0x356>
 8016f02:	2a4e      	cmp	r2, #78	@ 0x4e
 8016f04:	f47f aecc 	bne.w	8016ca0 <_strtod_l+0xa8>
 8016f08:	499a      	ldr	r1, [pc, #616]	@ (8017174 <_strtod_l+0x57c>)
 8016f0a:	a819      	add	r0, sp, #100	@ 0x64
 8016f0c:	f002 fd2c 	bl	8019968 <__match>
 8016f10:	2800      	cmp	r0, #0
 8016f12:	f43f aec5 	beq.w	8016ca0 <_strtod_l+0xa8>
 8016f16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f18:	781b      	ldrb	r3, [r3, #0]
 8016f1a:	2b28      	cmp	r3, #40	@ 0x28
 8016f1c:	d12e      	bne.n	8016f7c <_strtod_l+0x384>
 8016f1e:	4996      	ldr	r1, [pc, #600]	@ (8017178 <_strtod_l+0x580>)
 8016f20:	aa1c      	add	r2, sp, #112	@ 0x70
 8016f22:	a819      	add	r0, sp, #100	@ 0x64
 8016f24:	f002 fd34 	bl	8019990 <__hexnan>
 8016f28:	2805      	cmp	r0, #5
 8016f2a:	d127      	bne.n	8016f7c <_strtod_l+0x384>
 8016f2c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016f2e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8016f32:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016f36:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016f3a:	e696      	b.n	8016c6a <_strtod_l+0x72>
 8016f3c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016f3e:	fb08 2101 	mla	r1, r8, r1, r2
 8016f42:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8016f46:	9209      	str	r2, [sp, #36]	@ 0x24
 8016f48:	e7b5      	b.n	8016eb6 <_strtod_l+0x2be>
 8016f4a:	2a6e      	cmp	r2, #110	@ 0x6e
 8016f4c:	e7da      	b.n	8016f04 <_strtod_l+0x30c>
 8016f4e:	498b      	ldr	r1, [pc, #556]	@ (801717c <_strtod_l+0x584>)
 8016f50:	a819      	add	r0, sp, #100	@ 0x64
 8016f52:	f002 fd09 	bl	8019968 <__match>
 8016f56:	2800      	cmp	r0, #0
 8016f58:	f43f aea2 	beq.w	8016ca0 <_strtod_l+0xa8>
 8016f5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f5e:	4988      	ldr	r1, [pc, #544]	@ (8017180 <_strtod_l+0x588>)
 8016f60:	3b01      	subs	r3, #1
 8016f62:	a819      	add	r0, sp, #100	@ 0x64
 8016f64:	9319      	str	r3, [sp, #100]	@ 0x64
 8016f66:	f002 fcff 	bl	8019968 <__match>
 8016f6a:	b910      	cbnz	r0, 8016f72 <_strtod_l+0x37a>
 8016f6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f6e:	3301      	adds	r3, #1
 8016f70:	9319      	str	r3, [sp, #100]	@ 0x64
 8016f72:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8017190 <_strtod_l+0x598>
 8016f76:	f04f 0a00 	mov.w	sl, #0
 8016f7a:	e676      	b.n	8016c6a <_strtod_l+0x72>
 8016f7c:	4881      	ldr	r0, [pc, #516]	@ (8017184 <_strtod_l+0x58c>)
 8016f7e:	f001 fbbf 	bl	8018700 <nan>
 8016f82:	ec5b ab10 	vmov	sl, fp, d0
 8016f86:	e670      	b.n	8016c6a <_strtod_l+0x72>
 8016f88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016f8a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8016f8c:	eba8 0303 	sub.w	r3, r8, r3
 8016f90:	f1b9 0f00 	cmp.w	r9, #0
 8016f94:	bf08      	it	eq
 8016f96:	46a9      	moveq	r9, r5
 8016f98:	2d10      	cmp	r5, #16
 8016f9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f9c:	462c      	mov	r4, r5
 8016f9e:	bfa8      	it	ge
 8016fa0:	2410      	movge	r4, #16
 8016fa2:	f7f1 fadf 	bl	8008564 <__aeabi_ui2d>
 8016fa6:	2d09      	cmp	r5, #9
 8016fa8:	4682      	mov	sl, r0
 8016faa:	468b      	mov	fp, r1
 8016fac:	dc13      	bgt.n	8016fd6 <_strtod_l+0x3de>
 8016fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	f43f ae5a 	beq.w	8016c6a <_strtod_l+0x72>
 8016fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016fb8:	dd78      	ble.n	80170ac <_strtod_l+0x4b4>
 8016fba:	2b16      	cmp	r3, #22
 8016fbc:	dc5f      	bgt.n	801707e <_strtod_l+0x486>
 8016fbe:	4972      	ldr	r1, [pc, #456]	@ (8017188 <_strtod_l+0x590>)
 8016fc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fc8:	4652      	mov	r2, sl
 8016fca:	465b      	mov	r3, fp
 8016fcc:	f7f1 fb44 	bl	8008658 <__aeabi_dmul>
 8016fd0:	4682      	mov	sl, r0
 8016fd2:	468b      	mov	fp, r1
 8016fd4:	e649      	b.n	8016c6a <_strtod_l+0x72>
 8016fd6:	4b6c      	ldr	r3, [pc, #432]	@ (8017188 <_strtod_l+0x590>)
 8016fd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016fdc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8016fe0:	f7f1 fb3a 	bl	8008658 <__aeabi_dmul>
 8016fe4:	4682      	mov	sl, r0
 8016fe6:	4638      	mov	r0, r7
 8016fe8:	468b      	mov	fp, r1
 8016fea:	f7f1 fabb 	bl	8008564 <__aeabi_ui2d>
 8016fee:	4602      	mov	r2, r0
 8016ff0:	460b      	mov	r3, r1
 8016ff2:	4650      	mov	r0, sl
 8016ff4:	4659      	mov	r1, fp
 8016ff6:	f7f1 f979 	bl	80082ec <__adddf3>
 8016ffa:	2d0f      	cmp	r5, #15
 8016ffc:	4682      	mov	sl, r0
 8016ffe:	468b      	mov	fp, r1
 8017000:	ddd5      	ble.n	8016fae <_strtod_l+0x3b6>
 8017002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017004:	1b2c      	subs	r4, r5, r4
 8017006:	441c      	add	r4, r3
 8017008:	2c00      	cmp	r4, #0
 801700a:	f340 8093 	ble.w	8017134 <_strtod_l+0x53c>
 801700e:	f014 030f 	ands.w	r3, r4, #15
 8017012:	d00a      	beq.n	801702a <_strtod_l+0x432>
 8017014:	495c      	ldr	r1, [pc, #368]	@ (8017188 <_strtod_l+0x590>)
 8017016:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801701a:	4652      	mov	r2, sl
 801701c:	465b      	mov	r3, fp
 801701e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017022:	f7f1 fb19 	bl	8008658 <__aeabi_dmul>
 8017026:	4682      	mov	sl, r0
 8017028:	468b      	mov	fp, r1
 801702a:	f034 040f 	bics.w	r4, r4, #15
 801702e:	d073      	beq.n	8017118 <_strtod_l+0x520>
 8017030:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8017034:	dd49      	ble.n	80170ca <_strtod_l+0x4d2>
 8017036:	2400      	movs	r4, #0
 8017038:	46a0      	mov	r8, r4
 801703a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801703c:	46a1      	mov	r9, r4
 801703e:	9a05      	ldr	r2, [sp, #20]
 8017040:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8017190 <_strtod_l+0x598>
 8017044:	2322      	movs	r3, #34	@ 0x22
 8017046:	6013      	str	r3, [r2, #0]
 8017048:	f04f 0a00 	mov.w	sl, #0
 801704c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801704e:	2b00      	cmp	r3, #0
 8017050:	f43f ae0b 	beq.w	8016c6a <_strtod_l+0x72>
 8017054:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017056:	9805      	ldr	r0, [sp, #20]
 8017058:	f002 fd88 	bl	8019b6c <_Bfree>
 801705c:	9805      	ldr	r0, [sp, #20]
 801705e:	4649      	mov	r1, r9
 8017060:	f002 fd84 	bl	8019b6c <_Bfree>
 8017064:	9805      	ldr	r0, [sp, #20]
 8017066:	4641      	mov	r1, r8
 8017068:	f002 fd80 	bl	8019b6c <_Bfree>
 801706c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801706e:	9805      	ldr	r0, [sp, #20]
 8017070:	f002 fd7c 	bl	8019b6c <_Bfree>
 8017074:	9805      	ldr	r0, [sp, #20]
 8017076:	4621      	mov	r1, r4
 8017078:	f002 fd78 	bl	8019b6c <_Bfree>
 801707c:	e5f5      	b.n	8016c6a <_strtod_l+0x72>
 801707e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017080:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8017084:	4293      	cmp	r3, r2
 8017086:	dbbc      	blt.n	8017002 <_strtod_l+0x40a>
 8017088:	4c3f      	ldr	r4, [pc, #252]	@ (8017188 <_strtod_l+0x590>)
 801708a:	f1c5 050f 	rsb	r5, r5, #15
 801708e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8017092:	4652      	mov	r2, sl
 8017094:	465b      	mov	r3, fp
 8017096:	e9d1 0100 	ldrd	r0, r1, [r1]
 801709a:	f7f1 fadd 	bl	8008658 <__aeabi_dmul>
 801709e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80170a0:	1b5d      	subs	r5, r3, r5
 80170a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80170a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80170aa:	e78f      	b.n	8016fcc <_strtod_l+0x3d4>
 80170ac:	3316      	adds	r3, #22
 80170ae:	dba8      	blt.n	8017002 <_strtod_l+0x40a>
 80170b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80170b2:	eba3 0808 	sub.w	r8, r3, r8
 80170b6:	4b34      	ldr	r3, [pc, #208]	@ (8017188 <_strtod_l+0x590>)
 80170b8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80170bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80170c0:	4650      	mov	r0, sl
 80170c2:	4659      	mov	r1, fp
 80170c4:	f7f1 fbf2 	bl	80088ac <__aeabi_ddiv>
 80170c8:	e782      	b.n	8016fd0 <_strtod_l+0x3d8>
 80170ca:	2300      	movs	r3, #0
 80170cc:	4f2f      	ldr	r7, [pc, #188]	@ (801718c <_strtod_l+0x594>)
 80170ce:	1124      	asrs	r4, r4, #4
 80170d0:	4650      	mov	r0, sl
 80170d2:	4659      	mov	r1, fp
 80170d4:	461e      	mov	r6, r3
 80170d6:	2c01      	cmp	r4, #1
 80170d8:	dc21      	bgt.n	801711e <_strtod_l+0x526>
 80170da:	b10b      	cbz	r3, 80170e0 <_strtod_l+0x4e8>
 80170dc:	4682      	mov	sl, r0
 80170de:	468b      	mov	fp, r1
 80170e0:	492a      	ldr	r1, [pc, #168]	@ (801718c <_strtod_l+0x594>)
 80170e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80170e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80170ea:	4652      	mov	r2, sl
 80170ec:	465b      	mov	r3, fp
 80170ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80170f2:	f7f1 fab1 	bl	8008658 <__aeabi_dmul>
 80170f6:	4b26      	ldr	r3, [pc, #152]	@ (8017190 <_strtod_l+0x598>)
 80170f8:	460a      	mov	r2, r1
 80170fa:	400b      	ands	r3, r1
 80170fc:	4925      	ldr	r1, [pc, #148]	@ (8017194 <_strtod_l+0x59c>)
 80170fe:	428b      	cmp	r3, r1
 8017100:	4682      	mov	sl, r0
 8017102:	d898      	bhi.n	8017036 <_strtod_l+0x43e>
 8017104:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8017108:	428b      	cmp	r3, r1
 801710a:	bf86      	itte	hi
 801710c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8017198 <_strtod_l+0x5a0>
 8017110:	f04f 3aff 	movhi.w	sl, #4294967295
 8017114:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8017118:	2300      	movs	r3, #0
 801711a:	9308      	str	r3, [sp, #32]
 801711c:	e076      	b.n	801720c <_strtod_l+0x614>
 801711e:	07e2      	lsls	r2, r4, #31
 8017120:	d504      	bpl.n	801712c <_strtod_l+0x534>
 8017122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017126:	f7f1 fa97 	bl	8008658 <__aeabi_dmul>
 801712a:	2301      	movs	r3, #1
 801712c:	3601      	adds	r6, #1
 801712e:	1064      	asrs	r4, r4, #1
 8017130:	3708      	adds	r7, #8
 8017132:	e7d0      	b.n	80170d6 <_strtod_l+0x4de>
 8017134:	d0f0      	beq.n	8017118 <_strtod_l+0x520>
 8017136:	4264      	negs	r4, r4
 8017138:	f014 020f 	ands.w	r2, r4, #15
 801713c:	d00a      	beq.n	8017154 <_strtod_l+0x55c>
 801713e:	4b12      	ldr	r3, [pc, #72]	@ (8017188 <_strtod_l+0x590>)
 8017140:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017144:	4650      	mov	r0, sl
 8017146:	4659      	mov	r1, fp
 8017148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801714c:	f7f1 fbae 	bl	80088ac <__aeabi_ddiv>
 8017150:	4682      	mov	sl, r0
 8017152:	468b      	mov	fp, r1
 8017154:	1124      	asrs	r4, r4, #4
 8017156:	d0df      	beq.n	8017118 <_strtod_l+0x520>
 8017158:	2c1f      	cmp	r4, #31
 801715a:	dd1f      	ble.n	801719c <_strtod_l+0x5a4>
 801715c:	2400      	movs	r4, #0
 801715e:	46a0      	mov	r8, r4
 8017160:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017162:	46a1      	mov	r9, r4
 8017164:	9a05      	ldr	r2, [sp, #20]
 8017166:	2322      	movs	r3, #34	@ 0x22
 8017168:	f04f 0a00 	mov.w	sl, #0
 801716c:	f04f 0b00 	mov.w	fp, #0
 8017170:	6013      	str	r3, [r2, #0]
 8017172:	e76b      	b.n	801704c <_strtod_l+0x454>
 8017174:	0801d903 	.word	0x0801d903
 8017178:	0801dae0 	.word	0x0801dae0
 801717c:	0801d8fb 	.word	0x0801d8fb
 8017180:	0801d933 	.word	0x0801d933
 8017184:	0801dadd 	.word	0x0801dadd
 8017188:	0801dc68 	.word	0x0801dc68
 801718c:	0801dc40 	.word	0x0801dc40
 8017190:	7ff00000 	.word	0x7ff00000
 8017194:	7ca00000 	.word	0x7ca00000
 8017198:	7fefffff 	.word	0x7fefffff
 801719c:	f014 0310 	ands.w	r3, r4, #16
 80171a0:	bf18      	it	ne
 80171a2:	236a      	movne	r3, #106	@ 0x6a
 80171a4:	4ea9      	ldr	r6, [pc, #676]	@ (801744c <_strtod_l+0x854>)
 80171a6:	9308      	str	r3, [sp, #32]
 80171a8:	4650      	mov	r0, sl
 80171aa:	4659      	mov	r1, fp
 80171ac:	2300      	movs	r3, #0
 80171ae:	07e7      	lsls	r7, r4, #31
 80171b0:	d504      	bpl.n	80171bc <_strtod_l+0x5c4>
 80171b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80171b6:	f7f1 fa4f 	bl	8008658 <__aeabi_dmul>
 80171ba:	2301      	movs	r3, #1
 80171bc:	1064      	asrs	r4, r4, #1
 80171be:	f106 0608 	add.w	r6, r6, #8
 80171c2:	d1f4      	bne.n	80171ae <_strtod_l+0x5b6>
 80171c4:	b10b      	cbz	r3, 80171ca <_strtod_l+0x5d2>
 80171c6:	4682      	mov	sl, r0
 80171c8:	468b      	mov	fp, r1
 80171ca:	9b08      	ldr	r3, [sp, #32]
 80171cc:	b1b3      	cbz	r3, 80171fc <_strtod_l+0x604>
 80171ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80171d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	4659      	mov	r1, fp
 80171da:	dd0f      	ble.n	80171fc <_strtod_l+0x604>
 80171dc:	2b1f      	cmp	r3, #31
 80171de:	dd56      	ble.n	801728e <_strtod_l+0x696>
 80171e0:	2b34      	cmp	r3, #52	@ 0x34
 80171e2:	bfde      	ittt	le
 80171e4:	f04f 33ff 	movle.w	r3, #4294967295
 80171e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80171ec:	4093      	lslle	r3, r2
 80171ee:	f04f 0a00 	mov.w	sl, #0
 80171f2:	bfcc      	ite	gt
 80171f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80171f8:	ea03 0b01 	andle.w	fp, r3, r1
 80171fc:	2200      	movs	r2, #0
 80171fe:	2300      	movs	r3, #0
 8017200:	4650      	mov	r0, sl
 8017202:	4659      	mov	r1, fp
 8017204:	f7f1 fc90 	bl	8008b28 <__aeabi_dcmpeq>
 8017208:	2800      	cmp	r0, #0
 801720a:	d1a7      	bne.n	801715c <_strtod_l+0x564>
 801720c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801720e:	9300      	str	r3, [sp, #0]
 8017210:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017212:	9805      	ldr	r0, [sp, #20]
 8017214:	462b      	mov	r3, r5
 8017216:	464a      	mov	r2, r9
 8017218:	f002 fd10 	bl	8019c3c <__s2b>
 801721c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801721e:	2800      	cmp	r0, #0
 8017220:	f43f af09 	beq.w	8017036 <_strtod_l+0x43e>
 8017224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017226:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017228:	2a00      	cmp	r2, #0
 801722a:	eba3 0308 	sub.w	r3, r3, r8
 801722e:	bfa8      	it	ge
 8017230:	2300      	movge	r3, #0
 8017232:	9312      	str	r3, [sp, #72]	@ 0x48
 8017234:	2400      	movs	r4, #0
 8017236:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801723a:	9316      	str	r3, [sp, #88]	@ 0x58
 801723c:	46a0      	mov	r8, r4
 801723e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017240:	9805      	ldr	r0, [sp, #20]
 8017242:	6859      	ldr	r1, [r3, #4]
 8017244:	f002 fc52 	bl	8019aec <_Balloc>
 8017248:	4681      	mov	r9, r0
 801724a:	2800      	cmp	r0, #0
 801724c:	f43f aef7 	beq.w	801703e <_strtod_l+0x446>
 8017250:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017252:	691a      	ldr	r2, [r3, #16]
 8017254:	3202      	adds	r2, #2
 8017256:	f103 010c 	add.w	r1, r3, #12
 801725a:	0092      	lsls	r2, r2, #2
 801725c:	300c      	adds	r0, #12
 801725e:	f001 fa40 	bl	80186e2 <memcpy>
 8017262:	ec4b ab10 	vmov	d0, sl, fp
 8017266:	9805      	ldr	r0, [sp, #20]
 8017268:	aa1c      	add	r2, sp, #112	@ 0x70
 801726a:	a91b      	add	r1, sp, #108	@ 0x6c
 801726c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8017270:	f003 f818 	bl	801a2a4 <__d2b>
 8017274:	901a      	str	r0, [sp, #104]	@ 0x68
 8017276:	2800      	cmp	r0, #0
 8017278:	f43f aee1 	beq.w	801703e <_strtod_l+0x446>
 801727c:	9805      	ldr	r0, [sp, #20]
 801727e:	2101      	movs	r1, #1
 8017280:	f002 fd72 	bl	8019d68 <__i2b>
 8017284:	4680      	mov	r8, r0
 8017286:	b948      	cbnz	r0, 801729c <_strtod_l+0x6a4>
 8017288:	f04f 0800 	mov.w	r8, #0
 801728c:	e6d7      	b.n	801703e <_strtod_l+0x446>
 801728e:	f04f 32ff 	mov.w	r2, #4294967295
 8017292:	fa02 f303 	lsl.w	r3, r2, r3
 8017296:	ea03 0a0a 	and.w	sl, r3, sl
 801729a:	e7af      	b.n	80171fc <_strtod_l+0x604>
 801729c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801729e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80172a0:	2d00      	cmp	r5, #0
 80172a2:	bfab      	itete	ge
 80172a4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80172a6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80172a8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80172aa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80172ac:	bfac      	ite	ge
 80172ae:	18ef      	addge	r7, r5, r3
 80172b0:	1b5e      	sublt	r6, r3, r5
 80172b2:	9b08      	ldr	r3, [sp, #32]
 80172b4:	1aed      	subs	r5, r5, r3
 80172b6:	4415      	add	r5, r2
 80172b8:	4b65      	ldr	r3, [pc, #404]	@ (8017450 <_strtod_l+0x858>)
 80172ba:	3d01      	subs	r5, #1
 80172bc:	429d      	cmp	r5, r3
 80172be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80172c2:	da50      	bge.n	8017366 <_strtod_l+0x76e>
 80172c4:	1b5b      	subs	r3, r3, r5
 80172c6:	2b1f      	cmp	r3, #31
 80172c8:	eba2 0203 	sub.w	r2, r2, r3
 80172cc:	f04f 0101 	mov.w	r1, #1
 80172d0:	dc3d      	bgt.n	801734e <_strtod_l+0x756>
 80172d2:	fa01 f303 	lsl.w	r3, r1, r3
 80172d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80172d8:	2300      	movs	r3, #0
 80172da:	9310      	str	r3, [sp, #64]	@ 0x40
 80172dc:	18bd      	adds	r5, r7, r2
 80172de:	9b08      	ldr	r3, [sp, #32]
 80172e0:	42af      	cmp	r7, r5
 80172e2:	4416      	add	r6, r2
 80172e4:	441e      	add	r6, r3
 80172e6:	463b      	mov	r3, r7
 80172e8:	bfa8      	it	ge
 80172ea:	462b      	movge	r3, r5
 80172ec:	42b3      	cmp	r3, r6
 80172ee:	bfa8      	it	ge
 80172f0:	4633      	movge	r3, r6
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	bfc2      	ittt	gt
 80172f6:	1aed      	subgt	r5, r5, r3
 80172f8:	1af6      	subgt	r6, r6, r3
 80172fa:	1aff      	subgt	r7, r7, r3
 80172fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80172fe:	2b00      	cmp	r3, #0
 8017300:	dd16      	ble.n	8017330 <_strtod_l+0x738>
 8017302:	4641      	mov	r1, r8
 8017304:	9805      	ldr	r0, [sp, #20]
 8017306:	461a      	mov	r2, r3
 8017308:	f002 fde6 	bl	8019ed8 <__pow5mult>
 801730c:	4680      	mov	r8, r0
 801730e:	2800      	cmp	r0, #0
 8017310:	d0ba      	beq.n	8017288 <_strtod_l+0x690>
 8017312:	4601      	mov	r1, r0
 8017314:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017316:	9805      	ldr	r0, [sp, #20]
 8017318:	f002 fd3c 	bl	8019d94 <__multiply>
 801731c:	900a      	str	r0, [sp, #40]	@ 0x28
 801731e:	2800      	cmp	r0, #0
 8017320:	f43f ae8d 	beq.w	801703e <_strtod_l+0x446>
 8017324:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017326:	9805      	ldr	r0, [sp, #20]
 8017328:	f002 fc20 	bl	8019b6c <_Bfree>
 801732c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801732e:	931a      	str	r3, [sp, #104]	@ 0x68
 8017330:	2d00      	cmp	r5, #0
 8017332:	dc1d      	bgt.n	8017370 <_strtod_l+0x778>
 8017334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017336:	2b00      	cmp	r3, #0
 8017338:	dd23      	ble.n	8017382 <_strtod_l+0x78a>
 801733a:	4649      	mov	r1, r9
 801733c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801733e:	9805      	ldr	r0, [sp, #20]
 8017340:	f002 fdca 	bl	8019ed8 <__pow5mult>
 8017344:	4681      	mov	r9, r0
 8017346:	b9e0      	cbnz	r0, 8017382 <_strtod_l+0x78a>
 8017348:	f04f 0900 	mov.w	r9, #0
 801734c:	e677      	b.n	801703e <_strtod_l+0x446>
 801734e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8017352:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8017356:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801735a:	35e2      	adds	r5, #226	@ 0xe2
 801735c:	fa01 f305 	lsl.w	r3, r1, r5
 8017360:	9310      	str	r3, [sp, #64]	@ 0x40
 8017362:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017364:	e7ba      	b.n	80172dc <_strtod_l+0x6e4>
 8017366:	2300      	movs	r3, #0
 8017368:	9310      	str	r3, [sp, #64]	@ 0x40
 801736a:	2301      	movs	r3, #1
 801736c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801736e:	e7b5      	b.n	80172dc <_strtod_l+0x6e4>
 8017370:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017372:	9805      	ldr	r0, [sp, #20]
 8017374:	462a      	mov	r2, r5
 8017376:	f002 fe09 	bl	8019f8c <__lshift>
 801737a:	901a      	str	r0, [sp, #104]	@ 0x68
 801737c:	2800      	cmp	r0, #0
 801737e:	d1d9      	bne.n	8017334 <_strtod_l+0x73c>
 8017380:	e65d      	b.n	801703e <_strtod_l+0x446>
 8017382:	2e00      	cmp	r6, #0
 8017384:	dd07      	ble.n	8017396 <_strtod_l+0x79e>
 8017386:	4649      	mov	r1, r9
 8017388:	9805      	ldr	r0, [sp, #20]
 801738a:	4632      	mov	r2, r6
 801738c:	f002 fdfe 	bl	8019f8c <__lshift>
 8017390:	4681      	mov	r9, r0
 8017392:	2800      	cmp	r0, #0
 8017394:	d0d8      	beq.n	8017348 <_strtod_l+0x750>
 8017396:	2f00      	cmp	r7, #0
 8017398:	dd08      	ble.n	80173ac <_strtod_l+0x7b4>
 801739a:	4641      	mov	r1, r8
 801739c:	9805      	ldr	r0, [sp, #20]
 801739e:	463a      	mov	r2, r7
 80173a0:	f002 fdf4 	bl	8019f8c <__lshift>
 80173a4:	4680      	mov	r8, r0
 80173a6:	2800      	cmp	r0, #0
 80173a8:	f43f ae49 	beq.w	801703e <_strtod_l+0x446>
 80173ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80173ae:	9805      	ldr	r0, [sp, #20]
 80173b0:	464a      	mov	r2, r9
 80173b2:	f002 fe73 	bl	801a09c <__mdiff>
 80173b6:	4604      	mov	r4, r0
 80173b8:	2800      	cmp	r0, #0
 80173ba:	f43f ae40 	beq.w	801703e <_strtod_l+0x446>
 80173be:	68c3      	ldr	r3, [r0, #12]
 80173c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80173c2:	2300      	movs	r3, #0
 80173c4:	60c3      	str	r3, [r0, #12]
 80173c6:	4641      	mov	r1, r8
 80173c8:	f002 fe4c 	bl	801a064 <__mcmp>
 80173cc:	2800      	cmp	r0, #0
 80173ce:	da45      	bge.n	801745c <_strtod_l+0x864>
 80173d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80173d2:	ea53 030a 	orrs.w	r3, r3, sl
 80173d6:	d16b      	bne.n	80174b0 <_strtod_l+0x8b8>
 80173d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d167      	bne.n	80174b0 <_strtod_l+0x8b8>
 80173e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80173e4:	0d1b      	lsrs	r3, r3, #20
 80173e6:	051b      	lsls	r3, r3, #20
 80173e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80173ec:	d960      	bls.n	80174b0 <_strtod_l+0x8b8>
 80173ee:	6963      	ldr	r3, [r4, #20]
 80173f0:	b913      	cbnz	r3, 80173f8 <_strtod_l+0x800>
 80173f2:	6923      	ldr	r3, [r4, #16]
 80173f4:	2b01      	cmp	r3, #1
 80173f6:	dd5b      	ble.n	80174b0 <_strtod_l+0x8b8>
 80173f8:	4621      	mov	r1, r4
 80173fa:	2201      	movs	r2, #1
 80173fc:	9805      	ldr	r0, [sp, #20]
 80173fe:	f002 fdc5 	bl	8019f8c <__lshift>
 8017402:	4641      	mov	r1, r8
 8017404:	4604      	mov	r4, r0
 8017406:	f002 fe2d 	bl	801a064 <__mcmp>
 801740a:	2800      	cmp	r0, #0
 801740c:	dd50      	ble.n	80174b0 <_strtod_l+0x8b8>
 801740e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017412:	9a08      	ldr	r2, [sp, #32]
 8017414:	0d1b      	lsrs	r3, r3, #20
 8017416:	051b      	lsls	r3, r3, #20
 8017418:	2a00      	cmp	r2, #0
 801741a:	d06a      	beq.n	80174f2 <_strtod_l+0x8fa>
 801741c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017420:	d867      	bhi.n	80174f2 <_strtod_l+0x8fa>
 8017422:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8017426:	f67f ae9d 	bls.w	8017164 <_strtod_l+0x56c>
 801742a:	4b0a      	ldr	r3, [pc, #40]	@ (8017454 <_strtod_l+0x85c>)
 801742c:	4650      	mov	r0, sl
 801742e:	4659      	mov	r1, fp
 8017430:	2200      	movs	r2, #0
 8017432:	f7f1 f911 	bl	8008658 <__aeabi_dmul>
 8017436:	4b08      	ldr	r3, [pc, #32]	@ (8017458 <_strtod_l+0x860>)
 8017438:	400b      	ands	r3, r1
 801743a:	4682      	mov	sl, r0
 801743c:	468b      	mov	fp, r1
 801743e:	2b00      	cmp	r3, #0
 8017440:	f47f ae08 	bne.w	8017054 <_strtod_l+0x45c>
 8017444:	9a05      	ldr	r2, [sp, #20]
 8017446:	2322      	movs	r3, #34	@ 0x22
 8017448:	6013      	str	r3, [r2, #0]
 801744a:	e603      	b.n	8017054 <_strtod_l+0x45c>
 801744c:	0801db08 	.word	0x0801db08
 8017450:	fffffc02 	.word	0xfffffc02
 8017454:	39500000 	.word	0x39500000
 8017458:	7ff00000 	.word	0x7ff00000
 801745c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8017460:	d165      	bne.n	801752e <_strtod_l+0x936>
 8017462:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017464:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017468:	b35a      	cbz	r2, 80174c2 <_strtod_l+0x8ca>
 801746a:	4a9f      	ldr	r2, [pc, #636]	@ (80176e8 <_strtod_l+0xaf0>)
 801746c:	4293      	cmp	r3, r2
 801746e:	d12b      	bne.n	80174c8 <_strtod_l+0x8d0>
 8017470:	9b08      	ldr	r3, [sp, #32]
 8017472:	4651      	mov	r1, sl
 8017474:	b303      	cbz	r3, 80174b8 <_strtod_l+0x8c0>
 8017476:	4b9d      	ldr	r3, [pc, #628]	@ (80176ec <_strtod_l+0xaf4>)
 8017478:	465a      	mov	r2, fp
 801747a:	4013      	ands	r3, r2
 801747c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8017480:	f04f 32ff 	mov.w	r2, #4294967295
 8017484:	d81b      	bhi.n	80174be <_strtod_l+0x8c6>
 8017486:	0d1b      	lsrs	r3, r3, #20
 8017488:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801748c:	fa02 f303 	lsl.w	r3, r2, r3
 8017490:	4299      	cmp	r1, r3
 8017492:	d119      	bne.n	80174c8 <_strtod_l+0x8d0>
 8017494:	4b96      	ldr	r3, [pc, #600]	@ (80176f0 <_strtod_l+0xaf8>)
 8017496:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017498:	429a      	cmp	r2, r3
 801749a:	d102      	bne.n	80174a2 <_strtod_l+0x8aa>
 801749c:	3101      	adds	r1, #1
 801749e:	f43f adce 	beq.w	801703e <_strtod_l+0x446>
 80174a2:	4b92      	ldr	r3, [pc, #584]	@ (80176ec <_strtod_l+0xaf4>)
 80174a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80174a6:	401a      	ands	r2, r3
 80174a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80174ac:	f04f 0a00 	mov.w	sl, #0
 80174b0:	9b08      	ldr	r3, [sp, #32]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d1b9      	bne.n	801742a <_strtod_l+0x832>
 80174b6:	e5cd      	b.n	8017054 <_strtod_l+0x45c>
 80174b8:	f04f 33ff 	mov.w	r3, #4294967295
 80174bc:	e7e8      	b.n	8017490 <_strtod_l+0x898>
 80174be:	4613      	mov	r3, r2
 80174c0:	e7e6      	b.n	8017490 <_strtod_l+0x898>
 80174c2:	ea53 030a 	orrs.w	r3, r3, sl
 80174c6:	d0a2      	beq.n	801740e <_strtod_l+0x816>
 80174c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80174ca:	b1db      	cbz	r3, 8017504 <_strtod_l+0x90c>
 80174cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80174ce:	4213      	tst	r3, r2
 80174d0:	d0ee      	beq.n	80174b0 <_strtod_l+0x8b8>
 80174d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80174d4:	9a08      	ldr	r2, [sp, #32]
 80174d6:	4650      	mov	r0, sl
 80174d8:	4659      	mov	r1, fp
 80174da:	b1bb      	cbz	r3, 801750c <_strtod_l+0x914>
 80174dc:	f7ff fb6e 	bl	8016bbc <sulp>
 80174e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80174e4:	ec53 2b10 	vmov	r2, r3, d0
 80174e8:	f7f0 ff00 	bl	80082ec <__adddf3>
 80174ec:	4682      	mov	sl, r0
 80174ee:	468b      	mov	fp, r1
 80174f0:	e7de      	b.n	80174b0 <_strtod_l+0x8b8>
 80174f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80174f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80174fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80174fe:	f04f 3aff 	mov.w	sl, #4294967295
 8017502:	e7d5      	b.n	80174b0 <_strtod_l+0x8b8>
 8017504:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017506:	ea13 0f0a 	tst.w	r3, sl
 801750a:	e7e1      	b.n	80174d0 <_strtod_l+0x8d8>
 801750c:	f7ff fb56 	bl	8016bbc <sulp>
 8017510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017514:	ec53 2b10 	vmov	r2, r3, d0
 8017518:	f7f0 fee6 	bl	80082e8 <__aeabi_dsub>
 801751c:	2200      	movs	r2, #0
 801751e:	2300      	movs	r3, #0
 8017520:	4682      	mov	sl, r0
 8017522:	468b      	mov	fp, r1
 8017524:	f7f1 fb00 	bl	8008b28 <__aeabi_dcmpeq>
 8017528:	2800      	cmp	r0, #0
 801752a:	d0c1      	beq.n	80174b0 <_strtod_l+0x8b8>
 801752c:	e61a      	b.n	8017164 <_strtod_l+0x56c>
 801752e:	4641      	mov	r1, r8
 8017530:	4620      	mov	r0, r4
 8017532:	f002 ff0f 	bl	801a354 <__ratio>
 8017536:	ec57 6b10 	vmov	r6, r7, d0
 801753a:	2200      	movs	r2, #0
 801753c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8017540:	4630      	mov	r0, r6
 8017542:	4639      	mov	r1, r7
 8017544:	f7f1 fb04 	bl	8008b50 <__aeabi_dcmple>
 8017548:	2800      	cmp	r0, #0
 801754a:	d06f      	beq.n	801762c <_strtod_l+0xa34>
 801754c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801754e:	2b00      	cmp	r3, #0
 8017550:	d17a      	bne.n	8017648 <_strtod_l+0xa50>
 8017552:	f1ba 0f00 	cmp.w	sl, #0
 8017556:	d158      	bne.n	801760a <_strtod_l+0xa12>
 8017558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801755a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801755e:	2b00      	cmp	r3, #0
 8017560:	d15a      	bne.n	8017618 <_strtod_l+0xa20>
 8017562:	4b64      	ldr	r3, [pc, #400]	@ (80176f4 <_strtod_l+0xafc>)
 8017564:	2200      	movs	r2, #0
 8017566:	4630      	mov	r0, r6
 8017568:	4639      	mov	r1, r7
 801756a:	f7f1 fae7 	bl	8008b3c <__aeabi_dcmplt>
 801756e:	2800      	cmp	r0, #0
 8017570:	d159      	bne.n	8017626 <_strtod_l+0xa2e>
 8017572:	4630      	mov	r0, r6
 8017574:	4639      	mov	r1, r7
 8017576:	4b60      	ldr	r3, [pc, #384]	@ (80176f8 <_strtod_l+0xb00>)
 8017578:	2200      	movs	r2, #0
 801757a:	f7f1 f86d 	bl	8008658 <__aeabi_dmul>
 801757e:	4606      	mov	r6, r0
 8017580:	460f      	mov	r7, r1
 8017582:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8017586:	9606      	str	r6, [sp, #24]
 8017588:	9307      	str	r3, [sp, #28]
 801758a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801758e:	4d57      	ldr	r5, [pc, #348]	@ (80176ec <_strtod_l+0xaf4>)
 8017590:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017596:	401d      	ands	r5, r3
 8017598:	4b58      	ldr	r3, [pc, #352]	@ (80176fc <_strtod_l+0xb04>)
 801759a:	429d      	cmp	r5, r3
 801759c:	f040 80b2 	bne.w	8017704 <_strtod_l+0xb0c>
 80175a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80175a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80175a6:	ec4b ab10 	vmov	d0, sl, fp
 80175aa:	f002 fe0b 	bl	801a1c4 <__ulp>
 80175ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80175b2:	ec51 0b10 	vmov	r0, r1, d0
 80175b6:	f7f1 f84f 	bl	8008658 <__aeabi_dmul>
 80175ba:	4652      	mov	r2, sl
 80175bc:	465b      	mov	r3, fp
 80175be:	f7f0 fe95 	bl	80082ec <__adddf3>
 80175c2:	460b      	mov	r3, r1
 80175c4:	4949      	ldr	r1, [pc, #292]	@ (80176ec <_strtod_l+0xaf4>)
 80175c6:	4a4e      	ldr	r2, [pc, #312]	@ (8017700 <_strtod_l+0xb08>)
 80175c8:	4019      	ands	r1, r3
 80175ca:	4291      	cmp	r1, r2
 80175cc:	4682      	mov	sl, r0
 80175ce:	d942      	bls.n	8017656 <_strtod_l+0xa5e>
 80175d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80175d2:	4b47      	ldr	r3, [pc, #284]	@ (80176f0 <_strtod_l+0xaf8>)
 80175d4:	429a      	cmp	r2, r3
 80175d6:	d103      	bne.n	80175e0 <_strtod_l+0x9e8>
 80175d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80175da:	3301      	adds	r3, #1
 80175dc:	f43f ad2f 	beq.w	801703e <_strtod_l+0x446>
 80175e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80176f0 <_strtod_l+0xaf8>
 80175e4:	f04f 3aff 	mov.w	sl, #4294967295
 80175e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80175ea:	9805      	ldr	r0, [sp, #20]
 80175ec:	f002 fabe 	bl	8019b6c <_Bfree>
 80175f0:	9805      	ldr	r0, [sp, #20]
 80175f2:	4649      	mov	r1, r9
 80175f4:	f002 faba 	bl	8019b6c <_Bfree>
 80175f8:	9805      	ldr	r0, [sp, #20]
 80175fa:	4641      	mov	r1, r8
 80175fc:	f002 fab6 	bl	8019b6c <_Bfree>
 8017600:	9805      	ldr	r0, [sp, #20]
 8017602:	4621      	mov	r1, r4
 8017604:	f002 fab2 	bl	8019b6c <_Bfree>
 8017608:	e619      	b.n	801723e <_strtod_l+0x646>
 801760a:	f1ba 0f01 	cmp.w	sl, #1
 801760e:	d103      	bne.n	8017618 <_strtod_l+0xa20>
 8017610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017612:	2b00      	cmp	r3, #0
 8017614:	f43f ada6 	beq.w	8017164 <_strtod_l+0x56c>
 8017618:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80176c8 <_strtod_l+0xad0>
 801761c:	4f35      	ldr	r7, [pc, #212]	@ (80176f4 <_strtod_l+0xafc>)
 801761e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017622:	2600      	movs	r6, #0
 8017624:	e7b1      	b.n	801758a <_strtod_l+0x992>
 8017626:	4f34      	ldr	r7, [pc, #208]	@ (80176f8 <_strtod_l+0xb00>)
 8017628:	2600      	movs	r6, #0
 801762a:	e7aa      	b.n	8017582 <_strtod_l+0x98a>
 801762c:	4b32      	ldr	r3, [pc, #200]	@ (80176f8 <_strtod_l+0xb00>)
 801762e:	4630      	mov	r0, r6
 8017630:	4639      	mov	r1, r7
 8017632:	2200      	movs	r2, #0
 8017634:	f7f1 f810 	bl	8008658 <__aeabi_dmul>
 8017638:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801763a:	4606      	mov	r6, r0
 801763c:	460f      	mov	r7, r1
 801763e:	2b00      	cmp	r3, #0
 8017640:	d09f      	beq.n	8017582 <_strtod_l+0x98a>
 8017642:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8017646:	e7a0      	b.n	801758a <_strtod_l+0x992>
 8017648:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80176d0 <_strtod_l+0xad8>
 801764c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017650:	ec57 6b17 	vmov	r6, r7, d7
 8017654:	e799      	b.n	801758a <_strtod_l+0x992>
 8017656:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801765a:	9b08      	ldr	r3, [sp, #32]
 801765c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8017660:	2b00      	cmp	r3, #0
 8017662:	d1c1      	bne.n	80175e8 <_strtod_l+0x9f0>
 8017664:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017668:	0d1b      	lsrs	r3, r3, #20
 801766a:	051b      	lsls	r3, r3, #20
 801766c:	429d      	cmp	r5, r3
 801766e:	d1bb      	bne.n	80175e8 <_strtod_l+0x9f0>
 8017670:	4630      	mov	r0, r6
 8017672:	4639      	mov	r1, r7
 8017674:	f7f1 fb00 	bl	8008c78 <__aeabi_d2lz>
 8017678:	f7f0 ffc0 	bl	80085fc <__aeabi_l2d>
 801767c:	4602      	mov	r2, r0
 801767e:	460b      	mov	r3, r1
 8017680:	4630      	mov	r0, r6
 8017682:	4639      	mov	r1, r7
 8017684:	f7f0 fe30 	bl	80082e8 <__aeabi_dsub>
 8017688:	460b      	mov	r3, r1
 801768a:	4602      	mov	r2, r0
 801768c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8017690:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8017694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017696:	ea46 060a 	orr.w	r6, r6, sl
 801769a:	431e      	orrs	r6, r3
 801769c:	d06f      	beq.n	801777e <_strtod_l+0xb86>
 801769e:	a30e      	add	r3, pc, #56	@ (adr r3, 80176d8 <_strtod_l+0xae0>)
 80176a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176a4:	f7f1 fa4a 	bl	8008b3c <__aeabi_dcmplt>
 80176a8:	2800      	cmp	r0, #0
 80176aa:	f47f acd3 	bne.w	8017054 <_strtod_l+0x45c>
 80176ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80176e0 <_strtod_l+0xae8>)
 80176b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80176b8:	f7f1 fa5e 	bl	8008b78 <__aeabi_dcmpgt>
 80176bc:	2800      	cmp	r0, #0
 80176be:	d093      	beq.n	80175e8 <_strtod_l+0x9f0>
 80176c0:	e4c8      	b.n	8017054 <_strtod_l+0x45c>
 80176c2:	bf00      	nop
 80176c4:	f3af 8000 	nop.w
 80176c8:	00000000 	.word	0x00000000
 80176cc:	bff00000 	.word	0xbff00000
 80176d0:	00000000 	.word	0x00000000
 80176d4:	3ff00000 	.word	0x3ff00000
 80176d8:	94a03595 	.word	0x94a03595
 80176dc:	3fdfffff 	.word	0x3fdfffff
 80176e0:	35afe535 	.word	0x35afe535
 80176e4:	3fe00000 	.word	0x3fe00000
 80176e8:	000fffff 	.word	0x000fffff
 80176ec:	7ff00000 	.word	0x7ff00000
 80176f0:	7fefffff 	.word	0x7fefffff
 80176f4:	3ff00000 	.word	0x3ff00000
 80176f8:	3fe00000 	.word	0x3fe00000
 80176fc:	7fe00000 	.word	0x7fe00000
 8017700:	7c9fffff 	.word	0x7c9fffff
 8017704:	9b08      	ldr	r3, [sp, #32]
 8017706:	b323      	cbz	r3, 8017752 <_strtod_l+0xb5a>
 8017708:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801770c:	d821      	bhi.n	8017752 <_strtod_l+0xb5a>
 801770e:	a328      	add	r3, pc, #160	@ (adr r3, 80177b0 <_strtod_l+0xbb8>)
 8017710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017714:	4630      	mov	r0, r6
 8017716:	4639      	mov	r1, r7
 8017718:	f7f1 fa1a 	bl	8008b50 <__aeabi_dcmple>
 801771c:	b1a0      	cbz	r0, 8017748 <_strtod_l+0xb50>
 801771e:	4639      	mov	r1, r7
 8017720:	4630      	mov	r0, r6
 8017722:	f7f1 fa71 	bl	8008c08 <__aeabi_d2uiz>
 8017726:	2801      	cmp	r0, #1
 8017728:	bf38      	it	cc
 801772a:	2001      	movcc	r0, #1
 801772c:	f7f0 ff1a 	bl	8008564 <__aeabi_ui2d>
 8017730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017732:	4606      	mov	r6, r0
 8017734:	460f      	mov	r7, r1
 8017736:	b9fb      	cbnz	r3, 8017778 <_strtod_l+0xb80>
 8017738:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801773c:	9014      	str	r0, [sp, #80]	@ 0x50
 801773e:	9315      	str	r3, [sp, #84]	@ 0x54
 8017740:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8017744:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017748:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801774a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801774e:	1b5b      	subs	r3, r3, r5
 8017750:	9311      	str	r3, [sp, #68]	@ 0x44
 8017752:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8017756:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801775a:	f002 fd33 	bl	801a1c4 <__ulp>
 801775e:	4650      	mov	r0, sl
 8017760:	ec53 2b10 	vmov	r2, r3, d0
 8017764:	4659      	mov	r1, fp
 8017766:	f7f0 ff77 	bl	8008658 <__aeabi_dmul>
 801776a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801776e:	f7f0 fdbd 	bl	80082ec <__adddf3>
 8017772:	4682      	mov	sl, r0
 8017774:	468b      	mov	fp, r1
 8017776:	e770      	b.n	801765a <_strtod_l+0xa62>
 8017778:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801777c:	e7e0      	b.n	8017740 <_strtod_l+0xb48>
 801777e:	a30e      	add	r3, pc, #56	@ (adr r3, 80177b8 <_strtod_l+0xbc0>)
 8017780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017784:	f7f1 f9da 	bl	8008b3c <__aeabi_dcmplt>
 8017788:	e798      	b.n	80176bc <_strtod_l+0xac4>
 801778a:	2300      	movs	r3, #0
 801778c:	930e      	str	r3, [sp, #56]	@ 0x38
 801778e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8017790:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017792:	6013      	str	r3, [r2, #0]
 8017794:	f7ff ba6d 	b.w	8016c72 <_strtod_l+0x7a>
 8017798:	2a65      	cmp	r2, #101	@ 0x65
 801779a:	f43f ab68 	beq.w	8016e6e <_strtod_l+0x276>
 801779e:	2a45      	cmp	r2, #69	@ 0x45
 80177a0:	f43f ab65 	beq.w	8016e6e <_strtod_l+0x276>
 80177a4:	2301      	movs	r3, #1
 80177a6:	f7ff bba0 	b.w	8016eea <_strtod_l+0x2f2>
 80177aa:	bf00      	nop
 80177ac:	f3af 8000 	nop.w
 80177b0:	ffc00000 	.word	0xffc00000
 80177b4:	41dfffff 	.word	0x41dfffff
 80177b8:	94a03595 	.word	0x94a03595
 80177bc:	3fcfffff 	.word	0x3fcfffff

080177c0 <strtod>:
 80177c0:	460a      	mov	r2, r1
 80177c2:	4601      	mov	r1, r0
 80177c4:	4802      	ldr	r0, [pc, #8]	@ (80177d0 <strtod+0x10>)
 80177c6:	4b03      	ldr	r3, [pc, #12]	@ (80177d4 <strtod+0x14>)
 80177c8:	6800      	ldr	r0, [r0, #0]
 80177ca:	f7ff ba15 	b.w	8016bf8 <_strtod_l>
 80177ce:	bf00      	nop
 80177d0:	20000200 	.word	0x20000200
 80177d4:	20000094 	.word	0x20000094

080177d8 <__cvt>:
 80177d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80177dc:	ec57 6b10 	vmov	r6, r7, d0
 80177e0:	2f00      	cmp	r7, #0
 80177e2:	460c      	mov	r4, r1
 80177e4:	4619      	mov	r1, r3
 80177e6:	463b      	mov	r3, r7
 80177e8:	bfbb      	ittet	lt
 80177ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80177ee:	461f      	movlt	r7, r3
 80177f0:	2300      	movge	r3, #0
 80177f2:	232d      	movlt	r3, #45	@ 0x2d
 80177f4:	700b      	strb	r3, [r1, #0]
 80177f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80177f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80177fc:	4691      	mov	r9, r2
 80177fe:	f023 0820 	bic.w	r8, r3, #32
 8017802:	bfbc      	itt	lt
 8017804:	4632      	movlt	r2, r6
 8017806:	4616      	movlt	r6, r2
 8017808:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801780c:	d005      	beq.n	801781a <__cvt+0x42>
 801780e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8017812:	d100      	bne.n	8017816 <__cvt+0x3e>
 8017814:	3401      	adds	r4, #1
 8017816:	2102      	movs	r1, #2
 8017818:	e000      	b.n	801781c <__cvt+0x44>
 801781a:	2103      	movs	r1, #3
 801781c:	ab03      	add	r3, sp, #12
 801781e:	9301      	str	r3, [sp, #4]
 8017820:	ab02      	add	r3, sp, #8
 8017822:	9300      	str	r3, [sp, #0]
 8017824:	ec47 6b10 	vmov	d0, r6, r7
 8017828:	4653      	mov	r3, sl
 801782a:	4622      	mov	r2, r4
 801782c:	f000 fff8 	bl	8018820 <_dtoa_r>
 8017830:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8017834:	4605      	mov	r5, r0
 8017836:	d119      	bne.n	801786c <__cvt+0x94>
 8017838:	f019 0f01 	tst.w	r9, #1
 801783c:	d00e      	beq.n	801785c <__cvt+0x84>
 801783e:	eb00 0904 	add.w	r9, r0, r4
 8017842:	2200      	movs	r2, #0
 8017844:	2300      	movs	r3, #0
 8017846:	4630      	mov	r0, r6
 8017848:	4639      	mov	r1, r7
 801784a:	f7f1 f96d 	bl	8008b28 <__aeabi_dcmpeq>
 801784e:	b108      	cbz	r0, 8017854 <__cvt+0x7c>
 8017850:	f8cd 900c 	str.w	r9, [sp, #12]
 8017854:	2230      	movs	r2, #48	@ 0x30
 8017856:	9b03      	ldr	r3, [sp, #12]
 8017858:	454b      	cmp	r3, r9
 801785a:	d31e      	bcc.n	801789a <__cvt+0xc2>
 801785c:	9b03      	ldr	r3, [sp, #12]
 801785e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017860:	1b5b      	subs	r3, r3, r5
 8017862:	4628      	mov	r0, r5
 8017864:	6013      	str	r3, [r2, #0]
 8017866:	b004      	add	sp, #16
 8017868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801786c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8017870:	eb00 0904 	add.w	r9, r0, r4
 8017874:	d1e5      	bne.n	8017842 <__cvt+0x6a>
 8017876:	7803      	ldrb	r3, [r0, #0]
 8017878:	2b30      	cmp	r3, #48	@ 0x30
 801787a:	d10a      	bne.n	8017892 <__cvt+0xba>
 801787c:	2200      	movs	r2, #0
 801787e:	2300      	movs	r3, #0
 8017880:	4630      	mov	r0, r6
 8017882:	4639      	mov	r1, r7
 8017884:	f7f1 f950 	bl	8008b28 <__aeabi_dcmpeq>
 8017888:	b918      	cbnz	r0, 8017892 <__cvt+0xba>
 801788a:	f1c4 0401 	rsb	r4, r4, #1
 801788e:	f8ca 4000 	str.w	r4, [sl]
 8017892:	f8da 3000 	ldr.w	r3, [sl]
 8017896:	4499      	add	r9, r3
 8017898:	e7d3      	b.n	8017842 <__cvt+0x6a>
 801789a:	1c59      	adds	r1, r3, #1
 801789c:	9103      	str	r1, [sp, #12]
 801789e:	701a      	strb	r2, [r3, #0]
 80178a0:	e7d9      	b.n	8017856 <__cvt+0x7e>

080178a2 <__exponent>:
 80178a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80178a4:	2900      	cmp	r1, #0
 80178a6:	bfba      	itte	lt
 80178a8:	4249      	neglt	r1, r1
 80178aa:	232d      	movlt	r3, #45	@ 0x2d
 80178ac:	232b      	movge	r3, #43	@ 0x2b
 80178ae:	2909      	cmp	r1, #9
 80178b0:	7002      	strb	r2, [r0, #0]
 80178b2:	7043      	strb	r3, [r0, #1]
 80178b4:	dd29      	ble.n	801790a <__exponent+0x68>
 80178b6:	f10d 0307 	add.w	r3, sp, #7
 80178ba:	461d      	mov	r5, r3
 80178bc:	270a      	movs	r7, #10
 80178be:	461a      	mov	r2, r3
 80178c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80178c4:	fb07 1416 	mls	r4, r7, r6, r1
 80178c8:	3430      	adds	r4, #48	@ 0x30
 80178ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 80178ce:	460c      	mov	r4, r1
 80178d0:	2c63      	cmp	r4, #99	@ 0x63
 80178d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80178d6:	4631      	mov	r1, r6
 80178d8:	dcf1      	bgt.n	80178be <__exponent+0x1c>
 80178da:	3130      	adds	r1, #48	@ 0x30
 80178dc:	1e94      	subs	r4, r2, #2
 80178de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80178e2:	1c41      	adds	r1, r0, #1
 80178e4:	4623      	mov	r3, r4
 80178e6:	42ab      	cmp	r3, r5
 80178e8:	d30a      	bcc.n	8017900 <__exponent+0x5e>
 80178ea:	f10d 0309 	add.w	r3, sp, #9
 80178ee:	1a9b      	subs	r3, r3, r2
 80178f0:	42ac      	cmp	r4, r5
 80178f2:	bf88      	it	hi
 80178f4:	2300      	movhi	r3, #0
 80178f6:	3302      	adds	r3, #2
 80178f8:	4403      	add	r3, r0
 80178fa:	1a18      	subs	r0, r3, r0
 80178fc:	b003      	add	sp, #12
 80178fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017900:	f813 6b01 	ldrb.w	r6, [r3], #1
 8017904:	f801 6f01 	strb.w	r6, [r1, #1]!
 8017908:	e7ed      	b.n	80178e6 <__exponent+0x44>
 801790a:	2330      	movs	r3, #48	@ 0x30
 801790c:	3130      	adds	r1, #48	@ 0x30
 801790e:	7083      	strb	r3, [r0, #2]
 8017910:	70c1      	strb	r1, [r0, #3]
 8017912:	1d03      	adds	r3, r0, #4
 8017914:	e7f1      	b.n	80178fa <__exponent+0x58>
	...

08017918 <_printf_float>:
 8017918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801791c:	b08d      	sub	sp, #52	@ 0x34
 801791e:	460c      	mov	r4, r1
 8017920:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8017924:	4616      	mov	r6, r2
 8017926:	461f      	mov	r7, r3
 8017928:	4605      	mov	r5, r0
 801792a:	f000 fe4b 	bl	80185c4 <_localeconv_r>
 801792e:	6803      	ldr	r3, [r0, #0]
 8017930:	9304      	str	r3, [sp, #16]
 8017932:	4618      	mov	r0, r3
 8017934:	f7f0 fccc 	bl	80082d0 <strlen>
 8017938:	2300      	movs	r3, #0
 801793a:	930a      	str	r3, [sp, #40]	@ 0x28
 801793c:	f8d8 3000 	ldr.w	r3, [r8]
 8017940:	9005      	str	r0, [sp, #20]
 8017942:	3307      	adds	r3, #7
 8017944:	f023 0307 	bic.w	r3, r3, #7
 8017948:	f103 0208 	add.w	r2, r3, #8
 801794c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8017950:	f8d4 b000 	ldr.w	fp, [r4]
 8017954:	f8c8 2000 	str.w	r2, [r8]
 8017958:	e9d3 8900 	ldrd	r8, r9, [r3]
 801795c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8017960:	9307      	str	r3, [sp, #28]
 8017962:	f8cd 8018 	str.w	r8, [sp, #24]
 8017966:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801796a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801796e:	4b9c      	ldr	r3, [pc, #624]	@ (8017be0 <_printf_float+0x2c8>)
 8017970:	f04f 32ff 	mov.w	r2, #4294967295
 8017974:	f7f1 f90a 	bl	8008b8c <__aeabi_dcmpun>
 8017978:	bb70      	cbnz	r0, 80179d8 <_printf_float+0xc0>
 801797a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801797e:	4b98      	ldr	r3, [pc, #608]	@ (8017be0 <_printf_float+0x2c8>)
 8017980:	f04f 32ff 	mov.w	r2, #4294967295
 8017984:	f7f1 f8e4 	bl	8008b50 <__aeabi_dcmple>
 8017988:	bb30      	cbnz	r0, 80179d8 <_printf_float+0xc0>
 801798a:	2200      	movs	r2, #0
 801798c:	2300      	movs	r3, #0
 801798e:	4640      	mov	r0, r8
 8017990:	4649      	mov	r1, r9
 8017992:	f7f1 f8d3 	bl	8008b3c <__aeabi_dcmplt>
 8017996:	b110      	cbz	r0, 801799e <_printf_float+0x86>
 8017998:	232d      	movs	r3, #45	@ 0x2d
 801799a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801799e:	4a91      	ldr	r2, [pc, #580]	@ (8017be4 <_printf_float+0x2cc>)
 80179a0:	4b91      	ldr	r3, [pc, #580]	@ (8017be8 <_printf_float+0x2d0>)
 80179a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80179a6:	bf8c      	ite	hi
 80179a8:	4690      	movhi	r8, r2
 80179aa:	4698      	movls	r8, r3
 80179ac:	2303      	movs	r3, #3
 80179ae:	6123      	str	r3, [r4, #16]
 80179b0:	f02b 0304 	bic.w	r3, fp, #4
 80179b4:	6023      	str	r3, [r4, #0]
 80179b6:	f04f 0900 	mov.w	r9, #0
 80179ba:	9700      	str	r7, [sp, #0]
 80179bc:	4633      	mov	r3, r6
 80179be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80179c0:	4621      	mov	r1, r4
 80179c2:	4628      	mov	r0, r5
 80179c4:	f000 f9d2 	bl	8017d6c <_printf_common>
 80179c8:	3001      	adds	r0, #1
 80179ca:	f040 808d 	bne.w	8017ae8 <_printf_float+0x1d0>
 80179ce:	f04f 30ff 	mov.w	r0, #4294967295
 80179d2:	b00d      	add	sp, #52	@ 0x34
 80179d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179d8:	4642      	mov	r2, r8
 80179da:	464b      	mov	r3, r9
 80179dc:	4640      	mov	r0, r8
 80179de:	4649      	mov	r1, r9
 80179e0:	f7f1 f8d4 	bl	8008b8c <__aeabi_dcmpun>
 80179e4:	b140      	cbz	r0, 80179f8 <_printf_float+0xe0>
 80179e6:	464b      	mov	r3, r9
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	bfbc      	itt	lt
 80179ec:	232d      	movlt	r3, #45	@ 0x2d
 80179ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80179f2:	4a7e      	ldr	r2, [pc, #504]	@ (8017bec <_printf_float+0x2d4>)
 80179f4:	4b7e      	ldr	r3, [pc, #504]	@ (8017bf0 <_printf_float+0x2d8>)
 80179f6:	e7d4      	b.n	80179a2 <_printf_float+0x8a>
 80179f8:	6863      	ldr	r3, [r4, #4]
 80179fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80179fe:	9206      	str	r2, [sp, #24]
 8017a00:	1c5a      	adds	r2, r3, #1
 8017a02:	d13b      	bne.n	8017a7c <_printf_float+0x164>
 8017a04:	2306      	movs	r3, #6
 8017a06:	6063      	str	r3, [r4, #4]
 8017a08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	6022      	str	r2, [r4, #0]
 8017a10:	9303      	str	r3, [sp, #12]
 8017a12:	ab0a      	add	r3, sp, #40	@ 0x28
 8017a14:	e9cd a301 	strd	sl, r3, [sp, #4]
 8017a18:	ab09      	add	r3, sp, #36	@ 0x24
 8017a1a:	9300      	str	r3, [sp, #0]
 8017a1c:	6861      	ldr	r1, [r4, #4]
 8017a1e:	ec49 8b10 	vmov	d0, r8, r9
 8017a22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8017a26:	4628      	mov	r0, r5
 8017a28:	f7ff fed6 	bl	80177d8 <__cvt>
 8017a2c:	9b06      	ldr	r3, [sp, #24]
 8017a2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017a30:	2b47      	cmp	r3, #71	@ 0x47
 8017a32:	4680      	mov	r8, r0
 8017a34:	d129      	bne.n	8017a8a <_printf_float+0x172>
 8017a36:	1cc8      	adds	r0, r1, #3
 8017a38:	db02      	blt.n	8017a40 <_printf_float+0x128>
 8017a3a:	6863      	ldr	r3, [r4, #4]
 8017a3c:	4299      	cmp	r1, r3
 8017a3e:	dd41      	ble.n	8017ac4 <_printf_float+0x1ac>
 8017a40:	f1aa 0a02 	sub.w	sl, sl, #2
 8017a44:	fa5f fa8a 	uxtb.w	sl, sl
 8017a48:	3901      	subs	r1, #1
 8017a4a:	4652      	mov	r2, sl
 8017a4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8017a50:	9109      	str	r1, [sp, #36]	@ 0x24
 8017a52:	f7ff ff26 	bl	80178a2 <__exponent>
 8017a56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017a58:	1813      	adds	r3, r2, r0
 8017a5a:	2a01      	cmp	r2, #1
 8017a5c:	4681      	mov	r9, r0
 8017a5e:	6123      	str	r3, [r4, #16]
 8017a60:	dc02      	bgt.n	8017a68 <_printf_float+0x150>
 8017a62:	6822      	ldr	r2, [r4, #0]
 8017a64:	07d2      	lsls	r2, r2, #31
 8017a66:	d501      	bpl.n	8017a6c <_printf_float+0x154>
 8017a68:	3301      	adds	r3, #1
 8017a6a:	6123      	str	r3, [r4, #16]
 8017a6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d0a2      	beq.n	80179ba <_printf_float+0xa2>
 8017a74:	232d      	movs	r3, #45	@ 0x2d
 8017a76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017a7a:	e79e      	b.n	80179ba <_printf_float+0xa2>
 8017a7c:	9a06      	ldr	r2, [sp, #24]
 8017a7e:	2a47      	cmp	r2, #71	@ 0x47
 8017a80:	d1c2      	bne.n	8017a08 <_printf_float+0xf0>
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d1c0      	bne.n	8017a08 <_printf_float+0xf0>
 8017a86:	2301      	movs	r3, #1
 8017a88:	e7bd      	b.n	8017a06 <_printf_float+0xee>
 8017a8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8017a8e:	d9db      	bls.n	8017a48 <_printf_float+0x130>
 8017a90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8017a94:	d118      	bne.n	8017ac8 <_printf_float+0x1b0>
 8017a96:	2900      	cmp	r1, #0
 8017a98:	6863      	ldr	r3, [r4, #4]
 8017a9a:	dd0b      	ble.n	8017ab4 <_printf_float+0x19c>
 8017a9c:	6121      	str	r1, [r4, #16]
 8017a9e:	b913      	cbnz	r3, 8017aa6 <_printf_float+0x18e>
 8017aa0:	6822      	ldr	r2, [r4, #0]
 8017aa2:	07d0      	lsls	r0, r2, #31
 8017aa4:	d502      	bpl.n	8017aac <_printf_float+0x194>
 8017aa6:	3301      	adds	r3, #1
 8017aa8:	440b      	add	r3, r1
 8017aaa:	6123      	str	r3, [r4, #16]
 8017aac:	65a1      	str	r1, [r4, #88]	@ 0x58
 8017aae:	f04f 0900 	mov.w	r9, #0
 8017ab2:	e7db      	b.n	8017a6c <_printf_float+0x154>
 8017ab4:	b913      	cbnz	r3, 8017abc <_printf_float+0x1a4>
 8017ab6:	6822      	ldr	r2, [r4, #0]
 8017ab8:	07d2      	lsls	r2, r2, #31
 8017aba:	d501      	bpl.n	8017ac0 <_printf_float+0x1a8>
 8017abc:	3302      	adds	r3, #2
 8017abe:	e7f4      	b.n	8017aaa <_printf_float+0x192>
 8017ac0:	2301      	movs	r3, #1
 8017ac2:	e7f2      	b.n	8017aaa <_printf_float+0x192>
 8017ac4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8017ac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017aca:	4299      	cmp	r1, r3
 8017acc:	db05      	blt.n	8017ada <_printf_float+0x1c2>
 8017ace:	6823      	ldr	r3, [r4, #0]
 8017ad0:	6121      	str	r1, [r4, #16]
 8017ad2:	07d8      	lsls	r0, r3, #31
 8017ad4:	d5ea      	bpl.n	8017aac <_printf_float+0x194>
 8017ad6:	1c4b      	adds	r3, r1, #1
 8017ad8:	e7e7      	b.n	8017aaa <_printf_float+0x192>
 8017ada:	2900      	cmp	r1, #0
 8017adc:	bfd4      	ite	le
 8017ade:	f1c1 0202 	rsble	r2, r1, #2
 8017ae2:	2201      	movgt	r2, #1
 8017ae4:	4413      	add	r3, r2
 8017ae6:	e7e0      	b.n	8017aaa <_printf_float+0x192>
 8017ae8:	6823      	ldr	r3, [r4, #0]
 8017aea:	055a      	lsls	r2, r3, #21
 8017aec:	d407      	bmi.n	8017afe <_printf_float+0x1e6>
 8017aee:	6923      	ldr	r3, [r4, #16]
 8017af0:	4642      	mov	r2, r8
 8017af2:	4631      	mov	r1, r6
 8017af4:	4628      	mov	r0, r5
 8017af6:	47b8      	blx	r7
 8017af8:	3001      	adds	r0, #1
 8017afa:	d12b      	bne.n	8017b54 <_printf_float+0x23c>
 8017afc:	e767      	b.n	80179ce <_printf_float+0xb6>
 8017afe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8017b02:	f240 80dd 	bls.w	8017cc0 <_printf_float+0x3a8>
 8017b06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8017b0a:	2200      	movs	r2, #0
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	f7f1 f80b 	bl	8008b28 <__aeabi_dcmpeq>
 8017b12:	2800      	cmp	r0, #0
 8017b14:	d033      	beq.n	8017b7e <_printf_float+0x266>
 8017b16:	4a37      	ldr	r2, [pc, #220]	@ (8017bf4 <_printf_float+0x2dc>)
 8017b18:	2301      	movs	r3, #1
 8017b1a:	4631      	mov	r1, r6
 8017b1c:	4628      	mov	r0, r5
 8017b1e:	47b8      	blx	r7
 8017b20:	3001      	adds	r0, #1
 8017b22:	f43f af54 	beq.w	80179ce <_printf_float+0xb6>
 8017b26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8017b2a:	4543      	cmp	r3, r8
 8017b2c:	db02      	blt.n	8017b34 <_printf_float+0x21c>
 8017b2e:	6823      	ldr	r3, [r4, #0]
 8017b30:	07d8      	lsls	r0, r3, #31
 8017b32:	d50f      	bpl.n	8017b54 <_printf_float+0x23c>
 8017b34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017b38:	4631      	mov	r1, r6
 8017b3a:	4628      	mov	r0, r5
 8017b3c:	47b8      	blx	r7
 8017b3e:	3001      	adds	r0, #1
 8017b40:	f43f af45 	beq.w	80179ce <_printf_float+0xb6>
 8017b44:	f04f 0900 	mov.w	r9, #0
 8017b48:	f108 38ff 	add.w	r8, r8, #4294967295
 8017b4c:	f104 0a1a 	add.w	sl, r4, #26
 8017b50:	45c8      	cmp	r8, r9
 8017b52:	dc09      	bgt.n	8017b68 <_printf_float+0x250>
 8017b54:	6823      	ldr	r3, [r4, #0]
 8017b56:	079b      	lsls	r3, r3, #30
 8017b58:	f100 8103 	bmi.w	8017d62 <_printf_float+0x44a>
 8017b5c:	68e0      	ldr	r0, [r4, #12]
 8017b5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017b60:	4298      	cmp	r0, r3
 8017b62:	bfb8      	it	lt
 8017b64:	4618      	movlt	r0, r3
 8017b66:	e734      	b.n	80179d2 <_printf_float+0xba>
 8017b68:	2301      	movs	r3, #1
 8017b6a:	4652      	mov	r2, sl
 8017b6c:	4631      	mov	r1, r6
 8017b6e:	4628      	mov	r0, r5
 8017b70:	47b8      	blx	r7
 8017b72:	3001      	adds	r0, #1
 8017b74:	f43f af2b 	beq.w	80179ce <_printf_float+0xb6>
 8017b78:	f109 0901 	add.w	r9, r9, #1
 8017b7c:	e7e8      	b.n	8017b50 <_printf_float+0x238>
 8017b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	dc39      	bgt.n	8017bf8 <_printf_float+0x2e0>
 8017b84:	4a1b      	ldr	r2, [pc, #108]	@ (8017bf4 <_printf_float+0x2dc>)
 8017b86:	2301      	movs	r3, #1
 8017b88:	4631      	mov	r1, r6
 8017b8a:	4628      	mov	r0, r5
 8017b8c:	47b8      	blx	r7
 8017b8e:	3001      	adds	r0, #1
 8017b90:	f43f af1d 	beq.w	80179ce <_printf_float+0xb6>
 8017b94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8017b98:	ea59 0303 	orrs.w	r3, r9, r3
 8017b9c:	d102      	bne.n	8017ba4 <_printf_float+0x28c>
 8017b9e:	6823      	ldr	r3, [r4, #0]
 8017ba0:	07d9      	lsls	r1, r3, #31
 8017ba2:	d5d7      	bpl.n	8017b54 <_printf_float+0x23c>
 8017ba4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017ba8:	4631      	mov	r1, r6
 8017baa:	4628      	mov	r0, r5
 8017bac:	47b8      	blx	r7
 8017bae:	3001      	adds	r0, #1
 8017bb0:	f43f af0d 	beq.w	80179ce <_printf_float+0xb6>
 8017bb4:	f04f 0a00 	mov.w	sl, #0
 8017bb8:	f104 0b1a 	add.w	fp, r4, #26
 8017bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017bbe:	425b      	negs	r3, r3
 8017bc0:	4553      	cmp	r3, sl
 8017bc2:	dc01      	bgt.n	8017bc8 <_printf_float+0x2b0>
 8017bc4:	464b      	mov	r3, r9
 8017bc6:	e793      	b.n	8017af0 <_printf_float+0x1d8>
 8017bc8:	2301      	movs	r3, #1
 8017bca:	465a      	mov	r2, fp
 8017bcc:	4631      	mov	r1, r6
 8017bce:	4628      	mov	r0, r5
 8017bd0:	47b8      	blx	r7
 8017bd2:	3001      	adds	r0, #1
 8017bd4:	f43f aefb 	beq.w	80179ce <_printf_float+0xb6>
 8017bd8:	f10a 0a01 	add.w	sl, sl, #1
 8017bdc:	e7ee      	b.n	8017bbc <_printf_float+0x2a4>
 8017bde:	bf00      	nop
 8017be0:	7fefffff 	.word	0x7fefffff
 8017be4:	0801d8fa 	.word	0x0801d8fa
 8017be8:	0801d8f6 	.word	0x0801d8f6
 8017bec:	0801d902 	.word	0x0801d902
 8017bf0:	0801d8fe 	.word	0x0801d8fe
 8017bf4:	0801da9d 	.word	0x0801da9d
 8017bf8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017bfa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8017bfe:	4553      	cmp	r3, sl
 8017c00:	bfa8      	it	ge
 8017c02:	4653      	movge	r3, sl
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	4699      	mov	r9, r3
 8017c08:	dc36      	bgt.n	8017c78 <_printf_float+0x360>
 8017c0a:	f04f 0b00 	mov.w	fp, #0
 8017c0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017c12:	f104 021a 	add.w	r2, r4, #26
 8017c16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017c18:	9306      	str	r3, [sp, #24]
 8017c1a:	eba3 0309 	sub.w	r3, r3, r9
 8017c1e:	455b      	cmp	r3, fp
 8017c20:	dc31      	bgt.n	8017c86 <_printf_float+0x36e>
 8017c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c24:	459a      	cmp	sl, r3
 8017c26:	dc3a      	bgt.n	8017c9e <_printf_float+0x386>
 8017c28:	6823      	ldr	r3, [r4, #0]
 8017c2a:	07da      	lsls	r2, r3, #31
 8017c2c:	d437      	bmi.n	8017c9e <_printf_float+0x386>
 8017c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c30:	ebaa 0903 	sub.w	r9, sl, r3
 8017c34:	9b06      	ldr	r3, [sp, #24]
 8017c36:	ebaa 0303 	sub.w	r3, sl, r3
 8017c3a:	4599      	cmp	r9, r3
 8017c3c:	bfa8      	it	ge
 8017c3e:	4699      	movge	r9, r3
 8017c40:	f1b9 0f00 	cmp.w	r9, #0
 8017c44:	dc33      	bgt.n	8017cae <_printf_float+0x396>
 8017c46:	f04f 0800 	mov.w	r8, #0
 8017c4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017c4e:	f104 0b1a 	add.w	fp, r4, #26
 8017c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c54:	ebaa 0303 	sub.w	r3, sl, r3
 8017c58:	eba3 0309 	sub.w	r3, r3, r9
 8017c5c:	4543      	cmp	r3, r8
 8017c5e:	f77f af79 	ble.w	8017b54 <_printf_float+0x23c>
 8017c62:	2301      	movs	r3, #1
 8017c64:	465a      	mov	r2, fp
 8017c66:	4631      	mov	r1, r6
 8017c68:	4628      	mov	r0, r5
 8017c6a:	47b8      	blx	r7
 8017c6c:	3001      	adds	r0, #1
 8017c6e:	f43f aeae 	beq.w	80179ce <_printf_float+0xb6>
 8017c72:	f108 0801 	add.w	r8, r8, #1
 8017c76:	e7ec      	b.n	8017c52 <_printf_float+0x33a>
 8017c78:	4642      	mov	r2, r8
 8017c7a:	4631      	mov	r1, r6
 8017c7c:	4628      	mov	r0, r5
 8017c7e:	47b8      	blx	r7
 8017c80:	3001      	adds	r0, #1
 8017c82:	d1c2      	bne.n	8017c0a <_printf_float+0x2f2>
 8017c84:	e6a3      	b.n	80179ce <_printf_float+0xb6>
 8017c86:	2301      	movs	r3, #1
 8017c88:	4631      	mov	r1, r6
 8017c8a:	4628      	mov	r0, r5
 8017c8c:	9206      	str	r2, [sp, #24]
 8017c8e:	47b8      	blx	r7
 8017c90:	3001      	adds	r0, #1
 8017c92:	f43f ae9c 	beq.w	80179ce <_printf_float+0xb6>
 8017c96:	9a06      	ldr	r2, [sp, #24]
 8017c98:	f10b 0b01 	add.w	fp, fp, #1
 8017c9c:	e7bb      	b.n	8017c16 <_printf_float+0x2fe>
 8017c9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017ca2:	4631      	mov	r1, r6
 8017ca4:	4628      	mov	r0, r5
 8017ca6:	47b8      	blx	r7
 8017ca8:	3001      	adds	r0, #1
 8017caa:	d1c0      	bne.n	8017c2e <_printf_float+0x316>
 8017cac:	e68f      	b.n	80179ce <_printf_float+0xb6>
 8017cae:	9a06      	ldr	r2, [sp, #24]
 8017cb0:	464b      	mov	r3, r9
 8017cb2:	4442      	add	r2, r8
 8017cb4:	4631      	mov	r1, r6
 8017cb6:	4628      	mov	r0, r5
 8017cb8:	47b8      	blx	r7
 8017cba:	3001      	adds	r0, #1
 8017cbc:	d1c3      	bne.n	8017c46 <_printf_float+0x32e>
 8017cbe:	e686      	b.n	80179ce <_printf_float+0xb6>
 8017cc0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8017cc4:	f1ba 0f01 	cmp.w	sl, #1
 8017cc8:	dc01      	bgt.n	8017cce <_printf_float+0x3b6>
 8017cca:	07db      	lsls	r3, r3, #31
 8017ccc:	d536      	bpl.n	8017d3c <_printf_float+0x424>
 8017cce:	2301      	movs	r3, #1
 8017cd0:	4642      	mov	r2, r8
 8017cd2:	4631      	mov	r1, r6
 8017cd4:	4628      	mov	r0, r5
 8017cd6:	47b8      	blx	r7
 8017cd8:	3001      	adds	r0, #1
 8017cda:	f43f ae78 	beq.w	80179ce <_printf_float+0xb6>
 8017cde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017ce2:	4631      	mov	r1, r6
 8017ce4:	4628      	mov	r0, r5
 8017ce6:	47b8      	blx	r7
 8017ce8:	3001      	adds	r0, #1
 8017cea:	f43f ae70 	beq.w	80179ce <_printf_float+0xb6>
 8017cee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8017cf2:	2200      	movs	r2, #0
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017cfa:	f7f0 ff15 	bl	8008b28 <__aeabi_dcmpeq>
 8017cfe:	b9c0      	cbnz	r0, 8017d32 <_printf_float+0x41a>
 8017d00:	4653      	mov	r3, sl
 8017d02:	f108 0201 	add.w	r2, r8, #1
 8017d06:	4631      	mov	r1, r6
 8017d08:	4628      	mov	r0, r5
 8017d0a:	47b8      	blx	r7
 8017d0c:	3001      	adds	r0, #1
 8017d0e:	d10c      	bne.n	8017d2a <_printf_float+0x412>
 8017d10:	e65d      	b.n	80179ce <_printf_float+0xb6>
 8017d12:	2301      	movs	r3, #1
 8017d14:	465a      	mov	r2, fp
 8017d16:	4631      	mov	r1, r6
 8017d18:	4628      	mov	r0, r5
 8017d1a:	47b8      	blx	r7
 8017d1c:	3001      	adds	r0, #1
 8017d1e:	f43f ae56 	beq.w	80179ce <_printf_float+0xb6>
 8017d22:	f108 0801 	add.w	r8, r8, #1
 8017d26:	45d0      	cmp	r8, sl
 8017d28:	dbf3      	blt.n	8017d12 <_printf_float+0x3fa>
 8017d2a:	464b      	mov	r3, r9
 8017d2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8017d30:	e6df      	b.n	8017af2 <_printf_float+0x1da>
 8017d32:	f04f 0800 	mov.w	r8, #0
 8017d36:	f104 0b1a 	add.w	fp, r4, #26
 8017d3a:	e7f4      	b.n	8017d26 <_printf_float+0x40e>
 8017d3c:	2301      	movs	r3, #1
 8017d3e:	4642      	mov	r2, r8
 8017d40:	e7e1      	b.n	8017d06 <_printf_float+0x3ee>
 8017d42:	2301      	movs	r3, #1
 8017d44:	464a      	mov	r2, r9
 8017d46:	4631      	mov	r1, r6
 8017d48:	4628      	mov	r0, r5
 8017d4a:	47b8      	blx	r7
 8017d4c:	3001      	adds	r0, #1
 8017d4e:	f43f ae3e 	beq.w	80179ce <_printf_float+0xb6>
 8017d52:	f108 0801 	add.w	r8, r8, #1
 8017d56:	68e3      	ldr	r3, [r4, #12]
 8017d58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017d5a:	1a5b      	subs	r3, r3, r1
 8017d5c:	4543      	cmp	r3, r8
 8017d5e:	dcf0      	bgt.n	8017d42 <_printf_float+0x42a>
 8017d60:	e6fc      	b.n	8017b5c <_printf_float+0x244>
 8017d62:	f04f 0800 	mov.w	r8, #0
 8017d66:	f104 0919 	add.w	r9, r4, #25
 8017d6a:	e7f4      	b.n	8017d56 <_printf_float+0x43e>

08017d6c <_printf_common>:
 8017d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d70:	4616      	mov	r6, r2
 8017d72:	4698      	mov	r8, r3
 8017d74:	688a      	ldr	r2, [r1, #8]
 8017d76:	690b      	ldr	r3, [r1, #16]
 8017d78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017d7c:	4293      	cmp	r3, r2
 8017d7e:	bfb8      	it	lt
 8017d80:	4613      	movlt	r3, r2
 8017d82:	6033      	str	r3, [r6, #0]
 8017d84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017d88:	4607      	mov	r7, r0
 8017d8a:	460c      	mov	r4, r1
 8017d8c:	b10a      	cbz	r2, 8017d92 <_printf_common+0x26>
 8017d8e:	3301      	adds	r3, #1
 8017d90:	6033      	str	r3, [r6, #0]
 8017d92:	6823      	ldr	r3, [r4, #0]
 8017d94:	0699      	lsls	r1, r3, #26
 8017d96:	bf42      	ittt	mi
 8017d98:	6833      	ldrmi	r3, [r6, #0]
 8017d9a:	3302      	addmi	r3, #2
 8017d9c:	6033      	strmi	r3, [r6, #0]
 8017d9e:	6825      	ldr	r5, [r4, #0]
 8017da0:	f015 0506 	ands.w	r5, r5, #6
 8017da4:	d106      	bne.n	8017db4 <_printf_common+0x48>
 8017da6:	f104 0a19 	add.w	sl, r4, #25
 8017daa:	68e3      	ldr	r3, [r4, #12]
 8017dac:	6832      	ldr	r2, [r6, #0]
 8017dae:	1a9b      	subs	r3, r3, r2
 8017db0:	42ab      	cmp	r3, r5
 8017db2:	dc26      	bgt.n	8017e02 <_printf_common+0x96>
 8017db4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017db8:	6822      	ldr	r2, [r4, #0]
 8017dba:	3b00      	subs	r3, #0
 8017dbc:	bf18      	it	ne
 8017dbe:	2301      	movne	r3, #1
 8017dc0:	0692      	lsls	r2, r2, #26
 8017dc2:	d42b      	bmi.n	8017e1c <_printf_common+0xb0>
 8017dc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017dc8:	4641      	mov	r1, r8
 8017dca:	4638      	mov	r0, r7
 8017dcc:	47c8      	blx	r9
 8017dce:	3001      	adds	r0, #1
 8017dd0:	d01e      	beq.n	8017e10 <_printf_common+0xa4>
 8017dd2:	6823      	ldr	r3, [r4, #0]
 8017dd4:	6922      	ldr	r2, [r4, #16]
 8017dd6:	f003 0306 	and.w	r3, r3, #6
 8017dda:	2b04      	cmp	r3, #4
 8017ddc:	bf02      	ittt	eq
 8017dde:	68e5      	ldreq	r5, [r4, #12]
 8017de0:	6833      	ldreq	r3, [r6, #0]
 8017de2:	1aed      	subeq	r5, r5, r3
 8017de4:	68a3      	ldr	r3, [r4, #8]
 8017de6:	bf0c      	ite	eq
 8017de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017dec:	2500      	movne	r5, #0
 8017dee:	4293      	cmp	r3, r2
 8017df0:	bfc4      	itt	gt
 8017df2:	1a9b      	subgt	r3, r3, r2
 8017df4:	18ed      	addgt	r5, r5, r3
 8017df6:	2600      	movs	r6, #0
 8017df8:	341a      	adds	r4, #26
 8017dfa:	42b5      	cmp	r5, r6
 8017dfc:	d11a      	bne.n	8017e34 <_printf_common+0xc8>
 8017dfe:	2000      	movs	r0, #0
 8017e00:	e008      	b.n	8017e14 <_printf_common+0xa8>
 8017e02:	2301      	movs	r3, #1
 8017e04:	4652      	mov	r2, sl
 8017e06:	4641      	mov	r1, r8
 8017e08:	4638      	mov	r0, r7
 8017e0a:	47c8      	blx	r9
 8017e0c:	3001      	adds	r0, #1
 8017e0e:	d103      	bne.n	8017e18 <_printf_common+0xac>
 8017e10:	f04f 30ff 	mov.w	r0, #4294967295
 8017e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e18:	3501      	adds	r5, #1
 8017e1a:	e7c6      	b.n	8017daa <_printf_common+0x3e>
 8017e1c:	18e1      	adds	r1, r4, r3
 8017e1e:	1c5a      	adds	r2, r3, #1
 8017e20:	2030      	movs	r0, #48	@ 0x30
 8017e22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017e26:	4422      	add	r2, r4
 8017e28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017e2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017e30:	3302      	adds	r3, #2
 8017e32:	e7c7      	b.n	8017dc4 <_printf_common+0x58>
 8017e34:	2301      	movs	r3, #1
 8017e36:	4622      	mov	r2, r4
 8017e38:	4641      	mov	r1, r8
 8017e3a:	4638      	mov	r0, r7
 8017e3c:	47c8      	blx	r9
 8017e3e:	3001      	adds	r0, #1
 8017e40:	d0e6      	beq.n	8017e10 <_printf_common+0xa4>
 8017e42:	3601      	adds	r6, #1
 8017e44:	e7d9      	b.n	8017dfa <_printf_common+0x8e>
	...

08017e48 <_printf_i>:
 8017e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017e4c:	7e0f      	ldrb	r7, [r1, #24]
 8017e4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017e50:	2f78      	cmp	r7, #120	@ 0x78
 8017e52:	4691      	mov	r9, r2
 8017e54:	4680      	mov	r8, r0
 8017e56:	460c      	mov	r4, r1
 8017e58:	469a      	mov	sl, r3
 8017e5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017e5e:	d807      	bhi.n	8017e70 <_printf_i+0x28>
 8017e60:	2f62      	cmp	r7, #98	@ 0x62
 8017e62:	d80a      	bhi.n	8017e7a <_printf_i+0x32>
 8017e64:	2f00      	cmp	r7, #0
 8017e66:	f000 80d1 	beq.w	801800c <_printf_i+0x1c4>
 8017e6a:	2f58      	cmp	r7, #88	@ 0x58
 8017e6c:	f000 80b8 	beq.w	8017fe0 <_printf_i+0x198>
 8017e70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017e74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017e78:	e03a      	b.n	8017ef0 <_printf_i+0xa8>
 8017e7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017e7e:	2b15      	cmp	r3, #21
 8017e80:	d8f6      	bhi.n	8017e70 <_printf_i+0x28>
 8017e82:	a101      	add	r1, pc, #4	@ (adr r1, 8017e88 <_printf_i+0x40>)
 8017e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017e88:	08017ee1 	.word	0x08017ee1
 8017e8c:	08017ef5 	.word	0x08017ef5
 8017e90:	08017e71 	.word	0x08017e71
 8017e94:	08017e71 	.word	0x08017e71
 8017e98:	08017e71 	.word	0x08017e71
 8017e9c:	08017e71 	.word	0x08017e71
 8017ea0:	08017ef5 	.word	0x08017ef5
 8017ea4:	08017e71 	.word	0x08017e71
 8017ea8:	08017e71 	.word	0x08017e71
 8017eac:	08017e71 	.word	0x08017e71
 8017eb0:	08017e71 	.word	0x08017e71
 8017eb4:	08017ff3 	.word	0x08017ff3
 8017eb8:	08017f1f 	.word	0x08017f1f
 8017ebc:	08017fad 	.word	0x08017fad
 8017ec0:	08017e71 	.word	0x08017e71
 8017ec4:	08017e71 	.word	0x08017e71
 8017ec8:	08018015 	.word	0x08018015
 8017ecc:	08017e71 	.word	0x08017e71
 8017ed0:	08017f1f 	.word	0x08017f1f
 8017ed4:	08017e71 	.word	0x08017e71
 8017ed8:	08017e71 	.word	0x08017e71
 8017edc:	08017fb5 	.word	0x08017fb5
 8017ee0:	6833      	ldr	r3, [r6, #0]
 8017ee2:	1d1a      	adds	r2, r3, #4
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	6032      	str	r2, [r6, #0]
 8017ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017eec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017ef0:	2301      	movs	r3, #1
 8017ef2:	e09c      	b.n	801802e <_printf_i+0x1e6>
 8017ef4:	6833      	ldr	r3, [r6, #0]
 8017ef6:	6820      	ldr	r0, [r4, #0]
 8017ef8:	1d19      	adds	r1, r3, #4
 8017efa:	6031      	str	r1, [r6, #0]
 8017efc:	0606      	lsls	r6, r0, #24
 8017efe:	d501      	bpl.n	8017f04 <_printf_i+0xbc>
 8017f00:	681d      	ldr	r5, [r3, #0]
 8017f02:	e003      	b.n	8017f0c <_printf_i+0xc4>
 8017f04:	0645      	lsls	r5, r0, #25
 8017f06:	d5fb      	bpl.n	8017f00 <_printf_i+0xb8>
 8017f08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017f0c:	2d00      	cmp	r5, #0
 8017f0e:	da03      	bge.n	8017f18 <_printf_i+0xd0>
 8017f10:	232d      	movs	r3, #45	@ 0x2d
 8017f12:	426d      	negs	r5, r5
 8017f14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017f18:	4858      	ldr	r0, [pc, #352]	@ (801807c <_printf_i+0x234>)
 8017f1a:	230a      	movs	r3, #10
 8017f1c:	e011      	b.n	8017f42 <_printf_i+0xfa>
 8017f1e:	6821      	ldr	r1, [r4, #0]
 8017f20:	6833      	ldr	r3, [r6, #0]
 8017f22:	0608      	lsls	r0, r1, #24
 8017f24:	f853 5b04 	ldr.w	r5, [r3], #4
 8017f28:	d402      	bmi.n	8017f30 <_printf_i+0xe8>
 8017f2a:	0649      	lsls	r1, r1, #25
 8017f2c:	bf48      	it	mi
 8017f2e:	b2ad      	uxthmi	r5, r5
 8017f30:	2f6f      	cmp	r7, #111	@ 0x6f
 8017f32:	4852      	ldr	r0, [pc, #328]	@ (801807c <_printf_i+0x234>)
 8017f34:	6033      	str	r3, [r6, #0]
 8017f36:	bf14      	ite	ne
 8017f38:	230a      	movne	r3, #10
 8017f3a:	2308      	moveq	r3, #8
 8017f3c:	2100      	movs	r1, #0
 8017f3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017f42:	6866      	ldr	r6, [r4, #4]
 8017f44:	60a6      	str	r6, [r4, #8]
 8017f46:	2e00      	cmp	r6, #0
 8017f48:	db05      	blt.n	8017f56 <_printf_i+0x10e>
 8017f4a:	6821      	ldr	r1, [r4, #0]
 8017f4c:	432e      	orrs	r6, r5
 8017f4e:	f021 0104 	bic.w	r1, r1, #4
 8017f52:	6021      	str	r1, [r4, #0]
 8017f54:	d04b      	beq.n	8017fee <_printf_i+0x1a6>
 8017f56:	4616      	mov	r6, r2
 8017f58:	fbb5 f1f3 	udiv	r1, r5, r3
 8017f5c:	fb03 5711 	mls	r7, r3, r1, r5
 8017f60:	5dc7      	ldrb	r7, [r0, r7]
 8017f62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017f66:	462f      	mov	r7, r5
 8017f68:	42bb      	cmp	r3, r7
 8017f6a:	460d      	mov	r5, r1
 8017f6c:	d9f4      	bls.n	8017f58 <_printf_i+0x110>
 8017f6e:	2b08      	cmp	r3, #8
 8017f70:	d10b      	bne.n	8017f8a <_printf_i+0x142>
 8017f72:	6823      	ldr	r3, [r4, #0]
 8017f74:	07df      	lsls	r7, r3, #31
 8017f76:	d508      	bpl.n	8017f8a <_printf_i+0x142>
 8017f78:	6923      	ldr	r3, [r4, #16]
 8017f7a:	6861      	ldr	r1, [r4, #4]
 8017f7c:	4299      	cmp	r1, r3
 8017f7e:	bfde      	ittt	le
 8017f80:	2330      	movle	r3, #48	@ 0x30
 8017f82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017f86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017f8a:	1b92      	subs	r2, r2, r6
 8017f8c:	6122      	str	r2, [r4, #16]
 8017f8e:	f8cd a000 	str.w	sl, [sp]
 8017f92:	464b      	mov	r3, r9
 8017f94:	aa03      	add	r2, sp, #12
 8017f96:	4621      	mov	r1, r4
 8017f98:	4640      	mov	r0, r8
 8017f9a:	f7ff fee7 	bl	8017d6c <_printf_common>
 8017f9e:	3001      	adds	r0, #1
 8017fa0:	d14a      	bne.n	8018038 <_printf_i+0x1f0>
 8017fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8017fa6:	b004      	add	sp, #16
 8017fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fac:	6823      	ldr	r3, [r4, #0]
 8017fae:	f043 0320 	orr.w	r3, r3, #32
 8017fb2:	6023      	str	r3, [r4, #0]
 8017fb4:	4832      	ldr	r0, [pc, #200]	@ (8018080 <_printf_i+0x238>)
 8017fb6:	2778      	movs	r7, #120	@ 0x78
 8017fb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017fbc:	6823      	ldr	r3, [r4, #0]
 8017fbe:	6831      	ldr	r1, [r6, #0]
 8017fc0:	061f      	lsls	r7, r3, #24
 8017fc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8017fc6:	d402      	bmi.n	8017fce <_printf_i+0x186>
 8017fc8:	065f      	lsls	r7, r3, #25
 8017fca:	bf48      	it	mi
 8017fcc:	b2ad      	uxthmi	r5, r5
 8017fce:	6031      	str	r1, [r6, #0]
 8017fd0:	07d9      	lsls	r1, r3, #31
 8017fd2:	bf44      	itt	mi
 8017fd4:	f043 0320 	orrmi.w	r3, r3, #32
 8017fd8:	6023      	strmi	r3, [r4, #0]
 8017fda:	b11d      	cbz	r5, 8017fe4 <_printf_i+0x19c>
 8017fdc:	2310      	movs	r3, #16
 8017fde:	e7ad      	b.n	8017f3c <_printf_i+0xf4>
 8017fe0:	4826      	ldr	r0, [pc, #152]	@ (801807c <_printf_i+0x234>)
 8017fe2:	e7e9      	b.n	8017fb8 <_printf_i+0x170>
 8017fe4:	6823      	ldr	r3, [r4, #0]
 8017fe6:	f023 0320 	bic.w	r3, r3, #32
 8017fea:	6023      	str	r3, [r4, #0]
 8017fec:	e7f6      	b.n	8017fdc <_printf_i+0x194>
 8017fee:	4616      	mov	r6, r2
 8017ff0:	e7bd      	b.n	8017f6e <_printf_i+0x126>
 8017ff2:	6833      	ldr	r3, [r6, #0]
 8017ff4:	6825      	ldr	r5, [r4, #0]
 8017ff6:	6961      	ldr	r1, [r4, #20]
 8017ff8:	1d18      	adds	r0, r3, #4
 8017ffa:	6030      	str	r0, [r6, #0]
 8017ffc:	062e      	lsls	r6, r5, #24
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	d501      	bpl.n	8018006 <_printf_i+0x1be>
 8018002:	6019      	str	r1, [r3, #0]
 8018004:	e002      	b.n	801800c <_printf_i+0x1c4>
 8018006:	0668      	lsls	r0, r5, #25
 8018008:	d5fb      	bpl.n	8018002 <_printf_i+0x1ba>
 801800a:	8019      	strh	r1, [r3, #0]
 801800c:	2300      	movs	r3, #0
 801800e:	6123      	str	r3, [r4, #16]
 8018010:	4616      	mov	r6, r2
 8018012:	e7bc      	b.n	8017f8e <_printf_i+0x146>
 8018014:	6833      	ldr	r3, [r6, #0]
 8018016:	1d1a      	adds	r2, r3, #4
 8018018:	6032      	str	r2, [r6, #0]
 801801a:	681e      	ldr	r6, [r3, #0]
 801801c:	6862      	ldr	r2, [r4, #4]
 801801e:	2100      	movs	r1, #0
 8018020:	4630      	mov	r0, r6
 8018022:	f7f0 f905 	bl	8008230 <memchr>
 8018026:	b108      	cbz	r0, 801802c <_printf_i+0x1e4>
 8018028:	1b80      	subs	r0, r0, r6
 801802a:	6060      	str	r0, [r4, #4]
 801802c:	6863      	ldr	r3, [r4, #4]
 801802e:	6123      	str	r3, [r4, #16]
 8018030:	2300      	movs	r3, #0
 8018032:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018036:	e7aa      	b.n	8017f8e <_printf_i+0x146>
 8018038:	6923      	ldr	r3, [r4, #16]
 801803a:	4632      	mov	r2, r6
 801803c:	4649      	mov	r1, r9
 801803e:	4640      	mov	r0, r8
 8018040:	47d0      	blx	sl
 8018042:	3001      	adds	r0, #1
 8018044:	d0ad      	beq.n	8017fa2 <_printf_i+0x15a>
 8018046:	6823      	ldr	r3, [r4, #0]
 8018048:	079b      	lsls	r3, r3, #30
 801804a:	d413      	bmi.n	8018074 <_printf_i+0x22c>
 801804c:	68e0      	ldr	r0, [r4, #12]
 801804e:	9b03      	ldr	r3, [sp, #12]
 8018050:	4298      	cmp	r0, r3
 8018052:	bfb8      	it	lt
 8018054:	4618      	movlt	r0, r3
 8018056:	e7a6      	b.n	8017fa6 <_printf_i+0x15e>
 8018058:	2301      	movs	r3, #1
 801805a:	4632      	mov	r2, r6
 801805c:	4649      	mov	r1, r9
 801805e:	4640      	mov	r0, r8
 8018060:	47d0      	blx	sl
 8018062:	3001      	adds	r0, #1
 8018064:	d09d      	beq.n	8017fa2 <_printf_i+0x15a>
 8018066:	3501      	adds	r5, #1
 8018068:	68e3      	ldr	r3, [r4, #12]
 801806a:	9903      	ldr	r1, [sp, #12]
 801806c:	1a5b      	subs	r3, r3, r1
 801806e:	42ab      	cmp	r3, r5
 8018070:	dcf2      	bgt.n	8018058 <_printf_i+0x210>
 8018072:	e7eb      	b.n	801804c <_printf_i+0x204>
 8018074:	2500      	movs	r5, #0
 8018076:	f104 0619 	add.w	r6, r4, #25
 801807a:	e7f5      	b.n	8018068 <_printf_i+0x220>
 801807c:	0801d906 	.word	0x0801d906
 8018080:	0801d917 	.word	0x0801d917

08018084 <std>:
 8018084:	2300      	movs	r3, #0
 8018086:	b510      	push	{r4, lr}
 8018088:	4604      	mov	r4, r0
 801808a:	e9c0 3300 	strd	r3, r3, [r0]
 801808e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018092:	6083      	str	r3, [r0, #8]
 8018094:	8181      	strh	r1, [r0, #12]
 8018096:	6643      	str	r3, [r0, #100]	@ 0x64
 8018098:	81c2      	strh	r2, [r0, #14]
 801809a:	6183      	str	r3, [r0, #24]
 801809c:	4619      	mov	r1, r3
 801809e:	2208      	movs	r2, #8
 80180a0:	305c      	adds	r0, #92	@ 0x5c
 80180a2:	f000 fa4b 	bl	801853c <memset>
 80180a6:	4b0d      	ldr	r3, [pc, #52]	@ (80180dc <std+0x58>)
 80180a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80180aa:	4b0d      	ldr	r3, [pc, #52]	@ (80180e0 <std+0x5c>)
 80180ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80180ae:	4b0d      	ldr	r3, [pc, #52]	@ (80180e4 <std+0x60>)
 80180b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80180b2:	4b0d      	ldr	r3, [pc, #52]	@ (80180e8 <std+0x64>)
 80180b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80180b6:	4b0d      	ldr	r3, [pc, #52]	@ (80180ec <std+0x68>)
 80180b8:	6224      	str	r4, [r4, #32]
 80180ba:	429c      	cmp	r4, r3
 80180bc:	d006      	beq.n	80180cc <std+0x48>
 80180be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80180c2:	4294      	cmp	r4, r2
 80180c4:	d002      	beq.n	80180cc <std+0x48>
 80180c6:	33d0      	adds	r3, #208	@ 0xd0
 80180c8:	429c      	cmp	r4, r3
 80180ca:	d105      	bne.n	80180d8 <std+0x54>
 80180cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80180d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180d4:	f000 bafa 	b.w	80186cc <__retarget_lock_init_recursive>
 80180d8:	bd10      	pop	{r4, pc}
 80180da:	bf00      	nop
 80180dc:	08018311 	.word	0x08018311
 80180e0:	08018337 	.word	0x08018337
 80180e4:	0801836f 	.word	0x0801836f
 80180e8:	08018393 	.word	0x08018393
 80180ec:	2001429c 	.word	0x2001429c

080180f0 <stdio_exit_handler>:
 80180f0:	4a02      	ldr	r2, [pc, #8]	@ (80180fc <stdio_exit_handler+0xc>)
 80180f2:	4903      	ldr	r1, [pc, #12]	@ (8018100 <stdio_exit_handler+0x10>)
 80180f4:	4803      	ldr	r0, [pc, #12]	@ (8018104 <stdio_exit_handler+0x14>)
 80180f6:	f000 b869 	b.w	80181cc <_fwalk_sglue>
 80180fa:	bf00      	nop
 80180fc:	20000088 	.word	0x20000088
 8018100:	0801ae5d 	.word	0x0801ae5d
 8018104:	20000204 	.word	0x20000204

08018108 <cleanup_stdio>:
 8018108:	6841      	ldr	r1, [r0, #4]
 801810a:	4b0c      	ldr	r3, [pc, #48]	@ (801813c <cleanup_stdio+0x34>)
 801810c:	4299      	cmp	r1, r3
 801810e:	b510      	push	{r4, lr}
 8018110:	4604      	mov	r4, r0
 8018112:	d001      	beq.n	8018118 <cleanup_stdio+0x10>
 8018114:	f002 fea2 	bl	801ae5c <_fflush_r>
 8018118:	68a1      	ldr	r1, [r4, #8]
 801811a:	4b09      	ldr	r3, [pc, #36]	@ (8018140 <cleanup_stdio+0x38>)
 801811c:	4299      	cmp	r1, r3
 801811e:	d002      	beq.n	8018126 <cleanup_stdio+0x1e>
 8018120:	4620      	mov	r0, r4
 8018122:	f002 fe9b 	bl	801ae5c <_fflush_r>
 8018126:	68e1      	ldr	r1, [r4, #12]
 8018128:	4b06      	ldr	r3, [pc, #24]	@ (8018144 <cleanup_stdio+0x3c>)
 801812a:	4299      	cmp	r1, r3
 801812c:	d004      	beq.n	8018138 <cleanup_stdio+0x30>
 801812e:	4620      	mov	r0, r4
 8018130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018134:	f002 be92 	b.w	801ae5c <_fflush_r>
 8018138:	bd10      	pop	{r4, pc}
 801813a:	bf00      	nop
 801813c:	2001429c 	.word	0x2001429c
 8018140:	20014304 	.word	0x20014304
 8018144:	2001436c 	.word	0x2001436c

08018148 <global_stdio_init.part.0>:
 8018148:	b510      	push	{r4, lr}
 801814a:	4b0b      	ldr	r3, [pc, #44]	@ (8018178 <global_stdio_init.part.0+0x30>)
 801814c:	4c0b      	ldr	r4, [pc, #44]	@ (801817c <global_stdio_init.part.0+0x34>)
 801814e:	4a0c      	ldr	r2, [pc, #48]	@ (8018180 <global_stdio_init.part.0+0x38>)
 8018150:	601a      	str	r2, [r3, #0]
 8018152:	4620      	mov	r0, r4
 8018154:	2200      	movs	r2, #0
 8018156:	2104      	movs	r1, #4
 8018158:	f7ff ff94 	bl	8018084 <std>
 801815c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018160:	2201      	movs	r2, #1
 8018162:	2109      	movs	r1, #9
 8018164:	f7ff ff8e 	bl	8018084 <std>
 8018168:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801816c:	2202      	movs	r2, #2
 801816e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018172:	2112      	movs	r1, #18
 8018174:	f7ff bf86 	b.w	8018084 <std>
 8018178:	200143d4 	.word	0x200143d4
 801817c:	2001429c 	.word	0x2001429c
 8018180:	080180f1 	.word	0x080180f1

08018184 <__sfp_lock_acquire>:
 8018184:	4801      	ldr	r0, [pc, #4]	@ (801818c <__sfp_lock_acquire+0x8>)
 8018186:	f000 baa2 	b.w	80186ce <__retarget_lock_acquire_recursive>
 801818a:	bf00      	nop
 801818c:	200143dd 	.word	0x200143dd

08018190 <__sfp_lock_release>:
 8018190:	4801      	ldr	r0, [pc, #4]	@ (8018198 <__sfp_lock_release+0x8>)
 8018192:	f000 ba9d 	b.w	80186d0 <__retarget_lock_release_recursive>
 8018196:	bf00      	nop
 8018198:	200143dd 	.word	0x200143dd

0801819c <__sinit>:
 801819c:	b510      	push	{r4, lr}
 801819e:	4604      	mov	r4, r0
 80181a0:	f7ff fff0 	bl	8018184 <__sfp_lock_acquire>
 80181a4:	6a23      	ldr	r3, [r4, #32]
 80181a6:	b11b      	cbz	r3, 80181b0 <__sinit+0x14>
 80181a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181ac:	f7ff bff0 	b.w	8018190 <__sfp_lock_release>
 80181b0:	4b04      	ldr	r3, [pc, #16]	@ (80181c4 <__sinit+0x28>)
 80181b2:	6223      	str	r3, [r4, #32]
 80181b4:	4b04      	ldr	r3, [pc, #16]	@ (80181c8 <__sinit+0x2c>)
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d1f5      	bne.n	80181a8 <__sinit+0xc>
 80181bc:	f7ff ffc4 	bl	8018148 <global_stdio_init.part.0>
 80181c0:	e7f2      	b.n	80181a8 <__sinit+0xc>
 80181c2:	bf00      	nop
 80181c4:	08018109 	.word	0x08018109
 80181c8:	200143d4 	.word	0x200143d4

080181cc <_fwalk_sglue>:
 80181cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181d0:	4607      	mov	r7, r0
 80181d2:	4688      	mov	r8, r1
 80181d4:	4614      	mov	r4, r2
 80181d6:	2600      	movs	r6, #0
 80181d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80181dc:	f1b9 0901 	subs.w	r9, r9, #1
 80181e0:	d505      	bpl.n	80181ee <_fwalk_sglue+0x22>
 80181e2:	6824      	ldr	r4, [r4, #0]
 80181e4:	2c00      	cmp	r4, #0
 80181e6:	d1f7      	bne.n	80181d8 <_fwalk_sglue+0xc>
 80181e8:	4630      	mov	r0, r6
 80181ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181ee:	89ab      	ldrh	r3, [r5, #12]
 80181f0:	2b01      	cmp	r3, #1
 80181f2:	d907      	bls.n	8018204 <_fwalk_sglue+0x38>
 80181f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80181f8:	3301      	adds	r3, #1
 80181fa:	d003      	beq.n	8018204 <_fwalk_sglue+0x38>
 80181fc:	4629      	mov	r1, r5
 80181fe:	4638      	mov	r0, r7
 8018200:	47c0      	blx	r8
 8018202:	4306      	orrs	r6, r0
 8018204:	3568      	adds	r5, #104	@ 0x68
 8018206:	e7e9      	b.n	80181dc <_fwalk_sglue+0x10>

08018208 <sniprintf>:
 8018208:	b40c      	push	{r2, r3}
 801820a:	b530      	push	{r4, r5, lr}
 801820c:	4b18      	ldr	r3, [pc, #96]	@ (8018270 <sniprintf+0x68>)
 801820e:	1e0c      	subs	r4, r1, #0
 8018210:	681d      	ldr	r5, [r3, #0]
 8018212:	b09d      	sub	sp, #116	@ 0x74
 8018214:	da08      	bge.n	8018228 <sniprintf+0x20>
 8018216:	238b      	movs	r3, #139	@ 0x8b
 8018218:	602b      	str	r3, [r5, #0]
 801821a:	f04f 30ff 	mov.w	r0, #4294967295
 801821e:	b01d      	add	sp, #116	@ 0x74
 8018220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018224:	b002      	add	sp, #8
 8018226:	4770      	bx	lr
 8018228:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801822c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018230:	f04f 0300 	mov.w	r3, #0
 8018234:	931b      	str	r3, [sp, #108]	@ 0x6c
 8018236:	bf14      	ite	ne
 8018238:	f104 33ff 	addne.w	r3, r4, #4294967295
 801823c:	4623      	moveq	r3, r4
 801823e:	9304      	str	r3, [sp, #16]
 8018240:	9307      	str	r3, [sp, #28]
 8018242:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018246:	9002      	str	r0, [sp, #8]
 8018248:	9006      	str	r0, [sp, #24]
 801824a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801824e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018250:	ab21      	add	r3, sp, #132	@ 0x84
 8018252:	a902      	add	r1, sp, #8
 8018254:	4628      	mov	r0, r5
 8018256:	9301      	str	r3, [sp, #4]
 8018258:	f002 f962 	bl	801a520 <_svfiprintf_r>
 801825c:	1c43      	adds	r3, r0, #1
 801825e:	bfbc      	itt	lt
 8018260:	238b      	movlt	r3, #139	@ 0x8b
 8018262:	602b      	strlt	r3, [r5, #0]
 8018264:	2c00      	cmp	r4, #0
 8018266:	d0da      	beq.n	801821e <sniprintf+0x16>
 8018268:	9b02      	ldr	r3, [sp, #8]
 801826a:	2200      	movs	r2, #0
 801826c:	701a      	strb	r2, [r3, #0]
 801826e:	e7d6      	b.n	801821e <sniprintf+0x16>
 8018270:	20000200 	.word	0x20000200

08018274 <siprintf>:
 8018274:	b40e      	push	{r1, r2, r3}
 8018276:	b510      	push	{r4, lr}
 8018278:	b09d      	sub	sp, #116	@ 0x74
 801827a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801827c:	9002      	str	r0, [sp, #8]
 801827e:	9006      	str	r0, [sp, #24]
 8018280:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018284:	480a      	ldr	r0, [pc, #40]	@ (80182b0 <siprintf+0x3c>)
 8018286:	9107      	str	r1, [sp, #28]
 8018288:	9104      	str	r1, [sp, #16]
 801828a:	490a      	ldr	r1, [pc, #40]	@ (80182b4 <siprintf+0x40>)
 801828c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018290:	9105      	str	r1, [sp, #20]
 8018292:	2400      	movs	r4, #0
 8018294:	a902      	add	r1, sp, #8
 8018296:	6800      	ldr	r0, [r0, #0]
 8018298:	9301      	str	r3, [sp, #4]
 801829a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801829c:	f002 f940 	bl	801a520 <_svfiprintf_r>
 80182a0:	9b02      	ldr	r3, [sp, #8]
 80182a2:	701c      	strb	r4, [r3, #0]
 80182a4:	b01d      	add	sp, #116	@ 0x74
 80182a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182aa:	b003      	add	sp, #12
 80182ac:	4770      	bx	lr
 80182ae:	bf00      	nop
 80182b0:	20000200 	.word	0x20000200
 80182b4:	ffff0208 	.word	0xffff0208

080182b8 <siscanf>:
 80182b8:	b40e      	push	{r1, r2, r3}
 80182ba:	b570      	push	{r4, r5, r6, lr}
 80182bc:	b09d      	sub	sp, #116	@ 0x74
 80182be:	ac21      	add	r4, sp, #132	@ 0x84
 80182c0:	2500      	movs	r5, #0
 80182c2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80182c6:	f854 6b04 	ldr.w	r6, [r4], #4
 80182ca:	f8ad 2014 	strh.w	r2, [sp, #20]
 80182ce:	951b      	str	r5, [sp, #108]	@ 0x6c
 80182d0:	9002      	str	r0, [sp, #8]
 80182d2:	9006      	str	r0, [sp, #24]
 80182d4:	f7ef fffc 	bl	80082d0 <strlen>
 80182d8:	4b0b      	ldr	r3, [pc, #44]	@ (8018308 <siscanf+0x50>)
 80182da:	9003      	str	r0, [sp, #12]
 80182dc:	9007      	str	r0, [sp, #28]
 80182de:	480b      	ldr	r0, [pc, #44]	@ (801830c <siscanf+0x54>)
 80182e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80182e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80182e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80182ea:	4632      	mov	r2, r6
 80182ec:	4623      	mov	r3, r4
 80182ee:	a902      	add	r1, sp, #8
 80182f0:	6800      	ldr	r0, [r0, #0]
 80182f2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80182f4:	9514      	str	r5, [sp, #80]	@ 0x50
 80182f6:	9401      	str	r4, [sp, #4]
 80182f8:	f002 fa68 	bl	801a7cc <__ssvfiscanf_r>
 80182fc:	b01d      	add	sp, #116	@ 0x74
 80182fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018302:	b003      	add	sp, #12
 8018304:	4770      	bx	lr
 8018306:	bf00      	nop
 8018308:	08018333 	.word	0x08018333
 801830c:	20000200 	.word	0x20000200

08018310 <__sread>:
 8018310:	b510      	push	{r4, lr}
 8018312:	460c      	mov	r4, r1
 8018314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018318:	f000 f97a 	bl	8018610 <_read_r>
 801831c:	2800      	cmp	r0, #0
 801831e:	bfab      	itete	ge
 8018320:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018322:	89a3      	ldrhlt	r3, [r4, #12]
 8018324:	181b      	addge	r3, r3, r0
 8018326:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801832a:	bfac      	ite	ge
 801832c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801832e:	81a3      	strhlt	r3, [r4, #12]
 8018330:	bd10      	pop	{r4, pc}

08018332 <__seofread>:
 8018332:	2000      	movs	r0, #0
 8018334:	4770      	bx	lr

08018336 <__swrite>:
 8018336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801833a:	461f      	mov	r7, r3
 801833c:	898b      	ldrh	r3, [r1, #12]
 801833e:	05db      	lsls	r3, r3, #23
 8018340:	4605      	mov	r5, r0
 8018342:	460c      	mov	r4, r1
 8018344:	4616      	mov	r6, r2
 8018346:	d505      	bpl.n	8018354 <__swrite+0x1e>
 8018348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801834c:	2302      	movs	r3, #2
 801834e:	2200      	movs	r2, #0
 8018350:	f000 f94c 	bl	80185ec <_lseek_r>
 8018354:	89a3      	ldrh	r3, [r4, #12]
 8018356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801835a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801835e:	81a3      	strh	r3, [r4, #12]
 8018360:	4632      	mov	r2, r6
 8018362:	463b      	mov	r3, r7
 8018364:	4628      	mov	r0, r5
 8018366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801836a:	f000 b973 	b.w	8018654 <_write_r>

0801836e <__sseek>:
 801836e:	b510      	push	{r4, lr}
 8018370:	460c      	mov	r4, r1
 8018372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018376:	f000 f939 	bl	80185ec <_lseek_r>
 801837a:	1c43      	adds	r3, r0, #1
 801837c:	89a3      	ldrh	r3, [r4, #12]
 801837e:	bf15      	itete	ne
 8018380:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018382:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018386:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801838a:	81a3      	strheq	r3, [r4, #12]
 801838c:	bf18      	it	ne
 801838e:	81a3      	strhne	r3, [r4, #12]
 8018390:	bd10      	pop	{r4, pc}

08018392 <__sclose>:
 8018392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018396:	f000 b919 	b.w	80185cc <_close_r>

0801839a <_vsniprintf_r>:
 801839a:	b530      	push	{r4, r5, lr}
 801839c:	4614      	mov	r4, r2
 801839e:	2c00      	cmp	r4, #0
 80183a0:	b09b      	sub	sp, #108	@ 0x6c
 80183a2:	4605      	mov	r5, r0
 80183a4:	461a      	mov	r2, r3
 80183a6:	da05      	bge.n	80183b4 <_vsniprintf_r+0x1a>
 80183a8:	238b      	movs	r3, #139	@ 0x8b
 80183aa:	6003      	str	r3, [r0, #0]
 80183ac:	f04f 30ff 	mov.w	r0, #4294967295
 80183b0:	b01b      	add	sp, #108	@ 0x6c
 80183b2:	bd30      	pop	{r4, r5, pc}
 80183b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80183b8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80183bc:	f04f 0300 	mov.w	r3, #0
 80183c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80183c2:	bf14      	ite	ne
 80183c4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80183c8:	4623      	moveq	r3, r4
 80183ca:	9302      	str	r3, [sp, #8]
 80183cc:	9305      	str	r3, [sp, #20]
 80183ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80183d2:	9100      	str	r1, [sp, #0]
 80183d4:	9104      	str	r1, [sp, #16]
 80183d6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80183da:	4669      	mov	r1, sp
 80183dc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80183de:	f002 f89f 	bl	801a520 <_svfiprintf_r>
 80183e2:	1c43      	adds	r3, r0, #1
 80183e4:	bfbc      	itt	lt
 80183e6:	238b      	movlt	r3, #139	@ 0x8b
 80183e8:	602b      	strlt	r3, [r5, #0]
 80183ea:	2c00      	cmp	r4, #0
 80183ec:	d0e0      	beq.n	80183b0 <_vsniprintf_r+0x16>
 80183ee:	9b00      	ldr	r3, [sp, #0]
 80183f0:	2200      	movs	r2, #0
 80183f2:	701a      	strb	r2, [r3, #0]
 80183f4:	e7dc      	b.n	80183b0 <_vsniprintf_r+0x16>
	...

080183f8 <vsniprintf>:
 80183f8:	b507      	push	{r0, r1, r2, lr}
 80183fa:	9300      	str	r3, [sp, #0]
 80183fc:	4613      	mov	r3, r2
 80183fe:	460a      	mov	r2, r1
 8018400:	4601      	mov	r1, r0
 8018402:	4803      	ldr	r0, [pc, #12]	@ (8018410 <vsniprintf+0x18>)
 8018404:	6800      	ldr	r0, [r0, #0]
 8018406:	f7ff ffc8 	bl	801839a <_vsniprintf_r>
 801840a:	b003      	add	sp, #12
 801840c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018410:	20000200 	.word	0x20000200

08018414 <__swbuf_r>:
 8018414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018416:	460e      	mov	r6, r1
 8018418:	4614      	mov	r4, r2
 801841a:	4605      	mov	r5, r0
 801841c:	b118      	cbz	r0, 8018426 <__swbuf_r+0x12>
 801841e:	6a03      	ldr	r3, [r0, #32]
 8018420:	b90b      	cbnz	r3, 8018426 <__swbuf_r+0x12>
 8018422:	f7ff febb 	bl	801819c <__sinit>
 8018426:	69a3      	ldr	r3, [r4, #24]
 8018428:	60a3      	str	r3, [r4, #8]
 801842a:	89a3      	ldrh	r3, [r4, #12]
 801842c:	071a      	lsls	r2, r3, #28
 801842e:	d501      	bpl.n	8018434 <__swbuf_r+0x20>
 8018430:	6923      	ldr	r3, [r4, #16]
 8018432:	b943      	cbnz	r3, 8018446 <__swbuf_r+0x32>
 8018434:	4621      	mov	r1, r4
 8018436:	4628      	mov	r0, r5
 8018438:	f000 f82a 	bl	8018490 <__swsetup_r>
 801843c:	b118      	cbz	r0, 8018446 <__swbuf_r+0x32>
 801843e:	f04f 37ff 	mov.w	r7, #4294967295
 8018442:	4638      	mov	r0, r7
 8018444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018446:	6823      	ldr	r3, [r4, #0]
 8018448:	6922      	ldr	r2, [r4, #16]
 801844a:	1a98      	subs	r0, r3, r2
 801844c:	6963      	ldr	r3, [r4, #20]
 801844e:	b2f6      	uxtb	r6, r6
 8018450:	4283      	cmp	r3, r0
 8018452:	4637      	mov	r7, r6
 8018454:	dc05      	bgt.n	8018462 <__swbuf_r+0x4e>
 8018456:	4621      	mov	r1, r4
 8018458:	4628      	mov	r0, r5
 801845a:	f002 fcff 	bl	801ae5c <_fflush_r>
 801845e:	2800      	cmp	r0, #0
 8018460:	d1ed      	bne.n	801843e <__swbuf_r+0x2a>
 8018462:	68a3      	ldr	r3, [r4, #8]
 8018464:	3b01      	subs	r3, #1
 8018466:	60a3      	str	r3, [r4, #8]
 8018468:	6823      	ldr	r3, [r4, #0]
 801846a:	1c5a      	adds	r2, r3, #1
 801846c:	6022      	str	r2, [r4, #0]
 801846e:	701e      	strb	r6, [r3, #0]
 8018470:	6962      	ldr	r2, [r4, #20]
 8018472:	1c43      	adds	r3, r0, #1
 8018474:	429a      	cmp	r2, r3
 8018476:	d004      	beq.n	8018482 <__swbuf_r+0x6e>
 8018478:	89a3      	ldrh	r3, [r4, #12]
 801847a:	07db      	lsls	r3, r3, #31
 801847c:	d5e1      	bpl.n	8018442 <__swbuf_r+0x2e>
 801847e:	2e0a      	cmp	r6, #10
 8018480:	d1df      	bne.n	8018442 <__swbuf_r+0x2e>
 8018482:	4621      	mov	r1, r4
 8018484:	4628      	mov	r0, r5
 8018486:	f002 fce9 	bl	801ae5c <_fflush_r>
 801848a:	2800      	cmp	r0, #0
 801848c:	d0d9      	beq.n	8018442 <__swbuf_r+0x2e>
 801848e:	e7d6      	b.n	801843e <__swbuf_r+0x2a>

08018490 <__swsetup_r>:
 8018490:	b538      	push	{r3, r4, r5, lr}
 8018492:	4b29      	ldr	r3, [pc, #164]	@ (8018538 <__swsetup_r+0xa8>)
 8018494:	4605      	mov	r5, r0
 8018496:	6818      	ldr	r0, [r3, #0]
 8018498:	460c      	mov	r4, r1
 801849a:	b118      	cbz	r0, 80184a4 <__swsetup_r+0x14>
 801849c:	6a03      	ldr	r3, [r0, #32]
 801849e:	b90b      	cbnz	r3, 80184a4 <__swsetup_r+0x14>
 80184a0:	f7ff fe7c 	bl	801819c <__sinit>
 80184a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184a8:	0719      	lsls	r1, r3, #28
 80184aa:	d422      	bmi.n	80184f2 <__swsetup_r+0x62>
 80184ac:	06da      	lsls	r2, r3, #27
 80184ae:	d407      	bmi.n	80184c0 <__swsetup_r+0x30>
 80184b0:	2209      	movs	r2, #9
 80184b2:	602a      	str	r2, [r5, #0]
 80184b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80184b8:	81a3      	strh	r3, [r4, #12]
 80184ba:	f04f 30ff 	mov.w	r0, #4294967295
 80184be:	e033      	b.n	8018528 <__swsetup_r+0x98>
 80184c0:	0758      	lsls	r0, r3, #29
 80184c2:	d512      	bpl.n	80184ea <__swsetup_r+0x5a>
 80184c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80184c6:	b141      	cbz	r1, 80184da <__swsetup_r+0x4a>
 80184c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80184cc:	4299      	cmp	r1, r3
 80184ce:	d002      	beq.n	80184d6 <__swsetup_r+0x46>
 80184d0:	4628      	mov	r0, r5
 80184d2:	f000 ff75 	bl	80193c0 <_free_r>
 80184d6:	2300      	movs	r3, #0
 80184d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80184da:	89a3      	ldrh	r3, [r4, #12]
 80184dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80184e0:	81a3      	strh	r3, [r4, #12]
 80184e2:	2300      	movs	r3, #0
 80184e4:	6063      	str	r3, [r4, #4]
 80184e6:	6923      	ldr	r3, [r4, #16]
 80184e8:	6023      	str	r3, [r4, #0]
 80184ea:	89a3      	ldrh	r3, [r4, #12]
 80184ec:	f043 0308 	orr.w	r3, r3, #8
 80184f0:	81a3      	strh	r3, [r4, #12]
 80184f2:	6923      	ldr	r3, [r4, #16]
 80184f4:	b94b      	cbnz	r3, 801850a <__swsetup_r+0x7a>
 80184f6:	89a3      	ldrh	r3, [r4, #12]
 80184f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80184fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018500:	d003      	beq.n	801850a <__swsetup_r+0x7a>
 8018502:	4621      	mov	r1, r4
 8018504:	4628      	mov	r0, r5
 8018506:	f002 fcf7 	bl	801aef8 <__smakebuf_r>
 801850a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801850e:	f013 0201 	ands.w	r2, r3, #1
 8018512:	d00a      	beq.n	801852a <__swsetup_r+0x9a>
 8018514:	2200      	movs	r2, #0
 8018516:	60a2      	str	r2, [r4, #8]
 8018518:	6962      	ldr	r2, [r4, #20]
 801851a:	4252      	negs	r2, r2
 801851c:	61a2      	str	r2, [r4, #24]
 801851e:	6922      	ldr	r2, [r4, #16]
 8018520:	b942      	cbnz	r2, 8018534 <__swsetup_r+0xa4>
 8018522:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018526:	d1c5      	bne.n	80184b4 <__swsetup_r+0x24>
 8018528:	bd38      	pop	{r3, r4, r5, pc}
 801852a:	0799      	lsls	r1, r3, #30
 801852c:	bf58      	it	pl
 801852e:	6962      	ldrpl	r2, [r4, #20]
 8018530:	60a2      	str	r2, [r4, #8]
 8018532:	e7f4      	b.n	801851e <__swsetup_r+0x8e>
 8018534:	2000      	movs	r0, #0
 8018536:	e7f7      	b.n	8018528 <__swsetup_r+0x98>
 8018538:	20000200 	.word	0x20000200

0801853c <memset>:
 801853c:	4402      	add	r2, r0
 801853e:	4603      	mov	r3, r0
 8018540:	4293      	cmp	r3, r2
 8018542:	d100      	bne.n	8018546 <memset+0xa>
 8018544:	4770      	bx	lr
 8018546:	f803 1b01 	strb.w	r1, [r3], #1
 801854a:	e7f9      	b.n	8018540 <memset+0x4>

0801854c <strncmp>:
 801854c:	b510      	push	{r4, lr}
 801854e:	b16a      	cbz	r2, 801856c <strncmp+0x20>
 8018550:	3901      	subs	r1, #1
 8018552:	1884      	adds	r4, r0, r2
 8018554:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018558:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801855c:	429a      	cmp	r2, r3
 801855e:	d103      	bne.n	8018568 <strncmp+0x1c>
 8018560:	42a0      	cmp	r0, r4
 8018562:	d001      	beq.n	8018568 <strncmp+0x1c>
 8018564:	2a00      	cmp	r2, #0
 8018566:	d1f5      	bne.n	8018554 <strncmp+0x8>
 8018568:	1ad0      	subs	r0, r2, r3
 801856a:	bd10      	pop	{r4, pc}
 801856c:	4610      	mov	r0, r2
 801856e:	e7fc      	b.n	801856a <strncmp+0x1e>

08018570 <strncpy>:
 8018570:	b510      	push	{r4, lr}
 8018572:	3901      	subs	r1, #1
 8018574:	4603      	mov	r3, r0
 8018576:	b132      	cbz	r2, 8018586 <strncpy+0x16>
 8018578:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801857c:	f803 4b01 	strb.w	r4, [r3], #1
 8018580:	3a01      	subs	r2, #1
 8018582:	2c00      	cmp	r4, #0
 8018584:	d1f7      	bne.n	8018576 <strncpy+0x6>
 8018586:	441a      	add	r2, r3
 8018588:	2100      	movs	r1, #0
 801858a:	4293      	cmp	r3, r2
 801858c:	d100      	bne.n	8018590 <strncpy+0x20>
 801858e:	bd10      	pop	{r4, pc}
 8018590:	f803 1b01 	strb.w	r1, [r3], #1
 8018594:	e7f9      	b.n	801858a <strncpy+0x1a>

08018596 <strstr>:
 8018596:	780a      	ldrb	r2, [r1, #0]
 8018598:	b570      	push	{r4, r5, r6, lr}
 801859a:	b96a      	cbnz	r2, 80185b8 <strstr+0x22>
 801859c:	bd70      	pop	{r4, r5, r6, pc}
 801859e:	429a      	cmp	r2, r3
 80185a0:	d109      	bne.n	80185b6 <strstr+0x20>
 80185a2:	460c      	mov	r4, r1
 80185a4:	4605      	mov	r5, r0
 80185a6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d0f6      	beq.n	801859c <strstr+0x6>
 80185ae:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80185b2:	429e      	cmp	r6, r3
 80185b4:	d0f7      	beq.n	80185a6 <strstr+0x10>
 80185b6:	3001      	adds	r0, #1
 80185b8:	7803      	ldrb	r3, [r0, #0]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d1ef      	bne.n	801859e <strstr+0x8>
 80185be:	4618      	mov	r0, r3
 80185c0:	e7ec      	b.n	801859c <strstr+0x6>
	...

080185c4 <_localeconv_r>:
 80185c4:	4800      	ldr	r0, [pc, #0]	@ (80185c8 <_localeconv_r+0x4>)
 80185c6:	4770      	bx	lr
 80185c8:	20000184 	.word	0x20000184

080185cc <_close_r>:
 80185cc:	b538      	push	{r3, r4, r5, lr}
 80185ce:	4d06      	ldr	r5, [pc, #24]	@ (80185e8 <_close_r+0x1c>)
 80185d0:	2300      	movs	r3, #0
 80185d2:	4604      	mov	r4, r0
 80185d4:	4608      	mov	r0, r1
 80185d6:	602b      	str	r3, [r5, #0]
 80185d8:	f7f7 f8c8 	bl	800f76c <_close>
 80185dc:	1c43      	adds	r3, r0, #1
 80185de:	d102      	bne.n	80185e6 <_close_r+0x1a>
 80185e0:	682b      	ldr	r3, [r5, #0]
 80185e2:	b103      	cbz	r3, 80185e6 <_close_r+0x1a>
 80185e4:	6023      	str	r3, [r4, #0]
 80185e6:	bd38      	pop	{r3, r4, r5, pc}
 80185e8:	200143d8 	.word	0x200143d8

080185ec <_lseek_r>:
 80185ec:	b538      	push	{r3, r4, r5, lr}
 80185ee:	4d07      	ldr	r5, [pc, #28]	@ (801860c <_lseek_r+0x20>)
 80185f0:	4604      	mov	r4, r0
 80185f2:	4608      	mov	r0, r1
 80185f4:	4611      	mov	r1, r2
 80185f6:	2200      	movs	r2, #0
 80185f8:	602a      	str	r2, [r5, #0]
 80185fa:	461a      	mov	r2, r3
 80185fc:	f7f7 f8dd 	bl	800f7ba <_lseek>
 8018600:	1c43      	adds	r3, r0, #1
 8018602:	d102      	bne.n	801860a <_lseek_r+0x1e>
 8018604:	682b      	ldr	r3, [r5, #0]
 8018606:	b103      	cbz	r3, 801860a <_lseek_r+0x1e>
 8018608:	6023      	str	r3, [r4, #0]
 801860a:	bd38      	pop	{r3, r4, r5, pc}
 801860c:	200143d8 	.word	0x200143d8

08018610 <_read_r>:
 8018610:	b538      	push	{r3, r4, r5, lr}
 8018612:	4d07      	ldr	r5, [pc, #28]	@ (8018630 <_read_r+0x20>)
 8018614:	4604      	mov	r4, r0
 8018616:	4608      	mov	r0, r1
 8018618:	4611      	mov	r1, r2
 801861a:	2200      	movs	r2, #0
 801861c:	602a      	str	r2, [r5, #0]
 801861e:	461a      	mov	r2, r3
 8018620:	f7f7 f86b 	bl	800f6fa <_read>
 8018624:	1c43      	adds	r3, r0, #1
 8018626:	d102      	bne.n	801862e <_read_r+0x1e>
 8018628:	682b      	ldr	r3, [r5, #0]
 801862a:	b103      	cbz	r3, 801862e <_read_r+0x1e>
 801862c:	6023      	str	r3, [r4, #0]
 801862e:	bd38      	pop	{r3, r4, r5, pc}
 8018630:	200143d8 	.word	0x200143d8

08018634 <_sbrk_r>:
 8018634:	b538      	push	{r3, r4, r5, lr}
 8018636:	4d06      	ldr	r5, [pc, #24]	@ (8018650 <_sbrk_r+0x1c>)
 8018638:	2300      	movs	r3, #0
 801863a:	4604      	mov	r4, r0
 801863c:	4608      	mov	r0, r1
 801863e:	602b      	str	r3, [r5, #0]
 8018640:	f003 f802 	bl	801b648 <_sbrk>
 8018644:	1c43      	adds	r3, r0, #1
 8018646:	d102      	bne.n	801864e <_sbrk_r+0x1a>
 8018648:	682b      	ldr	r3, [r5, #0]
 801864a:	b103      	cbz	r3, 801864e <_sbrk_r+0x1a>
 801864c:	6023      	str	r3, [r4, #0]
 801864e:	bd38      	pop	{r3, r4, r5, pc}
 8018650:	200143d8 	.word	0x200143d8

08018654 <_write_r>:
 8018654:	b538      	push	{r3, r4, r5, lr}
 8018656:	4d07      	ldr	r5, [pc, #28]	@ (8018674 <_write_r+0x20>)
 8018658:	4604      	mov	r4, r0
 801865a:	4608      	mov	r0, r1
 801865c:	4611      	mov	r1, r2
 801865e:	2200      	movs	r2, #0
 8018660:	602a      	str	r2, [r5, #0]
 8018662:	461a      	mov	r2, r3
 8018664:	f7f7 f866 	bl	800f734 <_write>
 8018668:	1c43      	adds	r3, r0, #1
 801866a:	d102      	bne.n	8018672 <_write_r+0x1e>
 801866c:	682b      	ldr	r3, [r5, #0]
 801866e:	b103      	cbz	r3, 8018672 <_write_r+0x1e>
 8018670:	6023      	str	r3, [r4, #0]
 8018672:	bd38      	pop	{r3, r4, r5, pc}
 8018674:	200143d8 	.word	0x200143d8

08018678 <__errno>:
 8018678:	4b01      	ldr	r3, [pc, #4]	@ (8018680 <__errno+0x8>)
 801867a:	6818      	ldr	r0, [r3, #0]
 801867c:	4770      	bx	lr
 801867e:	bf00      	nop
 8018680:	20000200 	.word	0x20000200

08018684 <__libc_init_array>:
 8018684:	b570      	push	{r4, r5, r6, lr}
 8018686:	4d0d      	ldr	r5, [pc, #52]	@ (80186bc <__libc_init_array+0x38>)
 8018688:	4c0d      	ldr	r4, [pc, #52]	@ (80186c0 <__libc_init_array+0x3c>)
 801868a:	1b64      	subs	r4, r4, r5
 801868c:	10a4      	asrs	r4, r4, #2
 801868e:	2600      	movs	r6, #0
 8018690:	42a6      	cmp	r6, r4
 8018692:	d109      	bne.n	80186a8 <__libc_init_array+0x24>
 8018694:	4d0b      	ldr	r5, [pc, #44]	@ (80186c4 <__libc_init_array+0x40>)
 8018696:	4c0c      	ldr	r4, [pc, #48]	@ (80186c8 <__libc_init_array+0x44>)
 8018698:	f002 ffe4 	bl	801b664 <_init>
 801869c:	1b64      	subs	r4, r4, r5
 801869e:	10a4      	asrs	r4, r4, #2
 80186a0:	2600      	movs	r6, #0
 80186a2:	42a6      	cmp	r6, r4
 80186a4:	d105      	bne.n	80186b2 <__libc_init_array+0x2e>
 80186a6:	bd70      	pop	{r4, r5, r6, pc}
 80186a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80186ac:	4798      	blx	r3
 80186ae:	3601      	adds	r6, #1
 80186b0:	e7ee      	b.n	8018690 <__libc_init_array+0xc>
 80186b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80186b6:	4798      	blx	r3
 80186b8:	3601      	adds	r6, #1
 80186ba:	e7f2      	b.n	80186a2 <__libc_init_array+0x1e>
 80186bc:	0801dd38 	.word	0x0801dd38
 80186c0:	0801dd38 	.word	0x0801dd38
 80186c4:	0801dd38 	.word	0x0801dd38
 80186c8:	0801dd3c 	.word	0x0801dd3c

080186cc <__retarget_lock_init_recursive>:
 80186cc:	4770      	bx	lr

080186ce <__retarget_lock_acquire_recursive>:
 80186ce:	4770      	bx	lr

080186d0 <__retarget_lock_release_recursive>:
 80186d0:	4770      	bx	lr

080186d2 <strcpy>:
 80186d2:	4603      	mov	r3, r0
 80186d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80186d8:	f803 2b01 	strb.w	r2, [r3], #1
 80186dc:	2a00      	cmp	r2, #0
 80186de:	d1f9      	bne.n	80186d4 <strcpy+0x2>
 80186e0:	4770      	bx	lr

080186e2 <memcpy>:
 80186e2:	440a      	add	r2, r1
 80186e4:	4291      	cmp	r1, r2
 80186e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80186ea:	d100      	bne.n	80186ee <memcpy+0xc>
 80186ec:	4770      	bx	lr
 80186ee:	b510      	push	{r4, lr}
 80186f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80186f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80186f8:	4291      	cmp	r1, r2
 80186fa:	d1f9      	bne.n	80186f0 <memcpy+0xe>
 80186fc:	bd10      	pop	{r4, pc}
	...

08018700 <nan>:
 8018700:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018708 <nan+0x8>
 8018704:	4770      	bx	lr
 8018706:	bf00      	nop
 8018708:	00000000 	.word	0x00000000
 801870c:	7ff80000 	.word	0x7ff80000

08018710 <quorem>:
 8018710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018714:	6903      	ldr	r3, [r0, #16]
 8018716:	690c      	ldr	r4, [r1, #16]
 8018718:	42a3      	cmp	r3, r4
 801871a:	4607      	mov	r7, r0
 801871c:	db7e      	blt.n	801881c <quorem+0x10c>
 801871e:	3c01      	subs	r4, #1
 8018720:	f101 0814 	add.w	r8, r1, #20
 8018724:	00a3      	lsls	r3, r4, #2
 8018726:	f100 0514 	add.w	r5, r0, #20
 801872a:	9300      	str	r3, [sp, #0]
 801872c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018730:	9301      	str	r3, [sp, #4]
 8018732:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018736:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801873a:	3301      	adds	r3, #1
 801873c:	429a      	cmp	r2, r3
 801873e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018742:	fbb2 f6f3 	udiv	r6, r2, r3
 8018746:	d32e      	bcc.n	80187a6 <quorem+0x96>
 8018748:	f04f 0a00 	mov.w	sl, #0
 801874c:	46c4      	mov	ip, r8
 801874e:	46ae      	mov	lr, r5
 8018750:	46d3      	mov	fp, sl
 8018752:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018756:	b298      	uxth	r0, r3
 8018758:	fb06 a000 	mla	r0, r6, r0, sl
 801875c:	0c02      	lsrs	r2, r0, #16
 801875e:	0c1b      	lsrs	r3, r3, #16
 8018760:	fb06 2303 	mla	r3, r6, r3, r2
 8018764:	f8de 2000 	ldr.w	r2, [lr]
 8018768:	b280      	uxth	r0, r0
 801876a:	b292      	uxth	r2, r2
 801876c:	1a12      	subs	r2, r2, r0
 801876e:	445a      	add	r2, fp
 8018770:	f8de 0000 	ldr.w	r0, [lr]
 8018774:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018778:	b29b      	uxth	r3, r3
 801877a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801877e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8018782:	b292      	uxth	r2, r2
 8018784:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8018788:	45e1      	cmp	r9, ip
 801878a:	f84e 2b04 	str.w	r2, [lr], #4
 801878e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8018792:	d2de      	bcs.n	8018752 <quorem+0x42>
 8018794:	9b00      	ldr	r3, [sp, #0]
 8018796:	58eb      	ldr	r3, [r5, r3]
 8018798:	b92b      	cbnz	r3, 80187a6 <quorem+0x96>
 801879a:	9b01      	ldr	r3, [sp, #4]
 801879c:	3b04      	subs	r3, #4
 801879e:	429d      	cmp	r5, r3
 80187a0:	461a      	mov	r2, r3
 80187a2:	d32f      	bcc.n	8018804 <quorem+0xf4>
 80187a4:	613c      	str	r4, [r7, #16]
 80187a6:	4638      	mov	r0, r7
 80187a8:	f001 fc5c 	bl	801a064 <__mcmp>
 80187ac:	2800      	cmp	r0, #0
 80187ae:	db25      	blt.n	80187fc <quorem+0xec>
 80187b0:	4629      	mov	r1, r5
 80187b2:	2000      	movs	r0, #0
 80187b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80187b8:	f8d1 c000 	ldr.w	ip, [r1]
 80187bc:	fa1f fe82 	uxth.w	lr, r2
 80187c0:	fa1f f38c 	uxth.w	r3, ip
 80187c4:	eba3 030e 	sub.w	r3, r3, lr
 80187c8:	4403      	add	r3, r0
 80187ca:	0c12      	lsrs	r2, r2, #16
 80187cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80187d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80187d4:	b29b      	uxth	r3, r3
 80187d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80187da:	45c1      	cmp	r9, r8
 80187dc:	f841 3b04 	str.w	r3, [r1], #4
 80187e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80187e4:	d2e6      	bcs.n	80187b4 <quorem+0xa4>
 80187e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80187ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80187ee:	b922      	cbnz	r2, 80187fa <quorem+0xea>
 80187f0:	3b04      	subs	r3, #4
 80187f2:	429d      	cmp	r5, r3
 80187f4:	461a      	mov	r2, r3
 80187f6:	d30b      	bcc.n	8018810 <quorem+0x100>
 80187f8:	613c      	str	r4, [r7, #16]
 80187fa:	3601      	adds	r6, #1
 80187fc:	4630      	mov	r0, r6
 80187fe:	b003      	add	sp, #12
 8018800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018804:	6812      	ldr	r2, [r2, #0]
 8018806:	3b04      	subs	r3, #4
 8018808:	2a00      	cmp	r2, #0
 801880a:	d1cb      	bne.n	80187a4 <quorem+0x94>
 801880c:	3c01      	subs	r4, #1
 801880e:	e7c6      	b.n	801879e <quorem+0x8e>
 8018810:	6812      	ldr	r2, [r2, #0]
 8018812:	3b04      	subs	r3, #4
 8018814:	2a00      	cmp	r2, #0
 8018816:	d1ef      	bne.n	80187f8 <quorem+0xe8>
 8018818:	3c01      	subs	r4, #1
 801881a:	e7ea      	b.n	80187f2 <quorem+0xe2>
 801881c:	2000      	movs	r0, #0
 801881e:	e7ee      	b.n	80187fe <quorem+0xee>

08018820 <_dtoa_r>:
 8018820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018824:	69c7      	ldr	r7, [r0, #28]
 8018826:	b097      	sub	sp, #92	@ 0x5c
 8018828:	ed8d 0b04 	vstr	d0, [sp, #16]
 801882c:	ec55 4b10 	vmov	r4, r5, d0
 8018830:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8018832:	9107      	str	r1, [sp, #28]
 8018834:	4681      	mov	r9, r0
 8018836:	920c      	str	r2, [sp, #48]	@ 0x30
 8018838:	9311      	str	r3, [sp, #68]	@ 0x44
 801883a:	b97f      	cbnz	r7, 801885c <_dtoa_r+0x3c>
 801883c:	2010      	movs	r0, #16
 801883e:	f7fe f8c9 	bl	80169d4 <malloc>
 8018842:	4602      	mov	r2, r0
 8018844:	f8c9 001c 	str.w	r0, [r9, #28]
 8018848:	b920      	cbnz	r0, 8018854 <_dtoa_r+0x34>
 801884a:	4ba9      	ldr	r3, [pc, #676]	@ (8018af0 <_dtoa_r+0x2d0>)
 801884c:	21ef      	movs	r1, #239	@ 0xef
 801884e:	48a9      	ldr	r0, [pc, #676]	@ (8018af4 <_dtoa_r+0x2d4>)
 8018850:	f002 fc3e 	bl	801b0d0 <__assert_func>
 8018854:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8018858:	6007      	str	r7, [r0, #0]
 801885a:	60c7      	str	r7, [r0, #12]
 801885c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8018860:	6819      	ldr	r1, [r3, #0]
 8018862:	b159      	cbz	r1, 801887c <_dtoa_r+0x5c>
 8018864:	685a      	ldr	r2, [r3, #4]
 8018866:	604a      	str	r2, [r1, #4]
 8018868:	2301      	movs	r3, #1
 801886a:	4093      	lsls	r3, r2
 801886c:	608b      	str	r3, [r1, #8]
 801886e:	4648      	mov	r0, r9
 8018870:	f001 f97c 	bl	8019b6c <_Bfree>
 8018874:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8018878:	2200      	movs	r2, #0
 801887a:	601a      	str	r2, [r3, #0]
 801887c:	1e2b      	subs	r3, r5, #0
 801887e:	bfb9      	ittee	lt
 8018880:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8018884:	9305      	strlt	r3, [sp, #20]
 8018886:	2300      	movge	r3, #0
 8018888:	6033      	strge	r3, [r6, #0]
 801888a:	9f05      	ldr	r7, [sp, #20]
 801888c:	4b9a      	ldr	r3, [pc, #616]	@ (8018af8 <_dtoa_r+0x2d8>)
 801888e:	bfbc      	itt	lt
 8018890:	2201      	movlt	r2, #1
 8018892:	6032      	strlt	r2, [r6, #0]
 8018894:	43bb      	bics	r3, r7
 8018896:	d112      	bne.n	80188be <_dtoa_r+0x9e>
 8018898:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801889a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801889e:	6013      	str	r3, [r2, #0]
 80188a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80188a4:	4323      	orrs	r3, r4
 80188a6:	f000 855a 	beq.w	801935e <_dtoa_r+0xb3e>
 80188aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80188ac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8018b0c <_dtoa_r+0x2ec>
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	f000 855c 	beq.w	801936e <_dtoa_r+0xb4e>
 80188b6:	f10a 0303 	add.w	r3, sl, #3
 80188ba:	f000 bd56 	b.w	801936a <_dtoa_r+0xb4a>
 80188be:	ed9d 7b04 	vldr	d7, [sp, #16]
 80188c2:	2200      	movs	r2, #0
 80188c4:	ec51 0b17 	vmov	r0, r1, d7
 80188c8:	2300      	movs	r3, #0
 80188ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80188ce:	f7f0 f92b 	bl	8008b28 <__aeabi_dcmpeq>
 80188d2:	4680      	mov	r8, r0
 80188d4:	b158      	cbz	r0, 80188ee <_dtoa_r+0xce>
 80188d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80188d8:	2301      	movs	r3, #1
 80188da:	6013      	str	r3, [r2, #0]
 80188dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80188de:	b113      	cbz	r3, 80188e6 <_dtoa_r+0xc6>
 80188e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80188e2:	4b86      	ldr	r3, [pc, #536]	@ (8018afc <_dtoa_r+0x2dc>)
 80188e4:	6013      	str	r3, [r2, #0]
 80188e6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8018b10 <_dtoa_r+0x2f0>
 80188ea:	f000 bd40 	b.w	801936e <_dtoa_r+0xb4e>
 80188ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80188f2:	aa14      	add	r2, sp, #80	@ 0x50
 80188f4:	a915      	add	r1, sp, #84	@ 0x54
 80188f6:	4648      	mov	r0, r9
 80188f8:	f001 fcd4 	bl	801a2a4 <__d2b>
 80188fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8018900:	9002      	str	r0, [sp, #8]
 8018902:	2e00      	cmp	r6, #0
 8018904:	d078      	beq.n	80189f8 <_dtoa_r+0x1d8>
 8018906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018908:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801890c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018910:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8018914:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8018918:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801891c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8018920:	4619      	mov	r1, r3
 8018922:	2200      	movs	r2, #0
 8018924:	4b76      	ldr	r3, [pc, #472]	@ (8018b00 <_dtoa_r+0x2e0>)
 8018926:	f7ef fcdf 	bl	80082e8 <__aeabi_dsub>
 801892a:	a36b      	add	r3, pc, #428	@ (adr r3, 8018ad8 <_dtoa_r+0x2b8>)
 801892c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018930:	f7ef fe92 	bl	8008658 <__aeabi_dmul>
 8018934:	a36a      	add	r3, pc, #424	@ (adr r3, 8018ae0 <_dtoa_r+0x2c0>)
 8018936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801893a:	f7ef fcd7 	bl	80082ec <__adddf3>
 801893e:	4604      	mov	r4, r0
 8018940:	4630      	mov	r0, r6
 8018942:	460d      	mov	r5, r1
 8018944:	f7ef fe1e 	bl	8008584 <__aeabi_i2d>
 8018948:	a367      	add	r3, pc, #412	@ (adr r3, 8018ae8 <_dtoa_r+0x2c8>)
 801894a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801894e:	f7ef fe83 	bl	8008658 <__aeabi_dmul>
 8018952:	4602      	mov	r2, r0
 8018954:	460b      	mov	r3, r1
 8018956:	4620      	mov	r0, r4
 8018958:	4629      	mov	r1, r5
 801895a:	f7ef fcc7 	bl	80082ec <__adddf3>
 801895e:	4604      	mov	r4, r0
 8018960:	460d      	mov	r5, r1
 8018962:	f7f0 f929 	bl	8008bb8 <__aeabi_d2iz>
 8018966:	2200      	movs	r2, #0
 8018968:	4607      	mov	r7, r0
 801896a:	2300      	movs	r3, #0
 801896c:	4620      	mov	r0, r4
 801896e:	4629      	mov	r1, r5
 8018970:	f7f0 f8e4 	bl	8008b3c <__aeabi_dcmplt>
 8018974:	b140      	cbz	r0, 8018988 <_dtoa_r+0x168>
 8018976:	4638      	mov	r0, r7
 8018978:	f7ef fe04 	bl	8008584 <__aeabi_i2d>
 801897c:	4622      	mov	r2, r4
 801897e:	462b      	mov	r3, r5
 8018980:	f7f0 f8d2 	bl	8008b28 <__aeabi_dcmpeq>
 8018984:	b900      	cbnz	r0, 8018988 <_dtoa_r+0x168>
 8018986:	3f01      	subs	r7, #1
 8018988:	2f16      	cmp	r7, #22
 801898a:	d852      	bhi.n	8018a32 <_dtoa_r+0x212>
 801898c:	4b5d      	ldr	r3, [pc, #372]	@ (8018b04 <_dtoa_r+0x2e4>)
 801898e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8018992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018996:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801899a:	f7f0 f8cf 	bl	8008b3c <__aeabi_dcmplt>
 801899e:	2800      	cmp	r0, #0
 80189a0:	d049      	beq.n	8018a36 <_dtoa_r+0x216>
 80189a2:	3f01      	subs	r7, #1
 80189a4:	2300      	movs	r3, #0
 80189a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80189a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80189aa:	1b9b      	subs	r3, r3, r6
 80189ac:	1e5a      	subs	r2, r3, #1
 80189ae:	bf45      	ittet	mi
 80189b0:	f1c3 0301 	rsbmi	r3, r3, #1
 80189b4:	9300      	strmi	r3, [sp, #0]
 80189b6:	2300      	movpl	r3, #0
 80189b8:	2300      	movmi	r3, #0
 80189ba:	9206      	str	r2, [sp, #24]
 80189bc:	bf54      	ite	pl
 80189be:	9300      	strpl	r3, [sp, #0]
 80189c0:	9306      	strmi	r3, [sp, #24]
 80189c2:	2f00      	cmp	r7, #0
 80189c4:	db39      	blt.n	8018a3a <_dtoa_r+0x21a>
 80189c6:	9b06      	ldr	r3, [sp, #24]
 80189c8:	970d      	str	r7, [sp, #52]	@ 0x34
 80189ca:	443b      	add	r3, r7
 80189cc:	9306      	str	r3, [sp, #24]
 80189ce:	2300      	movs	r3, #0
 80189d0:	9308      	str	r3, [sp, #32]
 80189d2:	9b07      	ldr	r3, [sp, #28]
 80189d4:	2b09      	cmp	r3, #9
 80189d6:	d863      	bhi.n	8018aa0 <_dtoa_r+0x280>
 80189d8:	2b05      	cmp	r3, #5
 80189da:	bfc4      	itt	gt
 80189dc:	3b04      	subgt	r3, #4
 80189de:	9307      	strgt	r3, [sp, #28]
 80189e0:	9b07      	ldr	r3, [sp, #28]
 80189e2:	f1a3 0302 	sub.w	r3, r3, #2
 80189e6:	bfcc      	ite	gt
 80189e8:	2400      	movgt	r4, #0
 80189ea:	2401      	movle	r4, #1
 80189ec:	2b03      	cmp	r3, #3
 80189ee:	d863      	bhi.n	8018ab8 <_dtoa_r+0x298>
 80189f0:	e8df f003 	tbb	[pc, r3]
 80189f4:	2b375452 	.word	0x2b375452
 80189f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80189fc:	441e      	add	r6, r3
 80189fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8018a02:	2b20      	cmp	r3, #32
 8018a04:	bfc1      	itttt	gt
 8018a06:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8018a0a:	409f      	lslgt	r7, r3
 8018a0c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8018a10:	fa24 f303 	lsrgt.w	r3, r4, r3
 8018a14:	bfd6      	itet	le
 8018a16:	f1c3 0320 	rsble	r3, r3, #32
 8018a1a:	ea47 0003 	orrgt.w	r0, r7, r3
 8018a1e:	fa04 f003 	lslle.w	r0, r4, r3
 8018a22:	f7ef fd9f 	bl	8008564 <__aeabi_ui2d>
 8018a26:	2201      	movs	r2, #1
 8018a28:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8018a2c:	3e01      	subs	r6, #1
 8018a2e:	9212      	str	r2, [sp, #72]	@ 0x48
 8018a30:	e776      	b.n	8018920 <_dtoa_r+0x100>
 8018a32:	2301      	movs	r3, #1
 8018a34:	e7b7      	b.n	80189a6 <_dtoa_r+0x186>
 8018a36:	9010      	str	r0, [sp, #64]	@ 0x40
 8018a38:	e7b6      	b.n	80189a8 <_dtoa_r+0x188>
 8018a3a:	9b00      	ldr	r3, [sp, #0]
 8018a3c:	1bdb      	subs	r3, r3, r7
 8018a3e:	9300      	str	r3, [sp, #0]
 8018a40:	427b      	negs	r3, r7
 8018a42:	9308      	str	r3, [sp, #32]
 8018a44:	2300      	movs	r3, #0
 8018a46:	930d      	str	r3, [sp, #52]	@ 0x34
 8018a48:	e7c3      	b.n	80189d2 <_dtoa_r+0x1b2>
 8018a4a:	2301      	movs	r3, #1
 8018a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018a50:	eb07 0b03 	add.w	fp, r7, r3
 8018a54:	f10b 0301 	add.w	r3, fp, #1
 8018a58:	2b01      	cmp	r3, #1
 8018a5a:	9303      	str	r3, [sp, #12]
 8018a5c:	bfb8      	it	lt
 8018a5e:	2301      	movlt	r3, #1
 8018a60:	e006      	b.n	8018a70 <_dtoa_r+0x250>
 8018a62:	2301      	movs	r3, #1
 8018a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	dd28      	ble.n	8018abe <_dtoa_r+0x29e>
 8018a6c:	469b      	mov	fp, r3
 8018a6e:	9303      	str	r3, [sp, #12]
 8018a70:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8018a74:	2100      	movs	r1, #0
 8018a76:	2204      	movs	r2, #4
 8018a78:	f102 0514 	add.w	r5, r2, #20
 8018a7c:	429d      	cmp	r5, r3
 8018a7e:	d926      	bls.n	8018ace <_dtoa_r+0x2ae>
 8018a80:	6041      	str	r1, [r0, #4]
 8018a82:	4648      	mov	r0, r9
 8018a84:	f001 f832 	bl	8019aec <_Balloc>
 8018a88:	4682      	mov	sl, r0
 8018a8a:	2800      	cmp	r0, #0
 8018a8c:	d142      	bne.n	8018b14 <_dtoa_r+0x2f4>
 8018a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8018b08 <_dtoa_r+0x2e8>)
 8018a90:	4602      	mov	r2, r0
 8018a92:	f240 11af 	movw	r1, #431	@ 0x1af
 8018a96:	e6da      	b.n	801884e <_dtoa_r+0x2e>
 8018a98:	2300      	movs	r3, #0
 8018a9a:	e7e3      	b.n	8018a64 <_dtoa_r+0x244>
 8018a9c:	2300      	movs	r3, #0
 8018a9e:	e7d5      	b.n	8018a4c <_dtoa_r+0x22c>
 8018aa0:	2401      	movs	r4, #1
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	9307      	str	r3, [sp, #28]
 8018aa6:	9409      	str	r4, [sp, #36]	@ 0x24
 8018aa8:	f04f 3bff 	mov.w	fp, #4294967295
 8018aac:	2200      	movs	r2, #0
 8018aae:	f8cd b00c 	str.w	fp, [sp, #12]
 8018ab2:	2312      	movs	r3, #18
 8018ab4:	920c      	str	r2, [sp, #48]	@ 0x30
 8018ab6:	e7db      	b.n	8018a70 <_dtoa_r+0x250>
 8018ab8:	2301      	movs	r3, #1
 8018aba:	9309      	str	r3, [sp, #36]	@ 0x24
 8018abc:	e7f4      	b.n	8018aa8 <_dtoa_r+0x288>
 8018abe:	f04f 0b01 	mov.w	fp, #1
 8018ac2:	f8cd b00c 	str.w	fp, [sp, #12]
 8018ac6:	465b      	mov	r3, fp
 8018ac8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8018acc:	e7d0      	b.n	8018a70 <_dtoa_r+0x250>
 8018ace:	3101      	adds	r1, #1
 8018ad0:	0052      	lsls	r2, r2, #1
 8018ad2:	e7d1      	b.n	8018a78 <_dtoa_r+0x258>
 8018ad4:	f3af 8000 	nop.w
 8018ad8:	636f4361 	.word	0x636f4361
 8018adc:	3fd287a7 	.word	0x3fd287a7
 8018ae0:	8b60c8b3 	.word	0x8b60c8b3
 8018ae4:	3fc68a28 	.word	0x3fc68a28
 8018ae8:	509f79fb 	.word	0x509f79fb
 8018aec:	3fd34413 	.word	0x3fd34413
 8018af0:	0801d93d 	.word	0x0801d93d
 8018af4:	0801d954 	.word	0x0801d954
 8018af8:	7ff00000 	.word	0x7ff00000
 8018afc:	0801da9e 	.word	0x0801da9e
 8018b00:	3ff80000 	.word	0x3ff80000
 8018b04:	0801dc68 	.word	0x0801dc68
 8018b08:	0801d9ac 	.word	0x0801d9ac
 8018b0c:	0801d939 	.word	0x0801d939
 8018b10:	0801da9d 	.word	0x0801da9d
 8018b14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8018b18:	6018      	str	r0, [r3, #0]
 8018b1a:	9b03      	ldr	r3, [sp, #12]
 8018b1c:	2b0e      	cmp	r3, #14
 8018b1e:	f200 80a1 	bhi.w	8018c64 <_dtoa_r+0x444>
 8018b22:	2c00      	cmp	r4, #0
 8018b24:	f000 809e 	beq.w	8018c64 <_dtoa_r+0x444>
 8018b28:	2f00      	cmp	r7, #0
 8018b2a:	dd33      	ble.n	8018b94 <_dtoa_r+0x374>
 8018b2c:	4b9c      	ldr	r3, [pc, #624]	@ (8018da0 <_dtoa_r+0x580>)
 8018b2e:	f007 020f 	and.w	r2, r7, #15
 8018b32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018b36:	ed93 7b00 	vldr	d7, [r3]
 8018b3a:	05f8      	lsls	r0, r7, #23
 8018b3c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8018b40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8018b44:	d516      	bpl.n	8018b74 <_dtoa_r+0x354>
 8018b46:	4b97      	ldr	r3, [pc, #604]	@ (8018da4 <_dtoa_r+0x584>)
 8018b48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8018b4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018b50:	f7ef feac 	bl	80088ac <__aeabi_ddiv>
 8018b54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018b58:	f004 040f 	and.w	r4, r4, #15
 8018b5c:	2603      	movs	r6, #3
 8018b5e:	4d91      	ldr	r5, [pc, #580]	@ (8018da4 <_dtoa_r+0x584>)
 8018b60:	b954      	cbnz	r4, 8018b78 <_dtoa_r+0x358>
 8018b62:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8018b66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018b6a:	f7ef fe9f 	bl	80088ac <__aeabi_ddiv>
 8018b6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018b72:	e028      	b.n	8018bc6 <_dtoa_r+0x3a6>
 8018b74:	2602      	movs	r6, #2
 8018b76:	e7f2      	b.n	8018b5e <_dtoa_r+0x33e>
 8018b78:	07e1      	lsls	r1, r4, #31
 8018b7a:	d508      	bpl.n	8018b8e <_dtoa_r+0x36e>
 8018b7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8018b80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018b84:	f7ef fd68 	bl	8008658 <__aeabi_dmul>
 8018b88:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8018b8c:	3601      	adds	r6, #1
 8018b8e:	1064      	asrs	r4, r4, #1
 8018b90:	3508      	adds	r5, #8
 8018b92:	e7e5      	b.n	8018b60 <_dtoa_r+0x340>
 8018b94:	f000 80af 	beq.w	8018cf6 <_dtoa_r+0x4d6>
 8018b98:	427c      	negs	r4, r7
 8018b9a:	4b81      	ldr	r3, [pc, #516]	@ (8018da0 <_dtoa_r+0x580>)
 8018b9c:	4d81      	ldr	r5, [pc, #516]	@ (8018da4 <_dtoa_r+0x584>)
 8018b9e:	f004 020f 	and.w	r2, r4, #15
 8018ba2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018baa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8018bae:	f7ef fd53 	bl	8008658 <__aeabi_dmul>
 8018bb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018bb6:	1124      	asrs	r4, r4, #4
 8018bb8:	2300      	movs	r3, #0
 8018bba:	2602      	movs	r6, #2
 8018bbc:	2c00      	cmp	r4, #0
 8018bbe:	f040 808f 	bne.w	8018ce0 <_dtoa_r+0x4c0>
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d1d3      	bne.n	8018b6e <_dtoa_r+0x34e>
 8018bc6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018bc8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	f000 8094 	beq.w	8018cfa <_dtoa_r+0x4da>
 8018bd2:	4b75      	ldr	r3, [pc, #468]	@ (8018da8 <_dtoa_r+0x588>)
 8018bd4:	2200      	movs	r2, #0
 8018bd6:	4620      	mov	r0, r4
 8018bd8:	4629      	mov	r1, r5
 8018bda:	f7ef ffaf 	bl	8008b3c <__aeabi_dcmplt>
 8018bde:	2800      	cmp	r0, #0
 8018be0:	f000 808b 	beq.w	8018cfa <_dtoa_r+0x4da>
 8018be4:	9b03      	ldr	r3, [sp, #12]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	f000 8087 	beq.w	8018cfa <_dtoa_r+0x4da>
 8018bec:	f1bb 0f00 	cmp.w	fp, #0
 8018bf0:	dd34      	ble.n	8018c5c <_dtoa_r+0x43c>
 8018bf2:	4620      	mov	r0, r4
 8018bf4:	4b6d      	ldr	r3, [pc, #436]	@ (8018dac <_dtoa_r+0x58c>)
 8018bf6:	2200      	movs	r2, #0
 8018bf8:	4629      	mov	r1, r5
 8018bfa:	f7ef fd2d 	bl	8008658 <__aeabi_dmul>
 8018bfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018c02:	f107 38ff 	add.w	r8, r7, #4294967295
 8018c06:	3601      	adds	r6, #1
 8018c08:	465c      	mov	r4, fp
 8018c0a:	4630      	mov	r0, r6
 8018c0c:	f7ef fcba 	bl	8008584 <__aeabi_i2d>
 8018c10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018c14:	f7ef fd20 	bl	8008658 <__aeabi_dmul>
 8018c18:	4b65      	ldr	r3, [pc, #404]	@ (8018db0 <_dtoa_r+0x590>)
 8018c1a:	2200      	movs	r2, #0
 8018c1c:	f7ef fb66 	bl	80082ec <__adddf3>
 8018c20:	4605      	mov	r5, r0
 8018c22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8018c26:	2c00      	cmp	r4, #0
 8018c28:	d16a      	bne.n	8018d00 <_dtoa_r+0x4e0>
 8018c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018c2e:	4b61      	ldr	r3, [pc, #388]	@ (8018db4 <_dtoa_r+0x594>)
 8018c30:	2200      	movs	r2, #0
 8018c32:	f7ef fb59 	bl	80082e8 <__aeabi_dsub>
 8018c36:	4602      	mov	r2, r0
 8018c38:	460b      	mov	r3, r1
 8018c3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018c3e:	462a      	mov	r2, r5
 8018c40:	4633      	mov	r3, r6
 8018c42:	f7ef ff99 	bl	8008b78 <__aeabi_dcmpgt>
 8018c46:	2800      	cmp	r0, #0
 8018c48:	f040 8298 	bne.w	801917c <_dtoa_r+0x95c>
 8018c4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018c50:	462a      	mov	r2, r5
 8018c52:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8018c56:	f7ef ff71 	bl	8008b3c <__aeabi_dcmplt>
 8018c5a:	bb38      	cbnz	r0, 8018cac <_dtoa_r+0x48c>
 8018c5c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8018c60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8018c64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	f2c0 8157 	blt.w	8018f1a <_dtoa_r+0x6fa>
 8018c6c:	2f0e      	cmp	r7, #14
 8018c6e:	f300 8154 	bgt.w	8018f1a <_dtoa_r+0x6fa>
 8018c72:	4b4b      	ldr	r3, [pc, #300]	@ (8018da0 <_dtoa_r+0x580>)
 8018c74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8018c78:	ed93 7b00 	vldr	d7, [r3]
 8018c7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	ed8d 7b00 	vstr	d7, [sp]
 8018c84:	f280 80e5 	bge.w	8018e52 <_dtoa_r+0x632>
 8018c88:	9b03      	ldr	r3, [sp, #12]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	f300 80e1 	bgt.w	8018e52 <_dtoa_r+0x632>
 8018c90:	d10c      	bne.n	8018cac <_dtoa_r+0x48c>
 8018c92:	4b48      	ldr	r3, [pc, #288]	@ (8018db4 <_dtoa_r+0x594>)
 8018c94:	2200      	movs	r2, #0
 8018c96:	ec51 0b17 	vmov	r0, r1, d7
 8018c9a:	f7ef fcdd 	bl	8008658 <__aeabi_dmul>
 8018c9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018ca2:	f7ef ff5f 	bl	8008b64 <__aeabi_dcmpge>
 8018ca6:	2800      	cmp	r0, #0
 8018ca8:	f000 8266 	beq.w	8019178 <_dtoa_r+0x958>
 8018cac:	2400      	movs	r4, #0
 8018cae:	4625      	mov	r5, r4
 8018cb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018cb2:	4656      	mov	r6, sl
 8018cb4:	ea6f 0803 	mvn.w	r8, r3
 8018cb8:	2700      	movs	r7, #0
 8018cba:	4621      	mov	r1, r4
 8018cbc:	4648      	mov	r0, r9
 8018cbe:	f000 ff55 	bl	8019b6c <_Bfree>
 8018cc2:	2d00      	cmp	r5, #0
 8018cc4:	f000 80bd 	beq.w	8018e42 <_dtoa_r+0x622>
 8018cc8:	b12f      	cbz	r7, 8018cd6 <_dtoa_r+0x4b6>
 8018cca:	42af      	cmp	r7, r5
 8018ccc:	d003      	beq.n	8018cd6 <_dtoa_r+0x4b6>
 8018cce:	4639      	mov	r1, r7
 8018cd0:	4648      	mov	r0, r9
 8018cd2:	f000 ff4b 	bl	8019b6c <_Bfree>
 8018cd6:	4629      	mov	r1, r5
 8018cd8:	4648      	mov	r0, r9
 8018cda:	f000 ff47 	bl	8019b6c <_Bfree>
 8018cde:	e0b0      	b.n	8018e42 <_dtoa_r+0x622>
 8018ce0:	07e2      	lsls	r2, r4, #31
 8018ce2:	d505      	bpl.n	8018cf0 <_dtoa_r+0x4d0>
 8018ce4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018ce8:	f7ef fcb6 	bl	8008658 <__aeabi_dmul>
 8018cec:	3601      	adds	r6, #1
 8018cee:	2301      	movs	r3, #1
 8018cf0:	1064      	asrs	r4, r4, #1
 8018cf2:	3508      	adds	r5, #8
 8018cf4:	e762      	b.n	8018bbc <_dtoa_r+0x39c>
 8018cf6:	2602      	movs	r6, #2
 8018cf8:	e765      	b.n	8018bc6 <_dtoa_r+0x3a6>
 8018cfa:	9c03      	ldr	r4, [sp, #12]
 8018cfc:	46b8      	mov	r8, r7
 8018cfe:	e784      	b.n	8018c0a <_dtoa_r+0x3ea>
 8018d00:	4b27      	ldr	r3, [pc, #156]	@ (8018da0 <_dtoa_r+0x580>)
 8018d02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018d04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018d08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018d0c:	4454      	add	r4, sl
 8018d0e:	2900      	cmp	r1, #0
 8018d10:	d054      	beq.n	8018dbc <_dtoa_r+0x59c>
 8018d12:	4929      	ldr	r1, [pc, #164]	@ (8018db8 <_dtoa_r+0x598>)
 8018d14:	2000      	movs	r0, #0
 8018d16:	f7ef fdc9 	bl	80088ac <__aeabi_ddiv>
 8018d1a:	4633      	mov	r3, r6
 8018d1c:	462a      	mov	r2, r5
 8018d1e:	f7ef fae3 	bl	80082e8 <__aeabi_dsub>
 8018d22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8018d26:	4656      	mov	r6, sl
 8018d28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018d2c:	f7ef ff44 	bl	8008bb8 <__aeabi_d2iz>
 8018d30:	4605      	mov	r5, r0
 8018d32:	f7ef fc27 	bl	8008584 <__aeabi_i2d>
 8018d36:	4602      	mov	r2, r0
 8018d38:	460b      	mov	r3, r1
 8018d3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018d3e:	f7ef fad3 	bl	80082e8 <__aeabi_dsub>
 8018d42:	3530      	adds	r5, #48	@ 0x30
 8018d44:	4602      	mov	r2, r0
 8018d46:	460b      	mov	r3, r1
 8018d48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018d4c:	f806 5b01 	strb.w	r5, [r6], #1
 8018d50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8018d54:	f7ef fef2 	bl	8008b3c <__aeabi_dcmplt>
 8018d58:	2800      	cmp	r0, #0
 8018d5a:	d172      	bne.n	8018e42 <_dtoa_r+0x622>
 8018d5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018d60:	4911      	ldr	r1, [pc, #68]	@ (8018da8 <_dtoa_r+0x588>)
 8018d62:	2000      	movs	r0, #0
 8018d64:	f7ef fac0 	bl	80082e8 <__aeabi_dsub>
 8018d68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8018d6c:	f7ef fee6 	bl	8008b3c <__aeabi_dcmplt>
 8018d70:	2800      	cmp	r0, #0
 8018d72:	f040 80b4 	bne.w	8018ede <_dtoa_r+0x6be>
 8018d76:	42a6      	cmp	r6, r4
 8018d78:	f43f af70 	beq.w	8018c5c <_dtoa_r+0x43c>
 8018d7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8018d80:	4b0a      	ldr	r3, [pc, #40]	@ (8018dac <_dtoa_r+0x58c>)
 8018d82:	2200      	movs	r2, #0
 8018d84:	f7ef fc68 	bl	8008658 <__aeabi_dmul>
 8018d88:	4b08      	ldr	r3, [pc, #32]	@ (8018dac <_dtoa_r+0x58c>)
 8018d8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8018d8e:	2200      	movs	r2, #0
 8018d90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018d94:	f7ef fc60 	bl	8008658 <__aeabi_dmul>
 8018d98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018d9c:	e7c4      	b.n	8018d28 <_dtoa_r+0x508>
 8018d9e:	bf00      	nop
 8018da0:	0801dc68 	.word	0x0801dc68
 8018da4:	0801dc40 	.word	0x0801dc40
 8018da8:	3ff00000 	.word	0x3ff00000
 8018dac:	40240000 	.word	0x40240000
 8018db0:	401c0000 	.word	0x401c0000
 8018db4:	40140000 	.word	0x40140000
 8018db8:	3fe00000 	.word	0x3fe00000
 8018dbc:	4631      	mov	r1, r6
 8018dbe:	4628      	mov	r0, r5
 8018dc0:	f7ef fc4a 	bl	8008658 <__aeabi_dmul>
 8018dc4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8018dc8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8018dca:	4656      	mov	r6, sl
 8018dcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018dd0:	f7ef fef2 	bl	8008bb8 <__aeabi_d2iz>
 8018dd4:	4605      	mov	r5, r0
 8018dd6:	f7ef fbd5 	bl	8008584 <__aeabi_i2d>
 8018dda:	4602      	mov	r2, r0
 8018ddc:	460b      	mov	r3, r1
 8018dde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018de2:	f7ef fa81 	bl	80082e8 <__aeabi_dsub>
 8018de6:	3530      	adds	r5, #48	@ 0x30
 8018de8:	f806 5b01 	strb.w	r5, [r6], #1
 8018dec:	4602      	mov	r2, r0
 8018dee:	460b      	mov	r3, r1
 8018df0:	42a6      	cmp	r6, r4
 8018df2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018df6:	f04f 0200 	mov.w	r2, #0
 8018dfa:	d124      	bne.n	8018e46 <_dtoa_r+0x626>
 8018dfc:	4baf      	ldr	r3, [pc, #700]	@ (80190bc <_dtoa_r+0x89c>)
 8018dfe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8018e02:	f7ef fa73 	bl	80082ec <__adddf3>
 8018e06:	4602      	mov	r2, r0
 8018e08:	460b      	mov	r3, r1
 8018e0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018e0e:	f7ef feb3 	bl	8008b78 <__aeabi_dcmpgt>
 8018e12:	2800      	cmp	r0, #0
 8018e14:	d163      	bne.n	8018ede <_dtoa_r+0x6be>
 8018e16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8018e1a:	49a8      	ldr	r1, [pc, #672]	@ (80190bc <_dtoa_r+0x89c>)
 8018e1c:	2000      	movs	r0, #0
 8018e1e:	f7ef fa63 	bl	80082e8 <__aeabi_dsub>
 8018e22:	4602      	mov	r2, r0
 8018e24:	460b      	mov	r3, r1
 8018e26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018e2a:	f7ef fe87 	bl	8008b3c <__aeabi_dcmplt>
 8018e2e:	2800      	cmp	r0, #0
 8018e30:	f43f af14 	beq.w	8018c5c <_dtoa_r+0x43c>
 8018e34:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8018e36:	1e73      	subs	r3, r6, #1
 8018e38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018e3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018e3e:	2b30      	cmp	r3, #48	@ 0x30
 8018e40:	d0f8      	beq.n	8018e34 <_dtoa_r+0x614>
 8018e42:	4647      	mov	r7, r8
 8018e44:	e03b      	b.n	8018ebe <_dtoa_r+0x69e>
 8018e46:	4b9e      	ldr	r3, [pc, #632]	@ (80190c0 <_dtoa_r+0x8a0>)
 8018e48:	f7ef fc06 	bl	8008658 <__aeabi_dmul>
 8018e4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018e50:	e7bc      	b.n	8018dcc <_dtoa_r+0x5ac>
 8018e52:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8018e56:	4656      	mov	r6, sl
 8018e58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018e5c:	4620      	mov	r0, r4
 8018e5e:	4629      	mov	r1, r5
 8018e60:	f7ef fd24 	bl	80088ac <__aeabi_ddiv>
 8018e64:	f7ef fea8 	bl	8008bb8 <__aeabi_d2iz>
 8018e68:	4680      	mov	r8, r0
 8018e6a:	f7ef fb8b 	bl	8008584 <__aeabi_i2d>
 8018e6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018e72:	f7ef fbf1 	bl	8008658 <__aeabi_dmul>
 8018e76:	4602      	mov	r2, r0
 8018e78:	460b      	mov	r3, r1
 8018e7a:	4620      	mov	r0, r4
 8018e7c:	4629      	mov	r1, r5
 8018e7e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8018e82:	f7ef fa31 	bl	80082e8 <__aeabi_dsub>
 8018e86:	f806 4b01 	strb.w	r4, [r6], #1
 8018e8a:	9d03      	ldr	r5, [sp, #12]
 8018e8c:	eba6 040a 	sub.w	r4, r6, sl
 8018e90:	42a5      	cmp	r5, r4
 8018e92:	4602      	mov	r2, r0
 8018e94:	460b      	mov	r3, r1
 8018e96:	d133      	bne.n	8018f00 <_dtoa_r+0x6e0>
 8018e98:	f7ef fa28 	bl	80082ec <__adddf3>
 8018e9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018ea0:	4604      	mov	r4, r0
 8018ea2:	460d      	mov	r5, r1
 8018ea4:	f7ef fe68 	bl	8008b78 <__aeabi_dcmpgt>
 8018ea8:	b9c0      	cbnz	r0, 8018edc <_dtoa_r+0x6bc>
 8018eaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018eae:	4620      	mov	r0, r4
 8018eb0:	4629      	mov	r1, r5
 8018eb2:	f7ef fe39 	bl	8008b28 <__aeabi_dcmpeq>
 8018eb6:	b110      	cbz	r0, 8018ebe <_dtoa_r+0x69e>
 8018eb8:	f018 0f01 	tst.w	r8, #1
 8018ebc:	d10e      	bne.n	8018edc <_dtoa_r+0x6bc>
 8018ebe:	9902      	ldr	r1, [sp, #8]
 8018ec0:	4648      	mov	r0, r9
 8018ec2:	f000 fe53 	bl	8019b6c <_Bfree>
 8018ec6:	2300      	movs	r3, #0
 8018ec8:	7033      	strb	r3, [r6, #0]
 8018eca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018ecc:	3701      	adds	r7, #1
 8018ece:	601f      	str	r7, [r3, #0]
 8018ed0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	f000 824b 	beq.w	801936e <_dtoa_r+0xb4e>
 8018ed8:	601e      	str	r6, [r3, #0]
 8018eda:	e248      	b.n	801936e <_dtoa_r+0xb4e>
 8018edc:	46b8      	mov	r8, r7
 8018ede:	4633      	mov	r3, r6
 8018ee0:	461e      	mov	r6, r3
 8018ee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018ee6:	2a39      	cmp	r2, #57	@ 0x39
 8018ee8:	d106      	bne.n	8018ef8 <_dtoa_r+0x6d8>
 8018eea:	459a      	cmp	sl, r3
 8018eec:	d1f8      	bne.n	8018ee0 <_dtoa_r+0x6c0>
 8018eee:	2230      	movs	r2, #48	@ 0x30
 8018ef0:	f108 0801 	add.w	r8, r8, #1
 8018ef4:	f88a 2000 	strb.w	r2, [sl]
 8018ef8:	781a      	ldrb	r2, [r3, #0]
 8018efa:	3201      	adds	r2, #1
 8018efc:	701a      	strb	r2, [r3, #0]
 8018efe:	e7a0      	b.n	8018e42 <_dtoa_r+0x622>
 8018f00:	4b6f      	ldr	r3, [pc, #444]	@ (80190c0 <_dtoa_r+0x8a0>)
 8018f02:	2200      	movs	r2, #0
 8018f04:	f7ef fba8 	bl	8008658 <__aeabi_dmul>
 8018f08:	2200      	movs	r2, #0
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	4604      	mov	r4, r0
 8018f0e:	460d      	mov	r5, r1
 8018f10:	f7ef fe0a 	bl	8008b28 <__aeabi_dcmpeq>
 8018f14:	2800      	cmp	r0, #0
 8018f16:	d09f      	beq.n	8018e58 <_dtoa_r+0x638>
 8018f18:	e7d1      	b.n	8018ebe <_dtoa_r+0x69e>
 8018f1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018f1c:	2a00      	cmp	r2, #0
 8018f1e:	f000 80ea 	beq.w	80190f6 <_dtoa_r+0x8d6>
 8018f22:	9a07      	ldr	r2, [sp, #28]
 8018f24:	2a01      	cmp	r2, #1
 8018f26:	f300 80cd 	bgt.w	80190c4 <_dtoa_r+0x8a4>
 8018f2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018f2c:	2a00      	cmp	r2, #0
 8018f2e:	f000 80c1 	beq.w	80190b4 <_dtoa_r+0x894>
 8018f32:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8018f36:	9c08      	ldr	r4, [sp, #32]
 8018f38:	9e00      	ldr	r6, [sp, #0]
 8018f3a:	9a00      	ldr	r2, [sp, #0]
 8018f3c:	441a      	add	r2, r3
 8018f3e:	9200      	str	r2, [sp, #0]
 8018f40:	9a06      	ldr	r2, [sp, #24]
 8018f42:	2101      	movs	r1, #1
 8018f44:	441a      	add	r2, r3
 8018f46:	4648      	mov	r0, r9
 8018f48:	9206      	str	r2, [sp, #24]
 8018f4a:	f000 ff0d 	bl	8019d68 <__i2b>
 8018f4e:	4605      	mov	r5, r0
 8018f50:	b166      	cbz	r6, 8018f6c <_dtoa_r+0x74c>
 8018f52:	9b06      	ldr	r3, [sp, #24]
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	dd09      	ble.n	8018f6c <_dtoa_r+0x74c>
 8018f58:	42b3      	cmp	r3, r6
 8018f5a:	9a00      	ldr	r2, [sp, #0]
 8018f5c:	bfa8      	it	ge
 8018f5e:	4633      	movge	r3, r6
 8018f60:	1ad2      	subs	r2, r2, r3
 8018f62:	9200      	str	r2, [sp, #0]
 8018f64:	9a06      	ldr	r2, [sp, #24]
 8018f66:	1af6      	subs	r6, r6, r3
 8018f68:	1ad3      	subs	r3, r2, r3
 8018f6a:	9306      	str	r3, [sp, #24]
 8018f6c:	9b08      	ldr	r3, [sp, #32]
 8018f6e:	b30b      	cbz	r3, 8018fb4 <_dtoa_r+0x794>
 8018f70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	f000 80c6 	beq.w	8019104 <_dtoa_r+0x8e4>
 8018f78:	2c00      	cmp	r4, #0
 8018f7a:	f000 80c0 	beq.w	80190fe <_dtoa_r+0x8de>
 8018f7e:	4629      	mov	r1, r5
 8018f80:	4622      	mov	r2, r4
 8018f82:	4648      	mov	r0, r9
 8018f84:	f000 ffa8 	bl	8019ed8 <__pow5mult>
 8018f88:	9a02      	ldr	r2, [sp, #8]
 8018f8a:	4601      	mov	r1, r0
 8018f8c:	4605      	mov	r5, r0
 8018f8e:	4648      	mov	r0, r9
 8018f90:	f000 ff00 	bl	8019d94 <__multiply>
 8018f94:	9902      	ldr	r1, [sp, #8]
 8018f96:	4680      	mov	r8, r0
 8018f98:	4648      	mov	r0, r9
 8018f9a:	f000 fde7 	bl	8019b6c <_Bfree>
 8018f9e:	9b08      	ldr	r3, [sp, #32]
 8018fa0:	1b1b      	subs	r3, r3, r4
 8018fa2:	9308      	str	r3, [sp, #32]
 8018fa4:	f000 80b1 	beq.w	801910a <_dtoa_r+0x8ea>
 8018fa8:	9a08      	ldr	r2, [sp, #32]
 8018faa:	4641      	mov	r1, r8
 8018fac:	4648      	mov	r0, r9
 8018fae:	f000 ff93 	bl	8019ed8 <__pow5mult>
 8018fb2:	9002      	str	r0, [sp, #8]
 8018fb4:	2101      	movs	r1, #1
 8018fb6:	4648      	mov	r0, r9
 8018fb8:	f000 fed6 	bl	8019d68 <__i2b>
 8018fbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018fbe:	4604      	mov	r4, r0
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	f000 81d8 	beq.w	8019376 <_dtoa_r+0xb56>
 8018fc6:	461a      	mov	r2, r3
 8018fc8:	4601      	mov	r1, r0
 8018fca:	4648      	mov	r0, r9
 8018fcc:	f000 ff84 	bl	8019ed8 <__pow5mult>
 8018fd0:	9b07      	ldr	r3, [sp, #28]
 8018fd2:	2b01      	cmp	r3, #1
 8018fd4:	4604      	mov	r4, r0
 8018fd6:	f300 809f 	bgt.w	8019118 <_dtoa_r+0x8f8>
 8018fda:	9b04      	ldr	r3, [sp, #16]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	f040 8097 	bne.w	8019110 <_dtoa_r+0x8f0>
 8018fe2:	9b05      	ldr	r3, [sp, #20]
 8018fe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	f040 8093 	bne.w	8019114 <_dtoa_r+0x8f4>
 8018fee:	9b05      	ldr	r3, [sp, #20]
 8018ff0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018ff4:	0d1b      	lsrs	r3, r3, #20
 8018ff6:	051b      	lsls	r3, r3, #20
 8018ff8:	b133      	cbz	r3, 8019008 <_dtoa_r+0x7e8>
 8018ffa:	9b00      	ldr	r3, [sp, #0]
 8018ffc:	3301      	adds	r3, #1
 8018ffe:	9300      	str	r3, [sp, #0]
 8019000:	9b06      	ldr	r3, [sp, #24]
 8019002:	3301      	adds	r3, #1
 8019004:	9306      	str	r3, [sp, #24]
 8019006:	2301      	movs	r3, #1
 8019008:	9308      	str	r3, [sp, #32]
 801900a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801900c:	2b00      	cmp	r3, #0
 801900e:	f000 81b8 	beq.w	8019382 <_dtoa_r+0xb62>
 8019012:	6923      	ldr	r3, [r4, #16]
 8019014:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019018:	6918      	ldr	r0, [r3, #16]
 801901a:	f000 fe59 	bl	8019cd0 <__hi0bits>
 801901e:	f1c0 0020 	rsb	r0, r0, #32
 8019022:	9b06      	ldr	r3, [sp, #24]
 8019024:	4418      	add	r0, r3
 8019026:	f010 001f 	ands.w	r0, r0, #31
 801902a:	f000 8082 	beq.w	8019132 <_dtoa_r+0x912>
 801902e:	f1c0 0320 	rsb	r3, r0, #32
 8019032:	2b04      	cmp	r3, #4
 8019034:	dd73      	ble.n	801911e <_dtoa_r+0x8fe>
 8019036:	9b00      	ldr	r3, [sp, #0]
 8019038:	f1c0 001c 	rsb	r0, r0, #28
 801903c:	4403      	add	r3, r0
 801903e:	9300      	str	r3, [sp, #0]
 8019040:	9b06      	ldr	r3, [sp, #24]
 8019042:	4403      	add	r3, r0
 8019044:	4406      	add	r6, r0
 8019046:	9306      	str	r3, [sp, #24]
 8019048:	9b00      	ldr	r3, [sp, #0]
 801904a:	2b00      	cmp	r3, #0
 801904c:	dd05      	ble.n	801905a <_dtoa_r+0x83a>
 801904e:	9902      	ldr	r1, [sp, #8]
 8019050:	461a      	mov	r2, r3
 8019052:	4648      	mov	r0, r9
 8019054:	f000 ff9a 	bl	8019f8c <__lshift>
 8019058:	9002      	str	r0, [sp, #8]
 801905a:	9b06      	ldr	r3, [sp, #24]
 801905c:	2b00      	cmp	r3, #0
 801905e:	dd05      	ble.n	801906c <_dtoa_r+0x84c>
 8019060:	4621      	mov	r1, r4
 8019062:	461a      	mov	r2, r3
 8019064:	4648      	mov	r0, r9
 8019066:	f000 ff91 	bl	8019f8c <__lshift>
 801906a:	4604      	mov	r4, r0
 801906c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801906e:	2b00      	cmp	r3, #0
 8019070:	d061      	beq.n	8019136 <_dtoa_r+0x916>
 8019072:	9802      	ldr	r0, [sp, #8]
 8019074:	4621      	mov	r1, r4
 8019076:	f000 fff5 	bl	801a064 <__mcmp>
 801907a:	2800      	cmp	r0, #0
 801907c:	da5b      	bge.n	8019136 <_dtoa_r+0x916>
 801907e:	2300      	movs	r3, #0
 8019080:	9902      	ldr	r1, [sp, #8]
 8019082:	220a      	movs	r2, #10
 8019084:	4648      	mov	r0, r9
 8019086:	f000 fd93 	bl	8019bb0 <__multadd>
 801908a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801908c:	9002      	str	r0, [sp, #8]
 801908e:	f107 38ff 	add.w	r8, r7, #4294967295
 8019092:	2b00      	cmp	r3, #0
 8019094:	f000 8177 	beq.w	8019386 <_dtoa_r+0xb66>
 8019098:	4629      	mov	r1, r5
 801909a:	2300      	movs	r3, #0
 801909c:	220a      	movs	r2, #10
 801909e:	4648      	mov	r0, r9
 80190a0:	f000 fd86 	bl	8019bb0 <__multadd>
 80190a4:	f1bb 0f00 	cmp.w	fp, #0
 80190a8:	4605      	mov	r5, r0
 80190aa:	dc6f      	bgt.n	801918c <_dtoa_r+0x96c>
 80190ac:	9b07      	ldr	r3, [sp, #28]
 80190ae:	2b02      	cmp	r3, #2
 80190b0:	dc49      	bgt.n	8019146 <_dtoa_r+0x926>
 80190b2:	e06b      	b.n	801918c <_dtoa_r+0x96c>
 80190b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80190b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80190ba:	e73c      	b.n	8018f36 <_dtoa_r+0x716>
 80190bc:	3fe00000 	.word	0x3fe00000
 80190c0:	40240000 	.word	0x40240000
 80190c4:	9b03      	ldr	r3, [sp, #12]
 80190c6:	1e5c      	subs	r4, r3, #1
 80190c8:	9b08      	ldr	r3, [sp, #32]
 80190ca:	42a3      	cmp	r3, r4
 80190cc:	db09      	blt.n	80190e2 <_dtoa_r+0x8c2>
 80190ce:	1b1c      	subs	r4, r3, r4
 80190d0:	9b03      	ldr	r3, [sp, #12]
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	f6bf af30 	bge.w	8018f38 <_dtoa_r+0x718>
 80190d8:	9b00      	ldr	r3, [sp, #0]
 80190da:	9a03      	ldr	r2, [sp, #12]
 80190dc:	1a9e      	subs	r6, r3, r2
 80190de:	2300      	movs	r3, #0
 80190e0:	e72b      	b.n	8018f3a <_dtoa_r+0x71a>
 80190e2:	9b08      	ldr	r3, [sp, #32]
 80190e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80190e6:	9408      	str	r4, [sp, #32]
 80190e8:	1ae3      	subs	r3, r4, r3
 80190ea:	441a      	add	r2, r3
 80190ec:	9e00      	ldr	r6, [sp, #0]
 80190ee:	9b03      	ldr	r3, [sp, #12]
 80190f0:	920d      	str	r2, [sp, #52]	@ 0x34
 80190f2:	2400      	movs	r4, #0
 80190f4:	e721      	b.n	8018f3a <_dtoa_r+0x71a>
 80190f6:	9c08      	ldr	r4, [sp, #32]
 80190f8:	9e00      	ldr	r6, [sp, #0]
 80190fa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80190fc:	e728      	b.n	8018f50 <_dtoa_r+0x730>
 80190fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8019102:	e751      	b.n	8018fa8 <_dtoa_r+0x788>
 8019104:	9a08      	ldr	r2, [sp, #32]
 8019106:	9902      	ldr	r1, [sp, #8]
 8019108:	e750      	b.n	8018fac <_dtoa_r+0x78c>
 801910a:	f8cd 8008 	str.w	r8, [sp, #8]
 801910e:	e751      	b.n	8018fb4 <_dtoa_r+0x794>
 8019110:	2300      	movs	r3, #0
 8019112:	e779      	b.n	8019008 <_dtoa_r+0x7e8>
 8019114:	9b04      	ldr	r3, [sp, #16]
 8019116:	e777      	b.n	8019008 <_dtoa_r+0x7e8>
 8019118:	2300      	movs	r3, #0
 801911a:	9308      	str	r3, [sp, #32]
 801911c:	e779      	b.n	8019012 <_dtoa_r+0x7f2>
 801911e:	d093      	beq.n	8019048 <_dtoa_r+0x828>
 8019120:	9a00      	ldr	r2, [sp, #0]
 8019122:	331c      	adds	r3, #28
 8019124:	441a      	add	r2, r3
 8019126:	9200      	str	r2, [sp, #0]
 8019128:	9a06      	ldr	r2, [sp, #24]
 801912a:	441a      	add	r2, r3
 801912c:	441e      	add	r6, r3
 801912e:	9206      	str	r2, [sp, #24]
 8019130:	e78a      	b.n	8019048 <_dtoa_r+0x828>
 8019132:	4603      	mov	r3, r0
 8019134:	e7f4      	b.n	8019120 <_dtoa_r+0x900>
 8019136:	9b03      	ldr	r3, [sp, #12]
 8019138:	2b00      	cmp	r3, #0
 801913a:	46b8      	mov	r8, r7
 801913c:	dc20      	bgt.n	8019180 <_dtoa_r+0x960>
 801913e:	469b      	mov	fp, r3
 8019140:	9b07      	ldr	r3, [sp, #28]
 8019142:	2b02      	cmp	r3, #2
 8019144:	dd1e      	ble.n	8019184 <_dtoa_r+0x964>
 8019146:	f1bb 0f00 	cmp.w	fp, #0
 801914a:	f47f adb1 	bne.w	8018cb0 <_dtoa_r+0x490>
 801914e:	4621      	mov	r1, r4
 8019150:	465b      	mov	r3, fp
 8019152:	2205      	movs	r2, #5
 8019154:	4648      	mov	r0, r9
 8019156:	f000 fd2b 	bl	8019bb0 <__multadd>
 801915a:	4601      	mov	r1, r0
 801915c:	4604      	mov	r4, r0
 801915e:	9802      	ldr	r0, [sp, #8]
 8019160:	f000 ff80 	bl	801a064 <__mcmp>
 8019164:	2800      	cmp	r0, #0
 8019166:	f77f ada3 	ble.w	8018cb0 <_dtoa_r+0x490>
 801916a:	4656      	mov	r6, sl
 801916c:	2331      	movs	r3, #49	@ 0x31
 801916e:	f806 3b01 	strb.w	r3, [r6], #1
 8019172:	f108 0801 	add.w	r8, r8, #1
 8019176:	e59f      	b.n	8018cb8 <_dtoa_r+0x498>
 8019178:	9c03      	ldr	r4, [sp, #12]
 801917a:	46b8      	mov	r8, r7
 801917c:	4625      	mov	r5, r4
 801917e:	e7f4      	b.n	801916a <_dtoa_r+0x94a>
 8019180:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8019184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019186:	2b00      	cmp	r3, #0
 8019188:	f000 8101 	beq.w	801938e <_dtoa_r+0xb6e>
 801918c:	2e00      	cmp	r6, #0
 801918e:	dd05      	ble.n	801919c <_dtoa_r+0x97c>
 8019190:	4629      	mov	r1, r5
 8019192:	4632      	mov	r2, r6
 8019194:	4648      	mov	r0, r9
 8019196:	f000 fef9 	bl	8019f8c <__lshift>
 801919a:	4605      	mov	r5, r0
 801919c:	9b08      	ldr	r3, [sp, #32]
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d05c      	beq.n	801925c <_dtoa_r+0xa3c>
 80191a2:	6869      	ldr	r1, [r5, #4]
 80191a4:	4648      	mov	r0, r9
 80191a6:	f000 fca1 	bl	8019aec <_Balloc>
 80191aa:	4606      	mov	r6, r0
 80191ac:	b928      	cbnz	r0, 80191ba <_dtoa_r+0x99a>
 80191ae:	4b82      	ldr	r3, [pc, #520]	@ (80193b8 <_dtoa_r+0xb98>)
 80191b0:	4602      	mov	r2, r0
 80191b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80191b6:	f7ff bb4a 	b.w	801884e <_dtoa_r+0x2e>
 80191ba:	692a      	ldr	r2, [r5, #16]
 80191bc:	3202      	adds	r2, #2
 80191be:	0092      	lsls	r2, r2, #2
 80191c0:	f105 010c 	add.w	r1, r5, #12
 80191c4:	300c      	adds	r0, #12
 80191c6:	f7ff fa8c 	bl	80186e2 <memcpy>
 80191ca:	2201      	movs	r2, #1
 80191cc:	4631      	mov	r1, r6
 80191ce:	4648      	mov	r0, r9
 80191d0:	f000 fedc 	bl	8019f8c <__lshift>
 80191d4:	f10a 0301 	add.w	r3, sl, #1
 80191d8:	9300      	str	r3, [sp, #0]
 80191da:	eb0a 030b 	add.w	r3, sl, fp
 80191de:	9308      	str	r3, [sp, #32]
 80191e0:	9b04      	ldr	r3, [sp, #16]
 80191e2:	f003 0301 	and.w	r3, r3, #1
 80191e6:	462f      	mov	r7, r5
 80191e8:	9306      	str	r3, [sp, #24]
 80191ea:	4605      	mov	r5, r0
 80191ec:	9b00      	ldr	r3, [sp, #0]
 80191ee:	9802      	ldr	r0, [sp, #8]
 80191f0:	4621      	mov	r1, r4
 80191f2:	f103 3bff 	add.w	fp, r3, #4294967295
 80191f6:	f7ff fa8b 	bl	8018710 <quorem>
 80191fa:	4603      	mov	r3, r0
 80191fc:	3330      	adds	r3, #48	@ 0x30
 80191fe:	9003      	str	r0, [sp, #12]
 8019200:	4639      	mov	r1, r7
 8019202:	9802      	ldr	r0, [sp, #8]
 8019204:	9309      	str	r3, [sp, #36]	@ 0x24
 8019206:	f000 ff2d 	bl	801a064 <__mcmp>
 801920a:	462a      	mov	r2, r5
 801920c:	9004      	str	r0, [sp, #16]
 801920e:	4621      	mov	r1, r4
 8019210:	4648      	mov	r0, r9
 8019212:	f000 ff43 	bl	801a09c <__mdiff>
 8019216:	68c2      	ldr	r2, [r0, #12]
 8019218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801921a:	4606      	mov	r6, r0
 801921c:	bb02      	cbnz	r2, 8019260 <_dtoa_r+0xa40>
 801921e:	4601      	mov	r1, r0
 8019220:	9802      	ldr	r0, [sp, #8]
 8019222:	f000 ff1f 	bl	801a064 <__mcmp>
 8019226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019228:	4602      	mov	r2, r0
 801922a:	4631      	mov	r1, r6
 801922c:	4648      	mov	r0, r9
 801922e:	920c      	str	r2, [sp, #48]	@ 0x30
 8019230:	9309      	str	r3, [sp, #36]	@ 0x24
 8019232:	f000 fc9b 	bl	8019b6c <_Bfree>
 8019236:	9b07      	ldr	r3, [sp, #28]
 8019238:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801923a:	9e00      	ldr	r6, [sp, #0]
 801923c:	ea42 0103 	orr.w	r1, r2, r3
 8019240:	9b06      	ldr	r3, [sp, #24]
 8019242:	4319      	orrs	r1, r3
 8019244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019246:	d10d      	bne.n	8019264 <_dtoa_r+0xa44>
 8019248:	2b39      	cmp	r3, #57	@ 0x39
 801924a:	d027      	beq.n	801929c <_dtoa_r+0xa7c>
 801924c:	9a04      	ldr	r2, [sp, #16]
 801924e:	2a00      	cmp	r2, #0
 8019250:	dd01      	ble.n	8019256 <_dtoa_r+0xa36>
 8019252:	9b03      	ldr	r3, [sp, #12]
 8019254:	3331      	adds	r3, #49	@ 0x31
 8019256:	f88b 3000 	strb.w	r3, [fp]
 801925a:	e52e      	b.n	8018cba <_dtoa_r+0x49a>
 801925c:	4628      	mov	r0, r5
 801925e:	e7b9      	b.n	80191d4 <_dtoa_r+0x9b4>
 8019260:	2201      	movs	r2, #1
 8019262:	e7e2      	b.n	801922a <_dtoa_r+0xa0a>
 8019264:	9904      	ldr	r1, [sp, #16]
 8019266:	2900      	cmp	r1, #0
 8019268:	db04      	blt.n	8019274 <_dtoa_r+0xa54>
 801926a:	9807      	ldr	r0, [sp, #28]
 801926c:	4301      	orrs	r1, r0
 801926e:	9806      	ldr	r0, [sp, #24]
 8019270:	4301      	orrs	r1, r0
 8019272:	d120      	bne.n	80192b6 <_dtoa_r+0xa96>
 8019274:	2a00      	cmp	r2, #0
 8019276:	ddee      	ble.n	8019256 <_dtoa_r+0xa36>
 8019278:	9902      	ldr	r1, [sp, #8]
 801927a:	9300      	str	r3, [sp, #0]
 801927c:	2201      	movs	r2, #1
 801927e:	4648      	mov	r0, r9
 8019280:	f000 fe84 	bl	8019f8c <__lshift>
 8019284:	4621      	mov	r1, r4
 8019286:	9002      	str	r0, [sp, #8]
 8019288:	f000 feec 	bl	801a064 <__mcmp>
 801928c:	2800      	cmp	r0, #0
 801928e:	9b00      	ldr	r3, [sp, #0]
 8019290:	dc02      	bgt.n	8019298 <_dtoa_r+0xa78>
 8019292:	d1e0      	bne.n	8019256 <_dtoa_r+0xa36>
 8019294:	07da      	lsls	r2, r3, #31
 8019296:	d5de      	bpl.n	8019256 <_dtoa_r+0xa36>
 8019298:	2b39      	cmp	r3, #57	@ 0x39
 801929a:	d1da      	bne.n	8019252 <_dtoa_r+0xa32>
 801929c:	2339      	movs	r3, #57	@ 0x39
 801929e:	f88b 3000 	strb.w	r3, [fp]
 80192a2:	4633      	mov	r3, r6
 80192a4:	461e      	mov	r6, r3
 80192a6:	3b01      	subs	r3, #1
 80192a8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80192ac:	2a39      	cmp	r2, #57	@ 0x39
 80192ae:	d04e      	beq.n	801934e <_dtoa_r+0xb2e>
 80192b0:	3201      	adds	r2, #1
 80192b2:	701a      	strb	r2, [r3, #0]
 80192b4:	e501      	b.n	8018cba <_dtoa_r+0x49a>
 80192b6:	2a00      	cmp	r2, #0
 80192b8:	dd03      	ble.n	80192c2 <_dtoa_r+0xaa2>
 80192ba:	2b39      	cmp	r3, #57	@ 0x39
 80192bc:	d0ee      	beq.n	801929c <_dtoa_r+0xa7c>
 80192be:	3301      	adds	r3, #1
 80192c0:	e7c9      	b.n	8019256 <_dtoa_r+0xa36>
 80192c2:	9a00      	ldr	r2, [sp, #0]
 80192c4:	9908      	ldr	r1, [sp, #32]
 80192c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80192ca:	428a      	cmp	r2, r1
 80192cc:	d028      	beq.n	8019320 <_dtoa_r+0xb00>
 80192ce:	9902      	ldr	r1, [sp, #8]
 80192d0:	2300      	movs	r3, #0
 80192d2:	220a      	movs	r2, #10
 80192d4:	4648      	mov	r0, r9
 80192d6:	f000 fc6b 	bl	8019bb0 <__multadd>
 80192da:	42af      	cmp	r7, r5
 80192dc:	9002      	str	r0, [sp, #8]
 80192de:	f04f 0300 	mov.w	r3, #0
 80192e2:	f04f 020a 	mov.w	r2, #10
 80192e6:	4639      	mov	r1, r7
 80192e8:	4648      	mov	r0, r9
 80192ea:	d107      	bne.n	80192fc <_dtoa_r+0xadc>
 80192ec:	f000 fc60 	bl	8019bb0 <__multadd>
 80192f0:	4607      	mov	r7, r0
 80192f2:	4605      	mov	r5, r0
 80192f4:	9b00      	ldr	r3, [sp, #0]
 80192f6:	3301      	adds	r3, #1
 80192f8:	9300      	str	r3, [sp, #0]
 80192fa:	e777      	b.n	80191ec <_dtoa_r+0x9cc>
 80192fc:	f000 fc58 	bl	8019bb0 <__multadd>
 8019300:	4629      	mov	r1, r5
 8019302:	4607      	mov	r7, r0
 8019304:	2300      	movs	r3, #0
 8019306:	220a      	movs	r2, #10
 8019308:	4648      	mov	r0, r9
 801930a:	f000 fc51 	bl	8019bb0 <__multadd>
 801930e:	4605      	mov	r5, r0
 8019310:	e7f0      	b.n	80192f4 <_dtoa_r+0xad4>
 8019312:	f1bb 0f00 	cmp.w	fp, #0
 8019316:	bfcc      	ite	gt
 8019318:	465e      	movgt	r6, fp
 801931a:	2601      	movle	r6, #1
 801931c:	4456      	add	r6, sl
 801931e:	2700      	movs	r7, #0
 8019320:	9902      	ldr	r1, [sp, #8]
 8019322:	9300      	str	r3, [sp, #0]
 8019324:	2201      	movs	r2, #1
 8019326:	4648      	mov	r0, r9
 8019328:	f000 fe30 	bl	8019f8c <__lshift>
 801932c:	4621      	mov	r1, r4
 801932e:	9002      	str	r0, [sp, #8]
 8019330:	f000 fe98 	bl	801a064 <__mcmp>
 8019334:	2800      	cmp	r0, #0
 8019336:	dcb4      	bgt.n	80192a2 <_dtoa_r+0xa82>
 8019338:	d102      	bne.n	8019340 <_dtoa_r+0xb20>
 801933a:	9b00      	ldr	r3, [sp, #0]
 801933c:	07db      	lsls	r3, r3, #31
 801933e:	d4b0      	bmi.n	80192a2 <_dtoa_r+0xa82>
 8019340:	4633      	mov	r3, r6
 8019342:	461e      	mov	r6, r3
 8019344:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019348:	2a30      	cmp	r2, #48	@ 0x30
 801934a:	d0fa      	beq.n	8019342 <_dtoa_r+0xb22>
 801934c:	e4b5      	b.n	8018cba <_dtoa_r+0x49a>
 801934e:	459a      	cmp	sl, r3
 8019350:	d1a8      	bne.n	80192a4 <_dtoa_r+0xa84>
 8019352:	2331      	movs	r3, #49	@ 0x31
 8019354:	f108 0801 	add.w	r8, r8, #1
 8019358:	f88a 3000 	strb.w	r3, [sl]
 801935c:	e4ad      	b.n	8018cba <_dtoa_r+0x49a>
 801935e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8019360:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80193bc <_dtoa_r+0xb9c>
 8019364:	b11b      	cbz	r3, 801936e <_dtoa_r+0xb4e>
 8019366:	f10a 0308 	add.w	r3, sl, #8
 801936a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801936c:	6013      	str	r3, [r2, #0]
 801936e:	4650      	mov	r0, sl
 8019370:	b017      	add	sp, #92	@ 0x5c
 8019372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019376:	9b07      	ldr	r3, [sp, #28]
 8019378:	2b01      	cmp	r3, #1
 801937a:	f77f ae2e 	ble.w	8018fda <_dtoa_r+0x7ba>
 801937e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019380:	9308      	str	r3, [sp, #32]
 8019382:	2001      	movs	r0, #1
 8019384:	e64d      	b.n	8019022 <_dtoa_r+0x802>
 8019386:	f1bb 0f00 	cmp.w	fp, #0
 801938a:	f77f aed9 	ble.w	8019140 <_dtoa_r+0x920>
 801938e:	4656      	mov	r6, sl
 8019390:	9802      	ldr	r0, [sp, #8]
 8019392:	4621      	mov	r1, r4
 8019394:	f7ff f9bc 	bl	8018710 <quorem>
 8019398:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801939c:	f806 3b01 	strb.w	r3, [r6], #1
 80193a0:	eba6 020a 	sub.w	r2, r6, sl
 80193a4:	4593      	cmp	fp, r2
 80193a6:	ddb4      	ble.n	8019312 <_dtoa_r+0xaf2>
 80193a8:	9902      	ldr	r1, [sp, #8]
 80193aa:	2300      	movs	r3, #0
 80193ac:	220a      	movs	r2, #10
 80193ae:	4648      	mov	r0, r9
 80193b0:	f000 fbfe 	bl	8019bb0 <__multadd>
 80193b4:	9002      	str	r0, [sp, #8]
 80193b6:	e7eb      	b.n	8019390 <_dtoa_r+0xb70>
 80193b8:	0801d9ac 	.word	0x0801d9ac
 80193bc:	0801d930 	.word	0x0801d930

080193c0 <_free_r>:
 80193c0:	b538      	push	{r3, r4, r5, lr}
 80193c2:	4605      	mov	r5, r0
 80193c4:	2900      	cmp	r1, #0
 80193c6:	d041      	beq.n	801944c <_free_r+0x8c>
 80193c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80193cc:	1f0c      	subs	r4, r1, #4
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	bfb8      	it	lt
 80193d2:	18e4      	addlt	r4, r4, r3
 80193d4:	f7fd fbb0 	bl	8016b38 <__malloc_lock>
 80193d8:	4a1d      	ldr	r2, [pc, #116]	@ (8019450 <_free_r+0x90>)
 80193da:	6813      	ldr	r3, [r2, #0]
 80193dc:	b933      	cbnz	r3, 80193ec <_free_r+0x2c>
 80193de:	6063      	str	r3, [r4, #4]
 80193e0:	6014      	str	r4, [r2, #0]
 80193e2:	4628      	mov	r0, r5
 80193e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80193e8:	f7fd bbac 	b.w	8016b44 <__malloc_unlock>
 80193ec:	42a3      	cmp	r3, r4
 80193ee:	d908      	bls.n	8019402 <_free_r+0x42>
 80193f0:	6820      	ldr	r0, [r4, #0]
 80193f2:	1821      	adds	r1, r4, r0
 80193f4:	428b      	cmp	r3, r1
 80193f6:	bf01      	itttt	eq
 80193f8:	6819      	ldreq	r1, [r3, #0]
 80193fa:	685b      	ldreq	r3, [r3, #4]
 80193fc:	1809      	addeq	r1, r1, r0
 80193fe:	6021      	streq	r1, [r4, #0]
 8019400:	e7ed      	b.n	80193de <_free_r+0x1e>
 8019402:	461a      	mov	r2, r3
 8019404:	685b      	ldr	r3, [r3, #4]
 8019406:	b10b      	cbz	r3, 801940c <_free_r+0x4c>
 8019408:	42a3      	cmp	r3, r4
 801940a:	d9fa      	bls.n	8019402 <_free_r+0x42>
 801940c:	6811      	ldr	r1, [r2, #0]
 801940e:	1850      	adds	r0, r2, r1
 8019410:	42a0      	cmp	r0, r4
 8019412:	d10b      	bne.n	801942c <_free_r+0x6c>
 8019414:	6820      	ldr	r0, [r4, #0]
 8019416:	4401      	add	r1, r0
 8019418:	1850      	adds	r0, r2, r1
 801941a:	4283      	cmp	r3, r0
 801941c:	6011      	str	r1, [r2, #0]
 801941e:	d1e0      	bne.n	80193e2 <_free_r+0x22>
 8019420:	6818      	ldr	r0, [r3, #0]
 8019422:	685b      	ldr	r3, [r3, #4]
 8019424:	6053      	str	r3, [r2, #4]
 8019426:	4408      	add	r0, r1
 8019428:	6010      	str	r0, [r2, #0]
 801942a:	e7da      	b.n	80193e2 <_free_r+0x22>
 801942c:	d902      	bls.n	8019434 <_free_r+0x74>
 801942e:	230c      	movs	r3, #12
 8019430:	602b      	str	r3, [r5, #0]
 8019432:	e7d6      	b.n	80193e2 <_free_r+0x22>
 8019434:	6820      	ldr	r0, [r4, #0]
 8019436:	1821      	adds	r1, r4, r0
 8019438:	428b      	cmp	r3, r1
 801943a:	bf04      	itt	eq
 801943c:	6819      	ldreq	r1, [r3, #0]
 801943e:	685b      	ldreq	r3, [r3, #4]
 8019440:	6063      	str	r3, [r4, #4]
 8019442:	bf04      	itt	eq
 8019444:	1809      	addeq	r1, r1, r0
 8019446:	6021      	streq	r1, [r4, #0]
 8019448:	6054      	str	r4, [r2, #4]
 801944a:	e7ca      	b.n	80193e2 <_free_r+0x22>
 801944c:	bd38      	pop	{r3, r4, r5, pc}
 801944e:	bf00      	nop
 8019450:	20014298 	.word	0x20014298

08019454 <rshift>:
 8019454:	6903      	ldr	r3, [r0, #16]
 8019456:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801945a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801945e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019462:	f100 0414 	add.w	r4, r0, #20
 8019466:	dd45      	ble.n	80194f4 <rshift+0xa0>
 8019468:	f011 011f 	ands.w	r1, r1, #31
 801946c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019470:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019474:	d10c      	bne.n	8019490 <rshift+0x3c>
 8019476:	f100 0710 	add.w	r7, r0, #16
 801947a:	4629      	mov	r1, r5
 801947c:	42b1      	cmp	r1, r6
 801947e:	d334      	bcc.n	80194ea <rshift+0x96>
 8019480:	1a9b      	subs	r3, r3, r2
 8019482:	009b      	lsls	r3, r3, #2
 8019484:	1eea      	subs	r2, r5, #3
 8019486:	4296      	cmp	r6, r2
 8019488:	bf38      	it	cc
 801948a:	2300      	movcc	r3, #0
 801948c:	4423      	add	r3, r4
 801948e:	e015      	b.n	80194bc <rshift+0x68>
 8019490:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019494:	f1c1 0820 	rsb	r8, r1, #32
 8019498:	40cf      	lsrs	r7, r1
 801949a:	f105 0e04 	add.w	lr, r5, #4
 801949e:	46a1      	mov	r9, r4
 80194a0:	4576      	cmp	r6, lr
 80194a2:	46f4      	mov	ip, lr
 80194a4:	d815      	bhi.n	80194d2 <rshift+0x7e>
 80194a6:	1a9a      	subs	r2, r3, r2
 80194a8:	0092      	lsls	r2, r2, #2
 80194aa:	3a04      	subs	r2, #4
 80194ac:	3501      	adds	r5, #1
 80194ae:	42ae      	cmp	r6, r5
 80194b0:	bf38      	it	cc
 80194b2:	2200      	movcc	r2, #0
 80194b4:	18a3      	adds	r3, r4, r2
 80194b6:	50a7      	str	r7, [r4, r2]
 80194b8:	b107      	cbz	r7, 80194bc <rshift+0x68>
 80194ba:	3304      	adds	r3, #4
 80194bc:	1b1a      	subs	r2, r3, r4
 80194be:	42a3      	cmp	r3, r4
 80194c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80194c4:	bf08      	it	eq
 80194c6:	2300      	moveq	r3, #0
 80194c8:	6102      	str	r2, [r0, #16]
 80194ca:	bf08      	it	eq
 80194cc:	6143      	streq	r3, [r0, #20]
 80194ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194d2:	f8dc c000 	ldr.w	ip, [ip]
 80194d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80194da:	ea4c 0707 	orr.w	r7, ip, r7
 80194de:	f849 7b04 	str.w	r7, [r9], #4
 80194e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80194e6:	40cf      	lsrs	r7, r1
 80194e8:	e7da      	b.n	80194a0 <rshift+0x4c>
 80194ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80194ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80194f2:	e7c3      	b.n	801947c <rshift+0x28>
 80194f4:	4623      	mov	r3, r4
 80194f6:	e7e1      	b.n	80194bc <rshift+0x68>

080194f8 <__hexdig_fun>:
 80194f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80194fc:	2b09      	cmp	r3, #9
 80194fe:	d802      	bhi.n	8019506 <__hexdig_fun+0xe>
 8019500:	3820      	subs	r0, #32
 8019502:	b2c0      	uxtb	r0, r0
 8019504:	4770      	bx	lr
 8019506:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801950a:	2b05      	cmp	r3, #5
 801950c:	d801      	bhi.n	8019512 <__hexdig_fun+0x1a>
 801950e:	3847      	subs	r0, #71	@ 0x47
 8019510:	e7f7      	b.n	8019502 <__hexdig_fun+0xa>
 8019512:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8019516:	2b05      	cmp	r3, #5
 8019518:	d801      	bhi.n	801951e <__hexdig_fun+0x26>
 801951a:	3827      	subs	r0, #39	@ 0x27
 801951c:	e7f1      	b.n	8019502 <__hexdig_fun+0xa>
 801951e:	2000      	movs	r0, #0
 8019520:	4770      	bx	lr
	...

08019524 <__gethex>:
 8019524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019528:	b085      	sub	sp, #20
 801952a:	468a      	mov	sl, r1
 801952c:	9302      	str	r3, [sp, #8]
 801952e:	680b      	ldr	r3, [r1, #0]
 8019530:	9001      	str	r0, [sp, #4]
 8019532:	4690      	mov	r8, r2
 8019534:	1c9c      	adds	r4, r3, #2
 8019536:	46a1      	mov	r9, r4
 8019538:	f814 0b01 	ldrb.w	r0, [r4], #1
 801953c:	2830      	cmp	r0, #48	@ 0x30
 801953e:	d0fa      	beq.n	8019536 <__gethex+0x12>
 8019540:	eba9 0303 	sub.w	r3, r9, r3
 8019544:	f1a3 0b02 	sub.w	fp, r3, #2
 8019548:	f7ff ffd6 	bl	80194f8 <__hexdig_fun>
 801954c:	4605      	mov	r5, r0
 801954e:	2800      	cmp	r0, #0
 8019550:	d168      	bne.n	8019624 <__gethex+0x100>
 8019552:	49a0      	ldr	r1, [pc, #640]	@ (80197d4 <__gethex+0x2b0>)
 8019554:	2201      	movs	r2, #1
 8019556:	4648      	mov	r0, r9
 8019558:	f7fe fff8 	bl	801854c <strncmp>
 801955c:	4607      	mov	r7, r0
 801955e:	2800      	cmp	r0, #0
 8019560:	d167      	bne.n	8019632 <__gethex+0x10e>
 8019562:	f899 0001 	ldrb.w	r0, [r9, #1]
 8019566:	4626      	mov	r6, r4
 8019568:	f7ff ffc6 	bl	80194f8 <__hexdig_fun>
 801956c:	2800      	cmp	r0, #0
 801956e:	d062      	beq.n	8019636 <__gethex+0x112>
 8019570:	4623      	mov	r3, r4
 8019572:	7818      	ldrb	r0, [r3, #0]
 8019574:	2830      	cmp	r0, #48	@ 0x30
 8019576:	4699      	mov	r9, r3
 8019578:	f103 0301 	add.w	r3, r3, #1
 801957c:	d0f9      	beq.n	8019572 <__gethex+0x4e>
 801957e:	f7ff ffbb 	bl	80194f8 <__hexdig_fun>
 8019582:	fab0 f580 	clz	r5, r0
 8019586:	096d      	lsrs	r5, r5, #5
 8019588:	f04f 0b01 	mov.w	fp, #1
 801958c:	464a      	mov	r2, r9
 801958e:	4616      	mov	r6, r2
 8019590:	3201      	adds	r2, #1
 8019592:	7830      	ldrb	r0, [r6, #0]
 8019594:	f7ff ffb0 	bl	80194f8 <__hexdig_fun>
 8019598:	2800      	cmp	r0, #0
 801959a:	d1f8      	bne.n	801958e <__gethex+0x6a>
 801959c:	498d      	ldr	r1, [pc, #564]	@ (80197d4 <__gethex+0x2b0>)
 801959e:	2201      	movs	r2, #1
 80195a0:	4630      	mov	r0, r6
 80195a2:	f7fe ffd3 	bl	801854c <strncmp>
 80195a6:	2800      	cmp	r0, #0
 80195a8:	d13f      	bne.n	801962a <__gethex+0x106>
 80195aa:	b944      	cbnz	r4, 80195be <__gethex+0x9a>
 80195ac:	1c74      	adds	r4, r6, #1
 80195ae:	4622      	mov	r2, r4
 80195b0:	4616      	mov	r6, r2
 80195b2:	3201      	adds	r2, #1
 80195b4:	7830      	ldrb	r0, [r6, #0]
 80195b6:	f7ff ff9f 	bl	80194f8 <__hexdig_fun>
 80195ba:	2800      	cmp	r0, #0
 80195bc:	d1f8      	bne.n	80195b0 <__gethex+0x8c>
 80195be:	1ba4      	subs	r4, r4, r6
 80195c0:	00a7      	lsls	r7, r4, #2
 80195c2:	7833      	ldrb	r3, [r6, #0]
 80195c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80195c8:	2b50      	cmp	r3, #80	@ 0x50
 80195ca:	d13e      	bne.n	801964a <__gethex+0x126>
 80195cc:	7873      	ldrb	r3, [r6, #1]
 80195ce:	2b2b      	cmp	r3, #43	@ 0x2b
 80195d0:	d033      	beq.n	801963a <__gethex+0x116>
 80195d2:	2b2d      	cmp	r3, #45	@ 0x2d
 80195d4:	d034      	beq.n	8019640 <__gethex+0x11c>
 80195d6:	1c71      	adds	r1, r6, #1
 80195d8:	2400      	movs	r4, #0
 80195da:	7808      	ldrb	r0, [r1, #0]
 80195dc:	f7ff ff8c 	bl	80194f8 <__hexdig_fun>
 80195e0:	1e43      	subs	r3, r0, #1
 80195e2:	b2db      	uxtb	r3, r3
 80195e4:	2b18      	cmp	r3, #24
 80195e6:	d830      	bhi.n	801964a <__gethex+0x126>
 80195e8:	f1a0 0210 	sub.w	r2, r0, #16
 80195ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80195f0:	f7ff ff82 	bl	80194f8 <__hexdig_fun>
 80195f4:	f100 3cff 	add.w	ip, r0, #4294967295
 80195f8:	fa5f fc8c 	uxtb.w	ip, ip
 80195fc:	f1bc 0f18 	cmp.w	ip, #24
 8019600:	f04f 030a 	mov.w	r3, #10
 8019604:	d91e      	bls.n	8019644 <__gethex+0x120>
 8019606:	b104      	cbz	r4, 801960a <__gethex+0xe6>
 8019608:	4252      	negs	r2, r2
 801960a:	4417      	add	r7, r2
 801960c:	f8ca 1000 	str.w	r1, [sl]
 8019610:	b1ed      	cbz	r5, 801964e <__gethex+0x12a>
 8019612:	f1bb 0f00 	cmp.w	fp, #0
 8019616:	bf0c      	ite	eq
 8019618:	2506      	moveq	r5, #6
 801961a:	2500      	movne	r5, #0
 801961c:	4628      	mov	r0, r5
 801961e:	b005      	add	sp, #20
 8019620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019624:	2500      	movs	r5, #0
 8019626:	462c      	mov	r4, r5
 8019628:	e7b0      	b.n	801958c <__gethex+0x68>
 801962a:	2c00      	cmp	r4, #0
 801962c:	d1c7      	bne.n	80195be <__gethex+0x9a>
 801962e:	4627      	mov	r7, r4
 8019630:	e7c7      	b.n	80195c2 <__gethex+0x9e>
 8019632:	464e      	mov	r6, r9
 8019634:	462f      	mov	r7, r5
 8019636:	2501      	movs	r5, #1
 8019638:	e7c3      	b.n	80195c2 <__gethex+0x9e>
 801963a:	2400      	movs	r4, #0
 801963c:	1cb1      	adds	r1, r6, #2
 801963e:	e7cc      	b.n	80195da <__gethex+0xb6>
 8019640:	2401      	movs	r4, #1
 8019642:	e7fb      	b.n	801963c <__gethex+0x118>
 8019644:	fb03 0002 	mla	r0, r3, r2, r0
 8019648:	e7ce      	b.n	80195e8 <__gethex+0xc4>
 801964a:	4631      	mov	r1, r6
 801964c:	e7de      	b.n	801960c <__gethex+0xe8>
 801964e:	eba6 0309 	sub.w	r3, r6, r9
 8019652:	3b01      	subs	r3, #1
 8019654:	4629      	mov	r1, r5
 8019656:	2b07      	cmp	r3, #7
 8019658:	dc0a      	bgt.n	8019670 <__gethex+0x14c>
 801965a:	9801      	ldr	r0, [sp, #4]
 801965c:	f000 fa46 	bl	8019aec <_Balloc>
 8019660:	4604      	mov	r4, r0
 8019662:	b940      	cbnz	r0, 8019676 <__gethex+0x152>
 8019664:	4b5c      	ldr	r3, [pc, #368]	@ (80197d8 <__gethex+0x2b4>)
 8019666:	4602      	mov	r2, r0
 8019668:	21e4      	movs	r1, #228	@ 0xe4
 801966a:	485c      	ldr	r0, [pc, #368]	@ (80197dc <__gethex+0x2b8>)
 801966c:	f001 fd30 	bl	801b0d0 <__assert_func>
 8019670:	3101      	adds	r1, #1
 8019672:	105b      	asrs	r3, r3, #1
 8019674:	e7ef      	b.n	8019656 <__gethex+0x132>
 8019676:	f100 0a14 	add.w	sl, r0, #20
 801967a:	2300      	movs	r3, #0
 801967c:	4655      	mov	r5, sl
 801967e:	469b      	mov	fp, r3
 8019680:	45b1      	cmp	r9, r6
 8019682:	d337      	bcc.n	80196f4 <__gethex+0x1d0>
 8019684:	f845 bb04 	str.w	fp, [r5], #4
 8019688:	eba5 050a 	sub.w	r5, r5, sl
 801968c:	10ad      	asrs	r5, r5, #2
 801968e:	6125      	str	r5, [r4, #16]
 8019690:	4658      	mov	r0, fp
 8019692:	f000 fb1d 	bl	8019cd0 <__hi0bits>
 8019696:	016d      	lsls	r5, r5, #5
 8019698:	f8d8 6000 	ldr.w	r6, [r8]
 801969c:	1a2d      	subs	r5, r5, r0
 801969e:	42b5      	cmp	r5, r6
 80196a0:	dd54      	ble.n	801974c <__gethex+0x228>
 80196a2:	1bad      	subs	r5, r5, r6
 80196a4:	4629      	mov	r1, r5
 80196a6:	4620      	mov	r0, r4
 80196a8:	f000 fea9 	bl	801a3fe <__any_on>
 80196ac:	4681      	mov	r9, r0
 80196ae:	b178      	cbz	r0, 80196d0 <__gethex+0x1ac>
 80196b0:	1e6b      	subs	r3, r5, #1
 80196b2:	1159      	asrs	r1, r3, #5
 80196b4:	f003 021f 	and.w	r2, r3, #31
 80196b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80196bc:	f04f 0901 	mov.w	r9, #1
 80196c0:	fa09 f202 	lsl.w	r2, r9, r2
 80196c4:	420a      	tst	r2, r1
 80196c6:	d003      	beq.n	80196d0 <__gethex+0x1ac>
 80196c8:	454b      	cmp	r3, r9
 80196ca:	dc36      	bgt.n	801973a <__gethex+0x216>
 80196cc:	f04f 0902 	mov.w	r9, #2
 80196d0:	4629      	mov	r1, r5
 80196d2:	4620      	mov	r0, r4
 80196d4:	f7ff febe 	bl	8019454 <rshift>
 80196d8:	442f      	add	r7, r5
 80196da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80196de:	42bb      	cmp	r3, r7
 80196e0:	da42      	bge.n	8019768 <__gethex+0x244>
 80196e2:	9801      	ldr	r0, [sp, #4]
 80196e4:	4621      	mov	r1, r4
 80196e6:	f000 fa41 	bl	8019b6c <_Bfree>
 80196ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80196ec:	2300      	movs	r3, #0
 80196ee:	6013      	str	r3, [r2, #0]
 80196f0:	25a3      	movs	r5, #163	@ 0xa3
 80196f2:	e793      	b.n	801961c <__gethex+0xf8>
 80196f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80196f8:	2a2e      	cmp	r2, #46	@ 0x2e
 80196fa:	d012      	beq.n	8019722 <__gethex+0x1fe>
 80196fc:	2b20      	cmp	r3, #32
 80196fe:	d104      	bne.n	801970a <__gethex+0x1e6>
 8019700:	f845 bb04 	str.w	fp, [r5], #4
 8019704:	f04f 0b00 	mov.w	fp, #0
 8019708:	465b      	mov	r3, fp
 801970a:	7830      	ldrb	r0, [r6, #0]
 801970c:	9303      	str	r3, [sp, #12]
 801970e:	f7ff fef3 	bl	80194f8 <__hexdig_fun>
 8019712:	9b03      	ldr	r3, [sp, #12]
 8019714:	f000 000f 	and.w	r0, r0, #15
 8019718:	4098      	lsls	r0, r3
 801971a:	ea4b 0b00 	orr.w	fp, fp, r0
 801971e:	3304      	adds	r3, #4
 8019720:	e7ae      	b.n	8019680 <__gethex+0x15c>
 8019722:	45b1      	cmp	r9, r6
 8019724:	d8ea      	bhi.n	80196fc <__gethex+0x1d8>
 8019726:	492b      	ldr	r1, [pc, #172]	@ (80197d4 <__gethex+0x2b0>)
 8019728:	9303      	str	r3, [sp, #12]
 801972a:	2201      	movs	r2, #1
 801972c:	4630      	mov	r0, r6
 801972e:	f7fe ff0d 	bl	801854c <strncmp>
 8019732:	9b03      	ldr	r3, [sp, #12]
 8019734:	2800      	cmp	r0, #0
 8019736:	d1e1      	bne.n	80196fc <__gethex+0x1d8>
 8019738:	e7a2      	b.n	8019680 <__gethex+0x15c>
 801973a:	1ea9      	subs	r1, r5, #2
 801973c:	4620      	mov	r0, r4
 801973e:	f000 fe5e 	bl	801a3fe <__any_on>
 8019742:	2800      	cmp	r0, #0
 8019744:	d0c2      	beq.n	80196cc <__gethex+0x1a8>
 8019746:	f04f 0903 	mov.w	r9, #3
 801974a:	e7c1      	b.n	80196d0 <__gethex+0x1ac>
 801974c:	da09      	bge.n	8019762 <__gethex+0x23e>
 801974e:	1b75      	subs	r5, r6, r5
 8019750:	4621      	mov	r1, r4
 8019752:	9801      	ldr	r0, [sp, #4]
 8019754:	462a      	mov	r2, r5
 8019756:	f000 fc19 	bl	8019f8c <__lshift>
 801975a:	1b7f      	subs	r7, r7, r5
 801975c:	4604      	mov	r4, r0
 801975e:	f100 0a14 	add.w	sl, r0, #20
 8019762:	f04f 0900 	mov.w	r9, #0
 8019766:	e7b8      	b.n	80196da <__gethex+0x1b6>
 8019768:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801976c:	42bd      	cmp	r5, r7
 801976e:	dd6f      	ble.n	8019850 <__gethex+0x32c>
 8019770:	1bed      	subs	r5, r5, r7
 8019772:	42ae      	cmp	r6, r5
 8019774:	dc34      	bgt.n	80197e0 <__gethex+0x2bc>
 8019776:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801977a:	2b02      	cmp	r3, #2
 801977c:	d022      	beq.n	80197c4 <__gethex+0x2a0>
 801977e:	2b03      	cmp	r3, #3
 8019780:	d024      	beq.n	80197cc <__gethex+0x2a8>
 8019782:	2b01      	cmp	r3, #1
 8019784:	d115      	bne.n	80197b2 <__gethex+0x28e>
 8019786:	42ae      	cmp	r6, r5
 8019788:	d113      	bne.n	80197b2 <__gethex+0x28e>
 801978a:	2e01      	cmp	r6, #1
 801978c:	d10b      	bne.n	80197a6 <__gethex+0x282>
 801978e:	9a02      	ldr	r2, [sp, #8]
 8019790:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019794:	6013      	str	r3, [r2, #0]
 8019796:	2301      	movs	r3, #1
 8019798:	6123      	str	r3, [r4, #16]
 801979a:	f8ca 3000 	str.w	r3, [sl]
 801979e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80197a0:	2562      	movs	r5, #98	@ 0x62
 80197a2:	601c      	str	r4, [r3, #0]
 80197a4:	e73a      	b.n	801961c <__gethex+0xf8>
 80197a6:	1e71      	subs	r1, r6, #1
 80197a8:	4620      	mov	r0, r4
 80197aa:	f000 fe28 	bl	801a3fe <__any_on>
 80197ae:	2800      	cmp	r0, #0
 80197b0:	d1ed      	bne.n	801978e <__gethex+0x26a>
 80197b2:	9801      	ldr	r0, [sp, #4]
 80197b4:	4621      	mov	r1, r4
 80197b6:	f000 f9d9 	bl	8019b6c <_Bfree>
 80197ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80197bc:	2300      	movs	r3, #0
 80197be:	6013      	str	r3, [r2, #0]
 80197c0:	2550      	movs	r5, #80	@ 0x50
 80197c2:	e72b      	b.n	801961c <__gethex+0xf8>
 80197c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d1f3      	bne.n	80197b2 <__gethex+0x28e>
 80197ca:	e7e0      	b.n	801978e <__gethex+0x26a>
 80197cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d1dd      	bne.n	801978e <__gethex+0x26a>
 80197d2:	e7ee      	b.n	80197b2 <__gethex+0x28e>
 80197d4:	0801d8f4 	.word	0x0801d8f4
 80197d8:	0801d9ac 	.word	0x0801d9ac
 80197dc:	0801d9bd 	.word	0x0801d9bd
 80197e0:	1e6f      	subs	r7, r5, #1
 80197e2:	f1b9 0f00 	cmp.w	r9, #0
 80197e6:	d130      	bne.n	801984a <__gethex+0x326>
 80197e8:	b127      	cbz	r7, 80197f4 <__gethex+0x2d0>
 80197ea:	4639      	mov	r1, r7
 80197ec:	4620      	mov	r0, r4
 80197ee:	f000 fe06 	bl	801a3fe <__any_on>
 80197f2:	4681      	mov	r9, r0
 80197f4:	117a      	asrs	r2, r7, #5
 80197f6:	2301      	movs	r3, #1
 80197f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80197fc:	f007 071f 	and.w	r7, r7, #31
 8019800:	40bb      	lsls	r3, r7
 8019802:	4213      	tst	r3, r2
 8019804:	4629      	mov	r1, r5
 8019806:	4620      	mov	r0, r4
 8019808:	bf18      	it	ne
 801980a:	f049 0902 	orrne.w	r9, r9, #2
 801980e:	f7ff fe21 	bl	8019454 <rshift>
 8019812:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8019816:	1b76      	subs	r6, r6, r5
 8019818:	2502      	movs	r5, #2
 801981a:	f1b9 0f00 	cmp.w	r9, #0
 801981e:	d047      	beq.n	80198b0 <__gethex+0x38c>
 8019820:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019824:	2b02      	cmp	r3, #2
 8019826:	d015      	beq.n	8019854 <__gethex+0x330>
 8019828:	2b03      	cmp	r3, #3
 801982a:	d017      	beq.n	801985c <__gethex+0x338>
 801982c:	2b01      	cmp	r3, #1
 801982e:	d109      	bne.n	8019844 <__gethex+0x320>
 8019830:	f019 0f02 	tst.w	r9, #2
 8019834:	d006      	beq.n	8019844 <__gethex+0x320>
 8019836:	f8da 3000 	ldr.w	r3, [sl]
 801983a:	ea49 0903 	orr.w	r9, r9, r3
 801983e:	f019 0f01 	tst.w	r9, #1
 8019842:	d10e      	bne.n	8019862 <__gethex+0x33e>
 8019844:	f045 0510 	orr.w	r5, r5, #16
 8019848:	e032      	b.n	80198b0 <__gethex+0x38c>
 801984a:	f04f 0901 	mov.w	r9, #1
 801984e:	e7d1      	b.n	80197f4 <__gethex+0x2d0>
 8019850:	2501      	movs	r5, #1
 8019852:	e7e2      	b.n	801981a <__gethex+0x2f6>
 8019854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019856:	f1c3 0301 	rsb	r3, r3, #1
 801985a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801985c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801985e:	2b00      	cmp	r3, #0
 8019860:	d0f0      	beq.n	8019844 <__gethex+0x320>
 8019862:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019866:	f104 0314 	add.w	r3, r4, #20
 801986a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801986e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019872:	f04f 0c00 	mov.w	ip, #0
 8019876:	4618      	mov	r0, r3
 8019878:	f853 2b04 	ldr.w	r2, [r3], #4
 801987c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019880:	d01b      	beq.n	80198ba <__gethex+0x396>
 8019882:	3201      	adds	r2, #1
 8019884:	6002      	str	r2, [r0, #0]
 8019886:	2d02      	cmp	r5, #2
 8019888:	f104 0314 	add.w	r3, r4, #20
 801988c:	d13c      	bne.n	8019908 <__gethex+0x3e4>
 801988e:	f8d8 2000 	ldr.w	r2, [r8]
 8019892:	3a01      	subs	r2, #1
 8019894:	42b2      	cmp	r2, r6
 8019896:	d109      	bne.n	80198ac <__gethex+0x388>
 8019898:	1171      	asrs	r1, r6, #5
 801989a:	2201      	movs	r2, #1
 801989c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80198a0:	f006 061f 	and.w	r6, r6, #31
 80198a4:	fa02 f606 	lsl.w	r6, r2, r6
 80198a8:	421e      	tst	r6, r3
 80198aa:	d13a      	bne.n	8019922 <__gethex+0x3fe>
 80198ac:	f045 0520 	orr.w	r5, r5, #32
 80198b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80198b2:	601c      	str	r4, [r3, #0]
 80198b4:	9b02      	ldr	r3, [sp, #8]
 80198b6:	601f      	str	r7, [r3, #0]
 80198b8:	e6b0      	b.n	801961c <__gethex+0xf8>
 80198ba:	4299      	cmp	r1, r3
 80198bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80198c0:	d8d9      	bhi.n	8019876 <__gethex+0x352>
 80198c2:	68a3      	ldr	r3, [r4, #8]
 80198c4:	459b      	cmp	fp, r3
 80198c6:	db17      	blt.n	80198f8 <__gethex+0x3d4>
 80198c8:	6861      	ldr	r1, [r4, #4]
 80198ca:	9801      	ldr	r0, [sp, #4]
 80198cc:	3101      	adds	r1, #1
 80198ce:	f000 f90d 	bl	8019aec <_Balloc>
 80198d2:	4681      	mov	r9, r0
 80198d4:	b918      	cbnz	r0, 80198de <__gethex+0x3ba>
 80198d6:	4b1a      	ldr	r3, [pc, #104]	@ (8019940 <__gethex+0x41c>)
 80198d8:	4602      	mov	r2, r0
 80198da:	2184      	movs	r1, #132	@ 0x84
 80198dc:	e6c5      	b.n	801966a <__gethex+0x146>
 80198de:	6922      	ldr	r2, [r4, #16]
 80198e0:	3202      	adds	r2, #2
 80198e2:	f104 010c 	add.w	r1, r4, #12
 80198e6:	0092      	lsls	r2, r2, #2
 80198e8:	300c      	adds	r0, #12
 80198ea:	f7fe fefa 	bl	80186e2 <memcpy>
 80198ee:	4621      	mov	r1, r4
 80198f0:	9801      	ldr	r0, [sp, #4]
 80198f2:	f000 f93b 	bl	8019b6c <_Bfree>
 80198f6:	464c      	mov	r4, r9
 80198f8:	6923      	ldr	r3, [r4, #16]
 80198fa:	1c5a      	adds	r2, r3, #1
 80198fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019900:	6122      	str	r2, [r4, #16]
 8019902:	2201      	movs	r2, #1
 8019904:	615a      	str	r2, [r3, #20]
 8019906:	e7be      	b.n	8019886 <__gethex+0x362>
 8019908:	6922      	ldr	r2, [r4, #16]
 801990a:	455a      	cmp	r2, fp
 801990c:	dd0b      	ble.n	8019926 <__gethex+0x402>
 801990e:	2101      	movs	r1, #1
 8019910:	4620      	mov	r0, r4
 8019912:	f7ff fd9f 	bl	8019454 <rshift>
 8019916:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801991a:	3701      	adds	r7, #1
 801991c:	42bb      	cmp	r3, r7
 801991e:	f6ff aee0 	blt.w	80196e2 <__gethex+0x1be>
 8019922:	2501      	movs	r5, #1
 8019924:	e7c2      	b.n	80198ac <__gethex+0x388>
 8019926:	f016 061f 	ands.w	r6, r6, #31
 801992a:	d0fa      	beq.n	8019922 <__gethex+0x3fe>
 801992c:	4453      	add	r3, sl
 801992e:	f1c6 0620 	rsb	r6, r6, #32
 8019932:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8019936:	f000 f9cb 	bl	8019cd0 <__hi0bits>
 801993a:	42b0      	cmp	r0, r6
 801993c:	dbe7      	blt.n	801990e <__gethex+0x3ea>
 801993e:	e7f0      	b.n	8019922 <__gethex+0x3fe>
 8019940:	0801d9ac 	.word	0x0801d9ac

08019944 <L_shift>:
 8019944:	f1c2 0208 	rsb	r2, r2, #8
 8019948:	0092      	lsls	r2, r2, #2
 801994a:	b570      	push	{r4, r5, r6, lr}
 801994c:	f1c2 0620 	rsb	r6, r2, #32
 8019950:	6843      	ldr	r3, [r0, #4]
 8019952:	6804      	ldr	r4, [r0, #0]
 8019954:	fa03 f506 	lsl.w	r5, r3, r6
 8019958:	432c      	orrs	r4, r5
 801995a:	40d3      	lsrs	r3, r2
 801995c:	6004      	str	r4, [r0, #0]
 801995e:	f840 3f04 	str.w	r3, [r0, #4]!
 8019962:	4288      	cmp	r0, r1
 8019964:	d3f4      	bcc.n	8019950 <L_shift+0xc>
 8019966:	bd70      	pop	{r4, r5, r6, pc}

08019968 <__match>:
 8019968:	b530      	push	{r4, r5, lr}
 801996a:	6803      	ldr	r3, [r0, #0]
 801996c:	3301      	adds	r3, #1
 801996e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019972:	b914      	cbnz	r4, 801997a <__match+0x12>
 8019974:	6003      	str	r3, [r0, #0]
 8019976:	2001      	movs	r0, #1
 8019978:	bd30      	pop	{r4, r5, pc}
 801997a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801997e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8019982:	2d19      	cmp	r5, #25
 8019984:	bf98      	it	ls
 8019986:	3220      	addls	r2, #32
 8019988:	42a2      	cmp	r2, r4
 801998a:	d0f0      	beq.n	801996e <__match+0x6>
 801998c:	2000      	movs	r0, #0
 801998e:	e7f3      	b.n	8019978 <__match+0x10>

08019990 <__hexnan>:
 8019990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019994:	680b      	ldr	r3, [r1, #0]
 8019996:	6801      	ldr	r1, [r0, #0]
 8019998:	115e      	asrs	r6, r3, #5
 801999a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801999e:	f013 031f 	ands.w	r3, r3, #31
 80199a2:	b087      	sub	sp, #28
 80199a4:	bf18      	it	ne
 80199a6:	3604      	addne	r6, #4
 80199a8:	2500      	movs	r5, #0
 80199aa:	1f37      	subs	r7, r6, #4
 80199ac:	4682      	mov	sl, r0
 80199ae:	4690      	mov	r8, r2
 80199b0:	9301      	str	r3, [sp, #4]
 80199b2:	f846 5c04 	str.w	r5, [r6, #-4]
 80199b6:	46b9      	mov	r9, r7
 80199b8:	463c      	mov	r4, r7
 80199ba:	9502      	str	r5, [sp, #8]
 80199bc:	46ab      	mov	fp, r5
 80199be:	784a      	ldrb	r2, [r1, #1]
 80199c0:	1c4b      	adds	r3, r1, #1
 80199c2:	9303      	str	r3, [sp, #12]
 80199c4:	b342      	cbz	r2, 8019a18 <__hexnan+0x88>
 80199c6:	4610      	mov	r0, r2
 80199c8:	9105      	str	r1, [sp, #20]
 80199ca:	9204      	str	r2, [sp, #16]
 80199cc:	f7ff fd94 	bl	80194f8 <__hexdig_fun>
 80199d0:	2800      	cmp	r0, #0
 80199d2:	d151      	bne.n	8019a78 <__hexnan+0xe8>
 80199d4:	9a04      	ldr	r2, [sp, #16]
 80199d6:	9905      	ldr	r1, [sp, #20]
 80199d8:	2a20      	cmp	r2, #32
 80199da:	d818      	bhi.n	8019a0e <__hexnan+0x7e>
 80199dc:	9b02      	ldr	r3, [sp, #8]
 80199de:	459b      	cmp	fp, r3
 80199e0:	dd13      	ble.n	8019a0a <__hexnan+0x7a>
 80199e2:	454c      	cmp	r4, r9
 80199e4:	d206      	bcs.n	80199f4 <__hexnan+0x64>
 80199e6:	2d07      	cmp	r5, #7
 80199e8:	dc04      	bgt.n	80199f4 <__hexnan+0x64>
 80199ea:	462a      	mov	r2, r5
 80199ec:	4649      	mov	r1, r9
 80199ee:	4620      	mov	r0, r4
 80199f0:	f7ff ffa8 	bl	8019944 <L_shift>
 80199f4:	4544      	cmp	r4, r8
 80199f6:	d952      	bls.n	8019a9e <__hexnan+0x10e>
 80199f8:	2300      	movs	r3, #0
 80199fa:	f1a4 0904 	sub.w	r9, r4, #4
 80199fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8019a02:	f8cd b008 	str.w	fp, [sp, #8]
 8019a06:	464c      	mov	r4, r9
 8019a08:	461d      	mov	r5, r3
 8019a0a:	9903      	ldr	r1, [sp, #12]
 8019a0c:	e7d7      	b.n	80199be <__hexnan+0x2e>
 8019a0e:	2a29      	cmp	r2, #41	@ 0x29
 8019a10:	d157      	bne.n	8019ac2 <__hexnan+0x132>
 8019a12:	3102      	adds	r1, #2
 8019a14:	f8ca 1000 	str.w	r1, [sl]
 8019a18:	f1bb 0f00 	cmp.w	fp, #0
 8019a1c:	d051      	beq.n	8019ac2 <__hexnan+0x132>
 8019a1e:	454c      	cmp	r4, r9
 8019a20:	d206      	bcs.n	8019a30 <__hexnan+0xa0>
 8019a22:	2d07      	cmp	r5, #7
 8019a24:	dc04      	bgt.n	8019a30 <__hexnan+0xa0>
 8019a26:	462a      	mov	r2, r5
 8019a28:	4649      	mov	r1, r9
 8019a2a:	4620      	mov	r0, r4
 8019a2c:	f7ff ff8a 	bl	8019944 <L_shift>
 8019a30:	4544      	cmp	r4, r8
 8019a32:	d936      	bls.n	8019aa2 <__hexnan+0x112>
 8019a34:	f1a8 0204 	sub.w	r2, r8, #4
 8019a38:	4623      	mov	r3, r4
 8019a3a:	f853 1b04 	ldr.w	r1, [r3], #4
 8019a3e:	f842 1f04 	str.w	r1, [r2, #4]!
 8019a42:	429f      	cmp	r7, r3
 8019a44:	d2f9      	bcs.n	8019a3a <__hexnan+0xaa>
 8019a46:	1b3b      	subs	r3, r7, r4
 8019a48:	f023 0303 	bic.w	r3, r3, #3
 8019a4c:	3304      	adds	r3, #4
 8019a4e:	3401      	adds	r4, #1
 8019a50:	3e03      	subs	r6, #3
 8019a52:	42b4      	cmp	r4, r6
 8019a54:	bf88      	it	hi
 8019a56:	2304      	movhi	r3, #4
 8019a58:	4443      	add	r3, r8
 8019a5a:	2200      	movs	r2, #0
 8019a5c:	f843 2b04 	str.w	r2, [r3], #4
 8019a60:	429f      	cmp	r7, r3
 8019a62:	d2fb      	bcs.n	8019a5c <__hexnan+0xcc>
 8019a64:	683b      	ldr	r3, [r7, #0]
 8019a66:	b91b      	cbnz	r3, 8019a70 <__hexnan+0xe0>
 8019a68:	4547      	cmp	r7, r8
 8019a6a:	d128      	bne.n	8019abe <__hexnan+0x12e>
 8019a6c:	2301      	movs	r3, #1
 8019a6e:	603b      	str	r3, [r7, #0]
 8019a70:	2005      	movs	r0, #5
 8019a72:	b007      	add	sp, #28
 8019a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a78:	3501      	adds	r5, #1
 8019a7a:	2d08      	cmp	r5, #8
 8019a7c:	f10b 0b01 	add.w	fp, fp, #1
 8019a80:	dd06      	ble.n	8019a90 <__hexnan+0x100>
 8019a82:	4544      	cmp	r4, r8
 8019a84:	d9c1      	bls.n	8019a0a <__hexnan+0x7a>
 8019a86:	2300      	movs	r3, #0
 8019a88:	f844 3c04 	str.w	r3, [r4, #-4]
 8019a8c:	2501      	movs	r5, #1
 8019a8e:	3c04      	subs	r4, #4
 8019a90:	6822      	ldr	r2, [r4, #0]
 8019a92:	f000 000f 	and.w	r0, r0, #15
 8019a96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8019a9a:	6020      	str	r0, [r4, #0]
 8019a9c:	e7b5      	b.n	8019a0a <__hexnan+0x7a>
 8019a9e:	2508      	movs	r5, #8
 8019aa0:	e7b3      	b.n	8019a0a <__hexnan+0x7a>
 8019aa2:	9b01      	ldr	r3, [sp, #4]
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d0dd      	beq.n	8019a64 <__hexnan+0xd4>
 8019aa8:	f1c3 0320 	rsb	r3, r3, #32
 8019aac:	f04f 32ff 	mov.w	r2, #4294967295
 8019ab0:	40da      	lsrs	r2, r3
 8019ab2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8019ab6:	4013      	ands	r3, r2
 8019ab8:	f846 3c04 	str.w	r3, [r6, #-4]
 8019abc:	e7d2      	b.n	8019a64 <__hexnan+0xd4>
 8019abe:	3f04      	subs	r7, #4
 8019ac0:	e7d0      	b.n	8019a64 <__hexnan+0xd4>
 8019ac2:	2004      	movs	r0, #4
 8019ac4:	e7d5      	b.n	8019a72 <__hexnan+0xe2>

08019ac6 <__ascii_mbtowc>:
 8019ac6:	b082      	sub	sp, #8
 8019ac8:	b901      	cbnz	r1, 8019acc <__ascii_mbtowc+0x6>
 8019aca:	a901      	add	r1, sp, #4
 8019acc:	b142      	cbz	r2, 8019ae0 <__ascii_mbtowc+0x1a>
 8019ace:	b14b      	cbz	r3, 8019ae4 <__ascii_mbtowc+0x1e>
 8019ad0:	7813      	ldrb	r3, [r2, #0]
 8019ad2:	600b      	str	r3, [r1, #0]
 8019ad4:	7812      	ldrb	r2, [r2, #0]
 8019ad6:	1e10      	subs	r0, r2, #0
 8019ad8:	bf18      	it	ne
 8019ada:	2001      	movne	r0, #1
 8019adc:	b002      	add	sp, #8
 8019ade:	4770      	bx	lr
 8019ae0:	4610      	mov	r0, r2
 8019ae2:	e7fb      	b.n	8019adc <__ascii_mbtowc+0x16>
 8019ae4:	f06f 0001 	mvn.w	r0, #1
 8019ae8:	e7f8      	b.n	8019adc <__ascii_mbtowc+0x16>
	...

08019aec <_Balloc>:
 8019aec:	b570      	push	{r4, r5, r6, lr}
 8019aee:	69c6      	ldr	r6, [r0, #28]
 8019af0:	4604      	mov	r4, r0
 8019af2:	460d      	mov	r5, r1
 8019af4:	b976      	cbnz	r6, 8019b14 <_Balloc+0x28>
 8019af6:	2010      	movs	r0, #16
 8019af8:	f7fc ff6c 	bl	80169d4 <malloc>
 8019afc:	4602      	mov	r2, r0
 8019afe:	61e0      	str	r0, [r4, #28]
 8019b00:	b920      	cbnz	r0, 8019b0c <_Balloc+0x20>
 8019b02:	4b18      	ldr	r3, [pc, #96]	@ (8019b64 <_Balloc+0x78>)
 8019b04:	4818      	ldr	r0, [pc, #96]	@ (8019b68 <_Balloc+0x7c>)
 8019b06:	216b      	movs	r1, #107	@ 0x6b
 8019b08:	f001 fae2 	bl	801b0d0 <__assert_func>
 8019b0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019b10:	6006      	str	r6, [r0, #0]
 8019b12:	60c6      	str	r6, [r0, #12]
 8019b14:	69e6      	ldr	r6, [r4, #28]
 8019b16:	68f3      	ldr	r3, [r6, #12]
 8019b18:	b183      	cbz	r3, 8019b3c <_Balloc+0x50>
 8019b1a:	69e3      	ldr	r3, [r4, #28]
 8019b1c:	68db      	ldr	r3, [r3, #12]
 8019b1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019b22:	b9b8      	cbnz	r0, 8019b54 <_Balloc+0x68>
 8019b24:	2101      	movs	r1, #1
 8019b26:	fa01 f605 	lsl.w	r6, r1, r5
 8019b2a:	1d72      	adds	r2, r6, #5
 8019b2c:	0092      	lsls	r2, r2, #2
 8019b2e:	4620      	mov	r0, r4
 8019b30:	f001 faec 	bl	801b10c <_calloc_r>
 8019b34:	b160      	cbz	r0, 8019b50 <_Balloc+0x64>
 8019b36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019b3a:	e00e      	b.n	8019b5a <_Balloc+0x6e>
 8019b3c:	2221      	movs	r2, #33	@ 0x21
 8019b3e:	2104      	movs	r1, #4
 8019b40:	4620      	mov	r0, r4
 8019b42:	f001 fae3 	bl	801b10c <_calloc_r>
 8019b46:	69e3      	ldr	r3, [r4, #28]
 8019b48:	60f0      	str	r0, [r6, #12]
 8019b4a:	68db      	ldr	r3, [r3, #12]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d1e4      	bne.n	8019b1a <_Balloc+0x2e>
 8019b50:	2000      	movs	r0, #0
 8019b52:	bd70      	pop	{r4, r5, r6, pc}
 8019b54:	6802      	ldr	r2, [r0, #0]
 8019b56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019b5a:	2300      	movs	r3, #0
 8019b5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019b60:	e7f7      	b.n	8019b52 <_Balloc+0x66>
 8019b62:	bf00      	nop
 8019b64:	0801d93d 	.word	0x0801d93d
 8019b68:	0801da1d 	.word	0x0801da1d

08019b6c <_Bfree>:
 8019b6c:	b570      	push	{r4, r5, r6, lr}
 8019b6e:	69c6      	ldr	r6, [r0, #28]
 8019b70:	4605      	mov	r5, r0
 8019b72:	460c      	mov	r4, r1
 8019b74:	b976      	cbnz	r6, 8019b94 <_Bfree+0x28>
 8019b76:	2010      	movs	r0, #16
 8019b78:	f7fc ff2c 	bl	80169d4 <malloc>
 8019b7c:	4602      	mov	r2, r0
 8019b7e:	61e8      	str	r0, [r5, #28]
 8019b80:	b920      	cbnz	r0, 8019b8c <_Bfree+0x20>
 8019b82:	4b09      	ldr	r3, [pc, #36]	@ (8019ba8 <_Bfree+0x3c>)
 8019b84:	4809      	ldr	r0, [pc, #36]	@ (8019bac <_Bfree+0x40>)
 8019b86:	218f      	movs	r1, #143	@ 0x8f
 8019b88:	f001 faa2 	bl	801b0d0 <__assert_func>
 8019b8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019b90:	6006      	str	r6, [r0, #0]
 8019b92:	60c6      	str	r6, [r0, #12]
 8019b94:	b13c      	cbz	r4, 8019ba6 <_Bfree+0x3a>
 8019b96:	69eb      	ldr	r3, [r5, #28]
 8019b98:	6862      	ldr	r2, [r4, #4]
 8019b9a:	68db      	ldr	r3, [r3, #12]
 8019b9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019ba0:	6021      	str	r1, [r4, #0]
 8019ba2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019ba6:	bd70      	pop	{r4, r5, r6, pc}
 8019ba8:	0801d93d 	.word	0x0801d93d
 8019bac:	0801da1d 	.word	0x0801da1d

08019bb0 <__multadd>:
 8019bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bb4:	690d      	ldr	r5, [r1, #16]
 8019bb6:	4607      	mov	r7, r0
 8019bb8:	460c      	mov	r4, r1
 8019bba:	461e      	mov	r6, r3
 8019bbc:	f101 0c14 	add.w	ip, r1, #20
 8019bc0:	2000      	movs	r0, #0
 8019bc2:	f8dc 3000 	ldr.w	r3, [ip]
 8019bc6:	b299      	uxth	r1, r3
 8019bc8:	fb02 6101 	mla	r1, r2, r1, r6
 8019bcc:	0c1e      	lsrs	r6, r3, #16
 8019bce:	0c0b      	lsrs	r3, r1, #16
 8019bd0:	fb02 3306 	mla	r3, r2, r6, r3
 8019bd4:	b289      	uxth	r1, r1
 8019bd6:	3001      	adds	r0, #1
 8019bd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019bdc:	4285      	cmp	r5, r0
 8019bde:	f84c 1b04 	str.w	r1, [ip], #4
 8019be2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019be6:	dcec      	bgt.n	8019bc2 <__multadd+0x12>
 8019be8:	b30e      	cbz	r6, 8019c2e <__multadd+0x7e>
 8019bea:	68a3      	ldr	r3, [r4, #8]
 8019bec:	42ab      	cmp	r3, r5
 8019bee:	dc19      	bgt.n	8019c24 <__multadd+0x74>
 8019bf0:	6861      	ldr	r1, [r4, #4]
 8019bf2:	4638      	mov	r0, r7
 8019bf4:	3101      	adds	r1, #1
 8019bf6:	f7ff ff79 	bl	8019aec <_Balloc>
 8019bfa:	4680      	mov	r8, r0
 8019bfc:	b928      	cbnz	r0, 8019c0a <__multadd+0x5a>
 8019bfe:	4602      	mov	r2, r0
 8019c00:	4b0c      	ldr	r3, [pc, #48]	@ (8019c34 <__multadd+0x84>)
 8019c02:	480d      	ldr	r0, [pc, #52]	@ (8019c38 <__multadd+0x88>)
 8019c04:	21ba      	movs	r1, #186	@ 0xba
 8019c06:	f001 fa63 	bl	801b0d0 <__assert_func>
 8019c0a:	6922      	ldr	r2, [r4, #16]
 8019c0c:	3202      	adds	r2, #2
 8019c0e:	f104 010c 	add.w	r1, r4, #12
 8019c12:	0092      	lsls	r2, r2, #2
 8019c14:	300c      	adds	r0, #12
 8019c16:	f7fe fd64 	bl	80186e2 <memcpy>
 8019c1a:	4621      	mov	r1, r4
 8019c1c:	4638      	mov	r0, r7
 8019c1e:	f7ff ffa5 	bl	8019b6c <_Bfree>
 8019c22:	4644      	mov	r4, r8
 8019c24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019c28:	3501      	adds	r5, #1
 8019c2a:	615e      	str	r6, [r3, #20]
 8019c2c:	6125      	str	r5, [r4, #16]
 8019c2e:	4620      	mov	r0, r4
 8019c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c34:	0801d9ac 	.word	0x0801d9ac
 8019c38:	0801da1d 	.word	0x0801da1d

08019c3c <__s2b>:
 8019c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c40:	460c      	mov	r4, r1
 8019c42:	4615      	mov	r5, r2
 8019c44:	461f      	mov	r7, r3
 8019c46:	2209      	movs	r2, #9
 8019c48:	3308      	adds	r3, #8
 8019c4a:	4606      	mov	r6, r0
 8019c4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8019c50:	2100      	movs	r1, #0
 8019c52:	2201      	movs	r2, #1
 8019c54:	429a      	cmp	r2, r3
 8019c56:	db09      	blt.n	8019c6c <__s2b+0x30>
 8019c58:	4630      	mov	r0, r6
 8019c5a:	f7ff ff47 	bl	8019aec <_Balloc>
 8019c5e:	b940      	cbnz	r0, 8019c72 <__s2b+0x36>
 8019c60:	4602      	mov	r2, r0
 8019c62:	4b19      	ldr	r3, [pc, #100]	@ (8019cc8 <__s2b+0x8c>)
 8019c64:	4819      	ldr	r0, [pc, #100]	@ (8019ccc <__s2b+0x90>)
 8019c66:	21d3      	movs	r1, #211	@ 0xd3
 8019c68:	f001 fa32 	bl	801b0d0 <__assert_func>
 8019c6c:	0052      	lsls	r2, r2, #1
 8019c6e:	3101      	adds	r1, #1
 8019c70:	e7f0      	b.n	8019c54 <__s2b+0x18>
 8019c72:	9b08      	ldr	r3, [sp, #32]
 8019c74:	6143      	str	r3, [r0, #20]
 8019c76:	2d09      	cmp	r5, #9
 8019c78:	f04f 0301 	mov.w	r3, #1
 8019c7c:	6103      	str	r3, [r0, #16]
 8019c7e:	dd16      	ble.n	8019cae <__s2b+0x72>
 8019c80:	f104 0909 	add.w	r9, r4, #9
 8019c84:	46c8      	mov	r8, r9
 8019c86:	442c      	add	r4, r5
 8019c88:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019c8c:	4601      	mov	r1, r0
 8019c8e:	3b30      	subs	r3, #48	@ 0x30
 8019c90:	220a      	movs	r2, #10
 8019c92:	4630      	mov	r0, r6
 8019c94:	f7ff ff8c 	bl	8019bb0 <__multadd>
 8019c98:	45a0      	cmp	r8, r4
 8019c9a:	d1f5      	bne.n	8019c88 <__s2b+0x4c>
 8019c9c:	f1a5 0408 	sub.w	r4, r5, #8
 8019ca0:	444c      	add	r4, r9
 8019ca2:	1b2d      	subs	r5, r5, r4
 8019ca4:	1963      	adds	r3, r4, r5
 8019ca6:	42bb      	cmp	r3, r7
 8019ca8:	db04      	blt.n	8019cb4 <__s2b+0x78>
 8019caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019cae:	340a      	adds	r4, #10
 8019cb0:	2509      	movs	r5, #9
 8019cb2:	e7f6      	b.n	8019ca2 <__s2b+0x66>
 8019cb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019cb8:	4601      	mov	r1, r0
 8019cba:	3b30      	subs	r3, #48	@ 0x30
 8019cbc:	220a      	movs	r2, #10
 8019cbe:	4630      	mov	r0, r6
 8019cc0:	f7ff ff76 	bl	8019bb0 <__multadd>
 8019cc4:	e7ee      	b.n	8019ca4 <__s2b+0x68>
 8019cc6:	bf00      	nop
 8019cc8:	0801d9ac 	.word	0x0801d9ac
 8019ccc:	0801da1d 	.word	0x0801da1d

08019cd0 <__hi0bits>:
 8019cd0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8019cd4:	4603      	mov	r3, r0
 8019cd6:	bf36      	itet	cc
 8019cd8:	0403      	lslcc	r3, r0, #16
 8019cda:	2000      	movcs	r0, #0
 8019cdc:	2010      	movcc	r0, #16
 8019cde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8019ce2:	bf3c      	itt	cc
 8019ce4:	021b      	lslcc	r3, r3, #8
 8019ce6:	3008      	addcc	r0, #8
 8019ce8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019cec:	bf3c      	itt	cc
 8019cee:	011b      	lslcc	r3, r3, #4
 8019cf0:	3004      	addcc	r0, #4
 8019cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019cf6:	bf3c      	itt	cc
 8019cf8:	009b      	lslcc	r3, r3, #2
 8019cfa:	3002      	addcc	r0, #2
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	db05      	blt.n	8019d0c <__hi0bits+0x3c>
 8019d00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8019d04:	f100 0001 	add.w	r0, r0, #1
 8019d08:	bf08      	it	eq
 8019d0a:	2020      	moveq	r0, #32
 8019d0c:	4770      	bx	lr

08019d0e <__lo0bits>:
 8019d0e:	6803      	ldr	r3, [r0, #0]
 8019d10:	4602      	mov	r2, r0
 8019d12:	f013 0007 	ands.w	r0, r3, #7
 8019d16:	d00b      	beq.n	8019d30 <__lo0bits+0x22>
 8019d18:	07d9      	lsls	r1, r3, #31
 8019d1a:	d421      	bmi.n	8019d60 <__lo0bits+0x52>
 8019d1c:	0798      	lsls	r0, r3, #30
 8019d1e:	bf49      	itett	mi
 8019d20:	085b      	lsrmi	r3, r3, #1
 8019d22:	089b      	lsrpl	r3, r3, #2
 8019d24:	2001      	movmi	r0, #1
 8019d26:	6013      	strmi	r3, [r2, #0]
 8019d28:	bf5c      	itt	pl
 8019d2a:	6013      	strpl	r3, [r2, #0]
 8019d2c:	2002      	movpl	r0, #2
 8019d2e:	4770      	bx	lr
 8019d30:	b299      	uxth	r1, r3
 8019d32:	b909      	cbnz	r1, 8019d38 <__lo0bits+0x2a>
 8019d34:	0c1b      	lsrs	r3, r3, #16
 8019d36:	2010      	movs	r0, #16
 8019d38:	b2d9      	uxtb	r1, r3
 8019d3a:	b909      	cbnz	r1, 8019d40 <__lo0bits+0x32>
 8019d3c:	3008      	adds	r0, #8
 8019d3e:	0a1b      	lsrs	r3, r3, #8
 8019d40:	0719      	lsls	r1, r3, #28
 8019d42:	bf04      	itt	eq
 8019d44:	091b      	lsreq	r3, r3, #4
 8019d46:	3004      	addeq	r0, #4
 8019d48:	0799      	lsls	r1, r3, #30
 8019d4a:	bf04      	itt	eq
 8019d4c:	089b      	lsreq	r3, r3, #2
 8019d4e:	3002      	addeq	r0, #2
 8019d50:	07d9      	lsls	r1, r3, #31
 8019d52:	d403      	bmi.n	8019d5c <__lo0bits+0x4e>
 8019d54:	085b      	lsrs	r3, r3, #1
 8019d56:	f100 0001 	add.w	r0, r0, #1
 8019d5a:	d003      	beq.n	8019d64 <__lo0bits+0x56>
 8019d5c:	6013      	str	r3, [r2, #0]
 8019d5e:	4770      	bx	lr
 8019d60:	2000      	movs	r0, #0
 8019d62:	4770      	bx	lr
 8019d64:	2020      	movs	r0, #32
 8019d66:	4770      	bx	lr

08019d68 <__i2b>:
 8019d68:	b510      	push	{r4, lr}
 8019d6a:	460c      	mov	r4, r1
 8019d6c:	2101      	movs	r1, #1
 8019d6e:	f7ff febd 	bl	8019aec <_Balloc>
 8019d72:	4602      	mov	r2, r0
 8019d74:	b928      	cbnz	r0, 8019d82 <__i2b+0x1a>
 8019d76:	4b05      	ldr	r3, [pc, #20]	@ (8019d8c <__i2b+0x24>)
 8019d78:	4805      	ldr	r0, [pc, #20]	@ (8019d90 <__i2b+0x28>)
 8019d7a:	f240 1145 	movw	r1, #325	@ 0x145
 8019d7e:	f001 f9a7 	bl	801b0d0 <__assert_func>
 8019d82:	2301      	movs	r3, #1
 8019d84:	6144      	str	r4, [r0, #20]
 8019d86:	6103      	str	r3, [r0, #16]
 8019d88:	bd10      	pop	{r4, pc}
 8019d8a:	bf00      	nop
 8019d8c:	0801d9ac 	.word	0x0801d9ac
 8019d90:	0801da1d 	.word	0x0801da1d

08019d94 <__multiply>:
 8019d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d98:	4617      	mov	r7, r2
 8019d9a:	690a      	ldr	r2, [r1, #16]
 8019d9c:	693b      	ldr	r3, [r7, #16]
 8019d9e:	429a      	cmp	r2, r3
 8019da0:	bfa8      	it	ge
 8019da2:	463b      	movge	r3, r7
 8019da4:	4689      	mov	r9, r1
 8019da6:	bfa4      	itt	ge
 8019da8:	460f      	movge	r7, r1
 8019daa:	4699      	movge	r9, r3
 8019dac:	693d      	ldr	r5, [r7, #16]
 8019dae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019db2:	68bb      	ldr	r3, [r7, #8]
 8019db4:	6879      	ldr	r1, [r7, #4]
 8019db6:	eb05 060a 	add.w	r6, r5, sl
 8019dba:	42b3      	cmp	r3, r6
 8019dbc:	b085      	sub	sp, #20
 8019dbe:	bfb8      	it	lt
 8019dc0:	3101      	addlt	r1, #1
 8019dc2:	f7ff fe93 	bl	8019aec <_Balloc>
 8019dc6:	b930      	cbnz	r0, 8019dd6 <__multiply+0x42>
 8019dc8:	4602      	mov	r2, r0
 8019dca:	4b41      	ldr	r3, [pc, #260]	@ (8019ed0 <__multiply+0x13c>)
 8019dcc:	4841      	ldr	r0, [pc, #260]	@ (8019ed4 <__multiply+0x140>)
 8019dce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8019dd2:	f001 f97d 	bl	801b0d0 <__assert_func>
 8019dd6:	f100 0414 	add.w	r4, r0, #20
 8019dda:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8019dde:	4623      	mov	r3, r4
 8019de0:	2200      	movs	r2, #0
 8019de2:	4573      	cmp	r3, lr
 8019de4:	d320      	bcc.n	8019e28 <__multiply+0x94>
 8019de6:	f107 0814 	add.w	r8, r7, #20
 8019dea:	f109 0114 	add.w	r1, r9, #20
 8019dee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8019df2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8019df6:	9302      	str	r3, [sp, #8]
 8019df8:	1beb      	subs	r3, r5, r7
 8019dfa:	3b15      	subs	r3, #21
 8019dfc:	f023 0303 	bic.w	r3, r3, #3
 8019e00:	3304      	adds	r3, #4
 8019e02:	3715      	adds	r7, #21
 8019e04:	42bd      	cmp	r5, r7
 8019e06:	bf38      	it	cc
 8019e08:	2304      	movcc	r3, #4
 8019e0a:	9301      	str	r3, [sp, #4]
 8019e0c:	9b02      	ldr	r3, [sp, #8]
 8019e0e:	9103      	str	r1, [sp, #12]
 8019e10:	428b      	cmp	r3, r1
 8019e12:	d80c      	bhi.n	8019e2e <__multiply+0x9a>
 8019e14:	2e00      	cmp	r6, #0
 8019e16:	dd03      	ble.n	8019e20 <__multiply+0x8c>
 8019e18:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d055      	beq.n	8019ecc <__multiply+0x138>
 8019e20:	6106      	str	r6, [r0, #16]
 8019e22:	b005      	add	sp, #20
 8019e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e28:	f843 2b04 	str.w	r2, [r3], #4
 8019e2c:	e7d9      	b.n	8019de2 <__multiply+0x4e>
 8019e2e:	f8b1 a000 	ldrh.w	sl, [r1]
 8019e32:	f1ba 0f00 	cmp.w	sl, #0
 8019e36:	d01f      	beq.n	8019e78 <__multiply+0xe4>
 8019e38:	46c4      	mov	ip, r8
 8019e3a:	46a1      	mov	r9, r4
 8019e3c:	2700      	movs	r7, #0
 8019e3e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8019e42:	f8d9 3000 	ldr.w	r3, [r9]
 8019e46:	fa1f fb82 	uxth.w	fp, r2
 8019e4a:	b29b      	uxth	r3, r3
 8019e4c:	fb0a 330b 	mla	r3, sl, fp, r3
 8019e50:	443b      	add	r3, r7
 8019e52:	f8d9 7000 	ldr.w	r7, [r9]
 8019e56:	0c12      	lsrs	r2, r2, #16
 8019e58:	0c3f      	lsrs	r7, r7, #16
 8019e5a:	fb0a 7202 	mla	r2, sl, r2, r7
 8019e5e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8019e62:	b29b      	uxth	r3, r3
 8019e64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019e68:	4565      	cmp	r5, ip
 8019e6a:	f849 3b04 	str.w	r3, [r9], #4
 8019e6e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8019e72:	d8e4      	bhi.n	8019e3e <__multiply+0xaa>
 8019e74:	9b01      	ldr	r3, [sp, #4]
 8019e76:	50e7      	str	r7, [r4, r3]
 8019e78:	9b03      	ldr	r3, [sp, #12]
 8019e7a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8019e7e:	3104      	adds	r1, #4
 8019e80:	f1b9 0f00 	cmp.w	r9, #0
 8019e84:	d020      	beq.n	8019ec8 <__multiply+0x134>
 8019e86:	6823      	ldr	r3, [r4, #0]
 8019e88:	4647      	mov	r7, r8
 8019e8a:	46a4      	mov	ip, r4
 8019e8c:	f04f 0a00 	mov.w	sl, #0
 8019e90:	f8b7 b000 	ldrh.w	fp, [r7]
 8019e94:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8019e98:	fb09 220b 	mla	r2, r9, fp, r2
 8019e9c:	4452      	add	r2, sl
 8019e9e:	b29b      	uxth	r3, r3
 8019ea0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019ea4:	f84c 3b04 	str.w	r3, [ip], #4
 8019ea8:	f857 3b04 	ldr.w	r3, [r7], #4
 8019eac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019eb0:	f8bc 3000 	ldrh.w	r3, [ip]
 8019eb4:	fb09 330a 	mla	r3, r9, sl, r3
 8019eb8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8019ebc:	42bd      	cmp	r5, r7
 8019ebe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019ec2:	d8e5      	bhi.n	8019e90 <__multiply+0xfc>
 8019ec4:	9a01      	ldr	r2, [sp, #4]
 8019ec6:	50a3      	str	r3, [r4, r2]
 8019ec8:	3404      	adds	r4, #4
 8019eca:	e79f      	b.n	8019e0c <__multiply+0x78>
 8019ecc:	3e01      	subs	r6, #1
 8019ece:	e7a1      	b.n	8019e14 <__multiply+0x80>
 8019ed0:	0801d9ac 	.word	0x0801d9ac
 8019ed4:	0801da1d 	.word	0x0801da1d

08019ed8 <__pow5mult>:
 8019ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019edc:	4615      	mov	r5, r2
 8019ede:	f012 0203 	ands.w	r2, r2, #3
 8019ee2:	4607      	mov	r7, r0
 8019ee4:	460e      	mov	r6, r1
 8019ee6:	d007      	beq.n	8019ef8 <__pow5mult+0x20>
 8019ee8:	4c25      	ldr	r4, [pc, #148]	@ (8019f80 <__pow5mult+0xa8>)
 8019eea:	3a01      	subs	r2, #1
 8019eec:	2300      	movs	r3, #0
 8019eee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019ef2:	f7ff fe5d 	bl	8019bb0 <__multadd>
 8019ef6:	4606      	mov	r6, r0
 8019ef8:	10ad      	asrs	r5, r5, #2
 8019efa:	d03d      	beq.n	8019f78 <__pow5mult+0xa0>
 8019efc:	69fc      	ldr	r4, [r7, #28]
 8019efe:	b97c      	cbnz	r4, 8019f20 <__pow5mult+0x48>
 8019f00:	2010      	movs	r0, #16
 8019f02:	f7fc fd67 	bl	80169d4 <malloc>
 8019f06:	4602      	mov	r2, r0
 8019f08:	61f8      	str	r0, [r7, #28]
 8019f0a:	b928      	cbnz	r0, 8019f18 <__pow5mult+0x40>
 8019f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8019f84 <__pow5mult+0xac>)
 8019f0e:	481e      	ldr	r0, [pc, #120]	@ (8019f88 <__pow5mult+0xb0>)
 8019f10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8019f14:	f001 f8dc 	bl	801b0d0 <__assert_func>
 8019f18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019f1c:	6004      	str	r4, [r0, #0]
 8019f1e:	60c4      	str	r4, [r0, #12]
 8019f20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8019f24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019f28:	b94c      	cbnz	r4, 8019f3e <__pow5mult+0x66>
 8019f2a:	f240 2171 	movw	r1, #625	@ 0x271
 8019f2e:	4638      	mov	r0, r7
 8019f30:	f7ff ff1a 	bl	8019d68 <__i2b>
 8019f34:	2300      	movs	r3, #0
 8019f36:	f8c8 0008 	str.w	r0, [r8, #8]
 8019f3a:	4604      	mov	r4, r0
 8019f3c:	6003      	str	r3, [r0, #0]
 8019f3e:	f04f 0900 	mov.w	r9, #0
 8019f42:	07eb      	lsls	r3, r5, #31
 8019f44:	d50a      	bpl.n	8019f5c <__pow5mult+0x84>
 8019f46:	4631      	mov	r1, r6
 8019f48:	4622      	mov	r2, r4
 8019f4a:	4638      	mov	r0, r7
 8019f4c:	f7ff ff22 	bl	8019d94 <__multiply>
 8019f50:	4631      	mov	r1, r6
 8019f52:	4680      	mov	r8, r0
 8019f54:	4638      	mov	r0, r7
 8019f56:	f7ff fe09 	bl	8019b6c <_Bfree>
 8019f5a:	4646      	mov	r6, r8
 8019f5c:	106d      	asrs	r5, r5, #1
 8019f5e:	d00b      	beq.n	8019f78 <__pow5mult+0xa0>
 8019f60:	6820      	ldr	r0, [r4, #0]
 8019f62:	b938      	cbnz	r0, 8019f74 <__pow5mult+0x9c>
 8019f64:	4622      	mov	r2, r4
 8019f66:	4621      	mov	r1, r4
 8019f68:	4638      	mov	r0, r7
 8019f6a:	f7ff ff13 	bl	8019d94 <__multiply>
 8019f6e:	6020      	str	r0, [r4, #0]
 8019f70:	f8c0 9000 	str.w	r9, [r0]
 8019f74:	4604      	mov	r4, r0
 8019f76:	e7e4      	b.n	8019f42 <__pow5mult+0x6a>
 8019f78:	4630      	mov	r0, r6
 8019f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f7e:	bf00      	nop
 8019f80:	0801dc34 	.word	0x0801dc34
 8019f84:	0801d93d 	.word	0x0801d93d
 8019f88:	0801da1d 	.word	0x0801da1d

08019f8c <__lshift>:
 8019f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f90:	460c      	mov	r4, r1
 8019f92:	6849      	ldr	r1, [r1, #4]
 8019f94:	6923      	ldr	r3, [r4, #16]
 8019f96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019f9a:	68a3      	ldr	r3, [r4, #8]
 8019f9c:	4607      	mov	r7, r0
 8019f9e:	4691      	mov	r9, r2
 8019fa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019fa4:	f108 0601 	add.w	r6, r8, #1
 8019fa8:	42b3      	cmp	r3, r6
 8019faa:	db0b      	blt.n	8019fc4 <__lshift+0x38>
 8019fac:	4638      	mov	r0, r7
 8019fae:	f7ff fd9d 	bl	8019aec <_Balloc>
 8019fb2:	4605      	mov	r5, r0
 8019fb4:	b948      	cbnz	r0, 8019fca <__lshift+0x3e>
 8019fb6:	4602      	mov	r2, r0
 8019fb8:	4b28      	ldr	r3, [pc, #160]	@ (801a05c <__lshift+0xd0>)
 8019fba:	4829      	ldr	r0, [pc, #164]	@ (801a060 <__lshift+0xd4>)
 8019fbc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8019fc0:	f001 f886 	bl	801b0d0 <__assert_func>
 8019fc4:	3101      	adds	r1, #1
 8019fc6:	005b      	lsls	r3, r3, #1
 8019fc8:	e7ee      	b.n	8019fa8 <__lshift+0x1c>
 8019fca:	2300      	movs	r3, #0
 8019fcc:	f100 0114 	add.w	r1, r0, #20
 8019fd0:	f100 0210 	add.w	r2, r0, #16
 8019fd4:	4618      	mov	r0, r3
 8019fd6:	4553      	cmp	r3, sl
 8019fd8:	db33      	blt.n	801a042 <__lshift+0xb6>
 8019fda:	6920      	ldr	r0, [r4, #16]
 8019fdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019fe0:	f104 0314 	add.w	r3, r4, #20
 8019fe4:	f019 091f 	ands.w	r9, r9, #31
 8019fe8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019fec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019ff0:	d02b      	beq.n	801a04a <__lshift+0xbe>
 8019ff2:	f1c9 0e20 	rsb	lr, r9, #32
 8019ff6:	468a      	mov	sl, r1
 8019ff8:	2200      	movs	r2, #0
 8019ffa:	6818      	ldr	r0, [r3, #0]
 8019ffc:	fa00 f009 	lsl.w	r0, r0, r9
 801a000:	4310      	orrs	r0, r2
 801a002:	f84a 0b04 	str.w	r0, [sl], #4
 801a006:	f853 2b04 	ldr.w	r2, [r3], #4
 801a00a:	459c      	cmp	ip, r3
 801a00c:	fa22 f20e 	lsr.w	r2, r2, lr
 801a010:	d8f3      	bhi.n	8019ffa <__lshift+0x6e>
 801a012:	ebac 0304 	sub.w	r3, ip, r4
 801a016:	3b15      	subs	r3, #21
 801a018:	f023 0303 	bic.w	r3, r3, #3
 801a01c:	3304      	adds	r3, #4
 801a01e:	f104 0015 	add.w	r0, r4, #21
 801a022:	4560      	cmp	r0, ip
 801a024:	bf88      	it	hi
 801a026:	2304      	movhi	r3, #4
 801a028:	50ca      	str	r2, [r1, r3]
 801a02a:	b10a      	cbz	r2, 801a030 <__lshift+0xa4>
 801a02c:	f108 0602 	add.w	r6, r8, #2
 801a030:	3e01      	subs	r6, #1
 801a032:	4638      	mov	r0, r7
 801a034:	612e      	str	r6, [r5, #16]
 801a036:	4621      	mov	r1, r4
 801a038:	f7ff fd98 	bl	8019b6c <_Bfree>
 801a03c:	4628      	mov	r0, r5
 801a03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a042:	f842 0f04 	str.w	r0, [r2, #4]!
 801a046:	3301      	adds	r3, #1
 801a048:	e7c5      	b.n	8019fd6 <__lshift+0x4a>
 801a04a:	3904      	subs	r1, #4
 801a04c:	f853 2b04 	ldr.w	r2, [r3], #4
 801a050:	f841 2f04 	str.w	r2, [r1, #4]!
 801a054:	459c      	cmp	ip, r3
 801a056:	d8f9      	bhi.n	801a04c <__lshift+0xc0>
 801a058:	e7ea      	b.n	801a030 <__lshift+0xa4>
 801a05a:	bf00      	nop
 801a05c:	0801d9ac 	.word	0x0801d9ac
 801a060:	0801da1d 	.word	0x0801da1d

0801a064 <__mcmp>:
 801a064:	690a      	ldr	r2, [r1, #16]
 801a066:	4603      	mov	r3, r0
 801a068:	6900      	ldr	r0, [r0, #16]
 801a06a:	1a80      	subs	r0, r0, r2
 801a06c:	b530      	push	{r4, r5, lr}
 801a06e:	d10e      	bne.n	801a08e <__mcmp+0x2a>
 801a070:	3314      	adds	r3, #20
 801a072:	3114      	adds	r1, #20
 801a074:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801a078:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801a07c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a080:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a084:	4295      	cmp	r5, r2
 801a086:	d003      	beq.n	801a090 <__mcmp+0x2c>
 801a088:	d205      	bcs.n	801a096 <__mcmp+0x32>
 801a08a:	f04f 30ff 	mov.w	r0, #4294967295
 801a08e:	bd30      	pop	{r4, r5, pc}
 801a090:	42a3      	cmp	r3, r4
 801a092:	d3f3      	bcc.n	801a07c <__mcmp+0x18>
 801a094:	e7fb      	b.n	801a08e <__mcmp+0x2a>
 801a096:	2001      	movs	r0, #1
 801a098:	e7f9      	b.n	801a08e <__mcmp+0x2a>
	...

0801a09c <__mdiff>:
 801a09c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0a0:	4689      	mov	r9, r1
 801a0a2:	4606      	mov	r6, r0
 801a0a4:	4611      	mov	r1, r2
 801a0a6:	4648      	mov	r0, r9
 801a0a8:	4614      	mov	r4, r2
 801a0aa:	f7ff ffdb 	bl	801a064 <__mcmp>
 801a0ae:	1e05      	subs	r5, r0, #0
 801a0b0:	d112      	bne.n	801a0d8 <__mdiff+0x3c>
 801a0b2:	4629      	mov	r1, r5
 801a0b4:	4630      	mov	r0, r6
 801a0b6:	f7ff fd19 	bl	8019aec <_Balloc>
 801a0ba:	4602      	mov	r2, r0
 801a0bc:	b928      	cbnz	r0, 801a0ca <__mdiff+0x2e>
 801a0be:	4b3f      	ldr	r3, [pc, #252]	@ (801a1bc <__mdiff+0x120>)
 801a0c0:	f240 2137 	movw	r1, #567	@ 0x237
 801a0c4:	483e      	ldr	r0, [pc, #248]	@ (801a1c0 <__mdiff+0x124>)
 801a0c6:	f001 f803 	bl	801b0d0 <__assert_func>
 801a0ca:	2301      	movs	r3, #1
 801a0cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a0d0:	4610      	mov	r0, r2
 801a0d2:	b003      	add	sp, #12
 801a0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0d8:	bfbc      	itt	lt
 801a0da:	464b      	movlt	r3, r9
 801a0dc:	46a1      	movlt	r9, r4
 801a0de:	4630      	mov	r0, r6
 801a0e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801a0e4:	bfba      	itte	lt
 801a0e6:	461c      	movlt	r4, r3
 801a0e8:	2501      	movlt	r5, #1
 801a0ea:	2500      	movge	r5, #0
 801a0ec:	f7ff fcfe 	bl	8019aec <_Balloc>
 801a0f0:	4602      	mov	r2, r0
 801a0f2:	b918      	cbnz	r0, 801a0fc <__mdiff+0x60>
 801a0f4:	4b31      	ldr	r3, [pc, #196]	@ (801a1bc <__mdiff+0x120>)
 801a0f6:	f240 2145 	movw	r1, #581	@ 0x245
 801a0fa:	e7e3      	b.n	801a0c4 <__mdiff+0x28>
 801a0fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801a100:	6926      	ldr	r6, [r4, #16]
 801a102:	60c5      	str	r5, [r0, #12]
 801a104:	f109 0310 	add.w	r3, r9, #16
 801a108:	f109 0514 	add.w	r5, r9, #20
 801a10c:	f104 0e14 	add.w	lr, r4, #20
 801a110:	f100 0b14 	add.w	fp, r0, #20
 801a114:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801a118:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801a11c:	9301      	str	r3, [sp, #4]
 801a11e:	46d9      	mov	r9, fp
 801a120:	f04f 0c00 	mov.w	ip, #0
 801a124:	9b01      	ldr	r3, [sp, #4]
 801a126:	f85e 0b04 	ldr.w	r0, [lr], #4
 801a12a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801a12e:	9301      	str	r3, [sp, #4]
 801a130:	fa1f f38a 	uxth.w	r3, sl
 801a134:	4619      	mov	r1, r3
 801a136:	b283      	uxth	r3, r0
 801a138:	1acb      	subs	r3, r1, r3
 801a13a:	0c00      	lsrs	r0, r0, #16
 801a13c:	4463      	add	r3, ip
 801a13e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801a142:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801a146:	b29b      	uxth	r3, r3
 801a148:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801a14c:	4576      	cmp	r6, lr
 801a14e:	f849 3b04 	str.w	r3, [r9], #4
 801a152:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a156:	d8e5      	bhi.n	801a124 <__mdiff+0x88>
 801a158:	1b33      	subs	r3, r6, r4
 801a15a:	3b15      	subs	r3, #21
 801a15c:	f023 0303 	bic.w	r3, r3, #3
 801a160:	3415      	adds	r4, #21
 801a162:	3304      	adds	r3, #4
 801a164:	42a6      	cmp	r6, r4
 801a166:	bf38      	it	cc
 801a168:	2304      	movcc	r3, #4
 801a16a:	441d      	add	r5, r3
 801a16c:	445b      	add	r3, fp
 801a16e:	461e      	mov	r6, r3
 801a170:	462c      	mov	r4, r5
 801a172:	4544      	cmp	r4, r8
 801a174:	d30e      	bcc.n	801a194 <__mdiff+0xf8>
 801a176:	f108 0103 	add.w	r1, r8, #3
 801a17a:	1b49      	subs	r1, r1, r5
 801a17c:	f021 0103 	bic.w	r1, r1, #3
 801a180:	3d03      	subs	r5, #3
 801a182:	45a8      	cmp	r8, r5
 801a184:	bf38      	it	cc
 801a186:	2100      	movcc	r1, #0
 801a188:	440b      	add	r3, r1
 801a18a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a18e:	b191      	cbz	r1, 801a1b6 <__mdiff+0x11a>
 801a190:	6117      	str	r7, [r2, #16]
 801a192:	e79d      	b.n	801a0d0 <__mdiff+0x34>
 801a194:	f854 1b04 	ldr.w	r1, [r4], #4
 801a198:	46e6      	mov	lr, ip
 801a19a:	0c08      	lsrs	r0, r1, #16
 801a19c:	fa1c fc81 	uxtah	ip, ip, r1
 801a1a0:	4471      	add	r1, lr
 801a1a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801a1a6:	b289      	uxth	r1, r1
 801a1a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801a1ac:	f846 1b04 	str.w	r1, [r6], #4
 801a1b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a1b4:	e7dd      	b.n	801a172 <__mdiff+0xd6>
 801a1b6:	3f01      	subs	r7, #1
 801a1b8:	e7e7      	b.n	801a18a <__mdiff+0xee>
 801a1ba:	bf00      	nop
 801a1bc:	0801d9ac 	.word	0x0801d9ac
 801a1c0:	0801da1d 	.word	0x0801da1d

0801a1c4 <__ulp>:
 801a1c4:	b082      	sub	sp, #8
 801a1c6:	ed8d 0b00 	vstr	d0, [sp]
 801a1ca:	9a01      	ldr	r2, [sp, #4]
 801a1cc:	4b0f      	ldr	r3, [pc, #60]	@ (801a20c <__ulp+0x48>)
 801a1ce:	4013      	ands	r3, r2
 801a1d0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	dc08      	bgt.n	801a1ea <__ulp+0x26>
 801a1d8:	425b      	negs	r3, r3
 801a1da:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801a1de:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a1e2:	da04      	bge.n	801a1ee <__ulp+0x2a>
 801a1e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801a1e8:	4113      	asrs	r3, r2
 801a1ea:	2200      	movs	r2, #0
 801a1ec:	e008      	b.n	801a200 <__ulp+0x3c>
 801a1ee:	f1a2 0314 	sub.w	r3, r2, #20
 801a1f2:	2b1e      	cmp	r3, #30
 801a1f4:	bfda      	itte	le
 801a1f6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801a1fa:	40da      	lsrle	r2, r3
 801a1fc:	2201      	movgt	r2, #1
 801a1fe:	2300      	movs	r3, #0
 801a200:	4619      	mov	r1, r3
 801a202:	4610      	mov	r0, r2
 801a204:	ec41 0b10 	vmov	d0, r0, r1
 801a208:	b002      	add	sp, #8
 801a20a:	4770      	bx	lr
 801a20c:	7ff00000 	.word	0x7ff00000

0801a210 <__b2d>:
 801a210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a214:	6906      	ldr	r6, [r0, #16]
 801a216:	f100 0814 	add.w	r8, r0, #20
 801a21a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801a21e:	1f37      	subs	r7, r6, #4
 801a220:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a224:	4610      	mov	r0, r2
 801a226:	f7ff fd53 	bl	8019cd0 <__hi0bits>
 801a22a:	f1c0 0320 	rsb	r3, r0, #32
 801a22e:	280a      	cmp	r0, #10
 801a230:	600b      	str	r3, [r1, #0]
 801a232:	491b      	ldr	r1, [pc, #108]	@ (801a2a0 <__b2d+0x90>)
 801a234:	dc15      	bgt.n	801a262 <__b2d+0x52>
 801a236:	f1c0 0c0b 	rsb	ip, r0, #11
 801a23a:	fa22 f30c 	lsr.w	r3, r2, ip
 801a23e:	45b8      	cmp	r8, r7
 801a240:	ea43 0501 	orr.w	r5, r3, r1
 801a244:	bf34      	ite	cc
 801a246:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a24a:	2300      	movcs	r3, #0
 801a24c:	3015      	adds	r0, #21
 801a24e:	fa02 f000 	lsl.w	r0, r2, r0
 801a252:	fa23 f30c 	lsr.w	r3, r3, ip
 801a256:	4303      	orrs	r3, r0
 801a258:	461c      	mov	r4, r3
 801a25a:	ec45 4b10 	vmov	d0, r4, r5
 801a25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a262:	45b8      	cmp	r8, r7
 801a264:	bf3a      	itte	cc
 801a266:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a26a:	f1a6 0708 	subcc.w	r7, r6, #8
 801a26e:	2300      	movcs	r3, #0
 801a270:	380b      	subs	r0, #11
 801a272:	d012      	beq.n	801a29a <__b2d+0x8a>
 801a274:	f1c0 0120 	rsb	r1, r0, #32
 801a278:	fa23 f401 	lsr.w	r4, r3, r1
 801a27c:	4082      	lsls	r2, r0
 801a27e:	4322      	orrs	r2, r4
 801a280:	4547      	cmp	r7, r8
 801a282:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801a286:	bf8c      	ite	hi
 801a288:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801a28c:	2200      	movls	r2, #0
 801a28e:	4083      	lsls	r3, r0
 801a290:	40ca      	lsrs	r2, r1
 801a292:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801a296:	4313      	orrs	r3, r2
 801a298:	e7de      	b.n	801a258 <__b2d+0x48>
 801a29a:	ea42 0501 	orr.w	r5, r2, r1
 801a29e:	e7db      	b.n	801a258 <__b2d+0x48>
 801a2a0:	3ff00000 	.word	0x3ff00000

0801a2a4 <__d2b>:
 801a2a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a2a8:	460f      	mov	r7, r1
 801a2aa:	2101      	movs	r1, #1
 801a2ac:	ec59 8b10 	vmov	r8, r9, d0
 801a2b0:	4616      	mov	r6, r2
 801a2b2:	f7ff fc1b 	bl	8019aec <_Balloc>
 801a2b6:	4604      	mov	r4, r0
 801a2b8:	b930      	cbnz	r0, 801a2c8 <__d2b+0x24>
 801a2ba:	4602      	mov	r2, r0
 801a2bc:	4b23      	ldr	r3, [pc, #140]	@ (801a34c <__d2b+0xa8>)
 801a2be:	4824      	ldr	r0, [pc, #144]	@ (801a350 <__d2b+0xac>)
 801a2c0:	f240 310f 	movw	r1, #783	@ 0x30f
 801a2c4:	f000 ff04 	bl	801b0d0 <__assert_func>
 801a2c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a2cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a2d0:	b10d      	cbz	r5, 801a2d6 <__d2b+0x32>
 801a2d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a2d6:	9301      	str	r3, [sp, #4]
 801a2d8:	f1b8 0300 	subs.w	r3, r8, #0
 801a2dc:	d023      	beq.n	801a326 <__d2b+0x82>
 801a2de:	4668      	mov	r0, sp
 801a2e0:	9300      	str	r3, [sp, #0]
 801a2e2:	f7ff fd14 	bl	8019d0e <__lo0bits>
 801a2e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a2ea:	b1d0      	cbz	r0, 801a322 <__d2b+0x7e>
 801a2ec:	f1c0 0320 	rsb	r3, r0, #32
 801a2f0:	fa02 f303 	lsl.w	r3, r2, r3
 801a2f4:	430b      	orrs	r3, r1
 801a2f6:	40c2      	lsrs	r2, r0
 801a2f8:	6163      	str	r3, [r4, #20]
 801a2fa:	9201      	str	r2, [sp, #4]
 801a2fc:	9b01      	ldr	r3, [sp, #4]
 801a2fe:	61a3      	str	r3, [r4, #24]
 801a300:	2b00      	cmp	r3, #0
 801a302:	bf0c      	ite	eq
 801a304:	2201      	moveq	r2, #1
 801a306:	2202      	movne	r2, #2
 801a308:	6122      	str	r2, [r4, #16]
 801a30a:	b1a5      	cbz	r5, 801a336 <__d2b+0x92>
 801a30c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801a310:	4405      	add	r5, r0
 801a312:	603d      	str	r5, [r7, #0]
 801a314:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801a318:	6030      	str	r0, [r6, #0]
 801a31a:	4620      	mov	r0, r4
 801a31c:	b003      	add	sp, #12
 801a31e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a322:	6161      	str	r1, [r4, #20]
 801a324:	e7ea      	b.n	801a2fc <__d2b+0x58>
 801a326:	a801      	add	r0, sp, #4
 801a328:	f7ff fcf1 	bl	8019d0e <__lo0bits>
 801a32c:	9b01      	ldr	r3, [sp, #4]
 801a32e:	6163      	str	r3, [r4, #20]
 801a330:	3020      	adds	r0, #32
 801a332:	2201      	movs	r2, #1
 801a334:	e7e8      	b.n	801a308 <__d2b+0x64>
 801a336:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a33a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801a33e:	6038      	str	r0, [r7, #0]
 801a340:	6918      	ldr	r0, [r3, #16]
 801a342:	f7ff fcc5 	bl	8019cd0 <__hi0bits>
 801a346:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a34a:	e7e5      	b.n	801a318 <__d2b+0x74>
 801a34c:	0801d9ac 	.word	0x0801d9ac
 801a350:	0801da1d 	.word	0x0801da1d

0801a354 <__ratio>:
 801a354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a358:	b085      	sub	sp, #20
 801a35a:	e9cd 1000 	strd	r1, r0, [sp]
 801a35e:	a902      	add	r1, sp, #8
 801a360:	f7ff ff56 	bl	801a210 <__b2d>
 801a364:	9800      	ldr	r0, [sp, #0]
 801a366:	a903      	add	r1, sp, #12
 801a368:	ec55 4b10 	vmov	r4, r5, d0
 801a36c:	f7ff ff50 	bl	801a210 <__b2d>
 801a370:	9b01      	ldr	r3, [sp, #4]
 801a372:	6919      	ldr	r1, [r3, #16]
 801a374:	9b00      	ldr	r3, [sp, #0]
 801a376:	691b      	ldr	r3, [r3, #16]
 801a378:	1ac9      	subs	r1, r1, r3
 801a37a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801a37e:	1a9b      	subs	r3, r3, r2
 801a380:	ec5b ab10 	vmov	sl, fp, d0
 801a384:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801a388:	2b00      	cmp	r3, #0
 801a38a:	bfce      	itee	gt
 801a38c:	462a      	movgt	r2, r5
 801a38e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a392:	465a      	movle	r2, fp
 801a394:	462f      	mov	r7, r5
 801a396:	46d9      	mov	r9, fp
 801a398:	bfcc      	ite	gt
 801a39a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a39e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801a3a2:	464b      	mov	r3, r9
 801a3a4:	4652      	mov	r2, sl
 801a3a6:	4620      	mov	r0, r4
 801a3a8:	4639      	mov	r1, r7
 801a3aa:	f7ee fa7f 	bl	80088ac <__aeabi_ddiv>
 801a3ae:	ec41 0b10 	vmov	d0, r0, r1
 801a3b2:	b005      	add	sp, #20
 801a3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a3b8 <__copybits>:
 801a3b8:	3901      	subs	r1, #1
 801a3ba:	b570      	push	{r4, r5, r6, lr}
 801a3bc:	1149      	asrs	r1, r1, #5
 801a3be:	6914      	ldr	r4, [r2, #16]
 801a3c0:	3101      	adds	r1, #1
 801a3c2:	f102 0314 	add.w	r3, r2, #20
 801a3c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a3ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a3ce:	1f05      	subs	r5, r0, #4
 801a3d0:	42a3      	cmp	r3, r4
 801a3d2:	d30c      	bcc.n	801a3ee <__copybits+0x36>
 801a3d4:	1aa3      	subs	r3, r4, r2
 801a3d6:	3b11      	subs	r3, #17
 801a3d8:	f023 0303 	bic.w	r3, r3, #3
 801a3dc:	3211      	adds	r2, #17
 801a3de:	42a2      	cmp	r2, r4
 801a3e0:	bf88      	it	hi
 801a3e2:	2300      	movhi	r3, #0
 801a3e4:	4418      	add	r0, r3
 801a3e6:	2300      	movs	r3, #0
 801a3e8:	4288      	cmp	r0, r1
 801a3ea:	d305      	bcc.n	801a3f8 <__copybits+0x40>
 801a3ec:	bd70      	pop	{r4, r5, r6, pc}
 801a3ee:	f853 6b04 	ldr.w	r6, [r3], #4
 801a3f2:	f845 6f04 	str.w	r6, [r5, #4]!
 801a3f6:	e7eb      	b.n	801a3d0 <__copybits+0x18>
 801a3f8:	f840 3b04 	str.w	r3, [r0], #4
 801a3fc:	e7f4      	b.n	801a3e8 <__copybits+0x30>

0801a3fe <__any_on>:
 801a3fe:	f100 0214 	add.w	r2, r0, #20
 801a402:	6900      	ldr	r0, [r0, #16]
 801a404:	114b      	asrs	r3, r1, #5
 801a406:	4298      	cmp	r0, r3
 801a408:	b510      	push	{r4, lr}
 801a40a:	db11      	blt.n	801a430 <__any_on+0x32>
 801a40c:	dd0a      	ble.n	801a424 <__any_on+0x26>
 801a40e:	f011 011f 	ands.w	r1, r1, #31
 801a412:	d007      	beq.n	801a424 <__any_on+0x26>
 801a414:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a418:	fa24 f001 	lsr.w	r0, r4, r1
 801a41c:	fa00 f101 	lsl.w	r1, r0, r1
 801a420:	428c      	cmp	r4, r1
 801a422:	d10b      	bne.n	801a43c <__any_on+0x3e>
 801a424:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a428:	4293      	cmp	r3, r2
 801a42a:	d803      	bhi.n	801a434 <__any_on+0x36>
 801a42c:	2000      	movs	r0, #0
 801a42e:	bd10      	pop	{r4, pc}
 801a430:	4603      	mov	r3, r0
 801a432:	e7f7      	b.n	801a424 <__any_on+0x26>
 801a434:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a438:	2900      	cmp	r1, #0
 801a43a:	d0f5      	beq.n	801a428 <__any_on+0x2a>
 801a43c:	2001      	movs	r0, #1
 801a43e:	e7f6      	b.n	801a42e <__any_on+0x30>

0801a440 <_malloc_usable_size_r>:
 801a440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a444:	1f18      	subs	r0, r3, #4
 801a446:	2b00      	cmp	r3, #0
 801a448:	bfbc      	itt	lt
 801a44a:	580b      	ldrlt	r3, [r1, r0]
 801a44c:	18c0      	addlt	r0, r0, r3
 801a44e:	4770      	bx	lr

0801a450 <__ascii_wctomb>:
 801a450:	4603      	mov	r3, r0
 801a452:	4608      	mov	r0, r1
 801a454:	b141      	cbz	r1, 801a468 <__ascii_wctomb+0x18>
 801a456:	2aff      	cmp	r2, #255	@ 0xff
 801a458:	d904      	bls.n	801a464 <__ascii_wctomb+0x14>
 801a45a:	228a      	movs	r2, #138	@ 0x8a
 801a45c:	601a      	str	r2, [r3, #0]
 801a45e:	f04f 30ff 	mov.w	r0, #4294967295
 801a462:	4770      	bx	lr
 801a464:	700a      	strb	r2, [r1, #0]
 801a466:	2001      	movs	r0, #1
 801a468:	4770      	bx	lr

0801a46a <__ssputs_r>:
 801a46a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a46e:	688e      	ldr	r6, [r1, #8]
 801a470:	461f      	mov	r7, r3
 801a472:	42be      	cmp	r6, r7
 801a474:	680b      	ldr	r3, [r1, #0]
 801a476:	4682      	mov	sl, r0
 801a478:	460c      	mov	r4, r1
 801a47a:	4690      	mov	r8, r2
 801a47c:	d82d      	bhi.n	801a4da <__ssputs_r+0x70>
 801a47e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a482:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a486:	d026      	beq.n	801a4d6 <__ssputs_r+0x6c>
 801a488:	6965      	ldr	r5, [r4, #20]
 801a48a:	6909      	ldr	r1, [r1, #16]
 801a48c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a490:	eba3 0901 	sub.w	r9, r3, r1
 801a494:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a498:	1c7b      	adds	r3, r7, #1
 801a49a:	444b      	add	r3, r9
 801a49c:	106d      	asrs	r5, r5, #1
 801a49e:	429d      	cmp	r5, r3
 801a4a0:	bf38      	it	cc
 801a4a2:	461d      	movcc	r5, r3
 801a4a4:	0553      	lsls	r3, r2, #21
 801a4a6:	d527      	bpl.n	801a4f8 <__ssputs_r+0x8e>
 801a4a8:	4629      	mov	r1, r5
 801a4aa:	f7fc fac5 	bl	8016a38 <_malloc_r>
 801a4ae:	4606      	mov	r6, r0
 801a4b0:	b360      	cbz	r0, 801a50c <__ssputs_r+0xa2>
 801a4b2:	6921      	ldr	r1, [r4, #16]
 801a4b4:	464a      	mov	r2, r9
 801a4b6:	f7fe f914 	bl	80186e2 <memcpy>
 801a4ba:	89a3      	ldrh	r3, [r4, #12]
 801a4bc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a4c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a4c4:	81a3      	strh	r3, [r4, #12]
 801a4c6:	6126      	str	r6, [r4, #16]
 801a4c8:	6165      	str	r5, [r4, #20]
 801a4ca:	444e      	add	r6, r9
 801a4cc:	eba5 0509 	sub.w	r5, r5, r9
 801a4d0:	6026      	str	r6, [r4, #0]
 801a4d2:	60a5      	str	r5, [r4, #8]
 801a4d4:	463e      	mov	r6, r7
 801a4d6:	42be      	cmp	r6, r7
 801a4d8:	d900      	bls.n	801a4dc <__ssputs_r+0x72>
 801a4da:	463e      	mov	r6, r7
 801a4dc:	6820      	ldr	r0, [r4, #0]
 801a4de:	4632      	mov	r2, r6
 801a4e0:	4641      	mov	r1, r8
 801a4e2:	f000 fdb8 	bl	801b056 <memmove>
 801a4e6:	68a3      	ldr	r3, [r4, #8]
 801a4e8:	1b9b      	subs	r3, r3, r6
 801a4ea:	60a3      	str	r3, [r4, #8]
 801a4ec:	6823      	ldr	r3, [r4, #0]
 801a4ee:	4433      	add	r3, r6
 801a4f0:	6023      	str	r3, [r4, #0]
 801a4f2:	2000      	movs	r0, #0
 801a4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4f8:	462a      	mov	r2, r5
 801a4fa:	f7fc fb31 	bl	8016b60 <_realloc_r>
 801a4fe:	4606      	mov	r6, r0
 801a500:	2800      	cmp	r0, #0
 801a502:	d1e0      	bne.n	801a4c6 <__ssputs_r+0x5c>
 801a504:	6921      	ldr	r1, [r4, #16]
 801a506:	4650      	mov	r0, sl
 801a508:	f7fe ff5a 	bl	80193c0 <_free_r>
 801a50c:	230c      	movs	r3, #12
 801a50e:	f8ca 3000 	str.w	r3, [sl]
 801a512:	89a3      	ldrh	r3, [r4, #12]
 801a514:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a518:	81a3      	strh	r3, [r4, #12]
 801a51a:	f04f 30ff 	mov.w	r0, #4294967295
 801a51e:	e7e9      	b.n	801a4f4 <__ssputs_r+0x8a>

0801a520 <_svfiprintf_r>:
 801a520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a524:	4698      	mov	r8, r3
 801a526:	898b      	ldrh	r3, [r1, #12]
 801a528:	061b      	lsls	r3, r3, #24
 801a52a:	b09d      	sub	sp, #116	@ 0x74
 801a52c:	4607      	mov	r7, r0
 801a52e:	460d      	mov	r5, r1
 801a530:	4614      	mov	r4, r2
 801a532:	d510      	bpl.n	801a556 <_svfiprintf_r+0x36>
 801a534:	690b      	ldr	r3, [r1, #16]
 801a536:	b973      	cbnz	r3, 801a556 <_svfiprintf_r+0x36>
 801a538:	2140      	movs	r1, #64	@ 0x40
 801a53a:	f7fc fa7d 	bl	8016a38 <_malloc_r>
 801a53e:	6028      	str	r0, [r5, #0]
 801a540:	6128      	str	r0, [r5, #16]
 801a542:	b930      	cbnz	r0, 801a552 <_svfiprintf_r+0x32>
 801a544:	230c      	movs	r3, #12
 801a546:	603b      	str	r3, [r7, #0]
 801a548:	f04f 30ff 	mov.w	r0, #4294967295
 801a54c:	b01d      	add	sp, #116	@ 0x74
 801a54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a552:	2340      	movs	r3, #64	@ 0x40
 801a554:	616b      	str	r3, [r5, #20]
 801a556:	2300      	movs	r3, #0
 801a558:	9309      	str	r3, [sp, #36]	@ 0x24
 801a55a:	2320      	movs	r3, #32
 801a55c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a560:	f8cd 800c 	str.w	r8, [sp, #12]
 801a564:	2330      	movs	r3, #48	@ 0x30
 801a566:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a704 <_svfiprintf_r+0x1e4>
 801a56a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a56e:	f04f 0901 	mov.w	r9, #1
 801a572:	4623      	mov	r3, r4
 801a574:	469a      	mov	sl, r3
 801a576:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a57a:	b10a      	cbz	r2, 801a580 <_svfiprintf_r+0x60>
 801a57c:	2a25      	cmp	r2, #37	@ 0x25
 801a57e:	d1f9      	bne.n	801a574 <_svfiprintf_r+0x54>
 801a580:	ebba 0b04 	subs.w	fp, sl, r4
 801a584:	d00b      	beq.n	801a59e <_svfiprintf_r+0x7e>
 801a586:	465b      	mov	r3, fp
 801a588:	4622      	mov	r2, r4
 801a58a:	4629      	mov	r1, r5
 801a58c:	4638      	mov	r0, r7
 801a58e:	f7ff ff6c 	bl	801a46a <__ssputs_r>
 801a592:	3001      	adds	r0, #1
 801a594:	f000 80a7 	beq.w	801a6e6 <_svfiprintf_r+0x1c6>
 801a598:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a59a:	445a      	add	r2, fp
 801a59c:	9209      	str	r2, [sp, #36]	@ 0x24
 801a59e:	f89a 3000 	ldrb.w	r3, [sl]
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	f000 809f 	beq.w	801a6e6 <_svfiprintf_r+0x1c6>
 801a5a8:	2300      	movs	r3, #0
 801a5aa:	f04f 32ff 	mov.w	r2, #4294967295
 801a5ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a5b2:	f10a 0a01 	add.w	sl, sl, #1
 801a5b6:	9304      	str	r3, [sp, #16]
 801a5b8:	9307      	str	r3, [sp, #28]
 801a5ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a5be:	931a      	str	r3, [sp, #104]	@ 0x68
 801a5c0:	4654      	mov	r4, sl
 801a5c2:	2205      	movs	r2, #5
 801a5c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a5c8:	484e      	ldr	r0, [pc, #312]	@ (801a704 <_svfiprintf_r+0x1e4>)
 801a5ca:	f7ed fe31 	bl	8008230 <memchr>
 801a5ce:	9a04      	ldr	r2, [sp, #16]
 801a5d0:	b9d8      	cbnz	r0, 801a60a <_svfiprintf_r+0xea>
 801a5d2:	06d0      	lsls	r0, r2, #27
 801a5d4:	bf44      	itt	mi
 801a5d6:	2320      	movmi	r3, #32
 801a5d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a5dc:	0711      	lsls	r1, r2, #28
 801a5de:	bf44      	itt	mi
 801a5e0:	232b      	movmi	r3, #43	@ 0x2b
 801a5e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a5e6:	f89a 3000 	ldrb.w	r3, [sl]
 801a5ea:	2b2a      	cmp	r3, #42	@ 0x2a
 801a5ec:	d015      	beq.n	801a61a <_svfiprintf_r+0xfa>
 801a5ee:	9a07      	ldr	r2, [sp, #28]
 801a5f0:	4654      	mov	r4, sl
 801a5f2:	2000      	movs	r0, #0
 801a5f4:	f04f 0c0a 	mov.w	ip, #10
 801a5f8:	4621      	mov	r1, r4
 801a5fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a5fe:	3b30      	subs	r3, #48	@ 0x30
 801a600:	2b09      	cmp	r3, #9
 801a602:	d94b      	bls.n	801a69c <_svfiprintf_r+0x17c>
 801a604:	b1b0      	cbz	r0, 801a634 <_svfiprintf_r+0x114>
 801a606:	9207      	str	r2, [sp, #28]
 801a608:	e014      	b.n	801a634 <_svfiprintf_r+0x114>
 801a60a:	eba0 0308 	sub.w	r3, r0, r8
 801a60e:	fa09 f303 	lsl.w	r3, r9, r3
 801a612:	4313      	orrs	r3, r2
 801a614:	9304      	str	r3, [sp, #16]
 801a616:	46a2      	mov	sl, r4
 801a618:	e7d2      	b.n	801a5c0 <_svfiprintf_r+0xa0>
 801a61a:	9b03      	ldr	r3, [sp, #12]
 801a61c:	1d19      	adds	r1, r3, #4
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	9103      	str	r1, [sp, #12]
 801a622:	2b00      	cmp	r3, #0
 801a624:	bfbb      	ittet	lt
 801a626:	425b      	neglt	r3, r3
 801a628:	f042 0202 	orrlt.w	r2, r2, #2
 801a62c:	9307      	strge	r3, [sp, #28]
 801a62e:	9307      	strlt	r3, [sp, #28]
 801a630:	bfb8      	it	lt
 801a632:	9204      	strlt	r2, [sp, #16]
 801a634:	7823      	ldrb	r3, [r4, #0]
 801a636:	2b2e      	cmp	r3, #46	@ 0x2e
 801a638:	d10a      	bne.n	801a650 <_svfiprintf_r+0x130>
 801a63a:	7863      	ldrb	r3, [r4, #1]
 801a63c:	2b2a      	cmp	r3, #42	@ 0x2a
 801a63e:	d132      	bne.n	801a6a6 <_svfiprintf_r+0x186>
 801a640:	9b03      	ldr	r3, [sp, #12]
 801a642:	1d1a      	adds	r2, r3, #4
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	9203      	str	r2, [sp, #12]
 801a648:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a64c:	3402      	adds	r4, #2
 801a64e:	9305      	str	r3, [sp, #20]
 801a650:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a714 <_svfiprintf_r+0x1f4>
 801a654:	7821      	ldrb	r1, [r4, #0]
 801a656:	2203      	movs	r2, #3
 801a658:	4650      	mov	r0, sl
 801a65a:	f7ed fde9 	bl	8008230 <memchr>
 801a65e:	b138      	cbz	r0, 801a670 <_svfiprintf_r+0x150>
 801a660:	9b04      	ldr	r3, [sp, #16]
 801a662:	eba0 000a 	sub.w	r0, r0, sl
 801a666:	2240      	movs	r2, #64	@ 0x40
 801a668:	4082      	lsls	r2, r0
 801a66a:	4313      	orrs	r3, r2
 801a66c:	3401      	adds	r4, #1
 801a66e:	9304      	str	r3, [sp, #16]
 801a670:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a674:	4824      	ldr	r0, [pc, #144]	@ (801a708 <_svfiprintf_r+0x1e8>)
 801a676:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a67a:	2206      	movs	r2, #6
 801a67c:	f7ed fdd8 	bl	8008230 <memchr>
 801a680:	2800      	cmp	r0, #0
 801a682:	d036      	beq.n	801a6f2 <_svfiprintf_r+0x1d2>
 801a684:	4b21      	ldr	r3, [pc, #132]	@ (801a70c <_svfiprintf_r+0x1ec>)
 801a686:	bb1b      	cbnz	r3, 801a6d0 <_svfiprintf_r+0x1b0>
 801a688:	9b03      	ldr	r3, [sp, #12]
 801a68a:	3307      	adds	r3, #7
 801a68c:	f023 0307 	bic.w	r3, r3, #7
 801a690:	3308      	adds	r3, #8
 801a692:	9303      	str	r3, [sp, #12]
 801a694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a696:	4433      	add	r3, r6
 801a698:	9309      	str	r3, [sp, #36]	@ 0x24
 801a69a:	e76a      	b.n	801a572 <_svfiprintf_r+0x52>
 801a69c:	fb0c 3202 	mla	r2, ip, r2, r3
 801a6a0:	460c      	mov	r4, r1
 801a6a2:	2001      	movs	r0, #1
 801a6a4:	e7a8      	b.n	801a5f8 <_svfiprintf_r+0xd8>
 801a6a6:	2300      	movs	r3, #0
 801a6a8:	3401      	adds	r4, #1
 801a6aa:	9305      	str	r3, [sp, #20]
 801a6ac:	4619      	mov	r1, r3
 801a6ae:	f04f 0c0a 	mov.w	ip, #10
 801a6b2:	4620      	mov	r0, r4
 801a6b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a6b8:	3a30      	subs	r2, #48	@ 0x30
 801a6ba:	2a09      	cmp	r2, #9
 801a6bc:	d903      	bls.n	801a6c6 <_svfiprintf_r+0x1a6>
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d0c6      	beq.n	801a650 <_svfiprintf_r+0x130>
 801a6c2:	9105      	str	r1, [sp, #20]
 801a6c4:	e7c4      	b.n	801a650 <_svfiprintf_r+0x130>
 801a6c6:	fb0c 2101 	mla	r1, ip, r1, r2
 801a6ca:	4604      	mov	r4, r0
 801a6cc:	2301      	movs	r3, #1
 801a6ce:	e7f0      	b.n	801a6b2 <_svfiprintf_r+0x192>
 801a6d0:	ab03      	add	r3, sp, #12
 801a6d2:	9300      	str	r3, [sp, #0]
 801a6d4:	462a      	mov	r2, r5
 801a6d6:	4b0e      	ldr	r3, [pc, #56]	@ (801a710 <_svfiprintf_r+0x1f0>)
 801a6d8:	a904      	add	r1, sp, #16
 801a6da:	4638      	mov	r0, r7
 801a6dc:	f7fd f91c 	bl	8017918 <_printf_float>
 801a6e0:	1c42      	adds	r2, r0, #1
 801a6e2:	4606      	mov	r6, r0
 801a6e4:	d1d6      	bne.n	801a694 <_svfiprintf_r+0x174>
 801a6e6:	89ab      	ldrh	r3, [r5, #12]
 801a6e8:	065b      	lsls	r3, r3, #25
 801a6ea:	f53f af2d 	bmi.w	801a548 <_svfiprintf_r+0x28>
 801a6ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a6f0:	e72c      	b.n	801a54c <_svfiprintf_r+0x2c>
 801a6f2:	ab03      	add	r3, sp, #12
 801a6f4:	9300      	str	r3, [sp, #0]
 801a6f6:	462a      	mov	r2, r5
 801a6f8:	4b05      	ldr	r3, [pc, #20]	@ (801a710 <_svfiprintf_r+0x1f0>)
 801a6fa:	a904      	add	r1, sp, #16
 801a6fc:	4638      	mov	r0, r7
 801a6fe:	f7fd fba3 	bl	8017e48 <_printf_i>
 801a702:	e7ed      	b.n	801a6e0 <_svfiprintf_r+0x1c0>
 801a704:	0801da76 	.word	0x0801da76
 801a708:	0801da80 	.word	0x0801da80
 801a70c:	08017919 	.word	0x08017919
 801a710:	0801a46b 	.word	0x0801a46b
 801a714:	0801da7c 	.word	0x0801da7c

0801a718 <_sungetc_r>:
 801a718:	b538      	push	{r3, r4, r5, lr}
 801a71a:	1c4b      	adds	r3, r1, #1
 801a71c:	4614      	mov	r4, r2
 801a71e:	d103      	bne.n	801a728 <_sungetc_r+0x10>
 801a720:	f04f 35ff 	mov.w	r5, #4294967295
 801a724:	4628      	mov	r0, r5
 801a726:	bd38      	pop	{r3, r4, r5, pc}
 801a728:	8993      	ldrh	r3, [r2, #12]
 801a72a:	f023 0320 	bic.w	r3, r3, #32
 801a72e:	8193      	strh	r3, [r2, #12]
 801a730:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a732:	6852      	ldr	r2, [r2, #4]
 801a734:	b2cd      	uxtb	r5, r1
 801a736:	b18b      	cbz	r3, 801a75c <_sungetc_r+0x44>
 801a738:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801a73a:	4293      	cmp	r3, r2
 801a73c:	dd08      	ble.n	801a750 <_sungetc_r+0x38>
 801a73e:	6823      	ldr	r3, [r4, #0]
 801a740:	1e5a      	subs	r2, r3, #1
 801a742:	6022      	str	r2, [r4, #0]
 801a744:	f803 5c01 	strb.w	r5, [r3, #-1]
 801a748:	6863      	ldr	r3, [r4, #4]
 801a74a:	3301      	adds	r3, #1
 801a74c:	6063      	str	r3, [r4, #4]
 801a74e:	e7e9      	b.n	801a724 <_sungetc_r+0xc>
 801a750:	4621      	mov	r1, r4
 801a752:	f000 fc46 	bl	801afe2 <__submore>
 801a756:	2800      	cmp	r0, #0
 801a758:	d0f1      	beq.n	801a73e <_sungetc_r+0x26>
 801a75a:	e7e1      	b.n	801a720 <_sungetc_r+0x8>
 801a75c:	6921      	ldr	r1, [r4, #16]
 801a75e:	6823      	ldr	r3, [r4, #0]
 801a760:	b151      	cbz	r1, 801a778 <_sungetc_r+0x60>
 801a762:	4299      	cmp	r1, r3
 801a764:	d208      	bcs.n	801a778 <_sungetc_r+0x60>
 801a766:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801a76a:	42a9      	cmp	r1, r5
 801a76c:	d104      	bne.n	801a778 <_sungetc_r+0x60>
 801a76e:	3b01      	subs	r3, #1
 801a770:	3201      	adds	r2, #1
 801a772:	6023      	str	r3, [r4, #0]
 801a774:	6062      	str	r2, [r4, #4]
 801a776:	e7d5      	b.n	801a724 <_sungetc_r+0xc>
 801a778:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801a77c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a780:	6363      	str	r3, [r4, #52]	@ 0x34
 801a782:	2303      	movs	r3, #3
 801a784:	63a3      	str	r3, [r4, #56]	@ 0x38
 801a786:	4623      	mov	r3, r4
 801a788:	f803 5f46 	strb.w	r5, [r3, #70]!
 801a78c:	6023      	str	r3, [r4, #0]
 801a78e:	2301      	movs	r3, #1
 801a790:	e7dc      	b.n	801a74c <_sungetc_r+0x34>

0801a792 <__ssrefill_r>:
 801a792:	b510      	push	{r4, lr}
 801a794:	460c      	mov	r4, r1
 801a796:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801a798:	b169      	cbz	r1, 801a7b6 <__ssrefill_r+0x24>
 801a79a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a79e:	4299      	cmp	r1, r3
 801a7a0:	d001      	beq.n	801a7a6 <__ssrefill_r+0x14>
 801a7a2:	f7fe fe0d 	bl	80193c0 <_free_r>
 801a7a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a7a8:	6063      	str	r3, [r4, #4]
 801a7aa:	2000      	movs	r0, #0
 801a7ac:	6360      	str	r0, [r4, #52]	@ 0x34
 801a7ae:	b113      	cbz	r3, 801a7b6 <__ssrefill_r+0x24>
 801a7b0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801a7b2:	6023      	str	r3, [r4, #0]
 801a7b4:	bd10      	pop	{r4, pc}
 801a7b6:	6923      	ldr	r3, [r4, #16]
 801a7b8:	6023      	str	r3, [r4, #0]
 801a7ba:	2300      	movs	r3, #0
 801a7bc:	6063      	str	r3, [r4, #4]
 801a7be:	89a3      	ldrh	r3, [r4, #12]
 801a7c0:	f043 0320 	orr.w	r3, r3, #32
 801a7c4:	81a3      	strh	r3, [r4, #12]
 801a7c6:	f04f 30ff 	mov.w	r0, #4294967295
 801a7ca:	e7f3      	b.n	801a7b4 <__ssrefill_r+0x22>

0801a7cc <__ssvfiscanf_r>:
 801a7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7d0:	460c      	mov	r4, r1
 801a7d2:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801a7d6:	2100      	movs	r1, #0
 801a7d8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801a7dc:	49a6      	ldr	r1, [pc, #664]	@ (801aa78 <__ssvfiscanf_r+0x2ac>)
 801a7de:	91a0      	str	r1, [sp, #640]	@ 0x280
 801a7e0:	f10d 0804 	add.w	r8, sp, #4
 801a7e4:	49a5      	ldr	r1, [pc, #660]	@ (801aa7c <__ssvfiscanf_r+0x2b0>)
 801a7e6:	4fa6      	ldr	r7, [pc, #664]	@ (801aa80 <__ssvfiscanf_r+0x2b4>)
 801a7e8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801a7ec:	4606      	mov	r6, r0
 801a7ee:	91a1      	str	r1, [sp, #644]	@ 0x284
 801a7f0:	9300      	str	r3, [sp, #0]
 801a7f2:	f892 9000 	ldrb.w	r9, [r2]
 801a7f6:	f1b9 0f00 	cmp.w	r9, #0
 801a7fa:	f000 8158 	beq.w	801aaae <__ssvfiscanf_r+0x2e2>
 801a7fe:	f817 3009 	ldrb.w	r3, [r7, r9]
 801a802:	f013 0308 	ands.w	r3, r3, #8
 801a806:	f102 0501 	add.w	r5, r2, #1
 801a80a:	d019      	beq.n	801a840 <__ssvfiscanf_r+0x74>
 801a80c:	6863      	ldr	r3, [r4, #4]
 801a80e:	2b00      	cmp	r3, #0
 801a810:	dd0f      	ble.n	801a832 <__ssvfiscanf_r+0x66>
 801a812:	6823      	ldr	r3, [r4, #0]
 801a814:	781a      	ldrb	r2, [r3, #0]
 801a816:	5cba      	ldrb	r2, [r7, r2]
 801a818:	0712      	lsls	r2, r2, #28
 801a81a:	d401      	bmi.n	801a820 <__ssvfiscanf_r+0x54>
 801a81c:	462a      	mov	r2, r5
 801a81e:	e7e8      	b.n	801a7f2 <__ssvfiscanf_r+0x26>
 801a820:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801a822:	3201      	adds	r2, #1
 801a824:	9245      	str	r2, [sp, #276]	@ 0x114
 801a826:	6862      	ldr	r2, [r4, #4]
 801a828:	3301      	adds	r3, #1
 801a82a:	3a01      	subs	r2, #1
 801a82c:	6062      	str	r2, [r4, #4]
 801a82e:	6023      	str	r3, [r4, #0]
 801a830:	e7ec      	b.n	801a80c <__ssvfiscanf_r+0x40>
 801a832:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801a834:	4621      	mov	r1, r4
 801a836:	4630      	mov	r0, r6
 801a838:	4798      	blx	r3
 801a83a:	2800      	cmp	r0, #0
 801a83c:	d0e9      	beq.n	801a812 <__ssvfiscanf_r+0x46>
 801a83e:	e7ed      	b.n	801a81c <__ssvfiscanf_r+0x50>
 801a840:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801a844:	f040 8085 	bne.w	801a952 <__ssvfiscanf_r+0x186>
 801a848:	9341      	str	r3, [sp, #260]	@ 0x104
 801a84a:	9343      	str	r3, [sp, #268]	@ 0x10c
 801a84c:	7853      	ldrb	r3, [r2, #1]
 801a84e:	2b2a      	cmp	r3, #42	@ 0x2a
 801a850:	bf02      	ittt	eq
 801a852:	2310      	moveq	r3, #16
 801a854:	1c95      	addeq	r5, r2, #2
 801a856:	9341      	streq	r3, [sp, #260]	@ 0x104
 801a858:	220a      	movs	r2, #10
 801a85a:	46aa      	mov	sl, r5
 801a85c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801a860:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801a864:	2b09      	cmp	r3, #9
 801a866:	d91e      	bls.n	801a8a6 <__ssvfiscanf_r+0xda>
 801a868:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801aa84 <__ssvfiscanf_r+0x2b8>
 801a86c:	2203      	movs	r2, #3
 801a86e:	4658      	mov	r0, fp
 801a870:	f7ed fcde 	bl	8008230 <memchr>
 801a874:	b138      	cbz	r0, 801a886 <__ssvfiscanf_r+0xba>
 801a876:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801a878:	eba0 000b 	sub.w	r0, r0, fp
 801a87c:	2301      	movs	r3, #1
 801a87e:	4083      	lsls	r3, r0
 801a880:	4313      	orrs	r3, r2
 801a882:	9341      	str	r3, [sp, #260]	@ 0x104
 801a884:	4655      	mov	r5, sl
 801a886:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a88a:	2b78      	cmp	r3, #120	@ 0x78
 801a88c:	d806      	bhi.n	801a89c <__ssvfiscanf_r+0xd0>
 801a88e:	2b57      	cmp	r3, #87	@ 0x57
 801a890:	d810      	bhi.n	801a8b4 <__ssvfiscanf_r+0xe8>
 801a892:	2b25      	cmp	r3, #37	@ 0x25
 801a894:	d05d      	beq.n	801a952 <__ssvfiscanf_r+0x186>
 801a896:	d857      	bhi.n	801a948 <__ssvfiscanf_r+0x17c>
 801a898:	2b00      	cmp	r3, #0
 801a89a:	d075      	beq.n	801a988 <__ssvfiscanf_r+0x1bc>
 801a89c:	2303      	movs	r3, #3
 801a89e:	9347      	str	r3, [sp, #284]	@ 0x11c
 801a8a0:	230a      	movs	r3, #10
 801a8a2:	9342      	str	r3, [sp, #264]	@ 0x108
 801a8a4:	e088      	b.n	801a9b8 <__ssvfiscanf_r+0x1ec>
 801a8a6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801a8a8:	fb02 1103 	mla	r1, r2, r3, r1
 801a8ac:	3930      	subs	r1, #48	@ 0x30
 801a8ae:	9143      	str	r1, [sp, #268]	@ 0x10c
 801a8b0:	4655      	mov	r5, sl
 801a8b2:	e7d2      	b.n	801a85a <__ssvfiscanf_r+0x8e>
 801a8b4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801a8b8:	2a20      	cmp	r2, #32
 801a8ba:	d8ef      	bhi.n	801a89c <__ssvfiscanf_r+0xd0>
 801a8bc:	a101      	add	r1, pc, #4	@ (adr r1, 801a8c4 <__ssvfiscanf_r+0xf8>)
 801a8be:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a8c2:	bf00      	nop
 801a8c4:	0801a997 	.word	0x0801a997
 801a8c8:	0801a89d 	.word	0x0801a89d
 801a8cc:	0801a89d 	.word	0x0801a89d
 801a8d0:	0801a9f1 	.word	0x0801a9f1
 801a8d4:	0801a89d 	.word	0x0801a89d
 801a8d8:	0801a89d 	.word	0x0801a89d
 801a8dc:	0801a89d 	.word	0x0801a89d
 801a8e0:	0801a89d 	.word	0x0801a89d
 801a8e4:	0801a89d 	.word	0x0801a89d
 801a8e8:	0801a89d 	.word	0x0801a89d
 801a8ec:	0801a89d 	.word	0x0801a89d
 801a8f0:	0801aa07 	.word	0x0801aa07
 801a8f4:	0801a9ed 	.word	0x0801a9ed
 801a8f8:	0801a94f 	.word	0x0801a94f
 801a8fc:	0801a94f 	.word	0x0801a94f
 801a900:	0801a94f 	.word	0x0801a94f
 801a904:	0801a89d 	.word	0x0801a89d
 801a908:	0801a9a9 	.word	0x0801a9a9
 801a90c:	0801a89d 	.word	0x0801a89d
 801a910:	0801a89d 	.word	0x0801a89d
 801a914:	0801a89d 	.word	0x0801a89d
 801a918:	0801a89d 	.word	0x0801a89d
 801a91c:	0801aa17 	.word	0x0801aa17
 801a920:	0801a9b1 	.word	0x0801a9b1
 801a924:	0801a98f 	.word	0x0801a98f
 801a928:	0801a89d 	.word	0x0801a89d
 801a92c:	0801a89d 	.word	0x0801a89d
 801a930:	0801aa13 	.word	0x0801aa13
 801a934:	0801a89d 	.word	0x0801a89d
 801a938:	0801a9ed 	.word	0x0801a9ed
 801a93c:	0801a89d 	.word	0x0801a89d
 801a940:	0801a89d 	.word	0x0801a89d
 801a944:	0801a997 	.word	0x0801a997
 801a948:	3b45      	subs	r3, #69	@ 0x45
 801a94a:	2b02      	cmp	r3, #2
 801a94c:	d8a6      	bhi.n	801a89c <__ssvfiscanf_r+0xd0>
 801a94e:	2305      	movs	r3, #5
 801a950:	e031      	b.n	801a9b6 <__ssvfiscanf_r+0x1ea>
 801a952:	6863      	ldr	r3, [r4, #4]
 801a954:	2b00      	cmp	r3, #0
 801a956:	dd0d      	ble.n	801a974 <__ssvfiscanf_r+0x1a8>
 801a958:	6823      	ldr	r3, [r4, #0]
 801a95a:	781a      	ldrb	r2, [r3, #0]
 801a95c:	454a      	cmp	r2, r9
 801a95e:	f040 80a6 	bne.w	801aaae <__ssvfiscanf_r+0x2e2>
 801a962:	3301      	adds	r3, #1
 801a964:	6862      	ldr	r2, [r4, #4]
 801a966:	6023      	str	r3, [r4, #0]
 801a968:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801a96a:	3a01      	subs	r2, #1
 801a96c:	3301      	adds	r3, #1
 801a96e:	6062      	str	r2, [r4, #4]
 801a970:	9345      	str	r3, [sp, #276]	@ 0x114
 801a972:	e753      	b.n	801a81c <__ssvfiscanf_r+0x50>
 801a974:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801a976:	4621      	mov	r1, r4
 801a978:	4630      	mov	r0, r6
 801a97a:	4798      	blx	r3
 801a97c:	2800      	cmp	r0, #0
 801a97e:	d0eb      	beq.n	801a958 <__ssvfiscanf_r+0x18c>
 801a980:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801a982:	2800      	cmp	r0, #0
 801a984:	f040 808b 	bne.w	801aa9e <__ssvfiscanf_r+0x2d2>
 801a988:	f04f 30ff 	mov.w	r0, #4294967295
 801a98c:	e08b      	b.n	801aaa6 <__ssvfiscanf_r+0x2da>
 801a98e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801a990:	f042 0220 	orr.w	r2, r2, #32
 801a994:	9241      	str	r2, [sp, #260]	@ 0x104
 801a996:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801a998:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801a99c:	9241      	str	r2, [sp, #260]	@ 0x104
 801a99e:	2210      	movs	r2, #16
 801a9a0:	2b6e      	cmp	r3, #110	@ 0x6e
 801a9a2:	9242      	str	r2, [sp, #264]	@ 0x108
 801a9a4:	d902      	bls.n	801a9ac <__ssvfiscanf_r+0x1e0>
 801a9a6:	e005      	b.n	801a9b4 <__ssvfiscanf_r+0x1e8>
 801a9a8:	2300      	movs	r3, #0
 801a9aa:	9342      	str	r3, [sp, #264]	@ 0x108
 801a9ac:	2303      	movs	r3, #3
 801a9ae:	e002      	b.n	801a9b6 <__ssvfiscanf_r+0x1ea>
 801a9b0:	2308      	movs	r3, #8
 801a9b2:	9342      	str	r3, [sp, #264]	@ 0x108
 801a9b4:	2304      	movs	r3, #4
 801a9b6:	9347      	str	r3, [sp, #284]	@ 0x11c
 801a9b8:	6863      	ldr	r3, [r4, #4]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	dd39      	ble.n	801aa32 <__ssvfiscanf_r+0x266>
 801a9be:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801a9c0:	0659      	lsls	r1, r3, #25
 801a9c2:	d404      	bmi.n	801a9ce <__ssvfiscanf_r+0x202>
 801a9c4:	6823      	ldr	r3, [r4, #0]
 801a9c6:	781a      	ldrb	r2, [r3, #0]
 801a9c8:	5cba      	ldrb	r2, [r7, r2]
 801a9ca:	0712      	lsls	r2, r2, #28
 801a9cc:	d438      	bmi.n	801aa40 <__ssvfiscanf_r+0x274>
 801a9ce:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801a9d0:	2b02      	cmp	r3, #2
 801a9d2:	dc47      	bgt.n	801aa64 <__ssvfiscanf_r+0x298>
 801a9d4:	466b      	mov	r3, sp
 801a9d6:	4622      	mov	r2, r4
 801a9d8:	a941      	add	r1, sp, #260	@ 0x104
 801a9da:	4630      	mov	r0, r6
 801a9dc:	f000 f86c 	bl	801aab8 <_scanf_chars>
 801a9e0:	2801      	cmp	r0, #1
 801a9e2:	d064      	beq.n	801aaae <__ssvfiscanf_r+0x2e2>
 801a9e4:	2802      	cmp	r0, #2
 801a9e6:	f47f af19 	bne.w	801a81c <__ssvfiscanf_r+0x50>
 801a9ea:	e7c9      	b.n	801a980 <__ssvfiscanf_r+0x1b4>
 801a9ec:	220a      	movs	r2, #10
 801a9ee:	e7d7      	b.n	801a9a0 <__ssvfiscanf_r+0x1d4>
 801a9f0:	4629      	mov	r1, r5
 801a9f2:	4640      	mov	r0, r8
 801a9f4:	f000 fabc 	bl	801af70 <__sccl>
 801a9f8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801a9fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a9fe:	9341      	str	r3, [sp, #260]	@ 0x104
 801aa00:	4605      	mov	r5, r0
 801aa02:	2301      	movs	r3, #1
 801aa04:	e7d7      	b.n	801a9b6 <__ssvfiscanf_r+0x1ea>
 801aa06:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801aa08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aa0c:	9341      	str	r3, [sp, #260]	@ 0x104
 801aa0e:	2300      	movs	r3, #0
 801aa10:	e7d1      	b.n	801a9b6 <__ssvfiscanf_r+0x1ea>
 801aa12:	2302      	movs	r3, #2
 801aa14:	e7cf      	b.n	801a9b6 <__ssvfiscanf_r+0x1ea>
 801aa16:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801aa18:	06c3      	lsls	r3, r0, #27
 801aa1a:	f53f aeff 	bmi.w	801a81c <__ssvfiscanf_r+0x50>
 801aa1e:	9b00      	ldr	r3, [sp, #0]
 801aa20:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801aa22:	1d19      	adds	r1, r3, #4
 801aa24:	9100      	str	r1, [sp, #0]
 801aa26:	681b      	ldr	r3, [r3, #0]
 801aa28:	07c0      	lsls	r0, r0, #31
 801aa2a:	bf4c      	ite	mi
 801aa2c:	801a      	strhmi	r2, [r3, #0]
 801aa2e:	601a      	strpl	r2, [r3, #0]
 801aa30:	e6f4      	b.n	801a81c <__ssvfiscanf_r+0x50>
 801aa32:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801aa34:	4621      	mov	r1, r4
 801aa36:	4630      	mov	r0, r6
 801aa38:	4798      	blx	r3
 801aa3a:	2800      	cmp	r0, #0
 801aa3c:	d0bf      	beq.n	801a9be <__ssvfiscanf_r+0x1f2>
 801aa3e:	e79f      	b.n	801a980 <__ssvfiscanf_r+0x1b4>
 801aa40:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801aa42:	3201      	adds	r2, #1
 801aa44:	9245      	str	r2, [sp, #276]	@ 0x114
 801aa46:	6862      	ldr	r2, [r4, #4]
 801aa48:	3a01      	subs	r2, #1
 801aa4a:	2a00      	cmp	r2, #0
 801aa4c:	6062      	str	r2, [r4, #4]
 801aa4e:	dd02      	ble.n	801aa56 <__ssvfiscanf_r+0x28a>
 801aa50:	3301      	adds	r3, #1
 801aa52:	6023      	str	r3, [r4, #0]
 801aa54:	e7b6      	b.n	801a9c4 <__ssvfiscanf_r+0x1f8>
 801aa56:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801aa58:	4621      	mov	r1, r4
 801aa5a:	4630      	mov	r0, r6
 801aa5c:	4798      	blx	r3
 801aa5e:	2800      	cmp	r0, #0
 801aa60:	d0b0      	beq.n	801a9c4 <__ssvfiscanf_r+0x1f8>
 801aa62:	e78d      	b.n	801a980 <__ssvfiscanf_r+0x1b4>
 801aa64:	2b04      	cmp	r3, #4
 801aa66:	dc0f      	bgt.n	801aa88 <__ssvfiscanf_r+0x2bc>
 801aa68:	466b      	mov	r3, sp
 801aa6a:	4622      	mov	r2, r4
 801aa6c:	a941      	add	r1, sp, #260	@ 0x104
 801aa6e:	4630      	mov	r0, r6
 801aa70:	f000 f87c 	bl	801ab6c <_scanf_i>
 801aa74:	e7b4      	b.n	801a9e0 <__ssvfiscanf_r+0x214>
 801aa76:	bf00      	nop
 801aa78:	0801a719 	.word	0x0801a719
 801aa7c:	0801a793 	.word	0x0801a793
 801aa80:	0801db31 	.word	0x0801db31
 801aa84:	0801da7c 	.word	0x0801da7c
 801aa88:	4b0a      	ldr	r3, [pc, #40]	@ (801aab4 <__ssvfiscanf_r+0x2e8>)
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	f43f aec6 	beq.w	801a81c <__ssvfiscanf_r+0x50>
 801aa90:	466b      	mov	r3, sp
 801aa92:	4622      	mov	r2, r4
 801aa94:	a941      	add	r1, sp, #260	@ 0x104
 801aa96:	4630      	mov	r0, r6
 801aa98:	f3af 8000 	nop.w
 801aa9c:	e7a0      	b.n	801a9e0 <__ssvfiscanf_r+0x214>
 801aa9e:	89a3      	ldrh	r3, [r4, #12]
 801aaa0:	065b      	lsls	r3, r3, #25
 801aaa2:	f53f af71 	bmi.w	801a988 <__ssvfiscanf_r+0x1bc>
 801aaa6:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801aaaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaae:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801aab0:	e7f9      	b.n	801aaa6 <__ssvfiscanf_r+0x2da>
 801aab2:	bf00      	nop
 801aab4:	00000000 	.word	0x00000000

0801aab8 <_scanf_chars>:
 801aab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aabc:	4615      	mov	r5, r2
 801aabe:	688a      	ldr	r2, [r1, #8]
 801aac0:	4680      	mov	r8, r0
 801aac2:	460c      	mov	r4, r1
 801aac4:	b932      	cbnz	r2, 801aad4 <_scanf_chars+0x1c>
 801aac6:	698a      	ldr	r2, [r1, #24]
 801aac8:	2a00      	cmp	r2, #0
 801aaca:	bf14      	ite	ne
 801aacc:	f04f 32ff 	movne.w	r2, #4294967295
 801aad0:	2201      	moveq	r2, #1
 801aad2:	608a      	str	r2, [r1, #8]
 801aad4:	6822      	ldr	r2, [r4, #0]
 801aad6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801ab68 <_scanf_chars+0xb0>
 801aada:	06d1      	lsls	r1, r2, #27
 801aadc:	bf5f      	itttt	pl
 801aade:	681a      	ldrpl	r2, [r3, #0]
 801aae0:	1d11      	addpl	r1, r2, #4
 801aae2:	6019      	strpl	r1, [r3, #0]
 801aae4:	6816      	ldrpl	r6, [r2, #0]
 801aae6:	2700      	movs	r7, #0
 801aae8:	69a0      	ldr	r0, [r4, #24]
 801aaea:	b188      	cbz	r0, 801ab10 <_scanf_chars+0x58>
 801aaec:	2801      	cmp	r0, #1
 801aaee:	d107      	bne.n	801ab00 <_scanf_chars+0x48>
 801aaf0:	682b      	ldr	r3, [r5, #0]
 801aaf2:	781a      	ldrb	r2, [r3, #0]
 801aaf4:	6963      	ldr	r3, [r4, #20]
 801aaf6:	5c9b      	ldrb	r3, [r3, r2]
 801aaf8:	b953      	cbnz	r3, 801ab10 <_scanf_chars+0x58>
 801aafa:	2f00      	cmp	r7, #0
 801aafc:	d031      	beq.n	801ab62 <_scanf_chars+0xaa>
 801aafe:	e022      	b.n	801ab46 <_scanf_chars+0x8e>
 801ab00:	2802      	cmp	r0, #2
 801ab02:	d120      	bne.n	801ab46 <_scanf_chars+0x8e>
 801ab04:	682b      	ldr	r3, [r5, #0]
 801ab06:	781b      	ldrb	r3, [r3, #0]
 801ab08:	f819 3003 	ldrb.w	r3, [r9, r3]
 801ab0c:	071b      	lsls	r3, r3, #28
 801ab0e:	d41a      	bmi.n	801ab46 <_scanf_chars+0x8e>
 801ab10:	6823      	ldr	r3, [r4, #0]
 801ab12:	06da      	lsls	r2, r3, #27
 801ab14:	bf5e      	ittt	pl
 801ab16:	682b      	ldrpl	r3, [r5, #0]
 801ab18:	781b      	ldrbpl	r3, [r3, #0]
 801ab1a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801ab1e:	682a      	ldr	r2, [r5, #0]
 801ab20:	686b      	ldr	r3, [r5, #4]
 801ab22:	3201      	adds	r2, #1
 801ab24:	602a      	str	r2, [r5, #0]
 801ab26:	68a2      	ldr	r2, [r4, #8]
 801ab28:	3b01      	subs	r3, #1
 801ab2a:	3a01      	subs	r2, #1
 801ab2c:	606b      	str	r3, [r5, #4]
 801ab2e:	3701      	adds	r7, #1
 801ab30:	60a2      	str	r2, [r4, #8]
 801ab32:	b142      	cbz	r2, 801ab46 <_scanf_chars+0x8e>
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	dcd7      	bgt.n	801aae8 <_scanf_chars+0x30>
 801ab38:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801ab3c:	4629      	mov	r1, r5
 801ab3e:	4640      	mov	r0, r8
 801ab40:	4798      	blx	r3
 801ab42:	2800      	cmp	r0, #0
 801ab44:	d0d0      	beq.n	801aae8 <_scanf_chars+0x30>
 801ab46:	6823      	ldr	r3, [r4, #0]
 801ab48:	f013 0310 	ands.w	r3, r3, #16
 801ab4c:	d105      	bne.n	801ab5a <_scanf_chars+0xa2>
 801ab4e:	68e2      	ldr	r2, [r4, #12]
 801ab50:	3201      	adds	r2, #1
 801ab52:	60e2      	str	r2, [r4, #12]
 801ab54:	69a2      	ldr	r2, [r4, #24]
 801ab56:	b102      	cbz	r2, 801ab5a <_scanf_chars+0xa2>
 801ab58:	7033      	strb	r3, [r6, #0]
 801ab5a:	6923      	ldr	r3, [r4, #16]
 801ab5c:	443b      	add	r3, r7
 801ab5e:	6123      	str	r3, [r4, #16]
 801ab60:	2000      	movs	r0, #0
 801ab62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab66:	bf00      	nop
 801ab68:	0801db31 	.word	0x0801db31

0801ab6c <_scanf_i>:
 801ab6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab70:	4698      	mov	r8, r3
 801ab72:	4b74      	ldr	r3, [pc, #464]	@ (801ad44 <_scanf_i+0x1d8>)
 801ab74:	460c      	mov	r4, r1
 801ab76:	4682      	mov	sl, r0
 801ab78:	4616      	mov	r6, r2
 801ab7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ab7e:	b087      	sub	sp, #28
 801ab80:	ab03      	add	r3, sp, #12
 801ab82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ab86:	4b70      	ldr	r3, [pc, #448]	@ (801ad48 <_scanf_i+0x1dc>)
 801ab88:	69a1      	ldr	r1, [r4, #24]
 801ab8a:	4a70      	ldr	r2, [pc, #448]	@ (801ad4c <_scanf_i+0x1e0>)
 801ab8c:	2903      	cmp	r1, #3
 801ab8e:	bf08      	it	eq
 801ab90:	461a      	moveq	r2, r3
 801ab92:	68a3      	ldr	r3, [r4, #8]
 801ab94:	9201      	str	r2, [sp, #4]
 801ab96:	1e5a      	subs	r2, r3, #1
 801ab98:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801ab9c:	bf88      	it	hi
 801ab9e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801aba2:	4627      	mov	r7, r4
 801aba4:	bf82      	ittt	hi
 801aba6:	eb03 0905 	addhi.w	r9, r3, r5
 801abaa:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801abae:	60a3      	strhi	r3, [r4, #8]
 801abb0:	f857 3b1c 	ldr.w	r3, [r7], #28
 801abb4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801abb8:	bf98      	it	ls
 801abba:	f04f 0900 	movls.w	r9, #0
 801abbe:	6023      	str	r3, [r4, #0]
 801abc0:	463d      	mov	r5, r7
 801abc2:	f04f 0b00 	mov.w	fp, #0
 801abc6:	6831      	ldr	r1, [r6, #0]
 801abc8:	ab03      	add	r3, sp, #12
 801abca:	7809      	ldrb	r1, [r1, #0]
 801abcc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801abd0:	2202      	movs	r2, #2
 801abd2:	f7ed fb2d 	bl	8008230 <memchr>
 801abd6:	b328      	cbz	r0, 801ac24 <_scanf_i+0xb8>
 801abd8:	f1bb 0f01 	cmp.w	fp, #1
 801abdc:	d159      	bne.n	801ac92 <_scanf_i+0x126>
 801abde:	6862      	ldr	r2, [r4, #4]
 801abe0:	b92a      	cbnz	r2, 801abee <_scanf_i+0x82>
 801abe2:	6822      	ldr	r2, [r4, #0]
 801abe4:	2108      	movs	r1, #8
 801abe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801abea:	6061      	str	r1, [r4, #4]
 801abec:	6022      	str	r2, [r4, #0]
 801abee:	6822      	ldr	r2, [r4, #0]
 801abf0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801abf4:	6022      	str	r2, [r4, #0]
 801abf6:	68a2      	ldr	r2, [r4, #8]
 801abf8:	1e51      	subs	r1, r2, #1
 801abfa:	60a1      	str	r1, [r4, #8]
 801abfc:	b192      	cbz	r2, 801ac24 <_scanf_i+0xb8>
 801abfe:	6832      	ldr	r2, [r6, #0]
 801ac00:	1c51      	adds	r1, r2, #1
 801ac02:	6031      	str	r1, [r6, #0]
 801ac04:	7812      	ldrb	r2, [r2, #0]
 801ac06:	f805 2b01 	strb.w	r2, [r5], #1
 801ac0a:	6872      	ldr	r2, [r6, #4]
 801ac0c:	3a01      	subs	r2, #1
 801ac0e:	2a00      	cmp	r2, #0
 801ac10:	6072      	str	r2, [r6, #4]
 801ac12:	dc07      	bgt.n	801ac24 <_scanf_i+0xb8>
 801ac14:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801ac18:	4631      	mov	r1, r6
 801ac1a:	4650      	mov	r0, sl
 801ac1c:	4790      	blx	r2
 801ac1e:	2800      	cmp	r0, #0
 801ac20:	f040 8085 	bne.w	801ad2e <_scanf_i+0x1c2>
 801ac24:	f10b 0b01 	add.w	fp, fp, #1
 801ac28:	f1bb 0f03 	cmp.w	fp, #3
 801ac2c:	d1cb      	bne.n	801abc6 <_scanf_i+0x5a>
 801ac2e:	6863      	ldr	r3, [r4, #4]
 801ac30:	b90b      	cbnz	r3, 801ac36 <_scanf_i+0xca>
 801ac32:	230a      	movs	r3, #10
 801ac34:	6063      	str	r3, [r4, #4]
 801ac36:	6863      	ldr	r3, [r4, #4]
 801ac38:	4945      	ldr	r1, [pc, #276]	@ (801ad50 <_scanf_i+0x1e4>)
 801ac3a:	6960      	ldr	r0, [r4, #20]
 801ac3c:	1ac9      	subs	r1, r1, r3
 801ac3e:	f000 f997 	bl	801af70 <__sccl>
 801ac42:	f04f 0b00 	mov.w	fp, #0
 801ac46:	68a3      	ldr	r3, [r4, #8]
 801ac48:	6822      	ldr	r2, [r4, #0]
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	d03d      	beq.n	801acca <_scanf_i+0x15e>
 801ac4e:	6831      	ldr	r1, [r6, #0]
 801ac50:	6960      	ldr	r0, [r4, #20]
 801ac52:	f891 c000 	ldrb.w	ip, [r1]
 801ac56:	f810 000c 	ldrb.w	r0, [r0, ip]
 801ac5a:	2800      	cmp	r0, #0
 801ac5c:	d035      	beq.n	801acca <_scanf_i+0x15e>
 801ac5e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801ac62:	d124      	bne.n	801acae <_scanf_i+0x142>
 801ac64:	0510      	lsls	r0, r2, #20
 801ac66:	d522      	bpl.n	801acae <_scanf_i+0x142>
 801ac68:	f10b 0b01 	add.w	fp, fp, #1
 801ac6c:	f1b9 0f00 	cmp.w	r9, #0
 801ac70:	d003      	beq.n	801ac7a <_scanf_i+0x10e>
 801ac72:	3301      	adds	r3, #1
 801ac74:	f109 39ff 	add.w	r9, r9, #4294967295
 801ac78:	60a3      	str	r3, [r4, #8]
 801ac7a:	6873      	ldr	r3, [r6, #4]
 801ac7c:	3b01      	subs	r3, #1
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	6073      	str	r3, [r6, #4]
 801ac82:	dd1b      	ble.n	801acbc <_scanf_i+0x150>
 801ac84:	6833      	ldr	r3, [r6, #0]
 801ac86:	3301      	adds	r3, #1
 801ac88:	6033      	str	r3, [r6, #0]
 801ac8a:	68a3      	ldr	r3, [r4, #8]
 801ac8c:	3b01      	subs	r3, #1
 801ac8e:	60a3      	str	r3, [r4, #8]
 801ac90:	e7d9      	b.n	801ac46 <_scanf_i+0xda>
 801ac92:	f1bb 0f02 	cmp.w	fp, #2
 801ac96:	d1ae      	bne.n	801abf6 <_scanf_i+0x8a>
 801ac98:	6822      	ldr	r2, [r4, #0]
 801ac9a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801ac9e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801aca2:	d1c4      	bne.n	801ac2e <_scanf_i+0xc2>
 801aca4:	2110      	movs	r1, #16
 801aca6:	6061      	str	r1, [r4, #4]
 801aca8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801acac:	e7a2      	b.n	801abf4 <_scanf_i+0x88>
 801acae:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801acb2:	6022      	str	r2, [r4, #0]
 801acb4:	780b      	ldrb	r3, [r1, #0]
 801acb6:	f805 3b01 	strb.w	r3, [r5], #1
 801acba:	e7de      	b.n	801ac7a <_scanf_i+0x10e>
 801acbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801acc0:	4631      	mov	r1, r6
 801acc2:	4650      	mov	r0, sl
 801acc4:	4798      	blx	r3
 801acc6:	2800      	cmp	r0, #0
 801acc8:	d0df      	beq.n	801ac8a <_scanf_i+0x11e>
 801acca:	6823      	ldr	r3, [r4, #0]
 801accc:	05d9      	lsls	r1, r3, #23
 801acce:	d50d      	bpl.n	801acec <_scanf_i+0x180>
 801acd0:	42bd      	cmp	r5, r7
 801acd2:	d909      	bls.n	801ace8 <_scanf_i+0x17c>
 801acd4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801acd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801acdc:	4632      	mov	r2, r6
 801acde:	4650      	mov	r0, sl
 801ace0:	4798      	blx	r3
 801ace2:	f105 39ff 	add.w	r9, r5, #4294967295
 801ace6:	464d      	mov	r5, r9
 801ace8:	42bd      	cmp	r5, r7
 801acea:	d028      	beq.n	801ad3e <_scanf_i+0x1d2>
 801acec:	6822      	ldr	r2, [r4, #0]
 801acee:	f012 0210 	ands.w	r2, r2, #16
 801acf2:	d113      	bne.n	801ad1c <_scanf_i+0x1b0>
 801acf4:	702a      	strb	r2, [r5, #0]
 801acf6:	6863      	ldr	r3, [r4, #4]
 801acf8:	9e01      	ldr	r6, [sp, #4]
 801acfa:	4639      	mov	r1, r7
 801acfc:	4650      	mov	r0, sl
 801acfe:	47b0      	blx	r6
 801ad00:	f8d8 3000 	ldr.w	r3, [r8]
 801ad04:	6821      	ldr	r1, [r4, #0]
 801ad06:	1d1a      	adds	r2, r3, #4
 801ad08:	f8c8 2000 	str.w	r2, [r8]
 801ad0c:	f011 0f20 	tst.w	r1, #32
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	d00f      	beq.n	801ad34 <_scanf_i+0x1c8>
 801ad14:	6018      	str	r0, [r3, #0]
 801ad16:	68e3      	ldr	r3, [r4, #12]
 801ad18:	3301      	adds	r3, #1
 801ad1a:	60e3      	str	r3, [r4, #12]
 801ad1c:	6923      	ldr	r3, [r4, #16]
 801ad1e:	1bed      	subs	r5, r5, r7
 801ad20:	445d      	add	r5, fp
 801ad22:	442b      	add	r3, r5
 801ad24:	6123      	str	r3, [r4, #16]
 801ad26:	2000      	movs	r0, #0
 801ad28:	b007      	add	sp, #28
 801ad2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad2e:	f04f 0b00 	mov.w	fp, #0
 801ad32:	e7ca      	b.n	801acca <_scanf_i+0x15e>
 801ad34:	07ca      	lsls	r2, r1, #31
 801ad36:	bf4c      	ite	mi
 801ad38:	8018      	strhmi	r0, [r3, #0]
 801ad3a:	6018      	strpl	r0, [r3, #0]
 801ad3c:	e7eb      	b.n	801ad16 <_scanf_i+0x1aa>
 801ad3e:	2001      	movs	r0, #1
 801ad40:	e7f2      	b.n	801ad28 <_scanf_i+0x1bc>
 801ad42:	bf00      	nop
 801ad44:	0801bd9c 	.word	0x0801bd9c
 801ad48:	0801b229 	.word	0x0801b229
 801ad4c:	0801b309 	.word	0x0801b309
 801ad50:	0801da97 	.word	0x0801da97

0801ad54 <__sflush_r>:
 801ad54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ad58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad5c:	0716      	lsls	r6, r2, #28
 801ad5e:	4605      	mov	r5, r0
 801ad60:	460c      	mov	r4, r1
 801ad62:	d454      	bmi.n	801ae0e <__sflush_r+0xba>
 801ad64:	684b      	ldr	r3, [r1, #4]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	dc02      	bgt.n	801ad70 <__sflush_r+0x1c>
 801ad6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	dd48      	ble.n	801ae02 <__sflush_r+0xae>
 801ad70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ad72:	2e00      	cmp	r6, #0
 801ad74:	d045      	beq.n	801ae02 <__sflush_r+0xae>
 801ad76:	2300      	movs	r3, #0
 801ad78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ad7c:	682f      	ldr	r7, [r5, #0]
 801ad7e:	6a21      	ldr	r1, [r4, #32]
 801ad80:	602b      	str	r3, [r5, #0]
 801ad82:	d030      	beq.n	801ade6 <__sflush_r+0x92>
 801ad84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ad86:	89a3      	ldrh	r3, [r4, #12]
 801ad88:	0759      	lsls	r1, r3, #29
 801ad8a:	d505      	bpl.n	801ad98 <__sflush_r+0x44>
 801ad8c:	6863      	ldr	r3, [r4, #4]
 801ad8e:	1ad2      	subs	r2, r2, r3
 801ad90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ad92:	b10b      	cbz	r3, 801ad98 <__sflush_r+0x44>
 801ad94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ad96:	1ad2      	subs	r2, r2, r3
 801ad98:	2300      	movs	r3, #0
 801ad9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ad9c:	6a21      	ldr	r1, [r4, #32]
 801ad9e:	4628      	mov	r0, r5
 801ada0:	47b0      	blx	r6
 801ada2:	1c43      	adds	r3, r0, #1
 801ada4:	89a3      	ldrh	r3, [r4, #12]
 801ada6:	d106      	bne.n	801adb6 <__sflush_r+0x62>
 801ada8:	6829      	ldr	r1, [r5, #0]
 801adaa:	291d      	cmp	r1, #29
 801adac:	d82b      	bhi.n	801ae06 <__sflush_r+0xb2>
 801adae:	4a2a      	ldr	r2, [pc, #168]	@ (801ae58 <__sflush_r+0x104>)
 801adb0:	40ca      	lsrs	r2, r1
 801adb2:	07d6      	lsls	r6, r2, #31
 801adb4:	d527      	bpl.n	801ae06 <__sflush_r+0xb2>
 801adb6:	2200      	movs	r2, #0
 801adb8:	6062      	str	r2, [r4, #4]
 801adba:	04d9      	lsls	r1, r3, #19
 801adbc:	6922      	ldr	r2, [r4, #16]
 801adbe:	6022      	str	r2, [r4, #0]
 801adc0:	d504      	bpl.n	801adcc <__sflush_r+0x78>
 801adc2:	1c42      	adds	r2, r0, #1
 801adc4:	d101      	bne.n	801adca <__sflush_r+0x76>
 801adc6:	682b      	ldr	r3, [r5, #0]
 801adc8:	b903      	cbnz	r3, 801adcc <__sflush_r+0x78>
 801adca:	6560      	str	r0, [r4, #84]	@ 0x54
 801adcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801adce:	602f      	str	r7, [r5, #0]
 801add0:	b1b9      	cbz	r1, 801ae02 <__sflush_r+0xae>
 801add2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801add6:	4299      	cmp	r1, r3
 801add8:	d002      	beq.n	801ade0 <__sflush_r+0x8c>
 801adda:	4628      	mov	r0, r5
 801addc:	f7fe faf0 	bl	80193c0 <_free_r>
 801ade0:	2300      	movs	r3, #0
 801ade2:	6363      	str	r3, [r4, #52]	@ 0x34
 801ade4:	e00d      	b.n	801ae02 <__sflush_r+0xae>
 801ade6:	2301      	movs	r3, #1
 801ade8:	4628      	mov	r0, r5
 801adea:	47b0      	blx	r6
 801adec:	4602      	mov	r2, r0
 801adee:	1c50      	adds	r0, r2, #1
 801adf0:	d1c9      	bne.n	801ad86 <__sflush_r+0x32>
 801adf2:	682b      	ldr	r3, [r5, #0]
 801adf4:	2b00      	cmp	r3, #0
 801adf6:	d0c6      	beq.n	801ad86 <__sflush_r+0x32>
 801adf8:	2b1d      	cmp	r3, #29
 801adfa:	d001      	beq.n	801ae00 <__sflush_r+0xac>
 801adfc:	2b16      	cmp	r3, #22
 801adfe:	d11e      	bne.n	801ae3e <__sflush_r+0xea>
 801ae00:	602f      	str	r7, [r5, #0]
 801ae02:	2000      	movs	r0, #0
 801ae04:	e022      	b.n	801ae4c <__sflush_r+0xf8>
 801ae06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ae0a:	b21b      	sxth	r3, r3
 801ae0c:	e01b      	b.n	801ae46 <__sflush_r+0xf2>
 801ae0e:	690f      	ldr	r7, [r1, #16]
 801ae10:	2f00      	cmp	r7, #0
 801ae12:	d0f6      	beq.n	801ae02 <__sflush_r+0xae>
 801ae14:	0793      	lsls	r3, r2, #30
 801ae16:	680e      	ldr	r6, [r1, #0]
 801ae18:	bf08      	it	eq
 801ae1a:	694b      	ldreq	r3, [r1, #20]
 801ae1c:	600f      	str	r7, [r1, #0]
 801ae1e:	bf18      	it	ne
 801ae20:	2300      	movne	r3, #0
 801ae22:	eba6 0807 	sub.w	r8, r6, r7
 801ae26:	608b      	str	r3, [r1, #8]
 801ae28:	f1b8 0f00 	cmp.w	r8, #0
 801ae2c:	dde9      	ble.n	801ae02 <__sflush_r+0xae>
 801ae2e:	6a21      	ldr	r1, [r4, #32]
 801ae30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ae32:	4643      	mov	r3, r8
 801ae34:	463a      	mov	r2, r7
 801ae36:	4628      	mov	r0, r5
 801ae38:	47b0      	blx	r6
 801ae3a:	2800      	cmp	r0, #0
 801ae3c:	dc08      	bgt.n	801ae50 <__sflush_r+0xfc>
 801ae3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ae46:	81a3      	strh	r3, [r4, #12]
 801ae48:	f04f 30ff 	mov.w	r0, #4294967295
 801ae4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae50:	4407      	add	r7, r0
 801ae52:	eba8 0800 	sub.w	r8, r8, r0
 801ae56:	e7e7      	b.n	801ae28 <__sflush_r+0xd4>
 801ae58:	20400001 	.word	0x20400001

0801ae5c <_fflush_r>:
 801ae5c:	b538      	push	{r3, r4, r5, lr}
 801ae5e:	690b      	ldr	r3, [r1, #16]
 801ae60:	4605      	mov	r5, r0
 801ae62:	460c      	mov	r4, r1
 801ae64:	b913      	cbnz	r3, 801ae6c <_fflush_r+0x10>
 801ae66:	2500      	movs	r5, #0
 801ae68:	4628      	mov	r0, r5
 801ae6a:	bd38      	pop	{r3, r4, r5, pc}
 801ae6c:	b118      	cbz	r0, 801ae76 <_fflush_r+0x1a>
 801ae6e:	6a03      	ldr	r3, [r0, #32]
 801ae70:	b90b      	cbnz	r3, 801ae76 <_fflush_r+0x1a>
 801ae72:	f7fd f993 	bl	801819c <__sinit>
 801ae76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	d0f3      	beq.n	801ae66 <_fflush_r+0xa>
 801ae7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ae80:	07d0      	lsls	r0, r2, #31
 801ae82:	d404      	bmi.n	801ae8e <_fflush_r+0x32>
 801ae84:	0599      	lsls	r1, r3, #22
 801ae86:	d402      	bmi.n	801ae8e <_fflush_r+0x32>
 801ae88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ae8a:	f7fd fc20 	bl	80186ce <__retarget_lock_acquire_recursive>
 801ae8e:	4628      	mov	r0, r5
 801ae90:	4621      	mov	r1, r4
 801ae92:	f7ff ff5f 	bl	801ad54 <__sflush_r>
 801ae96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ae98:	07da      	lsls	r2, r3, #31
 801ae9a:	4605      	mov	r5, r0
 801ae9c:	d4e4      	bmi.n	801ae68 <_fflush_r+0xc>
 801ae9e:	89a3      	ldrh	r3, [r4, #12]
 801aea0:	059b      	lsls	r3, r3, #22
 801aea2:	d4e1      	bmi.n	801ae68 <_fflush_r+0xc>
 801aea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801aea6:	f7fd fc13 	bl	80186d0 <__retarget_lock_release_recursive>
 801aeaa:	e7dd      	b.n	801ae68 <_fflush_r+0xc>

0801aeac <__swhatbuf_r>:
 801aeac:	b570      	push	{r4, r5, r6, lr}
 801aeae:	460c      	mov	r4, r1
 801aeb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aeb4:	2900      	cmp	r1, #0
 801aeb6:	b096      	sub	sp, #88	@ 0x58
 801aeb8:	4615      	mov	r5, r2
 801aeba:	461e      	mov	r6, r3
 801aebc:	da0d      	bge.n	801aeda <__swhatbuf_r+0x2e>
 801aebe:	89a3      	ldrh	r3, [r4, #12]
 801aec0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801aec4:	f04f 0100 	mov.w	r1, #0
 801aec8:	bf14      	ite	ne
 801aeca:	2340      	movne	r3, #64	@ 0x40
 801aecc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801aed0:	2000      	movs	r0, #0
 801aed2:	6031      	str	r1, [r6, #0]
 801aed4:	602b      	str	r3, [r5, #0]
 801aed6:	b016      	add	sp, #88	@ 0x58
 801aed8:	bd70      	pop	{r4, r5, r6, pc}
 801aeda:	466a      	mov	r2, sp
 801aedc:	f000 f8d6 	bl	801b08c <_fstat_r>
 801aee0:	2800      	cmp	r0, #0
 801aee2:	dbec      	blt.n	801aebe <__swhatbuf_r+0x12>
 801aee4:	9901      	ldr	r1, [sp, #4]
 801aee6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801aeea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801aeee:	4259      	negs	r1, r3
 801aef0:	4159      	adcs	r1, r3
 801aef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801aef6:	e7eb      	b.n	801aed0 <__swhatbuf_r+0x24>

0801aef8 <__smakebuf_r>:
 801aef8:	898b      	ldrh	r3, [r1, #12]
 801aefa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aefc:	079d      	lsls	r5, r3, #30
 801aefe:	4606      	mov	r6, r0
 801af00:	460c      	mov	r4, r1
 801af02:	d507      	bpl.n	801af14 <__smakebuf_r+0x1c>
 801af04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801af08:	6023      	str	r3, [r4, #0]
 801af0a:	6123      	str	r3, [r4, #16]
 801af0c:	2301      	movs	r3, #1
 801af0e:	6163      	str	r3, [r4, #20]
 801af10:	b003      	add	sp, #12
 801af12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af14:	ab01      	add	r3, sp, #4
 801af16:	466a      	mov	r2, sp
 801af18:	f7ff ffc8 	bl	801aeac <__swhatbuf_r>
 801af1c:	9f00      	ldr	r7, [sp, #0]
 801af1e:	4605      	mov	r5, r0
 801af20:	4639      	mov	r1, r7
 801af22:	4630      	mov	r0, r6
 801af24:	f7fb fd88 	bl	8016a38 <_malloc_r>
 801af28:	b948      	cbnz	r0, 801af3e <__smakebuf_r+0x46>
 801af2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801af2e:	059a      	lsls	r2, r3, #22
 801af30:	d4ee      	bmi.n	801af10 <__smakebuf_r+0x18>
 801af32:	f023 0303 	bic.w	r3, r3, #3
 801af36:	f043 0302 	orr.w	r3, r3, #2
 801af3a:	81a3      	strh	r3, [r4, #12]
 801af3c:	e7e2      	b.n	801af04 <__smakebuf_r+0xc>
 801af3e:	89a3      	ldrh	r3, [r4, #12]
 801af40:	6020      	str	r0, [r4, #0]
 801af42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801af46:	81a3      	strh	r3, [r4, #12]
 801af48:	9b01      	ldr	r3, [sp, #4]
 801af4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801af4e:	b15b      	cbz	r3, 801af68 <__smakebuf_r+0x70>
 801af50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801af54:	4630      	mov	r0, r6
 801af56:	f000 f8ab 	bl	801b0b0 <_isatty_r>
 801af5a:	b128      	cbz	r0, 801af68 <__smakebuf_r+0x70>
 801af5c:	89a3      	ldrh	r3, [r4, #12]
 801af5e:	f023 0303 	bic.w	r3, r3, #3
 801af62:	f043 0301 	orr.w	r3, r3, #1
 801af66:	81a3      	strh	r3, [r4, #12]
 801af68:	89a3      	ldrh	r3, [r4, #12]
 801af6a:	431d      	orrs	r5, r3
 801af6c:	81a5      	strh	r5, [r4, #12]
 801af6e:	e7cf      	b.n	801af10 <__smakebuf_r+0x18>

0801af70 <__sccl>:
 801af70:	b570      	push	{r4, r5, r6, lr}
 801af72:	780b      	ldrb	r3, [r1, #0]
 801af74:	4604      	mov	r4, r0
 801af76:	2b5e      	cmp	r3, #94	@ 0x5e
 801af78:	bf0b      	itete	eq
 801af7a:	784b      	ldrbeq	r3, [r1, #1]
 801af7c:	1c4a      	addne	r2, r1, #1
 801af7e:	1c8a      	addeq	r2, r1, #2
 801af80:	2100      	movne	r1, #0
 801af82:	bf08      	it	eq
 801af84:	2101      	moveq	r1, #1
 801af86:	3801      	subs	r0, #1
 801af88:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801af8c:	f800 1f01 	strb.w	r1, [r0, #1]!
 801af90:	42a8      	cmp	r0, r5
 801af92:	d1fb      	bne.n	801af8c <__sccl+0x1c>
 801af94:	b90b      	cbnz	r3, 801af9a <__sccl+0x2a>
 801af96:	1e50      	subs	r0, r2, #1
 801af98:	bd70      	pop	{r4, r5, r6, pc}
 801af9a:	f081 0101 	eor.w	r1, r1, #1
 801af9e:	54e1      	strb	r1, [r4, r3]
 801afa0:	4610      	mov	r0, r2
 801afa2:	4602      	mov	r2, r0
 801afa4:	f812 5b01 	ldrb.w	r5, [r2], #1
 801afa8:	2d2d      	cmp	r5, #45	@ 0x2d
 801afaa:	d005      	beq.n	801afb8 <__sccl+0x48>
 801afac:	2d5d      	cmp	r5, #93	@ 0x5d
 801afae:	d016      	beq.n	801afde <__sccl+0x6e>
 801afb0:	2d00      	cmp	r5, #0
 801afb2:	d0f1      	beq.n	801af98 <__sccl+0x28>
 801afb4:	462b      	mov	r3, r5
 801afb6:	e7f2      	b.n	801af9e <__sccl+0x2e>
 801afb8:	7846      	ldrb	r6, [r0, #1]
 801afba:	2e5d      	cmp	r6, #93	@ 0x5d
 801afbc:	d0fa      	beq.n	801afb4 <__sccl+0x44>
 801afbe:	42b3      	cmp	r3, r6
 801afc0:	dcf8      	bgt.n	801afb4 <__sccl+0x44>
 801afc2:	3002      	adds	r0, #2
 801afc4:	461a      	mov	r2, r3
 801afc6:	3201      	adds	r2, #1
 801afc8:	4296      	cmp	r6, r2
 801afca:	54a1      	strb	r1, [r4, r2]
 801afcc:	dcfb      	bgt.n	801afc6 <__sccl+0x56>
 801afce:	1af2      	subs	r2, r6, r3
 801afd0:	3a01      	subs	r2, #1
 801afd2:	1c5d      	adds	r5, r3, #1
 801afd4:	42b3      	cmp	r3, r6
 801afd6:	bfa8      	it	ge
 801afd8:	2200      	movge	r2, #0
 801afda:	18ab      	adds	r3, r5, r2
 801afdc:	e7e1      	b.n	801afa2 <__sccl+0x32>
 801afde:	4610      	mov	r0, r2
 801afe0:	e7da      	b.n	801af98 <__sccl+0x28>

0801afe2 <__submore>:
 801afe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afe6:	460c      	mov	r4, r1
 801afe8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801afea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801afee:	4299      	cmp	r1, r3
 801aff0:	d11d      	bne.n	801b02e <__submore+0x4c>
 801aff2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801aff6:	f7fb fd1f 	bl	8016a38 <_malloc_r>
 801affa:	b918      	cbnz	r0, 801b004 <__submore+0x22>
 801affc:	f04f 30ff 	mov.w	r0, #4294967295
 801b000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b004:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b008:	63a3      	str	r3, [r4, #56]	@ 0x38
 801b00a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801b00e:	6360      	str	r0, [r4, #52]	@ 0x34
 801b010:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801b014:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801b018:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801b01c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801b020:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801b024:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801b028:	6020      	str	r0, [r4, #0]
 801b02a:	2000      	movs	r0, #0
 801b02c:	e7e8      	b.n	801b000 <__submore+0x1e>
 801b02e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801b030:	0077      	lsls	r7, r6, #1
 801b032:	463a      	mov	r2, r7
 801b034:	f7fb fd94 	bl	8016b60 <_realloc_r>
 801b038:	4605      	mov	r5, r0
 801b03a:	2800      	cmp	r0, #0
 801b03c:	d0de      	beq.n	801affc <__submore+0x1a>
 801b03e:	eb00 0806 	add.w	r8, r0, r6
 801b042:	4601      	mov	r1, r0
 801b044:	4632      	mov	r2, r6
 801b046:	4640      	mov	r0, r8
 801b048:	f7fd fb4b 	bl	80186e2 <memcpy>
 801b04c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801b050:	f8c4 8000 	str.w	r8, [r4]
 801b054:	e7e9      	b.n	801b02a <__submore+0x48>

0801b056 <memmove>:
 801b056:	4288      	cmp	r0, r1
 801b058:	b510      	push	{r4, lr}
 801b05a:	eb01 0402 	add.w	r4, r1, r2
 801b05e:	d902      	bls.n	801b066 <memmove+0x10>
 801b060:	4284      	cmp	r4, r0
 801b062:	4623      	mov	r3, r4
 801b064:	d807      	bhi.n	801b076 <memmove+0x20>
 801b066:	1e43      	subs	r3, r0, #1
 801b068:	42a1      	cmp	r1, r4
 801b06a:	d008      	beq.n	801b07e <memmove+0x28>
 801b06c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b070:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b074:	e7f8      	b.n	801b068 <memmove+0x12>
 801b076:	4402      	add	r2, r0
 801b078:	4601      	mov	r1, r0
 801b07a:	428a      	cmp	r2, r1
 801b07c:	d100      	bne.n	801b080 <memmove+0x2a>
 801b07e:	bd10      	pop	{r4, pc}
 801b080:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b084:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b088:	e7f7      	b.n	801b07a <memmove+0x24>
	...

0801b08c <_fstat_r>:
 801b08c:	b538      	push	{r3, r4, r5, lr}
 801b08e:	4d07      	ldr	r5, [pc, #28]	@ (801b0ac <_fstat_r+0x20>)
 801b090:	2300      	movs	r3, #0
 801b092:	4604      	mov	r4, r0
 801b094:	4608      	mov	r0, r1
 801b096:	4611      	mov	r1, r2
 801b098:	602b      	str	r3, [r5, #0]
 801b09a:	f7f4 fb73 	bl	800f784 <_fstat>
 801b09e:	1c43      	adds	r3, r0, #1
 801b0a0:	d102      	bne.n	801b0a8 <_fstat_r+0x1c>
 801b0a2:	682b      	ldr	r3, [r5, #0]
 801b0a4:	b103      	cbz	r3, 801b0a8 <_fstat_r+0x1c>
 801b0a6:	6023      	str	r3, [r4, #0]
 801b0a8:	bd38      	pop	{r3, r4, r5, pc}
 801b0aa:	bf00      	nop
 801b0ac:	200143d8 	.word	0x200143d8

0801b0b0 <_isatty_r>:
 801b0b0:	b538      	push	{r3, r4, r5, lr}
 801b0b2:	4d06      	ldr	r5, [pc, #24]	@ (801b0cc <_isatty_r+0x1c>)
 801b0b4:	2300      	movs	r3, #0
 801b0b6:	4604      	mov	r4, r0
 801b0b8:	4608      	mov	r0, r1
 801b0ba:	602b      	str	r3, [r5, #0]
 801b0bc:	f7f4 fb72 	bl	800f7a4 <_isatty>
 801b0c0:	1c43      	adds	r3, r0, #1
 801b0c2:	d102      	bne.n	801b0ca <_isatty_r+0x1a>
 801b0c4:	682b      	ldr	r3, [r5, #0]
 801b0c6:	b103      	cbz	r3, 801b0ca <_isatty_r+0x1a>
 801b0c8:	6023      	str	r3, [r4, #0]
 801b0ca:	bd38      	pop	{r3, r4, r5, pc}
 801b0cc:	200143d8 	.word	0x200143d8

0801b0d0 <__assert_func>:
 801b0d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b0d2:	4614      	mov	r4, r2
 801b0d4:	461a      	mov	r2, r3
 801b0d6:	4b09      	ldr	r3, [pc, #36]	@ (801b0fc <__assert_func+0x2c>)
 801b0d8:	681b      	ldr	r3, [r3, #0]
 801b0da:	4605      	mov	r5, r0
 801b0dc:	68d8      	ldr	r0, [r3, #12]
 801b0de:	b14c      	cbz	r4, 801b0f4 <__assert_func+0x24>
 801b0e0:	4b07      	ldr	r3, [pc, #28]	@ (801b100 <__assert_func+0x30>)
 801b0e2:	9100      	str	r1, [sp, #0]
 801b0e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b0e8:	4906      	ldr	r1, [pc, #24]	@ (801b104 <__assert_func+0x34>)
 801b0ea:	462b      	mov	r3, r5
 801b0ec:	f000 f90e 	bl	801b30c <fiprintf>
 801b0f0:	f000 f91e 	bl	801b330 <abort>
 801b0f4:	4b04      	ldr	r3, [pc, #16]	@ (801b108 <__assert_func+0x38>)
 801b0f6:	461c      	mov	r4, r3
 801b0f8:	e7f3      	b.n	801b0e2 <__assert_func+0x12>
 801b0fa:	bf00      	nop
 801b0fc:	20000200 	.word	0x20000200
 801b100:	0801daa2 	.word	0x0801daa2
 801b104:	0801daaf 	.word	0x0801daaf
 801b108:	0801dadd 	.word	0x0801dadd

0801b10c <_calloc_r>:
 801b10c:	b570      	push	{r4, r5, r6, lr}
 801b10e:	fba1 5402 	umull	r5, r4, r1, r2
 801b112:	b934      	cbnz	r4, 801b122 <_calloc_r+0x16>
 801b114:	4629      	mov	r1, r5
 801b116:	f7fb fc8f 	bl	8016a38 <_malloc_r>
 801b11a:	4606      	mov	r6, r0
 801b11c:	b928      	cbnz	r0, 801b12a <_calloc_r+0x1e>
 801b11e:	4630      	mov	r0, r6
 801b120:	bd70      	pop	{r4, r5, r6, pc}
 801b122:	220c      	movs	r2, #12
 801b124:	6002      	str	r2, [r0, #0]
 801b126:	2600      	movs	r6, #0
 801b128:	e7f9      	b.n	801b11e <_calloc_r+0x12>
 801b12a:	462a      	mov	r2, r5
 801b12c:	4621      	mov	r1, r4
 801b12e:	f7fd fa05 	bl	801853c <memset>
 801b132:	e7f4      	b.n	801b11e <_calloc_r+0x12>

0801b134 <_strtol_l.isra.0>:
 801b134:	2b24      	cmp	r3, #36	@ 0x24
 801b136:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b13a:	4686      	mov	lr, r0
 801b13c:	4690      	mov	r8, r2
 801b13e:	d801      	bhi.n	801b144 <_strtol_l.isra.0+0x10>
 801b140:	2b01      	cmp	r3, #1
 801b142:	d106      	bne.n	801b152 <_strtol_l.isra.0+0x1e>
 801b144:	f7fd fa98 	bl	8018678 <__errno>
 801b148:	2316      	movs	r3, #22
 801b14a:	6003      	str	r3, [r0, #0]
 801b14c:	2000      	movs	r0, #0
 801b14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b152:	4834      	ldr	r0, [pc, #208]	@ (801b224 <_strtol_l.isra.0+0xf0>)
 801b154:	460d      	mov	r5, r1
 801b156:	462a      	mov	r2, r5
 801b158:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b15c:	5d06      	ldrb	r6, [r0, r4]
 801b15e:	f016 0608 	ands.w	r6, r6, #8
 801b162:	d1f8      	bne.n	801b156 <_strtol_l.isra.0+0x22>
 801b164:	2c2d      	cmp	r4, #45	@ 0x2d
 801b166:	d110      	bne.n	801b18a <_strtol_l.isra.0+0x56>
 801b168:	782c      	ldrb	r4, [r5, #0]
 801b16a:	2601      	movs	r6, #1
 801b16c:	1c95      	adds	r5, r2, #2
 801b16e:	f033 0210 	bics.w	r2, r3, #16
 801b172:	d115      	bne.n	801b1a0 <_strtol_l.isra.0+0x6c>
 801b174:	2c30      	cmp	r4, #48	@ 0x30
 801b176:	d10d      	bne.n	801b194 <_strtol_l.isra.0+0x60>
 801b178:	782a      	ldrb	r2, [r5, #0]
 801b17a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801b17e:	2a58      	cmp	r2, #88	@ 0x58
 801b180:	d108      	bne.n	801b194 <_strtol_l.isra.0+0x60>
 801b182:	786c      	ldrb	r4, [r5, #1]
 801b184:	3502      	adds	r5, #2
 801b186:	2310      	movs	r3, #16
 801b188:	e00a      	b.n	801b1a0 <_strtol_l.isra.0+0x6c>
 801b18a:	2c2b      	cmp	r4, #43	@ 0x2b
 801b18c:	bf04      	itt	eq
 801b18e:	782c      	ldrbeq	r4, [r5, #0]
 801b190:	1c95      	addeq	r5, r2, #2
 801b192:	e7ec      	b.n	801b16e <_strtol_l.isra.0+0x3a>
 801b194:	2b00      	cmp	r3, #0
 801b196:	d1f6      	bne.n	801b186 <_strtol_l.isra.0+0x52>
 801b198:	2c30      	cmp	r4, #48	@ 0x30
 801b19a:	bf14      	ite	ne
 801b19c:	230a      	movne	r3, #10
 801b19e:	2308      	moveq	r3, #8
 801b1a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801b1a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b1a8:	2200      	movs	r2, #0
 801b1aa:	fbbc f9f3 	udiv	r9, ip, r3
 801b1ae:	4610      	mov	r0, r2
 801b1b0:	fb03 ca19 	mls	sl, r3, r9, ip
 801b1b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801b1b8:	2f09      	cmp	r7, #9
 801b1ba:	d80f      	bhi.n	801b1dc <_strtol_l.isra.0+0xa8>
 801b1bc:	463c      	mov	r4, r7
 801b1be:	42a3      	cmp	r3, r4
 801b1c0:	dd1b      	ble.n	801b1fa <_strtol_l.isra.0+0xc6>
 801b1c2:	1c57      	adds	r7, r2, #1
 801b1c4:	d007      	beq.n	801b1d6 <_strtol_l.isra.0+0xa2>
 801b1c6:	4581      	cmp	r9, r0
 801b1c8:	d314      	bcc.n	801b1f4 <_strtol_l.isra.0+0xc0>
 801b1ca:	d101      	bne.n	801b1d0 <_strtol_l.isra.0+0x9c>
 801b1cc:	45a2      	cmp	sl, r4
 801b1ce:	db11      	blt.n	801b1f4 <_strtol_l.isra.0+0xc0>
 801b1d0:	fb00 4003 	mla	r0, r0, r3, r4
 801b1d4:	2201      	movs	r2, #1
 801b1d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b1da:	e7eb      	b.n	801b1b4 <_strtol_l.isra.0+0x80>
 801b1dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801b1e0:	2f19      	cmp	r7, #25
 801b1e2:	d801      	bhi.n	801b1e8 <_strtol_l.isra.0+0xb4>
 801b1e4:	3c37      	subs	r4, #55	@ 0x37
 801b1e6:	e7ea      	b.n	801b1be <_strtol_l.isra.0+0x8a>
 801b1e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801b1ec:	2f19      	cmp	r7, #25
 801b1ee:	d804      	bhi.n	801b1fa <_strtol_l.isra.0+0xc6>
 801b1f0:	3c57      	subs	r4, #87	@ 0x57
 801b1f2:	e7e4      	b.n	801b1be <_strtol_l.isra.0+0x8a>
 801b1f4:	f04f 32ff 	mov.w	r2, #4294967295
 801b1f8:	e7ed      	b.n	801b1d6 <_strtol_l.isra.0+0xa2>
 801b1fa:	1c53      	adds	r3, r2, #1
 801b1fc:	d108      	bne.n	801b210 <_strtol_l.isra.0+0xdc>
 801b1fe:	2322      	movs	r3, #34	@ 0x22
 801b200:	f8ce 3000 	str.w	r3, [lr]
 801b204:	4660      	mov	r0, ip
 801b206:	f1b8 0f00 	cmp.w	r8, #0
 801b20a:	d0a0      	beq.n	801b14e <_strtol_l.isra.0+0x1a>
 801b20c:	1e69      	subs	r1, r5, #1
 801b20e:	e006      	b.n	801b21e <_strtol_l.isra.0+0xea>
 801b210:	b106      	cbz	r6, 801b214 <_strtol_l.isra.0+0xe0>
 801b212:	4240      	negs	r0, r0
 801b214:	f1b8 0f00 	cmp.w	r8, #0
 801b218:	d099      	beq.n	801b14e <_strtol_l.isra.0+0x1a>
 801b21a:	2a00      	cmp	r2, #0
 801b21c:	d1f6      	bne.n	801b20c <_strtol_l.isra.0+0xd8>
 801b21e:	f8c8 1000 	str.w	r1, [r8]
 801b222:	e794      	b.n	801b14e <_strtol_l.isra.0+0x1a>
 801b224:	0801db31 	.word	0x0801db31

0801b228 <_strtol_r>:
 801b228:	f7ff bf84 	b.w	801b134 <_strtol_l.isra.0>

0801b22c <_strtoul_l.isra.0>:
 801b22c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b230:	4e34      	ldr	r6, [pc, #208]	@ (801b304 <_strtoul_l.isra.0+0xd8>)
 801b232:	4686      	mov	lr, r0
 801b234:	460d      	mov	r5, r1
 801b236:	4628      	mov	r0, r5
 801b238:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b23c:	5d37      	ldrb	r7, [r6, r4]
 801b23e:	f017 0708 	ands.w	r7, r7, #8
 801b242:	d1f8      	bne.n	801b236 <_strtoul_l.isra.0+0xa>
 801b244:	2c2d      	cmp	r4, #45	@ 0x2d
 801b246:	d110      	bne.n	801b26a <_strtoul_l.isra.0+0x3e>
 801b248:	782c      	ldrb	r4, [r5, #0]
 801b24a:	2701      	movs	r7, #1
 801b24c:	1c85      	adds	r5, r0, #2
 801b24e:	f033 0010 	bics.w	r0, r3, #16
 801b252:	d115      	bne.n	801b280 <_strtoul_l.isra.0+0x54>
 801b254:	2c30      	cmp	r4, #48	@ 0x30
 801b256:	d10d      	bne.n	801b274 <_strtoul_l.isra.0+0x48>
 801b258:	7828      	ldrb	r0, [r5, #0]
 801b25a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801b25e:	2858      	cmp	r0, #88	@ 0x58
 801b260:	d108      	bne.n	801b274 <_strtoul_l.isra.0+0x48>
 801b262:	786c      	ldrb	r4, [r5, #1]
 801b264:	3502      	adds	r5, #2
 801b266:	2310      	movs	r3, #16
 801b268:	e00a      	b.n	801b280 <_strtoul_l.isra.0+0x54>
 801b26a:	2c2b      	cmp	r4, #43	@ 0x2b
 801b26c:	bf04      	itt	eq
 801b26e:	782c      	ldrbeq	r4, [r5, #0]
 801b270:	1c85      	addeq	r5, r0, #2
 801b272:	e7ec      	b.n	801b24e <_strtoul_l.isra.0+0x22>
 801b274:	2b00      	cmp	r3, #0
 801b276:	d1f6      	bne.n	801b266 <_strtoul_l.isra.0+0x3a>
 801b278:	2c30      	cmp	r4, #48	@ 0x30
 801b27a:	bf14      	ite	ne
 801b27c:	230a      	movne	r3, #10
 801b27e:	2308      	moveq	r3, #8
 801b280:	f04f 38ff 	mov.w	r8, #4294967295
 801b284:	2600      	movs	r6, #0
 801b286:	fbb8 f8f3 	udiv	r8, r8, r3
 801b28a:	fb03 f908 	mul.w	r9, r3, r8
 801b28e:	ea6f 0909 	mvn.w	r9, r9
 801b292:	4630      	mov	r0, r6
 801b294:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801b298:	f1bc 0f09 	cmp.w	ip, #9
 801b29c:	d810      	bhi.n	801b2c0 <_strtoul_l.isra.0+0x94>
 801b29e:	4664      	mov	r4, ip
 801b2a0:	42a3      	cmp	r3, r4
 801b2a2:	dd1e      	ble.n	801b2e2 <_strtoul_l.isra.0+0xb6>
 801b2a4:	f1b6 3fff 	cmp.w	r6, #4294967295
 801b2a8:	d007      	beq.n	801b2ba <_strtoul_l.isra.0+0x8e>
 801b2aa:	4580      	cmp	r8, r0
 801b2ac:	d316      	bcc.n	801b2dc <_strtoul_l.isra.0+0xb0>
 801b2ae:	d101      	bne.n	801b2b4 <_strtoul_l.isra.0+0x88>
 801b2b0:	45a1      	cmp	r9, r4
 801b2b2:	db13      	blt.n	801b2dc <_strtoul_l.isra.0+0xb0>
 801b2b4:	fb00 4003 	mla	r0, r0, r3, r4
 801b2b8:	2601      	movs	r6, #1
 801b2ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b2be:	e7e9      	b.n	801b294 <_strtoul_l.isra.0+0x68>
 801b2c0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801b2c4:	f1bc 0f19 	cmp.w	ip, #25
 801b2c8:	d801      	bhi.n	801b2ce <_strtoul_l.isra.0+0xa2>
 801b2ca:	3c37      	subs	r4, #55	@ 0x37
 801b2cc:	e7e8      	b.n	801b2a0 <_strtoul_l.isra.0+0x74>
 801b2ce:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801b2d2:	f1bc 0f19 	cmp.w	ip, #25
 801b2d6:	d804      	bhi.n	801b2e2 <_strtoul_l.isra.0+0xb6>
 801b2d8:	3c57      	subs	r4, #87	@ 0x57
 801b2da:	e7e1      	b.n	801b2a0 <_strtoul_l.isra.0+0x74>
 801b2dc:	f04f 36ff 	mov.w	r6, #4294967295
 801b2e0:	e7eb      	b.n	801b2ba <_strtoul_l.isra.0+0x8e>
 801b2e2:	1c73      	adds	r3, r6, #1
 801b2e4:	d106      	bne.n	801b2f4 <_strtoul_l.isra.0+0xc8>
 801b2e6:	2322      	movs	r3, #34	@ 0x22
 801b2e8:	f8ce 3000 	str.w	r3, [lr]
 801b2ec:	4630      	mov	r0, r6
 801b2ee:	b932      	cbnz	r2, 801b2fe <_strtoul_l.isra.0+0xd2>
 801b2f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b2f4:	b107      	cbz	r7, 801b2f8 <_strtoul_l.isra.0+0xcc>
 801b2f6:	4240      	negs	r0, r0
 801b2f8:	2a00      	cmp	r2, #0
 801b2fa:	d0f9      	beq.n	801b2f0 <_strtoul_l.isra.0+0xc4>
 801b2fc:	b106      	cbz	r6, 801b300 <_strtoul_l.isra.0+0xd4>
 801b2fe:	1e69      	subs	r1, r5, #1
 801b300:	6011      	str	r1, [r2, #0]
 801b302:	e7f5      	b.n	801b2f0 <_strtoul_l.isra.0+0xc4>
 801b304:	0801db31 	.word	0x0801db31

0801b308 <_strtoul_r>:
 801b308:	f7ff bf90 	b.w	801b22c <_strtoul_l.isra.0>

0801b30c <fiprintf>:
 801b30c:	b40e      	push	{r1, r2, r3}
 801b30e:	b503      	push	{r0, r1, lr}
 801b310:	4601      	mov	r1, r0
 801b312:	ab03      	add	r3, sp, #12
 801b314:	4805      	ldr	r0, [pc, #20]	@ (801b32c <fiprintf+0x20>)
 801b316:	f853 2b04 	ldr.w	r2, [r3], #4
 801b31a:	6800      	ldr	r0, [r0, #0]
 801b31c:	9301      	str	r3, [sp, #4]
 801b31e:	f000 f837 	bl	801b390 <_vfiprintf_r>
 801b322:	b002      	add	sp, #8
 801b324:	f85d eb04 	ldr.w	lr, [sp], #4
 801b328:	b003      	add	sp, #12
 801b32a:	4770      	bx	lr
 801b32c:	20000200 	.word	0x20000200

0801b330 <abort>:
 801b330:	b508      	push	{r3, lr}
 801b332:	2006      	movs	r0, #6
 801b334:	f000 f96c 	bl	801b610 <raise>
 801b338:	2001      	movs	r0, #1
 801b33a:	f7f4 f9d3 	bl	800f6e4 <_exit>

0801b33e <__sfputc_r>:
 801b33e:	6893      	ldr	r3, [r2, #8]
 801b340:	3b01      	subs	r3, #1
 801b342:	2b00      	cmp	r3, #0
 801b344:	b410      	push	{r4}
 801b346:	6093      	str	r3, [r2, #8]
 801b348:	da08      	bge.n	801b35c <__sfputc_r+0x1e>
 801b34a:	6994      	ldr	r4, [r2, #24]
 801b34c:	42a3      	cmp	r3, r4
 801b34e:	db01      	blt.n	801b354 <__sfputc_r+0x16>
 801b350:	290a      	cmp	r1, #10
 801b352:	d103      	bne.n	801b35c <__sfputc_r+0x1e>
 801b354:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b358:	f7fd b85c 	b.w	8018414 <__swbuf_r>
 801b35c:	6813      	ldr	r3, [r2, #0]
 801b35e:	1c58      	adds	r0, r3, #1
 801b360:	6010      	str	r0, [r2, #0]
 801b362:	7019      	strb	r1, [r3, #0]
 801b364:	4608      	mov	r0, r1
 801b366:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b36a:	4770      	bx	lr

0801b36c <__sfputs_r>:
 801b36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b36e:	4606      	mov	r6, r0
 801b370:	460f      	mov	r7, r1
 801b372:	4614      	mov	r4, r2
 801b374:	18d5      	adds	r5, r2, r3
 801b376:	42ac      	cmp	r4, r5
 801b378:	d101      	bne.n	801b37e <__sfputs_r+0x12>
 801b37a:	2000      	movs	r0, #0
 801b37c:	e007      	b.n	801b38e <__sfputs_r+0x22>
 801b37e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b382:	463a      	mov	r2, r7
 801b384:	4630      	mov	r0, r6
 801b386:	f7ff ffda 	bl	801b33e <__sfputc_r>
 801b38a:	1c43      	adds	r3, r0, #1
 801b38c:	d1f3      	bne.n	801b376 <__sfputs_r+0xa>
 801b38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b390 <_vfiprintf_r>:
 801b390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b394:	460d      	mov	r5, r1
 801b396:	b09d      	sub	sp, #116	@ 0x74
 801b398:	4614      	mov	r4, r2
 801b39a:	4698      	mov	r8, r3
 801b39c:	4606      	mov	r6, r0
 801b39e:	b118      	cbz	r0, 801b3a8 <_vfiprintf_r+0x18>
 801b3a0:	6a03      	ldr	r3, [r0, #32]
 801b3a2:	b90b      	cbnz	r3, 801b3a8 <_vfiprintf_r+0x18>
 801b3a4:	f7fc fefa 	bl	801819c <__sinit>
 801b3a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b3aa:	07d9      	lsls	r1, r3, #31
 801b3ac:	d405      	bmi.n	801b3ba <_vfiprintf_r+0x2a>
 801b3ae:	89ab      	ldrh	r3, [r5, #12]
 801b3b0:	059a      	lsls	r2, r3, #22
 801b3b2:	d402      	bmi.n	801b3ba <_vfiprintf_r+0x2a>
 801b3b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b3b6:	f7fd f98a 	bl	80186ce <__retarget_lock_acquire_recursive>
 801b3ba:	89ab      	ldrh	r3, [r5, #12]
 801b3bc:	071b      	lsls	r3, r3, #28
 801b3be:	d501      	bpl.n	801b3c4 <_vfiprintf_r+0x34>
 801b3c0:	692b      	ldr	r3, [r5, #16]
 801b3c2:	b99b      	cbnz	r3, 801b3ec <_vfiprintf_r+0x5c>
 801b3c4:	4629      	mov	r1, r5
 801b3c6:	4630      	mov	r0, r6
 801b3c8:	f7fd f862 	bl	8018490 <__swsetup_r>
 801b3cc:	b170      	cbz	r0, 801b3ec <_vfiprintf_r+0x5c>
 801b3ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b3d0:	07dc      	lsls	r4, r3, #31
 801b3d2:	d504      	bpl.n	801b3de <_vfiprintf_r+0x4e>
 801b3d4:	f04f 30ff 	mov.w	r0, #4294967295
 801b3d8:	b01d      	add	sp, #116	@ 0x74
 801b3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3de:	89ab      	ldrh	r3, [r5, #12]
 801b3e0:	0598      	lsls	r0, r3, #22
 801b3e2:	d4f7      	bmi.n	801b3d4 <_vfiprintf_r+0x44>
 801b3e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b3e6:	f7fd f973 	bl	80186d0 <__retarget_lock_release_recursive>
 801b3ea:	e7f3      	b.n	801b3d4 <_vfiprintf_r+0x44>
 801b3ec:	2300      	movs	r3, #0
 801b3ee:	9309      	str	r3, [sp, #36]	@ 0x24
 801b3f0:	2320      	movs	r3, #32
 801b3f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b3f6:	f8cd 800c 	str.w	r8, [sp, #12]
 801b3fa:	2330      	movs	r3, #48	@ 0x30
 801b3fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b5ac <_vfiprintf_r+0x21c>
 801b400:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b404:	f04f 0901 	mov.w	r9, #1
 801b408:	4623      	mov	r3, r4
 801b40a:	469a      	mov	sl, r3
 801b40c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b410:	b10a      	cbz	r2, 801b416 <_vfiprintf_r+0x86>
 801b412:	2a25      	cmp	r2, #37	@ 0x25
 801b414:	d1f9      	bne.n	801b40a <_vfiprintf_r+0x7a>
 801b416:	ebba 0b04 	subs.w	fp, sl, r4
 801b41a:	d00b      	beq.n	801b434 <_vfiprintf_r+0xa4>
 801b41c:	465b      	mov	r3, fp
 801b41e:	4622      	mov	r2, r4
 801b420:	4629      	mov	r1, r5
 801b422:	4630      	mov	r0, r6
 801b424:	f7ff ffa2 	bl	801b36c <__sfputs_r>
 801b428:	3001      	adds	r0, #1
 801b42a:	f000 80a7 	beq.w	801b57c <_vfiprintf_r+0x1ec>
 801b42e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b430:	445a      	add	r2, fp
 801b432:	9209      	str	r2, [sp, #36]	@ 0x24
 801b434:	f89a 3000 	ldrb.w	r3, [sl]
 801b438:	2b00      	cmp	r3, #0
 801b43a:	f000 809f 	beq.w	801b57c <_vfiprintf_r+0x1ec>
 801b43e:	2300      	movs	r3, #0
 801b440:	f04f 32ff 	mov.w	r2, #4294967295
 801b444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b448:	f10a 0a01 	add.w	sl, sl, #1
 801b44c:	9304      	str	r3, [sp, #16]
 801b44e:	9307      	str	r3, [sp, #28]
 801b450:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b454:	931a      	str	r3, [sp, #104]	@ 0x68
 801b456:	4654      	mov	r4, sl
 801b458:	2205      	movs	r2, #5
 801b45a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b45e:	4853      	ldr	r0, [pc, #332]	@ (801b5ac <_vfiprintf_r+0x21c>)
 801b460:	f7ec fee6 	bl	8008230 <memchr>
 801b464:	9a04      	ldr	r2, [sp, #16]
 801b466:	b9d8      	cbnz	r0, 801b4a0 <_vfiprintf_r+0x110>
 801b468:	06d1      	lsls	r1, r2, #27
 801b46a:	bf44      	itt	mi
 801b46c:	2320      	movmi	r3, #32
 801b46e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b472:	0713      	lsls	r3, r2, #28
 801b474:	bf44      	itt	mi
 801b476:	232b      	movmi	r3, #43	@ 0x2b
 801b478:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b47c:	f89a 3000 	ldrb.w	r3, [sl]
 801b480:	2b2a      	cmp	r3, #42	@ 0x2a
 801b482:	d015      	beq.n	801b4b0 <_vfiprintf_r+0x120>
 801b484:	9a07      	ldr	r2, [sp, #28]
 801b486:	4654      	mov	r4, sl
 801b488:	2000      	movs	r0, #0
 801b48a:	f04f 0c0a 	mov.w	ip, #10
 801b48e:	4621      	mov	r1, r4
 801b490:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b494:	3b30      	subs	r3, #48	@ 0x30
 801b496:	2b09      	cmp	r3, #9
 801b498:	d94b      	bls.n	801b532 <_vfiprintf_r+0x1a2>
 801b49a:	b1b0      	cbz	r0, 801b4ca <_vfiprintf_r+0x13a>
 801b49c:	9207      	str	r2, [sp, #28]
 801b49e:	e014      	b.n	801b4ca <_vfiprintf_r+0x13a>
 801b4a0:	eba0 0308 	sub.w	r3, r0, r8
 801b4a4:	fa09 f303 	lsl.w	r3, r9, r3
 801b4a8:	4313      	orrs	r3, r2
 801b4aa:	9304      	str	r3, [sp, #16]
 801b4ac:	46a2      	mov	sl, r4
 801b4ae:	e7d2      	b.n	801b456 <_vfiprintf_r+0xc6>
 801b4b0:	9b03      	ldr	r3, [sp, #12]
 801b4b2:	1d19      	adds	r1, r3, #4
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	9103      	str	r1, [sp, #12]
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	bfbb      	ittet	lt
 801b4bc:	425b      	neglt	r3, r3
 801b4be:	f042 0202 	orrlt.w	r2, r2, #2
 801b4c2:	9307      	strge	r3, [sp, #28]
 801b4c4:	9307      	strlt	r3, [sp, #28]
 801b4c6:	bfb8      	it	lt
 801b4c8:	9204      	strlt	r2, [sp, #16]
 801b4ca:	7823      	ldrb	r3, [r4, #0]
 801b4cc:	2b2e      	cmp	r3, #46	@ 0x2e
 801b4ce:	d10a      	bne.n	801b4e6 <_vfiprintf_r+0x156>
 801b4d0:	7863      	ldrb	r3, [r4, #1]
 801b4d2:	2b2a      	cmp	r3, #42	@ 0x2a
 801b4d4:	d132      	bne.n	801b53c <_vfiprintf_r+0x1ac>
 801b4d6:	9b03      	ldr	r3, [sp, #12]
 801b4d8:	1d1a      	adds	r2, r3, #4
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	9203      	str	r2, [sp, #12]
 801b4de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b4e2:	3402      	adds	r4, #2
 801b4e4:	9305      	str	r3, [sp, #20]
 801b4e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b5bc <_vfiprintf_r+0x22c>
 801b4ea:	7821      	ldrb	r1, [r4, #0]
 801b4ec:	2203      	movs	r2, #3
 801b4ee:	4650      	mov	r0, sl
 801b4f0:	f7ec fe9e 	bl	8008230 <memchr>
 801b4f4:	b138      	cbz	r0, 801b506 <_vfiprintf_r+0x176>
 801b4f6:	9b04      	ldr	r3, [sp, #16]
 801b4f8:	eba0 000a 	sub.w	r0, r0, sl
 801b4fc:	2240      	movs	r2, #64	@ 0x40
 801b4fe:	4082      	lsls	r2, r0
 801b500:	4313      	orrs	r3, r2
 801b502:	3401      	adds	r4, #1
 801b504:	9304      	str	r3, [sp, #16]
 801b506:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b50a:	4829      	ldr	r0, [pc, #164]	@ (801b5b0 <_vfiprintf_r+0x220>)
 801b50c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b510:	2206      	movs	r2, #6
 801b512:	f7ec fe8d 	bl	8008230 <memchr>
 801b516:	2800      	cmp	r0, #0
 801b518:	d03f      	beq.n	801b59a <_vfiprintf_r+0x20a>
 801b51a:	4b26      	ldr	r3, [pc, #152]	@ (801b5b4 <_vfiprintf_r+0x224>)
 801b51c:	bb1b      	cbnz	r3, 801b566 <_vfiprintf_r+0x1d6>
 801b51e:	9b03      	ldr	r3, [sp, #12]
 801b520:	3307      	adds	r3, #7
 801b522:	f023 0307 	bic.w	r3, r3, #7
 801b526:	3308      	adds	r3, #8
 801b528:	9303      	str	r3, [sp, #12]
 801b52a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b52c:	443b      	add	r3, r7
 801b52e:	9309      	str	r3, [sp, #36]	@ 0x24
 801b530:	e76a      	b.n	801b408 <_vfiprintf_r+0x78>
 801b532:	fb0c 3202 	mla	r2, ip, r2, r3
 801b536:	460c      	mov	r4, r1
 801b538:	2001      	movs	r0, #1
 801b53a:	e7a8      	b.n	801b48e <_vfiprintf_r+0xfe>
 801b53c:	2300      	movs	r3, #0
 801b53e:	3401      	adds	r4, #1
 801b540:	9305      	str	r3, [sp, #20]
 801b542:	4619      	mov	r1, r3
 801b544:	f04f 0c0a 	mov.w	ip, #10
 801b548:	4620      	mov	r0, r4
 801b54a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b54e:	3a30      	subs	r2, #48	@ 0x30
 801b550:	2a09      	cmp	r2, #9
 801b552:	d903      	bls.n	801b55c <_vfiprintf_r+0x1cc>
 801b554:	2b00      	cmp	r3, #0
 801b556:	d0c6      	beq.n	801b4e6 <_vfiprintf_r+0x156>
 801b558:	9105      	str	r1, [sp, #20]
 801b55a:	e7c4      	b.n	801b4e6 <_vfiprintf_r+0x156>
 801b55c:	fb0c 2101 	mla	r1, ip, r1, r2
 801b560:	4604      	mov	r4, r0
 801b562:	2301      	movs	r3, #1
 801b564:	e7f0      	b.n	801b548 <_vfiprintf_r+0x1b8>
 801b566:	ab03      	add	r3, sp, #12
 801b568:	9300      	str	r3, [sp, #0]
 801b56a:	462a      	mov	r2, r5
 801b56c:	4b12      	ldr	r3, [pc, #72]	@ (801b5b8 <_vfiprintf_r+0x228>)
 801b56e:	a904      	add	r1, sp, #16
 801b570:	4630      	mov	r0, r6
 801b572:	f7fc f9d1 	bl	8017918 <_printf_float>
 801b576:	4607      	mov	r7, r0
 801b578:	1c78      	adds	r0, r7, #1
 801b57a:	d1d6      	bne.n	801b52a <_vfiprintf_r+0x19a>
 801b57c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b57e:	07d9      	lsls	r1, r3, #31
 801b580:	d405      	bmi.n	801b58e <_vfiprintf_r+0x1fe>
 801b582:	89ab      	ldrh	r3, [r5, #12]
 801b584:	059a      	lsls	r2, r3, #22
 801b586:	d402      	bmi.n	801b58e <_vfiprintf_r+0x1fe>
 801b588:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b58a:	f7fd f8a1 	bl	80186d0 <__retarget_lock_release_recursive>
 801b58e:	89ab      	ldrh	r3, [r5, #12]
 801b590:	065b      	lsls	r3, r3, #25
 801b592:	f53f af1f 	bmi.w	801b3d4 <_vfiprintf_r+0x44>
 801b596:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b598:	e71e      	b.n	801b3d8 <_vfiprintf_r+0x48>
 801b59a:	ab03      	add	r3, sp, #12
 801b59c:	9300      	str	r3, [sp, #0]
 801b59e:	462a      	mov	r2, r5
 801b5a0:	4b05      	ldr	r3, [pc, #20]	@ (801b5b8 <_vfiprintf_r+0x228>)
 801b5a2:	a904      	add	r1, sp, #16
 801b5a4:	4630      	mov	r0, r6
 801b5a6:	f7fc fc4f 	bl	8017e48 <_printf_i>
 801b5aa:	e7e4      	b.n	801b576 <_vfiprintf_r+0x1e6>
 801b5ac:	0801da76 	.word	0x0801da76
 801b5b0:	0801da80 	.word	0x0801da80
 801b5b4:	08017919 	.word	0x08017919
 801b5b8:	0801b36d 	.word	0x0801b36d
 801b5bc:	0801da7c 	.word	0x0801da7c

0801b5c0 <_raise_r>:
 801b5c0:	291f      	cmp	r1, #31
 801b5c2:	b538      	push	{r3, r4, r5, lr}
 801b5c4:	4605      	mov	r5, r0
 801b5c6:	460c      	mov	r4, r1
 801b5c8:	d904      	bls.n	801b5d4 <_raise_r+0x14>
 801b5ca:	2316      	movs	r3, #22
 801b5cc:	6003      	str	r3, [r0, #0]
 801b5ce:	f04f 30ff 	mov.w	r0, #4294967295
 801b5d2:	bd38      	pop	{r3, r4, r5, pc}
 801b5d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b5d6:	b112      	cbz	r2, 801b5de <_raise_r+0x1e>
 801b5d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b5dc:	b94b      	cbnz	r3, 801b5f2 <_raise_r+0x32>
 801b5de:	4628      	mov	r0, r5
 801b5e0:	f000 f830 	bl	801b644 <_getpid_r>
 801b5e4:	4622      	mov	r2, r4
 801b5e6:	4601      	mov	r1, r0
 801b5e8:	4628      	mov	r0, r5
 801b5ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b5ee:	f000 b817 	b.w	801b620 <_kill_r>
 801b5f2:	2b01      	cmp	r3, #1
 801b5f4:	d00a      	beq.n	801b60c <_raise_r+0x4c>
 801b5f6:	1c59      	adds	r1, r3, #1
 801b5f8:	d103      	bne.n	801b602 <_raise_r+0x42>
 801b5fa:	2316      	movs	r3, #22
 801b5fc:	6003      	str	r3, [r0, #0]
 801b5fe:	2001      	movs	r0, #1
 801b600:	e7e7      	b.n	801b5d2 <_raise_r+0x12>
 801b602:	2100      	movs	r1, #0
 801b604:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b608:	4620      	mov	r0, r4
 801b60a:	4798      	blx	r3
 801b60c:	2000      	movs	r0, #0
 801b60e:	e7e0      	b.n	801b5d2 <_raise_r+0x12>

0801b610 <raise>:
 801b610:	4b02      	ldr	r3, [pc, #8]	@ (801b61c <raise+0xc>)
 801b612:	4601      	mov	r1, r0
 801b614:	6818      	ldr	r0, [r3, #0]
 801b616:	f7ff bfd3 	b.w	801b5c0 <_raise_r>
 801b61a:	bf00      	nop
 801b61c:	20000200 	.word	0x20000200

0801b620 <_kill_r>:
 801b620:	b538      	push	{r3, r4, r5, lr}
 801b622:	4d07      	ldr	r5, [pc, #28]	@ (801b640 <_kill_r+0x20>)
 801b624:	2300      	movs	r3, #0
 801b626:	4604      	mov	r4, r0
 801b628:	4608      	mov	r0, r1
 801b62a:	4611      	mov	r1, r2
 801b62c:	602b      	str	r3, [r5, #0]
 801b62e:	f7f4 f849 	bl	800f6c4 <_kill>
 801b632:	1c43      	adds	r3, r0, #1
 801b634:	d102      	bne.n	801b63c <_kill_r+0x1c>
 801b636:	682b      	ldr	r3, [r5, #0]
 801b638:	b103      	cbz	r3, 801b63c <_kill_r+0x1c>
 801b63a:	6023      	str	r3, [r4, #0]
 801b63c:	bd38      	pop	{r3, r4, r5, pc}
 801b63e:	bf00      	nop
 801b640:	200143d8 	.word	0x200143d8

0801b644 <_getpid_r>:
 801b644:	f7f4 b836 	b.w	800f6b4 <_getpid>

0801b648 <_sbrk>:
 801b648:	4a04      	ldr	r2, [pc, #16]	@ (801b65c <_sbrk+0x14>)
 801b64a:	6811      	ldr	r1, [r2, #0]
 801b64c:	4603      	mov	r3, r0
 801b64e:	b909      	cbnz	r1, 801b654 <_sbrk+0xc>
 801b650:	4903      	ldr	r1, [pc, #12]	@ (801b660 <_sbrk+0x18>)
 801b652:	6011      	str	r1, [r2, #0]
 801b654:	6810      	ldr	r0, [r2, #0]
 801b656:	4403      	add	r3, r0
 801b658:	6013      	str	r3, [r2, #0]
 801b65a:	4770      	bx	lr
 801b65c:	200143e0 	.word	0x200143e0
 801b660:	200143e8 	.word	0x200143e8

0801b664 <_init>:
 801b664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b666:	bf00      	nop
 801b668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b66a:	bc08      	pop	{r3}
 801b66c:	469e      	mov	lr, r3
 801b66e:	4770      	bx	lr

0801b670 <_fini>:
 801b670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b672:	bf00      	nop
 801b674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b676:	bc08      	pop	{r3}
 801b678:	469e      	mov	lr, r3
 801b67a:	4770      	bx	lr
