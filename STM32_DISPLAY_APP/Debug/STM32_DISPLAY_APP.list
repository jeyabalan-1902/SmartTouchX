
STM32_DISPLAY_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010508  080081d0  080081d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bb0  080186d8  080186d8  000116d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a288  0801a288  000141f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801a288  0801a288  00013288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a290  0801a290  000141f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a290  0801a290  00013290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a294  0801a294  00013294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0801a298  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000132b0  200001f4  0801a48c  000141f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200134a4  0801a48c  000144a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000141f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be7b  00000000  00000000  00014224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043c8  00000000  00000000  0003009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b38  00000000  00000000  00034468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001562  00000000  00000000  00035fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026812  00000000  00000000  00037502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fa75  00000000  00000000  0005dd14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e14b7  00000000  00000000  0007d789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ec40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008968  00000000  00000000  0015ec84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001675ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d0 <__do_global_dtors_aux>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	4c05      	ldr	r4, [pc, #20]	@ (80081e8 <__do_global_dtors_aux+0x18>)
 80081d4:	7823      	ldrb	r3, [r4, #0]
 80081d6:	b933      	cbnz	r3, 80081e6 <__do_global_dtors_aux+0x16>
 80081d8:	4b04      	ldr	r3, [pc, #16]	@ (80081ec <__do_global_dtors_aux+0x1c>)
 80081da:	b113      	cbz	r3, 80081e2 <__do_global_dtors_aux+0x12>
 80081dc:	4804      	ldr	r0, [pc, #16]	@ (80081f0 <__do_global_dtors_aux+0x20>)
 80081de:	f3af 8000 	nop.w
 80081e2:	2301      	movs	r3, #1
 80081e4:	7023      	strb	r3, [r4, #0]
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	200001f4 	.word	0x200001f4
 80081ec:	00000000 	.word	0x00000000
 80081f0:	080186c0 	.word	0x080186c0

080081f4 <frame_dummy>:
 80081f4:	b508      	push	{r3, lr}
 80081f6:	4b03      	ldr	r3, [pc, #12]	@ (8008204 <frame_dummy+0x10>)
 80081f8:	b11b      	cbz	r3, 8008202 <frame_dummy+0xe>
 80081fa:	4903      	ldr	r1, [pc, #12]	@ (8008208 <frame_dummy+0x14>)
 80081fc:	4803      	ldr	r0, [pc, #12]	@ (800820c <frame_dummy+0x18>)
 80081fe:	f3af 8000 	nop.w
 8008202:	bd08      	pop	{r3, pc}
 8008204:	00000000 	.word	0x00000000
 8008208:	200001f8 	.word	0x200001f8
 800820c:	080186c0 	.word	0x080186c0

08008210 <strcmp>:
 8008210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008218:	2a01      	cmp	r2, #1
 800821a:	bf28      	it	cs
 800821c:	429a      	cmpcs	r2, r3
 800821e:	d0f7      	beq.n	8008210 <strcmp>
 8008220:	1ad0      	subs	r0, r2, r3
 8008222:	4770      	bx	lr

08008224 <strlen>:
 8008224:	4603      	mov	r3, r0
 8008226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800822a:	2a00      	cmp	r2, #0
 800822c:	d1fb      	bne.n	8008226 <strlen+0x2>
 800822e:	1a18      	subs	r0, r3, r0
 8008230:	3801      	subs	r0, #1
 8008232:	4770      	bx	lr
	...

08008240 <memchr>:
 8008240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008244:	2a10      	cmp	r2, #16
 8008246:	db2b      	blt.n	80082a0 <memchr+0x60>
 8008248:	f010 0f07 	tst.w	r0, #7
 800824c:	d008      	beq.n	8008260 <memchr+0x20>
 800824e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008252:	3a01      	subs	r2, #1
 8008254:	428b      	cmp	r3, r1
 8008256:	d02d      	beq.n	80082b4 <memchr+0x74>
 8008258:	f010 0f07 	tst.w	r0, #7
 800825c:	b342      	cbz	r2, 80082b0 <memchr+0x70>
 800825e:	d1f6      	bne.n	800824e <memchr+0xe>
 8008260:	b4f0      	push	{r4, r5, r6, r7}
 8008262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800826a:	f022 0407 	bic.w	r4, r2, #7
 800826e:	f07f 0700 	mvns.w	r7, #0
 8008272:	2300      	movs	r3, #0
 8008274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008278:	3c08      	subs	r4, #8
 800827a:	ea85 0501 	eor.w	r5, r5, r1
 800827e:	ea86 0601 	eor.w	r6, r6, r1
 8008282:	fa85 f547 	uadd8	r5, r5, r7
 8008286:	faa3 f587 	sel	r5, r3, r7
 800828a:	fa86 f647 	uadd8	r6, r6, r7
 800828e:	faa5 f687 	sel	r6, r5, r7
 8008292:	b98e      	cbnz	r6, 80082b8 <memchr+0x78>
 8008294:	d1ee      	bne.n	8008274 <memchr+0x34>
 8008296:	bcf0      	pop	{r4, r5, r6, r7}
 8008298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800829c:	f002 0207 	and.w	r2, r2, #7
 80082a0:	b132      	cbz	r2, 80082b0 <memchr+0x70>
 80082a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80082a6:	3a01      	subs	r2, #1
 80082a8:	ea83 0301 	eor.w	r3, r3, r1
 80082ac:	b113      	cbz	r3, 80082b4 <memchr+0x74>
 80082ae:	d1f8      	bne.n	80082a2 <memchr+0x62>
 80082b0:	2000      	movs	r0, #0
 80082b2:	4770      	bx	lr
 80082b4:	3801      	subs	r0, #1
 80082b6:	4770      	bx	lr
 80082b8:	2d00      	cmp	r5, #0
 80082ba:	bf06      	itte	eq
 80082bc:	4635      	moveq	r5, r6
 80082be:	3803      	subeq	r0, #3
 80082c0:	3807      	subne	r0, #7
 80082c2:	f015 0f01 	tst.w	r5, #1
 80082c6:	d107      	bne.n	80082d8 <memchr+0x98>
 80082c8:	3001      	adds	r0, #1
 80082ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80082ce:	bf02      	ittt	eq
 80082d0:	3001      	addeq	r0, #1
 80082d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80082d6:	3001      	addeq	r0, #1
 80082d8:	bcf0      	pop	{r4, r5, r6, r7}
 80082da:	3801      	subs	r0, #1
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop

080082e0 <__aeabi_drsub>:
 80082e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80082e4:	e002      	b.n	80082ec <__adddf3>
 80082e6:	bf00      	nop

080082e8 <__aeabi_dsub>:
 80082e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080082ec <__adddf3>:
 80082ec:	b530      	push	{r4, r5, lr}
 80082ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80082f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	bf1f      	itttt	ne
 8008302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800830a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800830e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008312:	f000 80e2 	beq.w	80084da <__adddf3+0x1ee>
 8008316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800831a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800831e:	bfb8      	it	lt
 8008320:	426d      	neglt	r5, r5
 8008322:	dd0c      	ble.n	800833e <__adddf3+0x52>
 8008324:	442c      	add	r4, r5
 8008326:	ea80 0202 	eor.w	r2, r0, r2
 800832a:	ea81 0303 	eor.w	r3, r1, r3
 800832e:	ea82 0000 	eor.w	r0, r2, r0
 8008332:	ea83 0101 	eor.w	r1, r3, r1
 8008336:	ea80 0202 	eor.w	r2, r0, r2
 800833a:	ea81 0303 	eor.w	r3, r1, r3
 800833e:	2d36      	cmp	r5, #54	@ 0x36
 8008340:	bf88      	it	hi
 8008342:	bd30      	pophi	{r4, r5, pc}
 8008344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800834c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008354:	d002      	beq.n	800835c <__adddf3+0x70>
 8008356:	4240      	negs	r0, r0
 8008358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800835c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008368:	d002      	beq.n	8008370 <__adddf3+0x84>
 800836a:	4252      	negs	r2, r2
 800836c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008370:	ea94 0f05 	teq	r4, r5
 8008374:	f000 80a7 	beq.w	80084c6 <__adddf3+0x1da>
 8008378:	f1a4 0401 	sub.w	r4, r4, #1
 800837c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008380:	db0d      	blt.n	800839e <__adddf3+0xb2>
 8008382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008386:	fa22 f205 	lsr.w	r2, r2, r5
 800838a:	1880      	adds	r0, r0, r2
 800838c:	f141 0100 	adc.w	r1, r1, #0
 8008390:	fa03 f20e 	lsl.w	r2, r3, lr
 8008394:	1880      	adds	r0, r0, r2
 8008396:	fa43 f305 	asr.w	r3, r3, r5
 800839a:	4159      	adcs	r1, r3
 800839c:	e00e      	b.n	80083bc <__adddf3+0xd0>
 800839e:	f1a5 0520 	sub.w	r5, r5, #32
 80083a2:	f10e 0e20 	add.w	lr, lr, #32
 80083a6:	2a01      	cmp	r2, #1
 80083a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80083ac:	bf28      	it	cs
 80083ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80083b2:	fa43 f305 	asr.w	r3, r3, r5
 80083b6:	18c0      	adds	r0, r0, r3
 80083b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80083bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80083c0:	d507      	bpl.n	80083d2 <__adddf3+0xe6>
 80083c2:	f04f 0e00 	mov.w	lr, #0
 80083c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80083ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80083ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80083d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80083d6:	d31b      	bcc.n	8008410 <__adddf3+0x124>
 80083d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80083dc:	d30c      	bcc.n	80083f8 <__adddf3+0x10c>
 80083de:	0849      	lsrs	r1, r1, #1
 80083e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80083e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80083e8:	f104 0401 	add.w	r4, r4, #1
 80083ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80083f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80083f4:	f080 809a 	bcs.w	800852c <__adddf3+0x240>
 80083f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80083fc:	bf08      	it	eq
 80083fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008402:	f150 0000 	adcs.w	r0, r0, #0
 8008406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800840a:	ea41 0105 	orr.w	r1, r1, r5
 800840e:	bd30      	pop	{r4, r5, pc}
 8008410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008414:	4140      	adcs	r0, r0
 8008416:	eb41 0101 	adc.w	r1, r1, r1
 800841a:	3c01      	subs	r4, #1
 800841c:	bf28      	it	cs
 800841e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8008422:	d2e9      	bcs.n	80083f8 <__adddf3+0x10c>
 8008424:	f091 0f00 	teq	r1, #0
 8008428:	bf04      	itt	eq
 800842a:	4601      	moveq	r1, r0
 800842c:	2000      	moveq	r0, #0
 800842e:	fab1 f381 	clz	r3, r1
 8008432:	bf08      	it	eq
 8008434:	3320      	addeq	r3, #32
 8008436:	f1a3 030b 	sub.w	r3, r3, #11
 800843a:	f1b3 0220 	subs.w	r2, r3, #32
 800843e:	da0c      	bge.n	800845a <__adddf3+0x16e>
 8008440:	320c      	adds	r2, #12
 8008442:	dd08      	ble.n	8008456 <__adddf3+0x16a>
 8008444:	f102 0c14 	add.w	ip, r2, #20
 8008448:	f1c2 020c 	rsb	r2, r2, #12
 800844c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008450:	fa21 f102 	lsr.w	r1, r1, r2
 8008454:	e00c      	b.n	8008470 <__adddf3+0x184>
 8008456:	f102 0214 	add.w	r2, r2, #20
 800845a:	bfd8      	it	le
 800845c:	f1c2 0c20 	rsble	ip, r2, #32
 8008460:	fa01 f102 	lsl.w	r1, r1, r2
 8008464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008468:	bfdc      	itt	le
 800846a:	ea41 010c 	orrle.w	r1, r1, ip
 800846e:	4090      	lslle	r0, r2
 8008470:	1ae4      	subs	r4, r4, r3
 8008472:	bfa2      	ittt	ge
 8008474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008478:	4329      	orrge	r1, r5
 800847a:	bd30      	popge	{r4, r5, pc}
 800847c:	ea6f 0404 	mvn.w	r4, r4
 8008480:	3c1f      	subs	r4, #31
 8008482:	da1c      	bge.n	80084be <__adddf3+0x1d2>
 8008484:	340c      	adds	r4, #12
 8008486:	dc0e      	bgt.n	80084a6 <__adddf3+0x1ba>
 8008488:	f104 0414 	add.w	r4, r4, #20
 800848c:	f1c4 0220 	rsb	r2, r4, #32
 8008490:	fa20 f004 	lsr.w	r0, r0, r4
 8008494:	fa01 f302 	lsl.w	r3, r1, r2
 8008498:	ea40 0003 	orr.w	r0, r0, r3
 800849c:	fa21 f304 	lsr.w	r3, r1, r4
 80084a0:	ea45 0103 	orr.w	r1, r5, r3
 80084a4:	bd30      	pop	{r4, r5, pc}
 80084a6:	f1c4 040c 	rsb	r4, r4, #12
 80084aa:	f1c4 0220 	rsb	r2, r4, #32
 80084ae:	fa20 f002 	lsr.w	r0, r0, r2
 80084b2:	fa01 f304 	lsl.w	r3, r1, r4
 80084b6:	ea40 0003 	orr.w	r0, r0, r3
 80084ba:	4629      	mov	r1, r5
 80084bc:	bd30      	pop	{r4, r5, pc}
 80084be:	fa21 f004 	lsr.w	r0, r1, r4
 80084c2:	4629      	mov	r1, r5
 80084c4:	bd30      	pop	{r4, r5, pc}
 80084c6:	f094 0f00 	teq	r4, #0
 80084ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80084ce:	bf06      	itte	eq
 80084d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80084d4:	3401      	addeq	r4, #1
 80084d6:	3d01      	subne	r5, #1
 80084d8:	e74e      	b.n	8008378 <__adddf3+0x8c>
 80084da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80084de:	bf18      	it	ne
 80084e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80084e4:	d029      	beq.n	800853a <__adddf3+0x24e>
 80084e6:	ea94 0f05 	teq	r4, r5
 80084ea:	bf08      	it	eq
 80084ec:	ea90 0f02 	teqeq	r0, r2
 80084f0:	d005      	beq.n	80084fe <__adddf3+0x212>
 80084f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80084f6:	bf04      	itt	eq
 80084f8:	4619      	moveq	r1, r3
 80084fa:	4610      	moveq	r0, r2
 80084fc:	bd30      	pop	{r4, r5, pc}
 80084fe:	ea91 0f03 	teq	r1, r3
 8008502:	bf1e      	ittt	ne
 8008504:	2100      	movne	r1, #0
 8008506:	2000      	movne	r0, #0
 8008508:	bd30      	popne	{r4, r5, pc}
 800850a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800850e:	d105      	bne.n	800851c <__adddf3+0x230>
 8008510:	0040      	lsls	r0, r0, #1
 8008512:	4149      	adcs	r1, r1
 8008514:	bf28      	it	cs
 8008516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800851a:	bd30      	pop	{r4, r5, pc}
 800851c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8008520:	bf3c      	itt	cc
 8008522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8008526:	bd30      	popcc	{r4, r5, pc}
 8008528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800852c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8008530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008534:	f04f 0000 	mov.w	r0, #0
 8008538:	bd30      	pop	{r4, r5, pc}
 800853a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800853e:	bf1a      	itte	ne
 8008540:	4619      	movne	r1, r3
 8008542:	4610      	movne	r0, r2
 8008544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008548:	bf1c      	itt	ne
 800854a:	460b      	movne	r3, r1
 800854c:	4602      	movne	r2, r0
 800854e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008552:	bf06      	itte	eq
 8008554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008558:	ea91 0f03 	teqeq	r1, r3
 800855c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008560:	bd30      	pop	{r4, r5, pc}
 8008562:	bf00      	nop

08008564 <__aeabi_ui2d>:
 8008564:	f090 0f00 	teq	r0, #0
 8008568:	bf04      	itt	eq
 800856a:	2100      	moveq	r1, #0
 800856c:	4770      	bxeq	lr
 800856e:	b530      	push	{r4, r5, lr}
 8008570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008578:	f04f 0500 	mov.w	r5, #0
 800857c:	f04f 0100 	mov.w	r1, #0
 8008580:	e750      	b.n	8008424 <__adddf3+0x138>
 8008582:	bf00      	nop

08008584 <__aeabi_i2d>:
 8008584:	f090 0f00 	teq	r0, #0
 8008588:	bf04      	itt	eq
 800858a:	2100      	moveq	r1, #0
 800858c:	4770      	bxeq	lr
 800858e:	b530      	push	{r4, r5, lr}
 8008590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800859c:	bf48      	it	mi
 800859e:	4240      	negmi	r0, r0
 80085a0:	f04f 0100 	mov.w	r1, #0
 80085a4:	e73e      	b.n	8008424 <__adddf3+0x138>
 80085a6:	bf00      	nop

080085a8 <__aeabi_f2d>:
 80085a8:	0042      	lsls	r2, r0, #1
 80085aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80085ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80085b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80085b6:	bf1f      	itttt	ne
 80085b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80085bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80085c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80085c4:	4770      	bxne	lr
 80085c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80085ca:	bf08      	it	eq
 80085cc:	4770      	bxeq	lr
 80085ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80085d2:	bf04      	itt	eq
 80085d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80085d8:	4770      	bxeq	lr
 80085da:	b530      	push	{r4, r5, lr}
 80085dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80085e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80085e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80085e8:	e71c      	b.n	8008424 <__adddf3+0x138>
 80085ea:	bf00      	nop

080085ec <__aeabi_ul2d>:
 80085ec:	ea50 0201 	orrs.w	r2, r0, r1
 80085f0:	bf08      	it	eq
 80085f2:	4770      	bxeq	lr
 80085f4:	b530      	push	{r4, r5, lr}
 80085f6:	f04f 0500 	mov.w	r5, #0
 80085fa:	e00a      	b.n	8008612 <__aeabi_l2d+0x16>

080085fc <__aeabi_l2d>:
 80085fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008600:	bf08      	it	eq
 8008602:	4770      	bxeq	lr
 8008604:	b530      	push	{r4, r5, lr}
 8008606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800860a:	d502      	bpl.n	8008612 <__aeabi_l2d+0x16>
 800860c:	4240      	negs	r0, r0
 800860e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800861a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800861e:	f43f aed8 	beq.w	80083d2 <__adddf3+0xe6>
 8008622:	f04f 0203 	mov.w	r2, #3
 8008626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800862a:	bf18      	it	ne
 800862c:	3203      	addne	r2, #3
 800862e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008632:	bf18      	it	ne
 8008634:	3203      	addne	r2, #3
 8008636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800863a:	f1c2 0320 	rsb	r3, r2, #32
 800863e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008642:	fa20 f002 	lsr.w	r0, r0, r2
 8008646:	fa01 fe03 	lsl.w	lr, r1, r3
 800864a:	ea40 000e 	orr.w	r0, r0, lr
 800864e:	fa21 f102 	lsr.w	r1, r1, r2
 8008652:	4414      	add	r4, r2
 8008654:	e6bd      	b.n	80083d2 <__adddf3+0xe6>
 8008656:	bf00      	nop

08008658 <__aeabi_dmul>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800865e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008666:	bf1d      	ittte	ne
 8008668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800866c:	ea94 0f0c 	teqne	r4, ip
 8008670:	ea95 0f0c 	teqne	r5, ip
 8008674:	f000 f8de 	bleq	8008834 <__aeabi_dmul+0x1dc>
 8008678:	442c      	add	r4, r5
 800867a:	ea81 0603 	eor.w	r6, r1, r3
 800867e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800868a:	bf18      	it	ne
 800868c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008698:	d038      	beq.n	800870c <__aeabi_dmul+0xb4>
 800869a:	fba0 ce02 	umull	ip, lr, r0, r2
 800869e:	f04f 0500 	mov.w	r5, #0
 80086a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80086a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80086aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80086ae:	f04f 0600 	mov.w	r6, #0
 80086b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80086b6:	f09c 0f00 	teq	ip, #0
 80086ba:	bf18      	it	ne
 80086bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80086c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80086c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80086c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80086cc:	d204      	bcs.n	80086d8 <__aeabi_dmul+0x80>
 80086ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80086d2:	416d      	adcs	r5, r5
 80086d4:	eb46 0606 	adc.w	r6, r6, r6
 80086d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80086dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80086e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80086e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80086e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80086ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80086f0:	bf88      	it	hi
 80086f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80086f6:	d81e      	bhi.n	8008736 <__aeabi_dmul+0xde>
 80086f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80086fc:	bf08      	it	eq
 80086fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008702:	f150 0000 	adcs.w	r0, r0, #0
 8008706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8008710:	ea46 0101 	orr.w	r1, r6, r1
 8008714:	ea40 0002 	orr.w	r0, r0, r2
 8008718:	ea81 0103 	eor.w	r1, r1, r3
 800871c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008720:	bfc2      	ittt	gt
 8008722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800872a:	bd70      	popgt	{r4, r5, r6, pc}
 800872c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008730:	f04f 0e00 	mov.w	lr, #0
 8008734:	3c01      	subs	r4, #1
 8008736:	f300 80ab 	bgt.w	8008890 <__aeabi_dmul+0x238>
 800873a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800873e:	bfde      	ittt	le
 8008740:	2000      	movle	r0, #0
 8008742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8008746:	bd70      	pople	{r4, r5, r6, pc}
 8008748:	f1c4 0400 	rsb	r4, r4, #0
 800874c:	3c20      	subs	r4, #32
 800874e:	da35      	bge.n	80087bc <__aeabi_dmul+0x164>
 8008750:	340c      	adds	r4, #12
 8008752:	dc1b      	bgt.n	800878c <__aeabi_dmul+0x134>
 8008754:	f104 0414 	add.w	r4, r4, #20
 8008758:	f1c4 0520 	rsb	r5, r4, #32
 800875c:	fa00 f305 	lsl.w	r3, r0, r5
 8008760:	fa20 f004 	lsr.w	r0, r0, r4
 8008764:	fa01 f205 	lsl.w	r2, r1, r5
 8008768:	ea40 0002 	orr.w	r0, r0, r2
 800876c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8008770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008778:	fa21 f604 	lsr.w	r6, r1, r4
 800877c:	eb42 0106 	adc.w	r1, r2, r6
 8008780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008784:	bf08      	it	eq
 8008786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	f1c4 040c 	rsb	r4, r4, #12
 8008790:	f1c4 0520 	rsb	r5, r4, #32
 8008794:	fa00 f304 	lsl.w	r3, r0, r4
 8008798:	fa20 f005 	lsr.w	r0, r0, r5
 800879c:	fa01 f204 	lsl.w	r2, r1, r4
 80087a0:	ea40 0002 	orr.w	r0, r0, r2
 80087a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80087ac:	f141 0100 	adc.w	r1, r1, #0
 80087b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087b4:	bf08      	it	eq
 80087b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	f1c4 0520 	rsb	r5, r4, #32
 80087c0:	fa00 f205 	lsl.w	r2, r0, r5
 80087c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80087c8:	fa20 f304 	lsr.w	r3, r0, r4
 80087cc:	fa01 f205 	lsl.w	r2, r1, r5
 80087d0:	ea43 0302 	orr.w	r3, r3, r2
 80087d4:	fa21 f004 	lsr.w	r0, r1, r4
 80087d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087dc:	fa21 f204 	lsr.w	r2, r1, r4
 80087e0:	ea20 0002 	bic.w	r0, r0, r2
 80087e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80087e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087ec:	bf08      	it	eq
 80087ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087f2:	bd70      	pop	{r4, r5, r6, pc}
 80087f4:	f094 0f00 	teq	r4, #0
 80087f8:	d10f      	bne.n	800881a <__aeabi_dmul+0x1c2>
 80087fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80087fe:	0040      	lsls	r0, r0, #1
 8008800:	eb41 0101 	adc.w	r1, r1, r1
 8008804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008808:	bf08      	it	eq
 800880a:	3c01      	subeq	r4, #1
 800880c:	d0f7      	beq.n	80087fe <__aeabi_dmul+0x1a6>
 800880e:	ea41 0106 	orr.w	r1, r1, r6
 8008812:	f095 0f00 	teq	r5, #0
 8008816:	bf18      	it	ne
 8008818:	4770      	bxne	lr
 800881a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800881e:	0052      	lsls	r2, r2, #1
 8008820:	eb43 0303 	adc.w	r3, r3, r3
 8008824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008828:	bf08      	it	eq
 800882a:	3d01      	subeq	r5, #1
 800882c:	d0f7      	beq.n	800881e <__aeabi_dmul+0x1c6>
 800882e:	ea43 0306 	orr.w	r3, r3, r6
 8008832:	4770      	bx	lr
 8008834:	ea94 0f0c 	teq	r4, ip
 8008838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800883c:	bf18      	it	ne
 800883e:	ea95 0f0c 	teqne	r5, ip
 8008842:	d00c      	beq.n	800885e <__aeabi_dmul+0x206>
 8008844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008848:	bf18      	it	ne
 800884a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800884e:	d1d1      	bne.n	80087f4 <__aeabi_dmul+0x19c>
 8008850:	ea81 0103 	eor.w	r1, r1, r3
 8008854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008858:	f04f 0000 	mov.w	r0, #0
 800885c:	bd70      	pop	{r4, r5, r6, pc}
 800885e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008862:	bf06      	itte	eq
 8008864:	4610      	moveq	r0, r2
 8008866:	4619      	moveq	r1, r3
 8008868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800886c:	d019      	beq.n	80088a2 <__aeabi_dmul+0x24a>
 800886e:	ea94 0f0c 	teq	r4, ip
 8008872:	d102      	bne.n	800887a <__aeabi_dmul+0x222>
 8008874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008878:	d113      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800887a:	ea95 0f0c 	teq	r5, ip
 800887e:	d105      	bne.n	800888c <__aeabi_dmul+0x234>
 8008880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008884:	bf1c      	itt	ne
 8008886:	4610      	movne	r0, r2
 8008888:	4619      	movne	r1, r3
 800888a:	d10a      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800888c:	ea81 0103 	eor.w	r1, r1, r3
 8008890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8008898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800889c:	f04f 0000 	mov.w	r0, #0
 80088a0:	bd70      	pop	{r4, r5, r6, pc}
 80088a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80088a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80088aa:	bd70      	pop	{r4, r5, r6, pc}

080088ac <__aeabi_ddiv>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80088b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80088b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80088ba:	bf1d      	ittte	ne
 80088bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80088c0:	ea94 0f0c 	teqne	r4, ip
 80088c4:	ea95 0f0c 	teqne	r5, ip
 80088c8:	f000 f8a7 	bleq	8008a1a <__aeabi_ddiv+0x16e>
 80088cc:	eba4 0405 	sub.w	r4, r4, r5
 80088d0:	ea81 0e03 	eor.w	lr, r1, r3
 80088d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80088d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80088dc:	f000 8088 	beq.w	80089f0 <__aeabi_ddiv+0x144>
 80088e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80088e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80088e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80088ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80088f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80088f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80088f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80088fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8008904:	429d      	cmp	r5, r3
 8008906:	bf08      	it	eq
 8008908:	4296      	cmpeq	r6, r2
 800890a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800890e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8008912:	d202      	bcs.n	800891a <__aeabi_ddiv+0x6e>
 8008914:	085b      	lsrs	r3, r3, #1
 8008916:	ea4f 0232 	mov.w	r2, r2, rrx
 800891a:	1ab6      	subs	r6, r6, r2
 800891c:	eb65 0503 	sbc.w	r5, r5, r3
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	ea4f 0232 	mov.w	r2, r2, rrx
 8008926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800892a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800892e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008936:	bf22      	ittt	cs
 8008938:	1ab6      	subcs	r6, r6, r2
 800893a:	4675      	movcs	r5, lr
 800893c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008940:	085b      	lsrs	r3, r3, #1
 8008942:	ea4f 0232 	mov.w	r2, r2, rrx
 8008946:	ebb6 0e02 	subs.w	lr, r6, r2
 800894a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800894e:	bf22      	ittt	cs
 8008950:	1ab6      	subcs	r6, r6, r2
 8008952:	4675      	movcs	r5, lr
 8008954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008958:	085b      	lsrs	r3, r3, #1
 800895a:	ea4f 0232 	mov.w	r2, r2, rrx
 800895e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008966:	bf22      	ittt	cs
 8008968:	1ab6      	subcs	r6, r6, r2
 800896a:	4675      	movcs	r5, lr
 800896c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008970:	085b      	lsrs	r3, r3, #1
 8008972:	ea4f 0232 	mov.w	r2, r2, rrx
 8008976:	ebb6 0e02 	subs.w	lr, r6, r2
 800897a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800897e:	bf22      	ittt	cs
 8008980:	1ab6      	subcs	r6, r6, r2
 8008982:	4675      	movcs	r5, lr
 8008984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008988:	ea55 0e06 	orrs.w	lr, r5, r6
 800898c:	d018      	beq.n	80089c0 <__aeabi_ddiv+0x114>
 800898e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800899a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800899e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80089a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80089a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80089aa:	d1c0      	bne.n	800892e <__aeabi_ddiv+0x82>
 80089ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089b0:	d10b      	bne.n	80089ca <__aeabi_ddiv+0x11e>
 80089b2:	ea41 0100 	orr.w	r1, r1, r0
 80089b6:	f04f 0000 	mov.w	r0, #0
 80089ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80089be:	e7b6      	b.n	800892e <__aeabi_ddiv+0x82>
 80089c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089c4:	bf04      	itt	eq
 80089c6:	4301      	orreq	r1, r0
 80089c8:	2000      	moveq	r0, #0
 80089ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80089ce:	bf88      	it	hi
 80089d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80089d4:	f63f aeaf 	bhi.w	8008736 <__aeabi_dmul+0xde>
 80089d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80089dc:	bf04      	itt	eq
 80089de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80089e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80089e6:	f150 0000 	adcs.w	r0, r0, #0
 80089ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80089f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80089f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80089fc:	bfc2      	ittt	gt
 80089fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008a06:	bd70      	popgt	{r4, r5, r6, pc}
 8008a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008a0c:	f04f 0e00 	mov.w	lr, #0
 8008a10:	3c01      	subs	r4, #1
 8008a12:	e690      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a14:	ea45 0e06 	orr.w	lr, r5, r6
 8008a18:	e68d      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008a1e:	ea94 0f0c 	teq	r4, ip
 8008a22:	bf08      	it	eq
 8008a24:	ea95 0f0c 	teqeq	r5, ip
 8008a28:	f43f af3b 	beq.w	80088a2 <__aeabi_dmul+0x24a>
 8008a2c:	ea94 0f0c 	teq	r4, ip
 8008a30:	d10a      	bne.n	8008a48 <__aeabi_ddiv+0x19c>
 8008a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008a36:	f47f af34 	bne.w	80088a2 <__aeabi_dmul+0x24a>
 8008a3a:	ea95 0f0c 	teq	r5, ip
 8008a3e:	f47f af25 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a42:	4610      	mov	r0, r2
 8008a44:	4619      	mov	r1, r3
 8008a46:	e72c      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a48:	ea95 0f0c 	teq	r5, ip
 8008a4c:	d106      	bne.n	8008a5c <__aeabi_ddiv+0x1b0>
 8008a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008a52:	f43f aefd 	beq.w	8008850 <__aeabi_dmul+0x1f8>
 8008a56:	4610      	mov	r0, r2
 8008a58:	4619      	mov	r1, r3
 8008a5a:	e722      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008a60:	bf18      	it	ne
 8008a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008a66:	f47f aec5 	bne.w	80087f4 <__aeabi_dmul+0x19c>
 8008a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008a6e:	f47f af0d 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008a76:	f47f aeeb 	bne.w	8008850 <__aeabi_dmul+0x1f8>
 8008a7a:	e712      	b.n	80088a2 <__aeabi_dmul+0x24a>

08008a7c <__gedf2>:
 8008a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8008a80:	e006      	b.n	8008a90 <__cmpdf2+0x4>
 8008a82:	bf00      	nop

08008a84 <__ledf2>:
 8008a84:	f04f 0c01 	mov.w	ip, #1
 8008a88:	e002      	b.n	8008a90 <__cmpdf2+0x4>
 8008a8a:	bf00      	nop

08008a8c <__cmpdf2>:
 8008a8c:	f04f 0c01 	mov.w	ip, #1
 8008a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008aa0:	bf18      	it	ne
 8008aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008aa6:	d01b      	beq.n	8008ae0 <__cmpdf2+0x54>
 8008aa8:	b001      	add	sp, #4
 8008aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008aae:	bf0c      	ite	eq
 8008ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008ab4:	ea91 0f03 	teqne	r1, r3
 8008ab8:	bf02      	ittt	eq
 8008aba:	ea90 0f02 	teqeq	r0, r2
 8008abe:	2000      	moveq	r0, #0
 8008ac0:	4770      	bxeq	lr
 8008ac2:	f110 0f00 	cmn.w	r0, #0
 8008ac6:	ea91 0f03 	teq	r1, r3
 8008aca:	bf58      	it	pl
 8008acc:	4299      	cmppl	r1, r3
 8008ace:	bf08      	it	eq
 8008ad0:	4290      	cmpeq	r0, r2
 8008ad2:	bf2c      	ite	cs
 8008ad4:	17d8      	asrcs	r0, r3, #31
 8008ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008ada:	f040 0001 	orr.w	r0, r0, #1
 8008ade:	4770      	bx	lr
 8008ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ae8:	d102      	bne.n	8008af0 <__cmpdf2+0x64>
 8008aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008aee:	d107      	bne.n	8008b00 <__cmpdf2+0x74>
 8008af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008af8:	d1d6      	bne.n	8008aa8 <__cmpdf2+0x1c>
 8008afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008afe:	d0d3      	beq.n	8008aa8 <__cmpdf2+0x1c>
 8008b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop

08008b08 <__aeabi_cdrcmple>:
 8008b08:	4684      	mov	ip, r0
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	4662      	mov	r2, ip
 8008b0e:	468c      	mov	ip, r1
 8008b10:	4619      	mov	r1, r3
 8008b12:	4663      	mov	r3, ip
 8008b14:	e000      	b.n	8008b18 <__aeabi_cdcmpeq>
 8008b16:	bf00      	nop

08008b18 <__aeabi_cdcmpeq>:
 8008b18:	b501      	push	{r0, lr}
 8008b1a:	f7ff ffb7 	bl	8008a8c <__cmpdf2>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	bf48      	it	mi
 8008b22:	f110 0f00 	cmnmi.w	r0, #0
 8008b26:	bd01      	pop	{r0, pc}

08008b28 <__aeabi_dcmpeq>:
 8008b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b2c:	f7ff fff4 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b30:	bf0c      	ite	eq
 8008b32:	2001      	moveq	r0, #1
 8008b34:	2000      	movne	r0, #0
 8008b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b3a:	bf00      	nop

08008b3c <__aeabi_dcmplt>:
 8008b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b40:	f7ff ffea 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b44:	bf34      	ite	cc
 8008b46:	2001      	movcc	r0, #1
 8008b48:	2000      	movcs	r0, #0
 8008b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b4e:	bf00      	nop

08008b50 <__aeabi_dcmple>:
 8008b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b54:	f7ff ffe0 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b58:	bf94      	ite	ls
 8008b5a:	2001      	movls	r0, #1
 8008b5c:	2000      	movhi	r0, #0
 8008b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b62:	bf00      	nop

08008b64 <__aeabi_dcmpge>:
 8008b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b68:	f7ff ffce 	bl	8008b08 <__aeabi_cdrcmple>
 8008b6c:	bf94      	ite	ls
 8008b6e:	2001      	movls	r0, #1
 8008b70:	2000      	movhi	r0, #0
 8008b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b76:	bf00      	nop

08008b78 <__aeabi_dcmpgt>:
 8008b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b7c:	f7ff ffc4 	bl	8008b08 <__aeabi_cdrcmple>
 8008b80:	bf34      	ite	cc
 8008b82:	2001      	movcc	r0, #1
 8008b84:	2000      	movcs	r0, #0
 8008b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b8a:	bf00      	nop

08008b8c <__aeabi_dcmpun>:
 8008b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b94:	d102      	bne.n	8008b9c <__aeabi_dcmpun+0x10>
 8008b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008b9a:	d10a      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ba4:	d102      	bne.n	8008bac <__aeabi_dcmpun+0x20>
 8008ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008baa:	d102      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008bac:	f04f 0000 	mov.w	r0, #0
 8008bb0:	4770      	bx	lr
 8008bb2:	f04f 0001 	mov.w	r0, #1
 8008bb6:	4770      	bx	lr

08008bb8 <__aeabi_d2iz>:
 8008bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008bc0:	d215      	bcs.n	8008bee <__aeabi_d2iz+0x36>
 8008bc2:	d511      	bpl.n	8008be8 <__aeabi_d2iz+0x30>
 8008bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008bcc:	d912      	bls.n	8008bf4 <__aeabi_d2iz+0x3c>
 8008bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008bde:	fa23 f002 	lsr.w	r0, r3, r2
 8008be2:	bf18      	it	ne
 8008be4:	4240      	negne	r0, r0
 8008be6:	4770      	bx	lr
 8008be8:	f04f 0000 	mov.w	r0, #0
 8008bec:	4770      	bx	lr
 8008bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008bf2:	d105      	bne.n	8008c00 <__aeabi_d2iz+0x48>
 8008bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008bf8:	bf08      	it	eq
 8008bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008bfe:	4770      	bx	lr
 8008c00:	f04f 0000 	mov.w	r0, #0
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop

08008c08 <__aeabi_d2uiz>:
 8008c08:	004a      	lsls	r2, r1, #1
 8008c0a:	d211      	bcs.n	8008c30 <__aeabi_d2uiz+0x28>
 8008c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008c10:	d211      	bcs.n	8008c36 <__aeabi_d2uiz+0x2e>
 8008c12:	d50d      	bpl.n	8008c30 <__aeabi_d2uiz+0x28>
 8008c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008c1c:	d40e      	bmi.n	8008c3c <__aeabi_d2uiz+0x34>
 8008c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8008c2e:	4770      	bx	lr
 8008c30:	f04f 0000 	mov.w	r0, #0
 8008c34:	4770      	bx	lr
 8008c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008c3a:	d102      	bne.n	8008c42 <__aeabi_d2uiz+0x3a>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	4770      	bx	lr
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	4770      	bx	lr

08008c48 <__aeabi_uldivmod>:
 8008c48:	b953      	cbnz	r3, 8008c60 <__aeabi_uldivmod+0x18>
 8008c4a:	b94a      	cbnz	r2, 8008c60 <__aeabi_uldivmod+0x18>
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	bf08      	it	eq
 8008c50:	2800      	cmpeq	r0, #0
 8008c52:	bf1c      	itt	ne
 8008c54:	f04f 31ff 	movne.w	r1, #4294967295
 8008c58:	f04f 30ff 	movne.w	r0, #4294967295
 8008c5c:	f000 b9be 	b.w	8008fdc <__aeabi_idiv0>
 8008c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8008c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008c68:	f000 f83c 	bl	8008ce4 <__udivmoddi4>
 8008c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c74:	b004      	add	sp, #16
 8008c76:	4770      	bx	lr

08008c78 <__aeabi_d2lz>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	460d      	mov	r5, r1
 8008c82:	f7ff ff5b 	bl	8008b3c <__aeabi_dcmplt>
 8008c86:	b928      	cbnz	r0, 8008c94 <__aeabi_d2lz+0x1c>
 8008c88:	4620      	mov	r0, r4
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c90:	f000 b80a 	b.w	8008ca8 <__aeabi_d2ulz>
 8008c94:	4620      	mov	r0, r4
 8008c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8008c9a:	f000 f805 	bl	8008ca8 <__aeabi_d2ulz>
 8008c9e:	4240      	negs	r0, r0
 8008ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008ca4:	bd38      	pop	{r3, r4, r5, pc}
 8008ca6:	bf00      	nop

08008ca8 <__aeabi_d2ulz>:
 8008ca8:	b5d0      	push	{r4, r6, r7, lr}
 8008caa:	4b0c      	ldr	r3, [pc, #48]	@ (8008cdc <__aeabi_d2ulz+0x34>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460f      	mov	r7, r1
 8008cb2:	f7ff fcd1 	bl	8008658 <__aeabi_dmul>
 8008cb6:	f7ff ffa7 	bl	8008c08 <__aeabi_d2uiz>
 8008cba:	4604      	mov	r4, r0
 8008cbc:	f7ff fc52 	bl	8008564 <__aeabi_ui2d>
 8008cc0:	4b07      	ldr	r3, [pc, #28]	@ (8008ce0 <__aeabi_d2ulz+0x38>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f7ff fcc8 	bl	8008658 <__aeabi_dmul>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4630      	mov	r0, r6
 8008cce:	4639      	mov	r1, r7
 8008cd0:	f7ff fb0a 	bl	80082e8 <__aeabi_dsub>
 8008cd4:	f7ff ff98 	bl	8008c08 <__aeabi_d2uiz>
 8008cd8:	4621      	mov	r1, r4
 8008cda:	bdd0      	pop	{r4, r6, r7, pc}
 8008cdc:	3df00000 	.word	0x3df00000
 8008ce0:	41f00000 	.word	0x41f00000

08008ce4 <__udivmoddi4>:
 8008ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce8:	9d08      	ldr	r5, [sp, #32]
 8008cea:	468e      	mov	lr, r1
 8008cec:	4604      	mov	r4, r0
 8008cee:	4688      	mov	r8, r1
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d14a      	bne.n	8008d8a <__udivmoddi4+0xa6>
 8008cf4:	428a      	cmp	r2, r1
 8008cf6:	4617      	mov	r7, r2
 8008cf8:	d962      	bls.n	8008dc0 <__udivmoddi4+0xdc>
 8008cfa:	fab2 f682 	clz	r6, r2
 8008cfe:	b14e      	cbz	r6, 8008d14 <__udivmoddi4+0x30>
 8008d00:	f1c6 0320 	rsb	r3, r6, #32
 8008d04:	fa01 f806 	lsl.w	r8, r1, r6
 8008d08:	fa20 f303 	lsr.w	r3, r0, r3
 8008d0c:	40b7      	lsls	r7, r6
 8008d0e:	ea43 0808 	orr.w	r8, r3, r8
 8008d12:	40b4      	lsls	r4, r6
 8008d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008d18:	fa1f fc87 	uxth.w	ip, r7
 8008d1c:	fbb8 f1fe 	udiv	r1, r8, lr
 8008d20:	0c23      	lsrs	r3, r4, #16
 8008d22:	fb0e 8811 	mls	r8, lr, r1, r8
 8008d26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008d2a:	fb01 f20c 	mul.w	r2, r1, ip
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d909      	bls.n	8008d46 <__udivmoddi4+0x62>
 8008d32:	18fb      	adds	r3, r7, r3
 8008d34:	f101 30ff 	add.w	r0, r1, #4294967295
 8008d38:	f080 80ea 	bcs.w	8008f10 <__udivmoddi4+0x22c>
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	f240 80e7 	bls.w	8008f10 <__udivmoddi4+0x22c>
 8008d42:	3902      	subs	r1, #2
 8008d44:	443b      	add	r3, r7
 8008d46:	1a9a      	subs	r2, r3, r2
 8008d48:	b2a3      	uxth	r3, r4
 8008d4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8008d4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8008d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d56:	fb00 fc0c 	mul.w	ip, r0, ip
 8008d5a:	459c      	cmp	ip, r3
 8008d5c:	d909      	bls.n	8008d72 <__udivmoddi4+0x8e>
 8008d5e:	18fb      	adds	r3, r7, r3
 8008d60:	f100 32ff 	add.w	r2, r0, #4294967295
 8008d64:	f080 80d6 	bcs.w	8008f14 <__udivmoddi4+0x230>
 8008d68:	459c      	cmp	ip, r3
 8008d6a:	f240 80d3 	bls.w	8008f14 <__udivmoddi4+0x230>
 8008d6e:	443b      	add	r3, r7
 8008d70:	3802      	subs	r0, #2
 8008d72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008d76:	eba3 030c 	sub.w	r3, r3, ip
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	b11d      	cbz	r5, 8008d86 <__udivmoddi4+0xa2>
 8008d7e:	40f3      	lsrs	r3, r6
 8008d80:	2200      	movs	r2, #0
 8008d82:	e9c5 3200 	strd	r3, r2, [r5]
 8008d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8a:	428b      	cmp	r3, r1
 8008d8c:	d905      	bls.n	8008d9a <__udivmoddi4+0xb6>
 8008d8e:	b10d      	cbz	r5, 8008d94 <__udivmoddi4+0xb0>
 8008d90:	e9c5 0100 	strd	r0, r1, [r5]
 8008d94:	2100      	movs	r1, #0
 8008d96:	4608      	mov	r0, r1
 8008d98:	e7f5      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008d9a:	fab3 f183 	clz	r1, r3
 8008d9e:	2900      	cmp	r1, #0
 8008da0:	d146      	bne.n	8008e30 <__udivmoddi4+0x14c>
 8008da2:	4573      	cmp	r3, lr
 8008da4:	d302      	bcc.n	8008dac <__udivmoddi4+0xc8>
 8008da6:	4282      	cmp	r2, r0
 8008da8:	f200 8105 	bhi.w	8008fb6 <__udivmoddi4+0x2d2>
 8008dac:	1a84      	subs	r4, r0, r2
 8008dae:	eb6e 0203 	sbc.w	r2, lr, r3
 8008db2:	2001      	movs	r0, #1
 8008db4:	4690      	mov	r8, r2
 8008db6:	2d00      	cmp	r5, #0
 8008db8:	d0e5      	beq.n	8008d86 <__udivmoddi4+0xa2>
 8008dba:	e9c5 4800 	strd	r4, r8, [r5]
 8008dbe:	e7e2      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008dc0:	2a00      	cmp	r2, #0
 8008dc2:	f000 8090 	beq.w	8008ee6 <__udivmoddi4+0x202>
 8008dc6:	fab2 f682 	clz	r6, r2
 8008dca:	2e00      	cmp	r6, #0
 8008dcc:	f040 80a4 	bne.w	8008f18 <__udivmoddi4+0x234>
 8008dd0:	1a8a      	subs	r2, r1, r2
 8008dd2:	0c03      	lsrs	r3, r0, #16
 8008dd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008dd8:	b280      	uxth	r0, r0
 8008dda:	b2bc      	uxth	r4, r7
 8008ddc:	2101      	movs	r1, #1
 8008dde:	fbb2 fcfe 	udiv	ip, r2, lr
 8008de2:	fb0e 221c 	mls	r2, lr, ip, r2
 8008de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dea:	fb04 f20c 	mul.w	r2, r4, ip
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d907      	bls.n	8008e02 <__udivmoddi4+0x11e>
 8008df2:	18fb      	adds	r3, r7, r3
 8008df4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008df8:	d202      	bcs.n	8008e00 <__udivmoddi4+0x11c>
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	f200 80e0 	bhi.w	8008fc0 <__udivmoddi4+0x2dc>
 8008e00:	46c4      	mov	ip, r8
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	fbb3 f2fe 	udiv	r2, r3, lr
 8008e08:	fb0e 3312 	mls	r3, lr, r2, r3
 8008e0c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8008e10:	fb02 f404 	mul.w	r4, r2, r4
 8008e14:	429c      	cmp	r4, r3
 8008e16:	d907      	bls.n	8008e28 <__udivmoddi4+0x144>
 8008e18:	18fb      	adds	r3, r7, r3
 8008e1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8008e1e:	d202      	bcs.n	8008e26 <__udivmoddi4+0x142>
 8008e20:	429c      	cmp	r4, r3
 8008e22:	f200 80ca 	bhi.w	8008fba <__udivmoddi4+0x2d6>
 8008e26:	4602      	mov	r2, r0
 8008e28:	1b1b      	subs	r3, r3, r4
 8008e2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8008e2e:	e7a5      	b.n	8008d7c <__udivmoddi4+0x98>
 8008e30:	f1c1 0620 	rsb	r6, r1, #32
 8008e34:	408b      	lsls	r3, r1
 8008e36:	fa22 f706 	lsr.w	r7, r2, r6
 8008e3a:	431f      	orrs	r7, r3
 8008e3c:	fa0e f401 	lsl.w	r4, lr, r1
 8008e40:	fa20 f306 	lsr.w	r3, r0, r6
 8008e44:	fa2e fe06 	lsr.w	lr, lr, r6
 8008e48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008e4c:	4323      	orrs	r3, r4
 8008e4e:	fa00 f801 	lsl.w	r8, r0, r1
 8008e52:	fa1f fc87 	uxth.w	ip, r7
 8008e56:	fbbe f0f9 	udiv	r0, lr, r9
 8008e5a:	0c1c      	lsrs	r4, r3, #16
 8008e5c:	fb09 ee10 	mls	lr, r9, r0, lr
 8008e60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008e64:	fb00 fe0c 	mul.w	lr, r0, ip
 8008e68:	45a6      	cmp	lr, r4
 8008e6a:	fa02 f201 	lsl.w	r2, r2, r1
 8008e6e:	d909      	bls.n	8008e84 <__udivmoddi4+0x1a0>
 8008e70:	193c      	adds	r4, r7, r4
 8008e72:	f100 3aff 	add.w	sl, r0, #4294967295
 8008e76:	f080 809c 	bcs.w	8008fb2 <__udivmoddi4+0x2ce>
 8008e7a:	45a6      	cmp	lr, r4
 8008e7c:	f240 8099 	bls.w	8008fb2 <__udivmoddi4+0x2ce>
 8008e80:	3802      	subs	r0, #2
 8008e82:	443c      	add	r4, r7
 8008e84:	eba4 040e 	sub.w	r4, r4, lr
 8008e88:	fa1f fe83 	uxth.w	lr, r3
 8008e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8008e90:	fb09 4413 	mls	r4, r9, r3, r4
 8008e94:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8008e98:	fb03 fc0c 	mul.w	ip, r3, ip
 8008e9c:	45a4      	cmp	ip, r4
 8008e9e:	d908      	bls.n	8008eb2 <__udivmoddi4+0x1ce>
 8008ea0:	193c      	adds	r4, r7, r4
 8008ea2:	f103 3eff 	add.w	lr, r3, #4294967295
 8008ea6:	f080 8082 	bcs.w	8008fae <__udivmoddi4+0x2ca>
 8008eaa:	45a4      	cmp	ip, r4
 8008eac:	d97f      	bls.n	8008fae <__udivmoddi4+0x2ca>
 8008eae:	3b02      	subs	r3, #2
 8008eb0:	443c      	add	r4, r7
 8008eb2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008eb6:	eba4 040c 	sub.w	r4, r4, ip
 8008eba:	fba0 ec02 	umull	lr, ip, r0, r2
 8008ebe:	4564      	cmp	r4, ip
 8008ec0:	4673      	mov	r3, lr
 8008ec2:	46e1      	mov	r9, ip
 8008ec4:	d362      	bcc.n	8008f8c <__udivmoddi4+0x2a8>
 8008ec6:	d05f      	beq.n	8008f88 <__udivmoddi4+0x2a4>
 8008ec8:	b15d      	cbz	r5, 8008ee2 <__udivmoddi4+0x1fe>
 8008eca:	ebb8 0203 	subs.w	r2, r8, r3
 8008ece:	eb64 0409 	sbc.w	r4, r4, r9
 8008ed2:	fa04 f606 	lsl.w	r6, r4, r6
 8008ed6:	fa22 f301 	lsr.w	r3, r2, r1
 8008eda:	431e      	orrs	r6, r3
 8008edc:	40cc      	lsrs	r4, r1
 8008ede:	e9c5 6400 	strd	r6, r4, [r5]
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	e74f      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008ee6:	fbb1 fcf2 	udiv	ip, r1, r2
 8008eea:	0c01      	lsrs	r1, r0, #16
 8008eec:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8008ef0:	b280      	uxth	r0, r0
 8008ef2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8008ef6:	463b      	mov	r3, r7
 8008ef8:	4638      	mov	r0, r7
 8008efa:	463c      	mov	r4, r7
 8008efc:	46b8      	mov	r8, r7
 8008efe:	46be      	mov	lr, r7
 8008f00:	2620      	movs	r6, #32
 8008f02:	fbb1 f1f7 	udiv	r1, r1, r7
 8008f06:	eba2 0208 	sub.w	r2, r2, r8
 8008f0a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8008f0e:	e766      	b.n	8008dde <__udivmoddi4+0xfa>
 8008f10:	4601      	mov	r1, r0
 8008f12:	e718      	b.n	8008d46 <__udivmoddi4+0x62>
 8008f14:	4610      	mov	r0, r2
 8008f16:	e72c      	b.n	8008d72 <__udivmoddi4+0x8e>
 8008f18:	f1c6 0220 	rsb	r2, r6, #32
 8008f1c:	fa2e f302 	lsr.w	r3, lr, r2
 8008f20:	40b7      	lsls	r7, r6
 8008f22:	40b1      	lsls	r1, r6
 8008f24:	fa20 f202 	lsr.w	r2, r0, r2
 8008f28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	fbb3 f8fe 	udiv	r8, r3, lr
 8008f32:	b2bc      	uxth	r4, r7
 8008f34:	fb0e 3318 	mls	r3, lr, r8, r3
 8008f38:	0c11      	lsrs	r1, r2, #16
 8008f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008f3e:	fb08 f904 	mul.w	r9, r8, r4
 8008f42:	40b0      	lsls	r0, r6
 8008f44:	4589      	cmp	r9, r1
 8008f46:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8008f4a:	b280      	uxth	r0, r0
 8008f4c:	d93e      	bls.n	8008fcc <__udivmoddi4+0x2e8>
 8008f4e:	1879      	adds	r1, r7, r1
 8008f50:	f108 3cff 	add.w	ip, r8, #4294967295
 8008f54:	d201      	bcs.n	8008f5a <__udivmoddi4+0x276>
 8008f56:	4589      	cmp	r9, r1
 8008f58:	d81f      	bhi.n	8008f9a <__udivmoddi4+0x2b6>
 8008f5a:	eba1 0109 	sub.w	r1, r1, r9
 8008f5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8008f62:	fb09 f804 	mul.w	r8, r9, r4
 8008f66:	fb0e 1119 	mls	r1, lr, r9, r1
 8008f6a:	b292      	uxth	r2, r2
 8008f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008f70:	4542      	cmp	r2, r8
 8008f72:	d229      	bcs.n	8008fc8 <__udivmoddi4+0x2e4>
 8008f74:	18ba      	adds	r2, r7, r2
 8008f76:	f109 31ff 	add.w	r1, r9, #4294967295
 8008f7a:	d2c4      	bcs.n	8008f06 <__udivmoddi4+0x222>
 8008f7c:	4542      	cmp	r2, r8
 8008f7e:	d2c2      	bcs.n	8008f06 <__udivmoddi4+0x222>
 8008f80:	f1a9 0102 	sub.w	r1, r9, #2
 8008f84:	443a      	add	r2, r7
 8008f86:	e7be      	b.n	8008f06 <__udivmoddi4+0x222>
 8008f88:	45f0      	cmp	r8, lr
 8008f8a:	d29d      	bcs.n	8008ec8 <__udivmoddi4+0x1e4>
 8008f8c:	ebbe 0302 	subs.w	r3, lr, r2
 8008f90:	eb6c 0c07 	sbc.w	ip, ip, r7
 8008f94:	3801      	subs	r0, #1
 8008f96:	46e1      	mov	r9, ip
 8008f98:	e796      	b.n	8008ec8 <__udivmoddi4+0x1e4>
 8008f9a:	eba7 0909 	sub.w	r9, r7, r9
 8008f9e:	4449      	add	r1, r9
 8008fa0:	f1a8 0c02 	sub.w	ip, r8, #2
 8008fa4:	fbb1 f9fe 	udiv	r9, r1, lr
 8008fa8:	fb09 f804 	mul.w	r8, r9, r4
 8008fac:	e7db      	b.n	8008f66 <__udivmoddi4+0x282>
 8008fae:	4673      	mov	r3, lr
 8008fb0:	e77f      	b.n	8008eb2 <__udivmoddi4+0x1ce>
 8008fb2:	4650      	mov	r0, sl
 8008fb4:	e766      	b.n	8008e84 <__udivmoddi4+0x1a0>
 8008fb6:	4608      	mov	r0, r1
 8008fb8:	e6fd      	b.n	8008db6 <__udivmoddi4+0xd2>
 8008fba:	443b      	add	r3, r7
 8008fbc:	3a02      	subs	r2, #2
 8008fbe:	e733      	b.n	8008e28 <__udivmoddi4+0x144>
 8008fc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8008fc4:	443b      	add	r3, r7
 8008fc6:	e71c      	b.n	8008e02 <__udivmoddi4+0x11e>
 8008fc8:	4649      	mov	r1, r9
 8008fca:	e79c      	b.n	8008f06 <__udivmoddi4+0x222>
 8008fcc:	eba1 0109 	sub.w	r1, r1, r9
 8008fd0:	46c4      	mov	ip, r8
 8008fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8008fd6:	fb09 f804 	mul.w	r8, r9, r4
 8008fda:	e7c4      	b.n	8008f66 <__udivmoddi4+0x282>

08008fdc <__aeabi_idiv0>:
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop

08008fe0 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	80fb      	strh	r3, [r7, #6]
 8008fea:	460b      	mov	r3, r1
 8008fec:	80bb      	strh	r3, [r7, #4]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 8008ff2:	88fb      	ldrh	r3, [r7, #6]
 8008ff4:	88b9      	ldrh	r1, [r7, #4]
 8008ff6:	887a      	ldrh	r2, [r7, #2]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f001 fdd1 	bl	800aba0 <ST7735_DrawPixel>
}
 8008ffe:	bf00      	nop
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8009006:	b590      	push	{r4, r7, lr}
 8009008:	b085      	sub	sp, #20
 800900a:	af02      	add	r7, sp, #8
 800900c:	4604      	mov	r4, r0
 800900e:	4608      	mov	r0, r1
 8009010:	4611      	mov	r1, r2
 8009012:	461a      	mov	r2, r3
 8009014:	4623      	mov	r3, r4
 8009016:	80fb      	strh	r3, [r7, #6]
 8009018:	4603      	mov	r3, r0
 800901a:	80bb      	strh	r3, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	807b      	strh	r3, [r7, #2]
 8009020:	4613      	mov	r3, r2
 8009022:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8009024:	88f8      	ldrh	r0, [r7, #6]
 8009026:	88b9      	ldrh	r1, [r7, #4]
 8009028:	887a      	ldrh	r2, [r7, #2]
 800902a:	883c      	ldrh	r4, [r7, #0]
 800902c:	8b3b      	ldrh	r3, [r7, #24]
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	4623      	mov	r3, r4
 8009032:	f001 febf 	bl	800adb4 <ST7735_FillRectangle>
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	bd90      	pop	{r4, r7, pc}

0800903e <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b082      	sub	sp, #8
 8009042:	af00      	add	r7, sp, #0
 8009044:	4603      	mov	r3, r0
 8009046:	80fb      	strh	r3, [r7, #6]
 8009048:	460b      	mov	r3, r1
 800904a:	80bb      	strh	r3, [r7, #4]
 800904c:	4613      	mov	r3, r2
 800904e:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8009050:	887a      	ldrh	r2, [r7, #2]
 8009052:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800905a:	4618      	mov	r0, r3
 800905c:	f7ff ffc0 	bl	8008fe0 <drawPixel>
}
 8009060:	bf00      	nop
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8009068:	b590      	push	{r4, r7, lr}
 800906a:	b089      	sub	sp, #36	@ 0x24
 800906c:	af00      	add	r7, sp, #0
 800906e:	4604      	mov	r4, r0
 8009070:	4608      	mov	r0, r1
 8009072:	4611      	mov	r1, r2
 8009074:	461a      	mov	r2, r3
 8009076:	4623      	mov	r3, r4
 8009078:	80fb      	strh	r3, [r7, #6]
 800907a:	4603      	mov	r3, r0
 800907c:	80bb      	strh	r3, [r7, #4]
 800907e:	460b      	mov	r3, r1
 8009080:	807b      	strh	r3, [r7, #2]
 8009082:	4613      	mov	r3, r2
 8009084:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8009086:	f9b7 2000 	ldrsh.w	r2, [r7]
 800908a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8009094:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8009098:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800909c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090a0:	1acb      	subs	r3, r1, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	bfb8      	it	lt
 80090a6:	425b      	neglt	r3, r3
 80090a8:	429a      	cmp	r2, r3
 80090aa:	bfcc      	ite	gt
 80090ac:	2301      	movgt	r3, #1
 80090ae:	2300      	movle	r3, #0
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	837b      	strh	r3, [r7, #26]
    if (steep) {
 80090b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00b      	beq.n	80090d4 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 80090bc:	88fb      	ldrh	r3, [r7, #6]
 80090be:	833b      	strh	r3, [r7, #24]
 80090c0:	88bb      	ldrh	r3, [r7, #4]
 80090c2:	80fb      	strh	r3, [r7, #6]
 80090c4:	8b3b      	ldrh	r3, [r7, #24]
 80090c6:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80090c8:	887b      	ldrh	r3, [r7, #2]
 80090ca:	82fb      	strh	r3, [r7, #22]
 80090cc:	883b      	ldrh	r3, [r7, #0]
 80090ce:	807b      	strh	r3, [r7, #2]
 80090d0:	8afb      	ldrh	r3, [r7, #22]
 80090d2:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80090d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80090d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80090dc:	429a      	cmp	r2, r3
 80090de:	dd0b      	ble.n	80090f8 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 80090e0:	88fb      	ldrh	r3, [r7, #6]
 80090e2:	82bb      	strh	r3, [r7, #20]
 80090e4:	887b      	ldrh	r3, [r7, #2]
 80090e6:	80fb      	strh	r3, [r7, #6]
 80090e8:	8abb      	ldrh	r3, [r7, #20]
 80090ea:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80090ec:	88bb      	ldrh	r3, [r7, #4]
 80090ee:	827b      	strh	r3, [r7, #18]
 80090f0:	883b      	ldrh	r3, [r7, #0]
 80090f2:	80bb      	strh	r3, [r7, #4]
 80090f4:	8a7b      	ldrh	r3, [r7, #18]
 80090f6:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80090f8:	887a      	ldrh	r2, [r7, #2]
 80090fa:	88fb      	ldrh	r3, [r7, #6]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	b29b      	uxth	r3, r3
 8009100:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 8009102:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009106:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	2b00      	cmp	r3, #0
 800910e:	bfb8      	it	lt
 8009110:	425b      	neglt	r3, r3
 8009112:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8009114:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009118:	0fda      	lsrs	r2, r3, #31
 800911a:	4413      	add	r3, r2
 800911c:	105b      	asrs	r3, r3, #1
 800911e:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 8009120:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009124:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009128:	429a      	cmp	r2, r3
 800912a:	da02      	bge.n	8009132 <writeLine+0xca>
        ystep = 1;
 800912c:	2301      	movs	r3, #1
 800912e:	83bb      	strh	r3, [r7, #28]
 8009130:	e031      	b.n	8009196 <writeLine+0x12e>
    } else {
        ystep = -1;
 8009132:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009136:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8009138:	e02d      	b.n	8009196 <writeLine+0x12e>
        if (steep) {
 800913a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d008      	beq.n	8009154 <writeLine+0xec>
            writePixel(y0, x0, color);
 8009142:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009144:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8009148:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800914c:	4618      	mov	r0, r3
 800914e:	f7ff ff76 	bl	800903e <writePixel>
 8009152:	e007      	b.n	8009164 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 8009154:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009156:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800915a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff ff6d 	bl	800903e <writePixel>
        }
        err -= dy;
 8009164:	8bfa      	ldrh	r2, [r7, #30]
 8009166:	89fb      	ldrh	r3, [r7, #14]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	b29b      	uxth	r3, r3
 800916c:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 800916e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009172:	2b00      	cmp	r3, #0
 8009174:	da09      	bge.n	800918a <writeLine+0x122>
            y0 += ystep;
 8009176:	88ba      	ldrh	r2, [r7, #4]
 8009178:	8bbb      	ldrh	r3, [r7, #28]
 800917a:	4413      	add	r3, r2
 800917c:	b29b      	uxth	r3, r3
 800917e:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8009180:	8bfa      	ldrh	r2, [r7, #30]
 8009182:	8a3b      	ldrh	r3, [r7, #16]
 8009184:	4413      	add	r3, r2
 8009186:	b29b      	uxth	r3, r3
 8009188:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 800918a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800918e:	b29b      	uxth	r3, r3
 8009190:	3301      	adds	r3, #1
 8009192:	b29b      	uxth	r3, r3
 8009194:	80fb      	strh	r3, [r7, #6]
 8009196:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800919a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800919e:	429a      	cmp	r2, r3
 80091a0:	ddcb      	ble.n	800913a <writeLine+0xd2>
        }
    }
}
 80091a2:	bf00      	nop
 80091a4:	bf00      	nop
 80091a6:	3724      	adds	r7, #36	@ 0x24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd90      	pop	{r4, r7, pc}

080091ac <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80091ac:	b590      	push	{r4, r7, lr}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af02      	add	r7, sp, #8
 80091b2:	4604      	mov	r4, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	4611      	mov	r1, r2
 80091b8:	461a      	mov	r2, r3
 80091ba:	4623      	mov	r3, r4
 80091bc:	80fb      	strh	r3, [r7, #6]
 80091be:	4603      	mov	r3, r0
 80091c0:	80bb      	strh	r3, [r7, #4]
 80091c2:	460b      	mov	r3, r1
 80091c4:	807b      	strh	r3, [r7, #2]
 80091c6:	4613      	mov	r3, r2
 80091c8:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 80091ca:	88ba      	ldrh	r2, [r7, #4]
 80091cc:	887b      	ldrh	r3, [r7, #2]
 80091ce:	4413      	add	r3, r2
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	3b01      	subs	r3, #1
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	b21c      	sxth	r4, r3
 80091d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80091dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80091e0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80091e4:	883b      	ldrh	r3, [r7, #0]
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	4623      	mov	r3, r4
 80091ea:	f7ff ff3d 	bl	8009068 <writeLine>
}
 80091ee:	bf00      	nop
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd90      	pop	{r4, r7, pc}

080091f6 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80091f6:	b590      	push	{r4, r7, lr}
 80091f8:	b085      	sub	sp, #20
 80091fa:	af02      	add	r7, sp, #8
 80091fc:	4604      	mov	r4, r0
 80091fe:	4608      	mov	r0, r1
 8009200:	4611      	mov	r1, r2
 8009202:	461a      	mov	r2, r3
 8009204:	4623      	mov	r3, r4
 8009206:	80fb      	strh	r3, [r7, #6]
 8009208:	4603      	mov	r3, r0
 800920a:	80bb      	strh	r3, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	807b      	strh	r3, [r7, #2]
 8009210:	4613      	mov	r3, r2
 8009212:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 8009214:	88fa      	ldrh	r2, [r7, #6]
 8009216:	887b      	ldrh	r3, [r7, #2]
 8009218:	4413      	add	r3, r2
 800921a:	b29b      	uxth	r3, r3
 800921c:	3b01      	subs	r3, #1
 800921e:	b29b      	uxth	r3, r3
 8009220:	b21a      	sxth	r2, r3
 8009222:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8009226:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800922a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800922e:	883b      	ldrh	r3, [r7, #0]
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	4623      	mov	r3, r4
 8009234:	f7ff ff18 	bl	8009068 <writeLine>
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	bd90      	pop	{r4, r7, pc}

08009240 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8009240:	b590      	push	{r4, r7, lr}
 8009242:	b087      	sub	sp, #28
 8009244:	af02      	add	r7, sp, #8
 8009246:	4604      	mov	r4, r0
 8009248:	4608      	mov	r0, r1
 800924a:	4611      	mov	r1, r2
 800924c:	461a      	mov	r2, r3
 800924e:	4623      	mov	r3, r4
 8009250:	80fb      	strh	r3, [r7, #6]
 8009252:	4603      	mov	r3, r0
 8009254:	80bb      	strh	r3, [r7, #4]
 8009256:	460b      	mov	r3, r1
 8009258:	807b      	strh	r3, [r7, #2]
 800925a:	4613      	mov	r3, r2
 800925c:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 800925e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009262:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009266:	429a      	cmp	r2, r3
 8009268:	d11a      	bne.n	80092a0 <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 800926a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800926e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009272:	429a      	cmp	r2, r3
 8009274:	dd05      	ble.n	8009282 <drawLine+0x42>
 8009276:	88bb      	ldrh	r3, [r7, #4]
 8009278:	81bb      	strh	r3, [r7, #12]
 800927a:	883b      	ldrh	r3, [r7, #0]
 800927c:	80bb      	strh	r3, [r7, #4]
 800927e:	89bb      	ldrh	r3, [r7, #12]
 8009280:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8009282:	883a      	ldrh	r2, [r7, #0]
 8009284:	88bb      	ldrh	r3, [r7, #4]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	b29b      	uxth	r3, r3
 800928a:	3301      	adds	r3, #1
 800928c:	b29b      	uxth	r3, r3
 800928e:	b21a      	sxth	r2, r3
 8009290:	8c3b      	ldrh	r3, [r7, #32]
 8009292:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009296:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800929a:	f7ff ff87 	bl	80091ac <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 800929e:	e02d      	b.n	80092fc <drawLine+0xbc>
    } else if(y0 == y1){
 80092a0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80092a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d11a      	bne.n	80092e2 <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80092ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80092b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	dd05      	ble.n	80092c4 <drawLine+0x84>
 80092b8:	88fb      	ldrh	r3, [r7, #6]
 80092ba:	81fb      	strh	r3, [r7, #14]
 80092bc:	887b      	ldrh	r3, [r7, #2]
 80092be:	80fb      	strh	r3, [r7, #6]
 80092c0:	89fb      	ldrh	r3, [r7, #14]
 80092c2:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80092c4:	887a      	ldrh	r2, [r7, #2]
 80092c6:	88fb      	ldrh	r3, [r7, #6]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	3301      	adds	r3, #1
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	b21a      	sxth	r2, r3
 80092d2:	8c3b      	ldrh	r3, [r7, #32]
 80092d4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80092d8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80092dc:	f7ff ff8b 	bl	80091f6 <drawFastHLine>
}
 80092e0:	e00c      	b.n	80092fc <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 80092e2:	f9b7 4000 	ldrsh.w	r4, [r7]
 80092e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80092ea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80092ee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80092f2:	8c3b      	ldrh	r3, [r7, #32]
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	4623      	mov	r3, r4
 80092f8:	f7ff feb6 	bl	8009068 <writeLine>
}
 80092fc:	bf00      	nop
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	bd90      	pop	{r4, r7, pc}

08009304 <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8009304:	b590      	push	{r4, r7, lr}
 8009306:	b087      	sub	sp, #28
 8009308:	af00      	add	r7, sp, #0
 800930a:	4604      	mov	r4, r0
 800930c:	4608      	mov	r0, r1
 800930e:	4611      	mov	r1, r2
 8009310:	461a      	mov	r2, r3
 8009312:	4623      	mov	r3, r4
 8009314:	80fb      	strh	r3, [r7, #6]
 8009316:	4603      	mov	r3, r0
 8009318:	80bb      	strh	r3, [r7, #4]
 800931a:	460b      	mov	r3, r1
 800931c:	807b      	strh	r3, [r7, #2]
 800931e:	4613      	mov	r3, r2
 8009320:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8009322:	887b      	ldrh	r3, [r7, #2]
 8009324:	f1c3 0301 	rsb	r3, r3, #1
 8009328:	b29b      	uxth	r3, r3
 800932a:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 800932c:	2301      	movs	r3, #1
 800932e:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8009330:	887b      	ldrh	r3, [r7, #2]
 8009332:	461a      	mov	r2, r3
 8009334:	03d2      	lsls	r2, r2, #15
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	b29b      	uxth	r3, r3
 800933c:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8009342:	887b      	ldrh	r3, [r7, #2]
 8009344:	81fb      	strh	r3, [r7, #14]

    writePixel(x0  , y0+r, color);
 8009346:	88ba      	ldrh	r2, [r7, #4]
 8009348:	887b      	ldrh	r3, [r7, #2]
 800934a:	4413      	add	r3, r2
 800934c:	b29b      	uxth	r3, r3
 800934e:	b219      	sxth	r1, r3
 8009350:	883a      	ldrh	r2, [r7, #0]
 8009352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009356:	4618      	mov	r0, r3
 8009358:	f7ff fe71 	bl	800903e <writePixel>
    writePixel(x0  , y0-r, color);
 800935c:	88ba      	ldrh	r2, [r7, #4]
 800935e:	887b      	ldrh	r3, [r7, #2]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	b29b      	uxth	r3, r3
 8009364:	b219      	sxth	r1, r3
 8009366:	883a      	ldrh	r2, [r7, #0]
 8009368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800936c:	4618      	mov	r0, r3
 800936e:	f7ff fe66 	bl	800903e <writePixel>
    writePixel(x0+r, y0  , color);
 8009372:	88fa      	ldrh	r2, [r7, #6]
 8009374:	887b      	ldrh	r3, [r7, #2]
 8009376:	4413      	add	r3, r2
 8009378:	b29b      	uxth	r3, r3
 800937a:	b21b      	sxth	r3, r3
 800937c:	883a      	ldrh	r2, [r7, #0]
 800937e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009382:	4618      	mov	r0, r3
 8009384:	f7ff fe5b 	bl	800903e <writePixel>
    writePixel(x0-r, y0  , color);
 8009388:	88fa      	ldrh	r2, [r7, #6]
 800938a:	887b      	ldrh	r3, [r7, #2]
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	b29b      	uxth	r3, r3
 8009390:	b21b      	sxth	r3, r3
 8009392:	883a      	ldrh	r2, [r7, #0]
 8009394:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff fe50 	bl	800903e <writePixel>

    while (x<y) {
 800939e:	e091      	b.n	80094c4 <drawCircle+0x1c0>
        if (f >= 0) {
 80093a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	db0e      	blt.n	80093c6 <drawCircle+0xc2>
            y--;
 80093a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	3b01      	subs	r3, #1
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80093b4:	8a7b      	ldrh	r3, [r7, #18]
 80093b6:	3302      	adds	r3, #2
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80093bc:	8afa      	ldrh	r2, [r7, #22]
 80093be:	8a7b      	ldrh	r3, [r7, #18]
 80093c0:	4413      	add	r3, r2
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80093c6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	3301      	adds	r3, #1
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80093d2:	8abb      	ldrh	r3, [r7, #20]
 80093d4:	3302      	adds	r3, #2
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80093da:	8afa      	ldrh	r2, [r7, #22]
 80093dc:	8abb      	ldrh	r3, [r7, #20]
 80093de:	4413      	add	r3, r2
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	82fb      	strh	r3, [r7, #22]

        writePixel(x0 + x, y0 + y, color);
 80093e4:	88fa      	ldrh	r2, [r7, #6]
 80093e6:	8a3b      	ldrh	r3, [r7, #16]
 80093e8:	4413      	add	r3, r2
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	b218      	sxth	r0, r3
 80093ee:	88ba      	ldrh	r2, [r7, #4]
 80093f0:	89fb      	ldrh	r3, [r7, #14]
 80093f2:	4413      	add	r3, r2
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	b21b      	sxth	r3, r3
 80093f8:	883a      	ldrh	r2, [r7, #0]
 80093fa:	4619      	mov	r1, r3
 80093fc:	f7ff fe1f 	bl	800903e <writePixel>
        writePixel(x0 - x, y0 + y, color);
 8009400:	88fa      	ldrh	r2, [r7, #6]
 8009402:	8a3b      	ldrh	r3, [r7, #16]
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	b29b      	uxth	r3, r3
 8009408:	b218      	sxth	r0, r3
 800940a:	88ba      	ldrh	r2, [r7, #4]
 800940c:	89fb      	ldrh	r3, [r7, #14]
 800940e:	4413      	add	r3, r2
 8009410:	b29b      	uxth	r3, r3
 8009412:	b21b      	sxth	r3, r3
 8009414:	883a      	ldrh	r2, [r7, #0]
 8009416:	4619      	mov	r1, r3
 8009418:	f7ff fe11 	bl	800903e <writePixel>
        writePixel(x0 + x, y0 - y, color);
 800941c:	88fa      	ldrh	r2, [r7, #6]
 800941e:	8a3b      	ldrh	r3, [r7, #16]
 8009420:	4413      	add	r3, r2
 8009422:	b29b      	uxth	r3, r3
 8009424:	b218      	sxth	r0, r3
 8009426:	88ba      	ldrh	r2, [r7, #4]
 8009428:	89fb      	ldrh	r3, [r7, #14]
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	b29b      	uxth	r3, r3
 800942e:	b21b      	sxth	r3, r3
 8009430:	883a      	ldrh	r2, [r7, #0]
 8009432:	4619      	mov	r1, r3
 8009434:	f7ff fe03 	bl	800903e <writePixel>
        writePixel(x0 - x, y0 - y, color);
 8009438:	88fa      	ldrh	r2, [r7, #6]
 800943a:	8a3b      	ldrh	r3, [r7, #16]
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	b29b      	uxth	r3, r3
 8009440:	b218      	sxth	r0, r3
 8009442:	88ba      	ldrh	r2, [r7, #4]
 8009444:	89fb      	ldrh	r3, [r7, #14]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	b29b      	uxth	r3, r3
 800944a:	b21b      	sxth	r3, r3
 800944c:	883a      	ldrh	r2, [r7, #0]
 800944e:	4619      	mov	r1, r3
 8009450:	f7ff fdf5 	bl	800903e <writePixel>
        writePixel(x0 + y, y0 + x, color);
 8009454:	88fa      	ldrh	r2, [r7, #6]
 8009456:	89fb      	ldrh	r3, [r7, #14]
 8009458:	4413      	add	r3, r2
 800945a:	b29b      	uxth	r3, r3
 800945c:	b218      	sxth	r0, r3
 800945e:	88ba      	ldrh	r2, [r7, #4]
 8009460:	8a3b      	ldrh	r3, [r7, #16]
 8009462:	4413      	add	r3, r2
 8009464:	b29b      	uxth	r3, r3
 8009466:	b21b      	sxth	r3, r3
 8009468:	883a      	ldrh	r2, [r7, #0]
 800946a:	4619      	mov	r1, r3
 800946c:	f7ff fde7 	bl	800903e <writePixel>
        writePixel(x0 - y, y0 + x, color);
 8009470:	88fa      	ldrh	r2, [r7, #6]
 8009472:	89fb      	ldrh	r3, [r7, #14]
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	b29b      	uxth	r3, r3
 8009478:	b218      	sxth	r0, r3
 800947a:	88ba      	ldrh	r2, [r7, #4]
 800947c:	8a3b      	ldrh	r3, [r7, #16]
 800947e:	4413      	add	r3, r2
 8009480:	b29b      	uxth	r3, r3
 8009482:	b21b      	sxth	r3, r3
 8009484:	883a      	ldrh	r2, [r7, #0]
 8009486:	4619      	mov	r1, r3
 8009488:	f7ff fdd9 	bl	800903e <writePixel>
        writePixel(x0 + y, y0 - x, color);
 800948c:	88fa      	ldrh	r2, [r7, #6]
 800948e:	89fb      	ldrh	r3, [r7, #14]
 8009490:	4413      	add	r3, r2
 8009492:	b29b      	uxth	r3, r3
 8009494:	b218      	sxth	r0, r3
 8009496:	88ba      	ldrh	r2, [r7, #4]
 8009498:	8a3b      	ldrh	r3, [r7, #16]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	b29b      	uxth	r3, r3
 800949e:	b21b      	sxth	r3, r3
 80094a0:	883a      	ldrh	r2, [r7, #0]
 80094a2:	4619      	mov	r1, r3
 80094a4:	f7ff fdcb 	bl	800903e <writePixel>
        writePixel(x0 - y, y0 - x, color);
 80094a8:	88fa      	ldrh	r2, [r7, #6]
 80094aa:	89fb      	ldrh	r3, [r7, #14]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	b218      	sxth	r0, r3
 80094b2:	88ba      	ldrh	r2, [r7, #4]
 80094b4:	8a3b      	ldrh	r3, [r7, #16]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	b21b      	sxth	r3, r3
 80094bc:	883a      	ldrh	r2, [r7, #0]
 80094be:	4619      	mov	r1, r3
 80094c0:	f7ff fdbd 	bl	800903e <writePixel>
    while (x<y) {
 80094c4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80094c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	f6ff af67 	blt.w	80093a0 <drawCircle+0x9c>
    }
}
 80094d2:	bf00      	nop
 80094d4:	bf00      	nop
 80094d6:	371c      	adds	r7, #28
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd90      	pop	{r4, r7, pc}

080094dc <drawCircleHelper>:

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 80094dc:	b590      	push	{r4, r7, lr}
 80094de:	b087      	sub	sp, #28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	4604      	mov	r4, r0
 80094e4:	4608      	mov	r0, r1
 80094e6:	4611      	mov	r1, r2
 80094e8:	461a      	mov	r2, r3
 80094ea:	4623      	mov	r3, r4
 80094ec:	80fb      	strh	r3, [r7, #6]
 80094ee:	4603      	mov	r3, r0
 80094f0:	80bb      	strh	r3, [r7, #4]
 80094f2:	460b      	mov	r3, r1
 80094f4:	807b      	strh	r3, [r7, #2]
 80094f6:	4613      	mov	r3, r2
 80094f8:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 80094fa:	887b      	ldrh	r3, [r7, #2]
 80094fc:	f1c3 0301 	rsb	r3, r3, #1
 8009500:	b29b      	uxth	r3, r3
 8009502:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8009504:	2301      	movs	r3, #1
 8009506:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8009508:	887b      	ldrh	r3, [r7, #2]
 800950a:	461a      	mov	r2, r3
 800950c:	03d2      	lsls	r2, r2, #15
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	005b      	lsls	r3, r3, #1
 8009512:	b29b      	uxth	r3, r3
 8009514:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 800951a:	887b      	ldrh	r3, [r7, #2]
 800951c:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 800951e:	e0a5      	b.n	800966c <drawCircleHelper+0x190>
        if (f >= 0) {
 8009520:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009524:	2b00      	cmp	r3, #0
 8009526:	db0e      	blt.n	8009546 <drawCircleHelper+0x6a>
            y--;
 8009528:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800952c:	b29b      	uxth	r3, r3
 800952e:	3b01      	subs	r3, #1
 8009530:	b29b      	uxth	r3, r3
 8009532:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8009534:	8a7b      	ldrh	r3, [r7, #18]
 8009536:	3302      	adds	r3, #2
 8009538:	b29b      	uxth	r3, r3
 800953a:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 800953c:	8afa      	ldrh	r2, [r7, #22]
 800953e:	8a7b      	ldrh	r3, [r7, #18]
 8009540:	4413      	add	r3, r2
 8009542:	b29b      	uxth	r3, r3
 8009544:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8009546:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800954a:	b29b      	uxth	r3, r3
 800954c:	3301      	adds	r3, #1
 800954e:	b29b      	uxth	r3, r3
 8009550:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8009552:	8abb      	ldrh	r3, [r7, #20]
 8009554:	3302      	adds	r3, #2
 8009556:	b29b      	uxth	r3, r3
 8009558:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800955a:	8afa      	ldrh	r2, [r7, #22]
 800955c:	8abb      	ldrh	r3, [r7, #20]
 800955e:	4413      	add	r3, r2
 8009560:	b29b      	uxth	r3, r3
 8009562:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8009564:	787b      	ldrb	r3, [r7, #1]
 8009566:	f003 0304 	and.w	r3, r3, #4
 800956a:	2b00      	cmp	r3, #0
 800956c:	d01b      	beq.n	80095a6 <drawCircleHelper+0xca>
            writePixel(x0 + x, y0 + y, color);
 800956e:	88fa      	ldrh	r2, [r7, #6]
 8009570:	8a3b      	ldrh	r3, [r7, #16]
 8009572:	4413      	add	r3, r2
 8009574:	b29b      	uxth	r3, r3
 8009576:	b218      	sxth	r0, r3
 8009578:	88ba      	ldrh	r2, [r7, #4]
 800957a:	89fb      	ldrh	r3, [r7, #14]
 800957c:	4413      	add	r3, r2
 800957e:	b29b      	uxth	r3, r3
 8009580:	b21b      	sxth	r3, r3
 8009582:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009584:	4619      	mov	r1, r3
 8009586:	f7ff fd5a 	bl	800903e <writePixel>
            writePixel(x0 + y, y0 + x, color);
 800958a:	88fa      	ldrh	r2, [r7, #6]
 800958c:	89fb      	ldrh	r3, [r7, #14]
 800958e:	4413      	add	r3, r2
 8009590:	b29b      	uxth	r3, r3
 8009592:	b218      	sxth	r0, r3
 8009594:	88ba      	ldrh	r2, [r7, #4]
 8009596:	8a3b      	ldrh	r3, [r7, #16]
 8009598:	4413      	add	r3, r2
 800959a:	b29b      	uxth	r3, r3
 800959c:	b21b      	sxth	r3, r3
 800959e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80095a0:	4619      	mov	r1, r3
 80095a2:	f7ff fd4c 	bl	800903e <writePixel>
        }
        if (cornername & 0x2) {
 80095a6:	787b      	ldrb	r3, [r7, #1]
 80095a8:	f003 0302 	and.w	r3, r3, #2
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d01b      	beq.n	80095e8 <drawCircleHelper+0x10c>
            writePixel(x0 + x, y0 - y, color);
 80095b0:	88fa      	ldrh	r2, [r7, #6]
 80095b2:	8a3b      	ldrh	r3, [r7, #16]
 80095b4:	4413      	add	r3, r2
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	b218      	sxth	r0, r3
 80095ba:	88ba      	ldrh	r2, [r7, #4]
 80095bc:	89fb      	ldrh	r3, [r7, #14]
 80095be:	1ad3      	subs	r3, r2, r3
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	b21b      	sxth	r3, r3
 80095c4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80095c6:	4619      	mov	r1, r3
 80095c8:	f7ff fd39 	bl	800903e <writePixel>
            writePixel(x0 + y, y0 - x, color);
 80095cc:	88fa      	ldrh	r2, [r7, #6]
 80095ce:	89fb      	ldrh	r3, [r7, #14]
 80095d0:	4413      	add	r3, r2
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	b218      	sxth	r0, r3
 80095d6:	88ba      	ldrh	r2, [r7, #4]
 80095d8:	8a3b      	ldrh	r3, [r7, #16]
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	b29b      	uxth	r3, r3
 80095de:	b21b      	sxth	r3, r3
 80095e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80095e2:	4619      	mov	r1, r3
 80095e4:	f7ff fd2b 	bl	800903e <writePixel>
        }
        if (cornername & 0x8) {
 80095e8:	787b      	ldrb	r3, [r7, #1]
 80095ea:	f003 0308 	and.w	r3, r3, #8
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d01b      	beq.n	800962a <drawCircleHelper+0x14e>
            writePixel(x0 - y, y0 + x, color);
 80095f2:	88fa      	ldrh	r2, [r7, #6]
 80095f4:	89fb      	ldrh	r3, [r7, #14]
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	b218      	sxth	r0, r3
 80095fc:	88ba      	ldrh	r2, [r7, #4]
 80095fe:	8a3b      	ldrh	r3, [r7, #16]
 8009600:	4413      	add	r3, r2
 8009602:	b29b      	uxth	r3, r3
 8009604:	b21b      	sxth	r3, r3
 8009606:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009608:	4619      	mov	r1, r3
 800960a:	f7ff fd18 	bl	800903e <writePixel>
            writePixel(x0 - x, y0 + y, color);
 800960e:	88fa      	ldrh	r2, [r7, #6]
 8009610:	8a3b      	ldrh	r3, [r7, #16]
 8009612:	1ad3      	subs	r3, r2, r3
 8009614:	b29b      	uxth	r3, r3
 8009616:	b218      	sxth	r0, r3
 8009618:	88ba      	ldrh	r2, [r7, #4]
 800961a:	89fb      	ldrh	r3, [r7, #14]
 800961c:	4413      	add	r3, r2
 800961e:	b29b      	uxth	r3, r3
 8009620:	b21b      	sxth	r3, r3
 8009622:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009624:	4619      	mov	r1, r3
 8009626:	f7ff fd0a 	bl	800903e <writePixel>
        }
        if (cornername & 0x1) {
 800962a:	787b      	ldrb	r3, [r7, #1]
 800962c:	f003 0301 	and.w	r3, r3, #1
 8009630:	2b00      	cmp	r3, #0
 8009632:	d01b      	beq.n	800966c <drawCircleHelper+0x190>
            writePixel(x0 - y, y0 - x, color);
 8009634:	88fa      	ldrh	r2, [r7, #6]
 8009636:	89fb      	ldrh	r3, [r7, #14]
 8009638:	1ad3      	subs	r3, r2, r3
 800963a:	b29b      	uxth	r3, r3
 800963c:	b218      	sxth	r0, r3
 800963e:	88ba      	ldrh	r2, [r7, #4]
 8009640:	8a3b      	ldrh	r3, [r7, #16]
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	b29b      	uxth	r3, r3
 8009646:	b21b      	sxth	r3, r3
 8009648:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800964a:	4619      	mov	r1, r3
 800964c:	f7ff fcf7 	bl	800903e <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8009650:	88fa      	ldrh	r2, [r7, #6]
 8009652:	8a3b      	ldrh	r3, [r7, #16]
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	b29b      	uxth	r3, r3
 8009658:	b218      	sxth	r0, r3
 800965a:	88ba      	ldrh	r2, [r7, #4]
 800965c:	89fb      	ldrh	r3, [r7, #14]
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	b29b      	uxth	r3, r3
 8009662:	b21b      	sxth	r3, r3
 8009664:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009666:	4619      	mov	r1, r3
 8009668:	f7ff fce9 	bl	800903e <writePixel>
    while (x<y) {
 800966c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009670:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009674:	429a      	cmp	r2, r3
 8009676:	f6ff af53 	blt.w	8009520 <drawCircleHelper+0x44>
        }
    }
}
 800967a:	bf00      	nop
 800967c:	bf00      	nop
 800967e:	371c      	adds	r7, #28
 8009680:	46bd      	mov	sp, r7
 8009682:	bd90      	pop	{r4, r7, pc}

08009684 <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8009684:	b590      	push	{r4, r7, lr}
 8009686:	b087      	sub	sp, #28
 8009688:	af00      	add	r7, sp, #0
 800968a:	4604      	mov	r4, r0
 800968c:	4608      	mov	r0, r1
 800968e:	4611      	mov	r1, r2
 8009690:	461a      	mov	r2, r3
 8009692:	4623      	mov	r3, r4
 8009694:	80fb      	strh	r3, [r7, #6]
 8009696:	4603      	mov	r3, r0
 8009698:	80bb      	strh	r3, [r7, #4]
 800969a:	460b      	mov	r3, r1
 800969c:	807b      	strh	r3, [r7, #2]
 800969e:	4613      	mov	r3, r2
 80096a0:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 80096a2:	887b      	ldrh	r3, [r7, #2]
 80096a4:	f1c3 0301 	rsb	r3, r3, #1
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80096ac:	2301      	movs	r3, #1
 80096ae:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80096b0:	887b      	ldrh	r3, [r7, #2]
 80096b2:	461a      	mov	r2, r3
 80096b4:	03d2      	lsls	r2, r2, #15
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	005b      	lsls	r3, r3, #1
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 80096c2:	887b      	ldrh	r3, [r7, #2]
 80096c4:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 80096c6:	8a3b      	ldrh	r3, [r7, #16]
 80096c8:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 80096ca:	89fb      	ldrh	r3, [r7, #14]
 80096cc:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 80096ce:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	3301      	adds	r3, #1
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	853b      	strh	r3, [r7, #40]	@ 0x28

    while(x < y) {
 80096da:	e095      	b.n	8009808 <fillCircleHelper+0x184>
        if (f >= 0) {
 80096dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	db0e      	blt.n	8009702 <fillCircleHelper+0x7e>
            y--;
 80096e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	3b01      	subs	r3, #1
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80096f0:	8a7b      	ldrh	r3, [r7, #18]
 80096f2:	3302      	adds	r3, #2
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 80096f8:	8afa      	ldrh	r2, [r7, #22]
 80096fa:	8a7b      	ldrh	r3, [r7, #18]
 80096fc:	4413      	add	r3, r2
 80096fe:	b29b      	uxth	r3, r3
 8009700:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8009702:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009706:	b29b      	uxth	r3, r3
 8009708:	3301      	adds	r3, #1
 800970a:	b29b      	uxth	r3, r3
 800970c:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800970e:	8abb      	ldrh	r3, [r7, #20]
 8009710:	3302      	adds	r3, #2
 8009712:	b29b      	uxth	r3, r3
 8009714:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8009716:	8afa      	ldrh	r2, [r7, #22]
 8009718:	8abb      	ldrh	r3, [r7, #20]
 800971a:	4413      	add	r3, r2
 800971c:	b29b      	uxth	r3, r3
 800971e:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8009720:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009724:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009728:	429a      	cmp	r2, r3
 800972a:	db31      	blt.n	8009790 <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 800972c:	787b      	ldrb	r3, [r7, #1]
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	2b00      	cmp	r3, #0
 8009734:	d013      	beq.n	800975e <fillCircleHelper+0xda>
 8009736:	88fa      	ldrh	r2, [r7, #6]
 8009738:	8a3b      	ldrh	r3, [r7, #16]
 800973a:	4413      	add	r3, r2
 800973c:	b29b      	uxth	r3, r3
 800973e:	b218      	sxth	r0, r3
 8009740:	88ba      	ldrh	r2, [r7, #4]
 8009742:	89fb      	ldrh	r3, [r7, #14]
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	b29b      	uxth	r3, r3
 8009748:	b219      	sxth	r1, r3
 800974a:	89fb      	ldrh	r3, [r7, #14]
 800974c:	005b      	lsls	r3, r3, #1
 800974e:	b29a      	uxth	r2, r3
 8009750:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009752:	4413      	add	r3, r2
 8009754:	b29b      	uxth	r3, r3
 8009756:	b21a      	sxth	r2, r3
 8009758:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800975a:	f7ff fd27 	bl	80091ac <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 800975e:	787b      	ldrb	r3, [r7, #1]
 8009760:	f003 0302 	and.w	r3, r3, #2
 8009764:	2b00      	cmp	r3, #0
 8009766:	d013      	beq.n	8009790 <fillCircleHelper+0x10c>
 8009768:	88fa      	ldrh	r2, [r7, #6]
 800976a:	8a3b      	ldrh	r3, [r7, #16]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	b29b      	uxth	r3, r3
 8009770:	b218      	sxth	r0, r3
 8009772:	88ba      	ldrh	r2, [r7, #4]
 8009774:	89fb      	ldrh	r3, [r7, #14]
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	b29b      	uxth	r3, r3
 800977a:	b219      	sxth	r1, r3
 800977c:	89fb      	ldrh	r3, [r7, #14]
 800977e:	005b      	lsls	r3, r3, #1
 8009780:	b29a      	uxth	r2, r3
 8009782:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009784:	4413      	add	r3, r2
 8009786:	b29b      	uxth	r3, r3
 8009788:	b21a      	sxth	r2, r3
 800978a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800978c:	f7ff fd0e 	bl	80091ac <drawFastVLine>
        }
        if(y != py) {
 8009790:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009794:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009798:	429a      	cmp	r2, r3
 800979a:	d033      	beq.n	8009804 <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 800979c:	787b      	ldrb	r3, [r7, #1]
 800979e:	f003 0301 	and.w	r3, r3, #1
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d013      	beq.n	80097ce <fillCircleHelper+0x14a>
 80097a6:	88fa      	ldrh	r2, [r7, #6]
 80097a8:	897b      	ldrh	r3, [r7, #10]
 80097aa:	4413      	add	r3, r2
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	b218      	sxth	r0, r3
 80097b0:	88ba      	ldrh	r2, [r7, #4]
 80097b2:	89bb      	ldrh	r3, [r7, #12]
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	b219      	sxth	r1, r3
 80097ba:	89bb      	ldrh	r3, [r7, #12]
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	b29a      	uxth	r2, r3
 80097c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80097c2:	4413      	add	r3, r2
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	b21a      	sxth	r2, r3
 80097c8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80097ca:	f7ff fcef 	bl	80091ac <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 80097ce:	787b      	ldrb	r3, [r7, #1]
 80097d0:	f003 0302 	and.w	r3, r3, #2
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d013      	beq.n	8009800 <fillCircleHelper+0x17c>
 80097d8:	88fa      	ldrh	r2, [r7, #6]
 80097da:	897b      	ldrh	r3, [r7, #10]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	b29b      	uxth	r3, r3
 80097e0:	b218      	sxth	r0, r3
 80097e2:	88ba      	ldrh	r2, [r7, #4]
 80097e4:	89bb      	ldrh	r3, [r7, #12]
 80097e6:	1ad3      	subs	r3, r2, r3
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	b219      	sxth	r1, r3
 80097ec:	89bb      	ldrh	r3, [r7, #12]
 80097ee:	005b      	lsls	r3, r3, #1
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80097f4:	4413      	add	r3, r2
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	b21a      	sxth	r2, r3
 80097fa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80097fc:	f7ff fcd6 	bl	80091ac <drawFastVLine>
            py = y;
 8009800:	89fb      	ldrh	r3, [r7, #14]
 8009802:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8009804:	8a3b      	ldrh	r3, [r7, #16]
 8009806:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8009808:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800980c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009810:	429a      	cmp	r2, r3
 8009812:	f6ff af63 	blt.w	80096dc <fillCircleHelper+0x58>
    }
}
 8009816:	bf00      	nop
 8009818:	bf00      	nop
 800981a:	371c      	adds	r7, #28
 800981c:	46bd      	mov	sp, r7
 800981e:	bd90      	pop	{r4, r7, pc}

08009820 <fillCircle>:

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8009820:	b590      	push	{r4, r7, lr}
 8009822:	b085      	sub	sp, #20
 8009824:	af02      	add	r7, sp, #8
 8009826:	4604      	mov	r4, r0
 8009828:	4608      	mov	r0, r1
 800982a:	4611      	mov	r1, r2
 800982c:	461a      	mov	r2, r3
 800982e:	4623      	mov	r3, r4
 8009830:	80fb      	strh	r3, [r7, #6]
 8009832:	4603      	mov	r3, r0
 8009834:	80bb      	strh	r3, [r7, #4]
 8009836:	460b      	mov	r3, r1
 8009838:	807b      	strh	r3, [r7, #2]
 800983a:	4613      	mov	r3, r2
 800983c:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 800983e:	88ba      	ldrh	r2, [r7, #4]
 8009840:	887b      	ldrh	r3, [r7, #2]
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	b29b      	uxth	r3, r3
 8009846:	b219      	sxth	r1, r3
 8009848:	887b      	ldrh	r3, [r7, #2]
 800984a:	005b      	lsls	r3, r3, #1
 800984c:	b29b      	uxth	r3, r3
 800984e:	3301      	adds	r3, #1
 8009850:	b29b      	uxth	r3, r3
 8009852:	b21a      	sxth	r2, r3
 8009854:	883b      	ldrh	r3, [r7, #0]
 8009856:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800985a:	f7ff fca7 	bl	80091ac <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 800985e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009862:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009866:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800986a:	883b      	ldrh	r3, [r7, #0]
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	2300      	movs	r3, #0
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	2303      	movs	r3, #3
 8009874:	f7ff ff06 	bl	8009684 <fillCircleHelper>
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	bd90      	pop	{r4, r7, pc}

08009880 <drawRect>:



void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8009880:	b590      	push	{r4, r7, lr}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	4604      	mov	r4, r0
 8009888:	4608      	mov	r0, r1
 800988a:	4611      	mov	r1, r2
 800988c:	461a      	mov	r2, r3
 800988e:	4623      	mov	r3, r4
 8009890:	80fb      	strh	r3, [r7, #6]
 8009892:	4603      	mov	r3, r0
 8009894:	80bb      	strh	r3, [r7, #4]
 8009896:	460b      	mov	r3, r1
 8009898:	807b      	strh	r3, [r7, #2]
 800989a:	4613      	mov	r3, r2
 800989c:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 800989e:	8b3b      	ldrh	r3, [r7, #24]
 80098a0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80098a4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80098a8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80098ac:	f7ff fca3 	bl	80091f6 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 80098b0:	88ba      	ldrh	r2, [r7, #4]
 80098b2:	883b      	ldrh	r3, [r7, #0]
 80098b4:	4413      	add	r3, r2
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	3b01      	subs	r3, #1
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	b219      	sxth	r1, r3
 80098be:	8b3b      	ldrh	r3, [r7, #24]
 80098c0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80098c4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80098c8:	f7ff fc95 	bl	80091f6 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 80098cc:	8b3b      	ldrh	r3, [r7, #24]
 80098ce:	f9b7 2000 	ldrsh.w	r2, [r7]
 80098d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80098d6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80098da:	f7ff fc67 	bl	80091ac <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 80098de:	88fa      	ldrh	r2, [r7, #6]
 80098e0:	887b      	ldrh	r3, [r7, #2]
 80098e2:	4413      	add	r3, r2
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	3b01      	subs	r3, #1
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	b218      	sxth	r0, r3
 80098ec:	8b3b      	ldrh	r3, [r7, #24]
 80098ee:	f9b7 2000 	ldrsh.w	r2, [r7]
 80098f2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80098f6:	f7ff fc59 	bl	80091ac <drawFastVLine>
}
 80098fa:	bf00      	nop
 80098fc:	370c      	adds	r7, #12
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd90      	pop	{r4, r7, pc}

08009902 <drawRoundRect>:

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8009902:	b590      	push	{r4, r7, lr}
 8009904:	b087      	sub	sp, #28
 8009906:	af02      	add	r7, sp, #8
 8009908:	4604      	mov	r4, r0
 800990a:	4608      	mov	r0, r1
 800990c:	4611      	mov	r1, r2
 800990e:	461a      	mov	r2, r3
 8009910:	4623      	mov	r3, r4
 8009912:	80fb      	strh	r3, [r7, #6]
 8009914:	4603      	mov	r3, r0
 8009916:	80bb      	strh	r3, [r7, #4]
 8009918:	460b      	mov	r3, r1
 800991a:	807b      	strh	r3, [r7, #2]
 800991c:	4613      	mov	r3, r2
 800991e:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8009920:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009924:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009928:	4293      	cmp	r3, r2
 800992a:	bfa8      	it	ge
 800992c:	4613      	movge	r3, r2
 800992e:	b21b      	sxth	r3, r3
 8009930:	0fda      	lsrs	r2, r3, #31
 8009932:	4413      	add	r3, r2
 8009934:	105b      	asrs	r3, r3, #1
 8009936:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8009938:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800993c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009940:	429a      	cmp	r2, r3
 8009942:	dd01      	ble.n	8009948 <drawRoundRect+0x46>
 8009944:	89fb      	ldrh	r3, [r7, #14]
 8009946:	843b      	strh	r3, [r7, #32]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 8009948:	88fa      	ldrh	r2, [r7, #6]
 800994a:	8c3b      	ldrh	r3, [r7, #32]
 800994c:	4413      	add	r3, r2
 800994e:	b29b      	uxth	r3, r3
 8009950:	b218      	sxth	r0, r3
 8009952:	887a      	ldrh	r2, [r7, #2]
 8009954:	8c3b      	ldrh	r3, [r7, #32]
 8009956:	005b      	lsls	r3, r3, #1
 8009958:	b29b      	uxth	r3, r3
 800995a:	1ad3      	subs	r3, r2, r3
 800995c:	b29b      	uxth	r3, r3
 800995e:	b21a      	sxth	r2, r3
 8009960:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009962:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009966:	f7ff fc46 	bl	80091f6 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 800996a:	88fa      	ldrh	r2, [r7, #6]
 800996c:	8c3b      	ldrh	r3, [r7, #32]
 800996e:	4413      	add	r3, r2
 8009970:	b29b      	uxth	r3, r3
 8009972:	b218      	sxth	r0, r3
 8009974:	88ba      	ldrh	r2, [r7, #4]
 8009976:	883b      	ldrh	r3, [r7, #0]
 8009978:	4413      	add	r3, r2
 800997a:	b29b      	uxth	r3, r3
 800997c:	3b01      	subs	r3, #1
 800997e:	b29b      	uxth	r3, r3
 8009980:	b219      	sxth	r1, r3
 8009982:	887a      	ldrh	r2, [r7, #2]
 8009984:	8c3b      	ldrh	r3, [r7, #32]
 8009986:	005b      	lsls	r3, r3, #1
 8009988:	b29b      	uxth	r3, r3
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	b29b      	uxth	r3, r3
 800998e:	b21a      	sxth	r2, r3
 8009990:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009992:	f7ff fc30 	bl	80091f6 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 8009996:	88ba      	ldrh	r2, [r7, #4]
 8009998:	8c3b      	ldrh	r3, [r7, #32]
 800999a:	4413      	add	r3, r2
 800999c:	b29b      	uxth	r3, r3
 800999e:	b219      	sxth	r1, r3
 80099a0:	883a      	ldrh	r2, [r7, #0]
 80099a2:	8c3b      	ldrh	r3, [r7, #32]
 80099a4:	005b      	lsls	r3, r3, #1
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	b21a      	sxth	r2, r3
 80099ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099b0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80099b4:	f7ff fbfa 	bl	80091ac <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80099b8:	88fa      	ldrh	r2, [r7, #6]
 80099ba:	887b      	ldrh	r3, [r7, #2]
 80099bc:	4413      	add	r3, r2
 80099be:	b29b      	uxth	r3, r3
 80099c0:	3b01      	subs	r3, #1
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	b218      	sxth	r0, r3
 80099c6:	88ba      	ldrh	r2, [r7, #4]
 80099c8:	8c3b      	ldrh	r3, [r7, #32]
 80099ca:	4413      	add	r3, r2
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	b219      	sxth	r1, r3
 80099d0:	883a      	ldrh	r2, [r7, #0]
 80099d2:	8c3b      	ldrh	r3, [r7, #32]
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	b29b      	uxth	r3, r3
 80099dc:	b21a      	sxth	r2, r3
 80099de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099e0:	f7ff fbe4 	bl	80091ac <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 80099e4:	88fa      	ldrh	r2, [r7, #6]
 80099e6:	8c3b      	ldrh	r3, [r7, #32]
 80099e8:	4413      	add	r3, r2
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	b218      	sxth	r0, r3
 80099ee:	88ba      	ldrh	r2, [r7, #4]
 80099f0:	8c3b      	ldrh	r3, [r7, #32]
 80099f2:	4413      	add	r3, r2
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	b219      	sxth	r1, r3
 80099f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80099fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	2301      	movs	r3, #1
 8009a02:	f7ff fd6b 	bl	80094dc <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8009a06:	88fa      	ldrh	r2, [r7, #6]
 8009a08:	887b      	ldrh	r3, [r7, #2]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	8c3b      	ldrh	r3, [r7, #32]
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	3b01      	subs	r3, #1
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	b218      	sxth	r0, r3
 8009a1a:	88ba      	ldrh	r2, [r7, #4]
 8009a1c:	8c3b      	ldrh	r3, [r7, #32]
 8009a1e:	4413      	add	r3, r2
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	b219      	sxth	r1, r3
 8009a24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009a28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	f7ff fd55 	bl	80094dc <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8009a32:	88fa      	ldrh	r2, [r7, #6]
 8009a34:	887b      	ldrh	r3, [r7, #2]
 8009a36:	4413      	add	r3, r2
 8009a38:	b29a      	uxth	r2, r3
 8009a3a:	8c3b      	ldrh	r3, [r7, #32]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	3b01      	subs	r3, #1
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	b218      	sxth	r0, r3
 8009a46:	88ba      	ldrh	r2, [r7, #4]
 8009a48:	883b      	ldrh	r3, [r7, #0]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	b29a      	uxth	r2, r3
 8009a4e:	8c3b      	ldrh	r3, [r7, #32]
 8009a50:	1ad3      	subs	r3, r2, r3
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	3b01      	subs	r3, #1
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	b219      	sxth	r1, r3
 8009a5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009a5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	2304      	movs	r3, #4
 8009a64:	f7ff fd3a 	bl	80094dc <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8009a68:	88fa      	ldrh	r2, [r7, #6]
 8009a6a:	8c3b      	ldrh	r3, [r7, #32]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	b218      	sxth	r0, r3
 8009a72:	88ba      	ldrh	r2, [r7, #4]
 8009a74:	883b      	ldrh	r3, [r7, #0]
 8009a76:	4413      	add	r3, r2
 8009a78:	b29a      	uxth	r2, r3
 8009a7a:	8c3b      	ldrh	r3, [r7, #32]
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	3b01      	subs	r3, #1
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	b219      	sxth	r1, r3
 8009a86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009a8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	2308      	movs	r3, #8
 8009a90:	f7ff fd24 	bl	80094dc <drawCircleHelper>
}
 8009a94:	bf00      	nop
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd90      	pop	{r4, r7, pc}

08009a9c <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8009a9c:	b590      	push	{r4, r7, lr}
 8009a9e:	b087      	sub	sp, #28
 8009aa0:	af02      	add	r7, sp, #8
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	4608      	mov	r0, r1
 8009aa6:	4611      	mov	r1, r2
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4623      	mov	r3, r4
 8009aac:	80fb      	strh	r3, [r7, #6]
 8009aae:	4603      	mov	r3, r0
 8009ab0:	80bb      	strh	r3, [r7, #4]
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	807b      	strh	r3, [r7, #2]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8009aba:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009abe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	bfa8      	it	ge
 8009ac6:	4613      	movge	r3, r2
 8009ac8:	b21b      	sxth	r3, r3
 8009aca:	0fda      	lsrs	r2, r3, #31
 8009acc:	4413      	add	r3, r2
 8009ace:	105b      	asrs	r3, r3, #1
 8009ad0:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8009ad2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009ad6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	dd01      	ble.n	8009ae2 <fillRoundRect+0x46>
 8009ade:	89fb      	ldrh	r3, [r7, #14]
 8009ae0:	843b      	strh	r3, [r7, #32]
    // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 8009ae2:	88fa      	ldrh	r2, [r7, #6]
 8009ae4:	8c3b      	ldrh	r3, [r7, #32]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	b218      	sxth	r0, r3
 8009aec:	887a      	ldrh	r2, [r7, #2]
 8009aee:	8c3b      	ldrh	r3, [r7, #32]
 8009af0:	005b      	lsls	r3, r3, #1
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	b21a      	sxth	r2, r3
 8009afa:	f9b7 4000 	ldrsh.w	r4, [r7]
 8009afe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009b02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	4623      	mov	r3, r4
 8009b08:	f7ff fa7d 	bl	8009006 <fillRect>
    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8009b0c:	88fa      	ldrh	r2, [r7, #6]
 8009b0e:	887b      	ldrh	r3, [r7, #2]
 8009b10:	4413      	add	r3, r2
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	8c3b      	ldrh	r3, [r7, #32]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	b218      	sxth	r0, r3
 8009b20:	88ba      	ldrh	r2, [r7, #4]
 8009b22:	8c3b      	ldrh	r3, [r7, #32]
 8009b24:	4413      	add	r3, r2
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	b219      	sxth	r1, r3
 8009b2a:	883a      	ldrh	r2, [r7, #0]
 8009b2c:	8c3b      	ldrh	r3, [r7, #32]
 8009b2e:	005b      	lsls	r3, r3, #1
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	3b01      	subs	r3, #1
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	b21b      	sxth	r3, r3
 8009b3c:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8009b40:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009b42:	9201      	str	r2, [sp, #4]
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	2301      	movs	r3, #1
 8009b48:	4622      	mov	r2, r4
 8009b4a:	f7ff fd9b 	bl	8009684 <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8009b4e:	88fa      	ldrh	r2, [r7, #6]
 8009b50:	8c3b      	ldrh	r3, [r7, #32]
 8009b52:	4413      	add	r3, r2
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	b218      	sxth	r0, r3
 8009b58:	88ba      	ldrh	r2, [r7, #4]
 8009b5a:	8c3b      	ldrh	r3, [r7, #32]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	b219      	sxth	r1, r3
 8009b62:	883a      	ldrh	r2, [r7, #0]
 8009b64:	8c3b      	ldrh	r3, [r7, #32]
 8009b66:	005b      	lsls	r3, r3, #1
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	b21b      	sxth	r3, r3
 8009b74:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8009b78:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009b7a:	9201      	str	r2, [sp, #4]
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	2302      	movs	r3, #2
 8009b80:	4622      	mov	r2, r4
 8009b82:	f7ff fd7f 	bl	8009684 <fillCircleHelper>
}
 8009b86:	bf00      	nop
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd90      	pop	{r4, r7, pc}

08009b8e <drawTriangle>:


void drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8009b8e:	b590      	push	{r4, r7, lr}
 8009b90:	b085      	sub	sp, #20
 8009b92:	af02      	add	r7, sp, #8
 8009b94:	4604      	mov	r4, r0
 8009b96:	4608      	mov	r0, r1
 8009b98:	4611      	mov	r1, r2
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	4623      	mov	r3, r4
 8009b9e:	80fb      	strh	r3, [r7, #6]
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	80bb      	strh	r3, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	807b      	strh	r3, [r7, #2]
 8009ba8:	4613      	mov	r3, r2
 8009baa:	803b      	strh	r3, [r7, #0]
    drawLine(x0, y0, x1, y1, color);
 8009bac:	f9b7 4000 	ldrsh.w	r4, [r7]
 8009bb0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009bb4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009bb8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8009bbc:	8c3b      	ldrh	r3, [r7, #32]
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	4623      	mov	r3, r4
 8009bc2:	f7ff fb3d 	bl	8009240 <drawLine>
    drawLine(x1, y1, x2, y2, color);
 8009bc6:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8009bca:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009bce:	f9b7 1000 	ldrsh.w	r1, [r7]
 8009bd2:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8009bd6:	8c3b      	ldrh	r3, [r7, #32]
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	4623      	mov	r3, r4
 8009bdc:	f7ff fb30 	bl	8009240 <drawLine>
    drawLine(x2, y2, x0, y0, color);
 8009be0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8009be4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009be8:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8009bec:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8009bf0:	8c3b      	ldrh	r3, [r7, #32]
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	4623      	mov	r3, r4
 8009bf6:	f7ff fb23 	bl	8009240 <drawLine>
}
 8009bfa:	bf00      	nop
 8009bfc:	370c      	adds	r7, #12
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd90      	pop	{r4, r7, pc}

08009c02 <fillTriangle>:


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8009c02:	b590      	push	{r4, r7, lr}
 8009c04:	b08f      	sub	sp, #60	@ 0x3c
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	4604      	mov	r4, r0
 8009c0a:	4608      	mov	r0, r1
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	461a      	mov	r2, r3
 8009c10:	4623      	mov	r3, r4
 8009c12:	80fb      	strh	r3, [r7, #6]
 8009c14:	4603      	mov	r3, r0
 8009c16:	80bb      	strh	r3, [r7, #4]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	807b      	strh	r3, [r7, #2]
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8009c20:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009c24:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	dd0b      	ble.n	8009c44 <fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8009c2c:	88bb      	ldrh	r3, [r7, #4]
 8009c2e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009c30:	883b      	ldrh	r3, [r7, #0]
 8009c32:	80bb      	strh	r3, [r7, #4]
 8009c34:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009c36:	803b      	strh	r3, [r7, #0]
 8009c38:	88fb      	ldrh	r3, [r7, #6]
 8009c3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009c3c:	887b      	ldrh	r3, [r7, #2]
 8009c3e:	80fb      	strh	r3, [r7, #6]
 8009c40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009c42:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8009c44:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009c48:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	dd0f      	ble.n	8009c70 <fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8009c50:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8009c54:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009c56:	883b      	ldrh	r3, [r7, #0]
 8009c58:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8009c5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009c5e:	803b      	strh	r3, [r7, #0]
 8009c60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8009c64:	843b      	strh	r3, [r7, #32]
 8009c66:	887b      	ldrh	r3, [r7, #2]
 8009c68:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8009c6c:	8c3b      	ldrh	r3, [r7, #32]
 8009c6e:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8009c70:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009c74:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	dd0b      	ble.n	8009c94 <fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8009c7c:	88bb      	ldrh	r3, [r7, #4]
 8009c7e:	83fb      	strh	r3, [r7, #30]
 8009c80:	883b      	ldrh	r3, [r7, #0]
 8009c82:	80bb      	strh	r3, [r7, #4]
 8009c84:	8bfb      	ldrh	r3, [r7, #30]
 8009c86:	803b      	strh	r3, [r7, #0]
 8009c88:	88fb      	ldrh	r3, [r7, #6]
 8009c8a:	83bb      	strh	r3, [r7, #28]
 8009c8c:	887b      	ldrh	r3, [r7, #2]
 8009c8e:	80fb      	strh	r3, [r7, #6]
 8009c90:	8bbb      	ldrh	r3, [r7, #28]
 8009c92:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8009c94:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009c98:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d137      	bne.n	8009d10 <fillTriangle+0x10e>
        a = b = x0;
 8009ca0:	88fb      	ldrh	r3, [r7, #6]
 8009ca2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009ca4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009ca6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        if(x1 < a)      a = x1;
 8009ca8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009cac:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	da02      	bge.n	8009cba <fillTriangle+0xb8>
 8009cb4:	887b      	ldrh	r3, [r7, #2]
 8009cb6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009cb8:	e007      	b.n	8009cca <fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8009cba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009cbe:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	dd01      	ble.n	8009cca <fillTriangle+0xc8>
 8009cc6:	887b      	ldrh	r3, [r7, #2]
 8009cc8:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if(x2 < a)      a = x2;
 8009cca:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8009cce:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	da03      	bge.n	8009cde <fillTriangle+0xdc>
 8009cd6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8009cda:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009cdc:	e008      	b.n	8009cf0 <fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8009cde:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8009ce2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	dd02      	ble.n	8009cf0 <fillTriangle+0xee>
 8009cea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8009cee:	86bb      	strh	r3, [r7, #52]	@ 0x34
        drawFastHLine(a, y0, b-a+1, color);
 8009cf0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009cf2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	b21a      	sxth	r2, r3
 8009cfe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009d02:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009d06:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8009d0a:	f7ff fa74 	bl	80091f6 <drawFastHLine>
        return;
 8009d0e:	e0d4      	b.n	8009eba <fillTriangle+0x2b8>
    }

    int16_t
    dx01 = x1 - x0,
 8009d10:	887a      	ldrh	r2, [r7, #2]
 8009d12:	88fb      	ldrh	r3, [r7, #6]
 8009d14:	1ad3      	subs	r3, r2, r3
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8009d1a:	883a      	ldrh	r2, [r7, #0]
 8009d1c:	88bb      	ldrh	r3, [r7, #4]
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8009d24:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8009d28:	88fb      	ldrh	r3, [r7, #6]
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8009d30:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8009d34:	88bb      	ldrh	r3, [r7, #4]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8009d3c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8009d40:	887b      	ldrh	r3, [r7, #2]
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8009d48:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8009d4c:	883b      	ldrh	r3, [r7, #0]
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8009d54:	2300      	movs	r3, #0
 8009d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb   = 0;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8009d5c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009d60:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d102      	bne.n	8009d6e <fillTriangle+0x16c>
 8009d68:	883b      	ldrh	r3, [r7, #0]
 8009d6a:	863b      	strh	r3, [r7, #48]	@ 0x30
 8009d6c:	e003      	b.n	8009d76 <fillTriangle+0x174>
    else         last = y1-1; // Skip it
 8009d6e:	883b      	ldrh	r3, [r7, #0]
 8009d70:	3b01      	subs	r3, #1
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	863b      	strh	r3, [r7, #48]	@ 0x30

    for(y=y0; y<=last; y++) {
 8009d76:	88bb      	ldrh	r3, [r7, #4]
 8009d78:	867b      	strh	r3, [r7, #50]	@ 0x32
 8009d7a:	e03e      	b.n	8009dfa <fillTriangle+0x1f8>
        a   = x0 + sa / dy01;
 8009d7c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009d80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d82:	fb92 f3f3 	sdiv	r3, r2, r3
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	88fb      	ldrh	r3, [r7, #6]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        b   = x0 + sb / dy02;
 8009d90:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009d94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d96:	fb92 f3f3 	sdiv	r3, r2, r3
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	88fb      	ldrh	r3, [r7, #6]
 8009d9e:	4413      	add	r3, r2
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	86bb      	strh	r3, [r7, #52]	@ 0x34
        sa += dx01;
 8009da4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009daa:	4413      	add	r3, r2
 8009dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sb += dx02;
 8009dae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009db2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009db4:	4413      	add	r3, r2
 8009db6:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8009db8:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8009dbc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	dd05      	ble.n	8009dd0 <fillTriangle+0x1ce>
 8009dc4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009dc6:	81bb      	strh	r3, [r7, #12]
 8009dc8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009dca:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009dcc:	89bb      	ldrh	r3, [r7, #12]
 8009dce:	86bb      	strh	r3, [r7, #52]	@ 0x34
        drawFastHLine(a, y, b-a+1, color);
 8009dd0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009dd2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	3301      	adds	r3, #1
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	b21a      	sxth	r2, r3
 8009dde:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009de2:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8009de6:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8009dea:	f7ff fa04 	bl	80091f6 <drawFastHLine>
    for(y=y0; y<=last; y++) {
 8009dee:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	3301      	adds	r3, #1
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	867b      	strh	r3, [r7, #50]	@ 0x32
 8009dfa:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8009dfe:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8009e02:	429a      	cmp	r2, r3
 8009e04:	ddba      	ble.n	8009d7c <fillTriangle+0x17a>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8009e06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009e0a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8009e0e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009e12:	1a8a      	subs	r2, r1, r2
 8009e14:	fb02 f303 	mul.w	r3, r2, r3
 8009e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8009e1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009e1e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8009e22:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009e26:	1a8a      	subs	r2, r1, r2
 8009e28:	fb02 f303 	mul.w	r3, r2, r3
 8009e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    for(; y<=y2; y++) {
 8009e2e:	e03e      	b.n	8009eae <fillTriangle+0x2ac>
        a   = x1 + sa / dy12;
 8009e30:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009e34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e36:	fb92 f3f3 	sdiv	r3, r2, r3
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	887b      	ldrh	r3, [r7, #2]
 8009e3e:	4413      	add	r3, r2
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	86fb      	strh	r3, [r7, #54]	@ 0x36
        b   = x0 + sb / dy02;
 8009e44:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009e48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	88fb      	ldrh	r3, [r7, #6]
 8009e52:	4413      	add	r3, r2
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	86bb      	strh	r3, [r7, #52]	@ 0x34
        sa += dx12;
 8009e58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e5e:	4413      	add	r3, r2
 8009e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sb += dx02;
 8009e62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009e66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e68:	4413      	add	r3, r2
 8009e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8009e6c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8009e70:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8009e74:	429a      	cmp	r2, r3
 8009e76:	dd05      	ble.n	8009e84 <fillTriangle+0x282>
 8009e78:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009e7a:	81fb      	strh	r3, [r7, #14]
 8009e7c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009e7e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009e80:	89fb      	ldrh	r3, [r7, #14]
 8009e82:	86bb      	strh	r3, [r7, #52]	@ 0x34
        drawFastHLine(a, y, b-a+1, color);
 8009e84:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009e86:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	b21a      	sxth	r2, r3
 8009e92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009e96:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8009e9a:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8009e9e:	f7ff f9aa 	bl	80091f6 <drawFastHLine>
    for(; y<=y2; y++) {
 8009ea2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	867b      	strh	r3, [r7, #50]	@ 0x32
 8009eae:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8009eb2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	ddba      	ble.n	8009e30 <fillTriangle+0x22e>
    }
}
 8009eba:	373c      	adds	r7, #60	@ 0x3c
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd90      	pop	{r4, r7, pc}

08009ec0 <fillScreen>:

void fillScreen(uint16_t color) {
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af02      	add	r7, sp, #8
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8009eca:	4b08      	ldr	r3, [pc, #32]	@ (8009eec <fillScreen+0x2c>)
 8009ecc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009ed0:	4b07      	ldr	r3, [pc, #28]	@ (8009ef0 <fillScreen+0x30>)
 8009ed2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009ed6:	88fb      	ldrh	r3, [r7, #6]
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	460b      	mov	r3, r1
 8009edc:	2100      	movs	r1, #0
 8009ede:	2000      	movs	r0, #0
 8009ee0:	f7ff f891 	bl	8009006 <fillRect>
}
 8009ee4:	bf00      	nop
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	20000210 	.word	0x20000210
 8009ef0:	20000212 	.word	0x20000212

08009ef4 <testLines>:



void testLines(uint16_t color)
{
 8009ef4:	b590      	push	{r4, r7, lr}
 8009ef6:	b08b      	sub	sp, #44	@ 0x2c
 8009ef8:	af02      	add	r7, sp, #8
 8009efa:	4603      	mov	r3, r0
 8009efc:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 8009efe:	4b7c      	ldr	r3, [pc, #496]	@ (800a0f0 <testLines+0x1fc>)
 8009f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f04:	617b      	str	r3, [r7, #20]
                  h = _height;
 8009f06:	4b7b      	ldr	r3, [pc, #492]	@ (800a0f4 <testLines+0x200>)
 8009f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f0c:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 8009f0e:	2000      	movs	r0, #0
 8009f10:	f7ff ffd6 	bl	8009ec0 <fillScreen>

    x1 = y1 = 0;
 8009f14:	2300      	movs	r3, #0
 8009f16:	60fb      	str	r3, [r7, #12]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8009f22:	2300      	movs	r3, #0
 8009f24:	61fb      	str	r3, [r7, #28]
 8009f26:	e00f      	b.n	8009f48 <testLines+0x54>
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	b218      	sxth	r0, r3
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	b219      	sxth	r1, r3
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	b21a      	sxth	r2, r3
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	b21c      	sxth	r4, r3
 8009f38:	88fb      	ldrh	r3, [r7, #6]
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	4623      	mov	r3, r4
 8009f3e:	f7ff f97f 	bl	8009240 <drawLine>
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	3306      	adds	r3, #6
 8009f46:	61fb      	str	r3, [r7, #28]
 8009f48:	69fa      	ldr	r2, [r7, #28]
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	dbeb      	blt.n	8009f28 <testLines+0x34>
    x2    = w - 1;
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	3b01      	subs	r3, #1
 8009f54:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8009f56:	2300      	movs	r3, #0
 8009f58:	61bb      	str	r3, [r7, #24]
 8009f5a:	e00f      	b.n	8009f7c <testLines+0x88>
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	b218      	sxth	r0, r3
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	b219      	sxth	r1, r3
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	b21a      	sxth	r2, r3
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	b21c      	sxth	r4, r3
 8009f6c:	88fb      	ldrh	r3, [r7, #6]
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	4623      	mov	r3, r4
 8009f72:	f7ff f965 	bl	8009240 <drawLine>
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	3306      	adds	r3, #6
 8009f7a:	61bb      	str	r3, [r7, #24]
 8009f7c:	69ba      	ldr	r2, [r7, #24]
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	dbeb      	blt.n	8009f5c <testLines+0x68>

    fillScreen(BLACK);
 8009f84:	2000      	movs	r0, #0
 8009f86:	f7ff ff9b 	bl	8009ec0 <fillScreen>

    x1    = w - 1;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 8009f90:	2300      	movs	r3, #0
 8009f92:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	3b01      	subs	r3, #1
 8009f98:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	61fb      	str	r3, [r7, #28]
 8009f9e:	e00f      	b.n	8009fc0 <testLines+0xcc>
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	b218      	sxth	r0, r3
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	b219      	sxth	r1, r3
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	b21a      	sxth	r2, r3
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	b21c      	sxth	r4, r3
 8009fb0:	88fb      	ldrh	r3, [r7, #6]
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	4623      	mov	r3, r4
 8009fb6:	f7ff f943 	bl	8009240 <drawLine>
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	3306      	adds	r3, #6
 8009fbe:	61fb      	str	r3, [r7, #28]
 8009fc0:	69fa      	ldr	r2, [r7, #28]
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	dbeb      	blt.n	8009fa0 <testLines+0xac>
    x2    = 0;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8009fcc:	2300      	movs	r3, #0
 8009fce:	61bb      	str	r3, [r7, #24]
 8009fd0:	e00f      	b.n	8009ff2 <testLines+0xfe>
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	b218      	sxth	r0, r3
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	b219      	sxth	r1, r3
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	b21a      	sxth	r2, r3
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	b21c      	sxth	r4, r3
 8009fe2:	88fb      	ldrh	r3, [r7, #6]
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	4623      	mov	r3, r4
 8009fe8:	f7ff f92a 	bl	8009240 <drawLine>
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	3306      	adds	r3, #6
 8009ff0:	61bb      	str	r3, [r7, #24]
 8009ff2:	69ba      	ldr	r2, [r7, #24]
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	dbeb      	blt.n	8009fd2 <testLines+0xde>

    fillScreen(BLACK);
 8009ffa:	2000      	movs	r0, #0
 8009ffc:	f7ff ff60 	bl	8009ec0 <fillScreen>

    x1    = 0;
 800a000:	2300      	movs	r3, #0
 800a002:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	3b01      	subs	r3, #1
 800a008:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 800a00a:	2300      	movs	r3, #0
 800a00c:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 800a00e:	2300      	movs	r3, #0
 800a010:	61fb      	str	r3, [r7, #28]
 800a012:	e00f      	b.n	800a034 <testLines+0x140>
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	b218      	sxth	r0, r3
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	b219      	sxth	r1, r3
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	b21a      	sxth	r2, r3
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	b21c      	sxth	r4, r3
 800a024:	88fb      	ldrh	r3, [r7, #6]
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	4623      	mov	r3, r4
 800a02a:	f7ff f909 	bl	8009240 <drawLine>
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	3306      	adds	r3, #6
 800a032:	61fb      	str	r3, [r7, #28]
 800a034:	69fa      	ldr	r2, [r7, #28]
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	429a      	cmp	r2, r3
 800a03a:	dbeb      	blt.n	800a014 <testLines+0x120>
    x2    = w - 1;
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	3b01      	subs	r3, #1
 800a040:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 800a042:	2300      	movs	r3, #0
 800a044:	61bb      	str	r3, [r7, #24]
 800a046:	e00f      	b.n	800a068 <testLines+0x174>
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	b218      	sxth	r0, r3
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	b219      	sxth	r1, r3
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	b21a      	sxth	r2, r3
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	b21c      	sxth	r4, r3
 800a058:	88fb      	ldrh	r3, [r7, #6]
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	4623      	mov	r3, r4
 800a05e:	f7ff f8ef 	bl	8009240 <drawLine>
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	3306      	adds	r3, #6
 800a066:	61bb      	str	r3, [r7, #24]
 800a068:	69ba      	ldr	r2, [r7, #24]
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	dbeb      	blt.n	800a048 <testLines+0x154>

    fillScreen(BLACK);
 800a070:	2000      	movs	r0, #0
 800a072:	f7ff ff25 	bl	8009ec0 <fillScreen>

    x1    = w - 1;
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	3b01      	subs	r3, #1
 800a07a:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	3b01      	subs	r3, #1
 800a080:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 800a082:	2300      	movs	r3, #0
 800a084:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 800a086:	2300      	movs	r3, #0
 800a088:	61fb      	str	r3, [r7, #28]
 800a08a:	e00f      	b.n	800a0ac <testLines+0x1b8>
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	b218      	sxth	r0, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	b219      	sxth	r1, r3
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	b21a      	sxth	r2, r3
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	b21c      	sxth	r4, r3
 800a09c:	88fb      	ldrh	r3, [r7, #6]
 800a09e:	9300      	str	r3, [sp, #0]
 800a0a0:	4623      	mov	r3, r4
 800a0a2:	f7ff f8cd 	bl	8009240 <drawLine>
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	3306      	adds	r3, #6
 800a0aa:	61fb      	str	r3, [r7, #28]
 800a0ac:	69fa      	ldr	r2, [r7, #28]
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	dbeb      	blt.n	800a08c <testLines+0x198>
    x2    = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	61bb      	str	r3, [r7, #24]
 800a0bc:	e00f      	b.n	800a0de <testLines+0x1ea>
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	b218      	sxth	r0, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	b219      	sxth	r1, r3
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	b21a      	sxth	r2, r3
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	b21c      	sxth	r4, r3
 800a0ce:	88fb      	ldrh	r3, [r7, #6]
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	4623      	mov	r3, r4
 800a0d4:	f7ff f8b4 	bl	8009240 <drawLine>
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	3306      	adds	r3, #6
 800a0dc:	61bb      	str	r3, [r7, #24]
 800a0de:	69ba      	ldr	r2, [r7, #24]
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	dbeb      	blt.n	800a0be <testLines+0x1ca>

}
 800a0e6:	bf00      	nop
 800a0e8:	bf00      	nop
 800a0ea:	3724      	adds	r7, #36	@ 0x24
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd90      	pop	{r4, r7, pc}
 800a0f0:	20000210 	.word	0x20000210
 800a0f4:	20000212 	.word	0x20000212

0800a0f8 <testFastLines>:

void testFastLines(uint16_t color1, uint16_t color2)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	4603      	mov	r3, r0
 800a100:	460a      	mov	r2, r1
 800a102:	80fb      	strh	r3, [r7, #6]
 800a104:	4613      	mov	r3, r2
 800a106:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 800a108:	4b19      	ldr	r3, [pc, #100]	@ (800a170 <testFastLines+0x78>)
 800a10a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a10e:	60fb      	str	r3, [r7, #12]
 800a110:	4b18      	ldr	r3, [pc, #96]	@ (800a174 <testFastLines+0x7c>)
 800a112:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a116:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 800a118:	2000      	movs	r0, #0
 800a11a:	f7ff fed1 	bl	8009ec0 <fillScreen>
    for (y = 0; y < h; y += 5) drawFastHLine(0, y, w, color1);
 800a11e:	2300      	movs	r3, #0
 800a120:	613b      	str	r3, [r7, #16]
 800a122:	e00a      	b.n	800a13a <testFastLines+0x42>
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	b219      	sxth	r1, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	b21a      	sxth	r2, r3
 800a12c:	88fb      	ldrh	r3, [r7, #6]
 800a12e:	2000      	movs	r0, #0
 800a130:	f7ff f861 	bl	80091f6 <drawFastHLine>
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	3305      	adds	r3, #5
 800a138:	613b      	str	r3, [r7, #16]
 800a13a:	693a      	ldr	r2, [r7, #16]
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	429a      	cmp	r2, r3
 800a140:	dbf0      	blt.n	800a124 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) drawFastVLine(x, 0, h, color2);
 800a142:	2300      	movs	r3, #0
 800a144:	617b      	str	r3, [r7, #20]
 800a146:	e00a      	b.n	800a15e <testFastLines+0x66>
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	b218      	sxth	r0, r3
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	b21a      	sxth	r2, r3
 800a150:	88bb      	ldrh	r3, [r7, #4]
 800a152:	2100      	movs	r1, #0
 800a154:	f7ff f82a 	bl	80091ac <drawFastVLine>
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	3305      	adds	r3, #5
 800a15c:	617b      	str	r3, [r7, #20]
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	429a      	cmp	r2, r3
 800a164:	dbf0      	blt.n	800a148 <testFastLines+0x50>
}
 800a166:	bf00      	nop
 800a168:	bf00      	nop
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	20000210 	.word	0x20000210
 800a174:	20000212 	.word	0x20000212

0800a178 <testRects>:

void testRects(uint16_t color)
{
 800a178:	b590      	push	{r4, r7, lr}
 800a17a:	b08b      	sub	sp, #44	@ 0x2c
 800a17c:	af02      	add	r7, sp, #8
 800a17e:	4603      	mov	r3, r0
 800a180:	80fb      	strh	r3, [r7, #6]
    int           n, i, i2,
                  cx = _width  / 2,
 800a182:	4b24      	ldr	r3, [pc, #144]	@ (800a214 <testRects+0x9c>)
 800a184:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a188:	0fda      	lsrs	r2, r3, #31
 800a18a:	4413      	add	r3, r2
 800a18c:	105b      	asrs	r3, r3, #1
 800a18e:	b21b      	sxth	r3, r3
 800a190:	61bb      	str	r3, [r7, #24]
                  cy = _height / 2;
 800a192:	4b21      	ldr	r3, [pc, #132]	@ (800a218 <testRects+0xa0>)
 800a194:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a198:	0fda      	lsrs	r2, r3, #31
 800a19a:	4413      	add	r3, r2
 800a19c:	105b      	asrs	r3, r3, #1
 800a19e:	b21b      	sxth	r3, r3
 800a1a0:	617b      	str	r3, [r7, #20]

    fillScreen(BLACK);
 800a1a2:	2000      	movs	r0, #0
 800a1a4:	f7ff fe8c 	bl	8009ec0 <fillScreen>
    n     = min(_width, _height);
 800a1a8:	4b1b      	ldr	r3, [pc, #108]	@ (800a218 <testRects+0xa0>)
 800a1aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a1ae:	4b19      	ldr	r3, [pc, #100]	@ (800a214 <testRects+0x9c>)
 800a1b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	bfa8      	it	ge
 800a1b8:	4613      	movge	r3, r2
 800a1ba:	b21b      	sxth	r3, r3
 800a1bc:	613b      	str	r3, [r7, #16]
    for (i = 2; i < n; i += 6) {
 800a1be:	2302      	movs	r3, #2
 800a1c0:	61fb      	str	r3, [r7, #28]
 800a1c2:	e01e      	b.n	800a202 <testRects+0x8a>
        i2 = i / 2;
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	0fda      	lsrs	r2, r3, #31
 800a1c8:	4413      	add	r3, r2
 800a1ca:	105b      	asrs	r3, r3, #1
 800a1cc:	60fb      	str	r3, [r7, #12]
        drawRect(cx - i2, cy - i2, i, i, color);
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	b218      	sxth	r0, r3
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	b219      	sxth	r1, r3
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	b21a      	sxth	r2, r3
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	b21c      	sxth	r4, r3
 800a1f2:	88fb      	ldrh	r3, [r7, #6]
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	4623      	mov	r3, r4
 800a1f8:	f7ff fb42 	bl	8009880 <drawRect>
    for (i = 2; i < n; i += 6) {
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	3306      	adds	r3, #6
 800a200:	61fb      	str	r3, [r7, #28]
 800a202:	69fa      	ldr	r2, [r7, #28]
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	429a      	cmp	r2, r3
 800a208:	dbdc      	blt.n	800a1c4 <testRects+0x4c>
    }

}
 800a20a:	bf00      	nop
 800a20c:	bf00      	nop
 800a20e:	3724      	adds	r7, #36	@ 0x24
 800a210:	46bd      	mov	sp, r7
 800a212:	bd90      	pop	{r4, r7, pc}
 800a214:	20000210 	.word	0x20000210
 800a218:	20000212 	.word	0x20000212

0800a21c <testFilledRects>:

void testFilledRects(uint16_t color1, uint16_t color2)
{
 800a21c:	b590      	push	{r4, r7, lr}
 800a21e:	b08b      	sub	sp, #44	@ 0x2c
 800a220:	af02      	add	r7, sp, #8
 800a222:	4603      	mov	r3, r0
 800a224:	460a      	mov	r2, r1
 800a226:	80fb      	strh	r3, [r7, #6]
 800a228:	4613      	mov	r3, r2
 800a22a:	80bb      	strh	r3, [r7, #4]
    int           n, i, i2,
                  cx = _width  / 2 - 1,
 800a22c:	4b30      	ldr	r3, [pc, #192]	@ (800a2f0 <testFilledRects+0xd4>)
 800a22e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a232:	0fda      	lsrs	r2, r3, #31
 800a234:	4413      	add	r3, r2
 800a236:	105b      	asrs	r3, r3, #1
 800a238:	b21b      	sxth	r3, r3
 800a23a:	3b01      	subs	r3, #1
 800a23c:	61bb      	str	r3, [r7, #24]
                  cy = _height / 2 - 1;
 800a23e:	4b2d      	ldr	r3, [pc, #180]	@ (800a2f4 <testFilledRects+0xd8>)
 800a240:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a244:	0fda      	lsrs	r2, r3, #31
 800a246:	4413      	add	r3, r2
 800a248:	105b      	asrs	r3, r3, #1
 800a24a:	b21b      	sxth	r3, r3
 800a24c:	3b01      	subs	r3, #1
 800a24e:	617b      	str	r3, [r7, #20]

    fillScreen(BLACK);
 800a250:	2000      	movs	r0, #0
 800a252:	f7ff fe35 	bl	8009ec0 <fillScreen>
    n = min(_width, _height);
 800a256:	4b27      	ldr	r3, [pc, #156]	@ (800a2f4 <testFilledRects+0xd8>)
 800a258:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a25c:	4b24      	ldr	r3, [pc, #144]	@ (800a2f0 <testFilledRects+0xd4>)
 800a25e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a262:	4293      	cmp	r3, r2
 800a264:	bfa8      	it	ge
 800a266:	4613      	movge	r3, r2
 800a268:	b21b      	sxth	r3, r3
 800a26a:	613b      	str	r3, [r7, #16]
    for (i = n; i > 0; i -= 6) {
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	61fb      	str	r3, [r7, #28]
 800a270:	e035      	b.n	800a2de <testFilledRects+0xc2>
        i2    = i / 2;
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	0fda      	lsrs	r2, r3, #31
 800a276:	4413      	add	r3, r2
 800a278:	105b      	asrs	r3, r3, #1
 800a27a:	60fb      	str	r3, [r7, #12]

        fillRect(cx - i2, cy - i2, i, i, color1);
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	b29a      	uxth	r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	b29b      	uxth	r3, r3
 800a284:	1ad3      	subs	r3, r2, r3
 800a286:	b29b      	uxth	r3, r3
 800a288:	b218      	sxth	r0, r3
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	b29b      	uxth	r3, r3
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	b29b      	uxth	r3, r3
 800a296:	b219      	sxth	r1, r3
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	b21a      	sxth	r2, r3
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	b21c      	sxth	r4, r3
 800a2a0:	88fb      	ldrh	r3, [r7, #6]
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	4623      	mov	r3, r4
 800a2a6:	f7fe feae 	bl	8009006 <fillRect>

        drawRect(cx - i2, cy - i2, i, i, color2);
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	1ad3      	subs	r3, r2, r3
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	b218      	sxth	r0, r3
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	b219      	sxth	r1, r3
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	b21a      	sxth	r2, r3
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	b21c      	sxth	r4, r3
 800a2ce:	88bb      	ldrh	r3, [r7, #4]
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	4623      	mov	r3, r4
 800a2d4:	f7ff fad4 	bl	8009880 <drawRect>
    for (i = n; i > 0; i -= 6) {
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	3b06      	subs	r3, #6
 800a2dc:	61fb      	str	r3, [r7, #28]
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	dcc6      	bgt.n	800a272 <testFilledRects+0x56>
    }
}
 800a2e4:	bf00      	nop
 800a2e6:	bf00      	nop
 800a2e8:	3724      	adds	r7, #36	@ 0x24
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd90      	pop	{r4, r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20000210 	.word	0x20000210
 800a2f4:	20000212 	.word	0x20000212

0800a2f8 <testFilledCircles>:

void testFilledCircles(uint8_t radius, uint16_t color)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b088      	sub	sp, #32
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	460a      	mov	r2, r1
 800a302:	71fb      	strb	r3, [r7, #7]
 800a304:	4613      	mov	r3, r2
 800a306:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 800a308:	4b18      	ldr	r3, [pc, #96]	@ (800a36c <testFilledCircles+0x74>)
 800a30a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a30e:	617b      	str	r3, [r7, #20]
 800a310:	4b17      	ldr	r3, [pc, #92]	@ (800a370 <testFilledCircles+0x78>)
 800a312:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a316:	613b      	str	r3, [r7, #16]
 800a318:	79fb      	ldrb	r3, [r7, #7]
 800a31a:	005b      	lsls	r3, r3, #1
 800a31c:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 800a31e:	2000      	movs	r0, #0
 800a320:	f7ff fdce 	bl	8009ec0 <fillScreen>
    for (x = radius; x < w; x += r2) {
 800a324:	79fb      	ldrb	r3, [r7, #7]
 800a326:	61fb      	str	r3, [r7, #28]
 800a328:	e017      	b.n	800a35a <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 800a32a:	79fb      	ldrb	r3, [r7, #7]
 800a32c:	61bb      	str	r3, [r7, #24]
 800a32e:	e00c      	b.n	800a34a <testFilledCircles+0x52>
            fillCircle(x, y, radius, color);
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	b218      	sxth	r0, r3
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	b219      	sxth	r1, r3
 800a338:	79fb      	ldrb	r3, [r7, #7]
 800a33a:	b21a      	sxth	r2, r3
 800a33c:	88bb      	ldrh	r3, [r7, #4]
 800a33e:	f7ff fa6f 	bl	8009820 <fillCircle>
        for (y = radius; y < h; y += r2) {
 800a342:	69ba      	ldr	r2, [r7, #24]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	4413      	add	r3, r2
 800a348:	61bb      	str	r3, [r7, #24]
 800a34a:	69ba      	ldr	r2, [r7, #24]
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	429a      	cmp	r2, r3
 800a350:	dbee      	blt.n	800a330 <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 800a352:	69fa      	ldr	r2, [r7, #28]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	4413      	add	r3, r2
 800a358:	61fb      	str	r3, [r7, #28]
 800a35a:	69fa      	ldr	r2, [r7, #28]
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	429a      	cmp	r2, r3
 800a360:	dbe3      	blt.n	800a32a <testFilledCircles+0x32>
        }
    }

}
 800a362:	bf00      	nop
 800a364:	bf00      	nop
 800a366:	3720      	adds	r7, #32
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	20000210 	.word	0x20000210
 800a370:	20000212 	.word	0x20000212

0800a374 <testCircles>:

void testCircles(uint8_t radius, uint16_t color)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b088      	sub	sp, #32
 800a378:	af00      	add	r7, sp, #0
 800a37a:	4603      	mov	r3, r0
 800a37c:	460a      	mov	r2, r1
 800a37e:	71fb      	strb	r3, [r7, #7]
 800a380:	4613      	mov	r3, r2
 800a382:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 800a384:	79fb      	ldrb	r3, [r7, #7]
 800a386:	005b      	lsls	r3, r3, #1
 800a388:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 800a38a:	4b19      	ldr	r3, [pc, #100]	@ (800a3f0 <testCircles+0x7c>)
 800a38c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a390:	461a      	mov	r2, r3
 800a392:	79fb      	ldrb	r3, [r7, #7]
 800a394:	4413      	add	r3, r2
 800a396:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 800a398:	4b16      	ldr	r3, [pc, #88]	@ (800a3f4 <testCircles+0x80>)
 800a39a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	79fb      	ldrb	r3, [r7, #7]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	60fb      	str	r3, [r7, #12]

    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	61fb      	str	r3, [r7, #28]
 800a3aa:	e017      	b.n	800a3dc <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	61bb      	str	r3, [r7, #24]
 800a3b0:	e00c      	b.n	800a3cc <testCircles+0x58>
            drawCircle(x, y, radius, color);
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	b218      	sxth	r0, r3
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	b219      	sxth	r1, r3
 800a3ba:	79fb      	ldrb	r3, [r7, #7]
 800a3bc:	b21a      	sxth	r2, r3
 800a3be:	88bb      	ldrh	r3, [r7, #4]
 800a3c0:	f7fe ffa0 	bl	8009304 <drawCircle>
        for (y = 0; y < h; y += r2) {
 800a3c4:	69ba      	ldr	r2, [r7, #24]
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	61bb      	str	r3, [r7, #24]
 800a3cc:	69ba      	ldr	r2, [r7, #24]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	dbee      	blt.n	800a3b2 <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 800a3d4:	69fa      	ldr	r2, [r7, #28]
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	4413      	add	r3, r2
 800a3da:	61fb      	str	r3, [r7, #28]
 800a3dc:	69fa      	ldr	r2, [r7, #28]
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	dbe3      	blt.n	800a3ac <testCircles+0x38>
        }
    }

}
 800a3e4:	bf00      	nop
 800a3e6:	bf00      	nop
 800a3e8:	3720      	adds	r7, #32
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20000210 	.word	0x20000210
 800a3f4:	20000212 	.word	0x20000212

0800a3f8 <testTriangles>:

void testTriangles()
{
 800a3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3fa:	b089      	sub	sp, #36	@ 0x24
 800a3fc:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 800a3fe:	4b2e      	ldr	r3, [pc, #184]	@ (800a4b8 <testTriangles+0xc0>)
 800a400:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a404:	0fda      	lsrs	r2, r3, #31
 800a406:	4413      	add	r3, r2
 800a408:	105b      	asrs	r3, r3, #1
 800a40a:	b21b      	sxth	r3, r3
 800a40c:	3b01      	subs	r3, #1
 800a40e:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 800a410:	4b2a      	ldr	r3, [pc, #168]	@ (800a4bc <testTriangles+0xc4>)
 800a412:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a416:	0fda      	lsrs	r2, r3, #31
 800a418:	4413      	add	r3, r2
 800a41a:	105b      	asrs	r3, r3, #1
 800a41c:	b21b      	sxth	r3, r3
 800a41e:	3b01      	subs	r3, #1
 800a420:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 800a422:	2000      	movs	r0, #0
 800a424:	f7ff fd4c 	bl	8009ec0 <fillScreen>
    n     = min(cx, cy);
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	4293      	cmp	r3, r2
 800a42e:	bfa8      	it	ge
 800a430:	4613      	movge	r3, r2
 800a432:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 800a434:	2300      	movs	r3, #0
 800a436:	60fb      	str	r3, [r7, #12]
 800a438:	e035      	b.n	800a4a6 <testTriangles+0xae>
        drawTriangle(
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	b29a      	uxth	r2, r3
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	b29b      	uxth	r3, r3
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	b29b      	uxth	r3, r3
        drawTriangle(
 800a44a:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	b29a      	uxth	r2, r3
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	b29b      	uxth	r3, r3
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	b29b      	uxth	r3, r3
        drawTriangle(
 800a458:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	b29b      	uxth	r3, r3
 800a462:	4413      	add	r3, r2
 800a464:	b29b      	uxth	r3, r3
        drawTriangle(
 800a466:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	b29a      	uxth	r2, r3
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	b29b      	uxth	r3, r3
 800a470:	4413      	add	r3, r2
 800a472:	b29b      	uxth	r3, r3
        drawTriangle(
 800a474:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	b291      	uxth	r1, r2
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	b292      	uxth	r2, r2
 800a47e:	440a      	add	r2, r1
 800a480:	b292      	uxth	r2, r2
        drawTriangle(
 800a482:	b212      	sxth	r2, r2
            color565(0, 0, i));
 800a484:	68f9      	ldr	r1, [r7, #12]
 800a486:	10c9      	asrs	r1, r1, #3
 800a488:	b289      	uxth	r1, r1
        drawTriangle(
 800a48a:	f001 011f 	and.w	r1, r1, #31
 800a48e:	b289      	uxth	r1, r1
 800a490:	9102      	str	r1, [sp, #8]
 800a492:	9201      	str	r2, [sp, #4]
 800a494:	9300      	str	r3, [sp, #0]
 800a496:	4633      	mov	r3, r6
 800a498:	462a      	mov	r2, r5
 800a49a:	4621      	mov	r1, r4
 800a49c:	f7ff fb77 	bl	8009b8e <drawTriangle>
    for (i = 0; i < n; i += 5) {
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	3305      	adds	r3, #5
 800a4a4:	60fb      	str	r3, [r7, #12]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	dbc5      	blt.n	800a43a <testTriangles+0x42>
    }

}
 800a4ae:	bf00      	nop
 800a4b0:	bf00      	nop
 800a4b2:	3714      	adds	r7, #20
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4b8:	20000210 	.word	0x20000210
 800a4bc:	20000212 	.word	0x20000212

0800a4c0 <testFilledTriangles>:

void testFilledTriangles() {
 800a4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4c2:	b089      	sub	sp, #36	@ 0x24
 800a4c4:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 800a4c6:	4b54      	ldr	r3, [pc, #336]	@ (800a618 <testFilledTriangles+0x158>)
 800a4c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4cc:	0fda      	lsrs	r2, r3, #31
 800a4ce:	4413      	add	r3, r2
 800a4d0:	105b      	asrs	r3, r3, #1
 800a4d2:	b21b      	sxth	r3, r3
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 800a4d8:	4b50      	ldr	r3, [pc, #320]	@ (800a61c <testFilledTriangles+0x15c>)
 800a4da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4de:	0fda      	lsrs	r2, r3, #31
 800a4e0:	4413      	add	r3, r2
 800a4e2:	105b      	asrs	r3, r3, #1
 800a4e4:	b21b      	sxth	r3, r3
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	f7ff fce8 	bl	8009ec0 <fillScreen>
    for (i = min(cx, cy); i > 10; i -= 5) {
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	bfa8      	it	ge
 800a4f8:	4613      	movge	r3, r2
 800a4fa:	60fb      	str	r3, [r7, #12]
 800a4fc:	e083      	b.n	800a606 <testFilledTriangles+0x146>
    	fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	b21c      	sxth	r4, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	b29a      	uxth	r2, r3
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	b29b      	uxth	r3, r3
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	b21d      	sxth	r5, r3
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	b29a      	uxth	r2, r3
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	b29b      	uxth	r3, r3
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	b21e      	sxth	r6, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	b29a      	uxth	r2, r3
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	b29b      	uxth	r3, r3
 800a526:	4413      	add	r3, r2
 800a528:	b29b      	uxth	r3, r3
 800a52a:	fa0f fc83 	sxth.w	ip, r3
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	b29a      	uxth	r2, r3
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	b29b      	uxth	r3, r3
 800a536:	4413      	add	r3, r2
 800a538:	b29b      	uxth	r3, r3
 800a53a:	b21b      	sxth	r3, r3
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	b291      	uxth	r1, r2
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	b292      	uxth	r2, r2
 800a544:	440a      	add	r2, r1
 800a546:	b292      	uxth	r2, r2
 800a548:	b212      	sxth	r2, r2
    	                         color565(0, i, i));
 800a54a:	68f9      	ldr	r1, [r7, #12]
 800a54c:	b209      	sxth	r1, r1
 800a54e:	00c9      	lsls	r1, r1, #3
 800a550:	b209      	sxth	r1, r1
 800a552:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 800a556:	b208      	sxth	r0, r1
 800a558:	68f9      	ldr	r1, [r7, #12]
 800a55a:	10c9      	asrs	r1, r1, #3
 800a55c:	b209      	sxth	r1, r1
 800a55e:	f001 011f 	and.w	r1, r1, #31
 800a562:	b209      	sxth	r1, r1
 800a564:	4301      	orrs	r1, r0
 800a566:	b209      	sxth	r1, r1
    	fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 800a568:	b289      	uxth	r1, r1
 800a56a:	9102      	str	r1, [sp, #8]
 800a56c:	9201      	str	r2, [sp, #4]
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	4663      	mov	r3, ip
 800a572:	4632      	mov	r2, r6
 800a574:	4629      	mov	r1, r5
 800a576:	4620      	mov	r0, r4
 800a578:	f7ff fb43 	bl	8009c02 <fillTriangle>
    	drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	b21c      	sxth	r4, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	b29a      	uxth	r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	b29b      	uxth	r3, r3
 800a588:	1ad3      	subs	r3, r2, r3
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	b21d      	sxth	r5, r3
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	b29a      	uxth	r2, r3
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	b29b      	uxth	r3, r3
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	b29b      	uxth	r3, r3
 800a59a:	b21e      	sxth	r6, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	4413      	add	r3, r2
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	fa0f fc83 	sxth.w	ip, r3
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	4413      	add	r3, r2
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	b21a      	sxth	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	b299      	uxth	r1, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	440b      	add	r3, r1
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	b219      	sxth	r1, r3
    	                         color565(i, i, 0));
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	b21b      	sxth	r3, r3
 800a5cc:	021b      	lsls	r3, r3, #8
 800a5ce:	b21b      	sxth	r3, r3
 800a5d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a5d4:	f023 0307 	bic.w	r3, r3, #7
 800a5d8:	b218      	sxth	r0, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	b21b      	sxth	r3, r3
 800a5de:	00db      	lsls	r3, r3, #3
 800a5e0:	b21b      	sxth	r3, r3
 800a5e2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800a5e6:	b21b      	sxth	r3, r3
 800a5e8:	4303      	orrs	r3, r0
 800a5ea:	b21b      	sxth	r3, r3
    	drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	9302      	str	r3, [sp, #8]
 800a5f0:	9101      	str	r1, [sp, #4]
 800a5f2:	9200      	str	r2, [sp, #0]
 800a5f4:	4663      	mov	r3, ip
 800a5f6:	4632      	mov	r2, r6
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f7ff fac7 	bl	8009b8e <drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	3b05      	subs	r3, #5
 800a604:	60fb      	str	r3, [r7, #12]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2b0a      	cmp	r3, #10
 800a60a:	f73f af78 	bgt.w	800a4fe <testFilledTriangles+0x3e>
    }
}
 800a60e:	bf00      	nop
 800a610:	bf00      	nop
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a618:	20000210 	.word	0x20000210
 800a61c:	20000212 	.word	0x20000212

0800a620 <testRoundRects>:

void testRoundRects() {
 800a620:	b5b0      	push	{r4, r5, r7, lr}
 800a622:	b08a      	sub	sp, #40	@ 0x28
 800a624:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 800a626:	4b33      	ldr	r3, [pc, #204]	@ (800a6f4 <testRoundRects+0xd4>)
 800a628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a62c:	0fda      	lsrs	r2, r3, #31
 800a62e:	4413      	add	r3, r2
 800a630:	105b      	asrs	r3, r3, #1
 800a632:	b21b      	sxth	r3, r3
 800a634:	3b01      	subs	r3, #1
 800a636:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 800a638:	4b2f      	ldr	r3, [pc, #188]	@ (800a6f8 <testRoundRects+0xd8>)
 800a63a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a63e:	0fda      	lsrs	r2, r3, #31
 800a640:	4413      	add	r3, r2
 800a642:	105b      	asrs	r3, r3, #1
 800a644:	b21b      	sxth	r3, r3
 800a646:	3b01      	subs	r3, #1
 800a648:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 800a64a:	2000      	movs	r0, #0
 800a64c:	f7ff fc38 	bl	8009ec0 <fillScreen>
    w     = min(_width, _height);
 800a650:	4b29      	ldr	r3, [pc, #164]	@ (800a6f8 <testRoundRects+0xd8>)
 800a652:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a656:	4b27      	ldr	r3, [pc, #156]	@ (800a6f4 <testRoundRects+0xd4>)
 800a658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a65c:	4293      	cmp	r3, r2
 800a65e:	bfa8      	it	ge
 800a660:	4613      	movge	r3, r2
 800a662:	b21b      	sxth	r3, r3
 800a664:	60fb      	str	r3, [r7, #12]
    red = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 800a66a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	fb92 f3f3 	sdiv	r3, r2, r3
 800a674:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 800a676:	2300      	movs	r3, #0
 800a678:	61fb      	str	r3, [r7, #28]
 800a67a:	e032      	b.n	800a6e2 <testRoundRects+0xc2>
        i2 = i / 2;
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	0fda      	lsrs	r2, r3, #31
 800a680:	4413      	add	r3, r2
 800a682:	105b      	asrs	r3, r3, #1
 800a684:	607b      	str	r3, [r7, #4]
        red += step;
 800a686:	69ba      	ldr	r2, [r7, #24]
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	4413      	add	r3, r2
 800a68c:	61bb      	str	r3, [r7, #24]
        drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	b29a      	uxth	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	b29b      	uxth	r3, r3
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	b29b      	uxth	r3, r3
 800a69a:	b218      	sxth	r0, r3
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	b219      	sxth	r1, r3
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	b21c      	sxth	r4, r3
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	b21d      	sxth	r5, r3
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	da00      	bge.n	800a6ba <testRoundRects+0x9a>
 800a6b8:	3307      	adds	r3, #7
 800a6ba:	10db      	asrs	r3, r3, #3
 800a6bc:	b21a      	sxth	r2, r3
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	021b      	lsls	r3, r3, #8
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a6ca:	f023 0307 	bic.w	r3, r3, #7
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	9301      	str	r3, [sp, #4]
 800a6d2:	9200      	str	r2, [sp, #0]
 800a6d4:	462b      	mov	r3, r5
 800a6d6:	4622      	mov	r2, r4
 800a6d8:	f7ff f913 	bl	8009902 <drawRoundRect>
    for (i = 0; i < w; i += 6) {
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	3306      	adds	r3, #6
 800a6e0:	61fb      	str	r3, [r7, #28]
 800a6e2:	69fa      	ldr	r2, [r7, #28]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	dbc8      	blt.n	800a67c <testRoundRects+0x5c>
    }

}
 800a6ea:	bf00      	nop
 800a6ec:	bf00      	nop
 800a6ee:	3720      	adds	r7, #32
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bdb0      	pop	{r4, r5, r7, pc}
 800a6f4:	20000210 	.word	0x20000210
 800a6f8:	20000212 	.word	0x20000212

0800a6fc <testFilledRoundRects>:

void testFilledRoundRects() {
 800a6fc:	b5b0      	push	{r4, r5, r7, lr}
 800a6fe:	b088      	sub	sp, #32
 800a700:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 800a702:	4b36      	ldr	r3, [pc, #216]	@ (800a7dc <testFilledRoundRects+0xe0>)
 800a704:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a708:	0fda      	lsrs	r2, r3, #31
 800a70a:	4413      	add	r3, r2
 800a70c:	105b      	asrs	r3, r3, #1
 800a70e:	b21b      	sxth	r3, r3
 800a710:	3b01      	subs	r3, #1
 800a712:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 800a714:	4b32      	ldr	r3, [pc, #200]	@ (800a7e0 <testFilledRoundRects+0xe4>)
 800a716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a71a:	0fda      	lsrs	r2, r3, #31
 800a71c:	4413      	add	r3, r2
 800a71e:	105b      	asrs	r3, r3, #1
 800a720:	b21b      	sxth	r3, r3
 800a722:	3b01      	subs	r3, #1
 800a724:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 800a726:	2000      	movs	r0, #0
 800a728:	f7ff fbca 	bl	8009ec0 <fillScreen>
    green = 256;
 800a72c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a730:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 800a732:	4b2b      	ldr	r3, [pc, #172]	@ (800a7e0 <testFilledRoundRects+0xe4>)
 800a734:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a738:	4b28      	ldr	r3, [pc, #160]	@ (800a7dc <testFilledRoundRects+0xe0>)
 800a73a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a73e:	4293      	cmp	r3, r2
 800a740:	bfa8      	it	ge
 800a742:	4613      	movge	r3, r2
 800a744:	b21b      	sxth	r3, r3
 800a746:	461a      	mov	r2, r3
 800a748:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800a74c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a750:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 800a752:	4b23      	ldr	r3, [pc, #140]	@ (800a7e0 <testFilledRoundRects+0xe4>)
 800a754:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a758:	4b20      	ldr	r3, [pc, #128]	@ (800a7dc <testFilledRoundRects+0xe0>)
 800a75a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a75e:	4293      	cmp	r3, r2
 800a760:	bfa8      	it	ge
 800a762:	4613      	movge	r3, r2
 800a764:	b21b      	sxth	r3, r3
 800a766:	617b      	str	r3, [r7, #20]
 800a768:	e030      	b.n	800a7cc <testFilledRoundRects+0xd0>
        i2 = i / 2;
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	0fda      	lsrs	r2, r3, #31
 800a76e:	4413      	add	r3, r2
 800a770:	105b      	asrs	r3, r3, #1
 800a772:	603b      	str	r3, [r7, #0]
        green -= step;
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	1ad3      	subs	r3, r2, r3
 800a77a:	613b      	str	r3, [r7, #16]
        fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	b29a      	uxth	r2, r3
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	b29b      	uxth	r3, r3
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	b29b      	uxth	r3, r3
 800a788:	b218      	sxth	r0, r3
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	b29b      	uxth	r3, r3
 800a792:	1ad3      	subs	r3, r2, r3
 800a794:	b29b      	uxth	r3, r3
 800a796:	b219      	sxth	r1, r3
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	b21c      	sxth	r4, r3
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	b21d      	sxth	r5, r3
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	da00      	bge.n	800a7a8 <testFilledRoundRects+0xac>
 800a7a6:	3307      	adds	r3, #7
 800a7a8:	10db      	asrs	r3, r3, #3
 800a7aa:	b21b      	sxth	r3, r3
 800a7ac:	693a      	ldr	r2, [r7, #16]
 800a7ae:	b292      	uxth	r2, r2
 800a7b0:	00d2      	lsls	r2, r2, #3
 800a7b2:	b292      	uxth	r2, r2
 800a7b4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 800a7b8:	b292      	uxth	r2, r2
 800a7ba:	9201      	str	r2, [sp, #4]
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	462b      	mov	r3, r5
 800a7c0:	4622      	mov	r2, r4
 800a7c2:	f7ff f96b 	bl	8009a9c <fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	3b06      	subs	r3, #6
 800a7ca:	617b      	str	r3, [r7, #20]
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	2b14      	cmp	r3, #20
 800a7d0:	dccb      	bgt.n	800a76a <testFilledRoundRects+0x6e>
    }

}
 800a7d2:	bf00      	nop
 800a7d4:	bf00      	nop
 800a7d6:	3718      	adds	r7, #24
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bdb0      	pop	{r4, r5, r7, pc}
 800a7dc:	20000210 	.word	0x20000210
 800a7e0:	20000212 	.word	0x20000212

0800a7e4 <testFillScreen>:
void testFillScreen()
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	f7ff fb69 	bl	8009ec0 <fillScreen>
    fillScreen(RED);
 800a7ee:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800a7f2:	f7ff fb65 	bl	8009ec0 <fillScreen>
    fillScreen(GREEN);
 800a7f6:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 800a7fa:	f7ff fb61 	bl	8009ec0 <fillScreen>
    fillScreen(BLUE);
 800a7fe:	201f      	movs	r0, #31
 800a800:	f7ff fb5e 	bl	8009ec0 <fillScreen>
    fillScreen(BLACK);
 800a804:	2000      	movs	r0, #0
 800a806:	f7ff fb5b 	bl	8009ec0 <fillScreen>
}
 800a80a:	bf00      	nop
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <testAll>:

void testAll (void)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	af00      	add	r7, sp, #0
	testFillScreen();
 800a812:	f7ff ffe7 	bl	800a7e4 <testFillScreen>
	testLines(CYAN);
 800a816:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 800a81a:	f7ff fb6b 	bl	8009ef4 <testLines>
	testFastLines(RED, BLUE);
 800a81e:	211f      	movs	r1, #31
 800a820:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800a824:	f7ff fc68 	bl	800a0f8 <testFastLines>
	testRects(GREEN);
 800a828:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 800a82c:	f7ff fca4 	bl	800a178 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 800a830:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 800a834:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 800a838:	f7ff fcf0 	bl	800a21c <testFilledRects>
	testFilledCircles(10, MAGENTA);
 800a83c:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 800a840:	200a      	movs	r0, #10
 800a842:	f7ff fd59 	bl	800a2f8 <testFilledCircles>
	testCircles(10, WHITE);
 800a846:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800a84a:	200a      	movs	r0, #10
 800a84c:	f7ff fd92 	bl	800a374 <testCircles>
	testTriangles();
 800a850:	f7ff fdd2 	bl	800a3f8 <testTriangles>
	testFilledTriangles();
 800a854:	f7ff fe34 	bl	800a4c0 <testFilledTriangles>
	testRoundRects();
 800a858:	f7ff fee2 	bl	800a620 <testRoundRects>
	testFilledRoundRects();
 800a85c:	f7ff ff4e 	bl	800a6fc <testFilledRoundRects>
}
 800a860:	bf00      	nop
 800a862:	bd80      	pop	{r7, pc}

0800a864 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 800a864:	b580      	push	{r7, lr}
 800a866:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800a868:	2200      	movs	r2, #0
 800a86a:	2102      	movs	r1, #2
 800a86c:	4802      	ldr	r0, [pc, #8]	@ (800a878 <ST7735_Select+0x14>)
 800a86e:	f004 fdfd 	bl	800f46c <HAL_GPIO_WritePin>
}
 800a872:	bf00      	nop
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	40020000 	.word	0x40020000

0800a87c <ST7735_Unselect>:

void ST7735_Unselect()
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800a880:	2201      	movs	r2, #1
 800a882:	2102      	movs	r1, #2
 800a884:	4802      	ldr	r0, [pc, #8]	@ (800a890 <ST7735_Unselect+0x14>)
 800a886:	f004 fdf1 	bl	800f46c <HAL_GPIO_WritePin>
}
 800a88a:	bf00      	nop
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	40020000 	.word	0x40020000

0800a894 <ST7735_Reset>:

void ST7735_Reset()
{
 800a894:	b580      	push	{r7, lr}
 800a896:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800a898:	2200      	movs	r2, #0
 800a89a:	2110      	movs	r1, #16
 800a89c:	4806      	ldr	r0, [pc, #24]	@ (800a8b8 <ST7735_Reset+0x24>)
 800a89e:	f004 fde5 	bl	800f46c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800a8a2:	2005      	movs	r0, #5
 800a8a4:	f004 fa9e 	bl	800ede4 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	2110      	movs	r1, #16
 800a8ac:	4802      	ldr	r0, [pc, #8]	@ (800a8b8 <ST7735_Reset+0x24>)
 800a8ae:	f004 fddd 	bl	800f46c <HAL_GPIO_WritePin>
}
 800a8b2:	bf00      	nop
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	40020000 	.word	0x40020000

0800a8bc <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	2110      	movs	r1, #16
 800a8ca:	4807      	ldr	r0, [pc, #28]	@ (800a8e8 <ST7735_WriteCommand+0x2c>)
 800a8cc:	f004 fdce 	bl	800f46c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800a8d0:	1df9      	adds	r1, r7, #7
 800a8d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	4804      	ldr	r0, [pc, #16]	@ (800a8ec <ST7735_WriteCommand+0x30>)
 800a8da:	f005 fc80 	bl	80101de <HAL_SPI_Transmit>
}
 800a8de:	bf00      	nop
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	40020800 	.word	0x40020800
 800a8ec:	2000030c 	.word	0x2000030c

0800a8f0 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	2110      	movs	r1, #16
 800a8fe:	4807      	ldr	r0, [pc, #28]	@ (800a91c <ST7735_WriteData+0x2c>)
 800a900:	f004 fdb4 	bl	800f46c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	b29a      	uxth	r2, r3
 800a908:	f04f 33ff 	mov.w	r3, #4294967295
 800a90c:	6879      	ldr	r1, [r7, #4]
 800a90e:	4804      	ldr	r0, [pc, #16]	@ (800a920 <ST7735_WriteData+0x30>)
 800a910:	f005 fc65 	bl	80101de <HAL_SPI_Transmit>
}
 800a914:	bf00      	nop
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	40020800 	.word	0x40020800
 800a920:	2000030c 	.word	0x2000030c

0800a924 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	1c5a      	adds	r2, r3, #1
 800a930:	607a      	str	r2, [r7, #4]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800a936:	e034      	b.n	800a9a2 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	1c5a      	adds	r2, r3, #1
 800a93c:	607a      	str	r2, [r7, #4]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800a942:	7afb      	ldrb	r3, [r7, #11]
 800a944:	4618      	mov	r0, r3
 800a946:	f7ff ffb9 	bl	800a8bc <ST7735_WriteCommand>

        numArgs = *addr++;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	1c5a      	adds	r2, r3, #1
 800a94e:	607a      	str	r2, [r7, #4]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800a954:	7abb      	ldrb	r3, [r7, #10]
 800a956:	b29b      	uxth	r3, r3
 800a958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a95c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800a95e:	7abb      	ldrb	r3, [r7, #10]
 800a960:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a964:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800a966:	7abb      	ldrb	r3, [r7, #10]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d008      	beq.n	800a97e <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800a96c:	7abb      	ldrb	r3, [r7, #10]
 800a96e:	4619      	mov	r1, r3
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f7ff ffbd 	bl	800a8f0 <ST7735_WriteData>
            addr += numArgs;
 800a976:	7abb      	ldrb	r3, [r7, #10]
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	4413      	add	r3, r2
 800a97c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800a97e:	89bb      	ldrh	r3, [r7, #12]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00e      	beq.n	800a9a2 <DisplayInit+0x7e>
            ms = *addr++;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	1c5a      	adds	r2, r3, #1
 800a988:	607a      	str	r2, [r7, #4]
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800a98e:	89bb      	ldrh	r3, [r7, #12]
 800a990:	2bff      	cmp	r3, #255	@ 0xff
 800a992:	d102      	bne.n	800a99a <DisplayInit+0x76>
 800a994:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a998:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800a99a:	89bb      	ldrh	r3, [r7, #12]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f004 fa21 	bl	800ede4 <HAL_Delay>
    while(numCommands--) {
 800a9a2:	7bfb      	ldrb	r3, [r7, #15]
 800a9a4:	1e5a      	subs	r2, r3, #1
 800a9a6:	73fa      	strb	r2, [r7, #15]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1c5      	bne.n	800a938 <DisplayInit+0x14>
        }
    }
}
 800a9ac:	bf00      	nop
 800a9ae:	bf00      	nop
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
	...

0800a9b8 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800a9b8:	b590      	push	{r4, r7, lr}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	4604      	mov	r4, r0
 800a9c0:	4608      	mov	r0, r1
 800a9c2:	4611      	mov	r1, r2
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	4623      	mov	r3, r4
 800a9c8:	71fb      	strb	r3, [r7, #7]
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	71bb      	strb	r3, [r7, #6]
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	717b      	strb	r3, [r7, #5]
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800a9d6:	202a      	movs	r0, #42	@ 0x2a
 800a9d8:	f7ff ff70 	bl	800a8bc <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800a9dc:	2300      	movs	r3, #0
 800a9de:	733b      	strb	r3, [r7, #12]
 800a9e0:	4b17      	ldr	r3, [pc, #92]	@ (800aa40 <ST7735_SetAddressWindow+0x88>)
 800a9e2:	781a      	ldrb	r2, [r3, #0]
 800a9e4:	79fb      	ldrb	r3, [r7, #7]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	737b      	strb	r3, [r7, #13]
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	73bb      	strb	r3, [r7, #14]
 800a9f0:	4b13      	ldr	r3, [pc, #76]	@ (800aa40 <ST7735_SetAddressWindow+0x88>)
 800a9f2:	781a      	ldrb	r2, [r3, #0]
 800a9f4:	797b      	ldrb	r3, [r7, #5]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800a9fc:	f107 030c 	add.w	r3, r7, #12
 800aa00:	2104      	movs	r1, #4
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7ff ff74 	bl	800a8f0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800aa08:	202b      	movs	r0, #43	@ 0x2b
 800aa0a:	f7ff ff57 	bl	800a8bc <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800aa0e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa44 <ST7735_SetAddressWindow+0x8c>)
 800aa10:	781a      	ldrb	r2, [r3, #0]
 800aa12:	79bb      	ldrb	r3, [r7, #6]
 800aa14:	4413      	add	r3, r2
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800aa1a:	4b0a      	ldr	r3, [pc, #40]	@ (800aa44 <ST7735_SetAddressWindow+0x8c>)
 800aa1c:	781a      	ldrb	r2, [r3, #0]
 800aa1e:	793b      	ldrb	r3, [r7, #4]
 800aa20:	4413      	add	r3, r2
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800aa26:	f107 030c 	add.w	r3, r7, #12
 800aa2a:	2104      	movs	r1, #4
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7ff ff5f 	bl	800a8f0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800aa32:	202c      	movs	r0, #44	@ 0x2c
 800aa34:	f7ff ff42 	bl	800a8bc <ST7735_WriteCommand>
}
 800aa38:	bf00      	nop
 800aa3a:	3714      	adds	r7, #20
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd90      	pop	{r4, r7, pc}
 800aa40:	20000217 	.word	0x20000217
 800aa44:	20000218 	.word	0x20000218

0800aa48 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	4603      	mov	r3, r0
 800aa50:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800aa52:	f7ff ff07 	bl	800a864 <ST7735_Select>
    ST7735_Reset();
 800aa56:	f7ff ff1d 	bl	800a894 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800aa5a:	480c      	ldr	r0, [pc, #48]	@ (800aa8c <ST7735_Init+0x44>)
 800aa5c:	f7ff ff62 	bl	800a924 <DisplayInit>
    DisplayInit(init_cmds2);
 800aa60:	480b      	ldr	r0, [pc, #44]	@ (800aa90 <ST7735_Init+0x48>)
 800aa62:	f7ff ff5f 	bl	800a924 <DisplayInit>
    DisplayInit(init_cmds3);
 800aa66:	480b      	ldr	r0, [pc, #44]	@ (800aa94 <ST7735_Init+0x4c>)
 800aa68:	f7ff ff5c 	bl	800a924 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 800aa6c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa98 <ST7735_Init+0x50>)
 800aa6e:	2200      	movs	r2, #0
 800aa70:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800aa72:	4b0a      	ldr	r3, [pc, #40]	@ (800aa9c <ST7735_Init+0x54>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 800aa78:	79fb      	ldrb	r3, [r7, #7]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f000 f810 	bl	800aaa0 <ST7735_SetRotation>
    ST7735_Unselect();
 800aa80:	f7ff fefc 	bl	800a87c <ST7735_Unselect>

}
 800aa84:	bf00      	nop
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	08018954 	.word	0x08018954
 800aa90:	0801898c 	.word	0x0801898c
 800aa94:	0801899c 	.word	0x0801899c
 800aa98:	20000215 	.word	0x20000215
 800aa9c:	20000216 	.word	0x20000216

0800aaa0 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800aaae:	79fb      	ldrb	r3, [r7, #7]
 800aab0:	f003 0303 	and.w	r3, r3, #3
 800aab4:	b2da      	uxtb	r2, r3
 800aab6:	4b33      	ldr	r3, [pc, #204]	@ (800ab84 <ST7735_SetRotation+0xe4>)
 800aab8:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800aaba:	4b32      	ldr	r3, [pc, #200]	@ (800ab84 <ST7735_SetRotation+0xe4>)
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	2b03      	cmp	r3, #3
 800aac0:	d84e      	bhi.n	800ab60 <ST7735_SetRotation+0xc0>
 800aac2:	a201      	add	r2, pc, #4	@ (adr r2, 800aac8 <ST7735_SetRotation+0x28>)
 800aac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac8:	0800aad9 	.word	0x0800aad9
 800aacc:	0800aafb 	.word	0x0800aafb
 800aad0:	0800ab1d 	.word	0x0800ab1d
 800aad4:	0800ab3f 	.word	0x0800ab3f
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 800aad8:	23c0      	movs	r3, #192	@ 0xc0
 800aada:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800aadc:	4b2a      	ldr	r3, [pc, #168]	@ (800ab88 <ST7735_SetRotation+0xe8>)
 800aade:	22a0      	movs	r2, #160	@ 0xa0
 800aae0:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800aae2:	4b2a      	ldr	r3, [pc, #168]	@ (800ab8c <ST7735_SetRotation+0xec>)
 800aae4:	2280      	movs	r2, #128	@ 0x80
 800aae6:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 800aae8:	4b29      	ldr	r3, [pc, #164]	@ (800ab90 <ST7735_SetRotation+0xf0>)
 800aaea:	781a      	ldrb	r2, [r3, #0]
 800aaec:	4b29      	ldr	r3, [pc, #164]	@ (800ab94 <ST7735_SetRotation+0xf4>)
 800aaee:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 800aaf0:	4b29      	ldr	r3, [pc, #164]	@ (800ab98 <ST7735_SetRotation+0xf8>)
 800aaf2:	781a      	ldrb	r2, [r3, #0]
 800aaf4:	4b29      	ldr	r3, [pc, #164]	@ (800ab9c <ST7735_SetRotation+0xfc>)
 800aaf6:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800aaf8:	e032      	b.n	800ab60 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800aafa:	23a0      	movs	r3, #160	@ 0xa0
 800aafc:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800aafe:	4b23      	ldr	r3, [pc, #140]	@ (800ab8c <ST7735_SetRotation+0xec>)
 800ab00:	22a0      	movs	r2, #160	@ 0xa0
 800ab02:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800ab04:	4b20      	ldr	r3, [pc, #128]	@ (800ab88 <ST7735_SetRotation+0xe8>)
 800ab06:	2280      	movs	r2, #128	@ 0x80
 800ab08:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800ab0a:	4b21      	ldr	r3, [pc, #132]	@ (800ab90 <ST7735_SetRotation+0xf0>)
 800ab0c:	781a      	ldrb	r2, [r3, #0]
 800ab0e:	4b23      	ldr	r3, [pc, #140]	@ (800ab9c <ST7735_SetRotation+0xfc>)
 800ab10:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800ab12:	4b21      	ldr	r3, [pc, #132]	@ (800ab98 <ST7735_SetRotation+0xf8>)
 800ab14:	781a      	ldrb	r2, [r3, #0]
 800ab16:	4b1f      	ldr	r3, [pc, #124]	@ (800ab94 <ST7735_SetRotation+0xf4>)
 800ab18:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800ab1a:	e021      	b.n	800ab60 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800ab20:	4b19      	ldr	r3, [pc, #100]	@ (800ab88 <ST7735_SetRotation+0xe8>)
 800ab22:	22a0      	movs	r2, #160	@ 0xa0
 800ab24:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800ab26:	4b19      	ldr	r3, [pc, #100]	@ (800ab8c <ST7735_SetRotation+0xec>)
 800ab28:	2280      	movs	r2, #128	@ 0x80
 800ab2a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 800ab2c:	4b18      	ldr	r3, [pc, #96]	@ (800ab90 <ST7735_SetRotation+0xf0>)
 800ab2e:	781a      	ldrb	r2, [r3, #0]
 800ab30:	4b18      	ldr	r3, [pc, #96]	@ (800ab94 <ST7735_SetRotation+0xf4>)
 800ab32:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 800ab34:	4b18      	ldr	r3, [pc, #96]	@ (800ab98 <ST7735_SetRotation+0xf8>)
 800ab36:	781a      	ldrb	r2, [r3, #0]
 800ab38:	4b18      	ldr	r3, [pc, #96]	@ (800ab9c <ST7735_SetRotation+0xfc>)
 800ab3a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800ab3c:	e010      	b.n	800ab60 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800ab3e:	2360      	movs	r3, #96	@ 0x60
 800ab40:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800ab42:	4b12      	ldr	r3, [pc, #72]	@ (800ab8c <ST7735_SetRotation+0xec>)
 800ab44:	22a0      	movs	r2, #160	@ 0xa0
 800ab46:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800ab48:	4b0f      	ldr	r3, [pc, #60]	@ (800ab88 <ST7735_SetRotation+0xe8>)
 800ab4a:	2280      	movs	r2, #128	@ 0x80
 800ab4c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800ab4e:	4b10      	ldr	r3, [pc, #64]	@ (800ab90 <ST7735_SetRotation+0xf0>)
 800ab50:	781a      	ldrb	r2, [r3, #0]
 800ab52:	4b12      	ldr	r3, [pc, #72]	@ (800ab9c <ST7735_SetRotation+0xfc>)
 800ab54:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800ab56:	4b10      	ldr	r3, [pc, #64]	@ (800ab98 <ST7735_SetRotation+0xf8>)
 800ab58:	781a      	ldrb	r2, [r3, #0]
 800ab5a:	4b0e      	ldr	r3, [pc, #56]	@ (800ab94 <ST7735_SetRotation+0xf4>)
 800ab5c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800ab5e:	bf00      	nop
  }
  ST7735_Select();
 800ab60:	f7ff fe80 	bl	800a864 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800ab64:	2036      	movs	r0, #54	@ 0x36
 800ab66:	f7ff fea9 	bl	800a8bc <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800ab6a:	f107 030f 	add.w	r3, r7, #15
 800ab6e:	2101      	movs	r1, #1
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7ff febd 	bl	800a8f0 <ST7735_WriteData>
  ST7735_Unselect();
 800ab76:	f7ff fe81 	bl	800a87c <ST7735_Unselect>
}
 800ab7a:	bf00      	nop
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20000214 	.word	0x20000214
 800ab88:	20000212 	.word	0x20000212
 800ab8c:	20000210 	.word	0x20000210
 800ab90:	20000215 	.word	0x20000215
 800ab94:	20000217 	.word	0x20000217
 800ab98:	20000216 	.word	0x20000216
 800ab9c:	20000218 	.word	0x20000218

0800aba0 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	4603      	mov	r3, r0
 800aba8:	80fb      	strh	r3, [r7, #6]
 800abaa:	460b      	mov	r3, r1
 800abac:	80bb      	strh	r3, [r7, #4]
 800abae:	4613      	mov	r3, r2
 800abb0:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800abb2:	88fb      	ldrh	r3, [r7, #6]
 800abb4:	4a17      	ldr	r2, [pc, #92]	@ (800ac14 <ST7735_DrawPixel+0x74>)
 800abb6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800abba:	4293      	cmp	r3, r2
 800abbc:	da26      	bge.n	800ac0c <ST7735_DrawPixel+0x6c>
 800abbe:	88bb      	ldrh	r3, [r7, #4]
 800abc0:	4a15      	ldr	r2, [pc, #84]	@ (800ac18 <ST7735_DrawPixel+0x78>)
 800abc2:	f9b2 2000 	ldrsh.w	r2, [r2]
 800abc6:	4293      	cmp	r3, r2
 800abc8:	da20      	bge.n	800ac0c <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 800abca:	f7ff fe4b 	bl	800a864 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800abce:	88fb      	ldrh	r3, [r7, #6]
 800abd0:	b2d8      	uxtb	r0, r3
 800abd2:	88bb      	ldrh	r3, [r7, #4]
 800abd4:	b2d9      	uxtb	r1, r3
 800abd6:	88fb      	ldrh	r3, [r7, #6]
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	3301      	adds	r3, #1
 800abdc:	b2da      	uxtb	r2, r3
 800abde:	88bb      	ldrh	r3, [r7, #4]
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	3301      	adds	r3, #1
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	f7ff fee7 	bl	800a9b8 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800abea:	887b      	ldrh	r3, [r7, #2]
 800abec:	0a1b      	lsrs	r3, r3, #8
 800abee:	b29b      	uxth	r3, r3
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	733b      	strb	r3, [r7, #12]
 800abf4:	887b      	ldrh	r3, [r7, #2]
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800abfa:	f107 030c 	add.w	r3, r7, #12
 800abfe:	2102      	movs	r1, #2
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7ff fe75 	bl	800a8f0 <ST7735_WriteData>

    ST7735_Unselect();
 800ac06:	f7ff fe39 	bl	800a87c <ST7735_Unselect>
 800ac0a:	e000      	b.n	800ac0e <ST7735_DrawPixel+0x6e>
        return;
 800ac0c:	bf00      	nop
}
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	20000210 	.word	0x20000210
 800ac18:	20000212 	.word	0x20000212

0800ac1c <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800ac1c:	b082      	sub	sp, #8
 800ac1e:	b590      	push	{r4, r7, lr}
 800ac20:	b089      	sub	sp, #36	@ 0x24
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac26:	4603      	mov	r3, r0
 800ac28:	80fb      	strh	r3, [r7, #6]
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	80bb      	strh	r3, [r7, #4]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800ac32:	88fb      	ldrh	r3, [r7, #6]
 800ac34:	b2d8      	uxtb	r0, r3
 800ac36:	88bb      	ldrh	r3, [r7, #4]
 800ac38:	b2d9      	uxtb	r1, r3
 800ac3a:	88fb      	ldrh	r3, [r7, #6]
 800ac3c:	b2da      	uxtb	r2, r3
 800ac3e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800ac42:	4413      	add	r3, r2
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	3b01      	subs	r3, #1
 800ac48:	b2dc      	uxtb	r4, r3
 800ac4a:	88bb      	ldrh	r3, [r7, #4]
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800ac52:	4413      	add	r3, r2
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	3b01      	subs	r3, #1
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	4622      	mov	r2, r4
 800ac5c:	f7ff feac 	bl	800a9b8 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800ac60:	2300      	movs	r3, #0
 800ac62:	61fb      	str	r3, [r7, #28]
 800ac64:	e043      	b.n	800acee <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800ac66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac68:	78fb      	ldrb	r3, [r7, #3]
 800ac6a:	3b20      	subs	r3, #32
 800ac6c:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800ac70:	fb01 f303 	mul.w	r3, r1, r3
 800ac74:	4619      	mov	r1, r3
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	440b      	add	r3, r1
 800ac7a:	005b      	lsls	r3, r3, #1
 800ac7c:	4413      	add	r3, r2
 800ac7e:	881b      	ldrh	r3, [r3, #0]
 800ac80:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800ac82:	2300      	movs	r3, #0
 800ac84:	61bb      	str	r3, [r7, #24]
 800ac86:	e029      	b.n	800acdc <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800ac88:	697a      	ldr	r2, [r7, #20]
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00e      	beq.n	800acb6 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800ac98:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ac9a:	0a1b      	lsrs	r3, r3, #8
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	743b      	strb	r3, [r7, #16]
 800aca2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800aca8:	f107 0310 	add.w	r3, r7, #16
 800acac:	2102      	movs	r1, #2
 800acae:	4618      	mov	r0, r3
 800acb0:	f7ff fe1e 	bl	800a8f0 <ST7735_WriteData>
 800acb4:	e00f      	b.n	800acd6 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800acb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800acba:	0a1b      	lsrs	r3, r3, #8
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	733b      	strb	r3, [r7, #12]
 800acc2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800acca:	f107 030c 	add.w	r3, r7, #12
 800acce:	2102      	movs	r1, #2
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7ff fe0d 	bl	800a8f0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	3301      	adds	r3, #1
 800acda:	61bb      	str	r3, [r7, #24]
 800acdc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800ace0:	461a      	mov	r2, r3
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d3cf      	bcc.n	800ac88 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	3301      	adds	r3, #1
 800acec:	61fb      	str	r3, [r7, #28]
 800acee:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800acf2:	461a      	mov	r2, r3
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d3b5      	bcc.n	800ac66 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800acfa:	bf00      	nop
 800acfc:	bf00      	nop
 800acfe:	3724      	adds	r7, #36	@ 0x24
 800ad00:	46bd      	mov	sp, r7
 800ad02:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800ad06:	b002      	add	sp, #8
 800ad08:	4770      	bx	lr
	...

0800ad0c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800ad0c:	b082      	sub	sp, #8
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b086      	sub	sp, #24
 800ad12:	af04      	add	r7, sp, #16
 800ad14:	603a      	str	r2, [r7, #0]
 800ad16:	617b      	str	r3, [r7, #20]
 800ad18:	4603      	mov	r3, r0
 800ad1a:	80fb      	strh	r3, [r7, #6]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800ad20:	f7ff fda0 	bl	800a864 <ST7735_Select>

    while(*str) {
 800ad24:	e033      	b.n	800ad8e <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 800ad26:	88fb      	ldrh	r3, [r7, #6]
 800ad28:	7d3a      	ldrb	r2, [r7, #20]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	4a1f      	ldr	r2, [pc, #124]	@ (800adac <ST7735_WriteString+0xa0>)
 800ad2e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ad32:	4293      	cmp	r3, r2
 800ad34:	db16      	blt.n	800ad64 <ST7735_WriteString+0x58>
            x = 0;
 800ad36:	2300      	movs	r3, #0
 800ad38:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800ad3a:	7d7b      	ldrb	r3, [r7, #21]
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	88bb      	ldrh	r3, [r7, #4]
 800ad40:	4413      	add	r3, r2
 800ad42:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 800ad44:	88bb      	ldrh	r3, [r7, #4]
 800ad46:	7d7a      	ldrb	r2, [r7, #21]
 800ad48:	4413      	add	r3, r2
 800ad4a:	4a19      	ldr	r2, [pc, #100]	@ (800adb0 <ST7735_WriteString+0xa4>)
 800ad4c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ad50:	4293      	cmp	r3, r2
 800ad52:	da21      	bge.n	800ad98 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	2b20      	cmp	r3, #32
 800ad5a:	d103      	bne.n	800ad64 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	603b      	str	r3, [r7, #0]
                continue;
 800ad62:	e014      	b.n	800ad8e <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	781a      	ldrb	r2, [r3, #0]
 800ad68:	88b9      	ldrh	r1, [r7, #4]
 800ad6a:	88f8      	ldrh	r0, [r7, #6]
 800ad6c:	8c3b      	ldrh	r3, [r7, #32]
 800ad6e:	9302      	str	r3, [sp, #8]
 800ad70:	8bbb      	ldrh	r3, [r7, #28]
 800ad72:	9301      	str	r3, [sp, #4]
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	f7ff ff4f 	bl	800ac1c <ST7735_WriteChar>
        x += font.width;
 800ad7e:	7d3b      	ldrb	r3, [r7, #20]
 800ad80:	461a      	mov	r2, r3
 800ad82:	88fb      	ldrh	r3, [r7, #6]
 800ad84:	4413      	add	r3, r2
 800ad86:	80fb      	strh	r3, [r7, #6]
        str++;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	603b      	str	r3, [r7, #0]
    while(*str) {
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1c7      	bne.n	800ad26 <ST7735_WriteString+0x1a>
 800ad96:	e000      	b.n	800ad9a <ST7735_WriteString+0x8e>
                break;
 800ad98:	bf00      	nop
    }

    ST7735_Unselect();
 800ad9a:	f7ff fd6f 	bl	800a87c <ST7735_Unselect>
}
 800ad9e:	bf00      	nop
 800ada0:	3708      	adds	r7, #8
 800ada2:	46bd      	mov	sp, r7
 800ada4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ada8:	b002      	add	sp, #8
 800adaa:	4770      	bx	lr
 800adac:	20000210 	.word	0x20000210
 800adb0:	20000212 	.word	0x20000212

0800adb4 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800adb4:	b590      	push	{r4, r7, lr}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
 800adba:	4604      	mov	r4, r0
 800adbc:	4608      	mov	r0, r1
 800adbe:	4611      	mov	r1, r2
 800adc0:	461a      	mov	r2, r3
 800adc2:	4623      	mov	r3, r4
 800adc4:	80fb      	strh	r3, [r7, #6]
 800adc6:	4603      	mov	r3, r0
 800adc8:	80bb      	strh	r3, [r7, #4]
 800adca:	460b      	mov	r3, r1
 800adcc:	807b      	strh	r3, [r7, #2]
 800adce:	4613      	mov	r3, r2
 800add0:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 800add2:	88fb      	ldrh	r3, [r7, #6]
 800add4:	4a37      	ldr	r2, [pc, #220]	@ (800aeb4 <ST7735_FillRectangle+0x100>)
 800add6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800adda:	4293      	cmp	r3, r2
 800addc:	da66      	bge.n	800aeac <ST7735_FillRectangle+0xf8>
 800adde:	88bb      	ldrh	r3, [r7, #4]
 800ade0:	4a35      	ldr	r2, [pc, #212]	@ (800aeb8 <ST7735_FillRectangle+0x104>)
 800ade2:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ade6:	4293      	cmp	r3, r2
 800ade8:	da60      	bge.n	800aeac <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 800adea:	88fa      	ldrh	r2, [r7, #6]
 800adec:	887b      	ldrh	r3, [r7, #2]
 800adee:	4413      	add	r3, r2
 800adf0:	4a30      	ldr	r2, [pc, #192]	@ (800aeb4 <ST7735_FillRectangle+0x100>)
 800adf2:	f9b2 2000 	ldrsh.w	r2, [r2]
 800adf6:	4293      	cmp	r3, r2
 800adf8:	dd06      	ble.n	800ae08 <ST7735_FillRectangle+0x54>
 800adfa:	4b2e      	ldr	r3, [pc, #184]	@ (800aeb4 <ST7735_FillRectangle+0x100>)
 800adfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae00:	b29a      	uxth	r2, r3
 800ae02:	88fb      	ldrh	r3, [r7, #6]
 800ae04:	1ad3      	subs	r3, r2, r3
 800ae06:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 800ae08:	88ba      	ldrh	r2, [r7, #4]
 800ae0a:	883b      	ldrh	r3, [r7, #0]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	4a2a      	ldr	r2, [pc, #168]	@ (800aeb8 <ST7735_FillRectangle+0x104>)
 800ae10:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ae14:	4293      	cmp	r3, r2
 800ae16:	dd06      	ble.n	800ae26 <ST7735_FillRectangle+0x72>
 800ae18:	4b27      	ldr	r3, [pc, #156]	@ (800aeb8 <ST7735_FillRectangle+0x104>)
 800ae1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	88bb      	ldrh	r3, [r7, #4]
 800ae22:	1ad3      	subs	r3, r2, r3
 800ae24:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800ae26:	f7ff fd1d 	bl	800a864 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800ae2a:	88fb      	ldrh	r3, [r7, #6]
 800ae2c:	b2d8      	uxtb	r0, r3
 800ae2e:	88bb      	ldrh	r3, [r7, #4]
 800ae30:	b2d9      	uxtb	r1, r3
 800ae32:	88fb      	ldrh	r3, [r7, #6]
 800ae34:	b2da      	uxtb	r2, r3
 800ae36:	887b      	ldrh	r3, [r7, #2]
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	4413      	add	r3, r2
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	b2dc      	uxtb	r4, r3
 800ae42:	88bb      	ldrh	r3, [r7, #4]
 800ae44:	b2da      	uxtb	r2, r3
 800ae46:	883b      	ldrh	r3, [r7, #0]
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	4413      	add	r3, r2
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	4622      	mov	r2, r4
 800ae54:	f7ff fdb0 	bl	800a9b8 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800ae58:	8c3b      	ldrh	r3, [r7, #32]
 800ae5a:	0a1b      	lsrs	r3, r3, #8
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	733b      	strb	r3, [r7, #12]
 800ae62:	8c3b      	ldrh	r3, [r7, #32]
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800ae68:	2201      	movs	r2, #1
 800ae6a:	2110      	movs	r1, #16
 800ae6c:	4813      	ldr	r0, [pc, #76]	@ (800aebc <ST7735_FillRectangle+0x108>)
 800ae6e:	f004 fafd 	bl	800f46c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800ae72:	883b      	ldrh	r3, [r7, #0]
 800ae74:	80bb      	strh	r3, [r7, #4]
 800ae76:	e013      	b.n	800aea0 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 800ae78:	887b      	ldrh	r3, [r7, #2]
 800ae7a:	80fb      	strh	r3, [r7, #6]
 800ae7c:	e00a      	b.n	800ae94 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800ae7e:	f107 010c 	add.w	r1, r7, #12
 800ae82:	f04f 33ff 	mov.w	r3, #4294967295
 800ae86:	2202      	movs	r2, #2
 800ae88:	480d      	ldr	r0, [pc, #52]	@ (800aec0 <ST7735_FillRectangle+0x10c>)
 800ae8a:	f005 f9a8 	bl	80101de <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800ae8e:	88fb      	ldrh	r3, [r7, #6]
 800ae90:	3b01      	subs	r3, #1
 800ae92:	80fb      	strh	r3, [r7, #6]
 800ae94:	88fb      	ldrh	r3, [r7, #6]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1f1      	bne.n	800ae7e <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 800ae9a:	88bb      	ldrh	r3, [r7, #4]
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	80bb      	strh	r3, [r7, #4]
 800aea0:	88bb      	ldrh	r3, [r7, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1e8      	bne.n	800ae78 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 800aea6:	f7ff fce9 	bl	800a87c <ST7735_Unselect>
 800aeaa:	e000      	b.n	800aeae <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 800aeac:	bf00      	nop
}
 800aeae:	3714      	adds	r7, #20
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd90      	pop	{r4, r7, pc}
 800aeb4:	20000210 	.word	0x20000210
 800aeb8:	20000212 	.word	0x20000212
 800aebc:	40020800 	.word	0x40020800
 800aec0:	2000030c 	.word	0x2000030c

0800aec4 <Test_Button_unselect>:
// physical buttons defines
int downbutton=0, upbutton=0, enter=0;

// "TEST ALL" button on home (unselected)
void Test_Button_unselect (void)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af04      	add	r7, sp, #16
	drawRoundRect(29, 19, 102, 27, 8, WHITE);
 800aeca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aece:	9301      	str	r3, [sp, #4]
 800aed0:	2308      	movs	r3, #8
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	231b      	movs	r3, #27
 800aed6:	2266      	movs	r2, #102	@ 0x66
 800aed8:	2113      	movs	r1, #19
 800aeda:	201d      	movs	r0, #29
 800aedc:	f7fe fd11 	bl	8009902 <drawRoundRect>
	fillRoundRect(30, 20, 100, 25, 8, RED);
 800aee0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800aee4:	9301      	str	r3, [sp, #4]
 800aee6:	2308      	movs	r3, #8
 800aee8:	9300      	str	r3, [sp, #0]
 800aeea:	2319      	movs	r3, #25
 800aeec:	2264      	movs	r2, #100	@ 0x64
 800aeee:	2114      	movs	r1, #20
 800aef0:	201e      	movs	r0, #30
 800aef2:	f7fe fdd3 	bl	8009a9c <fillRoundRect>
	ST7735_WriteString(38, 23, "TEST ALL", Font_11x18, WHITE, RED);
 800aef6:	4b0a      	ldr	r3, [pc, #40]	@ (800af20 <Test_Button_unselect+0x5c>)
 800aef8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800aefc:	9202      	str	r2, [sp, #8]
 800aefe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800af02:	9201      	str	r2, [sp, #4]
 800af04:	685a      	ldr	r2, [r3, #4]
 800af06:	9200      	str	r2, [sp, #0]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a06      	ldr	r2, [pc, #24]	@ (800af24 <Test_Button_unselect+0x60>)
 800af0c:	2117      	movs	r1, #23
 800af0e:	2026      	movs	r0, #38	@ 0x26
 800af10:	f7ff fefc 	bl	800ad0c <ST7735_WriteString>
	testbutton = 0;  // TEST ALL button is not selected
 800af14:	4b04      	ldr	r3, [pc, #16]	@ (800af28 <Test_Button_unselect+0x64>)
 800af16:	2200      	movs	r2, #0
 800af18:	601a      	str	r2, [r3, #0]
}
 800af1a:	bf00      	nop
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	20000014 	.word	0x20000014
 800af24:	080186d8 	.word	0x080186d8
 800af28:	20000228 	.word	0x20000228

0800af2c <Test_Button_select>:

// "TEST ALL" button on home (selected)
void Test_Button_select (void)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af04      	add	r7, sp, #16
	drawRoundRect(29, 19, 102, 27, 8, RED);
 800af32:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800af36:	9301      	str	r3, [sp, #4]
 800af38:	2308      	movs	r3, #8
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	231b      	movs	r3, #27
 800af3e:	2266      	movs	r2, #102	@ 0x66
 800af40:	2113      	movs	r1, #19
 800af42:	201d      	movs	r0, #29
 800af44:	f7fe fcdd 	bl	8009902 <drawRoundRect>
	fillRoundRect(30, 20, 100, 25, 8, GREEN);
 800af48:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800af4c:	9301      	str	r3, [sp, #4]
 800af4e:	2308      	movs	r3, #8
 800af50:	9300      	str	r3, [sp, #0]
 800af52:	2319      	movs	r3, #25
 800af54:	2264      	movs	r2, #100	@ 0x64
 800af56:	2114      	movs	r1, #20
 800af58:	201e      	movs	r0, #30
 800af5a:	f7fe fd9f 	bl	8009a9c <fillRoundRect>
	ST7735_WriteString(38, 23, "TEST ALL", Font_11x18, BLACK, GREEN);
 800af5e:	4b0a      	ldr	r3, [pc, #40]	@ (800af88 <Test_Button_select+0x5c>)
 800af60:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800af64:	9202      	str	r2, [sp, #8]
 800af66:	2200      	movs	r2, #0
 800af68:	9201      	str	r2, [sp, #4]
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	9200      	str	r2, [sp, #0]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a06      	ldr	r2, [pc, #24]	@ (800af8c <Test_Button_select+0x60>)
 800af72:	2117      	movs	r1, #23
 800af74:	2026      	movs	r0, #38	@ 0x26
 800af76:	f7ff fec9 	bl	800ad0c <ST7735_WriteString>
	testbutton = 1;  // TEST ALL button is selected
 800af7a:	4b05      	ldr	r3, [pc, #20]	@ (800af90 <Test_Button_select+0x64>)
 800af7c:	2201      	movs	r2, #1
 800af7e:	601a      	str	r2, [r3, #0]
}
 800af80:	bf00      	nop
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	20000014 	.word	0x20000014
 800af8c:	080186d8 	.word	0x080186d8
 800af90:	20000228 	.word	0x20000228

0800af94 <Page2_Button_unselect>:

// "PAGE 2" button on home (unselected)
void Page2_Button_unselect (void)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af04      	add	r7, sp, #16
	drawRoundRect(29, 69, 102, 27, 8, WHITE);
 800af9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800af9e:	9301      	str	r3, [sp, #4]
 800afa0:	2308      	movs	r3, #8
 800afa2:	9300      	str	r3, [sp, #0]
 800afa4:	231b      	movs	r3, #27
 800afa6:	2266      	movs	r2, #102	@ 0x66
 800afa8:	2145      	movs	r1, #69	@ 0x45
 800afaa:	201d      	movs	r0, #29
 800afac:	f7fe fca9 	bl	8009902 <drawRoundRect>
	fillRoundRect(30, 70, 100, 25, 8, RED);
 800afb0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800afb4:	9301      	str	r3, [sp, #4]
 800afb6:	2308      	movs	r3, #8
 800afb8:	9300      	str	r3, [sp, #0]
 800afba:	2319      	movs	r3, #25
 800afbc:	2264      	movs	r2, #100	@ 0x64
 800afbe:	2146      	movs	r1, #70	@ 0x46
 800afc0:	201e      	movs	r0, #30
 800afc2:	f7fe fd6b 	bl	8009a9c <fillRoundRect>
	ST7735_WriteString(40, 73, "PAGE 2", Font_11x18, WHITE, RED);
 800afc6:	4b0a      	ldr	r3, [pc, #40]	@ (800aff0 <Page2_Button_unselect+0x5c>)
 800afc8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800afcc:	9202      	str	r2, [sp, #8]
 800afce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800afd2:	9201      	str	r2, [sp, #4]
 800afd4:	685a      	ldr	r2, [r3, #4]
 800afd6:	9200      	str	r2, [sp, #0]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a06      	ldr	r2, [pc, #24]	@ (800aff4 <Page2_Button_unselect+0x60>)
 800afdc:	2149      	movs	r1, #73	@ 0x49
 800afde:	2028      	movs	r0, #40	@ 0x28
 800afe0:	f7ff fe94 	bl	800ad0c <ST7735_WriteString>
	page2button = 0;  // "PAGE 2" button is not selected
 800afe4:	4b04      	ldr	r3, [pc, #16]	@ (800aff8 <Page2_Button_unselect+0x64>)
 800afe6:	2200      	movs	r2, #0
 800afe8:	601a      	str	r2, [r3, #0]
}
 800afea:	bf00      	nop
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	20000014 	.word	0x20000014
 800aff4:	080186e4 	.word	0x080186e4
 800aff8:	2000022c 	.word	0x2000022c

0800affc <Page2_Button_select>:

// "PAGE 2" button on home (selected)
void Page2_Button_select (void)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af04      	add	r7, sp, #16
	drawRoundRect(29, 69, 102, 27, 8, RED);
 800b002:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800b006:	9301      	str	r3, [sp, #4]
 800b008:	2308      	movs	r3, #8
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	231b      	movs	r3, #27
 800b00e:	2266      	movs	r2, #102	@ 0x66
 800b010:	2145      	movs	r1, #69	@ 0x45
 800b012:	201d      	movs	r0, #29
 800b014:	f7fe fc75 	bl	8009902 <drawRoundRect>
	fillRoundRect(30, 70, 100, 25, 8, GREEN);
 800b018:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800b01c:	9301      	str	r3, [sp, #4]
 800b01e:	2308      	movs	r3, #8
 800b020:	9300      	str	r3, [sp, #0]
 800b022:	2319      	movs	r3, #25
 800b024:	2264      	movs	r2, #100	@ 0x64
 800b026:	2146      	movs	r1, #70	@ 0x46
 800b028:	201e      	movs	r0, #30
 800b02a:	f7fe fd37 	bl	8009a9c <fillRoundRect>
	ST7735_WriteString(40, 73, "PAGE 2", Font_11x18, BLACK, GREEN);
 800b02e:	4b0a      	ldr	r3, [pc, #40]	@ (800b058 <Page2_Button_select+0x5c>)
 800b030:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800b034:	9202      	str	r2, [sp, #8]
 800b036:	2200      	movs	r2, #0
 800b038:	9201      	str	r2, [sp, #4]
 800b03a:	685a      	ldr	r2, [r3, #4]
 800b03c:	9200      	str	r2, [sp, #0]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a06      	ldr	r2, [pc, #24]	@ (800b05c <Page2_Button_select+0x60>)
 800b042:	2149      	movs	r1, #73	@ 0x49
 800b044:	2028      	movs	r0, #40	@ 0x28
 800b046:	f7ff fe61 	bl	800ad0c <ST7735_WriteString>
	page2button = 1;  // "PAGE 2" button is selected
 800b04a:	4b05      	ldr	r3, [pc, #20]	@ (800b060 <Page2_Button_select+0x64>)
 800b04c:	2201      	movs	r2, #1
 800b04e:	601a      	str	r2, [r3, #0]
}
 800b050:	bf00      	nop
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	20000014 	.word	0x20000014
 800b05c:	080186e4 	.word	0x080186e4
 800b060:	2000022c 	.word	0x2000022c

0800b064 <back_Button_unselect>:

// "GO BACK" button (unselected)
void back_Button_unselect (void)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af04      	add	r7, sp, #16
	drawRoundRect(29, 89, 102, 27, 8, WHITE);
 800b06a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b06e:	9301      	str	r3, [sp, #4]
 800b070:	2308      	movs	r3, #8
 800b072:	9300      	str	r3, [sp, #0]
 800b074:	231b      	movs	r3, #27
 800b076:	2266      	movs	r2, #102	@ 0x66
 800b078:	2159      	movs	r1, #89	@ 0x59
 800b07a:	201d      	movs	r0, #29
 800b07c:	f7fe fc41 	bl	8009902 <drawRoundRect>
	fillRoundRect(30, 90, 100, 25, 8, RED);
 800b080:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800b084:	9301      	str	r3, [sp, #4]
 800b086:	2308      	movs	r3, #8
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	2319      	movs	r3, #25
 800b08c:	2264      	movs	r2, #100	@ 0x64
 800b08e:	215a      	movs	r1, #90	@ 0x5a
 800b090:	201e      	movs	r0, #30
 800b092:	f7fe fd03 	bl	8009a9c <fillRoundRect>
	ST7735_WriteString(40, 93, "GO BACK", Font_11x18, WHITE, RED);
 800b096:	4b0a      	ldr	r3, [pc, #40]	@ (800b0c0 <back_Button_unselect+0x5c>)
 800b098:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800b09c:	9202      	str	r2, [sp, #8]
 800b09e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b0a2:	9201      	str	r2, [sp, #4]
 800b0a4:	685a      	ldr	r2, [r3, #4]
 800b0a6:	9200      	str	r2, [sp, #0]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a06      	ldr	r2, [pc, #24]	@ (800b0c4 <back_Button_unselect+0x60>)
 800b0ac:	215d      	movs	r1, #93	@ 0x5d
 800b0ae:	2028      	movs	r0, #40	@ 0x28
 800b0b0:	f7ff fe2c 	bl	800ad0c <ST7735_WriteString>
	backbutton = 0;  // "GO BACK" button is not selected
 800b0b4:	4b04      	ldr	r3, [pc, #16]	@ (800b0c8 <back_Button_unselect+0x64>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	601a      	str	r2, [r3, #0]
}
 800b0ba:	bf00      	nop
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	20000014 	.word	0x20000014
 800b0c4:	080186ec 	.word	0x080186ec
 800b0c8:	20000230 	.word	0x20000230

0800b0cc <back_Button_select>:

// "GO BACK" button (selected)
void back_Button_select (void)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af04      	add	r7, sp, #16
	drawRoundRect(29, 89, 102, 27, 8, RED);
 800b0d2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800b0d6:	9301      	str	r3, [sp, #4]
 800b0d8:	2308      	movs	r3, #8
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	231b      	movs	r3, #27
 800b0de:	2266      	movs	r2, #102	@ 0x66
 800b0e0:	2159      	movs	r1, #89	@ 0x59
 800b0e2:	201d      	movs	r0, #29
 800b0e4:	f7fe fc0d 	bl	8009902 <drawRoundRect>
	fillRoundRect(30, 90, 100, 25, 8, GREEN);
 800b0e8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800b0ec:	9301      	str	r3, [sp, #4]
 800b0ee:	2308      	movs	r3, #8
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	2319      	movs	r3, #25
 800b0f4:	2264      	movs	r2, #100	@ 0x64
 800b0f6:	215a      	movs	r1, #90	@ 0x5a
 800b0f8:	201e      	movs	r0, #30
 800b0fa:	f7fe fccf 	bl	8009a9c <fillRoundRect>
	ST7735_WriteString(40, 93, "GO BACK", Font_11x18, BLACK, GREEN);
 800b0fe:	4b0a      	ldr	r3, [pc, #40]	@ (800b128 <back_Button_select+0x5c>)
 800b100:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800b104:	9202      	str	r2, [sp, #8]
 800b106:	2200      	movs	r2, #0
 800b108:	9201      	str	r2, [sp, #4]
 800b10a:	685a      	ldr	r2, [r3, #4]
 800b10c:	9200      	str	r2, [sp, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a06      	ldr	r2, [pc, #24]	@ (800b12c <back_Button_select+0x60>)
 800b112:	215d      	movs	r1, #93	@ 0x5d
 800b114:	2028      	movs	r0, #40	@ 0x28
 800b116:	f7ff fdf9 	bl	800ad0c <ST7735_WriteString>
	backbutton = 1;  // "GO BACK" button is selected
 800b11a:	4b05      	ldr	r3, [pc, #20]	@ (800b130 <back_Button_select+0x64>)
 800b11c:	2201      	movs	r2, #1
 800b11e:	601a      	str	r2, [r3, #0]
}
 800b120:	bf00      	nop
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	20000014 	.word	0x20000014
 800b12c:	080186ec 	.word	0x080186ec
 800b130:	20000230 	.word	0x20000230

0800b134 <ledon_Button_unselect>:

// "LED ON" button (unselected)
void ledon_Button_unselect (void)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af04      	add	r7, sp, #16
	drawRoundRect(29, 9, 102, 27, 8, WHITE);
 800b13a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b13e:	9301      	str	r3, [sp, #4]
 800b140:	2308      	movs	r3, #8
 800b142:	9300      	str	r3, [sp, #0]
 800b144:	231b      	movs	r3, #27
 800b146:	2266      	movs	r2, #102	@ 0x66
 800b148:	2109      	movs	r1, #9
 800b14a:	201d      	movs	r0, #29
 800b14c:	f7fe fbd9 	bl	8009902 <drawRoundRect>
	fillRoundRect(30, 10, 100, 25, 8, RED);
 800b150:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800b154:	9301      	str	r3, [sp, #4]
 800b156:	2308      	movs	r3, #8
 800b158:	9300      	str	r3, [sp, #0]
 800b15a:	2319      	movs	r3, #25
 800b15c:	2264      	movs	r2, #100	@ 0x64
 800b15e:	210a      	movs	r1, #10
 800b160:	201e      	movs	r0, #30
 800b162:	f7fe fc9b 	bl	8009a9c <fillRoundRect>
	ST7735_WriteString(38, 13, "LED ON", Font_11x18, WHITE, RED);
 800b166:	4b0a      	ldr	r3, [pc, #40]	@ (800b190 <ledon_Button_unselect+0x5c>)
 800b168:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800b16c:	9202      	str	r2, [sp, #8]
 800b16e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b172:	9201      	str	r2, [sp, #4]
 800b174:	685a      	ldr	r2, [r3, #4]
 800b176:	9200      	str	r2, [sp, #0]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a06      	ldr	r2, [pc, #24]	@ (800b194 <ledon_Button_unselect+0x60>)
 800b17c:	210d      	movs	r1, #13
 800b17e:	2026      	movs	r0, #38	@ 0x26
 800b180:	f7ff fdc4 	bl	800ad0c <ST7735_WriteString>
	ledonbutton = 0;  // "LED ON" button is not selected
 800b184:	4b04      	ldr	r3, [pc, #16]	@ (800b198 <ledon_Button_unselect+0x64>)
 800b186:	2200      	movs	r2, #0
 800b188:	601a      	str	r2, [r3, #0]
}
 800b18a:	bf00      	nop
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	20000014 	.word	0x20000014
 800b194:	080186f4 	.word	0x080186f4
 800b198:	20000234 	.word	0x20000234

0800b19c <ledon_Button_select>:

// "LED ON" button (selected)
void ledon_Button_select (void)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af04      	add	r7, sp, #16
	drawRoundRect(29, 9, 102, 27, 8, RED);
 800b1a2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800b1a6:	9301      	str	r3, [sp, #4]
 800b1a8:	2308      	movs	r3, #8
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	231b      	movs	r3, #27
 800b1ae:	2266      	movs	r2, #102	@ 0x66
 800b1b0:	2109      	movs	r1, #9
 800b1b2:	201d      	movs	r0, #29
 800b1b4:	f7fe fba5 	bl	8009902 <drawRoundRect>
	fillRoundRect(30, 10, 100, 25, 8, GREEN);
 800b1b8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800b1bc:	9301      	str	r3, [sp, #4]
 800b1be:	2308      	movs	r3, #8
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	2319      	movs	r3, #25
 800b1c4:	2264      	movs	r2, #100	@ 0x64
 800b1c6:	210a      	movs	r1, #10
 800b1c8:	201e      	movs	r0, #30
 800b1ca:	f7fe fc67 	bl	8009a9c <fillRoundRect>
	ST7735_WriteString(38, 13, "LED ON", Font_11x18, BLACK, GREEN);
 800b1ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b1f8 <ledon_Button_select+0x5c>)
 800b1d0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800b1d4:	9202      	str	r2, [sp, #8]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	9201      	str	r2, [sp, #4]
 800b1da:	685a      	ldr	r2, [r3, #4]
 800b1dc:	9200      	str	r2, [sp, #0]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a06      	ldr	r2, [pc, #24]	@ (800b1fc <ledon_Button_select+0x60>)
 800b1e2:	210d      	movs	r1, #13
 800b1e4:	2026      	movs	r0, #38	@ 0x26
 800b1e6:	f7ff fd91 	bl	800ad0c <ST7735_WriteString>
	ledonbutton = 1;  // "LED ON" button is selected
 800b1ea:	4b05      	ldr	r3, [pc, #20]	@ (800b200 <ledon_Button_select+0x64>)
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	601a      	str	r2, [r3, #0]
}
 800b1f0:	bf00      	nop
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	20000014 	.word	0x20000014
 800b1fc:	080186f4 	.word	0x080186f4
 800b200:	20000234 	.word	0x20000234

0800b204 <ledoff_Button_unselect>:

// "LED OFF" button (unselected)
void ledoff_Button_unselect (void)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af04      	add	r7, sp, #16
	drawRoundRect(29, 49, 102, 27, 8, WHITE);
 800b20a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b20e:	9301      	str	r3, [sp, #4]
 800b210:	2308      	movs	r3, #8
 800b212:	9300      	str	r3, [sp, #0]
 800b214:	231b      	movs	r3, #27
 800b216:	2266      	movs	r2, #102	@ 0x66
 800b218:	2131      	movs	r1, #49	@ 0x31
 800b21a:	201d      	movs	r0, #29
 800b21c:	f7fe fb71 	bl	8009902 <drawRoundRect>
	fillRoundRect(30, 50, 100, 25, 8, RED);
 800b220:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800b224:	9301      	str	r3, [sp, #4]
 800b226:	2308      	movs	r3, #8
 800b228:	9300      	str	r3, [sp, #0]
 800b22a:	2319      	movs	r3, #25
 800b22c:	2264      	movs	r2, #100	@ 0x64
 800b22e:	2132      	movs	r1, #50	@ 0x32
 800b230:	201e      	movs	r0, #30
 800b232:	f7fe fc33 	bl	8009a9c <fillRoundRect>
	ST7735_WriteString(38, 53, "LED OFF", Font_11x18, WHITE, RED);
 800b236:	4b0a      	ldr	r3, [pc, #40]	@ (800b260 <ledoff_Button_unselect+0x5c>)
 800b238:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800b23c:	9202      	str	r2, [sp, #8]
 800b23e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b242:	9201      	str	r2, [sp, #4]
 800b244:	685a      	ldr	r2, [r3, #4]
 800b246:	9200      	str	r2, [sp, #0]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a06      	ldr	r2, [pc, #24]	@ (800b264 <ledoff_Button_unselect+0x60>)
 800b24c:	2135      	movs	r1, #53	@ 0x35
 800b24e:	2026      	movs	r0, #38	@ 0x26
 800b250:	f7ff fd5c 	bl	800ad0c <ST7735_WriteString>
	ledoffbutton = 0;  // "LED OFF" button is not selected
 800b254:	4b04      	ldr	r3, [pc, #16]	@ (800b268 <ledoff_Button_unselect+0x64>)
 800b256:	2200      	movs	r2, #0
 800b258:	601a      	str	r2, [r3, #0]
}
 800b25a:	bf00      	nop
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	20000014 	.word	0x20000014
 800b264:	080186fc 	.word	0x080186fc
 800b268:	20000238 	.word	0x20000238

0800b26c <ledoff_Button_select>:

// "LED OFF" button (selected)
void ledoff_Button_select (void)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af04      	add	r7, sp, #16
	drawRoundRect(29, 49, 102, 27, 8, RED);
 800b272:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800b276:	9301      	str	r3, [sp, #4]
 800b278:	2308      	movs	r3, #8
 800b27a:	9300      	str	r3, [sp, #0]
 800b27c:	231b      	movs	r3, #27
 800b27e:	2266      	movs	r2, #102	@ 0x66
 800b280:	2131      	movs	r1, #49	@ 0x31
 800b282:	201d      	movs	r0, #29
 800b284:	f7fe fb3d 	bl	8009902 <drawRoundRect>
	fillRoundRect(30, 50, 100, 25, 8, GREEN);
 800b288:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800b28c:	9301      	str	r3, [sp, #4]
 800b28e:	2308      	movs	r3, #8
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	2319      	movs	r3, #25
 800b294:	2264      	movs	r2, #100	@ 0x64
 800b296:	2132      	movs	r1, #50	@ 0x32
 800b298:	201e      	movs	r0, #30
 800b29a:	f7fe fbff 	bl	8009a9c <fillRoundRect>
	ST7735_WriteString(38, 53, "LED OFF", Font_11x18, BLACK, GREEN);
 800b29e:	4b0a      	ldr	r3, [pc, #40]	@ (800b2c8 <ledoff_Button_select+0x5c>)
 800b2a0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800b2a4:	9202      	str	r2, [sp, #8]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	9201      	str	r2, [sp, #4]
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	9200      	str	r2, [sp, #0]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a06      	ldr	r2, [pc, #24]	@ (800b2cc <ledoff_Button_select+0x60>)
 800b2b2:	2135      	movs	r1, #53	@ 0x35
 800b2b4:	2026      	movs	r0, #38	@ 0x26
 800b2b6:	f7ff fd29 	bl	800ad0c <ST7735_WriteString>
	ledoffbutton = 1;  // "LED OFF" button is selected
 800b2ba:	4b05      	ldr	r3, [pc, #20]	@ (800b2d0 <ledoff_Button_select+0x64>)
 800b2bc:	2201      	movs	r2, #1
 800b2be:	601a      	str	r2, [r3, #0]
}
 800b2c0:	bf00      	nop
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	20000014 	.word	0x20000014
 800b2cc:	080186fc 	.word	0x080186fc
 800b2d0:	20000238 	.word	0x20000238

0800b2d4 <HomeMenu>:

/******Home Menu******/
void HomeMenu (void)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	af00      	add	r7, sp, #0
	ST7735_SetRotation(1);  // set horizontal
 800b2d8:	2001      	movs	r0, #1
 800b2da:	f7ff fbe1 	bl	800aaa0 <ST7735_SetRotation>
	fillScreen(BLACK);  // fill black
 800b2de:	2000      	movs	r0, #0
 800b2e0:	f7fe fdee 	bl	8009ec0 <fillScreen>
    Page2_Button_unselect();  // draw unselected "PAGE 2" button
 800b2e4:	f7ff fe56 	bl	800af94 <Page2_Button_unselect>
	Test_Button_unselect();  // draw unselected "TEST ALL" button
 800b2e8:	f7ff fdec 	bl	800aec4 <Test_Button_unselect>
	homemenu = 1;  // "HomeMenu" is selected
 800b2ec:	4b05      	ldr	r3, [pc, #20]	@ (800b304 <HomeMenu+0x30>)
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	601a      	str	r2, [r3, #0]
	page2menu = 0;  // "Page2Menu" is not selected
 800b2f2:	4b05      	ldr	r3, [pc, #20]	@ (800b308 <HomeMenu+0x34>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	601a      	str	r2, [r3, #0]
	testmenu = 0;  // "TestMenu" is not selected
 800b2f8:	4b04      	ldr	r3, [pc, #16]	@ (800b30c <HomeMenu+0x38>)
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	601a      	str	r2, [r3, #0]
}
 800b2fe:	bf00      	nop
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	2000021c 	.word	0x2000021c
 800b308:	20000220 	.word	0x20000220
 800b30c:	20000224 	.word	0x20000224

0800b310 <TestMenu>:

/******Test Menu******/
void TestMenu (void)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af04      	add	r7, sp, #16
	homemenu = 0;  // "HomeMenu" is not selected
 800b316:	4b12      	ldr	r3, [pc, #72]	@ (800b360 <TestMenu+0x50>)
 800b318:	2200      	movs	r2, #0
 800b31a:	601a      	str	r2, [r3, #0]
	page2menu = 0;  // "Page2Menu is not selected
 800b31c:	4b11      	ldr	r3, [pc, #68]	@ (800b364 <TestMenu+0x54>)
 800b31e:	2200      	movs	r2, #0
 800b320:	601a      	str	r2, [r3, #0]
	testmenu = 1;  // "TestMenu" is selected
 800b322:	4b11      	ldr	r3, [pc, #68]	@ (800b368 <TestMenu+0x58>)
 800b324:	2201      	movs	r2, #1
 800b326:	601a      	str	r2, [r3, #0]

	testAll();  // Perform All the Tests
 800b328:	f7ff fa71 	bl	800a80e <testAll>

	ST7735_SetRotation(1);  // set Horizontal
 800b32c:	2001      	movs	r0, #1
 800b32e:	f7ff fbb7 	bl	800aaa0 <ST7735_SetRotation>
	fillScreen(BLACK);  // fill black
 800b332:	2000      	movs	r0, #0
 800b334:	f7fe fdc4 	bl	8009ec0 <fillScreen>

	ST7735_WriteString(10, 20, "TEST COMPLETE", Font_11x18, GREEN, BLACK);  // Write "test completed"
 800b338:	4b0c      	ldr	r3, [pc, #48]	@ (800b36c <TestMenu+0x5c>)
 800b33a:	2200      	movs	r2, #0
 800b33c:	9202      	str	r2, [sp, #8]
 800b33e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800b342:	9201      	str	r2, [sp, #4]
 800b344:	685a      	ldr	r2, [r3, #4]
 800b346:	9200      	str	r2, [sp, #0]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a09      	ldr	r2, [pc, #36]	@ (800b370 <TestMenu+0x60>)
 800b34c:	2114      	movs	r1, #20
 800b34e:	200a      	movs	r0, #10
 800b350:	f7ff fcdc 	bl	800ad0c <ST7735_WriteString>
	back_Button_unselect();  // draw unselected "GO BACK" button
 800b354:	f7ff fe86 	bl	800b064 <back_Button_unselect>
}
 800b358:	bf00      	nop
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	2000021c 	.word	0x2000021c
 800b364:	20000220 	.word	0x20000220
 800b368:	20000224 	.word	0x20000224
 800b36c:	20000014 	.word	0x20000014
 800b370:	08018704 	.word	0x08018704

0800b374 <Page2Menu>:

/******Page 2  Menu******/
void Page2Menu (void)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	af00      	add	r7, sp, #0
	homemenu = 0;  // "HomeMenu" is not selected
 800b378:	4b0b      	ldr	r3, [pc, #44]	@ (800b3a8 <Page2Menu+0x34>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	601a      	str	r2, [r3, #0]
	page2menu = 1;  // "Page2Menu" is selected
 800b37e:	4b0b      	ldr	r3, [pc, #44]	@ (800b3ac <Page2Menu+0x38>)
 800b380:	2201      	movs	r2, #1
 800b382:	601a      	str	r2, [r3, #0]
	testmenu = 0;  // "TestMenu" is not selected
 800b384:	4b0a      	ldr	r3, [pc, #40]	@ (800b3b0 <Page2Menu+0x3c>)
 800b386:	2200      	movs	r2, #0
 800b388:	601a      	str	r2, [r3, #0]
	ST7735_SetRotation(1);  // set horizontal
 800b38a:	2001      	movs	r0, #1
 800b38c:	f7ff fb88 	bl	800aaa0 <ST7735_SetRotation>
	fillScreen(BLACK);  // fill black
 800b390:	2000      	movs	r0, #0
 800b392:	f7fe fd95 	bl	8009ec0 <fillScreen>

	ledon_Button_unselect();  // draw unslected "LED ON" button
 800b396:	f7ff fecd 	bl	800b134 <ledon_Button_unselect>
	ledoff_Button_unselect();  // draw unslected "LED OFF" button
 800b39a:	f7ff ff33 	bl	800b204 <ledoff_Button_unselect>
	back_Button_unselect();  // draw unslected "GO BACK" button
 800b39e:	f7ff fe61 	bl	800b064 <back_Button_unselect>
}
 800b3a2:	bf00      	nop
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	2000021c 	.word	0x2000021c
 800b3ac:	20000220 	.word	0x20000220
 800b3b0:	20000224 	.word	0x20000224

0800b3b4 <HAL_GPIO_EXTI_Callback>:
 * PA0 is ENTER
 * PA1 is DOWN
 * PA4 is UP
 *******/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10)  // If the PA0 (ENTER) is pressed
 800b3be:	88fb      	ldrh	r3, [r7, #6]
 800b3c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3c4:	d10b      	bne.n	800b3de <HAL_GPIO_EXTI_Callback+0x2a>
	{
		printf("enter pressed\n\r");
 800b3c6:	4818      	ldr	r0, [pc, #96]	@ (800b428 <HAL_GPIO_EXTI_Callback+0x74>)
 800b3c8:	f00a fc18 	bl	8015bfc <iprintf>
		downbutton = 0;  // downbutton set to 0
 800b3cc:	4b17      	ldr	r3, [pc, #92]	@ (800b42c <HAL_GPIO_EXTI_Callback+0x78>)
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	601a      	str	r2, [r3, #0]
		upbutton = 0;  // upbutton set to 0
 800b3d2:	4b17      	ldr	r3, [pc, #92]	@ (800b430 <HAL_GPIO_EXTI_Callback+0x7c>)
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	601a      	str	r2, [r3, #0]
		enter = 1;  // enter set to 1
 800b3d8:	4b16      	ldr	r3, [pc, #88]	@ (800b434 <HAL_GPIO_EXTI_Callback+0x80>)
 800b3da:	2201      	movs	r2, #1
 800b3dc:	601a      	str	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_11)  // If the PA1 (DOWN) is pressed
 800b3de:	88fb      	ldrh	r3, [r7, #6]
 800b3e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b3e4:	d10b      	bne.n	800b3fe <HAL_GPIO_EXTI_Callback+0x4a>
	{
		printf("down pressed\n\r");
 800b3e6:	4814      	ldr	r0, [pc, #80]	@ (800b438 <HAL_GPIO_EXTI_Callback+0x84>)
 800b3e8:	f00a fc08 	bl	8015bfc <iprintf>
		downbutton = 1;  // downbutton set to 1 and others set to 0
 800b3ec:	4b0f      	ldr	r3, [pc, #60]	@ (800b42c <HAL_GPIO_EXTI_Callback+0x78>)
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	601a      	str	r2, [r3, #0]
		upbutton = 0;
 800b3f2:	4b0f      	ldr	r3, [pc, #60]	@ (800b430 <HAL_GPIO_EXTI_Callback+0x7c>)
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	601a      	str	r2, [r3, #0]
		enter = 0;
 800b3f8:	4b0e      	ldr	r3, [pc, #56]	@ (800b434 <HAL_GPIO_EXTI_Callback+0x80>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	601a      	str	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_9)  // If the PA4 (UP) is pressed
 800b3fe:	88fb      	ldrh	r3, [r7, #6]
 800b400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b404:	d10b      	bne.n	800b41e <HAL_GPIO_EXTI_Callback+0x6a>
	{
		printf("up pressed\n\r");
 800b406:	480d      	ldr	r0, [pc, #52]	@ (800b43c <HAL_GPIO_EXTI_Callback+0x88>)
 800b408:	f00a fbf8 	bl	8015bfc <iprintf>
		downbutton = 0;
 800b40c:	4b07      	ldr	r3, [pc, #28]	@ (800b42c <HAL_GPIO_EXTI_Callback+0x78>)
 800b40e:	2200      	movs	r2, #0
 800b410:	601a      	str	r2, [r3, #0]
		upbutton = 1;  // upbutton set to 1 and others set to 0
 800b412:	4b07      	ldr	r3, [pc, #28]	@ (800b430 <HAL_GPIO_EXTI_Callback+0x7c>)
 800b414:	2201      	movs	r2, #1
 800b416:	601a      	str	r2, [r3, #0]
		enter = 0;
 800b418:	4b06      	ldr	r3, [pc, #24]	@ (800b434 <HAL_GPIO_EXTI_Callback+0x80>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	601a      	str	r2, [r3, #0]
	}
}
 800b41e:	bf00      	nop
 800b420:	3708      	adds	r7, #8
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	08018714 	.word	0x08018714
 800b42c:	2000023c 	.word	0x2000023c
 800b430:	20000240 	.word	0x20000240
 800b434:	20000244 	.word	0x20000244
 800b438:	08018724 	.word	0x08018724
 800b43c:	08018734 	.word	0x08018734

0800b440 <Menu_Handler>:

void Menu_Handler (void)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	af00      	add	r7, sp, #0
	  if (homemenu)  // If the Home Menu is called
 800b444:	4b9e      	ldr	r3, [pc, #632]	@ (800b6c0 <Menu_Handler+0x280>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f000 8088 	beq.w	800b55e <Menu_Handler+0x11e>
	  {
		  HomeMenu();  // Draw the Home Menu
 800b44e:	f7ff ff41 	bl	800b2d4 <HomeMenu>
		  while (homemenu)  // While the control is inside the Home Menu
 800b452:	e07e      	b.n	800b552 <Menu_Handler+0x112>
		  {
		  if (downbutton)  // if the down button is pressed
 800b454:	4b9b      	ldr	r3, [pc, #620]	@ (800b6c4 <Menu_Handler+0x284>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d028      	beq.n	800b4ae <Menu_Handler+0x6e>
		  {
			  HAL_Delay (200);  // wait for some time to avoid error click
 800b45c:	20c8      	movs	r0, #200	@ 0xc8
 800b45e:	f003 fcc1 	bl	800ede4 <HAL_Delay>
			  if (testbutton)  // if the "TEST ALL" button is already selected
 800b462:	4b99      	ldr	r3, [pc, #612]	@ (800b6c8 <Menu_Handler+0x288>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00a      	beq.n	800b480 <Menu_Handler+0x40>
			  {
				  Page2_Button_select();  // draw selected "PAGE 2" button
 800b46a:	f7ff fdc7 	bl	800affc <Page2_Button_select>
				  Test_Button_unselect(); // draw unselected "TEST ALL" button
 800b46e:	f7ff fd29 	bl	800aec4 <Test_Button_unselect>
				  downbutton = 0;  // reset the down button or else it will keep selecting in a loop
 800b472:	4b94      	ldr	r3, [pc, #592]	@ (800b6c4 <Menu_Handler+0x284>)
 800b474:	2200      	movs	r2, #0
 800b476:	601a      	str	r2, [r3, #0]
				  testbutton = 0;  // reset the test button also
 800b478:	4b93      	ldr	r3, [pc, #588]	@ (800b6c8 <Menu_Handler+0x288>)
 800b47a:	2200      	movs	r2, #0
 800b47c:	601a      	str	r2, [r3, #0]
 800b47e:	e068      	b.n	800b552 <Menu_Handler+0x112>
			  }

			  else if (page2button)  // If the "PAGE 2" button is selected
 800b480:	4b92      	ldr	r3, [pc, #584]	@ (800b6cc <Menu_Handler+0x28c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00a      	beq.n	800b49e <Menu_Handler+0x5e>
			  {
				  Page2_Button_unselect();  // draw unselected "PAGE 2" button
 800b488:	f7ff fd84 	bl	800af94 <Page2_Button_unselect>
				  Test_Button_select();  // draw selected "TEST ALL" button
 800b48c:	f7ff fd4e 	bl	800af2c <Test_Button_select>
				  downbutton = 0;  // reset the down button or else it will keep selecting in a loop
 800b490:	4b8c      	ldr	r3, [pc, #560]	@ (800b6c4 <Menu_Handler+0x284>)
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]
				  page2button = 0;  // reset the page 2 button
 800b496:	4b8d      	ldr	r3, [pc, #564]	@ (800b6cc <Menu_Handler+0x28c>)
 800b498:	2200      	movs	r2, #0
 800b49a:	601a      	str	r2, [r3, #0]
 800b49c:	e059      	b.n	800b552 <Menu_Handler+0x112>
			  }

			  else  // If none of the buttons are selected
			  {
				  Page2_Button_unselect();  // draw unselected "PAGE 2" button
 800b49e:	f7ff fd79 	bl	800af94 <Page2_Button_unselect>
				  Test_Button_select();  // draw selected "TEST ALL" button
 800b4a2:	f7ff fd43 	bl	800af2c <Test_Button_select>
				  downbutton = 0;  // reset the down button or else it will keep selecting in a loop
 800b4a6:	4b87      	ldr	r3, [pc, #540]	@ (800b6c4 <Menu_Handler+0x284>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	601a      	str	r2, [r3, #0]
 800b4ac:	e051      	b.n	800b552 <Menu_Handler+0x112>
			  }
		  }

		  else if (upbutton) // if the UP button is pressed
 800b4ae:	4b88      	ldr	r3, [pc, #544]	@ (800b6d0 <Menu_Handler+0x290>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d028      	beq.n	800b508 <Menu_Handler+0xc8>
		  {
			  HAL_Delay (200);
 800b4b6:	20c8      	movs	r0, #200	@ 0xc8
 800b4b8:	f003 fc94 	bl	800ede4 <HAL_Delay>
			  if (testbutton)  // If the "TEST ALL" is already selected
 800b4bc:	4b82      	ldr	r3, [pc, #520]	@ (800b6c8 <Menu_Handler+0x288>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00a      	beq.n	800b4da <Menu_Handler+0x9a>
			  {
				  // select the "PAGE 2" button and unselect the "TSET ALL" button
				  Page2_Button_select();
 800b4c4:	f7ff fd9a 	bl	800affc <Page2_Button_select>
				  Test_Button_unselect();
 800b4c8:	f7ff fcfc 	bl	800aec4 <Test_Button_unselect>
				  upbutton = 0;
 800b4cc:	4b80      	ldr	r3, [pc, #512]	@ (800b6d0 <Menu_Handler+0x290>)
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	601a      	str	r2, [r3, #0]
				  testbutton = 0;
 800b4d2:	4b7d      	ldr	r3, [pc, #500]	@ (800b6c8 <Menu_Handler+0x288>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	601a      	str	r2, [r3, #0]
 800b4d8:	e03b      	b.n	800b552 <Menu_Handler+0x112>
			  }

			  else if (page2button)  // If the "PAGE 2" button is already selected
 800b4da:	4b7c      	ldr	r3, [pc, #496]	@ (800b6cc <Menu_Handler+0x28c>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00a      	beq.n	800b4f8 <Menu_Handler+0xb8>
			  {
				  // select the "TEST ALL" button and unselect the "PAGE 2" button
				  Page2_Button_unselect();
 800b4e2:	f7ff fd57 	bl	800af94 <Page2_Button_unselect>
				  Test_Button_select();
 800b4e6:	f7ff fd21 	bl	800af2c <Test_Button_select>
				  upbutton = 0;
 800b4ea:	4b79      	ldr	r3, [pc, #484]	@ (800b6d0 <Menu_Handler+0x290>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	601a      	str	r2, [r3, #0]
				  page2button = 0;
 800b4f0:	4b76      	ldr	r3, [pc, #472]	@ (800b6cc <Menu_Handler+0x28c>)
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	601a      	str	r2, [r3, #0]
 800b4f6:	e02c      	b.n	800b552 <Menu_Handler+0x112>
			  }

			  else  // if none of the buttons are selected
			  {
				  // select the "PAGE 2" button and unselect the "TEST ALL" button
				  Page2_Button_select();
 800b4f8:	f7ff fd80 	bl	800affc <Page2_Button_select>
				  Test_Button_unselect();
 800b4fc:	f7ff fce2 	bl	800aec4 <Test_Button_unselect>
				  upbutton = 0;
 800b500:	4b73      	ldr	r3, [pc, #460]	@ (800b6d0 <Menu_Handler+0x290>)
 800b502:	2200      	movs	r2, #0
 800b504:	601a      	str	r2, [r3, #0]
 800b506:	e024      	b.n	800b552 <Menu_Handler+0x112>
			  }
		  }
		  else if (enter)  // if the ENTER button is pressed
 800b508:	4b72      	ldr	r3, [pc, #456]	@ (800b6d4 <Menu_Handler+0x294>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d020      	beq.n	800b552 <Menu_Handler+0x112>
		  {
			  if (testbutton)  // if the "TEST ALL" button is already pressed
 800b510:	4b6d      	ldr	r3, [pc, #436]	@ (800b6c8 <Menu_Handler+0x288>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00c      	beq.n	800b532 <Menu_Handler+0xf2>
			  {
				  testmenu = 1;  // Select the TestMenu
 800b518:	4b6f      	ldr	r3, [pc, #444]	@ (800b6d8 <Menu_Handler+0x298>)
 800b51a:	2201      	movs	r2, #1
 800b51c:	601a      	str	r2, [r3, #0]
				  homemenu = 0;  // Reset the HomeMenu
 800b51e:	4b68      	ldr	r3, [pc, #416]	@ (800b6c0 <Menu_Handler+0x280>)
 800b520:	2200      	movs	r2, #0
 800b522:	601a      	str	r2, [r3, #0]
				  enter = 0;  // reset the enter button or else it will keep selecting in a loop
 800b524:	4b6b      	ldr	r3, [pc, #428]	@ (800b6d4 <Menu_Handler+0x294>)
 800b526:	2200      	movs	r2, #0
 800b528:	601a      	str	r2, [r3, #0]
				  testbutton = 0;  // reset the down button
 800b52a:	4b67      	ldr	r3, [pc, #412]	@ (800b6c8 <Menu_Handler+0x288>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	601a      	str	r2, [r3, #0]
 800b530:	e00f      	b.n	800b552 <Menu_Handler+0x112>
			  }

			  else if (page2button)  // if the "PAGE 2" button is already pressed
 800b532:	4b66      	ldr	r3, [pc, #408]	@ (800b6cc <Menu_Handler+0x28c>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00b      	beq.n	800b552 <Menu_Handler+0x112>
			  {
				  page2menu = 1;  // Select the Page2Menu
 800b53a:	4b68      	ldr	r3, [pc, #416]	@ (800b6dc <Menu_Handler+0x29c>)
 800b53c:	2201      	movs	r2, #1
 800b53e:	601a      	str	r2, [r3, #0]
				  homemenu = 0;  // Reset the HomeMenu
 800b540:	4b5f      	ldr	r3, [pc, #380]	@ (800b6c0 <Menu_Handler+0x280>)
 800b542:	2200      	movs	r2, #0
 800b544:	601a      	str	r2, [r3, #0]
				  enter = 0;  // reset the enter button or else it will keep selecting in a loop
 800b546:	4b63      	ldr	r3, [pc, #396]	@ (800b6d4 <Menu_Handler+0x294>)
 800b548:	2200      	movs	r2, #0
 800b54a:	601a      	str	r2, [r3, #0]
				  page2button = 0;  // reset the up button
 800b54c:	4b5f      	ldr	r3, [pc, #380]	@ (800b6cc <Menu_Handler+0x28c>)
 800b54e:	2200      	movs	r2, #0
 800b550:	601a      	str	r2, [r3, #0]
		  while (homemenu)  // While the control is inside the Home Menu
 800b552:	4b5b      	ldr	r3, [pc, #364]	@ (800b6c0 <Menu_Handler+0x280>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	f47f af7c 	bne.w	800b454 <Menu_Handler+0x14>
				  }

			  }
		  }
	  }
}
 800b55c:	e119      	b.n	800b792 <Menu_Handler+0x352>
	  else if (testmenu)  // If the Test Menu is called
 800b55e:	4b5e      	ldr	r3, [pc, #376]	@ (800b6d8 <Menu_Handler+0x298>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d02e      	beq.n	800b5c4 <Menu_Handler+0x184>
		  TestMenu();  // Display the Test Menu
 800b566:	f7ff fed3 	bl	800b310 <TestMenu>
		  while (testmenu)  // While the control is in the Test Menu
 800b56a:	e026      	b.n	800b5ba <Menu_Handler+0x17a>
			  if (downbutton || upbutton)  // Since there is only a Back Button, so either up or down pressed, it will result the same
 800b56c:	4b55      	ldr	r3, [pc, #340]	@ (800b6c4 <Menu_Handler+0x284>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d103      	bne.n	800b57c <Menu_Handler+0x13c>
 800b574:	4b56      	ldr	r3, [pc, #344]	@ (800b6d0 <Menu_Handler+0x290>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00a      	beq.n	800b592 <Menu_Handler+0x152>
				  HAL_Delay (200);
 800b57c:	20c8      	movs	r0, #200	@ 0xc8
 800b57e:	f003 fc31 	bl	800ede4 <HAL_Delay>
				  back_Button_select();  // Draw selected Back button
 800b582:	f7ff fda3 	bl	800b0cc <back_Button_select>
				  downbutton=0;
 800b586:	4b4f      	ldr	r3, [pc, #316]	@ (800b6c4 <Menu_Handler+0x284>)
 800b588:	2200      	movs	r2, #0
 800b58a:	601a      	str	r2, [r3, #0]
				  upbutton = 0;
 800b58c:	4b50      	ldr	r3, [pc, #320]	@ (800b6d0 <Menu_Handler+0x290>)
 800b58e:	2200      	movs	r2, #0
 800b590:	601a      	str	r2, [r3, #0]
			  if (enter)  // If the enter is pressed
 800b592:	4b50      	ldr	r3, [pc, #320]	@ (800b6d4 <Menu_Handler+0x294>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00f      	beq.n	800b5ba <Menu_Handler+0x17a>
				  if (backbutton)  // If the Back button is selected
 800b59a:	4b51      	ldr	r3, [pc, #324]	@ (800b6e0 <Menu_Handler+0x2a0>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00b      	beq.n	800b5ba <Menu_Handler+0x17a>
					  homemenu = 1;  // Go back to the home menu
 800b5a2:	4b47      	ldr	r3, [pc, #284]	@ (800b6c0 <Menu_Handler+0x280>)
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	601a      	str	r2, [r3, #0]
					  testmenu = 0;  // Reset every other menu
 800b5a8:	4b4b      	ldr	r3, [pc, #300]	@ (800b6d8 <Menu_Handler+0x298>)
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	601a      	str	r2, [r3, #0]
					  backbutton = 0;
 800b5ae:	4b4c      	ldr	r3, [pc, #304]	@ (800b6e0 <Menu_Handler+0x2a0>)
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	601a      	str	r2, [r3, #0]
					  enter = 0;
 800b5b4:	4b47      	ldr	r3, [pc, #284]	@ (800b6d4 <Menu_Handler+0x294>)
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	601a      	str	r2, [r3, #0]
		  while (testmenu)  // While the control is in the Test Menu
 800b5ba:	4b47      	ldr	r3, [pc, #284]	@ (800b6d8 <Menu_Handler+0x298>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d1d4      	bne.n	800b56c <Menu_Handler+0x12c>
}
 800b5c2:	e0e6      	b.n	800b792 <Menu_Handler+0x352>
	  else if (page2menu)  // If the Page 2 Menu is called
 800b5c4:	4b45      	ldr	r3, [pc, #276]	@ (800b6dc <Menu_Handler+0x29c>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f000 80e2 	beq.w	800b792 <Menu_Handler+0x352>
		  Page2Menu();  // Display the Page 2 Menu
 800b5ce:	f7ff fed1 	bl	800b374 <Page2Menu>
		  while (page2menu)  // While the control is in the Page Menu
 800b5d2:	e0d9      	b.n	800b788 <Menu_Handler+0x348>
			  if (downbutton)  // If down button is pressed
 800b5d4:	4b3b      	ldr	r3, [pc, #236]	@ (800b6c4 <Menu_Handler+0x284>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d036      	beq.n	800b64a <Menu_Handler+0x20a>
				  HAL_Delay (200);
 800b5dc:	20c8      	movs	r0, #200	@ 0xc8
 800b5de:	f003 fc01 	bl	800ede4 <HAL_Delay>
				  if (ledonbutton)  // If the "LED ON" is selected
 800b5e2:	4b40      	ldr	r3, [pc, #256]	@ (800b6e4 <Menu_Handler+0x2a4>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d009      	beq.n	800b5fe <Menu_Handler+0x1be>
					  ledon_Button_unselect();  // Unselect "LED ON"
 800b5ea:	f7ff fda3 	bl	800b134 <ledon_Button_unselect>
					  back_Button_unselect();  // unselect "GO BACK"
 800b5ee:	f7ff fd39 	bl	800b064 <back_Button_unselect>
					  ledoff_Button_select();  // select "LED OFF"
 800b5f2:	f7ff fe3b 	bl	800b26c <ledoff_Button_select>
					  downbutton = 0;  // Reset the down button
 800b5f6:	4b33      	ldr	r3, [pc, #204]	@ (800b6c4 <Menu_Handler+0x284>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]
 800b5fc:	e0c4      	b.n	800b788 <Menu_Handler+0x348>
				  else if (ledoffbutton)
 800b5fe:	4b3a      	ldr	r3, [pc, #232]	@ (800b6e8 <Menu_Handler+0x2a8>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d009      	beq.n	800b61a <Menu_Handler+0x1da>
					  ledoff_Button_unselect();
 800b606:	f7ff fdfd 	bl	800b204 <ledoff_Button_unselect>
					  back_Button_select();
 800b60a:	f7ff fd5f 	bl	800b0cc <back_Button_select>
					  ledon_Button_unselect();
 800b60e:	f7ff fd91 	bl	800b134 <ledon_Button_unselect>
					  downbutton = 0;
 800b612:	4b2c      	ldr	r3, [pc, #176]	@ (800b6c4 <Menu_Handler+0x284>)
 800b614:	2200      	movs	r2, #0
 800b616:	601a      	str	r2, [r3, #0]
 800b618:	e0b6      	b.n	800b788 <Menu_Handler+0x348>
				  else if (backbutton)
 800b61a:	4b31      	ldr	r3, [pc, #196]	@ (800b6e0 <Menu_Handler+0x2a0>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d009      	beq.n	800b636 <Menu_Handler+0x1f6>
					  ledoff_Button_unselect();
 800b622:	f7ff fdef 	bl	800b204 <ledoff_Button_unselect>
					  back_Button_unselect();
 800b626:	f7ff fd1d 	bl	800b064 <back_Button_unselect>
					  ledon_Button_select();
 800b62a:	f7ff fdb7 	bl	800b19c <ledon_Button_select>
					  downbutton = 0;
 800b62e:	4b25      	ldr	r3, [pc, #148]	@ (800b6c4 <Menu_Handler+0x284>)
 800b630:	2200      	movs	r2, #0
 800b632:	601a      	str	r2, [r3, #0]
 800b634:	e0a8      	b.n	800b788 <Menu_Handler+0x348>
					  ledoff_Button_unselect();
 800b636:	f7ff fde5 	bl	800b204 <ledoff_Button_unselect>
					  back_Button_unselect();
 800b63a:	f7ff fd13 	bl	800b064 <back_Button_unselect>
					  ledon_Button_select();
 800b63e:	f7ff fdad 	bl	800b19c <ledon_Button_select>
					  downbutton = 0;
 800b642:	4b20      	ldr	r3, [pc, #128]	@ (800b6c4 <Menu_Handler+0x284>)
 800b644:	2200      	movs	r2, #0
 800b646:	601a      	str	r2, [r3, #0]
 800b648:	e09e      	b.n	800b788 <Menu_Handler+0x348>
			  else if (upbutton)
 800b64a:	4b21      	ldr	r3, [pc, #132]	@ (800b6d0 <Menu_Handler+0x290>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d04c      	beq.n	800b6ec <Menu_Handler+0x2ac>
				  HAL_Delay (200);
 800b652:	20c8      	movs	r0, #200	@ 0xc8
 800b654:	f003 fbc6 	bl	800ede4 <HAL_Delay>
				  if (ledonbutton)
 800b658:	4b22      	ldr	r3, [pc, #136]	@ (800b6e4 <Menu_Handler+0x2a4>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d009      	beq.n	800b674 <Menu_Handler+0x234>
					  ledon_Button_unselect();
 800b660:	f7ff fd68 	bl	800b134 <ledon_Button_unselect>
					  back_Button_select();
 800b664:	f7ff fd32 	bl	800b0cc <back_Button_select>
					  ledoff_Button_unselect();
 800b668:	f7ff fdcc 	bl	800b204 <ledoff_Button_unselect>
					  upbutton = 0;
 800b66c:	4b18      	ldr	r3, [pc, #96]	@ (800b6d0 <Menu_Handler+0x290>)
 800b66e:	2200      	movs	r2, #0
 800b670:	601a      	str	r2, [r3, #0]
 800b672:	e089      	b.n	800b788 <Menu_Handler+0x348>
				  else if (ledoffbutton)
 800b674:	4b1c      	ldr	r3, [pc, #112]	@ (800b6e8 <Menu_Handler+0x2a8>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d009      	beq.n	800b690 <Menu_Handler+0x250>
					  ledoff_Button_unselect();
 800b67c:	f7ff fdc2 	bl	800b204 <ledoff_Button_unselect>
					  back_Button_unselect();
 800b680:	f7ff fcf0 	bl	800b064 <back_Button_unselect>
					  ledon_Button_select();
 800b684:	f7ff fd8a 	bl	800b19c <ledon_Button_select>
					  upbutton = 0;
 800b688:	4b11      	ldr	r3, [pc, #68]	@ (800b6d0 <Menu_Handler+0x290>)
 800b68a:	2200      	movs	r2, #0
 800b68c:	601a      	str	r2, [r3, #0]
 800b68e:	e07b      	b.n	800b788 <Menu_Handler+0x348>
				  else if (backbutton)
 800b690:	4b13      	ldr	r3, [pc, #76]	@ (800b6e0 <Menu_Handler+0x2a0>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d009      	beq.n	800b6ac <Menu_Handler+0x26c>
					  ledoff_Button_select();
 800b698:	f7ff fde8 	bl	800b26c <ledoff_Button_select>
					  back_Button_unselect();
 800b69c:	f7ff fce2 	bl	800b064 <back_Button_unselect>
					  ledon_Button_unselect();
 800b6a0:	f7ff fd48 	bl	800b134 <ledon_Button_unselect>
					  upbutton = 0;
 800b6a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b6d0 <Menu_Handler+0x290>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	e06d      	b.n	800b788 <Menu_Handler+0x348>
					  back_Button_select();
 800b6ac:	f7ff fd0e 	bl	800b0cc <back_Button_select>
					  ledoff_Button_unselect();
 800b6b0:	f7ff fda8 	bl	800b204 <ledoff_Button_unselect>
					  ledon_Button_unselect();
 800b6b4:	f7ff fd3e 	bl	800b134 <ledon_Button_unselect>
					  upbutton = 0;
 800b6b8:	4b05      	ldr	r3, [pc, #20]	@ (800b6d0 <Menu_Handler+0x290>)
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	601a      	str	r2, [r3, #0]
 800b6be:	e063      	b.n	800b788 <Menu_Handler+0x348>
 800b6c0:	2000021c 	.word	0x2000021c
 800b6c4:	2000023c 	.word	0x2000023c
 800b6c8:	20000228 	.word	0x20000228
 800b6cc:	2000022c 	.word	0x2000022c
 800b6d0:	20000240 	.word	0x20000240
 800b6d4:	20000244 	.word	0x20000244
 800b6d8:	20000224 	.word	0x20000224
 800b6dc:	20000220 	.word	0x20000220
 800b6e0:	20000230 	.word	0x20000230
 800b6e4:	20000234 	.word	0x20000234
 800b6e8:	20000238 	.word	0x20000238
			  else if (enter)
 800b6ec:	4b2a      	ldr	r3, [pc, #168]	@ (800b798 <Menu_Handler+0x358>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d049      	beq.n	800b788 <Menu_Handler+0x348>
				  if (ledonbutton)  // If "LED ON" is selected
 800b6f4:	4b29      	ldr	r3, [pc, #164]	@ (800b79c <Menu_Handler+0x35c>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d018      	beq.n	800b72e <Menu_Handler+0x2ee>
					  HAL_GPIO_WritePin(TOUCH_LED1_GPIO_Port, TOUCH_LED1_Pin, GPIO_PIN_SET);  // Turn the LED ON
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	2108      	movs	r1, #8
 800b700:	4827      	ldr	r0, [pc, #156]	@ (800b7a0 <Menu_Handler+0x360>)
 800b702:	f003 feb3 	bl	800f46c <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(TOUCH_LED2_GPIO_Port, TOUCH_LED2_Pin, GPIO_PIN_SET);
 800b706:	2201      	movs	r2, #1
 800b708:	2104      	movs	r1, #4
 800b70a:	4825      	ldr	r0, [pc, #148]	@ (800b7a0 <Menu_Handler+0x360>)
 800b70c:	f003 feae 	bl	800f46c <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin, GPIO_PIN_SET);
 800b710:	2201      	movs	r2, #1
 800b712:	2102      	movs	r1, #2
 800b714:	4823      	ldr	r0, [pc, #140]	@ (800b7a4 <Menu_Handler+0x364>)
 800b716:	f003 fea9 	bl	800f46c <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(TOUCH_LED4_GPIO_Port, TOUCH_LED4_Pin, GPIO_PIN_SET);
 800b71a:	2201      	movs	r2, #1
 800b71c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b720:	4821      	ldr	r0, [pc, #132]	@ (800b7a8 <Menu_Handler+0x368>)
 800b722:	f003 fea3 	bl	800f46c <HAL_GPIO_WritePin>
					  enter = 0;
 800b726:	4b1c      	ldr	r3, [pc, #112]	@ (800b798 <Menu_Handler+0x358>)
 800b728:	2200      	movs	r2, #0
 800b72a:	601a      	str	r2, [r3, #0]
 800b72c:	e02c      	b.n	800b788 <Menu_Handler+0x348>
				  else if (ledoffbutton)  // If "LED OFF" is selected
 800b72e:	4b1f      	ldr	r3, [pc, #124]	@ (800b7ac <Menu_Handler+0x36c>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d018      	beq.n	800b768 <Menu_Handler+0x328>
					  HAL_GPIO_WritePin(TOUCH_LED1_GPIO_Port, TOUCH_LED1_Pin, GPIO_PIN_RESET);  // Turn the LED OFF
 800b736:	2200      	movs	r2, #0
 800b738:	2108      	movs	r1, #8
 800b73a:	4819      	ldr	r0, [pc, #100]	@ (800b7a0 <Menu_Handler+0x360>)
 800b73c:	f003 fe96 	bl	800f46c <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(TOUCH_LED2_GPIO_Port, TOUCH_LED2_Pin, GPIO_PIN_RESET);
 800b740:	2200      	movs	r2, #0
 800b742:	2104      	movs	r1, #4
 800b744:	4816      	ldr	r0, [pc, #88]	@ (800b7a0 <Menu_Handler+0x360>)
 800b746:	f003 fe91 	bl	800f46c <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin, GPIO_PIN_RESET);
 800b74a:	2200      	movs	r2, #0
 800b74c:	2102      	movs	r1, #2
 800b74e:	4815      	ldr	r0, [pc, #84]	@ (800b7a4 <Menu_Handler+0x364>)
 800b750:	f003 fe8c 	bl	800f46c <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(TOUCH_LED4_GPIO_Port, TOUCH_LED4_Pin, GPIO_PIN_RESET);
 800b754:	2200      	movs	r2, #0
 800b756:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b75a:	4813      	ldr	r0, [pc, #76]	@ (800b7a8 <Menu_Handler+0x368>)
 800b75c:	f003 fe86 	bl	800f46c <HAL_GPIO_WritePin>
					  enter = 0;
 800b760:	4b0d      	ldr	r3, [pc, #52]	@ (800b798 <Menu_Handler+0x358>)
 800b762:	2200      	movs	r2, #0
 800b764:	601a      	str	r2, [r3, #0]
 800b766:	e00f      	b.n	800b788 <Menu_Handler+0x348>
				  else if (backbutton)  // If "GO BACK" is selected
 800b768:	4b11      	ldr	r3, [pc, #68]	@ (800b7b0 <Menu_Handler+0x370>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d00b      	beq.n	800b788 <Menu_Handler+0x348>
					  homemenu = 1;  // Go back to the home menu
 800b770:	4b10      	ldr	r3, [pc, #64]	@ (800b7b4 <Menu_Handler+0x374>)
 800b772:	2201      	movs	r2, #1
 800b774:	601a      	str	r2, [r3, #0]
					  page2menu = 0;
 800b776:	4b10      	ldr	r3, [pc, #64]	@ (800b7b8 <Menu_Handler+0x378>)
 800b778:	2200      	movs	r2, #0
 800b77a:	601a      	str	r2, [r3, #0]
					  backbutton = 0;
 800b77c:	4b0c      	ldr	r3, [pc, #48]	@ (800b7b0 <Menu_Handler+0x370>)
 800b77e:	2200      	movs	r2, #0
 800b780:	601a      	str	r2, [r3, #0]
					  enter = 0;
 800b782:	4b05      	ldr	r3, [pc, #20]	@ (800b798 <Menu_Handler+0x358>)
 800b784:	2200      	movs	r2, #0
 800b786:	601a      	str	r2, [r3, #0]
		  while (page2menu)  // While the control is in the Page Menu
 800b788:	4b0b      	ldr	r3, [pc, #44]	@ (800b7b8 <Menu_Handler+0x378>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f47f af21 	bne.w	800b5d4 <Menu_Handler+0x194>
}
 800b792:	bf00      	nop
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	20000244 	.word	0x20000244
 800b79c:	20000234 	.word	0x20000234
 800b7a0:	40020800 	.word	0x40020800
 800b7a4:	40021c00 	.word	0x40021c00
 800b7a8:	40020400 	.word	0x40020400
 800b7ac:	20000238 	.word	0x20000238
 800b7b0:	20000230 	.word	0x20000230
 800b7b4:	2000021c 	.word	0x2000021c
 800b7b8:	20000220 	.word	0x20000220

0800b7bc <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b085      	sub	sp, #20
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d002      	beq.n	800b7d2 <case_insensitive_strcmp+0x16>
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d101      	bne.n	800b7d6 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e056      	b.n	800b884 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d10d      	bne.n	800b7fa <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	e050      	b.n	800b884 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d101      	bne.n	800b7ee <case_insensitive_strcmp+0x32>
        {
            return 0;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	e04a      	b.n	800b884 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	607b      	str	r3, [r7, #4]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	603b      	str	r3, [r7, #0]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	73fb      	strb	r3, [r7, #15]
 800b800:	7bfb      	ldrb	r3, [r7, #15]
 800b802:	3301      	adds	r3, #1
 800b804:	4a22      	ldr	r2, [pc, #136]	@ (800b890 <case_insensitive_strcmp+0xd4>)
 800b806:	4413      	add	r3, r2
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	f003 0303 	and.w	r3, r3, #3
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d103      	bne.n	800b81a <case_insensitive_strcmp+0x5e>
 800b812:	7bfb      	ldrb	r3, [r7, #15]
 800b814:	f103 0220 	add.w	r2, r3, #32
 800b818:	e000      	b.n	800b81c <case_insensitive_strcmp+0x60>
 800b81a:	7bfa      	ldrb	r2, [r7, #15]
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	73bb      	strb	r3, [r7, #14]
 800b822:	7bbb      	ldrb	r3, [r7, #14]
 800b824:	3301      	adds	r3, #1
 800b826:	491a      	ldr	r1, [pc, #104]	@ (800b890 <case_insensitive_strcmp+0xd4>)
 800b828:	440b      	add	r3, r1
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	f003 0303 	and.w	r3, r3, #3
 800b830:	2b01      	cmp	r3, #1
 800b832:	d102      	bne.n	800b83a <case_insensitive_strcmp+0x7e>
 800b834:	7bbb      	ldrb	r3, [r7, #14]
 800b836:	3320      	adds	r3, #32
 800b838:	e000      	b.n	800b83c <case_insensitive_strcmp+0x80>
 800b83a:	7bbb      	ldrb	r3, [r7, #14]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d0d0      	beq.n	800b7e2 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	737b      	strb	r3, [r7, #13]
 800b846:	7b7b      	ldrb	r3, [r7, #13]
 800b848:	3301      	adds	r3, #1
 800b84a:	4a11      	ldr	r2, [pc, #68]	@ (800b890 <case_insensitive_strcmp+0xd4>)
 800b84c:	4413      	add	r3, r2
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	f003 0303 	and.w	r3, r3, #3
 800b854:	2b01      	cmp	r3, #1
 800b856:	d103      	bne.n	800b860 <case_insensitive_strcmp+0xa4>
 800b858:	7b7b      	ldrb	r3, [r7, #13]
 800b85a:	f103 0220 	add.w	r2, r3, #32
 800b85e:	e000      	b.n	800b862 <case_insensitive_strcmp+0xa6>
 800b860:	7b7a      	ldrb	r2, [r7, #13]
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	733b      	strb	r3, [r7, #12]
 800b868:	7b3b      	ldrb	r3, [r7, #12]
 800b86a:	3301      	adds	r3, #1
 800b86c:	4908      	ldr	r1, [pc, #32]	@ (800b890 <case_insensitive_strcmp+0xd4>)
 800b86e:	440b      	add	r3, r1
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	f003 0303 	and.w	r3, r3, #3
 800b876:	2b01      	cmp	r3, #1
 800b878:	d102      	bne.n	800b880 <case_insensitive_strcmp+0xc4>
 800b87a:	7b3b      	ldrb	r3, [r7, #12]
 800b87c:	3320      	adds	r3, #32
 800b87e:	e000      	b.n	800b882 <case_insensitive_strcmp+0xc6>
 800b880:	7b3b      	ldrb	r3, [r7, #12]
 800b882:	1ad3      	subs	r3, r2, r3
}
 800b884:	4618      	mov	r0, r3
 800b886:	3714      	adds	r7, #20
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr
 800b890:	0801a088 	.word	0x0801a088

0800b894 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d101      	bne.n	800b8b0 <cJSON_strdup+0x1c>
    {
        return NULL;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	e015      	b.n	800b8dc <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f7fc fcb7 	bl	8008224 <strlen>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	4798      	blx	r3
 800b8c4:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d101      	bne.n	800b8d0 <cJSON_strdup+0x3c>
    {
        return NULL;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	e005      	b.n	800b8dc <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 800b8d0:	68fa      	ldr	r2, [r7, #12]
 800b8d2:	6879      	ldr	r1, [r7, #4]
 800b8d4:	68b8      	ldr	r0, [r7, #8]
 800b8d6:	f00a fbfc 	bl	80160d2 <memcpy>

    return copy;
 800b8da:	68bb      	ldr	r3, [r7, #8]
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3710      	adds	r7, #16
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2028      	movs	r0, #40	@ 0x28
 800b8f2:	4798      	blx	r3
 800b8f4:	60f8      	str	r0, [r7, #12]
    if (node)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d004      	beq.n	800b906 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800b8fc:	2228      	movs	r2, #40	@ 0x28
 800b8fe:	2100      	movs	r1, #0
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f00a fb49 	bl	8015f98 <memset>
    }

    return node;
 800b906:	68fb      	ldr	r3, [r7, #12]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3710      	adds	r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800b918:	2300      	movs	r3, #0
 800b91a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800b91c:	e03d      	b.n	800b99a <cJSON_Delete+0x8a>
    {
        next = item->next;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d108      	bne.n	800b942 <cJSON_Delete+0x32>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d004      	beq.n	800b942 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7ff ffe7 	bl	800b910 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d10c      	bne.n	800b968 <cJSON_Delete+0x58>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	691b      	ldr	r3, [r3, #16]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d008      	beq.n	800b968 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 800b956:	4b15      	ldr	r3, [pc, #84]	@ (800b9ac <cJSON_Delete+0x9c>)
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	6912      	ldr	r2, [r2, #16]
 800b95e:	4610      	mov	r0, r2
 800b960:	4798      	blx	r3
            item->valuestring = NULL;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10c      	bne.n	800b98e <cJSON_Delete+0x7e>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6a1b      	ldr	r3, [r3, #32]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d008      	beq.n	800b98e <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 800b97c:	4b0b      	ldr	r3, [pc, #44]	@ (800b9ac <cJSON_Delete+0x9c>)
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	6a12      	ldr	r2, [r2, #32]
 800b984:	4610      	mov	r0, r2
 800b986:	4798      	blx	r3
            item->string = NULL;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 800b98e:	4b07      	ldr	r3, [pc, #28]	@ (800b9ac <cJSON_Delete+0x9c>)
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	4798      	blx	r3
        item = next;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1be      	bne.n	800b91e <cJSON_Delete+0xe>
    }
}
 800b9a0:	bf00      	nop
 800b9a2:	bf00      	nop
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	20000000 	.word	0x20000000

0800b9b0 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800b9b4:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b098      	sub	sp, #96	@ 0x60
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
    double number = 0;
 800b9ca:	f04f 0200 	mov.w	r2, #0
 800b9ce:	f04f 0300 	mov.w	r3, #0
 800b9d2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800b9da:	f7ff ffe9 	bl	800b9b0 <get_decimal_point>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d003      	beq.n	800b9f6 <parse_number+0x36>
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d101      	bne.n	800b9fa <parse_number+0x3a>
    {
        return false;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	e0a0      	b.n	800bb3c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b9fe:	e03d      	b.n	800ba7c <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	6899      	ldr	r1, [r3, #8]
 800ba08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba0a:	440b      	add	r3, r1
 800ba0c:	4413      	add	r3, r2
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	2b45      	cmp	r3, #69	@ 0x45
 800ba12:	dc17      	bgt.n	800ba44 <parse_number+0x84>
 800ba14:	2b2b      	cmp	r3, #43	@ 0x2b
 800ba16:	db40      	blt.n	800ba9a <parse_number+0xda>
 800ba18:	3b2b      	subs	r3, #43	@ 0x2b
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	409a      	lsls	r2, r3
 800ba1e:	4b4c      	ldr	r3, [pc, #304]	@ (800bb50 <parse_number+0x190>)
 800ba20:	4013      	ands	r3, r2
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	bf14      	ite	ne
 800ba26:	2301      	movne	r3, #1
 800ba28:	2300      	moveq	r3, #0
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d10b      	bne.n	800ba48 <parse_number+0x88>
 800ba30:	f002 0308 	and.w	r3, r2, #8
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	bf14      	ite	ne
 800ba38:	2301      	movne	r3, #1
 800ba3a:	2300      	moveq	r3, #0
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d111      	bne.n	800ba66 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800ba42:	e02a      	b.n	800ba9a <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800ba44:	2b65      	cmp	r3, #101	@ 0x65
 800ba46:	d128      	bne.n	800ba9a <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	6899      	ldr	r1, [r3, #8]
 800ba50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba52:	440b      	add	r3, r1
 800ba54:	4413      	add	r3, r2
 800ba56:	7819      	ldrb	r1, [r3, #0]
 800ba58:	f107 0208 	add.w	r2, r7, #8
 800ba5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba5e:	4413      	add	r3, r2
 800ba60:	460a      	mov	r2, r1
 800ba62:	701a      	strb	r2, [r3, #0]
                break;
 800ba64:	e007      	b.n	800ba76 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800ba66:	f107 0208 	add.w	r2, r7, #8
 800ba6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba6c:	4413      	add	r3, r2
 800ba6e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800ba72:	701a      	strb	r2, [r3, #0]
                break;
 800ba74:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800ba76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba78:	3301      	adds	r3, #1
 800ba7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba7e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ba80:	d80d      	bhi.n	800ba9e <parse_number+0xde>
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00a      	beq.n	800ba9e <parse_number+0xde>
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	689a      	ldr	r2, [r3, #8]
 800ba8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba8e:	441a      	add	r2, r3
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d3b3      	bcc.n	800ba00 <parse_number+0x40>
        }
    }
loop_end:
 800ba98:	e001      	b.n	800ba9e <parse_number+0xde>
                goto loop_end;
 800ba9a:	bf00      	nop
 800ba9c:	e000      	b.n	800baa0 <parse_number+0xe0>
loop_end:
 800ba9e:	bf00      	nop
    number_c_string[i] = '\0';
 800baa0:	f107 0208 	add.w	r2, r7, #8
 800baa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800baa6:	4413      	add	r3, r2
 800baa8:	2200      	movs	r2, #0
 800baaa:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800baac:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800bab0:	f107 0308 	add.w	r3, r7, #8
 800bab4:	4611      	mov	r1, r2
 800bab6:	4618      	mov	r0, r3
 800bab8:	f009 ffd2 	bl	8015a60 <strtod>
 800babc:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 800bac0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bac2:	f107 0308 	add.w	r3, r7, #8
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d101      	bne.n	800bace <parse_number+0x10e>
    {
        return false; /* parse_error */
 800baca:	2300      	movs	r3, #0
 800bacc:	e036      	b.n	800bb3c <parse_number+0x17c>
    }

    item->valuedouble = number;
 800bace:	6879      	ldr	r1, [r7, #4]
 800bad0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800bad4:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800bad8:	a31b      	add	r3, pc, #108	@ (adr r3, 800bb48 <parse_number+0x188>)
 800bada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bade:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800bae2:	f7fd f83f 	bl	8008b64 <__aeabi_dcmpge>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d004      	beq.n	800baf6 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800baf2:	615a      	str	r2, [r3, #20]
 800baf4:	e015      	b.n	800bb22 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800baf6:	f04f 0200 	mov.w	r2, #0
 800bafa:	4b16      	ldr	r3, [pc, #88]	@ (800bb54 <parse_number+0x194>)
 800bafc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800bb00:	f7fd f826 	bl	8008b50 <__aeabi_dcmple>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d004      	beq.n	800bb14 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bb10:	615a      	str	r2, [r3, #20]
 800bb12:	e006      	b.n	800bb22 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800bb14:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800bb18:	f7fd f84e 	bl	8008bb8 <__aeabi_d2iz>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2208      	movs	r2, #8
 800bb26:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	689b      	ldr	r3, [r3, #8]
 800bb2c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800bb2e:	f107 0208 	add.w	r2, r7, #8
 800bb32:	1a8a      	subs	r2, r1, r2
 800bb34:	441a      	add	r2, r3
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	609a      	str	r2, [r3, #8]
    return true;
 800bb3a:	2301      	movs	r3, #1
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3760      	adds	r7, #96	@ 0x60
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	f3af 8000 	nop.w
 800bb48:	ffc00000 	.word	0xffc00000
 800bb4c:	41dfffff 	.word	0x41dfffff
 800bb50:	04007fe5 	.word	0x04007fe5
 800bb54:	c1e00000 	.word	0xc1e00000

0800bb58 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800bb62:	2300      	movs	r3, #0
 800bb64:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800bb66:	2300      	movs	r3, #0
 800bb68:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d003      	beq.n	800bb78 <ensure+0x20>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d101      	bne.n	800bb7c <ensure+0x24>
    {
        return NULL;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	e083      	b.n	800bc84 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d007      	beq.n	800bb94 <ensure+0x3c>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	689a      	ldr	r2, [r3, #8]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d301      	bcc.n	800bb94 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800bb90:	2300      	movs	r3, #0
 800bb92:	e077      	b.n	800bc84 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	da01      	bge.n	800bb9e <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	e072      	b.n	800bc84 <ensure+0x12c>
    }

    needed += p->offset + 1;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	689a      	ldr	r2, [r3, #8]
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	4413      	add	r3, r2
 800bba6:	3301      	adds	r3, #1
 800bba8:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	683a      	ldr	r2, [r7, #0]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d805      	bhi.n	800bbc0 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681a      	ldr	r2, [r3, #0]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	e061      	b.n	800bc84 <ensure+0x12c>
    }

    if (p->noalloc) {
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	691b      	ldr	r3, [r3, #16]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d001      	beq.n	800bbcc <ensure+0x74>
        return NULL;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	e05b      	b.n	800bc84 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbd2:	d308      	bcc.n	800bbe6 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	db03      	blt.n	800bbe2 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800bbda:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800bbde:	60bb      	str	r3, [r7, #8]
 800bbe0:	e004      	b.n	800bbec <ensure+0x94>
        }
        else
        {
            return NULL;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	e04e      	b.n	800bc84 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	005b      	lsls	r3, r3, #1
 800bbea:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6a1b      	ldr	r3, [r3, #32]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d018      	beq.n	800bc26 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6a1b      	ldr	r3, [r3, #32]
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	6812      	ldr	r2, [r2, #0]
 800bbfc:	68b9      	ldr	r1, [r7, #8]
 800bbfe:	4610      	mov	r0, r2
 800bc00:	4798      	blx	r3
 800bc02:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d132      	bne.n	800bc70 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	69db      	ldr	r3, [r3, #28]
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	6812      	ldr	r2, [r2, #0]
 800bc12:	4610      	mov	r0, r2
 800bc14:	4798      	blx	r3
            p->length = 0;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	601a      	str	r2, [r3, #0]

            return NULL;
 800bc22:	2300      	movs	r3, #0
 800bc24:	e02e      	b.n	800bc84 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	699b      	ldr	r3, [r3, #24]
 800bc2a:	68b8      	ldr	r0, [r7, #8]
 800bc2c:	4798      	blx	r3
 800bc2e:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d10d      	bne.n	800bc52 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	69db      	ldr	r3, [r3, #28]
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	6812      	ldr	r2, [r2, #0]
 800bc3e:	4610      	mov	r0, r2
 800bc40:	4798      	blx	r3
            p->length = 0;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	601a      	str	r2, [r3, #0]

            return NULL;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	e018      	b.n	800bc84 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6819      	ldr	r1, [r3, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f00a fa37 	bl	80160d2 <memcpy>
        p->hooks.deallocate(p->buffer);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	69db      	ldr	r3, [r3, #28]
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	6812      	ldr	r2, [r2, #0]
 800bc6c:	4610      	mov	r0, r2
 800bc6e:	4798      	blx	r3
    }
    p->length = newsize;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	68fa      	ldr	r2, [r7, #12]
 800bc82:	4413      	add	r3, r2
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3710      	adds	r7, #16
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800bc8c:	b590      	push	{r4, r7, lr}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 800bc94:	2300      	movs	r3, #0
 800bc96:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d013      	beq.n	800bcc6 <update_offset+0x3a>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00f      	beq.n	800bcc6 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	4413      	add	r3, r2
 800bcb0:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	689c      	ldr	r4, [r3, #8]
 800bcb6:	68f8      	ldr	r0, [r7, #12]
 800bcb8:	f7fc fab4 	bl	8008224 <strlen>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	18e2      	adds	r2, r4, r3
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	609a      	str	r2, [r3, #8]
 800bcc4:	e000      	b.n	800bcc8 <update_offset+0x3c>
        return;
 800bcc6:	bf00      	nop
}
 800bcc8:	3714      	adds	r7, #20
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd90      	pop	{r4, r7, pc}
	...

0800bcd0 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 800bcd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bcd4:	b087      	sub	sp, #28
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	ed87 0b02 	vstr	d0, [r7, #8]
 800bcdc:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 800bce0:	68b8      	ldr	r0, [r7, #8]
 800bce2:	68fe      	ldr	r6, [r7, #12]
 800bce4:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 800bce8:	683a      	ldr	r2, [r7, #0]
 800bcea:	687e      	ldr	r6, [r7, #4]
 800bcec:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bcf0:	f7fc ff42 	bl	8008b78 <__aeabi_dcmpgt>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d004      	beq.n	800bd04 <compare_double+0x34>
 800bcfa:	68bc      	ldr	r4, [r7, #8]
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800bd02:	e003      	b.n	800bd0c <compare_double+0x3c>
 800bd04:	683c      	ldr	r4, [r7, #0]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800bd0c:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 800bd10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bd18:	f7fc fae6 	bl	80082e8 <__aeabi_dsub>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	460b      	mov	r3, r1
 800bd20:	4690      	mov	r8, r2
 800bd22:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800bd26:	f04f 0200 	mov.w	r2, #0
 800bd2a:	4b0c      	ldr	r3, [pc, #48]	@ (800bd5c <compare_double+0x8c>)
 800bd2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bd30:	f7fc fc92 	bl	8008658 <__aeabi_dmul>
 800bd34:	4602      	mov	r2, r0
 800bd36:	460b      	mov	r3, r1
 800bd38:	2101      	movs	r1, #1
 800bd3a:	460c      	mov	r4, r1
 800bd3c:	4640      	mov	r0, r8
 800bd3e:	4649      	mov	r1, r9
 800bd40:	f7fc ff06 	bl	8008b50 <__aeabi_dcmple>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d101      	bne.n	800bd4e <compare_double+0x7e>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	461c      	mov	r4, r3
 800bd4e:	b2e3      	uxtb	r3, r4
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	371c      	adds	r7, #28
 800bd54:	46bd      	mov	sp, r7
 800bd56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd5a:	bf00      	nop
 800bd5c:	3cb00000 	.word	0x3cb00000

0800bd60 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 800bd60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd62:	b093      	sub	sp, #76	@ 0x4c
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800bd74:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 800bd80:	f107 0314 	add.w	r3, r7, #20
 800bd84:	2200      	movs	r2, #0
 800bd86:	601a      	str	r2, [r3, #0]
 800bd88:	605a      	str	r2, [r3, #4]
 800bd8a:	609a      	str	r2, [r3, #8]
 800bd8c:	60da      	str	r2, [r3, #12]
 800bd8e:	611a      	str	r2, [r3, #16]
 800bd90:	615a      	str	r2, [r3, #20]
 800bd92:	831a      	strh	r2, [r3, #24]
    unsigned char decimal_point = get_decimal_point();
 800bd94:	f7ff fe0c 	bl	800b9b0 <get_decimal_point>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 800bd9e:	f04f 0200 	mov.w	r2, #0
 800bda2:	f04f 0300 	mov.w	r3, #0
 800bda6:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d101      	bne.n	800bdb4 <print_number+0x54>
    {
        return false;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	e0b4      	b.n	800bf1e <print_number+0x1be>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800bdb4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800bdb8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800bdbc:	f7fc fee6 	bl	8008b8c <__aeabi_dcmpun>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d121      	bne.n	800be0a <print_number+0xaa>
 800bdc6:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 800bdc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdca:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800bdce:	2301      	movs	r3, #1
 800bdd0:	461e      	mov	r6, r3
 800bdd2:	f04f 32ff 	mov.w	r2, #4294967295
 800bdd6:	4b54      	ldr	r3, [pc, #336]	@ (800bf28 <print_number+0x1c8>)
 800bdd8:	4620      	mov	r0, r4
 800bdda:	4629      	mov	r1, r5
 800bddc:	f7fc fed6 	bl	8008b8c <__aeabi_dcmpun>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d10b      	bne.n	800bdfe <print_number+0x9e>
 800bde6:	f04f 32ff 	mov.w	r2, #4294967295
 800bdea:	4b4f      	ldr	r3, [pc, #316]	@ (800bf28 <print_number+0x1c8>)
 800bdec:	4620      	mov	r0, r4
 800bdee:	4629      	mov	r1, r5
 800bdf0:	f7fc feae 	bl	8008b50 <__aeabi_dcmple>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d101      	bne.n	800bdfe <print_number+0x9e>
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	461e      	mov	r6, r3
 800bdfe:	b2f3      	uxtb	r3, r6
 800be00:	f083 0301 	eor.w	r3, r3, #1
 800be04:	b2db      	uxtb	r3, r3
 800be06:	2b00      	cmp	r3, #0
 800be08:	d007      	beq.n	800be1a <print_number+0xba>
    {
        length = sprintf((char*)number_buffer, "null");
 800be0a:	f107 0314 	add.w	r3, r7, #20
 800be0e:	4947      	ldr	r1, [pc, #284]	@ (800bf2c <print_number+0x1cc>)
 800be10:	4618      	mov	r0, r3
 800be12:	f009 ff99 	bl	8015d48 <siprintf>
 800be16:	6478      	str	r0, [r7, #68]	@ 0x44
 800be18:	e03f      	b.n	800be9a <print_number+0x13a>
    }
    else if(d == (double)item->valueint)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	695b      	ldr	r3, [r3, #20]
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fc fbb0 	bl	8008584 <__aeabi_i2d>
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800be2c:	f7fc fe7c 	bl	8008b28 <__aeabi_dcmpeq>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d009      	beq.n	800be4a <print_number+0xea>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	695a      	ldr	r2, [r3, #20]
 800be3a:	f107 0314 	add.w	r3, r7, #20
 800be3e:	493c      	ldr	r1, [pc, #240]	@ (800bf30 <print_number+0x1d0>)
 800be40:	4618      	mov	r0, r3
 800be42:	f009 ff81 	bl	8015d48 <siprintf>
 800be46:	6478      	str	r0, [r7, #68]	@ 0x44
 800be48:	e027      	b.n	800be9a <print_number+0x13a>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 800be4a:	f107 0014 	add.w	r0, r7, #20
 800be4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800be52:	4938      	ldr	r1, [pc, #224]	@ (800bf34 <print_number+0x1d4>)
 800be54:	f009 ff78 	bl	8015d48 <siprintf>
 800be58:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 800be5a:	f107 0208 	add.w	r2, r7, #8
 800be5e:	f107 0314 	add.w	r3, r7, #20
 800be62:	4935      	ldr	r1, [pc, #212]	@ (800bf38 <print_number+0x1d8>)
 800be64:	4618      	mov	r0, r3
 800be66:	f009 ff91 	bl	8015d8c <siscanf>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d10c      	bne.n	800be8a <print_number+0x12a>
 800be70:	ed97 7b02 	vldr	d7, [r7, #8]
 800be74:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 800be78:	eeb0 0a47 	vmov.f32	s0, s14
 800be7c:	eef0 0a67 	vmov.f32	s1, s15
 800be80:	f7ff ff26 	bl	800bcd0 <compare_double>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d107      	bne.n	800be9a <print_number+0x13a>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 800be8a:	f107 0014 	add.w	r0, r7, #20
 800be8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800be92:	492a      	ldr	r1, [pc, #168]	@ (800bf3c <print_number+0x1dc>)
 800be94:	f009 ff58 	bl	8015d48 <siprintf>
 800be98:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800be9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	db02      	blt.n	800bea6 <print_number+0x146>
 800bea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bea2:	2b19      	cmp	r3, #25
 800bea4:	dd01      	ble.n	800beaa <print_number+0x14a>
    {
        return false;
 800bea6:	2300      	movs	r3, #0
 800bea8:	e039      	b.n	800bf1e <print_number+0x1be>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800beaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800beac:	3301      	adds	r3, #1
 800beae:	4619      	mov	r1, r3
 800beb0:	6838      	ldr	r0, [r7, #0]
 800beb2:	f7ff fe51 	bl	800bb58 <ensure>
 800beb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 800beb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d101      	bne.n	800bec2 <print_number+0x162>
    {
        return false;
 800bebe:	2300      	movs	r3, #0
 800bec0:	e02d      	b.n	800bf1e <print_number+0x1be>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800bec2:	2300      	movs	r3, #0
 800bec4:	643b      	str	r3, [r7, #64]	@ 0x40
 800bec6:	e01a      	b.n	800befe <print_number+0x19e>
    {
        if (number_buffer[i] == decimal_point)
 800bec8:	f107 0214 	add.w	r2, r7, #20
 800becc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bece:	4413      	add	r3, r2
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d105      	bne.n	800bee6 <print_number+0x186>
        {
            output_pointer[i] = '.';
 800beda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bedc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bede:	4413      	add	r3, r2
 800bee0:	222e      	movs	r2, #46	@ 0x2e
 800bee2:	701a      	strb	r2, [r3, #0]
            continue;
 800bee4:	e008      	b.n	800bef8 <print_number+0x198>
        }

        output_pointer[i] = number_buffer[i];
 800bee6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bee8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800beea:	4413      	add	r3, r2
 800beec:	f107 0114 	add.w	r1, r7, #20
 800bef0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bef2:	440a      	add	r2, r1
 800bef4:	7812      	ldrb	r2, [r2, #0]
 800bef6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800bef8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800befa:	3301      	adds	r3, #1
 800befc:	643b      	str	r3, [r7, #64]	@ 0x40
 800befe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d3e0      	bcc.n	800bec8 <print_number+0x168>
    }
    output_pointer[i] = '\0';
 800bf06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bf08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf0a:	4413      	add	r3, r2
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	689a      	ldr	r2, [r3, #8]
 800bf14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf16:	441a      	add	r2, r3
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	609a      	str	r2, [r3, #8]

    return true;
 800bf1c:	2301      	movs	r3, #1
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	374c      	adds	r7, #76	@ 0x4c
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf26:	bf00      	nop
 800bf28:	7fefffff 	.word	0x7fefffff
 800bf2c:	08018750 	.word	0x08018750
 800bf30:	08018758 	.word	0x08018758
 800bf34:	0801875c 	.word	0x0801875c
 800bf38:	08018764 	.word	0x08018764
 800bf3c:	08018768 	.word	0x08018768

0800bf40 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b085      	sub	sp, #20
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800bf50:	2300      	movs	r3, #0
 800bf52:	60bb      	str	r3, [r7, #8]
 800bf54:	e04c      	b.n	800bff0 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	4413      	add	r3, r2
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	2b2f      	cmp	r3, #47	@ 0x2f
 800bf60:	d90f      	bls.n	800bf82 <parse_hex4+0x42>
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	4413      	add	r3, r2
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	2b39      	cmp	r3, #57	@ 0x39
 800bf6c:	d809      	bhi.n	800bf82 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	4413      	add	r3, r2
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	461a      	mov	r2, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	3b30      	subs	r3, #48	@ 0x30
 800bf7e:	60fb      	str	r3, [r7, #12]
 800bf80:	e02d      	b.n	800bfde <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	4413      	add	r3, r2
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	2b40      	cmp	r3, #64	@ 0x40
 800bf8c:	d90f      	bls.n	800bfae <parse_hex4+0x6e>
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	4413      	add	r3, r2
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	2b46      	cmp	r3, #70	@ 0x46
 800bf98:	d809      	bhi.n	800bfae <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	4413      	add	r3, r2
 800bfa8:	3b37      	subs	r3, #55	@ 0x37
 800bfaa:	60fb      	str	r3, [r7, #12]
 800bfac:	e017      	b.n	800bfde <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	4413      	add	r3, r2
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	2b60      	cmp	r3, #96	@ 0x60
 800bfb8:	d90f      	bls.n	800bfda <parse_hex4+0x9a>
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	2b66      	cmp	r3, #102	@ 0x66
 800bfc4:	d809      	bhi.n	800bfda <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	4413      	add	r3, r2
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	461a      	mov	r2, r3
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	3b57      	subs	r3, #87	@ 0x57
 800bfd6:	60fb      	str	r3, [r7, #12]
 800bfd8:	e001      	b.n	800bfde <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	e00c      	b.n	800bff8 <parse_hex4+0xb8>
        }

        if (i < 3)
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	2b02      	cmp	r3, #2
 800bfe2:	d802      	bhi.n	800bfea <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	011b      	lsls	r3, r3, #4
 800bfe8:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	3301      	adds	r3, #1
 800bfee:	60bb      	str	r3, [r7, #8]
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	2b03      	cmp	r3, #3
 800bff4:	d9af      	bls.n	800bf56 <parse_hex4+0x16>
        }
    }

    return h;
 800bff6:	68fb      	ldr	r3, [r7, #12]
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3714      	adds	r7, #20
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr

0800c004 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b08a      	sub	sp, #40	@ 0x28
 800c008:	af00      	add	r7, sp, #0
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800c010:	2300      	movs	r3, #0
 800c012:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800c014:	2300      	movs	r3, #0
 800c016:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800c01c:	2300      	movs	r3, #0
 800c01e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 800c022:	2300      	movs	r3, #0
 800c024:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 800c028:	2300      	movs	r3, #0
 800c02a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 800c02e:	2300      	movs	r3, #0
 800c030:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800c034:	68ba      	ldr	r2, [r7, #8]
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	1ad3      	subs	r3, r2, r3
 800c03a:	2b05      	cmp	r3, #5
 800c03c:	f340 80b7 	ble.w	800c1ae <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	3302      	adds	r3, #2
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff ff7b 	bl	800bf40 <parse_hex4>
 800c04a:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800c052:	d304      	bcc.n	800c05e <utf16_literal_to_utf8+0x5a>
 800c054:	69fb      	ldr	r3, [r7, #28]
 800c056:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800c05a:	f0c0 80aa 	bcc.w	800c1b2 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800c064:	d337      	bcc.n	800c0d6 <utf16_literal_to_utf8+0xd2>
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800c06c:	d233      	bcs.n	800c0d6 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	3306      	adds	r3, #6
 800c072:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800c074:	2300      	movs	r3, #0
 800c076:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800c078:	230c      	movs	r3, #12
 800c07a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	2b05      	cmp	r3, #5
 800c086:	f340 8096 	ble.w	800c1b6 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	2b5c      	cmp	r3, #92	@ 0x5c
 800c090:	f040 8093 	bne.w	800c1ba <utf16_literal_to_utf8+0x1b6>
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	3301      	adds	r3, #1
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	2b75      	cmp	r3, #117	@ 0x75
 800c09c:	f040 808d 	bne.w	800c1ba <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	3302      	adds	r3, #2
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7ff ff4b 	bl	800bf40 <parse_hex4>
 800c0aa:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800c0b2:	f0c0 8084 	bcc.w	800c1be <utf16_literal_to_utf8+0x1ba>
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800c0bc:	d27f      	bcs.n	800c1be <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	029a      	lsls	r2, r3, #10
 800c0c2:	4b43      	ldr	r3, [pc, #268]	@ (800c1d0 <utf16_literal_to_utf8+0x1cc>)
 800c0c4:	4013      	ands	r3, r2
 800c0c6:	693a      	ldr	r2, [r7, #16]
 800c0c8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800c0d2:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 800c0d4:	e004      	b.n	800c0e0 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800c0d6:	2306      	movs	r3, #6
 800c0d8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800c0dc:	69fb      	ldr	r3, [r7, #28]
 800c0de:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c0e4:	d803      	bhi.n	800c0ee <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c0ec:	e01f      	b.n	800c12e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c0f4:	d206      	bcs.n	800c104 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800c0f6:	2302      	movs	r3, #2
 800c0f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800c0fc:	23c0      	movs	r3, #192	@ 0xc0
 800c0fe:	f887 3020 	strb.w	r3, [r7, #32]
 800c102:	e014      	b.n	800c12e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800c104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c106:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c10a:	d206      	bcs.n	800c11a <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800c10c:	2303      	movs	r3, #3
 800c10e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800c112:	23e0      	movs	r3, #224	@ 0xe0
 800c114:	f887 3020 	strb.w	r3, [r7, #32]
 800c118:	e009      	b.n	800c12e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800c11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c11c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800c120:	d24f      	bcs.n	800c1c2 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800c122:	2304      	movs	r3, #4
 800c124:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800c128:	23f0      	movs	r3, #240	@ 0xf0
 800c12a:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800c12e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c132:	3b01      	subs	r3, #1
 800c134:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c138:	e015      	b.n	800c166 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800c13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c142:	b2da      	uxtb	r2, r3
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6819      	ldr	r1, [r3, #0]
 800c148:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c14c:	440b      	add	r3, r1
 800c14e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c152:	b2d2      	uxtb	r2, r2
 800c154:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800c156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c158:	099b      	lsrs	r3, r3, #6
 800c15a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800c15c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c160:	3b01      	subs	r3, #1
 800c162:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c166:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d1e5      	bne.n	800c13a <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800c16e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c172:	2b01      	cmp	r3, #1
 800c174:	d909      	bls.n	800c18a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800c176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c178:	b2d9      	uxtb	r1, r3
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c182:	430a      	orrs	r2, r1
 800c184:	b2d2      	uxtb	r2, r2
 800c186:	701a      	strb	r2, [r3, #0]
 800c188:	e007      	b.n	800c19a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800c18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c18c:	b2da      	uxtb	r2, r3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c196:	b2d2      	uxtb	r2, r2
 800c198:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c1a2:	441a      	add	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800c1a8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c1ac:	e00b      	b.n	800c1c6 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800c1ae:	bf00      	nop
 800c1b0:	e008      	b.n	800c1c4 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800c1b2:	bf00      	nop
 800c1b4:	e006      	b.n	800c1c4 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800c1b6:	bf00      	nop
 800c1b8:	e004      	b.n	800c1c4 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800c1ba:	bf00      	nop
 800c1bc:	e002      	b.n	800c1c4 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800c1be:	bf00      	nop
 800c1c0:	e000      	b.n	800c1c4 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800c1c2:	bf00      	nop

fail:
    return 0;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3728      	adds	r7, #40	@ 0x28
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	000ffc00 	.word	0x000ffc00

0800c1d4 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b08a      	sub	sp, #40	@ 0x28
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	4413      	add	r3, r2
 800c1ea:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	681a      	ldr	r2, [r3, #0]
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	4413      	add	r3, r2
 800c1f8:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800c1fe:	2300      	movs	r3, #0
 800c200:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	4413      	add	r3, r2
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	2b22      	cmp	r3, #34	@ 0x22
 800c210:	f040 8103 	bne.w	800c41a <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800c214:	2300      	movs	r3, #0
 800c216:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800c218:	2300      	movs	r3, #0
 800c21a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800c21c:	e017      	b.n	800c24e <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800c21e:	6a3b      	ldr	r3, [r7, #32]
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	2b5c      	cmp	r3, #92	@ 0x5c
 800c224:	d110      	bne.n	800c248 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800c226:	6a3b      	ldr	r3, [r7, #32]
 800c228:	1c5a      	adds	r2, r3, #1
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	1ad3      	subs	r3, r2, r3
 800c230:	461a      	mov	r2, r3
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	429a      	cmp	r2, r3
 800c238:	f080 80f1 	bcs.w	800c41e <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	3301      	adds	r3, #1
 800c240:	61bb      	str	r3, [r7, #24]
                input_end++;
 800c242:	6a3b      	ldr	r3, [r7, #32]
 800c244:	3301      	adds	r3, #1
 800c246:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800c248:	6a3b      	ldr	r3, [r7, #32]
 800c24a:	3301      	adds	r3, #1
 800c24c:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	6a3a      	ldr	r2, [r7, #32]
 800c254:	1ad3      	subs	r3, r2, r3
 800c256:	461a      	mov	r2, r3
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d203      	bcs.n	800c268 <parse_string+0x94>
 800c260:	6a3b      	ldr	r3, [r7, #32]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	2b22      	cmp	r3, #34	@ 0x22
 800c266:	d1da      	bne.n	800c21e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	6a3a      	ldr	r2, [r7, #32]
 800c26e:	1ad3      	subs	r3, r2, r3
 800c270:	461a      	mov	r2, r3
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	429a      	cmp	r2, r3
 800c278:	f080 80d3 	bcs.w	800c422 <parse_string+0x24e>
 800c27c:	6a3b      	ldr	r3, [r7, #32]
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	2b22      	cmp	r3, #34	@ 0x22
 800c282:	f040 80ce 	bne.w	800c422 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	4413      	add	r3, r2
 800c290:	6a3a      	ldr	r2, [r7, #32]
 800c292:	1ad3      	subs	r3, r2, r3
 800c294:	461a      	mov	r2, r3
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	1ad3      	subs	r3, r2, r3
 800c29a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	691b      	ldr	r3, [r3, #16]
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	3201      	adds	r2, #1
 800c2a4:	4610      	mov	r0, r2
 800c2a6:	4798      	blx	r3
 800c2a8:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f000 80ba 	beq.w	800c426 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800c2b2:	69fb      	ldr	r3, [r7, #28]
 800c2b4:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800c2b6:	e094      	b.n	800c3e2 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	2b5c      	cmp	r3, #92	@ 0x5c
 800c2be:	d008      	beq.n	800c2d2 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800c2c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2c2:	1c53      	adds	r3, r2, #1
 800c2c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	1c59      	adds	r1, r3, #1
 800c2ca:	60f9      	str	r1, [r7, #12]
 800c2cc:	7812      	ldrb	r2, [r2, #0]
 800c2ce:	701a      	strb	r2, [r3, #0]
 800c2d0:	e087      	b.n	800c3e2 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800c2d2:	2302      	movs	r3, #2
 800c2d4:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800c2d6:	6a3a      	ldr	r2, [r7, #32]
 800c2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2da:	1ad3      	subs	r3, r2, r3
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f340 80a4 	ble.w	800c42a <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800c2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	2b75      	cmp	r3, #117	@ 0x75
 800c2ea:	f300 80a0 	bgt.w	800c42e <parse_string+0x25a>
 800c2ee:	2b5c      	cmp	r3, #92	@ 0x5c
 800c2f0:	da04      	bge.n	800c2fc <parse_string+0x128>
 800c2f2:	2b22      	cmp	r3, #34	@ 0x22
 800c2f4:	d05c      	beq.n	800c3b0 <parse_string+0x1dc>
 800c2f6:	2b2f      	cmp	r3, #47	@ 0x2f
 800c2f8:	d05a      	beq.n	800c3b0 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800c2fa:	e098      	b.n	800c42e <parse_string+0x25a>
            switch (input_pointer[1])
 800c2fc:	3b5c      	subs	r3, #92	@ 0x5c
 800c2fe:	2b19      	cmp	r3, #25
 800c300:	f200 8095 	bhi.w	800c42e <parse_string+0x25a>
 800c304:	a201      	add	r2, pc, #4	@ (adr r2, 800c30c <parse_string+0x138>)
 800c306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c30a:	bf00      	nop
 800c30c:	0800c3b1 	.word	0x0800c3b1
 800c310:	0800c42f 	.word	0x0800c42f
 800c314:	0800c42f 	.word	0x0800c42f
 800c318:	0800c42f 	.word	0x0800c42f
 800c31c:	0800c42f 	.word	0x0800c42f
 800c320:	0800c42f 	.word	0x0800c42f
 800c324:	0800c375 	.word	0x0800c375
 800c328:	0800c42f 	.word	0x0800c42f
 800c32c:	0800c42f 	.word	0x0800c42f
 800c330:	0800c42f 	.word	0x0800c42f
 800c334:	0800c381 	.word	0x0800c381
 800c338:	0800c42f 	.word	0x0800c42f
 800c33c:	0800c42f 	.word	0x0800c42f
 800c340:	0800c42f 	.word	0x0800c42f
 800c344:	0800c42f 	.word	0x0800c42f
 800c348:	0800c42f 	.word	0x0800c42f
 800c34c:	0800c42f 	.word	0x0800c42f
 800c350:	0800c42f 	.word	0x0800c42f
 800c354:	0800c38d 	.word	0x0800c38d
 800c358:	0800c42f 	.word	0x0800c42f
 800c35c:	0800c42f 	.word	0x0800c42f
 800c360:	0800c42f 	.word	0x0800c42f
 800c364:	0800c399 	.word	0x0800c399
 800c368:	0800c42f 	.word	0x0800c42f
 800c36c:	0800c3a5 	.word	0x0800c3a5
 800c370:	0800c3c1 	.word	0x0800c3c1
                    *output_pointer++ = '\b';
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	1c5a      	adds	r2, r3, #1
 800c378:	60fa      	str	r2, [r7, #12]
 800c37a:	2208      	movs	r2, #8
 800c37c:	701a      	strb	r2, [r3, #0]
                    break;
 800c37e:	e02c      	b.n	800c3da <parse_string+0x206>
                    *output_pointer++ = '\f';
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	1c5a      	adds	r2, r3, #1
 800c384:	60fa      	str	r2, [r7, #12]
 800c386:	220c      	movs	r2, #12
 800c388:	701a      	strb	r2, [r3, #0]
                    break;
 800c38a:	e026      	b.n	800c3da <parse_string+0x206>
                    *output_pointer++ = '\n';
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	1c5a      	adds	r2, r3, #1
 800c390:	60fa      	str	r2, [r7, #12]
 800c392:	220a      	movs	r2, #10
 800c394:	701a      	strb	r2, [r3, #0]
                    break;
 800c396:	e020      	b.n	800c3da <parse_string+0x206>
                    *output_pointer++ = '\r';
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	1c5a      	adds	r2, r3, #1
 800c39c:	60fa      	str	r2, [r7, #12]
 800c39e:	220d      	movs	r2, #13
 800c3a0:	701a      	strb	r2, [r3, #0]
                    break;
 800c3a2:	e01a      	b.n	800c3da <parse_string+0x206>
                    *output_pointer++ = '\t';
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	1c5a      	adds	r2, r3, #1
 800c3a8:	60fa      	str	r2, [r7, #12]
 800c3aa:	2209      	movs	r2, #9
 800c3ac:	701a      	strb	r2, [r3, #0]
                    break;
 800c3ae:	e014      	b.n	800c3da <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 800c3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b2:	1c5a      	adds	r2, r3, #1
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	1c59      	adds	r1, r3, #1
 800c3b8:	60f9      	str	r1, [r7, #12]
 800c3ba:	7812      	ldrb	r2, [r2, #0]
 800c3bc:	701a      	strb	r2, [r3, #0]
                    break;
 800c3be:	e00c      	b.n	800c3da <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800c3c0:	f107 030c 	add.w	r3, r7, #12
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	6a39      	ldr	r1, [r7, #32]
 800c3c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c3ca:	f7ff fe1b 	bl	800c004 <utf16_literal_to_utf8>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800c3d2:	7dfb      	ldrb	r3, [r7, #23]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d02c      	beq.n	800c432 <parse_string+0x25e>
                    break;
 800c3d8:	bf00      	nop
            }
            input_pointer += sequence_length;
 800c3da:	7dfb      	ldrb	r3, [r7, #23]
 800c3dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3de:	4413      	add	r3, r2
 800c3e0:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800c3e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3e4:	6a3b      	ldr	r3, [r7, #32]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	f4ff af66 	bcc.w	800c2b8 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2210      	movs	r2, #16
 800c3f6:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	69fa      	ldr	r2, [r7, #28]
 800c3fc:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	6a3a      	ldr	r2, [r7, #32]
 800c404:	1ad3      	subs	r3, r2, r3
 800c406:	461a      	mov	r2, r3
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	1c5a      	adds	r2, r3, #1
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	609a      	str	r2, [r3, #8]

    return true;
 800c416:	2301      	movs	r3, #1
 800c418:	e020      	b.n	800c45c <parse_string+0x288>
        goto fail;
 800c41a:	bf00      	nop
 800c41c:	e00a      	b.n	800c434 <parse_string+0x260>
                    goto fail;
 800c41e:	bf00      	nop
 800c420:	e008      	b.n	800c434 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800c422:	bf00      	nop
 800c424:	e006      	b.n	800c434 <parse_string+0x260>
            goto fail; /* allocation failure */
 800c426:	bf00      	nop
 800c428:	e004      	b.n	800c434 <parse_string+0x260>
                goto fail;
 800c42a:	bf00      	nop
 800c42c:	e002      	b.n	800c434 <parse_string+0x260>
                    goto fail;
 800c42e:	bf00      	nop
 800c430:	e000      	b.n	800c434 <parse_string+0x260>
                        goto fail;
 800c432:	bf00      	nop

fail:
    if (output != NULL)
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d005      	beq.n	800c446 <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	695b      	ldr	r3, [r3, #20]
 800c43e:	69f8      	ldr	r0, [r7, #28]
 800c440:	4798      	blx	r3
        output = NULL;
 800c442:	2300      	movs	r3, #0
 800c444:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 800c446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d006      	beq.n	800c45a <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c452:	1ad3      	subs	r3, r2, r3
 800c454:	461a      	mov	r2, r3
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	609a      	str	r2, [r3, #8]
    }

    return false;
 800c45a:	2300      	movs	r3, #0
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3728      	adds	r7, #40	@ 0x28
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b088      	sub	sp, #32
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 800c46e:	2300      	movs	r3, #0
 800c470:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 800c472:	2300      	movs	r3, #0
 800c474:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800c476:	2300      	movs	r3, #0
 800c478:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800c47a:	2300      	movs	r3, #0
 800c47c:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 800c47e:	2300      	movs	r3, #0
 800c480:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d101      	bne.n	800c48c <print_string_ptr+0x28>
    {
        return false;
 800c488:	2300      	movs	r3, #0
 800c48a:	e110      	b.n	800c6ae <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d111      	bne.n	800c4b6 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 800c492:	2103      	movs	r1, #3
 800c494:	6838      	ldr	r0, [r7, #0]
 800c496:	f7ff fb5f 	bl	800bb58 <ensure>
 800c49a:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d101      	bne.n	800c4a6 <print_string_ptr+0x42>
        {
            return false;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	e103      	b.n	800c6ae <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	4a83      	ldr	r2, [pc, #524]	@ (800c6b8 <print_string_ptr+0x254>)
 800c4aa:	8811      	ldrh	r1, [r2, #0]
 800c4ac:	7892      	ldrb	r2, [r2, #2]
 800c4ae:	8019      	strh	r1, [r3, #0]
 800c4b0:	709a      	strb	r2, [r3, #2]

        return true;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e0fb      	b.n	800c6ae <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	61fb      	str	r3, [r7, #28]
 800c4ba:	e024      	b.n	800c506 <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	2b22      	cmp	r3, #34	@ 0x22
 800c4c2:	dc0f      	bgt.n	800c4e4 <print_string_ptr+0x80>
 800c4c4:	2b08      	cmp	r3, #8
 800c4c6:	db13      	blt.n	800c4f0 <print_string_ptr+0x8c>
 800c4c8:	3b08      	subs	r3, #8
 800c4ca:	4a7c      	ldr	r2, [pc, #496]	@ (800c6bc <print_string_ptr+0x258>)
 800c4cc:	fa22 f303 	lsr.w	r3, r2, r3
 800c4d0:	f003 0301 	and.w	r3, r3, #1
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	bf14      	ite	ne
 800c4d8:	2301      	movne	r3, #1
 800c4da:	2300      	moveq	r3, #0
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d102      	bne.n	800c4e8 <print_string_ptr+0x84>
 800c4e2:	e005      	b.n	800c4f0 <print_string_ptr+0x8c>
 800c4e4:	2b5c      	cmp	r3, #92	@ 0x5c
 800c4e6:	d103      	bne.n	800c4f0 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	617b      	str	r3, [r7, #20]
                break;
 800c4ee:	e007      	b.n	800c500 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	2b1f      	cmp	r3, #31
 800c4f6:	d802      	bhi.n	800c4fe <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	3305      	adds	r3, #5
 800c4fc:	617b      	str	r3, [r7, #20]
                }
                break;
 800c4fe:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	3301      	adds	r3, #1
 800c504:	61fb      	str	r3, [r7, #28]
 800c506:	69fb      	ldr	r3, [r7, #28]
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d1d6      	bne.n	800c4bc <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800c50e:	69fa      	ldr	r2, [r7, #28]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	1ad3      	subs	r3, r2, r3
 800c514:	461a      	mov	r2, r3
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	4413      	add	r3, r2
 800c51a:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	3303      	adds	r3, #3
 800c520:	4619      	mov	r1, r3
 800c522:	6838      	ldr	r0, [r7, #0]
 800c524:	f7ff fb18 	bl	800bb58 <ensure>
 800c528:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d101      	bne.n	800c534 <print_string_ptr+0xd0>
    {
        return false;
 800c530:	2300      	movs	r3, #0
 800c532:	e0bc      	b.n	800c6ae <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d117      	bne.n	800c56a <print_string_ptr+0x106>
    {
        output[0] = '\"';
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	2222      	movs	r2, #34	@ 0x22
 800c53e:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	3301      	adds	r3, #1
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	6879      	ldr	r1, [r7, #4]
 800c548:	4618      	mov	r0, r3
 800c54a:	f009 fdc2 	bl	80160d2 <memcpy>
        output[output_length + 1] = '\"';
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	3301      	adds	r3, #1
 800c552:	693a      	ldr	r2, [r7, #16]
 800c554:	4413      	add	r3, r2
 800c556:	2222      	movs	r2, #34	@ 0x22
 800c558:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	3302      	adds	r3, #2
 800c55e:	693a      	ldr	r2, [r7, #16]
 800c560:	4413      	add	r3, r2
 800c562:	2200      	movs	r2, #0
 800c564:	701a      	strb	r2, [r3, #0]

        return true;
 800c566:	2301      	movs	r3, #1
 800c568:	e0a1      	b.n	800c6ae <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	2222      	movs	r2, #34	@ 0x22
 800c56e:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	3301      	adds	r3, #1
 800c574:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	61fb      	str	r3, [r7, #28]
 800c57a:	e086      	b.n	800c68a <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 800c57c:	69fb      	ldr	r3, [r7, #28]
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	2b1f      	cmp	r3, #31
 800c582:	d90c      	bls.n	800c59e <print_string_ptr+0x13a>
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	2b22      	cmp	r3, #34	@ 0x22
 800c58a:	d008      	beq.n	800c59e <print_string_ptr+0x13a>
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	2b5c      	cmp	r3, #92	@ 0x5c
 800c592:	d004      	beq.n	800c59e <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 800c594:	69fb      	ldr	r3, [r7, #28]
 800c596:	781a      	ldrb	r2, [r3, #0]
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	701a      	strb	r2, [r3, #0]
 800c59c:	e06f      	b.n	800c67e <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	1c5a      	adds	r2, r3, #1
 800c5a2:	61ba      	str	r2, [r7, #24]
 800c5a4:	225c      	movs	r2, #92	@ 0x5c
 800c5a6:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	2b22      	cmp	r3, #34	@ 0x22
 800c5ae:	dc3d      	bgt.n	800c62c <print_string_ptr+0x1c8>
 800c5b0:	2b08      	cmp	r3, #8
 800c5b2:	db59      	blt.n	800c668 <print_string_ptr+0x204>
 800c5b4:	3b08      	subs	r3, #8
 800c5b6:	2b1a      	cmp	r3, #26
 800c5b8:	d856      	bhi.n	800c668 <print_string_ptr+0x204>
 800c5ba:	a201      	add	r2, pc, #4	@ (adr r2, 800c5c0 <print_string_ptr+0x15c>)
 800c5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c0:	0800c641 	.word	0x0800c641
 800c5c4:	0800c661 	.word	0x0800c661
 800c5c8:	0800c651 	.word	0x0800c651
 800c5cc:	0800c669 	.word	0x0800c669
 800c5d0:	0800c649 	.word	0x0800c649
 800c5d4:	0800c659 	.word	0x0800c659
 800c5d8:	0800c669 	.word	0x0800c669
 800c5dc:	0800c669 	.word	0x0800c669
 800c5e0:	0800c669 	.word	0x0800c669
 800c5e4:	0800c669 	.word	0x0800c669
 800c5e8:	0800c669 	.word	0x0800c669
 800c5ec:	0800c669 	.word	0x0800c669
 800c5f0:	0800c669 	.word	0x0800c669
 800c5f4:	0800c669 	.word	0x0800c669
 800c5f8:	0800c669 	.word	0x0800c669
 800c5fc:	0800c669 	.word	0x0800c669
 800c600:	0800c669 	.word	0x0800c669
 800c604:	0800c669 	.word	0x0800c669
 800c608:	0800c669 	.word	0x0800c669
 800c60c:	0800c669 	.word	0x0800c669
 800c610:	0800c669 	.word	0x0800c669
 800c614:	0800c669 	.word	0x0800c669
 800c618:	0800c669 	.word	0x0800c669
 800c61c:	0800c669 	.word	0x0800c669
 800c620:	0800c669 	.word	0x0800c669
 800c624:	0800c669 	.word	0x0800c669
 800c628:	0800c639 	.word	0x0800c639
 800c62c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c62e:	d11b      	bne.n	800c668 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	225c      	movs	r2, #92	@ 0x5c
 800c634:	701a      	strb	r2, [r3, #0]
                    break;
 800c636:	e022      	b.n	800c67e <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	2222      	movs	r2, #34	@ 0x22
 800c63c:	701a      	strb	r2, [r3, #0]
                    break;
 800c63e:	e01e      	b.n	800c67e <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	2262      	movs	r2, #98	@ 0x62
 800c644:	701a      	strb	r2, [r3, #0]
                    break;
 800c646:	e01a      	b.n	800c67e <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 800c648:	69bb      	ldr	r3, [r7, #24]
 800c64a:	2266      	movs	r2, #102	@ 0x66
 800c64c:	701a      	strb	r2, [r3, #0]
                    break;
 800c64e:	e016      	b.n	800c67e <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	226e      	movs	r2, #110	@ 0x6e
 800c654:	701a      	strb	r2, [r3, #0]
                    break;
 800c656:	e012      	b.n	800c67e <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 800c658:	69bb      	ldr	r3, [r7, #24]
 800c65a:	2272      	movs	r2, #114	@ 0x72
 800c65c:	701a      	strb	r2, [r3, #0]
                    break;
 800c65e:	e00e      	b.n	800c67e <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	2274      	movs	r2, #116	@ 0x74
 800c664:	701a      	strb	r2, [r3, #0]
                    break;
 800c666:	e00a      	b.n	800c67e <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	461a      	mov	r2, r3
 800c66e:	4914      	ldr	r1, [pc, #80]	@ (800c6c0 <print_string_ptr+0x25c>)
 800c670:	69b8      	ldr	r0, [r7, #24]
 800c672:	f009 fb69 	bl	8015d48 <siprintf>
                    output_pointer += 4;
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	3304      	adds	r3, #4
 800c67a:	61bb      	str	r3, [r7, #24]
                    break;
 800c67c:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	3301      	adds	r3, #1
 800c682:	61fb      	str	r3, [r7, #28]
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	3301      	adds	r3, #1
 800c688:	61bb      	str	r3, [r7, #24]
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f47f af74 	bne.w	800c57c <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	3301      	adds	r3, #1
 800c698:	693a      	ldr	r2, [r7, #16]
 800c69a:	4413      	add	r3, r2
 800c69c:	2222      	movs	r2, #34	@ 0x22
 800c69e:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	3302      	adds	r3, #2
 800c6a4:	693a      	ldr	r2, [r7, #16]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	701a      	strb	r2, [r3, #0]

    return true;
 800c6ac:	2301      	movs	r3, #1
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3720      	adds	r7, #32
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	08018770 	.word	0x08018770
 800c6bc:	04000037 	.word	0x04000037
 800c6c0:	08018774 	.word	0x08018774

0800c6c4 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	691b      	ldr	r3, [r3, #16]
 800c6d2:	6839      	ldr	r1, [r7, #0]
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7ff fec5 	bl	800c464 <print_string_ptr>
 800c6da:	4603      	mov	r3, r0
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3708      	adds	r7, #8
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d003      	beq.n	800c6fa <buffer_skip_whitespace+0x16>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d101      	bne.n	800c6fe <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	e02c      	b.n	800c758 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d005      	beq.n	800c710 <buffer_skip_whitespace+0x2c>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	689a      	ldr	r2, [r3, #8]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d306      	bcc.n	800c71e <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	e021      	b.n	800c758 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	1c5a      	adds	r2, r3, #1
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00d      	beq.n	800c740 <buffer_skip_whitespace+0x5c>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	689a      	ldr	r2, [r3, #8]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d207      	bcs.n	800c740 <buffer_skip_whitespace+0x5c>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	4413      	add	r3, r2
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	2b20      	cmp	r3, #32
 800c73e:	d9e9      	bls.n	800c714 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	689a      	ldr	r2, [r3, #8]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d104      	bne.n	800c756 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	1e5a      	subs	r2, r3, #1
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800c756:	687b      	ldr	r3, [r7, #4]
}
 800c758:	4618      	mov	r0, r3
 800c75a:	370c      	adds	r7, #12
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d007      	beq.n	800c782 <skip_utf8_bom+0x1e>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d003      	beq.n	800c782 <skip_utf8_bom+0x1e>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d001      	beq.n	800c786 <skip_utf8_bom+0x22>
    {
        return NULL;
 800c782:	2300      	movs	r3, #0
 800c784:	e01c      	b.n	800c7c0 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d018      	beq.n	800c7be <skip_utf8_bom+0x5a>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	1d1a      	adds	r2, r3, #4
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	429a      	cmp	r2, r3
 800c798:	d211      	bcs.n	800c7be <skip_utf8_bom+0x5a>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	689b      	ldr	r3, [r3, #8]
 800c7a2:	4413      	add	r3, r2
 800c7a4:	2203      	movs	r2, #3
 800c7a6:	4908      	ldr	r1, [pc, #32]	@ (800c7c8 <skip_utf8_bom+0x64>)
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f009 fbfd 	bl	8015fa8 <strncmp>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d104      	bne.n	800c7be <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	1cda      	adds	r2, r3, #3
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800c7be:	687b      	ldr	r3, [r7, #4]
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	0801877c 	.word	0x0801877c

0800c7cc <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b086      	sub	sp, #24
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d101      	bne.n	800c7e2 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	e00c      	b.n	800c7fc <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	f7fb fd1e 	bl	8008224 <strlen>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	6979      	ldr	r1, [r7, #20]
 800c7f4:	68f8      	ldr	r0, [r7, #12]
 800c7f6:	f000 f805 	bl	800c804 <cJSON_ParseWithLengthOpts>
 800c7fa:	4603      	mov	r3, r0
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3718      	adds	r7, #24
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b08e      	sub	sp, #56	@ 0x38
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]
 800c810:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800c812:	f107 0318 	add.w	r3, r7, #24
 800c816:	2200      	movs	r2, #0
 800c818:	601a      	str	r2, [r3, #0]
 800c81a:	605a      	str	r2, [r3, #4]
 800c81c:	609a      	str	r2, [r3, #8]
 800c81e:	60da      	str	r2, [r3, #12]
 800c820:	611a      	str	r2, [r3, #16]
 800c822:	615a      	str	r2, [r3, #20]
 800c824:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800c826:	2300      	movs	r3, #0
 800c828:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 800c82a:	4b41      	ldr	r3, [pc, #260]	@ (800c930 <cJSON_ParseWithLengthOpts+0x12c>)
 800c82c:	2200      	movs	r2, #0
 800c82e:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800c830:	4b3f      	ldr	r3, [pc, #252]	@ (800c930 <cJSON_ParseWithLengthOpts+0x12c>)
 800c832:	2200      	movs	r2, #0
 800c834:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d042      	beq.n	800c8c2 <cJSON_ParseWithLengthOpts+0xbe>
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d03f      	beq.n	800c8c2 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800c84e:	4a39      	ldr	r2, [pc, #228]	@ (800c934 <cJSON_ParseWithLengthOpts+0x130>)
 800c850:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c854:	ca07      	ldmia	r2, {r0, r1, r2}
 800c856:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800c85a:	4836      	ldr	r0, [pc, #216]	@ (800c934 <cJSON_ParseWithLengthOpts+0x130>)
 800c85c:	f7ff f842 	bl	800b8e4 <cJSON_New_Item>
 800c860:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 800c862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c864:	2b00      	cmp	r3, #0
 800c866:	d02e      	beq.n	800c8c6 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800c868:	f107 0318 	add.w	r3, r7, #24
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7ff ff79 	bl	800c764 <skip_utf8_bom>
 800c872:	4603      	mov	r3, r0
 800c874:	4618      	mov	r0, r3
 800c876:	f7ff ff35 	bl	800c6e4 <buffer_skip_whitespace>
 800c87a:	4603      	mov	r3, r0
 800c87c:	4619      	mov	r1, r3
 800c87e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c880:	f000 f902 	bl	800ca88 <parse_value>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d01f      	beq.n	800c8ca <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00e      	beq.n	800c8ae <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800c890:	f107 0318 	add.w	r3, r7, #24
 800c894:	4618      	mov	r0, r3
 800c896:	f7ff ff25 	bl	800c6e4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800c89a:	6a3a      	ldr	r2, [r7, #32]
 800c89c:	69fb      	ldr	r3, [r7, #28]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d215      	bcs.n	800c8ce <cJSON_ParseWithLengthOpts+0xca>
 800c8a2:	69ba      	ldr	r2, [r7, #24]
 800c8a4:	6a3b      	ldr	r3, [r7, #32]
 800c8a6:	4413      	add	r3, r2
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d10f      	bne.n	800c8ce <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d004      	beq.n	800c8be <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800c8b4:	69ba      	ldr	r2, [r7, #24]
 800c8b6:	6a3b      	ldr	r3, [r7, #32]
 800c8b8:	441a      	add	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	601a      	str	r2, [r3, #0]
    }

    return item;
 800c8be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8c0:	e031      	b.n	800c926 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800c8c2:	bf00      	nop
 800c8c4:	e004      	b.n	800c8d0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800c8c6:	bf00      	nop
 800c8c8:	e002      	b.n	800c8d0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800c8ca:	bf00      	nop
 800c8cc:	e000      	b.n	800c8d0 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800c8ce:	bf00      	nop

fail:
    if (item != NULL)
 800c8d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d002      	beq.n	800c8dc <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800c8d6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c8d8:	f7ff f81a 	bl	800b910 <cJSON_Delete>
    }

    if (value != NULL)
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d020      	beq.n	800c924 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800c8ea:	6a3a      	ldr	r2, [r7, #32]
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d202      	bcs.n	800c8f8 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800c8f2:	6a3b      	ldr	r3, [r7, #32]
 800c8f4:	617b      	str	r3, [r7, #20]
 800c8f6:	e005      	b.n	800c904 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d002      	beq.n	800c904 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	3b01      	subs	r3, #1
 800c902:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d004      	beq.n	800c914 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800c90a:	693a      	ldr	r2, [r7, #16]
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	441a      	add	r2, r3
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800c914:	4b06      	ldr	r3, [pc, #24]	@ (800c930 <cJSON_ParseWithLengthOpts+0x12c>)
 800c916:	461a      	mov	r2, r3
 800c918:	f107 0310 	add.w	r3, r7, #16
 800c91c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c920:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800c924:	2300      	movs	r3, #0
}
 800c926:	4618      	mov	r0, r3
 800c928:	3738      	adds	r7, #56	@ 0x38
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	20000248 	.word	0x20000248
 800c934:	20000000 	.word	0x20000000

0800c938 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800c940:	2200      	movs	r2, #0
 800c942:	2100      	movs	r1, #0
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f7ff ff41 	bl	800c7cc <cJSON_ParseWithOpts>
 800c94a:	4603      	mov	r3, r0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3708      	adds	r7, #8
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b08e      	sub	sp, #56	@ 0x38
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 800c960:	2300      	movs	r3, #0
 800c962:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 800c964:	f107 0310 	add.w	r3, r7, #16
 800c968:	2224      	movs	r2, #36	@ 0x24
 800c96a:	2100      	movs	r1, #0
 800c96c:	4618      	mov	r0, r3
 800c96e:	f009 fb13 	bl	8015f98 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a3b      	ldr	r2, [pc, #236]	@ (800ca64 <print+0x110>)
 800c978:	6812      	ldr	r2, [r2, #0]
 800c97a:	4610      	mov	r0, r2
 800c97c:	4798      	blx	r3
 800c97e:	4603      	mov	r3, r0
 800c980:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800c982:	4b38      	ldr	r3, [pc, #224]	@ (800ca64 <print+0x110>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c992:	ca07      	ldmia	r2, {r0, r1, r2}
 800c994:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d042      	beq.n	800ca24 <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800c99e:	f107 0310 	add.w	r3, r7, #16
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	68f8      	ldr	r0, [r7, #12]
 800c9a6:	f000 f95b 	bl	800cc60 <print_value>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d03b      	beq.n	800ca28 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 800c9b0:	f107 0310 	add.w	r3, r7, #16
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7ff f969 	bl	800bc8c <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00d      	beq.n	800c9de <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	6938      	ldr	r0, [r7, #16]
 800c9c8:	69ba      	ldr	r2, [r7, #24]
 800c9ca:	3201      	adds	r2, #1
 800c9cc:	4611      	mov	r1, r2
 800c9ce:	4798      	blx	r3
 800c9d0:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 800c9d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d029      	beq.n	800ca2c <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	613b      	str	r3, [r7, #16]
 800c9dc:	e020      	b.n	800ca20 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	69ba      	ldr	r2, [r7, #24]
 800c9e4:	3201      	adds	r2, #1
 800c9e6:	4610      	mov	r0, r2
 800c9e8:	4798      	blx	r3
 800c9ea:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 800c9ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d01e      	beq.n	800ca30 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800c9f2:	6939      	ldr	r1, [r7, #16]
 800c9f4:	69bb      	ldr	r3, [r7, #24]
 800c9f6:	1c5a      	adds	r2, r3, #1
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	bf28      	it	cs
 800c9fe:	4613      	movcs	r3, r2
 800ca00:	461a      	mov	r2, r3
 800ca02:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ca04:	f009 fb65 	bl	80160d2 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 800ca08:	69bb      	ldr	r3, [r7, #24]
 800ca0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca0c:	4413      	add	r3, r2
 800ca0e:	2200      	movs	r2, #0
 800ca10:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	693a      	ldr	r2, [r7, #16]
 800ca18:	4610      	mov	r0, r2
 800ca1a:	4798      	blx	r3
        buffer->buffer = NULL;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	613b      	str	r3, [r7, #16]
    }

    return printed;
 800ca20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca22:	e01a      	b.n	800ca5a <print+0x106>
        goto fail;
 800ca24:	bf00      	nop
 800ca26:	e004      	b.n	800ca32 <print+0xde>
        goto fail;
 800ca28:	bf00      	nop
 800ca2a:	e002      	b.n	800ca32 <print+0xde>
            goto fail;
 800ca2c:	bf00      	nop
 800ca2e:	e000      	b.n	800ca32 <print+0xde>
            goto fail;
 800ca30:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d006      	beq.n	800ca46 <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	693a      	ldr	r2, [r7, #16]
 800ca3e:	4610      	mov	r0, r2
 800ca40:	4798      	blx	r3
        buffer->buffer = NULL;
 800ca42:	2300      	movs	r3, #0
 800ca44:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 800ca46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d005      	beq.n	800ca58 <print+0x104>
    {
        hooks->deallocate(printed);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ca52:	4798      	blx	r3
        printed = NULL;
 800ca54:	2300      	movs	r3, #0
 800ca56:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 800ca58:	2300      	movs	r3, #0
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3738      	adds	r7, #56	@ 0x38
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	080189c8 	.word	0x080189c8

0800ca68 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 800ca70:	4a04      	ldr	r2, [pc, #16]	@ (800ca84 <cJSON_PrintUnformatted+0x1c>)
 800ca72:	2100      	movs	r1, #0
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f7ff ff6d 	bl	800c954 <print>
 800ca7a:	4603      	mov	r3, r0
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3708      	adds	r7, #8
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	20000000 	.word	0x20000000

0800ca88 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d003      	beq.n	800caa0 <parse_value+0x18>
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d101      	bne.n	800caa4 <parse_value+0x1c>
    {
        return false; /* no input */
 800caa0:	2300      	movs	r3, #0
 800caa2:	e0d2      	b.n	800cc4a <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d01d      	beq.n	800cae6 <parse_value+0x5e>
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	689b      	ldr	r3, [r3, #8]
 800caae:	1d1a      	adds	r2, r3, #4
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d816      	bhi.n	800cae6 <parse_value+0x5e>
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	689b      	ldr	r3, [r3, #8]
 800cac0:	4413      	add	r3, r2
 800cac2:	2204      	movs	r2, #4
 800cac4:	4963      	ldr	r1, [pc, #396]	@ (800cc54 <parse_value+0x1cc>)
 800cac6:	4618      	mov	r0, r3
 800cac8:	f009 fa6e 	bl	8015fa8 <strncmp>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d109      	bne.n	800cae6 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2204      	movs	r2, #4
 800cad6:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	1d1a      	adds	r2, r3, #4
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	609a      	str	r2, [r3, #8]
        return true;
 800cae2:	2301      	movs	r3, #1
 800cae4:	e0b1      	b.n	800cc4a <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d01d      	beq.n	800cb28 <parse_value+0xa0>
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	1d5a      	adds	r2, r3, #5
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d816      	bhi.n	800cb28 <parse_value+0xa0>
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	689b      	ldr	r3, [r3, #8]
 800cb02:	4413      	add	r3, r2
 800cb04:	2205      	movs	r2, #5
 800cb06:	4954      	ldr	r1, [pc, #336]	@ (800cc58 <parse_value+0x1d0>)
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f009 fa4d 	bl	8015fa8 <strncmp>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d109      	bne.n	800cb28 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2201      	movs	r2, #1
 800cb18:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	1d5a      	adds	r2, r3, #5
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	609a      	str	r2, [r3, #8]
        return true;
 800cb24:	2301      	movs	r3, #1
 800cb26:	e090      	b.n	800cc4a <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d020      	beq.n	800cb70 <parse_value+0xe8>
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	689b      	ldr	r3, [r3, #8]
 800cb32:	1d1a      	adds	r2, r3, #4
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d819      	bhi.n	800cb70 <parse_value+0xe8>
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	4413      	add	r3, r2
 800cb46:	2204      	movs	r2, #4
 800cb48:	4944      	ldr	r1, [pc, #272]	@ (800cc5c <parse_value+0x1d4>)
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f009 fa2c 	bl	8015fa8 <strncmp>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d10c      	bne.n	800cb70 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2202      	movs	r2, #2
 800cb5a:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2201      	movs	r2, #1
 800cb60:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	689b      	ldr	r3, [r3, #8]
 800cb66:	1d1a      	adds	r2, r3, #4
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	609a      	str	r2, [r3, #8]
        return true;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	e06c      	b.n	800cc4a <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d013      	beq.n	800cb9e <parse_value+0x116>
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	689a      	ldr	r2, [r3, #8]
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d20d      	bcs.n	800cb9e <parse_value+0x116>
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	4413      	add	r3, r2
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	2b22      	cmp	r3, #34	@ 0x22
 800cb90:	d105      	bne.n	800cb9e <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800cb92:	6839      	ldr	r1, [r7, #0]
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f7ff fb1d 	bl	800c1d4 <parse_string>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	e055      	b.n	800cc4a <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d023      	beq.n	800cbec <parse_value+0x164>
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	689a      	ldr	r2, [r3, #8]
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d21d      	bcs.n	800cbec <parse_value+0x164>
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	689b      	ldr	r3, [r3, #8]
 800cbb8:	4413      	add	r3, r2
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	2b2d      	cmp	r3, #45	@ 0x2d
 800cbbe:	d00f      	beq.n	800cbe0 <parse_value+0x158>
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	4413      	add	r3, r2
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	2b2f      	cmp	r3, #47	@ 0x2f
 800cbce:	d90d      	bls.n	800cbec <parse_value+0x164>
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	4413      	add	r3, r2
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	2b39      	cmp	r3, #57	@ 0x39
 800cbde:	d805      	bhi.n	800cbec <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800cbe0:	6839      	ldr	r1, [r7, #0]
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f7fe feec 	bl	800b9c0 <parse_number>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	e02e      	b.n	800cc4a <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d013      	beq.n	800cc1a <parse_value+0x192>
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	689a      	ldr	r2, [r3, #8]
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d20d      	bcs.n	800cc1a <parse_value+0x192>
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	689b      	ldr	r3, [r3, #8]
 800cc06:	4413      	add	r3, r2
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	2b5b      	cmp	r3, #91	@ 0x5b
 800cc0c:	d105      	bne.n	800cc1a <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800cc0e:	6839      	ldr	r1, [r7, #0]
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 f909 	bl	800ce28 <parse_array>
 800cc16:	4603      	mov	r3, r0
 800cc18:	e017      	b.n	800cc4a <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d013      	beq.n	800cc48 <parse_value+0x1c0>
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	689a      	ldr	r2, [r3, #8]
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d20d      	bcs.n	800cc48 <parse_value+0x1c0>
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	689b      	ldr	r3, [r3, #8]
 800cc34:	4413      	add	r3, r2
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	2b7b      	cmp	r3, #123	@ 0x7b
 800cc3a:	d105      	bne.n	800cc48 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800cc3c:	6839      	ldr	r1, [r7, #0]
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 fa3c 	bl	800d0bc <parse_object>
 800cc44:	4603      	mov	r3, r0
 800cc46:	e000      	b.n	800cc4a <parse_value+0x1c2>
    }

    return false;
 800cc48:	2300      	movs	r3, #0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3708      	adds	r7, #8
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	08018750 	.word	0x08018750
 800cc58:	08018780 	.word	0x08018780
 800cc5c:	08018788 	.word	0x08018788

0800cc60 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d002      	beq.n	800cc7a <print_value+0x1a>
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d101      	bne.n	800cc7e <print_value+0x1e>
    {
        return false;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	e0c9      	b.n	800ce12 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	68db      	ldr	r3, [r3, #12]
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	2b80      	cmp	r3, #128	@ 0x80
 800cc86:	f000 808e 	beq.w	800cda6 <print_value+0x146>
 800cc8a:	2b80      	cmp	r3, #128	@ 0x80
 800cc8c:	f300 80c0 	bgt.w	800ce10 <print_value+0x1b0>
 800cc90:	2b20      	cmp	r3, #32
 800cc92:	dc49      	bgt.n	800cd28 <print_value+0xc8>
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	f340 80bb 	ble.w	800ce10 <print_value+0x1b0>
 800cc9a:	3b01      	subs	r3, #1
 800cc9c:	2b1f      	cmp	r3, #31
 800cc9e:	f200 80b7 	bhi.w	800ce10 <print_value+0x1b0>
 800cca2:	a201      	add	r2, pc, #4	@ (adr r2, 800cca8 <print_value+0x48>)
 800cca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca8:	0800cd53 	.word	0x0800cd53
 800ccac:	0800cd77 	.word	0x0800cd77
 800ccb0:	0800ce11 	.word	0x0800ce11
 800ccb4:	0800cd2f 	.word	0x0800cd2f
 800ccb8:	0800ce11 	.word	0x0800ce11
 800ccbc:	0800ce11 	.word	0x0800ce11
 800ccc0:	0800ce11 	.word	0x0800ce11
 800ccc4:	0800cd9b 	.word	0x0800cd9b
 800ccc8:	0800ce11 	.word	0x0800ce11
 800cccc:	0800ce11 	.word	0x0800ce11
 800ccd0:	0800ce11 	.word	0x0800ce11
 800ccd4:	0800ce11 	.word	0x0800ce11
 800ccd8:	0800ce11 	.word	0x0800ce11
 800ccdc:	0800ce11 	.word	0x0800ce11
 800cce0:	0800ce11 	.word	0x0800ce11
 800cce4:	0800cded 	.word	0x0800cded
 800cce8:	0800ce11 	.word	0x0800ce11
 800ccec:	0800ce11 	.word	0x0800ce11
 800ccf0:	0800ce11 	.word	0x0800ce11
 800ccf4:	0800ce11 	.word	0x0800ce11
 800ccf8:	0800ce11 	.word	0x0800ce11
 800ccfc:	0800ce11 	.word	0x0800ce11
 800cd00:	0800ce11 	.word	0x0800ce11
 800cd04:	0800ce11 	.word	0x0800ce11
 800cd08:	0800ce11 	.word	0x0800ce11
 800cd0c:	0800ce11 	.word	0x0800ce11
 800cd10:	0800ce11 	.word	0x0800ce11
 800cd14:	0800ce11 	.word	0x0800ce11
 800cd18:	0800ce11 	.word	0x0800ce11
 800cd1c:	0800ce11 	.word	0x0800ce11
 800cd20:	0800ce11 	.word	0x0800ce11
 800cd24:	0800cdf9 	.word	0x0800cdf9
 800cd28:	2b40      	cmp	r3, #64	@ 0x40
 800cd2a:	d06b      	beq.n	800ce04 <print_value+0x1a4>
 800cd2c:	e070      	b.n	800ce10 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800cd2e:	2105      	movs	r1, #5
 800cd30:	6838      	ldr	r0, [r7, #0]
 800cd32:	f7fe ff11 	bl	800bb58 <ensure>
 800cd36:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d101      	bne.n	800cd42 <print_value+0xe2>
            {
                return false;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	e067      	b.n	800ce12 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	4a35      	ldr	r2, [pc, #212]	@ (800ce1c <print_value+0x1bc>)
 800cd46:	6810      	ldr	r0, [r2, #0]
 800cd48:	6018      	str	r0, [r3, #0]
 800cd4a:	7912      	ldrb	r2, [r2, #4]
 800cd4c:	711a      	strb	r2, [r3, #4]
            return true;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e05f      	b.n	800ce12 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 800cd52:	2106      	movs	r1, #6
 800cd54:	6838      	ldr	r0, [r7, #0]
 800cd56:	f7fe feff 	bl	800bb58 <ensure>
 800cd5a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d101      	bne.n	800cd66 <print_value+0x106>
            {
                return false;
 800cd62:	2300      	movs	r3, #0
 800cd64:	e055      	b.n	800ce12 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	4a2d      	ldr	r2, [pc, #180]	@ (800ce20 <print_value+0x1c0>)
 800cd6a:	6810      	ldr	r0, [r2, #0]
 800cd6c:	6018      	str	r0, [r3, #0]
 800cd6e:	8892      	ldrh	r2, [r2, #4]
 800cd70:	809a      	strh	r2, [r3, #4]
            return true;
 800cd72:	2301      	movs	r3, #1
 800cd74:	e04d      	b.n	800ce12 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800cd76:	2105      	movs	r1, #5
 800cd78:	6838      	ldr	r0, [r7, #0]
 800cd7a:	f7fe feed 	bl	800bb58 <ensure>
 800cd7e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d101      	bne.n	800cd8a <print_value+0x12a>
            {
                return false;
 800cd86:	2300      	movs	r3, #0
 800cd88:	e043      	b.n	800ce12 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	4a25      	ldr	r2, [pc, #148]	@ (800ce24 <print_value+0x1c4>)
 800cd8e:	6810      	ldr	r0, [r2, #0]
 800cd90:	6018      	str	r0, [r3, #0]
 800cd92:	7912      	ldrb	r2, [r2, #4]
 800cd94:	711a      	strb	r2, [r3, #4]
            return true;
 800cd96:	2301      	movs	r3, #1
 800cd98:	e03b      	b.n	800ce12 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800cd9a:	6839      	ldr	r1, [r7, #0]
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f7fe ffdf 	bl	800bd60 <print_number>
 800cda2:	4603      	mov	r3, r0
 800cda4:	e035      	b.n	800ce12 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800cda6:	2300      	movs	r3, #0
 800cda8:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	691b      	ldr	r3, [r3, #16]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d101      	bne.n	800cdb6 <print_value+0x156>
            {
                return false;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	e02d      	b.n	800ce12 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	691b      	ldr	r3, [r3, #16]
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7fb fa32 	bl	8008224 <strlen>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800cdc6:	68b9      	ldr	r1, [r7, #8]
 800cdc8:	6838      	ldr	r0, [r7, #0]
 800cdca:	f7fe fec5 	bl	800bb58 <ensure>
 800cdce:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d101      	bne.n	800cdda <print_value+0x17a>
            {
                return false;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	e01b      	b.n	800ce12 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	691b      	ldr	r3, [r3, #16]
 800cdde:	68ba      	ldr	r2, [r7, #8]
 800cde0:	4619      	mov	r1, r3
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f009 f975 	bl	80160d2 <memcpy>
            return true;
 800cde8:	2301      	movs	r3, #1
 800cdea:	e012      	b.n	800ce12 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 800cdec:	6839      	ldr	r1, [r7, #0]
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f7ff fc68 	bl	800c6c4 <print_string>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	e00c      	b.n	800ce12 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 800cdf8:	6839      	ldr	r1, [r7, #0]
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f8d8 	bl	800cfb0 <print_array>
 800ce00:	4603      	mov	r3, r0
 800ce02:	e006      	b.n	800ce12 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 800ce04:	6839      	ldr	r1, [r7, #0]
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 fa64 	bl	800d2d4 <print_object>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	e000      	b.n	800ce12 <print_value+0x1b2>

        default:
            return false;
 800ce10:	2300      	movs	r3, #0
    }
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	08018750 	.word	0x08018750
 800ce20:	08018780 	.word	0x08018780
 800ce24:	08018788 	.word	0x08018788

0800ce28 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b086      	sub	sp, #24
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800ce32:	2300      	movs	r3, #0
 800ce34:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800ce36:	2300      	movs	r3, #0
 800ce38:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	68db      	ldr	r3, [r3, #12]
 800ce3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ce42:	d301      	bcc.n	800ce48 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800ce44:	2300      	movs	r3, #0
 800ce46:	e0af      	b.n	800cfa8 <parse_array+0x180>
    }
    input_buffer->depth++;
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	1c5a      	adds	r2, r3, #1
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	2b5b      	cmp	r3, #91	@ 0x5b
 800ce60:	f040 8094 	bne.w	800cf8c <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	1c5a      	adds	r2, r3, #1
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800ce6e:	6838      	ldr	r0, [r7, #0]
 800ce70:	f7ff fc38 	bl	800c6e4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00d      	beq.n	800ce96 <parse_array+0x6e>
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	689a      	ldr	r2, [r3, #8]
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d207      	bcs.n	800ce96 <parse_array+0x6e>
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	4413      	add	r3, r2
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	2b5d      	cmp	r3, #93	@ 0x5d
 800ce94:	d061      	beq.n	800cf5a <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d005      	beq.n	800cea8 <parse_array+0x80>
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	689a      	ldr	r2, [r3, #8]
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d305      	bcc.n	800ceb4 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	689b      	ldr	r3, [r3, #8]
 800ceac:	1e5a      	subs	r2, r3, #1
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	609a      	str	r2, [r3, #8]
        goto fail;
 800ceb2:	e072      	b.n	800cf9a <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	1e5a      	subs	r2, r3, #1
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	3310      	adds	r3, #16
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7fe fd0e 	bl	800b8e4 <cJSON_New_Item>
 800cec8:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d05f      	beq.n	800cf90 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d104      	bne.n	800cee0 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	617b      	str	r3, [r7, #20]
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	613b      	str	r3, [r7, #16]
 800cede:	e007      	b.n	800cef0 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	68fa      	ldr	r2, [r7, #12]
 800cee4:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	693a      	ldr	r2, [r7, #16]
 800ceea:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	1c5a      	adds	r2, r3, #1
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800cefa:	6838      	ldr	r0, [r7, #0]
 800cefc:	f7ff fbf2 	bl	800c6e4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800cf00:	6839      	ldr	r1, [r7, #0]
 800cf02:	6938      	ldr	r0, [r7, #16]
 800cf04:	f7ff fdc0 	bl	800ca88 <parse_value>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d042      	beq.n	800cf94 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800cf0e:	6838      	ldr	r0, [r7, #0]
 800cf10:	f7ff fbe8 	bl	800c6e4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d00d      	beq.n	800cf36 <parse_array+0x10e>
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	689a      	ldr	r2, [r3, #8]
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d207      	bcs.n	800cf36 <parse_array+0x10e>
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	4413      	add	r3, r2
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	2b2c      	cmp	r3, #44	@ 0x2c
 800cf34:	d0c3      	beq.n	800cebe <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d02d      	beq.n	800cf98 <parse_array+0x170>
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	689a      	ldr	r2, [r3, #8]
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d227      	bcs.n	800cf98 <parse_array+0x170>
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	4413      	add	r3, r2
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	2b5d      	cmp	r3, #93	@ 0x5d
 800cf56:	d11f      	bne.n	800cf98 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800cf58:	e000      	b.n	800cf5c <parse_array+0x134>
        goto success;
 800cf5a:	bf00      	nop
    input_buffer->depth--;
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	1e5a      	subs	r2, r3, #1
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <parse_array+0x14a>
        head->prev = current_item;
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	693a      	ldr	r2, [r7, #16]
 800cf70:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2220      	movs	r2, #32
 800cf76:	60da      	str	r2, [r3, #12]
    item->child = head;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	697a      	ldr	r2, [r7, #20]
 800cf7c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	689b      	ldr	r3, [r3, #8]
 800cf82:	1c5a      	adds	r2, r3, #1
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	609a      	str	r2, [r3, #8]

    return true;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e00d      	b.n	800cfa8 <parse_array+0x180>
        goto fail;
 800cf8c:	bf00      	nop
 800cf8e:	e004      	b.n	800cf9a <parse_array+0x172>
            goto fail; /* allocation failure */
 800cf90:	bf00      	nop
 800cf92:	e002      	b.n	800cf9a <parse_array+0x172>
            goto fail; /* failed to parse value */
 800cf94:	bf00      	nop
 800cf96:	e000      	b.n	800cf9a <parse_array+0x172>
        goto fail; /* expected end of array */
 800cf98:	bf00      	nop

fail:
    if (head != NULL)
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d002      	beq.n	800cfa6 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800cfa0:	6978      	ldr	r0, [r7, #20]
 800cfa2:	f7fe fcb5 	bl	800b910 <cJSON_Delete>
    }

    return false;
 800cfa6:	2300      	movs	r3, #0
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3718      	adds	r7, #24
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b086      	sub	sp, #24
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	689b      	ldr	r3, [r3, #8]
 800cfc6:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d101      	bne.n	800cfd2 <print_array+0x22>
    {
        return false;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	e070      	b.n	800d0b4 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800cfd2:	2101      	movs	r1, #1
 800cfd4:	6838      	ldr	r0, [r7, #0]
 800cfd6:	f7fe fdbf 	bl	800bb58 <ensure>
 800cfda:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d101      	bne.n	800cfe6 <print_array+0x36>
    {
        return false;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	e066      	b.n	800d0b4 <print_array+0x104>
    }

    *output_pointer = '[';
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	225b      	movs	r2, #91	@ 0x5b
 800cfea:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	689b      	ldr	r3, [r3, #8]
 800cff0:	1c5a      	adds	r2, r3, #1
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	1c5a      	adds	r2, r3, #1
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800d000:	e03d      	b.n	800d07e <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800d002:	6839      	ldr	r1, [r7, #0]
 800d004:	6938      	ldr	r0, [r7, #16]
 800d006:	f7ff fe2b 	bl	800cc60 <print_value>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d101      	bne.n	800d014 <print_array+0x64>
        {
            return false;
 800d010:	2300      	movs	r3, #0
 800d012:	e04f      	b.n	800d0b4 <print_array+0x104>
        }
        update_offset(output_buffer);
 800d014:	6838      	ldr	r0, [r7, #0]
 800d016:	f7fe fe39 	bl	800bc8c <update_offset>
        if (current_element->next)
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d02a      	beq.n	800d078 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	695b      	ldr	r3, [r3, #20]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d001      	beq.n	800d02e <print_array+0x7e>
 800d02a:	2302      	movs	r3, #2
 800d02c:	e000      	b.n	800d030 <print_array+0x80>
 800d02e:	2301      	movs	r3, #1
 800d030:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	3301      	adds	r3, #1
 800d036:	4619      	mov	r1, r3
 800d038:	6838      	ldr	r0, [r7, #0]
 800d03a:	f7fe fd8d 	bl	800bb58 <ensure>
 800d03e:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d101      	bne.n	800d04a <print_array+0x9a>
            {
                return false;
 800d046:	2300      	movs	r3, #0
 800d048:	e034      	b.n	800d0b4 <print_array+0x104>
            }
            *output_pointer++ = ',';
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	1c5a      	adds	r2, r3, #1
 800d04e:	617a      	str	r2, [r7, #20]
 800d050:	222c      	movs	r2, #44	@ 0x2c
 800d052:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	695b      	ldr	r3, [r3, #20]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d004      	beq.n	800d066 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	1c5a      	adds	r2, r3, #1
 800d060:	617a      	str	r2, [r7, #20]
 800d062:	2220      	movs	r2, #32
 800d064:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	2200      	movs	r2, #0
 800d06a:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	689a      	ldr	r2, [r3, #8]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	441a      	add	r2, r3
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d1be      	bne.n	800d002 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 800d084:	2102      	movs	r1, #2
 800d086:	6838      	ldr	r0, [r7, #0]
 800d088:	f7fe fd66 	bl	800bb58 <ensure>
 800d08c:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d101      	bne.n	800d098 <print_array+0xe8>
    {
        return false;
 800d094:	2300      	movs	r3, #0
 800d096:	e00d      	b.n	800d0b4 <print_array+0x104>
    }
    *output_pointer++ = ']';
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	1c5a      	adds	r2, r3, #1
 800d09c:	617a      	str	r2, [r7, #20]
 800d09e:	225d      	movs	r2, #93	@ 0x5d
 800d0a0:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	1e5a      	subs	r2, r3, #1
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	60da      	str	r2, [r3, #12]

    return true;
 800d0b2:	2301      	movs	r3, #1
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3718      	adds	r7, #24
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b086      	sub	sp, #24
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d0d6:	d301      	bcc.n	800d0dc <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800d0d8:	2300      	movs	r3, #0
 800d0da:	e0f7      	b.n	800d2cc <parse_object+0x210>
    }
    input_buffer->depth++;
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	68db      	ldr	r3, [r3, #12]
 800d0e0:	1c5a      	adds	r2, r3, #1
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	f000 80db 	beq.w	800d2a4 <parse_object+0x1e8>
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	689a      	ldr	r2, [r3, #8]
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	f080 80d4 	bcs.w	800d2a4 <parse_object+0x1e8>
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	4413      	add	r3, r2
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	2b7b      	cmp	r3, #123	@ 0x7b
 800d10a:	f040 80cb 	bne.w	800d2a4 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	1c5a      	adds	r2, r3, #1
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800d118:	6838      	ldr	r0, [r7, #0]
 800d11a:	f7ff fae3 	bl	800c6e4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00e      	beq.n	800d142 <parse_object+0x86>
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	689a      	ldr	r2, [r3, #8]
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d208      	bcs.n	800d142 <parse_object+0x86>
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	689b      	ldr	r3, [r3, #8]
 800d138:	4413      	add	r3, r2
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	2b7d      	cmp	r3, #125	@ 0x7d
 800d13e:	f000 8098 	beq.w	800d272 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d005      	beq.n	800d154 <parse_object+0x98>
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	689a      	ldr	r2, [r3, #8]
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	429a      	cmp	r2, r3
 800d152:	d305      	bcc.n	800d160 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	689b      	ldr	r3, [r3, #8]
 800d158:	1e5a      	subs	r2, r3, #1
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	609a      	str	r2, [r3, #8]
        goto fail;
 800d15e:	e0ae      	b.n	800d2be <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	689b      	ldr	r3, [r3, #8]
 800d164:	1e5a      	subs	r2, r3, #1
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	3310      	adds	r3, #16
 800d16e:	4618      	mov	r0, r3
 800d170:	f7fe fbb8 	bl	800b8e4 <cJSON_New_Item>
 800d174:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	f000 8095 	beq.w	800d2a8 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d104      	bne.n	800d18e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	617b      	str	r3, [r7, #20]
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	613b      	str	r3, [r7, #16]
 800d18c:	e007      	b.n	800d19e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	68fa      	ldr	r2, [r7, #12]
 800d192:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	693a      	ldr	r2, [r7, #16]
 800d198:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f000 8083 	beq.w	800d2ac <parse_object+0x1f0>
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	1c5a      	adds	r2, r3, #1
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d27b      	bcs.n	800d2ac <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	689b      	ldr	r3, [r3, #8]
 800d1b8:	1c5a      	adds	r2, r3, #1
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800d1be:	6838      	ldr	r0, [r7, #0]
 800d1c0:	f7ff fa90 	bl	800c6e4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800d1c4:	6839      	ldr	r1, [r7, #0]
 800d1c6:	6938      	ldr	r0, [r7, #16]
 800d1c8:	f7ff f804 	bl	800c1d4 <parse_string>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d06e      	beq.n	800d2b0 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800d1d2:	6838      	ldr	r0, [r7, #0]
 800d1d4:	f7ff fa86 	bl	800c6e4 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	691a      	ldr	r2, [r3, #16]
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d063      	beq.n	800d2b4 <parse_object+0x1f8>
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	689a      	ldr	r2, [r3, #8]
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d25d      	bcs.n	800d2b4 <parse_object+0x1f8>
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	689b      	ldr	r3, [r3, #8]
 800d200:	4413      	add	r3, r2
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	2b3a      	cmp	r3, #58	@ 0x3a
 800d206:	d155      	bne.n	800d2b4 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	689b      	ldr	r3, [r3, #8]
 800d20c:	1c5a      	adds	r2, r3, #1
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800d212:	6838      	ldr	r0, [r7, #0]
 800d214:	f7ff fa66 	bl	800c6e4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800d218:	6839      	ldr	r1, [r7, #0]
 800d21a:	6938      	ldr	r0, [r7, #16]
 800d21c:	f7ff fc34 	bl	800ca88 <parse_value>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d048      	beq.n	800d2b8 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800d226:	6838      	ldr	r0, [r7, #0]
 800d228:	f7ff fa5c 	bl	800c6e4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d00d      	beq.n	800d24e <parse_object+0x192>
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	689a      	ldr	r2, [r3, #8]
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d207      	bcs.n	800d24e <parse_object+0x192>
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	689b      	ldr	r3, [r3, #8]
 800d246:	4413      	add	r3, r2
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	2b2c      	cmp	r3, #44	@ 0x2c
 800d24c:	d08d      	beq.n	800d16a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d033      	beq.n	800d2bc <parse_object+0x200>
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	689a      	ldr	r2, [r3, #8]
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d22d      	bcs.n	800d2bc <parse_object+0x200>
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	4413      	add	r3, r2
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	2b7d      	cmp	r3, #125	@ 0x7d
 800d26e:	d125      	bne.n	800d2bc <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 800d270:	e000      	b.n	800d274 <parse_object+0x1b8>
        goto success; /* empty object */
 800d272:	bf00      	nop
    input_buffer->depth--;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	1e5a      	subs	r2, r3, #1
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d002      	beq.n	800d28a <parse_object+0x1ce>
        head->prev = current_item;
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	693a      	ldr	r2, [r7, #16]
 800d288:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2240      	movs	r2, #64	@ 0x40
 800d28e:	60da      	str	r2, [r3, #12]
    item->child = head;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	697a      	ldr	r2, [r7, #20]
 800d294:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	1c5a      	adds	r2, r3, #1
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	609a      	str	r2, [r3, #8]
    return true;
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	e013      	b.n	800d2cc <parse_object+0x210>
        goto fail; /* not an object */
 800d2a4:	bf00      	nop
 800d2a6:	e00a      	b.n	800d2be <parse_object+0x202>
            goto fail; /* allocation failure */
 800d2a8:	bf00      	nop
 800d2aa:	e008      	b.n	800d2be <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 800d2ac:	bf00      	nop
 800d2ae:	e006      	b.n	800d2be <parse_object+0x202>
            goto fail; /* failed to parse name */
 800d2b0:	bf00      	nop
 800d2b2:	e004      	b.n	800d2be <parse_object+0x202>
            goto fail; /* invalid object */
 800d2b4:	bf00      	nop
 800d2b6:	e002      	b.n	800d2be <parse_object+0x202>
            goto fail; /* failed to parse value */
 800d2b8:	bf00      	nop
 800d2ba:	e000      	b.n	800d2be <parse_object+0x202>
        goto fail; /* expected end of object */
 800d2bc:	bf00      	nop

fail:
    if (head != NULL)
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d002      	beq.n	800d2ca <parse_object+0x20e>
    {
        cJSON_Delete(head);
 800d2c4:	6978      	ldr	r0, [r7, #20]
 800d2c6:	f7fe fb23 	bl	800b910 <cJSON_Delete>
    }

    return false;
 800d2ca:	2300      	movs	r3, #0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3718      	adds	r7, #24
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b088      	sub	sp, #32
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	689b      	ldr	r3, [r3, #8]
 800d2ea:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d101      	bne.n	800d2f6 <print_object+0x22>
    {
        return false;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	e108      	b.n	800d508 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	695b      	ldr	r3, [r3, #20]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d001      	beq.n	800d302 <print_object+0x2e>
 800d2fe:	2302      	movs	r3, #2
 800d300:	e000      	b.n	800d304 <print_object+0x30>
 800d302:	2301      	movs	r3, #1
 800d304:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	3301      	adds	r3, #1
 800d30a:	4619      	mov	r1, r3
 800d30c:	6838      	ldr	r0, [r7, #0]
 800d30e:	f7fe fc23 	bl	800bb58 <ensure>
 800d312:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d101      	bne.n	800d31e <print_object+0x4a>
    {
        return false;
 800d31a:	2300      	movs	r3, #0
 800d31c:	e0f4      	b.n	800d508 <print_object+0x234>
    }

    *output_pointer++ = '{';
 800d31e:	69fb      	ldr	r3, [r7, #28]
 800d320:	1c5a      	adds	r2, r3, #1
 800d322:	61fa      	str	r2, [r7, #28]
 800d324:	227b      	movs	r2, #123	@ 0x7b
 800d326:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	68db      	ldr	r3, [r3, #12]
 800d32c:	1c5a      	adds	r2, r3, #1
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	695b      	ldr	r3, [r3, #20]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d004      	beq.n	800d344 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 800d33a:	69fb      	ldr	r3, [r7, #28]
 800d33c:	1c5a      	adds	r2, r3, #1
 800d33e:	61fa      	str	r2, [r7, #28]
 800d340:	220a      	movs	r2, #10
 800d342:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	689a      	ldr	r2, [r3, #8]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	441a      	add	r2, r3
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	609a      	str	r2, [r3, #8]

    while (current_item)
 800d350:	e0a0      	b.n	800d494 <print_object+0x1c0>
    {
        if (output_buffer->format)
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	695b      	ldr	r3, [r3, #20]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d022      	beq.n	800d3a0 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	68db      	ldr	r3, [r3, #12]
 800d35e:	4619      	mov	r1, r3
 800d360:	6838      	ldr	r0, [r7, #0]
 800d362:	f7fe fbf9 	bl	800bb58 <ensure>
 800d366:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d101      	bne.n	800d372 <print_object+0x9e>
            {
                return false;
 800d36e:	2300      	movs	r3, #0
 800d370:	e0ca      	b.n	800d508 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 800d372:	2300      	movs	r3, #0
 800d374:	617b      	str	r3, [r7, #20]
 800d376:	e007      	b.n	800d388 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 800d378:	69fb      	ldr	r3, [r7, #28]
 800d37a:	1c5a      	adds	r2, r3, #1
 800d37c:	61fa      	str	r2, [r7, #28]
 800d37e:	2209      	movs	r2, #9
 800d380:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	3301      	adds	r3, #1
 800d386:	617b      	str	r3, [r7, #20]
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	68db      	ldr	r3, [r3, #12]
 800d38c:	697a      	ldr	r2, [r7, #20]
 800d38e:	429a      	cmp	r2, r3
 800d390:	d3f2      	bcc.n	800d378 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	689a      	ldr	r2, [r3, #8]
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	441a      	add	r2, r3
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800d3a0:	69bb      	ldr	r3, [r7, #24]
 800d3a2:	6a1b      	ldr	r3, [r3, #32]
 800d3a4:	6839      	ldr	r1, [r7, #0]
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7ff f85c 	bl	800c464 <print_string_ptr>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d101      	bne.n	800d3b6 <print_object+0xe2>
        {
            return false;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	e0a8      	b.n	800d508 <print_object+0x234>
        }
        update_offset(output_buffer);
 800d3b6:	6838      	ldr	r0, [r7, #0]
 800d3b8:	f7fe fc68 	bl	800bc8c <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	695b      	ldr	r3, [r3, #20]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d001      	beq.n	800d3c8 <print_object+0xf4>
 800d3c4:	2302      	movs	r3, #2
 800d3c6:	e000      	b.n	800d3ca <print_object+0xf6>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800d3cc:	68f9      	ldr	r1, [r7, #12]
 800d3ce:	6838      	ldr	r0, [r7, #0]
 800d3d0:	f7fe fbc2 	bl	800bb58 <ensure>
 800d3d4:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d101      	bne.n	800d3e0 <print_object+0x10c>
        {
            return false;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	e093      	b.n	800d508 <print_object+0x234>
        }
        *output_pointer++ = ':';
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	1c5a      	adds	r2, r3, #1
 800d3e4:	61fa      	str	r2, [r7, #28]
 800d3e6:	223a      	movs	r2, #58	@ 0x3a
 800d3e8:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	695b      	ldr	r3, [r3, #20]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d004      	beq.n	800d3fc <print_object+0x128>
        {
            *output_pointer++ = '\t';
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	1c5a      	adds	r2, r3, #1
 800d3f6:	61fa      	str	r2, [r7, #28]
 800d3f8:	2209      	movs	r2, #9
 800d3fa:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	689a      	ldr	r2, [r3, #8]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	441a      	add	r2, r3
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800d408:	6839      	ldr	r1, [r7, #0]
 800d40a:	69b8      	ldr	r0, [r7, #24]
 800d40c:	f7ff fc28 	bl	800cc60 <print_value>
 800d410:	4603      	mov	r3, r0
 800d412:	2b00      	cmp	r3, #0
 800d414:	d101      	bne.n	800d41a <print_object+0x146>
        {
            return false;
 800d416:	2300      	movs	r3, #0
 800d418:	e076      	b.n	800d508 <print_object+0x234>
        }
        update_offset(output_buffer);
 800d41a:	6838      	ldr	r0, [r7, #0]
 800d41c:	f7fe fc36 	bl	800bc8c <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	695b      	ldr	r3, [r3, #20]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d001      	beq.n	800d42c <print_object+0x158>
 800d428:	2201      	movs	r2, #1
 800d42a:	e000      	b.n	800d42e <print_object+0x15a>
 800d42c:	2200      	movs	r2, #0
 800d42e:	69bb      	ldr	r3, [r7, #24]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d001      	beq.n	800d43a <print_object+0x166>
 800d436:	2301      	movs	r3, #1
 800d438:	e000      	b.n	800d43c <print_object+0x168>
 800d43a:	2300      	movs	r3, #0
 800d43c:	4413      	add	r3, r2
 800d43e:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	3301      	adds	r3, #1
 800d444:	4619      	mov	r1, r3
 800d446:	6838      	ldr	r0, [r7, #0]
 800d448:	f7fe fb86 	bl	800bb58 <ensure>
 800d44c:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800d44e:	69fb      	ldr	r3, [r7, #28]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d101      	bne.n	800d458 <print_object+0x184>
        {
            return false;
 800d454:	2300      	movs	r3, #0
 800d456:	e057      	b.n	800d508 <print_object+0x234>
        }
        if (current_item->next)
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d004      	beq.n	800d46a <print_object+0x196>
        {
            *output_pointer++ = ',';
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	1c5a      	adds	r2, r3, #1
 800d464:	61fa      	str	r2, [r7, #28]
 800d466:	222c      	movs	r2, #44	@ 0x2c
 800d468:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	695b      	ldr	r3, [r3, #20]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d004      	beq.n	800d47c <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	1c5a      	adds	r2, r3, #1
 800d476:	61fa      	str	r2, [r7, #28]
 800d478:	220a      	movs	r2, #10
 800d47a:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 800d47c:	69fb      	ldr	r3, [r7, #28]
 800d47e:	2200      	movs	r2, #0
 800d480:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	689a      	ldr	r2, [r3, #8]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	441a      	add	r2, r3
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	61bb      	str	r3, [r7, #24]
    while (current_item)
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	2b00      	cmp	r3, #0
 800d498:	f47f af5b 	bne.w	800d352 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	695b      	ldr	r3, [r3, #20]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d003      	beq.n	800d4ac <print_object+0x1d8>
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	68db      	ldr	r3, [r3, #12]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	e000      	b.n	800d4ae <print_object+0x1da>
 800d4ac:	2302      	movs	r3, #2
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	6838      	ldr	r0, [r7, #0]
 800d4b2:	f7fe fb51 	bl	800bb58 <ensure>
 800d4b6:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d101      	bne.n	800d4c2 <print_object+0x1ee>
    {
        return false;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	e022      	b.n	800d508 <print_object+0x234>
    }
    if (output_buffer->format)
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	695b      	ldr	r3, [r3, #20]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d010      	beq.n	800d4ec <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	613b      	str	r3, [r7, #16]
 800d4ce:	e007      	b.n	800d4e0 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	1c5a      	adds	r2, r3, #1
 800d4d4:	61fa      	str	r2, [r7, #28]
 800d4d6:	2209      	movs	r2, #9
 800d4d8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	613b      	str	r3, [r7, #16]
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	693a      	ldr	r2, [r7, #16]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d3f1      	bcc.n	800d4d0 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	1c5a      	adds	r2, r3, #1
 800d4f0:	61fa      	str	r2, [r7, #28]
 800d4f2:	227d      	movs	r2, #125	@ 0x7d
 800d4f4:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800d4f6:	69fb      	ldr	r3, [r7, #28]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	1e5a      	subs	r2, r3, #1
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	60da      	str	r2, [r3, #12]

    return true;
 800d506:	2301      	movs	r3, #1
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3720      	adds	r7, #32
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800d51c:	2300      	movs	r3, #0
 800d51e:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d002      	beq.n	800d52c <get_object_item+0x1c>
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d101      	bne.n	800d530 <get_object_item+0x20>
    {
        return NULL;
 800d52c:	2300      	movs	r3, #0
 800d52e:	e033      	b.n	800d598 <get_object_item+0x88>
    }

    current_element = object->child;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	689b      	ldr	r3, [r3, #8]
 800d534:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d017      	beq.n	800d56c <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800d53c:	e002      	b.n	800d544 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d01c      	beq.n	800d584 <get_object_item+0x74>
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	6a1b      	ldr	r3, [r3, #32]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d018      	beq.n	800d584 <get_object_item+0x74>
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	6a1b      	ldr	r3, [r3, #32]
 800d556:	4619      	mov	r1, r3
 800d558:	68b8      	ldr	r0, [r7, #8]
 800d55a:	f7fa fe59 	bl	8008210 <strcmp>
 800d55e:	4603      	mov	r3, r0
 800d560:	2b00      	cmp	r3, #0
 800d562:	d1ec      	bne.n	800d53e <get_object_item+0x2e>
 800d564:	e00e      	b.n	800d584 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d008      	beq.n	800d584 <get_object_item+0x74>
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	6a1b      	ldr	r3, [r3, #32]
 800d576:	4619      	mov	r1, r3
 800d578:	68b8      	ldr	r0, [r7, #8]
 800d57a:	f7fe f91f 	bl	800b7bc <case_insensitive_strcmp>
 800d57e:	4603      	mov	r3, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d1f0      	bne.n	800d566 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d003      	beq.n	800d592 <get_object_item+0x82>
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	6a1b      	ldr	r3, [r3, #32]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d101      	bne.n	800d596 <get_object_item+0x86>
        return NULL;
 800d592:	2300      	movs	r3, #0
 800d594:	e000      	b.n	800d598 <get_object_item+0x88>
    }

    return current_element;
 800d596:	697b      	ldr	r3, [r7, #20]
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3718      	adds	r7, #24
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	6839      	ldr	r1, [r7, #0]
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f7ff ffae 	bl	800d510 <get_object_item>
 800d5b4:	4603      	mov	r3, r0
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3708      	adds	r7, #8
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 800d5be:	b480      	push	{r7}
 800d5c0:	b083      	sub	sp, #12
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
 800d5c6:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	683a      	ldr	r2, [r7, #0]
 800d5cc:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	605a      	str	r2, [r3, #4]
}
 800d5d4:	bf00      	nop
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr

0800d5e0 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d006      	beq.n	800d602 <add_item_to_array+0x22>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d003      	beq.n	800d602 <add_item_to_array+0x22>
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d101      	bne.n	800d606 <add_item_to_array+0x26>
    {
        return false;
 800d602:	2300      	movs	r3, #0
 800d604:	e01e      	b.n	800d644 <add_item_to_array+0x64>
    }

    child = array->child;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	689b      	ldr	r3, [r3, #8]
 800d60a:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d109      	bne.n	800d626 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	683a      	ldr	r2, [r7, #0]
 800d616:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	683a      	ldr	r2, [r7, #0]
 800d61c:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	2200      	movs	r2, #0
 800d622:	601a      	str	r2, [r3, #0]
 800d624:	e00d      	b.n	800d642 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d009      	beq.n	800d642 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	6839      	ldr	r1, [r7, #0]
 800d634:	4618      	mov	r0, r3
 800d636:	f7ff ffc2 	bl	800d5be <suffix_object>
            array->child->prev = item;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	689b      	ldr	r3, [r3, #8]
 800d63e:	683a      	ldr	r2, [r7, #0]
 800d640:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 800d642:	2301      	movs	r3, #1
}
 800d644:	4618      	mov	r0, r3
 800d646:	3710      	adds	r7, #16
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
    return (void*)string;
 800d654:	687b      	ldr	r3, [r7, #4]
}
 800d656:	4618      	mov	r0, r3
 800d658:	370c      	adds	r7, #12
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr

0800d662 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 800d662:	b580      	push	{r7, lr}
 800d664:	b086      	sub	sp, #24
 800d666:	af00      	add	r7, sp, #0
 800d668:	60f8      	str	r0, [r7, #12]
 800d66a:	60b9      	str	r1, [r7, #8]
 800d66c:	607a      	str	r2, [r7, #4]
 800d66e:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 800d670:	2300      	movs	r3, #0
 800d672:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 800d674:	2300      	movs	r3, #0
 800d676:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d009      	beq.n	800d692 <add_item_to_object+0x30>
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d006      	beq.n	800d692 <add_item_to_object+0x30>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d003      	beq.n	800d692 <add_item_to_object+0x30>
 800d68a:	68fa      	ldr	r2, [r7, #12]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d101      	bne.n	800d696 <add_item_to_object+0x34>
    {
        return false;
 800d692:	2300      	movs	r3, #0
 800d694:	e036      	b.n	800d704 <add_item_to_object+0xa2>
    }

    if (constant_key)
 800d696:	6a3b      	ldr	r3, [r7, #32]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d009      	beq.n	800d6b0 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 800d69c:	68b8      	ldr	r0, [r7, #8]
 800d69e:	f7ff ffd5 	bl	800d64c <cast_away_const>
 800d6a2:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d6ac:	613b      	str	r3, [r7, #16]
 800d6ae:	e00e      	b.n	800d6ce <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 800d6b0:	6839      	ldr	r1, [r7, #0]
 800d6b2:	68b8      	ldr	r0, [r7, #8]
 800d6b4:	f7fe f8ee 	bl	800b894 <cJSON_strdup>
 800d6b8:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d101      	bne.n	800d6c4 <add_item_to_object+0x62>
        {
            return false;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	e01f      	b.n	800d704 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	68db      	ldr	r3, [r3, #12]
 800d6c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d6cc:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d109      	bne.n	800d6ee <add_item_to_object+0x8c>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6a1b      	ldr	r3, [r3, #32]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d005      	beq.n	800d6ee <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	685b      	ldr	r3, [r3, #4]
 800d6e6:	687a      	ldr	r2, [r7, #4]
 800d6e8:	6a12      	ldr	r2, [r2, #32]
 800d6ea:	4610      	mov	r0, r2
 800d6ec:	4798      	blx	r3
    }

    item->string = new_key;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	697a      	ldr	r2, [r7, #20]
 800d6f2:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	693a      	ldr	r2, [r7, #16]
 800d6f8:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800d6fa:	6879      	ldr	r1, [r7, #4]
 800d6fc:	68f8      	ldr	r0, [r7, #12]
 800d6fe:	f7ff ff6f 	bl	800d5e0 <add_item_to_array>
 800d702:	4603      	mov	r3, r0
}
 800d704:	4618      	mov	r0, r3
 800d706:	3718      	adds	r7, #24
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b088      	sub	sp, #32
 800d710:	af02      	add	r7, sp, #8
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 800d71a:	ed97 0b00 	vldr	d0, [r7]
 800d71e:	f000 f81b 	bl	800d758 <cJSON_CreateNumber>
 800d722:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 800d724:	2300      	movs	r3, #0
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	4b09      	ldr	r3, [pc, #36]	@ (800d750 <cJSON_AddNumberToObject+0x44>)
 800d72a:	697a      	ldr	r2, [r7, #20]
 800d72c:	68b9      	ldr	r1, [r7, #8]
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f7ff ff97 	bl	800d662 <add_item_to_object>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d001      	beq.n	800d73e <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	e003      	b.n	800d746 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 800d73e:	6978      	ldr	r0, [r7, #20]
 800d740:	f7fe f8e6 	bl	800b910 <cJSON_Delete>
    return NULL;
 800d744:	2300      	movs	r3, #0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3718      	adds	r7, #24
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	20000000 	.word	0x20000000
 800d754:	00000000 	.word	0x00000000

0800d758 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 800d762:	481f      	ldr	r0, [pc, #124]	@ (800d7e0 <cJSON_CreateNumber+0x88>)
 800d764:	f7fe f8be 	bl	800b8e4 <cJSON_New_Item>
 800d768:	60f8      	str	r0, [r7, #12]
    if(item)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d02c      	beq.n	800d7ca <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2208      	movs	r2, #8
 800d774:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 800d776:	68f9      	ldr	r1, [r7, #12]
 800d778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d77c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 800d780:	a315      	add	r3, pc, #84	@ (adr r3, 800d7d8 <cJSON_CreateNumber+0x80>)
 800d782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d786:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d78a:	f7fb f9eb 	bl	8008b64 <__aeabi_dcmpge>
 800d78e:	4603      	mov	r3, r0
 800d790:	2b00      	cmp	r3, #0
 800d792:	d004      	beq.n	800d79e <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800d79a:	615a      	str	r2, [r3, #20]
 800d79c:	e015      	b.n	800d7ca <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 800d79e:	f04f 0200 	mov.w	r2, #0
 800d7a2:	4b10      	ldr	r3, [pc, #64]	@ (800d7e4 <cJSON_CreateNumber+0x8c>)
 800d7a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7a8:	f7fb f9d2 	bl	8008b50 <__aeabi_dcmple>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d004      	beq.n	800d7bc <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d7b8:	615a      	str	r2, [r3, #20]
 800d7ba:	e006      	b.n	800d7ca <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 800d7bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7c0:	f7fb f9fa 	bl	8008bb8 <__aeabi_d2iz>
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3710      	adds	r7, #16
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	f3af 8000 	nop.w
 800d7d8:	ffc00000 	.word	0xffc00000
 800d7dc:	41dfffff 	.word	0x41dfffff
 800d7e0:	20000000 	.word	0x20000000
 800d7e4:	c1e00000 	.word	0xc1e00000

0800d7e8 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800d7ee:	4807      	ldr	r0, [pc, #28]	@ (800d80c <cJSON_CreateObject+0x24>)
 800d7f0:	f7fe f878 	bl	800b8e4 <cJSON_New_Item>
 800d7f4:	6078      	str	r0, [r7, #4]
    if (item)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d002      	beq.n	800d802 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2240      	movs	r2, #64	@ 0x40
 800d800:	60da      	str	r2, [r3, #12]
    }

    return item;
 800d802:	687b      	ldr	r3, [r7, #4]
}
 800d804:	4618      	mov	r0, r3
 800d806:	3708      	adds	r7, #8
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}
 800d80c:	20000000 	.word	0x20000000

0800d810 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d101      	bne.n	800d822 <cJSON_IsNumber+0x12>
    {
        return false;
 800d81e:	2300      	movs	r3, #0
 800d820:	e007      	b.n	800d832 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	68db      	ldr	r3, [r3, #12]
 800d826:	b2db      	uxtb	r3, r3
 800d828:	2b08      	cmp	r3, #8
 800d82a:	bf0c      	ite	eq
 800d82c:	2301      	moveq	r3, #1
 800d82e:	2300      	movne	r3, #0
 800d830:	b2db      	uxtb	r3, r3
}
 800d832:	4618      	mov	r0, r3
 800d834:	370c      	adds	r7, #12
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
	...

0800d840 <InitializeDisplay>:

uint8_t current_line = 0;
char display_buffer[MAX_DISPLAY_LINES][23];

void InitializeDisplay(void)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af04      	add	r7, sp, #16
	printf("Application started\n");
 800d846:	4828      	ldr	r0, [pc, #160]	@ (800d8e8 <InitializeDisplay+0xa8>)
 800d848:	f008 fa40 	bl	8015ccc <puts>
	printf("Touch application running\n");
 800d84c:	4827      	ldr	r0, [pc, #156]	@ (800d8ec <InitializeDisplay+0xac>)
 800d84e:	f008 fa3d 	bl	8015ccc <puts>
    ST7735_Init(0);
 800d852:	2000      	movs	r0, #0
 800d854:	f7fd f8f8 	bl	800aa48 <ST7735_Init>
    fillScreen(BLACK);
 800d858:	2000      	movs	r0, #0
 800d85a:	f7fc fb31 	bl	8009ec0 <fillScreen>
    ST7735_SetRotation(1);
 800d85e:	2001      	movs	r0, #1
 800d860:	f7fd f91e 	bl	800aaa0 <ST7735_SetRotation>
    // Clear display buffer
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 800d864:	2300      	movs	r3, #0
 800d866:	607b      	str	r3, [r7, #4]
 800d868:	e00f      	b.n	800d88a <InitializeDisplay+0x4a>
        memset(display_buffer[i], 0, 23);
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	4613      	mov	r3, r2
 800d86e:	005b      	lsls	r3, r3, #1
 800d870:	4413      	add	r3, r2
 800d872:	00db      	lsls	r3, r3, #3
 800d874:	1a9b      	subs	r3, r3, r2
 800d876:	4a1e      	ldr	r2, [pc, #120]	@ (800d8f0 <InitializeDisplay+0xb0>)
 800d878:	4413      	add	r3, r2
 800d87a:	2217      	movs	r2, #23
 800d87c:	2100      	movs	r1, #0
 800d87e:	4618      	mov	r0, r3
 800d880:	f008 fb8a 	bl	8015f98 <memset>
    for(int i = 0; i < MAX_DISPLAY_LINES; i++) {
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	3301      	adds	r3, #1
 800d888:	607b      	str	r3, [r7, #4]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2b07      	cmp	r3, #7
 800d88e:	ddec      	ble.n	800d86a <InitializeDisplay+0x2a>
    }
    current_line = 0;
 800d890:	4b18      	ldr	r3, [pc, #96]	@ (800d8f4 <InitializeDisplay+0xb4>)
 800d892:	2200      	movs	r2, #0
 800d894:	701a      	strb	r2, [r3, #0]

    // Display header
    ST7735_WriteString(5, 5, "-ONWORDS TOUCH BOARD-", Font_7x10, YELLOW, BLACK);
 800d896:	4b18      	ldr	r3, [pc, #96]	@ (800d8f8 <InitializeDisplay+0xb8>)
 800d898:	2200      	movs	r2, #0
 800d89a:	9202      	str	r2, [sp, #8]
 800d89c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800d8a0:	9201      	str	r2, [sp, #4]
 800d8a2:	685a      	ldr	r2, [r3, #4]
 800d8a4:	9200      	str	r2, [sp, #0]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4a14      	ldr	r2, [pc, #80]	@ (800d8fc <InitializeDisplay+0xbc>)
 800d8aa:	2105      	movs	r1, #5
 800d8ac:	2005      	movs	r0, #5
 800d8ae:	f7fd fa2d 	bl	800ad0c <ST7735_WriteString>
    ST7735_WriteString(5, 18, "    VERSION v3.0", Font_7x10, RED, BLACK);
 800d8b2:	4b11      	ldr	r3, [pc, #68]	@ (800d8f8 <InitializeDisplay+0xb8>)
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	9202      	str	r2, [sp, #8]
 800d8b8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800d8bc:	9201      	str	r2, [sp, #4]
 800d8be:	685a      	ldr	r2, [r3, #4]
 800d8c0:	9200      	str	r2, [sp, #0]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4a0e      	ldr	r2, [pc, #56]	@ (800d900 <InitializeDisplay+0xc0>)
 800d8c6:	2112      	movs	r1, #18
 800d8c8:	2005      	movs	r0, #5
 800d8ca:	f7fd fa1f 	bl	800ad0c <ST7735_WriteString>
    printf("Touch application running\n");
 800d8ce:	4807      	ldr	r0, [pc, #28]	@ (800d8ec <InitializeDisplay+0xac>)
 800d8d0:	f008 f9fc 	bl	8015ccc <puts>

    HAL_Delay(1000);
 800d8d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d8d8:	f001 fa84 	bl	800ede4 <HAL_Delay>

    HomeMenu();
 800d8dc:	f7fd fcfa 	bl	800b2d4 <HomeMenu>

}
 800d8e0:	bf00      	nop
 800d8e2:	3708      	adds	r7, #8
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	08018790 	.word	0x08018790
 800d8ec:	080187a4 	.word	0x080187a4
 800d8f0:	20000254 	.word	0x20000254
 800d8f4:	20000250 	.word	0x20000250
 800d8f8:	2000000c 	.word	0x2000000c
 800d8fc:	080187c0 	.word	0x080187c0
 800d900:	080187d8 	.word	0x080187d8

0800d904 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800d90c:	1d39      	adds	r1, r7, #4
 800d90e:	f04f 33ff 	mov.w	r3, #4294967295
 800d912:	2201      	movs	r2, #1
 800d914:	4803      	ldr	r0, [pc, #12]	@ (800d924 <__io_putchar+0x20>)
 800d916:	f003 fddf 	bl	80114d8 <HAL_UART_Transmit>
	return ch;
 800d91a:	687b      	ldr	r3, [r7, #4]
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3708      	adds	r7, #8
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	200003bc 	.word	0x200003bc

0800d928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d92c:	f001 fa18 	bl	800ed60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d930:	f000 f810 	bl	800d954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d934:	f000 f940 	bl	800dbb8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800d938:	f000 f87e 	bl	800da38 <MX_SPI1_Init>
  MX_SPI2_Init();
 800d93c:	f000 f8b4 	bl	800daa8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800d940:	f000 f8e6 	bl	800db10 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800d944:	f000 f90e 	bl	800db64 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  InitializeDisplay();
 800d948:	f7ff ff7a 	bl	800d840 <InitializeDisplay>
  setup_freeRTOS();
 800d94c:	f000 fcfc 	bl	800e348 <setup_freeRTOS>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800d950:	bf00      	nop
 800d952:	e7fd      	b.n	800d950 <main+0x28>

0800d954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b094      	sub	sp, #80	@ 0x50
 800d958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d95a:	f107 031c 	add.w	r3, r7, #28
 800d95e:	2234      	movs	r2, #52	@ 0x34
 800d960:	2100      	movs	r1, #0
 800d962:	4618      	mov	r0, r3
 800d964:	f008 fb18 	bl	8015f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d968:	f107 0308 	add.w	r3, r7, #8
 800d96c:	2200      	movs	r2, #0
 800d96e:	601a      	str	r2, [r3, #0]
 800d970:	605a      	str	r2, [r3, #4]
 800d972:	609a      	str	r2, [r3, #8]
 800d974:	60da      	str	r2, [r3, #12]
 800d976:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d978:	2300      	movs	r3, #0
 800d97a:	607b      	str	r3, [r7, #4]
 800d97c:	4b2c      	ldr	r3, [pc, #176]	@ (800da30 <SystemClock_Config+0xdc>)
 800d97e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d980:	4a2b      	ldr	r2, [pc, #172]	@ (800da30 <SystemClock_Config+0xdc>)
 800d982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d986:	6413      	str	r3, [r2, #64]	@ 0x40
 800d988:	4b29      	ldr	r3, [pc, #164]	@ (800da30 <SystemClock_Config+0xdc>)
 800d98a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d98c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d990:	607b      	str	r3, [r7, #4]
 800d992:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d994:	2300      	movs	r3, #0
 800d996:	603b      	str	r3, [r7, #0]
 800d998:	4b26      	ldr	r3, [pc, #152]	@ (800da34 <SystemClock_Config+0xe0>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4a25      	ldr	r2, [pc, #148]	@ (800da34 <SystemClock_Config+0xe0>)
 800d99e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d9a2:	6013      	str	r3, [r2, #0]
 800d9a4:	4b23      	ldr	r3, [pc, #140]	@ (800da34 <SystemClock_Config+0xe0>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d9ac:	603b      	str	r3, [r7, #0]
 800d9ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800d9b0:	2302      	movs	r3, #2
 800d9b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d9b8:	2310      	movs	r3, #16
 800d9ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d9bc:	2302      	movs	r3, #2
 800d9be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800d9c4:	2308      	movs	r3, #8
 800d9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800d9c8:	23b4      	movs	r3, #180	@ 0xb4
 800d9ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d9cc:	2302      	movs	r3, #2
 800d9ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800d9d0:	2302      	movs	r3, #2
 800d9d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800d9d4:	2302      	movs	r3, #2
 800d9d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d9d8:	f107 031c 	add.w	r3, r7, #28
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f002 f8d7 	bl	800fb90 <HAL_RCC_OscConfig>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d001      	beq.n	800d9ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 800d9e8:	f000 f9b6 	bl	800dd58 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800d9ec:	f001 fd8a 	bl	800f504 <HAL_PWREx_EnableOverDrive>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d001      	beq.n	800d9fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800d9f6:	f000 f9af 	bl	800dd58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d9fa:	230f      	movs	r3, #15
 800d9fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d9fe:	2302      	movs	r3, #2
 800da00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800da02:	2300      	movs	r3, #0
 800da04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800da06:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800da0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800da0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800da10:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800da12:	f107 0308 	add.w	r3, r7, #8
 800da16:	2105      	movs	r1, #5
 800da18:	4618      	mov	r0, r3
 800da1a:	f001 fdc3 	bl	800f5a4 <HAL_RCC_ClockConfig>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d001      	beq.n	800da28 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800da24:	f000 f998 	bl	800dd58 <Error_Handler>
  }
}
 800da28:	bf00      	nop
 800da2a:	3750      	adds	r7, #80	@ 0x50
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	40023800 	.word	0x40023800
 800da34:	40007000 	.word	0x40007000

0800da38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800da3c:	4b18      	ldr	r3, [pc, #96]	@ (800daa0 <MX_SPI1_Init+0x68>)
 800da3e:	4a19      	ldr	r2, [pc, #100]	@ (800daa4 <MX_SPI1_Init+0x6c>)
 800da40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800da42:	4b17      	ldr	r3, [pc, #92]	@ (800daa0 <MX_SPI1_Init+0x68>)
 800da44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800da48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800da4a:	4b15      	ldr	r3, [pc, #84]	@ (800daa0 <MX_SPI1_Init+0x68>)
 800da4c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800da50:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800da52:	4b13      	ldr	r3, [pc, #76]	@ (800daa0 <MX_SPI1_Init+0x68>)
 800da54:	2200      	movs	r2, #0
 800da56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800da58:	4b11      	ldr	r3, [pc, #68]	@ (800daa0 <MX_SPI1_Init+0x68>)
 800da5a:	2200      	movs	r2, #0
 800da5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800da5e:	4b10      	ldr	r3, [pc, #64]	@ (800daa0 <MX_SPI1_Init+0x68>)
 800da60:	2200      	movs	r2, #0
 800da62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800da64:	4b0e      	ldr	r3, [pc, #56]	@ (800daa0 <MX_SPI1_Init+0x68>)
 800da66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800da6c:	4b0c      	ldr	r3, [pc, #48]	@ (800daa0 <MX_SPI1_Init+0x68>)
 800da6e:	2208      	movs	r2, #8
 800da70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800da72:	4b0b      	ldr	r3, [pc, #44]	@ (800daa0 <MX_SPI1_Init+0x68>)
 800da74:	2200      	movs	r2, #0
 800da76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800da78:	4b09      	ldr	r3, [pc, #36]	@ (800daa0 <MX_SPI1_Init+0x68>)
 800da7a:	2200      	movs	r2, #0
 800da7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da7e:	4b08      	ldr	r3, [pc, #32]	@ (800daa0 <MX_SPI1_Init+0x68>)
 800da80:	2200      	movs	r2, #0
 800da82:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800da84:	4b06      	ldr	r3, [pc, #24]	@ (800daa0 <MX_SPI1_Init+0x68>)
 800da86:	220a      	movs	r2, #10
 800da88:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800da8a:	4805      	ldr	r0, [pc, #20]	@ (800daa0 <MX_SPI1_Init+0x68>)
 800da8c:	f002 fb1e 	bl	80100cc <HAL_SPI_Init>
 800da90:	4603      	mov	r3, r0
 800da92:	2b00      	cmp	r3, #0
 800da94:	d001      	beq.n	800da9a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800da96:	f000 f95f 	bl	800dd58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800da9a:	bf00      	nop
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	2000030c 	.word	0x2000030c
 800daa4:	40013000 	.word	0x40013000

0800daa8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800daac:	4b16      	ldr	r3, [pc, #88]	@ (800db08 <MX_SPI2_Init+0x60>)
 800daae:	4a17      	ldr	r2, [pc, #92]	@ (800db0c <MX_SPI2_Init+0x64>)
 800dab0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800dab2:	4b15      	ldr	r3, [pc, #84]	@ (800db08 <MX_SPI2_Init+0x60>)
 800dab4:	2200      	movs	r2, #0
 800dab6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800dab8:	4b13      	ldr	r3, [pc, #76]	@ (800db08 <MX_SPI2_Init+0x60>)
 800daba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800dabe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800dac0:	4b11      	ldr	r3, [pc, #68]	@ (800db08 <MX_SPI2_Init+0x60>)
 800dac2:	2200      	movs	r2, #0
 800dac4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800dac6:	4b10      	ldr	r3, [pc, #64]	@ (800db08 <MX_SPI2_Init+0x60>)
 800dac8:	2200      	movs	r2, #0
 800daca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800dacc:	4b0e      	ldr	r3, [pc, #56]	@ (800db08 <MX_SPI2_Init+0x60>)
 800dace:	2200      	movs	r2, #0
 800dad0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800dad2:	4b0d      	ldr	r3, [pc, #52]	@ (800db08 <MX_SPI2_Init+0x60>)
 800dad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dad8:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800dada:	4b0b      	ldr	r3, [pc, #44]	@ (800db08 <MX_SPI2_Init+0x60>)
 800dadc:	2200      	movs	r2, #0
 800dade:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800dae0:	4b09      	ldr	r3, [pc, #36]	@ (800db08 <MX_SPI2_Init+0x60>)
 800dae2:	2200      	movs	r2, #0
 800dae4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dae6:	4b08      	ldr	r3, [pc, #32]	@ (800db08 <MX_SPI2_Init+0x60>)
 800dae8:	2200      	movs	r2, #0
 800daea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800daec:	4b06      	ldr	r3, [pc, #24]	@ (800db08 <MX_SPI2_Init+0x60>)
 800daee:	220a      	movs	r2, #10
 800daf0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800daf2:	4805      	ldr	r0, [pc, #20]	@ (800db08 <MX_SPI2_Init+0x60>)
 800daf4:	f002 faea 	bl	80100cc <HAL_SPI_Init>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d001      	beq.n	800db02 <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 800dafe:	f000 f92b 	bl	800dd58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800db02:	bf00      	nop
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	20000364 	.word	0x20000364
 800db0c:	40003800 	.word	0x40003800

0800db10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800db14:	4b11      	ldr	r3, [pc, #68]	@ (800db5c <MX_USART2_UART_Init+0x4c>)
 800db16:	4a12      	ldr	r2, [pc, #72]	@ (800db60 <MX_USART2_UART_Init+0x50>)
 800db18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800db1a:	4b10      	ldr	r3, [pc, #64]	@ (800db5c <MX_USART2_UART_Init+0x4c>)
 800db1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800db20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800db22:	4b0e      	ldr	r3, [pc, #56]	@ (800db5c <MX_USART2_UART_Init+0x4c>)
 800db24:	2200      	movs	r2, #0
 800db26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800db28:	4b0c      	ldr	r3, [pc, #48]	@ (800db5c <MX_USART2_UART_Init+0x4c>)
 800db2a:	2200      	movs	r2, #0
 800db2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800db2e:	4b0b      	ldr	r3, [pc, #44]	@ (800db5c <MX_USART2_UART_Init+0x4c>)
 800db30:	2200      	movs	r2, #0
 800db32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800db34:	4b09      	ldr	r3, [pc, #36]	@ (800db5c <MX_USART2_UART_Init+0x4c>)
 800db36:	220c      	movs	r2, #12
 800db38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800db3a:	4b08      	ldr	r3, [pc, #32]	@ (800db5c <MX_USART2_UART_Init+0x4c>)
 800db3c:	2200      	movs	r2, #0
 800db3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800db40:	4b06      	ldr	r3, [pc, #24]	@ (800db5c <MX_USART2_UART_Init+0x4c>)
 800db42:	2200      	movs	r2, #0
 800db44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800db46:	4805      	ldr	r0, [pc, #20]	@ (800db5c <MX_USART2_UART_Init+0x4c>)
 800db48:	f003 fc76 	bl	8011438 <HAL_UART_Init>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d001      	beq.n	800db56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800db52:	f000 f901 	bl	800dd58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800db56:	bf00      	nop
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	bf00      	nop
 800db5c:	200003bc 	.word	0x200003bc
 800db60:	40004400 	.word	0x40004400

0800db64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800db68:	4b11      	ldr	r3, [pc, #68]	@ (800dbb0 <MX_USART3_UART_Init+0x4c>)
 800db6a:	4a12      	ldr	r2, [pc, #72]	@ (800dbb4 <MX_USART3_UART_Init+0x50>)
 800db6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800db6e:	4b10      	ldr	r3, [pc, #64]	@ (800dbb0 <MX_USART3_UART_Init+0x4c>)
 800db70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800db74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800db76:	4b0e      	ldr	r3, [pc, #56]	@ (800dbb0 <MX_USART3_UART_Init+0x4c>)
 800db78:	2200      	movs	r2, #0
 800db7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800db7c:	4b0c      	ldr	r3, [pc, #48]	@ (800dbb0 <MX_USART3_UART_Init+0x4c>)
 800db7e:	2200      	movs	r2, #0
 800db80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800db82:	4b0b      	ldr	r3, [pc, #44]	@ (800dbb0 <MX_USART3_UART_Init+0x4c>)
 800db84:	2200      	movs	r2, #0
 800db86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800db88:	4b09      	ldr	r3, [pc, #36]	@ (800dbb0 <MX_USART3_UART_Init+0x4c>)
 800db8a:	220c      	movs	r2, #12
 800db8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800db8e:	4b08      	ldr	r3, [pc, #32]	@ (800dbb0 <MX_USART3_UART_Init+0x4c>)
 800db90:	2200      	movs	r2, #0
 800db92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800db94:	4b06      	ldr	r3, [pc, #24]	@ (800dbb0 <MX_USART3_UART_Init+0x4c>)
 800db96:	2200      	movs	r2, #0
 800db98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800db9a:	4805      	ldr	r0, [pc, #20]	@ (800dbb0 <MX_USART3_UART_Init+0x4c>)
 800db9c:	f003 fc4c 	bl	8011438 <HAL_UART_Init>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d001      	beq.n	800dbaa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800dba6:	f000 f8d7 	bl	800dd58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800dbaa:	bf00      	nop
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	20000404 	.word	0x20000404
 800dbb4:	40004800 	.word	0x40004800

0800dbb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b08a      	sub	sp, #40	@ 0x28
 800dbbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dbbe:	f107 0314 	add.w	r3, r7, #20
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	601a      	str	r2, [r3, #0]
 800dbc6:	605a      	str	r2, [r3, #4]
 800dbc8:	609a      	str	r2, [r3, #8]
 800dbca:	60da      	str	r2, [r3, #12]
 800dbcc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800dbce:	2300      	movs	r3, #0
 800dbd0:	613b      	str	r3, [r7, #16]
 800dbd2:	4b53      	ldr	r3, [pc, #332]	@ (800dd20 <MX_GPIO_Init+0x168>)
 800dbd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbd6:	4a52      	ldr	r2, [pc, #328]	@ (800dd20 <MX_GPIO_Init+0x168>)
 800dbd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbdc:	6313      	str	r3, [r2, #48]	@ 0x30
 800dbde:	4b50      	ldr	r3, [pc, #320]	@ (800dd20 <MX_GPIO_Init+0x168>)
 800dbe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dbe6:	613b      	str	r3, [r7, #16]
 800dbe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800dbea:	2300      	movs	r3, #0
 800dbec:	60fb      	str	r3, [r7, #12]
 800dbee:	4b4c      	ldr	r3, [pc, #304]	@ (800dd20 <MX_GPIO_Init+0x168>)
 800dbf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbf2:	4a4b      	ldr	r2, [pc, #300]	@ (800dd20 <MX_GPIO_Init+0x168>)
 800dbf4:	f043 0304 	orr.w	r3, r3, #4
 800dbf8:	6313      	str	r3, [r2, #48]	@ 0x30
 800dbfa:	4b49      	ldr	r3, [pc, #292]	@ (800dd20 <MX_GPIO_Init+0x168>)
 800dbfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbfe:	f003 0304 	and.w	r3, r3, #4
 800dc02:	60fb      	str	r3, [r7, #12]
 800dc04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800dc06:	2300      	movs	r3, #0
 800dc08:	60bb      	str	r3, [r7, #8]
 800dc0a:	4b45      	ldr	r3, [pc, #276]	@ (800dd20 <MX_GPIO_Init+0x168>)
 800dc0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc0e:	4a44      	ldr	r2, [pc, #272]	@ (800dd20 <MX_GPIO_Init+0x168>)
 800dc10:	f043 0301 	orr.w	r3, r3, #1
 800dc14:	6313      	str	r3, [r2, #48]	@ 0x30
 800dc16:	4b42      	ldr	r3, [pc, #264]	@ (800dd20 <MX_GPIO_Init+0x168>)
 800dc18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc1a:	f003 0301 	and.w	r3, r3, #1
 800dc1e:	60bb      	str	r3, [r7, #8]
 800dc20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800dc22:	2300      	movs	r3, #0
 800dc24:	607b      	str	r3, [r7, #4]
 800dc26:	4b3e      	ldr	r3, [pc, #248]	@ (800dd20 <MX_GPIO_Init+0x168>)
 800dc28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc2a:	4a3d      	ldr	r2, [pc, #244]	@ (800dd20 <MX_GPIO_Init+0x168>)
 800dc2c:	f043 0302 	orr.w	r3, r3, #2
 800dc30:	6313      	str	r3, [r2, #48]	@ 0x30
 800dc32:	4b3b      	ldr	r3, [pc, #236]	@ (800dd20 <MX_GPIO_Init+0x168>)
 800dc34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc36:	f003 0302 	and.w	r3, r3, #2
 800dc3a:	607b      	str	r3, [r7, #4]
 800dc3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin, GPIO_PIN_RESET);
 800dc3e:	2200      	movs	r2, #0
 800dc40:	2102      	movs	r1, #2
 800dc42:	4838      	ldr	r0, [pc, #224]	@ (800dd24 <MX_GPIO_Init+0x16c>)
 800dc44:	f001 fc12 	bl	800f46c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 800dc48:	2200      	movs	r2, #0
 800dc4a:	211c      	movs	r1, #28
 800dc4c:	4836      	ldr	r0, [pc, #216]	@ (800dd28 <MX_GPIO_Init+0x170>)
 800dc4e:	f001 fc0d 	bl	800f46c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 800dc52:	2200      	movs	r2, #0
 800dc54:	2112      	movs	r1, #18
 800dc56:	4835      	ldr	r0, [pc, #212]	@ (800dd2c <MX_GPIO_Init+0x174>)
 800dc58:	f001 fc08 	bl	800f46c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_LED4_GPIO_Port, TOUCH_LED4_Pin, GPIO_PIN_RESET);
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800dc62:	4833      	ldr	r0, [pc, #204]	@ (800dd30 <MX_GPIO_Init+0x178>)
 800dc64:	f001 fc02 	bl	800f46c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOUCH_LED3_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED3_Pin;
 800dc68:	2302      	movs	r3, #2
 800dc6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc70:	2300      	movs	r3, #0
 800dc72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dc74:	2300      	movs	r3, #0
 800dc76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_LED3_GPIO_Port, &GPIO_InitStruct);
 800dc78:	f107 0314 	add.w	r3, r7, #20
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	4829      	ldr	r0, [pc, #164]	@ (800dd24 <MX_GPIO_Init+0x16c>)
 800dc80:	f001 fa48 	bl	800f114 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_LED2_Pin TOUCH_LED1_Pin PC4 */
  GPIO_InitStruct.Pin = TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4;
 800dc84:	231c      	movs	r3, #28
 800dc86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dc88:	2301      	movs	r3, #1
 800dc8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dc90:	2300      	movs	r3, #0
 800dc92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dc94:	f107 0314 	add.w	r3, r7, #20
 800dc98:	4619      	mov	r1, r3
 800dc9a:	4823      	ldr	r0, [pc, #140]	@ (800dd28 <MX_GPIO_Init+0x170>)
 800dc9c:	f001 fa3a 	bl	800f114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 800dca0:	2312      	movs	r3, #18
 800dca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dca4:	2301      	movs	r3, #1
 800dca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dcac:	2300      	movs	r3, #0
 800dcae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dcb0:	f107 0314 	add.w	r3, r7, #20
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	481d      	ldr	r0, [pc, #116]	@ (800dd2c <MX_GPIO_Init+0x174>)
 800dcb8:	f001 fa2c 	bl	800f114 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_LED4_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED4_Pin;
 800dcbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800dcc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dcca:	2300      	movs	r3, #0
 800dccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_LED4_GPIO_Port, &GPIO_InitStruct);
 800dcce:	f107 0314 	add.w	r3, r7, #20
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	4816      	ldr	r0, [pc, #88]	@ (800dd30 <MX_GPIO_Init+0x178>)
 800dcd6:	f001 fa1d 	bl	800f114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800dcda:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 800dcde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800dce0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800dce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800dce6:	2302      	movs	r3, #2
 800dce8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dcea:	f107 0314 	add.w	r3, r7, #20
 800dcee:	4619      	mov	r1, r3
 800dcf0:	480e      	ldr	r0, [pc, #56]	@ (800dd2c <MX_GPIO_Init+0x174>)
 800dcf2:	f001 fa0f 	bl	800f114 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	2017      	movs	r0, #23
 800dcfc:	f001 f94e 	bl	800ef9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800dd00:	2017      	movs	r0, #23
 800dd02:	f001 f967 	bl	800efd4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800dd06:	2200      	movs	r2, #0
 800dd08:	2100      	movs	r1, #0
 800dd0a:	2028      	movs	r0, #40	@ 0x28
 800dd0c:	f001 f946 	bl	800ef9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800dd10:	2028      	movs	r0, #40	@ 0x28
 800dd12:	f001 f95f 	bl	800efd4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800dd16:	bf00      	nop
 800dd18:	3728      	adds	r7, #40	@ 0x28
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	40023800 	.word	0x40023800
 800dd24:	40021c00 	.word	0x40021c00
 800dd28:	40020800 	.word	0x40020800
 800dd2c:	40020000 	.word	0x40020000
 800dd30:	40020400 	.word	0x40020400

0800dd34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4a04      	ldr	r2, [pc, #16]	@ (800dd54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d101      	bne.n	800dd4a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800dd46:	f001 f82d 	bl	800eda4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800dd4a:	bf00      	nop
 800dd4c:	3708      	adds	r7, #8
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}
 800dd52:	bf00      	nop
 800dd54:	40010000 	.word	0x40010000

0800dd58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800dd5c:	b672      	cpsid	i
}
 800dd5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800dd60:	bf00      	nop
 800dd62:	e7fd      	b.n	800dd60 <Error_Handler+0x8>

0800dd64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800dd64:	b480      	push	{r7}
 800dd66:	b083      	sub	sp, #12
 800dd68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	607b      	str	r3, [r7, #4]
 800dd6e:	4b10      	ldr	r3, [pc, #64]	@ (800ddb0 <HAL_MspInit+0x4c>)
 800dd70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd72:	4a0f      	ldr	r2, [pc, #60]	@ (800ddb0 <HAL_MspInit+0x4c>)
 800dd74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dd78:	6453      	str	r3, [r2, #68]	@ 0x44
 800dd7a:	4b0d      	ldr	r3, [pc, #52]	@ (800ddb0 <HAL_MspInit+0x4c>)
 800dd7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dd82:	607b      	str	r3, [r7, #4]
 800dd84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800dd86:	2300      	movs	r3, #0
 800dd88:	603b      	str	r3, [r7, #0]
 800dd8a:	4b09      	ldr	r3, [pc, #36]	@ (800ddb0 <HAL_MspInit+0x4c>)
 800dd8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd8e:	4a08      	ldr	r2, [pc, #32]	@ (800ddb0 <HAL_MspInit+0x4c>)
 800dd90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dd94:	6413      	str	r3, [r2, #64]	@ 0x40
 800dd96:	4b06      	ldr	r3, [pc, #24]	@ (800ddb0 <HAL_MspInit+0x4c>)
 800dd98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dd9e:	603b      	str	r3, [r7, #0]
 800dda0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800dda2:	bf00      	nop
 800dda4:	370c      	adds	r7, #12
 800dda6:	46bd      	mov	sp, r7
 800dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop
 800ddb0:	40023800 	.word	0x40023800

0800ddb4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b08c      	sub	sp, #48	@ 0x30
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ddbc:	f107 031c 	add.w	r3, r7, #28
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	601a      	str	r2, [r3, #0]
 800ddc4:	605a      	str	r2, [r3, #4]
 800ddc6:	609a      	str	r2, [r3, #8]
 800ddc8:	60da      	str	r2, [r3, #12]
 800ddca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	4a45      	ldr	r2, [pc, #276]	@ (800dee8 <HAL_SPI_MspInit+0x134>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	d12c      	bne.n	800de30 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	61bb      	str	r3, [r7, #24]
 800ddda:	4b44      	ldr	r3, [pc, #272]	@ (800deec <HAL_SPI_MspInit+0x138>)
 800dddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddde:	4a43      	ldr	r2, [pc, #268]	@ (800deec <HAL_SPI_MspInit+0x138>)
 800dde0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800dde4:	6453      	str	r3, [r2, #68]	@ 0x44
 800dde6:	4b41      	ldr	r3, [pc, #260]	@ (800deec <HAL_SPI_MspInit+0x138>)
 800dde8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ddee:	61bb      	str	r3, [r7, #24]
 800ddf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	617b      	str	r3, [r7, #20]
 800ddf6:	4b3d      	ldr	r3, [pc, #244]	@ (800deec <HAL_SPI_MspInit+0x138>)
 800ddf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddfa:	4a3c      	ldr	r2, [pc, #240]	@ (800deec <HAL_SPI_MspInit+0x138>)
 800ddfc:	f043 0301 	orr.w	r3, r3, #1
 800de00:	6313      	str	r3, [r2, #48]	@ 0x30
 800de02:	4b3a      	ldr	r3, [pc, #232]	@ (800deec <HAL_SPI_MspInit+0x138>)
 800de04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de06:	f003 0301 	and.w	r3, r3, #1
 800de0a:	617b      	str	r3, [r7, #20]
 800de0c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800de0e:	23a0      	movs	r3, #160	@ 0xa0
 800de10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de12:	2302      	movs	r3, #2
 800de14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de16:	2300      	movs	r3, #0
 800de18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de1a:	2303      	movs	r3, #3
 800de1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800de1e:	2305      	movs	r3, #5
 800de20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de22:	f107 031c 	add.w	r3, r7, #28
 800de26:	4619      	mov	r1, r3
 800de28:	4831      	ldr	r0, [pc, #196]	@ (800def0 <HAL_SPI_MspInit+0x13c>)
 800de2a:	f001 f973 	bl	800f114 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 800de2e:	e057      	b.n	800dee0 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4a2f      	ldr	r2, [pc, #188]	@ (800def4 <HAL_SPI_MspInit+0x140>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d152      	bne.n	800dee0 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800de3a:	2300      	movs	r3, #0
 800de3c:	613b      	str	r3, [r7, #16]
 800de3e:	4b2b      	ldr	r3, [pc, #172]	@ (800deec <HAL_SPI_MspInit+0x138>)
 800de40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de42:	4a2a      	ldr	r2, [pc, #168]	@ (800deec <HAL_SPI_MspInit+0x138>)
 800de44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800de48:	6413      	str	r3, [r2, #64]	@ 0x40
 800de4a:	4b28      	ldr	r3, [pc, #160]	@ (800deec <HAL_SPI_MspInit+0x138>)
 800de4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800de52:	613b      	str	r3, [r7, #16]
 800de54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800de56:	2300      	movs	r3, #0
 800de58:	60fb      	str	r3, [r7, #12]
 800de5a:	4b24      	ldr	r3, [pc, #144]	@ (800deec <HAL_SPI_MspInit+0x138>)
 800de5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de5e:	4a23      	ldr	r2, [pc, #140]	@ (800deec <HAL_SPI_MspInit+0x138>)
 800de60:	f043 0304 	orr.w	r3, r3, #4
 800de64:	6313      	str	r3, [r2, #48]	@ 0x30
 800de66:	4b21      	ldr	r3, [pc, #132]	@ (800deec <HAL_SPI_MspInit+0x138>)
 800de68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de6a:	f003 0304 	and.w	r3, r3, #4
 800de6e:	60fb      	str	r3, [r7, #12]
 800de70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800de72:	2300      	movs	r3, #0
 800de74:	60bb      	str	r3, [r7, #8]
 800de76:	4b1d      	ldr	r3, [pc, #116]	@ (800deec <HAL_SPI_MspInit+0x138>)
 800de78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de7a:	4a1c      	ldr	r2, [pc, #112]	@ (800deec <HAL_SPI_MspInit+0x138>)
 800de7c:	f043 0302 	orr.w	r3, r3, #2
 800de80:	6313      	str	r3, [r2, #48]	@ 0x30
 800de82:	4b1a      	ldr	r3, [pc, #104]	@ (800deec <HAL_SPI_MspInit+0x138>)
 800de84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de86:	f003 0302 	and.w	r3, r3, #2
 800de8a:	60bb      	str	r3, [r7, #8]
 800de8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800de8e:	2302      	movs	r3, #2
 800de90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de92:	2302      	movs	r3, #2
 800de94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de96:	2300      	movs	r3, #0
 800de98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de9a:	2303      	movs	r3, #3
 800de9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800de9e:	2307      	movs	r3, #7
 800dea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dea2:	f107 031c 	add.w	r3, r7, #28
 800dea6:	4619      	mov	r1, r3
 800dea8:	4813      	ldr	r0, [pc, #76]	@ (800def8 <HAL_SPI_MspInit+0x144>)
 800deaa:	f001 f933 	bl	800f114 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800deae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800deb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800deb4:	2302      	movs	r3, #2
 800deb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800deb8:	2300      	movs	r3, #0
 800deba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800debc:	2303      	movs	r3, #3
 800debe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800dec0:	2305      	movs	r3, #5
 800dec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dec4:	f107 031c 	add.w	r3, r7, #28
 800dec8:	4619      	mov	r1, r3
 800deca:	480c      	ldr	r0, [pc, #48]	@ (800defc <HAL_SPI_MspInit+0x148>)
 800decc:	f001 f922 	bl	800f114 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800ded0:	2200      	movs	r2, #0
 800ded2:	2105      	movs	r1, #5
 800ded4:	2024      	movs	r0, #36	@ 0x24
 800ded6:	f001 f861 	bl	800ef9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800deda:	2024      	movs	r0, #36	@ 0x24
 800dedc:	f001 f87a 	bl	800efd4 <HAL_NVIC_EnableIRQ>
}
 800dee0:	bf00      	nop
 800dee2:	3730      	adds	r7, #48	@ 0x30
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	40013000 	.word	0x40013000
 800deec:	40023800 	.word	0x40023800
 800def0:	40020000 	.word	0x40020000
 800def4:	40003800 	.word	0x40003800
 800def8:	40020800 	.word	0x40020800
 800defc:	40020400 	.word	0x40020400

0800df00 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b08c      	sub	sp, #48	@ 0x30
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df08:	f107 031c 	add.w	r3, r7, #28
 800df0c:	2200      	movs	r2, #0
 800df0e:	601a      	str	r2, [r3, #0]
 800df10:	605a      	str	r2, [r3, #4]
 800df12:	609a      	str	r2, [r3, #8]
 800df14:	60da      	str	r2, [r3, #12]
 800df16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4a45      	ldr	r2, [pc, #276]	@ (800e034 <HAL_UART_MspInit+0x134>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d12c      	bne.n	800df7c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800df22:	2300      	movs	r3, #0
 800df24:	61bb      	str	r3, [r7, #24]
 800df26:	4b44      	ldr	r3, [pc, #272]	@ (800e038 <HAL_UART_MspInit+0x138>)
 800df28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df2a:	4a43      	ldr	r2, [pc, #268]	@ (800e038 <HAL_UART_MspInit+0x138>)
 800df2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800df30:	6413      	str	r3, [r2, #64]	@ 0x40
 800df32:	4b41      	ldr	r3, [pc, #260]	@ (800e038 <HAL_UART_MspInit+0x138>)
 800df34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df3a:	61bb      	str	r3, [r7, #24]
 800df3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df3e:	2300      	movs	r3, #0
 800df40:	617b      	str	r3, [r7, #20]
 800df42:	4b3d      	ldr	r3, [pc, #244]	@ (800e038 <HAL_UART_MspInit+0x138>)
 800df44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df46:	4a3c      	ldr	r2, [pc, #240]	@ (800e038 <HAL_UART_MspInit+0x138>)
 800df48:	f043 0301 	orr.w	r3, r3, #1
 800df4c:	6313      	str	r3, [r2, #48]	@ 0x30
 800df4e:	4b3a      	ldr	r3, [pc, #232]	@ (800e038 <HAL_UART_MspInit+0x138>)
 800df50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df52:	f003 0301 	and.w	r3, r3, #1
 800df56:	617b      	str	r3, [r7, #20]
 800df58:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800df5a:	230c      	movs	r3, #12
 800df5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df5e:	2302      	movs	r3, #2
 800df60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df62:	2300      	movs	r3, #0
 800df64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df66:	2303      	movs	r3, #3
 800df68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800df6a:	2307      	movs	r3, #7
 800df6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df6e:	f107 031c 	add.w	r3, r7, #28
 800df72:	4619      	mov	r1, r3
 800df74:	4831      	ldr	r0, [pc, #196]	@ (800e03c <HAL_UART_MspInit+0x13c>)
 800df76:	f001 f8cd 	bl	800f114 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800df7a:	e057      	b.n	800e02c <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a2f      	ldr	r2, [pc, #188]	@ (800e040 <HAL_UART_MspInit+0x140>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d152      	bne.n	800e02c <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800df86:	2300      	movs	r3, #0
 800df88:	613b      	str	r3, [r7, #16]
 800df8a:	4b2b      	ldr	r3, [pc, #172]	@ (800e038 <HAL_UART_MspInit+0x138>)
 800df8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df8e:	4a2a      	ldr	r2, [pc, #168]	@ (800e038 <HAL_UART_MspInit+0x138>)
 800df90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800df94:	6413      	str	r3, [r2, #64]	@ 0x40
 800df96:	4b28      	ldr	r3, [pc, #160]	@ (800e038 <HAL_UART_MspInit+0x138>)
 800df98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800df9e:	613b      	str	r3, [r7, #16]
 800dfa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	60fb      	str	r3, [r7, #12]
 800dfa6:	4b24      	ldr	r3, [pc, #144]	@ (800e038 <HAL_UART_MspInit+0x138>)
 800dfa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfaa:	4a23      	ldr	r2, [pc, #140]	@ (800e038 <HAL_UART_MspInit+0x138>)
 800dfac:	f043 0304 	orr.w	r3, r3, #4
 800dfb0:	6313      	str	r3, [r2, #48]	@ 0x30
 800dfb2:	4b21      	ldr	r3, [pc, #132]	@ (800e038 <HAL_UART_MspInit+0x138>)
 800dfb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfb6:	f003 0304 	and.w	r3, r3, #4
 800dfba:	60fb      	str	r3, [r7, #12]
 800dfbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	60bb      	str	r3, [r7, #8]
 800dfc2:	4b1d      	ldr	r3, [pc, #116]	@ (800e038 <HAL_UART_MspInit+0x138>)
 800dfc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfc6:	4a1c      	ldr	r2, [pc, #112]	@ (800e038 <HAL_UART_MspInit+0x138>)
 800dfc8:	f043 0302 	orr.w	r3, r3, #2
 800dfcc:	6313      	str	r3, [r2, #48]	@ 0x30
 800dfce:	4b1a      	ldr	r3, [pc, #104]	@ (800e038 <HAL_UART_MspInit+0x138>)
 800dfd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfd2:	f003 0302 	and.w	r3, r3, #2
 800dfd6:	60bb      	str	r3, [r7, #8]
 800dfd8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800dfda:	2320      	movs	r3, #32
 800dfdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfde:	2302      	movs	r3, #2
 800dfe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dfe6:	2303      	movs	r3, #3
 800dfe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800dfea:	2307      	movs	r3, #7
 800dfec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dfee:	f107 031c 	add.w	r3, r7, #28
 800dff2:	4619      	mov	r1, r3
 800dff4:	4813      	ldr	r0, [pc, #76]	@ (800e044 <HAL_UART_MspInit+0x144>)
 800dff6:	f001 f88d 	bl	800f114 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800dffa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e000:	2302      	movs	r3, #2
 800e002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e004:	2300      	movs	r3, #0
 800e006:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e008:	2303      	movs	r3, #3
 800e00a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800e00c:	2307      	movs	r3, #7
 800e00e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e010:	f107 031c 	add.w	r3, r7, #28
 800e014:	4619      	mov	r1, r3
 800e016:	480c      	ldr	r0, [pc, #48]	@ (800e048 <HAL_UART_MspInit+0x148>)
 800e018:	f001 f87c 	bl	800f114 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 800e01c:	2200      	movs	r2, #0
 800e01e:	2106      	movs	r1, #6
 800e020:	2027      	movs	r0, #39	@ 0x27
 800e022:	f000 ffbb 	bl	800ef9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800e026:	2027      	movs	r0, #39	@ 0x27
 800e028:	f000 ffd4 	bl	800efd4 <HAL_NVIC_EnableIRQ>
}
 800e02c:	bf00      	nop
 800e02e:	3730      	adds	r7, #48	@ 0x30
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	40004400 	.word	0x40004400
 800e038:	40023800 	.word	0x40023800
 800e03c:	40020000 	.word	0x40020000
 800e040:	40004800 	.word	0x40004800
 800e044:	40020800 	.word	0x40020800
 800e048:	40020400 	.word	0x40020400

0800e04c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b08c      	sub	sp, #48	@ 0x30
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800e054:	2300      	movs	r3, #0
 800e056:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800e058:	2300      	movs	r3, #0
 800e05a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800e05c:	2300      	movs	r3, #0
 800e05e:	60bb      	str	r3, [r7, #8]
 800e060:	4b2f      	ldr	r3, [pc, #188]	@ (800e120 <HAL_InitTick+0xd4>)
 800e062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e064:	4a2e      	ldr	r2, [pc, #184]	@ (800e120 <HAL_InitTick+0xd4>)
 800e066:	f043 0301 	orr.w	r3, r3, #1
 800e06a:	6453      	str	r3, [r2, #68]	@ 0x44
 800e06c:	4b2c      	ldr	r3, [pc, #176]	@ (800e120 <HAL_InitTick+0xd4>)
 800e06e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e070:	f003 0301 	and.w	r3, r3, #1
 800e074:	60bb      	str	r3, [r7, #8]
 800e076:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e078:	f107 020c 	add.w	r2, r7, #12
 800e07c:	f107 0310 	add.w	r3, r7, #16
 800e080:	4611      	mov	r1, r2
 800e082:	4618      	mov	r0, r3
 800e084:	f001 fba8 	bl	800f7d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800e088:	f001 fb92 	bl	800f7b0 <HAL_RCC_GetPCLK2Freq>
 800e08c:	4603      	mov	r3, r0
 800e08e:	005b      	lsls	r3, r3, #1
 800e090:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800e092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e094:	4a23      	ldr	r2, [pc, #140]	@ (800e124 <HAL_InitTick+0xd8>)
 800e096:	fba2 2303 	umull	r2, r3, r2, r3
 800e09a:	0c9b      	lsrs	r3, r3, #18
 800e09c:	3b01      	subs	r3, #1
 800e09e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800e0a0:	4b21      	ldr	r3, [pc, #132]	@ (800e128 <HAL_InitTick+0xdc>)
 800e0a2:	4a22      	ldr	r2, [pc, #136]	@ (800e12c <HAL_InitTick+0xe0>)
 800e0a4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800e0a6:	4b20      	ldr	r3, [pc, #128]	@ (800e128 <HAL_InitTick+0xdc>)
 800e0a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800e0ac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800e0ae:	4a1e      	ldr	r2, [pc, #120]	@ (800e128 <HAL_InitTick+0xdc>)
 800e0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800e0b4:	4b1c      	ldr	r3, [pc, #112]	@ (800e128 <HAL_InitTick+0xdc>)
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e0ba:	4b1b      	ldr	r3, [pc, #108]	@ (800e128 <HAL_InitTick+0xdc>)
 800e0bc:	2200      	movs	r2, #0
 800e0be:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e0c0:	4b19      	ldr	r3, [pc, #100]	@ (800e128 <HAL_InitTick+0xdc>)
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800e0c6:	4818      	ldr	r0, [pc, #96]	@ (800e128 <HAL_InitTick+0xdc>)
 800e0c8:	f002 ff1b 	bl	8010f02 <HAL_TIM_Base_Init>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800e0d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d11b      	bne.n	800e112 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800e0da:	4813      	ldr	r0, [pc, #76]	@ (800e128 <HAL_InitTick+0xdc>)
 800e0dc:	f002 ff6a 	bl	8010fb4 <HAL_TIM_Base_Start_IT>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800e0e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d111      	bne.n	800e112 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800e0ee:	2019      	movs	r0, #25
 800e0f0:	f000 ff70 	bl	800efd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2b0f      	cmp	r3, #15
 800e0f8:	d808      	bhi.n	800e10c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	6879      	ldr	r1, [r7, #4]
 800e0fe:	2019      	movs	r0, #25
 800e100:	f000 ff4c 	bl	800ef9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800e104:	4a0a      	ldr	r2, [pc, #40]	@ (800e130 <HAL_InitTick+0xe4>)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6013      	str	r3, [r2, #0]
 800e10a:	e002      	b.n	800e112 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800e10c:	2301      	movs	r3, #1
 800e10e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800e112:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e116:	4618      	mov	r0, r3
 800e118:	3730      	adds	r7, #48	@ 0x30
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	40023800 	.word	0x40023800
 800e124:	431bde83 	.word	0x431bde83
 800e128:	2000044c 	.word	0x2000044c
 800e12c:	40010000 	.word	0x40010000
 800e130:	20000020 	.word	0x20000020

0800e134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e134:	b480      	push	{r7}
 800e136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800e138:	bf00      	nop
 800e13a:	e7fd      	b.n	800e138 <NMI_Handler+0x4>

0800e13c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e13c:	b480      	push	{r7}
 800e13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e140:	bf00      	nop
 800e142:	e7fd      	b.n	800e140 <HardFault_Handler+0x4>

0800e144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e144:	b480      	push	{r7}
 800e146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e148:	bf00      	nop
 800e14a:	e7fd      	b.n	800e148 <MemManage_Handler+0x4>

0800e14c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e14c:	b480      	push	{r7}
 800e14e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e150:	bf00      	nop
 800e152:	e7fd      	b.n	800e150 <BusFault_Handler+0x4>

0800e154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e154:	b480      	push	{r7}
 800e156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e158:	bf00      	nop
 800e15a:	e7fd      	b.n	800e158 <UsageFault_Handler+0x4>

0800e15c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e15c:	b480      	push	{r7}
 800e15e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e160:	bf00      	nop
 800e162:	46bd      	mov	sp, r7
 800e164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e168:	4770      	bx	lr

0800e16a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800e16a:	b580      	push	{r7, lr}
 800e16c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800e16e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e172:	f001 f9af 	bl	800f4d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800e176:	bf00      	nop
 800e178:	bd80      	pop	{r7, pc}
	...

0800e17c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e180:	4802      	ldr	r0, [pc, #8]	@ (800e18c <TIM1_UP_TIM10_IRQHandler+0x10>)
 800e182:	f002 ff87 	bl	8011094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800e186:	bf00      	nop
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	2000044c 	.word	0x2000044c

0800e190 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800e194:	4802      	ldr	r0, [pc, #8]	@ (800e1a0 <SPI2_IRQHandler+0x10>)
 800e196:	f002 fa8d 	bl	80106b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800e19a:	bf00      	nop
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	20000364 	.word	0x20000364

0800e1a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800e1a8:	4802      	ldr	r0, [pc, #8]	@ (800e1b4 <USART3_IRQHandler+0x10>)
 800e1aa:	f003 fa45 	bl	8011638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800e1ae:	bf00      	nop
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	20000404 	.word	0x20000404

0800e1b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800e1bc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800e1c0:	f001 f988 	bl	800f4d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800e1c4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e1c8:	f001 f984 	bl	800f4d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800e1cc:	bf00      	nop
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	af00      	add	r7, sp, #0
  return 1;
 800e1d4:	2301      	movs	r3, #1
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr

0800e1e0 <_kill>:

int _kill(int pid, int sig)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800e1ea:	f007 ff45 	bl	8016078 <__errno>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	2216      	movs	r2, #22
 800e1f2:	601a      	str	r2, [r3, #0]
  return -1;
 800e1f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3708      	adds	r7, #8
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <_exit>:

void _exit (int status)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800e208:	f04f 31ff 	mov.w	r1, #4294967295
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f7ff ffe7 	bl	800e1e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 800e212:	bf00      	nop
 800e214:	e7fd      	b.n	800e212 <_exit+0x12>

0800e216 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b086      	sub	sp, #24
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	60f8      	str	r0, [r7, #12]
 800e21e:	60b9      	str	r1, [r7, #8]
 800e220:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e222:	2300      	movs	r3, #0
 800e224:	617b      	str	r3, [r7, #20]
 800e226:	e00a      	b.n	800e23e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800e228:	f3af 8000 	nop.w
 800e22c:	4601      	mov	r1, r0
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	1c5a      	adds	r2, r3, #1
 800e232:	60ba      	str	r2, [r7, #8]
 800e234:	b2ca      	uxtb	r2, r1
 800e236:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	3301      	adds	r3, #1
 800e23c:	617b      	str	r3, [r7, #20]
 800e23e:	697a      	ldr	r2, [r7, #20]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	429a      	cmp	r2, r3
 800e244:	dbf0      	blt.n	800e228 <_read+0x12>
  }

  return len;
 800e246:	687b      	ldr	r3, [r7, #4]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3718      	adds	r7, #24
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b086      	sub	sp, #24
 800e254:	af00      	add	r7, sp, #0
 800e256:	60f8      	str	r0, [r7, #12]
 800e258:	60b9      	str	r1, [r7, #8]
 800e25a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e25c:	2300      	movs	r3, #0
 800e25e:	617b      	str	r3, [r7, #20]
 800e260:	e009      	b.n	800e276 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	1c5a      	adds	r2, r3, #1
 800e266:	60ba      	str	r2, [r7, #8]
 800e268:	781b      	ldrb	r3, [r3, #0]
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7ff fb4a 	bl	800d904 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	3301      	adds	r3, #1
 800e274:	617b      	str	r3, [r7, #20]
 800e276:	697a      	ldr	r2, [r7, #20]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	dbf1      	blt.n	800e262 <_write+0x12>
  }
  return len;
 800e27e:	687b      	ldr	r3, [r7, #4]
}
 800e280:	4618      	mov	r0, r3
 800e282:	3718      	adds	r7, #24
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <_close>:

int _close(int file)
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800e290:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e294:	4618      	mov	r0, r3
 800e296:	370c      	adds	r7, #12
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr

0800e2a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b083      	sub	sp, #12
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800e2b0:	605a      	str	r2, [r3, #4]
  return 0;
 800e2b2:	2300      	movs	r3, #0
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	370c      	adds	r7, #12
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2be:	4770      	bx	lr

0800e2c0 <_isatty>:

int _isatty(int file)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b083      	sub	sp, #12
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800e2c8:	2301      	movs	r3, #1
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	370c      	adds	r7, #12
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d4:	4770      	bx	lr

0800e2d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e2d6:	b480      	push	{r7}
 800e2d8:	b085      	sub	sp, #20
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	60f8      	str	r0, [r7, #12]
 800e2de:	60b9      	str	r1, [r7, #8]
 800e2e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800e2e2:	2300      	movs	r3, #0
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3714      	adds	r7, #20
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr

0800e2f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e2f4:	4b07      	ldr	r3, [pc, #28]	@ (800e314 <SystemInit+0x24>)
 800e2f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2fa:	4a06      	ldr	r2, [pc, #24]	@ (800e314 <SystemInit+0x24>)
 800e2fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e300:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800e304:	4b03      	ldr	r3, [pc, #12]	@ (800e314 <SystemInit+0x24>)
 800e306:	4a04      	ldr	r2, [pc, #16]	@ (800e318 <SystemInit+0x28>)
 800e308:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e30a:	bf00      	nop
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr
 800e314:	e000ed00 	.word	0xe000ed00
 800e318:	08008000 	.word	0x08008000

0800e31c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800e31c:	b480      	push	{r7}
 800e31e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e320:	f3bf 8f4f 	dsb	sy
}
 800e324:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e326:	4b06      	ldr	r3, [pc, #24]	@ (800e340 <__NVIC_SystemReset+0x24>)
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e32e:	4904      	ldr	r1, [pc, #16]	@ (800e340 <__NVIC_SystemReset+0x24>)
 800e330:	4b04      	ldr	r3, [pc, #16]	@ (800e344 <__NVIC_SystemReset+0x28>)
 800e332:	4313      	orrs	r3, r2
 800e334:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e336:	f3bf 8f4f 	dsb	sy
}
 800e33a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800e33c:	bf00      	nop
 800e33e:	e7fd      	b.n	800e33c <__NVIC_SystemReset+0x20>
 800e340:	e000ed00 	.word	0xe000ed00
 800e344:	05fa0004 	.word	0x05fa0004

0800e348 <setup_freeRTOS>:

uint8_t spiRxBuffer[2];


void setup_freeRTOS(void)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b086      	sub	sp, #24
 800e34c:	af02      	add	r7, sp, #8
	spiQueue = xQueueCreate(10, sizeof(spiRxBuffer));
 800e34e:	2200      	movs	r2, #0
 800e350:	2102      	movs	r1, #2
 800e352:	200a      	movs	r0, #10
 800e354:	f004 f9fa 	bl	801274c <xQueueGenericCreate>
 800e358:	4603      	mov	r3, r0
 800e35a:	4a3e      	ldr	r2, [pc, #248]	@ (800e454 <setup_freeRTOS+0x10c>)
 800e35c:	6013      	str	r3, [r2, #0]
	configASSERT(spiQueue != NULL);
 800e35e:	4b3d      	ldr	r3, [pc, #244]	@ (800e454 <setup_freeRTOS+0x10c>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d10b      	bne.n	800e37e <setup_freeRTOS+0x36>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800e366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e36a:	f383 8811 	msr	BASEPRI, r3
 800e36e:	f3bf 8f6f 	isb	sy
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800e378:	bf00      	nop
 800e37a:	bf00      	nop
 800e37c:	e7fd      	b.n	800e37a <setup_freeRTOS+0x32>

	HAL_SPI_Receive_IT(&hspi2, spiRxBuffer, sizeof(spiRxBuffer));
 800e37e:	2202      	movs	r2, #2
 800e380:	4935      	ldr	r1, [pc, #212]	@ (800e458 <setup_freeRTOS+0x110>)
 800e382:	4836      	ldr	r0, [pc, #216]	@ (800e45c <setup_freeRTOS+0x114>)
 800e384:	f002 f870 	bl	8010468 <HAL_SPI_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &uartRxByte, 1);
 800e388:	2201      	movs	r2, #1
 800e38a:	4935      	ldr	r1, [pc, #212]	@ (800e460 <setup_freeRTOS+0x118>)
 800e38c:	4835      	ldr	r0, [pc, #212]	@ (800e464 <setup_freeRTOS+0x11c>)
 800e38e:	f003 f92e 	bl	80115ee <HAL_UART_Receive_IT>


	status = xTaskCreate(SPI_handler, "SPIHandler", 512, NULL, 5, NULL);
 800e392:	2300      	movs	r3, #0
 800e394:	9301      	str	r3, [sp, #4]
 800e396:	2305      	movs	r3, #5
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	2300      	movs	r3, #0
 800e39c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e3a0:	4931      	ldr	r1, [pc, #196]	@ (800e468 <setup_freeRTOS+0x120>)
 800e3a2:	4832      	ldr	r0, [pc, #200]	@ (800e46c <setup_freeRTOS+0x124>)
 800e3a4:	f004 fe58 	bl	8013058 <xTaskCreate>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	4a31      	ldr	r2, [pc, #196]	@ (800e470 <setup_freeRTOS+0x128>)
 800e3ac:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800e3ae:	4b30      	ldr	r3, [pc, #192]	@ (800e470 <setup_freeRTOS+0x128>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2b01      	cmp	r3, #1
 800e3b4:	d00b      	beq.n	800e3ce <setup_freeRTOS+0x86>
        __asm volatile
 800e3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3ba:	f383 8811 	msr	BASEPRI, r3
 800e3be:	f3bf 8f6f 	isb	sy
 800e3c2:	f3bf 8f4f 	dsb	sy
 800e3c6:	60bb      	str	r3, [r7, #8]
    }
 800e3c8:	bf00      	nop
 800e3ca:	bf00      	nop
 800e3cc:	e7fd      	b.n	800e3ca <setup_freeRTOS+0x82>

	status = xTaskCreate(UART_handler, "UARTHandler", 1024, NULL, 4, NULL);
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	9301      	str	r3, [sp, #4]
 800e3d2:	2304      	movs	r3, #4
 800e3d4:	9300      	str	r3, [sp, #0]
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e3dc:	4925      	ldr	r1, [pc, #148]	@ (800e474 <setup_freeRTOS+0x12c>)
 800e3de:	4826      	ldr	r0, [pc, #152]	@ (800e478 <setup_freeRTOS+0x130>)
 800e3e0:	f004 fe3a 	bl	8013058 <xTaskCreate>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	4a22      	ldr	r2, [pc, #136]	@ (800e470 <setup_freeRTOS+0x128>)
 800e3e8:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800e3ea:	4b21      	ldr	r3, [pc, #132]	@ (800e470 <setup_freeRTOS+0x128>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	2b01      	cmp	r3, #1
 800e3f0:	d00b      	beq.n	800e40a <setup_freeRTOS+0xc2>
        __asm volatile
 800e3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f6:	f383 8811 	msr	BASEPRI, r3
 800e3fa:	f3bf 8f6f 	isb	sy
 800e3fe:	f3bf 8f4f 	dsb	sy
 800e402:	607b      	str	r3, [r7, #4]
    }
 800e404:	bf00      	nop
 800e406:	bf00      	nop
 800e408:	e7fd      	b.n	800e406 <setup_freeRTOS+0xbe>

	status = xTaskCreate(Display_Handler, "DisplayHandler", 1024, NULL, 3, NULL);
 800e40a:	2300      	movs	r3, #0
 800e40c:	9301      	str	r3, [sp, #4]
 800e40e:	2303      	movs	r3, #3
 800e410:	9300      	str	r3, [sp, #0]
 800e412:	2300      	movs	r3, #0
 800e414:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e418:	4918      	ldr	r1, [pc, #96]	@ (800e47c <setup_freeRTOS+0x134>)
 800e41a:	4819      	ldr	r0, [pc, #100]	@ (800e480 <setup_freeRTOS+0x138>)
 800e41c:	f004 fe1c 	bl	8013058 <xTaskCreate>
 800e420:	4603      	mov	r3, r0
 800e422:	4a13      	ldr	r2, [pc, #76]	@ (800e470 <setup_freeRTOS+0x128>)
 800e424:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800e426:	4b12      	ldr	r3, [pc, #72]	@ (800e470 <setup_freeRTOS+0x128>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2b01      	cmp	r3, #1
 800e42c:	d00b      	beq.n	800e446 <setup_freeRTOS+0xfe>
        __asm volatile
 800e42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e432:	f383 8811 	msr	BASEPRI, r3
 800e436:	f3bf 8f6f 	isb	sy
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	603b      	str	r3, [r7, #0]
    }
 800e440:	bf00      	nop
 800e442:	bf00      	nop
 800e444:	e7fd      	b.n	800e442 <setup_freeRTOS+0xfa>

	vTaskStartScheduler();
 800e446:	f004 ff83 	bl	8013350 <vTaskStartScheduler>
}
 800e44a:	bf00      	nop
 800e44c:	3710      	adds	r7, #16
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	20000494 	.word	0x20000494
 800e458:	200005a4 	.word	0x200005a4
 800e45c:	20000364 	.word	0x20000364
 800e460:	200005a0 	.word	0x200005a0
 800e464:	20000404 	.word	0x20000404
 800e468:	080187ec 	.word	0x080187ec
 800e46c:	0800e495 	.word	0x0800e495
 800e470:	20000498 	.word	0x20000498
 800e474:	080187f8 	.word	0x080187f8
 800e478:	0800e811 	.word	0x0800e811
 800e47c:	08018804 	.word	0x08018804
 800e480:	0800e485 	.word	0x0800e485

0800e484 <Display_Handler>:

void Display_Handler(void *param)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b082      	sub	sp, #8
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Menu_Handler();
 800e48c:	f7fc ffd8 	bl	800b440 <Menu_Handler>
 800e490:	e7fc      	b.n	800e48c <Display_Handler+0x8>
	...

0800e494 <SPI_handler>:
	}
}

void SPI_handler(void *param)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b098      	sub	sp, #96	@ 0x60
 800e498:	af02      	add	r7, sp, #8
 800e49a:	6078      	str	r0, [r7, #4]
    uint8_t localSpiRxBuffer[3] = {0};
 800e49c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e4a0:	2100      	movs	r1, #0
 800e4a2:	460a      	mov	r2, r1
 800e4a4:	801a      	strh	r2, [r3, #0]
 800e4a6:	460a      	mov	r2, r1
 800e4a8:	709a      	strb	r2, [r3, #2]
    GPIO_PinState state;
    char displayMsg[32];
    int deviceNo;

    while (1) {
        if (xQueueReceive(spiQueue, localSpiRxBuffer, portMAX_DELAY) == pdTRUE)
 800e4aa:	4bb7      	ldr	r3, [pc, #732]	@ (800e788 <SPI_handler+0x2f4>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800e4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f004 fb7e 	bl	8012bb8 <xQueueReceive>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	2b01      	cmp	r3, #1
 800e4c0:	d1f3      	bne.n	800e4aa <SPI_handler+0x16>
        {
            printf("SPI Data Received: %s\n", localSpiRxBuffer);
 800e4c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	48b0      	ldr	r0, [pc, #704]	@ (800e78c <SPI_handler+0x2f8>)
 800e4ca:	f007 fb97 	bl	8015bfc <iprintf>
            if (strcmp((char *)localSpiRxBuffer, "L1") == 0)
 800e4ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e4d2:	49af      	ldr	r1, [pc, #700]	@ (800e790 <SPI_handler+0x2fc>)
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7f9 fe9b 	bl	8008210 <strcmp>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d14d      	bne.n	800e57c <SPI_handler+0xe8>
            {
            	deviceNo = 1;
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	653b      	str	r3, [r7, #80]	@ 0x50
                HAL_GPIO_TogglePin(TOUCH_LED1_GPIO_Port, TOUCH_LED1_Pin);
 800e4e4:	2108      	movs	r1, #8
 800e4e6:	48ab      	ldr	r0, [pc, #684]	@ (800e794 <SPI_handler+0x300>)
 800e4e8:	f000 ffd9 	bl	800f49e <HAL_GPIO_TogglePin>
                state = HAL_GPIO_ReadPin(TOUCH_LED1_GPIO_Port, TOUCH_LED1_Pin);
 800e4ec:	2108      	movs	r1, #8
 800e4ee:	48a9      	ldr	r0, [pc, #676]	@ (800e794 <SPI_handler+0x300>)
 800e4f0:	f000 ffa4 	bl	800f43c <HAL_GPIO_ReadPin>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800e4fa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e4fe:	2b01      	cmp	r3, #1
 800e500:	bf0c      	ite	eq
 800e502:	2301      	moveq	r3, #1
 800e504:	2300      	movne	r3, #0
 800e506:	b2db      	uxtb	r3, r3
 800e508:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

                cJSON *jsonObj = cJSON_CreateObject();
 800e50c:	f7ff f96c 	bl	800d7e8 <cJSON_CreateObject>
 800e510:	6338      	str	r0, [r7, #48]	@ 0x30
				if (jsonObj != NULL)
 800e512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e514:	2b00      	cmp	r3, #0
 800e516:	f000 815a 	beq.w	800e7ce <SPI_handler+0x33a>
				{
					cJSON_AddNumberToObject(jsonObj, "device1", deviceState);
 800e51a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e51e:	4618      	mov	r0, r3
 800e520:	f7fa f820 	bl	8008564 <__aeabi_ui2d>
 800e524:	4602      	mov	r2, r0
 800e526:	460b      	mov	r3, r1
 800e528:	ec43 2b10 	vmov	d0, r2, r3
 800e52c:	499a      	ldr	r1, [pc, #616]	@ (800e798 <SPI_handler+0x304>)
 800e52e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e530:	f7ff f8ec 	bl	800d70c <cJSON_AddNumberToObject>
					char *jsonStr = cJSON_PrintUnformatted(jsonObj);
 800e534:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e536:	f7fe fa97 	bl	800ca68 <cJSON_PrintUnformatted>
 800e53a:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (jsonStr != NULL)
 800e53c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d018      	beq.n	800e574 <SPI_handler+0xe0>
					{
						HAL_UART_Transmit(&huart3, (uint8_t *)jsonStr, strlen(jsonStr), HAL_MAX_DELAY);
 800e542:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e544:	f7f9 fe6e 	bl	8008224 <strlen>
 800e548:	4603      	mov	r3, r0
 800e54a:	b29a      	uxth	r2, r3
 800e54c:	f04f 33ff 	mov.w	r3, #4294967295
 800e550:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e552:	4892      	ldr	r0, [pc, #584]	@ (800e79c <SPI_handler+0x308>)
 800e554:	f002 ffc0 	bl	80114d8 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800e558:	f04f 33ff 	mov.w	r3, #4294967295
 800e55c:	2201      	movs	r2, #1
 800e55e:	4990      	ldr	r1, [pc, #576]	@ (800e7a0 <SPI_handler+0x30c>)
 800e560:	488e      	ldr	r0, [pc, #568]	@ (800e79c <SPI_handler+0x308>)
 800e562:	f002 ffb9 	bl	80114d8 <HAL_UART_Transmit>
						printf("JSON Sent via UART: %s\n", jsonStr);
 800e566:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e568:	488e      	ldr	r0, [pc, #568]	@ (800e7a4 <SPI_handler+0x310>)
 800e56a:	f007 fb47 	bl	8015bfc <iprintf>
						free(jsonStr);
 800e56e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e570:	f006 fb88 	bl	8014c84 <free>
					}

					cJSON_Delete(jsonObj);
 800e574:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e576:	f7fd f9cb 	bl	800b910 <cJSON_Delete>
 800e57a:	e128      	b.n	800e7ce <SPI_handler+0x33a>
				}
            }
            else if(strcmp((char *)localSpiRxBuffer, "L2") == 0)
 800e57c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e580:	4989      	ldr	r1, [pc, #548]	@ (800e7a8 <SPI_handler+0x314>)
 800e582:	4618      	mov	r0, r3
 800e584:	f7f9 fe44 	bl	8008210 <strcmp>
 800e588:	4603      	mov	r3, r0
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d14d      	bne.n	800e62a <SPI_handler+0x196>
            {
            	deviceNo = 2;
 800e58e:	2302      	movs	r3, #2
 800e590:	653b      	str	r3, [r7, #80]	@ 0x50
            	HAL_GPIO_TogglePin(TOUCH_LED2_GPIO_Port, TOUCH_LED2_Pin);
 800e592:	2104      	movs	r1, #4
 800e594:	487f      	ldr	r0, [pc, #508]	@ (800e794 <SPI_handler+0x300>)
 800e596:	f000 ff82 	bl	800f49e <HAL_GPIO_TogglePin>
            	state = HAL_GPIO_ReadPin(TOUCH_LED2_GPIO_Port, TOUCH_LED2_Pin);
 800e59a:	2104      	movs	r1, #4
 800e59c:	487d      	ldr	r0, [pc, #500]	@ (800e794 <SPI_handler+0x300>)
 800e59e:	f000 ff4d 	bl	800f43c <HAL_GPIO_ReadPin>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800e5a8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	bf0c      	ite	eq
 800e5b0:	2301      	moveq	r3, #1
 800e5b2:	2300      	movne	r3, #0
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

				cJSON *jsonObj = cJSON_CreateObject();
 800e5ba:	f7ff f915 	bl	800d7e8 <cJSON_CreateObject>
 800e5be:	63b8      	str	r0, [r7, #56]	@ 0x38
				if (jsonObj != NULL)
 800e5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	f000 8103 	beq.w	800e7ce <SPI_handler+0x33a>
				{
					cJSON_AddNumberToObject(jsonObj, "device2", deviceState);
 800e5c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7f9 ffc9 	bl	8008564 <__aeabi_ui2d>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	ec43 2b10 	vmov	d0, r2, r3
 800e5da:	4974      	ldr	r1, [pc, #464]	@ (800e7ac <SPI_handler+0x318>)
 800e5dc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e5de:	f7ff f895 	bl	800d70c <cJSON_AddNumberToObject>

					char *jsonStr = cJSON_PrintUnformatted(jsonObj);
 800e5e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e5e4:	f7fe fa40 	bl	800ca68 <cJSON_PrintUnformatted>
 800e5e8:	6378      	str	r0, [r7, #52]	@ 0x34
					if (jsonStr != NULL)
 800e5ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d018      	beq.n	800e622 <SPI_handler+0x18e>
					{
						HAL_UART_Transmit(&huart3, (uint8_t *)jsonStr, strlen(jsonStr), HAL_MAX_DELAY);
 800e5f0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e5f2:	f7f9 fe17 	bl	8008224 <strlen>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	b29a      	uxth	r2, r3
 800e5fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e5fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e600:	4866      	ldr	r0, [pc, #408]	@ (800e79c <SPI_handler+0x308>)
 800e602:	f002 ff69 	bl	80114d8 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800e606:	f04f 33ff 	mov.w	r3, #4294967295
 800e60a:	2201      	movs	r2, #1
 800e60c:	4964      	ldr	r1, [pc, #400]	@ (800e7a0 <SPI_handler+0x30c>)
 800e60e:	4863      	ldr	r0, [pc, #396]	@ (800e79c <SPI_handler+0x308>)
 800e610:	f002 ff62 	bl	80114d8 <HAL_UART_Transmit>
						printf("JSON Sent via UART: %s\n", jsonStr);
 800e614:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e616:	4863      	ldr	r0, [pc, #396]	@ (800e7a4 <SPI_handler+0x310>)
 800e618:	f007 faf0 	bl	8015bfc <iprintf>
						free(jsonStr);
 800e61c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e61e:	f006 fb31 	bl	8014c84 <free>
					}

					cJSON_Delete(jsonObj);
 800e622:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e624:	f7fd f974 	bl	800b910 <cJSON_Delete>
 800e628:	e0d1      	b.n	800e7ce <SPI_handler+0x33a>
				}
            }
            else if(strcmp((char *)localSpiRxBuffer, "L3") == 0)
 800e62a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e62e:	4960      	ldr	r1, [pc, #384]	@ (800e7b0 <SPI_handler+0x31c>)
 800e630:	4618      	mov	r0, r3
 800e632:	f7f9 fded 	bl	8008210 <strcmp>
 800e636:	4603      	mov	r3, r0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d14d      	bne.n	800e6d8 <SPI_handler+0x244>
            {
            	deviceNo = 3;
 800e63c:	2303      	movs	r3, #3
 800e63e:	653b      	str	r3, [r7, #80]	@ 0x50
				HAL_GPIO_TogglePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin);
 800e640:	2102      	movs	r1, #2
 800e642:	485c      	ldr	r0, [pc, #368]	@ (800e7b4 <SPI_handler+0x320>)
 800e644:	f000 ff2b 	bl	800f49e <HAL_GPIO_TogglePin>
				state = HAL_GPIO_ReadPin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin);
 800e648:	2102      	movs	r1, #2
 800e64a:	485a      	ldr	r0, [pc, #360]	@ (800e7b4 <SPI_handler+0x320>)
 800e64c:	f000 fef6 	bl	800f43c <HAL_GPIO_ReadPin>
 800e650:	4603      	mov	r3, r0
 800e652:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800e656:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e65a:	2b01      	cmp	r3, #1
 800e65c:	bf0c      	ite	eq
 800e65e:	2301      	moveq	r3, #1
 800e660:	2300      	movne	r3, #0
 800e662:	b2db      	uxtb	r3, r3
 800e664:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

				cJSON *jsonObj = cJSON_CreateObject();
 800e668:	f7ff f8be 	bl	800d7e8 <cJSON_CreateObject>
 800e66c:	6438      	str	r0, [r7, #64]	@ 0x40
				if (jsonObj != NULL)
 800e66e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e670:	2b00      	cmp	r3, #0
 800e672:	f000 80ac 	beq.w	800e7ce <SPI_handler+0x33a>
				{
					cJSON_AddNumberToObject(jsonObj, "device3", deviceState);
 800e676:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7f9 ff72 	bl	8008564 <__aeabi_ui2d>
 800e680:	4602      	mov	r2, r0
 800e682:	460b      	mov	r3, r1
 800e684:	ec43 2b10 	vmov	d0, r2, r3
 800e688:	494b      	ldr	r1, [pc, #300]	@ (800e7b8 <SPI_handler+0x324>)
 800e68a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e68c:	f7ff f83e 	bl	800d70c <cJSON_AddNumberToObject>

					char *jsonStr = cJSON_PrintUnformatted(jsonObj);
 800e690:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e692:	f7fe f9e9 	bl	800ca68 <cJSON_PrintUnformatted>
 800e696:	63f8      	str	r0, [r7, #60]	@ 0x3c
					if (jsonStr != NULL)
 800e698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d018      	beq.n	800e6d0 <SPI_handler+0x23c>
					{
						HAL_UART_Transmit(&huart3, (uint8_t *)jsonStr, strlen(jsonStr), HAL_MAX_DELAY);
 800e69e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e6a0:	f7f9 fdc0 	bl	8008224 <strlen>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	b29a      	uxth	r2, r3
 800e6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e6ae:	483b      	ldr	r0, [pc, #236]	@ (800e79c <SPI_handler+0x308>)
 800e6b0:	f002 ff12 	bl	80114d8 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800e6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	4939      	ldr	r1, [pc, #228]	@ (800e7a0 <SPI_handler+0x30c>)
 800e6bc:	4837      	ldr	r0, [pc, #220]	@ (800e79c <SPI_handler+0x308>)
 800e6be:	f002 ff0b 	bl	80114d8 <HAL_UART_Transmit>
						printf("JSON Sent via UART: %s\n", jsonStr);
 800e6c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e6c4:	4837      	ldr	r0, [pc, #220]	@ (800e7a4 <SPI_handler+0x310>)
 800e6c6:	f007 fa99 	bl	8015bfc <iprintf>
						free(jsonStr);
 800e6ca:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e6cc:	f006 fada 	bl	8014c84 <free>
					}

					cJSON_Delete(jsonObj);
 800e6d0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e6d2:	f7fd f91d 	bl	800b910 <cJSON_Delete>
 800e6d6:	e07a      	b.n	800e7ce <SPI_handler+0x33a>
				}
			}
            else if(strcmp((char *)localSpiRxBuffer, "L4") == 0)
 800e6d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e6dc:	4937      	ldr	r1, [pc, #220]	@ (800e7bc <SPI_handler+0x328>)
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7f9 fd96 	bl	8008210 <strcmp>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d16e      	bne.n	800e7c8 <SPI_handler+0x334>
            {
            	deviceNo = 4;
 800e6ea:	2304      	movs	r3, #4
 800e6ec:	653b      	str	r3, [r7, #80]	@ 0x50
				HAL_GPIO_TogglePin(TOUCH_LED4_GPIO_Port, TOUCH_LED4_Pin);
 800e6ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800e6f2:	4833      	ldr	r0, [pc, #204]	@ (800e7c0 <SPI_handler+0x32c>)
 800e6f4:	f000 fed3 	bl	800f49e <HAL_GPIO_TogglePin>
				state = HAL_GPIO_ReadPin(TOUCH_LED4_GPIO_Port, TOUCH_LED4_Pin);
 800e6f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800e6fc:	4830      	ldr	r0, [pc, #192]	@ (800e7c0 <SPI_handler+0x32c>)
 800e6fe:	f000 fe9d 	bl	800f43c <HAL_GPIO_ReadPin>
 800e702:	4603      	mov	r3, r0
 800e704:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800e708:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	bf0c      	ite	eq
 800e710:	2301      	moveq	r3, #1
 800e712:	2300      	movne	r3, #0
 800e714:	b2db      	uxtb	r3, r3
 800e716:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

				cJSON *jsonObj = cJSON_CreateObject();
 800e71a:	f7ff f865 	bl	800d7e8 <cJSON_CreateObject>
 800e71e:	64b8      	str	r0, [r7, #72]	@ 0x48
				if (jsonObj != NULL)
 800e720:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e722:	2b00      	cmp	r3, #0
 800e724:	d053      	beq.n	800e7ce <SPI_handler+0x33a>
				{
					cJSON_AddNumberToObject(jsonObj, "device4", deviceState);
 800e726:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7f9 ff1a 	bl	8008564 <__aeabi_ui2d>
 800e730:	4602      	mov	r2, r0
 800e732:	460b      	mov	r3, r1
 800e734:	ec43 2b10 	vmov	d0, r2, r3
 800e738:	4922      	ldr	r1, [pc, #136]	@ (800e7c4 <SPI_handler+0x330>)
 800e73a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800e73c:	f7fe ffe6 	bl	800d70c <cJSON_AddNumberToObject>

					char *jsonStr = cJSON_PrintUnformatted(jsonObj);
 800e740:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800e742:	f7fe f991 	bl	800ca68 <cJSON_PrintUnformatted>
 800e746:	6478      	str	r0, [r7, #68]	@ 0x44
					if (jsonStr != NULL)
 800e748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d018      	beq.n	800e780 <SPI_handler+0x2ec>
					{
						HAL_UART_Transmit(&huart3, (uint8_t *)jsonStr, strlen(jsonStr), HAL_MAX_DELAY);
 800e74e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e750:	f7f9 fd68 	bl	8008224 <strlen>
 800e754:	4603      	mov	r3, r0
 800e756:	b29a      	uxth	r2, r3
 800e758:	f04f 33ff 	mov.w	r3, #4294967295
 800e75c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e75e:	480f      	ldr	r0, [pc, #60]	@ (800e79c <SPI_handler+0x308>)
 800e760:	f002 feba 	bl	80114d8 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800e764:	f04f 33ff 	mov.w	r3, #4294967295
 800e768:	2201      	movs	r2, #1
 800e76a:	490d      	ldr	r1, [pc, #52]	@ (800e7a0 <SPI_handler+0x30c>)
 800e76c:	480b      	ldr	r0, [pc, #44]	@ (800e79c <SPI_handler+0x308>)
 800e76e:	f002 feb3 	bl	80114d8 <HAL_UART_Transmit>
						printf("JSON Sent via UART: %s\n", jsonStr);
 800e772:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e774:	480b      	ldr	r0, [pc, #44]	@ (800e7a4 <SPI_handler+0x310>)
 800e776:	f007 fa41 	bl	8015bfc <iprintf>
						free(jsonStr);
 800e77a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e77c:	f006 fa82 	bl	8014c84 <free>
					}

					cJSON_Delete(jsonObj);
 800e780:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800e782:	f7fd f8c5 	bl	800b910 <cJSON_Delete>
 800e786:	e022      	b.n	800e7ce <SPI_handler+0x33a>
 800e788:	20000494 	.word	0x20000494
 800e78c:	08018814 	.word	0x08018814
 800e790:	0801882c 	.word	0x0801882c
 800e794:	40020800 	.word	0x40020800
 800e798:	08018830 	.word	0x08018830
 800e79c:	20000404 	.word	0x20000404
 800e7a0:	08018838 	.word	0x08018838
 800e7a4:	0801883c 	.word	0x0801883c
 800e7a8:	08018854 	.word	0x08018854
 800e7ac:	08018858 	.word	0x08018858
 800e7b0:	08018860 	.word	0x08018860
 800e7b4:	40021c00 	.word	0x40021c00
 800e7b8:	08018864 	.word	0x08018864
 800e7bc:	0801886c 	.word	0x0801886c
 800e7c0:	40020400 	.word	0x40020400
 800e7c4:	08018870 	.word	0x08018870
				}
			}
            else
            {
            	printf("junk data received on SPI\r\n");
 800e7c8:	480c      	ldr	r0, [pc, #48]	@ (800e7fc <SPI_handler+0x368>)
 800e7ca:	f007 fa7f 	bl	8015ccc <puts>
            }
            memset(localSpiRxBuffer, 0, sizeof(localSpiRxBuffer));
 800e7ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e7d2:	2203      	movs	r2, #3
 800e7d4:	2100      	movs	r1, #0
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f007 fbde 	bl	8015f98 <memset>
            snprintf(displayMsg, sizeof(displayMsg), "Device %d %s", deviceNo, (deviceState == 1) ? "ON" : "OFF");
 800e7dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d101      	bne.n	800e7e8 <SPI_handler+0x354>
 800e7e4:	4b06      	ldr	r3, [pc, #24]	@ (800e800 <SPI_handler+0x36c>)
 800e7e6:	e000      	b.n	800e7ea <SPI_handler+0x356>
 800e7e8:	4b06      	ldr	r3, [pc, #24]	@ (800e804 <SPI_handler+0x370>)
 800e7ea:	f107 0008 	add.w	r0, r7, #8
 800e7ee:	9300      	str	r3, [sp, #0]
 800e7f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7f2:	4a05      	ldr	r2, [pc, #20]	@ (800e808 <SPI_handler+0x374>)
 800e7f4:	2120      	movs	r1, #32
 800e7f6:	f007 fa71 	bl	8015cdc <sniprintf>
        if (xQueueReceive(spiQueue, localSpiRxBuffer, portMAX_DELAY) == pdTRUE)
 800e7fa:	e656      	b.n	800e4aa <SPI_handler+0x16>
 800e7fc:	08018878 	.word	0x08018878
 800e800:	08018894 	.word	0x08018894
 800e804:	08018898 	.word	0x08018898
 800e808:	0801889c 	.word	0x0801889c
 800e80c:	00000000 	.word	0x00000000

0800e810 <UART_handler>:
        }
    }
}

void UART_handler(void *param)
{
 800e810:	b590      	push	{r4, r7, lr}
 800e812:	b0c5      	sub	sp, #276	@ 0x114
 800e814:	af02      	add	r7, sp, #8
 800e816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e81a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e81e:	6018      	str	r0, [r3, #0]
    uint8_t jsonBuffer[128];
    uint8_t index = 0;
 800e820:	2300      	movs	r3, #0
 800e822:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
    bool collecting = false;
 800e826:	2300      	movs	r3, #0
 800e828:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    while (1)
    {
        if (uartHead != uartTail)
 800e82c:	4bb8      	ldr	r3, [pc, #736]	@ (800eb10 <UART_handler+0x300>)
 800e82e:	881b      	ldrh	r3, [r3, #0]
 800e830:	b29a      	uxth	r2, r3
 800e832:	4bb8      	ldr	r3, [pc, #736]	@ (800eb14 <UART_handler+0x304>)
 800e834:	881b      	ldrh	r3, [r3, #0]
 800e836:	b29b      	uxth	r3, r3
 800e838:	429a      	cmp	r2, r3
 800e83a:	f000 81d7 	beq.w	800ebec <UART_handler+0x3dc>
        {
            uint8_t byte = uartRingBuffer[uartTail];
 800e83e:	4bb5      	ldr	r3, [pc, #724]	@ (800eb14 <UART_handler+0x304>)
 800e840:	881b      	ldrh	r3, [r3, #0]
 800e842:	b29b      	uxth	r3, r3
 800e844:	461a      	mov	r2, r3
 800e846:	4bb4      	ldr	r3, [pc, #720]	@ (800eb18 <UART_handler+0x308>)
 800e848:	5c9b      	ldrb	r3, [r3, r2]
 800e84a:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
            uartTail = (uartTail + 1) % UART_RING_BUFFER_SIZE;
 800e84e:	4bb1      	ldr	r3, [pc, #708]	@ (800eb14 <UART_handler+0x304>)
 800e850:	881b      	ldrh	r3, [r3, #0]
 800e852:	b29b      	uxth	r3, r3
 800e854:	3301      	adds	r3, #1
 800e856:	425a      	negs	r2, r3
 800e858:	b2db      	uxtb	r3, r3
 800e85a:	b2d2      	uxtb	r2, r2
 800e85c:	bf58      	it	pl
 800e85e:	4253      	negpl	r3, r2
 800e860:	b29a      	uxth	r2, r3
 800e862:	4bac      	ldr	r3, [pc, #688]	@ (800eb14 <UART_handler+0x304>)
 800e864:	801a      	strh	r2, [r3, #0]

            if (byte == '{')
 800e866:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 800e86a:	2b7b      	cmp	r3, #123	@ 0x7b
 800e86c:	d112      	bne.n	800e894 <UART_handler+0x84>
            {
                collecting = true;
 800e86e:	2301      	movs	r3, #1
 800e870:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
                index = 0;
 800e874:	2300      	movs	r3, #0
 800e876:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
                jsonBuffer[index++] = byte;
 800e87a:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800e87e:	1c5a      	adds	r2, r3, #1
 800e880:	f887 2107 	strb.w	r2, [r7, #263]	@ 0x107
 800e884:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800e888:	443b      	add	r3, r7
 800e88a:	f897 20fb 	ldrb.w	r2, [r7, #251]	@ 0xfb
 800e88e:	f803 2cb4 	strb.w	r2, [r3, #-180]
 800e892:	e7cb      	b.n	800e82c <UART_handler+0x1c>
            }
            else if (collecting)
 800e894:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800e898:	2b00      	cmp	r3, #0
 800e89a:	f000 81a0 	beq.w	800ebde <UART_handler+0x3ce>
            {
                if (index < sizeof(jsonBuffer) - 1)
 800e89e:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800e8a2:	2b7e      	cmp	r3, #126	@ 0x7e
 800e8a4:	f200 8194 	bhi.w	800ebd0 <UART_handler+0x3c0>
                {
                    jsonBuffer[index++] = byte;
 800e8a8:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800e8ac:	1c5a      	adds	r2, r3, #1
 800e8ae:	f887 2107 	strb.w	r2, [r7, #263]	@ 0x107
 800e8b2:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800e8b6:	443b      	add	r3, r7
 800e8b8:	f897 20fb 	ldrb.w	r2, [r7, #251]	@ 0xfb
 800e8bc:	f803 2cb4 	strb.w	r2, [r3, #-180]

                    if (byte == '}')
 800e8c0:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 800e8c4:	2b7d      	cmp	r3, #125	@ 0x7d
 800e8c6:	d1b1      	bne.n	800e82c <UART_handler+0x1c>
                    {
                        jsonBuffer[index] = '\0';
 800e8c8:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800e8cc:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800e8d0:	443b      	add	r3, r7
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f803 2cb4 	strb.w	r2, [r3, #-180]
                        printf("JSON received: %s\n", jsonBuffer);
 800e8d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800e8dc:	4619      	mov	r1, r3
 800e8de:	488f      	ldr	r0, [pc, #572]	@ (800eb1c <UART_handler+0x30c>)
 800e8e0:	f007 f98c 	bl	8015bfc <iprintf>

                        cJSON *json = cJSON_Parse((char *)jsonBuffer);
 800e8e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7fe f825 	bl	800c938 <cJSON_Parse>
 800e8ee:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
                        if (json)
 800e8f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	f000 8160 	beq.w	800ebbc <UART_handler+0x3ac>
                        {
                        	const char *devices[] = {"device1", "device2", "device3", "device4"};
 800e8fc:	4b88      	ldr	r3, [pc, #544]	@ (800eb20 <UART_handler+0x310>)
 800e8fe:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800e902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e904:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
							GPIO_TypeDef* ports[] = {TOUCH_LED1_GPIO_Port, TOUCH_LED2_GPIO_Port, TOUCH_LED3_GPIO_Port, TOUCH_LED4_GPIO_Port};
 800e908:	4b86      	ldr	r3, [pc, #536]	@ (800eb24 <UART_handler+0x314>)
 800e90a:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 800e90e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e910:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
							uint16_t pins[] = {TOUCH_LED1_Pin, TOUCH_LED2_Pin, TOUCH_LED3_Pin, TOUCH_LED4_Pin};
 800e914:	4a84      	ldr	r2, [pc, #528]	@ (800eb28 <UART_handler+0x318>)
 800e916:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e91a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e91e:	e883 0003 	stmia.w	r3, {r0, r1}

                        	cJSON *getCurrentStatus = cJSON_GetObjectItem(json, "request");
 800e922:	4982      	ldr	r1, [pc, #520]	@ (800eb2c <UART_handler+0x31c>)
 800e924:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 800e928:	f7fe fe3a 	bl	800d5a0 <cJSON_GetObjectItem>
 800e92c:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
                        	if(strcmp(getCurrentStatus->valuestring, "getCurrentStatus") == 0)
 800e930:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e934:	691b      	ldr	r3, [r3, #16]
 800e936:	497e      	ldr	r1, [pc, #504]	@ (800eb30 <UART_handler+0x320>)
 800e938:	4618      	mov	r0, r3
 800e93a:	f7f9 fc69 	bl	8008210 <strcmp>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d168      	bne.n	800ea16 <UART_handler+0x206>
                        	{
                        		cJSON *resp = cJSON_CreateObject();
 800e944:	f7fe ff50 	bl	800d7e8 <cJSON_CreateObject>
 800e948:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

								for (int i = 0; i < 4; i++)
 800e94c:	2300      	movs	r3, #0
 800e94e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e952:	e035      	b.n	800e9c0 <UART_handler+0x1b0>
								{
									GPIO_PinState state = HAL_GPIO_ReadPin(ports[i], pins[i]);
 800e954:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e958:	009b      	lsls	r3, r3, #2
 800e95a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800e95e:	443b      	add	r3, r7
 800e960:	f853 2cd4 	ldr.w	r2, [r3, #-212]
 800e964:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e968:	005b      	lsls	r3, r3, #1
 800e96a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800e96e:	443b      	add	r3, r7
 800e970:	f833 3cdc 	ldrh.w	r3, [r3, #-220]
 800e974:	4619      	mov	r1, r3
 800e976:	4610      	mov	r0, r2
 800e978:	f000 fd60 	bl	800f43c <HAL_GPIO_ReadPin>
 800e97c:	4603      	mov	r3, r0
 800e97e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
									cJSON_AddNumberToObject(resp, devices[i], (state == GPIO_PIN_SET) ? 1 : 0);
 800e982:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e986:	009b      	lsls	r3, r3, #2
 800e988:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800e98c:	443b      	add	r3, r7
 800e98e:	f853 2cc4 	ldr.w	r2, [r3, #-196]
 800e992:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800e996:	2b01      	cmp	r3, #1
 800e998:	d102      	bne.n	800e9a0 <UART_handler+0x190>
 800e99a:	ed9f 7b59 	vldr	d7, [pc, #356]	@ 800eb00 <UART_handler+0x2f0>
 800e99e:	e001      	b.n	800e9a4 <UART_handler+0x194>
 800e9a0:	ed9f 7b59 	vldr	d7, [pc, #356]	@ 800eb08 <UART_handler+0x2f8>
 800e9a4:	eeb0 0a47 	vmov.f32	s0, s14
 800e9a8:	eef0 0a67 	vmov.f32	s1, s15
 800e9ac:	4611      	mov	r1, r2
 800e9ae:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800e9b2:	f7fe feab 	bl	800d70c <cJSON_AddNumberToObject>
								for (int i = 0; i < 4; i++)
 800e9b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e9c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e9c4:	2b03      	cmp	r3, #3
 800e9c6:	ddc5      	ble.n	800e954 <UART_handler+0x144>
								}

								char *respStr = cJSON_PrintUnformatted(resp);
 800e9c8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800e9cc:	f7fe f84c 	bl	800ca68 <cJSON_PrintUnformatted>
 800e9d0:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
								if (respStr)
 800e9d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d017      	beq.n	800ea0c <UART_handler+0x1fc>
								{
									HAL_UART_Transmit(&huart3, (uint8_t *)respStr, strlen(respStr), HAL_MAX_DELAY);
 800e9dc:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800e9e0:	f7f9 fc20 	bl	8008224 <strlen>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	b29a      	uxth	r2, r3
 800e9e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e9ec:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800e9f0:	4850      	ldr	r0, [pc, #320]	@ (800eb34 <UART_handler+0x324>)
 800e9f2:	f002 fd71 	bl	80114d8 <HAL_UART_Transmit>
									HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800e9f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	494e      	ldr	r1, [pc, #312]	@ (800eb38 <UART_handler+0x328>)
 800e9fe:	484d      	ldr	r0, [pc, #308]	@ (800eb34 <UART_handler+0x324>)
 800ea00:	f002 fd6a 	bl	80114d8 <HAL_UART_Transmit>
									free(respStr);
 800ea04:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800ea08:	f006 f93c 	bl	8014c84 <free>
								}

								cJSON_Delete(resp);
 800ea0c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800ea10:	f7fc ff7e 	bl	800b910 <cJSON_Delete>
 800ea14:	e0cd      	b.n	800ebb2 <UART_handler+0x3a2>
                        	}
                        	else
                        	{
                        		cJSON *resp = cJSON_CreateObject();
 800ea16:	f7fe fee7 	bl	800d7e8 <cJSON_CreateObject>
 800ea1a:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
                        		for (int i = 0; i < 4; i++)
 800ea1e:	2300      	movs	r3, #0
 800ea20:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ea24:	e09a      	b.n	800eb5c <UART_handler+0x34c>
								{
									cJSON *item = cJSON_GetObjectItem(json, devices[i]);
 800ea26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ea2a:	009b      	lsls	r3, r3, #2
 800ea2c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ea30:	443b      	add	r3, r7
 800ea32:	f853 3cc4 	ldr.w	r3, [r3, #-196]
 800ea36:	4619      	mov	r1, r3
 800ea38:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 800ea3c:	f7fe fdb0 	bl	800d5a0 <cJSON_GetObjectItem>
 800ea40:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
									if (cJSON_IsNumber(item))
 800ea44:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800ea48:	f7fe fee2 	bl	800d810 <cJSON_IsNumber>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d07f      	beq.n	800eb52 <UART_handler+0x342>
									{
										HAL_GPIO_WritePin(ports[i], pins[i], item->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800ea52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ea56:	009b      	lsls	r3, r3, #2
 800ea58:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ea5c:	443b      	add	r3, r7
 800ea5e:	f853 0cd4 	ldr.w	r0, [r3, #-212]
 800ea62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ea66:	005b      	lsls	r3, r3, #1
 800ea68:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ea6c:	443b      	add	r3, r7
 800ea6e:	f833 1cdc 	ldrh.w	r1, [r3, #-220]
 800ea72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea76:	695b      	ldr	r3, [r3, #20]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	bf14      	ite	ne
 800ea7c:	2301      	movne	r3, #1
 800ea7e:	2300      	moveq	r3, #0
 800ea80:	b2db      	uxtb	r3, r3
 800ea82:	461a      	mov	r2, r3
 800ea84:	f000 fcf2 	bl	800f46c <HAL_GPIO_WritePin>
										GPIO_PinState state = HAL_GPIO_ReadPin(ports[i], pins[i]);
 800ea88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ea8c:	009b      	lsls	r3, r3, #2
 800ea8e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ea92:	443b      	add	r3, r7
 800ea94:	f853 2cd4 	ldr.w	r2, [r3, #-212]
 800ea98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ea9c:	005b      	lsls	r3, r3, #1
 800ea9e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800eaa2:	443b      	add	r3, r7
 800eaa4:	f833 3cdc 	ldrh.w	r3, [r3, #-220]
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	4610      	mov	r0, r2
 800eaac:	f000 fcc6 	bl	800f43c <HAL_GPIO_ReadPin>
 800eab0:	4603      	mov	r3, r0
 800eab2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

										cJSON_AddNumberToObject(resp, devices[i], (state == GPIO_PIN_SET) ? 1 : 0);
 800eab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eaba:	009b      	lsls	r3, r3, #2
 800eabc:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800eac0:	443b      	add	r3, r7
 800eac2:	f853 2cc4 	ldr.w	r2, [r3, #-196]
 800eac6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d102      	bne.n	800ead4 <UART_handler+0x2c4>
 800eace:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800eb00 <UART_handler+0x2f0>
 800ead2:	e001      	b.n	800ead8 <UART_handler+0x2c8>
 800ead4:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800eb08 <UART_handler+0x2f8>
 800ead8:	eeb0 0a47 	vmov.f32	s0, s14
 800eadc:	eef0 0a67 	vmov.f32	s1, s15
 800eae0:	4611      	mov	r1, r2
 800eae2:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 800eae6:	f7fe fe11 	bl	800d70c <cJSON_AddNumberToObject>

										char displayMsg[32];
										snprintf(displayMsg, sizeof(displayMsg), "Device %d %s", i + 1, (state == GPIO_PIN_SET) ? "ON" : "OFF");
 800eaea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eaee:	1c5a      	adds	r2, r3, #1
 800eaf0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d123      	bne.n	800eb40 <UART_handler+0x330>
 800eaf8:	4b10      	ldr	r3, [pc, #64]	@ (800eb3c <UART_handler+0x32c>)
 800eafa:	e022      	b.n	800eb42 <UART_handler+0x332>
 800eafc:	f3af 8000 	nop.w
 800eb00:	00000000 	.word	0x00000000
 800eb04:	3ff00000 	.word	0x3ff00000
	...
 800eb10:	2000059c 	.word	0x2000059c
 800eb14:	2000059e 	.word	0x2000059e
 800eb18:	2000049c 	.word	0x2000049c
 800eb1c:	080188ac 	.word	0x080188ac
 800eb20:	080188ec 	.word	0x080188ec
 800eb24:	080188fc 	.word	0x080188fc
 800eb28:	0801890c 	.word	0x0801890c
 800eb2c:	080188c0 	.word	0x080188c0
 800eb30:	080188c8 	.word	0x080188c8
 800eb34:	20000404 	.word	0x20000404
 800eb38:	08018838 	.word	0x08018838
 800eb3c:	08018894 	.word	0x08018894
 800eb40:	4b2c      	ldr	r3, [pc, #176]	@ (800ebf4 <UART_handler+0x3e4>)
 800eb42:	f107 000c 	add.w	r0, r7, #12
 800eb46:	9300      	str	r3, [sp, #0]
 800eb48:	4613      	mov	r3, r2
 800eb4a:	4a2b      	ldr	r2, [pc, #172]	@ (800ebf8 <UART_handler+0x3e8>)
 800eb4c:	2120      	movs	r1, #32
 800eb4e:	f007 f8c5 	bl	8015cdc <sniprintf>
                        		for (int i = 0; i < 4; i++)
 800eb52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eb56:	3301      	adds	r3, #1
 800eb58:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800eb5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eb60:	2b03      	cmp	r3, #3
 800eb62:	f77f af60 	ble.w	800ea26 <UART_handler+0x216>
										//print_To_display(displayMsg);
									}
								}
                        		char *respStr = cJSON_PrintUnformatted(resp);
 800eb66:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 800eb6a:	f7fd ff7d 	bl	800ca68 <cJSON_PrintUnformatted>
 800eb6e:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
								if (respStr)
 800eb72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d017      	beq.n	800ebaa <UART_handler+0x39a>
								{
									HAL_UART_Transmit(&huart3, (uint8_t *)respStr, strlen(respStr), HAL_MAX_DELAY);
 800eb7a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 800eb7e:	f7f9 fb51 	bl	8008224 <strlen>
 800eb82:	4603      	mov	r3, r0
 800eb84:	b29a      	uxth	r2, r3
 800eb86:	f04f 33ff 	mov.w	r3, #4294967295
 800eb8a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800eb8e:	481b      	ldr	r0, [pc, #108]	@ (800ebfc <UART_handler+0x3ec>)
 800eb90:	f002 fca2 	bl	80114d8 <HAL_UART_Transmit>
									HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800eb94:	f04f 33ff 	mov.w	r3, #4294967295
 800eb98:	2201      	movs	r2, #1
 800eb9a:	4919      	ldr	r1, [pc, #100]	@ (800ec00 <UART_handler+0x3f0>)
 800eb9c:	4817      	ldr	r0, [pc, #92]	@ (800ebfc <UART_handler+0x3ec>)
 800eb9e:	f002 fc9b 	bl	80114d8 <HAL_UART_Transmit>
									free(respStr);
 800eba2:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 800eba6:	f006 f86d 	bl	8014c84 <free>
								}
								cJSON_Delete(resp);
 800ebaa:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 800ebae:	f7fc feaf 	bl	800b910 <cJSON_Delete>
                        	}
                            cJSON_Delete(json);
 800ebb2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 800ebb6:	f7fc feab 	bl	800b910 <cJSON_Delete>
 800ebba:	e002      	b.n	800ebc2 <UART_handler+0x3b2>
                        }
                        else
                        {
                            printf("Invalid JSON!\n");
 800ebbc:	4811      	ldr	r0, [pc, #68]	@ (800ec04 <UART_handler+0x3f4>)
 800ebbe:	f007 f885 	bl	8015ccc <puts>
                        }
                        collecting = false;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
                        index = 0;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 800ebce:	e62d      	b.n	800e82c <UART_handler+0x1c>
                    }
                }
                else
                {
                    collecting = false;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
                    index = 0;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 800ebdc:	e626      	b.n	800e82c <UART_handler+0x1c>
                }
            }
            else if (byte == BOOT_CMD)
 800ebde:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 800ebe2:	2b50      	cmp	r3, #80	@ 0x50
 800ebe4:	f47f ae22 	bne.w	800e82c <UART_handler+0x1c>
            {
                NVIC_SystemReset();
 800ebe8:	f7ff fb98 	bl	800e31c <__NVIC_SystemReset>
            }
        }
        else
        {
            vTaskDelay(pdMS_TO_TICKS(5));
 800ebec:	2005      	movs	r0, #5
 800ebee:	f004 fb79 	bl	80132e4 <vTaskDelay>
        if (uartHead != uartTail)
 800ebf2:	e61b      	b.n	800e82c <UART_handler+0x1c>
 800ebf4:	08018898 	.word	0x08018898
 800ebf8:	0801889c 	.word	0x0801889c
 800ebfc:	20000404 	.word	0x20000404
 800ec00:	08018838 	.word	0x08018838
 800ec04:	080188dc 	.word	0x080188dc

0800ec08 <HAL_SPI_RxCpltCallback>:
    }
}


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2) {
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	4a18      	ldr	r2, [pc, #96]	@ (800ec78 <HAL_SPI_RxCpltCallback+0x70>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d11e      	bne.n	800ec58 <HAL_SPI_RxCpltCallback+0x50>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	60fb      	str	r3, [r7, #12]
        xQueueSendFromISR(spiQueue, spiRxBuffer, &xHigherPriorityTaskWoken);
 800ec1e:	4b17      	ldr	r3, [pc, #92]	@ (800ec7c <HAL_SPI_RxCpltCallback+0x74>)
 800ec20:	6818      	ldr	r0, [r3, #0]
 800ec22:	f107 020c 	add.w	r2, r7, #12
 800ec26:	2300      	movs	r3, #0
 800ec28:	4915      	ldr	r1, [pc, #84]	@ (800ec80 <HAL_SPI_RxCpltCallback+0x78>)
 800ec2a:	f003 ff17 	bl	8012a5c <xQueueGenericSendFromISR>
        memset(spiRxBuffer, 0, sizeof(spiRxBuffer));
 800ec2e:	2202      	movs	r2, #2
 800ec30:	2100      	movs	r1, #0
 800ec32:	4813      	ldr	r0, [pc, #76]	@ (800ec80 <HAL_SPI_RxCpltCallback+0x78>)
 800ec34:	f007 f9b0 	bl	8015f98 <memset>
        HAL_SPI_Receive_IT(&hspi2, spiRxBuffer, sizeof(spiRxBuffer));
 800ec38:	2202      	movs	r2, #2
 800ec3a:	4911      	ldr	r1, [pc, #68]	@ (800ec80 <HAL_SPI_RxCpltCallback+0x78>)
 800ec3c:	4811      	ldr	r0, [pc, #68]	@ (800ec84 <HAL_SPI_RxCpltCallback+0x7c>)
 800ec3e:	f001 fc13 	bl	8010468 <HAL_SPI_Receive_IT>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d007      	beq.n	800ec58 <HAL_SPI_RxCpltCallback+0x50>
 800ec48:	4b0f      	ldr	r3, [pc, #60]	@ (800ec88 <HAL_SPI_RxCpltCallback+0x80>)
 800ec4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec4e:	601a      	str	r2, [r3, #0]
 800ec50:	f3bf 8f4f 	dsb	sy
 800ec54:	f3bf 8f6f 	isb	sy
    }
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ec58:	2300      	movs	r3, #0
 800ec5a:	60bb      	str	r3, [r7, #8]
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	60bb      	str	r3, [r7, #8]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	689b      	ldr	r3, [r3, #8]
 800ec6a:	60bb      	str	r3, [r7, #8]
 800ec6c:	68bb      	ldr	r3, [r7, #8]
}
 800ec6e:	bf00      	nop
 800ec70:	3710      	adds	r7, #16
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	40003800 	.word	0x40003800
 800ec7c:	20000494 	.word	0x20000494
 800ec80:	200005a4 	.word	0x200005a4
 800ec84:	20000364 	.word	0x20000364
 800ec88:	e000ed04 	.word	0xe000ed04

0800ec8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b084      	sub	sp, #16
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	4a15      	ldr	r2, [pc, #84]	@ (800ecf0 <HAL_UART_RxCpltCallback+0x64>)
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	d123      	bne.n	800ece6 <HAL_UART_RxCpltCallback+0x5a>
        uint16_t nextHead = (uartHead + 1) % UART_RING_BUFFER_SIZE;
 800ec9e:	4b15      	ldr	r3, [pc, #84]	@ (800ecf4 <HAL_UART_RxCpltCallback+0x68>)
 800eca0:	881b      	ldrh	r3, [r3, #0]
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	3301      	adds	r3, #1
 800eca6:	425a      	negs	r2, r3
 800eca8:	b2db      	uxtb	r3, r3
 800ecaa:	b2d2      	uxtb	r2, r2
 800ecac:	bf58      	it	pl
 800ecae:	4253      	negpl	r3, r2
 800ecb0:	81fb      	strh	r3, [r7, #14]

        if (nextHead != uartTail) {
 800ecb2:	4b11      	ldr	r3, [pc, #68]	@ (800ecf8 <HAL_UART_RxCpltCallback+0x6c>)
 800ecb4:	881b      	ldrh	r3, [r3, #0]
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	89fa      	ldrh	r2, [r7, #14]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d00b      	beq.n	800ecd6 <HAL_UART_RxCpltCallback+0x4a>
            uartRingBuffer[uartHead] = uartRxByte;
 800ecbe:	4b0d      	ldr	r3, [pc, #52]	@ (800ecf4 <HAL_UART_RxCpltCallback+0x68>)
 800ecc0:	881b      	ldrh	r3, [r3, #0]
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	461a      	mov	r2, r3
 800ecc6:	4b0d      	ldr	r3, [pc, #52]	@ (800ecfc <HAL_UART_RxCpltCallback+0x70>)
 800ecc8:	7819      	ldrb	r1, [r3, #0]
 800ecca:	4b0d      	ldr	r3, [pc, #52]	@ (800ed00 <HAL_UART_RxCpltCallback+0x74>)
 800eccc:	5499      	strb	r1, [r3, r2]
            uartHead = nextHead;
 800ecce:	4a09      	ldr	r2, [pc, #36]	@ (800ecf4 <HAL_UART_RxCpltCallback+0x68>)
 800ecd0:	89fb      	ldrh	r3, [r7, #14]
 800ecd2:	8013      	strh	r3, [r2, #0]
 800ecd4:	e002      	b.n	800ecdc <HAL_UART_RxCpltCallback+0x50>
        } else {
            printf("UART ring buffer overflow!\n");
 800ecd6:	480b      	ldr	r0, [pc, #44]	@ (800ed04 <HAL_UART_RxCpltCallback+0x78>)
 800ecd8:	f006 fff8 	bl	8015ccc <puts>
        }

        HAL_UART_Receive_IT(&huart3, &uartRxByte, 1);
 800ecdc:	2201      	movs	r2, #1
 800ecde:	4907      	ldr	r1, [pc, #28]	@ (800ecfc <HAL_UART_RxCpltCallback+0x70>)
 800ece0:	4809      	ldr	r0, [pc, #36]	@ (800ed08 <HAL_UART_RxCpltCallback+0x7c>)
 800ece2:	f002 fc84 	bl	80115ee <HAL_UART_Receive_IT>
    }
}
 800ece6:	bf00      	nop
 800ece8:	3710      	adds	r7, #16
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
 800ecee:	bf00      	nop
 800ecf0:	40004800 	.word	0x40004800
 800ecf4:	2000059c 	.word	0x2000059c
 800ecf8:	2000059e 	.word	0x2000059e
 800ecfc:	200005a0 	.word	0x200005a0
 800ed00:	2000049c 	.word	0x2000049c
 800ed04:	08018914 	.word	0x08018914
 800ed08:	20000404 	.word	0x20000404

0800ed0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ed0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ed44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800ed10:	f7ff faee 	bl	800e2f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800ed14:	480c      	ldr	r0, [pc, #48]	@ (800ed48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800ed16:	490d      	ldr	r1, [pc, #52]	@ (800ed4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800ed18:	4a0d      	ldr	r2, [pc, #52]	@ (800ed50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ed1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ed1c:	e002      	b.n	800ed24 <LoopCopyDataInit>

0800ed1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ed1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ed20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ed22:	3304      	adds	r3, #4

0800ed24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ed24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ed26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ed28:	d3f9      	bcc.n	800ed1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ed2a:	4a0a      	ldr	r2, [pc, #40]	@ (800ed54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ed2c:	4c0a      	ldr	r4, [pc, #40]	@ (800ed58 <LoopFillZerobss+0x22>)
  movs r3, #0
 800ed2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ed30:	e001      	b.n	800ed36 <LoopFillZerobss>

0800ed32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ed32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ed34:	3204      	adds	r2, #4

0800ed36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ed36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ed38:	d3fb      	bcc.n	800ed32 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800ed3a:	f007 f9a3 	bl	8016084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ed3e:	f7fe fdf3 	bl	800d928 <main>
  bx  lr    
 800ed42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ed44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ed48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ed4c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800ed50:	0801a298 	.word	0x0801a298
  ldr r2, =_sbss
 800ed54:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800ed58:	200134a4 	.word	0x200134a4

0800ed5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ed5c:	e7fe      	b.n	800ed5c <ADC_IRQHandler>
	...

0800ed60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ed64:	4b0e      	ldr	r3, [pc, #56]	@ (800eda0 <HAL_Init+0x40>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4a0d      	ldr	r2, [pc, #52]	@ (800eda0 <HAL_Init+0x40>)
 800ed6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ed6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ed70:	4b0b      	ldr	r3, [pc, #44]	@ (800eda0 <HAL_Init+0x40>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	4a0a      	ldr	r2, [pc, #40]	@ (800eda0 <HAL_Init+0x40>)
 800ed76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ed7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ed7c:	4b08      	ldr	r3, [pc, #32]	@ (800eda0 <HAL_Init+0x40>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4a07      	ldr	r2, [pc, #28]	@ (800eda0 <HAL_Init+0x40>)
 800ed82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ed86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ed88:	2003      	movs	r0, #3
 800ed8a:	f000 f8fc 	bl	800ef86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ed8e:	200f      	movs	r0, #15
 800ed90:	f7ff f95c 	bl	800e04c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ed94:	f7fe ffe6 	bl	800dd64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ed98:	2300      	movs	r3, #0
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	40023c00 	.word	0x40023c00

0800eda4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800eda4:	b480      	push	{r7}
 800eda6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800eda8:	4b06      	ldr	r3, [pc, #24]	@ (800edc4 <HAL_IncTick+0x20>)
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	461a      	mov	r2, r3
 800edae:	4b06      	ldr	r3, [pc, #24]	@ (800edc8 <HAL_IncTick+0x24>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	4413      	add	r3, r2
 800edb4:	4a04      	ldr	r2, [pc, #16]	@ (800edc8 <HAL_IncTick+0x24>)
 800edb6:	6013      	str	r3, [r2, #0]
}
 800edb8:	bf00      	nop
 800edba:	46bd      	mov	sp, r7
 800edbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc0:	4770      	bx	lr
 800edc2:	bf00      	nop
 800edc4:	20000024 	.word	0x20000024
 800edc8:	200005a8 	.word	0x200005a8

0800edcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800edcc:	b480      	push	{r7}
 800edce:	af00      	add	r7, sp, #0
  return uwTick;
 800edd0:	4b03      	ldr	r3, [pc, #12]	@ (800ede0 <HAL_GetTick+0x14>)
 800edd2:	681b      	ldr	r3, [r3, #0]
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	46bd      	mov	sp, r7
 800edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop
 800ede0:	200005a8 	.word	0x200005a8

0800ede4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800edec:	f7ff ffee 	bl	800edcc <HAL_GetTick>
 800edf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edfc:	d005      	beq.n	800ee0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800edfe:	4b0a      	ldr	r3, [pc, #40]	@ (800ee28 <HAL_Delay+0x44>)
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	461a      	mov	r2, r3
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	4413      	add	r3, r2
 800ee08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800ee0a:	bf00      	nop
 800ee0c:	f7ff ffde 	bl	800edcc <HAL_GetTick>
 800ee10:	4602      	mov	r2, r0
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	1ad3      	subs	r3, r2, r3
 800ee16:	68fa      	ldr	r2, [r7, #12]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d8f7      	bhi.n	800ee0c <HAL_Delay+0x28>
  {
  }
}
 800ee1c:	bf00      	nop
 800ee1e:	bf00      	nop
 800ee20:	3710      	adds	r7, #16
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	20000024 	.word	0x20000024

0800ee2c <__NVIC_SetPriorityGrouping>:
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b085      	sub	sp, #20
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f003 0307 	and.w	r3, r3, #7
 800ee3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ee3c:	4b0c      	ldr	r3, [pc, #48]	@ (800ee70 <__NVIC_SetPriorityGrouping+0x44>)
 800ee3e:	68db      	ldr	r3, [r3, #12]
 800ee40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ee42:	68ba      	ldr	r2, [r7, #8]
 800ee44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800ee48:	4013      	ands	r3, r2
 800ee4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ee54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800ee58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ee5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ee5e:	4a04      	ldr	r2, [pc, #16]	@ (800ee70 <__NVIC_SetPriorityGrouping+0x44>)
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	60d3      	str	r3, [r2, #12]
}
 800ee64:	bf00      	nop
 800ee66:	3714      	adds	r7, #20
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr
 800ee70:	e000ed00 	.word	0xe000ed00

0800ee74 <__NVIC_GetPriorityGrouping>:
{
 800ee74:	b480      	push	{r7}
 800ee76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ee78:	4b04      	ldr	r3, [pc, #16]	@ (800ee8c <__NVIC_GetPriorityGrouping+0x18>)
 800ee7a:	68db      	ldr	r3, [r3, #12]
 800ee7c:	0a1b      	lsrs	r3, r3, #8
 800ee7e:	f003 0307 	and.w	r3, r3, #7
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr
 800ee8c:	e000ed00 	.word	0xe000ed00

0800ee90 <__NVIC_EnableIRQ>:
{
 800ee90:	b480      	push	{r7}
 800ee92:	b083      	sub	sp, #12
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	4603      	mov	r3, r0
 800ee98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ee9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	db0b      	blt.n	800eeba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800eea2:	79fb      	ldrb	r3, [r7, #7]
 800eea4:	f003 021f 	and.w	r2, r3, #31
 800eea8:	4907      	ldr	r1, [pc, #28]	@ (800eec8 <__NVIC_EnableIRQ+0x38>)
 800eeaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eeae:	095b      	lsrs	r3, r3, #5
 800eeb0:	2001      	movs	r0, #1
 800eeb2:	fa00 f202 	lsl.w	r2, r0, r2
 800eeb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800eeba:	bf00      	nop
 800eebc:	370c      	adds	r7, #12
 800eebe:	46bd      	mov	sp, r7
 800eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop
 800eec8:	e000e100 	.word	0xe000e100

0800eecc <__NVIC_SetPriority>:
{
 800eecc:	b480      	push	{r7}
 800eece:	b083      	sub	sp, #12
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	4603      	mov	r3, r0
 800eed4:	6039      	str	r1, [r7, #0]
 800eed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800eed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	db0a      	blt.n	800eef6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	b2da      	uxtb	r2, r3
 800eee4:	490c      	ldr	r1, [pc, #48]	@ (800ef18 <__NVIC_SetPriority+0x4c>)
 800eee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eeea:	0112      	lsls	r2, r2, #4
 800eeec:	b2d2      	uxtb	r2, r2
 800eeee:	440b      	add	r3, r1
 800eef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800eef4:	e00a      	b.n	800ef0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	b2da      	uxtb	r2, r3
 800eefa:	4908      	ldr	r1, [pc, #32]	@ (800ef1c <__NVIC_SetPriority+0x50>)
 800eefc:	79fb      	ldrb	r3, [r7, #7]
 800eefe:	f003 030f 	and.w	r3, r3, #15
 800ef02:	3b04      	subs	r3, #4
 800ef04:	0112      	lsls	r2, r2, #4
 800ef06:	b2d2      	uxtb	r2, r2
 800ef08:	440b      	add	r3, r1
 800ef0a:	761a      	strb	r2, [r3, #24]
}
 800ef0c:	bf00      	nop
 800ef0e:	370c      	adds	r7, #12
 800ef10:	46bd      	mov	sp, r7
 800ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef16:	4770      	bx	lr
 800ef18:	e000e100 	.word	0xe000e100
 800ef1c:	e000ed00 	.word	0xe000ed00

0800ef20 <NVIC_EncodePriority>:
{
 800ef20:	b480      	push	{r7}
 800ef22:	b089      	sub	sp, #36	@ 0x24
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	60f8      	str	r0, [r7, #12]
 800ef28:	60b9      	str	r1, [r7, #8]
 800ef2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	f003 0307 	and.w	r3, r3, #7
 800ef32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ef34:	69fb      	ldr	r3, [r7, #28]
 800ef36:	f1c3 0307 	rsb	r3, r3, #7
 800ef3a:	2b04      	cmp	r3, #4
 800ef3c:	bf28      	it	cs
 800ef3e:	2304      	movcs	r3, #4
 800ef40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ef42:	69fb      	ldr	r3, [r7, #28]
 800ef44:	3304      	adds	r3, #4
 800ef46:	2b06      	cmp	r3, #6
 800ef48:	d902      	bls.n	800ef50 <NVIC_EncodePriority+0x30>
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	3b03      	subs	r3, #3
 800ef4e:	e000      	b.n	800ef52 <NVIC_EncodePriority+0x32>
 800ef50:	2300      	movs	r3, #0
 800ef52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ef54:	f04f 32ff 	mov.w	r2, #4294967295
 800ef58:	69bb      	ldr	r3, [r7, #24]
 800ef5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ef5e:	43da      	mvns	r2, r3
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	401a      	ands	r2, r3
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ef68:	f04f 31ff 	mov.w	r1, #4294967295
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ef72:	43d9      	mvns	r1, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ef78:	4313      	orrs	r3, r2
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3724      	adds	r7, #36	@ 0x24
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef84:	4770      	bx	lr

0800ef86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ef86:	b580      	push	{r7, lr}
 800ef88:	b082      	sub	sp, #8
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f7ff ff4c 	bl	800ee2c <__NVIC_SetPriorityGrouping>
}
 800ef94:	bf00      	nop
 800ef96:	3708      	adds	r7, #8
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b086      	sub	sp, #24
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	4603      	mov	r3, r0
 800efa4:	60b9      	str	r1, [r7, #8]
 800efa6:	607a      	str	r2, [r7, #4]
 800efa8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800efaa:	2300      	movs	r3, #0
 800efac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800efae:	f7ff ff61 	bl	800ee74 <__NVIC_GetPriorityGrouping>
 800efb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	68b9      	ldr	r1, [r7, #8]
 800efb8:	6978      	ldr	r0, [r7, #20]
 800efba:	f7ff ffb1 	bl	800ef20 <NVIC_EncodePriority>
 800efbe:	4602      	mov	r2, r0
 800efc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efc4:	4611      	mov	r1, r2
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7ff ff80 	bl	800eecc <__NVIC_SetPriority>
}
 800efcc:	bf00      	nop
 800efce:	3718      	adds	r7, #24
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}

0800efd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b082      	sub	sp, #8
 800efd8:	af00      	add	r7, sp, #0
 800efda:	4603      	mov	r3, r0
 800efdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800efde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7ff ff54 	bl	800ee90 <__NVIC_EnableIRQ>
}
 800efe8:	bf00      	nop
 800efea:	3708      	adds	r7, #8
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b084      	sub	sp, #16
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800effc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800effe:	f7ff fee5 	bl	800edcc <HAL_GetTick>
 800f002:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f00a:	b2db      	uxtb	r3, r3
 800f00c:	2b02      	cmp	r3, #2
 800f00e:	d008      	beq.n	800f022 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2280      	movs	r2, #128	@ 0x80
 800f014:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2200      	movs	r2, #0
 800f01a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800f01e:	2301      	movs	r3, #1
 800f020:	e052      	b.n	800f0c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	681a      	ldr	r2, [r3, #0]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f022 0216 	bic.w	r2, r2, #22
 800f030:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	695a      	ldr	r2, [r3, #20]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f040:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f046:	2b00      	cmp	r3, #0
 800f048:	d103      	bne.n	800f052 <HAL_DMA_Abort+0x62>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d007      	beq.n	800f062 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	681a      	ldr	r2, [r3, #0]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	f022 0208 	bic.w	r2, r2, #8
 800f060:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	f022 0201 	bic.w	r2, r2, #1
 800f070:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f072:	e013      	b.n	800f09c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f074:	f7ff feaa 	bl	800edcc <HAL_GetTick>
 800f078:	4602      	mov	r2, r0
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	1ad3      	subs	r3, r2, r3
 800f07e:	2b05      	cmp	r3, #5
 800f080:	d90c      	bls.n	800f09c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2220      	movs	r2, #32
 800f086:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2203      	movs	r2, #3
 800f08c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2200      	movs	r2, #0
 800f094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800f098:	2303      	movs	r3, #3
 800f09a:	e015      	b.n	800f0c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	f003 0301 	and.w	r3, r3, #1
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d1e4      	bne.n	800f074 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f0ae:	223f      	movs	r2, #63	@ 0x3f
 800f0b0:	409a      	lsls	r2, r3
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800f0c6:	2300      	movs	r3, #0
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3710      	adds	r7, #16
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b083      	sub	sp, #12
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	2b02      	cmp	r3, #2
 800f0e2:	d004      	beq.n	800f0ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2280      	movs	r2, #128	@ 0x80
 800f0e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	e00c      	b.n	800f108 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2205      	movs	r2, #5
 800f0f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	681a      	ldr	r2, [r3, #0]
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f022 0201 	bic.w	r2, r2, #1
 800f104:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f106:	2300      	movs	r3, #0
}
 800f108:	4618      	mov	r0, r3
 800f10a:	370c      	adds	r7, #12
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr

0800f114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f114:	b480      	push	{r7}
 800f116:	b089      	sub	sp, #36	@ 0x24
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800f11e:	2300      	movs	r3, #0
 800f120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800f122:	2300      	movs	r3, #0
 800f124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800f126:	2300      	movs	r3, #0
 800f128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f12a:	2300      	movs	r3, #0
 800f12c:	61fb      	str	r3, [r7, #28]
 800f12e:	e165      	b.n	800f3fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800f130:	2201      	movs	r2, #1
 800f132:	69fb      	ldr	r3, [r7, #28]
 800f134:	fa02 f303 	lsl.w	r3, r2, r3
 800f138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	697a      	ldr	r2, [r7, #20]
 800f140:	4013      	ands	r3, r2
 800f142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800f144:	693a      	ldr	r2, [r7, #16]
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	429a      	cmp	r2, r3
 800f14a:	f040 8154 	bne.w	800f3f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	685b      	ldr	r3, [r3, #4]
 800f152:	f003 0303 	and.w	r3, r3, #3
 800f156:	2b01      	cmp	r3, #1
 800f158:	d005      	beq.n	800f166 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800f162:	2b02      	cmp	r3, #2
 800f164:	d130      	bne.n	800f1c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	689b      	ldr	r3, [r3, #8]
 800f16a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800f16c:	69fb      	ldr	r3, [r7, #28]
 800f16e:	005b      	lsls	r3, r3, #1
 800f170:	2203      	movs	r2, #3
 800f172:	fa02 f303 	lsl.w	r3, r2, r3
 800f176:	43db      	mvns	r3, r3
 800f178:	69ba      	ldr	r2, [r7, #24]
 800f17a:	4013      	ands	r3, r2
 800f17c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	68da      	ldr	r2, [r3, #12]
 800f182:	69fb      	ldr	r3, [r7, #28]
 800f184:	005b      	lsls	r3, r3, #1
 800f186:	fa02 f303 	lsl.w	r3, r2, r3
 800f18a:	69ba      	ldr	r2, [r7, #24]
 800f18c:	4313      	orrs	r3, r2
 800f18e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	69ba      	ldr	r2, [r7, #24]
 800f194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	685b      	ldr	r3, [r3, #4]
 800f19a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f19c:	2201      	movs	r2, #1
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800f1a4:	43db      	mvns	r3, r3
 800f1a6:	69ba      	ldr	r2, [r7, #24]
 800f1a8:	4013      	ands	r3, r2
 800f1aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	091b      	lsrs	r3, r3, #4
 800f1b2:	f003 0201 	and.w	r2, r3, #1
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800f1bc:	69ba      	ldr	r2, [r7, #24]
 800f1be:	4313      	orrs	r3, r2
 800f1c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	69ba      	ldr	r2, [r7, #24]
 800f1c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	685b      	ldr	r3, [r3, #4]
 800f1cc:	f003 0303 	and.w	r3, r3, #3
 800f1d0:	2b03      	cmp	r3, #3
 800f1d2:	d017      	beq.n	800f204 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	68db      	ldr	r3, [r3, #12]
 800f1d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f1da:	69fb      	ldr	r3, [r7, #28]
 800f1dc:	005b      	lsls	r3, r3, #1
 800f1de:	2203      	movs	r2, #3
 800f1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800f1e4:	43db      	mvns	r3, r3
 800f1e6:	69ba      	ldr	r2, [r7, #24]
 800f1e8:	4013      	ands	r3, r2
 800f1ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	689a      	ldr	r2, [r3, #8]
 800f1f0:	69fb      	ldr	r3, [r7, #28]
 800f1f2:	005b      	lsls	r3, r3, #1
 800f1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800f1f8:	69ba      	ldr	r2, [r7, #24]
 800f1fa:	4313      	orrs	r3, r2
 800f1fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	69ba      	ldr	r2, [r7, #24]
 800f202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	f003 0303 	and.w	r3, r3, #3
 800f20c:	2b02      	cmp	r3, #2
 800f20e:	d123      	bne.n	800f258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f210:	69fb      	ldr	r3, [r7, #28]
 800f212:	08da      	lsrs	r2, r3, #3
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	3208      	adds	r2, #8
 800f218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f21c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f21e:	69fb      	ldr	r3, [r7, #28]
 800f220:	f003 0307 	and.w	r3, r3, #7
 800f224:	009b      	lsls	r3, r3, #2
 800f226:	220f      	movs	r2, #15
 800f228:	fa02 f303 	lsl.w	r3, r2, r3
 800f22c:	43db      	mvns	r3, r3
 800f22e:	69ba      	ldr	r2, [r7, #24]
 800f230:	4013      	ands	r3, r2
 800f232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	691a      	ldr	r2, [r3, #16]
 800f238:	69fb      	ldr	r3, [r7, #28]
 800f23a:	f003 0307 	and.w	r3, r3, #7
 800f23e:	009b      	lsls	r3, r3, #2
 800f240:	fa02 f303 	lsl.w	r3, r2, r3
 800f244:	69ba      	ldr	r2, [r7, #24]
 800f246:	4313      	orrs	r3, r2
 800f248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800f24a:	69fb      	ldr	r3, [r7, #28]
 800f24c:	08da      	lsrs	r2, r3, #3
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	3208      	adds	r2, #8
 800f252:	69b9      	ldr	r1, [r7, #24]
 800f254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	005b      	lsls	r3, r3, #1
 800f262:	2203      	movs	r2, #3
 800f264:	fa02 f303 	lsl.w	r3, r2, r3
 800f268:	43db      	mvns	r3, r3
 800f26a:	69ba      	ldr	r2, [r7, #24]
 800f26c:	4013      	ands	r3, r2
 800f26e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	f003 0203 	and.w	r2, r3, #3
 800f278:	69fb      	ldr	r3, [r7, #28]
 800f27a:	005b      	lsls	r3, r3, #1
 800f27c:	fa02 f303 	lsl.w	r3, r2, r3
 800f280:	69ba      	ldr	r2, [r7, #24]
 800f282:	4313      	orrs	r3, r2
 800f284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	69ba      	ldr	r2, [r7, #24]
 800f28a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f294:	2b00      	cmp	r3, #0
 800f296:	f000 80ae 	beq.w	800f3f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f29a:	2300      	movs	r3, #0
 800f29c:	60fb      	str	r3, [r7, #12]
 800f29e:	4b5d      	ldr	r3, [pc, #372]	@ (800f414 <HAL_GPIO_Init+0x300>)
 800f2a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2a2:	4a5c      	ldr	r2, [pc, #368]	@ (800f414 <HAL_GPIO_Init+0x300>)
 800f2a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f2a8:	6453      	str	r3, [r2, #68]	@ 0x44
 800f2aa:	4b5a      	ldr	r3, [pc, #360]	@ (800f414 <HAL_GPIO_Init+0x300>)
 800f2ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f2b2:	60fb      	str	r3, [r7, #12]
 800f2b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800f2b6:	4a58      	ldr	r2, [pc, #352]	@ (800f418 <HAL_GPIO_Init+0x304>)
 800f2b8:	69fb      	ldr	r3, [r7, #28]
 800f2ba:	089b      	lsrs	r3, r3, #2
 800f2bc:	3302      	adds	r3, #2
 800f2be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f2c4:	69fb      	ldr	r3, [r7, #28]
 800f2c6:	f003 0303 	and.w	r3, r3, #3
 800f2ca:	009b      	lsls	r3, r3, #2
 800f2cc:	220f      	movs	r2, #15
 800f2ce:	fa02 f303 	lsl.w	r3, r2, r3
 800f2d2:	43db      	mvns	r3, r3
 800f2d4:	69ba      	ldr	r2, [r7, #24]
 800f2d6:	4013      	ands	r3, r2
 800f2d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	4a4f      	ldr	r2, [pc, #316]	@ (800f41c <HAL_GPIO_Init+0x308>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d025      	beq.n	800f32e <HAL_GPIO_Init+0x21a>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	4a4e      	ldr	r2, [pc, #312]	@ (800f420 <HAL_GPIO_Init+0x30c>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d01f      	beq.n	800f32a <HAL_GPIO_Init+0x216>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	4a4d      	ldr	r2, [pc, #308]	@ (800f424 <HAL_GPIO_Init+0x310>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d019      	beq.n	800f326 <HAL_GPIO_Init+0x212>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	4a4c      	ldr	r2, [pc, #304]	@ (800f428 <HAL_GPIO_Init+0x314>)
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	d013      	beq.n	800f322 <HAL_GPIO_Init+0x20e>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	4a4b      	ldr	r2, [pc, #300]	@ (800f42c <HAL_GPIO_Init+0x318>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d00d      	beq.n	800f31e <HAL_GPIO_Init+0x20a>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	4a4a      	ldr	r2, [pc, #296]	@ (800f430 <HAL_GPIO_Init+0x31c>)
 800f306:	4293      	cmp	r3, r2
 800f308:	d007      	beq.n	800f31a <HAL_GPIO_Init+0x206>
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	4a49      	ldr	r2, [pc, #292]	@ (800f434 <HAL_GPIO_Init+0x320>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	d101      	bne.n	800f316 <HAL_GPIO_Init+0x202>
 800f312:	2306      	movs	r3, #6
 800f314:	e00c      	b.n	800f330 <HAL_GPIO_Init+0x21c>
 800f316:	2307      	movs	r3, #7
 800f318:	e00a      	b.n	800f330 <HAL_GPIO_Init+0x21c>
 800f31a:	2305      	movs	r3, #5
 800f31c:	e008      	b.n	800f330 <HAL_GPIO_Init+0x21c>
 800f31e:	2304      	movs	r3, #4
 800f320:	e006      	b.n	800f330 <HAL_GPIO_Init+0x21c>
 800f322:	2303      	movs	r3, #3
 800f324:	e004      	b.n	800f330 <HAL_GPIO_Init+0x21c>
 800f326:	2302      	movs	r3, #2
 800f328:	e002      	b.n	800f330 <HAL_GPIO_Init+0x21c>
 800f32a:	2301      	movs	r3, #1
 800f32c:	e000      	b.n	800f330 <HAL_GPIO_Init+0x21c>
 800f32e:	2300      	movs	r3, #0
 800f330:	69fa      	ldr	r2, [r7, #28]
 800f332:	f002 0203 	and.w	r2, r2, #3
 800f336:	0092      	lsls	r2, r2, #2
 800f338:	4093      	lsls	r3, r2
 800f33a:	69ba      	ldr	r2, [r7, #24]
 800f33c:	4313      	orrs	r3, r2
 800f33e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f340:	4935      	ldr	r1, [pc, #212]	@ (800f418 <HAL_GPIO_Init+0x304>)
 800f342:	69fb      	ldr	r3, [r7, #28]
 800f344:	089b      	lsrs	r3, r3, #2
 800f346:	3302      	adds	r3, #2
 800f348:	69ba      	ldr	r2, [r7, #24]
 800f34a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f34e:	4b3a      	ldr	r3, [pc, #232]	@ (800f438 <HAL_GPIO_Init+0x324>)
 800f350:	689b      	ldr	r3, [r3, #8]
 800f352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	43db      	mvns	r3, r3
 800f358:	69ba      	ldr	r2, [r7, #24]
 800f35a:	4013      	ands	r3, r2
 800f35c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f366:	2b00      	cmp	r3, #0
 800f368:	d003      	beq.n	800f372 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800f36a:	69ba      	ldr	r2, [r7, #24]
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	4313      	orrs	r3, r2
 800f370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800f372:	4a31      	ldr	r2, [pc, #196]	@ (800f438 <HAL_GPIO_Init+0x324>)
 800f374:	69bb      	ldr	r3, [r7, #24]
 800f376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800f378:	4b2f      	ldr	r3, [pc, #188]	@ (800f438 <HAL_GPIO_Init+0x324>)
 800f37a:	68db      	ldr	r3, [r3, #12]
 800f37c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	43db      	mvns	r3, r3
 800f382:	69ba      	ldr	r2, [r7, #24]
 800f384:	4013      	ands	r3, r2
 800f386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f390:	2b00      	cmp	r3, #0
 800f392:	d003      	beq.n	800f39c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800f394:	69ba      	ldr	r2, [r7, #24]
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	4313      	orrs	r3, r2
 800f39a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800f39c:	4a26      	ldr	r2, [pc, #152]	@ (800f438 <HAL_GPIO_Init+0x324>)
 800f39e:	69bb      	ldr	r3, [r7, #24]
 800f3a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800f3a2:	4b25      	ldr	r3, [pc, #148]	@ (800f438 <HAL_GPIO_Init+0x324>)
 800f3a4:	685b      	ldr	r3, [r3, #4]
 800f3a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	43db      	mvns	r3, r3
 800f3ac:	69ba      	ldr	r2, [r7, #24]
 800f3ae:	4013      	ands	r3, r2
 800f3b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	685b      	ldr	r3, [r3, #4]
 800f3b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d003      	beq.n	800f3c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800f3be:	69ba      	ldr	r2, [r7, #24]
 800f3c0:	693b      	ldr	r3, [r7, #16]
 800f3c2:	4313      	orrs	r3, r2
 800f3c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800f3c6:	4a1c      	ldr	r2, [pc, #112]	@ (800f438 <HAL_GPIO_Init+0x324>)
 800f3c8:	69bb      	ldr	r3, [r7, #24]
 800f3ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f3cc:	4b1a      	ldr	r3, [pc, #104]	@ (800f438 <HAL_GPIO_Init+0x324>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	43db      	mvns	r3, r3
 800f3d6:	69ba      	ldr	r2, [r7, #24]
 800f3d8:	4013      	ands	r3, r2
 800f3da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	685b      	ldr	r3, [r3, #4]
 800f3e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d003      	beq.n	800f3f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800f3e8:	69ba      	ldr	r2, [r7, #24]
 800f3ea:	693b      	ldr	r3, [r7, #16]
 800f3ec:	4313      	orrs	r3, r2
 800f3ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800f3f0:	4a11      	ldr	r2, [pc, #68]	@ (800f438 <HAL_GPIO_Init+0x324>)
 800f3f2:	69bb      	ldr	r3, [r7, #24]
 800f3f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f3f6:	69fb      	ldr	r3, [r7, #28]
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	61fb      	str	r3, [r7, #28]
 800f3fc:	69fb      	ldr	r3, [r7, #28]
 800f3fe:	2b0f      	cmp	r3, #15
 800f400:	f67f ae96 	bls.w	800f130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800f404:	bf00      	nop
 800f406:	bf00      	nop
 800f408:	3724      	adds	r7, #36	@ 0x24
 800f40a:	46bd      	mov	sp, r7
 800f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f410:	4770      	bx	lr
 800f412:	bf00      	nop
 800f414:	40023800 	.word	0x40023800
 800f418:	40013800 	.word	0x40013800
 800f41c:	40020000 	.word	0x40020000
 800f420:	40020400 	.word	0x40020400
 800f424:	40020800 	.word	0x40020800
 800f428:	40020c00 	.word	0x40020c00
 800f42c:	40021000 	.word	0x40021000
 800f430:	40021400 	.word	0x40021400
 800f434:	40021800 	.word	0x40021800
 800f438:	40013c00 	.word	0x40013c00

0800f43c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f43c:	b480      	push	{r7}
 800f43e:	b085      	sub	sp, #20
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	460b      	mov	r3, r1
 800f446:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	691a      	ldr	r2, [r3, #16]
 800f44c:	887b      	ldrh	r3, [r7, #2]
 800f44e:	4013      	ands	r3, r2
 800f450:	2b00      	cmp	r3, #0
 800f452:	d002      	beq.n	800f45a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800f454:	2301      	movs	r3, #1
 800f456:	73fb      	strb	r3, [r7, #15]
 800f458:	e001      	b.n	800f45e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f45a:	2300      	movs	r3, #0
 800f45c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f460:	4618      	mov	r0, r3
 800f462:	3714      	adds	r7, #20
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr

0800f46c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f46c:	b480      	push	{r7}
 800f46e:	b083      	sub	sp, #12
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	460b      	mov	r3, r1
 800f476:	807b      	strh	r3, [r7, #2]
 800f478:	4613      	mov	r3, r2
 800f47a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f47c:	787b      	ldrb	r3, [r7, #1]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d003      	beq.n	800f48a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f482:	887a      	ldrh	r2, [r7, #2]
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800f488:	e003      	b.n	800f492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800f48a:	887b      	ldrh	r3, [r7, #2]
 800f48c:	041a      	lsls	r2, r3, #16
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	619a      	str	r2, [r3, #24]
}
 800f492:	bf00      	nop
 800f494:	370c      	adds	r7, #12
 800f496:	46bd      	mov	sp, r7
 800f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49c:	4770      	bx	lr

0800f49e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f49e:	b480      	push	{r7}
 800f4a0:	b085      	sub	sp, #20
 800f4a2:	af00      	add	r7, sp, #0
 800f4a4:	6078      	str	r0, [r7, #4]
 800f4a6:	460b      	mov	r3, r1
 800f4a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	695b      	ldr	r3, [r3, #20]
 800f4ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800f4b0:	887a      	ldrh	r2, [r7, #2]
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	4013      	ands	r3, r2
 800f4b6:	041a      	lsls	r2, r3, #16
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	43d9      	mvns	r1, r3
 800f4bc:	887b      	ldrh	r3, [r7, #2]
 800f4be:	400b      	ands	r3, r1
 800f4c0:	431a      	orrs	r2, r3
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	619a      	str	r2, [r3, #24]
}
 800f4c6:	bf00      	nop
 800f4c8:	3714      	adds	r7, #20
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr
	...

0800f4d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	4603      	mov	r3, r0
 800f4dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800f4de:	4b08      	ldr	r3, [pc, #32]	@ (800f500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f4e0:	695a      	ldr	r2, [r3, #20]
 800f4e2:	88fb      	ldrh	r3, [r7, #6]
 800f4e4:	4013      	ands	r3, r2
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d006      	beq.n	800f4f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f4ea:	4a05      	ldr	r2, [pc, #20]	@ (800f500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f4ec:	88fb      	ldrh	r3, [r7, #6]
 800f4ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f4f0:	88fb      	ldrh	r3, [r7, #6]
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7fb ff5e 	bl	800b3b4 <HAL_GPIO_EXTI_Callback>
  }
}
 800f4f8:	bf00      	nop
 800f4fa:	3708      	adds	r7, #8
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	40013c00 	.word	0x40013c00

0800f504 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800f50a:	2300      	movs	r3, #0
 800f50c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800f50e:	2300      	movs	r3, #0
 800f510:	603b      	str	r3, [r7, #0]
 800f512:	4b20      	ldr	r3, [pc, #128]	@ (800f594 <HAL_PWREx_EnableOverDrive+0x90>)
 800f514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f516:	4a1f      	ldr	r2, [pc, #124]	@ (800f594 <HAL_PWREx_EnableOverDrive+0x90>)
 800f518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f51c:	6413      	str	r3, [r2, #64]	@ 0x40
 800f51e:	4b1d      	ldr	r3, [pc, #116]	@ (800f594 <HAL_PWREx_EnableOverDrive+0x90>)
 800f520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f526:	603b      	str	r3, [r7, #0]
 800f528:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800f52a:	4b1b      	ldr	r3, [pc, #108]	@ (800f598 <HAL_PWREx_EnableOverDrive+0x94>)
 800f52c:	2201      	movs	r2, #1
 800f52e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f530:	f7ff fc4c 	bl	800edcc <HAL_GetTick>
 800f534:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800f536:	e009      	b.n	800f54c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800f538:	f7ff fc48 	bl	800edcc <HAL_GetTick>
 800f53c:	4602      	mov	r2, r0
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	1ad3      	subs	r3, r2, r3
 800f542:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f546:	d901      	bls.n	800f54c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800f548:	2303      	movs	r3, #3
 800f54a:	e01f      	b.n	800f58c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800f54c:	4b13      	ldr	r3, [pc, #76]	@ (800f59c <HAL_PWREx_EnableOverDrive+0x98>)
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f558:	d1ee      	bne.n	800f538 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800f55a:	4b11      	ldr	r3, [pc, #68]	@ (800f5a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800f55c:	2201      	movs	r2, #1
 800f55e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f560:	f7ff fc34 	bl	800edcc <HAL_GetTick>
 800f564:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800f566:	e009      	b.n	800f57c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800f568:	f7ff fc30 	bl	800edcc <HAL_GetTick>
 800f56c:	4602      	mov	r2, r0
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	1ad3      	subs	r3, r2, r3
 800f572:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f576:	d901      	bls.n	800f57c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800f578:	2303      	movs	r3, #3
 800f57a:	e007      	b.n	800f58c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800f57c:	4b07      	ldr	r3, [pc, #28]	@ (800f59c <HAL_PWREx_EnableOverDrive+0x98>)
 800f57e:	685b      	ldr	r3, [r3, #4]
 800f580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f584:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f588:	d1ee      	bne.n	800f568 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800f58a:	2300      	movs	r3, #0
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3708      	adds	r7, #8
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}
 800f594:	40023800 	.word	0x40023800
 800f598:	420e0040 	.word	0x420e0040
 800f59c:	40007000 	.word	0x40007000
 800f5a0:	420e0044 	.word	0x420e0044

0800f5a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b084      	sub	sp, #16
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d101      	bne.n	800f5b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	e0cc      	b.n	800f752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f5b8:	4b68      	ldr	r3, [pc, #416]	@ (800f75c <HAL_RCC_ClockConfig+0x1b8>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f003 030f 	and.w	r3, r3, #15
 800f5c0:	683a      	ldr	r2, [r7, #0]
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d90c      	bls.n	800f5e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f5c6:	4b65      	ldr	r3, [pc, #404]	@ (800f75c <HAL_RCC_ClockConfig+0x1b8>)
 800f5c8:	683a      	ldr	r2, [r7, #0]
 800f5ca:	b2d2      	uxtb	r2, r2
 800f5cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f5ce:	4b63      	ldr	r3, [pc, #396]	@ (800f75c <HAL_RCC_ClockConfig+0x1b8>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	f003 030f 	and.w	r3, r3, #15
 800f5d6:	683a      	ldr	r2, [r7, #0]
 800f5d8:	429a      	cmp	r2, r3
 800f5da:	d001      	beq.n	800f5e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f5dc:	2301      	movs	r3, #1
 800f5de:	e0b8      	b.n	800f752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	f003 0302 	and.w	r3, r3, #2
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d020      	beq.n	800f62e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	f003 0304 	and.w	r3, r3, #4
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d005      	beq.n	800f604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f5f8:	4b59      	ldr	r3, [pc, #356]	@ (800f760 <HAL_RCC_ClockConfig+0x1bc>)
 800f5fa:	689b      	ldr	r3, [r3, #8]
 800f5fc:	4a58      	ldr	r2, [pc, #352]	@ (800f760 <HAL_RCC_ClockConfig+0x1bc>)
 800f5fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800f602:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	f003 0308 	and.w	r3, r3, #8
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d005      	beq.n	800f61c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f610:	4b53      	ldr	r3, [pc, #332]	@ (800f760 <HAL_RCC_ClockConfig+0x1bc>)
 800f612:	689b      	ldr	r3, [r3, #8]
 800f614:	4a52      	ldr	r2, [pc, #328]	@ (800f760 <HAL_RCC_ClockConfig+0x1bc>)
 800f616:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800f61a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f61c:	4b50      	ldr	r3, [pc, #320]	@ (800f760 <HAL_RCC_ClockConfig+0x1bc>)
 800f61e:	689b      	ldr	r3, [r3, #8]
 800f620:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	689b      	ldr	r3, [r3, #8]
 800f628:	494d      	ldr	r1, [pc, #308]	@ (800f760 <HAL_RCC_ClockConfig+0x1bc>)
 800f62a:	4313      	orrs	r3, r2
 800f62c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	f003 0301 	and.w	r3, r3, #1
 800f636:	2b00      	cmp	r3, #0
 800f638:	d044      	beq.n	800f6c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	2b01      	cmp	r3, #1
 800f640:	d107      	bne.n	800f652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f642:	4b47      	ldr	r3, [pc, #284]	@ (800f760 <HAL_RCC_ClockConfig+0x1bc>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d119      	bne.n	800f682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f64e:	2301      	movs	r3, #1
 800f650:	e07f      	b.n	800f752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	2b02      	cmp	r3, #2
 800f658:	d003      	beq.n	800f662 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f65e:	2b03      	cmp	r3, #3
 800f660:	d107      	bne.n	800f672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f662:	4b3f      	ldr	r3, [pc, #252]	@ (800f760 <HAL_RCC_ClockConfig+0x1bc>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d109      	bne.n	800f682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f66e:	2301      	movs	r3, #1
 800f670:	e06f      	b.n	800f752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f672:	4b3b      	ldr	r3, [pc, #236]	@ (800f760 <HAL_RCC_ClockConfig+0x1bc>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	f003 0302 	and.w	r3, r3, #2
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d101      	bne.n	800f682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f67e:	2301      	movs	r3, #1
 800f680:	e067      	b.n	800f752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f682:	4b37      	ldr	r3, [pc, #220]	@ (800f760 <HAL_RCC_ClockConfig+0x1bc>)
 800f684:	689b      	ldr	r3, [r3, #8]
 800f686:	f023 0203 	bic.w	r2, r3, #3
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	4934      	ldr	r1, [pc, #208]	@ (800f760 <HAL_RCC_ClockConfig+0x1bc>)
 800f690:	4313      	orrs	r3, r2
 800f692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f694:	f7ff fb9a 	bl	800edcc <HAL_GetTick>
 800f698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f69a:	e00a      	b.n	800f6b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f69c:	f7ff fb96 	bl	800edcc <HAL_GetTick>
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	1ad3      	subs	r3, r2, r3
 800f6a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d901      	bls.n	800f6b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f6ae:	2303      	movs	r3, #3
 800f6b0:	e04f      	b.n	800f752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f6b2:	4b2b      	ldr	r3, [pc, #172]	@ (800f760 <HAL_RCC_ClockConfig+0x1bc>)
 800f6b4:	689b      	ldr	r3, [r3, #8]
 800f6b6:	f003 020c 	and.w	r2, r3, #12
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	009b      	lsls	r3, r3, #2
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d1eb      	bne.n	800f69c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f6c4:	4b25      	ldr	r3, [pc, #148]	@ (800f75c <HAL_RCC_ClockConfig+0x1b8>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	f003 030f 	and.w	r3, r3, #15
 800f6cc:	683a      	ldr	r2, [r7, #0]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d20c      	bcs.n	800f6ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f6d2:	4b22      	ldr	r3, [pc, #136]	@ (800f75c <HAL_RCC_ClockConfig+0x1b8>)
 800f6d4:	683a      	ldr	r2, [r7, #0]
 800f6d6:	b2d2      	uxtb	r2, r2
 800f6d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f6da:	4b20      	ldr	r3, [pc, #128]	@ (800f75c <HAL_RCC_ClockConfig+0x1b8>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	f003 030f 	and.w	r3, r3, #15
 800f6e2:	683a      	ldr	r2, [r7, #0]
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d001      	beq.n	800f6ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	e032      	b.n	800f752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	f003 0304 	and.w	r3, r3, #4
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d008      	beq.n	800f70a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f6f8:	4b19      	ldr	r3, [pc, #100]	@ (800f760 <HAL_RCC_ClockConfig+0x1bc>)
 800f6fa:	689b      	ldr	r3, [r3, #8]
 800f6fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	68db      	ldr	r3, [r3, #12]
 800f704:	4916      	ldr	r1, [pc, #88]	@ (800f760 <HAL_RCC_ClockConfig+0x1bc>)
 800f706:	4313      	orrs	r3, r2
 800f708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f003 0308 	and.w	r3, r3, #8
 800f712:	2b00      	cmp	r3, #0
 800f714:	d009      	beq.n	800f72a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f716:	4b12      	ldr	r3, [pc, #72]	@ (800f760 <HAL_RCC_ClockConfig+0x1bc>)
 800f718:	689b      	ldr	r3, [r3, #8]
 800f71a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	691b      	ldr	r3, [r3, #16]
 800f722:	00db      	lsls	r3, r3, #3
 800f724:	490e      	ldr	r1, [pc, #56]	@ (800f760 <HAL_RCC_ClockConfig+0x1bc>)
 800f726:	4313      	orrs	r3, r2
 800f728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800f72a:	f000 f887 	bl	800f83c <HAL_RCC_GetSysClockFreq>
 800f72e:	4602      	mov	r2, r0
 800f730:	4b0b      	ldr	r3, [pc, #44]	@ (800f760 <HAL_RCC_ClockConfig+0x1bc>)
 800f732:	689b      	ldr	r3, [r3, #8]
 800f734:	091b      	lsrs	r3, r3, #4
 800f736:	f003 030f 	and.w	r3, r3, #15
 800f73a:	490a      	ldr	r1, [pc, #40]	@ (800f764 <HAL_RCC_ClockConfig+0x1c0>)
 800f73c:	5ccb      	ldrb	r3, [r1, r3]
 800f73e:	fa22 f303 	lsr.w	r3, r2, r3
 800f742:	4a09      	ldr	r2, [pc, #36]	@ (800f768 <HAL_RCC_ClockConfig+0x1c4>)
 800f744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800f746:	4b09      	ldr	r3, [pc, #36]	@ (800f76c <HAL_RCC_ClockConfig+0x1c8>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	4618      	mov	r0, r3
 800f74c:	f7fe fc7e 	bl	800e04c <HAL_InitTick>

  return HAL_OK;
 800f750:	2300      	movs	r3, #0
}
 800f752:	4618      	mov	r0, r3
 800f754:	3710      	adds	r7, #16
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	40023c00 	.word	0x40023c00
 800f760:	40023800 	.word	0x40023800
 800f764:	08019e94 	.word	0x08019e94
 800f768:	2000001c 	.word	0x2000001c
 800f76c:	20000020 	.word	0x20000020

0800f770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f770:	b480      	push	{r7}
 800f772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f774:	4b03      	ldr	r3, [pc, #12]	@ (800f784 <HAL_RCC_GetHCLKFreq+0x14>)
 800f776:	681b      	ldr	r3, [r3, #0]
}
 800f778:	4618      	mov	r0, r3
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr
 800f782:	bf00      	nop
 800f784:	2000001c 	.word	0x2000001c

0800f788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f78c:	f7ff fff0 	bl	800f770 <HAL_RCC_GetHCLKFreq>
 800f790:	4602      	mov	r2, r0
 800f792:	4b05      	ldr	r3, [pc, #20]	@ (800f7a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f794:	689b      	ldr	r3, [r3, #8]
 800f796:	0a9b      	lsrs	r3, r3, #10
 800f798:	f003 0307 	and.w	r3, r3, #7
 800f79c:	4903      	ldr	r1, [pc, #12]	@ (800f7ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800f79e:	5ccb      	ldrb	r3, [r1, r3]
 800f7a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	bd80      	pop	{r7, pc}
 800f7a8:	40023800 	.word	0x40023800
 800f7ac:	08019ea4 	.word	0x08019ea4

0800f7b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f7b4:	f7ff ffdc 	bl	800f770 <HAL_RCC_GetHCLKFreq>
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	4b05      	ldr	r3, [pc, #20]	@ (800f7d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f7bc:	689b      	ldr	r3, [r3, #8]
 800f7be:	0b5b      	lsrs	r3, r3, #13
 800f7c0:	f003 0307 	and.w	r3, r3, #7
 800f7c4:	4903      	ldr	r1, [pc, #12]	@ (800f7d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f7c6:	5ccb      	ldrb	r3, [r1, r3]
 800f7c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	bd80      	pop	{r7, pc}
 800f7d0:	40023800 	.word	0x40023800
 800f7d4:	08019ea4 	.word	0x08019ea4

0800f7d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b083      	sub	sp, #12
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	220f      	movs	r2, #15
 800f7e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f7e8:	4b12      	ldr	r3, [pc, #72]	@ (800f834 <HAL_RCC_GetClockConfig+0x5c>)
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	f003 0203 	and.w	r2, r3, #3
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800f7f4:	4b0f      	ldr	r3, [pc, #60]	@ (800f834 <HAL_RCC_GetClockConfig+0x5c>)
 800f7f6:	689b      	ldr	r3, [r3, #8]
 800f7f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800f800:	4b0c      	ldr	r3, [pc, #48]	@ (800f834 <HAL_RCC_GetClockConfig+0x5c>)
 800f802:	689b      	ldr	r3, [r3, #8]
 800f804:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800f80c:	4b09      	ldr	r3, [pc, #36]	@ (800f834 <HAL_RCC_GetClockConfig+0x5c>)
 800f80e:	689b      	ldr	r3, [r3, #8]
 800f810:	08db      	lsrs	r3, r3, #3
 800f812:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f81a:	4b07      	ldr	r3, [pc, #28]	@ (800f838 <HAL_RCC_GetClockConfig+0x60>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	f003 020f 	and.w	r2, r3, #15
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	601a      	str	r2, [r3, #0]
}
 800f826:	bf00      	nop
 800f828:	370c      	adds	r7, #12
 800f82a:	46bd      	mov	sp, r7
 800f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f830:	4770      	bx	lr
 800f832:	bf00      	nop
 800f834:	40023800 	.word	0x40023800
 800f838:	40023c00 	.word	0x40023c00

0800f83c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f83c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f840:	b0a6      	sub	sp, #152	@ 0x98
 800f842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800f844:	2300      	movs	r3, #0
 800f846:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800f84a:	2300      	movs	r3, #0
 800f84c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800f850:	2300      	movs	r3, #0
 800f852:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800f856:	2300      	movs	r3, #0
 800f858:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800f85c:	2300      	movs	r3, #0
 800f85e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f862:	4bc8      	ldr	r3, [pc, #800]	@ (800fb84 <HAL_RCC_GetSysClockFreq+0x348>)
 800f864:	689b      	ldr	r3, [r3, #8]
 800f866:	f003 030c 	and.w	r3, r3, #12
 800f86a:	2b0c      	cmp	r3, #12
 800f86c:	f200 817e 	bhi.w	800fb6c <HAL_RCC_GetSysClockFreq+0x330>
 800f870:	a201      	add	r2, pc, #4	@ (adr r2, 800f878 <HAL_RCC_GetSysClockFreq+0x3c>)
 800f872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f876:	bf00      	nop
 800f878:	0800f8ad 	.word	0x0800f8ad
 800f87c:	0800fb6d 	.word	0x0800fb6d
 800f880:	0800fb6d 	.word	0x0800fb6d
 800f884:	0800fb6d 	.word	0x0800fb6d
 800f888:	0800f8b5 	.word	0x0800f8b5
 800f88c:	0800fb6d 	.word	0x0800fb6d
 800f890:	0800fb6d 	.word	0x0800fb6d
 800f894:	0800fb6d 	.word	0x0800fb6d
 800f898:	0800f8bd 	.word	0x0800f8bd
 800f89c:	0800fb6d 	.word	0x0800fb6d
 800f8a0:	0800fb6d 	.word	0x0800fb6d
 800f8a4:	0800fb6d 	.word	0x0800fb6d
 800f8a8:	0800fa27 	.word	0x0800fa27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f8ac:	4bb6      	ldr	r3, [pc, #728]	@ (800fb88 <HAL_RCC_GetSysClockFreq+0x34c>)
 800f8ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800f8b2:	e15f      	b.n	800fb74 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f8b4:	4bb5      	ldr	r3, [pc, #724]	@ (800fb8c <HAL_RCC_GetSysClockFreq+0x350>)
 800f8b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800f8ba:	e15b      	b.n	800fb74 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f8bc:	4bb1      	ldr	r3, [pc, #708]	@ (800fb84 <HAL_RCC_GetSysClockFreq+0x348>)
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f8c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f8c8:	4bae      	ldr	r3, [pc, #696]	@ (800fb84 <HAL_RCC_GetSysClockFreq+0x348>)
 800f8ca:	685b      	ldr	r3, [r3, #4]
 800f8cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d031      	beq.n	800f938 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f8d4:	4bab      	ldr	r3, [pc, #684]	@ (800fb84 <HAL_RCC_GetSysClockFreq+0x348>)
 800f8d6:	685b      	ldr	r3, [r3, #4]
 800f8d8:	099b      	lsrs	r3, r3, #6
 800f8da:	2200      	movs	r2, #0
 800f8dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f8de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f8e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f8e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8e6:	663b      	str	r3, [r7, #96]	@ 0x60
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	667b      	str	r3, [r7, #100]	@ 0x64
 800f8ec:	4ba7      	ldr	r3, [pc, #668]	@ (800fb8c <HAL_RCC_GetSysClockFreq+0x350>)
 800f8ee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800f8f2:	462a      	mov	r2, r5
 800f8f4:	fb03 f202 	mul.w	r2, r3, r2
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	4621      	mov	r1, r4
 800f8fc:	fb01 f303 	mul.w	r3, r1, r3
 800f900:	4413      	add	r3, r2
 800f902:	4aa2      	ldr	r2, [pc, #648]	@ (800fb8c <HAL_RCC_GetSysClockFreq+0x350>)
 800f904:	4621      	mov	r1, r4
 800f906:	fba1 1202 	umull	r1, r2, r1, r2
 800f90a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800f90c:	460a      	mov	r2, r1
 800f90e:	67ba      	str	r2, [r7, #120]	@ 0x78
 800f910:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f912:	4413      	add	r3, r2
 800f914:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f916:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f91a:	2200      	movs	r2, #0
 800f91c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f91e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800f920:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800f924:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f928:	f7f9 f98e 	bl	8008c48 <__aeabi_uldivmod>
 800f92c:	4602      	mov	r2, r0
 800f92e:	460b      	mov	r3, r1
 800f930:	4613      	mov	r3, r2
 800f932:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f936:	e064      	b.n	800fa02 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f938:	4b92      	ldr	r3, [pc, #584]	@ (800fb84 <HAL_RCC_GetSysClockFreq+0x348>)
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	099b      	lsrs	r3, r3, #6
 800f93e:	2200      	movs	r2, #0
 800f940:	653b      	str	r3, [r7, #80]	@ 0x50
 800f942:	657a      	str	r2, [r7, #84]	@ 0x54
 800f944:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f94a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f94c:	2300      	movs	r3, #0
 800f94e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f950:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800f954:	4622      	mov	r2, r4
 800f956:	462b      	mov	r3, r5
 800f958:	f04f 0000 	mov.w	r0, #0
 800f95c:	f04f 0100 	mov.w	r1, #0
 800f960:	0159      	lsls	r1, r3, #5
 800f962:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f966:	0150      	lsls	r0, r2, #5
 800f968:	4602      	mov	r2, r0
 800f96a:	460b      	mov	r3, r1
 800f96c:	4621      	mov	r1, r4
 800f96e:	1a51      	subs	r1, r2, r1
 800f970:	6139      	str	r1, [r7, #16]
 800f972:	4629      	mov	r1, r5
 800f974:	eb63 0301 	sbc.w	r3, r3, r1
 800f978:	617b      	str	r3, [r7, #20]
 800f97a:	f04f 0200 	mov.w	r2, #0
 800f97e:	f04f 0300 	mov.w	r3, #0
 800f982:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f986:	4659      	mov	r1, fp
 800f988:	018b      	lsls	r3, r1, #6
 800f98a:	4651      	mov	r1, sl
 800f98c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800f990:	4651      	mov	r1, sl
 800f992:	018a      	lsls	r2, r1, #6
 800f994:	4651      	mov	r1, sl
 800f996:	ebb2 0801 	subs.w	r8, r2, r1
 800f99a:	4659      	mov	r1, fp
 800f99c:	eb63 0901 	sbc.w	r9, r3, r1
 800f9a0:	f04f 0200 	mov.w	r2, #0
 800f9a4:	f04f 0300 	mov.w	r3, #0
 800f9a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f9ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f9b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f9b4:	4690      	mov	r8, r2
 800f9b6:	4699      	mov	r9, r3
 800f9b8:	4623      	mov	r3, r4
 800f9ba:	eb18 0303 	adds.w	r3, r8, r3
 800f9be:	60bb      	str	r3, [r7, #8]
 800f9c0:	462b      	mov	r3, r5
 800f9c2:	eb49 0303 	adc.w	r3, r9, r3
 800f9c6:	60fb      	str	r3, [r7, #12]
 800f9c8:	f04f 0200 	mov.w	r2, #0
 800f9cc:	f04f 0300 	mov.w	r3, #0
 800f9d0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800f9d4:	4629      	mov	r1, r5
 800f9d6:	028b      	lsls	r3, r1, #10
 800f9d8:	4621      	mov	r1, r4
 800f9da:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f9de:	4621      	mov	r1, r4
 800f9e0:	028a      	lsls	r2, r1, #10
 800f9e2:	4610      	mov	r0, r2
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800f9ee:	647a      	str	r2, [r7, #68]	@ 0x44
 800f9f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800f9f4:	f7f9 f928 	bl	8008c48 <__aeabi_uldivmod>
 800f9f8:	4602      	mov	r2, r0
 800f9fa:	460b      	mov	r3, r1
 800f9fc:	4613      	mov	r3, r2
 800f9fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800fa02:	4b60      	ldr	r3, [pc, #384]	@ (800fb84 <HAL_RCC_GetSysClockFreq+0x348>)
 800fa04:	685b      	ldr	r3, [r3, #4]
 800fa06:	0c1b      	lsrs	r3, r3, #16
 800fa08:	f003 0303 	and.w	r3, r3, #3
 800fa0c:	3301      	adds	r3, #1
 800fa0e:	005b      	lsls	r3, r3, #1
 800fa10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800fa14:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fa18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fa1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800fa24:	e0a6      	b.n	800fb74 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800fa26:	4b57      	ldr	r3, [pc, #348]	@ (800fb84 <HAL_RCC_GetSysClockFreq+0x348>)
 800fa28:	685b      	ldr	r3, [r3, #4]
 800fa2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fa2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800fa32:	4b54      	ldr	r3, [pc, #336]	@ (800fb84 <HAL_RCC_GetSysClockFreq+0x348>)
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d02a      	beq.n	800fa94 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fa3e:	4b51      	ldr	r3, [pc, #324]	@ (800fb84 <HAL_RCC_GetSysClockFreq+0x348>)
 800fa40:	685b      	ldr	r3, [r3, #4]
 800fa42:	099b      	lsrs	r3, r3, #6
 800fa44:	2200      	movs	r2, #0
 800fa46:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fa48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800fa4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800fa50:	2100      	movs	r1, #0
 800fa52:	4b4e      	ldr	r3, [pc, #312]	@ (800fb8c <HAL_RCC_GetSysClockFreq+0x350>)
 800fa54:	fb03 f201 	mul.w	r2, r3, r1
 800fa58:	2300      	movs	r3, #0
 800fa5a:	fb00 f303 	mul.w	r3, r0, r3
 800fa5e:	4413      	add	r3, r2
 800fa60:	4a4a      	ldr	r2, [pc, #296]	@ (800fb8c <HAL_RCC_GetSysClockFreq+0x350>)
 800fa62:	fba0 1202 	umull	r1, r2, r0, r2
 800fa66:	677a      	str	r2, [r7, #116]	@ 0x74
 800fa68:	460a      	mov	r2, r1
 800fa6a:	673a      	str	r2, [r7, #112]	@ 0x70
 800fa6c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800fa6e:	4413      	add	r3, r2
 800fa70:	677b      	str	r3, [r7, #116]	@ 0x74
 800fa72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fa76:	2200      	movs	r2, #0
 800fa78:	633b      	str	r3, [r7, #48]	@ 0x30
 800fa7a:	637a      	str	r2, [r7, #52]	@ 0x34
 800fa7c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800fa80:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800fa84:	f7f9 f8e0 	bl	8008c48 <__aeabi_uldivmod>
 800fa88:	4602      	mov	r2, r0
 800fa8a:	460b      	mov	r3, r1
 800fa8c:	4613      	mov	r3, r2
 800fa8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fa92:	e05b      	b.n	800fb4c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fa94:	4b3b      	ldr	r3, [pc, #236]	@ (800fb84 <HAL_RCC_GetSysClockFreq+0x348>)
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	099b      	lsrs	r3, r3, #6
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fa9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800faa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800faa6:	623b      	str	r3, [r7, #32]
 800faa8:	2300      	movs	r3, #0
 800faaa:	627b      	str	r3, [r7, #36]	@ 0x24
 800faac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800fab0:	4642      	mov	r2, r8
 800fab2:	464b      	mov	r3, r9
 800fab4:	f04f 0000 	mov.w	r0, #0
 800fab8:	f04f 0100 	mov.w	r1, #0
 800fabc:	0159      	lsls	r1, r3, #5
 800fabe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800fac2:	0150      	lsls	r0, r2, #5
 800fac4:	4602      	mov	r2, r0
 800fac6:	460b      	mov	r3, r1
 800fac8:	4641      	mov	r1, r8
 800faca:	ebb2 0a01 	subs.w	sl, r2, r1
 800face:	4649      	mov	r1, r9
 800fad0:	eb63 0b01 	sbc.w	fp, r3, r1
 800fad4:	f04f 0200 	mov.w	r2, #0
 800fad8:	f04f 0300 	mov.w	r3, #0
 800fadc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800fae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800fae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800fae8:	ebb2 040a 	subs.w	r4, r2, sl
 800faec:	eb63 050b 	sbc.w	r5, r3, fp
 800faf0:	f04f 0200 	mov.w	r2, #0
 800faf4:	f04f 0300 	mov.w	r3, #0
 800faf8:	00eb      	lsls	r3, r5, #3
 800fafa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800fafe:	00e2      	lsls	r2, r4, #3
 800fb00:	4614      	mov	r4, r2
 800fb02:	461d      	mov	r5, r3
 800fb04:	4643      	mov	r3, r8
 800fb06:	18e3      	adds	r3, r4, r3
 800fb08:	603b      	str	r3, [r7, #0]
 800fb0a:	464b      	mov	r3, r9
 800fb0c:	eb45 0303 	adc.w	r3, r5, r3
 800fb10:	607b      	str	r3, [r7, #4]
 800fb12:	f04f 0200 	mov.w	r2, #0
 800fb16:	f04f 0300 	mov.w	r3, #0
 800fb1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800fb1e:	4629      	mov	r1, r5
 800fb20:	028b      	lsls	r3, r1, #10
 800fb22:	4621      	mov	r1, r4
 800fb24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800fb28:	4621      	mov	r1, r4
 800fb2a:	028a      	lsls	r2, r1, #10
 800fb2c:	4610      	mov	r0, r2
 800fb2e:	4619      	mov	r1, r3
 800fb30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fb34:	2200      	movs	r2, #0
 800fb36:	61bb      	str	r3, [r7, #24]
 800fb38:	61fa      	str	r2, [r7, #28]
 800fb3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fb3e:	f7f9 f883 	bl	8008c48 <__aeabi_uldivmod>
 800fb42:	4602      	mov	r2, r0
 800fb44:	460b      	mov	r3, r1
 800fb46:	4613      	mov	r3, r2
 800fb48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800fb4c:	4b0d      	ldr	r3, [pc, #52]	@ (800fb84 <HAL_RCC_GetSysClockFreq+0x348>)
 800fb4e:	685b      	ldr	r3, [r3, #4]
 800fb50:	0f1b      	lsrs	r3, r3, #28
 800fb52:	f003 0307 	and.w	r3, r3, #7
 800fb56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800fb5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fb5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fb62:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800fb6a:	e003      	b.n	800fb74 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800fb6c:	4b06      	ldr	r3, [pc, #24]	@ (800fb88 <HAL_RCC_GetSysClockFreq+0x34c>)
 800fb6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800fb72:	bf00      	nop
    }
  }
  return sysclockfreq;
 800fb74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3798      	adds	r7, #152	@ 0x98
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fb82:	bf00      	nop
 800fb84:	40023800 	.word	0x40023800
 800fb88:	00f42400 	.word	0x00f42400
 800fb8c:	017d7840 	.word	0x017d7840

0800fb90 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b086      	sub	sp, #24
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d101      	bne.n	800fba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800fb9e:	2301      	movs	r3, #1
 800fba0:	e28d      	b.n	80100be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	f003 0301 	and.w	r3, r3, #1
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	f000 8083 	beq.w	800fcb6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800fbb0:	4b94      	ldr	r3, [pc, #592]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fbb2:	689b      	ldr	r3, [r3, #8]
 800fbb4:	f003 030c 	and.w	r3, r3, #12
 800fbb8:	2b04      	cmp	r3, #4
 800fbba:	d019      	beq.n	800fbf0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800fbbc:	4b91      	ldr	r3, [pc, #580]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fbbe:	689b      	ldr	r3, [r3, #8]
 800fbc0:	f003 030c 	and.w	r3, r3, #12
        || \
 800fbc4:	2b08      	cmp	r3, #8
 800fbc6:	d106      	bne.n	800fbd6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800fbc8:	4b8e      	ldr	r3, [pc, #568]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fbca:	685b      	ldr	r3, [r3, #4]
 800fbcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fbd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fbd4:	d00c      	beq.n	800fbf0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800fbd6:	4b8b      	ldr	r3, [pc, #556]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fbd8:	689b      	ldr	r3, [r3, #8]
 800fbda:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800fbde:	2b0c      	cmp	r3, #12
 800fbe0:	d112      	bne.n	800fc08 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800fbe2:	4b88      	ldr	r3, [pc, #544]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fbe4:	685b      	ldr	r3, [r3, #4]
 800fbe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fbea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fbee:	d10b      	bne.n	800fc08 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fbf0:	4b84      	ldr	r3, [pc, #528]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d05b      	beq.n	800fcb4 <HAL_RCC_OscConfig+0x124>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	685b      	ldr	r3, [r3, #4]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d157      	bne.n	800fcb4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800fc04:	2301      	movs	r3, #1
 800fc06:	e25a      	b.n	80100be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	685b      	ldr	r3, [r3, #4]
 800fc0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fc10:	d106      	bne.n	800fc20 <HAL_RCC_OscConfig+0x90>
 800fc12:	4b7c      	ldr	r3, [pc, #496]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	4a7b      	ldr	r2, [pc, #492]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fc18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fc1c:	6013      	str	r3, [r2, #0]
 800fc1e:	e01d      	b.n	800fc5c <HAL_RCC_OscConfig+0xcc>
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	685b      	ldr	r3, [r3, #4]
 800fc24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800fc28:	d10c      	bne.n	800fc44 <HAL_RCC_OscConfig+0xb4>
 800fc2a:	4b76      	ldr	r3, [pc, #472]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	4a75      	ldr	r2, [pc, #468]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fc30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800fc34:	6013      	str	r3, [r2, #0]
 800fc36:	4b73      	ldr	r3, [pc, #460]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	4a72      	ldr	r2, [pc, #456]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fc3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fc40:	6013      	str	r3, [r2, #0]
 800fc42:	e00b      	b.n	800fc5c <HAL_RCC_OscConfig+0xcc>
 800fc44:	4b6f      	ldr	r3, [pc, #444]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	4a6e      	ldr	r2, [pc, #440]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fc4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fc4e:	6013      	str	r3, [r2, #0]
 800fc50:	4b6c      	ldr	r3, [pc, #432]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	4a6b      	ldr	r2, [pc, #428]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fc56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fc5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d013      	beq.n	800fc8c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fc64:	f7ff f8b2 	bl	800edcc <HAL_GetTick>
 800fc68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fc6a:	e008      	b.n	800fc7e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fc6c:	f7ff f8ae 	bl	800edcc <HAL_GetTick>
 800fc70:	4602      	mov	r2, r0
 800fc72:	693b      	ldr	r3, [r7, #16]
 800fc74:	1ad3      	subs	r3, r2, r3
 800fc76:	2b64      	cmp	r3, #100	@ 0x64
 800fc78:	d901      	bls.n	800fc7e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800fc7a:	2303      	movs	r3, #3
 800fc7c:	e21f      	b.n	80100be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fc7e:	4b61      	ldr	r3, [pc, #388]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d0f0      	beq.n	800fc6c <HAL_RCC_OscConfig+0xdc>
 800fc8a:	e014      	b.n	800fcb6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fc8c:	f7ff f89e 	bl	800edcc <HAL_GetTick>
 800fc90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fc92:	e008      	b.n	800fca6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fc94:	f7ff f89a 	bl	800edcc <HAL_GetTick>
 800fc98:	4602      	mov	r2, r0
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	1ad3      	subs	r3, r2, r3
 800fc9e:	2b64      	cmp	r3, #100	@ 0x64
 800fca0:	d901      	bls.n	800fca6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800fca2:	2303      	movs	r3, #3
 800fca4:	e20b      	b.n	80100be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fca6:	4b57      	ldr	r3, [pc, #348]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d1f0      	bne.n	800fc94 <HAL_RCC_OscConfig+0x104>
 800fcb2:	e000      	b.n	800fcb6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fcb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f003 0302 	and.w	r3, r3, #2
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d06f      	beq.n	800fda2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800fcc2:	4b50      	ldr	r3, [pc, #320]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fcc4:	689b      	ldr	r3, [r3, #8]
 800fcc6:	f003 030c 	and.w	r3, r3, #12
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d017      	beq.n	800fcfe <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800fcce:	4b4d      	ldr	r3, [pc, #308]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fcd0:	689b      	ldr	r3, [r3, #8]
 800fcd2:	f003 030c 	and.w	r3, r3, #12
        || \
 800fcd6:	2b08      	cmp	r3, #8
 800fcd8:	d105      	bne.n	800fce6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800fcda:	4b4a      	ldr	r3, [pc, #296]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d00b      	beq.n	800fcfe <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800fce6:	4b47      	ldr	r3, [pc, #284]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fce8:	689b      	ldr	r3, [r3, #8]
 800fcea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800fcee:	2b0c      	cmp	r3, #12
 800fcf0:	d11c      	bne.n	800fd2c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800fcf2:	4b44      	ldr	r3, [pc, #272]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fcf4:	685b      	ldr	r3, [r3, #4]
 800fcf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d116      	bne.n	800fd2c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fcfe:	4b41      	ldr	r3, [pc, #260]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	f003 0302 	and.w	r3, r3, #2
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d005      	beq.n	800fd16 <HAL_RCC_OscConfig+0x186>
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	68db      	ldr	r3, [r3, #12]
 800fd0e:	2b01      	cmp	r3, #1
 800fd10:	d001      	beq.n	800fd16 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800fd12:	2301      	movs	r3, #1
 800fd14:	e1d3      	b.n	80100be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fd16:	4b3b      	ldr	r3, [pc, #236]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	691b      	ldr	r3, [r3, #16]
 800fd22:	00db      	lsls	r3, r3, #3
 800fd24:	4937      	ldr	r1, [pc, #220]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fd26:	4313      	orrs	r3, r2
 800fd28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fd2a:	e03a      	b.n	800fda2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	68db      	ldr	r3, [r3, #12]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d020      	beq.n	800fd76 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fd34:	4b34      	ldr	r3, [pc, #208]	@ (800fe08 <HAL_RCC_OscConfig+0x278>)
 800fd36:	2201      	movs	r2, #1
 800fd38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fd3a:	f7ff f847 	bl	800edcc <HAL_GetTick>
 800fd3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fd40:	e008      	b.n	800fd54 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fd42:	f7ff f843 	bl	800edcc <HAL_GetTick>
 800fd46:	4602      	mov	r2, r0
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	1ad3      	subs	r3, r2, r3
 800fd4c:	2b02      	cmp	r3, #2
 800fd4e:	d901      	bls.n	800fd54 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800fd50:	2303      	movs	r3, #3
 800fd52:	e1b4      	b.n	80100be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fd54:	4b2b      	ldr	r3, [pc, #172]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	f003 0302 	and.w	r3, r3, #2
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d0f0      	beq.n	800fd42 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fd60:	4b28      	ldr	r3, [pc, #160]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	691b      	ldr	r3, [r3, #16]
 800fd6c:	00db      	lsls	r3, r3, #3
 800fd6e:	4925      	ldr	r1, [pc, #148]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fd70:	4313      	orrs	r3, r2
 800fd72:	600b      	str	r3, [r1, #0]
 800fd74:	e015      	b.n	800fda2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fd76:	4b24      	ldr	r3, [pc, #144]	@ (800fe08 <HAL_RCC_OscConfig+0x278>)
 800fd78:	2200      	movs	r2, #0
 800fd7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fd7c:	f7ff f826 	bl	800edcc <HAL_GetTick>
 800fd80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fd82:	e008      	b.n	800fd96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fd84:	f7ff f822 	bl	800edcc <HAL_GetTick>
 800fd88:	4602      	mov	r2, r0
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	1ad3      	subs	r3, r2, r3
 800fd8e:	2b02      	cmp	r3, #2
 800fd90:	d901      	bls.n	800fd96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800fd92:	2303      	movs	r3, #3
 800fd94:	e193      	b.n	80100be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fd96:	4b1b      	ldr	r3, [pc, #108]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f003 0302 	and.w	r3, r3, #2
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d1f0      	bne.n	800fd84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f003 0308 	and.w	r3, r3, #8
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d036      	beq.n	800fe1c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	695b      	ldr	r3, [r3, #20]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d016      	beq.n	800fde4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fdb6:	4b15      	ldr	r3, [pc, #84]	@ (800fe0c <HAL_RCC_OscConfig+0x27c>)
 800fdb8:	2201      	movs	r2, #1
 800fdba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fdbc:	f7ff f806 	bl	800edcc <HAL_GetTick>
 800fdc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fdc2:	e008      	b.n	800fdd6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fdc4:	f7ff f802 	bl	800edcc <HAL_GetTick>
 800fdc8:	4602      	mov	r2, r0
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	1ad3      	subs	r3, r2, r3
 800fdce:	2b02      	cmp	r3, #2
 800fdd0:	d901      	bls.n	800fdd6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800fdd2:	2303      	movs	r3, #3
 800fdd4:	e173      	b.n	80100be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fdd6:	4b0b      	ldr	r3, [pc, #44]	@ (800fe04 <HAL_RCC_OscConfig+0x274>)
 800fdd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fdda:	f003 0302 	and.w	r3, r3, #2
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d0f0      	beq.n	800fdc4 <HAL_RCC_OscConfig+0x234>
 800fde2:	e01b      	b.n	800fe1c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fde4:	4b09      	ldr	r3, [pc, #36]	@ (800fe0c <HAL_RCC_OscConfig+0x27c>)
 800fde6:	2200      	movs	r2, #0
 800fde8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fdea:	f7fe ffef 	bl	800edcc <HAL_GetTick>
 800fdee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fdf0:	e00e      	b.n	800fe10 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fdf2:	f7fe ffeb 	bl	800edcc <HAL_GetTick>
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	1ad3      	subs	r3, r2, r3
 800fdfc:	2b02      	cmp	r3, #2
 800fdfe:	d907      	bls.n	800fe10 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800fe00:	2303      	movs	r3, #3
 800fe02:	e15c      	b.n	80100be <HAL_RCC_OscConfig+0x52e>
 800fe04:	40023800 	.word	0x40023800
 800fe08:	42470000 	.word	0x42470000
 800fe0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fe10:	4b8a      	ldr	r3, [pc, #552]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800fe12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe14:	f003 0302 	and.w	r3, r3, #2
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d1ea      	bne.n	800fdf2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	f003 0304 	and.w	r3, r3, #4
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	f000 8097 	beq.w	800ff58 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fe2e:	4b83      	ldr	r3, [pc, #524]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800fe30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d10f      	bne.n	800fe5a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	60bb      	str	r3, [r7, #8]
 800fe3e:	4b7f      	ldr	r3, [pc, #508]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800fe40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe42:	4a7e      	ldr	r2, [pc, #504]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800fe44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fe48:	6413      	str	r3, [r2, #64]	@ 0x40
 800fe4a:	4b7c      	ldr	r3, [pc, #496]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800fe4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fe52:	60bb      	str	r3, [r7, #8]
 800fe54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fe56:	2301      	movs	r3, #1
 800fe58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fe5a:	4b79      	ldr	r3, [pc, #484]	@ (8010040 <HAL_RCC_OscConfig+0x4b0>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d118      	bne.n	800fe98 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fe66:	4b76      	ldr	r3, [pc, #472]	@ (8010040 <HAL_RCC_OscConfig+0x4b0>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	4a75      	ldr	r2, [pc, #468]	@ (8010040 <HAL_RCC_OscConfig+0x4b0>)
 800fe6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fe70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fe72:	f7fe ffab 	bl	800edcc <HAL_GetTick>
 800fe76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fe78:	e008      	b.n	800fe8c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fe7a:	f7fe ffa7 	bl	800edcc <HAL_GetTick>
 800fe7e:	4602      	mov	r2, r0
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	1ad3      	subs	r3, r2, r3
 800fe84:	2b02      	cmp	r3, #2
 800fe86:	d901      	bls.n	800fe8c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800fe88:	2303      	movs	r3, #3
 800fe8a:	e118      	b.n	80100be <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fe8c:	4b6c      	ldr	r3, [pc, #432]	@ (8010040 <HAL_RCC_OscConfig+0x4b0>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d0f0      	beq.n	800fe7a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	689b      	ldr	r3, [r3, #8]
 800fe9c:	2b01      	cmp	r3, #1
 800fe9e:	d106      	bne.n	800feae <HAL_RCC_OscConfig+0x31e>
 800fea0:	4b66      	ldr	r3, [pc, #408]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800fea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fea4:	4a65      	ldr	r2, [pc, #404]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800fea6:	f043 0301 	orr.w	r3, r3, #1
 800feaa:	6713      	str	r3, [r2, #112]	@ 0x70
 800feac:	e01c      	b.n	800fee8 <HAL_RCC_OscConfig+0x358>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	689b      	ldr	r3, [r3, #8]
 800feb2:	2b05      	cmp	r3, #5
 800feb4:	d10c      	bne.n	800fed0 <HAL_RCC_OscConfig+0x340>
 800feb6:	4b61      	ldr	r3, [pc, #388]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800feb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800feba:	4a60      	ldr	r2, [pc, #384]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800febc:	f043 0304 	orr.w	r3, r3, #4
 800fec0:	6713      	str	r3, [r2, #112]	@ 0x70
 800fec2:	4b5e      	ldr	r3, [pc, #376]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800fec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fec6:	4a5d      	ldr	r2, [pc, #372]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800fec8:	f043 0301 	orr.w	r3, r3, #1
 800fecc:	6713      	str	r3, [r2, #112]	@ 0x70
 800fece:	e00b      	b.n	800fee8 <HAL_RCC_OscConfig+0x358>
 800fed0:	4b5a      	ldr	r3, [pc, #360]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800fed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fed4:	4a59      	ldr	r2, [pc, #356]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800fed6:	f023 0301 	bic.w	r3, r3, #1
 800feda:	6713      	str	r3, [r2, #112]	@ 0x70
 800fedc:	4b57      	ldr	r3, [pc, #348]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800fede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fee0:	4a56      	ldr	r2, [pc, #344]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800fee2:	f023 0304 	bic.w	r3, r3, #4
 800fee6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	689b      	ldr	r3, [r3, #8]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d015      	beq.n	800ff1c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fef0:	f7fe ff6c 	bl	800edcc <HAL_GetTick>
 800fef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fef6:	e00a      	b.n	800ff0e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fef8:	f7fe ff68 	bl	800edcc <HAL_GetTick>
 800fefc:	4602      	mov	r2, r0
 800fefe:	693b      	ldr	r3, [r7, #16]
 800ff00:	1ad3      	subs	r3, r2, r3
 800ff02:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff06:	4293      	cmp	r3, r2
 800ff08:	d901      	bls.n	800ff0e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800ff0a:	2303      	movs	r3, #3
 800ff0c:	e0d7      	b.n	80100be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ff0e:	4b4b      	ldr	r3, [pc, #300]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800ff10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff12:	f003 0302 	and.w	r3, r3, #2
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d0ee      	beq.n	800fef8 <HAL_RCC_OscConfig+0x368>
 800ff1a:	e014      	b.n	800ff46 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ff1c:	f7fe ff56 	bl	800edcc <HAL_GetTick>
 800ff20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ff22:	e00a      	b.n	800ff3a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ff24:	f7fe ff52 	bl	800edcc <HAL_GetTick>
 800ff28:	4602      	mov	r2, r0
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	1ad3      	subs	r3, r2, r3
 800ff2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d901      	bls.n	800ff3a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800ff36:	2303      	movs	r3, #3
 800ff38:	e0c1      	b.n	80100be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ff3a:	4b40      	ldr	r3, [pc, #256]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800ff3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff3e:	f003 0302 	and.w	r3, r3, #2
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d1ee      	bne.n	800ff24 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ff46:	7dfb      	ldrb	r3, [r7, #23]
 800ff48:	2b01      	cmp	r3, #1
 800ff4a:	d105      	bne.n	800ff58 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ff4c:	4b3b      	ldr	r3, [pc, #236]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800ff4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff50:	4a3a      	ldr	r2, [pc, #232]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800ff52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ff56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	699b      	ldr	r3, [r3, #24]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	f000 80ad 	beq.w	80100bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ff62:	4b36      	ldr	r3, [pc, #216]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800ff64:	689b      	ldr	r3, [r3, #8]
 800ff66:	f003 030c 	and.w	r3, r3, #12
 800ff6a:	2b08      	cmp	r3, #8
 800ff6c:	d060      	beq.n	8010030 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	699b      	ldr	r3, [r3, #24]
 800ff72:	2b02      	cmp	r3, #2
 800ff74:	d145      	bne.n	8010002 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ff76:	4b33      	ldr	r3, [pc, #204]	@ (8010044 <HAL_RCC_OscConfig+0x4b4>)
 800ff78:	2200      	movs	r2, #0
 800ff7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ff7c:	f7fe ff26 	bl	800edcc <HAL_GetTick>
 800ff80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ff82:	e008      	b.n	800ff96 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ff84:	f7fe ff22 	bl	800edcc <HAL_GetTick>
 800ff88:	4602      	mov	r2, r0
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	1ad3      	subs	r3, r2, r3
 800ff8e:	2b02      	cmp	r3, #2
 800ff90:	d901      	bls.n	800ff96 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800ff92:	2303      	movs	r3, #3
 800ff94:	e093      	b.n	80100be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ff96:	4b29      	ldr	r3, [pc, #164]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d1f0      	bne.n	800ff84 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	69da      	ldr	r2, [r3, #28]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6a1b      	ldr	r3, [r3, #32]
 800ffaa:	431a      	orrs	r2, r3
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffb0:	019b      	lsls	r3, r3, #6
 800ffb2:	431a      	orrs	r2, r3
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffb8:	085b      	lsrs	r3, r3, #1
 800ffba:	3b01      	subs	r3, #1
 800ffbc:	041b      	lsls	r3, r3, #16
 800ffbe:	431a      	orrs	r2, r3
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffc4:	061b      	lsls	r3, r3, #24
 800ffc6:	431a      	orrs	r2, r3
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffcc:	071b      	lsls	r3, r3, #28
 800ffce:	491b      	ldr	r1, [pc, #108]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800ffd0:	4313      	orrs	r3, r2
 800ffd2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ffd4:	4b1b      	ldr	r3, [pc, #108]	@ (8010044 <HAL_RCC_OscConfig+0x4b4>)
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ffda:	f7fe fef7 	bl	800edcc <HAL_GetTick>
 800ffde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ffe0:	e008      	b.n	800fff4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ffe2:	f7fe fef3 	bl	800edcc <HAL_GetTick>
 800ffe6:	4602      	mov	r2, r0
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	1ad3      	subs	r3, r2, r3
 800ffec:	2b02      	cmp	r3, #2
 800ffee:	d901      	bls.n	800fff4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800fff0:	2303      	movs	r3, #3
 800fff2:	e064      	b.n	80100be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fff4:	4b11      	ldr	r3, [pc, #68]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d0f0      	beq.n	800ffe2 <HAL_RCC_OscConfig+0x452>
 8010000:	e05c      	b.n	80100bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010002:	4b10      	ldr	r3, [pc, #64]	@ (8010044 <HAL_RCC_OscConfig+0x4b4>)
 8010004:	2200      	movs	r2, #0
 8010006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010008:	f7fe fee0 	bl	800edcc <HAL_GetTick>
 801000c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801000e:	e008      	b.n	8010022 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010010:	f7fe fedc 	bl	800edcc <HAL_GetTick>
 8010014:	4602      	mov	r2, r0
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	1ad3      	subs	r3, r2, r3
 801001a:	2b02      	cmp	r3, #2
 801001c:	d901      	bls.n	8010022 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 801001e:	2303      	movs	r3, #3
 8010020:	e04d      	b.n	80100be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010022:	4b06      	ldr	r3, [pc, #24]	@ (801003c <HAL_RCC_OscConfig+0x4ac>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801002a:	2b00      	cmp	r3, #0
 801002c:	d1f0      	bne.n	8010010 <HAL_RCC_OscConfig+0x480>
 801002e:	e045      	b.n	80100bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	699b      	ldr	r3, [r3, #24]
 8010034:	2b01      	cmp	r3, #1
 8010036:	d107      	bne.n	8010048 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8010038:	2301      	movs	r3, #1
 801003a:	e040      	b.n	80100be <HAL_RCC_OscConfig+0x52e>
 801003c:	40023800 	.word	0x40023800
 8010040:	40007000 	.word	0x40007000
 8010044:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8010048:	4b1f      	ldr	r3, [pc, #124]	@ (80100c8 <HAL_RCC_OscConfig+0x538>)
 801004a:	685b      	ldr	r3, [r3, #4]
 801004c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	699b      	ldr	r3, [r3, #24]
 8010052:	2b01      	cmp	r3, #1
 8010054:	d030      	beq.n	80100b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010060:	429a      	cmp	r2, r3
 8010062:	d129      	bne.n	80100b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801006e:	429a      	cmp	r2, r3
 8010070:	d122      	bne.n	80100b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010072:	68fa      	ldr	r2, [r7, #12]
 8010074:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8010078:	4013      	ands	r3, r2
 801007a:	687a      	ldr	r2, [r7, #4]
 801007c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801007e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010080:	4293      	cmp	r3, r2
 8010082:	d119      	bne.n	80100b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801008e:	085b      	lsrs	r3, r3, #1
 8010090:	3b01      	subs	r3, #1
 8010092:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010094:	429a      	cmp	r2, r3
 8010096:	d10f      	bne.n	80100b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80100a4:	429a      	cmp	r2, r3
 80100a6:	d107      	bne.n	80100b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d001      	beq.n	80100bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80100b8:	2301      	movs	r3, #1
 80100ba:	e000      	b.n	80100be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80100bc:	2300      	movs	r3, #0
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3718      	adds	r7, #24
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}
 80100c6:	bf00      	nop
 80100c8:	40023800 	.word	0x40023800

080100cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b082      	sub	sp, #8
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d101      	bne.n	80100de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80100da:	2301      	movs	r3, #1
 80100dc:	e07b      	b.n	80101d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d108      	bne.n	80100f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	685b      	ldr	r3, [r3, #4]
 80100ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80100ee:	d009      	beq.n	8010104 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2200      	movs	r2, #0
 80100f4:	61da      	str	r2, [r3, #28]
 80100f6:	e005      	b.n	8010104 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2200      	movs	r2, #0
 80100fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2200      	movs	r2, #0
 8010102:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2200      	movs	r2, #0
 8010108:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010110:	b2db      	uxtb	r3, r3
 8010112:	2b00      	cmp	r3, #0
 8010114:	d106      	bne.n	8010124 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	2200      	movs	r2, #0
 801011a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	f7fd fe48 	bl	800ddb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2202      	movs	r2, #2
 8010128:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	681a      	ldr	r2, [r3, #0]
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801013a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	685b      	ldr	r3, [r3, #4]
 8010140:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	689b      	ldr	r3, [r3, #8]
 8010148:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 801014c:	431a      	orrs	r2, r3
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	68db      	ldr	r3, [r3, #12]
 8010152:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010156:	431a      	orrs	r2, r3
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	691b      	ldr	r3, [r3, #16]
 801015c:	f003 0302 	and.w	r3, r3, #2
 8010160:	431a      	orrs	r2, r3
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	695b      	ldr	r3, [r3, #20]
 8010166:	f003 0301 	and.w	r3, r3, #1
 801016a:	431a      	orrs	r2, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	699b      	ldr	r3, [r3, #24]
 8010170:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010174:	431a      	orrs	r2, r3
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	69db      	ldr	r3, [r3, #28]
 801017a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801017e:	431a      	orrs	r2, r3
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	6a1b      	ldr	r3, [r3, #32]
 8010184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010188:	ea42 0103 	orr.w	r1, r2, r3
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010190:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	430a      	orrs	r2, r1
 801019a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	699b      	ldr	r3, [r3, #24]
 80101a0:	0c1b      	lsrs	r3, r3, #16
 80101a2:	f003 0104 	and.w	r1, r3, #4
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101aa:	f003 0210 	and.w	r2, r3, #16
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	430a      	orrs	r2, r1
 80101b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	69da      	ldr	r2, [r3, #28]
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80101c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2200      	movs	r2, #0
 80101ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2201      	movs	r2, #1
 80101d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80101d4:	2300      	movs	r3, #0
}
 80101d6:	4618      	mov	r0, r3
 80101d8:	3708      	adds	r7, #8
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}

080101de <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80101de:	b580      	push	{r7, lr}
 80101e0:	b088      	sub	sp, #32
 80101e2:	af00      	add	r7, sp, #0
 80101e4:	60f8      	str	r0, [r7, #12]
 80101e6:	60b9      	str	r1, [r7, #8]
 80101e8:	603b      	str	r3, [r7, #0]
 80101ea:	4613      	mov	r3, r2
 80101ec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80101ee:	f7fe fded 	bl	800edcc <HAL_GetTick>
 80101f2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80101f4:	88fb      	ldrh	r3, [r7, #6]
 80101f6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80101fe:	b2db      	uxtb	r3, r3
 8010200:	2b01      	cmp	r3, #1
 8010202:	d001      	beq.n	8010208 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8010204:	2302      	movs	r3, #2
 8010206:	e12a      	b.n	801045e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d002      	beq.n	8010214 <HAL_SPI_Transmit+0x36>
 801020e:	88fb      	ldrh	r3, [r7, #6]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d101      	bne.n	8010218 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8010214:	2301      	movs	r3, #1
 8010216:	e122      	b.n	801045e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801021e:	2b01      	cmp	r3, #1
 8010220:	d101      	bne.n	8010226 <HAL_SPI_Transmit+0x48>
 8010222:	2302      	movs	r3, #2
 8010224:	e11b      	b.n	801045e <HAL_SPI_Transmit+0x280>
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	2201      	movs	r2, #1
 801022a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2203      	movs	r2, #3
 8010232:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	2200      	movs	r2, #0
 801023a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	68ba      	ldr	r2, [r7, #8]
 8010240:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	88fa      	ldrh	r2, [r7, #6]
 8010246:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	88fa      	ldrh	r2, [r7, #6]
 801024c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	2200      	movs	r2, #0
 8010252:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2200      	movs	r2, #0
 8010258:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2200      	movs	r2, #0
 801025e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	2200      	movs	r2, #0
 8010264:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2200      	movs	r2, #0
 801026a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	689b      	ldr	r3, [r3, #8]
 8010270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010274:	d10f      	bne.n	8010296 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	681a      	ldr	r2, [r3, #0]
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010284:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	681a      	ldr	r2, [r3, #0]
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010294:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102a0:	2b40      	cmp	r3, #64	@ 0x40
 80102a2:	d007      	beq.n	80102b4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	681a      	ldr	r2, [r3, #0]
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80102b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80102bc:	d152      	bne.n	8010364 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d002      	beq.n	80102cc <HAL_SPI_Transmit+0xee>
 80102c6:	8b7b      	ldrh	r3, [r7, #26]
 80102c8:	2b01      	cmp	r3, #1
 80102ca:	d145      	bne.n	8010358 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102d0:	881a      	ldrh	r2, [r3, #0]
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102dc:	1c9a      	adds	r2, r3, #2
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80102e6:	b29b      	uxth	r3, r3
 80102e8:	3b01      	subs	r3, #1
 80102ea:	b29a      	uxth	r2, r3
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80102f0:	e032      	b.n	8010358 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	689b      	ldr	r3, [r3, #8]
 80102f8:	f003 0302 	and.w	r3, r3, #2
 80102fc:	2b02      	cmp	r3, #2
 80102fe:	d112      	bne.n	8010326 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010304:	881a      	ldrh	r2, [r3, #0]
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010310:	1c9a      	adds	r2, r3, #2
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801031a:	b29b      	uxth	r3, r3
 801031c:	3b01      	subs	r3, #1
 801031e:	b29a      	uxth	r2, r3
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	86da      	strh	r2, [r3, #54]	@ 0x36
 8010324:	e018      	b.n	8010358 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010326:	f7fe fd51 	bl	800edcc <HAL_GetTick>
 801032a:	4602      	mov	r2, r0
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	1ad3      	subs	r3, r2, r3
 8010330:	683a      	ldr	r2, [r7, #0]
 8010332:	429a      	cmp	r2, r3
 8010334:	d803      	bhi.n	801033e <HAL_SPI_Transmit+0x160>
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	f1b3 3fff 	cmp.w	r3, #4294967295
 801033c:	d102      	bne.n	8010344 <HAL_SPI_Transmit+0x166>
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d109      	bne.n	8010358 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2201      	movs	r2, #1
 8010348:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	2200      	movs	r2, #0
 8010350:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8010354:	2303      	movs	r3, #3
 8010356:	e082      	b.n	801045e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801035c:	b29b      	uxth	r3, r3
 801035e:	2b00      	cmp	r3, #0
 8010360:	d1c7      	bne.n	80102f2 <HAL_SPI_Transmit+0x114>
 8010362:	e053      	b.n	801040c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	685b      	ldr	r3, [r3, #4]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d002      	beq.n	8010372 <HAL_SPI_Transmit+0x194>
 801036c:	8b7b      	ldrh	r3, [r7, #26]
 801036e:	2b01      	cmp	r3, #1
 8010370:	d147      	bne.n	8010402 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	330c      	adds	r3, #12
 801037c:	7812      	ldrb	r2, [r2, #0]
 801037e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010384:	1c5a      	adds	r2, r3, #1
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801038e:	b29b      	uxth	r3, r3
 8010390:	3b01      	subs	r3, #1
 8010392:	b29a      	uxth	r2, r3
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8010398:	e033      	b.n	8010402 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	689b      	ldr	r3, [r3, #8]
 80103a0:	f003 0302 	and.w	r3, r3, #2
 80103a4:	2b02      	cmp	r3, #2
 80103a6:	d113      	bne.n	80103d0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	330c      	adds	r3, #12
 80103b2:	7812      	ldrb	r2, [r2, #0]
 80103b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103ba:	1c5a      	adds	r2, r3, #1
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	3b01      	subs	r3, #1
 80103c8:	b29a      	uxth	r2, r3
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80103ce:	e018      	b.n	8010402 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80103d0:	f7fe fcfc 	bl	800edcc <HAL_GetTick>
 80103d4:	4602      	mov	r2, r0
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	1ad3      	subs	r3, r2, r3
 80103da:	683a      	ldr	r2, [r7, #0]
 80103dc:	429a      	cmp	r2, r3
 80103de:	d803      	bhi.n	80103e8 <HAL_SPI_Transmit+0x20a>
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103e6:	d102      	bne.n	80103ee <HAL_SPI_Transmit+0x210>
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d109      	bne.n	8010402 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2201      	movs	r2, #1
 80103f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	2200      	movs	r2, #0
 80103fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80103fe:	2303      	movs	r3, #3
 8010400:	e02d      	b.n	801045e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010406:	b29b      	uxth	r3, r3
 8010408:	2b00      	cmp	r3, #0
 801040a:	d1c6      	bne.n	801039a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801040c:	69fa      	ldr	r2, [r7, #28]
 801040e:	6839      	ldr	r1, [r7, #0]
 8010410:	68f8      	ldr	r0, [r7, #12]
 8010412:	f000 fc6f 	bl	8010cf4 <SPI_EndRxTxTransaction>
 8010416:	4603      	mov	r3, r0
 8010418:	2b00      	cmp	r3, #0
 801041a:	d002      	beq.n	8010422 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	2220      	movs	r2, #32
 8010420:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	689b      	ldr	r3, [r3, #8]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d10a      	bne.n	8010440 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801042a:	2300      	movs	r3, #0
 801042c:	617b      	str	r3, [r7, #20]
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	68db      	ldr	r3, [r3, #12]
 8010434:	617b      	str	r3, [r7, #20]
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	689b      	ldr	r3, [r3, #8]
 801043c:	617b      	str	r3, [r7, #20]
 801043e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	2201      	movs	r2, #1
 8010444:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	2200      	movs	r2, #0
 801044c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010454:	2b00      	cmp	r3, #0
 8010456:	d001      	beq.n	801045c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8010458:	2301      	movs	r3, #1
 801045a:	e000      	b.n	801045e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 801045c:	2300      	movs	r3, #0
  }
}
 801045e:	4618      	mov	r0, r3
 8010460:	3720      	adds	r7, #32
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}
	...

08010468 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b084      	sub	sp, #16
 801046c:	af00      	add	r7, sp, #0
 801046e:	60f8      	str	r0, [r7, #12]
 8010470:	60b9      	str	r1, [r7, #8]
 8010472:	4613      	mov	r3, r2
 8010474:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801047c:	b2db      	uxtb	r3, r3
 801047e:	2b01      	cmp	r3, #1
 8010480:	d001      	beq.n	8010486 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8010482:	2302      	movs	r3, #2
 8010484:	e07f      	b.n	8010586 <HAL_SPI_Receive_IT+0x11e>
  }

  if ((pData == NULL) || (Size == 0U))
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d002      	beq.n	8010492 <HAL_SPI_Receive_IT+0x2a>
 801048c:	88fb      	ldrh	r3, [r7, #6]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d101      	bne.n	8010496 <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 8010492:	2301      	movs	r3, #1
 8010494:	e077      	b.n	8010586 <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	689b      	ldr	r3, [r3, #8]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d110      	bne.n	80104c0 <HAL_SPI_Receive_IT+0x58>
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	685b      	ldr	r3, [r3, #4]
 80104a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80104a6:	d10b      	bne.n	80104c0 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	2204      	movs	r2, #4
 80104ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80104b0:	88fb      	ldrh	r3, [r7, #6]
 80104b2:	68ba      	ldr	r2, [r7, #8]
 80104b4:	68b9      	ldr	r1, [r7, #8]
 80104b6:	68f8      	ldr	r0, [r7, #12]
 80104b8:	f000 f86e 	bl	8010598 <HAL_SPI_TransmitReceive_IT>
 80104bc:	4603      	mov	r3, r0
 80104be:	e062      	b.n	8010586 <HAL_SPI_Receive_IT+0x11e>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80104c6:	2b01      	cmp	r3, #1
 80104c8:	d101      	bne.n	80104ce <HAL_SPI_Receive_IT+0x66>
 80104ca:	2302      	movs	r3, #2
 80104cc:	e05b      	b.n	8010586 <HAL_SPI_Receive_IT+0x11e>
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2201      	movs	r2, #1
 80104d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2204      	movs	r2, #4
 80104da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	2200      	movs	r2, #0
 80104e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	68ba      	ldr	r2, [r7, #8]
 80104e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	88fa      	ldrh	r2, [r7, #6]
 80104ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	88fa      	ldrh	r2, [r7, #6]
 80104f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	2200      	movs	r2, #0
 80104fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	2200      	movs	r2, #0
 8010500:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	2200      	movs	r2, #0
 8010506:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	2200      	movs	r2, #0
 801050c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	68db      	ldr	r3, [r3, #12]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d003      	beq.n	801051e <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	4a1d      	ldr	r2, [pc, #116]	@ (8010590 <HAL_SPI_Receive_IT+0x128>)
 801051a:	641a      	str	r2, [r3, #64]	@ 0x40
 801051c:	e002      	b.n	8010524 <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	4a1c      	ldr	r2, [pc, #112]	@ (8010594 <HAL_SPI_Receive_IT+0x12c>)
 8010522:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	689b      	ldr	r3, [r3, #8]
 8010528:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801052c:	d10f      	bne.n	801054e <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	681a      	ldr	r2, [r3, #0]
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801053c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	681a      	ldr	r2, [r3, #0]
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801054c:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010558:	2b40      	cmp	r3, #64	@ 0x40
 801055a:	d007      	beq.n	801056c <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	681a      	ldr	r2, [r3, #0]
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801056a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2200      	movs	r2, #0
 8010570:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	685a      	ldr	r2, [r3, #4]
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8010582:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010584:	2300      	movs	r3, #0
}
 8010586:	4618      	mov	r0, r3
 8010588:	3710      	adds	r7, #16
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}
 801058e:	bf00      	nop
 8010590:	08010ad1 	.word	0x08010ad1
 8010594:	08010a87 	.word	0x08010a87

08010598 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8010598:	b480      	push	{r7}
 801059a:	b087      	sub	sp, #28
 801059c:	af00      	add	r7, sp, #0
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	607a      	str	r2, [r7, #4]
 80105a4:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80105ac:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	685b      	ldr	r3, [r3, #4]
 80105b2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80105b4:	7dfb      	ldrb	r3, [r7, #23]
 80105b6:	2b01      	cmp	r3, #1
 80105b8:	d00c      	beq.n	80105d4 <HAL_SPI_TransmitReceive_IT+0x3c>
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80105c0:	d106      	bne.n	80105d0 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	689b      	ldr	r3, [r3, #8]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d102      	bne.n	80105d0 <HAL_SPI_TransmitReceive_IT+0x38>
 80105ca:	7dfb      	ldrb	r3, [r7, #23]
 80105cc:	2b04      	cmp	r3, #4
 80105ce:	d001      	beq.n	80105d4 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80105d0:	2302      	movs	r3, #2
 80105d2:	e061      	b.n	8010698 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d005      	beq.n	80105e6 <HAL_SPI_TransmitReceive_IT+0x4e>
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d002      	beq.n	80105e6 <HAL_SPI_TransmitReceive_IT+0x4e>
 80105e0:	887b      	ldrh	r3, [r7, #2]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d101      	bne.n	80105ea <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 80105e6:	2301      	movs	r3, #1
 80105e8:	e056      	b.n	8010698 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80105f0:	2b01      	cmp	r3, #1
 80105f2:	d101      	bne.n	80105f8 <HAL_SPI_TransmitReceive_IT+0x60>
 80105f4:	2302      	movs	r3, #2
 80105f6:	e04f      	b.n	8010698 <HAL_SPI_TransmitReceive_IT+0x100>
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	2201      	movs	r2, #1
 80105fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010606:	b2db      	uxtb	r3, r3
 8010608:	2b04      	cmp	r3, #4
 801060a:	d003      	beq.n	8010614 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	2205      	movs	r2, #5
 8010610:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	2200      	movs	r2, #0
 8010618:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	68ba      	ldr	r2, [r7, #8]
 801061e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	887a      	ldrh	r2, [r7, #2]
 8010624:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	887a      	ldrh	r2, [r7, #2]
 801062a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	687a      	ldr	r2, [r7, #4]
 8010630:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	887a      	ldrh	r2, [r7, #2]
 8010636:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	887a      	ldrh	r2, [r7, #2]
 801063c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	68db      	ldr	r3, [r3, #12]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d006      	beq.n	8010654 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	4a16      	ldr	r2, [pc, #88]	@ (80106a4 <HAL_SPI_TransmitReceive_IT+0x10c>)
 801064a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	4a16      	ldr	r2, [pc, #88]	@ (80106a8 <HAL_SPI_TransmitReceive_IT+0x110>)
 8010650:	645a      	str	r2, [r3, #68]	@ 0x44
 8010652:	e005      	b.n	8010660 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	4a15      	ldr	r2, [pc, #84]	@ (80106ac <HAL_SPI_TransmitReceive_IT+0x114>)
 8010658:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	4a14      	ldr	r2, [pc, #80]	@ (80106b0 <HAL_SPI_TransmitReceive_IT+0x118>)
 801065e:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801066a:	2b40      	cmp	r3, #64	@ 0x40
 801066c:	d007      	beq.n	801067e <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	681a      	ldr	r2, [r3, #0]
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801067c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	2200      	movs	r2, #0
 8010682:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	685a      	ldr	r2, [r3, #4]
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8010694:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010696:	2300      	movs	r3, #0
}
 8010698:	4618      	mov	r0, r3
 801069a:	371c      	adds	r7, #28
 801069c:	46bd      	mov	sp, r7
 801069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a2:	4770      	bx	lr
 80106a4:	080109c9 	.word	0x080109c9
 80106a8:	08010a29 	.word	0x08010a29
 80106ac:	08010905 	.word	0x08010905
 80106b0:	08010969 	.word	0x08010969

080106b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b088      	sub	sp, #32
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	689b      	ldr	r3, [r3, #8]
 80106ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80106cc:	69bb      	ldr	r3, [r7, #24]
 80106ce:	099b      	lsrs	r3, r3, #6
 80106d0:	f003 0301 	and.w	r3, r3, #1
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d10f      	bne.n	80106f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80106d8:	69bb      	ldr	r3, [r7, #24]
 80106da:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d00a      	beq.n	80106f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80106e2:	69fb      	ldr	r3, [r7, #28]
 80106e4:	099b      	lsrs	r3, r3, #6
 80106e6:	f003 0301 	and.w	r3, r3, #1
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d004      	beq.n	80106f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	4798      	blx	r3
    return;
 80106f6:	e0d7      	b.n	80108a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80106f8:	69bb      	ldr	r3, [r7, #24]
 80106fa:	085b      	lsrs	r3, r3, #1
 80106fc:	f003 0301 	and.w	r3, r3, #1
 8010700:	2b00      	cmp	r3, #0
 8010702:	d00a      	beq.n	801071a <HAL_SPI_IRQHandler+0x66>
 8010704:	69fb      	ldr	r3, [r7, #28]
 8010706:	09db      	lsrs	r3, r3, #7
 8010708:	f003 0301 	and.w	r3, r3, #1
 801070c:	2b00      	cmp	r3, #0
 801070e:	d004      	beq.n	801071a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	4798      	blx	r3
    return;
 8010718:	e0c6      	b.n	80108a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801071a:	69bb      	ldr	r3, [r7, #24]
 801071c:	095b      	lsrs	r3, r3, #5
 801071e:	f003 0301 	and.w	r3, r3, #1
 8010722:	2b00      	cmp	r3, #0
 8010724:	d10c      	bne.n	8010740 <HAL_SPI_IRQHandler+0x8c>
 8010726:	69bb      	ldr	r3, [r7, #24]
 8010728:	099b      	lsrs	r3, r3, #6
 801072a:	f003 0301 	and.w	r3, r3, #1
 801072e:	2b00      	cmp	r3, #0
 8010730:	d106      	bne.n	8010740 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8010732:	69bb      	ldr	r3, [r7, #24]
 8010734:	0a1b      	lsrs	r3, r3, #8
 8010736:	f003 0301 	and.w	r3, r3, #1
 801073a:	2b00      	cmp	r3, #0
 801073c:	f000 80b4 	beq.w	80108a8 <HAL_SPI_IRQHandler+0x1f4>
 8010740:	69fb      	ldr	r3, [r7, #28]
 8010742:	095b      	lsrs	r3, r3, #5
 8010744:	f003 0301 	and.w	r3, r3, #1
 8010748:	2b00      	cmp	r3, #0
 801074a:	f000 80ad 	beq.w	80108a8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801074e:	69bb      	ldr	r3, [r7, #24]
 8010750:	099b      	lsrs	r3, r3, #6
 8010752:	f003 0301 	and.w	r3, r3, #1
 8010756:	2b00      	cmp	r3, #0
 8010758:	d023      	beq.n	80107a2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010760:	b2db      	uxtb	r3, r3
 8010762:	2b03      	cmp	r3, #3
 8010764:	d011      	beq.n	801078a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801076a:	f043 0204 	orr.w	r2, r3, #4
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010772:	2300      	movs	r3, #0
 8010774:	617b      	str	r3, [r7, #20]
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	68db      	ldr	r3, [r3, #12]
 801077c:	617b      	str	r3, [r7, #20]
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	689b      	ldr	r3, [r3, #8]
 8010784:	617b      	str	r3, [r7, #20]
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	e00b      	b.n	80107a2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801078a:	2300      	movs	r3, #0
 801078c:	613b      	str	r3, [r7, #16]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	68db      	ldr	r3, [r3, #12]
 8010794:	613b      	str	r3, [r7, #16]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	689b      	ldr	r3, [r3, #8]
 801079c:	613b      	str	r3, [r7, #16]
 801079e:	693b      	ldr	r3, [r7, #16]
        return;
 80107a0:	e082      	b.n	80108a8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80107a2:	69bb      	ldr	r3, [r7, #24]
 80107a4:	095b      	lsrs	r3, r3, #5
 80107a6:	f003 0301 	and.w	r3, r3, #1
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d014      	beq.n	80107d8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80107b2:	f043 0201 	orr.w	r2, r3, #1
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80107ba:	2300      	movs	r3, #0
 80107bc:	60fb      	str	r3, [r7, #12]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	689b      	ldr	r3, [r3, #8]
 80107c4:	60fb      	str	r3, [r7, #12]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	681a      	ldr	r2, [r3, #0]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80107d4:	601a      	str	r2, [r3, #0]
 80107d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80107d8:	69bb      	ldr	r3, [r7, #24]
 80107da:	0a1b      	lsrs	r3, r3, #8
 80107dc:	f003 0301 	and.w	r3, r3, #1
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d00c      	beq.n	80107fe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80107e8:	f043 0208 	orr.w	r2, r3, #8
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80107f0:	2300      	movs	r3, #0
 80107f2:	60bb      	str	r3, [r7, #8]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	689b      	ldr	r3, [r3, #8]
 80107fa:	60bb      	str	r3, [r7, #8]
 80107fc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010802:	2b00      	cmp	r3, #0
 8010804:	d04f      	beq.n	80108a6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	685a      	ldr	r2, [r3, #4]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8010814:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2201      	movs	r2, #1
 801081a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801081e:	69fb      	ldr	r3, [r7, #28]
 8010820:	f003 0302 	and.w	r3, r3, #2
 8010824:	2b00      	cmp	r3, #0
 8010826:	d104      	bne.n	8010832 <HAL_SPI_IRQHandler+0x17e>
 8010828:	69fb      	ldr	r3, [r7, #28]
 801082a:	f003 0301 	and.w	r3, r3, #1
 801082e:	2b00      	cmp	r3, #0
 8010830:	d034      	beq.n	801089c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	685a      	ldr	r2, [r3, #4]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	f022 0203 	bic.w	r2, r2, #3
 8010840:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010846:	2b00      	cmp	r3, #0
 8010848:	d011      	beq.n	801086e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801084e:	4a18      	ldr	r2, [pc, #96]	@ (80108b0 <HAL_SPI_IRQHandler+0x1fc>)
 8010850:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010856:	4618      	mov	r0, r3
 8010858:	f7fe fc3a 	bl	800f0d0 <HAL_DMA_Abort_IT>
 801085c:	4603      	mov	r3, r0
 801085e:	2b00      	cmp	r3, #0
 8010860:	d005      	beq.n	801086e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010866:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010872:	2b00      	cmp	r3, #0
 8010874:	d016      	beq.n	80108a4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801087a:	4a0d      	ldr	r2, [pc, #52]	@ (80108b0 <HAL_SPI_IRQHandler+0x1fc>)
 801087c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010882:	4618      	mov	r0, r3
 8010884:	f7fe fc24 	bl	800f0d0 <HAL_DMA_Abort_IT>
 8010888:	4603      	mov	r3, r0
 801088a:	2b00      	cmp	r3, #0
 801088c:	d00a      	beq.n	80108a4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010892:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 801089a:	e003      	b.n	80108a4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f000 f813 	bl	80108c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80108a2:	e000      	b.n	80108a6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80108a4:	bf00      	nop
    return;
 80108a6:	bf00      	nop
  }
}
 80108a8:	3720      	adds	r7, #32
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
 80108ae:	bf00      	nop
 80108b0:	080108dd 	.word	0x080108dd

080108b4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80108b4:	b480      	push	{r7}
 80108b6:	b083      	sub	sp, #12
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80108bc:	bf00      	nop
 80108be:	370c      	adds	r7, #12
 80108c0:	46bd      	mov	sp, r7
 80108c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c6:	4770      	bx	lr

080108c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80108c8:	b480      	push	{r7}
 80108ca:	b083      	sub	sp, #12
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80108d0:	bf00      	nop
 80108d2:	370c      	adds	r7, #12
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr

080108dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b084      	sub	sp, #16
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	2200      	movs	r2, #0
 80108ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	2200      	movs	r2, #0
 80108f4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80108f6:	68f8      	ldr	r0, [r7, #12]
 80108f8:	f7ff ffe6 	bl	80108c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80108fc:	bf00      	nop
 80108fe:	3710      	adds	r7, #16
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}

08010904 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	f103 020c 	add.w	r2, r3, #12
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010918:	7812      	ldrb	r2, [r2, #0]
 801091a:	b2d2      	uxtb	r2, r2
 801091c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010922:	1c5a      	adds	r2, r3, #1
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801092c:	b29b      	uxth	r3, r3
 801092e:	3b01      	subs	r3, #1
 8010930:	b29a      	uxth	r2, r3
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801093a:	b29b      	uxth	r3, r3
 801093c:	2b00      	cmp	r3, #0
 801093e:	d10f      	bne.n	8010960 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	685a      	ldr	r2, [r3, #4]
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801094e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010954:	b29b      	uxth	r3, r3
 8010956:	2b00      	cmp	r3, #0
 8010958:	d102      	bne.n	8010960 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f000 fa1e 	bl	8010d9c <SPI_CloseRxTx_ISR>
    }
  }
}
 8010960:	bf00      	nop
 8010962:	3708      	adds	r7, #8
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}

08010968 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	330c      	adds	r3, #12
 801097a:	7812      	ldrb	r2, [r2, #0]
 801097c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010982:	1c5a      	adds	r2, r3, #1
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801098c:	b29b      	uxth	r3, r3
 801098e:	3b01      	subs	r3, #1
 8010990:	b29a      	uxth	r2, r3
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801099a:	b29b      	uxth	r3, r3
 801099c:	2b00      	cmp	r3, #0
 801099e:	d10f      	bne.n	80109c0 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	685a      	ldr	r2, [r3, #4]
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80109ae:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80109b4:	b29b      	uxth	r3, r3
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d102      	bne.n	80109c0 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f000 f9ee 	bl	8010d9c <SPI_CloseRxTx_ISR>
    }
  }
}
 80109c0:	bf00      	nop
 80109c2:	3708      	adds	r7, #8
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}

080109c8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b082      	sub	sp, #8
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	68da      	ldr	r2, [r3, #12]
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109da:	b292      	uxth	r2, r2
 80109dc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109e2:	1c9a      	adds	r2, r3, #2
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80109ec:	b29b      	uxth	r3, r3
 80109ee:	3b01      	subs	r3, #1
 80109f0:	b29a      	uxth	r2, r3
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d10f      	bne.n	8010a20 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	685a      	ldr	r2, [r3, #4]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010a0e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010a14:	b29b      	uxth	r3, r3
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d102      	bne.n	8010a20 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f000 f9be 	bl	8010d9c <SPI_CloseRxTx_ISR>
    }
  }
}
 8010a20:	bf00      	nop
 8010a22:	3708      	adds	r7, #8
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}

08010a28 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a34:	881a      	ldrh	r2, [r3, #0]
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a40:	1c9a      	adds	r2, r3, #2
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	3b01      	subs	r3, #1
 8010a4e:	b29a      	uxth	r2, r3
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d10f      	bne.n	8010a7e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	685a      	ldr	r2, [r3, #4]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010a6c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010a72:	b29b      	uxth	r3, r3
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d102      	bne.n	8010a7e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f000 f98f 	bl	8010d9c <SPI_CloseRxTx_ISR>
    }
  }
}
 8010a7e:	bf00      	nop
 8010a80:	3708      	adds	r7, #8
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}

08010a86 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8010a86:	b580      	push	{r7, lr}
 8010a88:	b082      	sub	sp, #8
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	f103 020c 	add.w	r2, r3, #12
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a9a:	7812      	ldrb	r2, [r2, #0]
 8010a9c:	b2d2      	uxtb	r2, r2
 8010a9e:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010aa4:	1c5a      	adds	r2, r3, #1
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010aae:	b29b      	uxth	r3, r3
 8010ab0:	3b01      	subs	r3, #1
 8010ab2:	b29a      	uxth	r2, r3
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d102      	bne.n	8010ac8 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f000 f9de 	bl	8010e84 <SPI_CloseRx_ISR>
  }
}
 8010ac8:	bf00      	nop
 8010aca:	3708      	adds	r7, #8
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}

08010ad0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b082      	sub	sp, #8
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	68da      	ldr	r2, [r3, #12]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ae2:	b292      	uxth	r2, r2
 8010ae4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010aea:	1c9a      	adds	r2, r3, #2
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010af4:	b29b      	uxth	r3, r3
 8010af6:	3b01      	subs	r3, #1
 8010af8:	b29a      	uxth	r2, r3
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d102      	bne.n	8010b0e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f000 f9bb 	bl	8010e84 <SPI_CloseRx_ISR>
  }
}
 8010b0e:	bf00      	nop
 8010b10:	3708      	adds	r7, #8
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
	...

08010b18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b088      	sub	sp, #32
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	60f8      	str	r0, [r7, #12]
 8010b20:	60b9      	str	r1, [r7, #8]
 8010b22:	603b      	str	r3, [r7, #0]
 8010b24:	4613      	mov	r3, r2
 8010b26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010b28:	f7fe f950 	bl	800edcc <HAL_GetTick>
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b30:	1a9b      	subs	r3, r3, r2
 8010b32:	683a      	ldr	r2, [r7, #0]
 8010b34:	4413      	add	r3, r2
 8010b36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010b38:	f7fe f948 	bl	800edcc <HAL_GetTick>
 8010b3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8010b3e:	4b39      	ldr	r3, [pc, #228]	@ (8010c24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	015b      	lsls	r3, r3, #5
 8010b44:	0d1b      	lsrs	r3, r3, #20
 8010b46:	69fa      	ldr	r2, [r7, #28]
 8010b48:	fb02 f303 	mul.w	r3, r2, r3
 8010b4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010b4e:	e055      	b.n	8010bfc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b56:	d051      	beq.n	8010bfc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010b58:	f7fe f938 	bl	800edcc <HAL_GetTick>
 8010b5c:	4602      	mov	r2, r0
 8010b5e:	69bb      	ldr	r3, [r7, #24]
 8010b60:	1ad3      	subs	r3, r2, r3
 8010b62:	69fa      	ldr	r2, [r7, #28]
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d902      	bls.n	8010b6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8010b68:	69fb      	ldr	r3, [r7, #28]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d13d      	bne.n	8010bea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	685a      	ldr	r2, [r3, #4]
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8010b7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	685b      	ldr	r3, [r3, #4]
 8010b82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010b86:	d111      	bne.n	8010bac <SPI_WaitFlagStateUntilTimeout+0x94>
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	689b      	ldr	r3, [r3, #8]
 8010b8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010b90:	d004      	beq.n	8010b9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	689b      	ldr	r3, [r3, #8]
 8010b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010b9a:	d107      	bne.n	8010bac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010baa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010bb4:	d10f      	bne.n	8010bd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	681a      	ldr	r2, [r3, #0]
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010bc4:	601a      	str	r2, [r3, #0]
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	681a      	ldr	r2, [r3, #0]
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2201      	movs	r2, #1
 8010bda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	2200      	movs	r2, #0
 8010be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8010be6:	2303      	movs	r3, #3
 8010be8:	e018      	b.n	8010c1c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d102      	bne.n	8010bf6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	61fb      	str	r3, [r7, #28]
 8010bf4:	e002      	b.n	8010bfc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	3b01      	subs	r3, #1
 8010bfa:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	689a      	ldr	r2, [r3, #8]
 8010c02:	68bb      	ldr	r3, [r7, #8]
 8010c04:	4013      	ands	r3, r2
 8010c06:	68ba      	ldr	r2, [r7, #8]
 8010c08:	429a      	cmp	r2, r3
 8010c0a:	bf0c      	ite	eq
 8010c0c:	2301      	moveq	r3, #1
 8010c0e:	2300      	movne	r3, #0
 8010c10:	b2db      	uxtb	r3, r3
 8010c12:	461a      	mov	r2, r3
 8010c14:	79fb      	ldrb	r3, [r7, #7]
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d19a      	bne.n	8010b50 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8010c1a:	2300      	movs	r3, #0
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3720      	adds	r7, #32
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	2000001c 	.word	0x2000001c

08010c28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b086      	sub	sp, #24
 8010c2c:	af02      	add	r7, sp, #8
 8010c2e:	60f8      	str	r0, [r7, #12]
 8010c30:	60b9      	str	r1, [r7, #8]
 8010c32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	685b      	ldr	r3, [r3, #4]
 8010c38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010c3c:	d111      	bne.n	8010c62 <SPI_EndRxTransaction+0x3a>
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	689b      	ldr	r3, [r3, #8]
 8010c42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010c46:	d004      	beq.n	8010c52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	689b      	ldr	r3, [r3, #8]
 8010c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010c50:	d107      	bne.n	8010c62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	681a      	ldr	r2, [r3, #0]
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010c60:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	685b      	ldr	r3, [r3, #4]
 8010c66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010c6a:	d12a      	bne.n	8010cc2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	689b      	ldr	r3, [r3, #8]
 8010c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010c74:	d012      	beq.n	8010c9c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	9300      	str	r3, [sp, #0]
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	2180      	movs	r1, #128	@ 0x80
 8010c80:	68f8      	ldr	r0, [r7, #12]
 8010c82:	f7ff ff49 	bl	8010b18 <SPI_WaitFlagStateUntilTimeout>
 8010c86:	4603      	mov	r3, r0
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d02d      	beq.n	8010ce8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c90:	f043 0220 	orr.w	r2, r3, #32
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8010c98:	2303      	movs	r3, #3
 8010c9a:	e026      	b.n	8010cea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	9300      	str	r3, [sp, #0]
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	2101      	movs	r1, #1
 8010ca6:	68f8      	ldr	r0, [r7, #12]
 8010ca8:	f7ff ff36 	bl	8010b18 <SPI_WaitFlagStateUntilTimeout>
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d01a      	beq.n	8010ce8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010cb6:	f043 0220 	orr.w	r2, r3, #32
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8010cbe:	2303      	movs	r3, #3
 8010cc0:	e013      	b.n	8010cea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	9300      	str	r3, [sp, #0]
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	2200      	movs	r2, #0
 8010cca:	2101      	movs	r1, #1
 8010ccc:	68f8      	ldr	r0, [r7, #12]
 8010cce:	f7ff ff23 	bl	8010b18 <SPI_WaitFlagStateUntilTimeout>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d007      	beq.n	8010ce8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010cdc:	f043 0220 	orr.w	r2, r3, #32
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8010ce4:	2303      	movs	r3, #3
 8010ce6:	e000      	b.n	8010cea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8010ce8:	2300      	movs	r3, #0
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3710      	adds	r7, #16
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}
	...

08010cf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b088      	sub	sp, #32
 8010cf8:	af02      	add	r7, sp, #8
 8010cfa:	60f8      	str	r0, [r7, #12]
 8010cfc:	60b9      	str	r1, [r7, #8]
 8010cfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	9300      	str	r3, [sp, #0]
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	2201      	movs	r2, #1
 8010d08:	2102      	movs	r1, #2
 8010d0a:	68f8      	ldr	r0, [r7, #12]
 8010d0c:	f7ff ff04 	bl	8010b18 <SPI_WaitFlagStateUntilTimeout>
 8010d10:	4603      	mov	r3, r0
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d007      	beq.n	8010d26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d1a:	f043 0220 	orr.w	r2, r3, #32
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8010d22:	2303      	movs	r3, #3
 8010d24:	e032      	b.n	8010d8c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010d26:	4b1b      	ldr	r3, [pc, #108]	@ (8010d94 <SPI_EndRxTxTransaction+0xa0>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8010d98 <SPI_EndRxTxTransaction+0xa4>)
 8010d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8010d30:	0d5b      	lsrs	r3, r3, #21
 8010d32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010d36:	fb02 f303 	mul.w	r3, r2, r3
 8010d3a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	685b      	ldr	r3, [r3, #4]
 8010d40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010d44:	d112      	bne.n	8010d6c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	9300      	str	r3, [sp, #0]
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	2180      	movs	r1, #128	@ 0x80
 8010d50:	68f8      	ldr	r0, [r7, #12]
 8010d52:	f7ff fee1 	bl	8010b18 <SPI_WaitFlagStateUntilTimeout>
 8010d56:	4603      	mov	r3, r0
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d016      	beq.n	8010d8a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d60:	f043 0220 	orr.w	r2, r3, #32
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8010d68:	2303      	movs	r3, #3
 8010d6a:	e00f      	b.n	8010d8c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d00a      	beq.n	8010d88 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	3b01      	subs	r3, #1
 8010d76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	689b      	ldr	r3, [r3, #8]
 8010d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d82:	2b80      	cmp	r3, #128	@ 0x80
 8010d84:	d0f2      	beq.n	8010d6c <SPI_EndRxTxTransaction+0x78>
 8010d86:	e000      	b.n	8010d8a <SPI_EndRxTxTransaction+0x96>
        break;
 8010d88:	bf00      	nop
  }

  return HAL_OK;
 8010d8a:	2300      	movs	r3, #0
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3718      	adds	r7, #24
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}
 8010d94:	2000001c 	.word	0x2000001c
 8010d98:	165e9f81 	.word	0x165e9f81

08010d9c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b086      	sub	sp, #24
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8010da4:	4b35      	ldr	r3, [pc, #212]	@ (8010e7c <SPI_CloseRxTx_ISR+0xe0>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	4a35      	ldr	r2, [pc, #212]	@ (8010e80 <SPI_CloseRxTx_ISR+0xe4>)
 8010daa:	fba2 2303 	umull	r2, r3, r2, r3
 8010dae:	0a5b      	lsrs	r3, r3, #9
 8010db0:	2264      	movs	r2, #100	@ 0x64
 8010db2:	fb02 f303 	mul.w	r3, r2, r3
 8010db6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010db8:	f7fe f808 	bl	800edcc <HAL_GetTick>
 8010dbc:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	685a      	ldr	r2, [r3, #4]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f022 0220 	bic.w	r2, r2, #32
 8010dcc:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d106      	bne.n	8010de2 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010dd8:	f043 0220 	orr.w	r2, r3, #32
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8010de0:	e009      	b.n	8010df6 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8010de2:	693b      	ldr	r3, [r7, #16]
 8010de4:	3b01      	subs	r3, #1
 8010de6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	689b      	ldr	r3, [r3, #8]
 8010dee:	f003 0302 	and.w	r3, r3, #2
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d0eb      	beq.n	8010dce <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8010df6:	697a      	ldr	r2, [r7, #20]
 8010df8:	2164      	movs	r1, #100	@ 0x64
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f7ff ff7a 	bl	8010cf4 <SPI_EndRxTxTransaction>
 8010e00:	4603      	mov	r3, r0
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d005      	beq.n	8010e12 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010e0a:	f043 0220 	orr.w	r2, r3, #32
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	689b      	ldr	r3, [r3, #8]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d10a      	bne.n	8010e30 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	60fb      	str	r3, [r7, #12]
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	68db      	ldr	r3, [r3, #12]
 8010e24:	60fb      	str	r3, [r7, #12]
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	689b      	ldr	r3, [r3, #8]
 8010e2c:	60fb      	str	r3, [r7, #12]
 8010e2e:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d115      	bne.n	8010e64 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010e3e:	b2db      	uxtb	r3, r3
 8010e40:	2b04      	cmp	r3, #4
 8010e42:	d107      	bne.n	8010e54 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2201      	movs	r2, #1
 8010e48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f7fd fedb 	bl	800ec08 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8010e52:	e00e      	b.n	8010e72 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2201      	movs	r2, #1
 8010e58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f7ff fd29 	bl	80108b4 <HAL_SPI_TxRxCpltCallback>
}
 8010e62:	e006      	b.n	8010e72 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2201      	movs	r2, #1
 8010e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f7ff fd2b 	bl	80108c8 <HAL_SPI_ErrorCallback>
}
 8010e72:	bf00      	nop
 8010e74:	3718      	adds	r7, #24
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	bf00      	nop
 8010e7c:	2000001c 	.word	0x2000001c
 8010e80:	057619f1 	.word	0x057619f1

08010e84 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	685a      	ldr	r2, [r3, #4]
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8010e9a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8010e9c:	f7fd ff96 	bl	800edcc <HAL_GetTick>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	2164      	movs	r1, #100	@ 0x64
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f7ff febe 	bl	8010c28 <SPI_EndRxTransaction>
 8010eac:	4603      	mov	r3, r0
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d005      	beq.n	8010ebe <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010eb6:	f043 0220 	orr.w	r2, r3, #32
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	689b      	ldr	r3, [r3, #8]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d10a      	bne.n	8010edc <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	60fb      	str	r3, [r7, #12]
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	68db      	ldr	r3, [r3, #12]
 8010ed0:	60fb      	str	r3, [r7, #12]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	689b      	ldr	r3, [r3, #8]
 8010ed8:	60fb      	str	r3, [r7, #12]
 8010eda:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2201      	movs	r2, #1
 8010ee0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d103      	bne.n	8010ef4 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f7fd fe8b 	bl	800ec08 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8010ef2:	e002      	b.n	8010efa <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f7ff fce7 	bl	80108c8 <HAL_SPI_ErrorCallback>
}
 8010efa:	bf00      	nop
 8010efc:	3710      	adds	r7, #16
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}

08010f02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010f02:	b580      	push	{r7, lr}
 8010f04:	b082      	sub	sp, #8
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d101      	bne.n	8010f14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010f10:	2301      	movs	r3, #1
 8010f12:	e041      	b.n	8010f98 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d106      	bne.n	8010f2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2200      	movs	r2, #0
 8010f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f000 f839 	bl	8010fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2202      	movs	r2, #2
 8010f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	3304      	adds	r3, #4
 8010f3e:	4619      	mov	r1, r3
 8010f40:	4610      	mov	r0, r2
 8010f42:	f000 f9bf 	bl	80112c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2201      	movs	r2, #1
 8010f4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	2201      	movs	r2, #1
 8010f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2201      	movs	r2, #1
 8010f5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2201      	movs	r2, #1
 8010f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2201      	movs	r2, #1
 8010f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2201      	movs	r2, #1
 8010f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2201      	movs	r2, #1
 8010f7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2201      	movs	r2, #1
 8010f82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2201      	movs	r2, #1
 8010f8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2201      	movs	r2, #1
 8010f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010f96:	2300      	movs	r3, #0
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3708      	adds	r7, #8
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b083      	sub	sp, #12
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8010fa8:	bf00      	nop
 8010faa:	370c      	adds	r7, #12
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr

08010fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b085      	sub	sp, #20
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010fc2:	b2db      	uxtb	r3, r3
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	d001      	beq.n	8010fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010fc8:	2301      	movs	r3, #1
 8010fca:	e04e      	b.n	801106a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2202      	movs	r2, #2
 8010fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	68da      	ldr	r2, [r3, #12]
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	f042 0201 	orr.w	r2, r2, #1
 8010fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	4a23      	ldr	r2, [pc, #140]	@ (8011078 <HAL_TIM_Base_Start_IT+0xc4>)
 8010fea:	4293      	cmp	r3, r2
 8010fec:	d022      	beq.n	8011034 <HAL_TIM_Base_Start_IT+0x80>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ff6:	d01d      	beq.n	8011034 <HAL_TIM_Base_Start_IT+0x80>
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	4a1f      	ldr	r2, [pc, #124]	@ (801107c <HAL_TIM_Base_Start_IT+0xc8>)
 8010ffe:	4293      	cmp	r3, r2
 8011000:	d018      	beq.n	8011034 <HAL_TIM_Base_Start_IT+0x80>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	4a1e      	ldr	r2, [pc, #120]	@ (8011080 <HAL_TIM_Base_Start_IT+0xcc>)
 8011008:	4293      	cmp	r3, r2
 801100a:	d013      	beq.n	8011034 <HAL_TIM_Base_Start_IT+0x80>
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	4a1c      	ldr	r2, [pc, #112]	@ (8011084 <HAL_TIM_Base_Start_IT+0xd0>)
 8011012:	4293      	cmp	r3, r2
 8011014:	d00e      	beq.n	8011034 <HAL_TIM_Base_Start_IT+0x80>
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	4a1b      	ldr	r2, [pc, #108]	@ (8011088 <HAL_TIM_Base_Start_IT+0xd4>)
 801101c:	4293      	cmp	r3, r2
 801101e:	d009      	beq.n	8011034 <HAL_TIM_Base_Start_IT+0x80>
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	4a19      	ldr	r2, [pc, #100]	@ (801108c <HAL_TIM_Base_Start_IT+0xd8>)
 8011026:	4293      	cmp	r3, r2
 8011028:	d004      	beq.n	8011034 <HAL_TIM_Base_Start_IT+0x80>
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	4a18      	ldr	r2, [pc, #96]	@ (8011090 <HAL_TIM_Base_Start_IT+0xdc>)
 8011030:	4293      	cmp	r3, r2
 8011032:	d111      	bne.n	8011058 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	689b      	ldr	r3, [r3, #8]
 801103a:	f003 0307 	and.w	r3, r3, #7
 801103e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	2b06      	cmp	r3, #6
 8011044:	d010      	beq.n	8011068 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	681a      	ldr	r2, [r3, #0]
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	f042 0201 	orr.w	r2, r2, #1
 8011054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011056:	e007      	b.n	8011068 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	681a      	ldr	r2, [r3, #0]
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	f042 0201 	orr.w	r2, r2, #1
 8011066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011068:	2300      	movs	r3, #0
}
 801106a:	4618      	mov	r0, r3
 801106c:	3714      	adds	r7, #20
 801106e:	46bd      	mov	sp, r7
 8011070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011074:	4770      	bx	lr
 8011076:	bf00      	nop
 8011078:	40010000 	.word	0x40010000
 801107c:	40000400 	.word	0x40000400
 8011080:	40000800 	.word	0x40000800
 8011084:	40000c00 	.word	0x40000c00
 8011088:	40010400 	.word	0x40010400
 801108c:	40014000 	.word	0x40014000
 8011090:	40001800 	.word	0x40001800

08011094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b084      	sub	sp, #16
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	68db      	ldr	r3, [r3, #12]
 80110a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	691b      	ldr	r3, [r3, #16]
 80110aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	f003 0302 	and.w	r3, r3, #2
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d020      	beq.n	80110f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	f003 0302 	and.w	r3, r3, #2
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d01b      	beq.n	80110f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	f06f 0202 	mvn.w	r2, #2
 80110c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2201      	movs	r2, #1
 80110ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	699b      	ldr	r3, [r3, #24]
 80110d6:	f003 0303 	and.w	r3, r3, #3
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d003      	beq.n	80110e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f000 f8d2 	bl	8011288 <HAL_TIM_IC_CaptureCallback>
 80110e4:	e005      	b.n	80110f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f000 f8c4 	bl	8011274 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f000 f8d5 	bl	801129c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2200      	movs	r2, #0
 80110f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	f003 0304 	and.w	r3, r3, #4
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d020      	beq.n	8011144 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	f003 0304 	and.w	r3, r3, #4
 8011108:	2b00      	cmp	r3, #0
 801110a:	d01b      	beq.n	8011144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	f06f 0204 	mvn.w	r2, #4
 8011114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2202      	movs	r2, #2
 801111a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	699b      	ldr	r3, [r3, #24]
 8011122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011126:	2b00      	cmp	r3, #0
 8011128:	d003      	beq.n	8011132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801112a:	6878      	ldr	r0, [r7, #4]
 801112c:	f000 f8ac 	bl	8011288 <HAL_TIM_IC_CaptureCallback>
 8011130:	e005      	b.n	801113e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f000 f89e 	bl	8011274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	f000 f8af 	bl	801129c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2200      	movs	r2, #0
 8011142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	f003 0308 	and.w	r3, r3, #8
 801114a:	2b00      	cmp	r3, #0
 801114c:	d020      	beq.n	8011190 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	f003 0308 	and.w	r3, r3, #8
 8011154:	2b00      	cmp	r3, #0
 8011156:	d01b      	beq.n	8011190 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	f06f 0208 	mvn.w	r2, #8
 8011160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2204      	movs	r2, #4
 8011166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	69db      	ldr	r3, [r3, #28]
 801116e:	f003 0303 	and.w	r3, r3, #3
 8011172:	2b00      	cmp	r3, #0
 8011174:	d003      	beq.n	801117e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	f000 f886 	bl	8011288 <HAL_TIM_IC_CaptureCallback>
 801117c:	e005      	b.n	801118a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	f000 f878 	bl	8011274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011184:	6878      	ldr	r0, [r7, #4]
 8011186:	f000 f889 	bl	801129c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2200      	movs	r2, #0
 801118e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	f003 0310 	and.w	r3, r3, #16
 8011196:	2b00      	cmp	r3, #0
 8011198:	d020      	beq.n	80111dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	f003 0310 	and.w	r3, r3, #16
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d01b      	beq.n	80111dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	f06f 0210 	mvn.w	r2, #16
 80111ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2208      	movs	r2, #8
 80111b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	69db      	ldr	r3, [r3, #28]
 80111ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d003      	beq.n	80111ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80111c2:	6878      	ldr	r0, [r7, #4]
 80111c4:	f000 f860 	bl	8011288 <HAL_TIM_IC_CaptureCallback>
 80111c8:	e005      	b.n	80111d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f000 f852 	bl	8011274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f000 f863 	bl	801129c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	2200      	movs	r2, #0
 80111da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	f003 0301 	and.w	r3, r3, #1
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d00c      	beq.n	8011200 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	f003 0301 	and.w	r3, r3, #1
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d007      	beq.n	8011200 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	f06f 0201 	mvn.w	r2, #1
 80111f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f7fc fd9a 	bl	800dd34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011206:	2b00      	cmp	r3, #0
 8011208:	d00c      	beq.n	8011224 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011210:	2b00      	cmp	r3, #0
 8011212:	d007      	beq.n	8011224 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 801121c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f000 f900 	bl	8011424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801122a:	2b00      	cmp	r3, #0
 801122c:	d00c      	beq.n	8011248 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011234:	2b00      	cmp	r3, #0
 8011236:	d007      	beq.n	8011248 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8011240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f000 f834 	bl	80112b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8011248:	68bb      	ldr	r3, [r7, #8]
 801124a:	f003 0320 	and.w	r3, r3, #32
 801124e:	2b00      	cmp	r3, #0
 8011250:	d00c      	beq.n	801126c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	f003 0320 	and.w	r3, r3, #32
 8011258:	2b00      	cmp	r3, #0
 801125a:	d007      	beq.n	801126c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	f06f 0220 	mvn.w	r2, #32
 8011264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f000 f8d2 	bl	8011410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801126c:	bf00      	nop
 801126e:	3710      	adds	r7, #16
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}

08011274 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011274:	b480      	push	{r7}
 8011276:	b083      	sub	sp, #12
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801127c:	bf00      	nop
 801127e:	370c      	adds	r7, #12
 8011280:	46bd      	mov	sp, r7
 8011282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011286:	4770      	bx	lr

08011288 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011288:	b480      	push	{r7}
 801128a:	b083      	sub	sp, #12
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011290:	bf00      	nop
 8011292:	370c      	adds	r7, #12
 8011294:	46bd      	mov	sp, r7
 8011296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129a:	4770      	bx	lr

0801129c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801129c:	b480      	push	{r7}
 801129e:	b083      	sub	sp, #12
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80112a4:	bf00      	nop
 80112a6:	370c      	adds	r7, #12
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr

080112b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80112b0:	b480      	push	{r7}
 80112b2:	b083      	sub	sp, #12
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80112b8:	bf00      	nop
 80112ba:	370c      	adds	r7, #12
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr

080112c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80112c4:	b480      	push	{r7}
 80112c6:	b085      	sub	sp, #20
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	4a43      	ldr	r2, [pc, #268]	@ (80113e4 <TIM_Base_SetConfig+0x120>)
 80112d8:	4293      	cmp	r3, r2
 80112da:	d013      	beq.n	8011304 <TIM_Base_SetConfig+0x40>
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80112e2:	d00f      	beq.n	8011304 <TIM_Base_SetConfig+0x40>
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	4a40      	ldr	r2, [pc, #256]	@ (80113e8 <TIM_Base_SetConfig+0x124>)
 80112e8:	4293      	cmp	r3, r2
 80112ea:	d00b      	beq.n	8011304 <TIM_Base_SetConfig+0x40>
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	4a3f      	ldr	r2, [pc, #252]	@ (80113ec <TIM_Base_SetConfig+0x128>)
 80112f0:	4293      	cmp	r3, r2
 80112f2:	d007      	beq.n	8011304 <TIM_Base_SetConfig+0x40>
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	4a3e      	ldr	r2, [pc, #248]	@ (80113f0 <TIM_Base_SetConfig+0x12c>)
 80112f8:	4293      	cmp	r3, r2
 80112fa:	d003      	beq.n	8011304 <TIM_Base_SetConfig+0x40>
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	4a3d      	ldr	r2, [pc, #244]	@ (80113f4 <TIM_Base_SetConfig+0x130>)
 8011300:	4293      	cmp	r3, r2
 8011302:	d108      	bne.n	8011316 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801130a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	68fa      	ldr	r2, [r7, #12]
 8011312:	4313      	orrs	r3, r2
 8011314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	4a32      	ldr	r2, [pc, #200]	@ (80113e4 <TIM_Base_SetConfig+0x120>)
 801131a:	4293      	cmp	r3, r2
 801131c:	d02b      	beq.n	8011376 <TIM_Base_SetConfig+0xb2>
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011324:	d027      	beq.n	8011376 <TIM_Base_SetConfig+0xb2>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	4a2f      	ldr	r2, [pc, #188]	@ (80113e8 <TIM_Base_SetConfig+0x124>)
 801132a:	4293      	cmp	r3, r2
 801132c:	d023      	beq.n	8011376 <TIM_Base_SetConfig+0xb2>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	4a2e      	ldr	r2, [pc, #184]	@ (80113ec <TIM_Base_SetConfig+0x128>)
 8011332:	4293      	cmp	r3, r2
 8011334:	d01f      	beq.n	8011376 <TIM_Base_SetConfig+0xb2>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	4a2d      	ldr	r2, [pc, #180]	@ (80113f0 <TIM_Base_SetConfig+0x12c>)
 801133a:	4293      	cmp	r3, r2
 801133c:	d01b      	beq.n	8011376 <TIM_Base_SetConfig+0xb2>
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	4a2c      	ldr	r2, [pc, #176]	@ (80113f4 <TIM_Base_SetConfig+0x130>)
 8011342:	4293      	cmp	r3, r2
 8011344:	d017      	beq.n	8011376 <TIM_Base_SetConfig+0xb2>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4a2b      	ldr	r2, [pc, #172]	@ (80113f8 <TIM_Base_SetConfig+0x134>)
 801134a:	4293      	cmp	r3, r2
 801134c:	d013      	beq.n	8011376 <TIM_Base_SetConfig+0xb2>
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	4a2a      	ldr	r2, [pc, #168]	@ (80113fc <TIM_Base_SetConfig+0x138>)
 8011352:	4293      	cmp	r3, r2
 8011354:	d00f      	beq.n	8011376 <TIM_Base_SetConfig+0xb2>
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	4a29      	ldr	r2, [pc, #164]	@ (8011400 <TIM_Base_SetConfig+0x13c>)
 801135a:	4293      	cmp	r3, r2
 801135c:	d00b      	beq.n	8011376 <TIM_Base_SetConfig+0xb2>
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	4a28      	ldr	r2, [pc, #160]	@ (8011404 <TIM_Base_SetConfig+0x140>)
 8011362:	4293      	cmp	r3, r2
 8011364:	d007      	beq.n	8011376 <TIM_Base_SetConfig+0xb2>
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	4a27      	ldr	r2, [pc, #156]	@ (8011408 <TIM_Base_SetConfig+0x144>)
 801136a:	4293      	cmp	r3, r2
 801136c:	d003      	beq.n	8011376 <TIM_Base_SetConfig+0xb2>
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	4a26      	ldr	r2, [pc, #152]	@ (801140c <TIM_Base_SetConfig+0x148>)
 8011372:	4293      	cmp	r3, r2
 8011374:	d108      	bne.n	8011388 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801137c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	68db      	ldr	r3, [r3, #12]
 8011382:	68fa      	ldr	r2, [r7, #12]
 8011384:	4313      	orrs	r3, r2
 8011386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	695b      	ldr	r3, [r3, #20]
 8011392:	4313      	orrs	r3, r2
 8011394:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	689a      	ldr	r2, [r3, #8]
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	681a      	ldr	r2, [r3, #0]
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	4a0e      	ldr	r2, [pc, #56]	@ (80113e4 <TIM_Base_SetConfig+0x120>)
 80113aa:	4293      	cmp	r3, r2
 80113ac:	d003      	beq.n	80113b6 <TIM_Base_SetConfig+0xf2>
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	4a10      	ldr	r2, [pc, #64]	@ (80113f4 <TIM_Base_SetConfig+0x130>)
 80113b2:	4293      	cmp	r3, r2
 80113b4:	d103      	bne.n	80113be <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80113b6:	683b      	ldr	r3, [r7, #0]
 80113b8:	691a      	ldr	r2, [r3, #16]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	f043 0204 	orr.w	r2, r3, #4
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	2201      	movs	r2, #1
 80113ce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	68fa      	ldr	r2, [r7, #12]
 80113d4:	601a      	str	r2, [r3, #0]
}
 80113d6:	bf00      	nop
 80113d8:	3714      	adds	r7, #20
 80113da:	46bd      	mov	sp, r7
 80113dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e0:	4770      	bx	lr
 80113e2:	bf00      	nop
 80113e4:	40010000 	.word	0x40010000
 80113e8:	40000400 	.word	0x40000400
 80113ec:	40000800 	.word	0x40000800
 80113f0:	40000c00 	.word	0x40000c00
 80113f4:	40010400 	.word	0x40010400
 80113f8:	40014000 	.word	0x40014000
 80113fc:	40014400 	.word	0x40014400
 8011400:	40014800 	.word	0x40014800
 8011404:	40001800 	.word	0x40001800
 8011408:	40001c00 	.word	0x40001c00
 801140c:	40002000 	.word	0x40002000

08011410 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011410:	b480      	push	{r7}
 8011412:	b083      	sub	sp, #12
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011418:	bf00      	nop
 801141a:	370c      	adds	r7, #12
 801141c:	46bd      	mov	sp, r7
 801141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011422:	4770      	bx	lr

08011424 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011424:	b480      	push	{r7}
 8011426:	b083      	sub	sp, #12
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801142c:	bf00      	nop
 801142e:	370c      	adds	r7, #12
 8011430:	46bd      	mov	sp, r7
 8011432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011436:	4770      	bx	lr

08011438 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b082      	sub	sp, #8
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d101      	bne.n	801144a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011446:	2301      	movs	r3, #1
 8011448:	e042      	b.n	80114d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011450:	b2db      	uxtb	r3, r3
 8011452:	2b00      	cmp	r3, #0
 8011454:	d106      	bne.n	8011464 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	2200      	movs	r2, #0
 801145a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f7fc fd4e 	bl	800df00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2224      	movs	r2, #36	@ 0x24
 8011468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	68da      	ldr	r2, [r3, #12]
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801147a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f000 fdd3 	bl	8012028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	691a      	ldr	r2, [r3, #16]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011490:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	695a      	ldr	r2, [r3, #20]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80114a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	68da      	ldr	r2, [r3, #12]
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80114b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2200      	movs	r2, #0
 80114b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2220      	movs	r2, #32
 80114bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2220      	movs	r2, #32
 80114c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2200      	movs	r2, #0
 80114cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80114ce:	2300      	movs	r3, #0
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	3708      	adds	r7, #8
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}

080114d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b08a      	sub	sp, #40	@ 0x28
 80114dc:	af02      	add	r7, sp, #8
 80114de:	60f8      	str	r0, [r7, #12]
 80114e0:	60b9      	str	r1, [r7, #8]
 80114e2:	603b      	str	r3, [r7, #0]
 80114e4:	4613      	mov	r3, r2
 80114e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80114e8:	2300      	movs	r3, #0
 80114ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80114f2:	b2db      	uxtb	r3, r3
 80114f4:	2b20      	cmp	r3, #32
 80114f6:	d175      	bne.n	80115e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d002      	beq.n	8011504 <HAL_UART_Transmit+0x2c>
 80114fe:	88fb      	ldrh	r3, [r7, #6]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d101      	bne.n	8011508 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8011504:	2301      	movs	r3, #1
 8011506:	e06e      	b.n	80115e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	2200      	movs	r2, #0
 801150c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	2221      	movs	r2, #33	@ 0x21
 8011512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011516:	f7fd fc59 	bl	800edcc <HAL_GetTick>
 801151a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	88fa      	ldrh	r2, [r7, #6]
 8011520:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	88fa      	ldrh	r2, [r7, #6]
 8011526:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	689b      	ldr	r3, [r3, #8]
 801152c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011530:	d108      	bne.n	8011544 <HAL_UART_Transmit+0x6c>
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	691b      	ldr	r3, [r3, #16]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d104      	bne.n	8011544 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801153a:	2300      	movs	r3, #0
 801153c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	61bb      	str	r3, [r7, #24]
 8011542:	e003      	b.n	801154c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011548:	2300      	movs	r3, #0
 801154a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801154c:	e02e      	b.n	80115ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	9300      	str	r3, [sp, #0]
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	2200      	movs	r2, #0
 8011556:	2180      	movs	r1, #128	@ 0x80
 8011558:	68f8      	ldr	r0, [r7, #12]
 801155a:	f000 fb37 	bl	8011bcc <UART_WaitOnFlagUntilTimeout>
 801155e:	4603      	mov	r3, r0
 8011560:	2b00      	cmp	r3, #0
 8011562:	d005      	beq.n	8011570 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	2220      	movs	r2, #32
 8011568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 801156c:	2303      	movs	r3, #3
 801156e:	e03a      	b.n	80115e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8011570:	69fb      	ldr	r3, [r7, #28]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d10b      	bne.n	801158e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011576:	69bb      	ldr	r3, [r7, #24]
 8011578:	881b      	ldrh	r3, [r3, #0]
 801157a:	461a      	mov	r2, r3
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011584:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8011586:	69bb      	ldr	r3, [r7, #24]
 8011588:	3302      	adds	r3, #2
 801158a:	61bb      	str	r3, [r7, #24]
 801158c:	e007      	b.n	801159e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801158e:	69fb      	ldr	r3, [r7, #28]
 8011590:	781a      	ldrb	r2, [r3, #0]
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8011598:	69fb      	ldr	r3, [r7, #28]
 801159a:	3301      	adds	r3, #1
 801159c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80115a2:	b29b      	uxth	r3, r3
 80115a4:	3b01      	subs	r3, #1
 80115a6:	b29a      	uxth	r2, r3
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80115b0:	b29b      	uxth	r3, r3
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d1cb      	bne.n	801154e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	9300      	str	r3, [sp, #0]
 80115ba:	697b      	ldr	r3, [r7, #20]
 80115bc:	2200      	movs	r2, #0
 80115be:	2140      	movs	r1, #64	@ 0x40
 80115c0:	68f8      	ldr	r0, [r7, #12]
 80115c2:	f000 fb03 	bl	8011bcc <UART_WaitOnFlagUntilTimeout>
 80115c6:	4603      	mov	r3, r0
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d005      	beq.n	80115d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	2220      	movs	r2, #32
 80115d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80115d4:	2303      	movs	r3, #3
 80115d6:	e006      	b.n	80115e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	2220      	movs	r2, #32
 80115dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80115e0:	2300      	movs	r3, #0
 80115e2:	e000      	b.n	80115e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80115e4:	2302      	movs	r3, #2
  }
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3720      	adds	r7, #32
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}

080115ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80115ee:	b580      	push	{r7, lr}
 80115f0:	b084      	sub	sp, #16
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	60f8      	str	r0, [r7, #12]
 80115f6:	60b9      	str	r1, [r7, #8]
 80115f8:	4613      	mov	r3, r2
 80115fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011602:	b2db      	uxtb	r3, r3
 8011604:	2b20      	cmp	r3, #32
 8011606:	d112      	bne.n	801162e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d002      	beq.n	8011614 <HAL_UART_Receive_IT+0x26>
 801160e:	88fb      	ldrh	r3, [r7, #6]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d101      	bne.n	8011618 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8011614:	2301      	movs	r3, #1
 8011616:	e00b      	b.n	8011630 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	2200      	movs	r2, #0
 801161c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 801161e:	88fb      	ldrh	r3, [r7, #6]
 8011620:	461a      	mov	r2, r3
 8011622:	68b9      	ldr	r1, [r7, #8]
 8011624:	68f8      	ldr	r0, [r7, #12]
 8011626:	f000 fb2a 	bl	8011c7e <UART_Start_Receive_IT>
 801162a:	4603      	mov	r3, r0
 801162c:	e000      	b.n	8011630 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 801162e:	2302      	movs	r3, #2
  }
}
 8011630:	4618      	mov	r0, r3
 8011632:	3710      	adds	r7, #16
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}

08011638 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b0ba      	sub	sp, #232	@ 0xe8
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	68db      	ldr	r3, [r3, #12]
 8011650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	695b      	ldr	r3, [r3, #20]
 801165a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 801165e:	2300      	movs	r3, #0
 8011660:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8011664:	2300      	movs	r3, #0
 8011666:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801166a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801166e:	f003 030f 	and.w	r3, r3, #15
 8011672:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8011676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801167a:	2b00      	cmp	r3, #0
 801167c:	d10f      	bne.n	801169e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801167e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011682:	f003 0320 	and.w	r3, r3, #32
 8011686:	2b00      	cmp	r3, #0
 8011688:	d009      	beq.n	801169e <HAL_UART_IRQHandler+0x66>
 801168a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801168e:	f003 0320 	and.w	r3, r3, #32
 8011692:	2b00      	cmp	r3, #0
 8011694:	d003      	beq.n	801169e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f000 fc07 	bl	8011eaa <UART_Receive_IT>
      return;
 801169c:	e273      	b.n	8011b86 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801169e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	f000 80de 	beq.w	8011864 <HAL_UART_IRQHandler+0x22c>
 80116a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80116ac:	f003 0301 	and.w	r3, r3, #1
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d106      	bne.n	80116c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80116b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80116b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80116bc:	2b00      	cmp	r3, #0
 80116be:	f000 80d1 	beq.w	8011864 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80116c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80116c6:	f003 0301 	and.w	r3, r3, #1
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d00b      	beq.n	80116e6 <HAL_UART_IRQHandler+0xae>
 80116ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80116d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d005      	beq.n	80116e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80116de:	f043 0201 	orr.w	r2, r3, #1
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80116e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80116ea:	f003 0304 	and.w	r3, r3, #4
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d00b      	beq.n	801170a <HAL_UART_IRQHandler+0xd2>
 80116f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80116f6:	f003 0301 	and.w	r3, r3, #1
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d005      	beq.n	801170a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011702:	f043 0202 	orr.w	r2, r3, #2
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801170a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801170e:	f003 0302 	and.w	r3, r3, #2
 8011712:	2b00      	cmp	r3, #0
 8011714:	d00b      	beq.n	801172e <HAL_UART_IRQHandler+0xf6>
 8011716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801171a:	f003 0301 	and.w	r3, r3, #1
 801171e:	2b00      	cmp	r3, #0
 8011720:	d005      	beq.n	801172e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011726:	f043 0204 	orr.w	r2, r3, #4
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801172e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011732:	f003 0308 	and.w	r3, r3, #8
 8011736:	2b00      	cmp	r3, #0
 8011738:	d011      	beq.n	801175e <HAL_UART_IRQHandler+0x126>
 801173a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801173e:	f003 0320 	and.w	r3, r3, #32
 8011742:	2b00      	cmp	r3, #0
 8011744:	d105      	bne.n	8011752 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8011746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801174a:	f003 0301 	and.w	r3, r3, #1
 801174e:	2b00      	cmp	r3, #0
 8011750:	d005      	beq.n	801175e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011756:	f043 0208 	orr.w	r2, r3, #8
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011762:	2b00      	cmp	r3, #0
 8011764:	f000 820a 	beq.w	8011b7c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801176c:	f003 0320 	and.w	r3, r3, #32
 8011770:	2b00      	cmp	r3, #0
 8011772:	d008      	beq.n	8011786 <HAL_UART_IRQHandler+0x14e>
 8011774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011778:	f003 0320 	and.w	r3, r3, #32
 801177c:	2b00      	cmp	r3, #0
 801177e:	d002      	beq.n	8011786 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f000 fb92 	bl	8011eaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	695b      	ldr	r3, [r3, #20]
 801178c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011790:	2b40      	cmp	r3, #64	@ 0x40
 8011792:	bf0c      	ite	eq
 8011794:	2301      	moveq	r3, #1
 8011796:	2300      	movne	r3, #0
 8011798:	b2db      	uxtb	r3, r3
 801179a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80117a2:	f003 0308 	and.w	r3, r3, #8
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d103      	bne.n	80117b2 <HAL_UART_IRQHandler+0x17a>
 80117aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d04f      	beq.n	8011852 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f000 fa9d 	bl	8011cf2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	695b      	ldr	r3, [r3, #20]
 80117be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80117c2:	2b40      	cmp	r3, #64	@ 0x40
 80117c4:	d141      	bne.n	801184a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	3314      	adds	r3, #20
 80117cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80117d4:	e853 3f00 	ldrex	r3, [r3]
 80117d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80117dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80117e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80117e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	3314      	adds	r3, #20
 80117ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80117f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80117f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80117fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011802:	e841 2300 	strex	r3, r2, [r1]
 8011806:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801180a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801180e:	2b00      	cmp	r3, #0
 8011810:	d1d9      	bne.n	80117c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011816:	2b00      	cmp	r3, #0
 8011818:	d013      	beq.n	8011842 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801181e:	4a8a      	ldr	r2, [pc, #552]	@ (8011a48 <HAL_UART_IRQHandler+0x410>)
 8011820:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011826:	4618      	mov	r0, r3
 8011828:	f7fd fc52 	bl	800f0d0 <HAL_DMA_Abort_IT>
 801182c:	4603      	mov	r3, r0
 801182e:	2b00      	cmp	r3, #0
 8011830:	d016      	beq.n	8011860 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011838:	687a      	ldr	r2, [r7, #4]
 801183a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801183c:	4610      	mov	r0, r2
 801183e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011840:	e00e      	b.n	8011860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f000 f9ac 	bl	8011ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011848:	e00a      	b.n	8011860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f000 f9a8 	bl	8011ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011850:	e006      	b.n	8011860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011852:	6878      	ldr	r0, [r7, #4]
 8011854:	f000 f9a4 	bl	8011ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2200      	movs	r2, #0
 801185c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 801185e:	e18d      	b.n	8011b7c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011860:	bf00      	nop
    return;
 8011862:	e18b      	b.n	8011b7c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011868:	2b01      	cmp	r3, #1
 801186a:	f040 8167 	bne.w	8011b3c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801186e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011872:	f003 0310 	and.w	r3, r3, #16
 8011876:	2b00      	cmp	r3, #0
 8011878:	f000 8160 	beq.w	8011b3c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 801187c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011880:	f003 0310 	and.w	r3, r3, #16
 8011884:	2b00      	cmp	r3, #0
 8011886:	f000 8159 	beq.w	8011b3c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801188a:	2300      	movs	r3, #0
 801188c:	60bb      	str	r3, [r7, #8]
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	60bb      	str	r3, [r7, #8]
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	685b      	ldr	r3, [r3, #4]
 801189c:	60bb      	str	r3, [r7, #8]
 801189e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	695b      	ldr	r3, [r3, #20]
 80118a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80118aa:	2b40      	cmp	r3, #64	@ 0x40
 80118ac:	f040 80ce 	bne.w	8011a4c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	685b      	ldr	r3, [r3, #4]
 80118b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80118bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	f000 80a9 	beq.w	8011a18 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80118ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80118ce:	429a      	cmp	r2, r3
 80118d0:	f080 80a2 	bcs.w	8011a18 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80118da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80118e0:	69db      	ldr	r3, [r3, #28]
 80118e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80118e6:	f000 8088 	beq.w	80119fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	330c      	adds	r3, #12
 80118f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80118f8:	e853 3f00 	ldrex	r3, [r3]
 80118fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8011900:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011908:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	330c      	adds	r3, #12
 8011912:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8011916:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801191a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801191e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8011922:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011926:	e841 2300 	strex	r3, r2, [r1]
 801192a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801192e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011932:	2b00      	cmp	r3, #0
 8011934:	d1d9      	bne.n	80118ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	3314      	adds	r3, #20
 801193c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801193e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011940:	e853 3f00 	ldrex	r3, [r3]
 8011944:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011946:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011948:	f023 0301 	bic.w	r3, r3, #1
 801194c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	3314      	adds	r3, #20
 8011956:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801195a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801195e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011960:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011962:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011966:	e841 2300 	strex	r3, r2, [r1]
 801196a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801196c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801196e:	2b00      	cmp	r3, #0
 8011970:	d1e1      	bne.n	8011936 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	3314      	adds	r3, #20
 8011978:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801197a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801197c:	e853 3f00 	ldrex	r3, [r3]
 8011980:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011982:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011984:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011988:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	3314      	adds	r3, #20
 8011992:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011996:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011998:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801199a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801199c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801199e:	e841 2300 	strex	r3, r2, [r1]
 80119a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80119a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d1e3      	bne.n	8011972 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2220      	movs	r2, #32
 80119ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2200      	movs	r2, #0
 80119b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	330c      	adds	r3, #12
 80119be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80119c2:	e853 3f00 	ldrex	r3, [r3]
 80119c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80119c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80119ca:	f023 0310 	bic.w	r3, r3, #16
 80119ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	330c      	adds	r3, #12
 80119d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80119dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80119de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80119e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80119e4:	e841 2300 	strex	r3, r2, [r1]
 80119e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80119ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d1e3      	bne.n	80119b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7fd fafb 	bl	800eff0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	2202      	movs	r2, #2
 80119fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011a08:	b29b      	uxth	r3, r3
 8011a0a:	1ad3      	subs	r3, r2, r3
 8011a0c:	b29b      	uxth	r3, r3
 8011a0e:	4619      	mov	r1, r3
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f000 f8cf 	bl	8011bb4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8011a16:	e0b3      	b.n	8011b80 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011a1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011a20:	429a      	cmp	r2, r3
 8011a22:	f040 80ad 	bne.w	8011b80 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a2a:	69db      	ldr	r3, [r3, #28]
 8011a2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011a30:	f040 80a6 	bne.w	8011b80 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2202      	movs	r2, #2
 8011a38:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011a3e:	4619      	mov	r1, r3
 8011a40:	6878      	ldr	r0, [r7, #4]
 8011a42:	f000 f8b7 	bl	8011bb4 <HAL_UARTEx_RxEventCallback>
      return;
 8011a46:	e09b      	b.n	8011b80 <HAL_UART_IRQHandler+0x548>
 8011a48:	08011db9 	.word	0x08011db9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011a54:	b29b      	uxth	r3, r3
 8011a56:	1ad3      	subs	r3, r2, r3
 8011a58:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011a60:	b29b      	uxth	r3, r3
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	f000 808e 	beq.w	8011b84 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8011a68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	f000 8089 	beq.w	8011b84 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	330c      	adds	r3, #12
 8011a78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a7c:	e853 3f00 	ldrex	r3, [r3]
 8011a80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011a88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	330c      	adds	r3, #12
 8011a92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8011a96:	647a      	str	r2, [r7, #68]	@ 0x44
 8011a98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011a9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011a9e:	e841 2300 	strex	r3, r2, [r1]
 8011aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d1e3      	bne.n	8011a72 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	3314      	adds	r3, #20
 8011ab0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ab4:	e853 3f00 	ldrex	r3, [r3]
 8011ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8011aba:	6a3b      	ldr	r3, [r7, #32]
 8011abc:	f023 0301 	bic.w	r3, r3, #1
 8011ac0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	3314      	adds	r3, #20
 8011aca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8011ace:	633a      	str	r2, [r7, #48]	@ 0x30
 8011ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ad2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011ad4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ad6:	e841 2300 	strex	r3, r2, [r1]
 8011ada:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d1e3      	bne.n	8011aaa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2220      	movs	r2, #32
 8011ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2200      	movs	r2, #0
 8011aee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	330c      	adds	r3, #12
 8011af6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	e853 3f00 	ldrex	r3, [r3]
 8011afe:	60fb      	str	r3, [r7, #12]
   return(result);
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	f023 0310 	bic.w	r3, r3, #16
 8011b06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	330c      	adds	r3, #12
 8011b10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8011b14:	61fa      	str	r2, [r7, #28]
 8011b16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b18:	69b9      	ldr	r1, [r7, #24]
 8011b1a:	69fa      	ldr	r2, [r7, #28]
 8011b1c:	e841 2300 	strex	r3, r2, [r1]
 8011b20:	617b      	str	r3, [r7, #20]
   return(result);
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d1e3      	bne.n	8011af0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2202      	movs	r2, #2
 8011b2c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011b2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011b32:	4619      	mov	r1, r3
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f000 f83d 	bl	8011bb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011b3a:	e023      	b.n	8011b84 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8011b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d009      	beq.n	8011b5c <HAL_UART_IRQHandler+0x524>
 8011b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d003      	beq.n	8011b5c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f000 f940 	bl	8011dda <UART_Transmit_IT>
    return;
 8011b5a:	e014      	b.n	8011b86 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8011b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d00e      	beq.n	8011b86 <HAL_UART_IRQHandler+0x54e>
 8011b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d008      	beq.n	8011b86 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f000 f980 	bl	8011e7a <UART_EndTransmit_IT>
    return;
 8011b7a:	e004      	b.n	8011b86 <HAL_UART_IRQHandler+0x54e>
    return;
 8011b7c:	bf00      	nop
 8011b7e:	e002      	b.n	8011b86 <HAL_UART_IRQHandler+0x54e>
      return;
 8011b80:	bf00      	nop
 8011b82:	e000      	b.n	8011b86 <HAL_UART_IRQHandler+0x54e>
      return;
 8011b84:	bf00      	nop
  }
}
 8011b86:	37e8      	adds	r7, #232	@ 0xe8
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}

08011b8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	b083      	sub	sp, #12
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011b94:	bf00      	nop
 8011b96:	370c      	adds	r7, #12
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9e:	4770      	bx	lr

08011ba0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011ba0:	b480      	push	{r7}
 8011ba2:	b083      	sub	sp, #12
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8011ba8:	bf00      	nop
 8011baa:	370c      	adds	r7, #12
 8011bac:	46bd      	mov	sp, r7
 8011bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb2:	4770      	bx	lr

08011bb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011bb4:	b480      	push	{r7}
 8011bb6:	b083      	sub	sp, #12
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	460b      	mov	r3, r1
 8011bbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011bc0:	bf00      	nop
 8011bc2:	370c      	adds	r7, #12
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bca:	4770      	bx	lr

08011bcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b086      	sub	sp, #24
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	60f8      	str	r0, [r7, #12]
 8011bd4:	60b9      	str	r1, [r7, #8]
 8011bd6:	603b      	str	r3, [r7, #0]
 8011bd8:	4613      	mov	r3, r2
 8011bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011bdc:	e03b      	b.n	8011c56 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011bde:	6a3b      	ldr	r3, [r7, #32]
 8011be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011be4:	d037      	beq.n	8011c56 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011be6:	f7fd f8f1 	bl	800edcc <HAL_GetTick>
 8011bea:	4602      	mov	r2, r0
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	1ad3      	subs	r3, r2, r3
 8011bf0:	6a3a      	ldr	r2, [r7, #32]
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	d302      	bcc.n	8011bfc <UART_WaitOnFlagUntilTimeout+0x30>
 8011bf6:	6a3b      	ldr	r3, [r7, #32]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d101      	bne.n	8011c00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011bfc:	2303      	movs	r3, #3
 8011bfe:	e03a      	b.n	8011c76 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	68db      	ldr	r3, [r3, #12]
 8011c06:	f003 0304 	and.w	r3, r3, #4
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d023      	beq.n	8011c56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	2b80      	cmp	r3, #128	@ 0x80
 8011c12:	d020      	beq.n	8011c56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	2b40      	cmp	r3, #64	@ 0x40
 8011c18:	d01d      	beq.n	8011c56 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	f003 0308 	and.w	r3, r3, #8
 8011c24:	2b08      	cmp	r3, #8
 8011c26:	d116      	bne.n	8011c56 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8011c28:	2300      	movs	r3, #0
 8011c2a:	617b      	str	r3, [r7, #20]
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	617b      	str	r3, [r7, #20]
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	617b      	str	r3, [r7, #20]
 8011c3c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011c3e:	68f8      	ldr	r0, [r7, #12]
 8011c40:	f000 f857 	bl	8011cf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	2208      	movs	r2, #8
 8011c48:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8011c52:	2301      	movs	r3, #1
 8011c54:	e00f      	b.n	8011c76 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	681a      	ldr	r2, [r3, #0]
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	4013      	ands	r3, r2
 8011c60:	68ba      	ldr	r2, [r7, #8]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	bf0c      	ite	eq
 8011c66:	2301      	moveq	r3, #1
 8011c68:	2300      	movne	r3, #0
 8011c6a:	b2db      	uxtb	r3, r3
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	79fb      	ldrb	r3, [r7, #7]
 8011c70:	429a      	cmp	r2, r3
 8011c72:	d0b4      	beq.n	8011bde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011c74:	2300      	movs	r3, #0
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	3718      	adds	r7, #24
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}

08011c7e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011c7e:	b480      	push	{r7}
 8011c80:	b085      	sub	sp, #20
 8011c82:	af00      	add	r7, sp, #0
 8011c84:	60f8      	str	r0, [r7, #12]
 8011c86:	60b9      	str	r1, [r7, #8]
 8011c88:	4613      	mov	r3, r2
 8011c8a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	68ba      	ldr	r2, [r7, #8]
 8011c90:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	88fa      	ldrh	r2, [r7, #6]
 8011c96:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	88fa      	ldrh	r2, [r7, #6]
 8011c9c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	2222      	movs	r2, #34	@ 0x22
 8011ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	691b      	ldr	r3, [r3, #16]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d007      	beq.n	8011cc4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	68da      	ldr	r2, [r3, #12]
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011cc2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	695a      	ldr	r2, [r3, #20]
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	f042 0201 	orr.w	r2, r2, #1
 8011cd2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	68da      	ldr	r2, [r3, #12]
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	f042 0220 	orr.w	r2, r2, #32
 8011ce2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011ce4:	2300      	movs	r3, #0
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3714      	adds	r7, #20
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr

08011cf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011cf2:	b480      	push	{r7}
 8011cf4:	b095      	sub	sp, #84	@ 0x54
 8011cf6:	af00      	add	r7, sp, #0
 8011cf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	330c      	adds	r3, #12
 8011d00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d04:	e853 3f00 	ldrex	r3, [r3]
 8011d08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	330c      	adds	r3, #12
 8011d18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011d1a:	643a      	str	r2, [r7, #64]	@ 0x40
 8011d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011d20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011d22:	e841 2300 	strex	r3, r2, [r1]
 8011d26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d1e5      	bne.n	8011cfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	3314      	adds	r3, #20
 8011d34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d36:	6a3b      	ldr	r3, [r7, #32]
 8011d38:	e853 3f00 	ldrex	r3, [r3]
 8011d3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8011d3e:	69fb      	ldr	r3, [r7, #28]
 8011d40:	f023 0301 	bic.w	r3, r3, #1
 8011d44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	3314      	adds	r3, #20
 8011d4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011d4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011d50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011d54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011d56:	e841 2300 	strex	r3, r2, [r1]
 8011d5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d1e5      	bne.n	8011d2e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d66:	2b01      	cmp	r3, #1
 8011d68:	d119      	bne.n	8011d9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	330c      	adds	r3, #12
 8011d70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	e853 3f00 	ldrex	r3, [r3]
 8011d78:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	f023 0310 	bic.w	r3, r3, #16
 8011d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	330c      	adds	r3, #12
 8011d88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011d8a:	61ba      	str	r2, [r7, #24]
 8011d8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d8e:	6979      	ldr	r1, [r7, #20]
 8011d90:	69ba      	ldr	r2, [r7, #24]
 8011d92:	e841 2300 	strex	r3, r2, [r1]
 8011d96:	613b      	str	r3, [r7, #16]
   return(result);
 8011d98:	693b      	ldr	r3, [r7, #16]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d1e5      	bne.n	8011d6a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2220      	movs	r2, #32
 8011da2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	2200      	movs	r2, #0
 8011daa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8011dac:	bf00      	nop
 8011dae:	3754      	adds	r7, #84	@ 0x54
 8011db0:	46bd      	mov	sp, r7
 8011db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db6:	4770      	bx	lr

08011db8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b084      	sub	sp, #16
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	2200      	movs	r2, #0
 8011dca:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011dcc:	68f8      	ldr	r0, [r7, #12]
 8011dce:	f7ff fee7 	bl	8011ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011dd2:	bf00      	nop
 8011dd4:	3710      	adds	r7, #16
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}

08011dda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011dda:	b480      	push	{r7}
 8011ddc:	b085      	sub	sp, #20
 8011dde:	af00      	add	r7, sp, #0
 8011de0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011de8:	b2db      	uxtb	r3, r3
 8011dea:	2b21      	cmp	r3, #33	@ 0x21
 8011dec:	d13e      	bne.n	8011e6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	689b      	ldr	r3, [r3, #8]
 8011df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011df6:	d114      	bne.n	8011e22 <UART_Transmit_IT+0x48>
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	691b      	ldr	r3, [r3, #16]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d110      	bne.n	8011e22 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6a1b      	ldr	r3, [r3, #32]
 8011e04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	881b      	ldrh	r3, [r3, #0]
 8011e0a:	461a      	mov	r2, r3
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011e14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6a1b      	ldr	r3, [r3, #32]
 8011e1a:	1c9a      	adds	r2, r3, #2
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	621a      	str	r2, [r3, #32]
 8011e20:	e008      	b.n	8011e34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6a1b      	ldr	r3, [r3, #32]
 8011e26:	1c59      	adds	r1, r3, #1
 8011e28:	687a      	ldr	r2, [r7, #4]
 8011e2a:	6211      	str	r1, [r2, #32]
 8011e2c:	781a      	ldrb	r2, [r3, #0]
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8011e38:	b29b      	uxth	r3, r3
 8011e3a:	3b01      	subs	r3, #1
 8011e3c:	b29b      	uxth	r3, r3
 8011e3e:	687a      	ldr	r2, [r7, #4]
 8011e40:	4619      	mov	r1, r3
 8011e42:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d10f      	bne.n	8011e68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	68da      	ldr	r2, [r3, #12]
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011e56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	68da      	ldr	r2, [r3, #12]
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011e66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	e000      	b.n	8011e6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011e6c:	2302      	movs	r3, #2
  }
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3714      	adds	r7, #20
 8011e72:	46bd      	mov	sp, r7
 8011e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e78:	4770      	bx	lr

08011e7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011e7a:	b580      	push	{r7, lr}
 8011e7c:	b082      	sub	sp, #8
 8011e7e:	af00      	add	r7, sp, #0
 8011e80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	68da      	ldr	r2, [r3, #12]
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011e90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	2220      	movs	r2, #32
 8011e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f7ff fe76 	bl	8011b8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011ea0:	2300      	movs	r3, #0
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	3708      	adds	r7, #8
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}

08011eaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011eaa:	b580      	push	{r7, lr}
 8011eac:	b08c      	sub	sp, #48	@ 0x30
 8011eae:	af00      	add	r7, sp, #0
 8011eb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011ec0:	b2db      	uxtb	r3, r3
 8011ec2:	2b22      	cmp	r3, #34	@ 0x22
 8011ec4:	f040 80aa 	bne.w	801201c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	689b      	ldr	r3, [r3, #8]
 8011ecc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011ed0:	d115      	bne.n	8011efe <UART_Receive_IT+0x54>
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	691b      	ldr	r3, [r3, #16]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d111      	bne.n	8011efe <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ede:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	b29b      	uxth	r3, r3
 8011ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011eec:	b29a      	uxth	r2, r3
 8011eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ef0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ef6:	1c9a      	adds	r2, r3, #2
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	629a      	str	r2, [r3, #40]	@ 0x28
 8011efc:	e024      	b.n	8011f48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	689b      	ldr	r3, [r3, #8]
 8011f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011f0c:	d007      	beq.n	8011f1e <UART_Receive_IT+0x74>
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	689b      	ldr	r3, [r3, #8]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d10a      	bne.n	8011f2c <UART_Receive_IT+0x82>
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	691b      	ldr	r3, [r3, #16]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d106      	bne.n	8011f2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	685b      	ldr	r3, [r3, #4]
 8011f24:	b2da      	uxtb	r2, r3
 8011f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f28:	701a      	strb	r2, [r3, #0]
 8011f2a:	e008      	b.n	8011f3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	685b      	ldr	r3, [r3, #4]
 8011f32:	b2db      	uxtb	r3, r3
 8011f34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011f38:	b2da      	uxtb	r2, r3
 8011f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f42:	1c5a      	adds	r2, r3, #1
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011f4c:	b29b      	uxth	r3, r3
 8011f4e:	3b01      	subs	r3, #1
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	687a      	ldr	r2, [r7, #4]
 8011f54:	4619      	mov	r1, r3
 8011f56:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d15d      	bne.n	8012018 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	68da      	ldr	r2, [r3, #12]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	f022 0220 	bic.w	r2, r2, #32
 8011f6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	68da      	ldr	r2, [r3, #12]
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011f7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	695a      	ldr	r2, [r3, #20]
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	f022 0201 	bic.w	r2, r2, #1
 8011f8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2220      	movs	r2, #32
 8011f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2200      	movs	r2, #0
 8011f98:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f9e:	2b01      	cmp	r3, #1
 8011fa0:	d135      	bne.n	801200e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	330c      	adds	r3, #12
 8011fae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fb0:	697b      	ldr	r3, [r7, #20]
 8011fb2:	e853 3f00 	ldrex	r3, [r3]
 8011fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8011fb8:	693b      	ldr	r3, [r7, #16]
 8011fba:	f023 0310 	bic.w	r3, r3, #16
 8011fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	330c      	adds	r3, #12
 8011fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fc8:	623a      	str	r2, [r7, #32]
 8011fca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fcc:	69f9      	ldr	r1, [r7, #28]
 8011fce:	6a3a      	ldr	r2, [r7, #32]
 8011fd0:	e841 2300 	strex	r3, r2, [r1]
 8011fd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8011fd6:	69bb      	ldr	r3, [r7, #24]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d1e5      	bne.n	8011fa8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	f003 0310 	and.w	r3, r3, #16
 8011fe6:	2b10      	cmp	r3, #16
 8011fe8:	d10a      	bne.n	8012000 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011fea:	2300      	movs	r3, #0
 8011fec:	60fb      	str	r3, [r7, #12]
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	60fb      	str	r3, [r7, #12]
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	685b      	ldr	r3, [r3, #4]
 8011ffc:	60fb      	str	r3, [r7, #12]
 8011ffe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012004:	4619      	mov	r1, r3
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f7ff fdd4 	bl	8011bb4 <HAL_UARTEx_RxEventCallback>
 801200c:	e002      	b.n	8012014 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	f7fc fe3c 	bl	800ec8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8012014:	2300      	movs	r3, #0
 8012016:	e002      	b.n	801201e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8012018:	2300      	movs	r3, #0
 801201a:	e000      	b.n	801201e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 801201c:	2302      	movs	r3, #2
  }
}
 801201e:	4618      	mov	r0, r3
 8012020:	3730      	adds	r7, #48	@ 0x30
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}
	...

08012028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801202c:	b0c0      	sub	sp, #256	@ 0x100
 801202e:	af00      	add	r7, sp, #0
 8012030:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	691b      	ldr	r3, [r3, #16]
 801203c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8012040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012044:	68d9      	ldr	r1, [r3, #12]
 8012046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801204a:	681a      	ldr	r2, [r3, #0]
 801204c:	ea40 0301 	orr.w	r3, r0, r1
 8012050:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8012052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012056:	689a      	ldr	r2, [r3, #8]
 8012058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801205c:	691b      	ldr	r3, [r3, #16]
 801205e:	431a      	orrs	r2, r3
 8012060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012064:	695b      	ldr	r3, [r3, #20]
 8012066:	431a      	orrs	r2, r3
 8012068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801206c:	69db      	ldr	r3, [r3, #28]
 801206e:	4313      	orrs	r3, r2
 8012070:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8012074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	68db      	ldr	r3, [r3, #12]
 801207c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8012080:	f021 010c 	bic.w	r1, r1, #12
 8012084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012088:	681a      	ldr	r2, [r3, #0]
 801208a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801208e:	430b      	orrs	r3, r1
 8012090:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8012092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	695b      	ldr	r3, [r3, #20]
 801209a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801209e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80120a2:	6999      	ldr	r1, [r3, #24]
 80120a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80120a8:	681a      	ldr	r2, [r3, #0]
 80120aa:	ea40 0301 	orr.w	r3, r0, r1
 80120ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80120b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80120b4:	681a      	ldr	r2, [r3, #0]
 80120b6:	4b8f      	ldr	r3, [pc, #572]	@ (80122f4 <UART_SetConfig+0x2cc>)
 80120b8:	429a      	cmp	r2, r3
 80120ba:	d005      	beq.n	80120c8 <UART_SetConfig+0xa0>
 80120bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	4b8d      	ldr	r3, [pc, #564]	@ (80122f8 <UART_SetConfig+0x2d0>)
 80120c4:	429a      	cmp	r2, r3
 80120c6:	d104      	bne.n	80120d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80120c8:	f7fd fb72 	bl	800f7b0 <HAL_RCC_GetPCLK2Freq>
 80120cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80120d0:	e003      	b.n	80120da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80120d2:	f7fd fb59 	bl	800f788 <HAL_RCC_GetPCLK1Freq>
 80120d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80120da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80120de:	69db      	ldr	r3, [r3, #28]
 80120e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80120e4:	f040 810c 	bne.w	8012300 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80120e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80120ec:	2200      	movs	r2, #0
 80120ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80120f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80120f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80120fa:	4622      	mov	r2, r4
 80120fc:	462b      	mov	r3, r5
 80120fe:	1891      	adds	r1, r2, r2
 8012100:	65b9      	str	r1, [r7, #88]	@ 0x58
 8012102:	415b      	adcs	r3, r3
 8012104:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012106:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801210a:	4621      	mov	r1, r4
 801210c:	eb12 0801 	adds.w	r8, r2, r1
 8012110:	4629      	mov	r1, r5
 8012112:	eb43 0901 	adc.w	r9, r3, r1
 8012116:	f04f 0200 	mov.w	r2, #0
 801211a:	f04f 0300 	mov.w	r3, #0
 801211e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8012122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801212a:	4690      	mov	r8, r2
 801212c:	4699      	mov	r9, r3
 801212e:	4623      	mov	r3, r4
 8012130:	eb18 0303 	adds.w	r3, r8, r3
 8012134:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012138:	462b      	mov	r3, r5
 801213a:	eb49 0303 	adc.w	r3, r9, r3
 801213e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012146:	685b      	ldr	r3, [r3, #4]
 8012148:	2200      	movs	r2, #0
 801214a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801214e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8012152:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8012156:	460b      	mov	r3, r1
 8012158:	18db      	adds	r3, r3, r3
 801215a:	653b      	str	r3, [r7, #80]	@ 0x50
 801215c:	4613      	mov	r3, r2
 801215e:	eb42 0303 	adc.w	r3, r2, r3
 8012162:	657b      	str	r3, [r7, #84]	@ 0x54
 8012164:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8012168:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 801216c:	f7f6 fd6c 	bl	8008c48 <__aeabi_uldivmod>
 8012170:	4602      	mov	r2, r0
 8012172:	460b      	mov	r3, r1
 8012174:	4b61      	ldr	r3, [pc, #388]	@ (80122fc <UART_SetConfig+0x2d4>)
 8012176:	fba3 2302 	umull	r2, r3, r3, r2
 801217a:	095b      	lsrs	r3, r3, #5
 801217c:	011c      	lsls	r4, r3, #4
 801217e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012182:	2200      	movs	r2, #0
 8012184:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012188:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 801218c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8012190:	4642      	mov	r2, r8
 8012192:	464b      	mov	r3, r9
 8012194:	1891      	adds	r1, r2, r2
 8012196:	64b9      	str	r1, [r7, #72]	@ 0x48
 8012198:	415b      	adcs	r3, r3
 801219a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801219c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80121a0:	4641      	mov	r1, r8
 80121a2:	eb12 0a01 	adds.w	sl, r2, r1
 80121a6:	4649      	mov	r1, r9
 80121a8:	eb43 0b01 	adc.w	fp, r3, r1
 80121ac:	f04f 0200 	mov.w	r2, #0
 80121b0:	f04f 0300 	mov.w	r3, #0
 80121b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80121b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80121bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80121c0:	4692      	mov	sl, r2
 80121c2:	469b      	mov	fp, r3
 80121c4:	4643      	mov	r3, r8
 80121c6:	eb1a 0303 	adds.w	r3, sl, r3
 80121ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80121ce:	464b      	mov	r3, r9
 80121d0:	eb4b 0303 	adc.w	r3, fp, r3
 80121d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80121d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80121dc:	685b      	ldr	r3, [r3, #4]
 80121de:	2200      	movs	r2, #0
 80121e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80121e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80121e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80121ec:	460b      	mov	r3, r1
 80121ee:	18db      	adds	r3, r3, r3
 80121f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80121f2:	4613      	mov	r3, r2
 80121f4:	eb42 0303 	adc.w	r3, r2, r3
 80121f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80121fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80121fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8012202:	f7f6 fd21 	bl	8008c48 <__aeabi_uldivmod>
 8012206:	4602      	mov	r2, r0
 8012208:	460b      	mov	r3, r1
 801220a:	4611      	mov	r1, r2
 801220c:	4b3b      	ldr	r3, [pc, #236]	@ (80122fc <UART_SetConfig+0x2d4>)
 801220e:	fba3 2301 	umull	r2, r3, r3, r1
 8012212:	095b      	lsrs	r3, r3, #5
 8012214:	2264      	movs	r2, #100	@ 0x64
 8012216:	fb02 f303 	mul.w	r3, r2, r3
 801221a:	1acb      	subs	r3, r1, r3
 801221c:	00db      	lsls	r3, r3, #3
 801221e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8012222:	4b36      	ldr	r3, [pc, #216]	@ (80122fc <UART_SetConfig+0x2d4>)
 8012224:	fba3 2302 	umull	r2, r3, r3, r2
 8012228:	095b      	lsrs	r3, r3, #5
 801222a:	005b      	lsls	r3, r3, #1
 801222c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8012230:	441c      	add	r4, r3
 8012232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012236:	2200      	movs	r2, #0
 8012238:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801223c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8012240:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8012244:	4642      	mov	r2, r8
 8012246:	464b      	mov	r3, r9
 8012248:	1891      	adds	r1, r2, r2
 801224a:	63b9      	str	r1, [r7, #56]	@ 0x38
 801224c:	415b      	adcs	r3, r3
 801224e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012250:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8012254:	4641      	mov	r1, r8
 8012256:	1851      	adds	r1, r2, r1
 8012258:	6339      	str	r1, [r7, #48]	@ 0x30
 801225a:	4649      	mov	r1, r9
 801225c:	414b      	adcs	r3, r1
 801225e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012260:	f04f 0200 	mov.w	r2, #0
 8012264:	f04f 0300 	mov.w	r3, #0
 8012268:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 801226c:	4659      	mov	r1, fp
 801226e:	00cb      	lsls	r3, r1, #3
 8012270:	4651      	mov	r1, sl
 8012272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012276:	4651      	mov	r1, sl
 8012278:	00ca      	lsls	r2, r1, #3
 801227a:	4610      	mov	r0, r2
 801227c:	4619      	mov	r1, r3
 801227e:	4603      	mov	r3, r0
 8012280:	4642      	mov	r2, r8
 8012282:	189b      	adds	r3, r3, r2
 8012284:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012288:	464b      	mov	r3, r9
 801228a:	460a      	mov	r2, r1
 801228c:	eb42 0303 	adc.w	r3, r2, r3
 8012290:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012298:	685b      	ldr	r3, [r3, #4]
 801229a:	2200      	movs	r2, #0
 801229c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80122a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80122a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80122a8:	460b      	mov	r3, r1
 80122aa:	18db      	adds	r3, r3, r3
 80122ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80122ae:	4613      	mov	r3, r2
 80122b0:	eb42 0303 	adc.w	r3, r2, r3
 80122b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80122b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80122ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80122be:	f7f6 fcc3 	bl	8008c48 <__aeabi_uldivmod>
 80122c2:	4602      	mov	r2, r0
 80122c4:	460b      	mov	r3, r1
 80122c6:	4b0d      	ldr	r3, [pc, #52]	@ (80122fc <UART_SetConfig+0x2d4>)
 80122c8:	fba3 1302 	umull	r1, r3, r3, r2
 80122cc:	095b      	lsrs	r3, r3, #5
 80122ce:	2164      	movs	r1, #100	@ 0x64
 80122d0:	fb01 f303 	mul.w	r3, r1, r3
 80122d4:	1ad3      	subs	r3, r2, r3
 80122d6:	00db      	lsls	r3, r3, #3
 80122d8:	3332      	adds	r3, #50	@ 0x32
 80122da:	4a08      	ldr	r2, [pc, #32]	@ (80122fc <UART_SetConfig+0x2d4>)
 80122dc:	fba2 2303 	umull	r2, r3, r2, r3
 80122e0:	095b      	lsrs	r3, r3, #5
 80122e2:	f003 0207 	and.w	r2, r3, #7
 80122e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	4422      	add	r2, r4
 80122ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80122f0:	e106      	b.n	8012500 <UART_SetConfig+0x4d8>
 80122f2:	bf00      	nop
 80122f4:	40011000 	.word	0x40011000
 80122f8:	40011400 	.word	0x40011400
 80122fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8012300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012304:	2200      	movs	r2, #0
 8012306:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801230a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801230e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8012312:	4642      	mov	r2, r8
 8012314:	464b      	mov	r3, r9
 8012316:	1891      	adds	r1, r2, r2
 8012318:	6239      	str	r1, [r7, #32]
 801231a:	415b      	adcs	r3, r3
 801231c:	627b      	str	r3, [r7, #36]	@ 0x24
 801231e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012322:	4641      	mov	r1, r8
 8012324:	1854      	adds	r4, r2, r1
 8012326:	4649      	mov	r1, r9
 8012328:	eb43 0501 	adc.w	r5, r3, r1
 801232c:	f04f 0200 	mov.w	r2, #0
 8012330:	f04f 0300 	mov.w	r3, #0
 8012334:	00eb      	lsls	r3, r5, #3
 8012336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801233a:	00e2      	lsls	r2, r4, #3
 801233c:	4614      	mov	r4, r2
 801233e:	461d      	mov	r5, r3
 8012340:	4643      	mov	r3, r8
 8012342:	18e3      	adds	r3, r4, r3
 8012344:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012348:	464b      	mov	r3, r9
 801234a:	eb45 0303 	adc.w	r3, r5, r3
 801234e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012356:	685b      	ldr	r3, [r3, #4]
 8012358:	2200      	movs	r2, #0
 801235a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801235e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8012362:	f04f 0200 	mov.w	r2, #0
 8012366:	f04f 0300 	mov.w	r3, #0
 801236a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801236e:	4629      	mov	r1, r5
 8012370:	008b      	lsls	r3, r1, #2
 8012372:	4621      	mov	r1, r4
 8012374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012378:	4621      	mov	r1, r4
 801237a:	008a      	lsls	r2, r1, #2
 801237c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8012380:	f7f6 fc62 	bl	8008c48 <__aeabi_uldivmod>
 8012384:	4602      	mov	r2, r0
 8012386:	460b      	mov	r3, r1
 8012388:	4b60      	ldr	r3, [pc, #384]	@ (801250c <UART_SetConfig+0x4e4>)
 801238a:	fba3 2302 	umull	r2, r3, r3, r2
 801238e:	095b      	lsrs	r3, r3, #5
 8012390:	011c      	lsls	r4, r3, #4
 8012392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012396:	2200      	movs	r2, #0
 8012398:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801239c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80123a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80123a4:	4642      	mov	r2, r8
 80123a6:	464b      	mov	r3, r9
 80123a8:	1891      	adds	r1, r2, r2
 80123aa:	61b9      	str	r1, [r7, #24]
 80123ac:	415b      	adcs	r3, r3
 80123ae:	61fb      	str	r3, [r7, #28]
 80123b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80123b4:	4641      	mov	r1, r8
 80123b6:	1851      	adds	r1, r2, r1
 80123b8:	6139      	str	r1, [r7, #16]
 80123ba:	4649      	mov	r1, r9
 80123bc:	414b      	adcs	r3, r1
 80123be:	617b      	str	r3, [r7, #20]
 80123c0:	f04f 0200 	mov.w	r2, #0
 80123c4:	f04f 0300 	mov.w	r3, #0
 80123c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80123cc:	4659      	mov	r1, fp
 80123ce:	00cb      	lsls	r3, r1, #3
 80123d0:	4651      	mov	r1, sl
 80123d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80123d6:	4651      	mov	r1, sl
 80123d8:	00ca      	lsls	r2, r1, #3
 80123da:	4610      	mov	r0, r2
 80123dc:	4619      	mov	r1, r3
 80123de:	4603      	mov	r3, r0
 80123e0:	4642      	mov	r2, r8
 80123e2:	189b      	adds	r3, r3, r2
 80123e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80123e8:	464b      	mov	r3, r9
 80123ea:	460a      	mov	r2, r1
 80123ec:	eb42 0303 	adc.w	r3, r2, r3
 80123f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80123f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80123f8:	685b      	ldr	r3, [r3, #4]
 80123fa:	2200      	movs	r2, #0
 80123fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80123fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8012400:	f04f 0200 	mov.w	r2, #0
 8012404:	f04f 0300 	mov.w	r3, #0
 8012408:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 801240c:	4649      	mov	r1, r9
 801240e:	008b      	lsls	r3, r1, #2
 8012410:	4641      	mov	r1, r8
 8012412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012416:	4641      	mov	r1, r8
 8012418:	008a      	lsls	r2, r1, #2
 801241a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801241e:	f7f6 fc13 	bl	8008c48 <__aeabi_uldivmod>
 8012422:	4602      	mov	r2, r0
 8012424:	460b      	mov	r3, r1
 8012426:	4611      	mov	r1, r2
 8012428:	4b38      	ldr	r3, [pc, #224]	@ (801250c <UART_SetConfig+0x4e4>)
 801242a:	fba3 2301 	umull	r2, r3, r3, r1
 801242e:	095b      	lsrs	r3, r3, #5
 8012430:	2264      	movs	r2, #100	@ 0x64
 8012432:	fb02 f303 	mul.w	r3, r2, r3
 8012436:	1acb      	subs	r3, r1, r3
 8012438:	011b      	lsls	r3, r3, #4
 801243a:	3332      	adds	r3, #50	@ 0x32
 801243c:	4a33      	ldr	r2, [pc, #204]	@ (801250c <UART_SetConfig+0x4e4>)
 801243e:	fba2 2303 	umull	r2, r3, r2, r3
 8012442:	095b      	lsrs	r3, r3, #5
 8012444:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012448:	441c      	add	r4, r3
 801244a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801244e:	2200      	movs	r2, #0
 8012450:	673b      	str	r3, [r7, #112]	@ 0x70
 8012452:	677a      	str	r2, [r7, #116]	@ 0x74
 8012454:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8012458:	4642      	mov	r2, r8
 801245a:	464b      	mov	r3, r9
 801245c:	1891      	adds	r1, r2, r2
 801245e:	60b9      	str	r1, [r7, #8]
 8012460:	415b      	adcs	r3, r3
 8012462:	60fb      	str	r3, [r7, #12]
 8012464:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012468:	4641      	mov	r1, r8
 801246a:	1851      	adds	r1, r2, r1
 801246c:	6039      	str	r1, [r7, #0]
 801246e:	4649      	mov	r1, r9
 8012470:	414b      	adcs	r3, r1
 8012472:	607b      	str	r3, [r7, #4]
 8012474:	f04f 0200 	mov.w	r2, #0
 8012478:	f04f 0300 	mov.w	r3, #0
 801247c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8012480:	4659      	mov	r1, fp
 8012482:	00cb      	lsls	r3, r1, #3
 8012484:	4651      	mov	r1, sl
 8012486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801248a:	4651      	mov	r1, sl
 801248c:	00ca      	lsls	r2, r1, #3
 801248e:	4610      	mov	r0, r2
 8012490:	4619      	mov	r1, r3
 8012492:	4603      	mov	r3, r0
 8012494:	4642      	mov	r2, r8
 8012496:	189b      	adds	r3, r3, r2
 8012498:	66bb      	str	r3, [r7, #104]	@ 0x68
 801249a:	464b      	mov	r3, r9
 801249c:	460a      	mov	r2, r1
 801249e:	eb42 0303 	adc.w	r3, r2, r3
 80124a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80124a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80124a8:	685b      	ldr	r3, [r3, #4]
 80124aa:	2200      	movs	r2, #0
 80124ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80124ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80124b0:	f04f 0200 	mov.w	r2, #0
 80124b4:	f04f 0300 	mov.w	r3, #0
 80124b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80124bc:	4649      	mov	r1, r9
 80124be:	008b      	lsls	r3, r1, #2
 80124c0:	4641      	mov	r1, r8
 80124c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80124c6:	4641      	mov	r1, r8
 80124c8:	008a      	lsls	r2, r1, #2
 80124ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80124ce:	f7f6 fbbb 	bl	8008c48 <__aeabi_uldivmod>
 80124d2:	4602      	mov	r2, r0
 80124d4:	460b      	mov	r3, r1
 80124d6:	4b0d      	ldr	r3, [pc, #52]	@ (801250c <UART_SetConfig+0x4e4>)
 80124d8:	fba3 1302 	umull	r1, r3, r3, r2
 80124dc:	095b      	lsrs	r3, r3, #5
 80124de:	2164      	movs	r1, #100	@ 0x64
 80124e0:	fb01 f303 	mul.w	r3, r1, r3
 80124e4:	1ad3      	subs	r3, r2, r3
 80124e6:	011b      	lsls	r3, r3, #4
 80124e8:	3332      	adds	r3, #50	@ 0x32
 80124ea:	4a08      	ldr	r2, [pc, #32]	@ (801250c <UART_SetConfig+0x4e4>)
 80124ec:	fba2 2303 	umull	r2, r3, r2, r3
 80124f0:	095b      	lsrs	r3, r3, #5
 80124f2:	f003 020f 	and.w	r2, r3, #15
 80124f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	4422      	add	r2, r4
 80124fe:	609a      	str	r2, [r3, #8]
}
 8012500:	bf00      	nop
 8012502:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8012506:	46bd      	mov	sp, r7
 8012508:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801250c:	51eb851f 	.word	0x51eb851f

08012510 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012510:	b480      	push	{r7}
 8012512:	b083      	sub	sp, #12
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	f103 0208 	add.w	r2, r3, #8
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	f04f 32ff 	mov.w	r2, #4294967295
 8012528:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f103 0208 	add.w	r2, r3, #8
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f103 0208 	add.w	r2, r3, #8
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	2200      	movs	r2, #0
 8012542:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012544:	bf00      	nop
 8012546:	370c      	adds	r7, #12
 8012548:	46bd      	mov	sp, r7
 801254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254e:	4770      	bx	lr

08012550 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012550:	b480      	push	{r7}
 8012552:	b083      	sub	sp, #12
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	2200      	movs	r2, #0
 801255c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801255e:	bf00      	nop
 8012560:	370c      	adds	r7, #12
 8012562:	46bd      	mov	sp, r7
 8012564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012568:	4770      	bx	lr

0801256a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 801256a:	b480      	push	{r7}
 801256c:	b085      	sub	sp, #20
 801256e:	af00      	add	r7, sp, #0
 8012570:	6078      	str	r0, [r7, #4]
 8012572:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	685b      	ldr	r3, [r3, #4]
 8012578:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 801257a:	683b      	ldr	r3, [r7, #0]
 801257c:	68fa      	ldr	r2, [r7, #12]
 801257e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	689a      	ldr	r2, [r3, #8]
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	689b      	ldr	r3, [r3, #8]
 801258c:	683a      	ldr	r2, [r7, #0]
 801258e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	683a      	ldr	r2, [r7, #0]
 8012594:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	687a      	ldr	r2, [r7, #4]
 801259a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	1c5a      	adds	r2, r3, #1
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	601a      	str	r2, [r3, #0]
}
 80125a6:	bf00      	nop
 80125a8:	3714      	adds	r7, #20
 80125aa:	46bd      	mov	sp, r7
 80125ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b0:	4770      	bx	lr

080125b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80125b2:	b480      	push	{r7}
 80125b4:	b085      	sub	sp, #20
 80125b6:	af00      	add	r7, sp, #0
 80125b8:	6078      	str	r0, [r7, #4]
 80125ba:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80125c2:	68bb      	ldr	r3, [r7, #8]
 80125c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125c8:	d103      	bne.n	80125d2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	691b      	ldr	r3, [r3, #16]
 80125ce:	60fb      	str	r3, [r7, #12]
 80125d0:	e00c      	b.n	80125ec <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	3308      	adds	r3, #8
 80125d6:	60fb      	str	r3, [r7, #12]
 80125d8:	e002      	b.n	80125e0 <vListInsert+0x2e>
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	685b      	ldr	r3, [r3, #4]
 80125de:	60fb      	str	r3, [r7, #12]
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	685b      	ldr	r3, [r3, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	68ba      	ldr	r2, [r7, #8]
 80125e8:	429a      	cmp	r2, r3
 80125ea:	d2f6      	bcs.n	80125da <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	685a      	ldr	r2, [r3, #4]
 80125f0:	683b      	ldr	r3, [r7, #0]
 80125f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	683a      	ldr	r2, [r7, #0]
 80125fa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	68fa      	ldr	r2, [r7, #12]
 8012600:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	683a      	ldr	r2, [r7, #0]
 8012606:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	687a      	ldr	r2, [r7, #4]
 801260c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	1c5a      	adds	r2, r3, #1
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	601a      	str	r2, [r3, #0]
}
 8012618:	bf00      	nop
 801261a:	3714      	adds	r7, #20
 801261c:	46bd      	mov	sp, r7
 801261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012622:	4770      	bx	lr

08012624 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012624:	b480      	push	{r7}
 8012626:	b085      	sub	sp, #20
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	691b      	ldr	r3, [r3, #16]
 8012630:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	687a      	ldr	r2, [r7, #4]
 8012638:	6892      	ldr	r2, [r2, #8]
 801263a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	689b      	ldr	r3, [r3, #8]
 8012640:	687a      	ldr	r2, [r7, #4]
 8012642:	6852      	ldr	r2, [r2, #4]
 8012644:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	685b      	ldr	r3, [r3, #4]
 801264a:	687a      	ldr	r2, [r7, #4]
 801264c:	429a      	cmp	r2, r3
 801264e:	d103      	bne.n	8012658 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	689a      	ldr	r2, [r3, #8]
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2200      	movs	r2, #0
 801265c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	1e5a      	subs	r2, r3, #1
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	681b      	ldr	r3, [r3, #0]
}
 801266c:	4618      	mov	r0, r3
 801266e:	3714      	adds	r7, #20
 8012670:	46bd      	mov	sp, r7
 8012672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012676:	4770      	bx	lr

08012678 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b084      	sub	sp, #16
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
 8012680:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d10b      	bne.n	80126a4 <xQueueGenericReset+0x2c>
        __asm volatile
 801268c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012690:	f383 8811 	msr	BASEPRI, r3
 8012694:	f3bf 8f6f 	isb	sy
 8012698:	f3bf 8f4f 	dsb	sy
 801269c:	60bb      	str	r3, [r7, #8]
    }
 801269e:	bf00      	nop
 80126a0:	bf00      	nop
 80126a2:	e7fd      	b.n	80126a0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80126a4:	f001 ffba 	bl	801461c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	681a      	ldr	r2, [r3, #0]
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80126b0:	68f9      	ldr	r1, [r7, #12]
 80126b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80126b4:	fb01 f303 	mul.w	r3, r1, r3
 80126b8:	441a      	add	r2, r3
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	2200      	movs	r2, #0
 80126c2:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	681a      	ldr	r2, [r3, #0]
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	681a      	ldr	r2, [r3, #0]
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80126d4:	3b01      	subs	r3, #1
 80126d6:	68f9      	ldr	r1, [r7, #12]
 80126d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80126da:	fb01 f303 	mul.w	r3, r1, r3
 80126de:	441a      	add	r2, r3
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	22ff      	movs	r2, #255	@ 0xff
 80126e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	22ff      	movs	r2, #255	@ 0xff
 80126f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d114      	bne.n	8012724 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	691b      	ldr	r3, [r3, #16]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d01a      	beq.n	8012738 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	3310      	adds	r3, #16
 8012706:	4618      	mov	r0, r3
 8012708:	f001 f898 	bl	801383c <xTaskRemoveFromEventList>
 801270c:	4603      	mov	r3, r0
 801270e:	2b00      	cmp	r3, #0
 8012710:	d012      	beq.n	8012738 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8012712:	4b0d      	ldr	r3, [pc, #52]	@ (8012748 <xQueueGenericReset+0xd0>)
 8012714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012718:	601a      	str	r2, [r3, #0]
 801271a:	f3bf 8f4f 	dsb	sy
 801271e:	f3bf 8f6f 	isb	sy
 8012722:	e009      	b.n	8012738 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	3310      	adds	r3, #16
 8012728:	4618      	mov	r0, r3
 801272a:	f7ff fef1 	bl	8012510 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	3324      	adds	r3, #36	@ 0x24
 8012732:	4618      	mov	r0, r3
 8012734:	f7ff feec 	bl	8012510 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8012738:	f001 ffa2 	bl	8014680 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 801273c:	2301      	movs	r3, #1
}
 801273e:	4618      	mov	r0, r3
 8012740:	3710      	adds	r7, #16
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}
 8012746:	bf00      	nop
 8012748:	e000ed04 	.word	0xe000ed04

0801274c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 801274c:	b580      	push	{r7, lr}
 801274e:	b08c      	sub	sp, #48	@ 0x30
 8012750:	af02      	add	r7, sp, #8
 8012752:	60f8      	str	r0, [r7, #12]
 8012754:	60b9      	str	r1, [r7, #8]
 8012756:	4613      	mov	r3, r2
 8012758:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d10b      	bne.n	8012778 <xQueueGenericCreate+0x2c>
        __asm volatile
 8012760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012764:	f383 8811 	msr	BASEPRI, r3
 8012768:	f3bf 8f6f 	isb	sy
 801276c:	f3bf 8f4f 	dsb	sy
 8012770:	61bb      	str	r3, [r7, #24]
    }
 8012772:	bf00      	nop
 8012774:	bf00      	nop
 8012776:	e7fd      	b.n	8012774 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	68ba      	ldr	r2, [r7, #8]
 801277c:	fb02 f303 	mul.w	r3, r2, r3
 8012780:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8012782:	68bb      	ldr	r3, [r7, #8]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d006      	beq.n	8012796 <xQueueGenericCreate+0x4a>
 8012788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801278a:	68bb      	ldr	r3, [r7, #8]
 801278c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012790:	68fa      	ldr	r2, [r7, #12]
 8012792:	429a      	cmp	r2, r3
 8012794:	d101      	bne.n	801279a <xQueueGenericCreate+0x4e>
 8012796:	2301      	movs	r3, #1
 8012798:	e000      	b.n	801279c <xQueueGenericCreate+0x50>
 801279a:	2300      	movs	r3, #0
 801279c:	2b00      	cmp	r3, #0
 801279e:	d10b      	bne.n	80127b8 <xQueueGenericCreate+0x6c>
        __asm volatile
 80127a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127a4:	f383 8811 	msr	BASEPRI, r3
 80127a8:	f3bf 8f6f 	isb	sy
 80127ac:	f3bf 8f4f 	dsb	sy
 80127b0:	617b      	str	r3, [r7, #20]
    }
 80127b2:	bf00      	nop
 80127b4:	bf00      	nop
 80127b6:	e7fd      	b.n	80127b4 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80127b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ba:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80127be:	d90b      	bls.n	80127d8 <xQueueGenericCreate+0x8c>
        __asm volatile
 80127c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127c4:	f383 8811 	msr	BASEPRI, r3
 80127c8:	f3bf 8f6f 	isb	sy
 80127cc:	f3bf 8f4f 	dsb	sy
 80127d0:	613b      	str	r3, [r7, #16]
    }
 80127d2:	bf00      	nop
 80127d4:	bf00      	nop
 80127d6:	e7fd      	b.n	80127d4 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80127d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127da:	3350      	adds	r3, #80	@ 0x50
 80127dc:	4618      	mov	r0, r3
 80127de:	f002 f847 	bl	8014870 <pvPortMalloc>
 80127e2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80127e4:	6a3b      	ldr	r3, [r7, #32]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d00d      	beq.n	8012806 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80127ea:	6a3b      	ldr	r3, [r7, #32]
 80127ec:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80127ee:	69fb      	ldr	r3, [r7, #28]
 80127f0:	3350      	adds	r3, #80	@ 0x50
 80127f2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80127f4:	79fa      	ldrb	r2, [r7, #7]
 80127f6:	6a3b      	ldr	r3, [r7, #32]
 80127f8:	9300      	str	r3, [sp, #0]
 80127fa:	4613      	mov	r3, r2
 80127fc:	69fa      	ldr	r2, [r7, #28]
 80127fe:	68b9      	ldr	r1, [r7, #8]
 8012800:	68f8      	ldr	r0, [r7, #12]
 8012802:	f000 f805 	bl	8012810 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8012806:	6a3b      	ldr	r3, [r7, #32]
    }
 8012808:	4618      	mov	r0, r3
 801280a:	3728      	adds	r7, #40	@ 0x28
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}

08012810 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b084      	sub	sp, #16
 8012814:	af00      	add	r7, sp, #0
 8012816:	60f8      	str	r0, [r7, #12]
 8012818:	60b9      	str	r1, [r7, #8]
 801281a:	607a      	str	r2, [r7, #4]
 801281c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d103      	bne.n	801282c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012824:	69bb      	ldr	r3, [r7, #24]
 8012826:	69ba      	ldr	r2, [r7, #24]
 8012828:	601a      	str	r2, [r3, #0]
 801282a:	e002      	b.n	8012832 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801282c:	69bb      	ldr	r3, [r7, #24]
 801282e:	687a      	ldr	r2, [r7, #4]
 8012830:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8012832:	69bb      	ldr	r3, [r7, #24]
 8012834:	68fa      	ldr	r2, [r7, #12]
 8012836:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8012838:	69bb      	ldr	r3, [r7, #24]
 801283a:	68ba      	ldr	r2, [r7, #8]
 801283c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801283e:	2101      	movs	r1, #1
 8012840:	69b8      	ldr	r0, [r7, #24]
 8012842:	f7ff ff19 	bl	8012678 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8012846:	69bb      	ldr	r3, [r7, #24]
 8012848:	78fa      	ldrb	r2, [r7, #3]
 801284a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 801284e:	bf00      	nop
 8012850:	3710      	adds	r7, #16
 8012852:	46bd      	mov	sp, r7
 8012854:	bd80      	pop	{r7, pc}
	...

08012858 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b08e      	sub	sp, #56	@ 0x38
 801285c:	af00      	add	r7, sp, #0
 801285e:	60f8      	str	r0, [r7, #12]
 8012860:	60b9      	str	r1, [r7, #8]
 8012862:	607a      	str	r2, [r7, #4]
 8012864:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012866:	2300      	movs	r3, #0
 8012868:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 801286e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012870:	2b00      	cmp	r3, #0
 8012872:	d10b      	bne.n	801288c <xQueueGenericSend+0x34>
        __asm volatile
 8012874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012878:	f383 8811 	msr	BASEPRI, r3
 801287c:	f3bf 8f6f 	isb	sy
 8012880:	f3bf 8f4f 	dsb	sy
 8012884:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8012886:	bf00      	nop
 8012888:	bf00      	nop
 801288a:	e7fd      	b.n	8012888 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d103      	bne.n	801289a <xQueueGenericSend+0x42>
 8012892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012896:	2b00      	cmp	r3, #0
 8012898:	d101      	bne.n	801289e <xQueueGenericSend+0x46>
 801289a:	2301      	movs	r3, #1
 801289c:	e000      	b.n	80128a0 <xQueueGenericSend+0x48>
 801289e:	2300      	movs	r3, #0
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d10b      	bne.n	80128bc <xQueueGenericSend+0x64>
        __asm volatile
 80128a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128a8:	f383 8811 	msr	BASEPRI, r3
 80128ac:	f3bf 8f6f 	isb	sy
 80128b0:	f3bf 8f4f 	dsb	sy
 80128b4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80128b6:	bf00      	nop
 80128b8:	bf00      	nop
 80128ba:	e7fd      	b.n	80128b8 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	2b02      	cmp	r3, #2
 80128c0:	d103      	bne.n	80128ca <xQueueGenericSend+0x72>
 80128c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80128c6:	2b01      	cmp	r3, #1
 80128c8:	d101      	bne.n	80128ce <xQueueGenericSend+0x76>
 80128ca:	2301      	movs	r3, #1
 80128cc:	e000      	b.n	80128d0 <xQueueGenericSend+0x78>
 80128ce:	2300      	movs	r3, #0
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d10b      	bne.n	80128ec <xQueueGenericSend+0x94>
        __asm volatile
 80128d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128d8:	f383 8811 	msr	BASEPRI, r3
 80128dc:	f3bf 8f6f 	isb	sy
 80128e0:	f3bf 8f4f 	dsb	sy
 80128e4:	623b      	str	r3, [r7, #32]
    }
 80128e6:	bf00      	nop
 80128e8:	bf00      	nop
 80128ea:	e7fd      	b.n	80128e8 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80128ec:	f001 f946 	bl	8013b7c <xTaskGetSchedulerState>
 80128f0:	4603      	mov	r3, r0
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d102      	bne.n	80128fc <xQueueGenericSend+0xa4>
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d101      	bne.n	8012900 <xQueueGenericSend+0xa8>
 80128fc:	2301      	movs	r3, #1
 80128fe:	e000      	b.n	8012902 <xQueueGenericSend+0xaa>
 8012900:	2300      	movs	r3, #0
 8012902:	2b00      	cmp	r3, #0
 8012904:	d10b      	bne.n	801291e <xQueueGenericSend+0xc6>
        __asm volatile
 8012906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801290a:	f383 8811 	msr	BASEPRI, r3
 801290e:	f3bf 8f6f 	isb	sy
 8012912:	f3bf 8f4f 	dsb	sy
 8012916:	61fb      	str	r3, [r7, #28]
    }
 8012918:	bf00      	nop
 801291a:	bf00      	nop
 801291c:	e7fd      	b.n	801291a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 801291e:	f001 fe7d 	bl	801461c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012924:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801292a:	429a      	cmp	r2, r3
 801292c:	d302      	bcc.n	8012934 <xQueueGenericSend+0xdc>
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	2b02      	cmp	r3, #2
 8012932:	d129      	bne.n	8012988 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012934:	683a      	ldr	r2, [r7, #0]
 8012936:	68b9      	ldr	r1, [r7, #8]
 8012938:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801293a:	f000 fa1f 	bl	8012d7c <prvCopyDataToQueue>
 801293e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012944:	2b00      	cmp	r3, #0
 8012946:	d010      	beq.n	801296a <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801294a:	3324      	adds	r3, #36	@ 0x24
 801294c:	4618      	mov	r0, r3
 801294e:	f000 ff75 	bl	801383c <xTaskRemoveFromEventList>
 8012952:	4603      	mov	r3, r0
 8012954:	2b00      	cmp	r3, #0
 8012956:	d013      	beq.n	8012980 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8012958:	4b3f      	ldr	r3, [pc, #252]	@ (8012a58 <xQueueGenericSend+0x200>)
 801295a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801295e:	601a      	str	r2, [r3, #0]
 8012960:	f3bf 8f4f 	dsb	sy
 8012964:	f3bf 8f6f 	isb	sy
 8012968:	e00a      	b.n	8012980 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 801296a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801296c:	2b00      	cmp	r3, #0
 801296e:	d007      	beq.n	8012980 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8012970:	4b39      	ldr	r3, [pc, #228]	@ (8012a58 <xQueueGenericSend+0x200>)
 8012972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012976:	601a      	str	r2, [r3, #0]
 8012978:	f3bf 8f4f 	dsb	sy
 801297c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8012980:	f001 fe7e 	bl	8014680 <vPortExitCritical>
                return pdPASS;
 8012984:	2301      	movs	r3, #1
 8012986:	e063      	b.n	8012a50 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d103      	bne.n	8012996 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 801298e:	f001 fe77 	bl	8014680 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8012992:	2300      	movs	r3, #0
 8012994:	e05c      	b.n	8012a50 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8012996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012998:	2b00      	cmp	r3, #0
 801299a:	d106      	bne.n	80129aa <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 801299c:	f107 0314 	add.w	r3, r7, #20
 80129a0:	4618      	mov	r0, r3
 80129a2:	f000 ffaf 	bl	8013904 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80129a6:	2301      	movs	r3, #1
 80129a8:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80129aa:	f001 fe69 	bl	8014680 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80129ae:	f000 fd21 	bl	80133f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80129b2:	f001 fe33 	bl	801461c <vPortEnterCritical>
 80129b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80129bc:	b25b      	sxtb	r3, r3
 80129be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129c2:	d103      	bne.n	80129cc <xQueueGenericSend+0x174>
 80129c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129c6:	2200      	movs	r2, #0
 80129c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80129cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80129d2:	b25b      	sxtb	r3, r3
 80129d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129d8:	d103      	bne.n	80129e2 <xQueueGenericSend+0x18a>
 80129da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129dc:	2200      	movs	r2, #0
 80129de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80129e2:	f001 fe4d 	bl	8014680 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80129e6:	1d3a      	adds	r2, r7, #4
 80129e8:	f107 0314 	add.w	r3, r7, #20
 80129ec:	4611      	mov	r1, r2
 80129ee:	4618      	mov	r0, r3
 80129f0:	f000 ff9e 	bl	8013930 <xTaskCheckForTimeOut>
 80129f4:	4603      	mov	r3, r0
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d124      	bne.n	8012a44 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80129fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80129fc:	f000 fab6 	bl	8012f6c <prvIsQueueFull>
 8012a00:	4603      	mov	r3, r0
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d018      	beq.n	8012a38 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a08:	3310      	adds	r3, #16
 8012a0a:	687a      	ldr	r2, [r7, #4]
 8012a0c:	4611      	mov	r1, r2
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f000 fec2 	bl	8013798 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8012a14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012a16:	f000 fa41 	bl	8012e9c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8012a1a:	f000 fcf9 	bl	8013410 <xTaskResumeAll>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	f47f af7c 	bne.w	801291e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8012a26:	4b0c      	ldr	r3, [pc, #48]	@ (8012a58 <xQueueGenericSend+0x200>)
 8012a28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a2c:	601a      	str	r2, [r3, #0]
 8012a2e:	f3bf 8f4f 	dsb	sy
 8012a32:	f3bf 8f6f 	isb	sy
 8012a36:	e772      	b.n	801291e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8012a38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012a3a:	f000 fa2f 	bl	8012e9c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8012a3e:	f000 fce7 	bl	8013410 <xTaskResumeAll>
 8012a42:	e76c      	b.n	801291e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8012a44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012a46:	f000 fa29 	bl	8012e9c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8012a4a:	f000 fce1 	bl	8013410 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8012a4e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8012a50:	4618      	mov	r0, r3
 8012a52:	3738      	adds	r7, #56	@ 0x38
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}
 8012a58:	e000ed04 	.word	0xe000ed04

08012a5c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b090      	sub	sp, #64	@ 0x40
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	60f8      	str	r0, [r7, #12]
 8012a64:	60b9      	str	r1, [r7, #8]
 8012a66:	607a      	str	r2, [r7, #4]
 8012a68:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8012a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d10b      	bne.n	8012a8c <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8012a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a78:	f383 8811 	msr	BASEPRI, r3
 8012a7c:	f3bf 8f6f 	isb	sy
 8012a80:	f3bf 8f4f 	dsb	sy
 8012a84:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8012a86:	bf00      	nop
 8012a88:	bf00      	nop
 8012a8a:	e7fd      	b.n	8012a88 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d103      	bne.n	8012a9a <xQueueGenericSendFromISR+0x3e>
 8012a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d101      	bne.n	8012a9e <xQueueGenericSendFromISR+0x42>
 8012a9a:	2301      	movs	r3, #1
 8012a9c:	e000      	b.n	8012aa0 <xQueueGenericSendFromISR+0x44>
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d10b      	bne.n	8012abc <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8012aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aa8:	f383 8811 	msr	BASEPRI, r3
 8012aac:	f3bf 8f6f 	isb	sy
 8012ab0:	f3bf 8f4f 	dsb	sy
 8012ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8012ab6:	bf00      	nop
 8012ab8:	bf00      	nop
 8012aba:	e7fd      	b.n	8012ab8 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012abc:	683b      	ldr	r3, [r7, #0]
 8012abe:	2b02      	cmp	r3, #2
 8012ac0:	d103      	bne.n	8012aca <xQueueGenericSendFromISR+0x6e>
 8012ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ac6:	2b01      	cmp	r3, #1
 8012ac8:	d101      	bne.n	8012ace <xQueueGenericSendFromISR+0x72>
 8012aca:	2301      	movs	r3, #1
 8012acc:	e000      	b.n	8012ad0 <xQueueGenericSendFromISR+0x74>
 8012ace:	2300      	movs	r3, #0
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d10b      	bne.n	8012aec <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8012ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ad8:	f383 8811 	msr	BASEPRI, r3
 8012adc:	f3bf 8f6f 	isb	sy
 8012ae0:	f3bf 8f4f 	dsb	sy
 8012ae4:	623b      	str	r3, [r7, #32]
    }
 8012ae6:	bf00      	nop
 8012ae8:	bf00      	nop
 8012aea:	e7fd      	b.n	8012ae8 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012aec:	f001 fe7e 	bl	80147ec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8012af0:	f3ef 8211 	mrs	r2, BASEPRI
 8012af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012af8:	f383 8811 	msr	BASEPRI, r3
 8012afc:	f3bf 8f6f 	isb	sy
 8012b00:	f3bf 8f4f 	dsb	sy
 8012b04:	61fa      	str	r2, [r7, #28]
 8012b06:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8012b08:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012b0a:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b14:	429a      	cmp	r2, r3
 8012b16:	d302      	bcc.n	8012b1e <xQueueGenericSendFromISR+0xc2>
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	2b02      	cmp	r3, #2
 8012b1c:	d13f      	bne.n	8012b9e <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8012b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012b24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012b2e:	683a      	ldr	r2, [r7, #0]
 8012b30:	68b9      	ldr	r1, [r7, #8]
 8012b32:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012b34:	f000 f922 	bl	8012d7c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8012b38:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8012b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b40:	d112      	bne.n	8012b68 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d026      	beq.n	8012b98 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b4c:	3324      	adds	r3, #36	@ 0x24
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f000 fe74 	bl	801383c <xTaskRemoveFromEventList>
 8012b54:	4603      	mov	r3, r0
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d01e      	beq.n	8012b98 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d01b      	beq.n	8012b98 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2201      	movs	r2, #1
 8012b64:	601a      	str	r2, [r3, #0]
 8012b66:	e017      	b.n	8012b98 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8012b68:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8012b6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8012b6e:	d10b      	bne.n	8012b88 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8012b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b74:	f383 8811 	msr	BASEPRI, r3
 8012b78:	f3bf 8f6f 	isb	sy
 8012b7c:	f3bf 8f4f 	dsb	sy
 8012b80:	617b      	str	r3, [r7, #20]
    }
 8012b82:	bf00      	nop
 8012b84:	bf00      	nop
 8012b86:	e7fd      	b.n	8012b84 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012b88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	b2db      	uxtb	r3, r3
 8012b90:	b25a      	sxtb	r2, r3
 8012b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8012b98:	2301      	movs	r3, #1
 8012b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8012b9c:	e001      	b.n	8012ba2 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ba4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8012ba6:	693b      	ldr	r3, [r7, #16]
 8012ba8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8012bac:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8012bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3740      	adds	r7, #64	@ 0x40
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}

08012bb8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b08c      	sub	sp, #48	@ 0x30
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	60f8      	str	r0, [r7, #12]
 8012bc0:	60b9      	str	r1, [r7, #8]
 8012bc2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8012bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d10b      	bne.n	8012bea <xQueueReceive+0x32>
        __asm volatile
 8012bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bd6:	f383 8811 	msr	BASEPRI, r3
 8012bda:	f3bf 8f6f 	isb	sy
 8012bde:	f3bf 8f4f 	dsb	sy
 8012be2:	623b      	str	r3, [r7, #32]
    }
 8012be4:	bf00      	nop
 8012be6:	bf00      	nop
 8012be8:	e7fd      	b.n	8012be6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d103      	bne.n	8012bf8 <xQueueReceive+0x40>
 8012bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d101      	bne.n	8012bfc <xQueueReceive+0x44>
 8012bf8:	2301      	movs	r3, #1
 8012bfa:	e000      	b.n	8012bfe <xQueueReceive+0x46>
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d10b      	bne.n	8012c1a <xQueueReceive+0x62>
        __asm volatile
 8012c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c06:	f383 8811 	msr	BASEPRI, r3
 8012c0a:	f3bf 8f6f 	isb	sy
 8012c0e:	f3bf 8f4f 	dsb	sy
 8012c12:	61fb      	str	r3, [r7, #28]
    }
 8012c14:	bf00      	nop
 8012c16:	bf00      	nop
 8012c18:	e7fd      	b.n	8012c16 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012c1a:	f000 ffaf 	bl	8013b7c <xTaskGetSchedulerState>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d102      	bne.n	8012c2a <xQueueReceive+0x72>
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d101      	bne.n	8012c2e <xQueueReceive+0x76>
 8012c2a:	2301      	movs	r3, #1
 8012c2c:	e000      	b.n	8012c30 <xQueueReceive+0x78>
 8012c2e:	2300      	movs	r3, #0
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d10b      	bne.n	8012c4c <xQueueReceive+0x94>
        __asm volatile
 8012c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c38:	f383 8811 	msr	BASEPRI, r3
 8012c3c:	f3bf 8f6f 	isb	sy
 8012c40:	f3bf 8f4f 	dsb	sy
 8012c44:	61bb      	str	r3, [r7, #24]
    }
 8012c46:	bf00      	nop
 8012c48:	bf00      	nop
 8012c4a:	e7fd      	b.n	8012c48 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8012c4c:	f001 fce6 	bl	801461c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c54:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d01f      	beq.n	8012c9c <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012c5c:	68b9      	ldr	r1, [r7, #8]
 8012c5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012c60:	f000 f8f6 	bl	8012e50 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c66:	1e5a      	subs	r2, r3, #1
 8012c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c6a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c6e:	691b      	ldr	r3, [r3, #16]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d00f      	beq.n	8012c94 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c76:	3310      	adds	r3, #16
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f000 fddf 	bl	801383c <xTaskRemoveFromEventList>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d007      	beq.n	8012c94 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8012c84:	4b3c      	ldr	r3, [pc, #240]	@ (8012d78 <xQueueReceive+0x1c0>)
 8012c86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c8a:	601a      	str	r2, [r3, #0]
 8012c8c:	f3bf 8f4f 	dsb	sy
 8012c90:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8012c94:	f001 fcf4 	bl	8014680 <vPortExitCritical>
                return pdPASS;
 8012c98:	2301      	movs	r3, #1
 8012c9a:	e069      	b.n	8012d70 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d103      	bne.n	8012caa <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8012ca2:	f001 fced 	bl	8014680 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	e062      	b.n	8012d70 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8012caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d106      	bne.n	8012cbe <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8012cb0:	f107 0310 	add.w	r3, r7, #16
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f000 fe25 	bl	8013904 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8012cba:	2301      	movs	r3, #1
 8012cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8012cbe:	f001 fcdf 	bl	8014680 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8012cc2:	f000 fb97 	bl	80133f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8012cc6:	f001 fca9 	bl	801461c <vPortEnterCritical>
 8012cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012cd0:	b25b      	sxtb	r3, r3
 8012cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cd6:	d103      	bne.n	8012ce0 <xQueueReceive+0x128>
 8012cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cda:	2200      	movs	r2, #0
 8012cdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012ce6:	b25b      	sxtb	r3, r3
 8012ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cec:	d103      	bne.n	8012cf6 <xQueueReceive+0x13e>
 8012cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012cf6:	f001 fcc3 	bl	8014680 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012cfa:	1d3a      	adds	r2, r7, #4
 8012cfc:	f107 0310 	add.w	r3, r7, #16
 8012d00:	4611      	mov	r1, r2
 8012d02:	4618      	mov	r0, r3
 8012d04:	f000 fe14 	bl	8013930 <xTaskCheckForTimeOut>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d123      	bne.n	8012d56 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012d0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012d10:	f000 f916 	bl	8012f40 <prvIsQueueEmpty>
 8012d14:	4603      	mov	r3, r0
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d017      	beq.n	8012d4a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d1c:	3324      	adds	r3, #36	@ 0x24
 8012d1e:	687a      	ldr	r2, [r7, #4]
 8012d20:	4611      	mov	r1, r2
 8012d22:	4618      	mov	r0, r3
 8012d24:	f000 fd38 	bl	8013798 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8012d28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012d2a:	f000 f8b7 	bl	8012e9c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8012d2e:	f000 fb6f 	bl	8013410 <xTaskResumeAll>
 8012d32:	4603      	mov	r3, r0
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d189      	bne.n	8012c4c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8012d38:	4b0f      	ldr	r3, [pc, #60]	@ (8012d78 <xQueueReceive+0x1c0>)
 8012d3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d3e:	601a      	str	r2, [r3, #0]
 8012d40:	f3bf 8f4f 	dsb	sy
 8012d44:	f3bf 8f6f 	isb	sy
 8012d48:	e780      	b.n	8012c4c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8012d4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012d4c:	f000 f8a6 	bl	8012e9c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8012d50:	f000 fb5e 	bl	8013410 <xTaskResumeAll>
 8012d54:	e77a      	b.n	8012c4c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8012d56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012d58:	f000 f8a0 	bl	8012e9c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8012d5c:	f000 fb58 	bl	8013410 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012d60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012d62:	f000 f8ed 	bl	8012f40 <prvIsQueueEmpty>
 8012d66:	4603      	mov	r3, r0
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	f43f af6f 	beq.w	8012c4c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8012d6e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	3730      	adds	r7, #48	@ 0x30
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}
 8012d78:	e000ed04 	.word	0xe000ed04

08012d7c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b086      	sub	sp, #24
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	60f8      	str	r0, [r7, #12]
 8012d84:	60b9      	str	r1, [r7, #8]
 8012d86:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8012d88:	2300      	movs	r3, #0
 8012d8a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d90:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d10d      	bne.n	8012db6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d14d      	bne.n	8012e3e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	689b      	ldr	r3, [r3, #8]
 8012da6:	4618      	mov	r0, r3
 8012da8:	f000 ff06 	bl	8013bb8 <xTaskPriorityDisinherit>
 8012dac:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	2200      	movs	r2, #0
 8012db2:	609a      	str	r2, [r3, #8]
 8012db4:	e043      	b.n	8012e3e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d119      	bne.n	8012df0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	6858      	ldr	r0, [r3, #4]
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012dc4:	461a      	mov	r2, r3
 8012dc6:	68b9      	ldr	r1, [r7, #8]
 8012dc8:	f003 f983 	bl	80160d2 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	685a      	ldr	r2, [r3, #4]
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012dd4:	441a      	add	r2, r3
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	685a      	ldr	r2, [r3, #4]
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	689b      	ldr	r3, [r3, #8]
 8012de2:	429a      	cmp	r2, r3
 8012de4:	d32b      	bcc.n	8012e3e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	681a      	ldr	r2, [r3, #0]
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	605a      	str	r2, [r3, #4]
 8012dee:	e026      	b.n	8012e3e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	68d8      	ldr	r0, [r3, #12]
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012df8:	461a      	mov	r2, r3
 8012dfa:	68b9      	ldr	r1, [r7, #8]
 8012dfc:	f003 f969 	bl	80160d2 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	68da      	ldr	r2, [r3, #12]
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e08:	425b      	negs	r3, r3
 8012e0a:	441a      	add	r2, r3
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	68da      	ldr	r2, [r3, #12]
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	d207      	bcs.n	8012e2c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	689a      	ldr	r2, [r3, #8]
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e24:	425b      	negs	r3, r3
 8012e26:	441a      	add	r2, r3
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2b02      	cmp	r3, #2
 8012e30:	d105      	bne.n	8012e3e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012e32:	693b      	ldr	r3, [r7, #16]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d002      	beq.n	8012e3e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8012e38:	693b      	ldr	r3, [r7, #16]
 8012e3a:	3b01      	subs	r3, #1
 8012e3c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	1c5a      	adds	r2, r3, #1
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8012e46:	697b      	ldr	r3, [r7, #20]
}
 8012e48:	4618      	mov	r0, r3
 8012e4a:	3718      	adds	r7, #24
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bd80      	pop	{r7, pc}

08012e50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b082      	sub	sp, #8
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
 8012e58:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d018      	beq.n	8012e94 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	68da      	ldr	r2, [r3, #12]
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e6a:	441a      	add	r2, r3
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	68da      	ldr	r2, [r3, #12]
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	689b      	ldr	r3, [r3, #8]
 8012e78:	429a      	cmp	r2, r3
 8012e7a:	d303      	bcc.n	8012e84 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	681a      	ldr	r2, [r3, #0]
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	68d9      	ldr	r1, [r3, #12]
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e8c:	461a      	mov	r2, r3
 8012e8e:	6838      	ldr	r0, [r7, #0]
 8012e90:	f003 f91f 	bl	80160d2 <memcpy>
    }
}
 8012e94:	bf00      	nop
 8012e96:	3708      	adds	r7, #8
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	bd80      	pop	{r7, pc}

08012e9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b084      	sub	sp, #16
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8012ea4:	f001 fbba 	bl	801461c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012eae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8012eb0:	e011      	b.n	8012ed6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d012      	beq.n	8012ee0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	3324      	adds	r3, #36	@ 0x24
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f000 fcbc 	bl	801383c <xTaskRemoveFromEventList>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d001      	beq.n	8012ece <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8012eca:	f000 fd99 	bl	8013a00 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8012ece:	7bfb      	ldrb	r3, [r7, #15]
 8012ed0:	3b01      	subs	r3, #1
 8012ed2:	b2db      	uxtb	r3, r3
 8012ed4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8012ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	dce9      	bgt.n	8012eb2 <prvUnlockQueue+0x16>
 8012ede:	e000      	b.n	8012ee2 <prvUnlockQueue+0x46>
                        break;
 8012ee0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	22ff      	movs	r2, #255	@ 0xff
 8012ee6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8012eea:	f001 fbc9 	bl	8014680 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8012eee:	f001 fb95 	bl	801461c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012ef8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8012efa:	e011      	b.n	8012f20 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	691b      	ldr	r3, [r3, #16]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d012      	beq.n	8012f2a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	3310      	adds	r3, #16
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f000 fc97 	bl	801383c <xTaskRemoveFromEventList>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d001      	beq.n	8012f18 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8012f14:	f000 fd74 	bl	8013a00 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8012f18:	7bbb      	ldrb	r3, [r7, #14]
 8012f1a:	3b01      	subs	r3, #1
 8012f1c:	b2db      	uxtb	r3, r3
 8012f1e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8012f20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	dce9      	bgt.n	8012efc <prvUnlockQueue+0x60>
 8012f28:	e000      	b.n	8012f2c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8012f2a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	22ff      	movs	r2, #255	@ 0xff
 8012f30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8012f34:	f001 fba4 	bl	8014680 <vPortExitCritical>
}
 8012f38:	bf00      	nop
 8012f3a:	3710      	adds	r7, #16
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}

08012f40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b084      	sub	sp, #16
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8012f48:	f001 fb68 	bl	801461c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d102      	bne.n	8012f5a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8012f54:	2301      	movs	r3, #1
 8012f56:	60fb      	str	r3, [r7, #12]
 8012f58:	e001      	b.n	8012f5e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8012f5e:	f001 fb8f 	bl	8014680 <vPortExitCritical>

    return xReturn;
 8012f62:	68fb      	ldr	r3, [r7, #12]
}
 8012f64:	4618      	mov	r0, r3
 8012f66:	3710      	adds	r7, #16
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}

08012f6c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b084      	sub	sp, #16
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8012f74:	f001 fb52 	bl	801461c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f80:	429a      	cmp	r2, r3
 8012f82:	d102      	bne.n	8012f8a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8012f84:	2301      	movs	r3, #1
 8012f86:	60fb      	str	r3, [r7, #12]
 8012f88:	e001      	b.n	8012f8e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8012f8e:	f001 fb77 	bl	8014680 <vPortExitCritical>

    return xReturn;
 8012f92:	68fb      	ldr	r3, [r7, #12]
}
 8012f94:	4618      	mov	r0, r3
 8012f96:	3710      	adds	r7, #16
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}

08012f9c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8012f9c:	b480      	push	{r7}
 8012f9e:	b085      	sub	sp, #20
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
 8012fa4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	60fb      	str	r3, [r7, #12]
 8012faa:	e014      	b.n	8012fd6 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012fac:	4a0f      	ldr	r2, [pc, #60]	@ (8012fec <vQueueAddToRegistry+0x50>)
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d10b      	bne.n	8012fd0 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012fb8:	490c      	ldr	r1, [pc, #48]	@ (8012fec <vQueueAddToRegistry+0x50>)
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	683a      	ldr	r2, [r7, #0]
 8012fbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8012fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8012fec <vQueueAddToRegistry+0x50>)
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	00db      	lsls	r3, r3, #3
 8012fc8:	4413      	add	r3, r2
 8012fca:	687a      	ldr	r2, [r7, #4]
 8012fcc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8012fce:	e006      	b.n	8012fde <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	3301      	adds	r3, #1
 8012fd4:	60fb      	str	r3, [r7, #12]
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	2b07      	cmp	r3, #7
 8012fda:	d9e7      	bls.n	8012fac <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8012fdc:	bf00      	nop
 8012fde:	bf00      	nop
 8012fe0:	3714      	adds	r7, #20
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe8:	4770      	bx	lr
 8012fea:	bf00      	nop
 8012fec:	200005ac 	.word	0x200005ac

08012ff0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b086      	sub	sp, #24
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	60f8      	str	r0, [r7, #12]
 8012ff8:	60b9      	str	r1, [r7, #8]
 8012ffa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8013000:	f001 fb0c 	bl	801461c <vPortEnterCritical>
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801300a:	b25b      	sxtb	r3, r3
 801300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013010:	d103      	bne.n	801301a <vQueueWaitForMessageRestricted+0x2a>
 8013012:	697b      	ldr	r3, [r7, #20]
 8013014:	2200      	movs	r2, #0
 8013016:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801301a:	697b      	ldr	r3, [r7, #20]
 801301c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013020:	b25b      	sxtb	r3, r3
 8013022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013026:	d103      	bne.n	8013030 <vQueueWaitForMessageRestricted+0x40>
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	2200      	movs	r2, #0
 801302c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013030:	f001 fb26 	bl	8014680 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013034:	697b      	ldr	r3, [r7, #20]
 8013036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013038:	2b00      	cmp	r3, #0
 801303a:	d106      	bne.n	801304a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801303c:	697b      	ldr	r3, [r7, #20]
 801303e:	3324      	adds	r3, #36	@ 0x24
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	68b9      	ldr	r1, [r7, #8]
 8013044:	4618      	mov	r0, r3
 8013046:	f000 fbcd 	bl	80137e4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 801304a:	6978      	ldr	r0, [r7, #20]
 801304c:	f7ff ff26 	bl	8012e9c <prvUnlockQueue>
    }
 8013050:	bf00      	nop
 8013052:	3718      	adds	r7, #24
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}

08013058 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8013058:	b580      	push	{r7, lr}
 801305a:	b08c      	sub	sp, #48	@ 0x30
 801305c:	af04      	add	r7, sp, #16
 801305e:	60f8      	str	r0, [r7, #12]
 8013060:	60b9      	str	r1, [r7, #8]
 8013062:	603b      	str	r3, [r7, #0]
 8013064:	4613      	mov	r3, r2
 8013066:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013068:	88fb      	ldrh	r3, [r7, #6]
 801306a:	009b      	lsls	r3, r3, #2
 801306c:	4618      	mov	r0, r3
 801306e:	f001 fbff 	bl	8014870 <pvPortMalloc>
 8013072:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d00e      	beq.n	8013098 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801307a:	2058      	movs	r0, #88	@ 0x58
 801307c:	f001 fbf8 	bl	8014870 <pvPortMalloc>
 8013080:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8013082:	69fb      	ldr	r3, [r7, #28]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d003      	beq.n	8013090 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8013088:	69fb      	ldr	r3, [r7, #28]
 801308a:	697a      	ldr	r2, [r7, #20]
 801308c:	631a      	str	r2, [r3, #48]	@ 0x30
 801308e:	e005      	b.n	801309c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8013090:	6978      	ldr	r0, [r7, #20]
 8013092:	f001 fccf 	bl	8014a34 <vPortFree>
 8013096:	e001      	b.n	801309c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8013098:	2300      	movs	r3, #0
 801309a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 801309c:	69fb      	ldr	r3, [r7, #28]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d013      	beq.n	80130ca <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80130a2:	88fa      	ldrh	r2, [r7, #6]
 80130a4:	2300      	movs	r3, #0
 80130a6:	9303      	str	r3, [sp, #12]
 80130a8:	69fb      	ldr	r3, [r7, #28]
 80130aa:	9302      	str	r3, [sp, #8]
 80130ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130ae:	9301      	str	r3, [sp, #4]
 80130b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130b2:	9300      	str	r3, [sp, #0]
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	68b9      	ldr	r1, [r7, #8]
 80130b8:	68f8      	ldr	r0, [r7, #12]
 80130ba:	f000 f80e 	bl	80130da <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80130be:	69f8      	ldr	r0, [r7, #28]
 80130c0:	f000 f8a2 	bl	8013208 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80130c4:	2301      	movs	r3, #1
 80130c6:	61bb      	str	r3, [r7, #24]
 80130c8:	e002      	b.n	80130d0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80130ca:	f04f 33ff 	mov.w	r3, #4294967295
 80130ce:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80130d0:	69bb      	ldr	r3, [r7, #24]
    }
 80130d2:	4618      	mov	r0, r3
 80130d4:	3720      	adds	r7, #32
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}

080130da <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80130da:	b580      	push	{r7, lr}
 80130dc:	b088      	sub	sp, #32
 80130de:	af00      	add	r7, sp, #0
 80130e0:	60f8      	str	r0, [r7, #12]
 80130e2:	60b9      	str	r1, [r7, #8]
 80130e4:	607a      	str	r2, [r7, #4]
 80130e6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80130e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	009b      	lsls	r3, r3, #2
 80130f0:	461a      	mov	r2, r3
 80130f2:	21a5      	movs	r1, #165	@ 0xa5
 80130f4:	f002 ff50 	bl	8015f98 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80130f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013102:	3b01      	subs	r3, #1
 8013104:	009b      	lsls	r3, r3, #2
 8013106:	4413      	add	r3, r2
 8013108:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801310a:	69bb      	ldr	r3, [r7, #24]
 801310c:	f023 0307 	bic.w	r3, r3, #7
 8013110:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013112:	69bb      	ldr	r3, [r7, #24]
 8013114:	f003 0307 	and.w	r3, r3, #7
 8013118:	2b00      	cmp	r3, #0
 801311a:	d00b      	beq.n	8013134 <prvInitialiseNewTask+0x5a>
        __asm volatile
 801311c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013120:	f383 8811 	msr	BASEPRI, r3
 8013124:	f3bf 8f6f 	isb	sy
 8013128:	f3bf 8f4f 	dsb	sy
 801312c:	617b      	str	r3, [r7, #20]
    }
 801312e:	bf00      	nop
 8013130:	bf00      	nop
 8013132:	e7fd      	b.n	8013130 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d01f      	beq.n	801317a <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801313a:	2300      	movs	r3, #0
 801313c:	61fb      	str	r3, [r7, #28]
 801313e:	e012      	b.n	8013166 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013140:	68ba      	ldr	r2, [r7, #8]
 8013142:	69fb      	ldr	r3, [r7, #28]
 8013144:	4413      	add	r3, r2
 8013146:	7819      	ldrb	r1, [r3, #0]
 8013148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801314a:	69fb      	ldr	r3, [r7, #28]
 801314c:	4413      	add	r3, r2
 801314e:	3334      	adds	r3, #52	@ 0x34
 8013150:	460a      	mov	r2, r1
 8013152:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8013154:	68ba      	ldr	r2, [r7, #8]
 8013156:	69fb      	ldr	r3, [r7, #28]
 8013158:	4413      	add	r3, r2
 801315a:	781b      	ldrb	r3, [r3, #0]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d006      	beq.n	801316e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013160:	69fb      	ldr	r3, [r7, #28]
 8013162:	3301      	adds	r3, #1
 8013164:	61fb      	str	r3, [r7, #28]
 8013166:	69fb      	ldr	r3, [r7, #28]
 8013168:	2b09      	cmp	r3, #9
 801316a:	d9e9      	bls.n	8013140 <prvInitialiseNewTask+0x66>
 801316c:	e000      	b.n	8013170 <prvInitialiseNewTask+0x96>
            {
                break;
 801316e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013172:	2200      	movs	r2, #0
 8013174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8013178:	e003      	b.n	8013182 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801317a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801317c:	2200      	movs	r2, #0
 801317e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013184:	2b04      	cmp	r3, #4
 8013186:	d901      	bls.n	801318c <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013188:	2304      	movs	r3, #4
 801318a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 801318c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801318e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013190:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8013192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013194:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013196:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8013198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801319a:	2200      	movs	r2, #0
 801319c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801319e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131a0:	3304      	adds	r3, #4
 80131a2:	4618      	mov	r0, r3
 80131a4:	f7ff f9d4 	bl	8012550 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80131a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131aa:	3318      	adds	r3, #24
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7ff f9cf 	bl	8012550 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80131b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80131b6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131ba:	f1c3 0205 	rsb	r2, r3, #5
 80131be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131c0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80131c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80131c6:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80131c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131ca:	3350      	adds	r3, #80	@ 0x50
 80131cc:	2204      	movs	r2, #4
 80131ce:	2100      	movs	r1, #0
 80131d0:	4618      	mov	r0, r3
 80131d2:	f002 fee1 	bl	8015f98 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80131d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131d8:	3354      	adds	r3, #84	@ 0x54
 80131da:	2201      	movs	r2, #1
 80131dc:	2100      	movs	r1, #0
 80131de:	4618      	mov	r0, r3
 80131e0:	f002 feda 	bl	8015f98 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80131e4:	683a      	ldr	r2, [r7, #0]
 80131e6:	68f9      	ldr	r1, [r7, #12]
 80131e8:	69b8      	ldr	r0, [r7, #24]
 80131ea:	f001 f8e5 	bl	80143b8 <pxPortInitialiseStack>
 80131ee:	4602      	mov	r2, r0
 80131f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131f2:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80131f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d002      	beq.n	8013200 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80131fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80131fe:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8013200:	bf00      	nop
 8013202:	3720      	adds	r7, #32
 8013204:	46bd      	mov	sp, r7
 8013206:	bd80      	pop	{r7, pc}

08013208 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b082      	sub	sp, #8
 801320c:	af00      	add	r7, sp, #0
 801320e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8013210:	f001 fa04 	bl	801461c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8013214:	4b2c      	ldr	r3, [pc, #176]	@ (80132c8 <prvAddNewTaskToReadyList+0xc0>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	3301      	adds	r3, #1
 801321a:	4a2b      	ldr	r2, [pc, #172]	@ (80132c8 <prvAddNewTaskToReadyList+0xc0>)
 801321c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 801321e:	4b2b      	ldr	r3, [pc, #172]	@ (80132cc <prvAddNewTaskToReadyList+0xc4>)
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d109      	bne.n	801323a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8013226:	4a29      	ldr	r2, [pc, #164]	@ (80132cc <prvAddNewTaskToReadyList+0xc4>)
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801322c:	4b26      	ldr	r3, [pc, #152]	@ (80132c8 <prvAddNewTaskToReadyList+0xc0>)
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	2b01      	cmp	r3, #1
 8013232:	d110      	bne.n	8013256 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8013234:	f000 fc08 	bl	8013a48 <prvInitialiseTaskLists>
 8013238:	e00d      	b.n	8013256 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 801323a:	4b25      	ldr	r3, [pc, #148]	@ (80132d0 <prvAddNewTaskToReadyList+0xc8>)
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d109      	bne.n	8013256 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013242:	4b22      	ldr	r3, [pc, #136]	@ (80132cc <prvAddNewTaskToReadyList+0xc4>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801324c:	429a      	cmp	r2, r3
 801324e:	d802      	bhi.n	8013256 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8013250:	4a1e      	ldr	r2, [pc, #120]	@ (80132cc <prvAddNewTaskToReadyList+0xc4>)
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8013256:	4b1f      	ldr	r3, [pc, #124]	@ (80132d4 <prvAddNewTaskToReadyList+0xcc>)
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	3301      	adds	r3, #1
 801325c:	4a1d      	ldr	r2, [pc, #116]	@ (80132d4 <prvAddNewTaskToReadyList+0xcc>)
 801325e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013260:	4b1c      	ldr	r3, [pc, #112]	@ (80132d4 <prvAddNewTaskToReadyList+0xcc>)
 8013262:	681a      	ldr	r2, [r3, #0]
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801326c:	2201      	movs	r2, #1
 801326e:	409a      	lsls	r2, r3
 8013270:	4b19      	ldr	r3, [pc, #100]	@ (80132d8 <prvAddNewTaskToReadyList+0xd0>)
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	4313      	orrs	r3, r2
 8013276:	4a18      	ldr	r2, [pc, #96]	@ (80132d8 <prvAddNewTaskToReadyList+0xd0>)
 8013278:	6013      	str	r3, [r2, #0]
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801327e:	4613      	mov	r3, r2
 8013280:	009b      	lsls	r3, r3, #2
 8013282:	4413      	add	r3, r2
 8013284:	009b      	lsls	r3, r3, #2
 8013286:	4a15      	ldr	r2, [pc, #84]	@ (80132dc <prvAddNewTaskToReadyList+0xd4>)
 8013288:	441a      	add	r2, r3
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	3304      	adds	r3, #4
 801328e:	4619      	mov	r1, r3
 8013290:	4610      	mov	r0, r2
 8013292:	f7ff f96a 	bl	801256a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8013296:	f001 f9f3 	bl	8014680 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 801329a:	4b0d      	ldr	r3, [pc, #52]	@ (80132d0 <prvAddNewTaskToReadyList+0xc8>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d00e      	beq.n	80132c0 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80132a2:	4b0a      	ldr	r3, [pc, #40]	@ (80132cc <prvAddNewTaskToReadyList+0xc4>)
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132ac:	429a      	cmp	r2, r3
 80132ae:	d207      	bcs.n	80132c0 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80132b0:	4b0b      	ldr	r3, [pc, #44]	@ (80132e0 <prvAddNewTaskToReadyList+0xd8>)
 80132b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80132b6:	601a      	str	r2, [r3, #0]
 80132b8:	f3bf 8f4f 	dsb	sy
 80132bc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80132c0:	bf00      	nop
 80132c2:	3708      	adds	r7, #8
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd80      	pop	{r7, pc}
 80132c8:	200006c4 	.word	0x200006c4
 80132cc:	200005ec 	.word	0x200005ec
 80132d0:	200006d0 	.word	0x200006d0
 80132d4:	200006e0 	.word	0x200006e0
 80132d8:	200006cc 	.word	0x200006cc
 80132dc:	200005f0 	.word	0x200005f0
 80132e0:	e000ed04 	.word	0xe000ed04

080132e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b084      	sub	sp, #16
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80132ec:	2300      	movs	r3, #0
 80132ee:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d018      	beq.n	8013328 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80132f6:	4b14      	ldr	r3, [pc, #80]	@ (8013348 <vTaskDelay+0x64>)
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d00b      	beq.n	8013316 <vTaskDelay+0x32>
        __asm volatile
 80132fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013302:	f383 8811 	msr	BASEPRI, r3
 8013306:	f3bf 8f6f 	isb	sy
 801330a:	f3bf 8f4f 	dsb	sy
 801330e:	60bb      	str	r3, [r7, #8]
    }
 8013310:	bf00      	nop
 8013312:	bf00      	nop
 8013314:	e7fd      	b.n	8013312 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8013316:	f000 f86d 	bl	80133f4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801331a:	2100      	movs	r1, #0
 801331c:	6878      	ldr	r0, [r7, #4]
 801331e:	f000 fcc7 	bl	8013cb0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8013322:	f000 f875 	bl	8013410 <xTaskResumeAll>
 8013326:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d107      	bne.n	801333e <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 801332e:	4b07      	ldr	r3, [pc, #28]	@ (801334c <vTaskDelay+0x68>)
 8013330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013334:	601a      	str	r2, [r3, #0]
 8013336:	f3bf 8f4f 	dsb	sy
 801333a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 801333e:	bf00      	nop
 8013340:	3710      	adds	r7, #16
 8013342:	46bd      	mov	sp, r7
 8013344:	bd80      	pop	{r7, pc}
 8013346:	bf00      	nop
 8013348:	200006ec 	.word	0x200006ec
 801334c:	e000ed04 	.word	0xe000ed04

08013350 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b086      	sub	sp, #24
 8013354:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8013356:	4b20      	ldr	r3, [pc, #128]	@ (80133d8 <vTaskStartScheduler+0x88>)
 8013358:	9301      	str	r3, [sp, #4]
 801335a:	2300      	movs	r3, #0
 801335c:	9300      	str	r3, [sp, #0]
 801335e:	2300      	movs	r3, #0
 8013360:	2282      	movs	r2, #130	@ 0x82
 8013362:	491e      	ldr	r1, [pc, #120]	@ (80133dc <vTaskStartScheduler+0x8c>)
 8013364:	481e      	ldr	r0, [pc, #120]	@ (80133e0 <vTaskStartScheduler+0x90>)
 8013366:	f7ff fe77 	bl	8013058 <xTaskCreate>
 801336a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	2b01      	cmp	r3, #1
 8013370:	d102      	bne.n	8013378 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8013372:	f000 fd03 	bl	8013d7c <xTimerCreateTimerTask>
 8013376:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	2b01      	cmp	r3, #1
 801337c:	d116      	bne.n	80133ac <vTaskStartScheduler+0x5c>
        __asm volatile
 801337e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013382:	f383 8811 	msr	BASEPRI, r3
 8013386:	f3bf 8f6f 	isb	sy
 801338a:	f3bf 8f4f 	dsb	sy
 801338e:	60bb      	str	r3, [r7, #8]
    }
 8013390:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8013392:	4b14      	ldr	r3, [pc, #80]	@ (80133e4 <vTaskStartScheduler+0x94>)
 8013394:	f04f 32ff 	mov.w	r2, #4294967295
 8013398:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 801339a:	4b13      	ldr	r3, [pc, #76]	@ (80133e8 <vTaskStartScheduler+0x98>)
 801339c:	2201      	movs	r2, #1
 801339e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80133a0:	4b12      	ldr	r3, [pc, #72]	@ (80133ec <vTaskStartScheduler+0x9c>)
 80133a2:	2200      	movs	r2, #0
 80133a4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80133a6:	f001 f895 	bl	80144d4 <xPortStartScheduler>
 80133aa:	e00f      	b.n	80133cc <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133b2:	d10b      	bne.n	80133cc <vTaskStartScheduler+0x7c>
        __asm volatile
 80133b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133b8:	f383 8811 	msr	BASEPRI, r3
 80133bc:	f3bf 8f6f 	isb	sy
 80133c0:	f3bf 8f4f 	dsb	sy
 80133c4:	607b      	str	r3, [r7, #4]
    }
 80133c6:	bf00      	nop
 80133c8:	bf00      	nop
 80133ca:	e7fd      	b.n	80133c8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80133cc:	4b08      	ldr	r3, [pc, #32]	@ (80133f0 <vTaskStartScheduler+0xa0>)
 80133ce:	681b      	ldr	r3, [r3, #0]
}
 80133d0:	bf00      	nop
 80133d2:	3710      	adds	r7, #16
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}
 80133d8:	200006e8 	.word	0x200006e8
 80133dc:	08018930 	.word	0x08018930
 80133e0:	08013a19 	.word	0x08013a19
 80133e4:	200006e4 	.word	0x200006e4
 80133e8:	200006d0 	.word	0x200006d0
 80133ec:	200006c8 	.word	0x200006c8
 80133f0:	08019eac 	.word	0x08019eac

080133f4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80133f4:	b480      	push	{r7}
 80133f6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80133f8:	4b04      	ldr	r3, [pc, #16]	@ (801340c <vTaskSuspendAll+0x18>)
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	3301      	adds	r3, #1
 80133fe:	4a03      	ldr	r2, [pc, #12]	@ (801340c <vTaskSuspendAll+0x18>)
 8013400:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8013402:	bf00      	nop
 8013404:	46bd      	mov	sp, r7
 8013406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340a:	4770      	bx	lr
 801340c:	200006ec 	.word	0x200006ec

08013410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013410:	b580      	push	{r7, lr}
 8013412:	b084      	sub	sp, #16
 8013414:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8013416:	2300      	movs	r3, #0
 8013418:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 801341a:	2300      	movs	r3, #0
 801341c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 801341e:	4b42      	ldr	r3, [pc, #264]	@ (8013528 <xTaskResumeAll+0x118>)
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d10b      	bne.n	801343e <xTaskResumeAll+0x2e>
        __asm volatile
 8013426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801342a:	f383 8811 	msr	BASEPRI, r3
 801342e:	f3bf 8f6f 	isb	sy
 8013432:	f3bf 8f4f 	dsb	sy
 8013436:	603b      	str	r3, [r7, #0]
    }
 8013438:	bf00      	nop
 801343a:	bf00      	nop
 801343c:	e7fd      	b.n	801343a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 801343e:	f001 f8ed 	bl	801461c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8013442:	4b39      	ldr	r3, [pc, #228]	@ (8013528 <xTaskResumeAll+0x118>)
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	3b01      	subs	r3, #1
 8013448:	4a37      	ldr	r2, [pc, #220]	@ (8013528 <xTaskResumeAll+0x118>)
 801344a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801344c:	4b36      	ldr	r3, [pc, #216]	@ (8013528 <xTaskResumeAll+0x118>)
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d161      	bne.n	8013518 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013454:	4b35      	ldr	r3, [pc, #212]	@ (801352c <xTaskResumeAll+0x11c>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d05d      	beq.n	8013518 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801345c:	e02e      	b.n	80134bc <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801345e:	4b34      	ldr	r3, [pc, #208]	@ (8013530 <xTaskResumeAll+0x120>)
 8013460:	68db      	ldr	r3, [r3, #12]
 8013462:	68db      	ldr	r3, [r3, #12]
 8013464:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	3318      	adds	r3, #24
 801346a:	4618      	mov	r0, r3
 801346c:	f7ff f8da 	bl	8012624 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	3304      	adds	r3, #4
 8013474:	4618      	mov	r0, r3
 8013476:	f7ff f8d5 	bl	8012624 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801347e:	2201      	movs	r2, #1
 8013480:	409a      	lsls	r2, r3
 8013482:	4b2c      	ldr	r3, [pc, #176]	@ (8013534 <xTaskResumeAll+0x124>)
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	4313      	orrs	r3, r2
 8013488:	4a2a      	ldr	r2, [pc, #168]	@ (8013534 <xTaskResumeAll+0x124>)
 801348a:	6013      	str	r3, [r2, #0]
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013490:	4613      	mov	r3, r2
 8013492:	009b      	lsls	r3, r3, #2
 8013494:	4413      	add	r3, r2
 8013496:	009b      	lsls	r3, r3, #2
 8013498:	4a27      	ldr	r2, [pc, #156]	@ (8013538 <xTaskResumeAll+0x128>)
 801349a:	441a      	add	r2, r3
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	3304      	adds	r3, #4
 80134a0:	4619      	mov	r1, r3
 80134a2:	4610      	mov	r0, r2
 80134a4:	f7ff f861 	bl	801256a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134ac:	4b23      	ldr	r3, [pc, #140]	@ (801353c <xTaskResumeAll+0x12c>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134b2:	429a      	cmp	r2, r3
 80134b4:	d302      	bcc.n	80134bc <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 80134b6:	4b22      	ldr	r3, [pc, #136]	@ (8013540 <xTaskResumeAll+0x130>)
 80134b8:	2201      	movs	r2, #1
 80134ba:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80134bc:	4b1c      	ldr	r3, [pc, #112]	@ (8013530 <xTaskResumeAll+0x120>)
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d1cc      	bne.n	801345e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d001      	beq.n	80134ce <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80134ca:	f000 fb3b 	bl	8013b44 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80134ce:	4b1d      	ldr	r3, [pc, #116]	@ (8013544 <xTaskResumeAll+0x134>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d010      	beq.n	80134fc <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80134da:	f000 f847 	bl	801356c <xTaskIncrementTick>
 80134de:	4603      	mov	r3, r0
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d002      	beq.n	80134ea <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 80134e4:	4b16      	ldr	r3, [pc, #88]	@ (8013540 <xTaskResumeAll+0x130>)
 80134e6:	2201      	movs	r2, #1
 80134e8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	3b01      	subs	r3, #1
 80134ee:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d1f1      	bne.n	80134da <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 80134f6:	4b13      	ldr	r3, [pc, #76]	@ (8013544 <xTaskResumeAll+0x134>)
 80134f8:	2200      	movs	r2, #0
 80134fa:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80134fc:	4b10      	ldr	r3, [pc, #64]	@ (8013540 <xTaskResumeAll+0x130>)
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d009      	beq.n	8013518 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8013504:	2301      	movs	r3, #1
 8013506:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8013508:	4b0f      	ldr	r3, [pc, #60]	@ (8013548 <xTaskResumeAll+0x138>)
 801350a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801350e:	601a      	str	r2, [r3, #0]
 8013510:	f3bf 8f4f 	dsb	sy
 8013514:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8013518:	f001 f8b2 	bl	8014680 <vPortExitCritical>

    return xAlreadyYielded;
 801351c:	68bb      	ldr	r3, [r7, #8]
}
 801351e:	4618      	mov	r0, r3
 8013520:	3710      	adds	r7, #16
 8013522:	46bd      	mov	sp, r7
 8013524:	bd80      	pop	{r7, pc}
 8013526:	bf00      	nop
 8013528:	200006ec 	.word	0x200006ec
 801352c:	200006c4 	.word	0x200006c4
 8013530:	20000684 	.word	0x20000684
 8013534:	200006cc 	.word	0x200006cc
 8013538:	200005f0 	.word	0x200005f0
 801353c:	200005ec 	.word	0x200005ec
 8013540:	200006d8 	.word	0x200006d8
 8013544:	200006d4 	.word	0x200006d4
 8013548:	e000ed04 	.word	0xe000ed04

0801354c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801354c:	b480      	push	{r7}
 801354e:	b083      	sub	sp, #12
 8013550:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8013552:	4b05      	ldr	r3, [pc, #20]	@ (8013568 <xTaskGetTickCount+0x1c>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8013558:	687b      	ldr	r3, [r7, #4]
}
 801355a:	4618      	mov	r0, r3
 801355c:	370c      	adds	r7, #12
 801355e:	46bd      	mov	sp, r7
 8013560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013564:	4770      	bx	lr
 8013566:	bf00      	nop
 8013568:	200006c8 	.word	0x200006c8

0801356c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b086      	sub	sp, #24
 8013570:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8013572:	2300      	movs	r3, #0
 8013574:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013576:	4b4f      	ldr	r3, [pc, #316]	@ (80136b4 <xTaskIncrementTick+0x148>)
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	2b00      	cmp	r3, #0
 801357c:	f040 808f 	bne.w	801369e <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013580:	4b4d      	ldr	r3, [pc, #308]	@ (80136b8 <xTaskIncrementTick+0x14c>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	3301      	adds	r3, #1
 8013586:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8013588:	4a4b      	ldr	r2, [pc, #300]	@ (80136b8 <xTaskIncrementTick+0x14c>)
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d121      	bne.n	80135d8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8013594:	4b49      	ldr	r3, [pc, #292]	@ (80136bc <xTaskIncrementTick+0x150>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d00b      	beq.n	80135b6 <xTaskIncrementTick+0x4a>
        __asm volatile
 801359e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135a2:	f383 8811 	msr	BASEPRI, r3
 80135a6:	f3bf 8f6f 	isb	sy
 80135aa:	f3bf 8f4f 	dsb	sy
 80135ae:	603b      	str	r3, [r7, #0]
    }
 80135b0:	bf00      	nop
 80135b2:	bf00      	nop
 80135b4:	e7fd      	b.n	80135b2 <xTaskIncrementTick+0x46>
 80135b6:	4b41      	ldr	r3, [pc, #260]	@ (80136bc <xTaskIncrementTick+0x150>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	60fb      	str	r3, [r7, #12]
 80135bc:	4b40      	ldr	r3, [pc, #256]	@ (80136c0 <xTaskIncrementTick+0x154>)
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	4a3e      	ldr	r2, [pc, #248]	@ (80136bc <xTaskIncrementTick+0x150>)
 80135c2:	6013      	str	r3, [r2, #0]
 80135c4:	4a3e      	ldr	r2, [pc, #248]	@ (80136c0 <xTaskIncrementTick+0x154>)
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	6013      	str	r3, [r2, #0]
 80135ca:	4b3e      	ldr	r3, [pc, #248]	@ (80136c4 <xTaskIncrementTick+0x158>)
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	3301      	adds	r3, #1
 80135d0:	4a3c      	ldr	r2, [pc, #240]	@ (80136c4 <xTaskIncrementTick+0x158>)
 80135d2:	6013      	str	r3, [r2, #0]
 80135d4:	f000 fab6 	bl	8013b44 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80135d8:	4b3b      	ldr	r3, [pc, #236]	@ (80136c8 <xTaskIncrementTick+0x15c>)
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	693a      	ldr	r2, [r7, #16]
 80135de:	429a      	cmp	r2, r3
 80135e0:	d348      	bcc.n	8013674 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80135e2:	4b36      	ldr	r3, [pc, #216]	@ (80136bc <xTaskIncrementTick+0x150>)
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d104      	bne.n	80135f6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80135ec:	4b36      	ldr	r3, [pc, #216]	@ (80136c8 <xTaskIncrementTick+0x15c>)
 80135ee:	f04f 32ff 	mov.w	r2, #4294967295
 80135f2:	601a      	str	r2, [r3, #0]
                    break;
 80135f4:	e03e      	b.n	8013674 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80135f6:	4b31      	ldr	r3, [pc, #196]	@ (80136bc <xTaskIncrementTick+0x150>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	68db      	ldr	r3, [r3, #12]
 80135fc:	68db      	ldr	r3, [r3, #12]
 80135fe:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	685b      	ldr	r3, [r3, #4]
 8013604:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8013606:	693a      	ldr	r2, [r7, #16]
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	429a      	cmp	r2, r3
 801360c:	d203      	bcs.n	8013616 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 801360e:	4a2e      	ldr	r2, [pc, #184]	@ (80136c8 <xTaskIncrementTick+0x15c>)
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013614:	e02e      	b.n	8013674 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	3304      	adds	r3, #4
 801361a:	4618      	mov	r0, r3
 801361c:	f7ff f802 	bl	8012624 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013620:	68bb      	ldr	r3, [r7, #8]
 8013622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013624:	2b00      	cmp	r3, #0
 8013626:	d004      	beq.n	8013632 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013628:	68bb      	ldr	r3, [r7, #8]
 801362a:	3318      	adds	r3, #24
 801362c:	4618      	mov	r0, r3
 801362e:	f7fe fff9 	bl	8012624 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8013632:	68bb      	ldr	r3, [r7, #8]
 8013634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013636:	2201      	movs	r2, #1
 8013638:	409a      	lsls	r2, r3
 801363a:	4b24      	ldr	r3, [pc, #144]	@ (80136cc <xTaskIncrementTick+0x160>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	4313      	orrs	r3, r2
 8013640:	4a22      	ldr	r2, [pc, #136]	@ (80136cc <xTaskIncrementTick+0x160>)
 8013642:	6013      	str	r3, [r2, #0]
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013648:	4613      	mov	r3, r2
 801364a:	009b      	lsls	r3, r3, #2
 801364c:	4413      	add	r3, r2
 801364e:	009b      	lsls	r3, r3, #2
 8013650:	4a1f      	ldr	r2, [pc, #124]	@ (80136d0 <xTaskIncrementTick+0x164>)
 8013652:	441a      	add	r2, r3
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	3304      	adds	r3, #4
 8013658:	4619      	mov	r1, r3
 801365a:	4610      	mov	r0, r2
 801365c:	f7fe ff85 	bl	801256a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013660:	68bb      	ldr	r3, [r7, #8]
 8013662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013664:	4b1b      	ldr	r3, [pc, #108]	@ (80136d4 <xTaskIncrementTick+0x168>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801366a:	429a      	cmp	r2, r3
 801366c:	d3b9      	bcc.n	80135e2 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 801366e:	2301      	movs	r3, #1
 8013670:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013672:	e7b6      	b.n	80135e2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013674:	4b17      	ldr	r3, [pc, #92]	@ (80136d4 <xTaskIncrementTick+0x168>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801367a:	4915      	ldr	r1, [pc, #84]	@ (80136d0 <xTaskIncrementTick+0x164>)
 801367c:	4613      	mov	r3, r2
 801367e:	009b      	lsls	r3, r3, #2
 8013680:	4413      	add	r3, r2
 8013682:	009b      	lsls	r3, r3, #2
 8013684:	440b      	add	r3, r1
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	2b01      	cmp	r3, #1
 801368a:	d901      	bls.n	8013690 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 801368c:	2301      	movs	r3, #1
 801368e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8013690:	4b11      	ldr	r3, [pc, #68]	@ (80136d8 <xTaskIncrementTick+0x16c>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d007      	beq.n	80136a8 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8013698:	2301      	movs	r3, #1
 801369a:	617b      	str	r3, [r7, #20]
 801369c:	e004      	b.n	80136a8 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 801369e:	4b0f      	ldr	r3, [pc, #60]	@ (80136dc <xTaskIncrementTick+0x170>)
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	3301      	adds	r3, #1
 80136a4:	4a0d      	ldr	r2, [pc, #52]	@ (80136dc <xTaskIncrementTick+0x170>)
 80136a6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80136a8:	697b      	ldr	r3, [r7, #20]
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	3718      	adds	r7, #24
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}
 80136b2:	bf00      	nop
 80136b4:	200006ec 	.word	0x200006ec
 80136b8:	200006c8 	.word	0x200006c8
 80136bc:	2000067c 	.word	0x2000067c
 80136c0:	20000680 	.word	0x20000680
 80136c4:	200006dc 	.word	0x200006dc
 80136c8:	200006e4 	.word	0x200006e4
 80136cc:	200006cc 	.word	0x200006cc
 80136d0:	200005f0 	.word	0x200005f0
 80136d4:	200005ec 	.word	0x200005ec
 80136d8:	200006d8 	.word	0x200006d8
 80136dc:	200006d4 	.word	0x200006d4

080136e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80136e0:	b480      	push	{r7}
 80136e2:	b087      	sub	sp, #28
 80136e4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80136e6:	4b27      	ldr	r3, [pc, #156]	@ (8013784 <vTaskSwitchContext+0xa4>)
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d003      	beq.n	80136f6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80136ee:	4b26      	ldr	r3, [pc, #152]	@ (8013788 <vTaskSwitchContext+0xa8>)
 80136f0:	2201      	movs	r2, #1
 80136f2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80136f4:	e040      	b.n	8013778 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 80136f6:	4b24      	ldr	r3, [pc, #144]	@ (8013788 <vTaskSwitchContext+0xa8>)
 80136f8:	2200      	movs	r2, #0
 80136fa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136fc:	4b23      	ldr	r3, [pc, #140]	@ (801378c <vTaskSwitchContext+0xac>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	fab3 f383 	clz	r3, r3
 8013708:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 801370a:	7afb      	ldrb	r3, [r7, #11]
 801370c:	f1c3 031f 	rsb	r3, r3, #31
 8013710:	617b      	str	r3, [r7, #20]
 8013712:	491f      	ldr	r1, [pc, #124]	@ (8013790 <vTaskSwitchContext+0xb0>)
 8013714:	697a      	ldr	r2, [r7, #20]
 8013716:	4613      	mov	r3, r2
 8013718:	009b      	lsls	r3, r3, #2
 801371a:	4413      	add	r3, r2
 801371c:	009b      	lsls	r3, r3, #2
 801371e:	440b      	add	r3, r1
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d10b      	bne.n	801373e <vTaskSwitchContext+0x5e>
        __asm volatile
 8013726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801372a:	f383 8811 	msr	BASEPRI, r3
 801372e:	f3bf 8f6f 	isb	sy
 8013732:	f3bf 8f4f 	dsb	sy
 8013736:	607b      	str	r3, [r7, #4]
    }
 8013738:	bf00      	nop
 801373a:	bf00      	nop
 801373c:	e7fd      	b.n	801373a <vTaskSwitchContext+0x5a>
 801373e:	697a      	ldr	r2, [r7, #20]
 8013740:	4613      	mov	r3, r2
 8013742:	009b      	lsls	r3, r3, #2
 8013744:	4413      	add	r3, r2
 8013746:	009b      	lsls	r3, r3, #2
 8013748:	4a11      	ldr	r2, [pc, #68]	@ (8013790 <vTaskSwitchContext+0xb0>)
 801374a:	4413      	add	r3, r2
 801374c:	613b      	str	r3, [r7, #16]
 801374e:	693b      	ldr	r3, [r7, #16]
 8013750:	685b      	ldr	r3, [r3, #4]
 8013752:	685a      	ldr	r2, [r3, #4]
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	605a      	str	r2, [r3, #4]
 8013758:	693b      	ldr	r3, [r7, #16]
 801375a:	685a      	ldr	r2, [r3, #4]
 801375c:	693b      	ldr	r3, [r7, #16]
 801375e:	3308      	adds	r3, #8
 8013760:	429a      	cmp	r2, r3
 8013762:	d104      	bne.n	801376e <vTaskSwitchContext+0x8e>
 8013764:	693b      	ldr	r3, [r7, #16]
 8013766:	685b      	ldr	r3, [r3, #4]
 8013768:	685a      	ldr	r2, [r3, #4]
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	605a      	str	r2, [r3, #4]
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	685b      	ldr	r3, [r3, #4]
 8013772:	68db      	ldr	r3, [r3, #12]
 8013774:	4a07      	ldr	r2, [pc, #28]	@ (8013794 <vTaskSwitchContext+0xb4>)
 8013776:	6013      	str	r3, [r2, #0]
}
 8013778:	bf00      	nop
 801377a:	371c      	adds	r7, #28
 801377c:	46bd      	mov	sp, r7
 801377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013782:	4770      	bx	lr
 8013784:	200006ec 	.word	0x200006ec
 8013788:	200006d8 	.word	0x200006d8
 801378c:	200006cc 	.word	0x200006cc
 8013790:	200005f0 	.word	0x200005f0
 8013794:	200005ec 	.word	0x200005ec

08013798 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b084      	sub	sp, #16
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
 80137a0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d10b      	bne.n	80137c0 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80137a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137ac:	f383 8811 	msr	BASEPRI, r3
 80137b0:	f3bf 8f6f 	isb	sy
 80137b4:	f3bf 8f4f 	dsb	sy
 80137b8:	60fb      	str	r3, [r7, #12]
    }
 80137ba:	bf00      	nop
 80137bc:	bf00      	nop
 80137be:	e7fd      	b.n	80137bc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80137c0:	4b07      	ldr	r3, [pc, #28]	@ (80137e0 <vTaskPlaceOnEventList+0x48>)
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	3318      	adds	r3, #24
 80137c6:	4619      	mov	r1, r3
 80137c8:	6878      	ldr	r0, [r7, #4]
 80137ca:	f7fe fef2 	bl	80125b2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80137ce:	2101      	movs	r1, #1
 80137d0:	6838      	ldr	r0, [r7, #0]
 80137d2:	f000 fa6d 	bl	8013cb0 <prvAddCurrentTaskToDelayedList>
}
 80137d6:	bf00      	nop
 80137d8:	3710      	adds	r7, #16
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}
 80137de:	bf00      	nop
 80137e0:	200005ec 	.word	0x200005ec

080137e4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b086      	sub	sp, #24
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	60f8      	str	r0, [r7, #12]
 80137ec:	60b9      	str	r1, [r7, #8]
 80137ee:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d10b      	bne.n	801380e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80137f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137fa:	f383 8811 	msr	BASEPRI, r3
 80137fe:	f3bf 8f6f 	isb	sy
 8013802:	f3bf 8f4f 	dsb	sy
 8013806:	617b      	str	r3, [r7, #20]
    }
 8013808:	bf00      	nop
 801380a:	bf00      	nop
 801380c:	e7fd      	b.n	801380a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801380e:	4b0a      	ldr	r3, [pc, #40]	@ (8013838 <vTaskPlaceOnEventListRestricted+0x54>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	3318      	adds	r3, #24
 8013814:	4619      	mov	r1, r3
 8013816:	68f8      	ldr	r0, [r7, #12]
 8013818:	f7fe fea7 	bl	801256a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d002      	beq.n	8013828 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8013822:	f04f 33ff 	mov.w	r3, #4294967295
 8013826:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013828:	6879      	ldr	r1, [r7, #4]
 801382a:	68b8      	ldr	r0, [r7, #8]
 801382c:	f000 fa40 	bl	8013cb0 <prvAddCurrentTaskToDelayedList>
    }
 8013830:	bf00      	nop
 8013832:	3718      	adds	r7, #24
 8013834:	46bd      	mov	sp, r7
 8013836:	bd80      	pop	{r7, pc}
 8013838:	200005ec 	.word	0x200005ec

0801383c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b086      	sub	sp, #24
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	68db      	ldr	r3, [r3, #12]
 8013848:	68db      	ldr	r3, [r3, #12]
 801384a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d10b      	bne.n	801386a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8013852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013856:	f383 8811 	msr	BASEPRI, r3
 801385a:	f3bf 8f6f 	isb	sy
 801385e:	f3bf 8f4f 	dsb	sy
 8013862:	60fb      	str	r3, [r7, #12]
    }
 8013864:	bf00      	nop
 8013866:	bf00      	nop
 8013868:	e7fd      	b.n	8013866 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	3318      	adds	r3, #24
 801386e:	4618      	mov	r0, r3
 8013870:	f7fe fed8 	bl	8012624 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013874:	4b1d      	ldr	r3, [pc, #116]	@ (80138ec <xTaskRemoveFromEventList+0xb0>)
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d11c      	bne.n	80138b6 <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801387c:	693b      	ldr	r3, [r7, #16]
 801387e:	3304      	adds	r3, #4
 8013880:	4618      	mov	r0, r3
 8013882:	f7fe fecf 	bl	8012624 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8013886:	693b      	ldr	r3, [r7, #16]
 8013888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801388a:	2201      	movs	r2, #1
 801388c:	409a      	lsls	r2, r3
 801388e:	4b18      	ldr	r3, [pc, #96]	@ (80138f0 <xTaskRemoveFromEventList+0xb4>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	4313      	orrs	r3, r2
 8013894:	4a16      	ldr	r2, [pc, #88]	@ (80138f0 <xTaskRemoveFromEventList+0xb4>)
 8013896:	6013      	str	r3, [r2, #0]
 8013898:	693b      	ldr	r3, [r7, #16]
 801389a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801389c:	4613      	mov	r3, r2
 801389e:	009b      	lsls	r3, r3, #2
 80138a0:	4413      	add	r3, r2
 80138a2:	009b      	lsls	r3, r3, #2
 80138a4:	4a13      	ldr	r2, [pc, #76]	@ (80138f4 <xTaskRemoveFromEventList+0xb8>)
 80138a6:	441a      	add	r2, r3
 80138a8:	693b      	ldr	r3, [r7, #16]
 80138aa:	3304      	adds	r3, #4
 80138ac:	4619      	mov	r1, r3
 80138ae:	4610      	mov	r0, r2
 80138b0:	f7fe fe5b 	bl	801256a <vListInsertEnd>
 80138b4:	e005      	b.n	80138c2 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	3318      	adds	r3, #24
 80138ba:	4619      	mov	r1, r3
 80138bc:	480e      	ldr	r0, [pc, #56]	@ (80138f8 <xTaskRemoveFromEventList+0xbc>)
 80138be:	f7fe fe54 	bl	801256a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80138c2:	693b      	ldr	r3, [r7, #16]
 80138c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80138c6:	4b0d      	ldr	r3, [pc, #52]	@ (80138fc <xTaskRemoveFromEventList+0xc0>)
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138cc:	429a      	cmp	r2, r3
 80138ce:	d905      	bls.n	80138dc <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80138d0:	2301      	movs	r3, #1
 80138d2:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80138d4:	4b0a      	ldr	r3, [pc, #40]	@ (8013900 <xTaskRemoveFromEventList+0xc4>)
 80138d6:	2201      	movs	r2, #1
 80138d8:	601a      	str	r2, [r3, #0]
 80138da:	e001      	b.n	80138e0 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 80138dc:	2300      	movs	r3, #0
 80138de:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80138e0:	697b      	ldr	r3, [r7, #20]
}
 80138e2:	4618      	mov	r0, r3
 80138e4:	3718      	adds	r7, #24
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bd80      	pop	{r7, pc}
 80138ea:	bf00      	nop
 80138ec:	200006ec 	.word	0x200006ec
 80138f0:	200006cc 	.word	0x200006cc
 80138f4:	200005f0 	.word	0x200005f0
 80138f8:	20000684 	.word	0x20000684
 80138fc:	200005ec 	.word	0x200005ec
 8013900:	200006d8 	.word	0x200006d8

08013904 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013904:	b480      	push	{r7}
 8013906:	b083      	sub	sp, #12
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 801390c:	4b06      	ldr	r3, [pc, #24]	@ (8013928 <vTaskInternalSetTimeOutState+0x24>)
 801390e:	681a      	ldr	r2, [r3, #0]
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8013914:	4b05      	ldr	r3, [pc, #20]	@ (801392c <vTaskInternalSetTimeOutState+0x28>)
 8013916:	681a      	ldr	r2, [r3, #0]
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	605a      	str	r2, [r3, #4]
}
 801391c:	bf00      	nop
 801391e:	370c      	adds	r7, #12
 8013920:	46bd      	mov	sp, r7
 8013922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013926:	4770      	bx	lr
 8013928:	200006dc 	.word	0x200006dc
 801392c:	200006c8 	.word	0x200006c8

08013930 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b088      	sub	sp, #32
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
 8013938:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d10b      	bne.n	8013958 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8013940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013944:	f383 8811 	msr	BASEPRI, r3
 8013948:	f3bf 8f6f 	isb	sy
 801394c:	f3bf 8f4f 	dsb	sy
 8013950:	613b      	str	r3, [r7, #16]
    }
 8013952:	bf00      	nop
 8013954:	bf00      	nop
 8013956:	e7fd      	b.n	8013954 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8013958:	683b      	ldr	r3, [r7, #0]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d10b      	bne.n	8013976 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 801395e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013962:	f383 8811 	msr	BASEPRI, r3
 8013966:	f3bf 8f6f 	isb	sy
 801396a:	f3bf 8f4f 	dsb	sy
 801396e:	60fb      	str	r3, [r7, #12]
    }
 8013970:	bf00      	nop
 8013972:	bf00      	nop
 8013974:	e7fd      	b.n	8013972 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8013976:	f000 fe51 	bl	801461c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 801397a:	4b1f      	ldr	r3, [pc, #124]	@ (80139f8 <xTaskCheckForTimeOut+0xc8>)
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	685b      	ldr	r3, [r3, #4]
 8013984:	69ba      	ldr	r2, [r7, #24]
 8013986:	1ad3      	subs	r3, r2, r3
 8013988:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 801398a:	683b      	ldr	r3, [r7, #0]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013992:	d102      	bne.n	801399a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8013994:	2300      	movs	r3, #0
 8013996:	61fb      	str	r3, [r7, #28]
 8013998:	e026      	b.n	80139e8 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	681a      	ldr	r2, [r3, #0]
 801399e:	4b17      	ldr	r3, [pc, #92]	@ (80139fc <xTaskCheckForTimeOut+0xcc>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	429a      	cmp	r2, r3
 80139a4:	d00a      	beq.n	80139bc <xTaskCheckForTimeOut+0x8c>
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	685b      	ldr	r3, [r3, #4]
 80139aa:	69ba      	ldr	r2, [r7, #24]
 80139ac:	429a      	cmp	r2, r3
 80139ae:	d305      	bcc.n	80139bc <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80139b0:	2301      	movs	r3, #1
 80139b2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	2200      	movs	r2, #0
 80139b8:	601a      	str	r2, [r3, #0]
 80139ba:	e015      	b.n	80139e8 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80139bc:	683b      	ldr	r3, [r7, #0]
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	697a      	ldr	r2, [r7, #20]
 80139c2:	429a      	cmp	r2, r3
 80139c4:	d20b      	bcs.n	80139de <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	681a      	ldr	r2, [r3, #0]
 80139ca:	697b      	ldr	r3, [r7, #20]
 80139cc:	1ad2      	subs	r2, r2, r3
 80139ce:	683b      	ldr	r3, [r7, #0]
 80139d0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80139d2:	6878      	ldr	r0, [r7, #4]
 80139d4:	f7ff ff96 	bl	8013904 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80139d8:	2300      	movs	r3, #0
 80139da:	61fb      	str	r3, [r7, #28]
 80139dc:	e004      	b.n	80139e8 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	2200      	movs	r2, #0
 80139e2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80139e4:	2301      	movs	r3, #1
 80139e6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80139e8:	f000 fe4a 	bl	8014680 <vPortExitCritical>

    return xReturn;
 80139ec:	69fb      	ldr	r3, [r7, #28]
}
 80139ee:	4618      	mov	r0, r3
 80139f0:	3720      	adds	r7, #32
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
 80139f6:	bf00      	nop
 80139f8:	200006c8 	.word	0x200006c8
 80139fc:	200006dc 	.word	0x200006dc

08013a00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013a00:	b480      	push	{r7}
 8013a02:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8013a04:	4b03      	ldr	r3, [pc, #12]	@ (8013a14 <vTaskMissedYield+0x14>)
 8013a06:	2201      	movs	r2, #1
 8013a08:	601a      	str	r2, [r3, #0]
}
 8013a0a:	bf00      	nop
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a12:	4770      	bx	lr
 8013a14:	200006d8 	.word	0x200006d8

08013a18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8013a20:	f000 f852 	bl	8013ac8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013a24:	4b06      	ldr	r3, [pc, #24]	@ (8013a40 <prvIdleTask+0x28>)
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	2b01      	cmp	r3, #1
 8013a2a:	d9f9      	bls.n	8013a20 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8013a2c:	4b05      	ldr	r3, [pc, #20]	@ (8013a44 <prvIdleTask+0x2c>)
 8013a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a32:	601a      	str	r2, [r3, #0]
 8013a34:	f3bf 8f4f 	dsb	sy
 8013a38:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8013a3c:	e7f0      	b.n	8013a20 <prvIdleTask+0x8>
 8013a3e:	bf00      	nop
 8013a40:	200005f0 	.word	0x200005f0
 8013a44:	e000ed04 	.word	0xe000ed04

08013a48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b082      	sub	sp, #8
 8013a4c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013a4e:	2300      	movs	r3, #0
 8013a50:	607b      	str	r3, [r7, #4]
 8013a52:	e00c      	b.n	8013a6e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013a54:	687a      	ldr	r2, [r7, #4]
 8013a56:	4613      	mov	r3, r2
 8013a58:	009b      	lsls	r3, r3, #2
 8013a5a:	4413      	add	r3, r2
 8013a5c:	009b      	lsls	r3, r3, #2
 8013a5e:	4a12      	ldr	r2, [pc, #72]	@ (8013aa8 <prvInitialiseTaskLists+0x60>)
 8013a60:	4413      	add	r3, r2
 8013a62:	4618      	mov	r0, r3
 8013a64:	f7fe fd54 	bl	8012510 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	3301      	adds	r3, #1
 8013a6c:	607b      	str	r3, [r7, #4]
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	2b04      	cmp	r3, #4
 8013a72:	d9ef      	bls.n	8013a54 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8013a74:	480d      	ldr	r0, [pc, #52]	@ (8013aac <prvInitialiseTaskLists+0x64>)
 8013a76:	f7fe fd4b 	bl	8012510 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8013a7a:	480d      	ldr	r0, [pc, #52]	@ (8013ab0 <prvInitialiseTaskLists+0x68>)
 8013a7c:	f7fe fd48 	bl	8012510 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8013a80:	480c      	ldr	r0, [pc, #48]	@ (8013ab4 <prvInitialiseTaskLists+0x6c>)
 8013a82:	f7fe fd45 	bl	8012510 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8013a86:	480c      	ldr	r0, [pc, #48]	@ (8013ab8 <prvInitialiseTaskLists+0x70>)
 8013a88:	f7fe fd42 	bl	8012510 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8013a8c:	480b      	ldr	r0, [pc, #44]	@ (8013abc <prvInitialiseTaskLists+0x74>)
 8013a8e:	f7fe fd3f 	bl	8012510 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8013a92:	4b0b      	ldr	r3, [pc, #44]	@ (8013ac0 <prvInitialiseTaskLists+0x78>)
 8013a94:	4a05      	ldr	r2, [pc, #20]	@ (8013aac <prvInitialiseTaskLists+0x64>)
 8013a96:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013a98:	4b0a      	ldr	r3, [pc, #40]	@ (8013ac4 <prvInitialiseTaskLists+0x7c>)
 8013a9a:	4a05      	ldr	r2, [pc, #20]	@ (8013ab0 <prvInitialiseTaskLists+0x68>)
 8013a9c:	601a      	str	r2, [r3, #0]
}
 8013a9e:	bf00      	nop
 8013aa0:	3708      	adds	r7, #8
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}
 8013aa6:	bf00      	nop
 8013aa8:	200005f0 	.word	0x200005f0
 8013aac:	20000654 	.word	0x20000654
 8013ab0:	20000668 	.word	0x20000668
 8013ab4:	20000684 	.word	0x20000684
 8013ab8:	20000698 	.word	0x20000698
 8013abc:	200006b0 	.word	0x200006b0
 8013ac0:	2000067c 	.word	0x2000067c
 8013ac4:	20000680 	.word	0x20000680

08013ac8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b082      	sub	sp, #8
 8013acc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013ace:	e019      	b.n	8013b04 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8013ad0:	f000 fda4 	bl	801461c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ad4:	4b10      	ldr	r3, [pc, #64]	@ (8013b18 <prvCheckTasksWaitingTermination+0x50>)
 8013ad6:	68db      	ldr	r3, [r3, #12]
 8013ad8:	68db      	ldr	r3, [r3, #12]
 8013ada:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	3304      	adds	r3, #4
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7fe fd9f 	bl	8012624 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8013ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8013b1c <prvCheckTasksWaitingTermination+0x54>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	3b01      	subs	r3, #1
 8013aec:	4a0b      	ldr	r2, [pc, #44]	@ (8013b1c <prvCheckTasksWaitingTermination+0x54>)
 8013aee:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8013af0:	4b0b      	ldr	r3, [pc, #44]	@ (8013b20 <prvCheckTasksWaitingTermination+0x58>)
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	3b01      	subs	r3, #1
 8013af6:	4a0a      	ldr	r2, [pc, #40]	@ (8013b20 <prvCheckTasksWaitingTermination+0x58>)
 8013af8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8013afa:	f000 fdc1 	bl	8014680 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8013afe:	6878      	ldr	r0, [r7, #4]
 8013b00:	f000 f810 	bl	8013b24 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013b04:	4b06      	ldr	r3, [pc, #24]	@ (8013b20 <prvCheckTasksWaitingTermination+0x58>)
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d1e1      	bne.n	8013ad0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8013b0c:	bf00      	nop
 8013b0e:	bf00      	nop
 8013b10:	3708      	adds	r7, #8
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}
 8013b16:	bf00      	nop
 8013b18:	20000698 	.word	0x20000698
 8013b1c:	200006c4 	.word	0x200006c4
 8013b20:	200006ac 	.word	0x200006ac

08013b24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b082      	sub	sp, #8
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b30:	4618      	mov	r0, r3
 8013b32:	f000 ff7f 	bl	8014a34 <vPortFree>
                vPortFree( pxTCB );
 8013b36:	6878      	ldr	r0, [r7, #4]
 8013b38:	f000 ff7c 	bl	8014a34 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8013b3c:	bf00      	nop
 8013b3e:	3708      	adds	r7, #8
 8013b40:	46bd      	mov	sp, r7
 8013b42:	bd80      	pop	{r7, pc}

08013b44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013b44:	b480      	push	{r7}
 8013b46:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013b48:	4b0a      	ldr	r3, [pc, #40]	@ (8013b74 <prvResetNextTaskUnblockTime+0x30>)
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d104      	bne.n	8013b5c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8013b52:	4b09      	ldr	r3, [pc, #36]	@ (8013b78 <prvResetNextTaskUnblockTime+0x34>)
 8013b54:	f04f 32ff 	mov.w	r2, #4294967295
 8013b58:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8013b5a:	e005      	b.n	8013b68 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013b5c:	4b05      	ldr	r3, [pc, #20]	@ (8013b74 <prvResetNextTaskUnblockTime+0x30>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	68db      	ldr	r3, [r3, #12]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	4a04      	ldr	r2, [pc, #16]	@ (8013b78 <prvResetNextTaskUnblockTime+0x34>)
 8013b66:	6013      	str	r3, [r2, #0]
}
 8013b68:	bf00      	nop
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b70:	4770      	bx	lr
 8013b72:	bf00      	nop
 8013b74:	2000067c 	.word	0x2000067c
 8013b78:	200006e4 	.word	0x200006e4

08013b7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8013b7c:	b480      	push	{r7}
 8013b7e:	b083      	sub	sp, #12
 8013b80:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8013b82:	4b0b      	ldr	r3, [pc, #44]	@ (8013bb0 <xTaskGetSchedulerState+0x34>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d102      	bne.n	8013b90 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	607b      	str	r3, [r7, #4]
 8013b8e:	e008      	b.n	8013ba2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b90:	4b08      	ldr	r3, [pc, #32]	@ (8013bb4 <xTaskGetSchedulerState+0x38>)
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d102      	bne.n	8013b9e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8013b98:	2302      	movs	r3, #2
 8013b9a:	607b      	str	r3, [r7, #4]
 8013b9c:	e001      	b.n	8013ba2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8013ba2:	687b      	ldr	r3, [r7, #4]
    }
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	370c      	adds	r7, #12
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bae:	4770      	bx	lr
 8013bb0:	200006d0 	.word	0x200006d0
 8013bb4:	200006ec 	.word	0x200006ec

08013bb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b086      	sub	sp, #24
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d065      	beq.n	8013c9a <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8013bce:	4b35      	ldr	r3, [pc, #212]	@ (8013ca4 <xTaskPriorityDisinherit+0xec>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	693a      	ldr	r2, [r7, #16]
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	d00b      	beq.n	8013bf0 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8013bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bdc:	f383 8811 	msr	BASEPRI, r3
 8013be0:	f3bf 8f6f 	isb	sy
 8013be4:	f3bf 8f4f 	dsb	sy
 8013be8:	60fb      	str	r3, [r7, #12]
    }
 8013bea:	bf00      	nop
 8013bec:	bf00      	nop
 8013bee:	e7fd      	b.n	8013bec <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8013bf0:	693b      	ldr	r3, [r7, #16]
 8013bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d10b      	bne.n	8013c10 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8013bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bfc:	f383 8811 	msr	BASEPRI, r3
 8013c00:	f3bf 8f6f 	isb	sy
 8013c04:	f3bf 8f4f 	dsb	sy
 8013c08:	60bb      	str	r3, [r7, #8]
    }
 8013c0a:	bf00      	nop
 8013c0c:	bf00      	nop
 8013c0e:	e7fd      	b.n	8013c0c <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013c14:	1e5a      	subs	r2, r3, #1
 8013c16:	693b      	ldr	r3, [r7, #16]
 8013c18:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013c1a:	693b      	ldr	r3, [r7, #16]
 8013c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c1e:	693b      	ldr	r3, [r7, #16]
 8013c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013c22:	429a      	cmp	r2, r3
 8013c24:	d039      	beq.n	8013c9a <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013c26:	693b      	ldr	r3, [r7, #16]
 8013c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d135      	bne.n	8013c9a <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013c2e:	693b      	ldr	r3, [r7, #16]
 8013c30:	3304      	adds	r3, #4
 8013c32:	4618      	mov	r0, r3
 8013c34:	f7fe fcf6 	bl	8012624 <uxListRemove>
 8013c38:	4603      	mov	r3, r0
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d10a      	bne.n	8013c54 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8013c3e:	693b      	ldr	r3, [r7, #16]
 8013c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c42:	2201      	movs	r2, #1
 8013c44:	fa02 f303 	lsl.w	r3, r2, r3
 8013c48:	43da      	mvns	r2, r3
 8013c4a:	4b17      	ldr	r3, [pc, #92]	@ (8013ca8 <xTaskPriorityDisinherit+0xf0>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	4013      	ands	r3, r2
 8013c50:	4a15      	ldr	r2, [pc, #84]	@ (8013ca8 <xTaskPriorityDisinherit+0xf0>)
 8013c52:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013c54:	693b      	ldr	r3, [r7, #16]
 8013c56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013c58:	693b      	ldr	r3, [r7, #16]
 8013c5a:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c60:	f1c3 0205 	rsb	r2, r3, #5
 8013c64:	693b      	ldr	r3, [r7, #16]
 8013c66:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c6c:	2201      	movs	r2, #1
 8013c6e:	409a      	lsls	r2, r3
 8013c70:	4b0d      	ldr	r3, [pc, #52]	@ (8013ca8 <xTaskPriorityDisinherit+0xf0>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	4313      	orrs	r3, r2
 8013c76:	4a0c      	ldr	r2, [pc, #48]	@ (8013ca8 <xTaskPriorityDisinherit+0xf0>)
 8013c78:	6013      	str	r3, [r2, #0]
 8013c7a:	693b      	ldr	r3, [r7, #16]
 8013c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c7e:	4613      	mov	r3, r2
 8013c80:	009b      	lsls	r3, r3, #2
 8013c82:	4413      	add	r3, r2
 8013c84:	009b      	lsls	r3, r3, #2
 8013c86:	4a09      	ldr	r2, [pc, #36]	@ (8013cac <xTaskPriorityDisinherit+0xf4>)
 8013c88:	441a      	add	r2, r3
 8013c8a:	693b      	ldr	r3, [r7, #16]
 8013c8c:	3304      	adds	r3, #4
 8013c8e:	4619      	mov	r1, r3
 8013c90:	4610      	mov	r0, r2
 8013c92:	f7fe fc6a 	bl	801256a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8013c96:	2301      	movs	r3, #1
 8013c98:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8013c9a:	697b      	ldr	r3, [r7, #20]
    }
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	3718      	adds	r7, #24
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}
 8013ca4:	200005ec 	.word	0x200005ec
 8013ca8:	200006cc 	.word	0x200006cc
 8013cac:	200005f0 	.word	0x200005f0

08013cb0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b084      	sub	sp, #16
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
 8013cb8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8013cba:	4b29      	ldr	r3, [pc, #164]	@ (8013d60 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013cc0:	4b28      	ldr	r3, [pc, #160]	@ (8013d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	3304      	adds	r3, #4
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f7fe fcac 	bl	8012624 <uxListRemove>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d10b      	bne.n	8013cea <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013cd2:	4b24      	ldr	r3, [pc, #144]	@ (8013d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cd8:	2201      	movs	r2, #1
 8013cda:	fa02 f303 	lsl.w	r3, r2, r3
 8013cde:	43da      	mvns	r2, r3
 8013ce0:	4b21      	ldr	r3, [pc, #132]	@ (8013d68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	4013      	ands	r3, r2
 8013ce6:	4a20      	ldr	r2, [pc, #128]	@ (8013d68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013ce8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cf0:	d10a      	bne.n	8013d08 <prvAddCurrentTaskToDelayedList+0x58>
 8013cf2:	683b      	ldr	r3, [r7, #0]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d007      	beq.n	8013d08 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8013d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	3304      	adds	r3, #4
 8013cfe:	4619      	mov	r1, r3
 8013d00:	481a      	ldr	r0, [pc, #104]	@ (8013d6c <prvAddCurrentTaskToDelayedList+0xbc>)
 8013d02:	f7fe fc32 	bl	801256a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8013d06:	e026      	b.n	8013d56 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8013d08:	68fa      	ldr	r2, [r7, #12]
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	4413      	add	r3, r2
 8013d0e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013d10:	4b14      	ldr	r3, [pc, #80]	@ (8013d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	68ba      	ldr	r2, [r7, #8]
 8013d16:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8013d18:	68ba      	ldr	r2, [r7, #8]
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	429a      	cmp	r2, r3
 8013d1e:	d209      	bcs.n	8013d34 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013d20:	4b13      	ldr	r3, [pc, #76]	@ (8013d70 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013d22:	681a      	ldr	r2, [r3, #0]
 8013d24:	4b0f      	ldr	r3, [pc, #60]	@ (8013d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	3304      	adds	r3, #4
 8013d2a:	4619      	mov	r1, r3
 8013d2c:	4610      	mov	r0, r2
 8013d2e:	f7fe fc40 	bl	80125b2 <vListInsert>
}
 8013d32:	e010      	b.n	8013d56 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013d34:	4b0f      	ldr	r3, [pc, #60]	@ (8013d74 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013d36:	681a      	ldr	r2, [r3, #0]
 8013d38:	4b0a      	ldr	r3, [pc, #40]	@ (8013d64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	3304      	adds	r3, #4
 8013d3e:	4619      	mov	r1, r3
 8013d40:	4610      	mov	r0, r2
 8013d42:	f7fe fc36 	bl	80125b2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8013d46:	4b0c      	ldr	r3, [pc, #48]	@ (8013d78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	68ba      	ldr	r2, [r7, #8]
 8013d4c:	429a      	cmp	r2, r3
 8013d4e:	d202      	bcs.n	8013d56 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8013d50:	4a09      	ldr	r2, [pc, #36]	@ (8013d78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013d52:	68bb      	ldr	r3, [r7, #8]
 8013d54:	6013      	str	r3, [r2, #0]
}
 8013d56:	bf00      	nop
 8013d58:	3710      	adds	r7, #16
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	bd80      	pop	{r7, pc}
 8013d5e:	bf00      	nop
 8013d60:	200006c8 	.word	0x200006c8
 8013d64:	200005ec 	.word	0x200005ec
 8013d68:	200006cc 	.word	0x200006cc
 8013d6c:	200006b0 	.word	0x200006b0
 8013d70:	20000680 	.word	0x20000680
 8013d74:	2000067c 	.word	0x2000067c
 8013d78:	200006e4 	.word	0x200006e4

08013d7c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b084      	sub	sp, #16
 8013d80:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8013d82:	2300      	movs	r3, #0
 8013d84:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8013d86:	f000 fae1 	bl	801434c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8013d8a:	4b12      	ldr	r3, [pc, #72]	@ (8013dd4 <xTimerCreateTimerTask+0x58>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d00b      	beq.n	8013daa <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8013d92:	4b11      	ldr	r3, [pc, #68]	@ (8013dd8 <xTimerCreateTimerTask+0x5c>)
 8013d94:	9301      	str	r3, [sp, #4]
 8013d96:	2302      	movs	r3, #2
 8013d98:	9300      	str	r3, [sp, #0]
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8013da0:	490e      	ldr	r1, [pc, #56]	@ (8013ddc <xTimerCreateTimerTask+0x60>)
 8013da2:	480f      	ldr	r0, [pc, #60]	@ (8013de0 <xTimerCreateTimerTask+0x64>)
 8013da4:	f7ff f958 	bl	8013058 <xTaskCreate>
 8013da8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d10b      	bne.n	8013dc8 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8013db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013db4:	f383 8811 	msr	BASEPRI, r3
 8013db8:	f3bf 8f6f 	isb	sy
 8013dbc:	f3bf 8f4f 	dsb	sy
 8013dc0:	603b      	str	r3, [r7, #0]
    }
 8013dc2:	bf00      	nop
 8013dc4:	bf00      	nop
 8013dc6:	e7fd      	b.n	8013dc4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8013dc8:	687b      	ldr	r3, [r7, #4]
    }
 8013dca:	4618      	mov	r0, r3
 8013dcc:	3708      	adds	r7, #8
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	bd80      	pop	{r7, pc}
 8013dd2:	bf00      	nop
 8013dd4:	20000720 	.word	0x20000720
 8013dd8:	20000724 	.word	0x20000724
 8013ddc:	08018938 	.word	0x08018938
 8013de0:	08013f1d 	.word	0x08013f1d

08013de4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b08a      	sub	sp, #40	@ 0x28
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	60f8      	str	r0, [r7, #12]
 8013dec:	60b9      	str	r1, [r7, #8]
 8013dee:	607a      	str	r2, [r7, #4]
 8013df0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8013df2:	2300      	movs	r3, #0
 8013df4:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d10b      	bne.n	8013e14 <xTimerGenericCommand+0x30>
        __asm volatile
 8013dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e00:	f383 8811 	msr	BASEPRI, r3
 8013e04:	f3bf 8f6f 	isb	sy
 8013e08:	f3bf 8f4f 	dsb	sy
 8013e0c:	623b      	str	r3, [r7, #32]
    }
 8013e0e:	bf00      	nop
 8013e10:	bf00      	nop
 8013e12:	e7fd      	b.n	8013e10 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8013e14:	4b19      	ldr	r3, [pc, #100]	@ (8013e7c <xTimerGenericCommand+0x98>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d02a      	beq.n	8013e72 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8013e1c:	68bb      	ldr	r3, [r7, #8]
 8013e1e:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013e28:	68bb      	ldr	r3, [r7, #8]
 8013e2a:	2b05      	cmp	r3, #5
 8013e2c:	dc18      	bgt.n	8013e60 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013e2e:	f7ff fea5 	bl	8013b7c <xTaskGetSchedulerState>
 8013e32:	4603      	mov	r3, r0
 8013e34:	2b02      	cmp	r3, #2
 8013e36:	d109      	bne.n	8013e4c <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013e38:	4b10      	ldr	r3, [pc, #64]	@ (8013e7c <xTimerGenericCommand+0x98>)
 8013e3a:	6818      	ldr	r0, [r3, #0]
 8013e3c:	f107 0114 	add.w	r1, r7, #20
 8013e40:	2300      	movs	r3, #0
 8013e42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013e44:	f7fe fd08 	bl	8012858 <xQueueGenericSend>
 8013e48:	6278      	str	r0, [r7, #36]	@ 0x24
 8013e4a:	e012      	b.n	8013e72 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8013e7c <xTimerGenericCommand+0x98>)
 8013e4e:	6818      	ldr	r0, [r3, #0]
 8013e50:	f107 0114 	add.w	r1, r7, #20
 8013e54:	2300      	movs	r3, #0
 8013e56:	2200      	movs	r2, #0
 8013e58:	f7fe fcfe 	bl	8012858 <xQueueGenericSend>
 8013e5c:	6278      	str	r0, [r7, #36]	@ 0x24
 8013e5e:	e008      	b.n	8013e72 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013e60:	4b06      	ldr	r3, [pc, #24]	@ (8013e7c <xTimerGenericCommand+0x98>)
 8013e62:	6818      	ldr	r0, [r3, #0]
 8013e64:	f107 0114 	add.w	r1, r7, #20
 8013e68:	2300      	movs	r3, #0
 8013e6a:	683a      	ldr	r2, [r7, #0]
 8013e6c:	f7fe fdf6 	bl	8012a5c <xQueueGenericSendFromISR>
 8013e70:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8013e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8013e74:	4618      	mov	r0, r3
 8013e76:	3728      	adds	r7, #40	@ 0x28
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd80      	pop	{r7, pc}
 8013e7c:	20000720 	.word	0x20000720

08013e80 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b088      	sub	sp, #32
 8013e84:	af02      	add	r7, sp, #8
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e8a:	4b23      	ldr	r3, [pc, #140]	@ (8013f18 <prvProcessExpiredTimer+0x98>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	68db      	ldr	r3, [r3, #12]
 8013e90:	68db      	ldr	r3, [r3, #12]
 8013e92:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013e94:	697b      	ldr	r3, [r7, #20]
 8013e96:	3304      	adds	r3, #4
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f7fe fbc3 	bl	8012624 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013ea4:	f003 0304 	and.w	r3, r3, #4
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d023      	beq.n	8013ef4 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013eac:	697b      	ldr	r3, [r7, #20]
 8013eae:	699a      	ldr	r2, [r3, #24]
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	18d1      	adds	r1, r2, r3
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	683a      	ldr	r2, [r7, #0]
 8013eb8:	6978      	ldr	r0, [r7, #20]
 8013eba:	f000 f8d5 	bl	8014068 <prvInsertTimerInActiveList>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d020      	beq.n	8013f06 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	9300      	str	r3, [sp, #0]
 8013ec8:	2300      	movs	r3, #0
 8013eca:	687a      	ldr	r2, [r7, #4]
 8013ecc:	2100      	movs	r1, #0
 8013ece:	6978      	ldr	r0, [r7, #20]
 8013ed0:	f7ff ff88 	bl	8013de4 <xTimerGenericCommand>
 8013ed4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d114      	bne.n	8013f06 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8013edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ee0:	f383 8811 	msr	BASEPRI, r3
 8013ee4:	f3bf 8f6f 	isb	sy
 8013ee8:	f3bf 8f4f 	dsb	sy
 8013eec:	60fb      	str	r3, [r7, #12]
    }
 8013eee:	bf00      	nop
 8013ef0:	bf00      	nop
 8013ef2:	e7fd      	b.n	8013ef0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013ef4:	697b      	ldr	r3, [r7, #20]
 8013ef6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013efa:	f023 0301 	bic.w	r3, r3, #1
 8013efe:	b2da      	uxtb	r2, r3
 8013f00:	697b      	ldr	r3, [r7, #20]
 8013f02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013f06:	697b      	ldr	r3, [r7, #20]
 8013f08:	6a1b      	ldr	r3, [r3, #32]
 8013f0a:	6978      	ldr	r0, [r7, #20]
 8013f0c:	4798      	blx	r3
    }
 8013f0e:	bf00      	nop
 8013f10:	3718      	adds	r7, #24
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}
 8013f16:	bf00      	nop
 8013f18:	20000718 	.word	0x20000718

08013f1c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b084      	sub	sp, #16
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013f24:	f107 0308 	add.w	r3, r7, #8
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f000 f859 	bl	8013fe0 <prvGetNextExpireTime>
 8013f2e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	4619      	mov	r1, r3
 8013f34:	68f8      	ldr	r0, [r7, #12]
 8013f36:	f000 f805 	bl	8013f44 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8013f3a:	f000 f8d7 	bl	80140ec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013f3e:	bf00      	nop
 8013f40:	e7f0      	b.n	8013f24 <prvTimerTask+0x8>
	...

08013f44 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b084      	sub	sp, #16
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
 8013f4c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8013f4e:	f7ff fa51 	bl	80133f4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013f52:	f107 0308 	add.w	r3, r7, #8
 8013f56:	4618      	mov	r0, r3
 8013f58:	f000 f866 	bl	8014028 <prvSampleTimeNow>
 8013f5c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d130      	bne.n	8013fc6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013f64:	683b      	ldr	r3, [r7, #0]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d10a      	bne.n	8013f80 <prvProcessTimerOrBlockTask+0x3c>
 8013f6a:	687a      	ldr	r2, [r7, #4]
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	429a      	cmp	r2, r3
 8013f70:	d806      	bhi.n	8013f80 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8013f72:	f7ff fa4d 	bl	8013410 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013f76:	68f9      	ldr	r1, [r7, #12]
 8013f78:	6878      	ldr	r0, [r7, #4]
 8013f7a:	f7ff ff81 	bl	8013e80 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8013f7e:	e024      	b.n	8013fca <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8013f80:	683b      	ldr	r3, [r7, #0]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d008      	beq.n	8013f98 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013f86:	4b13      	ldr	r3, [pc, #76]	@ (8013fd4 <prvProcessTimerOrBlockTask+0x90>)
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d101      	bne.n	8013f94 <prvProcessTimerOrBlockTask+0x50>
 8013f90:	2301      	movs	r3, #1
 8013f92:	e000      	b.n	8013f96 <prvProcessTimerOrBlockTask+0x52>
 8013f94:	2300      	movs	r3, #0
 8013f96:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013f98:	4b0f      	ldr	r3, [pc, #60]	@ (8013fd8 <prvProcessTimerOrBlockTask+0x94>)
 8013f9a:	6818      	ldr	r0, [r3, #0]
 8013f9c:	687a      	ldr	r2, [r7, #4]
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	1ad3      	subs	r3, r2, r3
 8013fa2:	683a      	ldr	r2, [r7, #0]
 8013fa4:	4619      	mov	r1, r3
 8013fa6:	f7ff f823 	bl	8012ff0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8013faa:	f7ff fa31 	bl	8013410 <xTaskResumeAll>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d10a      	bne.n	8013fca <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8013fb4:	4b09      	ldr	r3, [pc, #36]	@ (8013fdc <prvProcessTimerOrBlockTask+0x98>)
 8013fb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013fba:	601a      	str	r2, [r3, #0]
 8013fbc:	f3bf 8f4f 	dsb	sy
 8013fc0:	f3bf 8f6f 	isb	sy
    }
 8013fc4:	e001      	b.n	8013fca <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8013fc6:	f7ff fa23 	bl	8013410 <xTaskResumeAll>
    }
 8013fca:	bf00      	nop
 8013fcc:	3710      	adds	r7, #16
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	bd80      	pop	{r7, pc}
 8013fd2:	bf00      	nop
 8013fd4:	2000071c 	.word	0x2000071c
 8013fd8:	20000720 	.word	0x20000720
 8013fdc:	e000ed04 	.word	0xe000ed04

08013fe0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8013fe0:	b480      	push	{r7}
 8013fe2:	b085      	sub	sp, #20
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8014024 <prvGetNextExpireTime+0x44>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d101      	bne.n	8013ff6 <prvGetNextExpireTime+0x16>
 8013ff2:	2201      	movs	r2, #1
 8013ff4:	e000      	b.n	8013ff8 <prvGetNextExpireTime+0x18>
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d105      	bne.n	8014010 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014004:	4b07      	ldr	r3, [pc, #28]	@ (8014024 <prvGetNextExpireTime+0x44>)
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	68db      	ldr	r3, [r3, #12]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	60fb      	str	r3, [r7, #12]
 801400e:	e001      	b.n	8014014 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8014010:	2300      	movs	r3, #0
 8014012:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8014014:	68fb      	ldr	r3, [r7, #12]
    }
 8014016:	4618      	mov	r0, r3
 8014018:	3714      	adds	r7, #20
 801401a:	46bd      	mov	sp, r7
 801401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014020:	4770      	bx	lr
 8014022:	bf00      	nop
 8014024:	20000718 	.word	0x20000718

08014028 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8014028:	b580      	push	{r7, lr}
 801402a:	b084      	sub	sp, #16
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8014030:	f7ff fa8c 	bl	801354c <xTaskGetTickCount>
 8014034:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8014036:	4b0b      	ldr	r3, [pc, #44]	@ (8014064 <prvSampleTimeNow+0x3c>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	68fa      	ldr	r2, [r7, #12]
 801403c:	429a      	cmp	r2, r3
 801403e:	d205      	bcs.n	801404c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8014040:	f000 f91e 	bl	8014280 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2201      	movs	r2, #1
 8014048:	601a      	str	r2, [r3, #0]
 801404a:	e002      	b.n	8014052 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2200      	movs	r2, #0
 8014050:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8014052:	4a04      	ldr	r2, [pc, #16]	@ (8014064 <prvSampleTimeNow+0x3c>)
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8014058:	68fb      	ldr	r3, [r7, #12]
    }
 801405a:	4618      	mov	r0, r3
 801405c:	3710      	adds	r7, #16
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}
 8014062:	bf00      	nop
 8014064:	20000728 	.word	0x20000728

08014068 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8014068:	b580      	push	{r7, lr}
 801406a:	b086      	sub	sp, #24
 801406c:	af00      	add	r7, sp, #0
 801406e:	60f8      	str	r0, [r7, #12]
 8014070:	60b9      	str	r1, [r7, #8]
 8014072:	607a      	str	r2, [r7, #4]
 8014074:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8014076:	2300      	movs	r3, #0
 8014078:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	68ba      	ldr	r2, [r7, #8]
 801407e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	68fa      	ldr	r2, [r7, #12]
 8014084:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8014086:	68ba      	ldr	r2, [r7, #8]
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	429a      	cmp	r2, r3
 801408c:	d812      	bhi.n	80140b4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801408e:	687a      	ldr	r2, [r7, #4]
 8014090:	683b      	ldr	r3, [r7, #0]
 8014092:	1ad2      	subs	r2, r2, r3
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	699b      	ldr	r3, [r3, #24]
 8014098:	429a      	cmp	r2, r3
 801409a:	d302      	bcc.n	80140a2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 801409c:	2301      	movs	r3, #1
 801409e:	617b      	str	r3, [r7, #20]
 80140a0:	e01b      	b.n	80140da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80140a2:	4b10      	ldr	r3, [pc, #64]	@ (80140e4 <prvInsertTimerInActiveList+0x7c>)
 80140a4:	681a      	ldr	r2, [r3, #0]
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	3304      	adds	r3, #4
 80140aa:	4619      	mov	r1, r3
 80140ac:	4610      	mov	r0, r2
 80140ae:	f7fe fa80 	bl	80125b2 <vListInsert>
 80140b2:	e012      	b.n	80140da <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80140b4:	687a      	ldr	r2, [r7, #4]
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	429a      	cmp	r2, r3
 80140ba:	d206      	bcs.n	80140ca <prvInsertTimerInActiveList+0x62>
 80140bc:	68ba      	ldr	r2, [r7, #8]
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	429a      	cmp	r2, r3
 80140c2:	d302      	bcc.n	80140ca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80140c4:	2301      	movs	r3, #1
 80140c6:	617b      	str	r3, [r7, #20]
 80140c8:	e007      	b.n	80140da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80140ca:	4b07      	ldr	r3, [pc, #28]	@ (80140e8 <prvInsertTimerInActiveList+0x80>)
 80140cc:	681a      	ldr	r2, [r3, #0]
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	3304      	adds	r3, #4
 80140d2:	4619      	mov	r1, r3
 80140d4:	4610      	mov	r0, r2
 80140d6:	f7fe fa6c 	bl	80125b2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80140da:	697b      	ldr	r3, [r7, #20]
    }
 80140dc:	4618      	mov	r0, r3
 80140de:	3718      	adds	r7, #24
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}
 80140e4:	2000071c 	.word	0x2000071c
 80140e8:	20000718 	.word	0x20000718

080140ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b08c      	sub	sp, #48	@ 0x30
 80140f0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80140f2:	e0b2      	b.n	801425a <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	f2c0 80af 	blt.w	801425a <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80140fc:	693b      	ldr	r3, [r7, #16]
 80140fe:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014102:	695b      	ldr	r3, [r3, #20]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d004      	beq.n	8014112 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801410a:	3304      	adds	r3, #4
 801410c:	4618      	mov	r0, r3
 801410e:	f7fe fa89 	bl	8012624 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014112:	1d3b      	adds	r3, r7, #4
 8014114:	4618      	mov	r0, r3
 8014116:	f7ff ff87 	bl	8014028 <prvSampleTimeNow>
 801411a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 801411c:	68bb      	ldr	r3, [r7, #8]
 801411e:	2b09      	cmp	r3, #9
 8014120:	f200 8098 	bhi.w	8014254 <prvProcessReceivedCommands+0x168>
 8014124:	a201      	add	r2, pc, #4	@ (adr r2, 801412c <prvProcessReceivedCommands+0x40>)
 8014126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801412a:	bf00      	nop
 801412c:	08014155 	.word	0x08014155
 8014130:	08014155 	.word	0x08014155
 8014134:	08014155 	.word	0x08014155
 8014138:	080141cb 	.word	0x080141cb
 801413c:	080141df 	.word	0x080141df
 8014140:	0801422b 	.word	0x0801422b
 8014144:	08014155 	.word	0x08014155
 8014148:	08014155 	.word	0x08014155
 801414c:	080141cb 	.word	0x080141cb
 8014150:	080141df 	.word	0x080141df
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014156:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801415a:	f043 0301 	orr.w	r3, r3, #1
 801415e:	b2da      	uxtb	r2, r3
 8014160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014162:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014166:	68fa      	ldr	r2, [r7, #12]
 8014168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801416a:	699b      	ldr	r3, [r3, #24]
 801416c:	18d1      	adds	r1, r2, r3
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	6a3a      	ldr	r2, [r7, #32]
 8014172:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014174:	f7ff ff78 	bl	8014068 <prvInsertTimerInActiveList>
 8014178:	4603      	mov	r3, r0
 801417a:	2b00      	cmp	r3, #0
 801417c:	d06c      	beq.n	8014258 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014180:	6a1b      	ldr	r3, [r3, #32]
 8014182:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014184:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014188:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801418c:	f003 0304 	and.w	r3, r3, #4
 8014190:	2b00      	cmp	r3, #0
 8014192:	d061      	beq.n	8014258 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014194:	68fa      	ldr	r2, [r7, #12]
 8014196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014198:	699b      	ldr	r3, [r3, #24]
 801419a:	441a      	add	r2, r3
 801419c:	2300      	movs	r3, #0
 801419e:	9300      	str	r3, [sp, #0]
 80141a0:	2300      	movs	r3, #0
 80141a2:	2100      	movs	r1, #0
 80141a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80141a6:	f7ff fe1d 	bl	8013de4 <xTimerGenericCommand>
 80141aa:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80141ac:	69fb      	ldr	r3, [r7, #28]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d152      	bne.n	8014258 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 80141b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141b6:	f383 8811 	msr	BASEPRI, r3
 80141ba:	f3bf 8f6f 	isb	sy
 80141be:	f3bf 8f4f 	dsb	sy
 80141c2:	61bb      	str	r3, [r7, #24]
    }
 80141c4:	bf00      	nop
 80141c6:	bf00      	nop
 80141c8:	e7fd      	b.n	80141c6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80141ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80141d0:	f023 0301 	bic.w	r3, r3, #1
 80141d4:	b2da      	uxtb	r2, r3
 80141d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80141dc:	e03d      	b.n	801425a <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80141de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80141e4:	f043 0301 	orr.w	r3, r3, #1
 80141e8:	b2da      	uxtb	r2, r3
 80141ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80141f0:	68fa      	ldr	r2, [r7, #12]
 80141f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141f4:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80141f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141f8:	699b      	ldr	r3, [r3, #24]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d10b      	bne.n	8014216 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 80141fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014202:	f383 8811 	msr	BASEPRI, r3
 8014206:	f3bf 8f6f 	isb	sy
 801420a:	f3bf 8f4f 	dsb	sy
 801420e:	617b      	str	r3, [r7, #20]
    }
 8014210:	bf00      	nop
 8014212:	bf00      	nop
 8014214:	e7fd      	b.n	8014212 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014218:	699a      	ldr	r2, [r3, #24]
 801421a:	6a3b      	ldr	r3, [r7, #32]
 801421c:	18d1      	adds	r1, r2, r3
 801421e:	6a3b      	ldr	r3, [r7, #32]
 8014220:	6a3a      	ldr	r2, [r7, #32]
 8014222:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014224:	f7ff ff20 	bl	8014068 <prvInsertTimerInActiveList>
                        break;
 8014228:	e017      	b.n	801425a <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801422c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014230:	f003 0302 	and.w	r3, r3, #2
 8014234:	2b00      	cmp	r3, #0
 8014236:	d103      	bne.n	8014240 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8014238:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801423a:	f000 fbfb 	bl	8014a34 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 801423e:	e00c      	b.n	801425a <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014242:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014246:	f023 0301 	bic.w	r3, r3, #1
 801424a:	b2da      	uxtb	r2, r3
 801424c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801424e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8014252:	e002      	b.n	801425a <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8014254:	bf00      	nop
 8014256:	e000      	b.n	801425a <prvProcessReceivedCommands+0x16e>
                        break;
 8014258:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801425a:	4b08      	ldr	r3, [pc, #32]	@ (801427c <prvProcessReceivedCommands+0x190>)
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	f107 0108 	add.w	r1, r7, #8
 8014262:	2200      	movs	r2, #0
 8014264:	4618      	mov	r0, r3
 8014266:	f7fe fca7 	bl	8012bb8 <xQueueReceive>
 801426a:	4603      	mov	r3, r0
 801426c:	2b00      	cmp	r3, #0
 801426e:	f47f af41 	bne.w	80140f4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8014272:	bf00      	nop
 8014274:	bf00      	nop
 8014276:	3728      	adds	r7, #40	@ 0x28
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}
 801427c:	20000720 	.word	0x20000720

08014280 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8014280:	b580      	push	{r7, lr}
 8014282:	b088      	sub	sp, #32
 8014284:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014286:	e049      	b.n	801431c <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014288:	4b2e      	ldr	r3, [pc, #184]	@ (8014344 <prvSwitchTimerLists+0xc4>)
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	68db      	ldr	r3, [r3, #12]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014292:	4b2c      	ldr	r3, [pc, #176]	@ (8014344 <prvSwitchTimerLists+0xc4>)
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	68db      	ldr	r3, [r3, #12]
 8014298:	68db      	ldr	r3, [r3, #12]
 801429a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	3304      	adds	r3, #4
 80142a0:	4618      	mov	r0, r3
 80142a2:	f7fe f9bf 	bl	8012624 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	6a1b      	ldr	r3, [r3, #32]
 80142aa:	68f8      	ldr	r0, [r7, #12]
 80142ac:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80142b4:	f003 0304 	and.w	r3, r3, #4
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d02f      	beq.n	801431c <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	699b      	ldr	r3, [r3, #24]
 80142c0:	693a      	ldr	r2, [r7, #16]
 80142c2:	4413      	add	r3, r2
 80142c4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80142c6:	68ba      	ldr	r2, [r7, #8]
 80142c8:	693b      	ldr	r3, [r7, #16]
 80142ca:	429a      	cmp	r2, r3
 80142cc:	d90e      	bls.n	80142ec <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	68ba      	ldr	r2, [r7, #8]
 80142d2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	68fa      	ldr	r2, [r7, #12]
 80142d8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80142da:	4b1a      	ldr	r3, [pc, #104]	@ (8014344 <prvSwitchTimerLists+0xc4>)
 80142dc:	681a      	ldr	r2, [r3, #0]
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	3304      	adds	r3, #4
 80142e2:	4619      	mov	r1, r3
 80142e4:	4610      	mov	r0, r2
 80142e6:	f7fe f964 	bl	80125b2 <vListInsert>
 80142ea:	e017      	b.n	801431c <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80142ec:	2300      	movs	r3, #0
 80142ee:	9300      	str	r3, [sp, #0]
 80142f0:	2300      	movs	r3, #0
 80142f2:	693a      	ldr	r2, [r7, #16]
 80142f4:	2100      	movs	r1, #0
 80142f6:	68f8      	ldr	r0, [r7, #12]
 80142f8:	f7ff fd74 	bl	8013de4 <xTimerGenericCommand>
 80142fc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d10b      	bne.n	801431c <prvSwitchTimerLists+0x9c>
        __asm volatile
 8014304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014308:	f383 8811 	msr	BASEPRI, r3
 801430c:	f3bf 8f6f 	isb	sy
 8014310:	f3bf 8f4f 	dsb	sy
 8014314:	603b      	str	r3, [r7, #0]
    }
 8014316:	bf00      	nop
 8014318:	bf00      	nop
 801431a:	e7fd      	b.n	8014318 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801431c:	4b09      	ldr	r3, [pc, #36]	@ (8014344 <prvSwitchTimerLists+0xc4>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d1b0      	bne.n	8014288 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8014326:	4b07      	ldr	r3, [pc, #28]	@ (8014344 <prvSwitchTimerLists+0xc4>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 801432c:	4b06      	ldr	r3, [pc, #24]	@ (8014348 <prvSwitchTimerLists+0xc8>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	4a04      	ldr	r2, [pc, #16]	@ (8014344 <prvSwitchTimerLists+0xc4>)
 8014332:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8014334:	4a04      	ldr	r2, [pc, #16]	@ (8014348 <prvSwitchTimerLists+0xc8>)
 8014336:	697b      	ldr	r3, [r7, #20]
 8014338:	6013      	str	r3, [r2, #0]
    }
 801433a:	bf00      	nop
 801433c:	3718      	adds	r7, #24
 801433e:	46bd      	mov	sp, r7
 8014340:	bd80      	pop	{r7, pc}
 8014342:	bf00      	nop
 8014344:	20000718 	.word	0x20000718
 8014348:	2000071c 	.word	0x2000071c

0801434c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 801434c:	b580      	push	{r7, lr}
 801434e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8014350:	f000 f964 	bl	801461c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8014354:	4b12      	ldr	r3, [pc, #72]	@ (80143a0 <prvCheckForValidListAndQueue+0x54>)
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d11d      	bne.n	8014398 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 801435c:	4811      	ldr	r0, [pc, #68]	@ (80143a4 <prvCheckForValidListAndQueue+0x58>)
 801435e:	f7fe f8d7 	bl	8012510 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8014362:	4811      	ldr	r0, [pc, #68]	@ (80143a8 <prvCheckForValidListAndQueue+0x5c>)
 8014364:	f7fe f8d4 	bl	8012510 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8014368:	4b10      	ldr	r3, [pc, #64]	@ (80143ac <prvCheckForValidListAndQueue+0x60>)
 801436a:	4a0e      	ldr	r2, [pc, #56]	@ (80143a4 <prvCheckForValidListAndQueue+0x58>)
 801436c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 801436e:	4b10      	ldr	r3, [pc, #64]	@ (80143b0 <prvCheckForValidListAndQueue+0x64>)
 8014370:	4a0d      	ldr	r2, [pc, #52]	@ (80143a8 <prvCheckForValidListAndQueue+0x5c>)
 8014372:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8014374:	2200      	movs	r2, #0
 8014376:	210c      	movs	r1, #12
 8014378:	200a      	movs	r0, #10
 801437a:	f7fe f9e7 	bl	801274c <xQueueGenericCreate>
 801437e:	4603      	mov	r3, r0
 8014380:	4a07      	ldr	r2, [pc, #28]	@ (80143a0 <prvCheckForValidListAndQueue+0x54>)
 8014382:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8014384:	4b06      	ldr	r3, [pc, #24]	@ (80143a0 <prvCheckForValidListAndQueue+0x54>)
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d005      	beq.n	8014398 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801438c:	4b04      	ldr	r3, [pc, #16]	@ (80143a0 <prvCheckForValidListAndQueue+0x54>)
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	4908      	ldr	r1, [pc, #32]	@ (80143b4 <prvCheckForValidListAndQueue+0x68>)
 8014392:	4618      	mov	r0, r3
 8014394:	f7fe fe02 	bl	8012f9c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8014398:	f000 f972 	bl	8014680 <vPortExitCritical>
    }
 801439c:	bf00      	nop
 801439e:	bd80      	pop	{r7, pc}
 80143a0:	20000720 	.word	0x20000720
 80143a4:	200006f0 	.word	0x200006f0
 80143a8:	20000704 	.word	0x20000704
 80143ac:	20000718 	.word	0x20000718
 80143b0:	2000071c 	.word	0x2000071c
 80143b4:	08018940 	.word	0x08018940

080143b8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80143b8:	b480      	push	{r7}
 80143ba:	b085      	sub	sp, #20
 80143bc:	af00      	add	r7, sp, #0
 80143be:	60f8      	str	r0, [r7, #12]
 80143c0:	60b9      	str	r1, [r7, #8]
 80143c2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	3b04      	subs	r3, #4
 80143c8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80143d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	3b04      	subs	r3, #4
 80143d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80143d8:	68bb      	ldr	r3, [r7, #8]
 80143da:	f023 0201 	bic.w	r2, r3, #1
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	3b04      	subs	r3, #4
 80143e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80143e8:	4a0c      	ldr	r2, [pc, #48]	@ (801441c <pxPortInitialiseStack+0x64>)
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	3b14      	subs	r3, #20
 80143f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80143f4:	687a      	ldr	r2, [r7, #4]
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	3b04      	subs	r3, #4
 80143fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	f06f 0202 	mvn.w	r2, #2
 8014406:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	3b20      	subs	r3, #32
 801440c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 801440e:	68fb      	ldr	r3, [r7, #12]
}
 8014410:	4618      	mov	r0, r3
 8014412:	3714      	adds	r7, #20
 8014414:	46bd      	mov	sp, r7
 8014416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441a:	4770      	bx	lr
 801441c:	08014421 	.word	0x08014421

08014420 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014420:	b480      	push	{r7}
 8014422:	b085      	sub	sp, #20
 8014424:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8014426:	2300      	movs	r3, #0
 8014428:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 801442a:	4b13      	ldr	r3, [pc, #76]	@ (8014478 <prvTaskExitError+0x58>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014432:	d00b      	beq.n	801444c <prvTaskExitError+0x2c>
        __asm volatile
 8014434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014438:	f383 8811 	msr	BASEPRI, r3
 801443c:	f3bf 8f6f 	isb	sy
 8014440:	f3bf 8f4f 	dsb	sy
 8014444:	60fb      	str	r3, [r7, #12]
    }
 8014446:	bf00      	nop
 8014448:	bf00      	nop
 801444a:	e7fd      	b.n	8014448 <prvTaskExitError+0x28>
        __asm volatile
 801444c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014450:	f383 8811 	msr	BASEPRI, r3
 8014454:	f3bf 8f6f 	isb	sy
 8014458:	f3bf 8f4f 	dsb	sy
 801445c:	60bb      	str	r3, [r7, #8]
    }
 801445e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8014460:	bf00      	nop
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d0fc      	beq.n	8014462 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8014468:	bf00      	nop
 801446a:	bf00      	nop
 801446c:	3714      	adds	r7, #20
 801446e:	46bd      	mov	sp, r7
 8014470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014474:	4770      	bx	lr
 8014476:	bf00      	nop
 8014478:	20000028 	.word	0x20000028
 801447c:	00000000 	.word	0x00000000

08014480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8014480:	4b07      	ldr	r3, [pc, #28]	@ (80144a0 <pxCurrentTCBConst2>)
 8014482:	6819      	ldr	r1, [r3, #0]
 8014484:	6808      	ldr	r0, [r1, #0]
 8014486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801448a:	f380 8809 	msr	PSP, r0
 801448e:	f3bf 8f6f 	isb	sy
 8014492:	f04f 0000 	mov.w	r0, #0
 8014496:	f380 8811 	msr	BASEPRI, r0
 801449a:	4770      	bx	lr
 801449c:	f3af 8000 	nop.w

080144a0 <pxCurrentTCBConst2>:
 80144a0:	200005ec 	.word	0x200005ec
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80144a4:	bf00      	nop
 80144a6:	bf00      	nop

080144a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80144a8:	4808      	ldr	r0, [pc, #32]	@ (80144cc <prvPortStartFirstTask+0x24>)
 80144aa:	6800      	ldr	r0, [r0, #0]
 80144ac:	6800      	ldr	r0, [r0, #0]
 80144ae:	f380 8808 	msr	MSP, r0
 80144b2:	f04f 0000 	mov.w	r0, #0
 80144b6:	f380 8814 	msr	CONTROL, r0
 80144ba:	b662      	cpsie	i
 80144bc:	b661      	cpsie	f
 80144be:	f3bf 8f4f 	dsb	sy
 80144c2:	f3bf 8f6f 	isb	sy
 80144c6:	df00      	svc	0
 80144c8:	bf00      	nop
 80144ca:	0000      	.short	0x0000
 80144cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80144d0:	bf00      	nop
 80144d2:	bf00      	nop

080144d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b086      	sub	sp, #24
 80144d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80144da:	4b47      	ldr	r3, [pc, #284]	@ (80145f8 <xPortStartScheduler+0x124>)
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	4a47      	ldr	r2, [pc, #284]	@ (80145fc <xPortStartScheduler+0x128>)
 80144e0:	4293      	cmp	r3, r2
 80144e2:	d10b      	bne.n	80144fc <xPortStartScheduler+0x28>
        __asm volatile
 80144e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144e8:	f383 8811 	msr	BASEPRI, r3
 80144ec:	f3bf 8f6f 	isb	sy
 80144f0:	f3bf 8f4f 	dsb	sy
 80144f4:	60fb      	str	r3, [r7, #12]
    }
 80144f6:	bf00      	nop
 80144f8:	bf00      	nop
 80144fa:	e7fd      	b.n	80144f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80144fc:	4b3e      	ldr	r3, [pc, #248]	@ (80145f8 <xPortStartScheduler+0x124>)
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	4a3f      	ldr	r2, [pc, #252]	@ (8014600 <xPortStartScheduler+0x12c>)
 8014502:	4293      	cmp	r3, r2
 8014504:	d10b      	bne.n	801451e <xPortStartScheduler+0x4a>
        __asm volatile
 8014506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801450a:	f383 8811 	msr	BASEPRI, r3
 801450e:	f3bf 8f6f 	isb	sy
 8014512:	f3bf 8f4f 	dsb	sy
 8014516:	613b      	str	r3, [r7, #16]
    }
 8014518:	bf00      	nop
 801451a:	bf00      	nop
 801451c:	e7fd      	b.n	801451a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801451e:	4b39      	ldr	r3, [pc, #228]	@ (8014604 <xPortStartScheduler+0x130>)
 8014520:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014522:	697b      	ldr	r3, [r7, #20]
 8014524:	781b      	ldrb	r3, [r3, #0]
 8014526:	b2db      	uxtb	r3, r3
 8014528:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801452a:	697b      	ldr	r3, [r7, #20]
 801452c:	22ff      	movs	r2, #255	@ 0xff
 801452e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014530:	697b      	ldr	r3, [r7, #20]
 8014532:	781b      	ldrb	r3, [r3, #0]
 8014534:	b2db      	uxtb	r3, r3
 8014536:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014538:	78fb      	ldrb	r3, [r7, #3]
 801453a:	b2db      	uxtb	r3, r3
 801453c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8014540:	b2da      	uxtb	r2, r3
 8014542:	4b31      	ldr	r3, [pc, #196]	@ (8014608 <xPortStartScheduler+0x134>)
 8014544:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014546:	4b31      	ldr	r3, [pc, #196]	@ (801460c <xPortStartScheduler+0x138>)
 8014548:	2207      	movs	r2, #7
 801454a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801454c:	e009      	b.n	8014562 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 801454e:	4b2f      	ldr	r3, [pc, #188]	@ (801460c <xPortStartScheduler+0x138>)
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	3b01      	subs	r3, #1
 8014554:	4a2d      	ldr	r2, [pc, #180]	@ (801460c <xPortStartScheduler+0x138>)
 8014556:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014558:	78fb      	ldrb	r3, [r7, #3]
 801455a:	b2db      	uxtb	r3, r3
 801455c:	005b      	lsls	r3, r3, #1
 801455e:	b2db      	uxtb	r3, r3
 8014560:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014562:	78fb      	ldrb	r3, [r7, #3]
 8014564:	b2db      	uxtb	r3, r3
 8014566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801456a:	2b80      	cmp	r3, #128	@ 0x80
 801456c:	d0ef      	beq.n	801454e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801456e:	4b27      	ldr	r3, [pc, #156]	@ (801460c <xPortStartScheduler+0x138>)
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	f1c3 0307 	rsb	r3, r3, #7
 8014576:	2b04      	cmp	r3, #4
 8014578:	d00b      	beq.n	8014592 <xPortStartScheduler+0xbe>
        __asm volatile
 801457a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801457e:	f383 8811 	msr	BASEPRI, r3
 8014582:	f3bf 8f6f 	isb	sy
 8014586:	f3bf 8f4f 	dsb	sy
 801458a:	60bb      	str	r3, [r7, #8]
    }
 801458c:	bf00      	nop
 801458e:	bf00      	nop
 8014590:	e7fd      	b.n	801458e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014592:	4b1e      	ldr	r3, [pc, #120]	@ (801460c <xPortStartScheduler+0x138>)
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	021b      	lsls	r3, r3, #8
 8014598:	4a1c      	ldr	r2, [pc, #112]	@ (801460c <xPortStartScheduler+0x138>)
 801459a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801459c:	4b1b      	ldr	r3, [pc, #108]	@ (801460c <xPortStartScheduler+0x138>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80145a4:	4a19      	ldr	r2, [pc, #100]	@ (801460c <xPortStartScheduler+0x138>)
 80145a6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	b2da      	uxtb	r2, r3
 80145ac:	697b      	ldr	r3, [r7, #20]
 80145ae:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80145b0:	4b17      	ldr	r3, [pc, #92]	@ (8014610 <xPortStartScheduler+0x13c>)
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	4a16      	ldr	r2, [pc, #88]	@ (8014610 <xPortStartScheduler+0x13c>)
 80145b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80145ba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80145bc:	4b14      	ldr	r3, [pc, #80]	@ (8014610 <xPortStartScheduler+0x13c>)
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	4a13      	ldr	r2, [pc, #76]	@ (8014610 <xPortStartScheduler+0x13c>)
 80145c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80145c6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80145c8:	f000 f8e0 	bl	801478c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80145cc:	4b11      	ldr	r3, [pc, #68]	@ (8014614 <xPortStartScheduler+0x140>)
 80145ce:	2200      	movs	r2, #0
 80145d0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80145d2:	f000 f8ff 	bl	80147d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80145d6:	4b10      	ldr	r3, [pc, #64]	@ (8014618 <xPortStartScheduler+0x144>)
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	4a0f      	ldr	r2, [pc, #60]	@ (8014618 <xPortStartScheduler+0x144>)
 80145dc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80145e0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80145e2:	f7ff ff61 	bl	80144a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80145e6:	f7ff f87b 	bl	80136e0 <vTaskSwitchContext>
    prvTaskExitError();
 80145ea:	f7ff ff19 	bl	8014420 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80145ee:	2300      	movs	r3, #0
}
 80145f0:	4618      	mov	r0, r3
 80145f2:	3718      	adds	r7, #24
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}
 80145f8:	e000ed00 	.word	0xe000ed00
 80145fc:	410fc271 	.word	0x410fc271
 8014600:	410fc270 	.word	0x410fc270
 8014604:	e000e400 	.word	0xe000e400
 8014608:	2000072c 	.word	0x2000072c
 801460c:	20000730 	.word	0x20000730
 8014610:	e000ed20 	.word	0xe000ed20
 8014614:	20000028 	.word	0x20000028
 8014618:	e000ef34 	.word	0xe000ef34

0801461c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801461c:	b480      	push	{r7}
 801461e:	b083      	sub	sp, #12
 8014620:	af00      	add	r7, sp, #0
        __asm volatile
 8014622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014626:	f383 8811 	msr	BASEPRI, r3
 801462a:	f3bf 8f6f 	isb	sy
 801462e:	f3bf 8f4f 	dsb	sy
 8014632:	607b      	str	r3, [r7, #4]
    }
 8014634:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8014636:	4b10      	ldr	r3, [pc, #64]	@ (8014678 <vPortEnterCritical+0x5c>)
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	3301      	adds	r3, #1
 801463c:	4a0e      	ldr	r2, [pc, #56]	@ (8014678 <vPortEnterCritical+0x5c>)
 801463e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8014640:	4b0d      	ldr	r3, [pc, #52]	@ (8014678 <vPortEnterCritical+0x5c>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	2b01      	cmp	r3, #1
 8014646:	d110      	bne.n	801466a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014648:	4b0c      	ldr	r3, [pc, #48]	@ (801467c <vPortEnterCritical+0x60>)
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	b2db      	uxtb	r3, r3
 801464e:	2b00      	cmp	r3, #0
 8014650:	d00b      	beq.n	801466a <vPortEnterCritical+0x4e>
        __asm volatile
 8014652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014656:	f383 8811 	msr	BASEPRI, r3
 801465a:	f3bf 8f6f 	isb	sy
 801465e:	f3bf 8f4f 	dsb	sy
 8014662:	603b      	str	r3, [r7, #0]
    }
 8014664:	bf00      	nop
 8014666:	bf00      	nop
 8014668:	e7fd      	b.n	8014666 <vPortEnterCritical+0x4a>
    }
}
 801466a:	bf00      	nop
 801466c:	370c      	adds	r7, #12
 801466e:	46bd      	mov	sp, r7
 8014670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014674:	4770      	bx	lr
 8014676:	bf00      	nop
 8014678:	20000028 	.word	0x20000028
 801467c:	e000ed04 	.word	0xe000ed04

08014680 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014680:	b480      	push	{r7}
 8014682:	b083      	sub	sp, #12
 8014684:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8014686:	4b12      	ldr	r3, [pc, #72]	@ (80146d0 <vPortExitCritical+0x50>)
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d10b      	bne.n	80146a6 <vPortExitCritical+0x26>
        __asm volatile
 801468e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014692:	f383 8811 	msr	BASEPRI, r3
 8014696:	f3bf 8f6f 	isb	sy
 801469a:	f3bf 8f4f 	dsb	sy
 801469e:	607b      	str	r3, [r7, #4]
    }
 80146a0:	bf00      	nop
 80146a2:	bf00      	nop
 80146a4:	e7fd      	b.n	80146a2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80146a6:	4b0a      	ldr	r3, [pc, #40]	@ (80146d0 <vPortExitCritical+0x50>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	3b01      	subs	r3, #1
 80146ac:	4a08      	ldr	r2, [pc, #32]	@ (80146d0 <vPortExitCritical+0x50>)
 80146ae:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80146b0:	4b07      	ldr	r3, [pc, #28]	@ (80146d0 <vPortExitCritical+0x50>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d105      	bne.n	80146c4 <vPortExitCritical+0x44>
 80146b8:	2300      	movs	r3, #0
 80146ba:	603b      	str	r3, [r7, #0]
        __asm volatile
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	f383 8811 	msr	BASEPRI, r3
    }
 80146c2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80146c4:	bf00      	nop
 80146c6:	370c      	adds	r7, #12
 80146c8:	46bd      	mov	sp, r7
 80146ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ce:	4770      	bx	lr
 80146d0:	20000028 	.word	0x20000028
	...

080146e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80146e0:	f3ef 8009 	mrs	r0, PSP
 80146e4:	f3bf 8f6f 	isb	sy
 80146e8:	4b15      	ldr	r3, [pc, #84]	@ (8014740 <pxCurrentTCBConst>)
 80146ea:	681a      	ldr	r2, [r3, #0]
 80146ec:	f01e 0f10 	tst.w	lr, #16
 80146f0:	bf08      	it	eq
 80146f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80146f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146fa:	6010      	str	r0, [r2, #0]
 80146fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014700:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014704:	f380 8811 	msr	BASEPRI, r0
 8014708:	f3bf 8f4f 	dsb	sy
 801470c:	f3bf 8f6f 	isb	sy
 8014710:	f7fe ffe6 	bl	80136e0 <vTaskSwitchContext>
 8014714:	f04f 0000 	mov.w	r0, #0
 8014718:	f380 8811 	msr	BASEPRI, r0
 801471c:	bc09      	pop	{r0, r3}
 801471e:	6819      	ldr	r1, [r3, #0]
 8014720:	6808      	ldr	r0, [r1, #0]
 8014722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014726:	f01e 0f10 	tst.w	lr, #16
 801472a:	bf08      	it	eq
 801472c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014730:	f380 8809 	msr	PSP, r0
 8014734:	f3bf 8f6f 	isb	sy
 8014738:	4770      	bx	lr
 801473a:	bf00      	nop
 801473c:	f3af 8000 	nop.w

08014740 <pxCurrentTCBConst>:
 8014740:	200005ec 	.word	0x200005ec
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8014744:	bf00      	nop
 8014746:	bf00      	nop

08014748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b082      	sub	sp, #8
 801474c:	af00      	add	r7, sp, #0
        __asm volatile
 801474e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014752:	f383 8811 	msr	BASEPRI, r3
 8014756:	f3bf 8f6f 	isb	sy
 801475a:	f3bf 8f4f 	dsb	sy
 801475e:	607b      	str	r3, [r7, #4]
    }
 8014760:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8014762:	f7fe ff03 	bl	801356c <xTaskIncrementTick>
 8014766:	4603      	mov	r3, r0
 8014768:	2b00      	cmp	r3, #0
 801476a:	d003      	beq.n	8014774 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801476c:	4b06      	ldr	r3, [pc, #24]	@ (8014788 <SysTick_Handler+0x40>)
 801476e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014772:	601a      	str	r2, [r3, #0]
 8014774:	2300      	movs	r3, #0
 8014776:	603b      	str	r3, [r7, #0]
        __asm volatile
 8014778:	683b      	ldr	r3, [r7, #0]
 801477a:	f383 8811 	msr	BASEPRI, r3
    }
 801477e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8014780:	bf00      	nop
 8014782:	3708      	adds	r7, #8
 8014784:	46bd      	mov	sp, r7
 8014786:	bd80      	pop	{r7, pc}
 8014788:	e000ed04 	.word	0xe000ed04

0801478c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 801478c:	b480      	push	{r7}
 801478e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014790:	4b0b      	ldr	r3, [pc, #44]	@ (80147c0 <vPortSetupTimerInterrupt+0x34>)
 8014792:	2200      	movs	r2, #0
 8014794:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014796:	4b0b      	ldr	r3, [pc, #44]	@ (80147c4 <vPortSetupTimerInterrupt+0x38>)
 8014798:	2200      	movs	r2, #0
 801479a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801479c:	4b0a      	ldr	r3, [pc, #40]	@ (80147c8 <vPortSetupTimerInterrupt+0x3c>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	4a0a      	ldr	r2, [pc, #40]	@ (80147cc <vPortSetupTimerInterrupt+0x40>)
 80147a2:	fba2 2303 	umull	r2, r3, r2, r3
 80147a6:	099b      	lsrs	r3, r3, #6
 80147a8:	4a09      	ldr	r2, [pc, #36]	@ (80147d0 <vPortSetupTimerInterrupt+0x44>)
 80147aa:	3b01      	subs	r3, #1
 80147ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80147ae:	4b04      	ldr	r3, [pc, #16]	@ (80147c0 <vPortSetupTimerInterrupt+0x34>)
 80147b0:	2207      	movs	r2, #7
 80147b2:	601a      	str	r2, [r3, #0]
}
 80147b4:	bf00      	nop
 80147b6:	46bd      	mov	sp, r7
 80147b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147bc:	4770      	bx	lr
 80147be:	bf00      	nop
 80147c0:	e000e010 	.word	0xe000e010
 80147c4:	e000e018 	.word	0xe000e018
 80147c8:	2000001c 	.word	0x2000001c
 80147cc:	10624dd3 	.word	0x10624dd3
 80147d0:	e000e014 	.word	0xe000e014

080147d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80147d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80147e4 <vPortEnableVFP+0x10>
 80147d8:	6801      	ldr	r1, [r0, #0]
 80147da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80147de:	6001      	str	r1, [r0, #0]
 80147e0:	4770      	bx	lr
 80147e2:	0000      	.short	0x0000
 80147e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80147e8:	bf00      	nop
 80147ea:	bf00      	nop

080147ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80147ec:	b480      	push	{r7}
 80147ee:	b085      	sub	sp, #20
 80147f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80147f2:	f3ef 8305 	mrs	r3, IPSR
 80147f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	2b0f      	cmp	r3, #15
 80147fc:	d915      	bls.n	801482a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80147fe:	4a18      	ldr	r2, [pc, #96]	@ (8014860 <vPortValidateInterruptPriority+0x74>)
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	4413      	add	r3, r2
 8014804:	781b      	ldrb	r3, [r3, #0]
 8014806:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014808:	4b16      	ldr	r3, [pc, #88]	@ (8014864 <vPortValidateInterruptPriority+0x78>)
 801480a:	781b      	ldrb	r3, [r3, #0]
 801480c:	7afa      	ldrb	r2, [r7, #11]
 801480e:	429a      	cmp	r2, r3
 8014810:	d20b      	bcs.n	801482a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8014812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014816:	f383 8811 	msr	BASEPRI, r3
 801481a:	f3bf 8f6f 	isb	sy
 801481e:	f3bf 8f4f 	dsb	sy
 8014822:	607b      	str	r3, [r7, #4]
    }
 8014824:	bf00      	nop
 8014826:	bf00      	nop
 8014828:	e7fd      	b.n	8014826 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801482a:	4b0f      	ldr	r3, [pc, #60]	@ (8014868 <vPortValidateInterruptPriority+0x7c>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8014832:	4b0e      	ldr	r3, [pc, #56]	@ (801486c <vPortValidateInterruptPriority+0x80>)
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	429a      	cmp	r2, r3
 8014838:	d90b      	bls.n	8014852 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 801483a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801483e:	f383 8811 	msr	BASEPRI, r3
 8014842:	f3bf 8f6f 	isb	sy
 8014846:	f3bf 8f4f 	dsb	sy
 801484a:	603b      	str	r3, [r7, #0]
    }
 801484c:	bf00      	nop
 801484e:	bf00      	nop
 8014850:	e7fd      	b.n	801484e <vPortValidateInterruptPriority+0x62>
    }
 8014852:	bf00      	nop
 8014854:	3714      	adds	r7, #20
 8014856:	46bd      	mov	sp, r7
 8014858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485c:	4770      	bx	lr
 801485e:	bf00      	nop
 8014860:	e000e3f0 	.word	0xe000e3f0
 8014864:	2000072c 	.word	0x2000072c
 8014868:	e000ed0c 	.word	0xe000ed0c
 801486c:	20000730 	.word	0x20000730

08014870 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b08a      	sub	sp, #40	@ 0x28
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8014878:	2300      	movs	r3, #0
 801487a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 801487c:	f7fe fdba 	bl	80133f4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8014880:	4b66      	ldr	r3, [pc, #408]	@ (8014a1c <pvPortMalloc+0x1ac>)
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d101      	bne.n	801488c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8014888:	f000 f938 	bl	8014afc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801488c:	4b64      	ldr	r3, [pc, #400]	@ (8014a20 <pvPortMalloc+0x1b0>)
 801488e:	681a      	ldr	r2, [r3, #0]
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	4013      	ands	r3, r2
 8014894:	2b00      	cmp	r3, #0
 8014896:	f040 80a9 	bne.w	80149ec <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d02e      	beq.n	80148fe <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80148a0:	2208      	movs	r2, #8
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80148a6:	687a      	ldr	r2, [r7, #4]
 80148a8:	429a      	cmp	r2, r3
 80148aa:	d228      	bcs.n	80148fe <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 80148ac:	2208      	movs	r2, #8
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	4413      	add	r3, r2
 80148b2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	f003 0307 	and.w	r3, r3, #7
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d022      	beq.n	8014904 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	f023 0307 	bic.w	r3, r3, #7
 80148c4:	3308      	adds	r3, #8
 80148c6:	687a      	ldr	r2, [r7, #4]
 80148c8:	429a      	cmp	r2, r3
 80148ca:	d215      	bcs.n	80148f8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	f023 0307 	bic.w	r3, r3, #7
 80148d2:	3308      	adds	r3, #8
 80148d4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	f003 0307 	and.w	r3, r3, #7
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d011      	beq.n	8014904 <pvPortMalloc+0x94>
        __asm volatile
 80148e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148e4:	f383 8811 	msr	BASEPRI, r3
 80148e8:	f3bf 8f6f 	isb	sy
 80148ec:	f3bf 8f4f 	dsb	sy
 80148f0:	617b      	str	r3, [r7, #20]
    }
 80148f2:	bf00      	nop
 80148f4:	bf00      	nop
 80148f6:	e7fd      	b.n	80148f4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80148f8:	2300      	movs	r3, #0
 80148fa:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80148fc:	e002      	b.n	8014904 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80148fe:	2300      	movs	r3, #0
 8014900:	607b      	str	r3, [r7, #4]
 8014902:	e000      	b.n	8014906 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014904:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d06f      	beq.n	80149ec <pvPortMalloc+0x17c>
 801490c:	4b45      	ldr	r3, [pc, #276]	@ (8014a24 <pvPortMalloc+0x1b4>)
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	687a      	ldr	r2, [r7, #4]
 8014912:	429a      	cmp	r2, r3
 8014914:	d86a      	bhi.n	80149ec <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8014916:	4b44      	ldr	r3, [pc, #272]	@ (8014a28 <pvPortMalloc+0x1b8>)
 8014918:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 801491a:	4b43      	ldr	r3, [pc, #268]	@ (8014a28 <pvPortMalloc+0x1b8>)
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014920:	e004      	b.n	801492c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8014922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014924:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8014926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801492e:	685b      	ldr	r3, [r3, #4]
 8014930:	687a      	ldr	r2, [r7, #4]
 8014932:	429a      	cmp	r2, r3
 8014934:	d903      	bls.n	801493e <pvPortMalloc+0xce>
 8014936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d1f1      	bne.n	8014922 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 801493e:	4b37      	ldr	r3, [pc, #220]	@ (8014a1c <pvPortMalloc+0x1ac>)
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014944:	429a      	cmp	r2, r3
 8014946:	d051      	beq.n	80149ec <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014948:	6a3b      	ldr	r3, [r7, #32]
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	2208      	movs	r2, #8
 801494e:	4413      	add	r3, r2
 8014950:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014954:	681a      	ldr	r2, [r3, #0]
 8014956:	6a3b      	ldr	r3, [r7, #32]
 8014958:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801495c:	685a      	ldr	r2, [r3, #4]
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	1ad2      	subs	r2, r2, r3
 8014962:	2308      	movs	r3, #8
 8014964:	005b      	lsls	r3, r3, #1
 8014966:	429a      	cmp	r2, r3
 8014968:	d920      	bls.n	80149ac <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801496a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	4413      	add	r3, r2
 8014970:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014972:	69bb      	ldr	r3, [r7, #24]
 8014974:	f003 0307 	and.w	r3, r3, #7
 8014978:	2b00      	cmp	r3, #0
 801497a:	d00b      	beq.n	8014994 <pvPortMalloc+0x124>
        __asm volatile
 801497c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014980:	f383 8811 	msr	BASEPRI, r3
 8014984:	f3bf 8f6f 	isb	sy
 8014988:	f3bf 8f4f 	dsb	sy
 801498c:	613b      	str	r3, [r7, #16]
    }
 801498e:	bf00      	nop
 8014990:	bf00      	nop
 8014992:	e7fd      	b.n	8014990 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014996:	685a      	ldr	r2, [r3, #4]
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	1ad2      	subs	r2, r2, r3
 801499c:	69bb      	ldr	r3, [r7, #24]
 801499e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80149a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149a2:	687a      	ldr	r2, [r7, #4]
 80149a4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80149a6:	69b8      	ldr	r0, [r7, #24]
 80149a8:	f000 f90a 	bl	8014bc0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80149ac:	4b1d      	ldr	r3, [pc, #116]	@ (8014a24 <pvPortMalloc+0x1b4>)
 80149ae:	681a      	ldr	r2, [r3, #0]
 80149b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149b2:	685b      	ldr	r3, [r3, #4]
 80149b4:	1ad3      	subs	r3, r2, r3
 80149b6:	4a1b      	ldr	r2, [pc, #108]	@ (8014a24 <pvPortMalloc+0x1b4>)
 80149b8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80149ba:	4b1a      	ldr	r3, [pc, #104]	@ (8014a24 <pvPortMalloc+0x1b4>)
 80149bc:	681a      	ldr	r2, [r3, #0]
 80149be:	4b1b      	ldr	r3, [pc, #108]	@ (8014a2c <pvPortMalloc+0x1bc>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d203      	bcs.n	80149ce <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80149c6:	4b17      	ldr	r3, [pc, #92]	@ (8014a24 <pvPortMalloc+0x1b4>)
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	4a18      	ldr	r2, [pc, #96]	@ (8014a2c <pvPortMalloc+0x1bc>)
 80149cc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80149ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149d0:	685a      	ldr	r2, [r3, #4]
 80149d2:	4b13      	ldr	r3, [pc, #76]	@ (8014a20 <pvPortMalloc+0x1b0>)
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	431a      	orrs	r2, r3
 80149d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149da:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80149dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149de:	2200      	movs	r2, #0
 80149e0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80149e2:	4b13      	ldr	r3, [pc, #76]	@ (8014a30 <pvPortMalloc+0x1c0>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	3301      	adds	r3, #1
 80149e8:	4a11      	ldr	r2, [pc, #68]	@ (8014a30 <pvPortMalloc+0x1c0>)
 80149ea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80149ec:	f7fe fd10 	bl	8013410 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80149f0:	69fb      	ldr	r3, [r7, #28]
 80149f2:	f003 0307 	and.w	r3, r3, #7
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d00b      	beq.n	8014a12 <pvPortMalloc+0x1a2>
        __asm volatile
 80149fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149fe:	f383 8811 	msr	BASEPRI, r3
 8014a02:	f3bf 8f6f 	isb	sy
 8014a06:	f3bf 8f4f 	dsb	sy
 8014a0a:	60fb      	str	r3, [r7, #12]
    }
 8014a0c:	bf00      	nop
 8014a0e:	bf00      	nop
 8014a10:	e7fd      	b.n	8014a0e <pvPortMalloc+0x19e>
    return pvReturn;
 8014a12:	69fb      	ldr	r3, [r7, #28]
}
 8014a14:	4618      	mov	r0, r3
 8014a16:	3728      	adds	r7, #40	@ 0x28
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}
 8014a1c:	2001333c 	.word	0x2001333c
 8014a20:	20013350 	.word	0x20013350
 8014a24:	20013340 	.word	0x20013340
 8014a28:	20013334 	.word	0x20013334
 8014a2c:	20013344 	.word	0x20013344
 8014a30:	20013348 	.word	0x20013348

08014a34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b086      	sub	sp, #24
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d04f      	beq.n	8014ae6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8014a46:	2308      	movs	r3, #8
 8014a48:	425b      	negs	r3, r3
 8014a4a:	697a      	ldr	r2, [r7, #20]
 8014a4c:	4413      	add	r3, r2
 8014a4e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8014a50:	697b      	ldr	r3, [r7, #20]
 8014a52:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014a54:	693b      	ldr	r3, [r7, #16]
 8014a56:	685a      	ldr	r2, [r3, #4]
 8014a58:	4b25      	ldr	r3, [pc, #148]	@ (8014af0 <vPortFree+0xbc>)
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	4013      	ands	r3, r2
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d10b      	bne.n	8014a7a <vPortFree+0x46>
        __asm volatile
 8014a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a66:	f383 8811 	msr	BASEPRI, r3
 8014a6a:	f3bf 8f6f 	isb	sy
 8014a6e:	f3bf 8f4f 	dsb	sy
 8014a72:	60fb      	str	r3, [r7, #12]
    }
 8014a74:	bf00      	nop
 8014a76:	bf00      	nop
 8014a78:	e7fd      	b.n	8014a76 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014a7a:	693b      	ldr	r3, [r7, #16]
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d00b      	beq.n	8014a9a <vPortFree+0x66>
        __asm volatile
 8014a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a86:	f383 8811 	msr	BASEPRI, r3
 8014a8a:	f3bf 8f6f 	isb	sy
 8014a8e:	f3bf 8f4f 	dsb	sy
 8014a92:	60bb      	str	r3, [r7, #8]
    }
 8014a94:	bf00      	nop
 8014a96:	bf00      	nop
 8014a98:	e7fd      	b.n	8014a96 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014a9a:	693b      	ldr	r3, [r7, #16]
 8014a9c:	685a      	ldr	r2, [r3, #4]
 8014a9e:	4b14      	ldr	r3, [pc, #80]	@ (8014af0 <vPortFree+0xbc>)
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	4013      	ands	r3, r2
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d01e      	beq.n	8014ae6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8014aa8:	693b      	ldr	r3, [r7, #16]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d11a      	bne.n	8014ae6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014ab0:	693b      	ldr	r3, [r7, #16]
 8014ab2:	685a      	ldr	r2, [r3, #4]
 8014ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8014af0 <vPortFree+0xbc>)
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	43db      	mvns	r3, r3
 8014aba:	401a      	ands	r2, r3
 8014abc:	693b      	ldr	r3, [r7, #16]
 8014abe:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8014ac0:	f7fe fc98 	bl	80133f4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8014ac4:	693b      	ldr	r3, [r7, #16]
 8014ac6:	685a      	ldr	r2, [r3, #4]
 8014ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8014af4 <vPortFree+0xc0>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	4413      	add	r3, r2
 8014ace:	4a09      	ldr	r2, [pc, #36]	@ (8014af4 <vPortFree+0xc0>)
 8014ad0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014ad2:	6938      	ldr	r0, [r7, #16]
 8014ad4:	f000 f874 	bl	8014bc0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8014ad8:	4b07      	ldr	r3, [pc, #28]	@ (8014af8 <vPortFree+0xc4>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	3301      	adds	r3, #1
 8014ade:	4a06      	ldr	r2, [pc, #24]	@ (8014af8 <vPortFree+0xc4>)
 8014ae0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8014ae2:	f7fe fc95 	bl	8013410 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8014ae6:	bf00      	nop
 8014ae8:	3718      	adds	r7, #24
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}
 8014aee:	bf00      	nop
 8014af0:	20013350 	.word	0x20013350
 8014af4:	20013340 	.word	0x20013340
 8014af8:	2001334c 	.word	0x2001334c

08014afc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8014afc:	b480      	push	{r7}
 8014afe:	b085      	sub	sp, #20
 8014b00:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014b02:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8014b06:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8014b08:	4b27      	ldr	r3, [pc, #156]	@ (8014ba8 <prvHeapInit+0xac>)
 8014b0a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	f003 0307 	and.w	r3, r3, #7
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d00c      	beq.n	8014b30 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	3307      	adds	r3, #7
 8014b1a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	f023 0307 	bic.w	r3, r3, #7
 8014b22:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014b24:	68ba      	ldr	r2, [r7, #8]
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	1ad3      	subs	r3, r2, r3
 8014b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8014ba8 <prvHeapInit+0xac>)
 8014b2c:	4413      	add	r3, r2
 8014b2e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014b34:	4a1d      	ldr	r2, [pc, #116]	@ (8014bac <prvHeapInit+0xb0>)
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8014b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8014bac <prvHeapInit+0xb0>)
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	68ba      	ldr	r2, [r7, #8]
 8014b44:	4413      	add	r3, r2
 8014b46:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8014b48:	2208      	movs	r2, #8
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	1a9b      	subs	r3, r3, r2
 8014b4e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	f023 0307 	bic.w	r3, r3, #7
 8014b56:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	4a15      	ldr	r2, [pc, #84]	@ (8014bb0 <prvHeapInit+0xb4>)
 8014b5c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8014b5e:	4b14      	ldr	r3, [pc, #80]	@ (8014bb0 <prvHeapInit+0xb4>)
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	2200      	movs	r2, #0
 8014b64:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8014b66:	4b12      	ldr	r3, [pc, #72]	@ (8014bb0 <prvHeapInit+0xb4>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014b72:	683b      	ldr	r3, [r7, #0]
 8014b74:	68fa      	ldr	r2, [r7, #12]
 8014b76:	1ad2      	subs	r2, r2, r3
 8014b78:	683b      	ldr	r3, [r7, #0]
 8014b7a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8014bb0 <prvHeapInit+0xb4>)
 8014b7e:	681a      	ldr	r2, [r3, #0]
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014b84:	683b      	ldr	r3, [r7, #0]
 8014b86:	685b      	ldr	r3, [r3, #4]
 8014b88:	4a0a      	ldr	r2, [pc, #40]	@ (8014bb4 <prvHeapInit+0xb8>)
 8014b8a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014b8c:	683b      	ldr	r3, [r7, #0]
 8014b8e:	685b      	ldr	r3, [r3, #4]
 8014b90:	4a09      	ldr	r2, [pc, #36]	@ (8014bb8 <prvHeapInit+0xbc>)
 8014b92:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014b94:	4b09      	ldr	r3, [pc, #36]	@ (8014bbc <prvHeapInit+0xc0>)
 8014b96:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8014b9a:	601a      	str	r2, [r3, #0]
}
 8014b9c:	bf00      	nop
 8014b9e:	3714      	adds	r7, #20
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba6:	4770      	bx	lr
 8014ba8:	20000734 	.word	0x20000734
 8014bac:	20013334 	.word	0x20013334
 8014bb0:	2001333c 	.word	0x2001333c
 8014bb4:	20013344 	.word	0x20013344
 8014bb8:	20013340 	.word	0x20013340
 8014bbc:	20013350 	.word	0x20013350

08014bc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8014bc0:	b480      	push	{r7}
 8014bc2:	b085      	sub	sp, #20
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014bc8:	4b28      	ldr	r3, [pc, #160]	@ (8014c6c <prvInsertBlockIntoFreeList+0xac>)
 8014bca:	60fb      	str	r3, [r7, #12]
 8014bcc:	e002      	b.n	8014bd4 <prvInsertBlockIntoFreeList+0x14>
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	60fb      	str	r3, [r7, #12]
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	687a      	ldr	r2, [r7, #4]
 8014bda:	429a      	cmp	r2, r3
 8014bdc:	d8f7      	bhi.n	8014bce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	685b      	ldr	r3, [r3, #4]
 8014be6:	68ba      	ldr	r2, [r7, #8]
 8014be8:	4413      	add	r3, r2
 8014bea:	687a      	ldr	r2, [r7, #4]
 8014bec:	429a      	cmp	r2, r3
 8014bee:	d108      	bne.n	8014c02 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	685a      	ldr	r2, [r3, #4]
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	685b      	ldr	r3, [r3, #4]
 8014bf8:	441a      	add	r2, r3
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	685b      	ldr	r3, [r3, #4]
 8014c0a:	68ba      	ldr	r2, [r7, #8]
 8014c0c:	441a      	add	r2, r3
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	429a      	cmp	r2, r3
 8014c14:	d118      	bne.n	8014c48 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	681a      	ldr	r2, [r3, #0]
 8014c1a:	4b15      	ldr	r3, [pc, #84]	@ (8014c70 <prvInsertBlockIntoFreeList+0xb0>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	429a      	cmp	r2, r3
 8014c20:	d00d      	beq.n	8014c3e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	685a      	ldr	r2, [r3, #4]
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	685b      	ldr	r3, [r3, #4]
 8014c2c:	441a      	add	r2, r3
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	681a      	ldr	r2, [r3, #0]
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	601a      	str	r2, [r3, #0]
 8014c3c:	e008      	b.n	8014c50 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8014c70 <prvInsertBlockIntoFreeList+0xb0>)
 8014c40:	681a      	ldr	r2, [r3, #0]
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	601a      	str	r2, [r3, #0]
 8014c46:	e003      	b.n	8014c50 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	681a      	ldr	r2, [r3, #0]
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8014c50:	68fa      	ldr	r2, [r7, #12]
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	429a      	cmp	r2, r3
 8014c56:	d002      	beq.n	8014c5e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	687a      	ldr	r2, [r7, #4]
 8014c5c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8014c5e:	bf00      	nop
 8014c60:	3714      	adds	r7, #20
 8014c62:	46bd      	mov	sp, r7
 8014c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c68:	4770      	bx	lr
 8014c6a:	bf00      	nop
 8014c6c:	20013334 	.word	0x20013334
 8014c70:	2001333c 	.word	0x2001333c

08014c74 <malloc>:
 8014c74:	4b02      	ldr	r3, [pc, #8]	@ (8014c80 <malloc+0xc>)
 8014c76:	4601      	mov	r1, r0
 8014c78:	6818      	ldr	r0, [r3, #0]
 8014c7a:	f000 b82d 	b.w	8014cd8 <_malloc_r>
 8014c7e:	bf00      	nop
 8014c80:	200001a4 	.word	0x200001a4

08014c84 <free>:
 8014c84:	4b02      	ldr	r3, [pc, #8]	@ (8014c90 <free+0xc>)
 8014c86:	4601      	mov	r1, r0
 8014c88:	6818      	ldr	r0, [r3, #0]
 8014c8a:	f001 ba39 	b.w	8016100 <_free_r>
 8014c8e:	bf00      	nop
 8014c90:	200001a4 	.word	0x200001a4

08014c94 <sbrk_aligned>:
 8014c94:	b570      	push	{r4, r5, r6, lr}
 8014c96:	4e0f      	ldr	r6, [pc, #60]	@ (8014cd4 <sbrk_aligned+0x40>)
 8014c98:	460c      	mov	r4, r1
 8014c9a:	6831      	ldr	r1, [r6, #0]
 8014c9c:	4605      	mov	r5, r0
 8014c9e:	b911      	cbnz	r1, 8014ca6 <sbrk_aligned+0x12>
 8014ca0:	f001 f9c8 	bl	8016034 <_sbrk_r>
 8014ca4:	6030      	str	r0, [r6, #0]
 8014ca6:	4621      	mov	r1, r4
 8014ca8:	4628      	mov	r0, r5
 8014caa:	f001 f9c3 	bl	8016034 <_sbrk_r>
 8014cae:	1c43      	adds	r3, r0, #1
 8014cb0:	d103      	bne.n	8014cba <sbrk_aligned+0x26>
 8014cb2:	f04f 34ff 	mov.w	r4, #4294967295
 8014cb6:	4620      	mov	r0, r4
 8014cb8:	bd70      	pop	{r4, r5, r6, pc}
 8014cba:	1cc4      	adds	r4, r0, #3
 8014cbc:	f024 0403 	bic.w	r4, r4, #3
 8014cc0:	42a0      	cmp	r0, r4
 8014cc2:	d0f8      	beq.n	8014cb6 <sbrk_aligned+0x22>
 8014cc4:	1a21      	subs	r1, r4, r0
 8014cc6:	4628      	mov	r0, r5
 8014cc8:	f001 f9b4 	bl	8016034 <_sbrk_r>
 8014ccc:	3001      	adds	r0, #1
 8014cce:	d1f2      	bne.n	8014cb6 <sbrk_aligned+0x22>
 8014cd0:	e7ef      	b.n	8014cb2 <sbrk_aligned+0x1e>
 8014cd2:	bf00      	nop
 8014cd4:	20013354 	.word	0x20013354

08014cd8 <_malloc_r>:
 8014cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014cdc:	1ccd      	adds	r5, r1, #3
 8014cde:	f025 0503 	bic.w	r5, r5, #3
 8014ce2:	3508      	adds	r5, #8
 8014ce4:	2d0c      	cmp	r5, #12
 8014ce6:	bf38      	it	cc
 8014ce8:	250c      	movcc	r5, #12
 8014cea:	2d00      	cmp	r5, #0
 8014cec:	4606      	mov	r6, r0
 8014cee:	db01      	blt.n	8014cf4 <_malloc_r+0x1c>
 8014cf0:	42a9      	cmp	r1, r5
 8014cf2:	d904      	bls.n	8014cfe <_malloc_r+0x26>
 8014cf4:	230c      	movs	r3, #12
 8014cf6:	6033      	str	r3, [r6, #0]
 8014cf8:	2000      	movs	r0, #0
 8014cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014dd4 <_malloc_r+0xfc>
 8014d02:	f000 f869 	bl	8014dd8 <__malloc_lock>
 8014d06:	f8d8 3000 	ldr.w	r3, [r8]
 8014d0a:	461c      	mov	r4, r3
 8014d0c:	bb44      	cbnz	r4, 8014d60 <_malloc_r+0x88>
 8014d0e:	4629      	mov	r1, r5
 8014d10:	4630      	mov	r0, r6
 8014d12:	f7ff ffbf 	bl	8014c94 <sbrk_aligned>
 8014d16:	1c43      	adds	r3, r0, #1
 8014d18:	4604      	mov	r4, r0
 8014d1a:	d158      	bne.n	8014dce <_malloc_r+0xf6>
 8014d1c:	f8d8 4000 	ldr.w	r4, [r8]
 8014d20:	4627      	mov	r7, r4
 8014d22:	2f00      	cmp	r7, #0
 8014d24:	d143      	bne.n	8014dae <_malloc_r+0xd6>
 8014d26:	2c00      	cmp	r4, #0
 8014d28:	d04b      	beq.n	8014dc2 <_malloc_r+0xea>
 8014d2a:	6823      	ldr	r3, [r4, #0]
 8014d2c:	4639      	mov	r1, r7
 8014d2e:	4630      	mov	r0, r6
 8014d30:	eb04 0903 	add.w	r9, r4, r3
 8014d34:	f001 f97e 	bl	8016034 <_sbrk_r>
 8014d38:	4581      	cmp	r9, r0
 8014d3a:	d142      	bne.n	8014dc2 <_malloc_r+0xea>
 8014d3c:	6821      	ldr	r1, [r4, #0]
 8014d3e:	1a6d      	subs	r5, r5, r1
 8014d40:	4629      	mov	r1, r5
 8014d42:	4630      	mov	r0, r6
 8014d44:	f7ff ffa6 	bl	8014c94 <sbrk_aligned>
 8014d48:	3001      	adds	r0, #1
 8014d4a:	d03a      	beq.n	8014dc2 <_malloc_r+0xea>
 8014d4c:	6823      	ldr	r3, [r4, #0]
 8014d4e:	442b      	add	r3, r5
 8014d50:	6023      	str	r3, [r4, #0]
 8014d52:	f8d8 3000 	ldr.w	r3, [r8]
 8014d56:	685a      	ldr	r2, [r3, #4]
 8014d58:	bb62      	cbnz	r2, 8014db4 <_malloc_r+0xdc>
 8014d5a:	f8c8 7000 	str.w	r7, [r8]
 8014d5e:	e00f      	b.n	8014d80 <_malloc_r+0xa8>
 8014d60:	6822      	ldr	r2, [r4, #0]
 8014d62:	1b52      	subs	r2, r2, r5
 8014d64:	d420      	bmi.n	8014da8 <_malloc_r+0xd0>
 8014d66:	2a0b      	cmp	r2, #11
 8014d68:	d917      	bls.n	8014d9a <_malloc_r+0xc2>
 8014d6a:	1961      	adds	r1, r4, r5
 8014d6c:	42a3      	cmp	r3, r4
 8014d6e:	6025      	str	r5, [r4, #0]
 8014d70:	bf18      	it	ne
 8014d72:	6059      	strne	r1, [r3, #4]
 8014d74:	6863      	ldr	r3, [r4, #4]
 8014d76:	bf08      	it	eq
 8014d78:	f8c8 1000 	streq.w	r1, [r8]
 8014d7c:	5162      	str	r2, [r4, r5]
 8014d7e:	604b      	str	r3, [r1, #4]
 8014d80:	4630      	mov	r0, r6
 8014d82:	f000 f82f 	bl	8014de4 <__malloc_unlock>
 8014d86:	f104 000b 	add.w	r0, r4, #11
 8014d8a:	1d23      	adds	r3, r4, #4
 8014d8c:	f020 0007 	bic.w	r0, r0, #7
 8014d90:	1ac2      	subs	r2, r0, r3
 8014d92:	bf1c      	itt	ne
 8014d94:	1a1b      	subne	r3, r3, r0
 8014d96:	50a3      	strne	r3, [r4, r2]
 8014d98:	e7af      	b.n	8014cfa <_malloc_r+0x22>
 8014d9a:	6862      	ldr	r2, [r4, #4]
 8014d9c:	42a3      	cmp	r3, r4
 8014d9e:	bf0c      	ite	eq
 8014da0:	f8c8 2000 	streq.w	r2, [r8]
 8014da4:	605a      	strne	r2, [r3, #4]
 8014da6:	e7eb      	b.n	8014d80 <_malloc_r+0xa8>
 8014da8:	4623      	mov	r3, r4
 8014daa:	6864      	ldr	r4, [r4, #4]
 8014dac:	e7ae      	b.n	8014d0c <_malloc_r+0x34>
 8014dae:	463c      	mov	r4, r7
 8014db0:	687f      	ldr	r7, [r7, #4]
 8014db2:	e7b6      	b.n	8014d22 <_malloc_r+0x4a>
 8014db4:	461a      	mov	r2, r3
 8014db6:	685b      	ldr	r3, [r3, #4]
 8014db8:	42a3      	cmp	r3, r4
 8014dba:	d1fb      	bne.n	8014db4 <_malloc_r+0xdc>
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	6053      	str	r3, [r2, #4]
 8014dc0:	e7de      	b.n	8014d80 <_malloc_r+0xa8>
 8014dc2:	230c      	movs	r3, #12
 8014dc4:	6033      	str	r3, [r6, #0]
 8014dc6:	4630      	mov	r0, r6
 8014dc8:	f000 f80c 	bl	8014de4 <__malloc_unlock>
 8014dcc:	e794      	b.n	8014cf8 <_malloc_r+0x20>
 8014dce:	6005      	str	r5, [r0, #0]
 8014dd0:	e7d6      	b.n	8014d80 <_malloc_r+0xa8>
 8014dd2:	bf00      	nop
 8014dd4:	20013358 	.word	0x20013358

08014dd8 <__malloc_lock>:
 8014dd8:	4801      	ldr	r0, [pc, #4]	@ (8014de0 <__malloc_lock+0x8>)
 8014dda:	f001 b978 	b.w	80160ce <__retarget_lock_acquire_recursive>
 8014dde:	bf00      	nop
 8014de0:	2001349c 	.word	0x2001349c

08014de4 <__malloc_unlock>:
 8014de4:	4801      	ldr	r0, [pc, #4]	@ (8014dec <__malloc_unlock+0x8>)
 8014de6:	f001 b973 	b.w	80160d0 <__retarget_lock_release_recursive>
 8014dea:	bf00      	nop
 8014dec:	2001349c 	.word	0x2001349c

08014df0 <realloc>:
 8014df0:	4b02      	ldr	r3, [pc, #8]	@ (8014dfc <realloc+0xc>)
 8014df2:	460a      	mov	r2, r1
 8014df4:	4601      	mov	r1, r0
 8014df6:	6818      	ldr	r0, [r3, #0]
 8014df8:	f000 b802 	b.w	8014e00 <_realloc_r>
 8014dfc:	200001a4 	.word	0x200001a4

08014e00 <_realloc_r>:
 8014e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e04:	4607      	mov	r7, r0
 8014e06:	4614      	mov	r4, r2
 8014e08:	460d      	mov	r5, r1
 8014e0a:	b921      	cbnz	r1, 8014e16 <_realloc_r+0x16>
 8014e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e10:	4611      	mov	r1, r2
 8014e12:	f7ff bf61 	b.w	8014cd8 <_malloc_r>
 8014e16:	b92a      	cbnz	r2, 8014e24 <_realloc_r+0x24>
 8014e18:	f001 f972 	bl	8016100 <_free_r>
 8014e1c:	4625      	mov	r5, r4
 8014e1e:	4628      	mov	r0, r5
 8014e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e24:	f002 f9ac 	bl	8017180 <_malloc_usable_size_r>
 8014e28:	4284      	cmp	r4, r0
 8014e2a:	4606      	mov	r6, r0
 8014e2c:	d802      	bhi.n	8014e34 <_realloc_r+0x34>
 8014e2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014e32:	d8f4      	bhi.n	8014e1e <_realloc_r+0x1e>
 8014e34:	4621      	mov	r1, r4
 8014e36:	4638      	mov	r0, r7
 8014e38:	f7ff ff4e 	bl	8014cd8 <_malloc_r>
 8014e3c:	4680      	mov	r8, r0
 8014e3e:	b908      	cbnz	r0, 8014e44 <_realloc_r+0x44>
 8014e40:	4645      	mov	r5, r8
 8014e42:	e7ec      	b.n	8014e1e <_realloc_r+0x1e>
 8014e44:	42b4      	cmp	r4, r6
 8014e46:	4622      	mov	r2, r4
 8014e48:	4629      	mov	r1, r5
 8014e4a:	bf28      	it	cs
 8014e4c:	4632      	movcs	r2, r6
 8014e4e:	f001 f940 	bl	80160d2 <memcpy>
 8014e52:	4629      	mov	r1, r5
 8014e54:	4638      	mov	r0, r7
 8014e56:	f001 f953 	bl	8016100 <_free_r>
 8014e5a:	e7f1      	b.n	8014e40 <_realloc_r+0x40>

08014e5c <sulp>:
 8014e5c:	b570      	push	{r4, r5, r6, lr}
 8014e5e:	4604      	mov	r4, r0
 8014e60:	460d      	mov	r5, r1
 8014e62:	ec45 4b10 	vmov	d0, r4, r5
 8014e66:	4616      	mov	r6, r2
 8014e68:	f002 f84c 	bl	8016f04 <__ulp>
 8014e6c:	ec51 0b10 	vmov	r0, r1, d0
 8014e70:	b17e      	cbz	r6, 8014e92 <sulp+0x36>
 8014e72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014e76:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	dd09      	ble.n	8014e92 <sulp+0x36>
 8014e7e:	051b      	lsls	r3, r3, #20
 8014e80:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8014e84:	2400      	movs	r4, #0
 8014e86:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8014e8a:	4622      	mov	r2, r4
 8014e8c:	462b      	mov	r3, r5
 8014e8e:	f7f3 fbe3 	bl	8008658 <__aeabi_dmul>
 8014e92:	ec41 0b10 	vmov	d0, r0, r1
 8014e96:	bd70      	pop	{r4, r5, r6, pc}

08014e98 <_strtod_l>:
 8014e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e9c:	b09f      	sub	sp, #124	@ 0x7c
 8014e9e:	460c      	mov	r4, r1
 8014ea0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	921a      	str	r2, [sp, #104]	@ 0x68
 8014ea6:	9005      	str	r0, [sp, #20]
 8014ea8:	f04f 0a00 	mov.w	sl, #0
 8014eac:	f04f 0b00 	mov.w	fp, #0
 8014eb0:	460a      	mov	r2, r1
 8014eb2:	9219      	str	r2, [sp, #100]	@ 0x64
 8014eb4:	7811      	ldrb	r1, [r2, #0]
 8014eb6:	292b      	cmp	r1, #43	@ 0x2b
 8014eb8:	d04a      	beq.n	8014f50 <_strtod_l+0xb8>
 8014eba:	d838      	bhi.n	8014f2e <_strtod_l+0x96>
 8014ebc:	290d      	cmp	r1, #13
 8014ebe:	d832      	bhi.n	8014f26 <_strtod_l+0x8e>
 8014ec0:	2908      	cmp	r1, #8
 8014ec2:	d832      	bhi.n	8014f2a <_strtod_l+0x92>
 8014ec4:	2900      	cmp	r1, #0
 8014ec6:	d03b      	beq.n	8014f40 <_strtod_l+0xa8>
 8014ec8:	2200      	movs	r2, #0
 8014eca:	920e      	str	r2, [sp, #56]	@ 0x38
 8014ecc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8014ece:	782a      	ldrb	r2, [r5, #0]
 8014ed0:	2a30      	cmp	r2, #48	@ 0x30
 8014ed2:	f040 80b2 	bne.w	801503a <_strtod_l+0x1a2>
 8014ed6:	786a      	ldrb	r2, [r5, #1]
 8014ed8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014edc:	2a58      	cmp	r2, #88	@ 0x58
 8014ede:	d16e      	bne.n	8014fbe <_strtod_l+0x126>
 8014ee0:	9302      	str	r3, [sp, #8]
 8014ee2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014ee4:	9301      	str	r3, [sp, #4]
 8014ee6:	ab1a      	add	r3, sp, #104	@ 0x68
 8014ee8:	9300      	str	r3, [sp, #0]
 8014eea:	4a8f      	ldr	r2, [pc, #572]	@ (8015128 <_strtod_l+0x290>)
 8014eec:	9805      	ldr	r0, [sp, #20]
 8014eee:	ab1b      	add	r3, sp, #108	@ 0x6c
 8014ef0:	a919      	add	r1, sp, #100	@ 0x64
 8014ef2:	f001 f9b7 	bl	8016264 <__gethex>
 8014ef6:	f010 060f 	ands.w	r6, r0, #15
 8014efa:	4604      	mov	r4, r0
 8014efc:	d005      	beq.n	8014f0a <_strtod_l+0x72>
 8014efe:	2e06      	cmp	r6, #6
 8014f00:	d128      	bne.n	8014f54 <_strtod_l+0xbc>
 8014f02:	3501      	adds	r5, #1
 8014f04:	2300      	movs	r3, #0
 8014f06:	9519      	str	r5, [sp, #100]	@ 0x64
 8014f08:	930e      	str	r3, [sp, #56]	@ 0x38
 8014f0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	f040 858e 	bne.w	8015a2e <_strtod_l+0xb96>
 8014f12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f14:	b1cb      	cbz	r3, 8014f4a <_strtod_l+0xb2>
 8014f16:	4652      	mov	r2, sl
 8014f18:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8014f1c:	ec43 2b10 	vmov	d0, r2, r3
 8014f20:	b01f      	add	sp, #124	@ 0x7c
 8014f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f26:	2920      	cmp	r1, #32
 8014f28:	d1ce      	bne.n	8014ec8 <_strtod_l+0x30>
 8014f2a:	3201      	adds	r2, #1
 8014f2c:	e7c1      	b.n	8014eb2 <_strtod_l+0x1a>
 8014f2e:	292d      	cmp	r1, #45	@ 0x2d
 8014f30:	d1ca      	bne.n	8014ec8 <_strtod_l+0x30>
 8014f32:	2101      	movs	r1, #1
 8014f34:	910e      	str	r1, [sp, #56]	@ 0x38
 8014f36:	1c51      	adds	r1, r2, #1
 8014f38:	9119      	str	r1, [sp, #100]	@ 0x64
 8014f3a:	7852      	ldrb	r2, [r2, #1]
 8014f3c:	2a00      	cmp	r2, #0
 8014f3e:	d1c5      	bne.n	8014ecc <_strtod_l+0x34>
 8014f40:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014f42:	9419      	str	r4, [sp, #100]	@ 0x64
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	f040 8570 	bne.w	8015a2a <_strtod_l+0xb92>
 8014f4a:	4652      	mov	r2, sl
 8014f4c:	465b      	mov	r3, fp
 8014f4e:	e7e5      	b.n	8014f1c <_strtod_l+0x84>
 8014f50:	2100      	movs	r1, #0
 8014f52:	e7ef      	b.n	8014f34 <_strtod_l+0x9c>
 8014f54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8014f56:	b13a      	cbz	r2, 8014f68 <_strtod_l+0xd0>
 8014f58:	2135      	movs	r1, #53	@ 0x35
 8014f5a:	a81c      	add	r0, sp, #112	@ 0x70
 8014f5c:	f002 f8cc 	bl	80170f8 <__copybits>
 8014f60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014f62:	9805      	ldr	r0, [sp, #20]
 8014f64:	f001 fca2 	bl	80168ac <_Bfree>
 8014f68:	3e01      	subs	r6, #1
 8014f6a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8014f6c:	2e04      	cmp	r6, #4
 8014f6e:	d806      	bhi.n	8014f7e <_strtod_l+0xe6>
 8014f70:	e8df f006 	tbb	[pc, r6]
 8014f74:	201d0314 	.word	0x201d0314
 8014f78:	14          	.byte	0x14
 8014f79:	00          	.byte	0x00
 8014f7a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8014f7e:	05e1      	lsls	r1, r4, #23
 8014f80:	bf48      	it	mi
 8014f82:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8014f86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014f8a:	0d1b      	lsrs	r3, r3, #20
 8014f8c:	051b      	lsls	r3, r3, #20
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d1bb      	bne.n	8014f0a <_strtod_l+0x72>
 8014f92:	f001 f871 	bl	8016078 <__errno>
 8014f96:	2322      	movs	r3, #34	@ 0x22
 8014f98:	6003      	str	r3, [r0, #0]
 8014f9a:	e7b6      	b.n	8014f0a <_strtod_l+0x72>
 8014f9c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8014fa0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8014fa4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8014fa8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014fac:	e7e7      	b.n	8014f7e <_strtod_l+0xe6>
 8014fae:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8015130 <_strtod_l+0x298>
 8014fb2:	e7e4      	b.n	8014f7e <_strtod_l+0xe6>
 8014fb4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8014fb8:	f04f 3aff 	mov.w	sl, #4294967295
 8014fbc:	e7df      	b.n	8014f7e <_strtod_l+0xe6>
 8014fbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014fc0:	1c5a      	adds	r2, r3, #1
 8014fc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8014fc4:	785b      	ldrb	r3, [r3, #1]
 8014fc6:	2b30      	cmp	r3, #48	@ 0x30
 8014fc8:	d0f9      	beq.n	8014fbe <_strtod_l+0x126>
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d09d      	beq.n	8014f0a <_strtod_l+0x72>
 8014fce:	2301      	movs	r3, #1
 8014fd0:	2700      	movs	r7, #0
 8014fd2:	9308      	str	r3, [sp, #32]
 8014fd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014fd6:	930c      	str	r3, [sp, #48]	@ 0x30
 8014fd8:	970b      	str	r7, [sp, #44]	@ 0x2c
 8014fda:	46b9      	mov	r9, r7
 8014fdc:	220a      	movs	r2, #10
 8014fde:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8014fe0:	7805      	ldrb	r5, [r0, #0]
 8014fe2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8014fe6:	b2d9      	uxtb	r1, r3
 8014fe8:	2909      	cmp	r1, #9
 8014fea:	d928      	bls.n	801503e <_strtod_l+0x1a6>
 8014fec:	494f      	ldr	r1, [pc, #316]	@ (801512c <_strtod_l+0x294>)
 8014fee:	2201      	movs	r2, #1
 8014ff0:	f000 ffda 	bl	8015fa8 <strncmp>
 8014ff4:	2800      	cmp	r0, #0
 8014ff6:	d032      	beq.n	801505e <_strtod_l+0x1c6>
 8014ff8:	2000      	movs	r0, #0
 8014ffa:	462a      	mov	r2, r5
 8014ffc:	900a      	str	r0, [sp, #40]	@ 0x28
 8014ffe:	464d      	mov	r5, r9
 8015000:	4603      	mov	r3, r0
 8015002:	2a65      	cmp	r2, #101	@ 0x65
 8015004:	d001      	beq.n	801500a <_strtod_l+0x172>
 8015006:	2a45      	cmp	r2, #69	@ 0x45
 8015008:	d114      	bne.n	8015034 <_strtod_l+0x19c>
 801500a:	b91d      	cbnz	r5, 8015014 <_strtod_l+0x17c>
 801500c:	9a08      	ldr	r2, [sp, #32]
 801500e:	4302      	orrs	r2, r0
 8015010:	d096      	beq.n	8014f40 <_strtod_l+0xa8>
 8015012:	2500      	movs	r5, #0
 8015014:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8015016:	1c62      	adds	r2, r4, #1
 8015018:	9219      	str	r2, [sp, #100]	@ 0x64
 801501a:	7862      	ldrb	r2, [r4, #1]
 801501c:	2a2b      	cmp	r2, #43	@ 0x2b
 801501e:	d07a      	beq.n	8015116 <_strtod_l+0x27e>
 8015020:	2a2d      	cmp	r2, #45	@ 0x2d
 8015022:	d07e      	beq.n	8015122 <_strtod_l+0x28a>
 8015024:	f04f 0c00 	mov.w	ip, #0
 8015028:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801502c:	2909      	cmp	r1, #9
 801502e:	f240 8085 	bls.w	801513c <_strtod_l+0x2a4>
 8015032:	9419      	str	r4, [sp, #100]	@ 0x64
 8015034:	f04f 0800 	mov.w	r8, #0
 8015038:	e0a5      	b.n	8015186 <_strtod_l+0x2ee>
 801503a:	2300      	movs	r3, #0
 801503c:	e7c8      	b.n	8014fd0 <_strtod_l+0x138>
 801503e:	f1b9 0f08 	cmp.w	r9, #8
 8015042:	bfd8      	it	le
 8015044:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8015046:	f100 0001 	add.w	r0, r0, #1
 801504a:	bfda      	itte	le
 801504c:	fb02 3301 	mlale	r3, r2, r1, r3
 8015050:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8015052:	fb02 3707 	mlagt	r7, r2, r7, r3
 8015056:	f109 0901 	add.w	r9, r9, #1
 801505a:	9019      	str	r0, [sp, #100]	@ 0x64
 801505c:	e7bf      	b.n	8014fde <_strtod_l+0x146>
 801505e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015060:	1c5a      	adds	r2, r3, #1
 8015062:	9219      	str	r2, [sp, #100]	@ 0x64
 8015064:	785a      	ldrb	r2, [r3, #1]
 8015066:	f1b9 0f00 	cmp.w	r9, #0
 801506a:	d03b      	beq.n	80150e4 <_strtod_l+0x24c>
 801506c:	900a      	str	r0, [sp, #40]	@ 0x28
 801506e:	464d      	mov	r5, r9
 8015070:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8015074:	2b09      	cmp	r3, #9
 8015076:	d912      	bls.n	801509e <_strtod_l+0x206>
 8015078:	2301      	movs	r3, #1
 801507a:	e7c2      	b.n	8015002 <_strtod_l+0x16a>
 801507c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801507e:	1c5a      	adds	r2, r3, #1
 8015080:	9219      	str	r2, [sp, #100]	@ 0x64
 8015082:	785a      	ldrb	r2, [r3, #1]
 8015084:	3001      	adds	r0, #1
 8015086:	2a30      	cmp	r2, #48	@ 0x30
 8015088:	d0f8      	beq.n	801507c <_strtod_l+0x1e4>
 801508a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801508e:	2b08      	cmp	r3, #8
 8015090:	f200 84d2 	bhi.w	8015a38 <_strtod_l+0xba0>
 8015094:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015096:	900a      	str	r0, [sp, #40]	@ 0x28
 8015098:	2000      	movs	r0, #0
 801509a:	930c      	str	r3, [sp, #48]	@ 0x30
 801509c:	4605      	mov	r5, r0
 801509e:	3a30      	subs	r2, #48	@ 0x30
 80150a0:	f100 0301 	add.w	r3, r0, #1
 80150a4:	d018      	beq.n	80150d8 <_strtod_l+0x240>
 80150a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80150a8:	4419      	add	r1, r3
 80150aa:	910a      	str	r1, [sp, #40]	@ 0x28
 80150ac:	462e      	mov	r6, r5
 80150ae:	f04f 0e0a 	mov.w	lr, #10
 80150b2:	1c71      	adds	r1, r6, #1
 80150b4:	eba1 0c05 	sub.w	ip, r1, r5
 80150b8:	4563      	cmp	r3, ip
 80150ba:	dc15      	bgt.n	80150e8 <_strtod_l+0x250>
 80150bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80150c0:	182b      	adds	r3, r5, r0
 80150c2:	2b08      	cmp	r3, #8
 80150c4:	f105 0501 	add.w	r5, r5, #1
 80150c8:	4405      	add	r5, r0
 80150ca:	dc1a      	bgt.n	8015102 <_strtod_l+0x26a>
 80150cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80150ce:	230a      	movs	r3, #10
 80150d0:	fb03 2301 	mla	r3, r3, r1, r2
 80150d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80150d6:	2300      	movs	r3, #0
 80150d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80150da:	1c51      	adds	r1, r2, #1
 80150dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80150de:	7852      	ldrb	r2, [r2, #1]
 80150e0:	4618      	mov	r0, r3
 80150e2:	e7c5      	b.n	8015070 <_strtod_l+0x1d8>
 80150e4:	4648      	mov	r0, r9
 80150e6:	e7ce      	b.n	8015086 <_strtod_l+0x1ee>
 80150e8:	2e08      	cmp	r6, #8
 80150ea:	dc05      	bgt.n	80150f8 <_strtod_l+0x260>
 80150ec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80150ee:	fb0e f606 	mul.w	r6, lr, r6
 80150f2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80150f4:	460e      	mov	r6, r1
 80150f6:	e7dc      	b.n	80150b2 <_strtod_l+0x21a>
 80150f8:	2910      	cmp	r1, #16
 80150fa:	bfd8      	it	le
 80150fc:	fb0e f707 	mulle.w	r7, lr, r7
 8015100:	e7f8      	b.n	80150f4 <_strtod_l+0x25c>
 8015102:	2b0f      	cmp	r3, #15
 8015104:	bfdc      	itt	le
 8015106:	230a      	movle	r3, #10
 8015108:	fb03 2707 	mlale	r7, r3, r7, r2
 801510c:	e7e3      	b.n	80150d6 <_strtod_l+0x23e>
 801510e:	2300      	movs	r3, #0
 8015110:	930a      	str	r3, [sp, #40]	@ 0x28
 8015112:	2301      	movs	r3, #1
 8015114:	e77a      	b.n	801500c <_strtod_l+0x174>
 8015116:	f04f 0c00 	mov.w	ip, #0
 801511a:	1ca2      	adds	r2, r4, #2
 801511c:	9219      	str	r2, [sp, #100]	@ 0x64
 801511e:	78a2      	ldrb	r2, [r4, #2]
 8015120:	e782      	b.n	8015028 <_strtod_l+0x190>
 8015122:	f04f 0c01 	mov.w	ip, #1
 8015126:	e7f8      	b.n	801511a <_strtod_l+0x282>
 8015128:	0801a048 	.word	0x0801a048
 801512c:	08019eb0 	.word	0x08019eb0
 8015130:	7ff00000 	.word	0x7ff00000
 8015134:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015136:	1c51      	adds	r1, r2, #1
 8015138:	9119      	str	r1, [sp, #100]	@ 0x64
 801513a:	7852      	ldrb	r2, [r2, #1]
 801513c:	2a30      	cmp	r2, #48	@ 0x30
 801513e:	d0f9      	beq.n	8015134 <_strtod_l+0x29c>
 8015140:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8015144:	2908      	cmp	r1, #8
 8015146:	f63f af75 	bhi.w	8015034 <_strtod_l+0x19c>
 801514a:	3a30      	subs	r2, #48	@ 0x30
 801514c:	9209      	str	r2, [sp, #36]	@ 0x24
 801514e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015150:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015152:	f04f 080a 	mov.w	r8, #10
 8015156:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015158:	1c56      	adds	r6, r2, #1
 801515a:	9619      	str	r6, [sp, #100]	@ 0x64
 801515c:	7852      	ldrb	r2, [r2, #1]
 801515e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8015162:	f1be 0f09 	cmp.w	lr, #9
 8015166:	d939      	bls.n	80151dc <_strtod_l+0x344>
 8015168:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801516a:	1a76      	subs	r6, r6, r1
 801516c:	2e08      	cmp	r6, #8
 801516e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8015172:	dc03      	bgt.n	801517c <_strtod_l+0x2e4>
 8015174:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015176:	4588      	cmp	r8, r1
 8015178:	bfa8      	it	ge
 801517a:	4688      	movge	r8, r1
 801517c:	f1bc 0f00 	cmp.w	ip, #0
 8015180:	d001      	beq.n	8015186 <_strtod_l+0x2ee>
 8015182:	f1c8 0800 	rsb	r8, r8, #0
 8015186:	2d00      	cmp	r5, #0
 8015188:	d14e      	bne.n	8015228 <_strtod_l+0x390>
 801518a:	9908      	ldr	r1, [sp, #32]
 801518c:	4308      	orrs	r0, r1
 801518e:	f47f aebc 	bne.w	8014f0a <_strtod_l+0x72>
 8015192:	2b00      	cmp	r3, #0
 8015194:	f47f aed4 	bne.w	8014f40 <_strtod_l+0xa8>
 8015198:	2a69      	cmp	r2, #105	@ 0x69
 801519a:	d028      	beq.n	80151ee <_strtod_l+0x356>
 801519c:	dc25      	bgt.n	80151ea <_strtod_l+0x352>
 801519e:	2a49      	cmp	r2, #73	@ 0x49
 80151a0:	d025      	beq.n	80151ee <_strtod_l+0x356>
 80151a2:	2a4e      	cmp	r2, #78	@ 0x4e
 80151a4:	f47f aecc 	bne.w	8014f40 <_strtod_l+0xa8>
 80151a8:	499a      	ldr	r1, [pc, #616]	@ (8015414 <_strtod_l+0x57c>)
 80151aa:	a819      	add	r0, sp, #100	@ 0x64
 80151ac:	f001 fa7c 	bl	80166a8 <__match>
 80151b0:	2800      	cmp	r0, #0
 80151b2:	f43f aec5 	beq.w	8014f40 <_strtod_l+0xa8>
 80151b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80151b8:	781b      	ldrb	r3, [r3, #0]
 80151ba:	2b28      	cmp	r3, #40	@ 0x28
 80151bc:	d12e      	bne.n	801521c <_strtod_l+0x384>
 80151be:	4996      	ldr	r1, [pc, #600]	@ (8015418 <_strtod_l+0x580>)
 80151c0:	aa1c      	add	r2, sp, #112	@ 0x70
 80151c2:	a819      	add	r0, sp, #100	@ 0x64
 80151c4:	f001 fa84 	bl	80166d0 <__hexnan>
 80151c8:	2805      	cmp	r0, #5
 80151ca:	d127      	bne.n	801521c <_strtod_l+0x384>
 80151cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80151ce:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80151d2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80151d6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80151da:	e696      	b.n	8014f0a <_strtod_l+0x72>
 80151dc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80151de:	fb08 2101 	mla	r1, r8, r1, r2
 80151e2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80151e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80151e8:	e7b5      	b.n	8015156 <_strtod_l+0x2be>
 80151ea:	2a6e      	cmp	r2, #110	@ 0x6e
 80151ec:	e7da      	b.n	80151a4 <_strtod_l+0x30c>
 80151ee:	498b      	ldr	r1, [pc, #556]	@ (801541c <_strtod_l+0x584>)
 80151f0:	a819      	add	r0, sp, #100	@ 0x64
 80151f2:	f001 fa59 	bl	80166a8 <__match>
 80151f6:	2800      	cmp	r0, #0
 80151f8:	f43f aea2 	beq.w	8014f40 <_strtod_l+0xa8>
 80151fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80151fe:	4988      	ldr	r1, [pc, #544]	@ (8015420 <_strtod_l+0x588>)
 8015200:	3b01      	subs	r3, #1
 8015202:	a819      	add	r0, sp, #100	@ 0x64
 8015204:	9319      	str	r3, [sp, #100]	@ 0x64
 8015206:	f001 fa4f 	bl	80166a8 <__match>
 801520a:	b910      	cbnz	r0, 8015212 <_strtod_l+0x37a>
 801520c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801520e:	3301      	adds	r3, #1
 8015210:	9319      	str	r3, [sp, #100]	@ 0x64
 8015212:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8015430 <_strtod_l+0x598>
 8015216:	f04f 0a00 	mov.w	sl, #0
 801521a:	e676      	b.n	8014f0a <_strtod_l+0x72>
 801521c:	4881      	ldr	r0, [pc, #516]	@ (8015424 <_strtod_l+0x58c>)
 801521e:	f000 ff67 	bl	80160f0 <nan>
 8015222:	ec5b ab10 	vmov	sl, fp, d0
 8015226:	e670      	b.n	8014f0a <_strtod_l+0x72>
 8015228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801522a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801522c:	eba8 0303 	sub.w	r3, r8, r3
 8015230:	f1b9 0f00 	cmp.w	r9, #0
 8015234:	bf08      	it	eq
 8015236:	46a9      	moveq	r9, r5
 8015238:	2d10      	cmp	r5, #16
 801523a:	9309      	str	r3, [sp, #36]	@ 0x24
 801523c:	462c      	mov	r4, r5
 801523e:	bfa8      	it	ge
 8015240:	2410      	movge	r4, #16
 8015242:	f7f3 f98f 	bl	8008564 <__aeabi_ui2d>
 8015246:	2d09      	cmp	r5, #9
 8015248:	4682      	mov	sl, r0
 801524a:	468b      	mov	fp, r1
 801524c:	dc13      	bgt.n	8015276 <_strtod_l+0x3de>
 801524e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015250:	2b00      	cmp	r3, #0
 8015252:	f43f ae5a 	beq.w	8014f0a <_strtod_l+0x72>
 8015256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015258:	dd78      	ble.n	801534c <_strtod_l+0x4b4>
 801525a:	2b16      	cmp	r3, #22
 801525c:	dc5f      	bgt.n	801531e <_strtod_l+0x486>
 801525e:	4972      	ldr	r1, [pc, #456]	@ (8015428 <_strtod_l+0x590>)
 8015260:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015264:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015268:	4652      	mov	r2, sl
 801526a:	465b      	mov	r3, fp
 801526c:	f7f3 f9f4 	bl	8008658 <__aeabi_dmul>
 8015270:	4682      	mov	sl, r0
 8015272:	468b      	mov	fp, r1
 8015274:	e649      	b.n	8014f0a <_strtod_l+0x72>
 8015276:	4b6c      	ldr	r3, [pc, #432]	@ (8015428 <_strtod_l+0x590>)
 8015278:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801527c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8015280:	f7f3 f9ea 	bl	8008658 <__aeabi_dmul>
 8015284:	4682      	mov	sl, r0
 8015286:	4638      	mov	r0, r7
 8015288:	468b      	mov	fp, r1
 801528a:	f7f3 f96b 	bl	8008564 <__aeabi_ui2d>
 801528e:	4602      	mov	r2, r0
 8015290:	460b      	mov	r3, r1
 8015292:	4650      	mov	r0, sl
 8015294:	4659      	mov	r1, fp
 8015296:	f7f3 f829 	bl	80082ec <__adddf3>
 801529a:	2d0f      	cmp	r5, #15
 801529c:	4682      	mov	sl, r0
 801529e:	468b      	mov	fp, r1
 80152a0:	ddd5      	ble.n	801524e <_strtod_l+0x3b6>
 80152a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80152a4:	1b2c      	subs	r4, r5, r4
 80152a6:	441c      	add	r4, r3
 80152a8:	2c00      	cmp	r4, #0
 80152aa:	f340 8093 	ble.w	80153d4 <_strtod_l+0x53c>
 80152ae:	f014 030f 	ands.w	r3, r4, #15
 80152b2:	d00a      	beq.n	80152ca <_strtod_l+0x432>
 80152b4:	495c      	ldr	r1, [pc, #368]	@ (8015428 <_strtod_l+0x590>)
 80152b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80152ba:	4652      	mov	r2, sl
 80152bc:	465b      	mov	r3, fp
 80152be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80152c2:	f7f3 f9c9 	bl	8008658 <__aeabi_dmul>
 80152c6:	4682      	mov	sl, r0
 80152c8:	468b      	mov	fp, r1
 80152ca:	f034 040f 	bics.w	r4, r4, #15
 80152ce:	d073      	beq.n	80153b8 <_strtod_l+0x520>
 80152d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80152d4:	dd49      	ble.n	801536a <_strtod_l+0x4d2>
 80152d6:	2400      	movs	r4, #0
 80152d8:	46a0      	mov	r8, r4
 80152da:	940b      	str	r4, [sp, #44]	@ 0x2c
 80152dc:	46a1      	mov	r9, r4
 80152de:	9a05      	ldr	r2, [sp, #20]
 80152e0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8015430 <_strtod_l+0x598>
 80152e4:	2322      	movs	r3, #34	@ 0x22
 80152e6:	6013      	str	r3, [r2, #0]
 80152e8:	f04f 0a00 	mov.w	sl, #0
 80152ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	f43f ae0b 	beq.w	8014f0a <_strtod_l+0x72>
 80152f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80152f6:	9805      	ldr	r0, [sp, #20]
 80152f8:	f001 fad8 	bl	80168ac <_Bfree>
 80152fc:	9805      	ldr	r0, [sp, #20]
 80152fe:	4649      	mov	r1, r9
 8015300:	f001 fad4 	bl	80168ac <_Bfree>
 8015304:	9805      	ldr	r0, [sp, #20]
 8015306:	4641      	mov	r1, r8
 8015308:	f001 fad0 	bl	80168ac <_Bfree>
 801530c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801530e:	9805      	ldr	r0, [sp, #20]
 8015310:	f001 facc 	bl	80168ac <_Bfree>
 8015314:	9805      	ldr	r0, [sp, #20]
 8015316:	4621      	mov	r1, r4
 8015318:	f001 fac8 	bl	80168ac <_Bfree>
 801531c:	e5f5      	b.n	8014f0a <_strtod_l+0x72>
 801531e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015320:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8015324:	4293      	cmp	r3, r2
 8015326:	dbbc      	blt.n	80152a2 <_strtod_l+0x40a>
 8015328:	4c3f      	ldr	r4, [pc, #252]	@ (8015428 <_strtod_l+0x590>)
 801532a:	f1c5 050f 	rsb	r5, r5, #15
 801532e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8015332:	4652      	mov	r2, sl
 8015334:	465b      	mov	r3, fp
 8015336:	e9d1 0100 	ldrd	r0, r1, [r1]
 801533a:	f7f3 f98d 	bl	8008658 <__aeabi_dmul>
 801533e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015340:	1b5d      	subs	r5, r3, r5
 8015342:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8015346:	e9d4 2300 	ldrd	r2, r3, [r4]
 801534a:	e78f      	b.n	801526c <_strtod_l+0x3d4>
 801534c:	3316      	adds	r3, #22
 801534e:	dba8      	blt.n	80152a2 <_strtod_l+0x40a>
 8015350:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015352:	eba3 0808 	sub.w	r8, r3, r8
 8015356:	4b34      	ldr	r3, [pc, #208]	@ (8015428 <_strtod_l+0x590>)
 8015358:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801535c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8015360:	4650      	mov	r0, sl
 8015362:	4659      	mov	r1, fp
 8015364:	f7f3 faa2 	bl	80088ac <__aeabi_ddiv>
 8015368:	e782      	b.n	8015270 <_strtod_l+0x3d8>
 801536a:	2300      	movs	r3, #0
 801536c:	4f2f      	ldr	r7, [pc, #188]	@ (801542c <_strtod_l+0x594>)
 801536e:	1124      	asrs	r4, r4, #4
 8015370:	4650      	mov	r0, sl
 8015372:	4659      	mov	r1, fp
 8015374:	461e      	mov	r6, r3
 8015376:	2c01      	cmp	r4, #1
 8015378:	dc21      	bgt.n	80153be <_strtod_l+0x526>
 801537a:	b10b      	cbz	r3, 8015380 <_strtod_l+0x4e8>
 801537c:	4682      	mov	sl, r0
 801537e:	468b      	mov	fp, r1
 8015380:	492a      	ldr	r1, [pc, #168]	@ (801542c <_strtod_l+0x594>)
 8015382:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015386:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801538a:	4652      	mov	r2, sl
 801538c:	465b      	mov	r3, fp
 801538e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015392:	f7f3 f961 	bl	8008658 <__aeabi_dmul>
 8015396:	4b26      	ldr	r3, [pc, #152]	@ (8015430 <_strtod_l+0x598>)
 8015398:	460a      	mov	r2, r1
 801539a:	400b      	ands	r3, r1
 801539c:	4925      	ldr	r1, [pc, #148]	@ (8015434 <_strtod_l+0x59c>)
 801539e:	428b      	cmp	r3, r1
 80153a0:	4682      	mov	sl, r0
 80153a2:	d898      	bhi.n	80152d6 <_strtod_l+0x43e>
 80153a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80153a8:	428b      	cmp	r3, r1
 80153aa:	bf86      	itte	hi
 80153ac:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8015438 <_strtod_l+0x5a0>
 80153b0:	f04f 3aff 	movhi.w	sl, #4294967295
 80153b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80153b8:	2300      	movs	r3, #0
 80153ba:	9308      	str	r3, [sp, #32]
 80153bc:	e076      	b.n	80154ac <_strtod_l+0x614>
 80153be:	07e2      	lsls	r2, r4, #31
 80153c0:	d504      	bpl.n	80153cc <_strtod_l+0x534>
 80153c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80153c6:	f7f3 f947 	bl	8008658 <__aeabi_dmul>
 80153ca:	2301      	movs	r3, #1
 80153cc:	3601      	adds	r6, #1
 80153ce:	1064      	asrs	r4, r4, #1
 80153d0:	3708      	adds	r7, #8
 80153d2:	e7d0      	b.n	8015376 <_strtod_l+0x4de>
 80153d4:	d0f0      	beq.n	80153b8 <_strtod_l+0x520>
 80153d6:	4264      	negs	r4, r4
 80153d8:	f014 020f 	ands.w	r2, r4, #15
 80153dc:	d00a      	beq.n	80153f4 <_strtod_l+0x55c>
 80153de:	4b12      	ldr	r3, [pc, #72]	@ (8015428 <_strtod_l+0x590>)
 80153e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80153e4:	4650      	mov	r0, sl
 80153e6:	4659      	mov	r1, fp
 80153e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ec:	f7f3 fa5e 	bl	80088ac <__aeabi_ddiv>
 80153f0:	4682      	mov	sl, r0
 80153f2:	468b      	mov	fp, r1
 80153f4:	1124      	asrs	r4, r4, #4
 80153f6:	d0df      	beq.n	80153b8 <_strtod_l+0x520>
 80153f8:	2c1f      	cmp	r4, #31
 80153fa:	dd1f      	ble.n	801543c <_strtod_l+0x5a4>
 80153fc:	2400      	movs	r4, #0
 80153fe:	46a0      	mov	r8, r4
 8015400:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015402:	46a1      	mov	r9, r4
 8015404:	9a05      	ldr	r2, [sp, #20]
 8015406:	2322      	movs	r3, #34	@ 0x22
 8015408:	f04f 0a00 	mov.w	sl, #0
 801540c:	f04f 0b00 	mov.w	fp, #0
 8015410:	6013      	str	r3, [r2, #0]
 8015412:	e76b      	b.n	80152ec <_strtod_l+0x454>
 8015414:	08019ebb 	.word	0x08019ebb
 8015418:	0801a034 	.word	0x0801a034
 801541c:	08019eb2 	.word	0x08019eb2
 8015420:	08019eb5 	.word	0x08019eb5
 8015424:	0801a030 	.word	0x0801a030
 8015428:	0801a1c0 	.word	0x0801a1c0
 801542c:	0801a198 	.word	0x0801a198
 8015430:	7ff00000 	.word	0x7ff00000
 8015434:	7ca00000 	.word	0x7ca00000
 8015438:	7fefffff 	.word	0x7fefffff
 801543c:	f014 0310 	ands.w	r3, r4, #16
 8015440:	bf18      	it	ne
 8015442:	236a      	movne	r3, #106	@ 0x6a
 8015444:	4ea9      	ldr	r6, [pc, #676]	@ (80156ec <_strtod_l+0x854>)
 8015446:	9308      	str	r3, [sp, #32]
 8015448:	4650      	mov	r0, sl
 801544a:	4659      	mov	r1, fp
 801544c:	2300      	movs	r3, #0
 801544e:	07e7      	lsls	r7, r4, #31
 8015450:	d504      	bpl.n	801545c <_strtod_l+0x5c4>
 8015452:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015456:	f7f3 f8ff 	bl	8008658 <__aeabi_dmul>
 801545a:	2301      	movs	r3, #1
 801545c:	1064      	asrs	r4, r4, #1
 801545e:	f106 0608 	add.w	r6, r6, #8
 8015462:	d1f4      	bne.n	801544e <_strtod_l+0x5b6>
 8015464:	b10b      	cbz	r3, 801546a <_strtod_l+0x5d2>
 8015466:	4682      	mov	sl, r0
 8015468:	468b      	mov	fp, r1
 801546a:	9b08      	ldr	r3, [sp, #32]
 801546c:	b1b3      	cbz	r3, 801549c <_strtod_l+0x604>
 801546e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8015472:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8015476:	2b00      	cmp	r3, #0
 8015478:	4659      	mov	r1, fp
 801547a:	dd0f      	ble.n	801549c <_strtod_l+0x604>
 801547c:	2b1f      	cmp	r3, #31
 801547e:	dd56      	ble.n	801552e <_strtod_l+0x696>
 8015480:	2b34      	cmp	r3, #52	@ 0x34
 8015482:	bfde      	ittt	le
 8015484:	f04f 33ff 	movle.w	r3, #4294967295
 8015488:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801548c:	4093      	lslle	r3, r2
 801548e:	f04f 0a00 	mov.w	sl, #0
 8015492:	bfcc      	ite	gt
 8015494:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015498:	ea03 0b01 	andle.w	fp, r3, r1
 801549c:	2200      	movs	r2, #0
 801549e:	2300      	movs	r3, #0
 80154a0:	4650      	mov	r0, sl
 80154a2:	4659      	mov	r1, fp
 80154a4:	f7f3 fb40 	bl	8008b28 <__aeabi_dcmpeq>
 80154a8:	2800      	cmp	r0, #0
 80154aa:	d1a7      	bne.n	80153fc <_strtod_l+0x564>
 80154ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80154ae:	9300      	str	r3, [sp, #0]
 80154b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80154b2:	9805      	ldr	r0, [sp, #20]
 80154b4:	462b      	mov	r3, r5
 80154b6:	464a      	mov	r2, r9
 80154b8:	f001 fa60 	bl	801697c <__s2b>
 80154bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80154be:	2800      	cmp	r0, #0
 80154c0:	f43f af09 	beq.w	80152d6 <_strtod_l+0x43e>
 80154c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80154c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80154c8:	2a00      	cmp	r2, #0
 80154ca:	eba3 0308 	sub.w	r3, r3, r8
 80154ce:	bfa8      	it	ge
 80154d0:	2300      	movge	r3, #0
 80154d2:	9312      	str	r3, [sp, #72]	@ 0x48
 80154d4:	2400      	movs	r4, #0
 80154d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80154da:	9316      	str	r3, [sp, #88]	@ 0x58
 80154dc:	46a0      	mov	r8, r4
 80154de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80154e0:	9805      	ldr	r0, [sp, #20]
 80154e2:	6859      	ldr	r1, [r3, #4]
 80154e4:	f001 f9a2 	bl	801682c <_Balloc>
 80154e8:	4681      	mov	r9, r0
 80154ea:	2800      	cmp	r0, #0
 80154ec:	f43f aef7 	beq.w	80152de <_strtod_l+0x446>
 80154f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80154f2:	691a      	ldr	r2, [r3, #16]
 80154f4:	3202      	adds	r2, #2
 80154f6:	f103 010c 	add.w	r1, r3, #12
 80154fa:	0092      	lsls	r2, r2, #2
 80154fc:	300c      	adds	r0, #12
 80154fe:	f000 fde8 	bl	80160d2 <memcpy>
 8015502:	ec4b ab10 	vmov	d0, sl, fp
 8015506:	9805      	ldr	r0, [sp, #20]
 8015508:	aa1c      	add	r2, sp, #112	@ 0x70
 801550a:	a91b      	add	r1, sp, #108	@ 0x6c
 801550c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8015510:	f001 fd68 	bl	8016fe4 <__d2b>
 8015514:	901a      	str	r0, [sp, #104]	@ 0x68
 8015516:	2800      	cmp	r0, #0
 8015518:	f43f aee1 	beq.w	80152de <_strtod_l+0x446>
 801551c:	9805      	ldr	r0, [sp, #20]
 801551e:	2101      	movs	r1, #1
 8015520:	f001 fac2 	bl	8016aa8 <__i2b>
 8015524:	4680      	mov	r8, r0
 8015526:	b948      	cbnz	r0, 801553c <_strtod_l+0x6a4>
 8015528:	f04f 0800 	mov.w	r8, #0
 801552c:	e6d7      	b.n	80152de <_strtod_l+0x446>
 801552e:	f04f 32ff 	mov.w	r2, #4294967295
 8015532:	fa02 f303 	lsl.w	r3, r2, r3
 8015536:	ea03 0a0a 	and.w	sl, r3, sl
 801553a:	e7af      	b.n	801549c <_strtod_l+0x604>
 801553c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801553e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015540:	2d00      	cmp	r5, #0
 8015542:	bfab      	itete	ge
 8015544:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8015546:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8015548:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801554a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801554c:	bfac      	ite	ge
 801554e:	18ef      	addge	r7, r5, r3
 8015550:	1b5e      	sublt	r6, r3, r5
 8015552:	9b08      	ldr	r3, [sp, #32]
 8015554:	1aed      	subs	r5, r5, r3
 8015556:	4415      	add	r5, r2
 8015558:	4b65      	ldr	r3, [pc, #404]	@ (80156f0 <_strtod_l+0x858>)
 801555a:	3d01      	subs	r5, #1
 801555c:	429d      	cmp	r5, r3
 801555e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8015562:	da50      	bge.n	8015606 <_strtod_l+0x76e>
 8015564:	1b5b      	subs	r3, r3, r5
 8015566:	2b1f      	cmp	r3, #31
 8015568:	eba2 0203 	sub.w	r2, r2, r3
 801556c:	f04f 0101 	mov.w	r1, #1
 8015570:	dc3d      	bgt.n	80155ee <_strtod_l+0x756>
 8015572:	fa01 f303 	lsl.w	r3, r1, r3
 8015576:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015578:	2300      	movs	r3, #0
 801557a:	9310      	str	r3, [sp, #64]	@ 0x40
 801557c:	18bd      	adds	r5, r7, r2
 801557e:	9b08      	ldr	r3, [sp, #32]
 8015580:	42af      	cmp	r7, r5
 8015582:	4416      	add	r6, r2
 8015584:	441e      	add	r6, r3
 8015586:	463b      	mov	r3, r7
 8015588:	bfa8      	it	ge
 801558a:	462b      	movge	r3, r5
 801558c:	42b3      	cmp	r3, r6
 801558e:	bfa8      	it	ge
 8015590:	4633      	movge	r3, r6
 8015592:	2b00      	cmp	r3, #0
 8015594:	bfc2      	ittt	gt
 8015596:	1aed      	subgt	r5, r5, r3
 8015598:	1af6      	subgt	r6, r6, r3
 801559a:	1aff      	subgt	r7, r7, r3
 801559c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801559e:	2b00      	cmp	r3, #0
 80155a0:	dd16      	ble.n	80155d0 <_strtod_l+0x738>
 80155a2:	4641      	mov	r1, r8
 80155a4:	9805      	ldr	r0, [sp, #20]
 80155a6:	461a      	mov	r2, r3
 80155a8:	f001 fb36 	bl	8016c18 <__pow5mult>
 80155ac:	4680      	mov	r8, r0
 80155ae:	2800      	cmp	r0, #0
 80155b0:	d0ba      	beq.n	8015528 <_strtod_l+0x690>
 80155b2:	4601      	mov	r1, r0
 80155b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80155b6:	9805      	ldr	r0, [sp, #20]
 80155b8:	f001 fa8c 	bl	8016ad4 <__multiply>
 80155bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80155be:	2800      	cmp	r0, #0
 80155c0:	f43f ae8d 	beq.w	80152de <_strtod_l+0x446>
 80155c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80155c6:	9805      	ldr	r0, [sp, #20]
 80155c8:	f001 f970 	bl	80168ac <_Bfree>
 80155cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80155ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80155d0:	2d00      	cmp	r5, #0
 80155d2:	dc1d      	bgt.n	8015610 <_strtod_l+0x778>
 80155d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	dd23      	ble.n	8015622 <_strtod_l+0x78a>
 80155da:	4649      	mov	r1, r9
 80155dc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80155de:	9805      	ldr	r0, [sp, #20]
 80155e0:	f001 fb1a 	bl	8016c18 <__pow5mult>
 80155e4:	4681      	mov	r9, r0
 80155e6:	b9e0      	cbnz	r0, 8015622 <_strtod_l+0x78a>
 80155e8:	f04f 0900 	mov.w	r9, #0
 80155ec:	e677      	b.n	80152de <_strtod_l+0x446>
 80155ee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80155f2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80155f6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80155fa:	35e2      	adds	r5, #226	@ 0xe2
 80155fc:	fa01 f305 	lsl.w	r3, r1, r5
 8015600:	9310      	str	r3, [sp, #64]	@ 0x40
 8015602:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015604:	e7ba      	b.n	801557c <_strtod_l+0x6e4>
 8015606:	2300      	movs	r3, #0
 8015608:	9310      	str	r3, [sp, #64]	@ 0x40
 801560a:	2301      	movs	r3, #1
 801560c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801560e:	e7b5      	b.n	801557c <_strtod_l+0x6e4>
 8015610:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015612:	9805      	ldr	r0, [sp, #20]
 8015614:	462a      	mov	r2, r5
 8015616:	f001 fb59 	bl	8016ccc <__lshift>
 801561a:	901a      	str	r0, [sp, #104]	@ 0x68
 801561c:	2800      	cmp	r0, #0
 801561e:	d1d9      	bne.n	80155d4 <_strtod_l+0x73c>
 8015620:	e65d      	b.n	80152de <_strtod_l+0x446>
 8015622:	2e00      	cmp	r6, #0
 8015624:	dd07      	ble.n	8015636 <_strtod_l+0x79e>
 8015626:	4649      	mov	r1, r9
 8015628:	9805      	ldr	r0, [sp, #20]
 801562a:	4632      	mov	r2, r6
 801562c:	f001 fb4e 	bl	8016ccc <__lshift>
 8015630:	4681      	mov	r9, r0
 8015632:	2800      	cmp	r0, #0
 8015634:	d0d8      	beq.n	80155e8 <_strtod_l+0x750>
 8015636:	2f00      	cmp	r7, #0
 8015638:	dd08      	ble.n	801564c <_strtod_l+0x7b4>
 801563a:	4641      	mov	r1, r8
 801563c:	9805      	ldr	r0, [sp, #20]
 801563e:	463a      	mov	r2, r7
 8015640:	f001 fb44 	bl	8016ccc <__lshift>
 8015644:	4680      	mov	r8, r0
 8015646:	2800      	cmp	r0, #0
 8015648:	f43f ae49 	beq.w	80152de <_strtod_l+0x446>
 801564c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801564e:	9805      	ldr	r0, [sp, #20]
 8015650:	464a      	mov	r2, r9
 8015652:	f001 fbc3 	bl	8016ddc <__mdiff>
 8015656:	4604      	mov	r4, r0
 8015658:	2800      	cmp	r0, #0
 801565a:	f43f ae40 	beq.w	80152de <_strtod_l+0x446>
 801565e:	68c3      	ldr	r3, [r0, #12]
 8015660:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015662:	2300      	movs	r3, #0
 8015664:	60c3      	str	r3, [r0, #12]
 8015666:	4641      	mov	r1, r8
 8015668:	f001 fb9c 	bl	8016da4 <__mcmp>
 801566c:	2800      	cmp	r0, #0
 801566e:	da45      	bge.n	80156fc <_strtod_l+0x864>
 8015670:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015672:	ea53 030a 	orrs.w	r3, r3, sl
 8015676:	d16b      	bne.n	8015750 <_strtod_l+0x8b8>
 8015678:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801567c:	2b00      	cmp	r3, #0
 801567e:	d167      	bne.n	8015750 <_strtod_l+0x8b8>
 8015680:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015684:	0d1b      	lsrs	r3, r3, #20
 8015686:	051b      	lsls	r3, r3, #20
 8015688:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801568c:	d960      	bls.n	8015750 <_strtod_l+0x8b8>
 801568e:	6963      	ldr	r3, [r4, #20]
 8015690:	b913      	cbnz	r3, 8015698 <_strtod_l+0x800>
 8015692:	6923      	ldr	r3, [r4, #16]
 8015694:	2b01      	cmp	r3, #1
 8015696:	dd5b      	ble.n	8015750 <_strtod_l+0x8b8>
 8015698:	4621      	mov	r1, r4
 801569a:	2201      	movs	r2, #1
 801569c:	9805      	ldr	r0, [sp, #20]
 801569e:	f001 fb15 	bl	8016ccc <__lshift>
 80156a2:	4641      	mov	r1, r8
 80156a4:	4604      	mov	r4, r0
 80156a6:	f001 fb7d 	bl	8016da4 <__mcmp>
 80156aa:	2800      	cmp	r0, #0
 80156ac:	dd50      	ble.n	8015750 <_strtod_l+0x8b8>
 80156ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80156b2:	9a08      	ldr	r2, [sp, #32]
 80156b4:	0d1b      	lsrs	r3, r3, #20
 80156b6:	051b      	lsls	r3, r3, #20
 80156b8:	2a00      	cmp	r2, #0
 80156ba:	d06a      	beq.n	8015792 <_strtod_l+0x8fa>
 80156bc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80156c0:	d867      	bhi.n	8015792 <_strtod_l+0x8fa>
 80156c2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80156c6:	f67f ae9d 	bls.w	8015404 <_strtod_l+0x56c>
 80156ca:	4b0a      	ldr	r3, [pc, #40]	@ (80156f4 <_strtod_l+0x85c>)
 80156cc:	4650      	mov	r0, sl
 80156ce:	4659      	mov	r1, fp
 80156d0:	2200      	movs	r2, #0
 80156d2:	f7f2 ffc1 	bl	8008658 <__aeabi_dmul>
 80156d6:	4b08      	ldr	r3, [pc, #32]	@ (80156f8 <_strtod_l+0x860>)
 80156d8:	400b      	ands	r3, r1
 80156da:	4682      	mov	sl, r0
 80156dc:	468b      	mov	fp, r1
 80156de:	2b00      	cmp	r3, #0
 80156e0:	f47f ae08 	bne.w	80152f4 <_strtod_l+0x45c>
 80156e4:	9a05      	ldr	r2, [sp, #20]
 80156e6:	2322      	movs	r3, #34	@ 0x22
 80156e8:	6013      	str	r3, [r2, #0]
 80156ea:	e603      	b.n	80152f4 <_strtod_l+0x45c>
 80156ec:	0801a060 	.word	0x0801a060
 80156f0:	fffffc02 	.word	0xfffffc02
 80156f4:	39500000 	.word	0x39500000
 80156f8:	7ff00000 	.word	0x7ff00000
 80156fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8015700:	d165      	bne.n	80157ce <_strtod_l+0x936>
 8015702:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015704:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015708:	b35a      	cbz	r2, 8015762 <_strtod_l+0x8ca>
 801570a:	4a9f      	ldr	r2, [pc, #636]	@ (8015988 <_strtod_l+0xaf0>)
 801570c:	4293      	cmp	r3, r2
 801570e:	d12b      	bne.n	8015768 <_strtod_l+0x8d0>
 8015710:	9b08      	ldr	r3, [sp, #32]
 8015712:	4651      	mov	r1, sl
 8015714:	b303      	cbz	r3, 8015758 <_strtod_l+0x8c0>
 8015716:	4b9d      	ldr	r3, [pc, #628]	@ (801598c <_strtod_l+0xaf4>)
 8015718:	465a      	mov	r2, fp
 801571a:	4013      	ands	r3, r2
 801571c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8015720:	f04f 32ff 	mov.w	r2, #4294967295
 8015724:	d81b      	bhi.n	801575e <_strtod_l+0x8c6>
 8015726:	0d1b      	lsrs	r3, r3, #20
 8015728:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801572c:	fa02 f303 	lsl.w	r3, r2, r3
 8015730:	4299      	cmp	r1, r3
 8015732:	d119      	bne.n	8015768 <_strtod_l+0x8d0>
 8015734:	4b96      	ldr	r3, [pc, #600]	@ (8015990 <_strtod_l+0xaf8>)
 8015736:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015738:	429a      	cmp	r2, r3
 801573a:	d102      	bne.n	8015742 <_strtod_l+0x8aa>
 801573c:	3101      	adds	r1, #1
 801573e:	f43f adce 	beq.w	80152de <_strtod_l+0x446>
 8015742:	4b92      	ldr	r3, [pc, #584]	@ (801598c <_strtod_l+0xaf4>)
 8015744:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015746:	401a      	ands	r2, r3
 8015748:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801574c:	f04f 0a00 	mov.w	sl, #0
 8015750:	9b08      	ldr	r3, [sp, #32]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d1b9      	bne.n	80156ca <_strtod_l+0x832>
 8015756:	e5cd      	b.n	80152f4 <_strtod_l+0x45c>
 8015758:	f04f 33ff 	mov.w	r3, #4294967295
 801575c:	e7e8      	b.n	8015730 <_strtod_l+0x898>
 801575e:	4613      	mov	r3, r2
 8015760:	e7e6      	b.n	8015730 <_strtod_l+0x898>
 8015762:	ea53 030a 	orrs.w	r3, r3, sl
 8015766:	d0a2      	beq.n	80156ae <_strtod_l+0x816>
 8015768:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801576a:	b1db      	cbz	r3, 80157a4 <_strtod_l+0x90c>
 801576c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801576e:	4213      	tst	r3, r2
 8015770:	d0ee      	beq.n	8015750 <_strtod_l+0x8b8>
 8015772:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015774:	9a08      	ldr	r2, [sp, #32]
 8015776:	4650      	mov	r0, sl
 8015778:	4659      	mov	r1, fp
 801577a:	b1bb      	cbz	r3, 80157ac <_strtod_l+0x914>
 801577c:	f7ff fb6e 	bl	8014e5c <sulp>
 8015780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015784:	ec53 2b10 	vmov	r2, r3, d0
 8015788:	f7f2 fdb0 	bl	80082ec <__adddf3>
 801578c:	4682      	mov	sl, r0
 801578e:	468b      	mov	fp, r1
 8015790:	e7de      	b.n	8015750 <_strtod_l+0x8b8>
 8015792:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015796:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801579a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801579e:	f04f 3aff 	mov.w	sl, #4294967295
 80157a2:	e7d5      	b.n	8015750 <_strtod_l+0x8b8>
 80157a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80157a6:	ea13 0f0a 	tst.w	r3, sl
 80157aa:	e7e1      	b.n	8015770 <_strtod_l+0x8d8>
 80157ac:	f7ff fb56 	bl	8014e5c <sulp>
 80157b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80157b4:	ec53 2b10 	vmov	r2, r3, d0
 80157b8:	f7f2 fd96 	bl	80082e8 <__aeabi_dsub>
 80157bc:	2200      	movs	r2, #0
 80157be:	2300      	movs	r3, #0
 80157c0:	4682      	mov	sl, r0
 80157c2:	468b      	mov	fp, r1
 80157c4:	f7f3 f9b0 	bl	8008b28 <__aeabi_dcmpeq>
 80157c8:	2800      	cmp	r0, #0
 80157ca:	d0c1      	beq.n	8015750 <_strtod_l+0x8b8>
 80157cc:	e61a      	b.n	8015404 <_strtod_l+0x56c>
 80157ce:	4641      	mov	r1, r8
 80157d0:	4620      	mov	r0, r4
 80157d2:	f001 fc5f 	bl	8017094 <__ratio>
 80157d6:	ec57 6b10 	vmov	r6, r7, d0
 80157da:	2200      	movs	r2, #0
 80157dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80157e0:	4630      	mov	r0, r6
 80157e2:	4639      	mov	r1, r7
 80157e4:	f7f3 f9b4 	bl	8008b50 <__aeabi_dcmple>
 80157e8:	2800      	cmp	r0, #0
 80157ea:	d06f      	beq.n	80158cc <_strtod_l+0xa34>
 80157ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d17a      	bne.n	80158e8 <_strtod_l+0xa50>
 80157f2:	f1ba 0f00 	cmp.w	sl, #0
 80157f6:	d158      	bne.n	80158aa <_strtod_l+0xa12>
 80157f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80157fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d15a      	bne.n	80158b8 <_strtod_l+0xa20>
 8015802:	4b64      	ldr	r3, [pc, #400]	@ (8015994 <_strtod_l+0xafc>)
 8015804:	2200      	movs	r2, #0
 8015806:	4630      	mov	r0, r6
 8015808:	4639      	mov	r1, r7
 801580a:	f7f3 f997 	bl	8008b3c <__aeabi_dcmplt>
 801580e:	2800      	cmp	r0, #0
 8015810:	d159      	bne.n	80158c6 <_strtod_l+0xa2e>
 8015812:	4630      	mov	r0, r6
 8015814:	4639      	mov	r1, r7
 8015816:	4b60      	ldr	r3, [pc, #384]	@ (8015998 <_strtod_l+0xb00>)
 8015818:	2200      	movs	r2, #0
 801581a:	f7f2 ff1d 	bl	8008658 <__aeabi_dmul>
 801581e:	4606      	mov	r6, r0
 8015820:	460f      	mov	r7, r1
 8015822:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8015826:	9606      	str	r6, [sp, #24]
 8015828:	9307      	str	r3, [sp, #28]
 801582a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801582e:	4d57      	ldr	r5, [pc, #348]	@ (801598c <_strtod_l+0xaf4>)
 8015830:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015836:	401d      	ands	r5, r3
 8015838:	4b58      	ldr	r3, [pc, #352]	@ (801599c <_strtod_l+0xb04>)
 801583a:	429d      	cmp	r5, r3
 801583c:	f040 80b2 	bne.w	80159a4 <_strtod_l+0xb0c>
 8015840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015842:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8015846:	ec4b ab10 	vmov	d0, sl, fp
 801584a:	f001 fb5b 	bl	8016f04 <__ulp>
 801584e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015852:	ec51 0b10 	vmov	r0, r1, d0
 8015856:	f7f2 feff 	bl	8008658 <__aeabi_dmul>
 801585a:	4652      	mov	r2, sl
 801585c:	465b      	mov	r3, fp
 801585e:	f7f2 fd45 	bl	80082ec <__adddf3>
 8015862:	460b      	mov	r3, r1
 8015864:	4949      	ldr	r1, [pc, #292]	@ (801598c <_strtod_l+0xaf4>)
 8015866:	4a4e      	ldr	r2, [pc, #312]	@ (80159a0 <_strtod_l+0xb08>)
 8015868:	4019      	ands	r1, r3
 801586a:	4291      	cmp	r1, r2
 801586c:	4682      	mov	sl, r0
 801586e:	d942      	bls.n	80158f6 <_strtod_l+0xa5e>
 8015870:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015872:	4b47      	ldr	r3, [pc, #284]	@ (8015990 <_strtod_l+0xaf8>)
 8015874:	429a      	cmp	r2, r3
 8015876:	d103      	bne.n	8015880 <_strtod_l+0x9e8>
 8015878:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801587a:	3301      	adds	r3, #1
 801587c:	f43f ad2f 	beq.w	80152de <_strtod_l+0x446>
 8015880:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8015990 <_strtod_l+0xaf8>
 8015884:	f04f 3aff 	mov.w	sl, #4294967295
 8015888:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801588a:	9805      	ldr	r0, [sp, #20]
 801588c:	f001 f80e 	bl	80168ac <_Bfree>
 8015890:	9805      	ldr	r0, [sp, #20]
 8015892:	4649      	mov	r1, r9
 8015894:	f001 f80a 	bl	80168ac <_Bfree>
 8015898:	9805      	ldr	r0, [sp, #20]
 801589a:	4641      	mov	r1, r8
 801589c:	f001 f806 	bl	80168ac <_Bfree>
 80158a0:	9805      	ldr	r0, [sp, #20]
 80158a2:	4621      	mov	r1, r4
 80158a4:	f001 f802 	bl	80168ac <_Bfree>
 80158a8:	e619      	b.n	80154de <_strtod_l+0x646>
 80158aa:	f1ba 0f01 	cmp.w	sl, #1
 80158ae:	d103      	bne.n	80158b8 <_strtod_l+0xa20>
 80158b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	f43f ada6 	beq.w	8015404 <_strtod_l+0x56c>
 80158b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8015968 <_strtod_l+0xad0>
 80158bc:	4f35      	ldr	r7, [pc, #212]	@ (8015994 <_strtod_l+0xafc>)
 80158be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80158c2:	2600      	movs	r6, #0
 80158c4:	e7b1      	b.n	801582a <_strtod_l+0x992>
 80158c6:	4f34      	ldr	r7, [pc, #208]	@ (8015998 <_strtod_l+0xb00>)
 80158c8:	2600      	movs	r6, #0
 80158ca:	e7aa      	b.n	8015822 <_strtod_l+0x98a>
 80158cc:	4b32      	ldr	r3, [pc, #200]	@ (8015998 <_strtod_l+0xb00>)
 80158ce:	4630      	mov	r0, r6
 80158d0:	4639      	mov	r1, r7
 80158d2:	2200      	movs	r2, #0
 80158d4:	f7f2 fec0 	bl	8008658 <__aeabi_dmul>
 80158d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80158da:	4606      	mov	r6, r0
 80158dc:	460f      	mov	r7, r1
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d09f      	beq.n	8015822 <_strtod_l+0x98a>
 80158e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80158e6:	e7a0      	b.n	801582a <_strtod_l+0x992>
 80158e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8015970 <_strtod_l+0xad8>
 80158ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80158f0:	ec57 6b17 	vmov	r6, r7, d7
 80158f4:	e799      	b.n	801582a <_strtod_l+0x992>
 80158f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80158fa:	9b08      	ldr	r3, [sp, #32]
 80158fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8015900:	2b00      	cmp	r3, #0
 8015902:	d1c1      	bne.n	8015888 <_strtod_l+0x9f0>
 8015904:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015908:	0d1b      	lsrs	r3, r3, #20
 801590a:	051b      	lsls	r3, r3, #20
 801590c:	429d      	cmp	r5, r3
 801590e:	d1bb      	bne.n	8015888 <_strtod_l+0x9f0>
 8015910:	4630      	mov	r0, r6
 8015912:	4639      	mov	r1, r7
 8015914:	f7f3 f9b0 	bl	8008c78 <__aeabi_d2lz>
 8015918:	f7f2 fe70 	bl	80085fc <__aeabi_l2d>
 801591c:	4602      	mov	r2, r0
 801591e:	460b      	mov	r3, r1
 8015920:	4630      	mov	r0, r6
 8015922:	4639      	mov	r1, r7
 8015924:	f7f2 fce0 	bl	80082e8 <__aeabi_dsub>
 8015928:	460b      	mov	r3, r1
 801592a:	4602      	mov	r2, r0
 801592c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8015930:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8015934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015936:	ea46 060a 	orr.w	r6, r6, sl
 801593a:	431e      	orrs	r6, r3
 801593c:	d06f      	beq.n	8015a1e <_strtod_l+0xb86>
 801593e:	a30e      	add	r3, pc, #56	@ (adr r3, 8015978 <_strtod_l+0xae0>)
 8015940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015944:	f7f3 f8fa 	bl	8008b3c <__aeabi_dcmplt>
 8015948:	2800      	cmp	r0, #0
 801594a:	f47f acd3 	bne.w	80152f4 <_strtod_l+0x45c>
 801594e:	a30c      	add	r3, pc, #48	@ (adr r3, 8015980 <_strtod_l+0xae8>)
 8015950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015954:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015958:	f7f3 f90e 	bl	8008b78 <__aeabi_dcmpgt>
 801595c:	2800      	cmp	r0, #0
 801595e:	d093      	beq.n	8015888 <_strtod_l+0x9f0>
 8015960:	e4c8      	b.n	80152f4 <_strtod_l+0x45c>
 8015962:	bf00      	nop
 8015964:	f3af 8000 	nop.w
 8015968:	00000000 	.word	0x00000000
 801596c:	bff00000 	.word	0xbff00000
 8015970:	00000000 	.word	0x00000000
 8015974:	3ff00000 	.word	0x3ff00000
 8015978:	94a03595 	.word	0x94a03595
 801597c:	3fdfffff 	.word	0x3fdfffff
 8015980:	35afe535 	.word	0x35afe535
 8015984:	3fe00000 	.word	0x3fe00000
 8015988:	000fffff 	.word	0x000fffff
 801598c:	7ff00000 	.word	0x7ff00000
 8015990:	7fefffff 	.word	0x7fefffff
 8015994:	3ff00000 	.word	0x3ff00000
 8015998:	3fe00000 	.word	0x3fe00000
 801599c:	7fe00000 	.word	0x7fe00000
 80159a0:	7c9fffff 	.word	0x7c9fffff
 80159a4:	9b08      	ldr	r3, [sp, #32]
 80159a6:	b323      	cbz	r3, 80159f2 <_strtod_l+0xb5a>
 80159a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80159ac:	d821      	bhi.n	80159f2 <_strtod_l+0xb5a>
 80159ae:	a328      	add	r3, pc, #160	@ (adr r3, 8015a50 <_strtod_l+0xbb8>)
 80159b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159b4:	4630      	mov	r0, r6
 80159b6:	4639      	mov	r1, r7
 80159b8:	f7f3 f8ca 	bl	8008b50 <__aeabi_dcmple>
 80159bc:	b1a0      	cbz	r0, 80159e8 <_strtod_l+0xb50>
 80159be:	4639      	mov	r1, r7
 80159c0:	4630      	mov	r0, r6
 80159c2:	f7f3 f921 	bl	8008c08 <__aeabi_d2uiz>
 80159c6:	2801      	cmp	r0, #1
 80159c8:	bf38      	it	cc
 80159ca:	2001      	movcc	r0, #1
 80159cc:	f7f2 fdca 	bl	8008564 <__aeabi_ui2d>
 80159d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80159d2:	4606      	mov	r6, r0
 80159d4:	460f      	mov	r7, r1
 80159d6:	b9fb      	cbnz	r3, 8015a18 <_strtod_l+0xb80>
 80159d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80159dc:	9014      	str	r0, [sp, #80]	@ 0x50
 80159de:	9315      	str	r3, [sp, #84]	@ 0x54
 80159e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80159e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80159e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80159ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80159ee:	1b5b      	subs	r3, r3, r5
 80159f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80159f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80159f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80159fa:	f001 fa83 	bl	8016f04 <__ulp>
 80159fe:	4650      	mov	r0, sl
 8015a00:	ec53 2b10 	vmov	r2, r3, d0
 8015a04:	4659      	mov	r1, fp
 8015a06:	f7f2 fe27 	bl	8008658 <__aeabi_dmul>
 8015a0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8015a0e:	f7f2 fc6d 	bl	80082ec <__adddf3>
 8015a12:	4682      	mov	sl, r0
 8015a14:	468b      	mov	fp, r1
 8015a16:	e770      	b.n	80158fa <_strtod_l+0xa62>
 8015a18:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8015a1c:	e7e0      	b.n	80159e0 <_strtod_l+0xb48>
 8015a1e:	a30e      	add	r3, pc, #56	@ (adr r3, 8015a58 <_strtod_l+0xbc0>)
 8015a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a24:	f7f3 f88a 	bl	8008b3c <__aeabi_dcmplt>
 8015a28:	e798      	b.n	801595c <_strtod_l+0xac4>
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	930e      	str	r3, [sp, #56]	@ 0x38
 8015a2e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8015a30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015a32:	6013      	str	r3, [r2, #0]
 8015a34:	f7ff ba6d 	b.w	8014f12 <_strtod_l+0x7a>
 8015a38:	2a65      	cmp	r2, #101	@ 0x65
 8015a3a:	f43f ab68 	beq.w	801510e <_strtod_l+0x276>
 8015a3e:	2a45      	cmp	r2, #69	@ 0x45
 8015a40:	f43f ab65 	beq.w	801510e <_strtod_l+0x276>
 8015a44:	2301      	movs	r3, #1
 8015a46:	f7ff bba0 	b.w	801518a <_strtod_l+0x2f2>
 8015a4a:	bf00      	nop
 8015a4c:	f3af 8000 	nop.w
 8015a50:	ffc00000 	.word	0xffc00000
 8015a54:	41dfffff 	.word	0x41dfffff
 8015a58:	94a03595 	.word	0x94a03595
 8015a5c:	3fcfffff 	.word	0x3fcfffff

08015a60 <strtod>:
 8015a60:	460a      	mov	r2, r1
 8015a62:	4601      	mov	r1, r0
 8015a64:	4802      	ldr	r0, [pc, #8]	@ (8015a70 <strtod+0x10>)
 8015a66:	4b03      	ldr	r3, [pc, #12]	@ (8015a74 <strtod+0x14>)
 8015a68:	6800      	ldr	r0, [r0, #0]
 8015a6a:	f7ff ba15 	b.w	8014e98 <_strtod_l>
 8015a6e:	bf00      	nop
 8015a70:	200001a4 	.word	0x200001a4
 8015a74:	20000038 	.word	0x20000038

08015a78 <std>:
 8015a78:	2300      	movs	r3, #0
 8015a7a:	b510      	push	{r4, lr}
 8015a7c:	4604      	mov	r4, r0
 8015a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8015a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015a86:	6083      	str	r3, [r0, #8]
 8015a88:	8181      	strh	r1, [r0, #12]
 8015a8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8015a8c:	81c2      	strh	r2, [r0, #14]
 8015a8e:	6183      	str	r3, [r0, #24]
 8015a90:	4619      	mov	r1, r3
 8015a92:	2208      	movs	r2, #8
 8015a94:	305c      	adds	r0, #92	@ 0x5c
 8015a96:	f000 fa7f 	bl	8015f98 <memset>
 8015a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8015ad0 <std+0x58>)
 8015a9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8015a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8015ad4 <std+0x5c>)
 8015aa0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8015ad8 <std+0x60>)
 8015aa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8015adc <std+0x64>)
 8015aa8:	6323      	str	r3, [r4, #48]	@ 0x30
 8015aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8015ae0 <std+0x68>)
 8015aac:	6224      	str	r4, [r4, #32]
 8015aae:	429c      	cmp	r4, r3
 8015ab0:	d006      	beq.n	8015ac0 <std+0x48>
 8015ab2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015ab6:	4294      	cmp	r4, r2
 8015ab8:	d002      	beq.n	8015ac0 <std+0x48>
 8015aba:	33d0      	adds	r3, #208	@ 0xd0
 8015abc:	429c      	cmp	r4, r3
 8015abe:	d105      	bne.n	8015acc <std+0x54>
 8015ac0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ac8:	f000 bb00 	b.w	80160cc <__retarget_lock_init_recursive>
 8015acc:	bd10      	pop	{r4, pc}
 8015ace:	bf00      	nop
 8015ad0:	08015de5 	.word	0x08015de5
 8015ad4:	08015e0b 	.word	0x08015e0b
 8015ad8:	08015e43 	.word	0x08015e43
 8015adc:	08015e67 	.word	0x08015e67
 8015ae0:	2001335c 	.word	0x2001335c

08015ae4 <stdio_exit_handler>:
 8015ae4:	4a02      	ldr	r2, [pc, #8]	@ (8015af0 <stdio_exit_handler+0xc>)
 8015ae6:	4903      	ldr	r1, [pc, #12]	@ (8015af4 <stdio_exit_handler+0x10>)
 8015ae8:	4803      	ldr	r0, [pc, #12]	@ (8015af8 <stdio_exit_handler+0x14>)
 8015aea:	f000 b869 	b.w	8015bc0 <_fwalk_sglue>
 8015aee:	bf00      	nop
 8015af0:	2000002c 	.word	0x2000002c
 8015af4:	08018139 	.word	0x08018139
 8015af8:	200001a8 	.word	0x200001a8

08015afc <cleanup_stdio>:
 8015afc:	6841      	ldr	r1, [r0, #4]
 8015afe:	4b0c      	ldr	r3, [pc, #48]	@ (8015b30 <cleanup_stdio+0x34>)
 8015b00:	4299      	cmp	r1, r3
 8015b02:	b510      	push	{r4, lr}
 8015b04:	4604      	mov	r4, r0
 8015b06:	d001      	beq.n	8015b0c <cleanup_stdio+0x10>
 8015b08:	f002 fb16 	bl	8018138 <_fflush_r>
 8015b0c:	68a1      	ldr	r1, [r4, #8]
 8015b0e:	4b09      	ldr	r3, [pc, #36]	@ (8015b34 <cleanup_stdio+0x38>)
 8015b10:	4299      	cmp	r1, r3
 8015b12:	d002      	beq.n	8015b1a <cleanup_stdio+0x1e>
 8015b14:	4620      	mov	r0, r4
 8015b16:	f002 fb0f 	bl	8018138 <_fflush_r>
 8015b1a:	68e1      	ldr	r1, [r4, #12]
 8015b1c:	4b06      	ldr	r3, [pc, #24]	@ (8015b38 <cleanup_stdio+0x3c>)
 8015b1e:	4299      	cmp	r1, r3
 8015b20:	d004      	beq.n	8015b2c <cleanup_stdio+0x30>
 8015b22:	4620      	mov	r0, r4
 8015b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b28:	f002 bb06 	b.w	8018138 <_fflush_r>
 8015b2c:	bd10      	pop	{r4, pc}
 8015b2e:	bf00      	nop
 8015b30:	2001335c 	.word	0x2001335c
 8015b34:	200133c4 	.word	0x200133c4
 8015b38:	2001342c 	.word	0x2001342c

08015b3c <global_stdio_init.part.0>:
 8015b3c:	b510      	push	{r4, lr}
 8015b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8015b6c <global_stdio_init.part.0+0x30>)
 8015b40:	4c0b      	ldr	r4, [pc, #44]	@ (8015b70 <global_stdio_init.part.0+0x34>)
 8015b42:	4a0c      	ldr	r2, [pc, #48]	@ (8015b74 <global_stdio_init.part.0+0x38>)
 8015b44:	601a      	str	r2, [r3, #0]
 8015b46:	4620      	mov	r0, r4
 8015b48:	2200      	movs	r2, #0
 8015b4a:	2104      	movs	r1, #4
 8015b4c:	f7ff ff94 	bl	8015a78 <std>
 8015b50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015b54:	2201      	movs	r2, #1
 8015b56:	2109      	movs	r1, #9
 8015b58:	f7ff ff8e 	bl	8015a78 <std>
 8015b5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015b60:	2202      	movs	r2, #2
 8015b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b66:	2112      	movs	r1, #18
 8015b68:	f7ff bf86 	b.w	8015a78 <std>
 8015b6c:	20013494 	.word	0x20013494
 8015b70:	2001335c 	.word	0x2001335c
 8015b74:	08015ae5 	.word	0x08015ae5

08015b78 <__sfp_lock_acquire>:
 8015b78:	4801      	ldr	r0, [pc, #4]	@ (8015b80 <__sfp_lock_acquire+0x8>)
 8015b7a:	f000 baa8 	b.w	80160ce <__retarget_lock_acquire_recursive>
 8015b7e:	bf00      	nop
 8015b80:	2001349d 	.word	0x2001349d

08015b84 <__sfp_lock_release>:
 8015b84:	4801      	ldr	r0, [pc, #4]	@ (8015b8c <__sfp_lock_release+0x8>)
 8015b86:	f000 baa3 	b.w	80160d0 <__retarget_lock_release_recursive>
 8015b8a:	bf00      	nop
 8015b8c:	2001349d 	.word	0x2001349d

08015b90 <__sinit>:
 8015b90:	b510      	push	{r4, lr}
 8015b92:	4604      	mov	r4, r0
 8015b94:	f7ff fff0 	bl	8015b78 <__sfp_lock_acquire>
 8015b98:	6a23      	ldr	r3, [r4, #32]
 8015b9a:	b11b      	cbz	r3, 8015ba4 <__sinit+0x14>
 8015b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ba0:	f7ff bff0 	b.w	8015b84 <__sfp_lock_release>
 8015ba4:	4b04      	ldr	r3, [pc, #16]	@ (8015bb8 <__sinit+0x28>)
 8015ba6:	6223      	str	r3, [r4, #32]
 8015ba8:	4b04      	ldr	r3, [pc, #16]	@ (8015bbc <__sinit+0x2c>)
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d1f5      	bne.n	8015b9c <__sinit+0xc>
 8015bb0:	f7ff ffc4 	bl	8015b3c <global_stdio_init.part.0>
 8015bb4:	e7f2      	b.n	8015b9c <__sinit+0xc>
 8015bb6:	bf00      	nop
 8015bb8:	08015afd 	.word	0x08015afd
 8015bbc:	20013494 	.word	0x20013494

08015bc0 <_fwalk_sglue>:
 8015bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015bc4:	4607      	mov	r7, r0
 8015bc6:	4688      	mov	r8, r1
 8015bc8:	4614      	mov	r4, r2
 8015bca:	2600      	movs	r6, #0
 8015bcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015bd0:	f1b9 0901 	subs.w	r9, r9, #1
 8015bd4:	d505      	bpl.n	8015be2 <_fwalk_sglue+0x22>
 8015bd6:	6824      	ldr	r4, [r4, #0]
 8015bd8:	2c00      	cmp	r4, #0
 8015bda:	d1f7      	bne.n	8015bcc <_fwalk_sglue+0xc>
 8015bdc:	4630      	mov	r0, r6
 8015bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015be2:	89ab      	ldrh	r3, [r5, #12]
 8015be4:	2b01      	cmp	r3, #1
 8015be6:	d907      	bls.n	8015bf8 <_fwalk_sglue+0x38>
 8015be8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015bec:	3301      	adds	r3, #1
 8015bee:	d003      	beq.n	8015bf8 <_fwalk_sglue+0x38>
 8015bf0:	4629      	mov	r1, r5
 8015bf2:	4638      	mov	r0, r7
 8015bf4:	47c0      	blx	r8
 8015bf6:	4306      	orrs	r6, r0
 8015bf8:	3568      	adds	r5, #104	@ 0x68
 8015bfa:	e7e9      	b.n	8015bd0 <_fwalk_sglue+0x10>

08015bfc <iprintf>:
 8015bfc:	b40f      	push	{r0, r1, r2, r3}
 8015bfe:	b507      	push	{r0, r1, r2, lr}
 8015c00:	4906      	ldr	r1, [pc, #24]	@ (8015c1c <iprintf+0x20>)
 8015c02:	ab04      	add	r3, sp, #16
 8015c04:	6808      	ldr	r0, [r1, #0]
 8015c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c0a:	6881      	ldr	r1, [r0, #8]
 8015c0c:	9301      	str	r3, [sp, #4]
 8015c0e:	f001 fe1d 	bl	801784c <_vfiprintf_r>
 8015c12:	b003      	add	sp, #12
 8015c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c18:	b004      	add	sp, #16
 8015c1a:	4770      	bx	lr
 8015c1c:	200001a4 	.word	0x200001a4

08015c20 <_puts_r>:
 8015c20:	6a03      	ldr	r3, [r0, #32]
 8015c22:	b570      	push	{r4, r5, r6, lr}
 8015c24:	6884      	ldr	r4, [r0, #8]
 8015c26:	4605      	mov	r5, r0
 8015c28:	460e      	mov	r6, r1
 8015c2a:	b90b      	cbnz	r3, 8015c30 <_puts_r+0x10>
 8015c2c:	f7ff ffb0 	bl	8015b90 <__sinit>
 8015c30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015c32:	07db      	lsls	r3, r3, #31
 8015c34:	d405      	bmi.n	8015c42 <_puts_r+0x22>
 8015c36:	89a3      	ldrh	r3, [r4, #12]
 8015c38:	0598      	lsls	r0, r3, #22
 8015c3a:	d402      	bmi.n	8015c42 <_puts_r+0x22>
 8015c3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015c3e:	f000 fa46 	bl	80160ce <__retarget_lock_acquire_recursive>
 8015c42:	89a3      	ldrh	r3, [r4, #12]
 8015c44:	0719      	lsls	r1, r3, #28
 8015c46:	d502      	bpl.n	8015c4e <_puts_r+0x2e>
 8015c48:	6923      	ldr	r3, [r4, #16]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d135      	bne.n	8015cba <_puts_r+0x9a>
 8015c4e:	4621      	mov	r1, r4
 8015c50:	4628      	mov	r0, r5
 8015c52:	f000 f94b 	bl	8015eec <__swsetup_r>
 8015c56:	b380      	cbz	r0, 8015cba <_puts_r+0x9a>
 8015c58:	f04f 35ff 	mov.w	r5, #4294967295
 8015c5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015c5e:	07da      	lsls	r2, r3, #31
 8015c60:	d405      	bmi.n	8015c6e <_puts_r+0x4e>
 8015c62:	89a3      	ldrh	r3, [r4, #12]
 8015c64:	059b      	lsls	r3, r3, #22
 8015c66:	d402      	bmi.n	8015c6e <_puts_r+0x4e>
 8015c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015c6a:	f000 fa31 	bl	80160d0 <__retarget_lock_release_recursive>
 8015c6e:	4628      	mov	r0, r5
 8015c70:	bd70      	pop	{r4, r5, r6, pc}
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	da04      	bge.n	8015c80 <_puts_r+0x60>
 8015c76:	69a2      	ldr	r2, [r4, #24]
 8015c78:	429a      	cmp	r2, r3
 8015c7a:	dc17      	bgt.n	8015cac <_puts_r+0x8c>
 8015c7c:	290a      	cmp	r1, #10
 8015c7e:	d015      	beq.n	8015cac <_puts_r+0x8c>
 8015c80:	6823      	ldr	r3, [r4, #0]
 8015c82:	1c5a      	adds	r2, r3, #1
 8015c84:	6022      	str	r2, [r4, #0]
 8015c86:	7019      	strb	r1, [r3, #0]
 8015c88:	68a3      	ldr	r3, [r4, #8]
 8015c8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015c8e:	3b01      	subs	r3, #1
 8015c90:	60a3      	str	r3, [r4, #8]
 8015c92:	2900      	cmp	r1, #0
 8015c94:	d1ed      	bne.n	8015c72 <_puts_r+0x52>
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	da11      	bge.n	8015cbe <_puts_r+0x9e>
 8015c9a:	4622      	mov	r2, r4
 8015c9c:	210a      	movs	r1, #10
 8015c9e:	4628      	mov	r0, r5
 8015ca0:	f000 f8e5 	bl	8015e6e <__swbuf_r>
 8015ca4:	3001      	adds	r0, #1
 8015ca6:	d0d7      	beq.n	8015c58 <_puts_r+0x38>
 8015ca8:	250a      	movs	r5, #10
 8015caa:	e7d7      	b.n	8015c5c <_puts_r+0x3c>
 8015cac:	4622      	mov	r2, r4
 8015cae:	4628      	mov	r0, r5
 8015cb0:	f000 f8dd 	bl	8015e6e <__swbuf_r>
 8015cb4:	3001      	adds	r0, #1
 8015cb6:	d1e7      	bne.n	8015c88 <_puts_r+0x68>
 8015cb8:	e7ce      	b.n	8015c58 <_puts_r+0x38>
 8015cba:	3e01      	subs	r6, #1
 8015cbc:	e7e4      	b.n	8015c88 <_puts_r+0x68>
 8015cbe:	6823      	ldr	r3, [r4, #0]
 8015cc0:	1c5a      	adds	r2, r3, #1
 8015cc2:	6022      	str	r2, [r4, #0]
 8015cc4:	220a      	movs	r2, #10
 8015cc6:	701a      	strb	r2, [r3, #0]
 8015cc8:	e7ee      	b.n	8015ca8 <_puts_r+0x88>
	...

08015ccc <puts>:
 8015ccc:	4b02      	ldr	r3, [pc, #8]	@ (8015cd8 <puts+0xc>)
 8015cce:	4601      	mov	r1, r0
 8015cd0:	6818      	ldr	r0, [r3, #0]
 8015cd2:	f7ff bfa5 	b.w	8015c20 <_puts_r>
 8015cd6:	bf00      	nop
 8015cd8:	200001a4 	.word	0x200001a4

08015cdc <sniprintf>:
 8015cdc:	b40c      	push	{r2, r3}
 8015cde:	b530      	push	{r4, r5, lr}
 8015ce0:	4b18      	ldr	r3, [pc, #96]	@ (8015d44 <sniprintf+0x68>)
 8015ce2:	1e0c      	subs	r4, r1, #0
 8015ce4:	681d      	ldr	r5, [r3, #0]
 8015ce6:	b09d      	sub	sp, #116	@ 0x74
 8015ce8:	da08      	bge.n	8015cfc <sniprintf+0x20>
 8015cea:	238b      	movs	r3, #139	@ 0x8b
 8015cec:	602b      	str	r3, [r5, #0]
 8015cee:	f04f 30ff 	mov.w	r0, #4294967295
 8015cf2:	b01d      	add	sp, #116	@ 0x74
 8015cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015cf8:	b002      	add	sp, #8
 8015cfa:	4770      	bx	lr
 8015cfc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015d00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015d04:	f04f 0300 	mov.w	r3, #0
 8015d08:	931b      	str	r3, [sp, #108]	@ 0x6c
 8015d0a:	bf14      	ite	ne
 8015d0c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015d10:	4623      	moveq	r3, r4
 8015d12:	9304      	str	r3, [sp, #16]
 8015d14:	9307      	str	r3, [sp, #28]
 8015d16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015d1a:	9002      	str	r0, [sp, #8]
 8015d1c:	9006      	str	r0, [sp, #24]
 8015d1e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015d22:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015d24:	ab21      	add	r3, sp, #132	@ 0x84
 8015d26:	a902      	add	r1, sp, #8
 8015d28:	4628      	mov	r0, r5
 8015d2a:	9301      	str	r3, [sp, #4]
 8015d2c:	f001 fa98 	bl	8017260 <_svfiprintf_r>
 8015d30:	1c43      	adds	r3, r0, #1
 8015d32:	bfbc      	itt	lt
 8015d34:	238b      	movlt	r3, #139	@ 0x8b
 8015d36:	602b      	strlt	r3, [r5, #0]
 8015d38:	2c00      	cmp	r4, #0
 8015d3a:	d0da      	beq.n	8015cf2 <sniprintf+0x16>
 8015d3c:	9b02      	ldr	r3, [sp, #8]
 8015d3e:	2200      	movs	r2, #0
 8015d40:	701a      	strb	r2, [r3, #0]
 8015d42:	e7d6      	b.n	8015cf2 <sniprintf+0x16>
 8015d44:	200001a4 	.word	0x200001a4

08015d48 <siprintf>:
 8015d48:	b40e      	push	{r1, r2, r3}
 8015d4a:	b510      	push	{r4, lr}
 8015d4c:	b09d      	sub	sp, #116	@ 0x74
 8015d4e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015d50:	9002      	str	r0, [sp, #8]
 8015d52:	9006      	str	r0, [sp, #24]
 8015d54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015d58:	480a      	ldr	r0, [pc, #40]	@ (8015d84 <siprintf+0x3c>)
 8015d5a:	9107      	str	r1, [sp, #28]
 8015d5c:	9104      	str	r1, [sp, #16]
 8015d5e:	490a      	ldr	r1, [pc, #40]	@ (8015d88 <siprintf+0x40>)
 8015d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d64:	9105      	str	r1, [sp, #20]
 8015d66:	2400      	movs	r4, #0
 8015d68:	a902      	add	r1, sp, #8
 8015d6a:	6800      	ldr	r0, [r0, #0]
 8015d6c:	9301      	str	r3, [sp, #4]
 8015d6e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8015d70:	f001 fa76 	bl	8017260 <_svfiprintf_r>
 8015d74:	9b02      	ldr	r3, [sp, #8]
 8015d76:	701c      	strb	r4, [r3, #0]
 8015d78:	b01d      	add	sp, #116	@ 0x74
 8015d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d7e:	b003      	add	sp, #12
 8015d80:	4770      	bx	lr
 8015d82:	bf00      	nop
 8015d84:	200001a4 	.word	0x200001a4
 8015d88:	ffff0208 	.word	0xffff0208

08015d8c <siscanf>:
 8015d8c:	b40e      	push	{r1, r2, r3}
 8015d8e:	b570      	push	{r4, r5, r6, lr}
 8015d90:	b09d      	sub	sp, #116	@ 0x74
 8015d92:	ac21      	add	r4, sp, #132	@ 0x84
 8015d94:	2500      	movs	r5, #0
 8015d96:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8015d9a:	f854 6b04 	ldr.w	r6, [r4], #4
 8015d9e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015da2:	951b      	str	r5, [sp, #108]	@ 0x6c
 8015da4:	9002      	str	r0, [sp, #8]
 8015da6:	9006      	str	r0, [sp, #24]
 8015da8:	f7f2 fa3c 	bl	8008224 <strlen>
 8015dac:	4b0b      	ldr	r3, [pc, #44]	@ (8015ddc <siscanf+0x50>)
 8015dae:	9003      	str	r0, [sp, #12]
 8015db0:	9007      	str	r0, [sp, #28]
 8015db2:	480b      	ldr	r0, [pc, #44]	@ (8015de0 <siscanf+0x54>)
 8015db4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015db6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015dba:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015dbe:	4632      	mov	r2, r6
 8015dc0:	4623      	mov	r3, r4
 8015dc2:	a902      	add	r1, sp, #8
 8015dc4:	6800      	ldr	r0, [r0, #0]
 8015dc6:	950f      	str	r5, [sp, #60]	@ 0x3c
 8015dc8:	9514      	str	r5, [sp, #80]	@ 0x50
 8015dca:	9401      	str	r4, [sp, #4]
 8015dcc:	f001 fb9e 	bl	801750c <__ssvfiscanf_r>
 8015dd0:	b01d      	add	sp, #116	@ 0x74
 8015dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015dd6:	b003      	add	sp, #12
 8015dd8:	4770      	bx	lr
 8015dda:	bf00      	nop
 8015ddc:	08015e07 	.word	0x08015e07
 8015de0:	200001a4 	.word	0x200001a4

08015de4 <__sread>:
 8015de4:	b510      	push	{r4, lr}
 8015de6:	460c      	mov	r4, r1
 8015de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015dec:	f000 f910 	bl	8016010 <_read_r>
 8015df0:	2800      	cmp	r0, #0
 8015df2:	bfab      	itete	ge
 8015df4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015df6:	89a3      	ldrhlt	r3, [r4, #12]
 8015df8:	181b      	addge	r3, r3, r0
 8015dfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015dfe:	bfac      	ite	ge
 8015e00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015e02:	81a3      	strhlt	r3, [r4, #12]
 8015e04:	bd10      	pop	{r4, pc}

08015e06 <__seofread>:
 8015e06:	2000      	movs	r0, #0
 8015e08:	4770      	bx	lr

08015e0a <__swrite>:
 8015e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e0e:	461f      	mov	r7, r3
 8015e10:	898b      	ldrh	r3, [r1, #12]
 8015e12:	05db      	lsls	r3, r3, #23
 8015e14:	4605      	mov	r5, r0
 8015e16:	460c      	mov	r4, r1
 8015e18:	4616      	mov	r6, r2
 8015e1a:	d505      	bpl.n	8015e28 <__swrite+0x1e>
 8015e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e20:	2302      	movs	r3, #2
 8015e22:	2200      	movs	r2, #0
 8015e24:	f000 f8e2 	bl	8015fec <_lseek_r>
 8015e28:	89a3      	ldrh	r3, [r4, #12]
 8015e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015e32:	81a3      	strh	r3, [r4, #12]
 8015e34:	4632      	mov	r2, r6
 8015e36:	463b      	mov	r3, r7
 8015e38:	4628      	mov	r0, r5
 8015e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e3e:	f000 b909 	b.w	8016054 <_write_r>

08015e42 <__sseek>:
 8015e42:	b510      	push	{r4, lr}
 8015e44:	460c      	mov	r4, r1
 8015e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e4a:	f000 f8cf 	bl	8015fec <_lseek_r>
 8015e4e:	1c43      	adds	r3, r0, #1
 8015e50:	89a3      	ldrh	r3, [r4, #12]
 8015e52:	bf15      	itete	ne
 8015e54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015e56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015e5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015e5e:	81a3      	strheq	r3, [r4, #12]
 8015e60:	bf18      	it	ne
 8015e62:	81a3      	strhne	r3, [r4, #12]
 8015e64:	bd10      	pop	{r4, pc}

08015e66 <__sclose>:
 8015e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e6a:	f000 b8af 	b.w	8015fcc <_close_r>

08015e6e <__swbuf_r>:
 8015e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e70:	460e      	mov	r6, r1
 8015e72:	4614      	mov	r4, r2
 8015e74:	4605      	mov	r5, r0
 8015e76:	b118      	cbz	r0, 8015e80 <__swbuf_r+0x12>
 8015e78:	6a03      	ldr	r3, [r0, #32]
 8015e7a:	b90b      	cbnz	r3, 8015e80 <__swbuf_r+0x12>
 8015e7c:	f7ff fe88 	bl	8015b90 <__sinit>
 8015e80:	69a3      	ldr	r3, [r4, #24]
 8015e82:	60a3      	str	r3, [r4, #8]
 8015e84:	89a3      	ldrh	r3, [r4, #12]
 8015e86:	071a      	lsls	r2, r3, #28
 8015e88:	d501      	bpl.n	8015e8e <__swbuf_r+0x20>
 8015e8a:	6923      	ldr	r3, [r4, #16]
 8015e8c:	b943      	cbnz	r3, 8015ea0 <__swbuf_r+0x32>
 8015e8e:	4621      	mov	r1, r4
 8015e90:	4628      	mov	r0, r5
 8015e92:	f000 f82b 	bl	8015eec <__swsetup_r>
 8015e96:	b118      	cbz	r0, 8015ea0 <__swbuf_r+0x32>
 8015e98:	f04f 37ff 	mov.w	r7, #4294967295
 8015e9c:	4638      	mov	r0, r7
 8015e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ea0:	6823      	ldr	r3, [r4, #0]
 8015ea2:	6922      	ldr	r2, [r4, #16]
 8015ea4:	1a98      	subs	r0, r3, r2
 8015ea6:	6963      	ldr	r3, [r4, #20]
 8015ea8:	b2f6      	uxtb	r6, r6
 8015eaa:	4283      	cmp	r3, r0
 8015eac:	4637      	mov	r7, r6
 8015eae:	dc05      	bgt.n	8015ebc <__swbuf_r+0x4e>
 8015eb0:	4621      	mov	r1, r4
 8015eb2:	4628      	mov	r0, r5
 8015eb4:	f002 f940 	bl	8018138 <_fflush_r>
 8015eb8:	2800      	cmp	r0, #0
 8015eba:	d1ed      	bne.n	8015e98 <__swbuf_r+0x2a>
 8015ebc:	68a3      	ldr	r3, [r4, #8]
 8015ebe:	3b01      	subs	r3, #1
 8015ec0:	60a3      	str	r3, [r4, #8]
 8015ec2:	6823      	ldr	r3, [r4, #0]
 8015ec4:	1c5a      	adds	r2, r3, #1
 8015ec6:	6022      	str	r2, [r4, #0]
 8015ec8:	701e      	strb	r6, [r3, #0]
 8015eca:	6962      	ldr	r2, [r4, #20]
 8015ecc:	1c43      	adds	r3, r0, #1
 8015ece:	429a      	cmp	r2, r3
 8015ed0:	d004      	beq.n	8015edc <__swbuf_r+0x6e>
 8015ed2:	89a3      	ldrh	r3, [r4, #12]
 8015ed4:	07db      	lsls	r3, r3, #31
 8015ed6:	d5e1      	bpl.n	8015e9c <__swbuf_r+0x2e>
 8015ed8:	2e0a      	cmp	r6, #10
 8015eda:	d1df      	bne.n	8015e9c <__swbuf_r+0x2e>
 8015edc:	4621      	mov	r1, r4
 8015ede:	4628      	mov	r0, r5
 8015ee0:	f002 f92a 	bl	8018138 <_fflush_r>
 8015ee4:	2800      	cmp	r0, #0
 8015ee6:	d0d9      	beq.n	8015e9c <__swbuf_r+0x2e>
 8015ee8:	e7d6      	b.n	8015e98 <__swbuf_r+0x2a>
	...

08015eec <__swsetup_r>:
 8015eec:	b538      	push	{r3, r4, r5, lr}
 8015eee:	4b29      	ldr	r3, [pc, #164]	@ (8015f94 <__swsetup_r+0xa8>)
 8015ef0:	4605      	mov	r5, r0
 8015ef2:	6818      	ldr	r0, [r3, #0]
 8015ef4:	460c      	mov	r4, r1
 8015ef6:	b118      	cbz	r0, 8015f00 <__swsetup_r+0x14>
 8015ef8:	6a03      	ldr	r3, [r0, #32]
 8015efa:	b90b      	cbnz	r3, 8015f00 <__swsetup_r+0x14>
 8015efc:	f7ff fe48 	bl	8015b90 <__sinit>
 8015f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f04:	0719      	lsls	r1, r3, #28
 8015f06:	d422      	bmi.n	8015f4e <__swsetup_r+0x62>
 8015f08:	06da      	lsls	r2, r3, #27
 8015f0a:	d407      	bmi.n	8015f1c <__swsetup_r+0x30>
 8015f0c:	2209      	movs	r2, #9
 8015f0e:	602a      	str	r2, [r5, #0]
 8015f10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015f14:	81a3      	strh	r3, [r4, #12]
 8015f16:	f04f 30ff 	mov.w	r0, #4294967295
 8015f1a:	e033      	b.n	8015f84 <__swsetup_r+0x98>
 8015f1c:	0758      	lsls	r0, r3, #29
 8015f1e:	d512      	bpl.n	8015f46 <__swsetup_r+0x5a>
 8015f20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015f22:	b141      	cbz	r1, 8015f36 <__swsetup_r+0x4a>
 8015f24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015f28:	4299      	cmp	r1, r3
 8015f2a:	d002      	beq.n	8015f32 <__swsetup_r+0x46>
 8015f2c:	4628      	mov	r0, r5
 8015f2e:	f000 f8e7 	bl	8016100 <_free_r>
 8015f32:	2300      	movs	r3, #0
 8015f34:	6363      	str	r3, [r4, #52]	@ 0x34
 8015f36:	89a3      	ldrh	r3, [r4, #12]
 8015f38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015f3c:	81a3      	strh	r3, [r4, #12]
 8015f3e:	2300      	movs	r3, #0
 8015f40:	6063      	str	r3, [r4, #4]
 8015f42:	6923      	ldr	r3, [r4, #16]
 8015f44:	6023      	str	r3, [r4, #0]
 8015f46:	89a3      	ldrh	r3, [r4, #12]
 8015f48:	f043 0308 	orr.w	r3, r3, #8
 8015f4c:	81a3      	strh	r3, [r4, #12]
 8015f4e:	6923      	ldr	r3, [r4, #16]
 8015f50:	b94b      	cbnz	r3, 8015f66 <__swsetup_r+0x7a>
 8015f52:	89a3      	ldrh	r3, [r4, #12]
 8015f54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015f5c:	d003      	beq.n	8015f66 <__swsetup_r+0x7a>
 8015f5e:	4621      	mov	r1, r4
 8015f60:	4628      	mov	r0, r5
 8015f62:	f002 f937 	bl	80181d4 <__smakebuf_r>
 8015f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f6a:	f013 0201 	ands.w	r2, r3, #1
 8015f6e:	d00a      	beq.n	8015f86 <__swsetup_r+0x9a>
 8015f70:	2200      	movs	r2, #0
 8015f72:	60a2      	str	r2, [r4, #8]
 8015f74:	6962      	ldr	r2, [r4, #20]
 8015f76:	4252      	negs	r2, r2
 8015f78:	61a2      	str	r2, [r4, #24]
 8015f7a:	6922      	ldr	r2, [r4, #16]
 8015f7c:	b942      	cbnz	r2, 8015f90 <__swsetup_r+0xa4>
 8015f7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015f82:	d1c5      	bne.n	8015f10 <__swsetup_r+0x24>
 8015f84:	bd38      	pop	{r3, r4, r5, pc}
 8015f86:	0799      	lsls	r1, r3, #30
 8015f88:	bf58      	it	pl
 8015f8a:	6962      	ldrpl	r2, [r4, #20]
 8015f8c:	60a2      	str	r2, [r4, #8]
 8015f8e:	e7f4      	b.n	8015f7a <__swsetup_r+0x8e>
 8015f90:	2000      	movs	r0, #0
 8015f92:	e7f7      	b.n	8015f84 <__swsetup_r+0x98>
 8015f94:	200001a4 	.word	0x200001a4

08015f98 <memset>:
 8015f98:	4402      	add	r2, r0
 8015f9a:	4603      	mov	r3, r0
 8015f9c:	4293      	cmp	r3, r2
 8015f9e:	d100      	bne.n	8015fa2 <memset+0xa>
 8015fa0:	4770      	bx	lr
 8015fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8015fa6:	e7f9      	b.n	8015f9c <memset+0x4>

08015fa8 <strncmp>:
 8015fa8:	b510      	push	{r4, lr}
 8015faa:	b16a      	cbz	r2, 8015fc8 <strncmp+0x20>
 8015fac:	3901      	subs	r1, #1
 8015fae:	1884      	adds	r4, r0, r2
 8015fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015fb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015fb8:	429a      	cmp	r2, r3
 8015fba:	d103      	bne.n	8015fc4 <strncmp+0x1c>
 8015fbc:	42a0      	cmp	r0, r4
 8015fbe:	d001      	beq.n	8015fc4 <strncmp+0x1c>
 8015fc0:	2a00      	cmp	r2, #0
 8015fc2:	d1f5      	bne.n	8015fb0 <strncmp+0x8>
 8015fc4:	1ad0      	subs	r0, r2, r3
 8015fc6:	bd10      	pop	{r4, pc}
 8015fc8:	4610      	mov	r0, r2
 8015fca:	e7fc      	b.n	8015fc6 <strncmp+0x1e>

08015fcc <_close_r>:
 8015fcc:	b538      	push	{r3, r4, r5, lr}
 8015fce:	4d06      	ldr	r5, [pc, #24]	@ (8015fe8 <_close_r+0x1c>)
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	4604      	mov	r4, r0
 8015fd4:	4608      	mov	r0, r1
 8015fd6:	602b      	str	r3, [r5, #0]
 8015fd8:	f7f8 f956 	bl	800e288 <_close>
 8015fdc:	1c43      	adds	r3, r0, #1
 8015fde:	d102      	bne.n	8015fe6 <_close_r+0x1a>
 8015fe0:	682b      	ldr	r3, [r5, #0]
 8015fe2:	b103      	cbz	r3, 8015fe6 <_close_r+0x1a>
 8015fe4:	6023      	str	r3, [r4, #0]
 8015fe6:	bd38      	pop	{r3, r4, r5, pc}
 8015fe8:	20013498 	.word	0x20013498

08015fec <_lseek_r>:
 8015fec:	b538      	push	{r3, r4, r5, lr}
 8015fee:	4d07      	ldr	r5, [pc, #28]	@ (801600c <_lseek_r+0x20>)
 8015ff0:	4604      	mov	r4, r0
 8015ff2:	4608      	mov	r0, r1
 8015ff4:	4611      	mov	r1, r2
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	602a      	str	r2, [r5, #0]
 8015ffa:	461a      	mov	r2, r3
 8015ffc:	f7f8 f96b 	bl	800e2d6 <_lseek>
 8016000:	1c43      	adds	r3, r0, #1
 8016002:	d102      	bne.n	801600a <_lseek_r+0x1e>
 8016004:	682b      	ldr	r3, [r5, #0]
 8016006:	b103      	cbz	r3, 801600a <_lseek_r+0x1e>
 8016008:	6023      	str	r3, [r4, #0]
 801600a:	bd38      	pop	{r3, r4, r5, pc}
 801600c:	20013498 	.word	0x20013498

08016010 <_read_r>:
 8016010:	b538      	push	{r3, r4, r5, lr}
 8016012:	4d07      	ldr	r5, [pc, #28]	@ (8016030 <_read_r+0x20>)
 8016014:	4604      	mov	r4, r0
 8016016:	4608      	mov	r0, r1
 8016018:	4611      	mov	r1, r2
 801601a:	2200      	movs	r2, #0
 801601c:	602a      	str	r2, [r5, #0]
 801601e:	461a      	mov	r2, r3
 8016020:	f7f8 f8f9 	bl	800e216 <_read>
 8016024:	1c43      	adds	r3, r0, #1
 8016026:	d102      	bne.n	801602e <_read_r+0x1e>
 8016028:	682b      	ldr	r3, [r5, #0]
 801602a:	b103      	cbz	r3, 801602e <_read_r+0x1e>
 801602c:	6023      	str	r3, [r4, #0]
 801602e:	bd38      	pop	{r3, r4, r5, pc}
 8016030:	20013498 	.word	0x20013498

08016034 <_sbrk_r>:
 8016034:	b538      	push	{r3, r4, r5, lr}
 8016036:	4d06      	ldr	r5, [pc, #24]	@ (8016050 <_sbrk_r+0x1c>)
 8016038:	2300      	movs	r3, #0
 801603a:	4604      	mov	r4, r0
 801603c:	4608      	mov	r0, r1
 801603e:	602b      	str	r3, [r5, #0]
 8016040:	f002 fb30 	bl	80186a4 <_sbrk>
 8016044:	1c43      	adds	r3, r0, #1
 8016046:	d102      	bne.n	801604e <_sbrk_r+0x1a>
 8016048:	682b      	ldr	r3, [r5, #0]
 801604a:	b103      	cbz	r3, 801604e <_sbrk_r+0x1a>
 801604c:	6023      	str	r3, [r4, #0]
 801604e:	bd38      	pop	{r3, r4, r5, pc}
 8016050:	20013498 	.word	0x20013498

08016054 <_write_r>:
 8016054:	b538      	push	{r3, r4, r5, lr}
 8016056:	4d07      	ldr	r5, [pc, #28]	@ (8016074 <_write_r+0x20>)
 8016058:	4604      	mov	r4, r0
 801605a:	4608      	mov	r0, r1
 801605c:	4611      	mov	r1, r2
 801605e:	2200      	movs	r2, #0
 8016060:	602a      	str	r2, [r5, #0]
 8016062:	461a      	mov	r2, r3
 8016064:	f7f8 f8f4 	bl	800e250 <_write>
 8016068:	1c43      	adds	r3, r0, #1
 801606a:	d102      	bne.n	8016072 <_write_r+0x1e>
 801606c:	682b      	ldr	r3, [r5, #0]
 801606e:	b103      	cbz	r3, 8016072 <_write_r+0x1e>
 8016070:	6023      	str	r3, [r4, #0]
 8016072:	bd38      	pop	{r3, r4, r5, pc}
 8016074:	20013498 	.word	0x20013498

08016078 <__errno>:
 8016078:	4b01      	ldr	r3, [pc, #4]	@ (8016080 <__errno+0x8>)
 801607a:	6818      	ldr	r0, [r3, #0]
 801607c:	4770      	bx	lr
 801607e:	bf00      	nop
 8016080:	200001a4 	.word	0x200001a4

08016084 <__libc_init_array>:
 8016084:	b570      	push	{r4, r5, r6, lr}
 8016086:	4d0d      	ldr	r5, [pc, #52]	@ (80160bc <__libc_init_array+0x38>)
 8016088:	4c0d      	ldr	r4, [pc, #52]	@ (80160c0 <__libc_init_array+0x3c>)
 801608a:	1b64      	subs	r4, r4, r5
 801608c:	10a4      	asrs	r4, r4, #2
 801608e:	2600      	movs	r6, #0
 8016090:	42a6      	cmp	r6, r4
 8016092:	d109      	bne.n	80160a8 <__libc_init_array+0x24>
 8016094:	4d0b      	ldr	r5, [pc, #44]	@ (80160c4 <__libc_init_array+0x40>)
 8016096:	4c0c      	ldr	r4, [pc, #48]	@ (80160c8 <__libc_init_array+0x44>)
 8016098:	f002 fb12 	bl	80186c0 <_init>
 801609c:	1b64      	subs	r4, r4, r5
 801609e:	10a4      	asrs	r4, r4, #2
 80160a0:	2600      	movs	r6, #0
 80160a2:	42a6      	cmp	r6, r4
 80160a4:	d105      	bne.n	80160b2 <__libc_init_array+0x2e>
 80160a6:	bd70      	pop	{r4, r5, r6, pc}
 80160a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80160ac:	4798      	blx	r3
 80160ae:	3601      	adds	r6, #1
 80160b0:	e7ee      	b.n	8016090 <__libc_init_array+0xc>
 80160b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80160b6:	4798      	blx	r3
 80160b8:	3601      	adds	r6, #1
 80160ba:	e7f2      	b.n	80160a2 <__libc_init_array+0x1e>
 80160bc:	0801a290 	.word	0x0801a290
 80160c0:	0801a290 	.word	0x0801a290
 80160c4:	0801a290 	.word	0x0801a290
 80160c8:	0801a294 	.word	0x0801a294

080160cc <__retarget_lock_init_recursive>:
 80160cc:	4770      	bx	lr

080160ce <__retarget_lock_acquire_recursive>:
 80160ce:	4770      	bx	lr

080160d0 <__retarget_lock_release_recursive>:
 80160d0:	4770      	bx	lr

080160d2 <memcpy>:
 80160d2:	440a      	add	r2, r1
 80160d4:	4291      	cmp	r1, r2
 80160d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80160da:	d100      	bne.n	80160de <memcpy+0xc>
 80160dc:	4770      	bx	lr
 80160de:	b510      	push	{r4, lr}
 80160e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80160e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80160e8:	4291      	cmp	r1, r2
 80160ea:	d1f9      	bne.n	80160e0 <memcpy+0xe>
 80160ec:	bd10      	pop	{r4, pc}
	...

080160f0 <nan>:
 80160f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80160f8 <nan+0x8>
 80160f4:	4770      	bx	lr
 80160f6:	bf00      	nop
 80160f8:	00000000 	.word	0x00000000
 80160fc:	7ff80000 	.word	0x7ff80000

08016100 <_free_r>:
 8016100:	b538      	push	{r3, r4, r5, lr}
 8016102:	4605      	mov	r5, r0
 8016104:	2900      	cmp	r1, #0
 8016106:	d041      	beq.n	801618c <_free_r+0x8c>
 8016108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801610c:	1f0c      	subs	r4, r1, #4
 801610e:	2b00      	cmp	r3, #0
 8016110:	bfb8      	it	lt
 8016112:	18e4      	addlt	r4, r4, r3
 8016114:	f7fe fe60 	bl	8014dd8 <__malloc_lock>
 8016118:	4a1d      	ldr	r2, [pc, #116]	@ (8016190 <_free_r+0x90>)
 801611a:	6813      	ldr	r3, [r2, #0]
 801611c:	b933      	cbnz	r3, 801612c <_free_r+0x2c>
 801611e:	6063      	str	r3, [r4, #4]
 8016120:	6014      	str	r4, [r2, #0]
 8016122:	4628      	mov	r0, r5
 8016124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016128:	f7fe be5c 	b.w	8014de4 <__malloc_unlock>
 801612c:	42a3      	cmp	r3, r4
 801612e:	d908      	bls.n	8016142 <_free_r+0x42>
 8016130:	6820      	ldr	r0, [r4, #0]
 8016132:	1821      	adds	r1, r4, r0
 8016134:	428b      	cmp	r3, r1
 8016136:	bf01      	itttt	eq
 8016138:	6819      	ldreq	r1, [r3, #0]
 801613a:	685b      	ldreq	r3, [r3, #4]
 801613c:	1809      	addeq	r1, r1, r0
 801613e:	6021      	streq	r1, [r4, #0]
 8016140:	e7ed      	b.n	801611e <_free_r+0x1e>
 8016142:	461a      	mov	r2, r3
 8016144:	685b      	ldr	r3, [r3, #4]
 8016146:	b10b      	cbz	r3, 801614c <_free_r+0x4c>
 8016148:	42a3      	cmp	r3, r4
 801614a:	d9fa      	bls.n	8016142 <_free_r+0x42>
 801614c:	6811      	ldr	r1, [r2, #0]
 801614e:	1850      	adds	r0, r2, r1
 8016150:	42a0      	cmp	r0, r4
 8016152:	d10b      	bne.n	801616c <_free_r+0x6c>
 8016154:	6820      	ldr	r0, [r4, #0]
 8016156:	4401      	add	r1, r0
 8016158:	1850      	adds	r0, r2, r1
 801615a:	4283      	cmp	r3, r0
 801615c:	6011      	str	r1, [r2, #0]
 801615e:	d1e0      	bne.n	8016122 <_free_r+0x22>
 8016160:	6818      	ldr	r0, [r3, #0]
 8016162:	685b      	ldr	r3, [r3, #4]
 8016164:	6053      	str	r3, [r2, #4]
 8016166:	4408      	add	r0, r1
 8016168:	6010      	str	r0, [r2, #0]
 801616a:	e7da      	b.n	8016122 <_free_r+0x22>
 801616c:	d902      	bls.n	8016174 <_free_r+0x74>
 801616e:	230c      	movs	r3, #12
 8016170:	602b      	str	r3, [r5, #0]
 8016172:	e7d6      	b.n	8016122 <_free_r+0x22>
 8016174:	6820      	ldr	r0, [r4, #0]
 8016176:	1821      	adds	r1, r4, r0
 8016178:	428b      	cmp	r3, r1
 801617a:	bf04      	itt	eq
 801617c:	6819      	ldreq	r1, [r3, #0]
 801617e:	685b      	ldreq	r3, [r3, #4]
 8016180:	6063      	str	r3, [r4, #4]
 8016182:	bf04      	itt	eq
 8016184:	1809      	addeq	r1, r1, r0
 8016186:	6021      	streq	r1, [r4, #0]
 8016188:	6054      	str	r4, [r2, #4]
 801618a:	e7ca      	b.n	8016122 <_free_r+0x22>
 801618c:	bd38      	pop	{r3, r4, r5, pc}
 801618e:	bf00      	nop
 8016190:	20013358 	.word	0x20013358

08016194 <rshift>:
 8016194:	6903      	ldr	r3, [r0, #16]
 8016196:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801619a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801619e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80161a2:	f100 0414 	add.w	r4, r0, #20
 80161a6:	dd45      	ble.n	8016234 <rshift+0xa0>
 80161a8:	f011 011f 	ands.w	r1, r1, #31
 80161ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80161b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80161b4:	d10c      	bne.n	80161d0 <rshift+0x3c>
 80161b6:	f100 0710 	add.w	r7, r0, #16
 80161ba:	4629      	mov	r1, r5
 80161bc:	42b1      	cmp	r1, r6
 80161be:	d334      	bcc.n	801622a <rshift+0x96>
 80161c0:	1a9b      	subs	r3, r3, r2
 80161c2:	009b      	lsls	r3, r3, #2
 80161c4:	1eea      	subs	r2, r5, #3
 80161c6:	4296      	cmp	r6, r2
 80161c8:	bf38      	it	cc
 80161ca:	2300      	movcc	r3, #0
 80161cc:	4423      	add	r3, r4
 80161ce:	e015      	b.n	80161fc <rshift+0x68>
 80161d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80161d4:	f1c1 0820 	rsb	r8, r1, #32
 80161d8:	40cf      	lsrs	r7, r1
 80161da:	f105 0e04 	add.w	lr, r5, #4
 80161de:	46a1      	mov	r9, r4
 80161e0:	4576      	cmp	r6, lr
 80161e2:	46f4      	mov	ip, lr
 80161e4:	d815      	bhi.n	8016212 <rshift+0x7e>
 80161e6:	1a9a      	subs	r2, r3, r2
 80161e8:	0092      	lsls	r2, r2, #2
 80161ea:	3a04      	subs	r2, #4
 80161ec:	3501      	adds	r5, #1
 80161ee:	42ae      	cmp	r6, r5
 80161f0:	bf38      	it	cc
 80161f2:	2200      	movcc	r2, #0
 80161f4:	18a3      	adds	r3, r4, r2
 80161f6:	50a7      	str	r7, [r4, r2]
 80161f8:	b107      	cbz	r7, 80161fc <rshift+0x68>
 80161fa:	3304      	adds	r3, #4
 80161fc:	1b1a      	subs	r2, r3, r4
 80161fe:	42a3      	cmp	r3, r4
 8016200:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016204:	bf08      	it	eq
 8016206:	2300      	moveq	r3, #0
 8016208:	6102      	str	r2, [r0, #16]
 801620a:	bf08      	it	eq
 801620c:	6143      	streq	r3, [r0, #20]
 801620e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016212:	f8dc c000 	ldr.w	ip, [ip]
 8016216:	fa0c fc08 	lsl.w	ip, ip, r8
 801621a:	ea4c 0707 	orr.w	r7, ip, r7
 801621e:	f849 7b04 	str.w	r7, [r9], #4
 8016222:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016226:	40cf      	lsrs	r7, r1
 8016228:	e7da      	b.n	80161e0 <rshift+0x4c>
 801622a:	f851 cb04 	ldr.w	ip, [r1], #4
 801622e:	f847 cf04 	str.w	ip, [r7, #4]!
 8016232:	e7c3      	b.n	80161bc <rshift+0x28>
 8016234:	4623      	mov	r3, r4
 8016236:	e7e1      	b.n	80161fc <rshift+0x68>

08016238 <__hexdig_fun>:
 8016238:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801623c:	2b09      	cmp	r3, #9
 801623e:	d802      	bhi.n	8016246 <__hexdig_fun+0xe>
 8016240:	3820      	subs	r0, #32
 8016242:	b2c0      	uxtb	r0, r0
 8016244:	4770      	bx	lr
 8016246:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801624a:	2b05      	cmp	r3, #5
 801624c:	d801      	bhi.n	8016252 <__hexdig_fun+0x1a>
 801624e:	3847      	subs	r0, #71	@ 0x47
 8016250:	e7f7      	b.n	8016242 <__hexdig_fun+0xa>
 8016252:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8016256:	2b05      	cmp	r3, #5
 8016258:	d801      	bhi.n	801625e <__hexdig_fun+0x26>
 801625a:	3827      	subs	r0, #39	@ 0x27
 801625c:	e7f1      	b.n	8016242 <__hexdig_fun+0xa>
 801625e:	2000      	movs	r0, #0
 8016260:	4770      	bx	lr
	...

08016264 <__gethex>:
 8016264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016268:	b085      	sub	sp, #20
 801626a:	468a      	mov	sl, r1
 801626c:	9302      	str	r3, [sp, #8]
 801626e:	680b      	ldr	r3, [r1, #0]
 8016270:	9001      	str	r0, [sp, #4]
 8016272:	4690      	mov	r8, r2
 8016274:	1c9c      	adds	r4, r3, #2
 8016276:	46a1      	mov	r9, r4
 8016278:	f814 0b01 	ldrb.w	r0, [r4], #1
 801627c:	2830      	cmp	r0, #48	@ 0x30
 801627e:	d0fa      	beq.n	8016276 <__gethex+0x12>
 8016280:	eba9 0303 	sub.w	r3, r9, r3
 8016284:	f1a3 0b02 	sub.w	fp, r3, #2
 8016288:	f7ff ffd6 	bl	8016238 <__hexdig_fun>
 801628c:	4605      	mov	r5, r0
 801628e:	2800      	cmp	r0, #0
 8016290:	d168      	bne.n	8016364 <__gethex+0x100>
 8016292:	49a0      	ldr	r1, [pc, #640]	@ (8016514 <__gethex+0x2b0>)
 8016294:	2201      	movs	r2, #1
 8016296:	4648      	mov	r0, r9
 8016298:	f7ff fe86 	bl	8015fa8 <strncmp>
 801629c:	4607      	mov	r7, r0
 801629e:	2800      	cmp	r0, #0
 80162a0:	d167      	bne.n	8016372 <__gethex+0x10e>
 80162a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80162a6:	4626      	mov	r6, r4
 80162a8:	f7ff ffc6 	bl	8016238 <__hexdig_fun>
 80162ac:	2800      	cmp	r0, #0
 80162ae:	d062      	beq.n	8016376 <__gethex+0x112>
 80162b0:	4623      	mov	r3, r4
 80162b2:	7818      	ldrb	r0, [r3, #0]
 80162b4:	2830      	cmp	r0, #48	@ 0x30
 80162b6:	4699      	mov	r9, r3
 80162b8:	f103 0301 	add.w	r3, r3, #1
 80162bc:	d0f9      	beq.n	80162b2 <__gethex+0x4e>
 80162be:	f7ff ffbb 	bl	8016238 <__hexdig_fun>
 80162c2:	fab0 f580 	clz	r5, r0
 80162c6:	096d      	lsrs	r5, r5, #5
 80162c8:	f04f 0b01 	mov.w	fp, #1
 80162cc:	464a      	mov	r2, r9
 80162ce:	4616      	mov	r6, r2
 80162d0:	3201      	adds	r2, #1
 80162d2:	7830      	ldrb	r0, [r6, #0]
 80162d4:	f7ff ffb0 	bl	8016238 <__hexdig_fun>
 80162d8:	2800      	cmp	r0, #0
 80162da:	d1f8      	bne.n	80162ce <__gethex+0x6a>
 80162dc:	498d      	ldr	r1, [pc, #564]	@ (8016514 <__gethex+0x2b0>)
 80162de:	2201      	movs	r2, #1
 80162e0:	4630      	mov	r0, r6
 80162e2:	f7ff fe61 	bl	8015fa8 <strncmp>
 80162e6:	2800      	cmp	r0, #0
 80162e8:	d13f      	bne.n	801636a <__gethex+0x106>
 80162ea:	b944      	cbnz	r4, 80162fe <__gethex+0x9a>
 80162ec:	1c74      	adds	r4, r6, #1
 80162ee:	4622      	mov	r2, r4
 80162f0:	4616      	mov	r6, r2
 80162f2:	3201      	adds	r2, #1
 80162f4:	7830      	ldrb	r0, [r6, #0]
 80162f6:	f7ff ff9f 	bl	8016238 <__hexdig_fun>
 80162fa:	2800      	cmp	r0, #0
 80162fc:	d1f8      	bne.n	80162f0 <__gethex+0x8c>
 80162fe:	1ba4      	subs	r4, r4, r6
 8016300:	00a7      	lsls	r7, r4, #2
 8016302:	7833      	ldrb	r3, [r6, #0]
 8016304:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016308:	2b50      	cmp	r3, #80	@ 0x50
 801630a:	d13e      	bne.n	801638a <__gethex+0x126>
 801630c:	7873      	ldrb	r3, [r6, #1]
 801630e:	2b2b      	cmp	r3, #43	@ 0x2b
 8016310:	d033      	beq.n	801637a <__gethex+0x116>
 8016312:	2b2d      	cmp	r3, #45	@ 0x2d
 8016314:	d034      	beq.n	8016380 <__gethex+0x11c>
 8016316:	1c71      	adds	r1, r6, #1
 8016318:	2400      	movs	r4, #0
 801631a:	7808      	ldrb	r0, [r1, #0]
 801631c:	f7ff ff8c 	bl	8016238 <__hexdig_fun>
 8016320:	1e43      	subs	r3, r0, #1
 8016322:	b2db      	uxtb	r3, r3
 8016324:	2b18      	cmp	r3, #24
 8016326:	d830      	bhi.n	801638a <__gethex+0x126>
 8016328:	f1a0 0210 	sub.w	r2, r0, #16
 801632c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016330:	f7ff ff82 	bl	8016238 <__hexdig_fun>
 8016334:	f100 3cff 	add.w	ip, r0, #4294967295
 8016338:	fa5f fc8c 	uxtb.w	ip, ip
 801633c:	f1bc 0f18 	cmp.w	ip, #24
 8016340:	f04f 030a 	mov.w	r3, #10
 8016344:	d91e      	bls.n	8016384 <__gethex+0x120>
 8016346:	b104      	cbz	r4, 801634a <__gethex+0xe6>
 8016348:	4252      	negs	r2, r2
 801634a:	4417      	add	r7, r2
 801634c:	f8ca 1000 	str.w	r1, [sl]
 8016350:	b1ed      	cbz	r5, 801638e <__gethex+0x12a>
 8016352:	f1bb 0f00 	cmp.w	fp, #0
 8016356:	bf0c      	ite	eq
 8016358:	2506      	moveq	r5, #6
 801635a:	2500      	movne	r5, #0
 801635c:	4628      	mov	r0, r5
 801635e:	b005      	add	sp, #20
 8016360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016364:	2500      	movs	r5, #0
 8016366:	462c      	mov	r4, r5
 8016368:	e7b0      	b.n	80162cc <__gethex+0x68>
 801636a:	2c00      	cmp	r4, #0
 801636c:	d1c7      	bne.n	80162fe <__gethex+0x9a>
 801636e:	4627      	mov	r7, r4
 8016370:	e7c7      	b.n	8016302 <__gethex+0x9e>
 8016372:	464e      	mov	r6, r9
 8016374:	462f      	mov	r7, r5
 8016376:	2501      	movs	r5, #1
 8016378:	e7c3      	b.n	8016302 <__gethex+0x9e>
 801637a:	2400      	movs	r4, #0
 801637c:	1cb1      	adds	r1, r6, #2
 801637e:	e7cc      	b.n	801631a <__gethex+0xb6>
 8016380:	2401      	movs	r4, #1
 8016382:	e7fb      	b.n	801637c <__gethex+0x118>
 8016384:	fb03 0002 	mla	r0, r3, r2, r0
 8016388:	e7ce      	b.n	8016328 <__gethex+0xc4>
 801638a:	4631      	mov	r1, r6
 801638c:	e7de      	b.n	801634c <__gethex+0xe8>
 801638e:	eba6 0309 	sub.w	r3, r6, r9
 8016392:	3b01      	subs	r3, #1
 8016394:	4629      	mov	r1, r5
 8016396:	2b07      	cmp	r3, #7
 8016398:	dc0a      	bgt.n	80163b0 <__gethex+0x14c>
 801639a:	9801      	ldr	r0, [sp, #4]
 801639c:	f000 fa46 	bl	801682c <_Balloc>
 80163a0:	4604      	mov	r4, r0
 80163a2:	b940      	cbnz	r0, 80163b6 <__gethex+0x152>
 80163a4:	4b5c      	ldr	r3, [pc, #368]	@ (8016518 <__gethex+0x2b4>)
 80163a6:	4602      	mov	r2, r0
 80163a8:	21e4      	movs	r1, #228	@ 0xe4
 80163aa:	485c      	ldr	r0, [pc, #368]	@ (801651c <__gethex+0x2b8>)
 80163ac:	f001 fffe 	bl	80183ac <__assert_func>
 80163b0:	3101      	adds	r1, #1
 80163b2:	105b      	asrs	r3, r3, #1
 80163b4:	e7ef      	b.n	8016396 <__gethex+0x132>
 80163b6:	f100 0a14 	add.w	sl, r0, #20
 80163ba:	2300      	movs	r3, #0
 80163bc:	4655      	mov	r5, sl
 80163be:	469b      	mov	fp, r3
 80163c0:	45b1      	cmp	r9, r6
 80163c2:	d337      	bcc.n	8016434 <__gethex+0x1d0>
 80163c4:	f845 bb04 	str.w	fp, [r5], #4
 80163c8:	eba5 050a 	sub.w	r5, r5, sl
 80163cc:	10ad      	asrs	r5, r5, #2
 80163ce:	6125      	str	r5, [r4, #16]
 80163d0:	4658      	mov	r0, fp
 80163d2:	f000 fb1d 	bl	8016a10 <__hi0bits>
 80163d6:	016d      	lsls	r5, r5, #5
 80163d8:	f8d8 6000 	ldr.w	r6, [r8]
 80163dc:	1a2d      	subs	r5, r5, r0
 80163de:	42b5      	cmp	r5, r6
 80163e0:	dd54      	ble.n	801648c <__gethex+0x228>
 80163e2:	1bad      	subs	r5, r5, r6
 80163e4:	4629      	mov	r1, r5
 80163e6:	4620      	mov	r0, r4
 80163e8:	f000 fea9 	bl	801713e <__any_on>
 80163ec:	4681      	mov	r9, r0
 80163ee:	b178      	cbz	r0, 8016410 <__gethex+0x1ac>
 80163f0:	1e6b      	subs	r3, r5, #1
 80163f2:	1159      	asrs	r1, r3, #5
 80163f4:	f003 021f 	and.w	r2, r3, #31
 80163f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80163fc:	f04f 0901 	mov.w	r9, #1
 8016400:	fa09 f202 	lsl.w	r2, r9, r2
 8016404:	420a      	tst	r2, r1
 8016406:	d003      	beq.n	8016410 <__gethex+0x1ac>
 8016408:	454b      	cmp	r3, r9
 801640a:	dc36      	bgt.n	801647a <__gethex+0x216>
 801640c:	f04f 0902 	mov.w	r9, #2
 8016410:	4629      	mov	r1, r5
 8016412:	4620      	mov	r0, r4
 8016414:	f7ff febe 	bl	8016194 <rshift>
 8016418:	442f      	add	r7, r5
 801641a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801641e:	42bb      	cmp	r3, r7
 8016420:	da42      	bge.n	80164a8 <__gethex+0x244>
 8016422:	9801      	ldr	r0, [sp, #4]
 8016424:	4621      	mov	r1, r4
 8016426:	f000 fa41 	bl	80168ac <_Bfree>
 801642a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801642c:	2300      	movs	r3, #0
 801642e:	6013      	str	r3, [r2, #0]
 8016430:	25a3      	movs	r5, #163	@ 0xa3
 8016432:	e793      	b.n	801635c <__gethex+0xf8>
 8016434:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016438:	2a2e      	cmp	r2, #46	@ 0x2e
 801643a:	d012      	beq.n	8016462 <__gethex+0x1fe>
 801643c:	2b20      	cmp	r3, #32
 801643e:	d104      	bne.n	801644a <__gethex+0x1e6>
 8016440:	f845 bb04 	str.w	fp, [r5], #4
 8016444:	f04f 0b00 	mov.w	fp, #0
 8016448:	465b      	mov	r3, fp
 801644a:	7830      	ldrb	r0, [r6, #0]
 801644c:	9303      	str	r3, [sp, #12]
 801644e:	f7ff fef3 	bl	8016238 <__hexdig_fun>
 8016452:	9b03      	ldr	r3, [sp, #12]
 8016454:	f000 000f 	and.w	r0, r0, #15
 8016458:	4098      	lsls	r0, r3
 801645a:	ea4b 0b00 	orr.w	fp, fp, r0
 801645e:	3304      	adds	r3, #4
 8016460:	e7ae      	b.n	80163c0 <__gethex+0x15c>
 8016462:	45b1      	cmp	r9, r6
 8016464:	d8ea      	bhi.n	801643c <__gethex+0x1d8>
 8016466:	492b      	ldr	r1, [pc, #172]	@ (8016514 <__gethex+0x2b0>)
 8016468:	9303      	str	r3, [sp, #12]
 801646a:	2201      	movs	r2, #1
 801646c:	4630      	mov	r0, r6
 801646e:	f7ff fd9b 	bl	8015fa8 <strncmp>
 8016472:	9b03      	ldr	r3, [sp, #12]
 8016474:	2800      	cmp	r0, #0
 8016476:	d1e1      	bne.n	801643c <__gethex+0x1d8>
 8016478:	e7a2      	b.n	80163c0 <__gethex+0x15c>
 801647a:	1ea9      	subs	r1, r5, #2
 801647c:	4620      	mov	r0, r4
 801647e:	f000 fe5e 	bl	801713e <__any_on>
 8016482:	2800      	cmp	r0, #0
 8016484:	d0c2      	beq.n	801640c <__gethex+0x1a8>
 8016486:	f04f 0903 	mov.w	r9, #3
 801648a:	e7c1      	b.n	8016410 <__gethex+0x1ac>
 801648c:	da09      	bge.n	80164a2 <__gethex+0x23e>
 801648e:	1b75      	subs	r5, r6, r5
 8016490:	4621      	mov	r1, r4
 8016492:	9801      	ldr	r0, [sp, #4]
 8016494:	462a      	mov	r2, r5
 8016496:	f000 fc19 	bl	8016ccc <__lshift>
 801649a:	1b7f      	subs	r7, r7, r5
 801649c:	4604      	mov	r4, r0
 801649e:	f100 0a14 	add.w	sl, r0, #20
 80164a2:	f04f 0900 	mov.w	r9, #0
 80164a6:	e7b8      	b.n	801641a <__gethex+0x1b6>
 80164a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80164ac:	42bd      	cmp	r5, r7
 80164ae:	dd6f      	ble.n	8016590 <__gethex+0x32c>
 80164b0:	1bed      	subs	r5, r5, r7
 80164b2:	42ae      	cmp	r6, r5
 80164b4:	dc34      	bgt.n	8016520 <__gethex+0x2bc>
 80164b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80164ba:	2b02      	cmp	r3, #2
 80164bc:	d022      	beq.n	8016504 <__gethex+0x2a0>
 80164be:	2b03      	cmp	r3, #3
 80164c0:	d024      	beq.n	801650c <__gethex+0x2a8>
 80164c2:	2b01      	cmp	r3, #1
 80164c4:	d115      	bne.n	80164f2 <__gethex+0x28e>
 80164c6:	42ae      	cmp	r6, r5
 80164c8:	d113      	bne.n	80164f2 <__gethex+0x28e>
 80164ca:	2e01      	cmp	r6, #1
 80164cc:	d10b      	bne.n	80164e6 <__gethex+0x282>
 80164ce:	9a02      	ldr	r2, [sp, #8]
 80164d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80164d4:	6013      	str	r3, [r2, #0]
 80164d6:	2301      	movs	r3, #1
 80164d8:	6123      	str	r3, [r4, #16]
 80164da:	f8ca 3000 	str.w	r3, [sl]
 80164de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80164e0:	2562      	movs	r5, #98	@ 0x62
 80164e2:	601c      	str	r4, [r3, #0]
 80164e4:	e73a      	b.n	801635c <__gethex+0xf8>
 80164e6:	1e71      	subs	r1, r6, #1
 80164e8:	4620      	mov	r0, r4
 80164ea:	f000 fe28 	bl	801713e <__any_on>
 80164ee:	2800      	cmp	r0, #0
 80164f0:	d1ed      	bne.n	80164ce <__gethex+0x26a>
 80164f2:	9801      	ldr	r0, [sp, #4]
 80164f4:	4621      	mov	r1, r4
 80164f6:	f000 f9d9 	bl	80168ac <_Bfree>
 80164fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80164fc:	2300      	movs	r3, #0
 80164fe:	6013      	str	r3, [r2, #0]
 8016500:	2550      	movs	r5, #80	@ 0x50
 8016502:	e72b      	b.n	801635c <__gethex+0xf8>
 8016504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016506:	2b00      	cmp	r3, #0
 8016508:	d1f3      	bne.n	80164f2 <__gethex+0x28e>
 801650a:	e7e0      	b.n	80164ce <__gethex+0x26a>
 801650c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801650e:	2b00      	cmp	r3, #0
 8016510:	d1dd      	bne.n	80164ce <__gethex+0x26a>
 8016512:	e7ee      	b.n	80164f2 <__gethex+0x28e>
 8016514:	08019eb0 	.word	0x08019eb0
 8016518:	08019ec6 	.word	0x08019ec6
 801651c:	08019ed7 	.word	0x08019ed7
 8016520:	1e6f      	subs	r7, r5, #1
 8016522:	f1b9 0f00 	cmp.w	r9, #0
 8016526:	d130      	bne.n	801658a <__gethex+0x326>
 8016528:	b127      	cbz	r7, 8016534 <__gethex+0x2d0>
 801652a:	4639      	mov	r1, r7
 801652c:	4620      	mov	r0, r4
 801652e:	f000 fe06 	bl	801713e <__any_on>
 8016532:	4681      	mov	r9, r0
 8016534:	117a      	asrs	r2, r7, #5
 8016536:	2301      	movs	r3, #1
 8016538:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801653c:	f007 071f 	and.w	r7, r7, #31
 8016540:	40bb      	lsls	r3, r7
 8016542:	4213      	tst	r3, r2
 8016544:	4629      	mov	r1, r5
 8016546:	4620      	mov	r0, r4
 8016548:	bf18      	it	ne
 801654a:	f049 0902 	orrne.w	r9, r9, #2
 801654e:	f7ff fe21 	bl	8016194 <rshift>
 8016552:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8016556:	1b76      	subs	r6, r6, r5
 8016558:	2502      	movs	r5, #2
 801655a:	f1b9 0f00 	cmp.w	r9, #0
 801655e:	d047      	beq.n	80165f0 <__gethex+0x38c>
 8016560:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016564:	2b02      	cmp	r3, #2
 8016566:	d015      	beq.n	8016594 <__gethex+0x330>
 8016568:	2b03      	cmp	r3, #3
 801656a:	d017      	beq.n	801659c <__gethex+0x338>
 801656c:	2b01      	cmp	r3, #1
 801656e:	d109      	bne.n	8016584 <__gethex+0x320>
 8016570:	f019 0f02 	tst.w	r9, #2
 8016574:	d006      	beq.n	8016584 <__gethex+0x320>
 8016576:	f8da 3000 	ldr.w	r3, [sl]
 801657a:	ea49 0903 	orr.w	r9, r9, r3
 801657e:	f019 0f01 	tst.w	r9, #1
 8016582:	d10e      	bne.n	80165a2 <__gethex+0x33e>
 8016584:	f045 0510 	orr.w	r5, r5, #16
 8016588:	e032      	b.n	80165f0 <__gethex+0x38c>
 801658a:	f04f 0901 	mov.w	r9, #1
 801658e:	e7d1      	b.n	8016534 <__gethex+0x2d0>
 8016590:	2501      	movs	r5, #1
 8016592:	e7e2      	b.n	801655a <__gethex+0x2f6>
 8016594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016596:	f1c3 0301 	rsb	r3, r3, #1
 801659a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801659c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d0f0      	beq.n	8016584 <__gethex+0x320>
 80165a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80165a6:	f104 0314 	add.w	r3, r4, #20
 80165aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80165ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80165b2:	f04f 0c00 	mov.w	ip, #0
 80165b6:	4618      	mov	r0, r3
 80165b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80165bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80165c0:	d01b      	beq.n	80165fa <__gethex+0x396>
 80165c2:	3201      	adds	r2, #1
 80165c4:	6002      	str	r2, [r0, #0]
 80165c6:	2d02      	cmp	r5, #2
 80165c8:	f104 0314 	add.w	r3, r4, #20
 80165cc:	d13c      	bne.n	8016648 <__gethex+0x3e4>
 80165ce:	f8d8 2000 	ldr.w	r2, [r8]
 80165d2:	3a01      	subs	r2, #1
 80165d4:	42b2      	cmp	r2, r6
 80165d6:	d109      	bne.n	80165ec <__gethex+0x388>
 80165d8:	1171      	asrs	r1, r6, #5
 80165da:	2201      	movs	r2, #1
 80165dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80165e0:	f006 061f 	and.w	r6, r6, #31
 80165e4:	fa02 f606 	lsl.w	r6, r2, r6
 80165e8:	421e      	tst	r6, r3
 80165ea:	d13a      	bne.n	8016662 <__gethex+0x3fe>
 80165ec:	f045 0520 	orr.w	r5, r5, #32
 80165f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80165f2:	601c      	str	r4, [r3, #0]
 80165f4:	9b02      	ldr	r3, [sp, #8]
 80165f6:	601f      	str	r7, [r3, #0]
 80165f8:	e6b0      	b.n	801635c <__gethex+0xf8>
 80165fa:	4299      	cmp	r1, r3
 80165fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8016600:	d8d9      	bhi.n	80165b6 <__gethex+0x352>
 8016602:	68a3      	ldr	r3, [r4, #8]
 8016604:	459b      	cmp	fp, r3
 8016606:	db17      	blt.n	8016638 <__gethex+0x3d4>
 8016608:	6861      	ldr	r1, [r4, #4]
 801660a:	9801      	ldr	r0, [sp, #4]
 801660c:	3101      	adds	r1, #1
 801660e:	f000 f90d 	bl	801682c <_Balloc>
 8016612:	4681      	mov	r9, r0
 8016614:	b918      	cbnz	r0, 801661e <__gethex+0x3ba>
 8016616:	4b1a      	ldr	r3, [pc, #104]	@ (8016680 <__gethex+0x41c>)
 8016618:	4602      	mov	r2, r0
 801661a:	2184      	movs	r1, #132	@ 0x84
 801661c:	e6c5      	b.n	80163aa <__gethex+0x146>
 801661e:	6922      	ldr	r2, [r4, #16]
 8016620:	3202      	adds	r2, #2
 8016622:	f104 010c 	add.w	r1, r4, #12
 8016626:	0092      	lsls	r2, r2, #2
 8016628:	300c      	adds	r0, #12
 801662a:	f7ff fd52 	bl	80160d2 <memcpy>
 801662e:	4621      	mov	r1, r4
 8016630:	9801      	ldr	r0, [sp, #4]
 8016632:	f000 f93b 	bl	80168ac <_Bfree>
 8016636:	464c      	mov	r4, r9
 8016638:	6923      	ldr	r3, [r4, #16]
 801663a:	1c5a      	adds	r2, r3, #1
 801663c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016640:	6122      	str	r2, [r4, #16]
 8016642:	2201      	movs	r2, #1
 8016644:	615a      	str	r2, [r3, #20]
 8016646:	e7be      	b.n	80165c6 <__gethex+0x362>
 8016648:	6922      	ldr	r2, [r4, #16]
 801664a:	455a      	cmp	r2, fp
 801664c:	dd0b      	ble.n	8016666 <__gethex+0x402>
 801664e:	2101      	movs	r1, #1
 8016650:	4620      	mov	r0, r4
 8016652:	f7ff fd9f 	bl	8016194 <rshift>
 8016656:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801665a:	3701      	adds	r7, #1
 801665c:	42bb      	cmp	r3, r7
 801665e:	f6ff aee0 	blt.w	8016422 <__gethex+0x1be>
 8016662:	2501      	movs	r5, #1
 8016664:	e7c2      	b.n	80165ec <__gethex+0x388>
 8016666:	f016 061f 	ands.w	r6, r6, #31
 801666a:	d0fa      	beq.n	8016662 <__gethex+0x3fe>
 801666c:	4453      	add	r3, sl
 801666e:	f1c6 0620 	rsb	r6, r6, #32
 8016672:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016676:	f000 f9cb 	bl	8016a10 <__hi0bits>
 801667a:	42b0      	cmp	r0, r6
 801667c:	dbe7      	blt.n	801664e <__gethex+0x3ea>
 801667e:	e7f0      	b.n	8016662 <__gethex+0x3fe>
 8016680:	08019ec6 	.word	0x08019ec6

08016684 <L_shift>:
 8016684:	f1c2 0208 	rsb	r2, r2, #8
 8016688:	0092      	lsls	r2, r2, #2
 801668a:	b570      	push	{r4, r5, r6, lr}
 801668c:	f1c2 0620 	rsb	r6, r2, #32
 8016690:	6843      	ldr	r3, [r0, #4]
 8016692:	6804      	ldr	r4, [r0, #0]
 8016694:	fa03 f506 	lsl.w	r5, r3, r6
 8016698:	432c      	orrs	r4, r5
 801669a:	40d3      	lsrs	r3, r2
 801669c:	6004      	str	r4, [r0, #0]
 801669e:	f840 3f04 	str.w	r3, [r0, #4]!
 80166a2:	4288      	cmp	r0, r1
 80166a4:	d3f4      	bcc.n	8016690 <L_shift+0xc>
 80166a6:	bd70      	pop	{r4, r5, r6, pc}

080166a8 <__match>:
 80166a8:	b530      	push	{r4, r5, lr}
 80166aa:	6803      	ldr	r3, [r0, #0]
 80166ac:	3301      	adds	r3, #1
 80166ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80166b2:	b914      	cbnz	r4, 80166ba <__match+0x12>
 80166b4:	6003      	str	r3, [r0, #0]
 80166b6:	2001      	movs	r0, #1
 80166b8:	bd30      	pop	{r4, r5, pc}
 80166ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80166be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80166c2:	2d19      	cmp	r5, #25
 80166c4:	bf98      	it	ls
 80166c6:	3220      	addls	r2, #32
 80166c8:	42a2      	cmp	r2, r4
 80166ca:	d0f0      	beq.n	80166ae <__match+0x6>
 80166cc:	2000      	movs	r0, #0
 80166ce:	e7f3      	b.n	80166b8 <__match+0x10>

080166d0 <__hexnan>:
 80166d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166d4:	680b      	ldr	r3, [r1, #0]
 80166d6:	6801      	ldr	r1, [r0, #0]
 80166d8:	115e      	asrs	r6, r3, #5
 80166da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80166de:	f013 031f 	ands.w	r3, r3, #31
 80166e2:	b087      	sub	sp, #28
 80166e4:	bf18      	it	ne
 80166e6:	3604      	addne	r6, #4
 80166e8:	2500      	movs	r5, #0
 80166ea:	1f37      	subs	r7, r6, #4
 80166ec:	4682      	mov	sl, r0
 80166ee:	4690      	mov	r8, r2
 80166f0:	9301      	str	r3, [sp, #4]
 80166f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80166f6:	46b9      	mov	r9, r7
 80166f8:	463c      	mov	r4, r7
 80166fa:	9502      	str	r5, [sp, #8]
 80166fc:	46ab      	mov	fp, r5
 80166fe:	784a      	ldrb	r2, [r1, #1]
 8016700:	1c4b      	adds	r3, r1, #1
 8016702:	9303      	str	r3, [sp, #12]
 8016704:	b342      	cbz	r2, 8016758 <__hexnan+0x88>
 8016706:	4610      	mov	r0, r2
 8016708:	9105      	str	r1, [sp, #20]
 801670a:	9204      	str	r2, [sp, #16]
 801670c:	f7ff fd94 	bl	8016238 <__hexdig_fun>
 8016710:	2800      	cmp	r0, #0
 8016712:	d151      	bne.n	80167b8 <__hexnan+0xe8>
 8016714:	9a04      	ldr	r2, [sp, #16]
 8016716:	9905      	ldr	r1, [sp, #20]
 8016718:	2a20      	cmp	r2, #32
 801671a:	d818      	bhi.n	801674e <__hexnan+0x7e>
 801671c:	9b02      	ldr	r3, [sp, #8]
 801671e:	459b      	cmp	fp, r3
 8016720:	dd13      	ble.n	801674a <__hexnan+0x7a>
 8016722:	454c      	cmp	r4, r9
 8016724:	d206      	bcs.n	8016734 <__hexnan+0x64>
 8016726:	2d07      	cmp	r5, #7
 8016728:	dc04      	bgt.n	8016734 <__hexnan+0x64>
 801672a:	462a      	mov	r2, r5
 801672c:	4649      	mov	r1, r9
 801672e:	4620      	mov	r0, r4
 8016730:	f7ff ffa8 	bl	8016684 <L_shift>
 8016734:	4544      	cmp	r4, r8
 8016736:	d952      	bls.n	80167de <__hexnan+0x10e>
 8016738:	2300      	movs	r3, #0
 801673a:	f1a4 0904 	sub.w	r9, r4, #4
 801673e:	f844 3c04 	str.w	r3, [r4, #-4]
 8016742:	f8cd b008 	str.w	fp, [sp, #8]
 8016746:	464c      	mov	r4, r9
 8016748:	461d      	mov	r5, r3
 801674a:	9903      	ldr	r1, [sp, #12]
 801674c:	e7d7      	b.n	80166fe <__hexnan+0x2e>
 801674e:	2a29      	cmp	r2, #41	@ 0x29
 8016750:	d157      	bne.n	8016802 <__hexnan+0x132>
 8016752:	3102      	adds	r1, #2
 8016754:	f8ca 1000 	str.w	r1, [sl]
 8016758:	f1bb 0f00 	cmp.w	fp, #0
 801675c:	d051      	beq.n	8016802 <__hexnan+0x132>
 801675e:	454c      	cmp	r4, r9
 8016760:	d206      	bcs.n	8016770 <__hexnan+0xa0>
 8016762:	2d07      	cmp	r5, #7
 8016764:	dc04      	bgt.n	8016770 <__hexnan+0xa0>
 8016766:	462a      	mov	r2, r5
 8016768:	4649      	mov	r1, r9
 801676a:	4620      	mov	r0, r4
 801676c:	f7ff ff8a 	bl	8016684 <L_shift>
 8016770:	4544      	cmp	r4, r8
 8016772:	d936      	bls.n	80167e2 <__hexnan+0x112>
 8016774:	f1a8 0204 	sub.w	r2, r8, #4
 8016778:	4623      	mov	r3, r4
 801677a:	f853 1b04 	ldr.w	r1, [r3], #4
 801677e:	f842 1f04 	str.w	r1, [r2, #4]!
 8016782:	429f      	cmp	r7, r3
 8016784:	d2f9      	bcs.n	801677a <__hexnan+0xaa>
 8016786:	1b3b      	subs	r3, r7, r4
 8016788:	f023 0303 	bic.w	r3, r3, #3
 801678c:	3304      	adds	r3, #4
 801678e:	3401      	adds	r4, #1
 8016790:	3e03      	subs	r6, #3
 8016792:	42b4      	cmp	r4, r6
 8016794:	bf88      	it	hi
 8016796:	2304      	movhi	r3, #4
 8016798:	4443      	add	r3, r8
 801679a:	2200      	movs	r2, #0
 801679c:	f843 2b04 	str.w	r2, [r3], #4
 80167a0:	429f      	cmp	r7, r3
 80167a2:	d2fb      	bcs.n	801679c <__hexnan+0xcc>
 80167a4:	683b      	ldr	r3, [r7, #0]
 80167a6:	b91b      	cbnz	r3, 80167b0 <__hexnan+0xe0>
 80167a8:	4547      	cmp	r7, r8
 80167aa:	d128      	bne.n	80167fe <__hexnan+0x12e>
 80167ac:	2301      	movs	r3, #1
 80167ae:	603b      	str	r3, [r7, #0]
 80167b0:	2005      	movs	r0, #5
 80167b2:	b007      	add	sp, #28
 80167b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167b8:	3501      	adds	r5, #1
 80167ba:	2d08      	cmp	r5, #8
 80167bc:	f10b 0b01 	add.w	fp, fp, #1
 80167c0:	dd06      	ble.n	80167d0 <__hexnan+0x100>
 80167c2:	4544      	cmp	r4, r8
 80167c4:	d9c1      	bls.n	801674a <__hexnan+0x7a>
 80167c6:	2300      	movs	r3, #0
 80167c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80167cc:	2501      	movs	r5, #1
 80167ce:	3c04      	subs	r4, #4
 80167d0:	6822      	ldr	r2, [r4, #0]
 80167d2:	f000 000f 	and.w	r0, r0, #15
 80167d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80167da:	6020      	str	r0, [r4, #0]
 80167dc:	e7b5      	b.n	801674a <__hexnan+0x7a>
 80167de:	2508      	movs	r5, #8
 80167e0:	e7b3      	b.n	801674a <__hexnan+0x7a>
 80167e2:	9b01      	ldr	r3, [sp, #4]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d0dd      	beq.n	80167a4 <__hexnan+0xd4>
 80167e8:	f1c3 0320 	rsb	r3, r3, #32
 80167ec:	f04f 32ff 	mov.w	r2, #4294967295
 80167f0:	40da      	lsrs	r2, r3
 80167f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80167f6:	4013      	ands	r3, r2
 80167f8:	f846 3c04 	str.w	r3, [r6, #-4]
 80167fc:	e7d2      	b.n	80167a4 <__hexnan+0xd4>
 80167fe:	3f04      	subs	r7, #4
 8016800:	e7d0      	b.n	80167a4 <__hexnan+0xd4>
 8016802:	2004      	movs	r0, #4
 8016804:	e7d5      	b.n	80167b2 <__hexnan+0xe2>

08016806 <__ascii_mbtowc>:
 8016806:	b082      	sub	sp, #8
 8016808:	b901      	cbnz	r1, 801680c <__ascii_mbtowc+0x6>
 801680a:	a901      	add	r1, sp, #4
 801680c:	b142      	cbz	r2, 8016820 <__ascii_mbtowc+0x1a>
 801680e:	b14b      	cbz	r3, 8016824 <__ascii_mbtowc+0x1e>
 8016810:	7813      	ldrb	r3, [r2, #0]
 8016812:	600b      	str	r3, [r1, #0]
 8016814:	7812      	ldrb	r2, [r2, #0]
 8016816:	1e10      	subs	r0, r2, #0
 8016818:	bf18      	it	ne
 801681a:	2001      	movne	r0, #1
 801681c:	b002      	add	sp, #8
 801681e:	4770      	bx	lr
 8016820:	4610      	mov	r0, r2
 8016822:	e7fb      	b.n	801681c <__ascii_mbtowc+0x16>
 8016824:	f06f 0001 	mvn.w	r0, #1
 8016828:	e7f8      	b.n	801681c <__ascii_mbtowc+0x16>
	...

0801682c <_Balloc>:
 801682c:	b570      	push	{r4, r5, r6, lr}
 801682e:	69c6      	ldr	r6, [r0, #28]
 8016830:	4604      	mov	r4, r0
 8016832:	460d      	mov	r5, r1
 8016834:	b976      	cbnz	r6, 8016854 <_Balloc+0x28>
 8016836:	2010      	movs	r0, #16
 8016838:	f7fe fa1c 	bl	8014c74 <malloc>
 801683c:	4602      	mov	r2, r0
 801683e:	61e0      	str	r0, [r4, #28]
 8016840:	b920      	cbnz	r0, 801684c <_Balloc+0x20>
 8016842:	4b18      	ldr	r3, [pc, #96]	@ (80168a4 <_Balloc+0x78>)
 8016844:	4818      	ldr	r0, [pc, #96]	@ (80168a8 <_Balloc+0x7c>)
 8016846:	216b      	movs	r1, #107	@ 0x6b
 8016848:	f001 fdb0 	bl	80183ac <__assert_func>
 801684c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016850:	6006      	str	r6, [r0, #0]
 8016852:	60c6      	str	r6, [r0, #12]
 8016854:	69e6      	ldr	r6, [r4, #28]
 8016856:	68f3      	ldr	r3, [r6, #12]
 8016858:	b183      	cbz	r3, 801687c <_Balloc+0x50>
 801685a:	69e3      	ldr	r3, [r4, #28]
 801685c:	68db      	ldr	r3, [r3, #12]
 801685e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016862:	b9b8      	cbnz	r0, 8016894 <_Balloc+0x68>
 8016864:	2101      	movs	r1, #1
 8016866:	fa01 f605 	lsl.w	r6, r1, r5
 801686a:	1d72      	adds	r2, r6, #5
 801686c:	0092      	lsls	r2, r2, #2
 801686e:	4620      	mov	r0, r4
 8016870:	f001 fdba 	bl	80183e8 <_calloc_r>
 8016874:	b160      	cbz	r0, 8016890 <_Balloc+0x64>
 8016876:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801687a:	e00e      	b.n	801689a <_Balloc+0x6e>
 801687c:	2221      	movs	r2, #33	@ 0x21
 801687e:	2104      	movs	r1, #4
 8016880:	4620      	mov	r0, r4
 8016882:	f001 fdb1 	bl	80183e8 <_calloc_r>
 8016886:	69e3      	ldr	r3, [r4, #28]
 8016888:	60f0      	str	r0, [r6, #12]
 801688a:	68db      	ldr	r3, [r3, #12]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d1e4      	bne.n	801685a <_Balloc+0x2e>
 8016890:	2000      	movs	r0, #0
 8016892:	bd70      	pop	{r4, r5, r6, pc}
 8016894:	6802      	ldr	r2, [r0, #0]
 8016896:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801689a:	2300      	movs	r3, #0
 801689c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80168a0:	e7f7      	b.n	8016892 <_Balloc+0x66>
 80168a2:	bf00      	nop
 80168a4:	08019f37 	.word	0x08019f37
 80168a8:	08019f4e 	.word	0x08019f4e

080168ac <_Bfree>:
 80168ac:	b570      	push	{r4, r5, r6, lr}
 80168ae:	69c6      	ldr	r6, [r0, #28]
 80168b0:	4605      	mov	r5, r0
 80168b2:	460c      	mov	r4, r1
 80168b4:	b976      	cbnz	r6, 80168d4 <_Bfree+0x28>
 80168b6:	2010      	movs	r0, #16
 80168b8:	f7fe f9dc 	bl	8014c74 <malloc>
 80168bc:	4602      	mov	r2, r0
 80168be:	61e8      	str	r0, [r5, #28]
 80168c0:	b920      	cbnz	r0, 80168cc <_Bfree+0x20>
 80168c2:	4b09      	ldr	r3, [pc, #36]	@ (80168e8 <_Bfree+0x3c>)
 80168c4:	4809      	ldr	r0, [pc, #36]	@ (80168ec <_Bfree+0x40>)
 80168c6:	218f      	movs	r1, #143	@ 0x8f
 80168c8:	f001 fd70 	bl	80183ac <__assert_func>
 80168cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80168d0:	6006      	str	r6, [r0, #0]
 80168d2:	60c6      	str	r6, [r0, #12]
 80168d4:	b13c      	cbz	r4, 80168e6 <_Bfree+0x3a>
 80168d6:	69eb      	ldr	r3, [r5, #28]
 80168d8:	6862      	ldr	r2, [r4, #4]
 80168da:	68db      	ldr	r3, [r3, #12]
 80168dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80168e0:	6021      	str	r1, [r4, #0]
 80168e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80168e6:	bd70      	pop	{r4, r5, r6, pc}
 80168e8:	08019f37 	.word	0x08019f37
 80168ec:	08019f4e 	.word	0x08019f4e

080168f0 <__multadd>:
 80168f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168f4:	690d      	ldr	r5, [r1, #16]
 80168f6:	4607      	mov	r7, r0
 80168f8:	460c      	mov	r4, r1
 80168fa:	461e      	mov	r6, r3
 80168fc:	f101 0c14 	add.w	ip, r1, #20
 8016900:	2000      	movs	r0, #0
 8016902:	f8dc 3000 	ldr.w	r3, [ip]
 8016906:	b299      	uxth	r1, r3
 8016908:	fb02 6101 	mla	r1, r2, r1, r6
 801690c:	0c1e      	lsrs	r6, r3, #16
 801690e:	0c0b      	lsrs	r3, r1, #16
 8016910:	fb02 3306 	mla	r3, r2, r6, r3
 8016914:	b289      	uxth	r1, r1
 8016916:	3001      	adds	r0, #1
 8016918:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801691c:	4285      	cmp	r5, r0
 801691e:	f84c 1b04 	str.w	r1, [ip], #4
 8016922:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016926:	dcec      	bgt.n	8016902 <__multadd+0x12>
 8016928:	b30e      	cbz	r6, 801696e <__multadd+0x7e>
 801692a:	68a3      	ldr	r3, [r4, #8]
 801692c:	42ab      	cmp	r3, r5
 801692e:	dc19      	bgt.n	8016964 <__multadd+0x74>
 8016930:	6861      	ldr	r1, [r4, #4]
 8016932:	4638      	mov	r0, r7
 8016934:	3101      	adds	r1, #1
 8016936:	f7ff ff79 	bl	801682c <_Balloc>
 801693a:	4680      	mov	r8, r0
 801693c:	b928      	cbnz	r0, 801694a <__multadd+0x5a>
 801693e:	4602      	mov	r2, r0
 8016940:	4b0c      	ldr	r3, [pc, #48]	@ (8016974 <__multadd+0x84>)
 8016942:	480d      	ldr	r0, [pc, #52]	@ (8016978 <__multadd+0x88>)
 8016944:	21ba      	movs	r1, #186	@ 0xba
 8016946:	f001 fd31 	bl	80183ac <__assert_func>
 801694a:	6922      	ldr	r2, [r4, #16]
 801694c:	3202      	adds	r2, #2
 801694e:	f104 010c 	add.w	r1, r4, #12
 8016952:	0092      	lsls	r2, r2, #2
 8016954:	300c      	adds	r0, #12
 8016956:	f7ff fbbc 	bl	80160d2 <memcpy>
 801695a:	4621      	mov	r1, r4
 801695c:	4638      	mov	r0, r7
 801695e:	f7ff ffa5 	bl	80168ac <_Bfree>
 8016962:	4644      	mov	r4, r8
 8016964:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016968:	3501      	adds	r5, #1
 801696a:	615e      	str	r6, [r3, #20]
 801696c:	6125      	str	r5, [r4, #16]
 801696e:	4620      	mov	r0, r4
 8016970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016974:	08019ec6 	.word	0x08019ec6
 8016978:	08019f4e 	.word	0x08019f4e

0801697c <__s2b>:
 801697c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016980:	460c      	mov	r4, r1
 8016982:	4615      	mov	r5, r2
 8016984:	461f      	mov	r7, r3
 8016986:	2209      	movs	r2, #9
 8016988:	3308      	adds	r3, #8
 801698a:	4606      	mov	r6, r0
 801698c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016990:	2100      	movs	r1, #0
 8016992:	2201      	movs	r2, #1
 8016994:	429a      	cmp	r2, r3
 8016996:	db09      	blt.n	80169ac <__s2b+0x30>
 8016998:	4630      	mov	r0, r6
 801699a:	f7ff ff47 	bl	801682c <_Balloc>
 801699e:	b940      	cbnz	r0, 80169b2 <__s2b+0x36>
 80169a0:	4602      	mov	r2, r0
 80169a2:	4b19      	ldr	r3, [pc, #100]	@ (8016a08 <__s2b+0x8c>)
 80169a4:	4819      	ldr	r0, [pc, #100]	@ (8016a0c <__s2b+0x90>)
 80169a6:	21d3      	movs	r1, #211	@ 0xd3
 80169a8:	f001 fd00 	bl	80183ac <__assert_func>
 80169ac:	0052      	lsls	r2, r2, #1
 80169ae:	3101      	adds	r1, #1
 80169b0:	e7f0      	b.n	8016994 <__s2b+0x18>
 80169b2:	9b08      	ldr	r3, [sp, #32]
 80169b4:	6143      	str	r3, [r0, #20]
 80169b6:	2d09      	cmp	r5, #9
 80169b8:	f04f 0301 	mov.w	r3, #1
 80169bc:	6103      	str	r3, [r0, #16]
 80169be:	dd16      	ble.n	80169ee <__s2b+0x72>
 80169c0:	f104 0909 	add.w	r9, r4, #9
 80169c4:	46c8      	mov	r8, r9
 80169c6:	442c      	add	r4, r5
 80169c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80169cc:	4601      	mov	r1, r0
 80169ce:	3b30      	subs	r3, #48	@ 0x30
 80169d0:	220a      	movs	r2, #10
 80169d2:	4630      	mov	r0, r6
 80169d4:	f7ff ff8c 	bl	80168f0 <__multadd>
 80169d8:	45a0      	cmp	r8, r4
 80169da:	d1f5      	bne.n	80169c8 <__s2b+0x4c>
 80169dc:	f1a5 0408 	sub.w	r4, r5, #8
 80169e0:	444c      	add	r4, r9
 80169e2:	1b2d      	subs	r5, r5, r4
 80169e4:	1963      	adds	r3, r4, r5
 80169e6:	42bb      	cmp	r3, r7
 80169e8:	db04      	blt.n	80169f4 <__s2b+0x78>
 80169ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169ee:	340a      	adds	r4, #10
 80169f0:	2509      	movs	r5, #9
 80169f2:	e7f6      	b.n	80169e2 <__s2b+0x66>
 80169f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80169f8:	4601      	mov	r1, r0
 80169fa:	3b30      	subs	r3, #48	@ 0x30
 80169fc:	220a      	movs	r2, #10
 80169fe:	4630      	mov	r0, r6
 8016a00:	f7ff ff76 	bl	80168f0 <__multadd>
 8016a04:	e7ee      	b.n	80169e4 <__s2b+0x68>
 8016a06:	bf00      	nop
 8016a08:	08019ec6 	.word	0x08019ec6
 8016a0c:	08019f4e 	.word	0x08019f4e

08016a10 <__hi0bits>:
 8016a10:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016a14:	4603      	mov	r3, r0
 8016a16:	bf36      	itet	cc
 8016a18:	0403      	lslcc	r3, r0, #16
 8016a1a:	2000      	movcs	r0, #0
 8016a1c:	2010      	movcc	r0, #16
 8016a1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016a22:	bf3c      	itt	cc
 8016a24:	021b      	lslcc	r3, r3, #8
 8016a26:	3008      	addcc	r0, #8
 8016a28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016a2c:	bf3c      	itt	cc
 8016a2e:	011b      	lslcc	r3, r3, #4
 8016a30:	3004      	addcc	r0, #4
 8016a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016a36:	bf3c      	itt	cc
 8016a38:	009b      	lslcc	r3, r3, #2
 8016a3a:	3002      	addcc	r0, #2
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	db05      	blt.n	8016a4c <__hi0bits+0x3c>
 8016a40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016a44:	f100 0001 	add.w	r0, r0, #1
 8016a48:	bf08      	it	eq
 8016a4a:	2020      	moveq	r0, #32
 8016a4c:	4770      	bx	lr

08016a4e <__lo0bits>:
 8016a4e:	6803      	ldr	r3, [r0, #0]
 8016a50:	4602      	mov	r2, r0
 8016a52:	f013 0007 	ands.w	r0, r3, #7
 8016a56:	d00b      	beq.n	8016a70 <__lo0bits+0x22>
 8016a58:	07d9      	lsls	r1, r3, #31
 8016a5a:	d421      	bmi.n	8016aa0 <__lo0bits+0x52>
 8016a5c:	0798      	lsls	r0, r3, #30
 8016a5e:	bf49      	itett	mi
 8016a60:	085b      	lsrmi	r3, r3, #1
 8016a62:	089b      	lsrpl	r3, r3, #2
 8016a64:	2001      	movmi	r0, #1
 8016a66:	6013      	strmi	r3, [r2, #0]
 8016a68:	bf5c      	itt	pl
 8016a6a:	6013      	strpl	r3, [r2, #0]
 8016a6c:	2002      	movpl	r0, #2
 8016a6e:	4770      	bx	lr
 8016a70:	b299      	uxth	r1, r3
 8016a72:	b909      	cbnz	r1, 8016a78 <__lo0bits+0x2a>
 8016a74:	0c1b      	lsrs	r3, r3, #16
 8016a76:	2010      	movs	r0, #16
 8016a78:	b2d9      	uxtb	r1, r3
 8016a7a:	b909      	cbnz	r1, 8016a80 <__lo0bits+0x32>
 8016a7c:	3008      	adds	r0, #8
 8016a7e:	0a1b      	lsrs	r3, r3, #8
 8016a80:	0719      	lsls	r1, r3, #28
 8016a82:	bf04      	itt	eq
 8016a84:	091b      	lsreq	r3, r3, #4
 8016a86:	3004      	addeq	r0, #4
 8016a88:	0799      	lsls	r1, r3, #30
 8016a8a:	bf04      	itt	eq
 8016a8c:	089b      	lsreq	r3, r3, #2
 8016a8e:	3002      	addeq	r0, #2
 8016a90:	07d9      	lsls	r1, r3, #31
 8016a92:	d403      	bmi.n	8016a9c <__lo0bits+0x4e>
 8016a94:	085b      	lsrs	r3, r3, #1
 8016a96:	f100 0001 	add.w	r0, r0, #1
 8016a9a:	d003      	beq.n	8016aa4 <__lo0bits+0x56>
 8016a9c:	6013      	str	r3, [r2, #0]
 8016a9e:	4770      	bx	lr
 8016aa0:	2000      	movs	r0, #0
 8016aa2:	4770      	bx	lr
 8016aa4:	2020      	movs	r0, #32
 8016aa6:	4770      	bx	lr

08016aa8 <__i2b>:
 8016aa8:	b510      	push	{r4, lr}
 8016aaa:	460c      	mov	r4, r1
 8016aac:	2101      	movs	r1, #1
 8016aae:	f7ff febd 	bl	801682c <_Balloc>
 8016ab2:	4602      	mov	r2, r0
 8016ab4:	b928      	cbnz	r0, 8016ac2 <__i2b+0x1a>
 8016ab6:	4b05      	ldr	r3, [pc, #20]	@ (8016acc <__i2b+0x24>)
 8016ab8:	4805      	ldr	r0, [pc, #20]	@ (8016ad0 <__i2b+0x28>)
 8016aba:	f240 1145 	movw	r1, #325	@ 0x145
 8016abe:	f001 fc75 	bl	80183ac <__assert_func>
 8016ac2:	2301      	movs	r3, #1
 8016ac4:	6144      	str	r4, [r0, #20]
 8016ac6:	6103      	str	r3, [r0, #16]
 8016ac8:	bd10      	pop	{r4, pc}
 8016aca:	bf00      	nop
 8016acc:	08019ec6 	.word	0x08019ec6
 8016ad0:	08019f4e 	.word	0x08019f4e

08016ad4 <__multiply>:
 8016ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ad8:	4617      	mov	r7, r2
 8016ada:	690a      	ldr	r2, [r1, #16]
 8016adc:	693b      	ldr	r3, [r7, #16]
 8016ade:	429a      	cmp	r2, r3
 8016ae0:	bfa8      	it	ge
 8016ae2:	463b      	movge	r3, r7
 8016ae4:	4689      	mov	r9, r1
 8016ae6:	bfa4      	itt	ge
 8016ae8:	460f      	movge	r7, r1
 8016aea:	4699      	movge	r9, r3
 8016aec:	693d      	ldr	r5, [r7, #16]
 8016aee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016af2:	68bb      	ldr	r3, [r7, #8]
 8016af4:	6879      	ldr	r1, [r7, #4]
 8016af6:	eb05 060a 	add.w	r6, r5, sl
 8016afa:	42b3      	cmp	r3, r6
 8016afc:	b085      	sub	sp, #20
 8016afe:	bfb8      	it	lt
 8016b00:	3101      	addlt	r1, #1
 8016b02:	f7ff fe93 	bl	801682c <_Balloc>
 8016b06:	b930      	cbnz	r0, 8016b16 <__multiply+0x42>
 8016b08:	4602      	mov	r2, r0
 8016b0a:	4b41      	ldr	r3, [pc, #260]	@ (8016c10 <__multiply+0x13c>)
 8016b0c:	4841      	ldr	r0, [pc, #260]	@ (8016c14 <__multiply+0x140>)
 8016b0e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016b12:	f001 fc4b 	bl	80183ac <__assert_func>
 8016b16:	f100 0414 	add.w	r4, r0, #20
 8016b1a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8016b1e:	4623      	mov	r3, r4
 8016b20:	2200      	movs	r2, #0
 8016b22:	4573      	cmp	r3, lr
 8016b24:	d320      	bcc.n	8016b68 <__multiply+0x94>
 8016b26:	f107 0814 	add.w	r8, r7, #20
 8016b2a:	f109 0114 	add.w	r1, r9, #20
 8016b2e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8016b32:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8016b36:	9302      	str	r3, [sp, #8]
 8016b38:	1beb      	subs	r3, r5, r7
 8016b3a:	3b15      	subs	r3, #21
 8016b3c:	f023 0303 	bic.w	r3, r3, #3
 8016b40:	3304      	adds	r3, #4
 8016b42:	3715      	adds	r7, #21
 8016b44:	42bd      	cmp	r5, r7
 8016b46:	bf38      	it	cc
 8016b48:	2304      	movcc	r3, #4
 8016b4a:	9301      	str	r3, [sp, #4]
 8016b4c:	9b02      	ldr	r3, [sp, #8]
 8016b4e:	9103      	str	r1, [sp, #12]
 8016b50:	428b      	cmp	r3, r1
 8016b52:	d80c      	bhi.n	8016b6e <__multiply+0x9a>
 8016b54:	2e00      	cmp	r6, #0
 8016b56:	dd03      	ble.n	8016b60 <__multiply+0x8c>
 8016b58:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d055      	beq.n	8016c0c <__multiply+0x138>
 8016b60:	6106      	str	r6, [r0, #16]
 8016b62:	b005      	add	sp, #20
 8016b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b68:	f843 2b04 	str.w	r2, [r3], #4
 8016b6c:	e7d9      	b.n	8016b22 <__multiply+0x4e>
 8016b6e:	f8b1 a000 	ldrh.w	sl, [r1]
 8016b72:	f1ba 0f00 	cmp.w	sl, #0
 8016b76:	d01f      	beq.n	8016bb8 <__multiply+0xe4>
 8016b78:	46c4      	mov	ip, r8
 8016b7a:	46a1      	mov	r9, r4
 8016b7c:	2700      	movs	r7, #0
 8016b7e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016b82:	f8d9 3000 	ldr.w	r3, [r9]
 8016b86:	fa1f fb82 	uxth.w	fp, r2
 8016b8a:	b29b      	uxth	r3, r3
 8016b8c:	fb0a 330b 	mla	r3, sl, fp, r3
 8016b90:	443b      	add	r3, r7
 8016b92:	f8d9 7000 	ldr.w	r7, [r9]
 8016b96:	0c12      	lsrs	r2, r2, #16
 8016b98:	0c3f      	lsrs	r7, r7, #16
 8016b9a:	fb0a 7202 	mla	r2, sl, r2, r7
 8016b9e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8016ba2:	b29b      	uxth	r3, r3
 8016ba4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016ba8:	4565      	cmp	r5, ip
 8016baa:	f849 3b04 	str.w	r3, [r9], #4
 8016bae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8016bb2:	d8e4      	bhi.n	8016b7e <__multiply+0xaa>
 8016bb4:	9b01      	ldr	r3, [sp, #4]
 8016bb6:	50e7      	str	r7, [r4, r3]
 8016bb8:	9b03      	ldr	r3, [sp, #12]
 8016bba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016bbe:	3104      	adds	r1, #4
 8016bc0:	f1b9 0f00 	cmp.w	r9, #0
 8016bc4:	d020      	beq.n	8016c08 <__multiply+0x134>
 8016bc6:	6823      	ldr	r3, [r4, #0]
 8016bc8:	4647      	mov	r7, r8
 8016bca:	46a4      	mov	ip, r4
 8016bcc:	f04f 0a00 	mov.w	sl, #0
 8016bd0:	f8b7 b000 	ldrh.w	fp, [r7]
 8016bd4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016bd8:	fb09 220b 	mla	r2, r9, fp, r2
 8016bdc:	4452      	add	r2, sl
 8016bde:	b29b      	uxth	r3, r3
 8016be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016be4:	f84c 3b04 	str.w	r3, [ip], #4
 8016be8:	f857 3b04 	ldr.w	r3, [r7], #4
 8016bec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016bf0:	f8bc 3000 	ldrh.w	r3, [ip]
 8016bf4:	fb09 330a 	mla	r3, r9, sl, r3
 8016bf8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8016bfc:	42bd      	cmp	r5, r7
 8016bfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016c02:	d8e5      	bhi.n	8016bd0 <__multiply+0xfc>
 8016c04:	9a01      	ldr	r2, [sp, #4]
 8016c06:	50a3      	str	r3, [r4, r2]
 8016c08:	3404      	adds	r4, #4
 8016c0a:	e79f      	b.n	8016b4c <__multiply+0x78>
 8016c0c:	3e01      	subs	r6, #1
 8016c0e:	e7a1      	b.n	8016b54 <__multiply+0x80>
 8016c10:	08019ec6 	.word	0x08019ec6
 8016c14:	08019f4e 	.word	0x08019f4e

08016c18 <__pow5mult>:
 8016c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c1c:	4615      	mov	r5, r2
 8016c1e:	f012 0203 	ands.w	r2, r2, #3
 8016c22:	4607      	mov	r7, r0
 8016c24:	460e      	mov	r6, r1
 8016c26:	d007      	beq.n	8016c38 <__pow5mult+0x20>
 8016c28:	4c25      	ldr	r4, [pc, #148]	@ (8016cc0 <__pow5mult+0xa8>)
 8016c2a:	3a01      	subs	r2, #1
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016c32:	f7ff fe5d 	bl	80168f0 <__multadd>
 8016c36:	4606      	mov	r6, r0
 8016c38:	10ad      	asrs	r5, r5, #2
 8016c3a:	d03d      	beq.n	8016cb8 <__pow5mult+0xa0>
 8016c3c:	69fc      	ldr	r4, [r7, #28]
 8016c3e:	b97c      	cbnz	r4, 8016c60 <__pow5mult+0x48>
 8016c40:	2010      	movs	r0, #16
 8016c42:	f7fe f817 	bl	8014c74 <malloc>
 8016c46:	4602      	mov	r2, r0
 8016c48:	61f8      	str	r0, [r7, #28]
 8016c4a:	b928      	cbnz	r0, 8016c58 <__pow5mult+0x40>
 8016c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8016cc4 <__pow5mult+0xac>)
 8016c4e:	481e      	ldr	r0, [pc, #120]	@ (8016cc8 <__pow5mult+0xb0>)
 8016c50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016c54:	f001 fbaa 	bl	80183ac <__assert_func>
 8016c58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016c5c:	6004      	str	r4, [r0, #0]
 8016c5e:	60c4      	str	r4, [r0, #12]
 8016c60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016c64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016c68:	b94c      	cbnz	r4, 8016c7e <__pow5mult+0x66>
 8016c6a:	f240 2171 	movw	r1, #625	@ 0x271
 8016c6e:	4638      	mov	r0, r7
 8016c70:	f7ff ff1a 	bl	8016aa8 <__i2b>
 8016c74:	2300      	movs	r3, #0
 8016c76:	f8c8 0008 	str.w	r0, [r8, #8]
 8016c7a:	4604      	mov	r4, r0
 8016c7c:	6003      	str	r3, [r0, #0]
 8016c7e:	f04f 0900 	mov.w	r9, #0
 8016c82:	07eb      	lsls	r3, r5, #31
 8016c84:	d50a      	bpl.n	8016c9c <__pow5mult+0x84>
 8016c86:	4631      	mov	r1, r6
 8016c88:	4622      	mov	r2, r4
 8016c8a:	4638      	mov	r0, r7
 8016c8c:	f7ff ff22 	bl	8016ad4 <__multiply>
 8016c90:	4631      	mov	r1, r6
 8016c92:	4680      	mov	r8, r0
 8016c94:	4638      	mov	r0, r7
 8016c96:	f7ff fe09 	bl	80168ac <_Bfree>
 8016c9a:	4646      	mov	r6, r8
 8016c9c:	106d      	asrs	r5, r5, #1
 8016c9e:	d00b      	beq.n	8016cb8 <__pow5mult+0xa0>
 8016ca0:	6820      	ldr	r0, [r4, #0]
 8016ca2:	b938      	cbnz	r0, 8016cb4 <__pow5mult+0x9c>
 8016ca4:	4622      	mov	r2, r4
 8016ca6:	4621      	mov	r1, r4
 8016ca8:	4638      	mov	r0, r7
 8016caa:	f7ff ff13 	bl	8016ad4 <__multiply>
 8016cae:	6020      	str	r0, [r4, #0]
 8016cb0:	f8c0 9000 	str.w	r9, [r0]
 8016cb4:	4604      	mov	r4, r0
 8016cb6:	e7e4      	b.n	8016c82 <__pow5mult+0x6a>
 8016cb8:	4630      	mov	r0, r6
 8016cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016cbe:	bf00      	nop
 8016cc0:	0801a18c 	.word	0x0801a18c
 8016cc4:	08019f37 	.word	0x08019f37
 8016cc8:	08019f4e 	.word	0x08019f4e

08016ccc <__lshift>:
 8016ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cd0:	460c      	mov	r4, r1
 8016cd2:	6849      	ldr	r1, [r1, #4]
 8016cd4:	6923      	ldr	r3, [r4, #16]
 8016cd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016cda:	68a3      	ldr	r3, [r4, #8]
 8016cdc:	4607      	mov	r7, r0
 8016cde:	4691      	mov	r9, r2
 8016ce0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016ce4:	f108 0601 	add.w	r6, r8, #1
 8016ce8:	42b3      	cmp	r3, r6
 8016cea:	db0b      	blt.n	8016d04 <__lshift+0x38>
 8016cec:	4638      	mov	r0, r7
 8016cee:	f7ff fd9d 	bl	801682c <_Balloc>
 8016cf2:	4605      	mov	r5, r0
 8016cf4:	b948      	cbnz	r0, 8016d0a <__lshift+0x3e>
 8016cf6:	4602      	mov	r2, r0
 8016cf8:	4b28      	ldr	r3, [pc, #160]	@ (8016d9c <__lshift+0xd0>)
 8016cfa:	4829      	ldr	r0, [pc, #164]	@ (8016da0 <__lshift+0xd4>)
 8016cfc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016d00:	f001 fb54 	bl	80183ac <__assert_func>
 8016d04:	3101      	adds	r1, #1
 8016d06:	005b      	lsls	r3, r3, #1
 8016d08:	e7ee      	b.n	8016ce8 <__lshift+0x1c>
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	f100 0114 	add.w	r1, r0, #20
 8016d10:	f100 0210 	add.w	r2, r0, #16
 8016d14:	4618      	mov	r0, r3
 8016d16:	4553      	cmp	r3, sl
 8016d18:	db33      	blt.n	8016d82 <__lshift+0xb6>
 8016d1a:	6920      	ldr	r0, [r4, #16]
 8016d1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016d20:	f104 0314 	add.w	r3, r4, #20
 8016d24:	f019 091f 	ands.w	r9, r9, #31
 8016d28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016d2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016d30:	d02b      	beq.n	8016d8a <__lshift+0xbe>
 8016d32:	f1c9 0e20 	rsb	lr, r9, #32
 8016d36:	468a      	mov	sl, r1
 8016d38:	2200      	movs	r2, #0
 8016d3a:	6818      	ldr	r0, [r3, #0]
 8016d3c:	fa00 f009 	lsl.w	r0, r0, r9
 8016d40:	4310      	orrs	r0, r2
 8016d42:	f84a 0b04 	str.w	r0, [sl], #4
 8016d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d4a:	459c      	cmp	ip, r3
 8016d4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8016d50:	d8f3      	bhi.n	8016d3a <__lshift+0x6e>
 8016d52:	ebac 0304 	sub.w	r3, ip, r4
 8016d56:	3b15      	subs	r3, #21
 8016d58:	f023 0303 	bic.w	r3, r3, #3
 8016d5c:	3304      	adds	r3, #4
 8016d5e:	f104 0015 	add.w	r0, r4, #21
 8016d62:	4560      	cmp	r0, ip
 8016d64:	bf88      	it	hi
 8016d66:	2304      	movhi	r3, #4
 8016d68:	50ca      	str	r2, [r1, r3]
 8016d6a:	b10a      	cbz	r2, 8016d70 <__lshift+0xa4>
 8016d6c:	f108 0602 	add.w	r6, r8, #2
 8016d70:	3e01      	subs	r6, #1
 8016d72:	4638      	mov	r0, r7
 8016d74:	612e      	str	r6, [r5, #16]
 8016d76:	4621      	mov	r1, r4
 8016d78:	f7ff fd98 	bl	80168ac <_Bfree>
 8016d7c:	4628      	mov	r0, r5
 8016d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d82:	f842 0f04 	str.w	r0, [r2, #4]!
 8016d86:	3301      	adds	r3, #1
 8016d88:	e7c5      	b.n	8016d16 <__lshift+0x4a>
 8016d8a:	3904      	subs	r1, #4
 8016d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d90:	f841 2f04 	str.w	r2, [r1, #4]!
 8016d94:	459c      	cmp	ip, r3
 8016d96:	d8f9      	bhi.n	8016d8c <__lshift+0xc0>
 8016d98:	e7ea      	b.n	8016d70 <__lshift+0xa4>
 8016d9a:	bf00      	nop
 8016d9c:	08019ec6 	.word	0x08019ec6
 8016da0:	08019f4e 	.word	0x08019f4e

08016da4 <__mcmp>:
 8016da4:	690a      	ldr	r2, [r1, #16]
 8016da6:	4603      	mov	r3, r0
 8016da8:	6900      	ldr	r0, [r0, #16]
 8016daa:	1a80      	subs	r0, r0, r2
 8016dac:	b530      	push	{r4, r5, lr}
 8016dae:	d10e      	bne.n	8016dce <__mcmp+0x2a>
 8016db0:	3314      	adds	r3, #20
 8016db2:	3114      	adds	r1, #20
 8016db4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016db8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016dbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016dc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016dc4:	4295      	cmp	r5, r2
 8016dc6:	d003      	beq.n	8016dd0 <__mcmp+0x2c>
 8016dc8:	d205      	bcs.n	8016dd6 <__mcmp+0x32>
 8016dca:	f04f 30ff 	mov.w	r0, #4294967295
 8016dce:	bd30      	pop	{r4, r5, pc}
 8016dd0:	42a3      	cmp	r3, r4
 8016dd2:	d3f3      	bcc.n	8016dbc <__mcmp+0x18>
 8016dd4:	e7fb      	b.n	8016dce <__mcmp+0x2a>
 8016dd6:	2001      	movs	r0, #1
 8016dd8:	e7f9      	b.n	8016dce <__mcmp+0x2a>
	...

08016ddc <__mdiff>:
 8016ddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016de0:	4689      	mov	r9, r1
 8016de2:	4606      	mov	r6, r0
 8016de4:	4611      	mov	r1, r2
 8016de6:	4648      	mov	r0, r9
 8016de8:	4614      	mov	r4, r2
 8016dea:	f7ff ffdb 	bl	8016da4 <__mcmp>
 8016dee:	1e05      	subs	r5, r0, #0
 8016df0:	d112      	bne.n	8016e18 <__mdiff+0x3c>
 8016df2:	4629      	mov	r1, r5
 8016df4:	4630      	mov	r0, r6
 8016df6:	f7ff fd19 	bl	801682c <_Balloc>
 8016dfa:	4602      	mov	r2, r0
 8016dfc:	b928      	cbnz	r0, 8016e0a <__mdiff+0x2e>
 8016dfe:	4b3f      	ldr	r3, [pc, #252]	@ (8016efc <__mdiff+0x120>)
 8016e00:	f240 2137 	movw	r1, #567	@ 0x237
 8016e04:	483e      	ldr	r0, [pc, #248]	@ (8016f00 <__mdiff+0x124>)
 8016e06:	f001 fad1 	bl	80183ac <__assert_func>
 8016e0a:	2301      	movs	r3, #1
 8016e0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016e10:	4610      	mov	r0, r2
 8016e12:	b003      	add	sp, #12
 8016e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e18:	bfbc      	itt	lt
 8016e1a:	464b      	movlt	r3, r9
 8016e1c:	46a1      	movlt	r9, r4
 8016e1e:	4630      	mov	r0, r6
 8016e20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016e24:	bfba      	itte	lt
 8016e26:	461c      	movlt	r4, r3
 8016e28:	2501      	movlt	r5, #1
 8016e2a:	2500      	movge	r5, #0
 8016e2c:	f7ff fcfe 	bl	801682c <_Balloc>
 8016e30:	4602      	mov	r2, r0
 8016e32:	b918      	cbnz	r0, 8016e3c <__mdiff+0x60>
 8016e34:	4b31      	ldr	r3, [pc, #196]	@ (8016efc <__mdiff+0x120>)
 8016e36:	f240 2145 	movw	r1, #581	@ 0x245
 8016e3a:	e7e3      	b.n	8016e04 <__mdiff+0x28>
 8016e3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016e40:	6926      	ldr	r6, [r4, #16]
 8016e42:	60c5      	str	r5, [r0, #12]
 8016e44:	f109 0310 	add.w	r3, r9, #16
 8016e48:	f109 0514 	add.w	r5, r9, #20
 8016e4c:	f104 0e14 	add.w	lr, r4, #20
 8016e50:	f100 0b14 	add.w	fp, r0, #20
 8016e54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016e58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016e5c:	9301      	str	r3, [sp, #4]
 8016e5e:	46d9      	mov	r9, fp
 8016e60:	f04f 0c00 	mov.w	ip, #0
 8016e64:	9b01      	ldr	r3, [sp, #4]
 8016e66:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016e6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016e6e:	9301      	str	r3, [sp, #4]
 8016e70:	fa1f f38a 	uxth.w	r3, sl
 8016e74:	4619      	mov	r1, r3
 8016e76:	b283      	uxth	r3, r0
 8016e78:	1acb      	subs	r3, r1, r3
 8016e7a:	0c00      	lsrs	r0, r0, #16
 8016e7c:	4463      	add	r3, ip
 8016e7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016e82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016e86:	b29b      	uxth	r3, r3
 8016e88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016e8c:	4576      	cmp	r6, lr
 8016e8e:	f849 3b04 	str.w	r3, [r9], #4
 8016e92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016e96:	d8e5      	bhi.n	8016e64 <__mdiff+0x88>
 8016e98:	1b33      	subs	r3, r6, r4
 8016e9a:	3b15      	subs	r3, #21
 8016e9c:	f023 0303 	bic.w	r3, r3, #3
 8016ea0:	3415      	adds	r4, #21
 8016ea2:	3304      	adds	r3, #4
 8016ea4:	42a6      	cmp	r6, r4
 8016ea6:	bf38      	it	cc
 8016ea8:	2304      	movcc	r3, #4
 8016eaa:	441d      	add	r5, r3
 8016eac:	445b      	add	r3, fp
 8016eae:	461e      	mov	r6, r3
 8016eb0:	462c      	mov	r4, r5
 8016eb2:	4544      	cmp	r4, r8
 8016eb4:	d30e      	bcc.n	8016ed4 <__mdiff+0xf8>
 8016eb6:	f108 0103 	add.w	r1, r8, #3
 8016eba:	1b49      	subs	r1, r1, r5
 8016ebc:	f021 0103 	bic.w	r1, r1, #3
 8016ec0:	3d03      	subs	r5, #3
 8016ec2:	45a8      	cmp	r8, r5
 8016ec4:	bf38      	it	cc
 8016ec6:	2100      	movcc	r1, #0
 8016ec8:	440b      	add	r3, r1
 8016eca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016ece:	b191      	cbz	r1, 8016ef6 <__mdiff+0x11a>
 8016ed0:	6117      	str	r7, [r2, #16]
 8016ed2:	e79d      	b.n	8016e10 <__mdiff+0x34>
 8016ed4:	f854 1b04 	ldr.w	r1, [r4], #4
 8016ed8:	46e6      	mov	lr, ip
 8016eda:	0c08      	lsrs	r0, r1, #16
 8016edc:	fa1c fc81 	uxtah	ip, ip, r1
 8016ee0:	4471      	add	r1, lr
 8016ee2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016ee6:	b289      	uxth	r1, r1
 8016ee8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016eec:	f846 1b04 	str.w	r1, [r6], #4
 8016ef0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016ef4:	e7dd      	b.n	8016eb2 <__mdiff+0xd6>
 8016ef6:	3f01      	subs	r7, #1
 8016ef8:	e7e7      	b.n	8016eca <__mdiff+0xee>
 8016efa:	bf00      	nop
 8016efc:	08019ec6 	.word	0x08019ec6
 8016f00:	08019f4e 	.word	0x08019f4e

08016f04 <__ulp>:
 8016f04:	b082      	sub	sp, #8
 8016f06:	ed8d 0b00 	vstr	d0, [sp]
 8016f0a:	9a01      	ldr	r2, [sp, #4]
 8016f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8016f4c <__ulp+0x48>)
 8016f0e:	4013      	ands	r3, r2
 8016f10:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	dc08      	bgt.n	8016f2a <__ulp+0x26>
 8016f18:	425b      	negs	r3, r3
 8016f1a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8016f1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016f22:	da04      	bge.n	8016f2e <__ulp+0x2a>
 8016f24:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016f28:	4113      	asrs	r3, r2
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	e008      	b.n	8016f40 <__ulp+0x3c>
 8016f2e:	f1a2 0314 	sub.w	r3, r2, #20
 8016f32:	2b1e      	cmp	r3, #30
 8016f34:	bfda      	itte	le
 8016f36:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016f3a:	40da      	lsrle	r2, r3
 8016f3c:	2201      	movgt	r2, #1
 8016f3e:	2300      	movs	r3, #0
 8016f40:	4619      	mov	r1, r3
 8016f42:	4610      	mov	r0, r2
 8016f44:	ec41 0b10 	vmov	d0, r0, r1
 8016f48:	b002      	add	sp, #8
 8016f4a:	4770      	bx	lr
 8016f4c:	7ff00000 	.word	0x7ff00000

08016f50 <__b2d>:
 8016f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f54:	6906      	ldr	r6, [r0, #16]
 8016f56:	f100 0814 	add.w	r8, r0, #20
 8016f5a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016f5e:	1f37      	subs	r7, r6, #4
 8016f60:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016f64:	4610      	mov	r0, r2
 8016f66:	f7ff fd53 	bl	8016a10 <__hi0bits>
 8016f6a:	f1c0 0320 	rsb	r3, r0, #32
 8016f6e:	280a      	cmp	r0, #10
 8016f70:	600b      	str	r3, [r1, #0]
 8016f72:	491b      	ldr	r1, [pc, #108]	@ (8016fe0 <__b2d+0x90>)
 8016f74:	dc15      	bgt.n	8016fa2 <__b2d+0x52>
 8016f76:	f1c0 0c0b 	rsb	ip, r0, #11
 8016f7a:	fa22 f30c 	lsr.w	r3, r2, ip
 8016f7e:	45b8      	cmp	r8, r7
 8016f80:	ea43 0501 	orr.w	r5, r3, r1
 8016f84:	bf34      	ite	cc
 8016f86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016f8a:	2300      	movcs	r3, #0
 8016f8c:	3015      	adds	r0, #21
 8016f8e:	fa02 f000 	lsl.w	r0, r2, r0
 8016f92:	fa23 f30c 	lsr.w	r3, r3, ip
 8016f96:	4303      	orrs	r3, r0
 8016f98:	461c      	mov	r4, r3
 8016f9a:	ec45 4b10 	vmov	d0, r4, r5
 8016f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fa2:	45b8      	cmp	r8, r7
 8016fa4:	bf3a      	itte	cc
 8016fa6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016faa:	f1a6 0708 	subcc.w	r7, r6, #8
 8016fae:	2300      	movcs	r3, #0
 8016fb0:	380b      	subs	r0, #11
 8016fb2:	d012      	beq.n	8016fda <__b2d+0x8a>
 8016fb4:	f1c0 0120 	rsb	r1, r0, #32
 8016fb8:	fa23 f401 	lsr.w	r4, r3, r1
 8016fbc:	4082      	lsls	r2, r0
 8016fbe:	4322      	orrs	r2, r4
 8016fc0:	4547      	cmp	r7, r8
 8016fc2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016fc6:	bf8c      	ite	hi
 8016fc8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016fcc:	2200      	movls	r2, #0
 8016fce:	4083      	lsls	r3, r0
 8016fd0:	40ca      	lsrs	r2, r1
 8016fd2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016fd6:	4313      	orrs	r3, r2
 8016fd8:	e7de      	b.n	8016f98 <__b2d+0x48>
 8016fda:	ea42 0501 	orr.w	r5, r2, r1
 8016fde:	e7db      	b.n	8016f98 <__b2d+0x48>
 8016fe0:	3ff00000 	.word	0x3ff00000

08016fe4 <__d2b>:
 8016fe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016fe8:	460f      	mov	r7, r1
 8016fea:	2101      	movs	r1, #1
 8016fec:	ec59 8b10 	vmov	r8, r9, d0
 8016ff0:	4616      	mov	r6, r2
 8016ff2:	f7ff fc1b 	bl	801682c <_Balloc>
 8016ff6:	4604      	mov	r4, r0
 8016ff8:	b930      	cbnz	r0, 8017008 <__d2b+0x24>
 8016ffa:	4602      	mov	r2, r0
 8016ffc:	4b23      	ldr	r3, [pc, #140]	@ (801708c <__d2b+0xa8>)
 8016ffe:	4824      	ldr	r0, [pc, #144]	@ (8017090 <__d2b+0xac>)
 8017000:	f240 310f 	movw	r1, #783	@ 0x30f
 8017004:	f001 f9d2 	bl	80183ac <__assert_func>
 8017008:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801700c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017010:	b10d      	cbz	r5, 8017016 <__d2b+0x32>
 8017012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017016:	9301      	str	r3, [sp, #4]
 8017018:	f1b8 0300 	subs.w	r3, r8, #0
 801701c:	d023      	beq.n	8017066 <__d2b+0x82>
 801701e:	4668      	mov	r0, sp
 8017020:	9300      	str	r3, [sp, #0]
 8017022:	f7ff fd14 	bl	8016a4e <__lo0bits>
 8017026:	e9dd 1200 	ldrd	r1, r2, [sp]
 801702a:	b1d0      	cbz	r0, 8017062 <__d2b+0x7e>
 801702c:	f1c0 0320 	rsb	r3, r0, #32
 8017030:	fa02 f303 	lsl.w	r3, r2, r3
 8017034:	430b      	orrs	r3, r1
 8017036:	40c2      	lsrs	r2, r0
 8017038:	6163      	str	r3, [r4, #20]
 801703a:	9201      	str	r2, [sp, #4]
 801703c:	9b01      	ldr	r3, [sp, #4]
 801703e:	61a3      	str	r3, [r4, #24]
 8017040:	2b00      	cmp	r3, #0
 8017042:	bf0c      	ite	eq
 8017044:	2201      	moveq	r2, #1
 8017046:	2202      	movne	r2, #2
 8017048:	6122      	str	r2, [r4, #16]
 801704a:	b1a5      	cbz	r5, 8017076 <__d2b+0x92>
 801704c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017050:	4405      	add	r5, r0
 8017052:	603d      	str	r5, [r7, #0]
 8017054:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017058:	6030      	str	r0, [r6, #0]
 801705a:	4620      	mov	r0, r4
 801705c:	b003      	add	sp, #12
 801705e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017062:	6161      	str	r1, [r4, #20]
 8017064:	e7ea      	b.n	801703c <__d2b+0x58>
 8017066:	a801      	add	r0, sp, #4
 8017068:	f7ff fcf1 	bl	8016a4e <__lo0bits>
 801706c:	9b01      	ldr	r3, [sp, #4]
 801706e:	6163      	str	r3, [r4, #20]
 8017070:	3020      	adds	r0, #32
 8017072:	2201      	movs	r2, #1
 8017074:	e7e8      	b.n	8017048 <__d2b+0x64>
 8017076:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801707a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801707e:	6038      	str	r0, [r7, #0]
 8017080:	6918      	ldr	r0, [r3, #16]
 8017082:	f7ff fcc5 	bl	8016a10 <__hi0bits>
 8017086:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801708a:	e7e5      	b.n	8017058 <__d2b+0x74>
 801708c:	08019ec6 	.word	0x08019ec6
 8017090:	08019f4e 	.word	0x08019f4e

08017094 <__ratio>:
 8017094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017098:	b085      	sub	sp, #20
 801709a:	e9cd 1000 	strd	r1, r0, [sp]
 801709e:	a902      	add	r1, sp, #8
 80170a0:	f7ff ff56 	bl	8016f50 <__b2d>
 80170a4:	9800      	ldr	r0, [sp, #0]
 80170a6:	a903      	add	r1, sp, #12
 80170a8:	ec55 4b10 	vmov	r4, r5, d0
 80170ac:	f7ff ff50 	bl	8016f50 <__b2d>
 80170b0:	9b01      	ldr	r3, [sp, #4]
 80170b2:	6919      	ldr	r1, [r3, #16]
 80170b4:	9b00      	ldr	r3, [sp, #0]
 80170b6:	691b      	ldr	r3, [r3, #16]
 80170b8:	1ac9      	subs	r1, r1, r3
 80170ba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80170be:	1a9b      	subs	r3, r3, r2
 80170c0:	ec5b ab10 	vmov	sl, fp, d0
 80170c4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	bfce      	itee	gt
 80170cc:	462a      	movgt	r2, r5
 80170ce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80170d2:	465a      	movle	r2, fp
 80170d4:	462f      	mov	r7, r5
 80170d6:	46d9      	mov	r9, fp
 80170d8:	bfcc      	ite	gt
 80170da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80170de:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80170e2:	464b      	mov	r3, r9
 80170e4:	4652      	mov	r2, sl
 80170e6:	4620      	mov	r0, r4
 80170e8:	4639      	mov	r1, r7
 80170ea:	f7f1 fbdf 	bl	80088ac <__aeabi_ddiv>
 80170ee:	ec41 0b10 	vmov	d0, r0, r1
 80170f2:	b005      	add	sp, #20
 80170f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080170f8 <__copybits>:
 80170f8:	3901      	subs	r1, #1
 80170fa:	b570      	push	{r4, r5, r6, lr}
 80170fc:	1149      	asrs	r1, r1, #5
 80170fe:	6914      	ldr	r4, [r2, #16]
 8017100:	3101      	adds	r1, #1
 8017102:	f102 0314 	add.w	r3, r2, #20
 8017106:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801710a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801710e:	1f05      	subs	r5, r0, #4
 8017110:	42a3      	cmp	r3, r4
 8017112:	d30c      	bcc.n	801712e <__copybits+0x36>
 8017114:	1aa3      	subs	r3, r4, r2
 8017116:	3b11      	subs	r3, #17
 8017118:	f023 0303 	bic.w	r3, r3, #3
 801711c:	3211      	adds	r2, #17
 801711e:	42a2      	cmp	r2, r4
 8017120:	bf88      	it	hi
 8017122:	2300      	movhi	r3, #0
 8017124:	4418      	add	r0, r3
 8017126:	2300      	movs	r3, #0
 8017128:	4288      	cmp	r0, r1
 801712a:	d305      	bcc.n	8017138 <__copybits+0x40>
 801712c:	bd70      	pop	{r4, r5, r6, pc}
 801712e:	f853 6b04 	ldr.w	r6, [r3], #4
 8017132:	f845 6f04 	str.w	r6, [r5, #4]!
 8017136:	e7eb      	b.n	8017110 <__copybits+0x18>
 8017138:	f840 3b04 	str.w	r3, [r0], #4
 801713c:	e7f4      	b.n	8017128 <__copybits+0x30>

0801713e <__any_on>:
 801713e:	f100 0214 	add.w	r2, r0, #20
 8017142:	6900      	ldr	r0, [r0, #16]
 8017144:	114b      	asrs	r3, r1, #5
 8017146:	4298      	cmp	r0, r3
 8017148:	b510      	push	{r4, lr}
 801714a:	db11      	blt.n	8017170 <__any_on+0x32>
 801714c:	dd0a      	ble.n	8017164 <__any_on+0x26>
 801714e:	f011 011f 	ands.w	r1, r1, #31
 8017152:	d007      	beq.n	8017164 <__any_on+0x26>
 8017154:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017158:	fa24 f001 	lsr.w	r0, r4, r1
 801715c:	fa00 f101 	lsl.w	r1, r0, r1
 8017160:	428c      	cmp	r4, r1
 8017162:	d10b      	bne.n	801717c <__any_on+0x3e>
 8017164:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017168:	4293      	cmp	r3, r2
 801716a:	d803      	bhi.n	8017174 <__any_on+0x36>
 801716c:	2000      	movs	r0, #0
 801716e:	bd10      	pop	{r4, pc}
 8017170:	4603      	mov	r3, r0
 8017172:	e7f7      	b.n	8017164 <__any_on+0x26>
 8017174:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017178:	2900      	cmp	r1, #0
 801717a:	d0f5      	beq.n	8017168 <__any_on+0x2a>
 801717c:	2001      	movs	r0, #1
 801717e:	e7f6      	b.n	801716e <__any_on+0x30>

08017180 <_malloc_usable_size_r>:
 8017180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017184:	1f18      	subs	r0, r3, #4
 8017186:	2b00      	cmp	r3, #0
 8017188:	bfbc      	itt	lt
 801718a:	580b      	ldrlt	r3, [r1, r0]
 801718c:	18c0      	addlt	r0, r0, r3
 801718e:	4770      	bx	lr

08017190 <__ascii_wctomb>:
 8017190:	4603      	mov	r3, r0
 8017192:	4608      	mov	r0, r1
 8017194:	b141      	cbz	r1, 80171a8 <__ascii_wctomb+0x18>
 8017196:	2aff      	cmp	r2, #255	@ 0xff
 8017198:	d904      	bls.n	80171a4 <__ascii_wctomb+0x14>
 801719a:	228a      	movs	r2, #138	@ 0x8a
 801719c:	601a      	str	r2, [r3, #0]
 801719e:	f04f 30ff 	mov.w	r0, #4294967295
 80171a2:	4770      	bx	lr
 80171a4:	700a      	strb	r2, [r1, #0]
 80171a6:	2001      	movs	r0, #1
 80171a8:	4770      	bx	lr

080171aa <__ssputs_r>:
 80171aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171ae:	688e      	ldr	r6, [r1, #8]
 80171b0:	461f      	mov	r7, r3
 80171b2:	42be      	cmp	r6, r7
 80171b4:	680b      	ldr	r3, [r1, #0]
 80171b6:	4682      	mov	sl, r0
 80171b8:	460c      	mov	r4, r1
 80171ba:	4690      	mov	r8, r2
 80171bc:	d82d      	bhi.n	801721a <__ssputs_r+0x70>
 80171be:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80171c2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80171c6:	d026      	beq.n	8017216 <__ssputs_r+0x6c>
 80171c8:	6965      	ldr	r5, [r4, #20]
 80171ca:	6909      	ldr	r1, [r1, #16]
 80171cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80171d0:	eba3 0901 	sub.w	r9, r3, r1
 80171d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80171d8:	1c7b      	adds	r3, r7, #1
 80171da:	444b      	add	r3, r9
 80171dc:	106d      	asrs	r5, r5, #1
 80171de:	429d      	cmp	r5, r3
 80171e0:	bf38      	it	cc
 80171e2:	461d      	movcc	r5, r3
 80171e4:	0553      	lsls	r3, r2, #21
 80171e6:	d527      	bpl.n	8017238 <__ssputs_r+0x8e>
 80171e8:	4629      	mov	r1, r5
 80171ea:	f7fd fd75 	bl	8014cd8 <_malloc_r>
 80171ee:	4606      	mov	r6, r0
 80171f0:	b360      	cbz	r0, 801724c <__ssputs_r+0xa2>
 80171f2:	6921      	ldr	r1, [r4, #16]
 80171f4:	464a      	mov	r2, r9
 80171f6:	f7fe ff6c 	bl	80160d2 <memcpy>
 80171fa:	89a3      	ldrh	r3, [r4, #12]
 80171fc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017204:	81a3      	strh	r3, [r4, #12]
 8017206:	6126      	str	r6, [r4, #16]
 8017208:	6165      	str	r5, [r4, #20]
 801720a:	444e      	add	r6, r9
 801720c:	eba5 0509 	sub.w	r5, r5, r9
 8017210:	6026      	str	r6, [r4, #0]
 8017212:	60a5      	str	r5, [r4, #8]
 8017214:	463e      	mov	r6, r7
 8017216:	42be      	cmp	r6, r7
 8017218:	d900      	bls.n	801721c <__ssputs_r+0x72>
 801721a:	463e      	mov	r6, r7
 801721c:	6820      	ldr	r0, [r4, #0]
 801721e:	4632      	mov	r2, r6
 8017220:	4641      	mov	r1, r8
 8017222:	f001 f886 	bl	8018332 <memmove>
 8017226:	68a3      	ldr	r3, [r4, #8]
 8017228:	1b9b      	subs	r3, r3, r6
 801722a:	60a3      	str	r3, [r4, #8]
 801722c:	6823      	ldr	r3, [r4, #0]
 801722e:	4433      	add	r3, r6
 8017230:	6023      	str	r3, [r4, #0]
 8017232:	2000      	movs	r0, #0
 8017234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017238:	462a      	mov	r2, r5
 801723a:	f7fd fde1 	bl	8014e00 <_realloc_r>
 801723e:	4606      	mov	r6, r0
 8017240:	2800      	cmp	r0, #0
 8017242:	d1e0      	bne.n	8017206 <__ssputs_r+0x5c>
 8017244:	6921      	ldr	r1, [r4, #16]
 8017246:	4650      	mov	r0, sl
 8017248:	f7fe ff5a 	bl	8016100 <_free_r>
 801724c:	230c      	movs	r3, #12
 801724e:	f8ca 3000 	str.w	r3, [sl]
 8017252:	89a3      	ldrh	r3, [r4, #12]
 8017254:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017258:	81a3      	strh	r3, [r4, #12]
 801725a:	f04f 30ff 	mov.w	r0, #4294967295
 801725e:	e7e9      	b.n	8017234 <__ssputs_r+0x8a>

08017260 <_svfiprintf_r>:
 8017260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017264:	4698      	mov	r8, r3
 8017266:	898b      	ldrh	r3, [r1, #12]
 8017268:	061b      	lsls	r3, r3, #24
 801726a:	b09d      	sub	sp, #116	@ 0x74
 801726c:	4607      	mov	r7, r0
 801726e:	460d      	mov	r5, r1
 8017270:	4614      	mov	r4, r2
 8017272:	d510      	bpl.n	8017296 <_svfiprintf_r+0x36>
 8017274:	690b      	ldr	r3, [r1, #16]
 8017276:	b973      	cbnz	r3, 8017296 <_svfiprintf_r+0x36>
 8017278:	2140      	movs	r1, #64	@ 0x40
 801727a:	f7fd fd2d 	bl	8014cd8 <_malloc_r>
 801727e:	6028      	str	r0, [r5, #0]
 8017280:	6128      	str	r0, [r5, #16]
 8017282:	b930      	cbnz	r0, 8017292 <_svfiprintf_r+0x32>
 8017284:	230c      	movs	r3, #12
 8017286:	603b      	str	r3, [r7, #0]
 8017288:	f04f 30ff 	mov.w	r0, #4294967295
 801728c:	b01d      	add	sp, #116	@ 0x74
 801728e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017292:	2340      	movs	r3, #64	@ 0x40
 8017294:	616b      	str	r3, [r5, #20]
 8017296:	2300      	movs	r3, #0
 8017298:	9309      	str	r3, [sp, #36]	@ 0x24
 801729a:	2320      	movs	r3, #32
 801729c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80172a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80172a4:	2330      	movs	r3, #48	@ 0x30
 80172a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017444 <_svfiprintf_r+0x1e4>
 80172aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80172ae:	f04f 0901 	mov.w	r9, #1
 80172b2:	4623      	mov	r3, r4
 80172b4:	469a      	mov	sl, r3
 80172b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172ba:	b10a      	cbz	r2, 80172c0 <_svfiprintf_r+0x60>
 80172bc:	2a25      	cmp	r2, #37	@ 0x25
 80172be:	d1f9      	bne.n	80172b4 <_svfiprintf_r+0x54>
 80172c0:	ebba 0b04 	subs.w	fp, sl, r4
 80172c4:	d00b      	beq.n	80172de <_svfiprintf_r+0x7e>
 80172c6:	465b      	mov	r3, fp
 80172c8:	4622      	mov	r2, r4
 80172ca:	4629      	mov	r1, r5
 80172cc:	4638      	mov	r0, r7
 80172ce:	f7ff ff6c 	bl	80171aa <__ssputs_r>
 80172d2:	3001      	adds	r0, #1
 80172d4:	f000 80a7 	beq.w	8017426 <_svfiprintf_r+0x1c6>
 80172d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80172da:	445a      	add	r2, fp
 80172dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80172de:	f89a 3000 	ldrb.w	r3, [sl]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	f000 809f 	beq.w	8017426 <_svfiprintf_r+0x1c6>
 80172e8:	2300      	movs	r3, #0
 80172ea:	f04f 32ff 	mov.w	r2, #4294967295
 80172ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80172f2:	f10a 0a01 	add.w	sl, sl, #1
 80172f6:	9304      	str	r3, [sp, #16]
 80172f8:	9307      	str	r3, [sp, #28]
 80172fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80172fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8017300:	4654      	mov	r4, sl
 8017302:	2205      	movs	r2, #5
 8017304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017308:	484e      	ldr	r0, [pc, #312]	@ (8017444 <_svfiprintf_r+0x1e4>)
 801730a:	f7f0 ff99 	bl	8008240 <memchr>
 801730e:	9a04      	ldr	r2, [sp, #16]
 8017310:	b9d8      	cbnz	r0, 801734a <_svfiprintf_r+0xea>
 8017312:	06d0      	lsls	r0, r2, #27
 8017314:	bf44      	itt	mi
 8017316:	2320      	movmi	r3, #32
 8017318:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801731c:	0711      	lsls	r1, r2, #28
 801731e:	bf44      	itt	mi
 8017320:	232b      	movmi	r3, #43	@ 0x2b
 8017322:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017326:	f89a 3000 	ldrb.w	r3, [sl]
 801732a:	2b2a      	cmp	r3, #42	@ 0x2a
 801732c:	d015      	beq.n	801735a <_svfiprintf_r+0xfa>
 801732e:	9a07      	ldr	r2, [sp, #28]
 8017330:	4654      	mov	r4, sl
 8017332:	2000      	movs	r0, #0
 8017334:	f04f 0c0a 	mov.w	ip, #10
 8017338:	4621      	mov	r1, r4
 801733a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801733e:	3b30      	subs	r3, #48	@ 0x30
 8017340:	2b09      	cmp	r3, #9
 8017342:	d94b      	bls.n	80173dc <_svfiprintf_r+0x17c>
 8017344:	b1b0      	cbz	r0, 8017374 <_svfiprintf_r+0x114>
 8017346:	9207      	str	r2, [sp, #28]
 8017348:	e014      	b.n	8017374 <_svfiprintf_r+0x114>
 801734a:	eba0 0308 	sub.w	r3, r0, r8
 801734e:	fa09 f303 	lsl.w	r3, r9, r3
 8017352:	4313      	orrs	r3, r2
 8017354:	9304      	str	r3, [sp, #16]
 8017356:	46a2      	mov	sl, r4
 8017358:	e7d2      	b.n	8017300 <_svfiprintf_r+0xa0>
 801735a:	9b03      	ldr	r3, [sp, #12]
 801735c:	1d19      	adds	r1, r3, #4
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	9103      	str	r1, [sp, #12]
 8017362:	2b00      	cmp	r3, #0
 8017364:	bfbb      	ittet	lt
 8017366:	425b      	neglt	r3, r3
 8017368:	f042 0202 	orrlt.w	r2, r2, #2
 801736c:	9307      	strge	r3, [sp, #28]
 801736e:	9307      	strlt	r3, [sp, #28]
 8017370:	bfb8      	it	lt
 8017372:	9204      	strlt	r2, [sp, #16]
 8017374:	7823      	ldrb	r3, [r4, #0]
 8017376:	2b2e      	cmp	r3, #46	@ 0x2e
 8017378:	d10a      	bne.n	8017390 <_svfiprintf_r+0x130>
 801737a:	7863      	ldrb	r3, [r4, #1]
 801737c:	2b2a      	cmp	r3, #42	@ 0x2a
 801737e:	d132      	bne.n	80173e6 <_svfiprintf_r+0x186>
 8017380:	9b03      	ldr	r3, [sp, #12]
 8017382:	1d1a      	adds	r2, r3, #4
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	9203      	str	r2, [sp, #12]
 8017388:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801738c:	3402      	adds	r4, #2
 801738e:	9305      	str	r3, [sp, #20]
 8017390:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017454 <_svfiprintf_r+0x1f4>
 8017394:	7821      	ldrb	r1, [r4, #0]
 8017396:	2203      	movs	r2, #3
 8017398:	4650      	mov	r0, sl
 801739a:	f7f0 ff51 	bl	8008240 <memchr>
 801739e:	b138      	cbz	r0, 80173b0 <_svfiprintf_r+0x150>
 80173a0:	9b04      	ldr	r3, [sp, #16]
 80173a2:	eba0 000a 	sub.w	r0, r0, sl
 80173a6:	2240      	movs	r2, #64	@ 0x40
 80173a8:	4082      	lsls	r2, r0
 80173aa:	4313      	orrs	r3, r2
 80173ac:	3401      	adds	r4, #1
 80173ae:	9304      	str	r3, [sp, #16]
 80173b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173b4:	4824      	ldr	r0, [pc, #144]	@ (8017448 <_svfiprintf_r+0x1e8>)
 80173b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80173ba:	2206      	movs	r2, #6
 80173bc:	f7f0 ff40 	bl	8008240 <memchr>
 80173c0:	2800      	cmp	r0, #0
 80173c2:	d036      	beq.n	8017432 <_svfiprintf_r+0x1d2>
 80173c4:	4b21      	ldr	r3, [pc, #132]	@ (801744c <_svfiprintf_r+0x1ec>)
 80173c6:	bb1b      	cbnz	r3, 8017410 <_svfiprintf_r+0x1b0>
 80173c8:	9b03      	ldr	r3, [sp, #12]
 80173ca:	3307      	adds	r3, #7
 80173cc:	f023 0307 	bic.w	r3, r3, #7
 80173d0:	3308      	adds	r3, #8
 80173d2:	9303      	str	r3, [sp, #12]
 80173d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173d6:	4433      	add	r3, r6
 80173d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80173da:	e76a      	b.n	80172b2 <_svfiprintf_r+0x52>
 80173dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80173e0:	460c      	mov	r4, r1
 80173e2:	2001      	movs	r0, #1
 80173e4:	e7a8      	b.n	8017338 <_svfiprintf_r+0xd8>
 80173e6:	2300      	movs	r3, #0
 80173e8:	3401      	adds	r4, #1
 80173ea:	9305      	str	r3, [sp, #20]
 80173ec:	4619      	mov	r1, r3
 80173ee:	f04f 0c0a 	mov.w	ip, #10
 80173f2:	4620      	mov	r0, r4
 80173f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80173f8:	3a30      	subs	r2, #48	@ 0x30
 80173fa:	2a09      	cmp	r2, #9
 80173fc:	d903      	bls.n	8017406 <_svfiprintf_r+0x1a6>
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d0c6      	beq.n	8017390 <_svfiprintf_r+0x130>
 8017402:	9105      	str	r1, [sp, #20]
 8017404:	e7c4      	b.n	8017390 <_svfiprintf_r+0x130>
 8017406:	fb0c 2101 	mla	r1, ip, r1, r2
 801740a:	4604      	mov	r4, r0
 801740c:	2301      	movs	r3, #1
 801740e:	e7f0      	b.n	80173f2 <_svfiprintf_r+0x192>
 8017410:	ab03      	add	r3, sp, #12
 8017412:	9300      	str	r3, [sp, #0]
 8017414:	462a      	mov	r2, r5
 8017416:	4b0e      	ldr	r3, [pc, #56]	@ (8017450 <_svfiprintf_r+0x1f0>)
 8017418:	a904      	add	r1, sp, #16
 801741a:	4638      	mov	r0, r7
 801741c:	f3af 8000 	nop.w
 8017420:	1c42      	adds	r2, r0, #1
 8017422:	4606      	mov	r6, r0
 8017424:	d1d6      	bne.n	80173d4 <_svfiprintf_r+0x174>
 8017426:	89ab      	ldrh	r3, [r5, #12]
 8017428:	065b      	lsls	r3, r3, #25
 801742a:	f53f af2d 	bmi.w	8017288 <_svfiprintf_r+0x28>
 801742e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017430:	e72c      	b.n	801728c <_svfiprintf_r+0x2c>
 8017432:	ab03      	add	r3, sp, #12
 8017434:	9300      	str	r3, [sp, #0]
 8017436:	462a      	mov	r2, r5
 8017438:	4b05      	ldr	r3, [pc, #20]	@ (8017450 <_svfiprintf_r+0x1f0>)
 801743a:	a904      	add	r1, sp, #16
 801743c:	4638      	mov	r0, r7
 801743e:	f000 fb8b 	bl	8017b58 <_printf_i>
 8017442:	e7ed      	b.n	8017420 <_svfiprintf_r+0x1c0>
 8017444:	08019fa7 	.word	0x08019fa7
 8017448:	08019fb1 	.word	0x08019fb1
 801744c:	00000000 	.word	0x00000000
 8017450:	080171ab 	.word	0x080171ab
 8017454:	08019fad 	.word	0x08019fad

08017458 <_sungetc_r>:
 8017458:	b538      	push	{r3, r4, r5, lr}
 801745a:	1c4b      	adds	r3, r1, #1
 801745c:	4614      	mov	r4, r2
 801745e:	d103      	bne.n	8017468 <_sungetc_r+0x10>
 8017460:	f04f 35ff 	mov.w	r5, #4294967295
 8017464:	4628      	mov	r0, r5
 8017466:	bd38      	pop	{r3, r4, r5, pc}
 8017468:	8993      	ldrh	r3, [r2, #12]
 801746a:	f023 0320 	bic.w	r3, r3, #32
 801746e:	8193      	strh	r3, [r2, #12]
 8017470:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017472:	6852      	ldr	r2, [r2, #4]
 8017474:	b2cd      	uxtb	r5, r1
 8017476:	b18b      	cbz	r3, 801749c <_sungetc_r+0x44>
 8017478:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801747a:	4293      	cmp	r3, r2
 801747c:	dd08      	ble.n	8017490 <_sungetc_r+0x38>
 801747e:	6823      	ldr	r3, [r4, #0]
 8017480:	1e5a      	subs	r2, r3, #1
 8017482:	6022      	str	r2, [r4, #0]
 8017484:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017488:	6863      	ldr	r3, [r4, #4]
 801748a:	3301      	adds	r3, #1
 801748c:	6063      	str	r3, [r4, #4]
 801748e:	e7e9      	b.n	8017464 <_sungetc_r+0xc>
 8017490:	4621      	mov	r1, r4
 8017492:	f000 ff14 	bl	80182be <__submore>
 8017496:	2800      	cmp	r0, #0
 8017498:	d0f1      	beq.n	801747e <_sungetc_r+0x26>
 801749a:	e7e1      	b.n	8017460 <_sungetc_r+0x8>
 801749c:	6921      	ldr	r1, [r4, #16]
 801749e:	6823      	ldr	r3, [r4, #0]
 80174a0:	b151      	cbz	r1, 80174b8 <_sungetc_r+0x60>
 80174a2:	4299      	cmp	r1, r3
 80174a4:	d208      	bcs.n	80174b8 <_sungetc_r+0x60>
 80174a6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80174aa:	42a9      	cmp	r1, r5
 80174ac:	d104      	bne.n	80174b8 <_sungetc_r+0x60>
 80174ae:	3b01      	subs	r3, #1
 80174b0:	3201      	adds	r2, #1
 80174b2:	6023      	str	r3, [r4, #0]
 80174b4:	6062      	str	r2, [r4, #4]
 80174b6:	e7d5      	b.n	8017464 <_sungetc_r+0xc>
 80174b8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80174bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80174c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80174c2:	2303      	movs	r3, #3
 80174c4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80174c6:	4623      	mov	r3, r4
 80174c8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80174cc:	6023      	str	r3, [r4, #0]
 80174ce:	2301      	movs	r3, #1
 80174d0:	e7dc      	b.n	801748c <_sungetc_r+0x34>

080174d2 <__ssrefill_r>:
 80174d2:	b510      	push	{r4, lr}
 80174d4:	460c      	mov	r4, r1
 80174d6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80174d8:	b169      	cbz	r1, 80174f6 <__ssrefill_r+0x24>
 80174da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80174de:	4299      	cmp	r1, r3
 80174e0:	d001      	beq.n	80174e6 <__ssrefill_r+0x14>
 80174e2:	f7fe fe0d 	bl	8016100 <_free_r>
 80174e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80174e8:	6063      	str	r3, [r4, #4]
 80174ea:	2000      	movs	r0, #0
 80174ec:	6360      	str	r0, [r4, #52]	@ 0x34
 80174ee:	b113      	cbz	r3, 80174f6 <__ssrefill_r+0x24>
 80174f0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80174f2:	6023      	str	r3, [r4, #0]
 80174f4:	bd10      	pop	{r4, pc}
 80174f6:	6923      	ldr	r3, [r4, #16]
 80174f8:	6023      	str	r3, [r4, #0]
 80174fa:	2300      	movs	r3, #0
 80174fc:	6063      	str	r3, [r4, #4]
 80174fe:	89a3      	ldrh	r3, [r4, #12]
 8017500:	f043 0320 	orr.w	r3, r3, #32
 8017504:	81a3      	strh	r3, [r4, #12]
 8017506:	f04f 30ff 	mov.w	r0, #4294967295
 801750a:	e7f3      	b.n	80174f4 <__ssrefill_r+0x22>

0801750c <__ssvfiscanf_r>:
 801750c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017510:	460c      	mov	r4, r1
 8017512:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8017516:	2100      	movs	r1, #0
 8017518:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801751c:	49a6      	ldr	r1, [pc, #664]	@ (80177b8 <__ssvfiscanf_r+0x2ac>)
 801751e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8017520:	f10d 0804 	add.w	r8, sp, #4
 8017524:	49a5      	ldr	r1, [pc, #660]	@ (80177bc <__ssvfiscanf_r+0x2b0>)
 8017526:	4fa6      	ldr	r7, [pc, #664]	@ (80177c0 <__ssvfiscanf_r+0x2b4>)
 8017528:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801752c:	4606      	mov	r6, r0
 801752e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8017530:	9300      	str	r3, [sp, #0]
 8017532:	f892 9000 	ldrb.w	r9, [r2]
 8017536:	f1b9 0f00 	cmp.w	r9, #0
 801753a:	f000 8158 	beq.w	80177ee <__ssvfiscanf_r+0x2e2>
 801753e:	f817 3009 	ldrb.w	r3, [r7, r9]
 8017542:	f013 0308 	ands.w	r3, r3, #8
 8017546:	f102 0501 	add.w	r5, r2, #1
 801754a:	d019      	beq.n	8017580 <__ssvfiscanf_r+0x74>
 801754c:	6863      	ldr	r3, [r4, #4]
 801754e:	2b00      	cmp	r3, #0
 8017550:	dd0f      	ble.n	8017572 <__ssvfiscanf_r+0x66>
 8017552:	6823      	ldr	r3, [r4, #0]
 8017554:	781a      	ldrb	r2, [r3, #0]
 8017556:	5cba      	ldrb	r2, [r7, r2]
 8017558:	0712      	lsls	r2, r2, #28
 801755a:	d401      	bmi.n	8017560 <__ssvfiscanf_r+0x54>
 801755c:	462a      	mov	r2, r5
 801755e:	e7e8      	b.n	8017532 <__ssvfiscanf_r+0x26>
 8017560:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8017562:	3201      	adds	r2, #1
 8017564:	9245      	str	r2, [sp, #276]	@ 0x114
 8017566:	6862      	ldr	r2, [r4, #4]
 8017568:	3301      	adds	r3, #1
 801756a:	3a01      	subs	r2, #1
 801756c:	6062      	str	r2, [r4, #4]
 801756e:	6023      	str	r3, [r4, #0]
 8017570:	e7ec      	b.n	801754c <__ssvfiscanf_r+0x40>
 8017572:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017574:	4621      	mov	r1, r4
 8017576:	4630      	mov	r0, r6
 8017578:	4798      	blx	r3
 801757a:	2800      	cmp	r0, #0
 801757c:	d0e9      	beq.n	8017552 <__ssvfiscanf_r+0x46>
 801757e:	e7ed      	b.n	801755c <__ssvfiscanf_r+0x50>
 8017580:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8017584:	f040 8085 	bne.w	8017692 <__ssvfiscanf_r+0x186>
 8017588:	9341      	str	r3, [sp, #260]	@ 0x104
 801758a:	9343      	str	r3, [sp, #268]	@ 0x10c
 801758c:	7853      	ldrb	r3, [r2, #1]
 801758e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017590:	bf02      	ittt	eq
 8017592:	2310      	moveq	r3, #16
 8017594:	1c95      	addeq	r5, r2, #2
 8017596:	9341      	streq	r3, [sp, #260]	@ 0x104
 8017598:	220a      	movs	r2, #10
 801759a:	46aa      	mov	sl, r5
 801759c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80175a0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80175a4:	2b09      	cmp	r3, #9
 80175a6:	d91e      	bls.n	80175e6 <__ssvfiscanf_r+0xda>
 80175a8:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80177c4 <__ssvfiscanf_r+0x2b8>
 80175ac:	2203      	movs	r2, #3
 80175ae:	4658      	mov	r0, fp
 80175b0:	f7f0 fe46 	bl	8008240 <memchr>
 80175b4:	b138      	cbz	r0, 80175c6 <__ssvfiscanf_r+0xba>
 80175b6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80175b8:	eba0 000b 	sub.w	r0, r0, fp
 80175bc:	2301      	movs	r3, #1
 80175be:	4083      	lsls	r3, r0
 80175c0:	4313      	orrs	r3, r2
 80175c2:	9341      	str	r3, [sp, #260]	@ 0x104
 80175c4:	4655      	mov	r5, sl
 80175c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80175ca:	2b78      	cmp	r3, #120	@ 0x78
 80175cc:	d806      	bhi.n	80175dc <__ssvfiscanf_r+0xd0>
 80175ce:	2b57      	cmp	r3, #87	@ 0x57
 80175d0:	d810      	bhi.n	80175f4 <__ssvfiscanf_r+0xe8>
 80175d2:	2b25      	cmp	r3, #37	@ 0x25
 80175d4:	d05d      	beq.n	8017692 <__ssvfiscanf_r+0x186>
 80175d6:	d857      	bhi.n	8017688 <__ssvfiscanf_r+0x17c>
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d075      	beq.n	80176c8 <__ssvfiscanf_r+0x1bc>
 80175dc:	2303      	movs	r3, #3
 80175de:	9347      	str	r3, [sp, #284]	@ 0x11c
 80175e0:	230a      	movs	r3, #10
 80175e2:	9342      	str	r3, [sp, #264]	@ 0x108
 80175e4:	e088      	b.n	80176f8 <__ssvfiscanf_r+0x1ec>
 80175e6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80175e8:	fb02 1103 	mla	r1, r2, r3, r1
 80175ec:	3930      	subs	r1, #48	@ 0x30
 80175ee:	9143      	str	r1, [sp, #268]	@ 0x10c
 80175f0:	4655      	mov	r5, sl
 80175f2:	e7d2      	b.n	801759a <__ssvfiscanf_r+0x8e>
 80175f4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80175f8:	2a20      	cmp	r2, #32
 80175fa:	d8ef      	bhi.n	80175dc <__ssvfiscanf_r+0xd0>
 80175fc:	a101      	add	r1, pc, #4	@ (adr r1, 8017604 <__ssvfiscanf_r+0xf8>)
 80175fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017602:	bf00      	nop
 8017604:	080176d7 	.word	0x080176d7
 8017608:	080175dd 	.word	0x080175dd
 801760c:	080175dd 	.word	0x080175dd
 8017610:	08017731 	.word	0x08017731
 8017614:	080175dd 	.word	0x080175dd
 8017618:	080175dd 	.word	0x080175dd
 801761c:	080175dd 	.word	0x080175dd
 8017620:	080175dd 	.word	0x080175dd
 8017624:	080175dd 	.word	0x080175dd
 8017628:	080175dd 	.word	0x080175dd
 801762c:	080175dd 	.word	0x080175dd
 8017630:	08017747 	.word	0x08017747
 8017634:	0801772d 	.word	0x0801772d
 8017638:	0801768f 	.word	0x0801768f
 801763c:	0801768f 	.word	0x0801768f
 8017640:	0801768f 	.word	0x0801768f
 8017644:	080175dd 	.word	0x080175dd
 8017648:	080176e9 	.word	0x080176e9
 801764c:	080175dd 	.word	0x080175dd
 8017650:	080175dd 	.word	0x080175dd
 8017654:	080175dd 	.word	0x080175dd
 8017658:	080175dd 	.word	0x080175dd
 801765c:	08017757 	.word	0x08017757
 8017660:	080176f1 	.word	0x080176f1
 8017664:	080176cf 	.word	0x080176cf
 8017668:	080175dd 	.word	0x080175dd
 801766c:	080175dd 	.word	0x080175dd
 8017670:	08017753 	.word	0x08017753
 8017674:	080175dd 	.word	0x080175dd
 8017678:	0801772d 	.word	0x0801772d
 801767c:	080175dd 	.word	0x080175dd
 8017680:	080175dd 	.word	0x080175dd
 8017684:	080176d7 	.word	0x080176d7
 8017688:	3b45      	subs	r3, #69	@ 0x45
 801768a:	2b02      	cmp	r3, #2
 801768c:	d8a6      	bhi.n	80175dc <__ssvfiscanf_r+0xd0>
 801768e:	2305      	movs	r3, #5
 8017690:	e031      	b.n	80176f6 <__ssvfiscanf_r+0x1ea>
 8017692:	6863      	ldr	r3, [r4, #4]
 8017694:	2b00      	cmp	r3, #0
 8017696:	dd0d      	ble.n	80176b4 <__ssvfiscanf_r+0x1a8>
 8017698:	6823      	ldr	r3, [r4, #0]
 801769a:	781a      	ldrb	r2, [r3, #0]
 801769c:	454a      	cmp	r2, r9
 801769e:	f040 80a6 	bne.w	80177ee <__ssvfiscanf_r+0x2e2>
 80176a2:	3301      	adds	r3, #1
 80176a4:	6862      	ldr	r2, [r4, #4]
 80176a6:	6023      	str	r3, [r4, #0]
 80176a8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80176aa:	3a01      	subs	r2, #1
 80176ac:	3301      	adds	r3, #1
 80176ae:	6062      	str	r2, [r4, #4]
 80176b0:	9345      	str	r3, [sp, #276]	@ 0x114
 80176b2:	e753      	b.n	801755c <__ssvfiscanf_r+0x50>
 80176b4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80176b6:	4621      	mov	r1, r4
 80176b8:	4630      	mov	r0, r6
 80176ba:	4798      	blx	r3
 80176bc:	2800      	cmp	r0, #0
 80176be:	d0eb      	beq.n	8017698 <__ssvfiscanf_r+0x18c>
 80176c0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80176c2:	2800      	cmp	r0, #0
 80176c4:	f040 808b 	bne.w	80177de <__ssvfiscanf_r+0x2d2>
 80176c8:	f04f 30ff 	mov.w	r0, #4294967295
 80176cc:	e08b      	b.n	80177e6 <__ssvfiscanf_r+0x2da>
 80176ce:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80176d0:	f042 0220 	orr.w	r2, r2, #32
 80176d4:	9241      	str	r2, [sp, #260]	@ 0x104
 80176d6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80176d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80176dc:	9241      	str	r2, [sp, #260]	@ 0x104
 80176de:	2210      	movs	r2, #16
 80176e0:	2b6e      	cmp	r3, #110	@ 0x6e
 80176e2:	9242      	str	r2, [sp, #264]	@ 0x108
 80176e4:	d902      	bls.n	80176ec <__ssvfiscanf_r+0x1e0>
 80176e6:	e005      	b.n	80176f4 <__ssvfiscanf_r+0x1e8>
 80176e8:	2300      	movs	r3, #0
 80176ea:	9342      	str	r3, [sp, #264]	@ 0x108
 80176ec:	2303      	movs	r3, #3
 80176ee:	e002      	b.n	80176f6 <__ssvfiscanf_r+0x1ea>
 80176f0:	2308      	movs	r3, #8
 80176f2:	9342      	str	r3, [sp, #264]	@ 0x108
 80176f4:	2304      	movs	r3, #4
 80176f6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80176f8:	6863      	ldr	r3, [r4, #4]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	dd39      	ble.n	8017772 <__ssvfiscanf_r+0x266>
 80176fe:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8017700:	0659      	lsls	r1, r3, #25
 8017702:	d404      	bmi.n	801770e <__ssvfiscanf_r+0x202>
 8017704:	6823      	ldr	r3, [r4, #0]
 8017706:	781a      	ldrb	r2, [r3, #0]
 8017708:	5cba      	ldrb	r2, [r7, r2]
 801770a:	0712      	lsls	r2, r2, #28
 801770c:	d438      	bmi.n	8017780 <__ssvfiscanf_r+0x274>
 801770e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8017710:	2b02      	cmp	r3, #2
 8017712:	dc47      	bgt.n	80177a4 <__ssvfiscanf_r+0x298>
 8017714:	466b      	mov	r3, sp
 8017716:	4622      	mov	r2, r4
 8017718:	a941      	add	r1, sp, #260	@ 0x104
 801771a:	4630      	mov	r0, r6
 801771c:	f000 fb3a 	bl	8017d94 <_scanf_chars>
 8017720:	2801      	cmp	r0, #1
 8017722:	d064      	beq.n	80177ee <__ssvfiscanf_r+0x2e2>
 8017724:	2802      	cmp	r0, #2
 8017726:	f47f af19 	bne.w	801755c <__ssvfiscanf_r+0x50>
 801772a:	e7c9      	b.n	80176c0 <__ssvfiscanf_r+0x1b4>
 801772c:	220a      	movs	r2, #10
 801772e:	e7d7      	b.n	80176e0 <__ssvfiscanf_r+0x1d4>
 8017730:	4629      	mov	r1, r5
 8017732:	4640      	mov	r0, r8
 8017734:	f000 fd8a 	bl	801824c <__sccl>
 8017738:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801773a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801773e:	9341      	str	r3, [sp, #260]	@ 0x104
 8017740:	4605      	mov	r5, r0
 8017742:	2301      	movs	r3, #1
 8017744:	e7d7      	b.n	80176f6 <__ssvfiscanf_r+0x1ea>
 8017746:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8017748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801774c:	9341      	str	r3, [sp, #260]	@ 0x104
 801774e:	2300      	movs	r3, #0
 8017750:	e7d1      	b.n	80176f6 <__ssvfiscanf_r+0x1ea>
 8017752:	2302      	movs	r3, #2
 8017754:	e7cf      	b.n	80176f6 <__ssvfiscanf_r+0x1ea>
 8017756:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8017758:	06c3      	lsls	r3, r0, #27
 801775a:	f53f aeff 	bmi.w	801755c <__ssvfiscanf_r+0x50>
 801775e:	9b00      	ldr	r3, [sp, #0]
 8017760:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8017762:	1d19      	adds	r1, r3, #4
 8017764:	9100      	str	r1, [sp, #0]
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	07c0      	lsls	r0, r0, #31
 801776a:	bf4c      	ite	mi
 801776c:	801a      	strhmi	r2, [r3, #0]
 801776e:	601a      	strpl	r2, [r3, #0]
 8017770:	e6f4      	b.n	801755c <__ssvfiscanf_r+0x50>
 8017772:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017774:	4621      	mov	r1, r4
 8017776:	4630      	mov	r0, r6
 8017778:	4798      	blx	r3
 801777a:	2800      	cmp	r0, #0
 801777c:	d0bf      	beq.n	80176fe <__ssvfiscanf_r+0x1f2>
 801777e:	e79f      	b.n	80176c0 <__ssvfiscanf_r+0x1b4>
 8017780:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8017782:	3201      	adds	r2, #1
 8017784:	9245      	str	r2, [sp, #276]	@ 0x114
 8017786:	6862      	ldr	r2, [r4, #4]
 8017788:	3a01      	subs	r2, #1
 801778a:	2a00      	cmp	r2, #0
 801778c:	6062      	str	r2, [r4, #4]
 801778e:	dd02      	ble.n	8017796 <__ssvfiscanf_r+0x28a>
 8017790:	3301      	adds	r3, #1
 8017792:	6023      	str	r3, [r4, #0]
 8017794:	e7b6      	b.n	8017704 <__ssvfiscanf_r+0x1f8>
 8017796:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017798:	4621      	mov	r1, r4
 801779a:	4630      	mov	r0, r6
 801779c:	4798      	blx	r3
 801779e:	2800      	cmp	r0, #0
 80177a0:	d0b0      	beq.n	8017704 <__ssvfiscanf_r+0x1f8>
 80177a2:	e78d      	b.n	80176c0 <__ssvfiscanf_r+0x1b4>
 80177a4:	2b04      	cmp	r3, #4
 80177a6:	dc0f      	bgt.n	80177c8 <__ssvfiscanf_r+0x2bc>
 80177a8:	466b      	mov	r3, sp
 80177aa:	4622      	mov	r2, r4
 80177ac:	a941      	add	r1, sp, #260	@ 0x104
 80177ae:	4630      	mov	r0, r6
 80177b0:	f000 fb4a 	bl	8017e48 <_scanf_i>
 80177b4:	e7b4      	b.n	8017720 <__ssvfiscanf_r+0x214>
 80177b6:	bf00      	nop
 80177b8:	08017459 	.word	0x08017459
 80177bc:	080174d3 	.word	0x080174d3
 80177c0:	0801a089 	.word	0x0801a089
 80177c4:	08019fad 	.word	0x08019fad
 80177c8:	4b0a      	ldr	r3, [pc, #40]	@ (80177f4 <__ssvfiscanf_r+0x2e8>)
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	f43f aec6 	beq.w	801755c <__ssvfiscanf_r+0x50>
 80177d0:	466b      	mov	r3, sp
 80177d2:	4622      	mov	r2, r4
 80177d4:	a941      	add	r1, sp, #260	@ 0x104
 80177d6:	4630      	mov	r0, r6
 80177d8:	f3af 8000 	nop.w
 80177dc:	e7a0      	b.n	8017720 <__ssvfiscanf_r+0x214>
 80177de:	89a3      	ldrh	r3, [r4, #12]
 80177e0:	065b      	lsls	r3, r3, #25
 80177e2:	f53f af71 	bmi.w	80176c8 <__ssvfiscanf_r+0x1bc>
 80177e6:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80177ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177ee:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80177f0:	e7f9      	b.n	80177e6 <__ssvfiscanf_r+0x2da>
 80177f2:	bf00      	nop
 80177f4:	00000000 	.word	0x00000000

080177f8 <__sfputc_r>:
 80177f8:	6893      	ldr	r3, [r2, #8]
 80177fa:	3b01      	subs	r3, #1
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	b410      	push	{r4}
 8017800:	6093      	str	r3, [r2, #8]
 8017802:	da08      	bge.n	8017816 <__sfputc_r+0x1e>
 8017804:	6994      	ldr	r4, [r2, #24]
 8017806:	42a3      	cmp	r3, r4
 8017808:	db01      	blt.n	801780e <__sfputc_r+0x16>
 801780a:	290a      	cmp	r1, #10
 801780c:	d103      	bne.n	8017816 <__sfputc_r+0x1e>
 801780e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017812:	f7fe bb2c 	b.w	8015e6e <__swbuf_r>
 8017816:	6813      	ldr	r3, [r2, #0]
 8017818:	1c58      	adds	r0, r3, #1
 801781a:	6010      	str	r0, [r2, #0]
 801781c:	7019      	strb	r1, [r3, #0]
 801781e:	4608      	mov	r0, r1
 8017820:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017824:	4770      	bx	lr

08017826 <__sfputs_r>:
 8017826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017828:	4606      	mov	r6, r0
 801782a:	460f      	mov	r7, r1
 801782c:	4614      	mov	r4, r2
 801782e:	18d5      	adds	r5, r2, r3
 8017830:	42ac      	cmp	r4, r5
 8017832:	d101      	bne.n	8017838 <__sfputs_r+0x12>
 8017834:	2000      	movs	r0, #0
 8017836:	e007      	b.n	8017848 <__sfputs_r+0x22>
 8017838:	f814 1b01 	ldrb.w	r1, [r4], #1
 801783c:	463a      	mov	r2, r7
 801783e:	4630      	mov	r0, r6
 8017840:	f7ff ffda 	bl	80177f8 <__sfputc_r>
 8017844:	1c43      	adds	r3, r0, #1
 8017846:	d1f3      	bne.n	8017830 <__sfputs_r+0xa>
 8017848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801784c <_vfiprintf_r>:
 801784c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017850:	460d      	mov	r5, r1
 8017852:	b09d      	sub	sp, #116	@ 0x74
 8017854:	4614      	mov	r4, r2
 8017856:	4698      	mov	r8, r3
 8017858:	4606      	mov	r6, r0
 801785a:	b118      	cbz	r0, 8017864 <_vfiprintf_r+0x18>
 801785c:	6a03      	ldr	r3, [r0, #32]
 801785e:	b90b      	cbnz	r3, 8017864 <_vfiprintf_r+0x18>
 8017860:	f7fe f996 	bl	8015b90 <__sinit>
 8017864:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017866:	07d9      	lsls	r1, r3, #31
 8017868:	d405      	bmi.n	8017876 <_vfiprintf_r+0x2a>
 801786a:	89ab      	ldrh	r3, [r5, #12]
 801786c:	059a      	lsls	r2, r3, #22
 801786e:	d402      	bmi.n	8017876 <_vfiprintf_r+0x2a>
 8017870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017872:	f7fe fc2c 	bl	80160ce <__retarget_lock_acquire_recursive>
 8017876:	89ab      	ldrh	r3, [r5, #12]
 8017878:	071b      	lsls	r3, r3, #28
 801787a:	d501      	bpl.n	8017880 <_vfiprintf_r+0x34>
 801787c:	692b      	ldr	r3, [r5, #16]
 801787e:	b99b      	cbnz	r3, 80178a8 <_vfiprintf_r+0x5c>
 8017880:	4629      	mov	r1, r5
 8017882:	4630      	mov	r0, r6
 8017884:	f7fe fb32 	bl	8015eec <__swsetup_r>
 8017888:	b170      	cbz	r0, 80178a8 <_vfiprintf_r+0x5c>
 801788a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801788c:	07dc      	lsls	r4, r3, #31
 801788e:	d504      	bpl.n	801789a <_vfiprintf_r+0x4e>
 8017890:	f04f 30ff 	mov.w	r0, #4294967295
 8017894:	b01d      	add	sp, #116	@ 0x74
 8017896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801789a:	89ab      	ldrh	r3, [r5, #12]
 801789c:	0598      	lsls	r0, r3, #22
 801789e:	d4f7      	bmi.n	8017890 <_vfiprintf_r+0x44>
 80178a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80178a2:	f7fe fc15 	bl	80160d0 <__retarget_lock_release_recursive>
 80178a6:	e7f3      	b.n	8017890 <_vfiprintf_r+0x44>
 80178a8:	2300      	movs	r3, #0
 80178aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80178ac:	2320      	movs	r3, #32
 80178ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80178b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80178b6:	2330      	movs	r3, #48	@ 0x30
 80178b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017a68 <_vfiprintf_r+0x21c>
 80178bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80178c0:	f04f 0901 	mov.w	r9, #1
 80178c4:	4623      	mov	r3, r4
 80178c6:	469a      	mov	sl, r3
 80178c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80178cc:	b10a      	cbz	r2, 80178d2 <_vfiprintf_r+0x86>
 80178ce:	2a25      	cmp	r2, #37	@ 0x25
 80178d0:	d1f9      	bne.n	80178c6 <_vfiprintf_r+0x7a>
 80178d2:	ebba 0b04 	subs.w	fp, sl, r4
 80178d6:	d00b      	beq.n	80178f0 <_vfiprintf_r+0xa4>
 80178d8:	465b      	mov	r3, fp
 80178da:	4622      	mov	r2, r4
 80178dc:	4629      	mov	r1, r5
 80178de:	4630      	mov	r0, r6
 80178e0:	f7ff ffa1 	bl	8017826 <__sfputs_r>
 80178e4:	3001      	adds	r0, #1
 80178e6:	f000 80a7 	beq.w	8017a38 <_vfiprintf_r+0x1ec>
 80178ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80178ec:	445a      	add	r2, fp
 80178ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80178f0:	f89a 3000 	ldrb.w	r3, [sl]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	f000 809f 	beq.w	8017a38 <_vfiprintf_r+0x1ec>
 80178fa:	2300      	movs	r3, #0
 80178fc:	f04f 32ff 	mov.w	r2, #4294967295
 8017900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017904:	f10a 0a01 	add.w	sl, sl, #1
 8017908:	9304      	str	r3, [sp, #16]
 801790a:	9307      	str	r3, [sp, #28]
 801790c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017910:	931a      	str	r3, [sp, #104]	@ 0x68
 8017912:	4654      	mov	r4, sl
 8017914:	2205      	movs	r2, #5
 8017916:	f814 1b01 	ldrb.w	r1, [r4], #1
 801791a:	4853      	ldr	r0, [pc, #332]	@ (8017a68 <_vfiprintf_r+0x21c>)
 801791c:	f7f0 fc90 	bl	8008240 <memchr>
 8017920:	9a04      	ldr	r2, [sp, #16]
 8017922:	b9d8      	cbnz	r0, 801795c <_vfiprintf_r+0x110>
 8017924:	06d1      	lsls	r1, r2, #27
 8017926:	bf44      	itt	mi
 8017928:	2320      	movmi	r3, #32
 801792a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801792e:	0713      	lsls	r3, r2, #28
 8017930:	bf44      	itt	mi
 8017932:	232b      	movmi	r3, #43	@ 0x2b
 8017934:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017938:	f89a 3000 	ldrb.w	r3, [sl]
 801793c:	2b2a      	cmp	r3, #42	@ 0x2a
 801793e:	d015      	beq.n	801796c <_vfiprintf_r+0x120>
 8017940:	9a07      	ldr	r2, [sp, #28]
 8017942:	4654      	mov	r4, sl
 8017944:	2000      	movs	r0, #0
 8017946:	f04f 0c0a 	mov.w	ip, #10
 801794a:	4621      	mov	r1, r4
 801794c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017950:	3b30      	subs	r3, #48	@ 0x30
 8017952:	2b09      	cmp	r3, #9
 8017954:	d94b      	bls.n	80179ee <_vfiprintf_r+0x1a2>
 8017956:	b1b0      	cbz	r0, 8017986 <_vfiprintf_r+0x13a>
 8017958:	9207      	str	r2, [sp, #28]
 801795a:	e014      	b.n	8017986 <_vfiprintf_r+0x13a>
 801795c:	eba0 0308 	sub.w	r3, r0, r8
 8017960:	fa09 f303 	lsl.w	r3, r9, r3
 8017964:	4313      	orrs	r3, r2
 8017966:	9304      	str	r3, [sp, #16]
 8017968:	46a2      	mov	sl, r4
 801796a:	e7d2      	b.n	8017912 <_vfiprintf_r+0xc6>
 801796c:	9b03      	ldr	r3, [sp, #12]
 801796e:	1d19      	adds	r1, r3, #4
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	9103      	str	r1, [sp, #12]
 8017974:	2b00      	cmp	r3, #0
 8017976:	bfbb      	ittet	lt
 8017978:	425b      	neglt	r3, r3
 801797a:	f042 0202 	orrlt.w	r2, r2, #2
 801797e:	9307      	strge	r3, [sp, #28]
 8017980:	9307      	strlt	r3, [sp, #28]
 8017982:	bfb8      	it	lt
 8017984:	9204      	strlt	r2, [sp, #16]
 8017986:	7823      	ldrb	r3, [r4, #0]
 8017988:	2b2e      	cmp	r3, #46	@ 0x2e
 801798a:	d10a      	bne.n	80179a2 <_vfiprintf_r+0x156>
 801798c:	7863      	ldrb	r3, [r4, #1]
 801798e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017990:	d132      	bne.n	80179f8 <_vfiprintf_r+0x1ac>
 8017992:	9b03      	ldr	r3, [sp, #12]
 8017994:	1d1a      	adds	r2, r3, #4
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	9203      	str	r2, [sp, #12]
 801799a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801799e:	3402      	adds	r4, #2
 80179a0:	9305      	str	r3, [sp, #20]
 80179a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017a78 <_vfiprintf_r+0x22c>
 80179a6:	7821      	ldrb	r1, [r4, #0]
 80179a8:	2203      	movs	r2, #3
 80179aa:	4650      	mov	r0, sl
 80179ac:	f7f0 fc48 	bl	8008240 <memchr>
 80179b0:	b138      	cbz	r0, 80179c2 <_vfiprintf_r+0x176>
 80179b2:	9b04      	ldr	r3, [sp, #16]
 80179b4:	eba0 000a 	sub.w	r0, r0, sl
 80179b8:	2240      	movs	r2, #64	@ 0x40
 80179ba:	4082      	lsls	r2, r0
 80179bc:	4313      	orrs	r3, r2
 80179be:	3401      	adds	r4, #1
 80179c0:	9304      	str	r3, [sp, #16]
 80179c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179c6:	4829      	ldr	r0, [pc, #164]	@ (8017a6c <_vfiprintf_r+0x220>)
 80179c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80179cc:	2206      	movs	r2, #6
 80179ce:	f7f0 fc37 	bl	8008240 <memchr>
 80179d2:	2800      	cmp	r0, #0
 80179d4:	d03f      	beq.n	8017a56 <_vfiprintf_r+0x20a>
 80179d6:	4b26      	ldr	r3, [pc, #152]	@ (8017a70 <_vfiprintf_r+0x224>)
 80179d8:	bb1b      	cbnz	r3, 8017a22 <_vfiprintf_r+0x1d6>
 80179da:	9b03      	ldr	r3, [sp, #12]
 80179dc:	3307      	adds	r3, #7
 80179de:	f023 0307 	bic.w	r3, r3, #7
 80179e2:	3308      	adds	r3, #8
 80179e4:	9303      	str	r3, [sp, #12]
 80179e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80179e8:	443b      	add	r3, r7
 80179ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80179ec:	e76a      	b.n	80178c4 <_vfiprintf_r+0x78>
 80179ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80179f2:	460c      	mov	r4, r1
 80179f4:	2001      	movs	r0, #1
 80179f6:	e7a8      	b.n	801794a <_vfiprintf_r+0xfe>
 80179f8:	2300      	movs	r3, #0
 80179fa:	3401      	adds	r4, #1
 80179fc:	9305      	str	r3, [sp, #20]
 80179fe:	4619      	mov	r1, r3
 8017a00:	f04f 0c0a 	mov.w	ip, #10
 8017a04:	4620      	mov	r0, r4
 8017a06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a0a:	3a30      	subs	r2, #48	@ 0x30
 8017a0c:	2a09      	cmp	r2, #9
 8017a0e:	d903      	bls.n	8017a18 <_vfiprintf_r+0x1cc>
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d0c6      	beq.n	80179a2 <_vfiprintf_r+0x156>
 8017a14:	9105      	str	r1, [sp, #20]
 8017a16:	e7c4      	b.n	80179a2 <_vfiprintf_r+0x156>
 8017a18:	fb0c 2101 	mla	r1, ip, r1, r2
 8017a1c:	4604      	mov	r4, r0
 8017a1e:	2301      	movs	r3, #1
 8017a20:	e7f0      	b.n	8017a04 <_vfiprintf_r+0x1b8>
 8017a22:	ab03      	add	r3, sp, #12
 8017a24:	9300      	str	r3, [sp, #0]
 8017a26:	462a      	mov	r2, r5
 8017a28:	4b12      	ldr	r3, [pc, #72]	@ (8017a74 <_vfiprintf_r+0x228>)
 8017a2a:	a904      	add	r1, sp, #16
 8017a2c:	4630      	mov	r0, r6
 8017a2e:	f3af 8000 	nop.w
 8017a32:	4607      	mov	r7, r0
 8017a34:	1c78      	adds	r0, r7, #1
 8017a36:	d1d6      	bne.n	80179e6 <_vfiprintf_r+0x19a>
 8017a38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017a3a:	07d9      	lsls	r1, r3, #31
 8017a3c:	d405      	bmi.n	8017a4a <_vfiprintf_r+0x1fe>
 8017a3e:	89ab      	ldrh	r3, [r5, #12]
 8017a40:	059a      	lsls	r2, r3, #22
 8017a42:	d402      	bmi.n	8017a4a <_vfiprintf_r+0x1fe>
 8017a44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017a46:	f7fe fb43 	bl	80160d0 <__retarget_lock_release_recursive>
 8017a4a:	89ab      	ldrh	r3, [r5, #12]
 8017a4c:	065b      	lsls	r3, r3, #25
 8017a4e:	f53f af1f 	bmi.w	8017890 <_vfiprintf_r+0x44>
 8017a52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017a54:	e71e      	b.n	8017894 <_vfiprintf_r+0x48>
 8017a56:	ab03      	add	r3, sp, #12
 8017a58:	9300      	str	r3, [sp, #0]
 8017a5a:	462a      	mov	r2, r5
 8017a5c:	4b05      	ldr	r3, [pc, #20]	@ (8017a74 <_vfiprintf_r+0x228>)
 8017a5e:	a904      	add	r1, sp, #16
 8017a60:	4630      	mov	r0, r6
 8017a62:	f000 f879 	bl	8017b58 <_printf_i>
 8017a66:	e7e4      	b.n	8017a32 <_vfiprintf_r+0x1e6>
 8017a68:	08019fa7 	.word	0x08019fa7
 8017a6c:	08019fb1 	.word	0x08019fb1
 8017a70:	00000000 	.word	0x00000000
 8017a74:	08017827 	.word	0x08017827
 8017a78:	08019fad 	.word	0x08019fad

08017a7c <_printf_common>:
 8017a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a80:	4616      	mov	r6, r2
 8017a82:	4698      	mov	r8, r3
 8017a84:	688a      	ldr	r2, [r1, #8]
 8017a86:	690b      	ldr	r3, [r1, #16]
 8017a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017a8c:	4293      	cmp	r3, r2
 8017a8e:	bfb8      	it	lt
 8017a90:	4613      	movlt	r3, r2
 8017a92:	6033      	str	r3, [r6, #0]
 8017a94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017a98:	4607      	mov	r7, r0
 8017a9a:	460c      	mov	r4, r1
 8017a9c:	b10a      	cbz	r2, 8017aa2 <_printf_common+0x26>
 8017a9e:	3301      	adds	r3, #1
 8017aa0:	6033      	str	r3, [r6, #0]
 8017aa2:	6823      	ldr	r3, [r4, #0]
 8017aa4:	0699      	lsls	r1, r3, #26
 8017aa6:	bf42      	ittt	mi
 8017aa8:	6833      	ldrmi	r3, [r6, #0]
 8017aaa:	3302      	addmi	r3, #2
 8017aac:	6033      	strmi	r3, [r6, #0]
 8017aae:	6825      	ldr	r5, [r4, #0]
 8017ab0:	f015 0506 	ands.w	r5, r5, #6
 8017ab4:	d106      	bne.n	8017ac4 <_printf_common+0x48>
 8017ab6:	f104 0a19 	add.w	sl, r4, #25
 8017aba:	68e3      	ldr	r3, [r4, #12]
 8017abc:	6832      	ldr	r2, [r6, #0]
 8017abe:	1a9b      	subs	r3, r3, r2
 8017ac0:	42ab      	cmp	r3, r5
 8017ac2:	dc26      	bgt.n	8017b12 <_printf_common+0x96>
 8017ac4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017ac8:	6822      	ldr	r2, [r4, #0]
 8017aca:	3b00      	subs	r3, #0
 8017acc:	bf18      	it	ne
 8017ace:	2301      	movne	r3, #1
 8017ad0:	0692      	lsls	r2, r2, #26
 8017ad2:	d42b      	bmi.n	8017b2c <_printf_common+0xb0>
 8017ad4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017ad8:	4641      	mov	r1, r8
 8017ada:	4638      	mov	r0, r7
 8017adc:	47c8      	blx	r9
 8017ade:	3001      	adds	r0, #1
 8017ae0:	d01e      	beq.n	8017b20 <_printf_common+0xa4>
 8017ae2:	6823      	ldr	r3, [r4, #0]
 8017ae4:	6922      	ldr	r2, [r4, #16]
 8017ae6:	f003 0306 	and.w	r3, r3, #6
 8017aea:	2b04      	cmp	r3, #4
 8017aec:	bf02      	ittt	eq
 8017aee:	68e5      	ldreq	r5, [r4, #12]
 8017af0:	6833      	ldreq	r3, [r6, #0]
 8017af2:	1aed      	subeq	r5, r5, r3
 8017af4:	68a3      	ldr	r3, [r4, #8]
 8017af6:	bf0c      	ite	eq
 8017af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017afc:	2500      	movne	r5, #0
 8017afe:	4293      	cmp	r3, r2
 8017b00:	bfc4      	itt	gt
 8017b02:	1a9b      	subgt	r3, r3, r2
 8017b04:	18ed      	addgt	r5, r5, r3
 8017b06:	2600      	movs	r6, #0
 8017b08:	341a      	adds	r4, #26
 8017b0a:	42b5      	cmp	r5, r6
 8017b0c:	d11a      	bne.n	8017b44 <_printf_common+0xc8>
 8017b0e:	2000      	movs	r0, #0
 8017b10:	e008      	b.n	8017b24 <_printf_common+0xa8>
 8017b12:	2301      	movs	r3, #1
 8017b14:	4652      	mov	r2, sl
 8017b16:	4641      	mov	r1, r8
 8017b18:	4638      	mov	r0, r7
 8017b1a:	47c8      	blx	r9
 8017b1c:	3001      	adds	r0, #1
 8017b1e:	d103      	bne.n	8017b28 <_printf_common+0xac>
 8017b20:	f04f 30ff 	mov.w	r0, #4294967295
 8017b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b28:	3501      	adds	r5, #1
 8017b2a:	e7c6      	b.n	8017aba <_printf_common+0x3e>
 8017b2c:	18e1      	adds	r1, r4, r3
 8017b2e:	1c5a      	adds	r2, r3, #1
 8017b30:	2030      	movs	r0, #48	@ 0x30
 8017b32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017b36:	4422      	add	r2, r4
 8017b38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017b3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017b40:	3302      	adds	r3, #2
 8017b42:	e7c7      	b.n	8017ad4 <_printf_common+0x58>
 8017b44:	2301      	movs	r3, #1
 8017b46:	4622      	mov	r2, r4
 8017b48:	4641      	mov	r1, r8
 8017b4a:	4638      	mov	r0, r7
 8017b4c:	47c8      	blx	r9
 8017b4e:	3001      	adds	r0, #1
 8017b50:	d0e6      	beq.n	8017b20 <_printf_common+0xa4>
 8017b52:	3601      	adds	r6, #1
 8017b54:	e7d9      	b.n	8017b0a <_printf_common+0x8e>
	...

08017b58 <_printf_i>:
 8017b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017b5c:	7e0f      	ldrb	r7, [r1, #24]
 8017b5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017b60:	2f78      	cmp	r7, #120	@ 0x78
 8017b62:	4691      	mov	r9, r2
 8017b64:	4680      	mov	r8, r0
 8017b66:	460c      	mov	r4, r1
 8017b68:	469a      	mov	sl, r3
 8017b6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017b6e:	d807      	bhi.n	8017b80 <_printf_i+0x28>
 8017b70:	2f62      	cmp	r7, #98	@ 0x62
 8017b72:	d80a      	bhi.n	8017b8a <_printf_i+0x32>
 8017b74:	2f00      	cmp	r7, #0
 8017b76:	f000 80d1 	beq.w	8017d1c <_printf_i+0x1c4>
 8017b7a:	2f58      	cmp	r7, #88	@ 0x58
 8017b7c:	f000 80b8 	beq.w	8017cf0 <_printf_i+0x198>
 8017b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017b84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017b88:	e03a      	b.n	8017c00 <_printf_i+0xa8>
 8017b8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017b8e:	2b15      	cmp	r3, #21
 8017b90:	d8f6      	bhi.n	8017b80 <_printf_i+0x28>
 8017b92:	a101      	add	r1, pc, #4	@ (adr r1, 8017b98 <_printf_i+0x40>)
 8017b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017b98:	08017bf1 	.word	0x08017bf1
 8017b9c:	08017c05 	.word	0x08017c05
 8017ba0:	08017b81 	.word	0x08017b81
 8017ba4:	08017b81 	.word	0x08017b81
 8017ba8:	08017b81 	.word	0x08017b81
 8017bac:	08017b81 	.word	0x08017b81
 8017bb0:	08017c05 	.word	0x08017c05
 8017bb4:	08017b81 	.word	0x08017b81
 8017bb8:	08017b81 	.word	0x08017b81
 8017bbc:	08017b81 	.word	0x08017b81
 8017bc0:	08017b81 	.word	0x08017b81
 8017bc4:	08017d03 	.word	0x08017d03
 8017bc8:	08017c2f 	.word	0x08017c2f
 8017bcc:	08017cbd 	.word	0x08017cbd
 8017bd0:	08017b81 	.word	0x08017b81
 8017bd4:	08017b81 	.word	0x08017b81
 8017bd8:	08017d25 	.word	0x08017d25
 8017bdc:	08017b81 	.word	0x08017b81
 8017be0:	08017c2f 	.word	0x08017c2f
 8017be4:	08017b81 	.word	0x08017b81
 8017be8:	08017b81 	.word	0x08017b81
 8017bec:	08017cc5 	.word	0x08017cc5
 8017bf0:	6833      	ldr	r3, [r6, #0]
 8017bf2:	1d1a      	adds	r2, r3, #4
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	6032      	str	r2, [r6, #0]
 8017bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017bfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017c00:	2301      	movs	r3, #1
 8017c02:	e09c      	b.n	8017d3e <_printf_i+0x1e6>
 8017c04:	6833      	ldr	r3, [r6, #0]
 8017c06:	6820      	ldr	r0, [r4, #0]
 8017c08:	1d19      	adds	r1, r3, #4
 8017c0a:	6031      	str	r1, [r6, #0]
 8017c0c:	0606      	lsls	r6, r0, #24
 8017c0e:	d501      	bpl.n	8017c14 <_printf_i+0xbc>
 8017c10:	681d      	ldr	r5, [r3, #0]
 8017c12:	e003      	b.n	8017c1c <_printf_i+0xc4>
 8017c14:	0645      	lsls	r5, r0, #25
 8017c16:	d5fb      	bpl.n	8017c10 <_printf_i+0xb8>
 8017c18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017c1c:	2d00      	cmp	r5, #0
 8017c1e:	da03      	bge.n	8017c28 <_printf_i+0xd0>
 8017c20:	232d      	movs	r3, #45	@ 0x2d
 8017c22:	426d      	negs	r5, r5
 8017c24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017c28:	4858      	ldr	r0, [pc, #352]	@ (8017d8c <_printf_i+0x234>)
 8017c2a:	230a      	movs	r3, #10
 8017c2c:	e011      	b.n	8017c52 <_printf_i+0xfa>
 8017c2e:	6821      	ldr	r1, [r4, #0]
 8017c30:	6833      	ldr	r3, [r6, #0]
 8017c32:	0608      	lsls	r0, r1, #24
 8017c34:	f853 5b04 	ldr.w	r5, [r3], #4
 8017c38:	d402      	bmi.n	8017c40 <_printf_i+0xe8>
 8017c3a:	0649      	lsls	r1, r1, #25
 8017c3c:	bf48      	it	mi
 8017c3e:	b2ad      	uxthmi	r5, r5
 8017c40:	2f6f      	cmp	r7, #111	@ 0x6f
 8017c42:	4852      	ldr	r0, [pc, #328]	@ (8017d8c <_printf_i+0x234>)
 8017c44:	6033      	str	r3, [r6, #0]
 8017c46:	bf14      	ite	ne
 8017c48:	230a      	movne	r3, #10
 8017c4a:	2308      	moveq	r3, #8
 8017c4c:	2100      	movs	r1, #0
 8017c4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017c52:	6866      	ldr	r6, [r4, #4]
 8017c54:	60a6      	str	r6, [r4, #8]
 8017c56:	2e00      	cmp	r6, #0
 8017c58:	db05      	blt.n	8017c66 <_printf_i+0x10e>
 8017c5a:	6821      	ldr	r1, [r4, #0]
 8017c5c:	432e      	orrs	r6, r5
 8017c5e:	f021 0104 	bic.w	r1, r1, #4
 8017c62:	6021      	str	r1, [r4, #0]
 8017c64:	d04b      	beq.n	8017cfe <_printf_i+0x1a6>
 8017c66:	4616      	mov	r6, r2
 8017c68:	fbb5 f1f3 	udiv	r1, r5, r3
 8017c6c:	fb03 5711 	mls	r7, r3, r1, r5
 8017c70:	5dc7      	ldrb	r7, [r0, r7]
 8017c72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017c76:	462f      	mov	r7, r5
 8017c78:	42bb      	cmp	r3, r7
 8017c7a:	460d      	mov	r5, r1
 8017c7c:	d9f4      	bls.n	8017c68 <_printf_i+0x110>
 8017c7e:	2b08      	cmp	r3, #8
 8017c80:	d10b      	bne.n	8017c9a <_printf_i+0x142>
 8017c82:	6823      	ldr	r3, [r4, #0]
 8017c84:	07df      	lsls	r7, r3, #31
 8017c86:	d508      	bpl.n	8017c9a <_printf_i+0x142>
 8017c88:	6923      	ldr	r3, [r4, #16]
 8017c8a:	6861      	ldr	r1, [r4, #4]
 8017c8c:	4299      	cmp	r1, r3
 8017c8e:	bfde      	ittt	le
 8017c90:	2330      	movle	r3, #48	@ 0x30
 8017c92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017c96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017c9a:	1b92      	subs	r2, r2, r6
 8017c9c:	6122      	str	r2, [r4, #16]
 8017c9e:	f8cd a000 	str.w	sl, [sp]
 8017ca2:	464b      	mov	r3, r9
 8017ca4:	aa03      	add	r2, sp, #12
 8017ca6:	4621      	mov	r1, r4
 8017ca8:	4640      	mov	r0, r8
 8017caa:	f7ff fee7 	bl	8017a7c <_printf_common>
 8017cae:	3001      	adds	r0, #1
 8017cb0:	d14a      	bne.n	8017d48 <_printf_i+0x1f0>
 8017cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8017cb6:	b004      	add	sp, #16
 8017cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cbc:	6823      	ldr	r3, [r4, #0]
 8017cbe:	f043 0320 	orr.w	r3, r3, #32
 8017cc2:	6023      	str	r3, [r4, #0]
 8017cc4:	4832      	ldr	r0, [pc, #200]	@ (8017d90 <_printf_i+0x238>)
 8017cc6:	2778      	movs	r7, #120	@ 0x78
 8017cc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017ccc:	6823      	ldr	r3, [r4, #0]
 8017cce:	6831      	ldr	r1, [r6, #0]
 8017cd0:	061f      	lsls	r7, r3, #24
 8017cd2:	f851 5b04 	ldr.w	r5, [r1], #4
 8017cd6:	d402      	bmi.n	8017cde <_printf_i+0x186>
 8017cd8:	065f      	lsls	r7, r3, #25
 8017cda:	bf48      	it	mi
 8017cdc:	b2ad      	uxthmi	r5, r5
 8017cde:	6031      	str	r1, [r6, #0]
 8017ce0:	07d9      	lsls	r1, r3, #31
 8017ce2:	bf44      	itt	mi
 8017ce4:	f043 0320 	orrmi.w	r3, r3, #32
 8017ce8:	6023      	strmi	r3, [r4, #0]
 8017cea:	b11d      	cbz	r5, 8017cf4 <_printf_i+0x19c>
 8017cec:	2310      	movs	r3, #16
 8017cee:	e7ad      	b.n	8017c4c <_printf_i+0xf4>
 8017cf0:	4826      	ldr	r0, [pc, #152]	@ (8017d8c <_printf_i+0x234>)
 8017cf2:	e7e9      	b.n	8017cc8 <_printf_i+0x170>
 8017cf4:	6823      	ldr	r3, [r4, #0]
 8017cf6:	f023 0320 	bic.w	r3, r3, #32
 8017cfa:	6023      	str	r3, [r4, #0]
 8017cfc:	e7f6      	b.n	8017cec <_printf_i+0x194>
 8017cfe:	4616      	mov	r6, r2
 8017d00:	e7bd      	b.n	8017c7e <_printf_i+0x126>
 8017d02:	6833      	ldr	r3, [r6, #0]
 8017d04:	6825      	ldr	r5, [r4, #0]
 8017d06:	6961      	ldr	r1, [r4, #20]
 8017d08:	1d18      	adds	r0, r3, #4
 8017d0a:	6030      	str	r0, [r6, #0]
 8017d0c:	062e      	lsls	r6, r5, #24
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	d501      	bpl.n	8017d16 <_printf_i+0x1be>
 8017d12:	6019      	str	r1, [r3, #0]
 8017d14:	e002      	b.n	8017d1c <_printf_i+0x1c4>
 8017d16:	0668      	lsls	r0, r5, #25
 8017d18:	d5fb      	bpl.n	8017d12 <_printf_i+0x1ba>
 8017d1a:	8019      	strh	r1, [r3, #0]
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	6123      	str	r3, [r4, #16]
 8017d20:	4616      	mov	r6, r2
 8017d22:	e7bc      	b.n	8017c9e <_printf_i+0x146>
 8017d24:	6833      	ldr	r3, [r6, #0]
 8017d26:	1d1a      	adds	r2, r3, #4
 8017d28:	6032      	str	r2, [r6, #0]
 8017d2a:	681e      	ldr	r6, [r3, #0]
 8017d2c:	6862      	ldr	r2, [r4, #4]
 8017d2e:	2100      	movs	r1, #0
 8017d30:	4630      	mov	r0, r6
 8017d32:	f7f0 fa85 	bl	8008240 <memchr>
 8017d36:	b108      	cbz	r0, 8017d3c <_printf_i+0x1e4>
 8017d38:	1b80      	subs	r0, r0, r6
 8017d3a:	6060      	str	r0, [r4, #4]
 8017d3c:	6863      	ldr	r3, [r4, #4]
 8017d3e:	6123      	str	r3, [r4, #16]
 8017d40:	2300      	movs	r3, #0
 8017d42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017d46:	e7aa      	b.n	8017c9e <_printf_i+0x146>
 8017d48:	6923      	ldr	r3, [r4, #16]
 8017d4a:	4632      	mov	r2, r6
 8017d4c:	4649      	mov	r1, r9
 8017d4e:	4640      	mov	r0, r8
 8017d50:	47d0      	blx	sl
 8017d52:	3001      	adds	r0, #1
 8017d54:	d0ad      	beq.n	8017cb2 <_printf_i+0x15a>
 8017d56:	6823      	ldr	r3, [r4, #0]
 8017d58:	079b      	lsls	r3, r3, #30
 8017d5a:	d413      	bmi.n	8017d84 <_printf_i+0x22c>
 8017d5c:	68e0      	ldr	r0, [r4, #12]
 8017d5e:	9b03      	ldr	r3, [sp, #12]
 8017d60:	4298      	cmp	r0, r3
 8017d62:	bfb8      	it	lt
 8017d64:	4618      	movlt	r0, r3
 8017d66:	e7a6      	b.n	8017cb6 <_printf_i+0x15e>
 8017d68:	2301      	movs	r3, #1
 8017d6a:	4632      	mov	r2, r6
 8017d6c:	4649      	mov	r1, r9
 8017d6e:	4640      	mov	r0, r8
 8017d70:	47d0      	blx	sl
 8017d72:	3001      	adds	r0, #1
 8017d74:	d09d      	beq.n	8017cb2 <_printf_i+0x15a>
 8017d76:	3501      	adds	r5, #1
 8017d78:	68e3      	ldr	r3, [r4, #12]
 8017d7a:	9903      	ldr	r1, [sp, #12]
 8017d7c:	1a5b      	subs	r3, r3, r1
 8017d7e:	42ab      	cmp	r3, r5
 8017d80:	dcf2      	bgt.n	8017d68 <_printf_i+0x210>
 8017d82:	e7eb      	b.n	8017d5c <_printf_i+0x204>
 8017d84:	2500      	movs	r5, #0
 8017d86:	f104 0619 	add.w	r6, r4, #25
 8017d8a:	e7f5      	b.n	8017d78 <_printf_i+0x220>
 8017d8c:	08019fb8 	.word	0x08019fb8
 8017d90:	08019fc9 	.word	0x08019fc9

08017d94 <_scanf_chars>:
 8017d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d98:	4615      	mov	r5, r2
 8017d9a:	688a      	ldr	r2, [r1, #8]
 8017d9c:	4680      	mov	r8, r0
 8017d9e:	460c      	mov	r4, r1
 8017da0:	b932      	cbnz	r2, 8017db0 <_scanf_chars+0x1c>
 8017da2:	698a      	ldr	r2, [r1, #24]
 8017da4:	2a00      	cmp	r2, #0
 8017da6:	bf14      	ite	ne
 8017da8:	f04f 32ff 	movne.w	r2, #4294967295
 8017dac:	2201      	moveq	r2, #1
 8017dae:	608a      	str	r2, [r1, #8]
 8017db0:	6822      	ldr	r2, [r4, #0]
 8017db2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8017e44 <_scanf_chars+0xb0>
 8017db6:	06d1      	lsls	r1, r2, #27
 8017db8:	bf5f      	itttt	pl
 8017dba:	681a      	ldrpl	r2, [r3, #0]
 8017dbc:	1d11      	addpl	r1, r2, #4
 8017dbe:	6019      	strpl	r1, [r3, #0]
 8017dc0:	6816      	ldrpl	r6, [r2, #0]
 8017dc2:	2700      	movs	r7, #0
 8017dc4:	69a0      	ldr	r0, [r4, #24]
 8017dc6:	b188      	cbz	r0, 8017dec <_scanf_chars+0x58>
 8017dc8:	2801      	cmp	r0, #1
 8017dca:	d107      	bne.n	8017ddc <_scanf_chars+0x48>
 8017dcc:	682b      	ldr	r3, [r5, #0]
 8017dce:	781a      	ldrb	r2, [r3, #0]
 8017dd0:	6963      	ldr	r3, [r4, #20]
 8017dd2:	5c9b      	ldrb	r3, [r3, r2]
 8017dd4:	b953      	cbnz	r3, 8017dec <_scanf_chars+0x58>
 8017dd6:	2f00      	cmp	r7, #0
 8017dd8:	d031      	beq.n	8017e3e <_scanf_chars+0xaa>
 8017dda:	e022      	b.n	8017e22 <_scanf_chars+0x8e>
 8017ddc:	2802      	cmp	r0, #2
 8017dde:	d120      	bne.n	8017e22 <_scanf_chars+0x8e>
 8017de0:	682b      	ldr	r3, [r5, #0]
 8017de2:	781b      	ldrb	r3, [r3, #0]
 8017de4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017de8:	071b      	lsls	r3, r3, #28
 8017dea:	d41a      	bmi.n	8017e22 <_scanf_chars+0x8e>
 8017dec:	6823      	ldr	r3, [r4, #0]
 8017dee:	06da      	lsls	r2, r3, #27
 8017df0:	bf5e      	ittt	pl
 8017df2:	682b      	ldrpl	r3, [r5, #0]
 8017df4:	781b      	ldrbpl	r3, [r3, #0]
 8017df6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017dfa:	682a      	ldr	r2, [r5, #0]
 8017dfc:	686b      	ldr	r3, [r5, #4]
 8017dfe:	3201      	adds	r2, #1
 8017e00:	602a      	str	r2, [r5, #0]
 8017e02:	68a2      	ldr	r2, [r4, #8]
 8017e04:	3b01      	subs	r3, #1
 8017e06:	3a01      	subs	r2, #1
 8017e08:	606b      	str	r3, [r5, #4]
 8017e0a:	3701      	adds	r7, #1
 8017e0c:	60a2      	str	r2, [r4, #8]
 8017e0e:	b142      	cbz	r2, 8017e22 <_scanf_chars+0x8e>
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	dcd7      	bgt.n	8017dc4 <_scanf_chars+0x30>
 8017e14:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017e18:	4629      	mov	r1, r5
 8017e1a:	4640      	mov	r0, r8
 8017e1c:	4798      	blx	r3
 8017e1e:	2800      	cmp	r0, #0
 8017e20:	d0d0      	beq.n	8017dc4 <_scanf_chars+0x30>
 8017e22:	6823      	ldr	r3, [r4, #0]
 8017e24:	f013 0310 	ands.w	r3, r3, #16
 8017e28:	d105      	bne.n	8017e36 <_scanf_chars+0xa2>
 8017e2a:	68e2      	ldr	r2, [r4, #12]
 8017e2c:	3201      	adds	r2, #1
 8017e2e:	60e2      	str	r2, [r4, #12]
 8017e30:	69a2      	ldr	r2, [r4, #24]
 8017e32:	b102      	cbz	r2, 8017e36 <_scanf_chars+0xa2>
 8017e34:	7033      	strb	r3, [r6, #0]
 8017e36:	6923      	ldr	r3, [r4, #16]
 8017e38:	443b      	add	r3, r7
 8017e3a:	6123      	str	r3, [r4, #16]
 8017e3c:	2000      	movs	r0, #0
 8017e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e42:	bf00      	nop
 8017e44:	0801a089 	.word	0x0801a089

08017e48 <_scanf_i>:
 8017e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e4c:	4698      	mov	r8, r3
 8017e4e:	4b74      	ldr	r3, [pc, #464]	@ (8018020 <_scanf_i+0x1d8>)
 8017e50:	460c      	mov	r4, r1
 8017e52:	4682      	mov	sl, r0
 8017e54:	4616      	mov	r6, r2
 8017e56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017e5a:	b087      	sub	sp, #28
 8017e5c:	ab03      	add	r3, sp, #12
 8017e5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017e62:	4b70      	ldr	r3, [pc, #448]	@ (8018024 <_scanf_i+0x1dc>)
 8017e64:	69a1      	ldr	r1, [r4, #24]
 8017e66:	4a70      	ldr	r2, [pc, #448]	@ (8018028 <_scanf_i+0x1e0>)
 8017e68:	2903      	cmp	r1, #3
 8017e6a:	bf08      	it	eq
 8017e6c:	461a      	moveq	r2, r3
 8017e6e:	68a3      	ldr	r3, [r4, #8]
 8017e70:	9201      	str	r2, [sp, #4]
 8017e72:	1e5a      	subs	r2, r3, #1
 8017e74:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8017e78:	bf88      	it	hi
 8017e7a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8017e7e:	4627      	mov	r7, r4
 8017e80:	bf82      	ittt	hi
 8017e82:	eb03 0905 	addhi.w	r9, r3, r5
 8017e86:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8017e8a:	60a3      	strhi	r3, [r4, #8]
 8017e8c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017e90:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8017e94:	bf98      	it	ls
 8017e96:	f04f 0900 	movls.w	r9, #0
 8017e9a:	6023      	str	r3, [r4, #0]
 8017e9c:	463d      	mov	r5, r7
 8017e9e:	f04f 0b00 	mov.w	fp, #0
 8017ea2:	6831      	ldr	r1, [r6, #0]
 8017ea4:	ab03      	add	r3, sp, #12
 8017ea6:	7809      	ldrb	r1, [r1, #0]
 8017ea8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017eac:	2202      	movs	r2, #2
 8017eae:	f7f0 f9c7 	bl	8008240 <memchr>
 8017eb2:	b328      	cbz	r0, 8017f00 <_scanf_i+0xb8>
 8017eb4:	f1bb 0f01 	cmp.w	fp, #1
 8017eb8:	d159      	bne.n	8017f6e <_scanf_i+0x126>
 8017eba:	6862      	ldr	r2, [r4, #4]
 8017ebc:	b92a      	cbnz	r2, 8017eca <_scanf_i+0x82>
 8017ebe:	6822      	ldr	r2, [r4, #0]
 8017ec0:	2108      	movs	r1, #8
 8017ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017ec6:	6061      	str	r1, [r4, #4]
 8017ec8:	6022      	str	r2, [r4, #0]
 8017eca:	6822      	ldr	r2, [r4, #0]
 8017ecc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8017ed0:	6022      	str	r2, [r4, #0]
 8017ed2:	68a2      	ldr	r2, [r4, #8]
 8017ed4:	1e51      	subs	r1, r2, #1
 8017ed6:	60a1      	str	r1, [r4, #8]
 8017ed8:	b192      	cbz	r2, 8017f00 <_scanf_i+0xb8>
 8017eda:	6832      	ldr	r2, [r6, #0]
 8017edc:	1c51      	adds	r1, r2, #1
 8017ede:	6031      	str	r1, [r6, #0]
 8017ee0:	7812      	ldrb	r2, [r2, #0]
 8017ee2:	f805 2b01 	strb.w	r2, [r5], #1
 8017ee6:	6872      	ldr	r2, [r6, #4]
 8017ee8:	3a01      	subs	r2, #1
 8017eea:	2a00      	cmp	r2, #0
 8017eec:	6072      	str	r2, [r6, #4]
 8017eee:	dc07      	bgt.n	8017f00 <_scanf_i+0xb8>
 8017ef0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8017ef4:	4631      	mov	r1, r6
 8017ef6:	4650      	mov	r0, sl
 8017ef8:	4790      	blx	r2
 8017efa:	2800      	cmp	r0, #0
 8017efc:	f040 8085 	bne.w	801800a <_scanf_i+0x1c2>
 8017f00:	f10b 0b01 	add.w	fp, fp, #1
 8017f04:	f1bb 0f03 	cmp.w	fp, #3
 8017f08:	d1cb      	bne.n	8017ea2 <_scanf_i+0x5a>
 8017f0a:	6863      	ldr	r3, [r4, #4]
 8017f0c:	b90b      	cbnz	r3, 8017f12 <_scanf_i+0xca>
 8017f0e:	230a      	movs	r3, #10
 8017f10:	6063      	str	r3, [r4, #4]
 8017f12:	6863      	ldr	r3, [r4, #4]
 8017f14:	4945      	ldr	r1, [pc, #276]	@ (801802c <_scanf_i+0x1e4>)
 8017f16:	6960      	ldr	r0, [r4, #20]
 8017f18:	1ac9      	subs	r1, r1, r3
 8017f1a:	f000 f997 	bl	801824c <__sccl>
 8017f1e:	f04f 0b00 	mov.w	fp, #0
 8017f22:	68a3      	ldr	r3, [r4, #8]
 8017f24:	6822      	ldr	r2, [r4, #0]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d03d      	beq.n	8017fa6 <_scanf_i+0x15e>
 8017f2a:	6831      	ldr	r1, [r6, #0]
 8017f2c:	6960      	ldr	r0, [r4, #20]
 8017f2e:	f891 c000 	ldrb.w	ip, [r1]
 8017f32:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017f36:	2800      	cmp	r0, #0
 8017f38:	d035      	beq.n	8017fa6 <_scanf_i+0x15e>
 8017f3a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8017f3e:	d124      	bne.n	8017f8a <_scanf_i+0x142>
 8017f40:	0510      	lsls	r0, r2, #20
 8017f42:	d522      	bpl.n	8017f8a <_scanf_i+0x142>
 8017f44:	f10b 0b01 	add.w	fp, fp, #1
 8017f48:	f1b9 0f00 	cmp.w	r9, #0
 8017f4c:	d003      	beq.n	8017f56 <_scanf_i+0x10e>
 8017f4e:	3301      	adds	r3, #1
 8017f50:	f109 39ff 	add.w	r9, r9, #4294967295
 8017f54:	60a3      	str	r3, [r4, #8]
 8017f56:	6873      	ldr	r3, [r6, #4]
 8017f58:	3b01      	subs	r3, #1
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	6073      	str	r3, [r6, #4]
 8017f5e:	dd1b      	ble.n	8017f98 <_scanf_i+0x150>
 8017f60:	6833      	ldr	r3, [r6, #0]
 8017f62:	3301      	adds	r3, #1
 8017f64:	6033      	str	r3, [r6, #0]
 8017f66:	68a3      	ldr	r3, [r4, #8]
 8017f68:	3b01      	subs	r3, #1
 8017f6a:	60a3      	str	r3, [r4, #8]
 8017f6c:	e7d9      	b.n	8017f22 <_scanf_i+0xda>
 8017f6e:	f1bb 0f02 	cmp.w	fp, #2
 8017f72:	d1ae      	bne.n	8017ed2 <_scanf_i+0x8a>
 8017f74:	6822      	ldr	r2, [r4, #0]
 8017f76:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8017f7a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8017f7e:	d1c4      	bne.n	8017f0a <_scanf_i+0xc2>
 8017f80:	2110      	movs	r1, #16
 8017f82:	6061      	str	r1, [r4, #4]
 8017f84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8017f88:	e7a2      	b.n	8017ed0 <_scanf_i+0x88>
 8017f8a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8017f8e:	6022      	str	r2, [r4, #0]
 8017f90:	780b      	ldrb	r3, [r1, #0]
 8017f92:	f805 3b01 	strb.w	r3, [r5], #1
 8017f96:	e7de      	b.n	8017f56 <_scanf_i+0x10e>
 8017f98:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017f9c:	4631      	mov	r1, r6
 8017f9e:	4650      	mov	r0, sl
 8017fa0:	4798      	blx	r3
 8017fa2:	2800      	cmp	r0, #0
 8017fa4:	d0df      	beq.n	8017f66 <_scanf_i+0x11e>
 8017fa6:	6823      	ldr	r3, [r4, #0]
 8017fa8:	05d9      	lsls	r1, r3, #23
 8017faa:	d50d      	bpl.n	8017fc8 <_scanf_i+0x180>
 8017fac:	42bd      	cmp	r5, r7
 8017fae:	d909      	bls.n	8017fc4 <_scanf_i+0x17c>
 8017fb0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017fb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017fb8:	4632      	mov	r2, r6
 8017fba:	4650      	mov	r0, sl
 8017fbc:	4798      	blx	r3
 8017fbe:	f105 39ff 	add.w	r9, r5, #4294967295
 8017fc2:	464d      	mov	r5, r9
 8017fc4:	42bd      	cmp	r5, r7
 8017fc6:	d028      	beq.n	801801a <_scanf_i+0x1d2>
 8017fc8:	6822      	ldr	r2, [r4, #0]
 8017fca:	f012 0210 	ands.w	r2, r2, #16
 8017fce:	d113      	bne.n	8017ff8 <_scanf_i+0x1b0>
 8017fd0:	702a      	strb	r2, [r5, #0]
 8017fd2:	6863      	ldr	r3, [r4, #4]
 8017fd4:	9e01      	ldr	r6, [sp, #4]
 8017fd6:	4639      	mov	r1, r7
 8017fd8:	4650      	mov	r0, sl
 8017fda:	47b0      	blx	r6
 8017fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8017fe0:	6821      	ldr	r1, [r4, #0]
 8017fe2:	1d1a      	adds	r2, r3, #4
 8017fe4:	f8c8 2000 	str.w	r2, [r8]
 8017fe8:	f011 0f20 	tst.w	r1, #32
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	d00f      	beq.n	8018010 <_scanf_i+0x1c8>
 8017ff0:	6018      	str	r0, [r3, #0]
 8017ff2:	68e3      	ldr	r3, [r4, #12]
 8017ff4:	3301      	adds	r3, #1
 8017ff6:	60e3      	str	r3, [r4, #12]
 8017ff8:	6923      	ldr	r3, [r4, #16]
 8017ffa:	1bed      	subs	r5, r5, r7
 8017ffc:	445d      	add	r5, fp
 8017ffe:	442b      	add	r3, r5
 8018000:	6123      	str	r3, [r4, #16]
 8018002:	2000      	movs	r0, #0
 8018004:	b007      	add	sp, #28
 8018006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801800a:	f04f 0b00 	mov.w	fp, #0
 801800e:	e7ca      	b.n	8017fa6 <_scanf_i+0x15e>
 8018010:	07ca      	lsls	r2, r1, #31
 8018012:	bf4c      	ite	mi
 8018014:	8018      	strhmi	r0, [r3, #0]
 8018016:	6018      	strpl	r0, [r3, #0]
 8018018:	e7eb      	b.n	8017ff2 <_scanf_i+0x1aa>
 801801a:	2001      	movs	r0, #1
 801801c:	e7f2      	b.n	8018004 <_scanf_i+0x1bc>
 801801e:	bf00      	nop
 8018020:	08018948 	.word	0x08018948
 8018024:	08018505 	.word	0x08018505
 8018028:	080185e5 	.word	0x080185e5
 801802c:	08019fea 	.word	0x08019fea

08018030 <__sflush_r>:
 8018030:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018038:	0716      	lsls	r6, r2, #28
 801803a:	4605      	mov	r5, r0
 801803c:	460c      	mov	r4, r1
 801803e:	d454      	bmi.n	80180ea <__sflush_r+0xba>
 8018040:	684b      	ldr	r3, [r1, #4]
 8018042:	2b00      	cmp	r3, #0
 8018044:	dc02      	bgt.n	801804c <__sflush_r+0x1c>
 8018046:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018048:	2b00      	cmp	r3, #0
 801804a:	dd48      	ble.n	80180de <__sflush_r+0xae>
 801804c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801804e:	2e00      	cmp	r6, #0
 8018050:	d045      	beq.n	80180de <__sflush_r+0xae>
 8018052:	2300      	movs	r3, #0
 8018054:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018058:	682f      	ldr	r7, [r5, #0]
 801805a:	6a21      	ldr	r1, [r4, #32]
 801805c:	602b      	str	r3, [r5, #0]
 801805e:	d030      	beq.n	80180c2 <__sflush_r+0x92>
 8018060:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018062:	89a3      	ldrh	r3, [r4, #12]
 8018064:	0759      	lsls	r1, r3, #29
 8018066:	d505      	bpl.n	8018074 <__sflush_r+0x44>
 8018068:	6863      	ldr	r3, [r4, #4]
 801806a:	1ad2      	subs	r2, r2, r3
 801806c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801806e:	b10b      	cbz	r3, 8018074 <__sflush_r+0x44>
 8018070:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018072:	1ad2      	subs	r2, r2, r3
 8018074:	2300      	movs	r3, #0
 8018076:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018078:	6a21      	ldr	r1, [r4, #32]
 801807a:	4628      	mov	r0, r5
 801807c:	47b0      	blx	r6
 801807e:	1c43      	adds	r3, r0, #1
 8018080:	89a3      	ldrh	r3, [r4, #12]
 8018082:	d106      	bne.n	8018092 <__sflush_r+0x62>
 8018084:	6829      	ldr	r1, [r5, #0]
 8018086:	291d      	cmp	r1, #29
 8018088:	d82b      	bhi.n	80180e2 <__sflush_r+0xb2>
 801808a:	4a2a      	ldr	r2, [pc, #168]	@ (8018134 <__sflush_r+0x104>)
 801808c:	40ca      	lsrs	r2, r1
 801808e:	07d6      	lsls	r6, r2, #31
 8018090:	d527      	bpl.n	80180e2 <__sflush_r+0xb2>
 8018092:	2200      	movs	r2, #0
 8018094:	6062      	str	r2, [r4, #4]
 8018096:	04d9      	lsls	r1, r3, #19
 8018098:	6922      	ldr	r2, [r4, #16]
 801809a:	6022      	str	r2, [r4, #0]
 801809c:	d504      	bpl.n	80180a8 <__sflush_r+0x78>
 801809e:	1c42      	adds	r2, r0, #1
 80180a0:	d101      	bne.n	80180a6 <__sflush_r+0x76>
 80180a2:	682b      	ldr	r3, [r5, #0]
 80180a4:	b903      	cbnz	r3, 80180a8 <__sflush_r+0x78>
 80180a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80180a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80180aa:	602f      	str	r7, [r5, #0]
 80180ac:	b1b9      	cbz	r1, 80180de <__sflush_r+0xae>
 80180ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80180b2:	4299      	cmp	r1, r3
 80180b4:	d002      	beq.n	80180bc <__sflush_r+0x8c>
 80180b6:	4628      	mov	r0, r5
 80180b8:	f7fe f822 	bl	8016100 <_free_r>
 80180bc:	2300      	movs	r3, #0
 80180be:	6363      	str	r3, [r4, #52]	@ 0x34
 80180c0:	e00d      	b.n	80180de <__sflush_r+0xae>
 80180c2:	2301      	movs	r3, #1
 80180c4:	4628      	mov	r0, r5
 80180c6:	47b0      	blx	r6
 80180c8:	4602      	mov	r2, r0
 80180ca:	1c50      	adds	r0, r2, #1
 80180cc:	d1c9      	bne.n	8018062 <__sflush_r+0x32>
 80180ce:	682b      	ldr	r3, [r5, #0]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d0c6      	beq.n	8018062 <__sflush_r+0x32>
 80180d4:	2b1d      	cmp	r3, #29
 80180d6:	d001      	beq.n	80180dc <__sflush_r+0xac>
 80180d8:	2b16      	cmp	r3, #22
 80180da:	d11e      	bne.n	801811a <__sflush_r+0xea>
 80180dc:	602f      	str	r7, [r5, #0]
 80180de:	2000      	movs	r0, #0
 80180e0:	e022      	b.n	8018128 <__sflush_r+0xf8>
 80180e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80180e6:	b21b      	sxth	r3, r3
 80180e8:	e01b      	b.n	8018122 <__sflush_r+0xf2>
 80180ea:	690f      	ldr	r7, [r1, #16]
 80180ec:	2f00      	cmp	r7, #0
 80180ee:	d0f6      	beq.n	80180de <__sflush_r+0xae>
 80180f0:	0793      	lsls	r3, r2, #30
 80180f2:	680e      	ldr	r6, [r1, #0]
 80180f4:	bf08      	it	eq
 80180f6:	694b      	ldreq	r3, [r1, #20]
 80180f8:	600f      	str	r7, [r1, #0]
 80180fa:	bf18      	it	ne
 80180fc:	2300      	movne	r3, #0
 80180fe:	eba6 0807 	sub.w	r8, r6, r7
 8018102:	608b      	str	r3, [r1, #8]
 8018104:	f1b8 0f00 	cmp.w	r8, #0
 8018108:	dde9      	ble.n	80180de <__sflush_r+0xae>
 801810a:	6a21      	ldr	r1, [r4, #32]
 801810c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801810e:	4643      	mov	r3, r8
 8018110:	463a      	mov	r2, r7
 8018112:	4628      	mov	r0, r5
 8018114:	47b0      	blx	r6
 8018116:	2800      	cmp	r0, #0
 8018118:	dc08      	bgt.n	801812c <__sflush_r+0xfc>
 801811a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801811e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018122:	81a3      	strh	r3, [r4, #12]
 8018124:	f04f 30ff 	mov.w	r0, #4294967295
 8018128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801812c:	4407      	add	r7, r0
 801812e:	eba8 0800 	sub.w	r8, r8, r0
 8018132:	e7e7      	b.n	8018104 <__sflush_r+0xd4>
 8018134:	20400001 	.word	0x20400001

08018138 <_fflush_r>:
 8018138:	b538      	push	{r3, r4, r5, lr}
 801813a:	690b      	ldr	r3, [r1, #16]
 801813c:	4605      	mov	r5, r0
 801813e:	460c      	mov	r4, r1
 8018140:	b913      	cbnz	r3, 8018148 <_fflush_r+0x10>
 8018142:	2500      	movs	r5, #0
 8018144:	4628      	mov	r0, r5
 8018146:	bd38      	pop	{r3, r4, r5, pc}
 8018148:	b118      	cbz	r0, 8018152 <_fflush_r+0x1a>
 801814a:	6a03      	ldr	r3, [r0, #32]
 801814c:	b90b      	cbnz	r3, 8018152 <_fflush_r+0x1a>
 801814e:	f7fd fd1f 	bl	8015b90 <__sinit>
 8018152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018156:	2b00      	cmp	r3, #0
 8018158:	d0f3      	beq.n	8018142 <_fflush_r+0xa>
 801815a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801815c:	07d0      	lsls	r0, r2, #31
 801815e:	d404      	bmi.n	801816a <_fflush_r+0x32>
 8018160:	0599      	lsls	r1, r3, #22
 8018162:	d402      	bmi.n	801816a <_fflush_r+0x32>
 8018164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018166:	f7fd ffb2 	bl	80160ce <__retarget_lock_acquire_recursive>
 801816a:	4628      	mov	r0, r5
 801816c:	4621      	mov	r1, r4
 801816e:	f7ff ff5f 	bl	8018030 <__sflush_r>
 8018172:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018174:	07da      	lsls	r2, r3, #31
 8018176:	4605      	mov	r5, r0
 8018178:	d4e4      	bmi.n	8018144 <_fflush_r+0xc>
 801817a:	89a3      	ldrh	r3, [r4, #12]
 801817c:	059b      	lsls	r3, r3, #22
 801817e:	d4e1      	bmi.n	8018144 <_fflush_r+0xc>
 8018180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018182:	f7fd ffa5 	bl	80160d0 <__retarget_lock_release_recursive>
 8018186:	e7dd      	b.n	8018144 <_fflush_r+0xc>

08018188 <__swhatbuf_r>:
 8018188:	b570      	push	{r4, r5, r6, lr}
 801818a:	460c      	mov	r4, r1
 801818c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018190:	2900      	cmp	r1, #0
 8018192:	b096      	sub	sp, #88	@ 0x58
 8018194:	4615      	mov	r5, r2
 8018196:	461e      	mov	r6, r3
 8018198:	da0d      	bge.n	80181b6 <__swhatbuf_r+0x2e>
 801819a:	89a3      	ldrh	r3, [r4, #12]
 801819c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80181a0:	f04f 0100 	mov.w	r1, #0
 80181a4:	bf14      	ite	ne
 80181a6:	2340      	movne	r3, #64	@ 0x40
 80181a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80181ac:	2000      	movs	r0, #0
 80181ae:	6031      	str	r1, [r6, #0]
 80181b0:	602b      	str	r3, [r5, #0]
 80181b2:	b016      	add	sp, #88	@ 0x58
 80181b4:	bd70      	pop	{r4, r5, r6, pc}
 80181b6:	466a      	mov	r2, sp
 80181b8:	f000 f8d6 	bl	8018368 <_fstat_r>
 80181bc:	2800      	cmp	r0, #0
 80181be:	dbec      	blt.n	801819a <__swhatbuf_r+0x12>
 80181c0:	9901      	ldr	r1, [sp, #4]
 80181c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80181c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80181ca:	4259      	negs	r1, r3
 80181cc:	4159      	adcs	r1, r3
 80181ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80181d2:	e7eb      	b.n	80181ac <__swhatbuf_r+0x24>

080181d4 <__smakebuf_r>:
 80181d4:	898b      	ldrh	r3, [r1, #12]
 80181d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80181d8:	079d      	lsls	r5, r3, #30
 80181da:	4606      	mov	r6, r0
 80181dc:	460c      	mov	r4, r1
 80181de:	d507      	bpl.n	80181f0 <__smakebuf_r+0x1c>
 80181e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80181e4:	6023      	str	r3, [r4, #0]
 80181e6:	6123      	str	r3, [r4, #16]
 80181e8:	2301      	movs	r3, #1
 80181ea:	6163      	str	r3, [r4, #20]
 80181ec:	b003      	add	sp, #12
 80181ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181f0:	ab01      	add	r3, sp, #4
 80181f2:	466a      	mov	r2, sp
 80181f4:	f7ff ffc8 	bl	8018188 <__swhatbuf_r>
 80181f8:	9f00      	ldr	r7, [sp, #0]
 80181fa:	4605      	mov	r5, r0
 80181fc:	4639      	mov	r1, r7
 80181fe:	4630      	mov	r0, r6
 8018200:	f7fc fd6a 	bl	8014cd8 <_malloc_r>
 8018204:	b948      	cbnz	r0, 801821a <__smakebuf_r+0x46>
 8018206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801820a:	059a      	lsls	r2, r3, #22
 801820c:	d4ee      	bmi.n	80181ec <__smakebuf_r+0x18>
 801820e:	f023 0303 	bic.w	r3, r3, #3
 8018212:	f043 0302 	orr.w	r3, r3, #2
 8018216:	81a3      	strh	r3, [r4, #12]
 8018218:	e7e2      	b.n	80181e0 <__smakebuf_r+0xc>
 801821a:	89a3      	ldrh	r3, [r4, #12]
 801821c:	6020      	str	r0, [r4, #0]
 801821e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018222:	81a3      	strh	r3, [r4, #12]
 8018224:	9b01      	ldr	r3, [sp, #4]
 8018226:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801822a:	b15b      	cbz	r3, 8018244 <__smakebuf_r+0x70>
 801822c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018230:	4630      	mov	r0, r6
 8018232:	f000 f8ab 	bl	801838c <_isatty_r>
 8018236:	b128      	cbz	r0, 8018244 <__smakebuf_r+0x70>
 8018238:	89a3      	ldrh	r3, [r4, #12]
 801823a:	f023 0303 	bic.w	r3, r3, #3
 801823e:	f043 0301 	orr.w	r3, r3, #1
 8018242:	81a3      	strh	r3, [r4, #12]
 8018244:	89a3      	ldrh	r3, [r4, #12]
 8018246:	431d      	orrs	r5, r3
 8018248:	81a5      	strh	r5, [r4, #12]
 801824a:	e7cf      	b.n	80181ec <__smakebuf_r+0x18>

0801824c <__sccl>:
 801824c:	b570      	push	{r4, r5, r6, lr}
 801824e:	780b      	ldrb	r3, [r1, #0]
 8018250:	4604      	mov	r4, r0
 8018252:	2b5e      	cmp	r3, #94	@ 0x5e
 8018254:	bf0b      	itete	eq
 8018256:	784b      	ldrbeq	r3, [r1, #1]
 8018258:	1c4a      	addne	r2, r1, #1
 801825a:	1c8a      	addeq	r2, r1, #2
 801825c:	2100      	movne	r1, #0
 801825e:	bf08      	it	eq
 8018260:	2101      	moveq	r1, #1
 8018262:	3801      	subs	r0, #1
 8018264:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8018268:	f800 1f01 	strb.w	r1, [r0, #1]!
 801826c:	42a8      	cmp	r0, r5
 801826e:	d1fb      	bne.n	8018268 <__sccl+0x1c>
 8018270:	b90b      	cbnz	r3, 8018276 <__sccl+0x2a>
 8018272:	1e50      	subs	r0, r2, #1
 8018274:	bd70      	pop	{r4, r5, r6, pc}
 8018276:	f081 0101 	eor.w	r1, r1, #1
 801827a:	54e1      	strb	r1, [r4, r3]
 801827c:	4610      	mov	r0, r2
 801827e:	4602      	mov	r2, r0
 8018280:	f812 5b01 	ldrb.w	r5, [r2], #1
 8018284:	2d2d      	cmp	r5, #45	@ 0x2d
 8018286:	d005      	beq.n	8018294 <__sccl+0x48>
 8018288:	2d5d      	cmp	r5, #93	@ 0x5d
 801828a:	d016      	beq.n	80182ba <__sccl+0x6e>
 801828c:	2d00      	cmp	r5, #0
 801828e:	d0f1      	beq.n	8018274 <__sccl+0x28>
 8018290:	462b      	mov	r3, r5
 8018292:	e7f2      	b.n	801827a <__sccl+0x2e>
 8018294:	7846      	ldrb	r6, [r0, #1]
 8018296:	2e5d      	cmp	r6, #93	@ 0x5d
 8018298:	d0fa      	beq.n	8018290 <__sccl+0x44>
 801829a:	42b3      	cmp	r3, r6
 801829c:	dcf8      	bgt.n	8018290 <__sccl+0x44>
 801829e:	3002      	adds	r0, #2
 80182a0:	461a      	mov	r2, r3
 80182a2:	3201      	adds	r2, #1
 80182a4:	4296      	cmp	r6, r2
 80182a6:	54a1      	strb	r1, [r4, r2]
 80182a8:	dcfb      	bgt.n	80182a2 <__sccl+0x56>
 80182aa:	1af2      	subs	r2, r6, r3
 80182ac:	3a01      	subs	r2, #1
 80182ae:	1c5d      	adds	r5, r3, #1
 80182b0:	42b3      	cmp	r3, r6
 80182b2:	bfa8      	it	ge
 80182b4:	2200      	movge	r2, #0
 80182b6:	18ab      	adds	r3, r5, r2
 80182b8:	e7e1      	b.n	801827e <__sccl+0x32>
 80182ba:	4610      	mov	r0, r2
 80182bc:	e7da      	b.n	8018274 <__sccl+0x28>

080182be <__submore>:
 80182be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182c2:	460c      	mov	r4, r1
 80182c4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80182c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80182ca:	4299      	cmp	r1, r3
 80182cc:	d11d      	bne.n	801830a <__submore+0x4c>
 80182ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80182d2:	f7fc fd01 	bl	8014cd8 <_malloc_r>
 80182d6:	b918      	cbnz	r0, 80182e0 <__submore+0x22>
 80182d8:	f04f 30ff 	mov.w	r0, #4294967295
 80182dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80182e4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80182e6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80182ea:	6360      	str	r0, [r4, #52]	@ 0x34
 80182ec:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80182f0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80182f4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80182f8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80182fc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8018300:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8018304:	6020      	str	r0, [r4, #0]
 8018306:	2000      	movs	r0, #0
 8018308:	e7e8      	b.n	80182dc <__submore+0x1e>
 801830a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801830c:	0077      	lsls	r7, r6, #1
 801830e:	463a      	mov	r2, r7
 8018310:	f7fc fd76 	bl	8014e00 <_realloc_r>
 8018314:	4605      	mov	r5, r0
 8018316:	2800      	cmp	r0, #0
 8018318:	d0de      	beq.n	80182d8 <__submore+0x1a>
 801831a:	eb00 0806 	add.w	r8, r0, r6
 801831e:	4601      	mov	r1, r0
 8018320:	4632      	mov	r2, r6
 8018322:	4640      	mov	r0, r8
 8018324:	f7fd fed5 	bl	80160d2 <memcpy>
 8018328:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801832c:	f8c4 8000 	str.w	r8, [r4]
 8018330:	e7e9      	b.n	8018306 <__submore+0x48>

08018332 <memmove>:
 8018332:	4288      	cmp	r0, r1
 8018334:	b510      	push	{r4, lr}
 8018336:	eb01 0402 	add.w	r4, r1, r2
 801833a:	d902      	bls.n	8018342 <memmove+0x10>
 801833c:	4284      	cmp	r4, r0
 801833e:	4623      	mov	r3, r4
 8018340:	d807      	bhi.n	8018352 <memmove+0x20>
 8018342:	1e43      	subs	r3, r0, #1
 8018344:	42a1      	cmp	r1, r4
 8018346:	d008      	beq.n	801835a <memmove+0x28>
 8018348:	f811 2b01 	ldrb.w	r2, [r1], #1
 801834c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018350:	e7f8      	b.n	8018344 <memmove+0x12>
 8018352:	4402      	add	r2, r0
 8018354:	4601      	mov	r1, r0
 8018356:	428a      	cmp	r2, r1
 8018358:	d100      	bne.n	801835c <memmove+0x2a>
 801835a:	bd10      	pop	{r4, pc}
 801835c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018360:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018364:	e7f7      	b.n	8018356 <memmove+0x24>
	...

08018368 <_fstat_r>:
 8018368:	b538      	push	{r3, r4, r5, lr}
 801836a:	4d07      	ldr	r5, [pc, #28]	@ (8018388 <_fstat_r+0x20>)
 801836c:	2300      	movs	r3, #0
 801836e:	4604      	mov	r4, r0
 8018370:	4608      	mov	r0, r1
 8018372:	4611      	mov	r1, r2
 8018374:	602b      	str	r3, [r5, #0]
 8018376:	f7f5 ff93 	bl	800e2a0 <_fstat>
 801837a:	1c43      	adds	r3, r0, #1
 801837c:	d102      	bne.n	8018384 <_fstat_r+0x1c>
 801837e:	682b      	ldr	r3, [r5, #0]
 8018380:	b103      	cbz	r3, 8018384 <_fstat_r+0x1c>
 8018382:	6023      	str	r3, [r4, #0]
 8018384:	bd38      	pop	{r3, r4, r5, pc}
 8018386:	bf00      	nop
 8018388:	20013498 	.word	0x20013498

0801838c <_isatty_r>:
 801838c:	b538      	push	{r3, r4, r5, lr}
 801838e:	4d06      	ldr	r5, [pc, #24]	@ (80183a8 <_isatty_r+0x1c>)
 8018390:	2300      	movs	r3, #0
 8018392:	4604      	mov	r4, r0
 8018394:	4608      	mov	r0, r1
 8018396:	602b      	str	r3, [r5, #0]
 8018398:	f7f5 ff92 	bl	800e2c0 <_isatty>
 801839c:	1c43      	adds	r3, r0, #1
 801839e:	d102      	bne.n	80183a6 <_isatty_r+0x1a>
 80183a0:	682b      	ldr	r3, [r5, #0]
 80183a2:	b103      	cbz	r3, 80183a6 <_isatty_r+0x1a>
 80183a4:	6023      	str	r3, [r4, #0]
 80183a6:	bd38      	pop	{r3, r4, r5, pc}
 80183a8:	20013498 	.word	0x20013498

080183ac <__assert_func>:
 80183ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80183ae:	4614      	mov	r4, r2
 80183b0:	461a      	mov	r2, r3
 80183b2:	4b09      	ldr	r3, [pc, #36]	@ (80183d8 <__assert_func+0x2c>)
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	4605      	mov	r5, r0
 80183b8:	68d8      	ldr	r0, [r3, #12]
 80183ba:	b14c      	cbz	r4, 80183d0 <__assert_func+0x24>
 80183bc:	4b07      	ldr	r3, [pc, #28]	@ (80183dc <__assert_func+0x30>)
 80183be:	9100      	str	r1, [sp, #0]
 80183c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80183c4:	4906      	ldr	r1, [pc, #24]	@ (80183e0 <__assert_func+0x34>)
 80183c6:	462b      	mov	r3, r5
 80183c8:	f000 f90e 	bl	80185e8 <fiprintf>
 80183cc:	f000 f91e 	bl	801860c <abort>
 80183d0:	4b04      	ldr	r3, [pc, #16]	@ (80183e4 <__assert_func+0x38>)
 80183d2:	461c      	mov	r4, r3
 80183d4:	e7f3      	b.n	80183be <__assert_func+0x12>
 80183d6:	bf00      	nop
 80183d8:	200001a4 	.word	0x200001a4
 80183dc:	08019ff5 	.word	0x08019ff5
 80183e0:	0801a002 	.word	0x0801a002
 80183e4:	0801a030 	.word	0x0801a030

080183e8 <_calloc_r>:
 80183e8:	b570      	push	{r4, r5, r6, lr}
 80183ea:	fba1 5402 	umull	r5, r4, r1, r2
 80183ee:	b934      	cbnz	r4, 80183fe <_calloc_r+0x16>
 80183f0:	4629      	mov	r1, r5
 80183f2:	f7fc fc71 	bl	8014cd8 <_malloc_r>
 80183f6:	4606      	mov	r6, r0
 80183f8:	b928      	cbnz	r0, 8018406 <_calloc_r+0x1e>
 80183fa:	4630      	mov	r0, r6
 80183fc:	bd70      	pop	{r4, r5, r6, pc}
 80183fe:	220c      	movs	r2, #12
 8018400:	6002      	str	r2, [r0, #0]
 8018402:	2600      	movs	r6, #0
 8018404:	e7f9      	b.n	80183fa <_calloc_r+0x12>
 8018406:	462a      	mov	r2, r5
 8018408:	4621      	mov	r1, r4
 801840a:	f7fd fdc5 	bl	8015f98 <memset>
 801840e:	e7f4      	b.n	80183fa <_calloc_r+0x12>

08018410 <_strtol_l.isra.0>:
 8018410:	2b24      	cmp	r3, #36	@ 0x24
 8018412:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018416:	4686      	mov	lr, r0
 8018418:	4690      	mov	r8, r2
 801841a:	d801      	bhi.n	8018420 <_strtol_l.isra.0+0x10>
 801841c:	2b01      	cmp	r3, #1
 801841e:	d106      	bne.n	801842e <_strtol_l.isra.0+0x1e>
 8018420:	f7fd fe2a 	bl	8016078 <__errno>
 8018424:	2316      	movs	r3, #22
 8018426:	6003      	str	r3, [r0, #0]
 8018428:	2000      	movs	r0, #0
 801842a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801842e:	4834      	ldr	r0, [pc, #208]	@ (8018500 <_strtol_l.isra.0+0xf0>)
 8018430:	460d      	mov	r5, r1
 8018432:	462a      	mov	r2, r5
 8018434:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018438:	5d06      	ldrb	r6, [r0, r4]
 801843a:	f016 0608 	ands.w	r6, r6, #8
 801843e:	d1f8      	bne.n	8018432 <_strtol_l.isra.0+0x22>
 8018440:	2c2d      	cmp	r4, #45	@ 0x2d
 8018442:	d110      	bne.n	8018466 <_strtol_l.isra.0+0x56>
 8018444:	782c      	ldrb	r4, [r5, #0]
 8018446:	2601      	movs	r6, #1
 8018448:	1c95      	adds	r5, r2, #2
 801844a:	f033 0210 	bics.w	r2, r3, #16
 801844e:	d115      	bne.n	801847c <_strtol_l.isra.0+0x6c>
 8018450:	2c30      	cmp	r4, #48	@ 0x30
 8018452:	d10d      	bne.n	8018470 <_strtol_l.isra.0+0x60>
 8018454:	782a      	ldrb	r2, [r5, #0]
 8018456:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801845a:	2a58      	cmp	r2, #88	@ 0x58
 801845c:	d108      	bne.n	8018470 <_strtol_l.isra.0+0x60>
 801845e:	786c      	ldrb	r4, [r5, #1]
 8018460:	3502      	adds	r5, #2
 8018462:	2310      	movs	r3, #16
 8018464:	e00a      	b.n	801847c <_strtol_l.isra.0+0x6c>
 8018466:	2c2b      	cmp	r4, #43	@ 0x2b
 8018468:	bf04      	itt	eq
 801846a:	782c      	ldrbeq	r4, [r5, #0]
 801846c:	1c95      	addeq	r5, r2, #2
 801846e:	e7ec      	b.n	801844a <_strtol_l.isra.0+0x3a>
 8018470:	2b00      	cmp	r3, #0
 8018472:	d1f6      	bne.n	8018462 <_strtol_l.isra.0+0x52>
 8018474:	2c30      	cmp	r4, #48	@ 0x30
 8018476:	bf14      	ite	ne
 8018478:	230a      	movne	r3, #10
 801847a:	2308      	moveq	r3, #8
 801847c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8018480:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018484:	2200      	movs	r2, #0
 8018486:	fbbc f9f3 	udiv	r9, ip, r3
 801848a:	4610      	mov	r0, r2
 801848c:	fb03 ca19 	mls	sl, r3, r9, ip
 8018490:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8018494:	2f09      	cmp	r7, #9
 8018496:	d80f      	bhi.n	80184b8 <_strtol_l.isra.0+0xa8>
 8018498:	463c      	mov	r4, r7
 801849a:	42a3      	cmp	r3, r4
 801849c:	dd1b      	ble.n	80184d6 <_strtol_l.isra.0+0xc6>
 801849e:	1c57      	adds	r7, r2, #1
 80184a0:	d007      	beq.n	80184b2 <_strtol_l.isra.0+0xa2>
 80184a2:	4581      	cmp	r9, r0
 80184a4:	d314      	bcc.n	80184d0 <_strtol_l.isra.0+0xc0>
 80184a6:	d101      	bne.n	80184ac <_strtol_l.isra.0+0x9c>
 80184a8:	45a2      	cmp	sl, r4
 80184aa:	db11      	blt.n	80184d0 <_strtol_l.isra.0+0xc0>
 80184ac:	fb00 4003 	mla	r0, r0, r3, r4
 80184b0:	2201      	movs	r2, #1
 80184b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80184b6:	e7eb      	b.n	8018490 <_strtol_l.isra.0+0x80>
 80184b8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80184bc:	2f19      	cmp	r7, #25
 80184be:	d801      	bhi.n	80184c4 <_strtol_l.isra.0+0xb4>
 80184c0:	3c37      	subs	r4, #55	@ 0x37
 80184c2:	e7ea      	b.n	801849a <_strtol_l.isra.0+0x8a>
 80184c4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80184c8:	2f19      	cmp	r7, #25
 80184ca:	d804      	bhi.n	80184d6 <_strtol_l.isra.0+0xc6>
 80184cc:	3c57      	subs	r4, #87	@ 0x57
 80184ce:	e7e4      	b.n	801849a <_strtol_l.isra.0+0x8a>
 80184d0:	f04f 32ff 	mov.w	r2, #4294967295
 80184d4:	e7ed      	b.n	80184b2 <_strtol_l.isra.0+0xa2>
 80184d6:	1c53      	adds	r3, r2, #1
 80184d8:	d108      	bne.n	80184ec <_strtol_l.isra.0+0xdc>
 80184da:	2322      	movs	r3, #34	@ 0x22
 80184dc:	f8ce 3000 	str.w	r3, [lr]
 80184e0:	4660      	mov	r0, ip
 80184e2:	f1b8 0f00 	cmp.w	r8, #0
 80184e6:	d0a0      	beq.n	801842a <_strtol_l.isra.0+0x1a>
 80184e8:	1e69      	subs	r1, r5, #1
 80184ea:	e006      	b.n	80184fa <_strtol_l.isra.0+0xea>
 80184ec:	b106      	cbz	r6, 80184f0 <_strtol_l.isra.0+0xe0>
 80184ee:	4240      	negs	r0, r0
 80184f0:	f1b8 0f00 	cmp.w	r8, #0
 80184f4:	d099      	beq.n	801842a <_strtol_l.isra.0+0x1a>
 80184f6:	2a00      	cmp	r2, #0
 80184f8:	d1f6      	bne.n	80184e8 <_strtol_l.isra.0+0xd8>
 80184fa:	f8c8 1000 	str.w	r1, [r8]
 80184fe:	e794      	b.n	801842a <_strtol_l.isra.0+0x1a>
 8018500:	0801a089 	.word	0x0801a089

08018504 <_strtol_r>:
 8018504:	f7ff bf84 	b.w	8018410 <_strtol_l.isra.0>

08018508 <_strtoul_l.isra.0>:
 8018508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801850c:	4e34      	ldr	r6, [pc, #208]	@ (80185e0 <_strtoul_l.isra.0+0xd8>)
 801850e:	4686      	mov	lr, r0
 8018510:	460d      	mov	r5, r1
 8018512:	4628      	mov	r0, r5
 8018514:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018518:	5d37      	ldrb	r7, [r6, r4]
 801851a:	f017 0708 	ands.w	r7, r7, #8
 801851e:	d1f8      	bne.n	8018512 <_strtoul_l.isra.0+0xa>
 8018520:	2c2d      	cmp	r4, #45	@ 0x2d
 8018522:	d110      	bne.n	8018546 <_strtoul_l.isra.0+0x3e>
 8018524:	782c      	ldrb	r4, [r5, #0]
 8018526:	2701      	movs	r7, #1
 8018528:	1c85      	adds	r5, r0, #2
 801852a:	f033 0010 	bics.w	r0, r3, #16
 801852e:	d115      	bne.n	801855c <_strtoul_l.isra.0+0x54>
 8018530:	2c30      	cmp	r4, #48	@ 0x30
 8018532:	d10d      	bne.n	8018550 <_strtoul_l.isra.0+0x48>
 8018534:	7828      	ldrb	r0, [r5, #0]
 8018536:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801853a:	2858      	cmp	r0, #88	@ 0x58
 801853c:	d108      	bne.n	8018550 <_strtoul_l.isra.0+0x48>
 801853e:	786c      	ldrb	r4, [r5, #1]
 8018540:	3502      	adds	r5, #2
 8018542:	2310      	movs	r3, #16
 8018544:	e00a      	b.n	801855c <_strtoul_l.isra.0+0x54>
 8018546:	2c2b      	cmp	r4, #43	@ 0x2b
 8018548:	bf04      	itt	eq
 801854a:	782c      	ldrbeq	r4, [r5, #0]
 801854c:	1c85      	addeq	r5, r0, #2
 801854e:	e7ec      	b.n	801852a <_strtoul_l.isra.0+0x22>
 8018550:	2b00      	cmp	r3, #0
 8018552:	d1f6      	bne.n	8018542 <_strtoul_l.isra.0+0x3a>
 8018554:	2c30      	cmp	r4, #48	@ 0x30
 8018556:	bf14      	ite	ne
 8018558:	230a      	movne	r3, #10
 801855a:	2308      	moveq	r3, #8
 801855c:	f04f 38ff 	mov.w	r8, #4294967295
 8018560:	2600      	movs	r6, #0
 8018562:	fbb8 f8f3 	udiv	r8, r8, r3
 8018566:	fb03 f908 	mul.w	r9, r3, r8
 801856a:	ea6f 0909 	mvn.w	r9, r9
 801856e:	4630      	mov	r0, r6
 8018570:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8018574:	f1bc 0f09 	cmp.w	ip, #9
 8018578:	d810      	bhi.n	801859c <_strtoul_l.isra.0+0x94>
 801857a:	4664      	mov	r4, ip
 801857c:	42a3      	cmp	r3, r4
 801857e:	dd1e      	ble.n	80185be <_strtoul_l.isra.0+0xb6>
 8018580:	f1b6 3fff 	cmp.w	r6, #4294967295
 8018584:	d007      	beq.n	8018596 <_strtoul_l.isra.0+0x8e>
 8018586:	4580      	cmp	r8, r0
 8018588:	d316      	bcc.n	80185b8 <_strtoul_l.isra.0+0xb0>
 801858a:	d101      	bne.n	8018590 <_strtoul_l.isra.0+0x88>
 801858c:	45a1      	cmp	r9, r4
 801858e:	db13      	blt.n	80185b8 <_strtoul_l.isra.0+0xb0>
 8018590:	fb00 4003 	mla	r0, r0, r3, r4
 8018594:	2601      	movs	r6, #1
 8018596:	f815 4b01 	ldrb.w	r4, [r5], #1
 801859a:	e7e9      	b.n	8018570 <_strtoul_l.isra.0+0x68>
 801859c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80185a0:	f1bc 0f19 	cmp.w	ip, #25
 80185a4:	d801      	bhi.n	80185aa <_strtoul_l.isra.0+0xa2>
 80185a6:	3c37      	subs	r4, #55	@ 0x37
 80185a8:	e7e8      	b.n	801857c <_strtoul_l.isra.0+0x74>
 80185aa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80185ae:	f1bc 0f19 	cmp.w	ip, #25
 80185b2:	d804      	bhi.n	80185be <_strtoul_l.isra.0+0xb6>
 80185b4:	3c57      	subs	r4, #87	@ 0x57
 80185b6:	e7e1      	b.n	801857c <_strtoul_l.isra.0+0x74>
 80185b8:	f04f 36ff 	mov.w	r6, #4294967295
 80185bc:	e7eb      	b.n	8018596 <_strtoul_l.isra.0+0x8e>
 80185be:	1c73      	adds	r3, r6, #1
 80185c0:	d106      	bne.n	80185d0 <_strtoul_l.isra.0+0xc8>
 80185c2:	2322      	movs	r3, #34	@ 0x22
 80185c4:	f8ce 3000 	str.w	r3, [lr]
 80185c8:	4630      	mov	r0, r6
 80185ca:	b932      	cbnz	r2, 80185da <_strtoul_l.isra.0+0xd2>
 80185cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80185d0:	b107      	cbz	r7, 80185d4 <_strtoul_l.isra.0+0xcc>
 80185d2:	4240      	negs	r0, r0
 80185d4:	2a00      	cmp	r2, #0
 80185d6:	d0f9      	beq.n	80185cc <_strtoul_l.isra.0+0xc4>
 80185d8:	b106      	cbz	r6, 80185dc <_strtoul_l.isra.0+0xd4>
 80185da:	1e69      	subs	r1, r5, #1
 80185dc:	6011      	str	r1, [r2, #0]
 80185de:	e7f5      	b.n	80185cc <_strtoul_l.isra.0+0xc4>
 80185e0:	0801a089 	.word	0x0801a089

080185e4 <_strtoul_r>:
 80185e4:	f7ff bf90 	b.w	8018508 <_strtoul_l.isra.0>

080185e8 <fiprintf>:
 80185e8:	b40e      	push	{r1, r2, r3}
 80185ea:	b503      	push	{r0, r1, lr}
 80185ec:	4601      	mov	r1, r0
 80185ee:	ab03      	add	r3, sp, #12
 80185f0:	4805      	ldr	r0, [pc, #20]	@ (8018608 <fiprintf+0x20>)
 80185f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80185f6:	6800      	ldr	r0, [r0, #0]
 80185f8:	9301      	str	r3, [sp, #4]
 80185fa:	f7ff f927 	bl	801784c <_vfiprintf_r>
 80185fe:	b002      	add	sp, #8
 8018600:	f85d eb04 	ldr.w	lr, [sp], #4
 8018604:	b003      	add	sp, #12
 8018606:	4770      	bx	lr
 8018608:	200001a4 	.word	0x200001a4

0801860c <abort>:
 801860c:	b508      	push	{r3, lr}
 801860e:	2006      	movs	r0, #6
 8018610:	f000 f82c 	bl	801866c <raise>
 8018614:	2001      	movs	r0, #1
 8018616:	f7f5 fdf3 	bl	800e200 <_exit>

0801861a <_raise_r>:
 801861a:	291f      	cmp	r1, #31
 801861c:	b538      	push	{r3, r4, r5, lr}
 801861e:	4605      	mov	r5, r0
 8018620:	460c      	mov	r4, r1
 8018622:	d904      	bls.n	801862e <_raise_r+0x14>
 8018624:	2316      	movs	r3, #22
 8018626:	6003      	str	r3, [r0, #0]
 8018628:	f04f 30ff 	mov.w	r0, #4294967295
 801862c:	bd38      	pop	{r3, r4, r5, pc}
 801862e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018630:	b112      	cbz	r2, 8018638 <_raise_r+0x1e>
 8018632:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018636:	b94b      	cbnz	r3, 801864c <_raise_r+0x32>
 8018638:	4628      	mov	r0, r5
 801863a:	f000 f831 	bl	80186a0 <_getpid_r>
 801863e:	4622      	mov	r2, r4
 8018640:	4601      	mov	r1, r0
 8018642:	4628      	mov	r0, r5
 8018644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018648:	f000 b818 	b.w	801867c <_kill_r>
 801864c:	2b01      	cmp	r3, #1
 801864e:	d00a      	beq.n	8018666 <_raise_r+0x4c>
 8018650:	1c59      	adds	r1, r3, #1
 8018652:	d103      	bne.n	801865c <_raise_r+0x42>
 8018654:	2316      	movs	r3, #22
 8018656:	6003      	str	r3, [r0, #0]
 8018658:	2001      	movs	r0, #1
 801865a:	e7e7      	b.n	801862c <_raise_r+0x12>
 801865c:	2100      	movs	r1, #0
 801865e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018662:	4620      	mov	r0, r4
 8018664:	4798      	blx	r3
 8018666:	2000      	movs	r0, #0
 8018668:	e7e0      	b.n	801862c <_raise_r+0x12>
	...

0801866c <raise>:
 801866c:	4b02      	ldr	r3, [pc, #8]	@ (8018678 <raise+0xc>)
 801866e:	4601      	mov	r1, r0
 8018670:	6818      	ldr	r0, [r3, #0]
 8018672:	f7ff bfd2 	b.w	801861a <_raise_r>
 8018676:	bf00      	nop
 8018678:	200001a4 	.word	0x200001a4

0801867c <_kill_r>:
 801867c:	b538      	push	{r3, r4, r5, lr}
 801867e:	4d07      	ldr	r5, [pc, #28]	@ (801869c <_kill_r+0x20>)
 8018680:	2300      	movs	r3, #0
 8018682:	4604      	mov	r4, r0
 8018684:	4608      	mov	r0, r1
 8018686:	4611      	mov	r1, r2
 8018688:	602b      	str	r3, [r5, #0]
 801868a:	f7f5 fda9 	bl	800e1e0 <_kill>
 801868e:	1c43      	adds	r3, r0, #1
 8018690:	d102      	bne.n	8018698 <_kill_r+0x1c>
 8018692:	682b      	ldr	r3, [r5, #0]
 8018694:	b103      	cbz	r3, 8018698 <_kill_r+0x1c>
 8018696:	6023      	str	r3, [r4, #0]
 8018698:	bd38      	pop	{r3, r4, r5, pc}
 801869a:	bf00      	nop
 801869c:	20013498 	.word	0x20013498

080186a0 <_getpid_r>:
 80186a0:	f7f5 bd96 	b.w	800e1d0 <_getpid>

080186a4 <_sbrk>:
 80186a4:	4a04      	ldr	r2, [pc, #16]	@ (80186b8 <_sbrk+0x14>)
 80186a6:	6811      	ldr	r1, [r2, #0]
 80186a8:	4603      	mov	r3, r0
 80186aa:	b909      	cbnz	r1, 80186b0 <_sbrk+0xc>
 80186ac:	4903      	ldr	r1, [pc, #12]	@ (80186bc <_sbrk+0x18>)
 80186ae:	6011      	str	r1, [r2, #0]
 80186b0:	6810      	ldr	r0, [r2, #0]
 80186b2:	4403      	add	r3, r0
 80186b4:	6013      	str	r3, [r2, #0]
 80186b6:	4770      	bx	lr
 80186b8:	200134a0 	.word	0x200134a0
 80186bc:	200134a8 	.word	0x200134a8

080186c0 <_init>:
 80186c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186c2:	bf00      	nop
 80186c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80186c6:	bc08      	pop	{r3}
 80186c8:	469e      	mov	lr, r3
 80186ca:	4770      	bx	lr

080186cc <_fini>:
 80186cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186ce:	bf00      	nop
 80186d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80186d2:	bc08      	pop	{r3}
 80186d4:	469e      	mov	lr, r3
 80186d6:	4770      	bx	lr
