
STM32_DISPLAY_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106f0  080081d0  080081d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022b0  080188c0  080188c0  000118c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ab70  0801ab70  00014234  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801ab70  0801ab70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ab78  0801ab78  00014234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ab78  0801ab78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ab7c  0801ab7c  00013b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  0801ab80  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013404  20000234  0801adb4  00014234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013638  0801adb4  00014638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e21c  00000000  00000000  00014264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048a8  00000000  00000000  00032480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c20  00000000  00000000  00036d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001625  00000000  00000000  00038948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027219  00000000  00000000  00039f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021a68  00000000  00000000  00061186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1b2e  00000000  00000000  00082bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016471c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d0c  00000000  00000000  00164760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0016d46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d0 <__do_global_dtors_aux>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	4c05      	ldr	r4, [pc, #20]	@ (80081e8 <__do_global_dtors_aux+0x18>)
 80081d4:	7823      	ldrb	r3, [r4, #0]
 80081d6:	b933      	cbnz	r3, 80081e6 <__do_global_dtors_aux+0x16>
 80081d8:	4b04      	ldr	r3, [pc, #16]	@ (80081ec <__do_global_dtors_aux+0x1c>)
 80081da:	b113      	cbz	r3, 80081e2 <__do_global_dtors_aux+0x12>
 80081dc:	4804      	ldr	r0, [pc, #16]	@ (80081f0 <__do_global_dtors_aux+0x20>)
 80081de:	f3af 8000 	nop.w
 80081e2:	2301      	movs	r3, #1
 80081e4:	7023      	strb	r3, [r4, #0]
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	20000234 	.word	0x20000234
 80081ec:	00000000 	.word	0x00000000
 80081f0:	080188a8 	.word	0x080188a8

080081f4 <frame_dummy>:
 80081f4:	b508      	push	{r3, lr}
 80081f6:	4b03      	ldr	r3, [pc, #12]	@ (8008204 <frame_dummy+0x10>)
 80081f8:	b11b      	cbz	r3, 8008202 <frame_dummy+0xe>
 80081fa:	4903      	ldr	r1, [pc, #12]	@ (8008208 <frame_dummy+0x14>)
 80081fc:	4803      	ldr	r0, [pc, #12]	@ (800820c <frame_dummy+0x18>)
 80081fe:	f3af 8000 	nop.w
 8008202:	bd08      	pop	{r3, pc}
 8008204:	00000000 	.word	0x00000000
 8008208:	20000238 	.word	0x20000238
 800820c:	080188a8 	.word	0x080188a8

08008210 <strcmp>:
 8008210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008218:	2a01      	cmp	r2, #1
 800821a:	bf28      	it	cs
 800821c:	429a      	cmpcs	r2, r3
 800821e:	d0f7      	beq.n	8008210 <strcmp>
 8008220:	1ad0      	subs	r0, r2, r3
 8008222:	4770      	bx	lr

08008224 <strlen>:
 8008224:	4603      	mov	r3, r0
 8008226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800822a:	2a00      	cmp	r2, #0
 800822c:	d1fb      	bne.n	8008226 <strlen+0x2>
 800822e:	1a18      	subs	r0, r3, r0
 8008230:	3801      	subs	r0, #1
 8008232:	4770      	bx	lr
	...

08008240 <memchr>:
 8008240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008244:	2a10      	cmp	r2, #16
 8008246:	db2b      	blt.n	80082a0 <memchr+0x60>
 8008248:	f010 0f07 	tst.w	r0, #7
 800824c:	d008      	beq.n	8008260 <memchr+0x20>
 800824e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008252:	3a01      	subs	r2, #1
 8008254:	428b      	cmp	r3, r1
 8008256:	d02d      	beq.n	80082b4 <memchr+0x74>
 8008258:	f010 0f07 	tst.w	r0, #7
 800825c:	b342      	cbz	r2, 80082b0 <memchr+0x70>
 800825e:	d1f6      	bne.n	800824e <memchr+0xe>
 8008260:	b4f0      	push	{r4, r5, r6, r7}
 8008262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800826a:	f022 0407 	bic.w	r4, r2, #7
 800826e:	f07f 0700 	mvns.w	r7, #0
 8008272:	2300      	movs	r3, #0
 8008274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008278:	3c08      	subs	r4, #8
 800827a:	ea85 0501 	eor.w	r5, r5, r1
 800827e:	ea86 0601 	eor.w	r6, r6, r1
 8008282:	fa85 f547 	uadd8	r5, r5, r7
 8008286:	faa3 f587 	sel	r5, r3, r7
 800828a:	fa86 f647 	uadd8	r6, r6, r7
 800828e:	faa5 f687 	sel	r6, r5, r7
 8008292:	b98e      	cbnz	r6, 80082b8 <memchr+0x78>
 8008294:	d1ee      	bne.n	8008274 <memchr+0x34>
 8008296:	bcf0      	pop	{r4, r5, r6, r7}
 8008298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800829c:	f002 0207 	and.w	r2, r2, #7
 80082a0:	b132      	cbz	r2, 80082b0 <memchr+0x70>
 80082a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80082a6:	3a01      	subs	r2, #1
 80082a8:	ea83 0301 	eor.w	r3, r3, r1
 80082ac:	b113      	cbz	r3, 80082b4 <memchr+0x74>
 80082ae:	d1f8      	bne.n	80082a2 <memchr+0x62>
 80082b0:	2000      	movs	r0, #0
 80082b2:	4770      	bx	lr
 80082b4:	3801      	subs	r0, #1
 80082b6:	4770      	bx	lr
 80082b8:	2d00      	cmp	r5, #0
 80082ba:	bf06      	itte	eq
 80082bc:	4635      	moveq	r5, r6
 80082be:	3803      	subeq	r0, #3
 80082c0:	3807      	subne	r0, #7
 80082c2:	f015 0f01 	tst.w	r5, #1
 80082c6:	d107      	bne.n	80082d8 <memchr+0x98>
 80082c8:	3001      	adds	r0, #1
 80082ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80082ce:	bf02      	ittt	eq
 80082d0:	3001      	addeq	r0, #1
 80082d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80082d6:	3001      	addeq	r0, #1
 80082d8:	bcf0      	pop	{r4, r5, r6, r7}
 80082da:	3801      	subs	r0, #1
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop

080082e0 <__aeabi_drsub>:
 80082e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80082e4:	e002      	b.n	80082ec <__adddf3>
 80082e6:	bf00      	nop

080082e8 <__aeabi_dsub>:
 80082e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080082ec <__adddf3>:
 80082ec:	b530      	push	{r4, r5, lr}
 80082ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80082f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	bf1f      	itttt	ne
 8008302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800830a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800830e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008312:	f000 80e2 	beq.w	80084da <__adddf3+0x1ee>
 8008316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800831a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800831e:	bfb8      	it	lt
 8008320:	426d      	neglt	r5, r5
 8008322:	dd0c      	ble.n	800833e <__adddf3+0x52>
 8008324:	442c      	add	r4, r5
 8008326:	ea80 0202 	eor.w	r2, r0, r2
 800832a:	ea81 0303 	eor.w	r3, r1, r3
 800832e:	ea82 0000 	eor.w	r0, r2, r0
 8008332:	ea83 0101 	eor.w	r1, r3, r1
 8008336:	ea80 0202 	eor.w	r2, r0, r2
 800833a:	ea81 0303 	eor.w	r3, r1, r3
 800833e:	2d36      	cmp	r5, #54	@ 0x36
 8008340:	bf88      	it	hi
 8008342:	bd30      	pophi	{r4, r5, pc}
 8008344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800834c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008354:	d002      	beq.n	800835c <__adddf3+0x70>
 8008356:	4240      	negs	r0, r0
 8008358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800835c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008368:	d002      	beq.n	8008370 <__adddf3+0x84>
 800836a:	4252      	negs	r2, r2
 800836c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008370:	ea94 0f05 	teq	r4, r5
 8008374:	f000 80a7 	beq.w	80084c6 <__adddf3+0x1da>
 8008378:	f1a4 0401 	sub.w	r4, r4, #1
 800837c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008380:	db0d      	blt.n	800839e <__adddf3+0xb2>
 8008382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008386:	fa22 f205 	lsr.w	r2, r2, r5
 800838a:	1880      	adds	r0, r0, r2
 800838c:	f141 0100 	adc.w	r1, r1, #0
 8008390:	fa03 f20e 	lsl.w	r2, r3, lr
 8008394:	1880      	adds	r0, r0, r2
 8008396:	fa43 f305 	asr.w	r3, r3, r5
 800839a:	4159      	adcs	r1, r3
 800839c:	e00e      	b.n	80083bc <__adddf3+0xd0>
 800839e:	f1a5 0520 	sub.w	r5, r5, #32
 80083a2:	f10e 0e20 	add.w	lr, lr, #32
 80083a6:	2a01      	cmp	r2, #1
 80083a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80083ac:	bf28      	it	cs
 80083ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80083b2:	fa43 f305 	asr.w	r3, r3, r5
 80083b6:	18c0      	adds	r0, r0, r3
 80083b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80083bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80083c0:	d507      	bpl.n	80083d2 <__adddf3+0xe6>
 80083c2:	f04f 0e00 	mov.w	lr, #0
 80083c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80083ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80083ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80083d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80083d6:	d31b      	bcc.n	8008410 <__adddf3+0x124>
 80083d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80083dc:	d30c      	bcc.n	80083f8 <__adddf3+0x10c>
 80083de:	0849      	lsrs	r1, r1, #1
 80083e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80083e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80083e8:	f104 0401 	add.w	r4, r4, #1
 80083ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80083f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80083f4:	f080 809a 	bcs.w	800852c <__adddf3+0x240>
 80083f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80083fc:	bf08      	it	eq
 80083fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008402:	f150 0000 	adcs.w	r0, r0, #0
 8008406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800840a:	ea41 0105 	orr.w	r1, r1, r5
 800840e:	bd30      	pop	{r4, r5, pc}
 8008410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008414:	4140      	adcs	r0, r0
 8008416:	eb41 0101 	adc.w	r1, r1, r1
 800841a:	3c01      	subs	r4, #1
 800841c:	bf28      	it	cs
 800841e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8008422:	d2e9      	bcs.n	80083f8 <__adddf3+0x10c>
 8008424:	f091 0f00 	teq	r1, #0
 8008428:	bf04      	itt	eq
 800842a:	4601      	moveq	r1, r0
 800842c:	2000      	moveq	r0, #0
 800842e:	fab1 f381 	clz	r3, r1
 8008432:	bf08      	it	eq
 8008434:	3320      	addeq	r3, #32
 8008436:	f1a3 030b 	sub.w	r3, r3, #11
 800843a:	f1b3 0220 	subs.w	r2, r3, #32
 800843e:	da0c      	bge.n	800845a <__adddf3+0x16e>
 8008440:	320c      	adds	r2, #12
 8008442:	dd08      	ble.n	8008456 <__adddf3+0x16a>
 8008444:	f102 0c14 	add.w	ip, r2, #20
 8008448:	f1c2 020c 	rsb	r2, r2, #12
 800844c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008450:	fa21 f102 	lsr.w	r1, r1, r2
 8008454:	e00c      	b.n	8008470 <__adddf3+0x184>
 8008456:	f102 0214 	add.w	r2, r2, #20
 800845a:	bfd8      	it	le
 800845c:	f1c2 0c20 	rsble	ip, r2, #32
 8008460:	fa01 f102 	lsl.w	r1, r1, r2
 8008464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008468:	bfdc      	itt	le
 800846a:	ea41 010c 	orrle.w	r1, r1, ip
 800846e:	4090      	lslle	r0, r2
 8008470:	1ae4      	subs	r4, r4, r3
 8008472:	bfa2      	ittt	ge
 8008474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008478:	4329      	orrge	r1, r5
 800847a:	bd30      	popge	{r4, r5, pc}
 800847c:	ea6f 0404 	mvn.w	r4, r4
 8008480:	3c1f      	subs	r4, #31
 8008482:	da1c      	bge.n	80084be <__adddf3+0x1d2>
 8008484:	340c      	adds	r4, #12
 8008486:	dc0e      	bgt.n	80084a6 <__adddf3+0x1ba>
 8008488:	f104 0414 	add.w	r4, r4, #20
 800848c:	f1c4 0220 	rsb	r2, r4, #32
 8008490:	fa20 f004 	lsr.w	r0, r0, r4
 8008494:	fa01 f302 	lsl.w	r3, r1, r2
 8008498:	ea40 0003 	orr.w	r0, r0, r3
 800849c:	fa21 f304 	lsr.w	r3, r1, r4
 80084a0:	ea45 0103 	orr.w	r1, r5, r3
 80084a4:	bd30      	pop	{r4, r5, pc}
 80084a6:	f1c4 040c 	rsb	r4, r4, #12
 80084aa:	f1c4 0220 	rsb	r2, r4, #32
 80084ae:	fa20 f002 	lsr.w	r0, r0, r2
 80084b2:	fa01 f304 	lsl.w	r3, r1, r4
 80084b6:	ea40 0003 	orr.w	r0, r0, r3
 80084ba:	4629      	mov	r1, r5
 80084bc:	bd30      	pop	{r4, r5, pc}
 80084be:	fa21 f004 	lsr.w	r0, r1, r4
 80084c2:	4629      	mov	r1, r5
 80084c4:	bd30      	pop	{r4, r5, pc}
 80084c6:	f094 0f00 	teq	r4, #0
 80084ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80084ce:	bf06      	itte	eq
 80084d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80084d4:	3401      	addeq	r4, #1
 80084d6:	3d01      	subne	r5, #1
 80084d8:	e74e      	b.n	8008378 <__adddf3+0x8c>
 80084da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80084de:	bf18      	it	ne
 80084e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80084e4:	d029      	beq.n	800853a <__adddf3+0x24e>
 80084e6:	ea94 0f05 	teq	r4, r5
 80084ea:	bf08      	it	eq
 80084ec:	ea90 0f02 	teqeq	r0, r2
 80084f0:	d005      	beq.n	80084fe <__adddf3+0x212>
 80084f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80084f6:	bf04      	itt	eq
 80084f8:	4619      	moveq	r1, r3
 80084fa:	4610      	moveq	r0, r2
 80084fc:	bd30      	pop	{r4, r5, pc}
 80084fe:	ea91 0f03 	teq	r1, r3
 8008502:	bf1e      	ittt	ne
 8008504:	2100      	movne	r1, #0
 8008506:	2000      	movne	r0, #0
 8008508:	bd30      	popne	{r4, r5, pc}
 800850a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800850e:	d105      	bne.n	800851c <__adddf3+0x230>
 8008510:	0040      	lsls	r0, r0, #1
 8008512:	4149      	adcs	r1, r1
 8008514:	bf28      	it	cs
 8008516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800851a:	bd30      	pop	{r4, r5, pc}
 800851c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8008520:	bf3c      	itt	cc
 8008522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8008526:	bd30      	popcc	{r4, r5, pc}
 8008528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800852c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8008530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008534:	f04f 0000 	mov.w	r0, #0
 8008538:	bd30      	pop	{r4, r5, pc}
 800853a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800853e:	bf1a      	itte	ne
 8008540:	4619      	movne	r1, r3
 8008542:	4610      	movne	r0, r2
 8008544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008548:	bf1c      	itt	ne
 800854a:	460b      	movne	r3, r1
 800854c:	4602      	movne	r2, r0
 800854e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008552:	bf06      	itte	eq
 8008554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008558:	ea91 0f03 	teqeq	r1, r3
 800855c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008560:	bd30      	pop	{r4, r5, pc}
 8008562:	bf00      	nop

08008564 <__aeabi_ui2d>:
 8008564:	f090 0f00 	teq	r0, #0
 8008568:	bf04      	itt	eq
 800856a:	2100      	moveq	r1, #0
 800856c:	4770      	bxeq	lr
 800856e:	b530      	push	{r4, r5, lr}
 8008570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008578:	f04f 0500 	mov.w	r5, #0
 800857c:	f04f 0100 	mov.w	r1, #0
 8008580:	e750      	b.n	8008424 <__adddf3+0x138>
 8008582:	bf00      	nop

08008584 <__aeabi_i2d>:
 8008584:	f090 0f00 	teq	r0, #0
 8008588:	bf04      	itt	eq
 800858a:	2100      	moveq	r1, #0
 800858c:	4770      	bxeq	lr
 800858e:	b530      	push	{r4, r5, lr}
 8008590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800859c:	bf48      	it	mi
 800859e:	4240      	negmi	r0, r0
 80085a0:	f04f 0100 	mov.w	r1, #0
 80085a4:	e73e      	b.n	8008424 <__adddf3+0x138>
 80085a6:	bf00      	nop

080085a8 <__aeabi_f2d>:
 80085a8:	0042      	lsls	r2, r0, #1
 80085aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80085ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80085b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80085b6:	bf1f      	itttt	ne
 80085b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80085bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80085c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80085c4:	4770      	bxne	lr
 80085c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80085ca:	bf08      	it	eq
 80085cc:	4770      	bxeq	lr
 80085ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80085d2:	bf04      	itt	eq
 80085d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80085d8:	4770      	bxeq	lr
 80085da:	b530      	push	{r4, r5, lr}
 80085dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80085e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80085e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80085e8:	e71c      	b.n	8008424 <__adddf3+0x138>
 80085ea:	bf00      	nop

080085ec <__aeabi_ul2d>:
 80085ec:	ea50 0201 	orrs.w	r2, r0, r1
 80085f0:	bf08      	it	eq
 80085f2:	4770      	bxeq	lr
 80085f4:	b530      	push	{r4, r5, lr}
 80085f6:	f04f 0500 	mov.w	r5, #0
 80085fa:	e00a      	b.n	8008612 <__aeabi_l2d+0x16>

080085fc <__aeabi_l2d>:
 80085fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008600:	bf08      	it	eq
 8008602:	4770      	bxeq	lr
 8008604:	b530      	push	{r4, r5, lr}
 8008606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800860a:	d502      	bpl.n	8008612 <__aeabi_l2d+0x16>
 800860c:	4240      	negs	r0, r0
 800860e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800861a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800861e:	f43f aed8 	beq.w	80083d2 <__adddf3+0xe6>
 8008622:	f04f 0203 	mov.w	r2, #3
 8008626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800862a:	bf18      	it	ne
 800862c:	3203      	addne	r2, #3
 800862e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008632:	bf18      	it	ne
 8008634:	3203      	addne	r2, #3
 8008636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800863a:	f1c2 0320 	rsb	r3, r2, #32
 800863e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008642:	fa20 f002 	lsr.w	r0, r0, r2
 8008646:	fa01 fe03 	lsl.w	lr, r1, r3
 800864a:	ea40 000e 	orr.w	r0, r0, lr
 800864e:	fa21 f102 	lsr.w	r1, r1, r2
 8008652:	4414      	add	r4, r2
 8008654:	e6bd      	b.n	80083d2 <__adddf3+0xe6>
 8008656:	bf00      	nop

08008658 <__aeabi_dmul>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800865e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008666:	bf1d      	ittte	ne
 8008668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800866c:	ea94 0f0c 	teqne	r4, ip
 8008670:	ea95 0f0c 	teqne	r5, ip
 8008674:	f000 f8de 	bleq	8008834 <__aeabi_dmul+0x1dc>
 8008678:	442c      	add	r4, r5
 800867a:	ea81 0603 	eor.w	r6, r1, r3
 800867e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800868a:	bf18      	it	ne
 800868c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008698:	d038      	beq.n	800870c <__aeabi_dmul+0xb4>
 800869a:	fba0 ce02 	umull	ip, lr, r0, r2
 800869e:	f04f 0500 	mov.w	r5, #0
 80086a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80086a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80086aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80086ae:	f04f 0600 	mov.w	r6, #0
 80086b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80086b6:	f09c 0f00 	teq	ip, #0
 80086ba:	bf18      	it	ne
 80086bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80086c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80086c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80086c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80086cc:	d204      	bcs.n	80086d8 <__aeabi_dmul+0x80>
 80086ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80086d2:	416d      	adcs	r5, r5
 80086d4:	eb46 0606 	adc.w	r6, r6, r6
 80086d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80086dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80086e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80086e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80086e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80086ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80086f0:	bf88      	it	hi
 80086f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80086f6:	d81e      	bhi.n	8008736 <__aeabi_dmul+0xde>
 80086f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80086fc:	bf08      	it	eq
 80086fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008702:	f150 0000 	adcs.w	r0, r0, #0
 8008706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8008710:	ea46 0101 	orr.w	r1, r6, r1
 8008714:	ea40 0002 	orr.w	r0, r0, r2
 8008718:	ea81 0103 	eor.w	r1, r1, r3
 800871c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008720:	bfc2      	ittt	gt
 8008722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800872a:	bd70      	popgt	{r4, r5, r6, pc}
 800872c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008730:	f04f 0e00 	mov.w	lr, #0
 8008734:	3c01      	subs	r4, #1
 8008736:	f300 80ab 	bgt.w	8008890 <__aeabi_dmul+0x238>
 800873a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800873e:	bfde      	ittt	le
 8008740:	2000      	movle	r0, #0
 8008742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8008746:	bd70      	pople	{r4, r5, r6, pc}
 8008748:	f1c4 0400 	rsb	r4, r4, #0
 800874c:	3c20      	subs	r4, #32
 800874e:	da35      	bge.n	80087bc <__aeabi_dmul+0x164>
 8008750:	340c      	adds	r4, #12
 8008752:	dc1b      	bgt.n	800878c <__aeabi_dmul+0x134>
 8008754:	f104 0414 	add.w	r4, r4, #20
 8008758:	f1c4 0520 	rsb	r5, r4, #32
 800875c:	fa00 f305 	lsl.w	r3, r0, r5
 8008760:	fa20 f004 	lsr.w	r0, r0, r4
 8008764:	fa01 f205 	lsl.w	r2, r1, r5
 8008768:	ea40 0002 	orr.w	r0, r0, r2
 800876c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8008770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008778:	fa21 f604 	lsr.w	r6, r1, r4
 800877c:	eb42 0106 	adc.w	r1, r2, r6
 8008780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008784:	bf08      	it	eq
 8008786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	f1c4 040c 	rsb	r4, r4, #12
 8008790:	f1c4 0520 	rsb	r5, r4, #32
 8008794:	fa00 f304 	lsl.w	r3, r0, r4
 8008798:	fa20 f005 	lsr.w	r0, r0, r5
 800879c:	fa01 f204 	lsl.w	r2, r1, r4
 80087a0:	ea40 0002 	orr.w	r0, r0, r2
 80087a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80087ac:	f141 0100 	adc.w	r1, r1, #0
 80087b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087b4:	bf08      	it	eq
 80087b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	f1c4 0520 	rsb	r5, r4, #32
 80087c0:	fa00 f205 	lsl.w	r2, r0, r5
 80087c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80087c8:	fa20 f304 	lsr.w	r3, r0, r4
 80087cc:	fa01 f205 	lsl.w	r2, r1, r5
 80087d0:	ea43 0302 	orr.w	r3, r3, r2
 80087d4:	fa21 f004 	lsr.w	r0, r1, r4
 80087d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087dc:	fa21 f204 	lsr.w	r2, r1, r4
 80087e0:	ea20 0002 	bic.w	r0, r0, r2
 80087e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80087e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087ec:	bf08      	it	eq
 80087ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087f2:	bd70      	pop	{r4, r5, r6, pc}
 80087f4:	f094 0f00 	teq	r4, #0
 80087f8:	d10f      	bne.n	800881a <__aeabi_dmul+0x1c2>
 80087fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80087fe:	0040      	lsls	r0, r0, #1
 8008800:	eb41 0101 	adc.w	r1, r1, r1
 8008804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008808:	bf08      	it	eq
 800880a:	3c01      	subeq	r4, #1
 800880c:	d0f7      	beq.n	80087fe <__aeabi_dmul+0x1a6>
 800880e:	ea41 0106 	orr.w	r1, r1, r6
 8008812:	f095 0f00 	teq	r5, #0
 8008816:	bf18      	it	ne
 8008818:	4770      	bxne	lr
 800881a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800881e:	0052      	lsls	r2, r2, #1
 8008820:	eb43 0303 	adc.w	r3, r3, r3
 8008824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008828:	bf08      	it	eq
 800882a:	3d01      	subeq	r5, #1
 800882c:	d0f7      	beq.n	800881e <__aeabi_dmul+0x1c6>
 800882e:	ea43 0306 	orr.w	r3, r3, r6
 8008832:	4770      	bx	lr
 8008834:	ea94 0f0c 	teq	r4, ip
 8008838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800883c:	bf18      	it	ne
 800883e:	ea95 0f0c 	teqne	r5, ip
 8008842:	d00c      	beq.n	800885e <__aeabi_dmul+0x206>
 8008844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008848:	bf18      	it	ne
 800884a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800884e:	d1d1      	bne.n	80087f4 <__aeabi_dmul+0x19c>
 8008850:	ea81 0103 	eor.w	r1, r1, r3
 8008854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008858:	f04f 0000 	mov.w	r0, #0
 800885c:	bd70      	pop	{r4, r5, r6, pc}
 800885e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008862:	bf06      	itte	eq
 8008864:	4610      	moveq	r0, r2
 8008866:	4619      	moveq	r1, r3
 8008868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800886c:	d019      	beq.n	80088a2 <__aeabi_dmul+0x24a>
 800886e:	ea94 0f0c 	teq	r4, ip
 8008872:	d102      	bne.n	800887a <__aeabi_dmul+0x222>
 8008874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008878:	d113      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800887a:	ea95 0f0c 	teq	r5, ip
 800887e:	d105      	bne.n	800888c <__aeabi_dmul+0x234>
 8008880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008884:	bf1c      	itt	ne
 8008886:	4610      	movne	r0, r2
 8008888:	4619      	movne	r1, r3
 800888a:	d10a      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800888c:	ea81 0103 	eor.w	r1, r1, r3
 8008890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8008898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800889c:	f04f 0000 	mov.w	r0, #0
 80088a0:	bd70      	pop	{r4, r5, r6, pc}
 80088a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80088a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80088aa:	bd70      	pop	{r4, r5, r6, pc}

080088ac <__aeabi_ddiv>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80088b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80088b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80088ba:	bf1d      	ittte	ne
 80088bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80088c0:	ea94 0f0c 	teqne	r4, ip
 80088c4:	ea95 0f0c 	teqne	r5, ip
 80088c8:	f000 f8a7 	bleq	8008a1a <__aeabi_ddiv+0x16e>
 80088cc:	eba4 0405 	sub.w	r4, r4, r5
 80088d0:	ea81 0e03 	eor.w	lr, r1, r3
 80088d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80088d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80088dc:	f000 8088 	beq.w	80089f0 <__aeabi_ddiv+0x144>
 80088e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80088e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80088e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80088ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80088f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80088f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80088f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80088fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8008904:	429d      	cmp	r5, r3
 8008906:	bf08      	it	eq
 8008908:	4296      	cmpeq	r6, r2
 800890a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800890e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8008912:	d202      	bcs.n	800891a <__aeabi_ddiv+0x6e>
 8008914:	085b      	lsrs	r3, r3, #1
 8008916:	ea4f 0232 	mov.w	r2, r2, rrx
 800891a:	1ab6      	subs	r6, r6, r2
 800891c:	eb65 0503 	sbc.w	r5, r5, r3
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	ea4f 0232 	mov.w	r2, r2, rrx
 8008926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800892a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800892e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008936:	bf22      	ittt	cs
 8008938:	1ab6      	subcs	r6, r6, r2
 800893a:	4675      	movcs	r5, lr
 800893c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008940:	085b      	lsrs	r3, r3, #1
 8008942:	ea4f 0232 	mov.w	r2, r2, rrx
 8008946:	ebb6 0e02 	subs.w	lr, r6, r2
 800894a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800894e:	bf22      	ittt	cs
 8008950:	1ab6      	subcs	r6, r6, r2
 8008952:	4675      	movcs	r5, lr
 8008954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008958:	085b      	lsrs	r3, r3, #1
 800895a:	ea4f 0232 	mov.w	r2, r2, rrx
 800895e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008966:	bf22      	ittt	cs
 8008968:	1ab6      	subcs	r6, r6, r2
 800896a:	4675      	movcs	r5, lr
 800896c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008970:	085b      	lsrs	r3, r3, #1
 8008972:	ea4f 0232 	mov.w	r2, r2, rrx
 8008976:	ebb6 0e02 	subs.w	lr, r6, r2
 800897a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800897e:	bf22      	ittt	cs
 8008980:	1ab6      	subcs	r6, r6, r2
 8008982:	4675      	movcs	r5, lr
 8008984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008988:	ea55 0e06 	orrs.w	lr, r5, r6
 800898c:	d018      	beq.n	80089c0 <__aeabi_ddiv+0x114>
 800898e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800899a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800899e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80089a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80089a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80089aa:	d1c0      	bne.n	800892e <__aeabi_ddiv+0x82>
 80089ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089b0:	d10b      	bne.n	80089ca <__aeabi_ddiv+0x11e>
 80089b2:	ea41 0100 	orr.w	r1, r1, r0
 80089b6:	f04f 0000 	mov.w	r0, #0
 80089ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80089be:	e7b6      	b.n	800892e <__aeabi_ddiv+0x82>
 80089c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089c4:	bf04      	itt	eq
 80089c6:	4301      	orreq	r1, r0
 80089c8:	2000      	moveq	r0, #0
 80089ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80089ce:	bf88      	it	hi
 80089d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80089d4:	f63f aeaf 	bhi.w	8008736 <__aeabi_dmul+0xde>
 80089d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80089dc:	bf04      	itt	eq
 80089de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80089e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80089e6:	f150 0000 	adcs.w	r0, r0, #0
 80089ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80089f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80089f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80089fc:	bfc2      	ittt	gt
 80089fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008a06:	bd70      	popgt	{r4, r5, r6, pc}
 8008a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008a0c:	f04f 0e00 	mov.w	lr, #0
 8008a10:	3c01      	subs	r4, #1
 8008a12:	e690      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a14:	ea45 0e06 	orr.w	lr, r5, r6
 8008a18:	e68d      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008a1e:	ea94 0f0c 	teq	r4, ip
 8008a22:	bf08      	it	eq
 8008a24:	ea95 0f0c 	teqeq	r5, ip
 8008a28:	f43f af3b 	beq.w	80088a2 <__aeabi_dmul+0x24a>
 8008a2c:	ea94 0f0c 	teq	r4, ip
 8008a30:	d10a      	bne.n	8008a48 <__aeabi_ddiv+0x19c>
 8008a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008a36:	f47f af34 	bne.w	80088a2 <__aeabi_dmul+0x24a>
 8008a3a:	ea95 0f0c 	teq	r5, ip
 8008a3e:	f47f af25 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a42:	4610      	mov	r0, r2
 8008a44:	4619      	mov	r1, r3
 8008a46:	e72c      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a48:	ea95 0f0c 	teq	r5, ip
 8008a4c:	d106      	bne.n	8008a5c <__aeabi_ddiv+0x1b0>
 8008a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008a52:	f43f aefd 	beq.w	8008850 <__aeabi_dmul+0x1f8>
 8008a56:	4610      	mov	r0, r2
 8008a58:	4619      	mov	r1, r3
 8008a5a:	e722      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008a60:	bf18      	it	ne
 8008a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008a66:	f47f aec5 	bne.w	80087f4 <__aeabi_dmul+0x19c>
 8008a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008a6e:	f47f af0d 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008a76:	f47f aeeb 	bne.w	8008850 <__aeabi_dmul+0x1f8>
 8008a7a:	e712      	b.n	80088a2 <__aeabi_dmul+0x24a>

08008a7c <__gedf2>:
 8008a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8008a80:	e006      	b.n	8008a90 <__cmpdf2+0x4>
 8008a82:	bf00      	nop

08008a84 <__ledf2>:
 8008a84:	f04f 0c01 	mov.w	ip, #1
 8008a88:	e002      	b.n	8008a90 <__cmpdf2+0x4>
 8008a8a:	bf00      	nop

08008a8c <__cmpdf2>:
 8008a8c:	f04f 0c01 	mov.w	ip, #1
 8008a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008aa0:	bf18      	it	ne
 8008aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008aa6:	d01b      	beq.n	8008ae0 <__cmpdf2+0x54>
 8008aa8:	b001      	add	sp, #4
 8008aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008aae:	bf0c      	ite	eq
 8008ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008ab4:	ea91 0f03 	teqne	r1, r3
 8008ab8:	bf02      	ittt	eq
 8008aba:	ea90 0f02 	teqeq	r0, r2
 8008abe:	2000      	moveq	r0, #0
 8008ac0:	4770      	bxeq	lr
 8008ac2:	f110 0f00 	cmn.w	r0, #0
 8008ac6:	ea91 0f03 	teq	r1, r3
 8008aca:	bf58      	it	pl
 8008acc:	4299      	cmppl	r1, r3
 8008ace:	bf08      	it	eq
 8008ad0:	4290      	cmpeq	r0, r2
 8008ad2:	bf2c      	ite	cs
 8008ad4:	17d8      	asrcs	r0, r3, #31
 8008ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008ada:	f040 0001 	orr.w	r0, r0, #1
 8008ade:	4770      	bx	lr
 8008ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ae8:	d102      	bne.n	8008af0 <__cmpdf2+0x64>
 8008aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008aee:	d107      	bne.n	8008b00 <__cmpdf2+0x74>
 8008af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008af8:	d1d6      	bne.n	8008aa8 <__cmpdf2+0x1c>
 8008afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008afe:	d0d3      	beq.n	8008aa8 <__cmpdf2+0x1c>
 8008b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop

08008b08 <__aeabi_cdrcmple>:
 8008b08:	4684      	mov	ip, r0
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	4662      	mov	r2, ip
 8008b0e:	468c      	mov	ip, r1
 8008b10:	4619      	mov	r1, r3
 8008b12:	4663      	mov	r3, ip
 8008b14:	e000      	b.n	8008b18 <__aeabi_cdcmpeq>
 8008b16:	bf00      	nop

08008b18 <__aeabi_cdcmpeq>:
 8008b18:	b501      	push	{r0, lr}
 8008b1a:	f7ff ffb7 	bl	8008a8c <__cmpdf2>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	bf48      	it	mi
 8008b22:	f110 0f00 	cmnmi.w	r0, #0
 8008b26:	bd01      	pop	{r0, pc}

08008b28 <__aeabi_dcmpeq>:
 8008b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b2c:	f7ff fff4 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b30:	bf0c      	ite	eq
 8008b32:	2001      	moveq	r0, #1
 8008b34:	2000      	movne	r0, #0
 8008b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b3a:	bf00      	nop

08008b3c <__aeabi_dcmplt>:
 8008b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b40:	f7ff ffea 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b44:	bf34      	ite	cc
 8008b46:	2001      	movcc	r0, #1
 8008b48:	2000      	movcs	r0, #0
 8008b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b4e:	bf00      	nop

08008b50 <__aeabi_dcmple>:
 8008b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b54:	f7ff ffe0 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b58:	bf94      	ite	ls
 8008b5a:	2001      	movls	r0, #1
 8008b5c:	2000      	movhi	r0, #0
 8008b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b62:	bf00      	nop

08008b64 <__aeabi_dcmpge>:
 8008b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b68:	f7ff ffce 	bl	8008b08 <__aeabi_cdrcmple>
 8008b6c:	bf94      	ite	ls
 8008b6e:	2001      	movls	r0, #1
 8008b70:	2000      	movhi	r0, #0
 8008b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b76:	bf00      	nop

08008b78 <__aeabi_dcmpgt>:
 8008b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b7c:	f7ff ffc4 	bl	8008b08 <__aeabi_cdrcmple>
 8008b80:	bf34      	ite	cc
 8008b82:	2001      	movcc	r0, #1
 8008b84:	2000      	movcs	r0, #0
 8008b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b8a:	bf00      	nop

08008b8c <__aeabi_dcmpun>:
 8008b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b94:	d102      	bne.n	8008b9c <__aeabi_dcmpun+0x10>
 8008b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008b9a:	d10a      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ba4:	d102      	bne.n	8008bac <__aeabi_dcmpun+0x20>
 8008ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008baa:	d102      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008bac:	f04f 0000 	mov.w	r0, #0
 8008bb0:	4770      	bx	lr
 8008bb2:	f04f 0001 	mov.w	r0, #1
 8008bb6:	4770      	bx	lr

08008bb8 <__aeabi_d2iz>:
 8008bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008bc0:	d215      	bcs.n	8008bee <__aeabi_d2iz+0x36>
 8008bc2:	d511      	bpl.n	8008be8 <__aeabi_d2iz+0x30>
 8008bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008bcc:	d912      	bls.n	8008bf4 <__aeabi_d2iz+0x3c>
 8008bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008bde:	fa23 f002 	lsr.w	r0, r3, r2
 8008be2:	bf18      	it	ne
 8008be4:	4240      	negne	r0, r0
 8008be6:	4770      	bx	lr
 8008be8:	f04f 0000 	mov.w	r0, #0
 8008bec:	4770      	bx	lr
 8008bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008bf2:	d105      	bne.n	8008c00 <__aeabi_d2iz+0x48>
 8008bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008bf8:	bf08      	it	eq
 8008bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008bfe:	4770      	bx	lr
 8008c00:	f04f 0000 	mov.w	r0, #0
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop

08008c08 <__aeabi_d2uiz>:
 8008c08:	004a      	lsls	r2, r1, #1
 8008c0a:	d211      	bcs.n	8008c30 <__aeabi_d2uiz+0x28>
 8008c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008c10:	d211      	bcs.n	8008c36 <__aeabi_d2uiz+0x2e>
 8008c12:	d50d      	bpl.n	8008c30 <__aeabi_d2uiz+0x28>
 8008c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008c1c:	d40e      	bmi.n	8008c3c <__aeabi_d2uiz+0x34>
 8008c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8008c2e:	4770      	bx	lr
 8008c30:	f04f 0000 	mov.w	r0, #0
 8008c34:	4770      	bx	lr
 8008c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008c3a:	d102      	bne.n	8008c42 <__aeabi_d2uiz+0x3a>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	4770      	bx	lr
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	4770      	bx	lr

08008c48 <__aeabi_uldivmod>:
 8008c48:	b953      	cbnz	r3, 8008c60 <__aeabi_uldivmod+0x18>
 8008c4a:	b94a      	cbnz	r2, 8008c60 <__aeabi_uldivmod+0x18>
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	bf08      	it	eq
 8008c50:	2800      	cmpeq	r0, #0
 8008c52:	bf1c      	itt	ne
 8008c54:	f04f 31ff 	movne.w	r1, #4294967295
 8008c58:	f04f 30ff 	movne.w	r0, #4294967295
 8008c5c:	f000 b9be 	b.w	8008fdc <__aeabi_idiv0>
 8008c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8008c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008c68:	f000 f83c 	bl	8008ce4 <__udivmoddi4>
 8008c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c74:	b004      	add	sp, #16
 8008c76:	4770      	bx	lr

08008c78 <__aeabi_d2lz>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	460d      	mov	r5, r1
 8008c82:	f7ff ff5b 	bl	8008b3c <__aeabi_dcmplt>
 8008c86:	b928      	cbnz	r0, 8008c94 <__aeabi_d2lz+0x1c>
 8008c88:	4620      	mov	r0, r4
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c90:	f000 b80a 	b.w	8008ca8 <__aeabi_d2ulz>
 8008c94:	4620      	mov	r0, r4
 8008c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8008c9a:	f000 f805 	bl	8008ca8 <__aeabi_d2ulz>
 8008c9e:	4240      	negs	r0, r0
 8008ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008ca4:	bd38      	pop	{r3, r4, r5, pc}
 8008ca6:	bf00      	nop

08008ca8 <__aeabi_d2ulz>:
 8008ca8:	b5d0      	push	{r4, r6, r7, lr}
 8008caa:	4b0c      	ldr	r3, [pc, #48]	@ (8008cdc <__aeabi_d2ulz+0x34>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460f      	mov	r7, r1
 8008cb2:	f7ff fcd1 	bl	8008658 <__aeabi_dmul>
 8008cb6:	f7ff ffa7 	bl	8008c08 <__aeabi_d2uiz>
 8008cba:	4604      	mov	r4, r0
 8008cbc:	f7ff fc52 	bl	8008564 <__aeabi_ui2d>
 8008cc0:	4b07      	ldr	r3, [pc, #28]	@ (8008ce0 <__aeabi_d2ulz+0x38>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f7ff fcc8 	bl	8008658 <__aeabi_dmul>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4630      	mov	r0, r6
 8008cce:	4639      	mov	r1, r7
 8008cd0:	f7ff fb0a 	bl	80082e8 <__aeabi_dsub>
 8008cd4:	f7ff ff98 	bl	8008c08 <__aeabi_d2uiz>
 8008cd8:	4621      	mov	r1, r4
 8008cda:	bdd0      	pop	{r4, r6, r7, pc}
 8008cdc:	3df00000 	.word	0x3df00000
 8008ce0:	41f00000 	.word	0x41f00000

08008ce4 <__udivmoddi4>:
 8008ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce8:	9d08      	ldr	r5, [sp, #32]
 8008cea:	468e      	mov	lr, r1
 8008cec:	4604      	mov	r4, r0
 8008cee:	4688      	mov	r8, r1
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d14a      	bne.n	8008d8a <__udivmoddi4+0xa6>
 8008cf4:	428a      	cmp	r2, r1
 8008cf6:	4617      	mov	r7, r2
 8008cf8:	d962      	bls.n	8008dc0 <__udivmoddi4+0xdc>
 8008cfa:	fab2 f682 	clz	r6, r2
 8008cfe:	b14e      	cbz	r6, 8008d14 <__udivmoddi4+0x30>
 8008d00:	f1c6 0320 	rsb	r3, r6, #32
 8008d04:	fa01 f806 	lsl.w	r8, r1, r6
 8008d08:	fa20 f303 	lsr.w	r3, r0, r3
 8008d0c:	40b7      	lsls	r7, r6
 8008d0e:	ea43 0808 	orr.w	r8, r3, r8
 8008d12:	40b4      	lsls	r4, r6
 8008d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008d18:	fa1f fc87 	uxth.w	ip, r7
 8008d1c:	fbb8 f1fe 	udiv	r1, r8, lr
 8008d20:	0c23      	lsrs	r3, r4, #16
 8008d22:	fb0e 8811 	mls	r8, lr, r1, r8
 8008d26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008d2a:	fb01 f20c 	mul.w	r2, r1, ip
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d909      	bls.n	8008d46 <__udivmoddi4+0x62>
 8008d32:	18fb      	adds	r3, r7, r3
 8008d34:	f101 30ff 	add.w	r0, r1, #4294967295
 8008d38:	f080 80ea 	bcs.w	8008f10 <__udivmoddi4+0x22c>
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	f240 80e7 	bls.w	8008f10 <__udivmoddi4+0x22c>
 8008d42:	3902      	subs	r1, #2
 8008d44:	443b      	add	r3, r7
 8008d46:	1a9a      	subs	r2, r3, r2
 8008d48:	b2a3      	uxth	r3, r4
 8008d4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8008d4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8008d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d56:	fb00 fc0c 	mul.w	ip, r0, ip
 8008d5a:	459c      	cmp	ip, r3
 8008d5c:	d909      	bls.n	8008d72 <__udivmoddi4+0x8e>
 8008d5e:	18fb      	adds	r3, r7, r3
 8008d60:	f100 32ff 	add.w	r2, r0, #4294967295
 8008d64:	f080 80d6 	bcs.w	8008f14 <__udivmoddi4+0x230>
 8008d68:	459c      	cmp	ip, r3
 8008d6a:	f240 80d3 	bls.w	8008f14 <__udivmoddi4+0x230>
 8008d6e:	443b      	add	r3, r7
 8008d70:	3802      	subs	r0, #2
 8008d72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008d76:	eba3 030c 	sub.w	r3, r3, ip
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	b11d      	cbz	r5, 8008d86 <__udivmoddi4+0xa2>
 8008d7e:	40f3      	lsrs	r3, r6
 8008d80:	2200      	movs	r2, #0
 8008d82:	e9c5 3200 	strd	r3, r2, [r5]
 8008d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8a:	428b      	cmp	r3, r1
 8008d8c:	d905      	bls.n	8008d9a <__udivmoddi4+0xb6>
 8008d8e:	b10d      	cbz	r5, 8008d94 <__udivmoddi4+0xb0>
 8008d90:	e9c5 0100 	strd	r0, r1, [r5]
 8008d94:	2100      	movs	r1, #0
 8008d96:	4608      	mov	r0, r1
 8008d98:	e7f5      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008d9a:	fab3 f183 	clz	r1, r3
 8008d9e:	2900      	cmp	r1, #0
 8008da0:	d146      	bne.n	8008e30 <__udivmoddi4+0x14c>
 8008da2:	4573      	cmp	r3, lr
 8008da4:	d302      	bcc.n	8008dac <__udivmoddi4+0xc8>
 8008da6:	4282      	cmp	r2, r0
 8008da8:	f200 8105 	bhi.w	8008fb6 <__udivmoddi4+0x2d2>
 8008dac:	1a84      	subs	r4, r0, r2
 8008dae:	eb6e 0203 	sbc.w	r2, lr, r3
 8008db2:	2001      	movs	r0, #1
 8008db4:	4690      	mov	r8, r2
 8008db6:	2d00      	cmp	r5, #0
 8008db8:	d0e5      	beq.n	8008d86 <__udivmoddi4+0xa2>
 8008dba:	e9c5 4800 	strd	r4, r8, [r5]
 8008dbe:	e7e2      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008dc0:	2a00      	cmp	r2, #0
 8008dc2:	f000 8090 	beq.w	8008ee6 <__udivmoddi4+0x202>
 8008dc6:	fab2 f682 	clz	r6, r2
 8008dca:	2e00      	cmp	r6, #0
 8008dcc:	f040 80a4 	bne.w	8008f18 <__udivmoddi4+0x234>
 8008dd0:	1a8a      	subs	r2, r1, r2
 8008dd2:	0c03      	lsrs	r3, r0, #16
 8008dd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008dd8:	b280      	uxth	r0, r0
 8008dda:	b2bc      	uxth	r4, r7
 8008ddc:	2101      	movs	r1, #1
 8008dde:	fbb2 fcfe 	udiv	ip, r2, lr
 8008de2:	fb0e 221c 	mls	r2, lr, ip, r2
 8008de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dea:	fb04 f20c 	mul.w	r2, r4, ip
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d907      	bls.n	8008e02 <__udivmoddi4+0x11e>
 8008df2:	18fb      	adds	r3, r7, r3
 8008df4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008df8:	d202      	bcs.n	8008e00 <__udivmoddi4+0x11c>
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	f200 80e0 	bhi.w	8008fc0 <__udivmoddi4+0x2dc>
 8008e00:	46c4      	mov	ip, r8
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	fbb3 f2fe 	udiv	r2, r3, lr
 8008e08:	fb0e 3312 	mls	r3, lr, r2, r3
 8008e0c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8008e10:	fb02 f404 	mul.w	r4, r2, r4
 8008e14:	429c      	cmp	r4, r3
 8008e16:	d907      	bls.n	8008e28 <__udivmoddi4+0x144>
 8008e18:	18fb      	adds	r3, r7, r3
 8008e1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8008e1e:	d202      	bcs.n	8008e26 <__udivmoddi4+0x142>
 8008e20:	429c      	cmp	r4, r3
 8008e22:	f200 80ca 	bhi.w	8008fba <__udivmoddi4+0x2d6>
 8008e26:	4602      	mov	r2, r0
 8008e28:	1b1b      	subs	r3, r3, r4
 8008e2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8008e2e:	e7a5      	b.n	8008d7c <__udivmoddi4+0x98>
 8008e30:	f1c1 0620 	rsb	r6, r1, #32
 8008e34:	408b      	lsls	r3, r1
 8008e36:	fa22 f706 	lsr.w	r7, r2, r6
 8008e3a:	431f      	orrs	r7, r3
 8008e3c:	fa0e f401 	lsl.w	r4, lr, r1
 8008e40:	fa20 f306 	lsr.w	r3, r0, r6
 8008e44:	fa2e fe06 	lsr.w	lr, lr, r6
 8008e48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008e4c:	4323      	orrs	r3, r4
 8008e4e:	fa00 f801 	lsl.w	r8, r0, r1
 8008e52:	fa1f fc87 	uxth.w	ip, r7
 8008e56:	fbbe f0f9 	udiv	r0, lr, r9
 8008e5a:	0c1c      	lsrs	r4, r3, #16
 8008e5c:	fb09 ee10 	mls	lr, r9, r0, lr
 8008e60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008e64:	fb00 fe0c 	mul.w	lr, r0, ip
 8008e68:	45a6      	cmp	lr, r4
 8008e6a:	fa02 f201 	lsl.w	r2, r2, r1
 8008e6e:	d909      	bls.n	8008e84 <__udivmoddi4+0x1a0>
 8008e70:	193c      	adds	r4, r7, r4
 8008e72:	f100 3aff 	add.w	sl, r0, #4294967295
 8008e76:	f080 809c 	bcs.w	8008fb2 <__udivmoddi4+0x2ce>
 8008e7a:	45a6      	cmp	lr, r4
 8008e7c:	f240 8099 	bls.w	8008fb2 <__udivmoddi4+0x2ce>
 8008e80:	3802      	subs	r0, #2
 8008e82:	443c      	add	r4, r7
 8008e84:	eba4 040e 	sub.w	r4, r4, lr
 8008e88:	fa1f fe83 	uxth.w	lr, r3
 8008e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8008e90:	fb09 4413 	mls	r4, r9, r3, r4
 8008e94:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8008e98:	fb03 fc0c 	mul.w	ip, r3, ip
 8008e9c:	45a4      	cmp	ip, r4
 8008e9e:	d908      	bls.n	8008eb2 <__udivmoddi4+0x1ce>
 8008ea0:	193c      	adds	r4, r7, r4
 8008ea2:	f103 3eff 	add.w	lr, r3, #4294967295
 8008ea6:	f080 8082 	bcs.w	8008fae <__udivmoddi4+0x2ca>
 8008eaa:	45a4      	cmp	ip, r4
 8008eac:	d97f      	bls.n	8008fae <__udivmoddi4+0x2ca>
 8008eae:	3b02      	subs	r3, #2
 8008eb0:	443c      	add	r4, r7
 8008eb2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008eb6:	eba4 040c 	sub.w	r4, r4, ip
 8008eba:	fba0 ec02 	umull	lr, ip, r0, r2
 8008ebe:	4564      	cmp	r4, ip
 8008ec0:	4673      	mov	r3, lr
 8008ec2:	46e1      	mov	r9, ip
 8008ec4:	d362      	bcc.n	8008f8c <__udivmoddi4+0x2a8>
 8008ec6:	d05f      	beq.n	8008f88 <__udivmoddi4+0x2a4>
 8008ec8:	b15d      	cbz	r5, 8008ee2 <__udivmoddi4+0x1fe>
 8008eca:	ebb8 0203 	subs.w	r2, r8, r3
 8008ece:	eb64 0409 	sbc.w	r4, r4, r9
 8008ed2:	fa04 f606 	lsl.w	r6, r4, r6
 8008ed6:	fa22 f301 	lsr.w	r3, r2, r1
 8008eda:	431e      	orrs	r6, r3
 8008edc:	40cc      	lsrs	r4, r1
 8008ede:	e9c5 6400 	strd	r6, r4, [r5]
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	e74f      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008ee6:	fbb1 fcf2 	udiv	ip, r1, r2
 8008eea:	0c01      	lsrs	r1, r0, #16
 8008eec:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8008ef0:	b280      	uxth	r0, r0
 8008ef2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8008ef6:	463b      	mov	r3, r7
 8008ef8:	4638      	mov	r0, r7
 8008efa:	463c      	mov	r4, r7
 8008efc:	46b8      	mov	r8, r7
 8008efe:	46be      	mov	lr, r7
 8008f00:	2620      	movs	r6, #32
 8008f02:	fbb1 f1f7 	udiv	r1, r1, r7
 8008f06:	eba2 0208 	sub.w	r2, r2, r8
 8008f0a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8008f0e:	e766      	b.n	8008dde <__udivmoddi4+0xfa>
 8008f10:	4601      	mov	r1, r0
 8008f12:	e718      	b.n	8008d46 <__udivmoddi4+0x62>
 8008f14:	4610      	mov	r0, r2
 8008f16:	e72c      	b.n	8008d72 <__udivmoddi4+0x8e>
 8008f18:	f1c6 0220 	rsb	r2, r6, #32
 8008f1c:	fa2e f302 	lsr.w	r3, lr, r2
 8008f20:	40b7      	lsls	r7, r6
 8008f22:	40b1      	lsls	r1, r6
 8008f24:	fa20 f202 	lsr.w	r2, r0, r2
 8008f28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	fbb3 f8fe 	udiv	r8, r3, lr
 8008f32:	b2bc      	uxth	r4, r7
 8008f34:	fb0e 3318 	mls	r3, lr, r8, r3
 8008f38:	0c11      	lsrs	r1, r2, #16
 8008f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008f3e:	fb08 f904 	mul.w	r9, r8, r4
 8008f42:	40b0      	lsls	r0, r6
 8008f44:	4589      	cmp	r9, r1
 8008f46:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8008f4a:	b280      	uxth	r0, r0
 8008f4c:	d93e      	bls.n	8008fcc <__udivmoddi4+0x2e8>
 8008f4e:	1879      	adds	r1, r7, r1
 8008f50:	f108 3cff 	add.w	ip, r8, #4294967295
 8008f54:	d201      	bcs.n	8008f5a <__udivmoddi4+0x276>
 8008f56:	4589      	cmp	r9, r1
 8008f58:	d81f      	bhi.n	8008f9a <__udivmoddi4+0x2b6>
 8008f5a:	eba1 0109 	sub.w	r1, r1, r9
 8008f5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8008f62:	fb09 f804 	mul.w	r8, r9, r4
 8008f66:	fb0e 1119 	mls	r1, lr, r9, r1
 8008f6a:	b292      	uxth	r2, r2
 8008f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008f70:	4542      	cmp	r2, r8
 8008f72:	d229      	bcs.n	8008fc8 <__udivmoddi4+0x2e4>
 8008f74:	18ba      	adds	r2, r7, r2
 8008f76:	f109 31ff 	add.w	r1, r9, #4294967295
 8008f7a:	d2c4      	bcs.n	8008f06 <__udivmoddi4+0x222>
 8008f7c:	4542      	cmp	r2, r8
 8008f7e:	d2c2      	bcs.n	8008f06 <__udivmoddi4+0x222>
 8008f80:	f1a9 0102 	sub.w	r1, r9, #2
 8008f84:	443a      	add	r2, r7
 8008f86:	e7be      	b.n	8008f06 <__udivmoddi4+0x222>
 8008f88:	45f0      	cmp	r8, lr
 8008f8a:	d29d      	bcs.n	8008ec8 <__udivmoddi4+0x1e4>
 8008f8c:	ebbe 0302 	subs.w	r3, lr, r2
 8008f90:	eb6c 0c07 	sbc.w	ip, ip, r7
 8008f94:	3801      	subs	r0, #1
 8008f96:	46e1      	mov	r9, ip
 8008f98:	e796      	b.n	8008ec8 <__udivmoddi4+0x1e4>
 8008f9a:	eba7 0909 	sub.w	r9, r7, r9
 8008f9e:	4449      	add	r1, r9
 8008fa0:	f1a8 0c02 	sub.w	ip, r8, #2
 8008fa4:	fbb1 f9fe 	udiv	r9, r1, lr
 8008fa8:	fb09 f804 	mul.w	r8, r9, r4
 8008fac:	e7db      	b.n	8008f66 <__udivmoddi4+0x282>
 8008fae:	4673      	mov	r3, lr
 8008fb0:	e77f      	b.n	8008eb2 <__udivmoddi4+0x1ce>
 8008fb2:	4650      	mov	r0, sl
 8008fb4:	e766      	b.n	8008e84 <__udivmoddi4+0x1a0>
 8008fb6:	4608      	mov	r0, r1
 8008fb8:	e6fd      	b.n	8008db6 <__udivmoddi4+0xd2>
 8008fba:	443b      	add	r3, r7
 8008fbc:	3a02      	subs	r2, #2
 8008fbe:	e733      	b.n	8008e28 <__udivmoddi4+0x144>
 8008fc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8008fc4:	443b      	add	r3, r7
 8008fc6:	e71c      	b.n	8008e02 <__udivmoddi4+0x11e>
 8008fc8:	4649      	mov	r1, r9
 8008fca:	e79c      	b.n	8008f06 <__udivmoddi4+0x222>
 8008fcc:	eba1 0109 	sub.w	r1, r1, r9
 8008fd0:	46c4      	mov	ip, r8
 8008fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8008fd6:	fb09 f804 	mul.w	r8, r9, r4
 8008fda:	e7c4      	b.n	8008f66 <__udivmoddi4+0x282>

08008fdc <__aeabi_idiv0>:
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop

08008fe0 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	80fb      	strh	r3, [r7, #6]
 8008fea:	460b      	mov	r3, r1
 8008fec:	80bb      	strh	r3, [r7, #4]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 8008ff2:	88fb      	ldrh	r3, [r7, #6]
 8008ff4:	88b9      	ldrh	r1, [r7, #4]
 8008ff6:	887a      	ldrh	r2, [r7, #2]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 fe23 	bl	8009c44 <ST7735_DrawPixel>
}
 8008ffe:	bf00      	nop
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8009006:	b590      	push	{r4, r7, lr}
 8009008:	b085      	sub	sp, #20
 800900a:	af02      	add	r7, sp, #8
 800900c:	4604      	mov	r4, r0
 800900e:	4608      	mov	r0, r1
 8009010:	4611      	mov	r1, r2
 8009012:	461a      	mov	r2, r3
 8009014:	4623      	mov	r3, r4
 8009016:	80fb      	strh	r3, [r7, #6]
 8009018:	4603      	mov	r3, r0
 800901a:	80bb      	strh	r3, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	807b      	strh	r3, [r7, #2]
 8009020:	4613      	mov	r3, r2
 8009022:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8009024:	88f8      	ldrh	r0, [r7, #6]
 8009026:	88b9      	ldrh	r1, [r7, #4]
 8009028:	887a      	ldrh	r2, [r7, #2]
 800902a:	883c      	ldrh	r4, [r7, #0]
 800902c:	8b3b      	ldrh	r3, [r7, #24]
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	4623      	mov	r3, r4
 8009032:	f000 ff11 	bl	8009e58 <ST7735_FillRectangle>
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	bd90      	pop	{r4, r7, pc}

0800903e <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b082      	sub	sp, #8
 8009042:	af00      	add	r7, sp, #0
 8009044:	4603      	mov	r3, r0
 8009046:	80fb      	strh	r3, [r7, #6]
 8009048:	460b      	mov	r3, r1
 800904a:	80bb      	strh	r3, [r7, #4]
 800904c:	4613      	mov	r3, r2
 800904e:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8009050:	887a      	ldrh	r2, [r7, #2]
 8009052:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800905a:	4618      	mov	r0, r3
 800905c:	f7ff ffc0 	bl	8008fe0 <drawPixel>
}
 8009060:	bf00      	nop
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8009068:	b590      	push	{r4, r7, lr}
 800906a:	b089      	sub	sp, #36	@ 0x24
 800906c:	af00      	add	r7, sp, #0
 800906e:	4604      	mov	r4, r0
 8009070:	4608      	mov	r0, r1
 8009072:	4611      	mov	r1, r2
 8009074:	461a      	mov	r2, r3
 8009076:	4623      	mov	r3, r4
 8009078:	80fb      	strh	r3, [r7, #6]
 800907a:	4603      	mov	r3, r0
 800907c:	80bb      	strh	r3, [r7, #4]
 800907e:	460b      	mov	r3, r1
 8009080:	807b      	strh	r3, [r7, #2]
 8009082:	4613      	mov	r3, r2
 8009084:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8009086:	f9b7 2000 	ldrsh.w	r2, [r7]
 800908a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8009094:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8009098:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800909c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090a0:	1acb      	subs	r3, r1, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	bfb8      	it	lt
 80090a6:	425b      	neglt	r3, r3
 80090a8:	429a      	cmp	r2, r3
 80090aa:	bfcc      	ite	gt
 80090ac:	2301      	movgt	r3, #1
 80090ae:	2300      	movle	r3, #0
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	837b      	strh	r3, [r7, #26]
    if (steep) {
 80090b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00b      	beq.n	80090d4 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 80090bc:	88fb      	ldrh	r3, [r7, #6]
 80090be:	833b      	strh	r3, [r7, #24]
 80090c0:	88bb      	ldrh	r3, [r7, #4]
 80090c2:	80fb      	strh	r3, [r7, #6]
 80090c4:	8b3b      	ldrh	r3, [r7, #24]
 80090c6:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80090c8:	887b      	ldrh	r3, [r7, #2]
 80090ca:	82fb      	strh	r3, [r7, #22]
 80090cc:	883b      	ldrh	r3, [r7, #0]
 80090ce:	807b      	strh	r3, [r7, #2]
 80090d0:	8afb      	ldrh	r3, [r7, #22]
 80090d2:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80090d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80090d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80090dc:	429a      	cmp	r2, r3
 80090de:	dd0b      	ble.n	80090f8 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 80090e0:	88fb      	ldrh	r3, [r7, #6]
 80090e2:	82bb      	strh	r3, [r7, #20]
 80090e4:	887b      	ldrh	r3, [r7, #2]
 80090e6:	80fb      	strh	r3, [r7, #6]
 80090e8:	8abb      	ldrh	r3, [r7, #20]
 80090ea:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80090ec:	88bb      	ldrh	r3, [r7, #4]
 80090ee:	827b      	strh	r3, [r7, #18]
 80090f0:	883b      	ldrh	r3, [r7, #0]
 80090f2:	80bb      	strh	r3, [r7, #4]
 80090f4:	8a7b      	ldrh	r3, [r7, #18]
 80090f6:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80090f8:	887a      	ldrh	r2, [r7, #2]
 80090fa:	88fb      	ldrh	r3, [r7, #6]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	b29b      	uxth	r3, r3
 8009100:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 8009102:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009106:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	2b00      	cmp	r3, #0
 800910e:	bfb8      	it	lt
 8009110:	425b      	neglt	r3, r3
 8009112:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8009114:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009118:	0fda      	lsrs	r2, r3, #31
 800911a:	4413      	add	r3, r2
 800911c:	105b      	asrs	r3, r3, #1
 800911e:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 8009120:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009124:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009128:	429a      	cmp	r2, r3
 800912a:	da02      	bge.n	8009132 <writeLine+0xca>
        ystep = 1;
 800912c:	2301      	movs	r3, #1
 800912e:	83bb      	strh	r3, [r7, #28]
 8009130:	e031      	b.n	8009196 <writeLine+0x12e>
    } else {
        ystep = -1;
 8009132:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009136:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8009138:	e02d      	b.n	8009196 <writeLine+0x12e>
        if (steep) {
 800913a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d008      	beq.n	8009154 <writeLine+0xec>
            writePixel(y0, x0, color);
 8009142:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009144:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8009148:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800914c:	4618      	mov	r0, r3
 800914e:	f7ff ff76 	bl	800903e <writePixel>
 8009152:	e007      	b.n	8009164 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 8009154:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009156:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800915a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff ff6d 	bl	800903e <writePixel>
        }
        err -= dy;
 8009164:	8bfa      	ldrh	r2, [r7, #30]
 8009166:	89fb      	ldrh	r3, [r7, #14]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	b29b      	uxth	r3, r3
 800916c:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 800916e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009172:	2b00      	cmp	r3, #0
 8009174:	da09      	bge.n	800918a <writeLine+0x122>
            y0 += ystep;
 8009176:	88ba      	ldrh	r2, [r7, #4]
 8009178:	8bbb      	ldrh	r3, [r7, #28]
 800917a:	4413      	add	r3, r2
 800917c:	b29b      	uxth	r3, r3
 800917e:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8009180:	8bfa      	ldrh	r2, [r7, #30]
 8009182:	8a3b      	ldrh	r3, [r7, #16]
 8009184:	4413      	add	r3, r2
 8009186:	b29b      	uxth	r3, r3
 8009188:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 800918a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800918e:	b29b      	uxth	r3, r3
 8009190:	3301      	adds	r3, #1
 8009192:	b29b      	uxth	r3, r3
 8009194:	80fb      	strh	r3, [r7, #6]
 8009196:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800919a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800919e:	429a      	cmp	r2, r3
 80091a0:	ddcb      	ble.n	800913a <writeLine+0xd2>
        }
    }
}
 80091a2:	bf00      	nop
 80091a4:	bf00      	nop
 80091a6:	3724      	adds	r7, #36	@ 0x24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd90      	pop	{r4, r7, pc}

080091ac <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80091ac:	b590      	push	{r4, r7, lr}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af02      	add	r7, sp, #8
 80091b2:	4604      	mov	r4, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	4611      	mov	r1, r2
 80091b8:	461a      	mov	r2, r3
 80091ba:	4623      	mov	r3, r4
 80091bc:	80fb      	strh	r3, [r7, #6]
 80091be:	4603      	mov	r3, r0
 80091c0:	80bb      	strh	r3, [r7, #4]
 80091c2:	460b      	mov	r3, r1
 80091c4:	807b      	strh	r3, [r7, #2]
 80091c6:	4613      	mov	r3, r2
 80091c8:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 80091ca:	88ba      	ldrh	r2, [r7, #4]
 80091cc:	887b      	ldrh	r3, [r7, #2]
 80091ce:	4413      	add	r3, r2
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	3b01      	subs	r3, #1
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	b21c      	sxth	r4, r3
 80091d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80091dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80091e0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80091e4:	883b      	ldrh	r3, [r7, #0]
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	4623      	mov	r3, r4
 80091ea:	f7ff ff3d 	bl	8009068 <writeLine>
}
 80091ee:	bf00      	nop
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd90      	pop	{r4, r7, pc}

080091f6 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80091f6:	b590      	push	{r4, r7, lr}
 80091f8:	b085      	sub	sp, #20
 80091fa:	af02      	add	r7, sp, #8
 80091fc:	4604      	mov	r4, r0
 80091fe:	4608      	mov	r0, r1
 8009200:	4611      	mov	r1, r2
 8009202:	461a      	mov	r2, r3
 8009204:	4623      	mov	r3, r4
 8009206:	80fb      	strh	r3, [r7, #6]
 8009208:	4603      	mov	r3, r0
 800920a:	80bb      	strh	r3, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	807b      	strh	r3, [r7, #2]
 8009210:	4613      	mov	r3, r2
 8009212:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 8009214:	88fa      	ldrh	r2, [r7, #6]
 8009216:	887b      	ldrh	r3, [r7, #2]
 8009218:	4413      	add	r3, r2
 800921a:	b29b      	uxth	r3, r3
 800921c:	3b01      	subs	r3, #1
 800921e:	b29b      	uxth	r3, r3
 8009220:	b21a      	sxth	r2, r3
 8009222:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8009226:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800922a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800922e:	883b      	ldrh	r3, [r7, #0]
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	4623      	mov	r3, r4
 8009234:	f7ff ff18 	bl	8009068 <writeLine>
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	bd90      	pop	{r4, r7, pc}

08009240 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8009240:	b590      	push	{r4, r7, lr}
 8009242:	b087      	sub	sp, #28
 8009244:	af02      	add	r7, sp, #8
 8009246:	4604      	mov	r4, r0
 8009248:	4608      	mov	r0, r1
 800924a:	4611      	mov	r1, r2
 800924c:	461a      	mov	r2, r3
 800924e:	4623      	mov	r3, r4
 8009250:	80fb      	strh	r3, [r7, #6]
 8009252:	4603      	mov	r3, r0
 8009254:	80bb      	strh	r3, [r7, #4]
 8009256:	460b      	mov	r3, r1
 8009258:	807b      	strh	r3, [r7, #2]
 800925a:	4613      	mov	r3, r2
 800925c:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 800925e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009262:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009266:	429a      	cmp	r2, r3
 8009268:	d11a      	bne.n	80092a0 <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 800926a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800926e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009272:	429a      	cmp	r2, r3
 8009274:	dd05      	ble.n	8009282 <drawLine+0x42>
 8009276:	88bb      	ldrh	r3, [r7, #4]
 8009278:	81bb      	strh	r3, [r7, #12]
 800927a:	883b      	ldrh	r3, [r7, #0]
 800927c:	80bb      	strh	r3, [r7, #4]
 800927e:	89bb      	ldrh	r3, [r7, #12]
 8009280:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8009282:	883a      	ldrh	r2, [r7, #0]
 8009284:	88bb      	ldrh	r3, [r7, #4]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	b29b      	uxth	r3, r3
 800928a:	3301      	adds	r3, #1
 800928c:	b29b      	uxth	r3, r3
 800928e:	b21a      	sxth	r2, r3
 8009290:	8c3b      	ldrh	r3, [r7, #32]
 8009292:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009296:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800929a:	f7ff ff87 	bl	80091ac <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 800929e:	e02d      	b.n	80092fc <drawLine+0xbc>
    } else if(y0 == y1){
 80092a0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80092a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d11a      	bne.n	80092e2 <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80092ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80092b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	dd05      	ble.n	80092c4 <drawLine+0x84>
 80092b8:	88fb      	ldrh	r3, [r7, #6]
 80092ba:	81fb      	strh	r3, [r7, #14]
 80092bc:	887b      	ldrh	r3, [r7, #2]
 80092be:	80fb      	strh	r3, [r7, #6]
 80092c0:	89fb      	ldrh	r3, [r7, #14]
 80092c2:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80092c4:	887a      	ldrh	r2, [r7, #2]
 80092c6:	88fb      	ldrh	r3, [r7, #6]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	3301      	adds	r3, #1
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	b21a      	sxth	r2, r3
 80092d2:	8c3b      	ldrh	r3, [r7, #32]
 80092d4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80092d8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80092dc:	f7ff ff8b 	bl	80091f6 <drawFastHLine>
}
 80092e0:	e00c      	b.n	80092fc <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 80092e2:	f9b7 4000 	ldrsh.w	r4, [r7]
 80092e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80092ea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80092ee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80092f2:	8c3b      	ldrh	r3, [r7, #32]
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	4623      	mov	r3, r4
 80092f8:	f7ff feb6 	bl	8009068 <writeLine>
}
 80092fc:	bf00      	nop
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	bd90      	pop	{r4, r7, pc}

08009304 <drawCircleHelper>:
        writePixel(x0 - y, y0 - x, color);
    }
}

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8009304:	b590      	push	{r4, r7, lr}
 8009306:	b087      	sub	sp, #28
 8009308:	af00      	add	r7, sp, #0
 800930a:	4604      	mov	r4, r0
 800930c:	4608      	mov	r0, r1
 800930e:	4611      	mov	r1, r2
 8009310:	461a      	mov	r2, r3
 8009312:	4623      	mov	r3, r4
 8009314:	80fb      	strh	r3, [r7, #6]
 8009316:	4603      	mov	r3, r0
 8009318:	80bb      	strh	r3, [r7, #4]
 800931a:	460b      	mov	r3, r1
 800931c:	807b      	strh	r3, [r7, #2]
 800931e:	4613      	mov	r3, r2
 8009320:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8009322:	887b      	ldrh	r3, [r7, #2]
 8009324:	f1c3 0301 	rsb	r3, r3, #1
 8009328:	b29b      	uxth	r3, r3
 800932a:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 800932c:	2301      	movs	r3, #1
 800932e:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8009330:	887b      	ldrh	r3, [r7, #2]
 8009332:	461a      	mov	r2, r3
 8009334:	03d2      	lsls	r2, r2, #15
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	b29b      	uxth	r3, r3
 800933c:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8009342:	887b      	ldrh	r3, [r7, #2]
 8009344:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8009346:	e0a5      	b.n	8009494 <drawCircleHelper+0x190>
        if (f >= 0) {
 8009348:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800934c:	2b00      	cmp	r3, #0
 800934e:	db0e      	blt.n	800936e <drawCircleHelper+0x6a>
            y--;
 8009350:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009354:	b29b      	uxth	r3, r3
 8009356:	3b01      	subs	r3, #1
 8009358:	b29b      	uxth	r3, r3
 800935a:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800935c:	8a7b      	ldrh	r3, [r7, #18]
 800935e:	3302      	adds	r3, #2
 8009360:	b29b      	uxth	r3, r3
 8009362:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8009364:	8afa      	ldrh	r2, [r7, #22]
 8009366:	8a7b      	ldrh	r3, [r7, #18]
 8009368:	4413      	add	r3, r2
 800936a:	b29b      	uxth	r3, r3
 800936c:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800936e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009372:	b29b      	uxth	r3, r3
 8009374:	3301      	adds	r3, #1
 8009376:	b29b      	uxth	r3, r3
 8009378:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800937a:	8abb      	ldrh	r3, [r7, #20]
 800937c:	3302      	adds	r3, #2
 800937e:	b29b      	uxth	r3, r3
 8009380:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8009382:	8afa      	ldrh	r2, [r7, #22]
 8009384:	8abb      	ldrh	r3, [r7, #20]
 8009386:	4413      	add	r3, r2
 8009388:	b29b      	uxth	r3, r3
 800938a:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 800938c:	787b      	ldrb	r3, [r7, #1]
 800938e:	f003 0304 	and.w	r3, r3, #4
 8009392:	2b00      	cmp	r3, #0
 8009394:	d01b      	beq.n	80093ce <drawCircleHelper+0xca>
            writePixel(x0 + x, y0 + y, color);
 8009396:	88fa      	ldrh	r2, [r7, #6]
 8009398:	8a3b      	ldrh	r3, [r7, #16]
 800939a:	4413      	add	r3, r2
 800939c:	b29b      	uxth	r3, r3
 800939e:	b218      	sxth	r0, r3
 80093a0:	88ba      	ldrh	r2, [r7, #4]
 80093a2:	89fb      	ldrh	r3, [r7, #14]
 80093a4:	4413      	add	r3, r2
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	b21b      	sxth	r3, r3
 80093aa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80093ac:	4619      	mov	r1, r3
 80093ae:	f7ff fe46 	bl	800903e <writePixel>
            writePixel(x0 + y, y0 + x, color);
 80093b2:	88fa      	ldrh	r2, [r7, #6]
 80093b4:	89fb      	ldrh	r3, [r7, #14]
 80093b6:	4413      	add	r3, r2
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	b218      	sxth	r0, r3
 80093bc:	88ba      	ldrh	r2, [r7, #4]
 80093be:	8a3b      	ldrh	r3, [r7, #16]
 80093c0:	4413      	add	r3, r2
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	b21b      	sxth	r3, r3
 80093c6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80093c8:	4619      	mov	r1, r3
 80093ca:	f7ff fe38 	bl	800903e <writePixel>
        }
        if (cornername & 0x2) {
 80093ce:	787b      	ldrb	r3, [r7, #1]
 80093d0:	f003 0302 	and.w	r3, r3, #2
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d01b      	beq.n	8009410 <drawCircleHelper+0x10c>
            writePixel(x0 + x, y0 - y, color);
 80093d8:	88fa      	ldrh	r2, [r7, #6]
 80093da:	8a3b      	ldrh	r3, [r7, #16]
 80093dc:	4413      	add	r3, r2
 80093de:	b29b      	uxth	r3, r3
 80093e0:	b218      	sxth	r0, r3
 80093e2:	88ba      	ldrh	r2, [r7, #4]
 80093e4:	89fb      	ldrh	r3, [r7, #14]
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	b21b      	sxth	r3, r3
 80093ec:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80093ee:	4619      	mov	r1, r3
 80093f0:	f7ff fe25 	bl	800903e <writePixel>
            writePixel(x0 + y, y0 - x, color);
 80093f4:	88fa      	ldrh	r2, [r7, #6]
 80093f6:	89fb      	ldrh	r3, [r7, #14]
 80093f8:	4413      	add	r3, r2
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	b218      	sxth	r0, r3
 80093fe:	88ba      	ldrh	r2, [r7, #4]
 8009400:	8a3b      	ldrh	r3, [r7, #16]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	b29b      	uxth	r3, r3
 8009406:	b21b      	sxth	r3, r3
 8009408:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800940a:	4619      	mov	r1, r3
 800940c:	f7ff fe17 	bl	800903e <writePixel>
        }
        if (cornername & 0x8) {
 8009410:	787b      	ldrb	r3, [r7, #1]
 8009412:	f003 0308 	and.w	r3, r3, #8
 8009416:	2b00      	cmp	r3, #0
 8009418:	d01b      	beq.n	8009452 <drawCircleHelper+0x14e>
            writePixel(x0 - y, y0 + x, color);
 800941a:	88fa      	ldrh	r2, [r7, #6]
 800941c:	89fb      	ldrh	r3, [r7, #14]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	b29b      	uxth	r3, r3
 8009422:	b218      	sxth	r0, r3
 8009424:	88ba      	ldrh	r2, [r7, #4]
 8009426:	8a3b      	ldrh	r3, [r7, #16]
 8009428:	4413      	add	r3, r2
 800942a:	b29b      	uxth	r3, r3
 800942c:	b21b      	sxth	r3, r3
 800942e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009430:	4619      	mov	r1, r3
 8009432:	f7ff fe04 	bl	800903e <writePixel>
            writePixel(x0 - x, y0 + y, color);
 8009436:	88fa      	ldrh	r2, [r7, #6]
 8009438:	8a3b      	ldrh	r3, [r7, #16]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	b29b      	uxth	r3, r3
 800943e:	b218      	sxth	r0, r3
 8009440:	88ba      	ldrh	r2, [r7, #4]
 8009442:	89fb      	ldrh	r3, [r7, #14]
 8009444:	4413      	add	r3, r2
 8009446:	b29b      	uxth	r3, r3
 8009448:	b21b      	sxth	r3, r3
 800944a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800944c:	4619      	mov	r1, r3
 800944e:	f7ff fdf6 	bl	800903e <writePixel>
        }
        if (cornername & 0x1) {
 8009452:	787b      	ldrb	r3, [r7, #1]
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	2b00      	cmp	r3, #0
 800945a:	d01b      	beq.n	8009494 <drawCircleHelper+0x190>
            writePixel(x0 - y, y0 - x, color);
 800945c:	88fa      	ldrh	r2, [r7, #6]
 800945e:	89fb      	ldrh	r3, [r7, #14]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	b29b      	uxth	r3, r3
 8009464:	b218      	sxth	r0, r3
 8009466:	88ba      	ldrh	r2, [r7, #4]
 8009468:	8a3b      	ldrh	r3, [r7, #16]
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	b29b      	uxth	r3, r3
 800946e:	b21b      	sxth	r3, r3
 8009470:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009472:	4619      	mov	r1, r3
 8009474:	f7ff fde3 	bl	800903e <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8009478:	88fa      	ldrh	r2, [r7, #6]
 800947a:	8a3b      	ldrh	r3, [r7, #16]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	b29b      	uxth	r3, r3
 8009480:	b218      	sxth	r0, r3
 8009482:	88ba      	ldrh	r2, [r7, #4]
 8009484:	89fb      	ldrh	r3, [r7, #14]
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	b29b      	uxth	r3, r3
 800948a:	b21b      	sxth	r3, r3
 800948c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800948e:	4619      	mov	r1, r3
 8009490:	f7ff fdd5 	bl	800903e <writePixel>
    while (x<y) {
 8009494:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009498:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800949c:	429a      	cmp	r2, r3
 800949e:	f6ff af53 	blt.w	8009348 <drawCircleHelper+0x44>
        }
    }
}
 80094a2:	bf00      	nop
 80094a4:	bf00      	nop
 80094a6:	371c      	adds	r7, #28
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd90      	pop	{r4, r7, pc}

080094ac <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 80094ac:	b590      	push	{r4, r7, lr}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	4611      	mov	r1, r2
 80094b8:	461a      	mov	r2, r3
 80094ba:	4623      	mov	r3, r4
 80094bc:	80fb      	strh	r3, [r7, #6]
 80094be:	4603      	mov	r3, r0
 80094c0:	80bb      	strh	r3, [r7, #4]
 80094c2:	460b      	mov	r3, r1
 80094c4:	807b      	strh	r3, [r7, #2]
 80094c6:	4613      	mov	r3, r2
 80094c8:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 80094ca:	887b      	ldrh	r3, [r7, #2]
 80094cc:	f1c3 0301 	rsb	r3, r3, #1
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80094d4:	2301      	movs	r3, #1
 80094d6:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80094d8:	887b      	ldrh	r3, [r7, #2]
 80094da:	461a      	mov	r2, r3
 80094dc:	03d2      	lsls	r2, r2, #15
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	005b      	lsls	r3, r3, #1
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 80094e6:	2300      	movs	r3, #0
 80094e8:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 80094ea:	887b      	ldrh	r3, [r7, #2]
 80094ec:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 80094ee:	8a3b      	ldrh	r3, [r7, #16]
 80094f0:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 80094f2:	89fb      	ldrh	r3, [r7, #14]
 80094f4:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 80094f6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	3301      	adds	r3, #1
 80094fe:	b29b      	uxth	r3, r3
 8009500:	853b      	strh	r3, [r7, #40]	@ 0x28

    while(x < y) {
 8009502:	e095      	b.n	8009630 <fillCircleHelper+0x184>
        if (f >= 0) {
 8009504:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009508:	2b00      	cmp	r3, #0
 800950a:	db0e      	blt.n	800952a <fillCircleHelper+0x7e>
            y--;
 800950c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009510:	b29b      	uxth	r3, r3
 8009512:	3b01      	subs	r3, #1
 8009514:	b29b      	uxth	r3, r3
 8009516:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8009518:	8a7b      	ldrh	r3, [r7, #18]
 800951a:	3302      	adds	r3, #2
 800951c:	b29b      	uxth	r3, r3
 800951e:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8009520:	8afa      	ldrh	r2, [r7, #22]
 8009522:	8a7b      	ldrh	r3, [r7, #18]
 8009524:	4413      	add	r3, r2
 8009526:	b29b      	uxth	r3, r3
 8009528:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800952a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800952e:	b29b      	uxth	r3, r3
 8009530:	3301      	adds	r3, #1
 8009532:	b29b      	uxth	r3, r3
 8009534:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8009536:	8abb      	ldrh	r3, [r7, #20]
 8009538:	3302      	adds	r3, #2
 800953a:	b29b      	uxth	r3, r3
 800953c:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800953e:	8afa      	ldrh	r2, [r7, #22]
 8009540:	8abb      	ldrh	r3, [r7, #20]
 8009542:	4413      	add	r3, r2
 8009544:	b29b      	uxth	r3, r3
 8009546:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8009548:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800954c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009550:	429a      	cmp	r2, r3
 8009552:	db31      	blt.n	80095b8 <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8009554:	787b      	ldrb	r3, [r7, #1]
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	2b00      	cmp	r3, #0
 800955c:	d013      	beq.n	8009586 <fillCircleHelper+0xda>
 800955e:	88fa      	ldrh	r2, [r7, #6]
 8009560:	8a3b      	ldrh	r3, [r7, #16]
 8009562:	4413      	add	r3, r2
 8009564:	b29b      	uxth	r3, r3
 8009566:	b218      	sxth	r0, r3
 8009568:	88ba      	ldrh	r2, [r7, #4]
 800956a:	89fb      	ldrh	r3, [r7, #14]
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	b29b      	uxth	r3, r3
 8009570:	b219      	sxth	r1, r3
 8009572:	89fb      	ldrh	r3, [r7, #14]
 8009574:	005b      	lsls	r3, r3, #1
 8009576:	b29a      	uxth	r2, r3
 8009578:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800957a:	4413      	add	r3, r2
 800957c:	b29b      	uxth	r3, r3
 800957e:	b21a      	sxth	r2, r3
 8009580:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009582:	f7ff fe13 	bl	80091ac <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8009586:	787b      	ldrb	r3, [r7, #1]
 8009588:	f003 0302 	and.w	r3, r3, #2
 800958c:	2b00      	cmp	r3, #0
 800958e:	d013      	beq.n	80095b8 <fillCircleHelper+0x10c>
 8009590:	88fa      	ldrh	r2, [r7, #6]
 8009592:	8a3b      	ldrh	r3, [r7, #16]
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	b29b      	uxth	r3, r3
 8009598:	b218      	sxth	r0, r3
 800959a:	88ba      	ldrh	r2, [r7, #4]
 800959c:	89fb      	ldrh	r3, [r7, #14]
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	b219      	sxth	r1, r3
 80095a4:	89fb      	ldrh	r3, [r7, #14]
 80095a6:	005b      	lsls	r3, r3, #1
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80095ac:	4413      	add	r3, r2
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	b21a      	sxth	r2, r3
 80095b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80095b4:	f7ff fdfa 	bl	80091ac <drawFastVLine>
        }
        if(y != py) {
 80095b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80095bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d033      	beq.n	800962c <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 80095c4:	787b      	ldrb	r3, [r7, #1]
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d013      	beq.n	80095f6 <fillCircleHelper+0x14a>
 80095ce:	88fa      	ldrh	r2, [r7, #6]
 80095d0:	897b      	ldrh	r3, [r7, #10]
 80095d2:	4413      	add	r3, r2
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	b218      	sxth	r0, r3
 80095d8:	88ba      	ldrh	r2, [r7, #4]
 80095da:	89bb      	ldrh	r3, [r7, #12]
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	b29b      	uxth	r3, r3
 80095e0:	b219      	sxth	r1, r3
 80095e2:	89bb      	ldrh	r3, [r7, #12]
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80095ea:	4413      	add	r3, r2
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	b21a      	sxth	r2, r3
 80095f0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80095f2:	f7ff fddb 	bl	80091ac <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 80095f6:	787b      	ldrb	r3, [r7, #1]
 80095f8:	f003 0302 	and.w	r3, r3, #2
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d013      	beq.n	8009628 <fillCircleHelper+0x17c>
 8009600:	88fa      	ldrh	r2, [r7, #6]
 8009602:	897b      	ldrh	r3, [r7, #10]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	b29b      	uxth	r3, r3
 8009608:	b218      	sxth	r0, r3
 800960a:	88ba      	ldrh	r2, [r7, #4]
 800960c:	89bb      	ldrh	r3, [r7, #12]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	b29b      	uxth	r3, r3
 8009612:	b219      	sxth	r1, r3
 8009614:	89bb      	ldrh	r3, [r7, #12]
 8009616:	005b      	lsls	r3, r3, #1
 8009618:	b29a      	uxth	r2, r3
 800961a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800961c:	4413      	add	r3, r2
 800961e:	b29b      	uxth	r3, r3
 8009620:	b21a      	sxth	r2, r3
 8009622:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009624:	f7ff fdc2 	bl	80091ac <drawFastVLine>
            py = y;
 8009628:	89fb      	ldrh	r3, [r7, #14]
 800962a:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 800962c:	8a3b      	ldrh	r3, [r7, #16]
 800962e:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8009630:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009634:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009638:	429a      	cmp	r2, r3
 800963a:	f6ff af63 	blt.w	8009504 <fillCircleHelper+0x58>
    }
}
 800963e:	bf00      	nop
 8009640:	bf00      	nop
 8009642:	371c      	adds	r7, #28
 8009644:	46bd      	mov	sp, r7
 8009646:	bd90      	pop	{r4, r7, pc}

08009648 <drawRoundRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8009648:	b590      	push	{r4, r7, lr}
 800964a:	b087      	sub	sp, #28
 800964c:	af02      	add	r7, sp, #8
 800964e:	4604      	mov	r4, r0
 8009650:	4608      	mov	r0, r1
 8009652:	4611      	mov	r1, r2
 8009654:	461a      	mov	r2, r3
 8009656:	4623      	mov	r3, r4
 8009658:	80fb      	strh	r3, [r7, #6]
 800965a:	4603      	mov	r3, r0
 800965c:	80bb      	strh	r3, [r7, #4]
 800965e:	460b      	mov	r3, r1
 8009660:	807b      	strh	r3, [r7, #2]
 8009662:	4613      	mov	r3, r2
 8009664:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8009666:	f9b7 2000 	ldrsh.w	r2, [r7]
 800966a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800966e:	4293      	cmp	r3, r2
 8009670:	bfa8      	it	ge
 8009672:	4613      	movge	r3, r2
 8009674:	b21b      	sxth	r3, r3
 8009676:	0fda      	lsrs	r2, r3, #31
 8009678:	4413      	add	r3, r2
 800967a:	105b      	asrs	r3, r3, #1
 800967c:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 800967e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009682:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009686:	429a      	cmp	r2, r3
 8009688:	dd01      	ble.n	800968e <drawRoundRect+0x46>
 800968a:	89fb      	ldrh	r3, [r7, #14]
 800968c:	843b      	strh	r3, [r7, #32]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 800968e:	88fa      	ldrh	r2, [r7, #6]
 8009690:	8c3b      	ldrh	r3, [r7, #32]
 8009692:	4413      	add	r3, r2
 8009694:	b29b      	uxth	r3, r3
 8009696:	b218      	sxth	r0, r3
 8009698:	887a      	ldrh	r2, [r7, #2]
 800969a:	8c3b      	ldrh	r3, [r7, #32]
 800969c:	005b      	lsls	r3, r3, #1
 800969e:	b29b      	uxth	r3, r3
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	b21a      	sxth	r2, r3
 80096a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096a8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80096ac:	f7ff fda3 	bl	80091f6 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 80096b0:	88fa      	ldrh	r2, [r7, #6]
 80096b2:	8c3b      	ldrh	r3, [r7, #32]
 80096b4:	4413      	add	r3, r2
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	b218      	sxth	r0, r3
 80096ba:	88ba      	ldrh	r2, [r7, #4]
 80096bc:	883b      	ldrh	r3, [r7, #0]
 80096be:	4413      	add	r3, r2
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	3b01      	subs	r3, #1
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	b219      	sxth	r1, r3
 80096c8:	887a      	ldrh	r2, [r7, #2]
 80096ca:	8c3b      	ldrh	r3, [r7, #32]
 80096cc:	005b      	lsls	r3, r3, #1
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	b21a      	sxth	r2, r3
 80096d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096d8:	f7ff fd8d 	bl	80091f6 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 80096dc:	88ba      	ldrh	r2, [r7, #4]
 80096de:	8c3b      	ldrh	r3, [r7, #32]
 80096e0:	4413      	add	r3, r2
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	b219      	sxth	r1, r3
 80096e6:	883a      	ldrh	r2, [r7, #0]
 80096e8:	8c3b      	ldrh	r3, [r7, #32]
 80096ea:	005b      	lsls	r3, r3, #1
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	b21a      	sxth	r2, r3
 80096f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096f6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80096fa:	f7ff fd57 	bl	80091ac <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80096fe:	88fa      	ldrh	r2, [r7, #6]
 8009700:	887b      	ldrh	r3, [r7, #2]
 8009702:	4413      	add	r3, r2
 8009704:	b29b      	uxth	r3, r3
 8009706:	3b01      	subs	r3, #1
 8009708:	b29b      	uxth	r3, r3
 800970a:	b218      	sxth	r0, r3
 800970c:	88ba      	ldrh	r2, [r7, #4]
 800970e:	8c3b      	ldrh	r3, [r7, #32]
 8009710:	4413      	add	r3, r2
 8009712:	b29b      	uxth	r3, r3
 8009714:	b219      	sxth	r1, r3
 8009716:	883a      	ldrh	r2, [r7, #0]
 8009718:	8c3b      	ldrh	r3, [r7, #32]
 800971a:	005b      	lsls	r3, r3, #1
 800971c:	b29b      	uxth	r3, r3
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	b29b      	uxth	r3, r3
 8009722:	b21a      	sxth	r2, r3
 8009724:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009726:	f7ff fd41 	bl	80091ac <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 800972a:	88fa      	ldrh	r2, [r7, #6]
 800972c:	8c3b      	ldrh	r3, [r7, #32]
 800972e:	4413      	add	r3, r2
 8009730:	b29b      	uxth	r3, r3
 8009732:	b218      	sxth	r0, r3
 8009734:	88ba      	ldrh	r2, [r7, #4]
 8009736:	8c3b      	ldrh	r3, [r7, #32]
 8009738:	4413      	add	r3, r2
 800973a:	b29b      	uxth	r3, r3
 800973c:	b219      	sxth	r1, r3
 800973e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009742:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	2301      	movs	r3, #1
 8009748:	f7ff fddc 	bl	8009304 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 800974c:	88fa      	ldrh	r2, [r7, #6]
 800974e:	887b      	ldrh	r3, [r7, #2]
 8009750:	4413      	add	r3, r2
 8009752:	b29a      	uxth	r2, r3
 8009754:	8c3b      	ldrh	r3, [r7, #32]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	b29b      	uxth	r3, r3
 800975a:	3b01      	subs	r3, #1
 800975c:	b29b      	uxth	r3, r3
 800975e:	b218      	sxth	r0, r3
 8009760:	88ba      	ldrh	r2, [r7, #4]
 8009762:	8c3b      	ldrh	r3, [r7, #32]
 8009764:	4413      	add	r3, r2
 8009766:	b29b      	uxth	r3, r3
 8009768:	b219      	sxth	r1, r3
 800976a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800976e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	2302      	movs	r3, #2
 8009774:	f7ff fdc6 	bl	8009304 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8009778:	88fa      	ldrh	r2, [r7, #6]
 800977a:	887b      	ldrh	r3, [r7, #2]
 800977c:	4413      	add	r3, r2
 800977e:	b29a      	uxth	r2, r3
 8009780:	8c3b      	ldrh	r3, [r7, #32]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	b29b      	uxth	r3, r3
 8009786:	3b01      	subs	r3, #1
 8009788:	b29b      	uxth	r3, r3
 800978a:	b218      	sxth	r0, r3
 800978c:	88ba      	ldrh	r2, [r7, #4]
 800978e:	883b      	ldrh	r3, [r7, #0]
 8009790:	4413      	add	r3, r2
 8009792:	b29a      	uxth	r2, r3
 8009794:	8c3b      	ldrh	r3, [r7, #32]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	b29b      	uxth	r3, r3
 800979a:	3b01      	subs	r3, #1
 800979c:	b29b      	uxth	r3, r3
 800979e:	b219      	sxth	r1, r3
 80097a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80097a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	2304      	movs	r3, #4
 80097aa:	f7ff fdab 	bl	8009304 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80097ae:	88fa      	ldrh	r2, [r7, #6]
 80097b0:	8c3b      	ldrh	r3, [r7, #32]
 80097b2:	4413      	add	r3, r2
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	b218      	sxth	r0, r3
 80097b8:	88ba      	ldrh	r2, [r7, #4]
 80097ba:	883b      	ldrh	r3, [r7, #0]
 80097bc:	4413      	add	r3, r2
 80097be:	b29a      	uxth	r2, r3
 80097c0:	8c3b      	ldrh	r3, [r7, #32]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	3b01      	subs	r3, #1
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	b219      	sxth	r1, r3
 80097cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80097d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	2308      	movs	r3, #8
 80097d6:	f7ff fd95 	bl	8009304 <drawCircleHelper>
}
 80097da:	bf00      	nop
 80097dc:	3714      	adds	r7, #20
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd90      	pop	{r4, r7, pc}

080097e2 <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80097e2:	b590      	push	{r4, r7, lr}
 80097e4:	b087      	sub	sp, #28
 80097e6:	af02      	add	r7, sp, #8
 80097e8:	4604      	mov	r4, r0
 80097ea:	4608      	mov	r0, r1
 80097ec:	4611      	mov	r1, r2
 80097ee:	461a      	mov	r2, r3
 80097f0:	4623      	mov	r3, r4
 80097f2:	80fb      	strh	r3, [r7, #6]
 80097f4:	4603      	mov	r3, r0
 80097f6:	80bb      	strh	r3, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	807b      	strh	r3, [r7, #2]
 80097fc:	4613      	mov	r3, r2
 80097fe:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8009800:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009804:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009808:	4293      	cmp	r3, r2
 800980a:	bfa8      	it	ge
 800980c:	4613      	movge	r3, r2
 800980e:	b21b      	sxth	r3, r3
 8009810:	0fda      	lsrs	r2, r3, #31
 8009812:	4413      	add	r3, r2
 8009814:	105b      	asrs	r3, r3, #1
 8009816:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8009818:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800981c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009820:	429a      	cmp	r2, r3
 8009822:	dd01      	ble.n	8009828 <fillRoundRect+0x46>
 8009824:	89fb      	ldrh	r3, [r7, #14]
 8009826:	843b      	strh	r3, [r7, #32]
    // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 8009828:	88fa      	ldrh	r2, [r7, #6]
 800982a:	8c3b      	ldrh	r3, [r7, #32]
 800982c:	4413      	add	r3, r2
 800982e:	b29b      	uxth	r3, r3
 8009830:	b218      	sxth	r0, r3
 8009832:	887a      	ldrh	r2, [r7, #2]
 8009834:	8c3b      	ldrh	r3, [r7, #32]
 8009836:	005b      	lsls	r3, r3, #1
 8009838:	b29b      	uxth	r3, r3
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	b29b      	uxth	r3, r3
 800983e:	b21a      	sxth	r2, r3
 8009840:	f9b7 4000 	ldrsh.w	r4, [r7]
 8009844:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009848:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	4623      	mov	r3, r4
 800984e:	f7ff fbda 	bl	8009006 <fillRect>
    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8009852:	88fa      	ldrh	r2, [r7, #6]
 8009854:	887b      	ldrh	r3, [r7, #2]
 8009856:	4413      	add	r3, r2
 8009858:	b29a      	uxth	r2, r3
 800985a:	8c3b      	ldrh	r3, [r7, #32]
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	b29b      	uxth	r3, r3
 8009860:	3b01      	subs	r3, #1
 8009862:	b29b      	uxth	r3, r3
 8009864:	b218      	sxth	r0, r3
 8009866:	88ba      	ldrh	r2, [r7, #4]
 8009868:	8c3b      	ldrh	r3, [r7, #32]
 800986a:	4413      	add	r3, r2
 800986c:	b29b      	uxth	r3, r3
 800986e:	b219      	sxth	r1, r3
 8009870:	883a      	ldrh	r2, [r7, #0]
 8009872:	8c3b      	ldrh	r3, [r7, #32]
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	b29b      	uxth	r3, r3
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	b29b      	uxth	r3, r3
 800987c:	3b01      	subs	r3, #1
 800987e:	b29b      	uxth	r3, r3
 8009880:	b21b      	sxth	r3, r3
 8009882:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8009886:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009888:	9201      	str	r2, [sp, #4]
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	2301      	movs	r3, #1
 800988e:	4622      	mov	r2, r4
 8009890:	f7ff fe0c 	bl	80094ac <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8009894:	88fa      	ldrh	r2, [r7, #6]
 8009896:	8c3b      	ldrh	r3, [r7, #32]
 8009898:	4413      	add	r3, r2
 800989a:	b29b      	uxth	r3, r3
 800989c:	b218      	sxth	r0, r3
 800989e:	88ba      	ldrh	r2, [r7, #4]
 80098a0:	8c3b      	ldrh	r3, [r7, #32]
 80098a2:	4413      	add	r3, r2
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	b219      	sxth	r1, r3
 80098a8:	883a      	ldrh	r2, [r7, #0]
 80098aa:	8c3b      	ldrh	r3, [r7, #32]
 80098ac:	005b      	lsls	r3, r3, #1
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	3b01      	subs	r3, #1
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	b21b      	sxth	r3, r3
 80098ba:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80098be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80098c0:	9201      	str	r2, [sp, #4]
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	2302      	movs	r3, #2
 80098c6:	4622      	mov	r2, r4
 80098c8:	f7ff fdf0 	bl	80094ac <fillCircleHelper>
}
 80098cc:	bf00      	nop
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd90      	pop	{r4, r7, pc}

080098d4 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af02      	add	r7, sp, #8
 80098da:	4603      	mov	r3, r0
 80098dc:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80098de:	4b08      	ldr	r3, [pc, #32]	@ (8009900 <fillScreen+0x2c>)
 80098e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80098e4:	4b07      	ldr	r3, [pc, #28]	@ (8009904 <fillScreen+0x30>)
 80098e6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80098ea:	88fb      	ldrh	r3, [r7, #6]
 80098ec:	9300      	str	r3, [sp, #0]
 80098ee:	460b      	mov	r3, r1
 80098f0:	2100      	movs	r1, #0
 80098f2:	2000      	movs	r0, #0
 80098f4:	f7ff fb87 	bl	8009006 <fillRect>
}
 80098f8:	bf00      	nop
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	20000250 	.word	0x20000250
 8009904:	20000252 	.word	0x20000252

08009908 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8009908:	b580      	push	{r7, lr}
 800990a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800990c:	2200      	movs	r2, #0
 800990e:	2102      	movs	r1, #2
 8009910:	4802      	ldr	r0, [pc, #8]	@ (800991c <ST7735_Select+0x14>)
 8009912:	f005 fc19 	bl	800f148 <HAL_GPIO_WritePin>
}
 8009916:	bf00      	nop
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	40020000 	.word	0x40020000

08009920 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8009920:	b580      	push	{r7, lr}
 8009922:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8009924:	2201      	movs	r2, #1
 8009926:	2102      	movs	r1, #2
 8009928:	4802      	ldr	r0, [pc, #8]	@ (8009934 <ST7735_Unselect+0x14>)
 800992a:	f005 fc0d 	bl	800f148 <HAL_GPIO_WritePin>
}
 800992e:	bf00      	nop
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	40020000 	.word	0x40020000

08009938 <ST7735_Reset>:

void ST7735_Reset()
{
 8009938:	b580      	push	{r7, lr}
 800993a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800993c:	2200      	movs	r2, #0
 800993e:	2110      	movs	r1, #16
 8009940:	4806      	ldr	r0, [pc, #24]	@ (800995c <ST7735_Reset+0x24>)
 8009942:	f005 fc01 	bl	800f148 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8009946:	2005      	movs	r0, #5
 8009948:	f005 f8ba 	bl	800eac0 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800994c:	2201      	movs	r2, #1
 800994e:	2110      	movs	r1, #16
 8009950:	4802      	ldr	r0, [pc, #8]	@ (800995c <ST7735_Reset+0x24>)
 8009952:	f005 fbf9 	bl	800f148 <HAL_GPIO_WritePin>
}
 8009956:	bf00      	nop
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	40020000 	.word	0x40020000

08009960 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	4603      	mov	r3, r0
 8009968:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800996a:	2200      	movs	r2, #0
 800996c:	2110      	movs	r1, #16
 800996e:	4807      	ldr	r0, [pc, #28]	@ (800998c <ST7735_WriteCommand+0x2c>)
 8009970:	f005 fbea 	bl	800f148 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8009974:	1df9      	adds	r1, r7, #7
 8009976:	f04f 33ff 	mov.w	r3, #4294967295
 800997a:	2201      	movs	r2, #1
 800997c:	4804      	ldr	r0, [pc, #16]	@ (8009990 <ST7735_WriteCommand+0x30>)
 800997e:	f006 fa9c 	bl	800feba <HAL_SPI_Transmit>
}
 8009982:	bf00      	nop
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	40020800 	.word	0x40020800
 8009990:	200003b4 	.word	0x200003b4

08009994 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800999e:	2201      	movs	r2, #1
 80099a0:	2110      	movs	r1, #16
 80099a2:	4807      	ldr	r0, [pc, #28]	@ (80099c0 <ST7735_WriteData+0x2c>)
 80099a4:	f005 fbd0 	bl	800f148 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	f04f 33ff 	mov.w	r3, #4294967295
 80099b0:	6879      	ldr	r1, [r7, #4]
 80099b2:	4804      	ldr	r0, [pc, #16]	@ (80099c4 <ST7735_WriteData+0x30>)
 80099b4:	f006 fa81 	bl	800feba <HAL_SPI_Transmit>
}
 80099b8:	bf00      	nop
 80099ba:	3708      	adds	r7, #8
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	40020800 	.word	0x40020800
 80099c4:	200003b4 	.word	0x200003b4

080099c8 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	1c5a      	adds	r2, r3, #1
 80099d4:	607a      	str	r2, [r7, #4]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80099da:	e034      	b.n	8009a46 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	607a      	str	r2, [r7, #4]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80099e6:	7afb      	ldrb	r3, [r7, #11]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7ff ffb9 	bl	8009960 <ST7735_WriteCommand>

        numArgs = *addr++;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	1c5a      	adds	r2, r3, #1
 80099f2:	607a      	str	r2, [r7, #4]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80099f8:	7abb      	ldrb	r3, [r7, #10]
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a00:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8009a02:	7abb      	ldrb	r3, [r7, #10]
 8009a04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a08:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8009a0a:	7abb      	ldrb	r3, [r7, #10]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d008      	beq.n	8009a22 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8009a10:	7abb      	ldrb	r3, [r7, #10]
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7ff ffbd 	bl	8009994 <ST7735_WriteData>
            addr += numArgs;
 8009a1a:	7abb      	ldrb	r3, [r7, #10]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	4413      	add	r3, r2
 8009a20:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8009a22:	89bb      	ldrh	r3, [r7, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00e      	beq.n	8009a46 <DisplayInit+0x7e>
            ms = *addr++;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	1c5a      	adds	r2, r3, #1
 8009a2c:	607a      	str	r2, [r7, #4]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8009a32:	89bb      	ldrh	r3, [r7, #12]
 8009a34:	2bff      	cmp	r3, #255	@ 0xff
 8009a36:	d102      	bne.n	8009a3e <DisplayInit+0x76>
 8009a38:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8009a3c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8009a3e:	89bb      	ldrh	r3, [r7, #12]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f005 f83d 	bl	800eac0 <HAL_Delay>
    while(numCommands--) {
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
 8009a48:	1e5a      	subs	r2, r3, #1
 8009a4a:	73fa      	strb	r2, [r7, #15]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1c5      	bne.n	80099dc <DisplayInit+0x14>
        }
    }
}
 8009a50:	bf00      	nop
 8009a52:	bf00      	nop
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
	...

08009a5c <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8009a5c:	b590      	push	{r4, r7, lr}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	4604      	mov	r4, r0
 8009a64:	4608      	mov	r0, r1
 8009a66:	4611      	mov	r1, r2
 8009a68:	461a      	mov	r2, r3
 8009a6a:	4623      	mov	r3, r4
 8009a6c:	71fb      	strb	r3, [r7, #7]
 8009a6e:	4603      	mov	r3, r0
 8009a70:	71bb      	strb	r3, [r7, #6]
 8009a72:	460b      	mov	r3, r1
 8009a74:	717b      	strb	r3, [r7, #5]
 8009a76:	4613      	mov	r3, r2
 8009a78:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8009a7a:	202a      	movs	r0, #42	@ 0x2a
 8009a7c:	f7ff ff70 	bl	8009960 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8009a80:	2300      	movs	r3, #0
 8009a82:	733b      	strb	r3, [r7, #12]
 8009a84:	4b17      	ldr	r3, [pc, #92]	@ (8009ae4 <ST7735_SetAddressWindow+0x88>)
 8009a86:	781a      	ldrb	r2, [r3, #0]
 8009a88:	79fb      	ldrb	r3, [r7, #7]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	737b      	strb	r3, [r7, #13]
 8009a90:	2300      	movs	r3, #0
 8009a92:	73bb      	strb	r3, [r7, #14]
 8009a94:	4b13      	ldr	r3, [pc, #76]	@ (8009ae4 <ST7735_SetAddressWindow+0x88>)
 8009a96:	781a      	ldrb	r2, [r3, #0]
 8009a98:	797b      	ldrb	r3, [r7, #5]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8009aa0:	f107 030c 	add.w	r3, r7, #12
 8009aa4:	2104      	movs	r1, #4
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7ff ff74 	bl	8009994 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8009aac:	202b      	movs	r0, #43	@ 0x2b
 8009aae:	f7ff ff57 	bl	8009960 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8009ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ae8 <ST7735_SetAddressWindow+0x8c>)
 8009ab4:	781a      	ldrb	r2, [r3, #0]
 8009ab6:	79bb      	ldrb	r3, [r7, #6]
 8009ab8:	4413      	add	r3, r2
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8009abe:	4b0a      	ldr	r3, [pc, #40]	@ (8009ae8 <ST7735_SetAddressWindow+0x8c>)
 8009ac0:	781a      	ldrb	r2, [r3, #0]
 8009ac2:	793b      	ldrb	r3, [r7, #4]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8009aca:	f107 030c 	add.w	r3, r7, #12
 8009ace:	2104      	movs	r1, #4
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7ff ff5f 	bl	8009994 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8009ad6:	202c      	movs	r0, #44	@ 0x2c
 8009ad8:	f7ff ff42 	bl	8009960 <ST7735_WriteCommand>
}
 8009adc:	bf00      	nop
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd90      	pop	{r4, r7, pc}
 8009ae4:	20000257 	.word	0x20000257
 8009ae8:	20000258 	.word	0x20000258

08009aec <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	4603      	mov	r3, r0
 8009af4:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8009af6:	f7ff ff07 	bl	8009908 <ST7735_Select>
    ST7735_Reset();
 8009afa:	f7ff ff1d 	bl	8009938 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8009afe:	480c      	ldr	r0, [pc, #48]	@ (8009b30 <ST7735_Init+0x44>)
 8009b00:	f7ff ff62 	bl	80099c8 <DisplayInit>
    DisplayInit(init_cmds2);
 8009b04:	480b      	ldr	r0, [pc, #44]	@ (8009b34 <ST7735_Init+0x48>)
 8009b06:	f7ff ff5f 	bl	80099c8 <DisplayInit>
    DisplayInit(init_cmds3);
 8009b0a:	480b      	ldr	r0, [pc, #44]	@ (8009b38 <ST7735_Init+0x4c>)
 8009b0c:	f7ff ff5c 	bl	80099c8 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8009b10:	4b0a      	ldr	r3, [pc, #40]	@ (8009b3c <ST7735_Init+0x50>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8009b16:	4b0a      	ldr	r3, [pc, #40]	@ (8009b40 <ST7735_Init+0x54>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 f810 	bl	8009b44 <ST7735_SetRotation>
    ST7735_Unselect();
 8009b24:	f7ff fefc 	bl	8009920 <ST7735_Unselect>

}
 8009b28:	bf00      	nop
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	08018c4c 	.word	0x08018c4c
 8009b34:	08018c84 	.word	0x08018c84
 8009b38:	08018c94 	.word	0x08018c94
 8009b3c:	20000255 	.word	0x20000255
 8009b40:	20000256 	.word	0x20000256

08009b44 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8009b52:	79fb      	ldrb	r3, [r7, #7]
 8009b54:	f003 0303 	and.w	r3, r3, #3
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	4b33      	ldr	r3, [pc, #204]	@ (8009c28 <ST7735_SetRotation+0xe4>)
 8009b5c:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8009b5e:	4b32      	ldr	r3, [pc, #200]	@ (8009c28 <ST7735_SetRotation+0xe4>)
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	2b03      	cmp	r3, #3
 8009b64:	d84e      	bhi.n	8009c04 <ST7735_SetRotation+0xc0>
 8009b66:	a201      	add	r2, pc, #4	@ (adr r2, 8009b6c <ST7735_SetRotation+0x28>)
 8009b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6c:	08009b7d 	.word	0x08009b7d
 8009b70:	08009b9f 	.word	0x08009b9f
 8009b74:	08009bc1 	.word	0x08009bc1
 8009b78:	08009be3 	.word	0x08009be3
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8009b7c:	23c0      	movs	r3, #192	@ 0xc0
 8009b7e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8009b80:	4b2a      	ldr	r3, [pc, #168]	@ (8009c2c <ST7735_SetRotation+0xe8>)
 8009b82:	22a0      	movs	r2, #160	@ 0xa0
 8009b84:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8009b86:	4b2a      	ldr	r3, [pc, #168]	@ (8009c30 <ST7735_SetRotation+0xec>)
 8009b88:	2280      	movs	r2, #128	@ 0x80
 8009b8a:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8009b8c:	4b29      	ldr	r3, [pc, #164]	@ (8009c34 <ST7735_SetRotation+0xf0>)
 8009b8e:	781a      	ldrb	r2, [r3, #0]
 8009b90:	4b29      	ldr	r3, [pc, #164]	@ (8009c38 <ST7735_SetRotation+0xf4>)
 8009b92:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8009b94:	4b29      	ldr	r3, [pc, #164]	@ (8009c3c <ST7735_SetRotation+0xf8>)
 8009b96:	781a      	ldrb	r2, [r3, #0]
 8009b98:	4b29      	ldr	r3, [pc, #164]	@ (8009c40 <ST7735_SetRotation+0xfc>)
 8009b9a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8009b9c:	e032      	b.n	8009c04 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8009b9e:	23a0      	movs	r3, #160	@ 0xa0
 8009ba0:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8009ba2:	4b23      	ldr	r3, [pc, #140]	@ (8009c30 <ST7735_SetRotation+0xec>)
 8009ba4:	22a0      	movs	r2, #160	@ 0xa0
 8009ba6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8009ba8:	4b20      	ldr	r3, [pc, #128]	@ (8009c2c <ST7735_SetRotation+0xe8>)
 8009baa:	2280      	movs	r2, #128	@ 0x80
 8009bac:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8009bae:	4b21      	ldr	r3, [pc, #132]	@ (8009c34 <ST7735_SetRotation+0xf0>)
 8009bb0:	781a      	ldrb	r2, [r3, #0]
 8009bb2:	4b23      	ldr	r3, [pc, #140]	@ (8009c40 <ST7735_SetRotation+0xfc>)
 8009bb4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8009bb6:	4b21      	ldr	r3, [pc, #132]	@ (8009c3c <ST7735_SetRotation+0xf8>)
 8009bb8:	781a      	ldrb	r2, [r3, #0]
 8009bba:	4b1f      	ldr	r3, [pc, #124]	@ (8009c38 <ST7735_SetRotation+0xf4>)
 8009bbc:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8009bbe:	e021      	b.n	8009c04 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8009bc4:	4b19      	ldr	r3, [pc, #100]	@ (8009c2c <ST7735_SetRotation+0xe8>)
 8009bc6:	22a0      	movs	r2, #160	@ 0xa0
 8009bc8:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8009bca:	4b19      	ldr	r3, [pc, #100]	@ (8009c30 <ST7735_SetRotation+0xec>)
 8009bcc:	2280      	movs	r2, #128	@ 0x80
 8009bce:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8009bd0:	4b18      	ldr	r3, [pc, #96]	@ (8009c34 <ST7735_SetRotation+0xf0>)
 8009bd2:	781a      	ldrb	r2, [r3, #0]
 8009bd4:	4b18      	ldr	r3, [pc, #96]	@ (8009c38 <ST7735_SetRotation+0xf4>)
 8009bd6:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8009bd8:	4b18      	ldr	r3, [pc, #96]	@ (8009c3c <ST7735_SetRotation+0xf8>)
 8009bda:	781a      	ldrb	r2, [r3, #0]
 8009bdc:	4b18      	ldr	r3, [pc, #96]	@ (8009c40 <ST7735_SetRotation+0xfc>)
 8009bde:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8009be0:	e010      	b.n	8009c04 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8009be2:	2360      	movs	r3, #96	@ 0x60
 8009be4:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8009be6:	4b12      	ldr	r3, [pc, #72]	@ (8009c30 <ST7735_SetRotation+0xec>)
 8009be8:	22a0      	movs	r2, #160	@ 0xa0
 8009bea:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8009bec:	4b0f      	ldr	r3, [pc, #60]	@ (8009c2c <ST7735_SetRotation+0xe8>)
 8009bee:	2280      	movs	r2, #128	@ 0x80
 8009bf0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8009bf2:	4b10      	ldr	r3, [pc, #64]	@ (8009c34 <ST7735_SetRotation+0xf0>)
 8009bf4:	781a      	ldrb	r2, [r3, #0]
 8009bf6:	4b12      	ldr	r3, [pc, #72]	@ (8009c40 <ST7735_SetRotation+0xfc>)
 8009bf8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8009bfa:	4b10      	ldr	r3, [pc, #64]	@ (8009c3c <ST7735_SetRotation+0xf8>)
 8009bfc:	781a      	ldrb	r2, [r3, #0]
 8009bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8009c38 <ST7735_SetRotation+0xf4>)
 8009c00:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8009c02:	bf00      	nop
  }
  ST7735_Select();
 8009c04:	f7ff fe80 	bl	8009908 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8009c08:	2036      	movs	r0, #54	@ 0x36
 8009c0a:	f7ff fea9 	bl	8009960 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8009c0e:	f107 030f 	add.w	r3, r7, #15
 8009c12:	2101      	movs	r1, #1
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7ff febd 	bl	8009994 <ST7735_WriteData>
  ST7735_Unselect();
 8009c1a:	f7ff fe81 	bl	8009920 <ST7735_Unselect>
}
 8009c1e:	bf00      	nop
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20000254 	.word	0x20000254
 8009c2c:	20000252 	.word	0x20000252
 8009c30:	20000250 	.word	0x20000250
 8009c34:	20000255 	.word	0x20000255
 8009c38:	20000257 	.word	0x20000257
 8009c3c:	20000256 	.word	0x20000256
 8009c40:	20000258 	.word	0x20000258

08009c44 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	80fb      	strh	r3, [r7, #6]
 8009c4e:	460b      	mov	r3, r1
 8009c50:	80bb      	strh	r3, [r7, #4]
 8009c52:	4613      	mov	r3, r2
 8009c54:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8009c56:	88fb      	ldrh	r3, [r7, #6]
 8009c58:	4a17      	ldr	r2, [pc, #92]	@ (8009cb8 <ST7735_DrawPixel+0x74>)
 8009c5a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	da26      	bge.n	8009cb0 <ST7735_DrawPixel+0x6c>
 8009c62:	88bb      	ldrh	r3, [r7, #4]
 8009c64:	4a15      	ldr	r2, [pc, #84]	@ (8009cbc <ST7735_DrawPixel+0x78>)
 8009c66:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	da20      	bge.n	8009cb0 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 8009c6e:	f7ff fe4b 	bl	8009908 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8009c72:	88fb      	ldrh	r3, [r7, #6]
 8009c74:	b2d8      	uxtb	r0, r3
 8009c76:	88bb      	ldrh	r3, [r7, #4]
 8009c78:	b2d9      	uxtb	r1, r3
 8009c7a:	88fb      	ldrh	r3, [r7, #6]
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	3301      	adds	r3, #1
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	88bb      	ldrh	r3, [r7, #4]
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	3301      	adds	r3, #1
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	f7ff fee7 	bl	8009a5c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8009c8e:	887b      	ldrh	r3, [r7, #2]
 8009c90:	0a1b      	lsrs	r3, r3, #8
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	733b      	strb	r3, [r7, #12]
 8009c98:	887b      	ldrh	r3, [r7, #2]
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8009c9e:	f107 030c 	add.w	r3, r7, #12
 8009ca2:	2102      	movs	r1, #2
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7ff fe75 	bl	8009994 <ST7735_WriteData>

    ST7735_Unselect();
 8009caa:	f7ff fe39 	bl	8009920 <ST7735_Unselect>
 8009cae:	e000      	b.n	8009cb2 <ST7735_DrawPixel+0x6e>
        return;
 8009cb0:	bf00      	nop
}
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	20000250 	.word	0x20000250
 8009cbc:	20000252 	.word	0x20000252

08009cc0 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8009cc0:	b082      	sub	sp, #8
 8009cc2:	b590      	push	{r4, r7, lr}
 8009cc4:	b089      	sub	sp, #36	@ 0x24
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cca:	4603      	mov	r3, r0
 8009ccc:	80fb      	strh	r3, [r7, #6]
 8009cce:	460b      	mov	r3, r1
 8009cd0:	80bb      	strh	r3, [r7, #4]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8009cd6:	88fb      	ldrh	r3, [r7, #6]
 8009cd8:	b2d8      	uxtb	r0, r3
 8009cda:	88bb      	ldrh	r3, [r7, #4]
 8009cdc:	b2d9      	uxtb	r1, r3
 8009cde:	88fb      	ldrh	r3, [r7, #6]
 8009ce0:	b2da      	uxtb	r2, r3
 8009ce2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009ce6:	4413      	add	r3, r2
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	3b01      	subs	r3, #1
 8009cec:	b2dc      	uxtb	r4, r3
 8009cee:	88bb      	ldrh	r3, [r7, #4]
 8009cf0:	b2da      	uxtb	r2, r3
 8009cf2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009cf6:	4413      	add	r3, r2
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	4622      	mov	r2, r4
 8009d00:	f7ff feac 	bl	8009a5c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8009d04:	2300      	movs	r3, #0
 8009d06:	61fb      	str	r3, [r7, #28]
 8009d08:	e043      	b.n	8009d92 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8009d0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d0c:	78fb      	ldrb	r3, [r7, #3]
 8009d0e:	3b20      	subs	r3, #32
 8009d10:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8009d14:	fb01 f303 	mul.w	r3, r1, r3
 8009d18:	4619      	mov	r1, r3
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	440b      	add	r3, r1
 8009d1e:	005b      	lsls	r3, r3, #1
 8009d20:	4413      	add	r3, r2
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8009d26:	2300      	movs	r3, #0
 8009d28:	61bb      	str	r3, [r7, #24]
 8009d2a:	e029      	b.n	8009d80 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8009d2c:	697a      	ldr	r2, [r7, #20]
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	fa02 f303 	lsl.w	r3, r2, r3
 8009d34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00e      	beq.n	8009d5a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8009d3c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009d3e:	0a1b      	lsrs	r3, r3, #8
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	743b      	strb	r3, [r7, #16]
 8009d46:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8009d4c:	f107 0310 	add.w	r3, r7, #16
 8009d50:	2102      	movs	r1, #2
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7ff fe1e 	bl	8009994 <ST7735_WriteData>
 8009d58:	e00f      	b.n	8009d7a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8009d5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009d5e:	0a1b      	lsrs	r3, r3, #8
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	733b      	strb	r3, [r7, #12]
 8009d66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8009d6e:	f107 030c 	add.w	r3, r7, #12
 8009d72:	2102      	movs	r1, #2
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7ff fe0d 	bl	8009994 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	61bb      	str	r3, [r7, #24]
 8009d80:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009d84:	461a      	mov	r2, r3
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d3cf      	bcc.n	8009d2c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	61fb      	str	r3, [r7, #28]
 8009d92:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009d96:	461a      	mov	r2, r3
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d3b5      	bcc.n	8009d0a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8009d9e:	bf00      	nop
 8009da0:	bf00      	nop
 8009da2:	3724      	adds	r7, #36	@ 0x24
 8009da4:	46bd      	mov	sp, r7
 8009da6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009daa:	b002      	add	sp, #8
 8009dac:	4770      	bx	lr
	...

08009db0 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8009db0:	b082      	sub	sp, #8
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b086      	sub	sp, #24
 8009db6:	af04      	add	r7, sp, #16
 8009db8:	603a      	str	r2, [r7, #0]
 8009dba:	617b      	str	r3, [r7, #20]
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	80fb      	strh	r3, [r7, #6]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8009dc4:	f7ff fda0 	bl	8009908 <ST7735_Select>

    while(*str) {
 8009dc8:	e033      	b.n	8009e32 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8009dca:	88fb      	ldrh	r3, [r7, #6]
 8009dcc:	7d3a      	ldrb	r2, [r7, #20]
 8009dce:	4413      	add	r3, r2
 8009dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8009e50 <ST7735_WriteString+0xa0>)
 8009dd2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	db16      	blt.n	8009e08 <ST7735_WriteString+0x58>
            x = 0;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8009dde:	7d7b      	ldrb	r3, [r7, #21]
 8009de0:	461a      	mov	r2, r3
 8009de2:	88bb      	ldrh	r3, [r7, #4]
 8009de4:	4413      	add	r3, r2
 8009de6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8009de8:	88bb      	ldrh	r3, [r7, #4]
 8009dea:	7d7a      	ldrb	r2, [r7, #21]
 8009dec:	4413      	add	r3, r2
 8009dee:	4a19      	ldr	r2, [pc, #100]	@ (8009e54 <ST7735_WriteString+0xa4>)
 8009df0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009df4:	4293      	cmp	r3, r2
 8009df6:	da21      	bge.n	8009e3c <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b20      	cmp	r3, #32
 8009dfe:	d103      	bne.n	8009e08 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	3301      	adds	r3, #1
 8009e04:	603b      	str	r3, [r7, #0]
                continue;
 8009e06:	e014      	b.n	8009e32 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	781a      	ldrb	r2, [r3, #0]
 8009e0c:	88b9      	ldrh	r1, [r7, #4]
 8009e0e:	88f8      	ldrh	r0, [r7, #6]
 8009e10:	8c3b      	ldrh	r3, [r7, #32]
 8009e12:	9302      	str	r3, [sp, #8]
 8009e14:	8bbb      	ldrh	r3, [r7, #28]
 8009e16:	9301      	str	r3, [sp, #4]
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	f7ff ff4f 	bl	8009cc0 <ST7735_WriteChar>
        x += font.width;
 8009e22:	7d3b      	ldrb	r3, [r7, #20]
 8009e24:	461a      	mov	r2, r3
 8009e26:	88fb      	ldrh	r3, [r7, #6]
 8009e28:	4413      	add	r3, r2
 8009e2a:	80fb      	strh	r3, [r7, #6]
        str++;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	603b      	str	r3, [r7, #0]
    while(*str) {
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1c7      	bne.n	8009dca <ST7735_WriteString+0x1a>
 8009e3a:	e000      	b.n	8009e3e <ST7735_WriteString+0x8e>
                break;
 8009e3c:	bf00      	nop
    }

    ST7735_Unselect();
 8009e3e:	f7ff fd6f 	bl	8009920 <ST7735_Unselect>
}
 8009e42:	bf00      	nop
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e4c:	b002      	add	sp, #8
 8009e4e:	4770      	bx	lr
 8009e50:	20000250 	.word	0x20000250
 8009e54:	20000252 	.word	0x20000252

08009e58 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8009e58:	b590      	push	{r4, r7, lr}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	4604      	mov	r4, r0
 8009e60:	4608      	mov	r0, r1
 8009e62:	4611      	mov	r1, r2
 8009e64:	461a      	mov	r2, r3
 8009e66:	4623      	mov	r3, r4
 8009e68:	80fb      	strh	r3, [r7, #6]
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	80bb      	strh	r3, [r7, #4]
 8009e6e:	460b      	mov	r3, r1
 8009e70:	807b      	strh	r3, [r7, #2]
 8009e72:	4613      	mov	r3, r2
 8009e74:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8009e76:	88fb      	ldrh	r3, [r7, #6]
 8009e78:	4a37      	ldr	r2, [pc, #220]	@ (8009f58 <ST7735_FillRectangle+0x100>)
 8009e7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	da66      	bge.n	8009f50 <ST7735_FillRectangle+0xf8>
 8009e82:	88bb      	ldrh	r3, [r7, #4]
 8009e84:	4a35      	ldr	r2, [pc, #212]	@ (8009f5c <ST7735_FillRectangle+0x104>)
 8009e86:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	da60      	bge.n	8009f50 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8009e8e:	88fa      	ldrh	r2, [r7, #6]
 8009e90:	887b      	ldrh	r3, [r7, #2]
 8009e92:	4413      	add	r3, r2
 8009e94:	4a30      	ldr	r2, [pc, #192]	@ (8009f58 <ST7735_FillRectangle+0x100>)
 8009e96:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	dd06      	ble.n	8009eac <ST7735_FillRectangle+0x54>
 8009e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8009f58 <ST7735_FillRectangle+0x100>)
 8009ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	88fb      	ldrh	r3, [r7, #6]
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8009eac:	88ba      	ldrh	r2, [r7, #4]
 8009eae:	883b      	ldrh	r3, [r7, #0]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8009f5c <ST7735_FillRectangle+0x104>)
 8009eb4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	dd06      	ble.n	8009eca <ST7735_FillRectangle+0x72>
 8009ebc:	4b27      	ldr	r3, [pc, #156]	@ (8009f5c <ST7735_FillRectangle+0x104>)
 8009ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	88bb      	ldrh	r3, [r7, #4]
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8009eca:	f7ff fd1d 	bl	8009908 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8009ece:	88fb      	ldrh	r3, [r7, #6]
 8009ed0:	b2d8      	uxtb	r0, r3
 8009ed2:	88bb      	ldrh	r3, [r7, #4]
 8009ed4:	b2d9      	uxtb	r1, r3
 8009ed6:	88fb      	ldrh	r3, [r7, #6]
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	887b      	ldrh	r3, [r7, #2]
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	4413      	add	r3, r2
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	b2dc      	uxtb	r4, r3
 8009ee6:	88bb      	ldrh	r3, [r7, #4]
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	883b      	ldrh	r3, [r7, #0]
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	4413      	add	r3, r2
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	4622      	mov	r2, r4
 8009ef8:	f7ff fdb0 	bl	8009a5c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8009efc:	8c3b      	ldrh	r3, [r7, #32]
 8009efe:	0a1b      	lsrs	r3, r3, #8
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	733b      	strb	r3, [r7, #12]
 8009f06:	8c3b      	ldrh	r3, [r7, #32]
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	2110      	movs	r1, #16
 8009f10:	4813      	ldr	r0, [pc, #76]	@ (8009f60 <ST7735_FillRectangle+0x108>)
 8009f12:	f005 f919 	bl	800f148 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8009f16:	883b      	ldrh	r3, [r7, #0]
 8009f18:	80bb      	strh	r3, [r7, #4]
 8009f1a:	e013      	b.n	8009f44 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8009f1c:	887b      	ldrh	r3, [r7, #2]
 8009f1e:	80fb      	strh	r3, [r7, #6]
 8009f20:	e00a      	b.n	8009f38 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8009f22:	f107 010c 	add.w	r1, r7, #12
 8009f26:	f04f 33ff 	mov.w	r3, #4294967295
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	480d      	ldr	r0, [pc, #52]	@ (8009f64 <ST7735_FillRectangle+0x10c>)
 8009f2e:	f005 ffc4 	bl	800feba <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8009f32:	88fb      	ldrh	r3, [r7, #6]
 8009f34:	3b01      	subs	r3, #1
 8009f36:	80fb      	strh	r3, [r7, #6]
 8009f38:	88fb      	ldrh	r3, [r7, #6]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1f1      	bne.n	8009f22 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8009f3e:	88bb      	ldrh	r3, [r7, #4]
 8009f40:	3b01      	subs	r3, #1
 8009f42:	80bb      	strh	r3, [r7, #4]
 8009f44:	88bb      	ldrh	r3, [r7, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1e8      	bne.n	8009f1c <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8009f4a:	f7ff fce9 	bl	8009920 <ST7735_Unselect>
 8009f4e:	e000      	b.n	8009f52 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8009f50:	bf00      	nop
}
 8009f52:	3714      	adds	r7, #20
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd90      	pop	{r4, r7, pc}
 8009f58:	20000250 	.word	0x20000250
 8009f5c:	20000252 	.word	0x20000252
 8009f60:	40020800 	.word	0x40020800
 8009f64:	200003b4 	.word	0x200003b4

08009f68 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <case_insensitive_strcmp+0x16>
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e056      	b.n	800a030 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d10d      	bne.n	8009fa6 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	e050      	b.n	800a030 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d101      	bne.n	8009f9a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8009f96:	2300      	movs	r3, #0
 8009f98:	e04a      	b.n	800a030 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	607b      	str	r3, [r7, #4]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	603b      	str	r3, [r7, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	73fb      	strb	r3, [r7, #15]
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	4a22      	ldr	r2, [pc, #136]	@ (800a03c <case_insensitive_strcmp+0xd4>)
 8009fb2:	4413      	add	r3, r2
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	f003 0303 	and.w	r3, r3, #3
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d103      	bne.n	8009fc6 <case_insensitive_strcmp+0x5e>
 8009fbe:	7bfb      	ldrb	r3, [r7, #15]
 8009fc0:	f103 0220 	add.w	r2, r3, #32
 8009fc4:	e000      	b.n	8009fc8 <case_insensitive_strcmp+0x60>
 8009fc6:	7bfa      	ldrb	r2, [r7, #15]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	73bb      	strb	r3, [r7, #14]
 8009fce:	7bbb      	ldrb	r3, [r7, #14]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	491a      	ldr	r1, [pc, #104]	@ (800a03c <case_insensitive_strcmp+0xd4>)
 8009fd4:	440b      	add	r3, r1
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	f003 0303 	and.w	r3, r3, #3
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d102      	bne.n	8009fe6 <case_insensitive_strcmp+0x7e>
 8009fe0:	7bbb      	ldrb	r3, [r7, #14]
 8009fe2:	3320      	adds	r3, #32
 8009fe4:	e000      	b.n	8009fe8 <case_insensitive_strcmp+0x80>
 8009fe6:	7bbb      	ldrb	r3, [r7, #14]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d0d0      	beq.n	8009f8e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	737b      	strb	r3, [r7, #13]
 8009ff2:	7b7b      	ldrb	r3, [r7, #13]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	4a11      	ldr	r2, [pc, #68]	@ (800a03c <case_insensitive_strcmp+0xd4>)
 8009ff8:	4413      	add	r3, r2
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	f003 0303 	and.w	r3, r3, #3
 800a000:	2b01      	cmp	r3, #1
 800a002:	d103      	bne.n	800a00c <case_insensitive_strcmp+0xa4>
 800a004:	7b7b      	ldrb	r3, [r7, #13]
 800a006:	f103 0220 	add.w	r2, r3, #32
 800a00a:	e000      	b.n	800a00e <case_insensitive_strcmp+0xa6>
 800a00c:	7b7a      	ldrb	r2, [r7, #13]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	733b      	strb	r3, [r7, #12]
 800a014:	7b3b      	ldrb	r3, [r7, #12]
 800a016:	3301      	adds	r3, #1
 800a018:	4908      	ldr	r1, [pc, #32]	@ (800a03c <case_insensitive_strcmp+0xd4>)
 800a01a:	440b      	add	r3, r1
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	f003 0303 	and.w	r3, r3, #3
 800a022:	2b01      	cmp	r3, #1
 800a024:	d102      	bne.n	800a02c <case_insensitive_strcmp+0xc4>
 800a026:	7b3b      	ldrb	r3, [r7, #12]
 800a028:	3320      	adds	r3, #32
 800a02a:	e000      	b.n	800a02e <case_insensitive_strcmp+0xc6>
 800a02c:	7b3b      	ldrb	r3, [r7, #12]
 800a02e:	1ad3      	subs	r3, r2, r3
}
 800a030:	4618      	mov	r0, r3
 800a032:	3714      	adds	r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	0801a970 	.word	0x0801a970

0800a040 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 800a04e:	2300      	movs	r3, #0
 800a050:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <cJSON_strdup+0x1c>
    {
        return NULL;
 800a058:	2300      	movs	r3, #0
 800a05a:	e015      	b.n	800a088 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7fe f8e1 	bl	8008224 <strlen>
 800a062:	4603      	mov	r3, r0
 800a064:	3301      	adds	r3, #1
 800a066:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	4798      	blx	r3
 800a070:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d101      	bne.n	800a07c <cJSON_strdup+0x3c>
    {
        return NULL;
 800a078:	2300      	movs	r3, #0
 800a07a:	e005      	b.n	800a088 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	6879      	ldr	r1, [r7, #4]
 800a080:	68b8      	ldr	r0, [r7, #8]
 800a082:	f00c f91a 	bl	80162ba <memcpy>

    return copy;
 800a086:	68bb      	ldr	r3, [r7, #8]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2028      	movs	r0, #40	@ 0x28
 800a09e:	4798      	blx	r3
 800a0a0:	60f8      	str	r0, [r7, #12]
    if (node)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d004      	beq.n	800a0b2 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800a0a8:	2228      	movs	r2, #40	@ 0x28
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f00c f853 	bl	8016158 <memset>
    }

    return node;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800a0c8:	e03d      	b.n	800a146 <cJSON_Delete+0x8a>
    {
        next = item->next;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d108      	bne.n	800a0ee <cJSON_Delete+0x32>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d004      	beq.n	800a0ee <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7ff ffe7 	bl	800a0bc <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10c      	bne.n	800a114 <cJSON_Delete+0x58>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d008      	beq.n	800a114 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 800a102:	4b15      	ldr	r3, [pc, #84]	@ (800a158 <cJSON_Delete+0x9c>)
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	6912      	ldr	r2, [r2, #16]
 800a10a:	4610      	mov	r0, r2
 800a10c:	4798      	blx	r3
            item->valuestring = NULL;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10c      	bne.n	800a13a <cJSON_Delete+0x7e>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6a1b      	ldr	r3, [r3, #32]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d008      	beq.n	800a13a <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 800a128:	4b0b      	ldr	r3, [pc, #44]	@ (800a158 <cJSON_Delete+0x9c>)
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	6a12      	ldr	r2, [r2, #32]
 800a130:	4610      	mov	r0, r2
 800a132:	4798      	blx	r3
            item->string = NULL;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 800a13a:	4b07      	ldr	r3, [pc, #28]	@ (800a158 <cJSON_Delete+0x9c>)
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	4798      	blx	r3
        item = next;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1be      	bne.n	800a0ca <cJSON_Delete+0xe>
    }
}
 800a14c:	bf00      	nop
 800a14e:	bf00      	nop
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	20000000 	.word	0x20000000

0800a15c <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800a15c:	b480      	push	{r7}
 800a15e:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800a160:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800a162:	4618      	mov	r0, r3
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	0000      	movs	r0, r0
	...

0800a170 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b098      	sub	sp, #96	@ 0x60
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
    double number = 0;
 800a17a:	f04f 0200 	mov.w	r2, #0
 800a17e:	f04f 0300 	mov.w	r3, #0
 800a182:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 800a186:	2300      	movs	r3, #0
 800a188:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800a18a:	f7ff ffe7 	bl	800a15c <get_decimal_point>
 800a18e:	4603      	mov	r3, r0
 800a190:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800a194:	2300      	movs	r3, #0
 800a196:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d003      	beq.n	800a1a6 <parse_number+0x36>
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <parse_number+0x3a>
    {
        return false;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	e0a0      	b.n	800a2ec <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1ae:	e03d      	b.n	800a22c <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	6899      	ldr	r1, [r3, #8]
 800a1b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1ba:	440b      	add	r3, r1
 800a1bc:	4413      	add	r3, r2
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	2b45      	cmp	r3, #69	@ 0x45
 800a1c2:	dc17      	bgt.n	800a1f4 <parse_number+0x84>
 800a1c4:	2b2b      	cmp	r3, #43	@ 0x2b
 800a1c6:	db40      	blt.n	800a24a <parse_number+0xda>
 800a1c8:	3b2b      	subs	r3, #43	@ 0x2b
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	409a      	lsls	r2, r3
 800a1ce:	4b4c      	ldr	r3, [pc, #304]	@ (800a300 <parse_number+0x190>)
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	bf14      	ite	ne
 800a1d6:	2301      	movne	r3, #1
 800a1d8:	2300      	moveq	r3, #0
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10b      	bne.n	800a1f8 <parse_number+0x88>
 800a1e0:	f002 0308 	and.w	r3, r2, #8
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	bf14      	ite	ne
 800a1e8:	2301      	movne	r3, #1
 800a1ea:	2300      	moveq	r3, #0
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d111      	bne.n	800a216 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800a1f2:	e02a      	b.n	800a24a <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800a1f4:	2b65      	cmp	r3, #101	@ 0x65
 800a1f6:	d128      	bne.n	800a24a <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	6899      	ldr	r1, [r3, #8]
 800a200:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a202:	440b      	add	r3, r1
 800a204:	4413      	add	r3, r2
 800a206:	7819      	ldrb	r1, [r3, #0]
 800a208:	f107 0208 	add.w	r2, r7, #8
 800a20c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a20e:	4413      	add	r3, r2
 800a210:	460a      	mov	r2, r1
 800a212:	701a      	strb	r2, [r3, #0]
                break;
 800a214:	e007      	b.n	800a226 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800a216:	f107 0208 	add.w	r2, r7, #8
 800a21a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a21c:	4413      	add	r3, r2
 800a21e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800a222:	701a      	strb	r2, [r3, #0]
                break;
 800a224:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800a226:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a228:	3301      	adds	r3, #1
 800a22a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a22c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a22e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a230:	d80d      	bhi.n	800a24e <parse_number+0xde>
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00a      	beq.n	800a24e <parse_number+0xde>
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	689a      	ldr	r2, [r3, #8]
 800a23c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a23e:	441a      	add	r2, r3
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	429a      	cmp	r2, r3
 800a246:	d3b3      	bcc.n	800a1b0 <parse_number+0x40>
        }
    }
loop_end:
 800a248:	e001      	b.n	800a24e <parse_number+0xde>
                goto loop_end;
 800a24a:	bf00      	nop
 800a24c:	e000      	b.n	800a250 <parse_number+0xe0>
loop_end:
 800a24e:	bf00      	nop
    number_c_string[i] = '\0';
 800a250:	f107 0208 	add.w	r2, r7, #8
 800a254:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a256:	4413      	add	r3, r2
 800a258:	2200      	movs	r2, #0
 800a25a:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800a25c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a260:	f107 0308 	add.w	r3, r7, #8
 800a264:	4611      	mov	r1, r2
 800a266:	4618      	mov	r0, r3
 800a268:	f00b fcda 	bl	8015c20 <strtod>
 800a26c:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 800a270:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a272:	f107 0308 	add.w	r3, r7, #8
 800a276:	429a      	cmp	r2, r3
 800a278:	d101      	bne.n	800a27e <parse_number+0x10e>
    {
        return false; /* parse_error */
 800a27a:	2300      	movs	r3, #0
 800a27c:	e036      	b.n	800a2ec <parse_number+0x17c>
    }

    item->valuedouble = number;
 800a27e:	6879      	ldr	r1, [r7, #4]
 800a280:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a284:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800a288:	a31b      	add	r3, pc, #108	@ (adr r3, 800a2f8 <parse_number+0x188>)
 800a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a292:	f7fe fc67 	bl	8008b64 <__aeabi_dcmpge>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d004      	beq.n	800a2a6 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800a2a2:	615a      	str	r2, [r3, #20]
 800a2a4:	e015      	b.n	800a2d2 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800a2a6:	f04f 0200 	mov.w	r2, #0
 800a2aa:	4b16      	ldr	r3, [pc, #88]	@ (800a304 <parse_number+0x194>)
 800a2ac:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a2b0:	f7fe fc4e 	bl	8008b50 <__aeabi_dcmple>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d004      	beq.n	800a2c4 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a2c0:	615a      	str	r2, [r3, #20]
 800a2c2:	e006      	b.n	800a2d2 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800a2c4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a2c8:	f7fe fc76 	bl	8008bb8 <__aeabi_d2iz>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2208      	movs	r2, #8
 800a2d6:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a2de:	f107 0208 	add.w	r2, r7, #8
 800a2e2:	1a8a      	subs	r2, r1, r2
 800a2e4:	441a      	add	r2, r3
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	609a      	str	r2, [r3, #8]
    return true;
 800a2ea:	2301      	movs	r3, #1
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3760      	adds	r7, #96	@ 0x60
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	f3af 8000 	nop.w
 800a2f8:	ffc00000 	.word	0xffc00000
 800a2fc:	41dfffff 	.word	0x41dfffff
 800a300:	04007fe5 	.word	0x04007fe5
 800a304:	c1e00000 	.word	0xc1e00000

0800a308 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800a312:	2300      	movs	r3, #0
 800a314:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d003      	beq.n	800a328 <ensure+0x20>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <ensure+0x24>
    {
        return NULL;
 800a328:	2300      	movs	r3, #0
 800a32a:	e083      	b.n	800a434 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d007      	beq.n	800a344 <ensure+0x3c>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	689a      	ldr	r2, [r3, #8]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d301      	bcc.n	800a344 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800a340:	2300      	movs	r3, #0
 800a342:	e077      	b.n	800a434 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	da01      	bge.n	800a34e <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800a34a:	2300      	movs	r3, #0
 800a34c:	e072      	b.n	800a434 <ensure+0x12c>
    }

    needed += p->offset + 1;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	689a      	ldr	r2, [r3, #8]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	4413      	add	r3, r2
 800a356:	3301      	adds	r3, #1
 800a358:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	429a      	cmp	r2, r3
 800a362:	d805      	bhi.n	800a370 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	4413      	add	r3, r2
 800a36e:	e061      	b.n	800a434 <ensure+0x12c>
    }

    if (p->noalloc) {
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d001      	beq.n	800a37c <ensure+0x74>
        return NULL;
 800a378:	2300      	movs	r3, #0
 800a37a:	e05b      	b.n	800a434 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a382:	d308      	bcc.n	800a396 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	db03      	blt.n	800a392 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800a38a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a38e:	60bb      	str	r3, [r7, #8]
 800a390:	e004      	b.n	800a39c <ensure+0x94>
        }
        else
        {
            return NULL;
 800a392:	2300      	movs	r3, #0
 800a394:	e04e      	b.n	800a434 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	005b      	lsls	r3, r3, #1
 800a39a:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a1b      	ldr	r3, [r3, #32]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d018      	beq.n	800a3d6 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a1b      	ldr	r3, [r3, #32]
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	6812      	ldr	r2, [r2, #0]
 800a3ac:	68b9      	ldr	r1, [r7, #8]
 800a3ae:	4610      	mov	r0, r2
 800a3b0:	4798      	blx	r3
 800a3b2:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d132      	bne.n	800a420 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	69db      	ldr	r3, [r3, #28]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	6812      	ldr	r2, [r2, #0]
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	4798      	blx	r3
            p->length = 0;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	601a      	str	r2, [r3, #0]

            return NULL;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	e02e      	b.n	800a434 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	68b8      	ldr	r0, [r7, #8]
 800a3dc:	4798      	blx	r3
 800a3de:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d10d      	bne.n	800a402 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	69db      	ldr	r3, [r3, #28]
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	6812      	ldr	r2, [r2, #0]
 800a3ee:	4610      	mov	r0, r2
 800a3f0:	4798      	blx	r3
            p->length = 0;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]

            return NULL;
 800a3fe:	2300      	movs	r3, #0
 800a400:	e018      	b.n	800a434 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6819      	ldr	r1, [r3, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	3301      	adds	r3, #1
 800a40c:	461a      	mov	r2, r3
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f00b ff53 	bl	80162ba <memcpy>
        p->hooks.deallocate(p->buffer);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	69db      	ldr	r3, [r3, #28]
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	6812      	ldr	r2, [r2, #0]
 800a41c:	4610      	mov	r0, r2
 800a41e:	4798      	blx	r3
    }
    p->length = newsize;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	4413      	add	r3, r2
}
 800a434:	4618      	mov	r0, r3
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800a43c:	b590      	push	{r4, r7, lr}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 800a444:	2300      	movs	r3, #0
 800a446:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d013      	beq.n	800a476 <update_offset+0x3a>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00f      	beq.n	800a476 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	4413      	add	r3, r2
 800a460:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	689c      	ldr	r4, [r3, #8]
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f7fd fedc 	bl	8008224 <strlen>
 800a46c:	4603      	mov	r3, r0
 800a46e:	18e2      	adds	r2, r4, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	609a      	str	r2, [r3, #8]
 800a474:	e000      	b.n	800a478 <update_offset+0x3c>
        return;
 800a476:	bf00      	nop
}
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd90      	pop	{r4, r7, pc}
	...

0800a480 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 800a480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a484:	b087      	sub	sp, #28
 800a486:	af00      	add	r7, sp, #0
 800a488:	ed87 0b02 	vstr	d0, [r7, #8]
 800a48c:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 800a490:	68b8      	ldr	r0, [r7, #8]
 800a492:	68fe      	ldr	r6, [r7, #12]
 800a494:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	687e      	ldr	r6, [r7, #4]
 800a49c:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800a4a0:	f7fe fb6a 	bl	8008b78 <__aeabi_dcmpgt>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d004      	beq.n	800a4b4 <compare_double+0x34>
 800a4aa:	68bc      	ldr	r4, [r7, #8]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800a4b2:	e003      	b.n	800a4bc <compare_double+0x3c>
 800a4b4:	683c      	ldr	r4, [r7, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800a4bc:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 800a4c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a4c8:	f7fd ff0e 	bl	80082e8 <__aeabi_dsub>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4690      	mov	r8, r2
 800a4d2:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800a4d6:	f04f 0200 	mov.w	r2, #0
 800a4da:	4b0c      	ldr	r3, [pc, #48]	@ (800a50c <compare_double+0x8c>)
 800a4dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a4e0:	f7fe f8ba 	bl	8008658 <__aeabi_dmul>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	2101      	movs	r1, #1
 800a4ea:	460c      	mov	r4, r1
 800a4ec:	4640      	mov	r0, r8
 800a4ee:	4649      	mov	r1, r9
 800a4f0:	f7fe fb2e 	bl	8008b50 <__aeabi_dcmple>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d101      	bne.n	800a4fe <compare_double+0x7e>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	461c      	mov	r4, r3
 800a4fe:	b2e3      	uxtb	r3, r4
}
 800a500:	4618      	mov	r0, r3
 800a502:	371c      	adds	r7, #28
 800a504:	46bd      	mov	sp, r7
 800a506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a50a:	bf00      	nop
 800a50c:	3cb00000 	.word	0x3cb00000

0800a510 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 800a510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a512:	b093      	sub	sp, #76	@ 0x4c
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800a51a:	2300      	movs	r3, #0
 800a51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a524:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 800a528:	2300      	movs	r3, #0
 800a52a:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 800a52c:	2300      	movs	r3, #0
 800a52e:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 800a530:	f107 0314 	add.w	r3, r7, #20
 800a534:	2200      	movs	r2, #0
 800a536:	601a      	str	r2, [r3, #0]
 800a538:	605a      	str	r2, [r3, #4]
 800a53a:	609a      	str	r2, [r3, #8]
 800a53c:	60da      	str	r2, [r3, #12]
 800a53e:	611a      	str	r2, [r3, #16]
 800a540:	615a      	str	r2, [r3, #20]
 800a542:	831a      	strh	r2, [r3, #24]
    unsigned char decimal_point = get_decimal_point();
 800a544:	f7ff fe0a 	bl	800a15c <get_decimal_point>
 800a548:	4603      	mov	r3, r0
 800a54a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 800a54e:	f04f 0200 	mov.w	r2, #0
 800a552:	f04f 0300 	mov.w	r3, #0
 800a556:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d101      	bne.n	800a564 <print_number+0x54>
    {
        return false;
 800a560:	2300      	movs	r3, #0
 800a562:	e0b4      	b.n	800a6ce <print_number+0x1be>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800a564:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a568:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800a56c:	f7fe fb0e 	bl	8008b8c <__aeabi_dcmpun>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d121      	bne.n	800a5ba <print_number+0xaa>
 800a576:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 800a578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a57a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800a57e:	2301      	movs	r3, #1
 800a580:	461e      	mov	r6, r3
 800a582:	f04f 32ff 	mov.w	r2, #4294967295
 800a586:	4b54      	ldr	r3, [pc, #336]	@ (800a6d8 <print_number+0x1c8>)
 800a588:	4620      	mov	r0, r4
 800a58a:	4629      	mov	r1, r5
 800a58c:	f7fe fafe 	bl	8008b8c <__aeabi_dcmpun>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d10b      	bne.n	800a5ae <print_number+0x9e>
 800a596:	f04f 32ff 	mov.w	r2, #4294967295
 800a59a:	4b4f      	ldr	r3, [pc, #316]	@ (800a6d8 <print_number+0x1c8>)
 800a59c:	4620      	mov	r0, r4
 800a59e:	4629      	mov	r1, r5
 800a5a0:	f7fe fad6 	bl	8008b50 <__aeabi_dcmple>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d101      	bne.n	800a5ae <print_number+0x9e>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	461e      	mov	r6, r3
 800a5ae:	b2f3      	uxtb	r3, r6
 800a5b0:	f083 0301 	eor.w	r3, r3, #1
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d007      	beq.n	800a5ca <print_number+0xba>
    {
        length = sprintf((char*)number_buffer, "null");
 800a5ba:	f107 0314 	add.w	r3, r7, #20
 800a5be:	4947      	ldr	r1, [pc, #284]	@ (800a6dc <print_number+0x1cc>)
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f00b fca1 	bl	8015f08 <siprintf>
 800a5c6:	6478      	str	r0, [r7, #68]	@ 0x44
 800a5c8:	e03f      	b.n	800a64a <print_number+0x13a>
    }
    else if(d == (double)item->valueint)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	695b      	ldr	r3, [r3, #20]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7fd ffd8 	bl	8008584 <__aeabi_i2d>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800a5dc:	f7fe faa4 	bl	8008b28 <__aeabi_dcmpeq>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d009      	beq.n	800a5fa <print_number+0xea>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	695a      	ldr	r2, [r3, #20]
 800a5ea:	f107 0314 	add.w	r3, r7, #20
 800a5ee:	493c      	ldr	r1, [pc, #240]	@ (800a6e0 <print_number+0x1d0>)
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f00b fc89 	bl	8015f08 <siprintf>
 800a5f6:	6478      	str	r0, [r7, #68]	@ 0x44
 800a5f8:	e027      	b.n	800a64a <print_number+0x13a>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 800a5fa:	f107 0014 	add.w	r0, r7, #20
 800a5fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a602:	4938      	ldr	r1, [pc, #224]	@ (800a6e4 <print_number+0x1d4>)
 800a604:	f00b fc80 	bl	8015f08 <siprintf>
 800a608:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 800a60a:	f107 0208 	add.w	r2, r7, #8
 800a60e:	f107 0314 	add.w	r3, r7, #20
 800a612:	4935      	ldr	r1, [pc, #212]	@ (800a6e8 <print_number+0x1d8>)
 800a614:	4618      	mov	r0, r3
 800a616:	f00b fc99 	bl	8015f4c <siscanf>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d10c      	bne.n	800a63a <print_number+0x12a>
 800a620:	ed97 7b02 	vldr	d7, [r7, #8]
 800a624:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 800a628:	eeb0 0a47 	vmov.f32	s0, s14
 800a62c:	eef0 0a67 	vmov.f32	s1, s15
 800a630:	f7ff ff26 	bl	800a480 <compare_double>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d107      	bne.n	800a64a <print_number+0x13a>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 800a63a:	f107 0014 	add.w	r0, r7, #20
 800a63e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a642:	492a      	ldr	r1, [pc, #168]	@ (800a6ec <print_number+0x1dc>)
 800a644:	f00b fc60 	bl	8015f08 <siprintf>
 800a648:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800a64a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	db02      	blt.n	800a656 <print_number+0x146>
 800a650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a652:	2b19      	cmp	r3, #25
 800a654:	dd01      	ble.n	800a65a <print_number+0x14a>
    {
        return false;
 800a656:	2300      	movs	r3, #0
 800a658:	e039      	b.n	800a6ce <print_number+0x1be>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800a65a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a65c:	3301      	adds	r3, #1
 800a65e:	4619      	mov	r1, r3
 800a660:	6838      	ldr	r0, [r7, #0]
 800a662:	f7ff fe51 	bl	800a308 <ensure>
 800a666:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 800a668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d101      	bne.n	800a672 <print_number+0x162>
    {
        return false;
 800a66e:	2300      	movs	r3, #0
 800a670:	e02d      	b.n	800a6ce <print_number+0x1be>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800a672:	2300      	movs	r3, #0
 800a674:	643b      	str	r3, [r7, #64]	@ 0x40
 800a676:	e01a      	b.n	800a6ae <print_number+0x19e>
    {
        if (number_buffer[i] == decimal_point)
 800a678:	f107 0214 	add.w	r2, r7, #20
 800a67c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a67e:	4413      	add	r3, r2
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a686:	429a      	cmp	r2, r3
 800a688:	d105      	bne.n	800a696 <print_number+0x186>
        {
            output_pointer[i] = '.';
 800a68a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a68c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a68e:	4413      	add	r3, r2
 800a690:	222e      	movs	r2, #46	@ 0x2e
 800a692:	701a      	strb	r2, [r3, #0]
            continue;
 800a694:	e008      	b.n	800a6a8 <print_number+0x198>
        }

        output_pointer[i] = number_buffer[i];
 800a696:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a698:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a69a:	4413      	add	r3, r2
 800a69c:	f107 0114 	add.w	r1, r7, #20
 800a6a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6a2:	440a      	add	r2, r1
 800a6a4:	7812      	ldrb	r2, [r2, #0]
 800a6a6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800a6a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d3e0      	bcc.n	800a678 <print_number+0x168>
    }
    output_pointer[i] = '\0';
 800a6b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a6b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ba:	4413      	add	r3, r2
 800a6bc:	2200      	movs	r2, #0
 800a6be:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	689a      	ldr	r2, [r3, #8]
 800a6c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6c6:	441a      	add	r2, r3
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	609a      	str	r2, [r3, #8]

    return true;
 800a6cc:	2301      	movs	r3, #1
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	374c      	adds	r7, #76	@ 0x4c
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	7fefffff 	.word	0x7fefffff
 800a6dc:	080188cc 	.word	0x080188cc
 800a6e0:	080188d4 	.word	0x080188d4
 800a6e4:	080188d8 	.word	0x080188d8
 800a6e8:	080188e0 	.word	0x080188e0
 800a6ec:	080188e4 	.word	0x080188e4

0800a6f0 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800a700:	2300      	movs	r3, #0
 800a702:	60bb      	str	r3, [r7, #8]
 800a704:	e04c      	b.n	800a7a0 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	4413      	add	r3, r2
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2b2f      	cmp	r3, #47	@ 0x2f
 800a710:	d90f      	bls.n	800a732 <parse_hex4+0x42>
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	4413      	add	r3, r2
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	2b39      	cmp	r3, #57	@ 0x39
 800a71c:	d809      	bhi.n	800a732 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	4413      	add	r3, r2
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	461a      	mov	r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	4413      	add	r3, r2
 800a72c:	3b30      	subs	r3, #48	@ 0x30
 800a72e:	60fb      	str	r3, [r7, #12]
 800a730:	e02d      	b.n	800a78e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	4413      	add	r3, r2
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	2b40      	cmp	r3, #64	@ 0x40
 800a73c:	d90f      	bls.n	800a75e <parse_hex4+0x6e>
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	4413      	add	r3, r2
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	2b46      	cmp	r3, #70	@ 0x46
 800a748:	d809      	bhi.n	800a75e <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	4413      	add	r3, r2
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	461a      	mov	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	4413      	add	r3, r2
 800a758:	3b37      	subs	r3, #55	@ 0x37
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	e017      	b.n	800a78e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	4413      	add	r3, r2
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	2b60      	cmp	r3, #96	@ 0x60
 800a768:	d90f      	bls.n	800a78a <parse_hex4+0x9a>
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	4413      	add	r3, r2
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	2b66      	cmp	r3, #102	@ 0x66
 800a774:	d809      	bhi.n	800a78a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	4413      	add	r3, r2
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	4413      	add	r3, r2
 800a784:	3b57      	subs	r3, #87	@ 0x57
 800a786:	60fb      	str	r3, [r7, #12]
 800a788:	e001      	b.n	800a78e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800a78a:	2300      	movs	r3, #0
 800a78c:	e00c      	b.n	800a7a8 <parse_hex4+0xb8>
        }

        if (i < 3)
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	2b02      	cmp	r3, #2
 800a792:	d802      	bhi.n	800a79a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	011b      	lsls	r3, r3, #4
 800a798:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	3301      	adds	r3, #1
 800a79e:	60bb      	str	r3, [r7, #8]
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	2b03      	cmp	r3, #3
 800a7a4:	d9af      	bls.n	800a706 <parse_hex4+0x16>
        }
    }

    return h;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3714      	adds	r7, #20
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b08a      	sub	sp, #40	@ 0x28
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	2b05      	cmp	r3, #5
 800a7ec:	f340 80b7 	ble.w	800a95e <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	3302      	adds	r3, #2
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7ff ff7b 	bl	800a6f0 <parse_hex4>
 800a7fa:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800a802:	d304      	bcc.n	800a80e <utf16_literal_to_utf8+0x5a>
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800a80a:	f0c0 80aa 	bcc.w	800a962 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800a814:	d337      	bcc.n	800a886 <utf16_literal_to_utf8+0xd2>
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800a81c:	d233      	bcs.n	800a886 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800a81e:	69bb      	ldr	r3, [r7, #24]
 800a820:	3306      	adds	r3, #6
 800a822:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800a828:	230c      	movs	r3, #12
 800a82a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	1ad3      	subs	r3, r2, r3
 800a834:	2b05      	cmp	r3, #5
 800a836:	f340 8096 	ble.w	800a966 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	2b5c      	cmp	r3, #92	@ 0x5c
 800a840:	f040 8093 	bne.w	800a96a <utf16_literal_to_utf8+0x1b6>
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	3301      	adds	r3, #1
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	2b75      	cmp	r3, #117	@ 0x75
 800a84c:	f040 808d 	bne.w	800a96a <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	3302      	adds	r3, #2
 800a854:	4618      	mov	r0, r3
 800a856:	f7ff ff4b 	bl	800a6f0 <parse_hex4>
 800a85a:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800a862:	f0c0 8084 	bcc.w	800a96e <utf16_literal_to_utf8+0x1ba>
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800a86c:	d27f      	bcs.n	800a96e <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	029a      	lsls	r2, r3, #10
 800a872:	4b43      	ldr	r3, [pc, #268]	@ (800a980 <utf16_literal_to_utf8+0x1cc>)
 800a874:	4013      	ands	r3, r2
 800a876:	693a      	ldr	r2, [r7, #16]
 800a878:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a87c:	4313      	orrs	r3, r2
 800a87e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800a882:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 800a884:	e004      	b.n	800a890 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800a886:	2306      	movs	r3, #6
 800a888:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800a890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a892:	2b7f      	cmp	r3, #127	@ 0x7f
 800a894:	d803      	bhi.n	800a89e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800a896:	2301      	movs	r3, #1
 800a898:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a89c:	e01f      	b.n	800a8de <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800a89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8a4:	d206      	bcs.n	800a8b4 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800a8a6:	2302      	movs	r3, #2
 800a8a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800a8ac:	23c0      	movs	r3, #192	@ 0xc0
 800a8ae:	f887 3020 	strb.w	r3, [r7, #32]
 800a8b2:	e014      	b.n	800a8de <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8ba:	d206      	bcs.n	800a8ca <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800a8c2:	23e0      	movs	r3, #224	@ 0xe0
 800a8c4:	f887 3020 	strb.w	r3, [r7, #32]
 800a8c8:	e009      	b.n	800a8de <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8cc:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800a8d0:	d24f      	bcs.n	800a972 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800a8d2:	2304      	movs	r3, #4
 800a8d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800a8d8:	23f0      	movs	r3, #240	@ 0xf0
 800a8da:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800a8de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a8e8:	e015      	b.n	800a916 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a8f2:	b2da      	uxtb	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6819      	ldr	r1, [r3, #0]
 800a8f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a8fc:	440b      	add	r3, r1
 800a8fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a902:	b2d2      	uxtb	r2, r2
 800a904:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800a906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a908:	099b      	lsrs	r3, r3, #6
 800a90a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800a90c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a910:	3b01      	subs	r3, #1
 800a912:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a916:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1e5      	bne.n	800a8ea <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800a91e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a922:	2b01      	cmp	r3, #1
 800a924:	d909      	bls.n	800a93a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800a926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a928:	b2d9      	uxtb	r1, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a932:	430a      	orrs	r2, r1
 800a934:	b2d2      	uxtb	r2, r2
 800a936:	701a      	strb	r2, [r3, #0]
 800a938:	e007      	b.n	800a94a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800a93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a946:	b2d2      	uxtb	r2, r2
 800a948:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a952:	441a      	add	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800a958:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a95c:	e00b      	b.n	800a976 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800a95e:	bf00      	nop
 800a960:	e008      	b.n	800a974 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800a962:	bf00      	nop
 800a964:	e006      	b.n	800a974 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800a966:	bf00      	nop
 800a968:	e004      	b.n	800a974 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800a96a:	bf00      	nop
 800a96c:	e002      	b.n	800a974 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800a96e:	bf00      	nop
 800a970:	e000      	b.n	800a974 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800a972:	bf00      	nop

fail:
    return 0;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3728      	adds	r7, #40	@ 0x28
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	000ffc00 	.word	0x000ffc00

0800a984 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b08a      	sub	sp, #40	@ 0x28
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	3301      	adds	r3, #1
 800a998:	4413      	add	r3, r2
 800a99a:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	4413      	add	r3, r2
 800a9a8:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	2b22      	cmp	r3, #34	@ 0x22
 800a9c0:	f040 8103 	bne.w	800abca <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800a9cc:	e017      	b.n	800a9fe <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800a9ce:	6a3b      	ldr	r3, [r7, #32]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	2b5c      	cmp	r3, #92	@ 0x5c
 800a9d4:	d110      	bne.n	800a9f8 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800a9d6:	6a3b      	ldr	r3, [r7, #32]
 800a9d8:	1c5a      	adds	r2, r3, #1
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	f080 80f1 	bcs.w	800abce <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	61bb      	str	r3, [r7, #24]
                input_end++;
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6a3a      	ldr	r2, [r7, #32]
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	461a      	mov	r2, r3
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d203      	bcs.n	800aa18 <parse_string+0x94>
 800aa10:	6a3b      	ldr	r3, [r7, #32]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	2b22      	cmp	r3, #34	@ 0x22
 800aa16:	d1da      	bne.n	800a9ce <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	6a3a      	ldr	r2, [r7, #32]
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	461a      	mov	r2, r3
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	f080 80d3 	bcs.w	800abd2 <parse_string+0x24e>
 800aa2c:	6a3b      	ldr	r3, [r7, #32]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	2b22      	cmp	r3, #34	@ 0x22
 800aa32:	f040 80ce 	bne.w	800abd2 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	4413      	add	r3, r2
 800aa40:	6a3a      	ldr	r2, [r7, #32]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	461a      	mov	r2, r3
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	1ad3      	subs	r3, r2, r3
 800aa4a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	3201      	adds	r2, #1
 800aa54:	4610      	mov	r0, r2
 800aa56:	4798      	blx	r3
 800aa58:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 80ba 	beq.w	800abd6 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800aa66:	e094      	b.n	800ab92 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 800aa68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	2b5c      	cmp	r3, #92	@ 0x5c
 800aa6e:	d008      	beq.n	800aa82 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800aa70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa72:	1c53      	adds	r3, r2, #1
 800aa74:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	1c59      	adds	r1, r3, #1
 800aa7a:	60f9      	str	r1, [r7, #12]
 800aa7c:	7812      	ldrb	r2, [r2, #0]
 800aa7e:	701a      	strb	r2, [r3, #0]
 800aa80:	e087      	b.n	800ab92 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800aa82:	2302      	movs	r3, #2
 800aa84:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800aa86:	6a3a      	ldr	r2, [r7, #32]
 800aa88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8a:	1ad3      	subs	r3, r2, r3
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f340 80a4 	ble.w	800abda <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800aa92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa94:	3301      	adds	r3, #1
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	2b75      	cmp	r3, #117	@ 0x75
 800aa9a:	f300 80a0 	bgt.w	800abde <parse_string+0x25a>
 800aa9e:	2b5c      	cmp	r3, #92	@ 0x5c
 800aaa0:	da04      	bge.n	800aaac <parse_string+0x128>
 800aaa2:	2b22      	cmp	r3, #34	@ 0x22
 800aaa4:	d05c      	beq.n	800ab60 <parse_string+0x1dc>
 800aaa6:	2b2f      	cmp	r3, #47	@ 0x2f
 800aaa8:	d05a      	beq.n	800ab60 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800aaaa:	e098      	b.n	800abde <parse_string+0x25a>
            switch (input_pointer[1])
 800aaac:	3b5c      	subs	r3, #92	@ 0x5c
 800aaae:	2b19      	cmp	r3, #25
 800aab0:	f200 8095 	bhi.w	800abde <parse_string+0x25a>
 800aab4:	a201      	add	r2, pc, #4	@ (adr r2, 800aabc <parse_string+0x138>)
 800aab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaba:	bf00      	nop
 800aabc:	0800ab61 	.word	0x0800ab61
 800aac0:	0800abdf 	.word	0x0800abdf
 800aac4:	0800abdf 	.word	0x0800abdf
 800aac8:	0800abdf 	.word	0x0800abdf
 800aacc:	0800abdf 	.word	0x0800abdf
 800aad0:	0800abdf 	.word	0x0800abdf
 800aad4:	0800ab25 	.word	0x0800ab25
 800aad8:	0800abdf 	.word	0x0800abdf
 800aadc:	0800abdf 	.word	0x0800abdf
 800aae0:	0800abdf 	.word	0x0800abdf
 800aae4:	0800ab31 	.word	0x0800ab31
 800aae8:	0800abdf 	.word	0x0800abdf
 800aaec:	0800abdf 	.word	0x0800abdf
 800aaf0:	0800abdf 	.word	0x0800abdf
 800aaf4:	0800abdf 	.word	0x0800abdf
 800aaf8:	0800abdf 	.word	0x0800abdf
 800aafc:	0800abdf 	.word	0x0800abdf
 800ab00:	0800abdf 	.word	0x0800abdf
 800ab04:	0800ab3d 	.word	0x0800ab3d
 800ab08:	0800abdf 	.word	0x0800abdf
 800ab0c:	0800abdf 	.word	0x0800abdf
 800ab10:	0800abdf 	.word	0x0800abdf
 800ab14:	0800ab49 	.word	0x0800ab49
 800ab18:	0800abdf 	.word	0x0800abdf
 800ab1c:	0800ab55 	.word	0x0800ab55
 800ab20:	0800ab71 	.word	0x0800ab71
                    *output_pointer++ = '\b';
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	60fa      	str	r2, [r7, #12]
 800ab2a:	2208      	movs	r2, #8
 800ab2c:	701a      	strb	r2, [r3, #0]
                    break;
 800ab2e:	e02c      	b.n	800ab8a <parse_string+0x206>
                    *output_pointer++ = '\f';
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	1c5a      	adds	r2, r3, #1
 800ab34:	60fa      	str	r2, [r7, #12]
 800ab36:	220c      	movs	r2, #12
 800ab38:	701a      	strb	r2, [r3, #0]
                    break;
 800ab3a:	e026      	b.n	800ab8a <parse_string+0x206>
                    *output_pointer++ = '\n';
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	1c5a      	adds	r2, r3, #1
 800ab40:	60fa      	str	r2, [r7, #12]
 800ab42:	220a      	movs	r2, #10
 800ab44:	701a      	strb	r2, [r3, #0]
                    break;
 800ab46:	e020      	b.n	800ab8a <parse_string+0x206>
                    *output_pointer++ = '\r';
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	1c5a      	adds	r2, r3, #1
 800ab4c:	60fa      	str	r2, [r7, #12]
 800ab4e:	220d      	movs	r2, #13
 800ab50:	701a      	strb	r2, [r3, #0]
                    break;
 800ab52:	e01a      	b.n	800ab8a <parse_string+0x206>
                    *output_pointer++ = '\t';
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	1c5a      	adds	r2, r3, #1
 800ab58:	60fa      	str	r2, [r7, #12]
 800ab5a:	2209      	movs	r2, #9
 800ab5c:	701a      	strb	r2, [r3, #0]
                    break;
 800ab5e:	e014      	b.n	800ab8a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 800ab60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab62:	1c5a      	adds	r2, r3, #1
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	1c59      	adds	r1, r3, #1
 800ab68:	60f9      	str	r1, [r7, #12]
 800ab6a:	7812      	ldrb	r2, [r2, #0]
 800ab6c:	701a      	strb	r2, [r3, #0]
                    break;
 800ab6e:	e00c      	b.n	800ab8a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800ab70:	f107 030c 	add.w	r3, r7, #12
 800ab74:	461a      	mov	r2, r3
 800ab76:	6a39      	ldr	r1, [r7, #32]
 800ab78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab7a:	f7ff fe1b 	bl	800a7b4 <utf16_literal_to_utf8>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800ab82:	7dfb      	ldrb	r3, [r7, #23]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d02c      	beq.n	800abe2 <parse_string+0x25e>
                    break;
 800ab88:	bf00      	nop
            }
            input_pointer += sequence_length;
 800ab8a:	7dfb      	ldrb	r3, [r7, #23]
 800ab8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab8e:	4413      	add	r3, r2
 800ab90:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800ab92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab94:	6a3b      	ldr	r3, [r7, #32]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	f4ff af66 	bcc.w	800aa68 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2210      	movs	r2, #16
 800aba6:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	69fa      	ldr	r2, [r7, #28]
 800abac:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	6a3a      	ldr	r2, [r7, #32]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	461a      	mov	r2, r3
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	1c5a      	adds	r2, r3, #1
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	609a      	str	r2, [r3, #8]

    return true;
 800abc6:	2301      	movs	r3, #1
 800abc8:	e020      	b.n	800ac0c <parse_string+0x288>
        goto fail;
 800abca:	bf00      	nop
 800abcc:	e00a      	b.n	800abe4 <parse_string+0x260>
                    goto fail;
 800abce:	bf00      	nop
 800abd0:	e008      	b.n	800abe4 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800abd2:	bf00      	nop
 800abd4:	e006      	b.n	800abe4 <parse_string+0x260>
            goto fail; /* allocation failure */
 800abd6:	bf00      	nop
 800abd8:	e004      	b.n	800abe4 <parse_string+0x260>
                goto fail;
 800abda:	bf00      	nop
 800abdc:	e002      	b.n	800abe4 <parse_string+0x260>
                    goto fail;
 800abde:	bf00      	nop
 800abe0:	e000      	b.n	800abe4 <parse_string+0x260>
                        goto fail;
 800abe2:	bf00      	nop

fail:
    if (output != NULL)
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d005      	beq.n	800abf6 <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	695b      	ldr	r3, [r3, #20]
 800abee:	69f8      	ldr	r0, [r7, #28]
 800abf0:	4798      	blx	r3
        output = NULL;
 800abf2:	2300      	movs	r3, #0
 800abf4:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 800abf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d006      	beq.n	800ac0a <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac02:	1ad3      	subs	r3, r2, r3
 800ac04:	461a      	mov	r2, r3
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	609a      	str	r2, [r3, #8]
    }

    return false;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3728      	adds	r7, #40	@ 0x28
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b088      	sub	sp, #32
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 800ac22:	2300      	movs	r3, #0
 800ac24:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800ac26:	2300      	movs	r3, #0
 800ac28:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d101      	bne.n	800ac3c <print_string_ptr+0x28>
    {
        return false;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	e110      	b.n	800ae5e <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d111      	bne.n	800ac66 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 800ac42:	2103      	movs	r1, #3
 800ac44:	6838      	ldr	r0, [r7, #0]
 800ac46:	f7ff fb5f 	bl	800a308 <ensure>
 800ac4a:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d101      	bne.n	800ac56 <print_string_ptr+0x42>
        {
            return false;
 800ac52:	2300      	movs	r3, #0
 800ac54:	e103      	b.n	800ae5e <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	4a83      	ldr	r2, [pc, #524]	@ (800ae68 <print_string_ptr+0x254>)
 800ac5a:	8811      	ldrh	r1, [r2, #0]
 800ac5c:	7892      	ldrb	r2, [r2, #2]
 800ac5e:	8019      	strh	r1, [r3, #0]
 800ac60:	709a      	strb	r2, [r3, #2]

        return true;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e0fb      	b.n	800ae5e <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	61fb      	str	r3, [r7, #28]
 800ac6a:	e024      	b.n	800acb6 <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	2b22      	cmp	r3, #34	@ 0x22
 800ac72:	dc0f      	bgt.n	800ac94 <print_string_ptr+0x80>
 800ac74:	2b08      	cmp	r3, #8
 800ac76:	db13      	blt.n	800aca0 <print_string_ptr+0x8c>
 800ac78:	3b08      	subs	r3, #8
 800ac7a:	4a7c      	ldr	r2, [pc, #496]	@ (800ae6c <print_string_ptr+0x258>)
 800ac7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac80:	f003 0301 	and.w	r3, r3, #1
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	bf14      	ite	ne
 800ac88:	2301      	movne	r3, #1
 800ac8a:	2300      	moveq	r3, #0
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d102      	bne.n	800ac98 <print_string_ptr+0x84>
 800ac92:	e005      	b.n	800aca0 <print_string_ptr+0x8c>
 800ac94:	2b5c      	cmp	r3, #92	@ 0x5c
 800ac96:	d103      	bne.n	800aca0 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	617b      	str	r3, [r7, #20]
                break;
 800ac9e:	e007      	b.n	800acb0 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	2b1f      	cmp	r3, #31
 800aca6:	d802      	bhi.n	800acae <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	3305      	adds	r3, #5
 800acac:	617b      	str	r3, [r7, #20]
                }
                break;
 800acae:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	3301      	adds	r3, #1
 800acb4:	61fb      	str	r3, [r7, #28]
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1d6      	bne.n	800ac6c <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800acbe:	69fa      	ldr	r2, [r7, #28]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	1ad3      	subs	r3, r2, r3
 800acc4:	461a      	mov	r2, r3
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	4413      	add	r3, r2
 800acca:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	3303      	adds	r3, #3
 800acd0:	4619      	mov	r1, r3
 800acd2:	6838      	ldr	r0, [r7, #0]
 800acd4:	f7ff fb18 	bl	800a308 <ensure>
 800acd8:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d101      	bne.n	800ace4 <print_string_ptr+0xd0>
    {
        return false;
 800ace0:	2300      	movs	r3, #0
 800ace2:	e0bc      	b.n	800ae5e <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d117      	bne.n	800ad1a <print_string_ptr+0x106>
    {
        output[0] = '\"';
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	2222      	movs	r2, #34	@ 0x22
 800acee:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	3301      	adds	r3, #1
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	6879      	ldr	r1, [r7, #4]
 800acf8:	4618      	mov	r0, r3
 800acfa:	f00b fade 	bl	80162ba <memcpy>
        output[output_length + 1] = '\"';
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	3301      	adds	r3, #1
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	4413      	add	r3, r2
 800ad06:	2222      	movs	r2, #34	@ 0x22
 800ad08:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	3302      	adds	r3, #2
 800ad0e:	693a      	ldr	r2, [r7, #16]
 800ad10:	4413      	add	r3, r2
 800ad12:	2200      	movs	r2, #0
 800ad14:	701a      	strb	r2, [r3, #0]

        return true;
 800ad16:	2301      	movs	r3, #1
 800ad18:	e0a1      	b.n	800ae5e <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	2222      	movs	r2, #34	@ 0x22
 800ad1e:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	3301      	adds	r3, #1
 800ad24:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	61fb      	str	r3, [r7, #28]
 800ad2a:	e086      	b.n	800ae3a <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	2b1f      	cmp	r3, #31
 800ad32:	d90c      	bls.n	800ad4e <print_string_ptr+0x13a>
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	2b22      	cmp	r3, #34	@ 0x22
 800ad3a:	d008      	beq.n	800ad4e <print_string_ptr+0x13a>
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	2b5c      	cmp	r3, #92	@ 0x5c
 800ad42:	d004      	beq.n	800ad4e <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	781a      	ldrb	r2, [r3, #0]
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	701a      	strb	r2, [r3, #0]
 800ad4c:	e06f      	b.n	800ae2e <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	1c5a      	adds	r2, r3, #1
 800ad52:	61ba      	str	r2, [r7, #24]
 800ad54:	225c      	movs	r2, #92	@ 0x5c
 800ad56:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	2b22      	cmp	r3, #34	@ 0x22
 800ad5e:	dc3d      	bgt.n	800addc <print_string_ptr+0x1c8>
 800ad60:	2b08      	cmp	r3, #8
 800ad62:	db59      	blt.n	800ae18 <print_string_ptr+0x204>
 800ad64:	3b08      	subs	r3, #8
 800ad66:	2b1a      	cmp	r3, #26
 800ad68:	d856      	bhi.n	800ae18 <print_string_ptr+0x204>
 800ad6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad70 <print_string_ptr+0x15c>)
 800ad6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad70:	0800adf1 	.word	0x0800adf1
 800ad74:	0800ae11 	.word	0x0800ae11
 800ad78:	0800ae01 	.word	0x0800ae01
 800ad7c:	0800ae19 	.word	0x0800ae19
 800ad80:	0800adf9 	.word	0x0800adf9
 800ad84:	0800ae09 	.word	0x0800ae09
 800ad88:	0800ae19 	.word	0x0800ae19
 800ad8c:	0800ae19 	.word	0x0800ae19
 800ad90:	0800ae19 	.word	0x0800ae19
 800ad94:	0800ae19 	.word	0x0800ae19
 800ad98:	0800ae19 	.word	0x0800ae19
 800ad9c:	0800ae19 	.word	0x0800ae19
 800ada0:	0800ae19 	.word	0x0800ae19
 800ada4:	0800ae19 	.word	0x0800ae19
 800ada8:	0800ae19 	.word	0x0800ae19
 800adac:	0800ae19 	.word	0x0800ae19
 800adb0:	0800ae19 	.word	0x0800ae19
 800adb4:	0800ae19 	.word	0x0800ae19
 800adb8:	0800ae19 	.word	0x0800ae19
 800adbc:	0800ae19 	.word	0x0800ae19
 800adc0:	0800ae19 	.word	0x0800ae19
 800adc4:	0800ae19 	.word	0x0800ae19
 800adc8:	0800ae19 	.word	0x0800ae19
 800adcc:	0800ae19 	.word	0x0800ae19
 800add0:	0800ae19 	.word	0x0800ae19
 800add4:	0800ae19 	.word	0x0800ae19
 800add8:	0800ade9 	.word	0x0800ade9
 800addc:	2b5c      	cmp	r3, #92	@ 0x5c
 800adde:	d11b      	bne.n	800ae18 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	225c      	movs	r2, #92	@ 0x5c
 800ade4:	701a      	strb	r2, [r3, #0]
                    break;
 800ade6:	e022      	b.n	800ae2e <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	2222      	movs	r2, #34	@ 0x22
 800adec:	701a      	strb	r2, [r3, #0]
                    break;
 800adee:	e01e      	b.n	800ae2e <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	2262      	movs	r2, #98	@ 0x62
 800adf4:	701a      	strb	r2, [r3, #0]
                    break;
 800adf6:	e01a      	b.n	800ae2e <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	2266      	movs	r2, #102	@ 0x66
 800adfc:	701a      	strb	r2, [r3, #0]
                    break;
 800adfe:	e016      	b.n	800ae2e <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	226e      	movs	r2, #110	@ 0x6e
 800ae04:	701a      	strb	r2, [r3, #0]
                    break;
 800ae06:	e012      	b.n	800ae2e <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	2272      	movs	r2, #114	@ 0x72
 800ae0c:	701a      	strb	r2, [r3, #0]
                    break;
 800ae0e:	e00e      	b.n	800ae2e <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	2274      	movs	r2, #116	@ 0x74
 800ae14:	701a      	strb	r2, [r3, #0]
                    break;
 800ae16:	e00a      	b.n	800ae2e <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	4914      	ldr	r1, [pc, #80]	@ (800ae70 <print_string_ptr+0x25c>)
 800ae20:	69b8      	ldr	r0, [r7, #24]
 800ae22:	f00b f871 	bl	8015f08 <siprintf>
                    output_pointer += 4;
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	3304      	adds	r3, #4
 800ae2a:	61bb      	str	r3, [r7, #24]
                    break;
 800ae2c:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800ae2e:	69fb      	ldr	r3, [r7, #28]
 800ae30:	3301      	adds	r3, #1
 800ae32:	61fb      	str	r3, [r7, #28]
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	3301      	adds	r3, #1
 800ae38:	61bb      	str	r3, [r7, #24]
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f47f af74 	bne.w	800ad2c <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	3301      	adds	r3, #1
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	2222      	movs	r2, #34	@ 0x22
 800ae4e:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	3302      	adds	r3, #2
 800ae54:	693a      	ldr	r2, [r7, #16]
 800ae56:	4413      	add	r3, r2
 800ae58:	2200      	movs	r2, #0
 800ae5a:	701a      	strb	r2, [r3, #0]

    return true;
 800ae5c:	2301      	movs	r3, #1
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3720      	adds	r7, #32
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	080188ec 	.word	0x080188ec
 800ae6c:	04000037 	.word	0x04000037
 800ae70:	080188f0 	.word	0x080188f0

0800ae74 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	691b      	ldr	r3, [r3, #16]
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7ff fec5 	bl	800ac14 <print_string_ptr>
 800ae8a:	4603      	mov	r3, r0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d003      	beq.n	800aeaa <buffer_skip_whitespace+0x16>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d101      	bne.n	800aeae <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	e02c      	b.n	800af08 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d005      	beq.n	800aec0 <buffer_skip_whitespace+0x2c>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	689a      	ldr	r2, [r3, #8]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d306      	bcc.n	800aece <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	e021      	b.n	800af08 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	1c5a      	adds	r2, r3, #1
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00d      	beq.n	800aef0 <buffer_skip_whitespace+0x5c>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	689a      	ldr	r2, [r3, #8]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d207      	bcs.n	800aef0 <buffer_skip_whitespace+0x5c>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	4413      	add	r3, r2
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	2b20      	cmp	r3, #32
 800aeee:	d9e9      	bls.n	800aec4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	689a      	ldr	r2, [r3, #8]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d104      	bne.n	800af06 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	1e5a      	subs	r2, r3, #1
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800af06:	687b      	ldr	r3, [r7, #4]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d007      	beq.n	800af32 <skip_utf8_bom+0x1e>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d003      	beq.n	800af32 <skip_utf8_bom+0x1e>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d001      	beq.n	800af36 <skip_utf8_bom+0x22>
    {
        return NULL;
 800af32:	2300      	movs	r3, #0
 800af34:	e01c      	b.n	800af70 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d018      	beq.n	800af6e <skip_utf8_bom+0x5a>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	1d1a      	adds	r2, r3, #4
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	429a      	cmp	r2, r3
 800af48:	d211      	bcs.n	800af6e <skip_utf8_bom+0x5a>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	4413      	add	r3, r2
 800af54:	2203      	movs	r2, #3
 800af56:	4908      	ldr	r1, [pc, #32]	@ (800af78 <skip_utf8_bom+0x64>)
 800af58:	4618      	mov	r0, r3
 800af5a:	f00b f905 	bl	8016168 <strncmp>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d104      	bne.n	800af6e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	1cda      	adds	r2, r3, #3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800af6e:	687b      	ldr	r3, [r7, #4]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	080188f8 	.word	0x080188f8

0800af7c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d101      	bne.n	800af92 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800af8e:	2300      	movs	r3, #0
 800af90:	e00c      	b.n	800afac <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f7fd f946 	bl	8008224 <strlen>
 800af98:	4603      	mov	r3, r0
 800af9a:	3301      	adds	r3, #1
 800af9c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	6979      	ldr	r1, [r7, #20]
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f000 f805 	bl	800afb4 <cJSON_ParseWithLengthOpts>
 800afaa:	4603      	mov	r3, r0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3718      	adds	r7, #24
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b08e      	sub	sp, #56	@ 0x38
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
 800afc0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800afc2:	f107 0318 	add.w	r3, r7, #24
 800afc6:	2200      	movs	r2, #0
 800afc8:	601a      	str	r2, [r3, #0]
 800afca:	605a      	str	r2, [r3, #4]
 800afcc:	609a      	str	r2, [r3, #8]
 800afce:	60da      	str	r2, [r3, #12]
 800afd0:	611a      	str	r2, [r3, #16]
 800afd2:	615a      	str	r2, [r3, #20]
 800afd4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800afd6:	2300      	movs	r3, #0
 800afd8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 800afda:	4b41      	ldr	r3, [pc, #260]	@ (800b0e0 <cJSON_ParseWithLengthOpts+0x12c>)
 800afdc:	2200      	movs	r2, #0
 800afde:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800afe0:	4b3f      	ldr	r3, [pc, #252]	@ (800b0e0 <cJSON_ParseWithLengthOpts+0x12c>)
 800afe2:	2200      	movs	r2, #0
 800afe4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d042      	beq.n	800b072 <cJSON_ParseWithLengthOpts+0xbe>
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d03f      	beq.n	800b072 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800affa:	2300      	movs	r3, #0
 800affc:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800affe:	4a39      	ldr	r2, [pc, #228]	@ (800b0e4 <cJSON_ParseWithLengthOpts+0x130>)
 800b000:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b004:	ca07      	ldmia	r2, {r0, r1, r2}
 800b006:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800b00a:	4836      	ldr	r0, [pc, #216]	@ (800b0e4 <cJSON_ParseWithLengthOpts+0x130>)
 800b00c:	f7ff f840 	bl	800a090 <cJSON_New_Item>
 800b010:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 800b012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b014:	2b00      	cmp	r3, #0
 800b016:	d02e      	beq.n	800b076 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800b018:	f107 0318 	add.w	r3, r7, #24
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7ff ff79 	bl	800af14 <skip_utf8_bom>
 800b022:	4603      	mov	r3, r0
 800b024:	4618      	mov	r0, r3
 800b026:	f7ff ff35 	bl	800ae94 <buffer_skip_whitespace>
 800b02a:	4603      	mov	r3, r0
 800b02c:	4619      	mov	r1, r3
 800b02e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b030:	f000 f902 	bl	800b238 <parse_value>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d01f      	beq.n	800b07a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00e      	beq.n	800b05e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800b040:	f107 0318 	add.w	r3, r7, #24
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff ff25 	bl	800ae94 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800b04a:	6a3a      	ldr	r2, [r7, #32]
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d215      	bcs.n	800b07e <cJSON_ParseWithLengthOpts+0xca>
 800b052:	69ba      	ldr	r2, [r7, #24]
 800b054:	6a3b      	ldr	r3, [r7, #32]
 800b056:	4413      	add	r3, r2
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d10f      	bne.n	800b07e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d004      	beq.n	800b06e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800b064:	69ba      	ldr	r2, [r7, #24]
 800b066:	6a3b      	ldr	r3, [r7, #32]
 800b068:	441a      	add	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	601a      	str	r2, [r3, #0]
    }

    return item;
 800b06e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b070:	e031      	b.n	800b0d6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800b072:	bf00      	nop
 800b074:	e004      	b.n	800b080 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800b076:	bf00      	nop
 800b078:	e002      	b.n	800b080 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800b07a:	bf00      	nop
 800b07c:	e000      	b.n	800b080 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800b07e:	bf00      	nop

fail:
    if (item != NULL)
 800b080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b082:	2b00      	cmp	r3, #0
 800b084:	d002      	beq.n	800b08c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800b086:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b088:	f7ff f818 	bl	800a0bc <cJSON_Delete>
    }

    if (value != NULL)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d020      	beq.n	800b0d4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800b096:	2300      	movs	r3, #0
 800b098:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800b09a:	6a3a      	ldr	r2, [r7, #32]
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d202      	bcs.n	800b0a8 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800b0a2:	6a3b      	ldr	r3, [r7, #32]
 800b0a4:	617b      	str	r3, [r7, #20]
 800b0a6:	e005      	b.n	800b0b4 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d002      	beq.n	800b0b4 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d004      	beq.n	800b0c4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	441a      	add	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800b0c4:	4b06      	ldr	r3, [pc, #24]	@ (800b0e0 <cJSON_ParseWithLengthOpts+0x12c>)
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	f107 0310 	add.w	r3, r7, #16
 800b0cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b0d0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3738      	adds	r7, #56	@ 0x38
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	2000025c 	.word	0x2000025c
 800b0e4:	20000000 	.word	0x20000000

0800b0e8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f7ff ff41 	bl	800af7c <cJSON_ParseWithOpts>
 800b0fa:	4603      	mov	r3, r0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3708      	adds	r7, #8
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b08e      	sub	sp, #56	@ 0x38
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 800b110:	2300      	movs	r3, #0
 800b112:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 800b114:	f107 0310 	add.w	r3, r7, #16
 800b118:	2224      	movs	r2, #36	@ 0x24
 800b11a:	2100      	movs	r1, #0
 800b11c:	4618      	mov	r0, r3
 800b11e:	f00b f81b 	bl	8016158 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a3b      	ldr	r2, [pc, #236]	@ (800b214 <print+0x110>)
 800b128:	6812      	ldr	r2, [r2, #0]
 800b12a:	4610      	mov	r0, r2
 800b12c:	4798      	blx	r3
 800b12e:	4603      	mov	r3, r0
 800b130:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800b132:	4b38      	ldr	r3, [pc, #224]	@ (800b214 <print+0x110>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b142:	ca07      	ldmia	r2, {r0, r1, r2}
 800b144:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d042      	beq.n	800b1d4 <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800b14e:	f107 0310 	add.w	r3, r7, #16
 800b152:	4619      	mov	r1, r3
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f000 f95b 	bl	800b410 <print_value>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d03b      	beq.n	800b1d8 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 800b160:	f107 0310 	add.w	r3, r7, #16
 800b164:	4618      	mov	r0, r3
 800b166:	f7ff f969 	bl	800a43c <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00d      	beq.n	800b18e <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	6938      	ldr	r0, [r7, #16]
 800b178:	69ba      	ldr	r2, [r7, #24]
 800b17a:	3201      	adds	r2, #1
 800b17c:	4611      	mov	r1, r2
 800b17e:	4798      	blx	r3
 800b180:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 800b182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b184:	2b00      	cmp	r3, #0
 800b186:	d029      	beq.n	800b1dc <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 800b188:	2300      	movs	r3, #0
 800b18a:	613b      	str	r3, [r7, #16]
 800b18c:	e020      	b.n	800b1d0 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	69ba      	ldr	r2, [r7, #24]
 800b194:	3201      	adds	r2, #1
 800b196:	4610      	mov	r0, r2
 800b198:	4798      	blx	r3
 800b19a:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 800b19c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d01e      	beq.n	800b1e0 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800b1a2:	6939      	ldr	r1, [r7, #16]
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	1c5a      	adds	r2, r3, #1
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	bf28      	it	cs
 800b1ae:	4613      	movcs	r3, r2
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b1b4:	f00b f881 	bl	80162ba <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1bc:	4413      	add	r3, r2
 800b1be:	2200      	movs	r2, #0
 800b1c0:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	693a      	ldr	r2, [r7, #16]
 800b1c8:	4610      	mov	r0, r2
 800b1ca:	4798      	blx	r3
        buffer->buffer = NULL;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	613b      	str	r3, [r7, #16]
    }

    return printed;
 800b1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1d2:	e01a      	b.n	800b20a <print+0x106>
        goto fail;
 800b1d4:	bf00      	nop
 800b1d6:	e004      	b.n	800b1e2 <print+0xde>
        goto fail;
 800b1d8:	bf00      	nop
 800b1da:	e002      	b.n	800b1e2 <print+0xde>
            goto fail;
 800b1dc:	bf00      	nop
 800b1de:	e000      	b.n	800b1e2 <print+0xde>
            goto fail;
 800b1e0:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d006      	beq.n	800b1f6 <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	693a      	ldr	r2, [r7, #16]
 800b1ee:	4610      	mov	r0, r2
 800b1f0:	4798      	blx	r3
        buffer->buffer = NULL;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 800b1f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d005      	beq.n	800b208 <print+0x104>
    {
        hooks->deallocate(printed);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b202:	4798      	blx	r3
        printed = NULL;
 800b204:	2300      	movs	r3, #0
 800b206:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3738      	adds	r7, #56	@ 0x38
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	08018cc0 	.word	0x08018cc0

0800b218 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 800b220:	4a04      	ldr	r2, [pc, #16]	@ (800b234 <cJSON_PrintUnformatted+0x1c>)
 800b222:	2100      	movs	r1, #0
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f7ff ff6d 	bl	800b104 <print>
 800b22a:	4603      	mov	r3, r0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	20000000 	.word	0x20000000

0800b238 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d003      	beq.n	800b250 <parse_value+0x18>
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d101      	bne.n	800b254 <parse_value+0x1c>
    {
        return false; /* no input */
 800b250:	2300      	movs	r3, #0
 800b252:	e0d2      	b.n	800b3fa <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d01d      	beq.n	800b296 <parse_value+0x5e>
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	1d1a      	adds	r2, r3, #4
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	429a      	cmp	r2, r3
 800b266:	d816      	bhi.n	800b296 <parse_value+0x5e>
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	4413      	add	r3, r2
 800b272:	2204      	movs	r2, #4
 800b274:	4963      	ldr	r1, [pc, #396]	@ (800b404 <parse_value+0x1cc>)
 800b276:	4618      	mov	r0, r3
 800b278:	f00a ff76 	bl	8016168 <strncmp>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d109      	bne.n	800b296 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2204      	movs	r2, #4
 800b286:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	1d1a      	adds	r2, r3, #4
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	609a      	str	r2, [r3, #8]
        return true;
 800b292:	2301      	movs	r3, #1
 800b294:	e0b1      	b.n	800b3fa <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d01d      	beq.n	800b2d8 <parse_value+0xa0>
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	1d5a      	adds	r2, r3, #5
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d816      	bhi.n	800b2d8 <parse_value+0xa0>
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	2205      	movs	r2, #5
 800b2b6:	4954      	ldr	r1, [pc, #336]	@ (800b408 <parse_value+0x1d0>)
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f00a ff55 	bl	8016168 <strncmp>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d109      	bne.n	800b2d8 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	1d5a      	adds	r2, r3, #5
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	609a      	str	r2, [r3, #8]
        return true;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e090      	b.n	800b3fa <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d020      	beq.n	800b320 <parse_value+0xe8>
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	1d1a      	adds	r2, r3, #4
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d819      	bhi.n	800b320 <parse_value+0xe8>
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	2204      	movs	r2, #4
 800b2f8:	4944      	ldr	r1, [pc, #272]	@ (800b40c <parse_value+0x1d4>)
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f00a ff34 	bl	8016168 <strncmp>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d10c      	bne.n	800b320 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2202      	movs	r2, #2
 800b30a:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	689b      	ldr	r3, [r3, #8]
 800b316:	1d1a      	adds	r2, r3, #4
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	609a      	str	r2, [r3, #8]
        return true;
 800b31c:	2301      	movs	r3, #1
 800b31e:	e06c      	b.n	800b3fa <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d013      	beq.n	800b34e <parse_value+0x116>
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	689a      	ldr	r2, [r3, #8]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d20d      	bcs.n	800b34e <parse_value+0x116>
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	689b      	ldr	r3, [r3, #8]
 800b33a:	4413      	add	r3, r2
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	2b22      	cmp	r3, #34	@ 0x22
 800b340:	d105      	bne.n	800b34e <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800b342:	6839      	ldr	r1, [r7, #0]
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f7ff fb1d 	bl	800a984 <parse_string>
 800b34a:	4603      	mov	r3, r0
 800b34c:	e055      	b.n	800b3fa <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d023      	beq.n	800b39c <parse_value+0x164>
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	689a      	ldr	r2, [r3, #8]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d21d      	bcs.n	800b39c <parse_value+0x164>
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	4413      	add	r3, r2
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	2b2d      	cmp	r3, #45	@ 0x2d
 800b36e:	d00f      	beq.n	800b390 <parse_value+0x158>
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	4413      	add	r3, r2
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	2b2f      	cmp	r3, #47	@ 0x2f
 800b37e:	d90d      	bls.n	800b39c <parse_value+0x164>
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	4413      	add	r3, r2
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	2b39      	cmp	r3, #57	@ 0x39
 800b38e:	d805      	bhi.n	800b39c <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7fe feec 	bl	800a170 <parse_number>
 800b398:	4603      	mov	r3, r0
 800b39a:	e02e      	b.n	800b3fa <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d013      	beq.n	800b3ca <parse_value+0x192>
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	689a      	ldr	r2, [r3, #8]
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d20d      	bcs.n	800b3ca <parse_value+0x192>
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	2b5b      	cmp	r3, #91	@ 0x5b
 800b3bc:	d105      	bne.n	800b3ca <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800b3be:	6839      	ldr	r1, [r7, #0]
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 f909 	bl	800b5d8 <parse_array>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	e017      	b.n	800b3fa <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d013      	beq.n	800b3f8 <parse_value+0x1c0>
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	689a      	ldr	r2, [r3, #8]
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d20d      	bcs.n	800b3f8 <parse_value+0x1c0>
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	2b7b      	cmp	r3, #123	@ 0x7b
 800b3ea:	d105      	bne.n	800b3f8 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fa3c 	bl	800b86c <parse_object>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	e000      	b.n	800b3fa <parse_value+0x1c2>
    }

    return false;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	080188cc 	.word	0x080188cc
 800b408:	080188fc 	.word	0x080188fc
 800b40c:	08018904 	.word	0x08018904

0800b410 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800b41a:	2300      	movs	r3, #0
 800b41c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d002      	beq.n	800b42a <print_value+0x1a>
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d101      	bne.n	800b42e <print_value+0x1e>
    {
        return false;
 800b42a:	2300      	movs	r3, #0
 800b42c:	e0c9      	b.n	800b5c2 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	b2db      	uxtb	r3, r3
 800b434:	2b80      	cmp	r3, #128	@ 0x80
 800b436:	f000 808e 	beq.w	800b556 <print_value+0x146>
 800b43a:	2b80      	cmp	r3, #128	@ 0x80
 800b43c:	f300 80c0 	bgt.w	800b5c0 <print_value+0x1b0>
 800b440:	2b20      	cmp	r3, #32
 800b442:	dc49      	bgt.n	800b4d8 <print_value+0xc8>
 800b444:	2b00      	cmp	r3, #0
 800b446:	f340 80bb 	ble.w	800b5c0 <print_value+0x1b0>
 800b44a:	3b01      	subs	r3, #1
 800b44c:	2b1f      	cmp	r3, #31
 800b44e:	f200 80b7 	bhi.w	800b5c0 <print_value+0x1b0>
 800b452:	a201      	add	r2, pc, #4	@ (adr r2, 800b458 <print_value+0x48>)
 800b454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b458:	0800b503 	.word	0x0800b503
 800b45c:	0800b527 	.word	0x0800b527
 800b460:	0800b5c1 	.word	0x0800b5c1
 800b464:	0800b4df 	.word	0x0800b4df
 800b468:	0800b5c1 	.word	0x0800b5c1
 800b46c:	0800b5c1 	.word	0x0800b5c1
 800b470:	0800b5c1 	.word	0x0800b5c1
 800b474:	0800b54b 	.word	0x0800b54b
 800b478:	0800b5c1 	.word	0x0800b5c1
 800b47c:	0800b5c1 	.word	0x0800b5c1
 800b480:	0800b5c1 	.word	0x0800b5c1
 800b484:	0800b5c1 	.word	0x0800b5c1
 800b488:	0800b5c1 	.word	0x0800b5c1
 800b48c:	0800b5c1 	.word	0x0800b5c1
 800b490:	0800b5c1 	.word	0x0800b5c1
 800b494:	0800b59d 	.word	0x0800b59d
 800b498:	0800b5c1 	.word	0x0800b5c1
 800b49c:	0800b5c1 	.word	0x0800b5c1
 800b4a0:	0800b5c1 	.word	0x0800b5c1
 800b4a4:	0800b5c1 	.word	0x0800b5c1
 800b4a8:	0800b5c1 	.word	0x0800b5c1
 800b4ac:	0800b5c1 	.word	0x0800b5c1
 800b4b0:	0800b5c1 	.word	0x0800b5c1
 800b4b4:	0800b5c1 	.word	0x0800b5c1
 800b4b8:	0800b5c1 	.word	0x0800b5c1
 800b4bc:	0800b5c1 	.word	0x0800b5c1
 800b4c0:	0800b5c1 	.word	0x0800b5c1
 800b4c4:	0800b5c1 	.word	0x0800b5c1
 800b4c8:	0800b5c1 	.word	0x0800b5c1
 800b4cc:	0800b5c1 	.word	0x0800b5c1
 800b4d0:	0800b5c1 	.word	0x0800b5c1
 800b4d4:	0800b5a9 	.word	0x0800b5a9
 800b4d8:	2b40      	cmp	r3, #64	@ 0x40
 800b4da:	d06b      	beq.n	800b5b4 <print_value+0x1a4>
 800b4dc:	e070      	b.n	800b5c0 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800b4de:	2105      	movs	r1, #5
 800b4e0:	6838      	ldr	r0, [r7, #0]
 800b4e2:	f7fe ff11 	bl	800a308 <ensure>
 800b4e6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d101      	bne.n	800b4f2 <print_value+0xe2>
            {
                return false;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	e067      	b.n	800b5c2 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	4a35      	ldr	r2, [pc, #212]	@ (800b5cc <print_value+0x1bc>)
 800b4f6:	6810      	ldr	r0, [r2, #0]
 800b4f8:	6018      	str	r0, [r3, #0]
 800b4fa:	7912      	ldrb	r2, [r2, #4]
 800b4fc:	711a      	strb	r2, [r3, #4]
            return true;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e05f      	b.n	800b5c2 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 800b502:	2106      	movs	r1, #6
 800b504:	6838      	ldr	r0, [r7, #0]
 800b506:	f7fe feff 	bl	800a308 <ensure>
 800b50a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d101      	bne.n	800b516 <print_value+0x106>
            {
                return false;
 800b512:	2300      	movs	r3, #0
 800b514:	e055      	b.n	800b5c2 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	4a2d      	ldr	r2, [pc, #180]	@ (800b5d0 <print_value+0x1c0>)
 800b51a:	6810      	ldr	r0, [r2, #0]
 800b51c:	6018      	str	r0, [r3, #0]
 800b51e:	8892      	ldrh	r2, [r2, #4]
 800b520:	809a      	strh	r2, [r3, #4]
            return true;
 800b522:	2301      	movs	r3, #1
 800b524:	e04d      	b.n	800b5c2 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800b526:	2105      	movs	r1, #5
 800b528:	6838      	ldr	r0, [r7, #0]
 800b52a:	f7fe feed 	bl	800a308 <ensure>
 800b52e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <print_value+0x12a>
            {
                return false;
 800b536:	2300      	movs	r3, #0
 800b538:	e043      	b.n	800b5c2 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	4a25      	ldr	r2, [pc, #148]	@ (800b5d4 <print_value+0x1c4>)
 800b53e:	6810      	ldr	r0, [r2, #0]
 800b540:	6018      	str	r0, [r3, #0]
 800b542:	7912      	ldrb	r2, [r2, #4]
 800b544:	711a      	strb	r2, [r3, #4]
            return true;
 800b546:	2301      	movs	r3, #1
 800b548:	e03b      	b.n	800b5c2 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800b54a:	6839      	ldr	r1, [r7, #0]
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7fe ffdf 	bl	800a510 <print_number>
 800b552:	4603      	mov	r3, r0
 800b554:	e035      	b.n	800b5c2 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800b556:	2300      	movs	r3, #0
 800b558:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d101      	bne.n	800b566 <print_value+0x156>
            {
                return false;
 800b562:	2300      	movs	r3, #0
 800b564:	e02d      	b.n	800b5c2 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fc fe5a 	bl	8008224 <strlen>
 800b570:	4603      	mov	r3, r0
 800b572:	3301      	adds	r3, #1
 800b574:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800b576:	68b9      	ldr	r1, [r7, #8]
 800b578:	6838      	ldr	r0, [r7, #0]
 800b57a:	f7fe fec5 	bl	800a308 <ensure>
 800b57e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <print_value+0x17a>
            {
                return false;
 800b586:	2300      	movs	r3, #0
 800b588:	e01b      	b.n	800b5c2 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	68ba      	ldr	r2, [r7, #8]
 800b590:	4619      	mov	r1, r3
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	f00a fe91 	bl	80162ba <memcpy>
            return true;
 800b598:	2301      	movs	r3, #1
 800b59a:	e012      	b.n	800b5c2 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 800b59c:	6839      	ldr	r1, [r7, #0]
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7ff fc68 	bl	800ae74 <print_string>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	e00c      	b.n	800b5c2 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 800b5a8:	6839      	ldr	r1, [r7, #0]
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 f8d8 	bl	800b760 <print_array>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	e006      	b.n	800b5c2 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 fa64 	bl	800ba84 <print_object>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	e000      	b.n	800b5c2 <print_value+0x1b2>

        default:
            return false;
 800b5c0:	2300      	movs	r3, #0
    }
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	080188cc 	.word	0x080188cc
 800b5d0:	080188fc 	.word	0x080188fc
 800b5d4:	08018904 	.word	0x08018904

0800b5d8 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b086      	sub	sp, #24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b5f2:	d301      	bcc.n	800b5f8 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	e0af      	b.n	800b758 <parse_array+0x180>
    }
    input_buffer->depth++;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	1c5a      	adds	r2, r3, #1
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	4413      	add	r3, r2
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	2b5b      	cmp	r3, #91	@ 0x5b
 800b610:	f040 8094 	bne.w	800b73c <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	1c5a      	adds	r2, r3, #1
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800b61e:	6838      	ldr	r0, [r7, #0]
 800b620:	f7ff fc38 	bl	800ae94 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00d      	beq.n	800b646 <parse_array+0x6e>
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	689a      	ldr	r2, [r3, #8]
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	429a      	cmp	r2, r3
 800b634:	d207      	bcs.n	800b646 <parse_array+0x6e>
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	4413      	add	r3, r2
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	2b5d      	cmp	r3, #93	@ 0x5d
 800b644:	d061      	beq.n	800b70a <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d005      	beq.n	800b658 <parse_array+0x80>
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	689a      	ldr	r2, [r3, #8]
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	429a      	cmp	r2, r3
 800b656:	d305      	bcc.n	800b664 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	1e5a      	subs	r2, r3, #1
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	609a      	str	r2, [r3, #8]
        goto fail;
 800b662:	e072      	b.n	800b74a <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	1e5a      	subs	r2, r3, #1
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	3310      	adds	r3, #16
 800b672:	4618      	mov	r0, r3
 800b674:	f7fe fd0c 	bl	800a090 <cJSON_New_Item>
 800b678:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d05f      	beq.n	800b740 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d104      	bne.n	800b690 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	617b      	str	r3, [r7, #20]
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	613b      	str	r3, [r7, #16]
 800b68e:	e007      	b.n	800b6a0 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	693a      	ldr	r2, [r7, #16]
 800b69a:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	1c5a      	adds	r2, r3, #1
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800b6aa:	6838      	ldr	r0, [r7, #0]
 800b6ac:	f7ff fbf2 	bl	800ae94 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800b6b0:	6839      	ldr	r1, [r7, #0]
 800b6b2:	6938      	ldr	r0, [r7, #16]
 800b6b4:	f7ff fdc0 	bl	800b238 <parse_value>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d042      	beq.n	800b744 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800b6be:	6838      	ldr	r0, [r7, #0]
 800b6c0:	f7ff fbe8 	bl	800ae94 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00d      	beq.n	800b6e6 <parse_array+0x10e>
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	689a      	ldr	r2, [r3, #8]
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d207      	bcs.n	800b6e6 <parse_array+0x10e>
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	4413      	add	r3, r2
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	2b2c      	cmp	r3, #44	@ 0x2c
 800b6e4:	d0c3      	beq.n	800b66e <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d02d      	beq.n	800b748 <parse_array+0x170>
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	689a      	ldr	r2, [r3, #8]
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d227      	bcs.n	800b748 <parse_array+0x170>
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	4413      	add	r3, r2
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	2b5d      	cmp	r3, #93	@ 0x5d
 800b706:	d11f      	bne.n	800b748 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800b708:	e000      	b.n	800b70c <parse_array+0x134>
        goto success;
 800b70a:	bf00      	nop
    input_buffer->depth--;
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	1e5a      	subs	r2, r3, #1
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d002      	beq.n	800b722 <parse_array+0x14a>
        head->prev = current_item;
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2220      	movs	r2, #32
 800b726:	60da      	str	r2, [r3, #12]
    item->child = head;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	697a      	ldr	r2, [r7, #20]
 800b72c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	1c5a      	adds	r2, r3, #1
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	609a      	str	r2, [r3, #8]

    return true;
 800b738:	2301      	movs	r3, #1
 800b73a:	e00d      	b.n	800b758 <parse_array+0x180>
        goto fail;
 800b73c:	bf00      	nop
 800b73e:	e004      	b.n	800b74a <parse_array+0x172>
            goto fail; /* allocation failure */
 800b740:	bf00      	nop
 800b742:	e002      	b.n	800b74a <parse_array+0x172>
            goto fail; /* failed to parse value */
 800b744:	bf00      	nop
 800b746:	e000      	b.n	800b74a <parse_array+0x172>
        goto fail; /* expected end of array */
 800b748:	bf00      	nop

fail:
    if (head != NULL)
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d002      	beq.n	800b756 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800b750:	6978      	ldr	r0, [r7, #20]
 800b752:	f7fe fcb3 	bl	800a0bc <cJSON_Delete>
    }

    return false;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3718      	adds	r7, #24
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800b76a:	2300      	movs	r3, #0
 800b76c:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800b76e:	2300      	movs	r3, #0
 800b770:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d101      	bne.n	800b782 <print_array+0x22>
    {
        return false;
 800b77e:	2300      	movs	r3, #0
 800b780:	e070      	b.n	800b864 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800b782:	2101      	movs	r1, #1
 800b784:	6838      	ldr	r0, [r7, #0]
 800b786:	f7fe fdbf 	bl	800a308 <ensure>
 800b78a:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d101      	bne.n	800b796 <print_array+0x36>
    {
        return false;
 800b792:	2300      	movs	r3, #0
 800b794:	e066      	b.n	800b864 <print_array+0x104>
    }

    *output_pointer = '[';
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	225b      	movs	r2, #91	@ 0x5b
 800b79a:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	1c5a      	adds	r2, r3, #1
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	1c5a      	adds	r2, r3, #1
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800b7b0:	e03d      	b.n	800b82e <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	6938      	ldr	r0, [r7, #16]
 800b7b6:	f7ff fe2b 	bl	800b410 <print_value>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d101      	bne.n	800b7c4 <print_array+0x64>
        {
            return false;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	e04f      	b.n	800b864 <print_array+0x104>
        }
        update_offset(output_buffer);
 800b7c4:	6838      	ldr	r0, [r7, #0]
 800b7c6:	f7fe fe39 	bl	800a43c <update_offset>
        if (current_element->next)
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d02a      	beq.n	800b828 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	695b      	ldr	r3, [r3, #20]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <print_array+0x7e>
 800b7da:	2302      	movs	r3, #2
 800b7dc:	e000      	b.n	800b7e0 <print_array+0x80>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	6838      	ldr	r0, [r7, #0]
 800b7ea:	f7fe fd8d 	bl	800a308 <ensure>
 800b7ee:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d101      	bne.n	800b7fa <print_array+0x9a>
            {
                return false;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	e034      	b.n	800b864 <print_array+0x104>
            }
            *output_pointer++ = ',';
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	1c5a      	adds	r2, r3, #1
 800b7fe:	617a      	str	r2, [r7, #20]
 800b800:	222c      	movs	r2, #44	@ 0x2c
 800b802:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	695b      	ldr	r3, [r3, #20]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d004      	beq.n	800b816 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	1c5a      	adds	r2, r3, #1
 800b810:	617a      	str	r2, [r7, #20]
 800b812:	2220      	movs	r2, #32
 800b814:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	2200      	movs	r2, #0
 800b81a:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	689a      	ldr	r2, [r3, #8]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	441a      	add	r2, r3
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1be      	bne.n	800b7b2 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 800b834:	2102      	movs	r1, #2
 800b836:	6838      	ldr	r0, [r7, #0]
 800b838:	f7fe fd66 	bl	800a308 <ensure>
 800b83c:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d101      	bne.n	800b848 <print_array+0xe8>
    {
        return false;
 800b844:	2300      	movs	r3, #0
 800b846:	e00d      	b.n	800b864 <print_array+0x104>
    }
    *output_pointer++ = ']';
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	1c5a      	adds	r2, r3, #1
 800b84c:	617a      	str	r2, [r7, #20]
 800b84e:	225d      	movs	r2, #93	@ 0x5d
 800b850:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	2200      	movs	r2, #0
 800b856:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	1e5a      	subs	r2, r3, #1
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	60da      	str	r2, [r3, #12]

    return true;
 800b862:	2301      	movs	r3, #1
}
 800b864:	4618      	mov	r0, r3
 800b866:	3718      	adds	r7, #24
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b086      	sub	sp, #24
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800b876:	2300      	movs	r3, #0
 800b878:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800b87a:	2300      	movs	r3, #0
 800b87c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b886:	d301      	bcc.n	800b88c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800b888:	2300      	movs	r3, #0
 800b88a:	e0f7      	b.n	800ba7c <parse_object+0x210>
    }
    input_buffer->depth++;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	1c5a      	adds	r2, r3, #1
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f000 80db 	beq.w	800ba54 <parse_object+0x1e8>
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	689a      	ldr	r2, [r3, #8]
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	f080 80d4 	bcs.w	800ba54 <parse_object+0x1e8>
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	2b7b      	cmp	r3, #123	@ 0x7b
 800b8ba:	f040 80cb 	bne.w	800ba54 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	1c5a      	adds	r2, r3, #1
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800b8c8:	6838      	ldr	r0, [r7, #0]
 800b8ca:	f7ff fae3 	bl	800ae94 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00e      	beq.n	800b8f2 <parse_object+0x86>
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	689a      	ldr	r2, [r3, #8]
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d208      	bcs.n	800b8f2 <parse_object+0x86>
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	2b7d      	cmp	r3, #125	@ 0x7d
 800b8ee:	f000 8098 	beq.w	800ba22 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d005      	beq.n	800b904 <parse_object+0x98>
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	689a      	ldr	r2, [r3, #8]
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	429a      	cmp	r2, r3
 800b902:	d305      	bcc.n	800b910 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	1e5a      	subs	r2, r3, #1
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	609a      	str	r2, [r3, #8]
        goto fail;
 800b90e:	e0ae      	b.n	800ba6e <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	1e5a      	subs	r2, r3, #1
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	3310      	adds	r3, #16
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fe fbb6 	bl	800a090 <cJSON_New_Item>
 800b924:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f000 8095 	beq.w	800ba58 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d104      	bne.n	800b93e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	617b      	str	r3, [r7, #20]
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	613b      	str	r3, [r7, #16]
 800b93c:	e007      	b.n	800b94e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 8083 	beq.w	800ba5c <parse_object+0x1f0>
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	689b      	ldr	r3, [r3, #8]
 800b95a:	1c5a      	adds	r2, r3, #1
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	429a      	cmp	r2, r3
 800b962:	d27b      	bcs.n	800ba5c <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	1c5a      	adds	r2, r3, #1
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800b96e:	6838      	ldr	r0, [r7, #0]
 800b970:	f7ff fa90 	bl	800ae94 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	6938      	ldr	r0, [r7, #16]
 800b978:	f7ff f804 	bl	800a984 <parse_string>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d06e      	beq.n	800ba60 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800b982:	6838      	ldr	r0, [r7, #0]
 800b984:	f7ff fa86 	bl	800ae94 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	691a      	ldr	r2, [r3, #16]
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	2200      	movs	r2, #0
 800b994:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d063      	beq.n	800ba64 <parse_object+0x1f8>
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	689a      	ldr	r2, [r3, #8]
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d25d      	bcs.n	800ba64 <parse_object+0x1f8>
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	2b3a      	cmp	r3, #58	@ 0x3a
 800b9b6:	d155      	bne.n	800ba64 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	1c5a      	adds	r2, r3, #1
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800b9c2:	6838      	ldr	r0, [r7, #0]
 800b9c4:	f7ff fa66 	bl	800ae94 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800b9c8:	6839      	ldr	r1, [r7, #0]
 800b9ca:	6938      	ldr	r0, [r7, #16]
 800b9cc:	f7ff fc34 	bl	800b238 <parse_value>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d048      	beq.n	800ba68 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800b9d6:	6838      	ldr	r0, [r7, #0]
 800b9d8:	f7ff fa5c 	bl	800ae94 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d00d      	beq.n	800b9fe <parse_object+0x192>
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	689a      	ldr	r2, [r3, #8]
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d207      	bcs.n	800b9fe <parse_object+0x192>
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	2b2c      	cmp	r3, #44	@ 0x2c
 800b9fc:	d08d      	beq.n	800b91a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d033      	beq.n	800ba6c <parse_object+0x200>
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	689a      	ldr	r2, [r3, #8]
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d22d      	bcs.n	800ba6c <parse_object+0x200>
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	4413      	add	r3, r2
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	2b7d      	cmp	r3, #125	@ 0x7d
 800ba1e:	d125      	bne.n	800ba6c <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 800ba20:	e000      	b.n	800ba24 <parse_object+0x1b8>
        goto success; /* empty object */
 800ba22:	bf00      	nop
    input_buffer->depth--;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	1e5a      	subs	r2, r3, #1
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d002      	beq.n	800ba3a <parse_object+0x1ce>
        head->prev = current_item;
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	693a      	ldr	r2, [r7, #16]
 800ba38:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2240      	movs	r2, #64	@ 0x40
 800ba3e:	60da      	str	r2, [r3, #12]
    item->child = head;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	1c5a      	adds	r2, r3, #1
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	609a      	str	r2, [r3, #8]
    return true;
 800ba50:	2301      	movs	r3, #1
 800ba52:	e013      	b.n	800ba7c <parse_object+0x210>
        goto fail; /* not an object */
 800ba54:	bf00      	nop
 800ba56:	e00a      	b.n	800ba6e <parse_object+0x202>
            goto fail; /* allocation failure */
 800ba58:	bf00      	nop
 800ba5a:	e008      	b.n	800ba6e <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 800ba5c:	bf00      	nop
 800ba5e:	e006      	b.n	800ba6e <parse_object+0x202>
            goto fail; /* failed to parse name */
 800ba60:	bf00      	nop
 800ba62:	e004      	b.n	800ba6e <parse_object+0x202>
            goto fail; /* invalid object */
 800ba64:	bf00      	nop
 800ba66:	e002      	b.n	800ba6e <parse_object+0x202>
            goto fail; /* failed to parse value */
 800ba68:	bf00      	nop
 800ba6a:	e000      	b.n	800ba6e <parse_object+0x202>
        goto fail; /* expected end of object */
 800ba6c:	bf00      	nop

fail:
    if (head != NULL)
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d002      	beq.n	800ba7a <parse_object+0x20e>
    {
        cJSON_Delete(head);
 800ba74:	6978      	ldr	r0, [r7, #20]
 800ba76:	f7fe fb21 	bl	800a0bc <cJSON_Delete>
    }

    return false;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3718      	adds	r7, #24
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b088      	sub	sp, #32
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 800ba92:	2300      	movs	r3, #0
 800ba94:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d101      	bne.n	800baa6 <print_object+0x22>
    {
        return false;
 800baa2:	2300      	movs	r3, #0
 800baa4:	e108      	b.n	800bcb8 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	695b      	ldr	r3, [r3, #20]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d001      	beq.n	800bab2 <print_object+0x2e>
 800baae:	2302      	movs	r3, #2
 800bab0:	e000      	b.n	800bab4 <print_object+0x30>
 800bab2:	2301      	movs	r3, #1
 800bab4:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	3301      	adds	r3, #1
 800baba:	4619      	mov	r1, r3
 800babc:	6838      	ldr	r0, [r7, #0]
 800babe:	f7fe fc23 	bl	800a308 <ensure>
 800bac2:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d101      	bne.n	800bace <print_object+0x4a>
    {
        return false;
 800baca:	2300      	movs	r3, #0
 800bacc:	e0f4      	b.n	800bcb8 <print_object+0x234>
    }

    *output_pointer++ = '{';
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	1c5a      	adds	r2, r3, #1
 800bad2:	61fa      	str	r2, [r7, #28]
 800bad4:	227b      	movs	r2, #123	@ 0x7b
 800bad6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	1c5a      	adds	r2, r3, #1
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	695b      	ldr	r3, [r3, #20]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d004      	beq.n	800baf4 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 800baea:	69fb      	ldr	r3, [r7, #28]
 800baec:	1c5a      	adds	r2, r3, #1
 800baee:	61fa      	str	r2, [r7, #28]
 800baf0:	220a      	movs	r2, #10
 800baf2:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	689a      	ldr	r2, [r3, #8]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	441a      	add	r2, r3
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	609a      	str	r2, [r3, #8]

    while (current_item)
 800bb00:	e0a0      	b.n	800bc44 <print_object+0x1c0>
    {
        if (output_buffer->format)
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d022      	beq.n	800bb50 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	4619      	mov	r1, r3
 800bb10:	6838      	ldr	r0, [r7, #0]
 800bb12:	f7fe fbf9 	bl	800a308 <ensure>
 800bb16:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d101      	bne.n	800bb22 <print_object+0x9e>
            {
                return false;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	e0ca      	b.n	800bcb8 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 800bb22:	2300      	movs	r3, #0
 800bb24:	617b      	str	r3, [r7, #20]
 800bb26:	e007      	b.n	800bb38 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	1c5a      	adds	r2, r3, #1
 800bb2c:	61fa      	str	r2, [r7, #28]
 800bb2e:	2209      	movs	r2, #9
 800bb30:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	3301      	adds	r3, #1
 800bb36:	617b      	str	r3, [r7, #20]
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	697a      	ldr	r2, [r7, #20]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d3f2      	bcc.n	800bb28 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	689a      	ldr	r2, [r3, #8]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	441a      	add	r2, r3
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	6a1b      	ldr	r3, [r3, #32]
 800bb54:	6839      	ldr	r1, [r7, #0]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7ff f85c 	bl	800ac14 <print_string_ptr>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d101      	bne.n	800bb66 <print_object+0xe2>
        {
            return false;
 800bb62:	2300      	movs	r3, #0
 800bb64:	e0a8      	b.n	800bcb8 <print_object+0x234>
        }
        update_offset(output_buffer);
 800bb66:	6838      	ldr	r0, [r7, #0]
 800bb68:	f7fe fc68 	bl	800a43c <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	695b      	ldr	r3, [r3, #20]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d001      	beq.n	800bb78 <print_object+0xf4>
 800bb74:	2302      	movs	r3, #2
 800bb76:	e000      	b.n	800bb7a <print_object+0xf6>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800bb7c:	68f9      	ldr	r1, [r7, #12]
 800bb7e:	6838      	ldr	r0, [r7, #0]
 800bb80:	f7fe fbc2 	bl	800a308 <ensure>
 800bb84:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d101      	bne.n	800bb90 <print_object+0x10c>
        {
            return false;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	e093      	b.n	800bcb8 <print_object+0x234>
        }
        *output_pointer++ = ':';
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	1c5a      	adds	r2, r3, #1
 800bb94:	61fa      	str	r2, [r7, #28]
 800bb96:	223a      	movs	r2, #58	@ 0x3a
 800bb98:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	695b      	ldr	r3, [r3, #20]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d004      	beq.n	800bbac <print_object+0x128>
        {
            *output_pointer++ = '\t';
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	1c5a      	adds	r2, r3, #1
 800bba6:	61fa      	str	r2, [r7, #28]
 800bba8:	2209      	movs	r2, #9
 800bbaa:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	689a      	ldr	r2, [r3, #8]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	441a      	add	r2, r3
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800bbb8:	6839      	ldr	r1, [r7, #0]
 800bbba:	69b8      	ldr	r0, [r7, #24]
 800bbbc:	f7ff fc28 	bl	800b410 <print_value>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d101      	bne.n	800bbca <print_object+0x146>
        {
            return false;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	e076      	b.n	800bcb8 <print_object+0x234>
        }
        update_offset(output_buffer);
 800bbca:	6838      	ldr	r0, [r7, #0]
 800bbcc:	f7fe fc36 	bl	800a43c <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	695b      	ldr	r3, [r3, #20]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d001      	beq.n	800bbdc <print_object+0x158>
 800bbd8:	2201      	movs	r2, #1
 800bbda:	e000      	b.n	800bbde <print_object+0x15a>
 800bbdc:	2200      	movs	r2, #0
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d001      	beq.n	800bbea <print_object+0x166>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e000      	b.n	800bbec <print_object+0x168>
 800bbea:	2300      	movs	r3, #0
 800bbec:	4413      	add	r3, r2
 800bbee:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	6838      	ldr	r0, [r7, #0]
 800bbf8:	f7fe fb86 	bl	800a308 <ensure>
 800bbfc:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d101      	bne.n	800bc08 <print_object+0x184>
        {
            return false;
 800bc04:	2300      	movs	r3, #0
 800bc06:	e057      	b.n	800bcb8 <print_object+0x234>
        }
        if (current_item->next)
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d004      	beq.n	800bc1a <print_object+0x196>
        {
            *output_pointer++ = ',';
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	1c5a      	adds	r2, r3, #1
 800bc14:	61fa      	str	r2, [r7, #28]
 800bc16:	222c      	movs	r2, #44	@ 0x2c
 800bc18:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	695b      	ldr	r3, [r3, #20]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d004      	beq.n	800bc2c <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 800bc22:	69fb      	ldr	r3, [r7, #28]
 800bc24:	1c5a      	adds	r2, r3, #1
 800bc26:	61fa      	str	r2, [r7, #28]
 800bc28:	220a      	movs	r2, #10
 800bc2a:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	689a      	ldr	r2, [r3, #8]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	441a      	add	r2, r3
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	61bb      	str	r3, [r7, #24]
    while (current_item)
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f47f af5b 	bne.w	800bb02 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	695b      	ldr	r3, [r3, #20]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d003      	beq.n	800bc5c <print_object+0x1d8>
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	e000      	b.n	800bc5e <print_object+0x1da>
 800bc5c:	2302      	movs	r3, #2
 800bc5e:	4619      	mov	r1, r3
 800bc60:	6838      	ldr	r0, [r7, #0]
 800bc62:	f7fe fb51 	bl	800a308 <ensure>
 800bc66:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d101      	bne.n	800bc72 <print_object+0x1ee>
    {
        return false;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	e022      	b.n	800bcb8 <print_object+0x234>
    }
    if (output_buffer->format)
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	695b      	ldr	r3, [r3, #20]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d010      	beq.n	800bc9c <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	613b      	str	r3, [r7, #16]
 800bc7e:	e007      	b.n	800bc90 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	1c5a      	adds	r2, r3, #1
 800bc84:	61fa      	str	r2, [r7, #28]
 800bc86:	2209      	movs	r2, #9
 800bc88:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	613b      	str	r3, [r7, #16]
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	68db      	ldr	r3, [r3, #12]
 800bc94:	3b01      	subs	r3, #1
 800bc96:	693a      	ldr	r2, [r7, #16]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d3f1      	bcc.n	800bc80 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	1c5a      	adds	r2, r3, #1
 800bca0:	61fa      	str	r2, [r7, #28]
 800bca2:	227d      	movs	r2, #125	@ 0x7d
 800bca4:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	1e5a      	subs	r2, r3, #1
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	60da      	str	r2, [r3, #12]

    return true;
 800bcb6:	2301      	movs	r3, #1
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3720      	adds	r7, #32
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800bccc:	2300      	movs	r3, #0
 800bcce:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d002      	beq.n	800bcdc <get_object_item+0x1c>
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d101      	bne.n	800bce0 <get_object_item+0x20>
    {
        return NULL;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	e033      	b.n	800bd48 <get_object_item+0x88>
    }

    current_element = object->child;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d017      	beq.n	800bd1c <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800bcec:	e002      	b.n	800bcf4 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d01c      	beq.n	800bd34 <get_object_item+0x74>
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	6a1b      	ldr	r3, [r3, #32]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d018      	beq.n	800bd34 <get_object_item+0x74>
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	6a1b      	ldr	r3, [r3, #32]
 800bd06:	4619      	mov	r1, r3
 800bd08:	68b8      	ldr	r0, [r7, #8]
 800bd0a:	f7fc fa81 	bl	8008210 <strcmp>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1ec      	bne.n	800bcee <get_object_item+0x2e>
 800bd14:	e00e      	b.n	800bd34 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d008      	beq.n	800bd34 <get_object_item+0x74>
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	6a1b      	ldr	r3, [r3, #32]
 800bd26:	4619      	mov	r1, r3
 800bd28:	68b8      	ldr	r0, [r7, #8]
 800bd2a:	f7fe f91d 	bl	8009f68 <case_insensitive_strcmp>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1f0      	bne.n	800bd16 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d003      	beq.n	800bd42 <get_object_item+0x82>
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	6a1b      	ldr	r3, [r3, #32]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d101      	bne.n	800bd46 <get_object_item+0x86>
        return NULL;
 800bd42:	2300      	movs	r3, #0
 800bd44:	e000      	b.n	800bd48 <get_object_item+0x88>
    }

    return current_element;
 800bd46:	697b      	ldr	r3, [r7, #20]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3718      	adds	r7, #24
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	6839      	ldr	r1, [r7, #0]
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f7ff ffae 	bl	800bcc0 <get_object_item>
 800bd64:	4603      	mov	r3, r0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 800bd6e:	b480      	push	{r7}
 800bd70:	b083      	sub	sp, #12
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
 800bd76:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	683a      	ldr	r2, [r7, #0]
 800bd7c:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	605a      	str	r2, [r3, #4]
}
 800bd84:	bf00      	nop
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d006      	beq.n	800bdb2 <add_item_to_array+0x22>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d003      	beq.n	800bdb2 <add_item_to_array+0x22>
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d101      	bne.n	800bdb6 <add_item_to_array+0x26>
    {
        return false;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	e01e      	b.n	800bdf4 <add_item_to_array+0x64>
    }

    child = array->child;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d109      	bne.n	800bdd6 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	683a      	ldr	r2, [r7, #0]
 800bdc6:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	683a      	ldr	r2, [r7, #0]
 800bdcc:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	601a      	str	r2, [r3, #0]
 800bdd4:	e00d      	b.n	800bdf2 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d009      	beq.n	800bdf2 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	6839      	ldr	r1, [r7, #0]
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7ff ffc2 	bl	800bd6e <suffix_object>
            array->child->prev = item;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	683a      	ldr	r2, [r7, #0]
 800bdf0:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 800bdf2:	2301      	movs	r3, #1
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3710      	adds	r7, #16
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
    return (void*)string;
 800be04:	687b      	ldr	r3, [r7, #4]
}
 800be06:	4618      	mov	r0, r3
 800be08:	370c      	adds	r7, #12
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr

0800be12 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b086      	sub	sp, #24
 800be16:	af00      	add	r7, sp, #0
 800be18:	60f8      	str	r0, [r7, #12]
 800be1a:	60b9      	str	r1, [r7, #8]
 800be1c:	607a      	str	r2, [r7, #4]
 800be1e:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 800be20:	2300      	movs	r3, #0
 800be22:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 800be24:	2300      	movs	r3, #0
 800be26:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d009      	beq.n	800be42 <add_item_to_object+0x30>
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d006      	beq.n	800be42 <add_item_to_object+0x30>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d003      	beq.n	800be42 <add_item_to_object+0x30>
 800be3a:	68fa      	ldr	r2, [r7, #12]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d101      	bne.n	800be46 <add_item_to_object+0x34>
    {
        return false;
 800be42:	2300      	movs	r3, #0
 800be44:	e036      	b.n	800beb4 <add_item_to_object+0xa2>
    }

    if (constant_key)
 800be46:	6a3b      	ldr	r3, [r7, #32]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d009      	beq.n	800be60 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 800be4c:	68b8      	ldr	r0, [r7, #8]
 800be4e:	f7ff ffd5 	bl	800bdfc <cast_away_const>
 800be52:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800be5c:	613b      	str	r3, [r7, #16]
 800be5e:	e00e      	b.n	800be7e <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	68b8      	ldr	r0, [r7, #8]
 800be64:	f7fe f8ec 	bl	800a040 <cJSON_strdup>
 800be68:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d101      	bne.n	800be74 <add_item_to_object+0x62>
        {
            return false;
 800be70:	2300      	movs	r3, #0
 800be72:	e01f      	b.n	800beb4 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800be7c:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be86:	2b00      	cmp	r3, #0
 800be88:	d109      	bne.n	800be9e <add_item_to_object+0x8c>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a1b      	ldr	r3, [r3, #32]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d005      	beq.n	800be9e <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	6a12      	ldr	r2, [r2, #32]
 800be9a:	4610      	mov	r0, r2
 800be9c:	4798      	blx	r3
    }

    item->string = new_key;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	697a      	ldr	r2, [r7, #20]
 800bea2:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	693a      	ldr	r2, [r7, #16]
 800bea8:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800beaa:	6879      	ldr	r1, [r7, #4]
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f7ff ff6f 	bl	800bd90 <add_item_to_array>
 800beb2:	4603      	mov	r3, r0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3718      	adds	r7, #24
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b088      	sub	sp, #32
 800bec0:	af02      	add	r7, sp, #8
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 800beca:	ed97 0b00 	vldr	d0, [r7]
 800bece:	f000 f81b 	bl	800bf08 <cJSON_CreateNumber>
 800bed2:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 800bed4:	2300      	movs	r3, #0
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	4b09      	ldr	r3, [pc, #36]	@ (800bf00 <cJSON_AddNumberToObject+0x44>)
 800beda:	697a      	ldr	r2, [r7, #20]
 800bedc:	68b9      	ldr	r1, [r7, #8]
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f7ff ff97 	bl	800be12 <add_item_to_object>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d001      	beq.n	800beee <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	e003      	b.n	800bef6 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 800beee:	6978      	ldr	r0, [r7, #20]
 800bef0:	f7fe f8e4 	bl	800a0bc <cJSON_Delete>
    return NULL;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3718      	adds	r7, #24
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	20000000 	.word	0x20000000
 800bf04:	00000000 	.word	0x00000000

0800bf08 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 800bf12:	481f      	ldr	r0, [pc, #124]	@ (800bf90 <cJSON_CreateNumber+0x88>)
 800bf14:	f7fe f8bc 	bl	800a090 <cJSON_New_Item>
 800bf18:	60f8      	str	r0, [r7, #12]
    if(item)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d02c      	beq.n	800bf7a <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2208      	movs	r2, #8
 800bf24:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 800bf26:	68f9      	ldr	r1, [r7, #12]
 800bf28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf2c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 800bf30:	a315      	add	r3, pc, #84	@ (adr r3, 800bf88 <cJSON_CreateNumber+0x80>)
 800bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf36:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf3a:	f7fc fe13 	bl	8008b64 <__aeabi_dcmpge>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d004      	beq.n	800bf4e <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800bf4a:	615a      	str	r2, [r3, #20]
 800bf4c:	e015      	b.n	800bf7a <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 800bf4e:	f04f 0200 	mov.w	r2, #0
 800bf52:	4b10      	ldr	r3, [pc, #64]	@ (800bf94 <cJSON_CreateNumber+0x8c>)
 800bf54:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf58:	f7fc fdfa 	bl	8008b50 <__aeabi_dcmple>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d004      	beq.n	800bf6c <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bf68:	615a      	str	r2, [r3, #20]
 800bf6a:	e006      	b.n	800bf7a <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 800bf6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf70:	f7fc fe22 	bl	8008bb8 <__aeabi_d2iz>
 800bf74:	4602      	mov	r2, r0
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	f3af 8000 	nop.w
 800bf88:	ffc00000 	.word	0xffc00000
 800bf8c:	41dfffff 	.word	0x41dfffff
 800bf90:	20000000 	.word	0x20000000
 800bf94:	c1e00000 	.word	0xc1e00000

0800bf98 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800bf9e:	4807      	ldr	r0, [pc, #28]	@ (800bfbc <cJSON_CreateObject+0x24>)
 800bfa0:	f7fe f876 	bl	800a090 <cJSON_New_Item>
 800bfa4:	6078      	str	r0, [r7, #4]
    if (item)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d002      	beq.n	800bfb2 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2240      	movs	r2, #64	@ 0x40
 800bfb0:	60da      	str	r2, [r3, #12]
    }

    return item;
 800bfb2:	687b      	ldr	r3, [r7, #4]
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3708      	adds	r7, #8
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	20000000 	.word	0x20000000

0800bfc0 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b083      	sub	sp, #12
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d101      	bne.n	800bfd2 <cJSON_IsNumber+0x12>
    {
        return false;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	e007      	b.n	800bfe2 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	2b08      	cmp	r3, #8
 800bfda:	bf0c      	ite	eq
 800bfdc:	2301      	moveq	r3, #1
 800bfde:	2300      	movne	r3, #0
 800bfe0:	b2db      	uxtb	r3, r3
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	370c      	adds	r7, #12
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr

0800bfee <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 800bfee:	b480      	push	{r7}
 800bff0:	b083      	sub	sp, #12
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d101      	bne.n	800c000 <cJSON_IsString+0x12>
    {
        return false;
 800bffc:	2300      	movs	r3, #0
 800bffe:	e007      	b.n	800c010 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	b2db      	uxtb	r3, r3
 800c006:	2b10      	cmp	r3, #16
 800c008:	bf0c      	ite	eq
 800c00a:	2301      	moveq	r3, #1
 800c00c:	2300      	movne	r3, #0
 800c00e:	b2db      	uxtb	r3, r3
}
 800c010:	4618      	mov	r0, r3
 800c012:	370c      	adds	r7, #12
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr

0800c01c <Display_Handler>:

button_position_t current_buttons[6];
int button_count = 0;

void Display_Handler(void *param)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Menu_Handler();
 800c024:	f001 f9a0 	bl	800d368 <Menu_Handler>
 800c028:	e7fc      	b.n	800c024 <Display_Handler+0x8>
	...

0800c02c <updateToDisplayMenu>:
	}
}

void updateToDisplayMenu(void)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	af00      	add	r7, sp, #0
	if(current_menu == MENU_TOTAL_CONTROL)
 800c030:	4b10      	ldr	r3, [pc, #64]	@ (800c074 <updateToDisplayMenu+0x48>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2b01      	cmp	r3, #1
 800c036:	d106      	bne.n	800c046 <updateToDisplayMenu+0x1a>
	{
		last_selection = current_selection;
 800c038:	4b0f      	ldr	r3, [pc, #60]	@ (800c078 <updateToDisplayMenu+0x4c>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a0f      	ldr	r2, [pc, #60]	@ (800c07c <updateToDisplayMenu+0x50>)
 800c03e:	6013      	str	r3, [r2, #0]
		displayTotalControlMenu();
 800c040:	f000 fb44 	bl	800c6cc <displayTotalControlMenu>
	else if(current_menu == MENU_DEVICE_CONTROL)
	{
		last_selection = current_selection;
		displayDeviceControlMenu();
	}
}
 800c044:	e014      	b.n	800c070 <updateToDisplayMenu+0x44>
	else if(current_menu == MENU_SEPARATE_CONTROL)
 800c046:	4b0b      	ldr	r3, [pc, #44]	@ (800c074 <updateToDisplayMenu+0x48>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	d106      	bne.n	800c05c <updateToDisplayMenu+0x30>
		last_selection = current_selection;
 800c04e:	4b0a      	ldr	r3, [pc, #40]	@ (800c078 <updateToDisplayMenu+0x4c>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a0a      	ldr	r2, [pc, #40]	@ (800c07c <updateToDisplayMenu+0x50>)
 800c054:	6013      	str	r3, [r2, #0]
		displaySeparateControlMenu();
 800c056:	f000 fc17 	bl	800c888 <displaySeparateControlMenu>
}
 800c05a:	e009      	b.n	800c070 <updateToDisplayMenu+0x44>
	else if(current_menu == MENU_DEVICE_CONTROL)
 800c05c:	4b05      	ldr	r3, [pc, #20]	@ (800c074 <updateToDisplayMenu+0x48>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2b03      	cmp	r3, #3
 800c062:	d105      	bne.n	800c070 <updateToDisplayMenu+0x44>
		last_selection = current_selection;
 800c064:	4b04      	ldr	r3, [pc, #16]	@ (800c078 <updateToDisplayMenu+0x4c>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a04      	ldr	r2, [pc, #16]	@ (800c07c <updateToDisplayMenu+0x50>)
 800c06a:	6013      	str	r3, [r2, #0]
		displayDeviceControlMenu();
 800c06c:	f000 fce6 	bl	800ca3c <displayDeviceControlMenu>
}
 800c070:	bf00      	nop
 800c072:	bd80      	pop	{r7, pc}
 800c074:	20000264 	.word	0x20000264
 800c078:	20000268 	.word	0x20000268
 800c07c:	2000000c 	.word	0x2000000c

0800c080 <drawSingleButton>:


void drawSingleButton(int x, int y, int width, int height, char* text, int selected, int button_id) {
 800c080:	b590      	push	{r4, r7, lr}
 800c082:	b089      	sub	sp, #36	@ 0x24
 800c084:	af04      	add	r7, sp, #16
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	607a      	str	r2, [r7, #4]
 800c08c:	603b      	str	r3, [r7, #0]
    fillRect(x-1, y-1, width+2, height+2, BLACK);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	b29b      	uxth	r3, r3
 800c092:	3b01      	subs	r3, #1
 800c094:	b29b      	uxth	r3, r3
 800c096:	b218      	sxth	r0, r3
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	3b01      	subs	r3, #1
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	b219      	sxth	r1, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	3302      	adds	r3, #2
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	b21a      	sxth	r2, r3
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	3302      	adds	r3, #2
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	b21b      	sxth	r3, r3
 800c0b6:	2400      	movs	r4, #0
 800c0b8:	9400      	str	r4, [sp, #0]
 800c0ba:	f7fc ffa4 	bl	8009006 <fillRect>

    if (selected) {
 800c0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d03e      	beq.n	800c142 <drawSingleButton+0xc2>
        drawRoundRect(x-1, y-1, width+2, height+2, 3, WHITE);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	b218      	sxth	r0, r3
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	b219      	sxth	r1, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	3302      	adds	r3, #2
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	b21a      	sxth	r2, r3
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	3302      	adds	r3, #2
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	b21b      	sxth	r3, r3
 800c0ec:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800c0f0:	9401      	str	r4, [sp, #4]
 800c0f2:	2403      	movs	r4, #3
 800c0f4:	9400      	str	r4, [sp, #0]
 800c0f6:	f7fd faa7 	bl	8009648 <drawRoundRect>
        fillRoundRect(x, y, width, height, 3, GREEN);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	b218      	sxth	r0, r3
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	b219      	sxth	r1, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	b21a      	sxth	r2, r3
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	b21b      	sxth	r3, r3
 800c10a:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 800c10e:	9401      	str	r4, [sp, #4]
 800c110:	2403      	movs	r4, #3
 800c112:	9400      	str	r4, [sp, #0]
 800c114:	f7fd fb65 	bl	80097e2 <fillRoundRect>
        ST7735_WriteString(x+5, y+4, text, Font_7x10, BLACK, GREEN);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	3305      	adds	r3, #5
 800c11e:	b298      	uxth	r0, r3
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	b29b      	uxth	r3, r3
 800c124:	3304      	adds	r3, #4
 800c126:	b299      	uxth	r1, r3
 800c128:	4b4d      	ldr	r3, [pc, #308]	@ (800c260 <drawSingleButton+0x1e0>)
 800c12a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800c12e:	9202      	str	r2, [sp, #8]
 800c130:	2200      	movs	r2, #0
 800c132:	9201      	str	r2, [sp, #4]
 800c134:	685a      	ldr	r2, [r3, #4]
 800c136:	9200      	str	r2, [sp, #0]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	6a3a      	ldr	r2, [r7, #32]
 800c13c:	f7fd fe38 	bl	8009db0 <ST7735_WriteString>
 800c140:	e03e      	b.n	800c1c0 <drawSingleButton+0x140>
    } else {
        drawRoundRect(x-1, y-1, width+2, height+2, 3, WHITE);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	b29b      	uxth	r3, r3
 800c146:	3b01      	subs	r3, #1
 800c148:	b29b      	uxth	r3, r3
 800c14a:	b218      	sxth	r0, r3
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	b29b      	uxth	r3, r3
 800c150:	3b01      	subs	r3, #1
 800c152:	b29b      	uxth	r3, r3
 800c154:	b219      	sxth	r1, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	b29b      	uxth	r3, r3
 800c15a:	3302      	adds	r3, #2
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	b21a      	sxth	r2, r3
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	b29b      	uxth	r3, r3
 800c164:	3302      	adds	r3, #2
 800c166:	b29b      	uxth	r3, r3
 800c168:	b21b      	sxth	r3, r3
 800c16a:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800c16e:	9401      	str	r4, [sp, #4]
 800c170:	2403      	movs	r4, #3
 800c172:	9400      	str	r4, [sp, #0]
 800c174:	f7fd fa68 	bl	8009648 <drawRoundRect>
        fillRoundRect(x, y, width, height, 3, GRAY);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	b218      	sxth	r0, r3
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	b219      	sxth	r1, r3
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	b21a      	sxth	r2, r3
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	b21b      	sxth	r3, r3
 800c188:	f242 1404 	movw	r4, #8452	@ 0x2104
 800c18c:	9401      	str	r4, [sp, #4]
 800c18e:	2403      	movs	r4, #3
 800c190:	9400      	str	r4, [sp, #0]
 800c192:	f7fd fb26 	bl	80097e2 <fillRoundRect>
        ST7735_WriteString(x+5, y+4, text, Font_7x10, WHITE, GRAY);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	b29b      	uxth	r3, r3
 800c19a:	3305      	adds	r3, #5
 800c19c:	b298      	uxth	r0, r3
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	3304      	adds	r3, #4
 800c1a4:	b299      	uxth	r1, r3
 800c1a6:	4b2e      	ldr	r3, [pc, #184]	@ (800c260 <drawSingleButton+0x1e0>)
 800c1a8:	f242 1204 	movw	r2, #8452	@ 0x2104
 800c1ac:	9202      	str	r2, [sp, #8]
 800c1ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c1b2:	9201      	str	r2, [sp, #4]
 800c1b4:	685a      	ldr	r2, [r3, #4]
 800c1b6:	9200      	str	r2, [sp, #0]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	6a3a      	ldr	r2, [r7, #32]
 800c1bc:	f7fd fdf8 	bl	8009db0 <ST7735_WriteString>
    }

    // Store button position AND TEXT for future updates
    if (button_id < 6) {
 800c1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c2:	2b05      	cmp	r3, #5
 800c1c4:	dc48      	bgt.n	800c258 <drawSingleButton+0x1d8>
        current_buttons[button_id].x = x;
 800c1c6:	4927      	ldr	r1, [pc, #156]	@ (800c264 <drawSingleButton+0x1e4>)
 800c1c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1ca:	4613      	mov	r3, r2
 800c1cc:	005b      	lsls	r3, r3, #1
 800c1ce:	4413      	add	r3, r2
 800c1d0:	011b      	lsls	r3, r3, #4
 800c1d2:	440b      	add	r3, r1
 800c1d4:	68fa      	ldr	r2, [r7, #12]
 800c1d6:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].y = y;
 800c1d8:	4922      	ldr	r1, [pc, #136]	@ (800c264 <drawSingleButton+0x1e4>)
 800c1da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1dc:	4613      	mov	r3, r2
 800c1de:	005b      	lsls	r3, r3, #1
 800c1e0:	4413      	add	r3, r2
 800c1e2:	011b      	lsls	r3, r3, #4
 800c1e4:	440b      	add	r3, r1
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].width = width;
 800c1ec:	491d      	ldr	r1, [pc, #116]	@ (800c264 <drawSingleButton+0x1e4>)
 800c1ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	005b      	lsls	r3, r3, #1
 800c1f4:	4413      	add	r3, r2
 800c1f6:	011b      	lsls	r3, r3, #4
 800c1f8:	440b      	add	r3, r1
 800c1fa:	3308      	adds	r3, #8
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].height = height;
 800c200:	4918      	ldr	r1, [pc, #96]	@ (800c264 <drawSingleButton+0x1e4>)
 800c202:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c204:	4613      	mov	r3, r2
 800c206:	005b      	lsls	r3, r3, #1
 800c208:	4413      	add	r3, r2
 800c20a:	011b      	lsls	r3, r3, #4
 800c20c:	440b      	add	r3, r1
 800c20e:	330c      	adds	r3, #12
 800c210:	683a      	ldr	r2, [r7, #0]
 800c212:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].button_id = button_id;
 800c214:	4913      	ldr	r1, [pc, #76]	@ (800c264 <drawSingleButton+0x1e4>)
 800c216:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c218:	4613      	mov	r3, r2
 800c21a:	005b      	lsls	r3, r3, #1
 800c21c:	4413      	add	r3, r2
 800c21e:	011b      	lsls	r3, r3, #4
 800c220:	440b      	add	r3, r1
 800c222:	3310      	adds	r3, #16
 800c224:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c226:	601a      	str	r2, [r3, #0]
        strncpy(current_buttons[button_id].text, text, 24);
 800c228:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c22a:	4613      	mov	r3, r2
 800c22c:	005b      	lsls	r3, r3, #1
 800c22e:	4413      	add	r3, r2
 800c230:	011b      	lsls	r3, r3, #4
 800c232:	3310      	adds	r3, #16
 800c234:	4a0b      	ldr	r2, [pc, #44]	@ (800c264 <drawSingleButton+0x1e4>)
 800c236:	4413      	add	r3, r2
 800c238:	3304      	adds	r3, #4
 800c23a:	2218      	movs	r2, #24
 800c23c:	6a39      	ldr	r1, [r7, #32]
 800c23e:	4618      	mov	r0, r3
 800c240:	f009 ffa4 	bl	801618c <strncpy>
        current_buttons[button_id].text[24] = '\0';
 800c244:	4907      	ldr	r1, [pc, #28]	@ (800c264 <drawSingleButton+0x1e4>)
 800c246:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c248:	4613      	mov	r3, r2
 800c24a:	005b      	lsls	r3, r3, #1
 800c24c:	4413      	add	r3, r2
 800c24e:	011b      	lsls	r3, r3, #4
 800c250:	440b      	add	r3, r1
 800c252:	332c      	adds	r3, #44	@ 0x2c
 800c254:	2200      	movs	r2, #0
 800c256:	701a      	strb	r2, [r3, #0]
    }
}
 800c258:	bf00      	nop
 800c25a:	3714      	adds	r7, #20
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd90      	pop	{r4, r7, pc}
 800c260:	20000024 	.word	0x20000024
 800c264:	20000290 	.word	0x20000290

0800c268 <updateButtonSelection>:

void updateButtonSelection(int old_selection, int new_selection) {
 800c268:	b590      	push	{r4, r7, lr}
 800c26a:	b089      	sub	sp, #36	@ 0x24
 800c26c:	af04      	add	r7, sp, #16
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
    // Update old button (unselect)
    if (old_selection >= 0 && old_selection < button_count) {
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b00      	cmp	r3, #0
 800c276:	db74      	blt.n	800c362 <updateButtonSelection+0xfa>
 800c278:	4b77      	ldr	r3, [pc, #476]	@ (800c458 <updateButtonSelection+0x1f0>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	429a      	cmp	r2, r3
 800c280:	da6f      	bge.n	800c362 <updateButtonSelection+0xfa>
        button_position_t *old_btn = &current_buttons[old_selection];
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	4613      	mov	r3, r2
 800c286:	005b      	lsls	r3, r3, #1
 800c288:	4413      	add	r3, r2
 800c28a:	011b      	lsls	r3, r3, #4
 800c28c:	4a73      	ldr	r2, [pc, #460]	@ (800c45c <updateButtonSelection+0x1f4>)
 800c28e:	4413      	add	r3, r2
 800c290:	60fb      	str	r3, [r7, #12]

        // Clear and redraw unselected button with text
        fillRect(old_btn->x-1, old_btn->y-1, old_btn->width+2, old_btn->height+2, BLACK);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	b29b      	uxth	r3, r3
 800c298:	3b01      	subs	r3, #1
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	b218      	sxth	r0, r3
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	3b01      	subs	r3, #1
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	b219      	sxth	r1, r3
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	3302      	adds	r3, #2
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	b21a      	sxth	r2, r3
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	3302      	adds	r3, #2
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	b21b      	sxth	r3, r3
 800c2c2:	2400      	movs	r4, #0
 800c2c4:	9400      	str	r4, [sp, #0]
 800c2c6:	f7fc fe9e 	bl	8009006 <fillRect>
        drawRoundRect(old_btn->x-1, old_btn->y-1, old_btn->width+2, old_btn->height+2, 3, WHITE);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	b218      	sxth	r0, r3
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	b219      	sxth	r1, r3
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	3302      	adds	r3, #2
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	b21a      	sxth	r2, r3
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	3302      	adds	r3, #2
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	b21b      	sxth	r3, r3
 800c2fa:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800c2fe:	9401      	str	r4, [sp, #4]
 800c300:	2403      	movs	r4, #3
 800c302:	9400      	str	r4, [sp, #0]
 800c304:	f7fd f9a0 	bl	8009648 <drawRoundRect>
        fillRoundRect(old_btn->x, old_btn->y, old_btn->width, old_btn->height, 3, GRAY);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	b218      	sxth	r0, r3
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	b219      	sxth	r1, r3
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	b21a      	sxth	r2, r3
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	b21b      	sxth	r3, r3
 800c320:	f242 1404 	movw	r4, #8452	@ 0x2104
 800c324:	9401      	str	r4, [sp, #4]
 800c326:	2403      	movs	r4, #3
 800c328:	9400      	str	r4, [sp, #0]
 800c32a:	f7fd fa5a 	bl	80097e2 <fillRoundRect>
        ST7735_WriteString(old_btn->x+5, old_btn->y+4, old_btn->text, Font_7x10, WHITE, GRAY);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	b29b      	uxth	r3, r3
 800c334:	3305      	adds	r3, #5
 800c336:	b298      	uxth	r0, r3
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	3304      	adds	r3, #4
 800c340:	b299      	uxth	r1, r3
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	f103 0414 	add.w	r4, r3, #20
 800c348:	4b45      	ldr	r3, [pc, #276]	@ (800c460 <updateButtonSelection+0x1f8>)
 800c34a:	f242 1204 	movw	r2, #8452	@ 0x2104
 800c34e:	9202      	str	r2, [sp, #8]
 800c350:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c354:	9201      	str	r2, [sp, #4]
 800c356:	685a      	ldr	r2, [r3, #4]
 800c358:	9200      	str	r2, [sp, #0]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4622      	mov	r2, r4
 800c35e:	f7fd fd27 	bl	8009db0 <ST7735_WriteString>
    }

    // Update new button (select)
    if (new_selection >= 0 && new_selection < button_count) {
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	db73      	blt.n	800c450 <updateButtonSelection+0x1e8>
 800c368:	4b3b      	ldr	r3, [pc, #236]	@ (800c458 <updateButtonSelection+0x1f0>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	683a      	ldr	r2, [r7, #0]
 800c36e:	429a      	cmp	r2, r3
 800c370:	da6e      	bge.n	800c450 <updateButtonSelection+0x1e8>
        button_position_t *new_btn = &current_buttons[new_selection];
 800c372:	683a      	ldr	r2, [r7, #0]
 800c374:	4613      	mov	r3, r2
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	4413      	add	r3, r2
 800c37a:	011b      	lsls	r3, r3, #4
 800c37c:	4a37      	ldr	r2, [pc, #220]	@ (800c45c <updateButtonSelection+0x1f4>)
 800c37e:	4413      	add	r3, r2
 800c380:	60bb      	str	r3, [r7, #8]

        // Clear and redraw selected button with text
        fillRect(new_btn->x-1, new_btn->y-1, new_btn->width+2, new_btn->height+2, BLACK);
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	b29b      	uxth	r3, r3
 800c388:	3b01      	subs	r3, #1
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	b218      	sxth	r0, r3
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	b29b      	uxth	r3, r3
 800c394:	3b01      	subs	r3, #1
 800c396:	b29b      	uxth	r3, r3
 800c398:	b219      	sxth	r1, r3
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	3302      	adds	r3, #2
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	b21a      	sxth	r2, r3
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	b29b      	uxth	r3, r3
 800c3ac:	3302      	adds	r3, #2
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	b21b      	sxth	r3, r3
 800c3b2:	2400      	movs	r4, #0
 800c3b4:	9400      	str	r4, [sp, #0]
 800c3b6:	f7fc fe26 	bl	8009006 <fillRect>
        drawRoundRect(new_btn->x-1, new_btn->y-1, new_btn->width+2, new_btn->height+2, 3, WHITE);
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	b218      	sxth	r0, r3
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	b219      	sxth	r1, r3
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	3302      	adds	r3, #2
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	b21a      	sxth	r2, r3
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	3302      	adds	r3, #2
 800c3e6:	b29b      	uxth	r3, r3
 800c3e8:	b21b      	sxth	r3, r3
 800c3ea:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800c3ee:	9401      	str	r4, [sp, #4]
 800c3f0:	2403      	movs	r4, #3
 800c3f2:	9400      	str	r4, [sp, #0]
 800c3f4:	f7fd f928 	bl	8009648 <drawRoundRect>
        fillRoundRect(new_btn->x, new_btn->y, new_btn->width, new_btn->height, 3, GREEN);
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	b218      	sxth	r0, r3
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	b219      	sxth	r1, r3
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	b21a      	sxth	r2, r3
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	b21b      	sxth	r3, r3
 800c410:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 800c414:	9401      	str	r4, [sp, #4]
 800c416:	2403      	movs	r4, #3
 800c418:	9400      	str	r4, [sp, #0]
 800c41a:	f7fd f9e2 	bl	80097e2 <fillRoundRect>
        ST7735_WriteString(new_btn->x+5, new_btn->y+4, new_btn->text, Font_7x10, BLACK, GREEN);
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	b29b      	uxth	r3, r3
 800c424:	3305      	adds	r3, #5
 800c426:	b298      	uxth	r0, r3
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	3304      	adds	r3, #4
 800c430:	b299      	uxth	r1, r3
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	f103 0414 	add.w	r4, r3, #20
 800c438:	4b09      	ldr	r3, [pc, #36]	@ (800c460 <updateButtonSelection+0x1f8>)
 800c43a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800c43e:	9202      	str	r2, [sp, #8]
 800c440:	2200      	movs	r2, #0
 800c442:	9201      	str	r2, [sp, #4]
 800c444:	685a      	ldr	r2, [r3, #4]
 800c446:	9200      	str	r2, [sp, #0]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4622      	mov	r2, r4
 800c44c:	f7fd fcb0 	bl	8009db0 <ST7735_WriteString>
    }
}
 800c450:	bf00      	nop
 800c452:	3714      	adds	r7, #20
 800c454:	46bd      	mov	sp, r7
 800c456:	bd90      	pop	{r4, r7, pc}
 800c458:	200003b0 	.word	0x200003b0
 800c45c:	20000290 	.word	0x20000290
 800c460:	20000024 	.word	0x20000024

0800c464 <updateStatusInfo>:
    char status[8];
    snprintf(status, sizeof(status), "[%s]", is_on ? "ON" : "OFF");
    ST7735_WriteString(text_x + 70, text_y, status, Font_7x10, WHITE, GRAY);
}

void updateStatusInfo(char* status, uint16_t color) {
 800c464:	b580      	push	{r7, lr}
 800c466:	b086      	sub	sp, #24
 800c468:	af04      	add	r7, sp, #16
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	460b      	mov	r3, r1
 800c46e:	807b      	strh	r3, [r7, #2]
    fillRect(MARGIN_X, TITLE_HEIGHT + 5, BUTTON_WIDTH, 12, BLACK);
 800c470:	2300      	movs	r3, #0
 800c472:	9300      	str	r3, [sp, #0]
 800c474:	230c      	movs	r3, #12
 800c476:	228c      	movs	r2, #140	@ 0x8c
 800c478:	2114      	movs	r1, #20
 800c47a:	200a      	movs	r0, #10
 800c47c:	f7fc fdc3 	bl	8009006 <fillRect>
    ST7735_WriteString(MARGIN_X + 2, TITLE_HEIGHT + 7, status, Font_7x10, color, BLACK);
 800c480:	4b08      	ldr	r3, [pc, #32]	@ (800c4a4 <updateStatusInfo+0x40>)
 800c482:	2200      	movs	r2, #0
 800c484:	9202      	str	r2, [sp, #8]
 800c486:	887a      	ldrh	r2, [r7, #2]
 800c488:	9201      	str	r2, [sp, #4]
 800c48a:	685a      	ldr	r2, [r3, #4]
 800c48c:	9200      	str	r2, [sp, #0]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	2116      	movs	r1, #22
 800c494:	200c      	movs	r0, #12
 800c496:	f7fd fc8b 	bl	8009db0 <ST7735_WriteString>
}
 800c49a:	bf00      	nop
 800c49c:	3708      	adds	r7, #8
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	20000024 	.word	0x20000024

0800c4a8 <updateDeviceCount>:

void updateDeviceCount(int total_on) {
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b08c      	sub	sp, #48	@ 0x30
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
    char status[35];
    if(total_on > 0)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	dd0e      	ble.n	800c4d4 <updateDeviceCount+0x2c>
    {
    	snprintf(status, sizeof(status), "Status: %d/4 devices", total_on);
 800c4b6:	f107 000c 	add.w	r0, r7, #12
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a0e      	ldr	r2, [pc, #56]	@ (800c4f8 <updateDeviceCount+0x50>)
 800c4be:	2123      	movs	r1, #35	@ 0x23
 800c4c0:	f009 fcec 	bl	8015e9c <sniprintf>
    	updateStatusInfo(status, GREEN);
 800c4c4:	f107 030c 	add.w	r3, r7, #12
 800c4c8:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7ff ffc9 	bl	800c464 <updateStatusInfo>
    else
    {
    	snprintf(status, sizeof(status), "Status: %d/4 devices", total_on);
		updateStatusInfo(status, RED);
    }
}
 800c4d2:	e00d      	b.n	800c4f0 <updateDeviceCount+0x48>
    	snprintf(status, sizeof(status), "Status: %d/4 devices", total_on);
 800c4d4:	f107 000c 	add.w	r0, r7, #12
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4a07      	ldr	r2, [pc, #28]	@ (800c4f8 <updateDeviceCount+0x50>)
 800c4dc:	2123      	movs	r1, #35	@ 0x23
 800c4de:	f009 fcdd 	bl	8015e9c <sniprintf>
		updateStatusInfo(status, RED);
 800c4e2:	f107 030c 	add.w	r3, r7, #12
 800c4e6:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7ff ffba 	bl	800c464 <updateStatusInfo>
}
 800c4f0:	bf00      	nop
 800c4f2:	3730      	adds	r7, #48	@ 0x30
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	0801891c 	.word	0x0801891c

0800c4fc <updateDeviceControlStatus>:

void updateDeviceControlStatus(int device, bool is_on) {
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b08a      	sub	sp, #40	@ 0x28
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	460b      	mov	r3, r1
 800c506:	70fb      	strb	r3, [r7, #3]
    char status[25];
    snprintf(status, sizeof(status), "Status: %s", is_on ? "ON" : "OFF");
 800c508:	78fb      	ldrb	r3, [r7, #3]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d001      	beq.n	800c512 <updateDeviceControlStatus+0x16>
 800c50e:	4b0e      	ldr	r3, [pc, #56]	@ (800c548 <updateDeviceControlStatus+0x4c>)
 800c510:	e000      	b.n	800c514 <updateDeviceControlStatus+0x18>
 800c512:	4b0e      	ldr	r3, [pc, #56]	@ (800c54c <updateDeviceControlStatus+0x50>)
 800c514:	f107 000c 	add.w	r0, r7, #12
 800c518:	4a0d      	ldr	r2, [pc, #52]	@ (800c550 <updateDeviceControlStatus+0x54>)
 800c51a:	2119      	movs	r1, #25
 800c51c:	f009 fcbe 	bl	8015e9c <sniprintf>
    uint16_t status_color = is_on ? GREEN : RED;
 800c520:	78fb      	ldrb	r3, [r7, #3]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d002      	beq.n	800c52c <updateDeviceControlStatus+0x30>
 800c526:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800c52a:	e001      	b.n	800c530 <updateDeviceControlStatus+0x34>
 800c52c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800c530:	84fb      	strh	r3, [r7, #38]	@ 0x26
    updateStatusInfo(status, status_color);
 800c532:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c534:	f107 030c 	add.w	r3, r7, #12
 800c538:	4611      	mov	r1, r2
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7ff ff92 	bl	800c464 <updateStatusInfo>
}
 800c540:	bf00      	nop
 800c542:	3728      	adds	r7, #40	@ 0x28
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	0801890c 	.word	0x0801890c
 800c54c:	08018910 	.word	0x08018910
 800c550:	08018934 	.word	0x08018934

0800c554 <drawTitleBar>:
        fillRoundRect(x, y, width, height, 3, GRAY);
        ST7735_WriteString(x+5, y+4, text, Font_7x10, WHITE, GRAY);
    }
}

void drawTitleBar(char* title) {
 800c554:	b580      	push	{r7, lr}
 800c556:	b08a      	sub	sp, #40	@ 0x28
 800c558:	af04      	add	r7, sp, #16
 800c55a:	6078      	str	r0, [r7, #4]
    fillRect(0, 0, DISPLAY_WIDTH, TITLE_HEIGHT, BLUE);
 800c55c:	231f      	movs	r3, #31
 800c55e:	9300      	str	r3, [sp, #0]
 800c560:	230f      	movs	r3, #15
 800c562:	22a0      	movs	r2, #160	@ 0xa0
 800c564:	2100      	movs	r1, #0
 800c566:	2000      	movs	r0, #0
 800c568:	f7fc fd4d 	bl	8009006 <fillRect>
    int title_length = strlen(title);
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f7fb fe59 	bl	8008224 <strlen>
 800c572:	4603      	mov	r3, r0
 800c574:	613b      	str	r3, [r7, #16]
    int title_width = title_length * 7;
 800c576:	693a      	ldr	r2, [r7, #16]
 800c578:	4613      	mov	r3, r2
 800c57a:	00db      	lsls	r3, r3, #3
 800c57c:	1a9b      	subs	r3, r3, r2
 800c57e:	60fb      	str	r3, [r7, #12]
    int center_x = (DISPLAY_WIDTH - title_width) / 2;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 800c586:	0fda      	lsrs	r2, r3, #31
 800c588:	4413      	add	r3, r2
 800c58a:	105b      	asrs	r3, r3, #1
 800c58c:	617b      	str	r3, [r7, #20]

    if (center_x < 2) center_x = 2;
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	2b01      	cmp	r3, #1
 800c592:	dc01      	bgt.n	800c598 <drawTitleBar+0x44>
 800c594:	2302      	movs	r3, #2
 800c596:	617b      	str	r3, [r7, #20]

    ST7735_WriteString(center_x, 2, title, Font_7x10, WHITE, BLUE);
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	b298      	uxth	r0, r3
 800c59c:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d0 <drawTitleBar+0x7c>)
 800c59e:	221f      	movs	r2, #31
 800c5a0:	9202      	str	r2, [sp, #8]
 800c5a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c5a6:	9201      	str	r2, [sp, #4]
 800c5a8:	685a      	ldr	r2, [r3, #4]
 800c5aa:	9200      	str	r2, [sp, #0]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	2102      	movs	r1, #2
 800c5b2:	f7fd fbfd 	bl	8009db0 <ST7735_WriteString>

    drawLine(0, TITLE_HEIGHT, DISPLAY_WIDTH, TITLE_HEIGHT, WHITE);
 800c5b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c5ba:	9300      	str	r3, [sp, #0]
 800c5bc:	230f      	movs	r3, #15
 800c5be:	22a0      	movs	r2, #160	@ 0xa0
 800c5c0:	210f      	movs	r1, #15
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	f7fc fe3c 	bl	8009240 <drawLine>
}
 800c5c8:	bf00      	nop
 800c5ca:	3718      	adds	r7, #24
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	20000024 	.word	0x20000024

0800c5d4 <displayMainMenu>:
    fillRect(MARGIN_X, TITLE_HEIGHT + 5, BUTTON_WIDTH, 12, BLACK);
    ST7735_WriteString(MARGIN_X + 2, TITLE_HEIGHT + 7, status, Font_7x10, color, BLACK);
}


void displayMainMenu(void) {
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b086      	sub	sp, #24
 800c5d8:	af04      	add	r7, sp, #16
	if (current_menu != last_menu || !menu_drawn) {
 800c5da:	4b32      	ldr	r3, [pc, #200]	@ (800c6a4 <displayMainMenu+0xd0>)
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	4b32      	ldr	r3, [pc, #200]	@ (800c6a8 <displayMainMenu+0xd4>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d106      	bne.n	800c5f4 <displayMainMenu+0x20>
 800c5e6:	4b31      	ldr	r3, [pc, #196]	@ (800c6ac <displayMainMenu+0xd8>)
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	f083 0301 	eor.w	r3, r3, #1
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d012      	beq.n	800c61a <displayMainMenu+0x46>
		ST7735_SetRotation(1);
 800c5f4:	2001      	movs	r0, #1
 800c5f6:	f7fd faa5 	bl	8009b44 <ST7735_SetRotation>
		fillScreen(BLACK);
 800c5fa:	2000      	movs	r0, #0
 800c5fc:	f7fd f96a 	bl	80098d4 <fillScreen>
		drawTitleBar("HOME MENU");
 800c600:	482b      	ldr	r0, [pc, #172]	@ (800c6b0 <displayMainMenu+0xdc>)
 800c602:	f7ff ffa7 	bl	800c554 <drawTitleBar>
		menu_drawn = true;
 800c606:	4b29      	ldr	r3, [pc, #164]	@ (800c6ac <displayMainMenu+0xd8>)
 800c608:	2201      	movs	r2, #1
 800c60a:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 800c60c:	4b29      	ldr	r3, [pc, #164]	@ (800c6b4 <displayMainMenu+0xe0>)
 800c60e:	2200      	movs	r2, #0
 800c610:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 800c612:	4b24      	ldr	r3, [pc, #144]	@ (800c6a4 <displayMainMenu+0xd0>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	4a24      	ldr	r2, [pc, #144]	@ (800c6a8 <displayMainMenu+0xd4>)
 800c618:	6013      	str	r3, [r2, #0]
	}

	if (!buttons_drawn || last_selection != current_selection) {
 800c61a:	4b26      	ldr	r3, [pc, #152]	@ (800c6b4 <displayMainMenu+0xe0>)
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	f083 0301 	eor.w	r3, r3, #1
 800c622:	b2db      	uxtb	r3, r3
 800c624:	2b00      	cmp	r3, #0
 800c626:	d105      	bne.n	800c634 <displayMainMenu+0x60>
 800c628:	4b23      	ldr	r3, [pc, #140]	@ (800c6b8 <displayMainMenu+0xe4>)
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	4b23      	ldr	r3, [pc, #140]	@ (800c6bc <displayMainMenu+0xe8>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	429a      	cmp	r2, r3
 800c632:	d02f      	beq.n	800c694 <displayMainMenu+0xc0>
		int start_y = TITLE_HEIGHT + 15;
 800c634:	231e      	movs	r3, #30
 800c636:	607b      	str	r3, [r7, #4]
		button_count = 2;
 800c638:	4b21      	ldr	r3, [pc, #132]	@ (800c6c0 <displayMainMenu+0xec>)
 800c63a:	2202      	movs	r2, #2
 800c63c:	601a      	str	r2, [r3, #0]

		drawSingleButton(MARGIN_X, start_y, BUTTON_WIDTH, BUTTON_HEIGHT,
 800c63e:	4b1f      	ldr	r3, [pc, #124]	@ (800c6bc <displayMainMenu+0xe8>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	bf0c      	ite	eq
 800c646:	2301      	moveq	r3, #1
 800c648:	2300      	movne	r3, #0
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	461a      	mov	r2, r3
 800c64e:	2300      	movs	r3, #0
 800c650:	9302      	str	r3, [sp, #8]
 800c652:	9201      	str	r2, [sp, #4]
 800c654:	4b1b      	ldr	r3, [pc, #108]	@ (800c6c4 <displayMainMenu+0xf0>)
 800c656:	9300      	str	r3, [sp, #0]
 800c658:	2312      	movs	r3, #18
 800c65a:	228c      	movs	r2, #140	@ 0x8c
 800c65c:	6879      	ldr	r1, [r7, #4]
 800c65e:	200a      	movs	r0, #10
 800c660:	f7ff fd0e 	bl	800c080 <drawSingleButton>
						"MASTER CONTROL", (current_selection == 0), 0);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT,
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f103 0116 	add.w	r1, r3, #22
 800c66a:	4b14      	ldr	r3, [pc, #80]	@ (800c6bc <displayMainMenu+0xe8>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b01      	cmp	r3, #1
 800c670:	bf0c      	ite	eq
 800c672:	2301      	moveq	r3, #1
 800c674:	2300      	movne	r3, #0
 800c676:	b2db      	uxtb	r3, r3
 800c678:	461a      	mov	r2, r3
 800c67a:	2301      	movs	r3, #1
 800c67c:	9302      	str	r3, [sp, #8]
 800c67e:	9201      	str	r2, [sp, #4]
 800c680:	4b11      	ldr	r3, [pc, #68]	@ (800c6c8 <displayMainMenu+0xf4>)
 800c682:	9300      	str	r3, [sp, #0]
 800c684:	2312      	movs	r3, #18
 800c686:	228c      	movs	r2, #140	@ 0x8c
 800c688:	200a      	movs	r0, #10
 800c68a:	f7ff fcf9 	bl	800c080 <drawSingleButton>
						"DEVICE LIST", (current_selection == 1), 1);

		buttons_drawn = true;
 800c68e:	4b09      	ldr	r3, [pc, #36]	@ (800c6b4 <displayMainMenu+0xe0>)
 800c690:	2201      	movs	r2, #1
 800c692:	701a      	strb	r2, [r3, #0]
	}

	last_selection = current_selection;
 800c694:	4b09      	ldr	r3, [pc, #36]	@ (800c6bc <displayMainMenu+0xe8>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a07      	ldr	r2, [pc, #28]	@ (800c6b8 <displayMainMenu+0xe4>)
 800c69a:	6013      	str	r3, [r2, #0]
}
 800c69c:	bf00      	nop
 800c69e:	3708      	adds	r7, #8
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	20000264 	.word	0x20000264
 800c6a8:	20000010 	.word	0x20000010
 800c6ac:	2000028c 	.word	0x2000028c
 800c6b0:	08018940 	.word	0x08018940
 800c6b4:	2000028d 	.word	0x2000028d
 800c6b8:	2000000c 	.word	0x2000000c
 800c6bc:	20000268 	.word	0x20000268
 800c6c0:	200003b0 	.word	0x200003b0
 800c6c4:	0801894c 	.word	0x0801894c
 800c6c8:	0801895c 	.word	0x0801895c

0800c6cc <displayTotalControlMenu>:

void displayTotalControlMenu(void) {
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b08a      	sub	sp, #40	@ 0x28
 800c6d0:	af04      	add	r7, sp, #16
	bool states_changed = false;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	75fb      	strb	r3, [r7, #23]
	syncDisplayDeviceStates();
 800c6d6:	f000 fc5d 	bl	800cf94 <syncDisplayDeviceStates>

	for (int i = 0; i < 4; i++) {
 800c6da:	2300      	movs	r3, #0
 800c6dc:	613b      	str	r3, [r7, #16]
 800c6de:	e016      	b.n	800c70e <displayTotalControlMenu+0x42>
		if (device_states[i] != last_device_states[i]) {
 800c6e0:	4a5c      	ldr	r2, [pc, #368]	@ (800c854 <displayTotalControlMenu+0x188>)
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c6e8:	495b      	ldr	r1, [pc, #364]	@ (800c858 <displayTotalControlMenu+0x18c>)
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d009      	beq.n	800c708 <displayTotalControlMenu+0x3c>
			states_changed = true;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	75fb      	strb	r3, [r7, #23]
			last_device_states[i] = device_states[i];
 800c6f8:	4a56      	ldr	r2, [pc, #344]	@ (800c854 <displayTotalControlMenu+0x188>)
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c700:	4955      	ldr	r1, [pc, #340]	@ (800c858 <displayTotalControlMenu+0x18c>)
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	3301      	adds	r3, #1
 800c70c:	613b      	str	r3, [r7, #16]
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	2b03      	cmp	r3, #3
 800c712:	dde5      	ble.n	800c6e0 <displayTotalControlMenu+0x14>
		}
	}

	if (current_menu != last_menu || !menu_drawn) {
 800c714:	4b51      	ldr	r3, [pc, #324]	@ (800c85c <displayTotalControlMenu+0x190>)
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	4b51      	ldr	r3, [pc, #324]	@ (800c860 <displayTotalControlMenu+0x194>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d106      	bne.n	800c72e <displayTotalControlMenu+0x62>
 800c720:	4b50      	ldr	r3, [pc, #320]	@ (800c864 <displayTotalControlMenu+0x198>)
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	f083 0301 	eor.w	r3, r3, #1
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d014      	beq.n	800c758 <displayTotalControlMenu+0x8c>
		ST7735_SetRotation(1);
 800c72e:	2001      	movs	r0, #1
 800c730:	f7fd fa08 	bl	8009b44 <ST7735_SetRotation>
		fillScreen(BLACK);
 800c734:	2000      	movs	r0, #0
 800c736:	f7fd f8cd 	bl	80098d4 <fillScreen>
		drawTitleBar("MASTER CONTROL");
 800c73a:	484b      	ldr	r0, [pc, #300]	@ (800c868 <displayTotalControlMenu+0x19c>)
 800c73c:	f7ff ff0a 	bl	800c554 <drawTitleBar>
		menu_drawn = true;
 800c740:	4b48      	ldr	r3, [pc, #288]	@ (800c864 <displayTotalControlMenu+0x198>)
 800c742:	2201      	movs	r2, #1
 800c744:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 800c746:	4b49      	ldr	r3, [pc, #292]	@ (800c86c <displayTotalControlMenu+0x1a0>)
 800c748:	2200      	movs	r2, #0
 800c74a:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 800c74c:	4b43      	ldr	r3, [pc, #268]	@ (800c85c <displayTotalControlMenu+0x190>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4a43      	ldr	r2, [pc, #268]	@ (800c860 <displayTotalControlMenu+0x194>)
 800c752:	6013      	str	r3, [r2, #0]
		states_changed = true;
 800c754:	2301      	movs	r3, #1
 800c756:	75fb      	strb	r3, [r7, #23]
	}

	if (states_changed) {
 800c758:	7dfb      	ldrb	r3, [r7, #23]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d016      	beq.n	800c78c <displayTotalControlMenu+0xc0>
		int total_on = 0;
 800c75e:	2300      	movs	r3, #0
 800c760:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < 4; i++) {
 800c762:	2300      	movs	r3, #0
 800c764:	60bb      	str	r3, [r7, #8]
 800c766:	e00b      	b.n	800c780 <displayTotalControlMenu+0xb4>
			if (device_states[i]) total_on++;
 800c768:	4a3a      	ldr	r2, [pc, #232]	@ (800c854 <displayTotalControlMenu+0x188>)
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d002      	beq.n	800c77a <displayTotalControlMenu+0xae>
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	3301      	adds	r3, #1
 800c778:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < 4; i++) {
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	3301      	adds	r3, #1
 800c77e:	60bb      	str	r3, [r7, #8]
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	2b03      	cmp	r3, #3
 800c784:	ddf0      	ble.n	800c768 <displayTotalControlMenu+0x9c>
		}
		updateDeviceCount(total_on);
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f7ff fe8e 	bl	800c4a8 <updateDeviceCount>
	}

	if (!buttons_drawn) {
 800c78c:	4b37      	ldr	r3, [pc, #220]	@ (800c86c <displayTotalControlMenu+0x1a0>)
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	f083 0301 	eor.w	r3, r3, #1
 800c794:	b2db      	uxtb	r3, r3
 800c796:	2b00      	cmp	r3, #0
 800c798:	d045      	beq.n	800c826 <displayTotalControlMenu+0x15a>
		int start_y = TITLE_HEIGHT + 25;
 800c79a:	2328      	movs	r3, #40	@ 0x28
 800c79c:	607b      	str	r3, [r7, #4]
		button_count = 3;
 800c79e:	4b34      	ldr	r3, [pc, #208]	@ (800c870 <displayTotalControlMenu+0x1a4>)
 800c7a0:	2203      	movs	r2, #3
 800c7a2:	601a      	str	r2, [r3, #0]

		drawSingleButton(MARGIN_X, start_y, BUTTON_WIDTH, BUTTON_HEIGHT,
 800c7a4:	4b33      	ldr	r3, [pc, #204]	@ (800c874 <displayTotalControlMenu+0x1a8>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	bf0c      	ite	eq
 800c7ac:	2301      	moveq	r3, #1
 800c7ae:	2300      	movne	r3, #0
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	9302      	str	r3, [sp, #8]
 800c7b8:	9201      	str	r2, [sp, #4]
 800c7ba:	4b2f      	ldr	r3, [pc, #188]	@ (800c878 <displayTotalControlMenu+0x1ac>)
 800c7bc:	9300      	str	r3, [sp, #0]
 800c7be:	2312      	movs	r3, #18
 800c7c0:	228c      	movs	r2, #140	@ 0x8c
 800c7c2:	6879      	ldr	r1, [r7, #4]
 800c7c4:	200a      	movs	r0, #10
 800c7c6:	f7ff fc5b 	bl	800c080 <drawSingleButton>
						"TOTAL ON", (current_selection == 0), 0);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT,
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f103 0116 	add.w	r1, r3, #22
 800c7d0:	4b28      	ldr	r3, [pc, #160]	@ (800c874 <displayTotalControlMenu+0x1a8>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	bf0c      	ite	eq
 800c7d8:	2301      	moveq	r3, #1
 800c7da:	2300      	movne	r3, #0
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	461a      	mov	r2, r3
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	9302      	str	r3, [sp, #8]
 800c7e4:	9201      	str	r2, [sp, #4]
 800c7e6:	4b25      	ldr	r3, [pc, #148]	@ (800c87c <displayTotalControlMenu+0x1b0>)
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	2312      	movs	r3, #18
 800c7ec:	228c      	movs	r2, #140	@ 0x8c
 800c7ee:	200a      	movs	r0, #10
 800c7f0:	f7ff fc46 	bl	800c080 <drawSingleButton>
						"TOTAL OFF", (current_selection == 1), 1);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING*2, BUTTON_WIDTH, BUTTON_HEIGHT,
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 800c7fa:	4b1e      	ldr	r3, [pc, #120]	@ (800c874 <displayTotalControlMenu+0x1a8>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2b02      	cmp	r3, #2
 800c800:	bf0c      	ite	eq
 800c802:	2301      	moveq	r3, #1
 800c804:	2300      	movne	r3, #0
 800c806:	b2db      	uxtb	r3, r3
 800c808:	461a      	mov	r2, r3
 800c80a:	2302      	movs	r3, #2
 800c80c:	9302      	str	r3, [sp, #8]
 800c80e:	9201      	str	r2, [sp, #4]
 800c810:	4b1b      	ldr	r3, [pc, #108]	@ (800c880 <displayTotalControlMenu+0x1b4>)
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	2312      	movs	r3, #18
 800c816:	228c      	movs	r2, #140	@ 0x8c
 800c818:	200a      	movs	r0, #10
 800c81a:	f7ff fc31 	bl	800c080 <drawSingleButton>
						"GO BACK", (current_selection == 2), 2);

		buttons_drawn = true;
 800c81e:	4b13      	ldr	r3, [pc, #76]	@ (800c86c <displayTotalControlMenu+0x1a0>)
 800c820:	2201      	movs	r2, #1
 800c822:	701a      	strb	r2, [r3, #0]
 800c824:	e00d      	b.n	800c842 <displayTotalControlMenu+0x176>
	} else if (last_selection != current_selection) {
 800c826:	4b17      	ldr	r3, [pc, #92]	@ (800c884 <displayTotalControlMenu+0x1b8>)
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	4b12      	ldr	r3, [pc, #72]	@ (800c874 <displayTotalControlMenu+0x1a8>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d007      	beq.n	800c842 <displayTotalControlMenu+0x176>
		updateButtonSelection(last_selection, current_selection);
 800c832:	4b14      	ldr	r3, [pc, #80]	@ (800c884 <displayTotalControlMenu+0x1b8>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4a0f      	ldr	r2, [pc, #60]	@ (800c874 <displayTotalControlMenu+0x1a8>)
 800c838:	6812      	ldr	r2, [r2, #0]
 800c83a:	4611      	mov	r1, r2
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7ff fd13 	bl	800c268 <updateButtonSelection>
	}

	last_selection = current_selection;
 800c842:	4b0c      	ldr	r3, [pc, #48]	@ (800c874 <displayTotalControlMenu+0x1a8>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4a0f      	ldr	r2, [pc, #60]	@ (800c884 <displayTotalControlMenu+0x1b8>)
 800c848:	6013      	str	r3, [r2, #0]
}
 800c84a:	bf00      	nop
 800c84c:	3718      	adds	r7, #24
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	2000027c 	.word	0x2000027c
 800c858:	20000014 	.word	0x20000014
 800c85c:	20000264 	.word	0x20000264
 800c860:	20000010 	.word	0x20000010
 800c864:	2000028c 	.word	0x2000028c
 800c868:	0801894c 	.word	0x0801894c
 800c86c:	2000028d 	.word	0x2000028d
 800c870:	200003b0 	.word	0x200003b0
 800c874:	20000268 	.word	0x20000268
 800c878:	08018968 	.word	0x08018968
 800c87c:	08018974 	.word	0x08018974
 800c880:	08018980 	.word	0x08018980
 800c884:	2000000c 	.word	0x2000000c

0800c888 <displaySeparateControlMenu>:

void displaySeparateControlMenu(void) {
 800c888:	b580      	push	{r7, lr}
 800c88a:	b08e      	sub	sp, #56	@ 0x38
 800c88c:	af04      	add	r7, sp, #16
	bool states_changed = false;
 800c88e:	2300      	movs	r3, #0
 800c890:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	syncDisplayDeviceStates();
 800c894:	f000 fb7e 	bl	800cf94 <syncDisplayDeviceStates>

	for (int i = 0; i < 4; i++) {
 800c898:	2300      	movs	r3, #0
 800c89a:	623b      	str	r3, [r7, #32]
 800c89c:	e017      	b.n	800c8ce <displaySeparateControlMenu+0x46>
		if (device_states[i] != last_device_states[i]) {
 800c89e:	4a59      	ldr	r2, [pc, #356]	@ (800ca04 <displaySeparateControlMenu+0x17c>)
 800c8a0:	6a3b      	ldr	r3, [r7, #32]
 800c8a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c8a6:	4958      	ldr	r1, [pc, #352]	@ (800ca08 <displaySeparateControlMenu+0x180>)
 800c8a8:	6a3b      	ldr	r3, [r7, #32]
 800c8aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d00a      	beq.n	800c8c8 <displaySeparateControlMenu+0x40>
			states_changed = true;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			last_device_states[i] = device_states[i];
 800c8b8:	4a52      	ldr	r2, [pc, #328]	@ (800ca04 <displaySeparateControlMenu+0x17c>)
 800c8ba:	6a3b      	ldr	r3, [r7, #32]
 800c8bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c8c0:	4951      	ldr	r1, [pc, #324]	@ (800ca08 <displaySeparateControlMenu+0x180>)
 800c8c2:	6a3b      	ldr	r3, [r7, #32]
 800c8c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 800c8c8:	6a3b      	ldr	r3, [r7, #32]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	623b      	str	r3, [r7, #32]
 800c8ce:	6a3b      	ldr	r3, [r7, #32]
 800c8d0:	2b03      	cmp	r3, #3
 800c8d2:	dde4      	ble.n	800c89e <displaySeparateControlMenu+0x16>
		}
	}

	if (current_menu != last_menu || !menu_drawn) {
 800c8d4:	4b4d      	ldr	r3, [pc, #308]	@ (800ca0c <displaySeparateControlMenu+0x184>)
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	4b4d      	ldr	r3, [pc, #308]	@ (800ca10 <displaySeparateControlMenu+0x188>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d106      	bne.n	800c8ee <displaySeparateControlMenu+0x66>
 800c8e0:	4b4c      	ldr	r3, [pc, #304]	@ (800ca14 <displaySeparateControlMenu+0x18c>)
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	f083 0301 	eor.w	r3, r3, #1
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d015      	beq.n	800c91a <displaySeparateControlMenu+0x92>
		ST7735_SetRotation(1);
 800c8ee:	2001      	movs	r0, #1
 800c8f0:	f7fd f928 	bl	8009b44 <ST7735_SetRotation>
		fillScreen(BLACK);
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	f7fc ffed 	bl	80098d4 <fillScreen>
		drawTitleBar("DEVICE LIST");
 800c8fa:	4847      	ldr	r0, [pc, #284]	@ (800ca18 <displaySeparateControlMenu+0x190>)
 800c8fc:	f7ff fe2a 	bl	800c554 <drawTitleBar>
		menu_drawn = true;
 800c900:	4b44      	ldr	r3, [pc, #272]	@ (800ca14 <displaySeparateControlMenu+0x18c>)
 800c902:	2201      	movs	r2, #1
 800c904:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 800c906:	4b45      	ldr	r3, [pc, #276]	@ (800ca1c <displaySeparateControlMenu+0x194>)
 800c908:	2200      	movs	r2, #0
 800c90a:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 800c90c:	4b3f      	ldr	r3, [pc, #252]	@ (800ca0c <displaySeparateControlMenu+0x184>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4a3f      	ldr	r2, [pc, #252]	@ (800ca10 <displaySeparateControlMenu+0x188>)
 800c912:	6013      	str	r3, [r2, #0]
		states_changed = true;
 800c914:	2301      	movs	r3, #1
 800c916:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	if (!buttons_drawn || states_changed) {
 800c91a:	4b40      	ldr	r3, [pc, #256]	@ (800ca1c <displaySeparateControlMenu+0x194>)
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	f083 0301 	eor.w	r3, r3, #1
 800c922:	b2db      	uxtb	r3, r3
 800c924:	2b00      	cmp	r3, #0
 800c926:	d103      	bne.n	800c930 <displaySeparateControlMenu+0xa8>
 800c928:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d053      	beq.n	800c9d8 <displaySeparateControlMenu+0x150>
		int start_y = TITLE_HEIGHT + 10;
 800c930:	2319      	movs	r3, #25
 800c932:	61bb      	str	r3, [r7, #24]
		button_count = 5;
 800c934:	4b3a      	ldr	r3, [pc, #232]	@ (800ca20 <displaySeparateControlMenu+0x198>)
 800c936:	2205      	movs	r2, #5
 800c938:	601a      	str	r2, [r3, #0]

		for (int i = 0; i < 4; i++) {
 800c93a:	2300      	movs	r3, #0
 800c93c:	61fb      	str	r3, [r7, #28]
 800c93e:	e02f      	b.n	800c9a0 <displaySeparateControlMenu+0x118>
			char device_text[20];
			snprintf(device_text, sizeof(device_text), "DEVICE %d [%s]",
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	1c5a      	adds	r2, r3, #1
					i + 1, device_states[i] ? "ON" : "OFF");
 800c944:	492f      	ldr	r1, [pc, #188]	@ (800ca04 <displaySeparateControlMenu+0x17c>)
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			snprintf(device_text, sizeof(device_text), "DEVICE %d [%s]",
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d001      	beq.n	800c954 <displaySeparateControlMenu+0xcc>
 800c950:	4b34      	ldr	r3, [pc, #208]	@ (800ca24 <displaySeparateControlMenu+0x19c>)
 800c952:	e000      	b.n	800c956 <displaySeparateControlMenu+0xce>
 800c954:	4b34      	ldr	r3, [pc, #208]	@ (800ca28 <displaySeparateControlMenu+0x1a0>)
 800c956:	1d38      	adds	r0, r7, #4
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	4613      	mov	r3, r2
 800c95c:	4a33      	ldr	r2, [pc, #204]	@ (800ca2c <displaySeparateControlMenu+0x1a4>)
 800c95e:	2114      	movs	r1, #20
 800c960:	f009 fa9c 	bl	8015e9c <sniprintf>
			drawSingleButton(MARGIN_X, start_y + i * 20, BUTTON_WIDTH, 16,
 800c964:	69fa      	ldr	r2, [r7, #28]
 800c966:	4613      	mov	r3, r2
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	4413      	add	r3, r2
 800c96c:	009b      	lsls	r3, r3, #2
 800c96e:	461a      	mov	r2, r3
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	18d1      	adds	r1, r2, r3
 800c974:	4b2e      	ldr	r3, [pc, #184]	@ (800ca30 <displaySeparateControlMenu+0x1a8>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	69fa      	ldr	r2, [r7, #28]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	bf0c      	ite	eq
 800c97e:	2301      	moveq	r3, #1
 800c980:	2300      	movne	r3, #0
 800c982:	b2db      	uxtb	r3, r3
 800c984:	461a      	mov	r2, r3
 800c986:	69fb      	ldr	r3, [r7, #28]
 800c988:	9302      	str	r3, [sp, #8]
 800c98a:	9201      	str	r2, [sp, #4]
 800c98c:	1d3b      	adds	r3, r7, #4
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	2310      	movs	r3, #16
 800c992:	228c      	movs	r2, #140	@ 0x8c
 800c994:	200a      	movs	r0, #10
 800c996:	f7ff fb73 	bl	800c080 <drawSingleButton>
		for (int i = 0; i < 4; i++) {
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	3301      	adds	r3, #1
 800c99e:	61fb      	str	r3, [r7, #28]
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	2b03      	cmp	r3, #3
 800c9a4:	ddcc      	ble.n	800c940 <displaySeparateControlMenu+0xb8>
						   device_text, (current_selection == i), i);
		}

		drawSingleButton(MARGIN_X, start_y + 4 * 20, BUTTON_WIDTH, 16,
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800c9ac:	4b20      	ldr	r3, [pc, #128]	@ (800ca30 <displaySeparateControlMenu+0x1a8>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2b04      	cmp	r3, #4
 800c9b2:	bf0c      	ite	eq
 800c9b4:	2301      	moveq	r3, #1
 800c9b6:	2300      	movne	r3, #0
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	2304      	movs	r3, #4
 800c9be:	9302      	str	r3, [sp, #8]
 800c9c0:	9201      	str	r2, [sp, #4]
 800c9c2:	4b1c      	ldr	r3, [pc, #112]	@ (800ca34 <displaySeparateControlMenu+0x1ac>)
 800c9c4:	9300      	str	r3, [sp, #0]
 800c9c6:	2310      	movs	r3, #16
 800c9c8:	228c      	movs	r2, #140	@ 0x8c
 800c9ca:	200a      	movs	r0, #10
 800c9cc:	f7ff fb58 	bl	800c080 <drawSingleButton>
					   "GO BACK", (current_selection == 4), 4);

		buttons_drawn = true;
 800c9d0:	4b12      	ldr	r3, [pc, #72]	@ (800ca1c <displaySeparateControlMenu+0x194>)
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	701a      	strb	r2, [r3, #0]
	if (!buttons_drawn || states_changed) {
 800c9d6:	e00d      	b.n	800c9f4 <displaySeparateControlMenu+0x16c>
	} else if (last_selection != current_selection) {
 800c9d8:	4b17      	ldr	r3, [pc, #92]	@ (800ca38 <displaySeparateControlMenu+0x1b0>)
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	4b14      	ldr	r3, [pc, #80]	@ (800ca30 <displaySeparateControlMenu+0x1a8>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d007      	beq.n	800c9f4 <displaySeparateControlMenu+0x16c>
		updateButtonSelection(last_selection, current_selection);
 800c9e4:	4b14      	ldr	r3, [pc, #80]	@ (800ca38 <displaySeparateControlMenu+0x1b0>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a11      	ldr	r2, [pc, #68]	@ (800ca30 <displaySeparateControlMenu+0x1a8>)
 800c9ea:	6812      	ldr	r2, [r2, #0]
 800c9ec:	4611      	mov	r1, r2
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7ff fc3a 	bl	800c268 <updateButtonSelection>
	}

	last_selection = current_selection;
 800c9f4:	4b0e      	ldr	r3, [pc, #56]	@ (800ca30 <displaySeparateControlMenu+0x1a8>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a0f      	ldr	r2, [pc, #60]	@ (800ca38 <displaySeparateControlMenu+0x1b0>)
 800c9fa:	6013      	str	r3, [r2, #0]
}
 800c9fc:	bf00      	nop
 800c9fe:	3728      	adds	r7, #40	@ 0x28
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	2000027c 	.word	0x2000027c
 800ca08:	20000014 	.word	0x20000014
 800ca0c:	20000264 	.word	0x20000264
 800ca10:	20000010 	.word	0x20000010
 800ca14:	2000028c 	.word	0x2000028c
 800ca18:	0801895c 	.word	0x0801895c
 800ca1c:	2000028d 	.word	0x2000028d
 800ca20:	200003b0 	.word	0x200003b0
 800ca24:	0801890c 	.word	0x0801890c
 800ca28:	08018910 	.word	0x08018910
 800ca2c:	08018988 	.word	0x08018988
 800ca30:	20000268 	.word	0x20000268
 800ca34:	08018980 	.word	0x08018980
 800ca38:	2000000c 	.word	0x2000000c

0800ca3c <displayDeviceControlMenu>:

void displayDeviceControlMenu(void) {
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b08e      	sub	sp, #56	@ 0x38
 800ca40:	af04      	add	r7, sp, #16
	bool state_changed = false;
 800ca42:	2300      	movs	r3, #0
 800ca44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	syncDisplayDeviceStates();
 800ca48:	f000 faa4 	bl	800cf94 <syncDisplayDeviceStates>

	if (device_states[current_device] != last_device_states[current_device]) {
 800ca4c:	4b68      	ldr	r3, [pc, #416]	@ (800cbf0 <displayDeviceControlMenu+0x1b4>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a68      	ldr	r2, [pc, #416]	@ (800cbf4 <displayDeviceControlMenu+0x1b8>)
 800ca52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ca56:	4b66      	ldr	r3, [pc, #408]	@ (800cbf0 <displayDeviceControlMenu+0x1b4>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4967      	ldr	r1, [pc, #412]	@ (800cbf8 <displayDeviceControlMenu+0x1bc>)
 800ca5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d00c      	beq.n	800ca7e <displayDeviceControlMenu+0x42>
		state_changed = true;
 800ca64:	2301      	movs	r3, #1
 800ca66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		last_device_states[current_device] = device_states[current_device];
 800ca6a:	4b61      	ldr	r3, [pc, #388]	@ (800cbf0 <displayDeviceControlMenu+0x1b4>)
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	4b60      	ldr	r3, [pc, #384]	@ (800cbf0 <displayDeviceControlMenu+0x1b4>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4960      	ldr	r1, [pc, #384]	@ (800cbf4 <displayDeviceControlMenu+0x1b8>)
 800ca74:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ca78:	495f      	ldr	r1, [pc, #380]	@ (800cbf8 <displayDeviceControlMenu+0x1bc>)
 800ca7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (current_menu != last_menu || !menu_drawn) {
 800ca7e:	4b5f      	ldr	r3, [pc, #380]	@ (800cbfc <displayDeviceControlMenu+0x1c0>)
 800ca80:	681a      	ldr	r2, [r3, #0]
 800ca82:	4b5f      	ldr	r3, [pc, #380]	@ (800cc00 <displayDeviceControlMenu+0x1c4>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d106      	bne.n	800ca98 <displayDeviceControlMenu+0x5c>
 800ca8a:	4b5e      	ldr	r3, [pc, #376]	@ (800cc04 <displayDeviceControlMenu+0x1c8>)
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	f083 0301 	eor.w	r3, r3, #1
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d01e      	beq.n	800cad6 <displayDeviceControlMenu+0x9a>
		ST7735_SetRotation(1);
 800ca98:	2001      	movs	r0, #1
 800ca9a:	f7fd f853 	bl	8009b44 <ST7735_SetRotation>
		fillScreen(BLACK);
 800ca9e:	2000      	movs	r0, #0
 800caa0:	f7fc ff18 	bl	80098d4 <fillScreen>

		char title[30];
		snprintf(title, sizeof(title), "DEVICE %d CONTROL", current_device + 1);
 800caa4:	4b52      	ldr	r3, [pc, #328]	@ (800cbf0 <displayDeviceControlMenu+0x1b4>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	3301      	adds	r3, #1
 800caaa:	4638      	mov	r0, r7
 800caac:	4a56      	ldr	r2, [pc, #344]	@ (800cc08 <displayDeviceControlMenu+0x1cc>)
 800caae:	211e      	movs	r1, #30
 800cab0:	f009 f9f4 	bl	8015e9c <sniprintf>
		drawTitleBar(title);
 800cab4:	463b      	mov	r3, r7
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7ff fd4c 	bl	800c554 <drawTitleBar>

		menu_drawn = true;
 800cabc:	4b51      	ldr	r3, [pc, #324]	@ (800cc04 <displayDeviceControlMenu+0x1c8>)
 800cabe:	2201      	movs	r2, #1
 800cac0:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 800cac2:	4b52      	ldr	r3, [pc, #328]	@ (800cc0c <displayDeviceControlMenu+0x1d0>)
 800cac4:	2200      	movs	r2, #0
 800cac6:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 800cac8:	4b4c      	ldr	r3, [pc, #304]	@ (800cbfc <displayDeviceControlMenu+0x1c0>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a4c      	ldr	r2, [pc, #304]	@ (800cc00 <displayDeviceControlMenu+0x1c4>)
 800cace:	6013      	str	r3, [r2, #0]
		state_changed = true;
 800cad0:	2301      	movs	r3, #1
 800cad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	if (state_changed) {
 800cad6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00f      	beq.n	800cafe <displayDeviceControlMenu+0xc2>
		updateDeviceControlStatus(current_device, device_states[current_device]);
 800cade:	4b44      	ldr	r3, [pc, #272]	@ (800cbf0 <displayDeviceControlMenu+0x1b4>)
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	4b43      	ldr	r3, [pc, #268]	@ (800cbf0 <displayDeviceControlMenu+0x1b4>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4943      	ldr	r1, [pc, #268]	@ (800cbf4 <displayDeviceControlMenu+0x1b8>)
 800cae8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800caec:	2b00      	cmp	r3, #0
 800caee:	bf14      	ite	ne
 800caf0:	2301      	movne	r3, #1
 800caf2:	2300      	moveq	r3, #0
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	4619      	mov	r1, r3
 800caf8:	4610      	mov	r0, r2
 800cafa:	f7ff fcff 	bl	800c4fc <updateDeviceControlStatus>
	}

	if (!buttons_drawn) {
 800cafe:	4b43      	ldr	r3, [pc, #268]	@ (800cc0c <displayDeviceControlMenu+0x1d0>)
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	f083 0301 	eor.w	r3, r3, #1
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d05a      	beq.n	800cbc2 <displayDeviceControlMenu+0x186>
		int start_y = TITLE_HEIGHT + 25;
 800cb0c:	2328      	movs	r3, #40	@ 0x28
 800cb0e:	623b      	str	r3, [r7, #32]
		button_count = 4;
 800cb10:	4b3f      	ldr	r3, [pc, #252]	@ (800cc10 <displayDeviceControlMenu+0x1d4>)
 800cb12:	2204      	movs	r2, #4
 800cb14:	601a      	str	r2, [r3, #0]

		drawSingleButton(MARGIN_X, start_y, BUTTON_WIDTH, BUTTON_HEIGHT,
 800cb16:	4b3f      	ldr	r3, [pc, #252]	@ (800cc14 <displayDeviceControlMenu+0x1d8>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	bf0c      	ite	eq
 800cb1e:	2301      	moveq	r3, #1
 800cb20:	2300      	movne	r3, #0
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	461a      	mov	r2, r3
 800cb26:	2300      	movs	r3, #0
 800cb28:	9302      	str	r3, [sp, #8]
 800cb2a:	9201      	str	r2, [sp, #4]
 800cb2c:	4b3a      	ldr	r3, [pc, #232]	@ (800cc18 <displayDeviceControlMenu+0x1dc>)
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	2312      	movs	r3, #18
 800cb32:	228c      	movs	r2, #140	@ 0x8c
 800cb34:	6a39      	ldr	r1, [r7, #32]
 800cb36:	200a      	movs	r0, #10
 800cb38:	f7ff faa2 	bl	800c080 <drawSingleButton>
						"TURN ON", (current_selection == 0), 0);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT,
 800cb3c:	6a3b      	ldr	r3, [r7, #32]
 800cb3e:	f103 0116 	add.w	r1, r3, #22
 800cb42:	4b34      	ldr	r3, [pc, #208]	@ (800cc14 <displayDeviceControlMenu+0x1d8>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	bf0c      	ite	eq
 800cb4a:	2301      	moveq	r3, #1
 800cb4c:	2300      	movne	r3, #0
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	461a      	mov	r2, r3
 800cb52:	2301      	movs	r3, #1
 800cb54:	9302      	str	r3, [sp, #8]
 800cb56:	9201      	str	r2, [sp, #4]
 800cb58:	4b30      	ldr	r3, [pc, #192]	@ (800cc1c <displayDeviceControlMenu+0x1e0>)
 800cb5a:	9300      	str	r3, [sp, #0]
 800cb5c:	2312      	movs	r3, #18
 800cb5e:	228c      	movs	r2, #140	@ 0x8c
 800cb60:	200a      	movs	r0, #10
 800cb62:	f7ff fa8d 	bl	800c080 <drawSingleButton>
						"TURN OFF", (current_selection == 1), 1);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING*2, BUTTON_WIDTH, BUTTON_HEIGHT,
 800cb66:	6a3b      	ldr	r3, [r7, #32]
 800cb68:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 800cb6c:	4b29      	ldr	r3, [pc, #164]	@ (800cc14 <displayDeviceControlMenu+0x1d8>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	bf0c      	ite	eq
 800cb74:	2301      	moveq	r3, #1
 800cb76:	2300      	movne	r3, #0
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	2302      	movs	r3, #2
 800cb7e:	9302      	str	r3, [sp, #8]
 800cb80:	9201      	str	r2, [sp, #4]
 800cb82:	4b27      	ldr	r3, [pc, #156]	@ (800cc20 <displayDeviceControlMenu+0x1e4>)
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	2312      	movs	r3, #18
 800cb88:	228c      	movs	r2, #140	@ 0x8c
 800cb8a:	200a      	movs	r0, #10
 800cb8c:	f7ff fa78 	bl	800c080 <drawSingleButton>
						"GO BACK", (current_selection == 2), 2);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING*3, BUTTON_WIDTH, BUTTON_HEIGHT,
 800cb90:	6a3b      	ldr	r3, [r7, #32]
 800cb92:	f103 0142 	add.w	r1, r3, #66	@ 0x42
 800cb96:	4b1f      	ldr	r3, [pc, #124]	@ (800cc14 <displayDeviceControlMenu+0x1d8>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	2b03      	cmp	r3, #3
 800cb9c:	bf0c      	ite	eq
 800cb9e:	2301      	moveq	r3, #1
 800cba0:	2300      	movne	r3, #0
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	461a      	mov	r2, r3
 800cba6:	2303      	movs	r3, #3
 800cba8:	9302      	str	r3, [sp, #8]
 800cbaa:	9201      	str	r2, [sp, #4]
 800cbac:	4b1d      	ldr	r3, [pc, #116]	@ (800cc24 <displayDeviceControlMenu+0x1e8>)
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	2312      	movs	r3, #18
 800cbb2:	228c      	movs	r2, #140	@ 0x8c
 800cbb4:	200a      	movs	r0, #10
 800cbb6:	f7ff fa63 	bl	800c080 <drawSingleButton>
						"GO TO HOME", (current_selection == 3), 3);

		buttons_drawn = true;
 800cbba:	4b14      	ldr	r3, [pc, #80]	@ (800cc0c <displayDeviceControlMenu+0x1d0>)
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	701a      	strb	r2, [r3, #0]
 800cbc0:	e00d      	b.n	800cbde <displayDeviceControlMenu+0x1a2>
	} else if (last_selection != current_selection) {
 800cbc2:	4b19      	ldr	r3, [pc, #100]	@ (800cc28 <displayDeviceControlMenu+0x1ec>)
 800cbc4:	681a      	ldr	r2, [r3, #0]
 800cbc6:	4b13      	ldr	r3, [pc, #76]	@ (800cc14 <displayDeviceControlMenu+0x1d8>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d007      	beq.n	800cbde <displayDeviceControlMenu+0x1a2>
		updateButtonSelection(last_selection, current_selection);
 800cbce:	4b16      	ldr	r3, [pc, #88]	@ (800cc28 <displayDeviceControlMenu+0x1ec>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a10      	ldr	r2, [pc, #64]	@ (800cc14 <displayDeviceControlMenu+0x1d8>)
 800cbd4:	6812      	ldr	r2, [r2, #0]
 800cbd6:	4611      	mov	r1, r2
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7ff fb45 	bl	800c268 <updateButtonSelection>
	}

	last_selection = current_selection;
 800cbde:	4b0d      	ldr	r3, [pc, #52]	@ (800cc14 <displayDeviceControlMenu+0x1d8>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a11      	ldr	r2, [pc, #68]	@ (800cc28 <displayDeviceControlMenu+0x1ec>)
 800cbe4:	6013      	str	r3, [r2, #0]
}
 800cbe6:	bf00      	nop
 800cbe8:	3728      	adds	r7, #40	@ 0x28
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	2000026c 	.word	0x2000026c
 800cbf4:	2000027c 	.word	0x2000027c
 800cbf8:	20000014 	.word	0x20000014
 800cbfc:	20000264 	.word	0x20000264
 800cc00:	20000010 	.word	0x20000010
 800cc04:	2000028c 	.word	0x2000028c
 800cc08:	08018998 	.word	0x08018998
 800cc0c:	2000028d 	.word	0x2000028d
 800cc10:	200003b0 	.word	0x200003b0
 800cc14:	20000268 	.word	0x20000268
 800cc18:	080189ac 	.word	0x080189ac
 800cc1c:	080189b4 	.word	0x080189b4
 800cc20:	08018980 	.word	0x08018980
 800cc24:	080189c0 	.word	0x080189c0
 800cc28:	2000000c 	.word	0x2000000c

0800cc2c <setDeviceState>:


void setDeviceState(int device, int state) {
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b08a      	sub	sp, #40	@ 0x28
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
    GPIO_TypeDef* gpio_port;
    uint16_t gpio_pin;
    char deviceItem[15];

    switch(device) {
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2b03      	cmp	r3, #3
 800cc3a:	f200 80aa 	bhi.w	800cd92 <setDeviceState+0x166>
 800cc3e:	a201      	add	r2, pc, #4	@ (adr r2, 800cc44 <setDeviceState+0x18>)
 800cc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc44:	0800cc55 	.word	0x0800cc55
 800cc48:	0800cc6b 	.word	0x0800cc6b
 800cc4c:	0800cc81 	.word	0x0800cc81
 800cc50:	0800cc97 	.word	0x0800cc97
        case 0:
            gpio_port = TOUCH_LED1_GPIO_Port;
 800cc54:	4b51      	ldr	r3, [pc, #324]	@ (800cd9c <setDeviceState+0x170>)
 800cc56:	627b      	str	r3, [r7, #36]	@ 0x24
            gpio_pin = TOUCH_LED1_Pin;
 800cc58:	2308      	movs	r3, #8
 800cc5a:	847b      	strh	r3, [r7, #34]	@ 0x22
            sprintf(deviceItem, "device1");
 800cc5c:	f107 0308 	add.w	r3, r7, #8
 800cc60:	494f      	ldr	r1, [pc, #316]	@ (800cda0 <setDeviceState+0x174>)
 800cc62:	4618      	mov	r0, r3
 800cc64:	f009 f950 	bl	8015f08 <siprintf>
            break;
 800cc68:	e021      	b.n	800ccae <setDeviceState+0x82>
        case 1:
            gpio_port = TOUCH_LED2_GPIO_Port;
 800cc6a:	4b4c      	ldr	r3, [pc, #304]	@ (800cd9c <setDeviceState+0x170>)
 800cc6c:	627b      	str	r3, [r7, #36]	@ 0x24
            gpio_pin = TOUCH_LED2_Pin;
 800cc6e:	2304      	movs	r3, #4
 800cc70:	847b      	strh	r3, [r7, #34]	@ 0x22
            sprintf(deviceItem, "device2");
 800cc72:	f107 0308 	add.w	r3, r7, #8
 800cc76:	494b      	ldr	r1, [pc, #300]	@ (800cda4 <setDeviceState+0x178>)
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f009 f945 	bl	8015f08 <siprintf>
            break;
 800cc7e:	e016      	b.n	800ccae <setDeviceState+0x82>
        case 2:
            gpio_port = TOUCH_LED3_GPIO_Port;
 800cc80:	4b49      	ldr	r3, [pc, #292]	@ (800cda8 <setDeviceState+0x17c>)
 800cc82:	627b      	str	r3, [r7, #36]	@ 0x24
            gpio_pin = TOUCH_LED3_Pin;
 800cc84:	2302      	movs	r3, #2
 800cc86:	847b      	strh	r3, [r7, #34]	@ 0x22
            sprintf(deviceItem, "device3");
 800cc88:	f107 0308 	add.w	r3, r7, #8
 800cc8c:	4947      	ldr	r1, [pc, #284]	@ (800cdac <setDeviceState+0x180>)
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f009 f93a 	bl	8015f08 <siprintf>
            break;
 800cc94:	e00b      	b.n	800ccae <setDeviceState+0x82>
        case 3:
            gpio_port = TOUCH_LED4_GPIO_Port;
 800cc96:	4b46      	ldr	r3, [pc, #280]	@ (800cdb0 <setDeviceState+0x184>)
 800cc98:	627b      	str	r3, [r7, #36]	@ 0x24
            gpio_pin = TOUCH_LED4_Pin;
 800cc9a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cc9e:	847b      	strh	r3, [r7, #34]	@ 0x22
            sprintf(deviceItem, "device4");
 800cca0:	f107 0308 	add.w	r3, r7, #8
 800cca4:	4943      	ldr	r1, [pc, #268]	@ (800cdb4 <setDeviceState+0x188>)
 800cca6:	4618      	mov	r0, r3
 800cca8:	f009 f92e 	bl	8015f08 <siprintf>
            break;
 800ccac:	bf00      	nop
        default:
            return;
    }

    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 800ccae:	4b42      	ldr	r3, [pc, #264]	@ (800cdb8 <setDeviceState+0x18c>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2164      	movs	r1, #100	@ 0x64
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f005 ff01 	bl	8012abc <xQueueSemaphoreTake>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d169      	bne.n	800cd94 <setDeviceState+0x168>
		if (state) {
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d010      	beq.n	800cce8 <setDeviceState+0xbc>
			HAL_GPIO_WritePin(gpio_port, gpio_pin, GPIO_PIN_SET);
 800ccc6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ccc8:	2201      	movs	r2, #1
 800ccca:	4619      	mov	r1, r3
 800cccc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ccce:	f002 fa3b 	bl	800f148 <HAL_GPIO_WritePin>
			global_device_states[device] = 1;
 800ccd2:	4a3a      	ldr	r2, [pc, #232]	@ (800cdbc <setDeviceState+0x190>)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2101      	movs	r1, #1
 800ccd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			device_states[device] = 1;
 800ccdc:	4a38      	ldr	r2, [pc, #224]	@ (800cdc0 <setDeviceState+0x194>)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2101      	movs	r1, #1
 800cce2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800cce6:	e00f      	b.n	800cd08 <setDeviceState+0xdc>
		} else {
			HAL_GPIO_WritePin(gpio_port, gpio_pin, GPIO_PIN_RESET);
 800cce8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ccea:	2200      	movs	r2, #0
 800ccec:	4619      	mov	r1, r3
 800ccee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ccf0:	f002 fa2a 	bl	800f148 <HAL_GPIO_WritePin>
			global_device_states[device] = 0;
 800ccf4:	4a31      	ldr	r2, [pc, #196]	@ (800cdbc <setDeviceState+0x190>)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			device_states[device] = 0;
 800ccfe:	4a30      	ldr	r2, [pc, #192]	@ (800cdc0 <setDeviceState+0x194>)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2100      	movs	r1, #0
 800cd04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		xSemaphoreGive(deviceStateMutex);
 800cd08:	4b2b      	ldr	r3, [pc, #172]	@ (800cdb8 <setDeviceState+0x18c>)
 800cd0a:	6818      	ldr	r0, [r3, #0]
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	2200      	movs	r2, #0
 800cd10:	2100      	movs	r1, #0
 800cd12:	f005 fc41 	bl	8012598 <xQueueGenericSend>

		cJSON *resp = cJSON_CreateObject();
 800cd16:	f7ff f93f 	bl	800bf98 <cJSON_CreateObject>
 800cd1a:	61f8      	str	r0, [r7, #28]
		cJSON_AddNumberToObject(resp, deviceItem, device_states[device]);
 800cd1c:	4a28      	ldr	r2, [pc, #160]	@ (800cdc0 <setDeviceState+0x194>)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7fb fc2d 	bl	8008584 <__aeabi_i2d>
 800cd2a:	f107 0308 	add.w	r3, r7, #8
 800cd2e:	ec41 0b10 	vmov	d0, r0, r1
 800cd32:	4619      	mov	r1, r3
 800cd34:	69f8      	ldr	r0, [r7, #28]
 800cd36:	f7ff f8c1 	bl	800bebc <cJSON_AddNumberToObject>
		char *respStr = cJSON_PrintUnformatted(resp);
 800cd3a:	69f8      	ldr	r0, [r7, #28]
 800cd3c:	f7fe fa6c 	bl	800b218 <cJSON_PrintUnformatted>
 800cd40:	61b8      	str	r0, [r7, #24]
		if (respStr)
 800cd42:	69bb      	ldr	r3, [r7, #24]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d014      	beq.n	800cd72 <setDeviceState+0x146>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)respStr, strlen(respStr), HAL_MAX_DELAY);
 800cd48:	69b8      	ldr	r0, [r7, #24]
 800cd4a:	f7fb fa6b 	bl	8008224 <strlen>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	b29a      	uxth	r2, r3
 800cd52:	f04f 33ff 	mov.w	r3, #4294967295
 800cd56:	69b9      	ldr	r1, [r7, #24]
 800cd58:	481a      	ldr	r0, [pc, #104]	@ (800cdc4 <setDeviceState+0x198>)
 800cd5a:	f004 fa2b 	bl	80111b4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800cd5e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd62:	2201      	movs	r2, #1
 800cd64:	4918      	ldr	r1, [pc, #96]	@ (800cdc8 <setDeviceState+0x19c>)
 800cd66:	4817      	ldr	r0, [pc, #92]	@ (800cdc4 <setDeviceState+0x198>)
 800cd68:	f004 fa24 	bl	80111b4 <HAL_UART_Transmit>
			free(respStr);
 800cd6c:	69b8      	ldr	r0, [r7, #24]
 800cd6e:	f008 f869 	bl	8014e44 <free>
		}
		cJSON_Delete(resp);
 800cd72:	69f8      	ldr	r0, [r7, #28]
 800cd74:	f7fd f9a2 	bl	800a0bc <cJSON_Delete>

		printf("DISPLAY: Device %d set to %s\n", device + 1, state ? "ON" : "OFF");
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	1c59      	adds	r1, r3, #1
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d001      	beq.n	800cd86 <setDeviceState+0x15a>
 800cd82:	4b12      	ldr	r3, [pc, #72]	@ (800cdcc <setDeviceState+0x1a0>)
 800cd84:	e000      	b.n	800cd88 <setDeviceState+0x15c>
 800cd86:	4b12      	ldr	r3, [pc, #72]	@ (800cdd0 <setDeviceState+0x1a4>)
 800cd88:	461a      	mov	r2, r3
 800cd8a:	4812      	ldr	r0, [pc, #72]	@ (800cdd4 <setDeviceState+0x1a8>)
 800cd8c:	f009 f816 	bl	8015dbc <iprintf>
 800cd90:	e000      	b.n	800cd94 <setDeviceState+0x168>
            return;
 800cd92:	bf00      	nop
	}
}
 800cd94:	3728      	adds	r7, #40	@ 0x28
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	40020800 	.word	0x40020800
 800cda0:	080189cc 	.word	0x080189cc
 800cda4:	080189d4 	.word	0x080189d4
 800cda8:	40021c00 	.word	0x40021c00
 800cdac:	080189dc 	.word	0x080189dc
 800cdb0:	40020400 	.word	0x40020400
 800cdb4:	080189e4 	.word	0x080189e4
 800cdb8:	20000724 	.word	0x20000724
 800cdbc:	2000072c 	.word	0x2000072c
 800cdc0:	2000027c 	.word	0x2000027c
 800cdc4:	20000504 	.word	0x20000504
 800cdc8:	080189ec 	.word	0x080189ec
 800cdcc:	0801890c 	.word	0x0801890c
 800cdd0:	08018910 	.word	0x08018910
 800cdd4:	080189f0 	.word	0x080189f0

0800cdd8 <setAllDevicesState>:

void setAllDevicesState(int state) {
 800cdd8:	b590      	push	{r4, r7, lr}
 800cdda:	b08d      	sub	sp, #52	@ 0x34
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
	const char *devices[] = {"device1", "device2", "device3", "device4"};
 800cde0:	4b60      	ldr	r3, [pc, #384]	@ (800cf64 <setAllDevicesState+0x18c>)
 800cde2:	f107 040c 	add.w	r4, r7, #12
 800cde6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cde8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	cJSON *resp = cJSON_CreateObject();
 800cdec:	f7ff f8d4 	bl	800bf98 <cJSON_CreateObject>
 800cdf0:	6238      	str	r0, [r7, #32]
    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 800cdf2:	4b5d      	ldr	r3, [pc, #372]	@ (800cf68 <setAllDevicesState+0x190>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2164      	movs	r1, #100	@ 0x64
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f005 fe5f 	bl	8012abc <xQueueSemaphoreTake>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	f040 80aa 	bne.w	800cf5a <setAllDevicesState+0x182>
        for (int i = 0; i < 4; i++) {
 800ce06:	2300      	movs	r3, #0
 800ce08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce0a:	e073      	b.n	800cef4 <setAllDevicesState+0x11c>
            GPIO_TypeDef* gpio_port;
            uint16_t gpio_pin;

            switch(i) {
 800ce0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce0e:	2b03      	cmp	r3, #3
 800ce10:	d81f      	bhi.n	800ce52 <setAllDevicesState+0x7a>
 800ce12:	a201      	add	r2, pc, #4	@ (adr r2, 800ce18 <setAllDevicesState+0x40>)
 800ce14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce18:	0800ce29 	.word	0x0800ce29
 800ce1c:	0800ce33 	.word	0x0800ce33
 800ce20:	0800ce3d 	.word	0x0800ce3d
 800ce24:	0800ce47 	.word	0x0800ce47
                case 0:
                    gpio_port = TOUCH_LED1_GPIO_Port;
 800ce28:	4b50      	ldr	r3, [pc, #320]	@ (800cf6c <setAllDevicesState+0x194>)
 800ce2a:	62bb      	str	r3, [r7, #40]	@ 0x28
                    gpio_pin = TOUCH_LED1_Pin;
 800ce2c:	2308      	movs	r3, #8
 800ce2e:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    break;
 800ce30:	e00f      	b.n	800ce52 <setAllDevicesState+0x7a>
                case 1:
                    gpio_port = TOUCH_LED2_GPIO_Port;
 800ce32:	4b4e      	ldr	r3, [pc, #312]	@ (800cf6c <setAllDevicesState+0x194>)
 800ce34:	62bb      	str	r3, [r7, #40]	@ 0x28
                    gpio_pin = TOUCH_LED2_Pin;
 800ce36:	2304      	movs	r3, #4
 800ce38:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    break;
 800ce3a:	e00a      	b.n	800ce52 <setAllDevicesState+0x7a>
                case 2:
                    gpio_port = TOUCH_LED3_GPIO_Port;
 800ce3c:	4b4c      	ldr	r3, [pc, #304]	@ (800cf70 <setAllDevicesState+0x198>)
 800ce3e:	62bb      	str	r3, [r7, #40]	@ 0x28
                    gpio_pin = TOUCH_LED3_Pin;
 800ce40:	2302      	movs	r3, #2
 800ce42:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    break;
 800ce44:	e005      	b.n	800ce52 <setAllDevicesState+0x7a>
                case 3:
                    gpio_port = TOUCH_LED4_GPIO_Port;
 800ce46:	4b4b      	ldr	r3, [pc, #300]	@ (800cf74 <setAllDevicesState+0x19c>)
 800ce48:	62bb      	str	r3, [r7, #40]	@ 0x28
                    gpio_pin = TOUCH_LED4_Pin;
 800ce4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ce4e:	84fb      	strh	r3, [r7, #38]	@ 0x26
                    break;
 800ce50:	bf00      	nop
            }

            if (state) {
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d025      	beq.n	800cea4 <setAllDevicesState+0xcc>
                HAL_GPIO_WritePin(gpio_port, gpio_pin, GPIO_PIN_SET);
 800ce58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce60:	f002 f972 	bl	800f148 <HAL_GPIO_WritePin>
                global_device_states[i] = 1;
 800ce64:	4a44      	ldr	r2, [pc, #272]	@ (800cf78 <setAllDevicesState+0x1a0>)
 800ce66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce68:	2101      	movs	r1, #1
 800ce6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                device_states[i] = 1;
 800ce6e:	4a43      	ldr	r2, [pc, #268]	@ (800cf7c <setAllDevicesState+0x1a4>)
 800ce70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce72:	2101      	movs	r1, #1
 800ce74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                cJSON_AddNumberToObject(resp, devices[i], device_states[i]);
 800ce78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce7a:	009b      	lsls	r3, r3, #2
 800ce7c:	3330      	adds	r3, #48	@ 0x30
 800ce7e:	443b      	add	r3, r7
 800ce80:	f853 4c24 	ldr.w	r4, [r3, #-36]
 800ce84:	4a3d      	ldr	r2, [pc, #244]	@ (800cf7c <setAllDevicesState+0x1a4>)
 800ce86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7fb fb79 	bl	8008584 <__aeabi_i2d>
 800ce92:	4602      	mov	r2, r0
 800ce94:	460b      	mov	r3, r1
 800ce96:	ec43 2b10 	vmov	d0, r2, r3
 800ce9a:	4621      	mov	r1, r4
 800ce9c:	6a38      	ldr	r0, [r7, #32]
 800ce9e:	f7ff f80d 	bl	800bebc <cJSON_AddNumberToObject>
 800cea2:	e024      	b.n	800ceee <setAllDevicesState+0x116>
            } else {
                HAL_GPIO_WritePin(gpio_port, gpio_pin, GPIO_PIN_RESET);
 800cea4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cea6:	2200      	movs	r2, #0
 800cea8:	4619      	mov	r1, r3
 800ceaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ceac:	f002 f94c 	bl	800f148 <HAL_GPIO_WritePin>
                global_device_states[i] = 0;
 800ceb0:	4a31      	ldr	r2, [pc, #196]	@ (800cf78 <setAllDevicesState+0x1a0>)
 800ceb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb4:	2100      	movs	r1, #0
 800ceb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                device_states[i] = 0;
 800ceba:	4a30      	ldr	r2, [pc, #192]	@ (800cf7c <setAllDevicesState+0x1a4>)
 800cebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cebe:	2100      	movs	r1, #0
 800cec0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                cJSON_AddNumberToObject(resp, devices[i], device_states[i]);
 800cec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	3330      	adds	r3, #48	@ 0x30
 800ceca:	443b      	add	r3, r7
 800cecc:	f853 4c24 	ldr.w	r4, [r3, #-36]
 800ced0:	4a2a      	ldr	r2, [pc, #168]	@ (800cf7c <setAllDevicesState+0x1a4>)
 800ced2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ced4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7fb fb53 	bl	8008584 <__aeabi_i2d>
 800cede:	4602      	mov	r2, r0
 800cee0:	460b      	mov	r3, r1
 800cee2:	ec43 2b10 	vmov	d0, r2, r3
 800cee6:	4621      	mov	r1, r4
 800cee8:	6a38      	ldr	r0, [r7, #32]
 800ceea:	f7fe ffe7 	bl	800bebc <cJSON_AddNumberToObject>
        for (int i = 0; i < 4; i++) {
 800ceee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef0:	3301      	adds	r3, #1
 800cef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef6:	2b03      	cmp	r3, #3
 800cef8:	dd88      	ble.n	800ce0c <setAllDevicesState+0x34>
            }
        }

        xSemaphoreGive(deviceStateMutex);
 800cefa:	4b1b      	ldr	r3, [pc, #108]	@ (800cf68 <setAllDevicesState+0x190>)
 800cefc:	6818      	ldr	r0, [r3, #0]
 800cefe:	2300      	movs	r3, #0
 800cf00:	2200      	movs	r2, #0
 800cf02:	2100      	movs	r1, #0
 800cf04:	f005 fb48 	bl	8012598 <xQueueGenericSend>

        char *respStr = cJSON_PrintUnformatted(resp);
 800cf08:	6a38      	ldr	r0, [r7, #32]
 800cf0a:	f7fe f985 	bl	800b218 <cJSON_PrintUnformatted>
 800cf0e:	61f8      	str	r0, [r7, #28]
		if (respStr)
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d014      	beq.n	800cf40 <setAllDevicesState+0x168>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)respStr, strlen(respStr), HAL_MAX_DELAY);
 800cf16:	69f8      	ldr	r0, [r7, #28]
 800cf18:	f7fb f984 	bl	8008224 <strlen>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	b29a      	uxth	r2, r3
 800cf20:	f04f 33ff 	mov.w	r3, #4294967295
 800cf24:	69f9      	ldr	r1, [r7, #28]
 800cf26:	4816      	ldr	r0, [pc, #88]	@ (800cf80 <setAllDevicesState+0x1a8>)
 800cf28:	f004 f944 	bl	80111b4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800cf2c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf30:	2201      	movs	r2, #1
 800cf32:	4914      	ldr	r1, [pc, #80]	@ (800cf84 <setAllDevicesState+0x1ac>)
 800cf34:	4812      	ldr	r0, [pc, #72]	@ (800cf80 <setAllDevicesState+0x1a8>)
 800cf36:	f004 f93d 	bl	80111b4 <HAL_UART_Transmit>
			free(respStr);
 800cf3a:	69f8      	ldr	r0, [r7, #28]
 800cf3c:	f007 ff82 	bl	8014e44 <free>
		}
		cJSON_Delete(resp);
 800cf40:	6a38      	ldr	r0, [r7, #32]
 800cf42:	f7fd f8bb 	bl	800a0bc <cJSON_Delete>

        printf("DISPLAY: All devices set to %s\n", state ? "ON" : "OFF");
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d001      	beq.n	800cf50 <setAllDevicesState+0x178>
 800cf4c:	4b0e      	ldr	r3, [pc, #56]	@ (800cf88 <setAllDevicesState+0x1b0>)
 800cf4e:	e000      	b.n	800cf52 <setAllDevicesState+0x17a>
 800cf50:	4b0e      	ldr	r3, [pc, #56]	@ (800cf8c <setAllDevicesState+0x1b4>)
 800cf52:	4619      	mov	r1, r3
 800cf54:	480e      	ldr	r0, [pc, #56]	@ (800cf90 <setAllDevicesState+0x1b8>)
 800cf56:	f008 ff31 	bl	8015dbc <iprintf>
    }
}
 800cf5a:	bf00      	nop
 800cf5c:	3734      	adds	r7, #52	@ 0x34
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd90      	pop	{r4, r7, pc}
 800cf62:	bf00      	nop
 800cf64:	08018a30 	.word	0x08018a30
 800cf68:	20000724 	.word	0x20000724
 800cf6c:	40020800 	.word	0x40020800
 800cf70:	40021c00 	.word	0x40021c00
 800cf74:	40020400 	.word	0x40020400
 800cf78:	2000072c 	.word	0x2000072c
 800cf7c:	2000027c 	.word	0x2000027c
 800cf80:	20000504 	.word	0x20000504
 800cf84:	080189ec 	.word	0x080189ec
 800cf88:	0801890c 	.word	0x0801890c
 800cf8c:	08018910 	.word	0x08018910
 800cf90:	08018a10 	.word	0x08018a10

0800cf94 <syncDisplayDeviceStates>:

void syncDisplayDeviceStates(void) {
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(10)) == pdTRUE) {
 800cf9a:	4b12      	ldr	r3, [pc, #72]	@ (800cfe4 <syncDisplayDeviceStates+0x50>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	210a      	movs	r1, #10
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f005 fd8b 	bl	8012abc <xQueueSemaphoreTake>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d117      	bne.n	800cfdc <syncDisplayDeviceStates+0x48>
        for (int i = 0; i < 4; i++) {
 800cfac:	2300      	movs	r3, #0
 800cfae:	607b      	str	r3, [r7, #4]
 800cfb0:	e00a      	b.n	800cfc8 <syncDisplayDeviceStates+0x34>
            device_states[i] = global_device_states[i];
 800cfb2:	4a0d      	ldr	r2, [pc, #52]	@ (800cfe8 <syncDisplayDeviceStates+0x54>)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cfba:	490c      	ldr	r1, [pc, #48]	@ (800cfec <syncDisplayDeviceStates+0x58>)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < 4; i++) {
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	607b      	str	r3, [r7, #4]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2b03      	cmp	r3, #3
 800cfcc:	ddf1      	ble.n	800cfb2 <syncDisplayDeviceStates+0x1e>
        }
        xSemaphoreGive(deviceStateMutex);
 800cfce:	4b05      	ldr	r3, [pc, #20]	@ (800cfe4 <syncDisplayDeviceStates+0x50>)
 800cfd0:	6818      	ldr	r0, [r3, #0]
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	2100      	movs	r1, #0
 800cfd8:	f005 fade 	bl	8012598 <xQueueGenericSend>
    }
}
 800cfdc:	bf00      	nop
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}
 800cfe4:	20000724 	.word	0x20000724
 800cfe8:	2000072c 	.word	0x2000072c
 800cfec:	2000027c 	.word	0x2000027c

0800cff0 <handleNavigation>:
    HAL_Delay(800);
    fillRect(MARGIN_X, DISPLAY_HEIGHT - 15, BUTTON_WIDTH, 12, BLACK);
}


void handleNavigation(void) {
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
    int max_options;

    switch(current_menu) {
 800cff6:	4b96      	ldr	r3, [pc, #600]	@ (800d250 <handleNavigation+0x260>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	2b03      	cmp	r3, #3
 800cffc:	d816      	bhi.n	800d02c <handleNavigation+0x3c>
 800cffe:	a201      	add	r2, pc, #4	@ (adr r2, 800d004 <handleNavigation+0x14>)
 800d000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d004:	0800d015 	.word	0x0800d015
 800d008:	0800d01b 	.word	0x0800d01b
 800d00c:	0800d021 	.word	0x0800d021
 800d010:	0800d027 	.word	0x0800d027
        case MENU_MAIN:
            max_options = MAIN_MENU_OPTIONS;
 800d014:	2302      	movs	r3, #2
 800d016:	60fb      	str	r3, [r7, #12]
            break;
 800d018:	e00b      	b.n	800d032 <handleNavigation+0x42>
        case MENU_TOTAL_CONTROL:
            max_options = TOTAL_CONTROL_OPTIONS;
 800d01a:	2303      	movs	r3, #3
 800d01c:	60fb      	str	r3, [r7, #12]
            break;
 800d01e:	e008      	b.n	800d032 <handleNavigation+0x42>
        case MENU_SEPARATE_CONTROL:
            max_options = SEPARATE_CONTROL_OPTIONS;
 800d020:	2305      	movs	r3, #5
 800d022:	60fb      	str	r3, [r7, #12]
            break;
 800d024:	e005      	b.n	800d032 <handleNavigation+0x42>
        case MENU_DEVICE_CONTROL:
            max_options = DEVICE_CONTROL_OPTIONS;
 800d026:	2304      	movs	r3, #4
 800d028:	60fb      	str	r3, [r7, #12]
            break;
 800d02a:	e002      	b.n	800d032 <handleNavigation+0x42>
        default:
            max_options = 2;
 800d02c:	2302      	movs	r3, #2
 800d02e:	60fb      	str	r3, [r7, #12]
            break;
 800d030:	bf00      	nop
    }

    if (upbutton) {
 800d032:	4b88      	ldr	r3, [pc, #544]	@ (800d254 <handleNavigation+0x264>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d052      	beq.n	800d0e0 <handleNavigation+0xf0>
        HAL_Delay(200);
 800d03a:	20c8      	movs	r0, #200	@ 0xc8
 800d03c:	f001 fd40 	bl	800eac0 <HAL_Delay>
        int old_selection = current_selection;
 800d040:	4b85      	ldr	r3, [pc, #532]	@ (800d258 <handleNavigation+0x268>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	60bb      	str	r3, [r7, #8]
        current_selection = (current_selection - 1 + max_options) % max_options;
 800d046:	4b84      	ldr	r3, [pc, #528]	@ (800d258 <handleNavigation+0x268>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	1e5a      	subs	r2, r3, #1
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	4413      	add	r3, r2
 800d050:	68fa      	ldr	r2, [r7, #12]
 800d052:	fb93 f2f2 	sdiv	r2, r3, r2
 800d056:	68f9      	ldr	r1, [r7, #12]
 800d058:	fb01 f202 	mul.w	r2, r1, r2
 800d05c:	1a9b      	subs	r3, r3, r2
 800d05e:	4a7e      	ldr	r2, [pc, #504]	@ (800d258 <handleNavigation+0x268>)
 800d060:	6013      	str	r3, [r2, #0]
        upbutton = 0;
 800d062:	4b7c      	ldr	r3, [pc, #496]	@ (800d254 <handleNavigation+0x264>)
 800d064:	2200      	movs	r2, #0
 800d066:	601a      	str	r2, [r3, #0]

        // Quick highlight update instead of full redraw
        switch(current_menu) {
 800d068:	4b79      	ldr	r3, [pc, #484]	@ (800d250 <handleNavigation+0x260>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2b03      	cmp	r3, #3
 800d06e:	d837      	bhi.n	800d0e0 <handleNavigation+0xf0>
 800d070:	a201      	add	r2, pc, #4	@ (adr r2, 800d078 <handleNavigation+0x88>)
 800d072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d076:	bf00      	nop
 800d078:	0800d089 	.word	0x0800d089
 800d07c:	0800d09f 	.word	0x0800d09f
 800d080:	0800d0b5 	.word	0x0800d0b5
 800d084:	0800d0cb 	.word	0x0800d0cb
            case MENU_MAIN:
                updateButtonSelection(old_selection, current_selection);
 800d088:	4b73      	ldr	r3, [pc, #460]	@ (800d258 <handleNavigation+0x268>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4619      	mov	r1, r3
 800d08e:	68b8      	ldr	r0, [r7, #8]
 800d090:	f7ff f8ea 	bl	800c268 <updateButtonSelection>
                last_selection = current_selection;
 800d094:	4b70      	ldr	r3, [pc, #448]	@ (800d258 <handleNavigation+0x268>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4a70      	ldr	r2, [pc, #448]	@ (800d25c <handleNavigation+0x26c>)
 800d09a:	6013      	str	r3, [r2, #0]
                break;
 800d09c:	e020      	b.n	800d0e0 <handleNavigation+0xf0>
            case MENU_TOTAL_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 800d09e:	4b6e      	ldr	r3, [pc, #440]	@ (800d258 <handleNavigation+0x268>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	68b8      	ldr	r0, [r7, #8]
 800d0a6:	f7ff f8df 	bl	800c268 <updateButtonSelection>
                last_selection = current_selection;
 800d0aa:	4b6b      	ldr	r3, [pc, #428]	@ (800d258 <handleNavigation+0x268>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a6b      	ldr	r2, [pc, #428]	@ (800d25c <handleNavigation+0x26c>)
 800d0b0:	6013      	str	r3, [r2, #0]
                break;
 800d0b2:	e015      	b.n	800d0e0 <handleNavigation+0xf0>
            case MENU_SEPARATE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 800d0b4:	4b68      	ldr	r3, [pc, #416]	@ (800d258 <handleNavigation+0x268>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	68b8      	ldr	r0, [r7, #8]
 800d0bc:	f7ff f8d4 	bl	800c268 <updateButtonSelection>
                last_selection = current_selection;
 800d0c0:	4b65      	ldr	r3, [pc, #404]	@ (800d258 <handleNavigation+0x268>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a65      	ldr	r2, [pc, #404]	@ (800d25c <handleNavigation+0x26c>)
 800d0c6:	6013      	str	r3, [r2, #0]
                break;
 800d0c8:	e00a      	b.n	800d0e0 <handleNavigation+0xf0>
            case MENU_DEVICE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 800d0ca:	4b63      	ldr	r3, [pc, #396]	@ (800d258 <handleNavigation+0x268>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	68b8      	ldr	r0, [r7, #8]
 800d0d2:	f7ff f8c9 	bl	800c268 <updateButtonSelection>
                last_selection = current_selection;
 800d0d6:	4b60      	ldr	r3, [pc, #384]	@ (800d258 <handleNavigation+0x268>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4a60      	ldr	r2, [pc, #384]	@ (800d25c <handleNavigation+0x26c>)
 800d0dc:	6013      	str	r3, [r2, #0]
                break;
 800d0de:	bf00      	nop
        }
    }

    if (downbutton) {
 800d0e0:	4b5f      	ldr	r3, [pc, #380]	@ (800d260 <handleNavigation+0x270>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d04f      	beq.n	800d188 <handleNavigation+0x198>
        HAL_Delay(200);
 800d0e8:	20c8      	movs	r0, #200	@ 0xc8
 800d0ea:	f001 fce9 	bl	800eac0 <HAL_Delay>
        int old_selection = current_selection;
 800d0ee:	4b5a      	ldr	r3, [pc, #360]	@ (800d258 <handleNavigation+0x268>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	607b      	str	r3, [r7, #4]
        current_selection = (current_selection + 1) % max_options;
 800d0f4:	4b58      	ldr	r3, [pc, #352]	@ (800d258 <handleNavigation+0x268>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	68fa      	ldr	r2, [r7, #12]
 800d0fc:	fb93 f2f2 	sdiv	r2, r3, r2
 800d100:	68f9      	ldr	r1, [r7, #12]
 800d102:	fb01 f202 	mul.w	r2, r1, r2
 800d106:	1a9b      	subs	r3, r3, r2
 800d108:	4a53      	ldr	r2, [pc, #332]	@ (800d258 <handleNavigation+0x268>)
 800d10a:	6013      	str	r3, [r2, #0]
        downbutton = 0;
 800d10c:	4b54      	ldr	r3, [pc, #336]	@ (800d260 <handleNavigation+0x270>)
 800d10e:	2200      	movs	r2, #0
 800d110:	601a      	str	r2, [r3, #0]

        switch(current_menu) {
 800d112:	4b4f      	ldr	r3, [pc, #316]	@ (800d250 <handleNavigation+0x260>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2b03      	cmp	r3, #3
 800d118:	d836      	bhi.n	800d188 <handleNavigation+0x198>
 800d11a:	a201      	add	r2, pc, #4	@ (adr r2, 800d120 <handleNavigation+0x130>)
 800d11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d120:	0800d131 	.word	0x0800d131
 800d124:	0800d147 	.word	0x0800d147
 800d128:	0800d15d 	.word	0x0800d15d
 800d12c:	0800d173 	.word	0x0800d173
            case MENU_MAIN:
                updateButtonSelection(old_selection, current_selection);
 800d130:	4b49      	ldr	r3, [pc, #292]	@ (800d258 <handleNavigation+0x268>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4619      	mov	r1, r3
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f7ff f896 	bl	800c268 <updateButtonSelection>
                last_selection = current_selection;
 800d13c:	4b46      	ldr	r3, [pc, #280]	@ (800d258 <handleNavigation+0x268>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a46      	ldr	r2, [pc, #280]	@ (800d25c <handleNavigation+0x26c>)
 800d142:	6013      	str	r3, [r2, #0]
                break;
 800d144:	e020      	b.n	800d188 <handleNavigation+0x198>
            case MENU_TOTAL_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 800d146:	4b44      	ldr	r3, [pc, #272]	@ (800d258 <handleNavigation+0x268>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4619      	mov	r1, r3
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f7ff f88b 	bl	800c268 <updateButtonSelection>
                last_selection = current_selection;
 800d152:	4b41      	ldr	r3, [pc, #260]	@ (800d258 <handleNavigation+0x268>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4a41      	ldr	r2, [pc, #260]	@ (800d25c <handleNavigation+0x26c>)
 800d158:	6013      	str	r3, [r2, #0]
                break;
 800d15a:	e015      	b.n	800d188 <handleNavigation+0x198>
            case MENU_SEPARATE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 800d15c:	4b3e      	ldr	r3, [pc, #248]	@ (800d258 <handleNavigation+0x268>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4619      	mov	r1, r3
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f7ff f880 	bl	800c268 <updateButtonSelection>
                last_selection = current_selection;
 800d168:	4b3b      	ldr	r3, [pc, #236]	@ (800d258 <handleNavigation+0x268>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a3b      	ldr	r2, [pc, #236]	@ (800d25c <handleNavigation+0x26c>)
 800d16e:	6013      	str	r3, [r2, #0]
                break;
 800d170:	e00a      	b.n	800d188 <handleNavigation+0x198>
            case MENU_DEVICE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 800d172:	4b39      	ldr	r3, [pc, #228]	@ (800d258 <handleNavigation+0x268>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4619      	mov	r1, r3
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f7ff f875 	bl	800c268 <updateButtonSelection>
                last_selection = current_selection;
 800d17e:	4b36      	ldr	r3, [pc, #216]	@ (800d258 <handleNavigation+0x268>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4a36      	ldr	r2, [pc, #216]	@ (800d25c <handleNavigation+0x26c>)
 800d184:	6013      	str	r3, [r2, #0]
                break;
 800d186:	bf00      	nop
        }
    }

    if (enter) {
 800d188:	4b36      	ldr	r3, [pc, #216]	@ (800d264 <handleNavigation+0x274>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f000 80df 	beq.w	800d350 <handleNavigation+0x360>
        HAL_Delay(200);
 800d192:	20c8      	movs	r0, #200	@ 0xc8
 800d194:	f001 fc94 	bl	800eac0 <HAL_Delay>
        enter = 0;
 800d198:	4b32      	ldr	r3, [pc, #200]	@ (800d264 <handleNavigation+0x274>)
 800d19a:	2200      	movs	r2, #0
 800d19c:	601a      	str	r2, [r3, #0]

        switch(current_menu) {
 800d19e:	4b2c      	ldr	r3, [pc, #176]	@ (800d250 <handleNavigation+0x260>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	2b03      	cmp	r3, #3
 800d1a4:	f200 80d4 	bhi.w	800d350 <handleNavigation+0x360>
 800d1a8:	a201      	add	r2, pc, #4	@ (adr r2, 800d1b0 <handleNavigation+0x1c0>)
 800d1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ae:	bf00      	nop
 800d1b0:	0800d1c1 	.word	0x0800d1c1
 800d1b4:	0800d203 	.word	0x0800d203
 800d1b8:	0800d26d 	.word	0x0800d26d
 800d1bc:	0800d2c9 	.word	0x0800d2c9
            case MENU_MAIN:
                if (current_selection == 0) {
 800d1c0:	4b25      	ldr	r3, [pc, #148]	@ (800d258 <handleNavigation+0x268>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d10b      	bne.n	800d1e0 <handleNavigation+0x1f0>
                    current_menu = MENU_TOTAL_CONTROL;
 800d1c8:	4b21      	ldr	r3, [pc, #132]	@ (800d250 <handleNavigation+0x260>)
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800d1ce:	4b22      	ldr	r3, [pc, #136]	@ (800d258 <handleNavigation+0x268>)
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 800d1d4:	4b24      	ldr	r3, [pc, #144]	@ (800d268 <handleNavigation+0x278>)
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	701a      	strb	r2, [r3, #0]
                    displayTotalControlMenu();
 800d1da:	f7ff fa77 	bl	800c6cc <displayTotalControlMenu>
                    current_menu = MENU_SEPARATE_CONTROL;
                    current_selection = 0;
                    menu_drawn = false; // Force menu redraw
                    displaySeparateControlMenu();
                }
                break;
 800d1de:	e0b0      	b.n	800d342 <handleNavigation+0x352>
                } else if (current_selection == 1) {
 800d1e0:	4b1d      	ldr	r3, [pc, #116]	@ (800d258 <handleNavigation+0x268>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	f040 80ac 	bne.w	800d342 <handleNavigation+0x352>
                    current_menu = MENU_SEPARATE_CONTROL;
 800d1ea:	4b19      	ldr	r3, [pc, #100]	@ (800d250 <handleNavigation+0x260>)
 800d1ec:	2202      	movs	r2, #2
 800d1ee:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800d1f0:	4b19      	ldr	r3, [pc, #100]	@ (800d258 <handleNavigation+0x268>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 800d1f6:	4b1c      	ldr	r3, [pc, #112]	@ (800d268 <handleNavigation+0x278>)
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	701a      	strb	r2, [r3, #0]
                    displaySeparateControlMenu();
 800d1fc:	f7ff fb44 	bl	800c888 <displaySeparateControlMenu>
                break;
 800d200:	e09f      	b.n	800d342 <handleNavigation+0x352>

            case MENU_TOTAL_CONTROL:
                if (current_selection == 0) {
 800d202:	4b15      	ldr	r3, [pc, #84]	@ (800d258 <handleNavigation+0x268>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d103      	bne.n	800d212 <handleNavigation+0x222>
                    setAllDevicesState(1);
 800d20a:	2001      	movs	r0, #1
 800d20c:	f7ff fde4 	bl	800cdd8 <setAllDevicesState>
                    menu_drawn = false; // Force menu redraw
                    displayOnwardsLogoOptimized();
                    HAL_Delay(600);
                    displayMainMenu();
                }
                break;
 800d210:	e099      	b.n	800d346 <handleNavigation+0x356>
                } else if (current_selection == 1) {
 800d212:	4b11      	ldr	r3, [pc, #68]	@ (800d258 <handleNavigation+0x268>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2b01      	cmp	r3, #1
 800d218:	d103      	bne.n	800d222 <handleNavigation+0x232>
                    setAllDevicesState(0);
 800d21a:	2000      	movs	r0, #0
 800d21c:	f7ff fddc 	bl	800cdd8 <setAllDevicesState>
                break;
 800d220:	e091      	b.n	800d346 <handleNavigation+0x356>
                } else if (current_selection == 2) {
 800d222:	4b0d      	ldr	r3, [pc, #52]	@ (800d258 <handleNavigation+0x268>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2b02      	cmp	r3, #2
 800d228:	f040 808d 	bne.w	800d346 <handleNavigation+0x356>
                    current_menu = MENU_MAIN;
 800d22c:	4b08      	ldr	r3, [pc, #32]	@ (800d250 <handleNavigation+0x260>)
 800d22e:	2200      	movs	r2, #0
 800d230:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800d232:	4b09      	ldr	r3, [pc, #36]	@ (800d258 <handleNavigation+0x268>)
 800d234:	2200      	movs	r2, #0
 800d236:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 800d238:	4b0b      	ldr	r3, [pc, #44]	@ (800d268 <handleNavigation+0x278>)
 800d23a:	2200      	movs	r2, #0
 800d23c:	701a      	strb	r2, [r3, #0]
                    displayOnwardsLogoOptimized();
 800d23e:	f000 fba5 	bl	800d98c <displayOnwardsLogoOptimized>
                    HAL_Delay(600);
 800d242:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800d246:	f001 fc3b 	bl	800eac0 <HAL_Delay>
                    displayMainMenu();
 800d24a:	f7ff f9c3 	bl	800c5d4 <displayMainMenu>
                break;
 800d24e:	e07a      	b.n	800d346 <handleNavigation+0x356>
 800d250:	20000264 	.word	0x20000264
 800d254:	20000274 	.word	0x20000274
 800d258:	20000268 	.word	0x20000268
 800d25c:	2000000c 	.word	0x2000000c
 800d260:	20000270 	.word	0x20000270
 800d264:	20000278 	.word	0x20000278
 800d268:	2000028c 	.word	0x2000028c

            case MENU_SEPARATE_CONTROL:
                if (current_selection >= 0 && current_selection <= 3) {
 800d26c:	4b3a      	ldr	r3, [pc, #232]	@ (800d358 <handleNavigation+0x368>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	db13      	blt.n	800d29c <handleNavigation+0x2ac>
 800d274:	4b38      	ldr	r3, [pc, #224]	@ (800d358 <handleNavigation+0x368>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b03      	cmp	r3, #3
 800d27a:	dc0f      	bgt.n	800d29c <handleNavigation+0x2ac>
                    current_device = current_selection;
 800d27c:	4b36      	ldr	r3, [pc, #216]	@ (800d358 <handleNavigation+0x368>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a36      	ldr	r2, [pc, #216]	@ (800d35c <handleNavigation+0x36c>)
 800d282:	6013      	str	r3, [r2, #0]
                    current_menu = MENU_DEVICE_CONTROL;
 800d284:	4b36      	ldr	r3, [pc, #216]	@ (800d360 <handleNavigation+0x370>)
 800d286:	2203      	movs	r2, #3
 800d288:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800d28a:	4b33      	ldr	r3, [pc, #204]	@ (800d358 <handleNavigation+0x368>)
 800d28c:	2200      	movs	r2, #0
 800d28e:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 800d290:	4b34      	ldr	r3, [pc, #208]	@ (800d364 <handleNavigation+0x374>)
 800d292:	2200      	movs	r2, #0
 800d294:	701a      	strb	r2, [r3, #0]
                    displayDeviceControlMenu();
 800d296:	f7ff fbd1 	bl	800ca3c <displayDeviceControlMenu>
                    menu_drawn = false; // Force menu redraw
                    displayOnwardsLogoOptimized();
                    HAL_Delay(600);
                    displayMainMenu();
                }
                break;
 800d29a:	e056      	b.n	800d34a <handleNavigation+0x35a>
                } else if (current_selection == 4) {
 800d29c:	4b2e      	ldr	r3, [pc, #184]	@ (800d358 <handleNavigation+0x368>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	2b04      	cmp	r3, #4
 800d2a2:	d152      	bne.n	800d34a <handleNavigation+0x35a>
                    current_menu = MENU_MAIN;
 800d2a4:	4b2e      	ldr	r3, [pc, #184]	@ (800d360 <handleNavigation+0x370>)
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800d2aa:	4b2b      	ldr	r3, [pc, #172]	@ (800d358 <handleNavigation+0x368>)
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 800d2b0:	4b2c      	ldr	r3, [pc, #176]	@ (800d364 <handleNavigation+0x374>)
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	701a      	strb	r2, [r3, #0]
                    displayOnwardsLogoOptimized();
 800d2b6:	f000 fb69 	bl	800d98c <displayOnwardsLogoOptimized>
                    HAL_Delay(600);
 800d2ba:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800d2be:	f001 fbff 	bl	800eac0 <HAL_Delay>
                    displayMainMenu();
 800d2c2:	f7ff f987 	bl	800c5d4 <displayMainMenu>
                break;
 800d2c6:	e040      	b.n	800d34a <handleNavigation+0x35a>

            case MENU_DEVICE_CONTROL:
                if (current_selection == 0) {
 800d2c8:	4b23      	ldr	r3, [pc, #140]	@ (800d358 <handleNavigation+0x368>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d106      	bne.n	800d2de <handleNavigation+0x2ee>
                    setDeviceState(current_device, 1);
 800d2d0:	4b22      	ldr	r3, [pc, #136]	@ (800d35c <handleNavigation+0x36c>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	2101      	movs	r1, #1
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7ff fca8 	bl	800cc2c <setDeviceState>
                    menu_drawn = false; // Force menu redraw
                    displayOnwardsLogoOptimized();
                    HAL_Delay(600);
                    displayMainMenu();
                }
                break;
 800d2dc:	e037      	b.n	800d34e <handleNavigation+0x35e>
                } else if (current_selection == 1) {
 800d2de:	4b1e      	ldr	r3, [pc, #120]	@ (800d358 <handleNavigation+0x368>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d106      	bne.n	800d2f4 <handleNavigation+0x304>
                    setDeviceState(current_device, 0);
 800d2e6:	4b1d      	ldr	r3, [pc, #116]	@ (800d35c <handleNavigation+0x36c>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2100      	movs	r1, #0
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7ff fc9d 	bl	800cc2c <setDeviceState>
                break;
 800d2f2:	e02c      	b.n	800d34e <handleNavigation+0x35e>
                } else if (current_selection == 2) {
 800d2f4:	4b18      	ldr	r3, [pc, #96]	@ (800d358 <handleNavigation+0x368>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	2b02      	cmp	r3, #2
 800d2fa:	d10c      	bne.n	800d316 <handleNavigation+0x326>
                    current_menu = MENU_SEPARATE_CONTROL;
 800d2fc:	4b18      	ldr	r3, [pc, #96]	@ (800d360 <handleNavigation+0x370>)
 800d2fe:	2202      	movs	r2, #2
 800d300:	601a      	str	r2, [r3, #0]
                    current_selection = current_device;
 800d302:	4b16      	ldr	r3, [pc, #88]	@ (800d35c <handleNavigation+0x36c>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4a14      	ldr	r2, [pc, #80]	@ (800d358 <handleNavigation+0x368>)
 800d308:	6013      	str	r3, [r2, #0]
                    menu_drawn = false; // Force menu redraw
 800d30a:	4b16      	ldr	r3, [pc, #88]	@ (800d364 <handleNavigation+0x374>)
 800d30c:	2200      	movs	r2, #0
 800d30e:	701a      	strb	r2, [r3, #0]
                    displaySeparateControlMenu();
 800d310:	f7ff faba 	bl	800c888 <displaySeparateControlMenu>
                break;
 800d314:	e01b      	b.n	800d34e <handleNavigation+0x35e>
                }else if (current_selection == 3) {
 800d316:	4b10      	ldr	r3, [pc, #64]	@ (800d358 <handleNavigation+0x368>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2b03      	cmp	r3, #3
 800d31c:	d117      	bne.n	800d34e <handleNavigation+0x35e>
                    current_menu = MENU_MAIN;
 800d31e:	4b10      	ldr	r3, [pc, #64]	@ (800d360 <handleNavigation+0x370>)
 800d320:	2200      	movs	r2, #0
 800d322:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800d324:	4b0c      	ldr	r3, [pc, #48]	@ (800d358 <handleNavigation+0x368>)
 800d326:	2200      	movs	r2, #0
 800d328:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 800d32a:	4b0e      	ldr	r3, [pc, #56]	@ (800d364 <handleNavigation+0x374>)
 800d32c:	2200      	movs	r2, #0
 800d32e:	701a      	strb	r2, [r3, #0]
                    displayOnwardsLogoOptimized();
 800d330:	f000 fb2c 	bl	800d98c <displayOnwardsLogoOptimized>
                    HAL_Delay(600);
 800d334:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800d338:	f001 fbc2 	bl	800eac0 <HAL_Delay>
                    displayMainMenu();
 800d33c:	f7ff f94a 	bl	800c5d4 <displayMainMenu>
                break;
 800d340:	e005      	b.n	800d34e <handleNavigation+0x35e>
                break;
 800d342:	bf00      	nop
 800d344:	e004      	b.n	800d350 <handleNavigation+0x360>
                break;
 800d346:	bf00      	nop
 800d348:	e002      	b.n	800d350 <handleNavigation+0x360>
                break;
 800d34a:	bf00      	nop
 800d34c:	e000      	b.n	800d350 <handleNavigation+0x360>
                break;
 800d34e:	bf00      	nop
        }
    }
}
 800d350:	bf00      	nop
 800d352:	3710      	adds	r7, #16
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}
 800d358:	20000268 	.word	0x20000268
 800d35c:	2000026c 	.word	0x2000026c
 800d360:	20000264 	.word	0x20000264
 800d364:	2000028c 	.word	0x2000028c

0800d368 <Menu_Handler>:


void Menu_Handler(void) {
 800d368:	b580      	push	{r7, lr}
 800d36a:	af00      	add	r7, sp, #0
    switch(current_menu) {
 800d36c:	4b0f      	ldr	r3, [pc, #60]	@ (800d3ac <Menu_Handler+0x44>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2b03      	cmp	r3, #3
 800d372:	d817      	bhi.n	800d3a4 <Menu_Handler+0x3c>
 800d374:	a201      	add	r2, pc, #4	@ (adr r2, 800d37c <Menu_Handler+0x14>)
 800d376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d37a:	bf00      	nop
 800d37c:	0800d38d 	.word	0x0800d38d
 800d380:	0800d393 	.word	0x0800d393
 800d384:	0800d399 	.word	0x0800d399
 800d388:	0800d39f 	.word	0x0800d39f
        case MENU_MAIN:
            displayMainMenu();
 800d38c:	f7ff f922 	bl	800c5d4 <displayMainMenu>
            break;
 800d390:	e008      	b.n	800d3a4 <Menu_Handler+0x3c>
        case MENU_TOTAL_CONTROL:
            displayTotalControlMenu();
 800d392:	f7ff f99b 	bl	800c6cc <displayTotalControlMenu>
            break;
 800d396:	e005      	b.n	800d3a4 <Menu_Handler+0x3c>
        case MENU_SEPARATE_CONTROL:
            displaySeparateControlMenu();
 800d398:	f7ff fa76 	bl	800c888 <displaySeparateControlMenu>
            break;
 800d39c:	e002      	b.n	800d3a4 <Menu_Handler+0x3c>
        case MENU_DEVICE_CONTROL:
            displayDeviceControlMenu();
 800d39e:	f7ff fb4d 	bl	800ca3c <displayDeviceControlMenu>
            break;
 800d3a2:	bf00      	nop
    }

    handleNavigation();
 800d3a4:	f7ff fe24 	bl	800cff0 <handleNavigation>
}
 800d3a8:	bf00      	nop
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	20000264 	.word	0x20000264

0800d3b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_10) { // ENTER button
 800d3ba:	88fb      	ldrh	r3, [r7, #6]
 800d3bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d3c0:	d108      	bne.n	800d3d4 <HAL_GPIO_EXTI_Callback+0x24>
        downbutton = 0;
 800d3c2:	4b14      	ldr	r3, [pc, #80]	@ (800d414 <HAL_GPIO_EXTI_Callback+0x64>)
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	601a      	str	r2, [r3, #0]
        upbutton = 0;
 800d3c8:	4b13      	ldr	r3, [pc, #76]	@ (800d418 <HAL_GPIO_EXTI_Callback+0x68>)
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	601a      	str	r2, [r3, #0]
        enter = 1;
 800d3ce:	4b13      	ldr	r3, [pc, #76]	@ (800d41c <HAL_GPIO_EXTI_Callback+0x6c>)
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	601a      	str	r2, [r3, #0]
    }

    if (GPIO_Pin == GPIO_PIN_11) { // DOWN button
 800d3d4:	88fb      	ldrh	r3, [r7, #6]
 800d3d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d3da:	d108      	bne.n	800d3ee <HAL_GPIO_EXTI_Callback+0x3e>
        downbutton = 1;
 800d3dc:	4b0d      	ldr	r3, [pc, #52]	@ (800d414 <HAL_GPIO_EXTI_Callback+0x64>)
 800d3de:	2201      	movs	r2, #1
 800d3e0:	601a      	str	r2, [r3, #0]
        upbutton = 0;
 800d3e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d418 <HAL_GPIO_EXTI_Callback+0x68>)
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	601a      	str	r2, [r3, #0]
        enter = 0;
 800d3e8:	4b0c      	ldr	r3, [pc, #48]	@ (800d41c <HAL_GPIO_EXTI_Callback+0x6c>)
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	601a      	str	r2, [r3, #0]
    }

    if (GPIO_Pin == GPIO_PIN_9) { // UP button
 800d3ee:	88fb      	ldrh	r3, [r7, #6]
 800d3f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3f4:	d108      	bne.n	800d408 <HAL_GPIO_EXTI_Callback+0x58>
        downbutton = 0;
 800d3f6:	4b07      	ldr	r3, [pc, #28]	@ (800d414 <HAL_GPIO_EXTI_Callback+0x64>)
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	601a      	str	r2, [r3, #0]
        upbutton = 1;
 800d3fc:	4b06      	ldr	r3, [pc, #24]	@ (800d418 <HAL_GPIO_EXTI_Callback+0x68>)
 800d3fe:	2201      	movs	r2, #1
 800d400:	601a      	str	r2, [r3, #0]
        enter = 0;
 800d402:	4b06      	ldr	r3, [pc, #24]	@ (800d41c <HAL_GPIO_EXTI_Callback+0x6c>)
 800d404:	2200      	movs	r2, #0
 800d406:	601a      	str	r2, [r3, #0]
    }
}
 800d408:	bf00      	nop
 800d40a:	370c      	adds	r7, #12
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr
 800d414:	20000270 	.word	0x20000270
 800d418:	20000274 	.word	0x20000274
 800d41c:	20000278 	.word	0x20000278

0800d420 <initializeMenu>:


void initializeMenu(void) {
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
    printf("display_init\n\r");
 800d426:	481c      	ldr	r0, [pc, #112]	@ (800d498 <initializeMenu+0x78>)
 800d428:	f008 fcc8 	bl	8015dbc <iprintf>
    current_menu = MENU_MAIN;
 800d42c:	4b1b      	ldr	r3, [pc, #108]	@ (800d49c <initializeMenu+0x7c>)
 800d42e:	2200      	movs	r2, #0
 800d430:	601a      	str	r2, [r3, #0]
    current_selection = 0;
 800d432:	4b1b      	ldr	r3, [pc, #108]	@ (800d4a0 <initializeMenu+0x80>)
 800d434:	2200      	movs	r2, #0
 800d436:	601a      	str	r2, [r3, #0]
    current_device = 0;
 800d438:	4b1a      	ldr	r3, [pc, #104]	@ (800d4a4 <initializeMenu+0x84>)
 800d43a:	2200      	movs	r2, #0
 800d43c:	601a      	str	r2, [r3, #0]
    last_selection = -1;
 800d43e:	4b1a      	ldr	r3, [pc, #104]	@ (800d4a8 <initializeMenu+0x88>)
 800d440:	f04f 32ff 	mov.w	r2, #4294967295
 800d444:	601a      	str	r2, [r3, #0]
    last_menu = -1;
 800d446:	4b19      	ldr	r3, [pc, #100]	@ (800d4ac <initializeMenu+0x8c>)
 800d448:	f04f 32ff 	mov.w	r2, #4294967295
 800d44c:	601a      	str	r2, [r3, #0]
    menu_drawn = false;
 800d44e:	4b18      	ldr	r3, [pc, #96]	@ (800d4b0 <initializeMenu+0x90>)
 800d450:	2200      	movs	r2, #0
 800d452:	701a      	strb	r2, [r3, #0]
    buttons_drawn = false;
 800d454:	4b17      	ldr	r3, [pc, #92]	@ (800d4b4 <initializeMenu+0x94>)
 800d456:	2200      	movs	r2, #0
 800d458:	701a      	strb	r2, [r3, #0]

    // Initialize device states
    for (int i = 0; i < 4; i++) {
 800d45a:	2300      	movs	r3, #0
 800d45c:	607b      	str	r3, [r7, #4]
 800d45e:	e011      	b.n	800d484 <initializeMenu+0x64>
        device_states[i] = 0;
 800d460:	4a15      	ldr	r2, [pc, #84]	@ (800d4b8 <initializeMenu+0x98>)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2100      	movs	r1, #0
 800d466:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        last_device_states[i] = -1; // Force update on first display
 800d46a:	4a14      	ldr	r2, [pc, #80]	@ (800d4bc <initializeMenu+0x9c>)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f04f 31ff 	mov.w	r1, #4294967295
 800d472:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        setDeviceState(i, 0);
 800d476:	2100      	movs	r1, #0
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f7ff fbd7 	bl	800cc2c <setDeviceState>
    for (int i = 0; i < 4; i++) {
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	3301      	adds	r3, #1
 800d482:	607b      	str	r3, [r7, #4]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2b03      	cmp	r3, #3
 800d488:	ddea      	ble.n	800d460 <initializeMenu+0x40>
    }

    displayMainMenu();
 800d48a:	f7ff f8a3 	bl	800c5d4 <displayMainMenu>
}
 800d48e:	bf00      	nop
 800d490:	3708      	adds	r7, #8
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	08018a40 	.word	0x08018a40
 800d49c:	20000264 	.word	0x20000264
 800d4a0:	20000268 	.word	0x20000268
 800d4a4:	2000026c 	.word	0x2000026c
 800d4a8:	2000000c 	.word	0x2000000c
 800d4ac:	20000010 	.word	0x20000010
 800d4b0:	2000028c 	.word	0x2000028c
 800d4b4:	2000028d 	.word	0x2000028d
 800d4b8:	2000027c 	.word	0x2000027c
 800d4bc:	20000014 	.word	0x20000014

0800d4c0 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800d4c8:	1d39      	adds	r1, r7, #4
 800d4ca:	f04f 33ff 	mov.w	r3, #4294967295
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	4803      	ldr	r0, [pc, #12]	@ (800d4e0 <__io_putchar+0x20>)
 800d4d2:	f003 fe6f 	bl	80111b4 <HAL_UART_Transmit>
	return ch;
 800d4d6:	687b      	ldr	r3, [r7, #4]
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3708      	adds	r7, #8
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	200004bc 	.word	0x200004bc

0800d4e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d4e8:	f001 faa8 	bl	800ea3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d4ec:	f000 f810 	bl	800d510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d4f0:	f000 f976 	bl	800d7e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800d4f4:	f000 f87e 	bl	800d5f4 <MX_SPI1_Init>
  MX_SPI2_Init();
 800d4f8:	f000 f8b4 	bl	800d664 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800d4fc:	f000 f91c 	bl	800d738 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800d500:	f000 f944 	bl	800d78c <MX_USART3_UART_Init>
  MX_SPI3_Init();
 800d504:	f000 f8e2 	bl	800d6cc <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  user_app_init();
 800d508:	f001 fa32 	bl	800e970 <user_app_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800d50c:	bf00      	nop
 800d50e:	e7fd      	b.n	800d50c <main+0x28>

0800d510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b094      	sub	sp, #80	@ 0x50
 800d514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d516:	f107 031c 	add.w	r3, r7, #28
 800d51a:	2234      	movs	r2, #52	@ 0x34
 800d51c:	2100      	movs	r1, #0
 800d51e:	4618      	mov	r0, r3
 800d520:	f008 fe1a 	bl	8016158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d524:	f107 0308 	add.w	r3, r7, #8
 800d528:	2200      	movs	r2, #0
 800d52a:	601a      	str	r2, [r3, #0]
 800d52c:	605a      	str	r2, [r3, #4]
 800d52e:	609a      	str	r2, [r3, #8]
 800d530:	60da      	str	r2, [r3, #12]
 800d532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d534:	2300      	movs	r3, #0
 800d536:	607b      	str	r3, [r7, #4]
 800d538:	4b2c      	ldr	r3, [pc, #176]	@ (800d5ec <SystemClock_Config+0xdc>)
 800d53a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d53c:	4a2b      	ldr	r2, [pc, #172]	@ (800d5ec <SystemClock_Config+0xdc>)
 800d53e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d542:	6413      	str	r3, [r2, #64]	@ 0x40
 800d544:	4b29      	ldr	r3, [pc, #164]	@ (800d5ec <SystemClock_Config+0xdc>)
 800d546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d54c:	607b      	str	r3, [r7, #4]
 800d54e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d550:	2300      	movs	r3, #0
 800d552:	603b      	str	r3, [r7, #0]
 800d554:	4b26      	ldr	r3, [pc, #152]	@ (800d5f0 <SystemClock_Config+0xe0>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4a25      	ldr	r2, [pc, #148]	@ (800d5f0 <SystemClock_Config+0xe0>)
 800d55a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d55e:	6013      	str	r3, [r2, #0]
 800d560:	4b23      	ldr	r3, [pc, #140]	@ (800d5f0 <SystemClock_Config+0xe0>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d568:	603b      	str	r3, [r7, #0]
 800d56a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800d56c:	2302      	movs	r3, #2
 800d56e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d570:	2301      	movs	r3, #1
 800d572:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d574:	2310      	movs	r3, #16
 800d576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d578:	2302      	movs	r3, #2
 800d57a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800d57c:	2300      	movs	r3, #0
 800d57e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800d580:	2308      	movs	r3, #8
 800d582:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800d584:	23b4      	movs	r3, #180	@ 0xb4
 800d586:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d588:	2302      	movs	r3, #2
 800d58a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800d58c:	2302      	movs	r3, #2
 800d58e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800d590:	2302      	movs	r3, #2
 800d592:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d594:	f107 031c 	add.w	r3, r7, #28
 800d598:	4618      	mov	r0, r3
 800d59a:	f002 f967 	bl	800f86c <HAL_RCC_OscConfig>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d001      	beq.n	800d5a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800d5a4:	f000 f9ec 	bl	800d980 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800d5a8:	f001 fe1a 	bl	800f1e0 <HAL_PWREx_EnableOverDrive>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d001      	beq.n	800d5b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800d5b2:	f000 f9e5 	bl	800d980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d5b6:	230f      	movs	r3, #15
 800d5b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d5ba:	2302      	movs	r3, #2
 800d5bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d5c2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800d5c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d5c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d5cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d5ce:	f107 0308 	add.w	r3, r7, #8
 800d5d2:	2105      	movs	r1, #5
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f001 fe53 	bl	800f280 <HAL_RCC_ClockConfig>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d001      	beq.n	800d5e4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800d5e0:	f000 f9ce 	bl	800d980 <Error_Handler>
  }
}
 800d5e4:	bf00      	nop
 800d5e6:	3750      	adds	r7, #80	@ 0x50
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	40023800 	.word	0x40023800
 800d5f0:	40007000 	.word	0x40007000

0800d5f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800d5f8:	4b18      	ldr	r3, [pc, #96]	@ (800d65c <MX_SPI1_Init+0x68>)
 800d5fa:	4a19      	ldr	r2, [pc, #100]	@ (800d660 <MX_SPI1_Init+0x6c>)
 800d5fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d5fe:	4b17      	ldr	r3, [pc, #92]	@ (800d65c <MX_SPI1_Init+0x68>)
 800d600:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800d604:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800d606:	4b15      	ldr	r3, [pc, #84]	@ (800d65c <MX_SPI1_Init+0x68>)
 800d608:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800d60c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d60e:	4b13      	ldr	r3, [pc, #76]	@ (800d65c <MX_SPI1_Init+0x68>)
 800d610:	2200      	movs	r2, #0
 800d612:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d614:	4b11      	ldr	r3, [pc, #68]	@ (800d65c <MX_SPI1_Init+0x68>)
 800d616:	2200      	movs	r2, #0
 800d618:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d61a:	4b10      	ldr	r3, [pc, #64]	@ (800d65c <MX_SPI1_Init+0x68>)
 800d61c:	2200      	movs	r2, #0
 800d61e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d620:	4b0e      	ldr	r3, [pc, #56]	@ (800d65c <MX_SPI1_Init+0x68>)
 800d622:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d626:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800d628:	4b0c      	ldr	r3, [pc, #48]	@ (800d65c <MX_SPI1_Init+0x68>)
 800d62a:	2208      	movs	r2, #8
 800d62c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d62e:	4b0b      	ldr	r3, [pc, #44]	@ (800d65c <MX_SPI1_Init+0x68>)
 800d630:	2200      	movs	r2, #0
 800d632:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d634:	4b09      	ldr	r3, [pc, #36]	@ (800d65c <MX_SPI1_Init+0x68>)
 800d636:	2200      	movs	r2, #0
 800d638:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d63a:	4b08      	ldr	r3, [pc, #32]	@ (800d65c <MX_SPI1_Init+0x68>)
 800d63c:	2200      	movs	r2, #0
 800d63e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800d640:	4b06      	ldr	r3, [pc, #24]	@ (800d65c <MX_SPI1_Init+0x68>)
 800d642:	220a      	movs	r2, #10
 800d644:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d646:	4805      	ldr	r0, [pc, #20]	@ (800d65c <MX_SPI1_Init+0x68>)
 800d648:	f002 fbae 	bl	800fda8 <HAL_SPI_Init>
 800d64c:	4603      	mov	r3, r0
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d001      	beq.n	800d656 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800d652:	f000 f995 	bl	800d980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800d656:	bf00      	nop
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	200003b4 	.word	0x200003b4
 800d660:	40013000 	.word	0x40013000

0800d664 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800d668:	4b16      	ldr	r3, [pc, #88]	@ (800d6c4 <MX_SPI2_Init+0x60>)
 800d66a:	4a17      	ldr	r2, [pc, #92]	@ (800d6c8 <MX_SPI2_Init+0x64>)
 800d66c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800d66e:	4b15      	ldr	r3, [pc, #84]	@ (800d6c4 <MX_SPI2_Init+0x60>)
 800d670:	2200      	movs	r2, #0
 800d672:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800d674:	4b13      	ldr	r3, [pc, #76]	@ (800d6c4 <MX_SPI2_Init+0x60>)
 800d676:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d67a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800d67c:	4b11      	ldr	r3, [pc, #68]	@ (800d6c4 <MX_SPI2_Init+0x60>)
 800d67e:	2200      	movs	r2, #0
 800d680:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d682:	4b10      	ldr	r3, [pc, #64]	@ (800d6c4 <MX_SPI2_Init+0x60>)
 800d684:	2200      	movs	r2, #0
 800d686:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d688:	4b0e      	ldr	r3, [pc, #56]	@ (800d6c4 <MX_SPI2_Init+0x60>)
 800d68a:	2200      	movs	r2, #0
 800d68c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800d68e:	4b0d      	ldr	r3, [pc, #52]	@ (800d6c4 <MX_SPI2_Init+0x60>)
 800d690:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d694:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d696:	4b0b      	ldr	r3, [pc, #44]	@ (800d6c4 <MX_SPI2_Init+0x60>)
 800d698:	2200      	movs	r2, #0
 800d69a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800d69c:	4b09      	ldr	r3, [pc, #36]	@ (800d6c4 <MX_SPI2_Init+0x60>)
 800d69e:	2200      	movs	r2, #0
 800d6a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d6a2:	4b08      	ldr	r3, [pc, #32]	@ (800d6c4 <MX_SPI2_Init+0x60>)
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800d6a8:	4b06      	ldr	r3, [pc, #24]	@ (800d6c4 <MX_SPI2_Init+0x60>)
 800d6aa:	220a      	movs	r2, #10
 800d6ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800d6ae:	4805      	ldr	r0, [pc, #20]	@ (800d6c4 <MX_SPI2_Init+0x60>)
 800d6b0:	f002 fb7a 	bl	800fda8 <HAL_SPI_Init>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d001      	beq.n	800d6be <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 800d6ba:	f000 f961 	bl	800d980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800d6be:	bf00      	nop
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	2000040c 	.word	0x2000040c
 800d6c8:	40003800 	.word	0x40003800

0800d6cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800d6d0:	4b17      	ldr	r3, [pc, #92]	@ (800d730 <MX_SPI3_Init+0x64>)
 800d6d2:	4a18      	ldr	r2, [pc, #96]	@ (800d734 <MX_SPI3_Init+0x68>)
 800d6d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800d6d6:	4b16      	ldr	r3, [pc, #88]	@ (800d730 <MX_SPI3_Init+0x64>)
 800d6d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800d6dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800d6de:	4b14      	ldr	r3, [pc, #80]	@ (800d730 <MX_SPI3_Init+0x64>)
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800d6e4:	4b12      	ldr	r3, [pc, #72]	@ (800d730 <MX_SPI3_Init+0x64>)
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d6ea:	4b11      	ldr	r3, [pc, #68]	@ (800d730 <MX_SPI3_Init+0x64>)
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d6f0:	4b0f      	ldr	r3, [pc, #60]	@ (800d730 <MX_SPI3_Init+0x64>)
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800d6f6:	4b0e      	ldr	r3, [pc, #56]	@ (800d730 <MX_SPI3_Init+0x64>)
 800d6f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d6fc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d6fe:	4b0c      	ldr	r3, [pc, #48]	@ (800d730 <MX_SPI3_Init+0x64>)
 800d700:	2200      	movs	r2, #0
 800d702:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d704:	4b0a      	ldr	r3, [pc, #40]	@ (800d730 <MX_SPI3_Init+0x64>)
 800d706:	2200      	movs	r2, #0
 800d708:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800d70a:	4b09      	ldr	r3, [pc, #36]	@ (800d730 <MX_SPI3_Init+0x64>)
 800d70c:	2200      	movs	r2, #0
 800d70e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d710:	4b07      	ldr	r3, [pc, #28]	@ (800d730 <MX_SPI3_Init+0x64>)
 800d712:	2200      	movs	r2, #0
 800d714:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800d716:	4b06      	ldr	r3, [pc, #24]	@ (800d730 <MX_SPI3_Init+0x64>)
 800d718:	220a      	movs	r2, #10
 800d71a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800d71c:	4804      	ldr	r0, [pc, #16]	@ (800d730 <MX_SPI3_Init+0x64>)
 800d71e:	f002 fb43 	bl	800fda8 <HAL_SPI_Init>
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d001      	beq.n	800d72c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800d728:	f000 f92a 	bl	800d980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800d72c:	bf00      	nop
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	20000464 	.word	0x20000464
 800d734:	40003c00 	.word	0x40003c00

0800d738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800d73c:	4b11      	ldr	r3, [pc, #68]	@ (800d784 <MX_USART2_UART_Init+0x4c>)
 800d73e:	4a12      	ldr	r2, [pc, #72]	@ (800d788 <MX_USART2_UART_Init+0x50>)
 800d740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800d742:	4b10      	ldr	r3, [pc, #64]	@ (800d784 <MX_USART2_UART_Init+0x4c>)
 800d744:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800d748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d74a:	4b0e      	ldr	r3, [pc, #56]	@ (800d784 <MX_USART2_UART_Init+0x4c>)
 800d74c:	2200      	movs	r2, #0
 800d74e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d750:	4b0c      	ldr	r3, [pc, #48]	@ (800d784 <MX_USART2_UART_Init+0x4c>)
 800d752:	2200      	movs	r2, #0
 800d754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d756:	4b0b      	ldr	r3, [pc, #44]	@ (800d784 <MX_USART2_UART_Init+0x4c>)
 800d758:	2200      	movs	r2, #0
 800d75a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d75c:	4b09      	ldr	r3, [pc, #36]	@ (800d784 <MX_USART2_UART_Init+0x4c>)
 800d75e:	220c      	movs	r2, #12
 800d760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d762:	4b08      	ldr	r3, [pc, #32]	@ (800d784 <MX_USART2_UART_Init+0x4c>)
 800d764:	2200      	movs	r2, #0
 800d766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d768:	4b06      	ldr	r3, [pc, #24]	@ (800d784 <MX_USART2_UART_Init+0x4c>)
 800d76a:	2200      	movs	r2, #0
 800d76c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800d76e:	4805      	ldr	r0, [pc, #20]	@ (800d784 <MX_USART2_UART_Init+0x4c>)
 800d770:	f003 fcd0 	bl	8011114 <HAL_UART_Init>
 800d774:	4603      	mov	r3, r0
 800d776:	2b00      	cmp	r3, #0
 800d778:	d001      	beq.n	800d77e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800d77a:	f000 f901 	bl	800d980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800d77e:	bf00      	nop
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	200004bc 	.word	0x200004bc
 800d788:	40004400 	.word	0x40004400

0800d78c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800d790:	4b11      	ldr	r3, [pc, #68]	@ (800d7d8 <MX_USART3_UART_Init+0x4c>)
 800d792:	4a12      	ldr	r2, [pc, #72]	@ (800d7dc <MX_USART3_UART_Init+0x50>)
 800d794:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800d796:	4b10      	ldr	r3, [pc, #64]	@ (800d7d8 <MX_USART3_UART_Init+0x4c>)
 800d798:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800d79c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d79e:	4b0e      	ldr	r3, [pc, #56]	@ (800d7d8 <MX_USART3_UART_Init+0x4c>)
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d7a4:	4b0c      	ldr	r3, [pc, #48]	@ (800d7d8 <MX_USART3_UART_Init+0x4c>)
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d7aa:	4b0b      	ldr	r3, [pc, #44]	@ (800d7d8 <MX_USART3_UART_Init+0x4c>)
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d7b0:	4b09      	ldr	r3, [pc, #36]	@ (800d7d8 <MX_USART3_UART_Init+0x4c>)
 800d7b2:	220c      	movs	r2, #12
 800d7b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d7b6:	4b08      	ldr	r3, [pc, #32]	@ (800d7d8 <MX_USART3_UART_Init+0x4c>)
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d7bc:	4b06      	ldr	r3, [pc, #24]	@ (800d7d8 <MX_USART3_UART_Init+0x4c>)
 800d7be:	2200      	movs	r2, #0
 800d7c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800d7c2:	4805      	ldr	r0, [pc, #20]	@ (800d7d8 <MX_USART3_UART_Init+0x4c>)
 800d7c4:	f003 fca6 	bl	8011114 <HAL_UART_Init>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d001      	beq.n	800d7d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800d7ce:	f000 f8d7 	bl	800d980 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800d7d2:	bf00      	nop
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	20000504 	.word	0x20000504
 800d7dc:	40004800 	.word	0x40004800

0800d7e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b08a      	sub	sp, #40	@ 0x28
 800d7e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d7e6:	f107 0314 	add.w	r3, r7, #20
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	601a      	str	r2, [r3, #0]
 800d7ee:	605a      	str	r2, [r3, #4]
 800d7f0:	609a      	str	r2, [r3, #8]
 800d7f2:	60da      	str	r2, [r3, #12]
 800d7f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	613b      	str	r3, [r7, #16]
 800d7fa:	4b53      	ldr	r3, [pc, #332]	@ (800d948 <MX_GPIO_Init+0x168>)
 800d7fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7fe:	4a52      	ldr	r2, [pc, #328]	@ (800d948 <MX_GPIO_Init+0x168>)
 800d800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d804:	6313      	str	r3, [r2, #48]	@ 0x30
 800d806:	4b50      	ldr	r3, [pc, #320]	@ (800d948 <MX_GPIO_Init+0x168>)
 800d808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d80a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d80e:	613b      	str	r3, [r7, #16]
 800d810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d812:	2300      	movs	r3, #0
 800d814:	60fb      	str	r3, [r7, #12]
 800d816:	4b4c      	ldr	r3, [pc, #304]	@ (800d948 <MX_GPIO_Init+0x168>)
 800d818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d81a:	4a4b      	ldr	r2, [pc, #300]	@ (800d948 <MX_GPIO_Init+0x168>)
 800d81c:	f043 0304 	orr.w	r3, r3, #4
 800d820:	6313      	str	r3, [r2, #48]	@ 0x30
 800d822:	4b49      	ldr	r3, [pc, #292]	@ (800d948 <MX_GPIO_Init+0x168>)
 800d824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d826:	f003 0304 	and.w	r3, r3, #4
 800d82a:	60fb      	str	r3, [r7, #12]
 800d82c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d82e:	2300      	movs	r3, #0
 800d830:	60bb      	str	r3, [r7, #8]
 800d832:	4b45      	ldr	r3, [pc, #276]	@ (800d948 <MX_GPIO_Init+0x168>)
 800d834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d836:	4a44      	ldr	r2, [pc, #272]	@ (800d948 <MX_GPIO_Init+0x168>)
 800d838:	f043 0301 	orr.w	r3, r3, #1
 800d83c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d83e:	4b42      	ldr	r3, [pc, #264]	@ (800d948 <MX_GPIO_Init+0x168>)
 800d840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d842:	f003 0301 	and.w	r3, r3, #1
 800d846:	60bb      	str	r3, [r7, #8]
 800d848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d84a:	2300      	movs	r3, #0
 800d84c:	607b      	str	r3, [r7, #4]
 800d84e:	4b3e      	ldr	r3, [pc, #248]	@ (800d948 <MX_GPIO_Init+0x168>)
 800d850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d852:	4a3d      	ldr	r2, [pc, #244]	@ (800d948 <MX_GPIO_Init+0x168>)
 800d854:	f043 0302 	orr.w	r3, r3, #2
 800d858:	6313      	str	r3, [r2, #48]	@ 0x30
 800d85a:	4b3b      	ldr	r3, [pc, #236]	@ (800d948 <MX_GPIO_Init+0x168>)
 800d85c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d85e:	f003 0302 	and.w	r3, r3, #2
 800d862:	607b      	str	r3, [r7, #4]
 800d864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin, GPIO_PIN_RESET);
 800d866:	2200      	movs	r2, #0
 800d868:	2102      	movs	r1, #2
 800d86a:	4838      	ldr	r0, [pc, #224]	@ (800d94c <MX_GPIO_Init+0x16c>)
 800d86c:	f001 fc6c 	bl	800f148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 800d870:	2200      	movs	r2, #0
 800d872:	211c      	movs	r1, #28
 800d874:	4836      	ldr	r0, [pc, #216]	@ (800d950 <MX_GPIO_Init+0x170>)
 800d876:	f001 fc67 	bl	800f148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_BACKLIT_Pin|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 800d87a:	2200      	movs	r2, #0
 800d87c:	2113      	movs	r1, #19
 800d87e:	4835      	ldr	r0, [pc, #212]	@ (800d954 <MX_GPIO_Init+0x174>)
 800d880:	f001 fc62 	bl	800f148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TI_SS_Pin|TOUCH_LED4_Pin, GPIO_PIN_RESET);
 800d884:	2200      	movs	r2, #0
 800d886:	f244 0102 	movw	r1, #16386	@ 0x4002
 800d88a:	4833      	ldr	r0, [pc, #204]	@ (800d958 <MX_GPIO_Init+0x178>)
 800d88c:	f001 fc5c 	bl	800f148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOUCH_LED3_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED3_Pin;
 800d890:	2302      	movs	r3, #2
 800d892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d894:	2301      	movs	r3, #1
 800d896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d898:	2300      	movs	r3, #0
 800d89a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d89c:	2300      	movs	r3, #0
 800d89e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_LED3_GPIO_Port, &GPIO_InitStruct);
 800d8a0:	f107 0314 	add.w	r3, r7, #20
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	4829      	ldr	r0, [pc, #164]	@ (800d94c <MX_GPIO_Init+0x16c>)
 800d8a8:	f001 faa2 	bl	800edf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_LED2_Pin TOUCH_LED1_Pin PC4 */
  GPIO_InitStruct.Pin = TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4;
 800d8ac:	231c      	movs	r3, #28
 800d8ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d8bc:	f107 0314 	add.w	r3, r7, #20
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	4823      	ldr	r0, [pc, #140]	@ (800d950 <MX_GPIO_Init+0x170>)
 800d8c4:	f001 fa94 	bl	800edf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_BACKLIT_Pin PA1 PA4 */
  GPIO_InitStruct.Pin = DISP_BACKLIT_Pin|GPIO_PIN_1|GPIO_PIN_4;
 800d8c8:	2313      	movs	r3, #19
 800d8ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8d8:	f107 0314 	add.w	r3, r7, #20
 800d8dc:	4619      	mov	r1, r3
 800d8de:	481d      	ldr	r0, [pc, #116]	@ (800d954 <MX_GPIO_Init+0x174>)
 800d8e0:	f001 fa86 	bl	800edf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TI_SS_Pin TOUCH_LED4_Pin */
  GPIO_InitStruct.Pin = TI_SS_Pin|TOUCH_LED4_Pin;
 800d8e4:	f244 0302 	movw	r3, #16386	@ 0x4002
 800d8e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d8f6:	f107 0314 	add.w	r3, r7, #20
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	4816      	ldr	r0, [pc, #88]	@ (800d958 <MX_GPIO_Init+0x178>)
 800d8fe:	f001 fa77 	bl	800edf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800d902:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 800d906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800d908:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800d90c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800d90e:	2302      	movs	r3, #2
 800d910:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d912:	f107 0314 	add.w	r3, r7, #20
 800d916:	4619      	mov	r1, r3
 800d918:	480e      	ldr	r0, [pc, #56]	@ (800d954 <MX_GPIO_Init+0x174>)
 800d91a:	f001 fa69 	bl	800edf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800d91e:	2200      	movs	r2, #0
 800d920:	2100      	movs	r1, #0
 800d922:	2017      	movs	r0, #23
 800d924:	f001 f9a8 	bl	800ec78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800d928:	2017      	movs	r0, #23
 800d92a:	f001 f9c1 	bl	800ecb0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800d92e:	2200      	movs	r2, #0
 800d930:	2100      	movs	r1, #0
 800d932:	2028      	movs	r0, #40	@ 0x28
 800d934:	f001 f9a0 	bl	800ec78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800d938:	2028      	movs	r0, #40	@ 0x28
 800d93a:	f001 f9b9 	bl	800ecb0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800d93e:	bf00      	nop
 800d940:	3728      	adds	r7, #40	@ 0x28
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	40023800 	.word	0x40023800
 800d94c:	40021c00 	.word	0x40021c00
 800d950:	40020800 	.word	0x40020800
 800d954:	40020000 	.word	0x40020000
 800d958:	40020400 	.word	0x40020400

0800d95c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a04      	ldr	r2, [pc, #16]	@ (800d97c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d101      	bne.n	800d972 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800d96e:	f001 f887 	bl	800ea80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800d972:	bf00      	nop
 800d974:	3708      	adds	r7, #8
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	40010000 	.word	0x40010000

0800d980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d980:	b480      	push	{r7}
 800d982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d984:	b672      	cpsid	i
}
 800d986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d988:	bf00      	nop
 800d98a:	e7fd      	b.n	800d988 <Error_Handler+0x8>

0800d98c <displayOnwardsLogoOptimized>:
    ST7735_WriteString(start_x, start_y, "on", Font_16x26, RED, BLACK);
    ST7735_WriteString(start_x + 32, start_y, "words", Font_16x26, WHITE, BLACK);
}

// Optimized version with exact positioning
void displayOnwardsLogoOptimized(void) {
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b086      	sub	sp, #24
 800d990:	af04      	add	r7, sp, #16
    ST7735_SetRotation(1);
 800d992:	2001      	movs	r0, #1
 800d994:	f7fc f8d6 	bl	8009b44 <ST7735_SetRotation>
    fillScreen(BLACK);
 800d998:	2000      	movs	r0, #0
 800d99a:	f7fb ff9b 	bl	80098d4 <fillScreen>
    // Exact calculations for 160×128 display
    // Font_16x26: each character is 16px wide, 26px tall
    // "onwards" = 7 characters = 112px total width

    // Perfect center positioning
    int x_pos = 24;  // (160 - 112) / 2 = 24
 800d99e:	2318      	movs	r3, #24
 800d9a0:	607b      	str	r3, [r7, #4]
    int y_pos = 51;  // (128 - 26) / 2 = 51
 800d9a2:	2333      	movs	r3, #51	@ 0x33
 800d9a4:	603b      	str	r3, [r7, #0]

    // Draw "on" in red (positions 0-1, 32px wide)
    ST7735_WriteString(x_pos, y_pos, "on", Font_16x26, RED, BLACK);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	b298      	uxth	r0, r3
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	b299      	uxth	r1, r3
 800d9ae:	4b11      	ldr	r3, [pc, #68]	@ (800d9f4 <displayOnwardsLogoOptimized+0x68>)
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	9202      	str	r2, [sp, #8]
 800d9b4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800d9b8:	9201      	str	r2, [sp, #4]
 800d9ba:	685a      	ldr	r2, [r3, #4]
 800d9bc:	9200      	str	r2, [sp, #0]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4a0d      	ldr	r2, [pc, #52]	@ (800d9f8 <displayOnwardsLogoOptimized+0x6c>)
 800d9c2:	f7fc f9f5 	bl	8009db0 <ST7735_WriteString>

    // Draw "wards" in white (positions 2-6, 80px wide)
    ST7735_WriteString(x_pos + 32, y_pos, "words", Font_16x26, WHITE, BLACK);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	3320      	adds	r3, #32
 800d9cc:	b298      	uxth	r0, r3
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	b299      	uxth	r1, r3
 800d9d2:	4b08      	ldr	r3, [pc, #32]	@ (800d9f4 <displayOnwardsLogoOptimized+0x68>)
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	9202      	str	r2, [sp, #8]
 800d9d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d9dc:	9201      	str	r2, [sp, #4]
 800d9de:	685a      	ldr	r2, [r3, #4]
 800d9e0:	9200      	str	r2, [sp, #0]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4a05      	ldr	r2, [pc, #20]	@ (800d9fc <displayOnwardsLogoOptimized+0x70>)
 800d9e6:	f7fc f9e3 	bl	8009db0 <ST7735_WriteString>
}
 800d9ea:	bf00      	nop
 800d9ec:	3708      	adds	r7, #8
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	2000002c 	.word	0x2000002c
 800d9f8:	08018a7c 	.word	0x08018a7c
 800d9fc:	08018a80 	.word	0x08018a80

0800da00 <showStartupLogoAndMenu>:
    HAL_Delay(3000);
    printf("Logo display complete\n");
}

// Integration with your menu system
void showStartupLogoAndMenu(void) {
 800da00:	b580      	push	{r7, lr}
 800da02:	af00      	add	r7, sp, #0
    // Show logo first
    displayOnwardsLogoOptimized();
 800da04:	f7ff ffc2 	bl	800d98c <displayOnwardsLogoOptimized>
    HAL_Delay(3000);
 800da08:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800da0c:	f001 f858 	bl	800eac0 <HAL_Delay>

    // Transition to menu
    fillScreen(BLACK);
 800da10:	2000      	movs	r0, #0
 800da12:	f7fb ff5f 	bl	80098d4 <fillScreen>
    HAL_Delay(200);
 800da16:	20c8      	movs	r0, #200	@ 0xc8
 800da18:	f001 f852 	bl	800eac0 <HAL_Delay>
}
 800da1c:	bf00      	nop
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <SPI_Handler>:
volatile uint16_t spiHead = 0;
volatile uint16_t spiTail = 0;
uint8_t spiRxByte;

void SPI_Handler(void *param)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b0a4      	sub	sp, #144	@ 0x90
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
    uint8_t jsonBuffer[SPI_RING_BUFFER_SIZE];
    uint8_t index = 0;
 800da28:	2300      	movs	r3, #0
 800da2a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    bool collecting = false;
 800da2e:	2300      	movs	r3, #0
 800da30:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e

    while (1)
    {
        if(spiHead != spiTail)
 800da34:	4b37      	ldr	r3, [pc, #220]	@ (800db14 <SPI_Handler+0xf4>)
 800da36:	881b      	ldrh	r3, [r3, #0]
 800da38:	b29a      	uxth	r2, r3
 800da3a:	4b37      	ldr	r3, [pc, #220]	@ (800db18 <SPI_Handler+0xf8>)
 800da3c:	881b      	ldrh	r3, [r3, #0]
 800da3e:	b29b      	uxth	r3, r3
 800da40:	429a      	cmp	r2, r3
 800da42:	d062      	beq.n	800db0a <SPI_Handler+0xea>
        {
        	uint8_t byte = spiRingBuffer[spiTail];
 800da44:	4b34      	ldr	r3, [pc, #208]	@ (800db18 <SPI_Handler+0xf8>)
 800da46:	881b      	ldrh	r3, [r3, #0]
 800da48:	b29b      	uxth	r3, r3
 800da4a:	461a      	mov	r2, r3
 800da4c:	4b33      	ldr	r3, [pc, #204]	@ (800db1c <SPI_Handler+0xfc>)
 800da4e:	5c9b      	ldrb	r3, [r3, r2]
 800da50:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
        	spiTail = (spiTail + 1) % SPI_RING_BUFFER_SIZE;
 800da54:	4b30      	ldr	r3, [pc, #192]	@ (800db18 <SPI_Handler+0xf8>)
 800da56:	881b      	ldrh	r3, [r3, #0]
 800da58:	b29b      	uxth	r3, r3
 800da5a:	3301      	adds	r3, #1
 800da5c:	425a      	negs	r2, r3
 800da5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800da66:	bf58      	it	pl
 800da68:	4253      	negpl	r3, r2
 800da6a:	b29a      	uxth	r2, r3
 800da6c:	4b2a      	ldr	r3, [pc, #168]	@ (800db18 <SPI_Handler+0xf8>)
 800da6e:	801a      	strh	r2, [r3, #0]

        	if(byte == '{')
 800da70:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800da74:	2b7b      	cmp	r3, #123	@ 0x7b
 800da76:	d111      	bne.n	800da9c <SPI_Handler+0x7c>
        	{
        		collecting = true;
 800da78:	2301      	movs	r3, #1
 800da7a:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        		index = 0;
 800da7e:	2300      	movs	r3, #0
 800da80:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        		jsonBuffer[index++] = byte;
 800da84:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da88:	1c5a      	adds	r2, r3, #1
 800da8a:	f887 208f 	strb.w	r2, [r7, #143]	@ 0x8f
 800da8e:	3390      	adds	r3, #144	@ 0x90
 800da90:	443b      	add	r3, r7
 800da92:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800da96:	f803 2c84 	strb.w	r2, [r3, #-132]
 800da9a:	e7cb      	b.n	800da34 <SPI_Handler+0x14>
        	}
        	else if(collecting)
 800da9c:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d0c7      	beq.n	800da34 <SPI_Handler+0x14>
        	{
        		if(index < SPI_RING_BUFFER_SIZE - 1)
 800daa4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800daa8:	2b7e      	cmp	r3, #126	@ 0x7e
 800daaa:	d827      	bhi.n	800dafc <SPI_Handler+0xdc>
        		{
        			jsonBuffer[index++] = byte;
 800daac:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dab0:	1c5a      	adds	r2, r3, #1
 800dab2:	f887 208f 	strb.w	r2, [r7, #143]	@ 0x8f
 800dab6:	3390      	adds	r3, #144	@ 0x90
 800dab8:	443b      	add	r3, r7
 800daba:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800dabe:	f803 2c84 	strb.w	r2, [r3, #-132]
        			if(byte == '}')
 800dac2:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800dac6:	2b7d      	cmp	r3, #125	@ 0x7d
 800dac8:	d1b4      	bne.n	800da34 <SPI_Handler+0x14>
        			{
        				jsonBuffer[index] = '\0';
 800daca:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dace:	3390      	adds	r3, #144	@ 0x90
 800dad0:	443b      	add	r3, r7
 800dad2:	2200      	movs	r2, #0
 800dad4:	f803 2c84 	strb.w	r2, [r3, #-132]
        				printf("JSON received: %s\n", jsonBuffer);
 800dad8:	f107 030c 	add.w	r3, r7, #12
 800dadc:	4619      	mov	r1, r3
 800dade:	4810      	ldr	r0, [pc, #64]	@ (800db20 <SPI_Handler+0x100>)
 800dae0:	f008 f96c 	bl	8015dbc <iprintf>
        				process_spi_json(jsonBuffer);
 800dae4:	f107 030c 	add.w	r3, r7, #12
 800dae8:	4618      	mov	r0, r3
 800daea:	f000 f81b 	bl	800db24 <process_spi_json>
        				collecting = false;
 800daee:	2300      	movs	r3, #0
 800daf0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        				index = 0;
 800daf4:	2300      	movs	r3, #0
 800daf6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800dafa:	e79b      	b.n	800da34 <SPI_Handler+0x14>
        			}
        		}
        		else
        		{
        			collecting = false;
 800dafc:	2300      	movs	r3, #0
 800dafe:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        			index = 0;
 800db02:	2300      	movs	r3, #0
 800db04:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800db08:	e794      	b.n	800da34 <SPI_Handler+0x14>
        		}
        	}
        }
        else
        {
        	vTaskDelay(pdMS_TO_TICKS(5));
 800db0a:	2005      	movs	r0, #5
 800db0c:	f005 fbb2 	bl	8013274 <vTaskDelay>
        if(spiHead != spiTail)
 800db10:	e790      	b.n	800da34 <SPI_Handler+0x14>
 800db12:	bf00      	nop
 800db14:	200005cc 	.word	0x200005cc
 800db18:	200005ce 	.word	0x200005ce
 800db1c:	2000054c 	.word	0x2000054c
 800db20:	08018acc 	.word	0x08018acc

0800db24 <process_spi_json>:
    }
}


void process_spi_json(uint8_t *jsonBuffer)
{
 800db24:	b590      	push	{r4, r7, lr}
 800db26:	b089      	sub	sp, #36	@ 0x24
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
	uint8_t deviceState;
	GPIO_PinState state;
	int deviceIndex = -1;
 800db2c:	f04f 33ff 	mov.w	r3, #4294967295
 800db30:	61fb      	str	r3, [r7, #28]
	cJSON *jsonObj = cJSON_Parse((char *)jsonBuffer);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7fd fad8 	bl	800b0e8 <cJSON_Parse>
 800db38:	61b8      	str	r0, [r7, #24]
	if(jsonObj)
 800db3a:	69bb      	ldr	r3, [r7, #24]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	f000 80ac 	beq.w	800dc9a <process_spi_json+0x176>
	{
		cJSON *device = cJSON_GetObjectItem(jsonObj, "device");
 800db42:	4958      	ldr	r1, [pc, #352]	@ (800dca4 <process_spi_json+0x180>)
 800db44:	69b8      	ldr	r0, [r7, #24]
 800db46:	f7fe f903 	bl	800bd50 <cJSON_GetObjectItem>
 800db4a:	6178      	str	r0, [r7, #20]
		if(device)
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d03c      	beq.n	800dbcc <process_spi_json+0xa8>
		{
			if(strcmp(device->valuestring, "L1") == 0) deviceIndex = 0;
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	691b      	ldr	r3, [r3, #16]
 800db56:	4954      	ldr	r1, [pc, #336]	@ (800dca8 <process_spi_json+0x184>)
 800db58:	4618      	mov	r0, r3
 800db5a:	f7fa fb59 	bl	8008210 <strcmp>
 800db5e:	4603      	mov	r3, r0
 800db60:	2b00      	cmp	r3, #0
 800db62:	d102      	bne.n	800db6a <process_spi_json+0x46>
 800db64:	2300      	movs	r3, #0
 800db66:	61fb      	str	r3, [r7, #28]
 800db68:	e030      	b.n	800dbcc <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "L2") == 0) deviceIndex = 1;
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	691b      	ldr	r3, [r3, #16]
 800db6e:	494f      	ldr	r1, [pc, #316]	@ (800dcac <process_spi_json+0x188>)
 800db70:	4618      	mov	r0, r3
 800db72:	f7fa fb4d 	bl	8008210 <strcmp>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d102      	bne.n	800db82 <process_spi_json+0x5e>
 800db7c:	2301      	movs	r3, #1
 800db7e:	61fb      	str	r3, [r7, #28]
 800db80:	e024      	b.n	800dbcc <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "L3") == 0) deviceIndex = 2;
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	691b      	ldr	r3, [r3, #16]
 800db86:	494a      	ldr	r1, [pc, #296]	@ (800dcb0 <process_spi_json+0x18c>)
 800db88:	4618      	mov	r0, r3
 800db8a:	f7fa fb41 	bl	8008210 <strcmp>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d102      	bne.n	800db9a <process_spi_json+0x76>
 800db94:	2302      	movs	r3, #2
 800db96:	61fb      	str	r3, [r7, #28]
 800db98:	e018      	b.n	800dbcc <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "L4") == 0) deviceIndex = 3;
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	691b      	ldr	r3, [r3, #16]
 800db9e:	4945      	ldr	r1, [pc, #276]	@ (800dcb4 <process_spi_json+0x190>)
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7fa fb35 	bl	8008210 <strcmp>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d102      	bne.n	800dbb2 <process_spi_json+0x8e>
 800dbac:	2303      	movs	r3, #3
 800dbae:	61fb      	str	r3, [r7, #28]
 800dbb0:	e00c      	b.n	800dbcc <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "D1") == 0)
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	691b      	ldr	r3, [r3, #16]
 800dbb6:	4940      	ldr	r1, [pc, #256]	@ (800dcb8 <process_spi_json+0x194>)
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7fa fb29 	bl	8008210 <strcmp>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d103      	bne.n	800dbcc <process_spi_json+0xa8>
			{
				HAL_GPIO_TogglePin(DISP_BACKLIT_GPIO_Port, DISP_BACKLIT_Pin);
 800dbc4:	2101      	movs	r1, #1
 800dbc6:	483d      	ldr	r0, [pc, #244]	@ (800dcbc <process_spi_json+0x198>)
 800dbc8:	f001 fad7 	bl	800f17a <HAL_GPIO_TogglePin>
			}
		}
		if(deviceIndex != -1)
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd2:	d062      	beq.n	800dc9a <process_spi_json+0x176>
		{
			cJSON *status = cJSON_CreateObject();
 800dbd4:	f7fe f9e0 	bl	800bf98 <cJSON_CreateObject>
 800dbd8:	6138      	str	r0, [r7, #16]
			if(xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800dbda:	4b39      	ldr	r3, [pc, #228]	@ (800dcc0 <process_spi_json+0x19c>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	2164      	movs	r1, #100	@ 0x64
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f004 ff6b 	bl	8012abc <xQueueSemaphoreTake>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d14e      	bne.n	800dc8a <process_spi_json+0x166>
			{
				HAL_GPIO_TogglePin(ports[deviceIndex], pins[deviceIndex]);
 800dbec:	4a35      	ldr	r2, [pc, #212]	@ (800dcc4 <process_spi_json+0x1a0>)
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dbf4:	4934      	ldr	r1, [pc, #208]	@ (800dcc8 <process_spi_json+0x1a4>)
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	4610      	mov	r0, r2
 800dc00:	f001 fabb 	bl	800f17a <HAL_GPIO_TogglePin>
				state = HAL_GPIO_ReadPin(ports[deviceIndex], pins[deviceIndex]);
 800dc04:	4a2f      	ldr	r2, [pc, #188]	@ (800dcc4 <process_spi_json+0x1a0>)
 800dc06:	69fb      	ldr	r3, [r7, #28]
 800dc08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dc0c:	492e      	ldr	r1, [pc, #184]	@ (800dcc8 <process_spi_json+0x1a4>)
 800dc0e:	69fb      	ldr	r3, [r7, #28]
 800dc10:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800dc14:	4619      	mov	r1, r3
 800dc16:	4610      	mov	r0, r2
 800dc18:	f001 fa7e 	bl	800f118 <HAL_GPIO_ReadPin>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	73fb      	strb	r3, [r7, #15]
				deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800dc20:	7bfb      	ldrb	r3, [r7, #15]
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	bf0c      	ite	eq
 800dc26:	2301      	moveq	r3, #1
 800dc28:	2300      	movne	r3, #0
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	73bb      	strb	r3, [r7, #14]
				global_device_states[deviceIndex] = deviceState;
 800dc2e:	7bba      	ldrb	r2, [r7, #14]
 800dc30:	4926      	ldr	r1, [pc, #152]	@ (800dccc <process_spi_json+0x1a8>)
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				cJSON_AddNumberToObject(status, devices[deviceIndex], global_device_states[deviceIndex]);
 800dc38:	4a25      	ldr	r2, [pc, #148]	@ (800dcd0 <process_spi_json+0x1ac>)
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dc40:	4a22      	ldr	r2, [pc, #136]	@ (800dccc <process_spi_json+0x1a8>)
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f7fa fc9b 	bl	8008584 <__aeabi_i2d>
 800dc4e:	4602      	mov	r2, r0
 800dc50:	460b      	mov	r3, r1
 800dc52:	ec43 2b10 	vmov	d0, r2, r3
 800dc56:	4621      	mov	r1, r4
 800dc58:	6938      	ldr	r0, [r7, #16]
 800dc5a:	f7fe f92f 	bl	800bebc <cJSON_AddNumberToObject>
				printf("TOUCH: Device %d set to %s\n", deviceIndex + 1, global_device_states[deviceIndex] ? "ON" : "OFF");
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	1c59      	adds	r1, r3, #1
 800dc62:	4a1a      	ldr	r2, [pc, #104]	@ (800dccc <process_spi_json+0x1a8>)
 800dc64:	69fb      	ldr	r3, [r7, #28]
 800dc66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d001      	beq.n	800dc72 <process_spi_json+0x14e>
 800dc6e:	4b19      	ldr	r3, [pc, #100]	@ (800dcd4 <process_spi_json+0x1b0>)
 800dc70:	e000      	b.n	800dc74 <process_spi_json+0x150>
 800dc72:	4b19      	ldr	r3, [pc, #100]	@ (800dcd8 <process_spi_json+0x1b4>)
 800dc74:	461a      	mov	r2, r3
 800dc76:	4819      	ldr	r0, [pc, #100]	@ (800dcdc <process_spi_json+0x1b8>)
 800dc78:	f008 f8a0 	bl	8015dbc <iprintf>
				xSemaphoreGive(deviceStateMutex);
 800dc7c:	4b10      	ldr	r3, [pc, #64]	@ (800dcc0 <process_spi_json+0x19c>)
 800dc7e:	6818      	ldr	r0, [r3, #0]
 800dc80:	2300      	movs	r3, #0
 800dc82:	2200      	movs	r2, #0
 800dc84:	2100      	movs	r1, #0
 800dc86:	f004 fc87 	bl	8012598 <xQueueGenericSend>
			}
			updateToDisplayMenu();
 800dc8a:	f7fe f9cf 	bl	800c02c <updateToDisplayMenu>
			send_json_response(status);
 800dc8e:	6938      	ldr	r0, [r7, #16]
 800dc90:	f000 fc3e 	bl	800e510 <send_json_response>
			cJSON_Delete(status);
 800dc94:	6938      	ldr	r0, [r7, #16]
 800dc96:	f7fc fa11 	bl	800a0bc <cJSON_Delete>
		}
	}
}
 800dc9a:	bf00      	nop
 800dc9c:	3724      	adds	r7, #36	@ 0x24
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd90      	pop	{r4, r7, pc}
 800dca2:	bf00      	nop
 800dca4:	08018ae0 	.word	0x08018ae0
 800dca8:	08018ae8 	.word	0x08018ae8
 800dcac:	08018aec 	.word	0x08018aec
 800dcb0:	08018af0 	.word	0x08018af0
 800dcb4:	08018af4 	.word	0x08018af4
 800dcb8:	08018af8 	.word	0x08018af8
 800dcbc:	40020000 	.word	0x40020000
 800dcc0:	20000724 	.word	0x20000724
 800dcc4:	20000048 	.word	0x20000048
 800dcc8:	20000058 	.word	0x20000058
 800dccc:	2000072c 	.word	0x2000072c
 800dcd0:	20000038 	.word	0x20000038
 800dcd4:	08018afc 	.word	0x08018afc
 800dcd8:	08018b00 	.word	0x08018b00
 800dcdc:	08018b04 	.word	0x08018b04

0800dce0 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2) {
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a1b      	ldr	r2, [pc, #108]	@ (800dd5c <HAL_SPI_RxCpltCallback+0x7c>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d125      	bne.n	800dd3e <HAL_SPI_RxCpltCallback+0x5e>
        uint16_t nextHead = (spiHead + 1) % SPI_RING_BUFFER_SIZE;
 800dcf2:	4b1b      	ldr	r3, [pc, #108]	@ (800dd60 <HAL_SPI_RxCpltCallback+0x80>)
 800dcf4:	881b      	ldrh	r3, [r3, #0]
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	425a      	negs	r2, r3
 800dcfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800dd04:	bf58      	it	pl
 800dd06:	4253      	negpl	r3, r2
 800dd08:	81fb      	strh	r3, [r7, #14]
        if(nextHead != spiTail)
 800dd0a:	4b16      	ldr	r3, [pc, #88]	@ (800dd64 <HAL_SPI_RxCpltCallback+0x84>)
 800dd0c:	881b      	ldrh	r3, [r3, #0]
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	89fa      	ldrh	r2, [r7, #14]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d00b      	beq.n	800dd2e <HAL_SPI_RxCpltCallback+0x4e>
        {
        	spiRingBuffer[spiHead] = spiRxByte;
 800dd16:	4b12      	ldr	r3, [pc, #72]	@ (800dd60 <HAL_SPI_RxCpltCallback+0x80>)
 800dd18:	881b      	ldrh	r3, [r3, #0]
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	4b12      	ldr	r3, [pc, #72]	@ (800dd68 <HAL_SPI_RxCpltCallback+0x88>)
 800dd20:	7819      	ldrb	r1, [r3, #0]
 800dd22:	4b12      	ldr	r3, [pc, #72]	@ (800dd6c <HAL_SPI_RxCpltCallback+0x8c>)
 800dd24:	5499      	strb	r1, [r3, r2]
        	spiHead = nextHead;
 800dd26:	4a0e      	ldr	r2, [pc, #56]	@ (800dd60 <HAL_SPI_RxCpltCallback+0x80>)
 800dd28:	89fb      	ldrh	r3, [r7, #14]
 800dd2a:	8013      	strh	r3, [r2, #0]
 800dd2c:	e002      	b.n	800dd34 <HAL_SPI_RxCpltCallback+0x54>
        }
        else
        {
        	printf("SPI ring buffer overflow\n");
 800dd2e:	4810      	ldr	r0, [pc, #64]	@ (800dd70 <HAL_SPI_RxCpltCallback+0x90>)
 800dd30:	f008 f8ac 	bl	8015e8c <puts>
        }
        HAL_SPI_Receive_IT(&hspi2, &spiRxByte, 1);
 800dd34:	2201      	movs	r2, #1
 800dd36:	490c      	ldr	r1, [pc, #48]	@ (800dd68 <HAL_SPI_RxCpltCallback+0x88>)
 800dd38:	480e      	ldr	r0, [pc, #56]	@ (800dd74 <HAL_SPI_RxCpltCallback+0x94>)
 800dd3a:	f002 fa03 	bl	8010144 <HAL_SPI_Receive_IT>
    }
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dd3e:	2300      	movs	r3, #0
 800dd40:	60bb      	str	r3, [r7, #8]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	68db      	ldr	r3, [r3, #12]
 800dd48:	60bb      	str	r3, [r7, #8]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	60bb      	str	r3, [r7, #8]
 800dd52:	68bb      	ldr	r3, [r7, #8]
}
 800dd54:	bf00      	nop
 800dd56:	3710      	adds	r7, #16
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}
 800dd5c:	40003800 	.word	0x40003800
 800dd60:	200005cc 	.word	0x200005cc
 800dd64:	200005ce 	.word	0x200005ce
 800dd68:	200005d0 	.word	0x200005d0
 800dd6c:	2000054c 	.word	0x2000054c
 800dd70:	08018b20 	.word	0x08018b20
 800dd74:	2000040c 	.word	0x2000040c

0800dd78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b083      	sub	sp, #12
 800dd7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd7e:	2300      	movs	r3, #0
 800dd80:	607b      	str	r3, [r7, #4]
 800dd82:	4b10      	ldr	r3, [pc, #64]	@ (800ddc4 <HAL_MspInit+0x4c>)
 800dd84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd86:	4a0f      	ldr	r2, [pc, #60]	@ (800ddc4 <HAL_MspInit+0x4c>)
 800dd88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dd8c:	6453      	str	r3, [r2, #68]	@ 0x44
 800dd8e:	4b0d      	ldr	r3, [pc, #52]	@ (800ddc4 <HAL_MspInit+0x4c>)
 800dd90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dd96:	607b      	str	r3, [r7, #4]
 800dd98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	603b      	str	r3, [r7, #0]
 800dd9e:	4b09      	ldr	r3, [pc, #36]	@ (800ddc4 <HAL_MspInit+0x4c>)
 800dda0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dda2:	4a08      	ldr	r2, [pc, #32]	@ (800ddc4 <HAL_MspInit+0x4c>)
 800dda4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dda8:	6413      	str	r3, [r2, #64]	@ 0x40
 800ddaa:	4b06      	ldr	r3, [pc, #24]	@ (800ddc4 <HAL_MspInit+0x4c>)
 800ddac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ddb2:	603b      	str	r3, [r7, #0]
 800ddb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ddb6:	bf00      	nop
 800ddb8:	370c      	adds	r7, #12
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr
 800ddc2:	bf00      	nop
 800ddc4:	40023800 	.word	0x40023800

0800ddc8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b090      	sub	sp, #64	@ 0x40
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ddd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	601a      	str	r2, [r3, #0]
 800ddd8:	605a      	str	r2, [r3, #4]
 800ddda:	609a      	str	r2, [r3, #8]
 800dddc:	60da      	str	r2, [r3, #12]
 800ddde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4a6e      	ldr	r2, [pc, #440]	@ (800dfa0 <HAL_SPI_MspInit+0x1d8>)
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d12c      	bne.n	800de44 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ddea:	2300      	movs	r3, #0
 800ddec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ddee:	4b6d      	ldr	r3, [pc, #436]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800ddf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddf2:	4a6c      	ldr	r2, [pc, #432]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800ddf4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ddf8:	6453      	str	r3, [r2, #68]	@ 0x44
 800ddfa:	4b6a      	ldr	r3, [pc, #424]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800ddfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800de02:	62bb      	str	r3, [r7, #40]	@ 0x28
 800de04:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de06:	2300      	movs	r3, #0
 800de08:	627b      	str	r3, [r7, #36]	@ 0x24
 800de0a:	4b66      	ldr	r3, [pc, #408]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800de0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de0e:	4a65      	ldr	r2, [pc, #404]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800de10:	f043 0301 	orr.w	r3, r3, #1
 800de14:	6313      	str	r3, [r2, #48]	@ 0x30
 800de16:	4b63      	ldr	r3, [pc, #396]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800de18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de1a:	f003 0301 	and.w	r3, r3, #1
 800de1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800de20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800de22:	23a0      	movs	r3, #160	@ 0xa0
 800de24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de26:	2302      	movs	r3, #2
 800de28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de2a:	2300      	movs	r3, #0
 800de2c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de2e:	2303      	movs	r3, #3
 800de30:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800de32:	2305      	movs	r3, #5
 800de34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800de3a:	4619      	mov	r1, r3
 800de3c:	485a      	ldr	r0, [pc, #360]	@ (800dfa8 <HAL_SPI_MspInit+0x1e0>)
 800de3e:	f000 ffd7 	bl	800edf0 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 800de42:	e0a8      	b.n	800df96 <HAL_SPI_MspInit+0x1ce>
  else if(hspi->Instance==SPI2)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	4a58      	ldr	r2, [pc, #352]	@ (800dfac <HAL_SPI_MspInit+0x1e4>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d153      	bne.n	800def6 <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800de4e:	2300      	movs	r3, #0
 800de50:	623b      	str	r3, [r7, #32]
 800de52:	4b54      	ldr	r3, [pc, #336]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800de54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de56:	4a53      	ldr	r2, [pc, #332]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800de58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800de5c:	6413      	str	r3, [r2, #64]	@ 0x40
 800de5e:	4b51      	ldr	r3, [pc, #324]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800de60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800de66:	623b      	str	r3, [r7, #32]
 800de68:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800de6a:	2300      	movs	r3, #0
 800de6c:	61fb      	str	r3, [r7, #28]
 800de6e:	4b4d      	ldr	r3, [pc, #308]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800de70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de72:	4a4c      	ldr	r2, [pc, #304]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800de74:	f043 0304 	orr.w	r3, r3, #4
 800de78:	6313      	str	r3, [r2, #48]	@ 0x30
 800de7a:	4b4a      	ldr	r3, [pc, #296]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800de7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de7e:	f003 0304 	and.w	r3, r3, #4
 800de82:	61fb      	str	r3, [r7, #28]
 800de84:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800de86:	2300      	movs	r3, #0
 800de88:	61bb      	str	r3, [r7, #24]
 800de8a:	4b46      	ldr	r3, [pc, #280]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800de8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de8e:	4a45      	ldr	r2, [pc, #276]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800de90:	f043 0302 	orr.w	r3, r3, #2
 800de94:	6313      	str	r3, [r2, #48]	@ 0x30
 800de96:	4b43      	ldr	r3, [pc, #268]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800de98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de9a:	f003 0302 	and.w	r3, r3, #2
 800de9e:	61bb      	str	r3, [r7, #24]
 800dea0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800dea2:	2302      	movs	r3, #2
 800dea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dea6:	2302      	movs	r3, #2
 800dea8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800deaa:	2300      	movs	r3, #0
 800deac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800deae:	2303      	movs	r3, #3
 800deb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800deb2:	2307      	movs	r3, #7
 800deb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800deb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800deba:	4619      	mov	r1, r3
 800debc:	483c      	ldr	r0, [pc, #240]	@ (800dfb0 <HAL_SPI_MspInit+0x1e8>)
 800debe:	f000 ff97 	bl	800edf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800dec2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dec8:	2302      	movs	r3, #2
 800deca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800decc:	2300      	movs	r3, #0
 800dece:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ded0:	2303      	movs	r3, #3
 800ded2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ded4:	2305      	movs	r3, #5
 800ded6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ded8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800dedc:	4619      	mov	r1, r3
 800dede:	4835      	ldr	r0, [pc, #212]	@ (800dfb4 <HAL_SPI_MspInit+0x1ec>)
 800dee0:	f000 ff86 	bl	800edf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800dee4:	2200      	movs	r2, #0
 800dee6:	2105      	movs	r1, #5
 800dee8:	2024      	movs	r0, #36	@ 0x24
 800deea:	f000 fec5 	bl	800ec78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800deee:	2024      	movs	r0, #36	@ 0x24
 800def0:	f000 fede 	bl	800ecb0 <HAL_NVIC_EnableIRQ>
}
 800def4:	e04f      	b.n	800df96 <HAL_SPI_MspInit+0x1ce>
  else if(hspi->Instance==SPI3)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4a2f      	ldr	r2, [pc, #188]	@ (800dfb8 <HAL_SPI_MspInit+0x1f0>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d14a      	bne.n	800df96 <HAL_SPI_MspInit+0x1ce>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800df00:	2300      	movs	r3, #0
 800df02:	617b      	str	r3, [r7, #20]
 800df04:	4b27      	ldr	r3, [pc, #156]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800df06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df08:	4a26      	ldr	r2, [pc, #152]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800df0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df0e:	6413      	str	r3, [r2, #64]	@ 0x40
 800df10:	4b24      	ldr	r3, [pc, #144]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800df12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800df18:	617b      	str	r3, [r7, #20]
 800df1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800df1c:	2300      	movs	r3, #0
 800df1e:	613b      	str	r3, [r7, #16]
 800df20:	4b20      	ldr	r3, [pc, #128]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800df22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df24:	4a1f      	ldr	r2, [pc, #124]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800df26:	f043 0302 	orr.w	r3, r3, #2
 800df2a:	6313      	str	r3, [r2, #48]	@ 0x30
 800df2c:	4b1d      	ldr	r3, [pc, #116]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800df2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df30:	f003 0302 	and.w	r3, r3, #2
 800df34:	613b      	str	r3, [r7, #16]
 800df36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800df38:	2300      	movs	r3, #0
 800df3a:	60fb      	str	r3, [r7, #12]
 800df3c:	4b19      	ldr	r3, [pc, #100]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800df3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df40:	4a18      	ldr	r2, [pc, #96]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800df42:	f043 0304 	orr.w	r3, r3, #4
 800df46:	6313      	str	r3, [r2, #48]	@ 0x30
 800df48:	4b16      	ldr	r3, [pc, #88]	@ (800dfa4 <HAL_SPI_MspInit+0x1dc>)
 800df4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df4c:	f003 0304 	and.w	r3, r3, #4
 800df50:	60fb      	str	r3, [r7, #12]
 800df52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800df54:	2301      	movs	r3, #1
 800df56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df58:	2302      	movs	r3, #2
 800df5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df5c:	2300      	movs	r3, #0
 800df5e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df60:	2303      	movs	r3, #3
 800df62:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800df64:	2307      	movs	r3, #7
 800df66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800df68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800df6c:	4619      	mov	r1, r3
 800df6e:	4811      	ldr	r0, [pc, #68]	@ (800dfb4 <HAL_SPI_MspInit+0x1ec>)
 800df70:	f000 ff3e 	bl	800edf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800df74:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800df78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df7a:	2302      	movs	r3, #2
 800df7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df7e:	2300      	movs	r3, #0
 800df80:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df82:	2303      	movs	r3, #3
 800df84:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800df86:	2306      	movs	r3, #6
 800df88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800df8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800df8e:	4619      	mov	r1, r3
 800df90:	4807      	ldr	r0, [pc, #28]	@ (800dfb0 <HAL_SPI_MspInit+0x1e8>)
 800df92:	f000 ff2d 	bl	800edf0 <HAL_GPIO_Init>
}
 800df96:	bf00      	nop
 800df98:	3740      	adds	r7, #64	@ 0x40
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	40013000 	.word	0x40013000
 800dfa4:	40023800 	.word	0x40023800
 800dfa8:	40020000 	.word	0x40020000
 800dfac:	40003800 	.word	0x40003800
 800dfb0:	40020800 	.word	0x40020800
 800dfb4:	40020400 	.word	0x40020400
 800dfb8:	40003c00 	.word	0x40003c00

0800dfbc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b08c      	sub	sp, #48	@ 0x30
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dfc4:	f107 031c 	add.w	r3, r7, #28
 800dfc8:	2200      	movs	r2, #0
 800dfca:	601a      	str	r2, [r3, #0]
 800dfcc:	605a      	str	r2, [r3, #4]
 800dfce:	609a      	str	r2, [r3, #8]
 800dfd0:	60da      	str	r2, [r3, #12]
 800dfd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4a45      	ldr	r2, [pc, #276]	@ (800e0f0 <HAL_UART_MspInit+0x134>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d12c      	bne.n	800e038 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800dfde:	2300      	movs	r3, #0
 800dfe0:	61bb      	str	r3, [r7, #24]
 800dfe2:	4b44      	ldr	r3, [pc, #272]	@ (800e0f4 <HAL_UART_MspInit+0x138>)
 800dfe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfe6:	4a43      	ldr	r2, [pc, #268]	@ (800e0f4 <HAL_UART_MspInit+0x138>)
 800dfe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dfec:	6413      	str	r3, [r2, #64]	@ 0x40
 800dfee:	4b41      	ldr	r3, [pc, #260]	@ (800e0f4 <HAL_UART_MspInit+0x138>)
 800dff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dff6:	61bb      	str	r3, [r7, #24]
 800dff8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dffa:	2300      	movs	r3, #0
 800dffc:	617b      	str	r3, [r7, #20]
 800dffe:	4b3d      	ldr	r3, [pc, #244]	@ (800e0f4 <HAL_UART_MspInit+0x138>)
 800e000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e002:	4a3c      	ldr	r2, [pc, #240]	@ (800e0f4 <HAL_UART_MspInit+0x138>)
 800e004:	f043 0301 	orr.w	r3, r3, #1
 800e008:	6313      	str	r3, [r2, #48]	@ 0x30
 800e00a:	4b3a      	ldr	r3, [pc, #232]	@ (800e0f4 <HAL_UART_MspInit+0x138>)
 800e00c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e00e:	f003 0301 	and.w	r3, r3, #1
 800e012:	617b      	str	r3, [r7, #20]
 800e014:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800e016:	230c      	movs	r3, #12
 800e018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e01a:	2302      	movs	r3, #2
 800e01c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e01e:	2300      	movs	r3, #0
 800e020:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e022:	2303      	movs	r3, #3
 800e024:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e026:	2307      	movs	r3, #7
 800e028:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e02a:	f107 031c 	add.w	r3, r7, #28
 800e02e:	4619      	mov	r1, r3
 800e030:	4831      	ldr	r0, [pc, #196]	@ (800e0f8 <HAL_UART_MspInit+0x13c>)
 800e032:	f000 fedd 	bl	800edf0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800e036:	e057      	b.n	800e0e8 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4a2f      	ldr	r2, [pc, #188]	@ (800e0fc <HAL_UART_MspInit+0x140>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d152      	bne.n	800e0e8 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800e042:	2300      	movs	r3, #0
 800e044:	613b      	str	r3, [r7, #16]
 800e046:	4b2b      	ldr	r3, [pc, #172]	@ (800e0f4 <HAL_UART_MspInit+0x138>)
 800e048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e04a:	4a2a      	ldr	r2, [pc, #168]	@ (800e0f4 <HAL_UART_MspInit+0x138>)
 800e04c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e050:	6413      	str	r3, [r2, #64]	@ 0x40
 800e052:	4b28      	ldr	r3, [pc, #160]	@ (800e0f4 <HAL_UART_MspInit+0x138>)
 800e054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e056:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e05a:	613b      	str	r3, [r7, #16]
 800e05c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e05e:	2300      	movs	r3, #0
 800e060:	60fb      	str	r3, [r7, #12]
 800e062:	4b24      	ldr	r3, [pc, #144]	@ (800e0f4 <HAL_UART_MspInit+0x138>)
 800e064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e066:	4a23      	ldr	r2, [pc, #140]	@ (800e0f4 <HAL_UART_MspInit+0x138>)
 800e068:	f043 0304 	orr.w	r3, r3, #4
 800e06c:	6313      	str	r3, [r2, #48]	@ 0x30
 800e06e:	4b21      	ldr	r3, [pc, #132]	@ (800e0f4 <HAL_UART_MspInit+0x138>)
 800e070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e072:	f003 0304 	and.w	r3, r3, #4
 800e076:	60fb      	str	r3, [r7, #12]
 800e078:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e07a:	2300      	movs	r3, #0
 800e07c:	60bb      	str	r3, [r7, #8]
 800e07e:	4b1d      	ldr	r3, [pc, #116]	@ (800e0f4 <HAL_UART_MspInit+0x138>)
 800e080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e082:	4a1c      	ldr	r2, [pc, #112]	@ (800e0f4 <HAL_UART_MspInit+0x138>)
 800e084:	f043 0302 	orr.w	r3, r3, #2
 800e088:	6313      	str	r3, [r2, #48]	@ 0x30
 800e08a:	4b1a      	ldr	r3, [pc, #104]	@ (800e0f4 <HAL_UART_MspInit+0x138>)
 800e08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e08e:	f003 0302 	and.w	r3, r3, #2
 800e092:	60bb      	str	r3, [r7, #8]
 800e094:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800e096:	2320      	movs	r3, #32
 800e098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e09a:	2302      	movs	r3, #2
 800e09c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e0a2:	2303      	movs	r3, #3
 800e0a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800e0a6:	2307      	movs	r3, #7
 800e0a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e0aa:	f107 031c 	add.w	r3, r7, #28
 800e0ae:	4619      	mov	r1, r3
 800e0b0:	4813      	ldr	r0, [pc, #76]	@ (800e100 <HAL_UART_MspInit+0x144>)
 800e0b2:	f000 fe9d 	bl	800edf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e0b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e0ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0bc:	2302      	movs	r3, #2
 800e0be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e0c4:	2303      	movs	r3, #3
 800e0c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800e0c8:	2307      	movs	r3, #7
 800e0ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e0cc:	f107 031c 	add.w	r3, r7, #28
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	480c      	ldr	r0, [pc, #48]	@ (800e104 <HAL_UART_MspInit+0x148>)
 800e0d4:	f000 fe8c 	bl	800edf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 800e0d8:	2200      	movs	r2, #0
 800e0da:	2106      	movs	r1, #6
 800e0dc:	2027      	movs	r0, #39	@ 0x27
 800e0de:	f000 fdcb 	bl	800ec78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800e0e2:	2027      	movs	r0, #39	@ 0x27
 800e0e4:	f000 fde4 	bl	800ecb0 <HAL_NVIC_EnableIRQ>
}
 800e0e8:	bf00      	nop
 800e0ea:	3730      	adds	r7, #48	@ 0x30
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	40004400 	.word	0x40004400
 800e0f4:	40023800 	.word	0x40023800
 800e0f8:	40020000 	.word	0x40020000
 800e0fc:	40004800 	.word	0x40004800
 800e100:	40020800 	.word	0x40020800
 800e104:	40020400 	.word	0x40020400

0800e108 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b08c      	sub	sp, #48	@ 0x30
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800e110:	2300      	movs	r3, #0
 800e112:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800e114:	2300      	movs	r3, #0
 800e116:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800e118:	2300      	movs	r3, #0
 800e11a:	60bb      	str	r3, [r7, #8]
 800e11c:	4b2f      	ldr	r3, [pc, #188]	@ (800e1dc <HAL_InitTick+0xd4>)
 800e11e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e120:	4a2e      	ldr	r2, [pc, #184]	@ (800e1dc <HAL_InitTick+0xd4>)
 800e122:	f043 0301 	orr.w	r3, r3, #1
 800e126:	6453      	str	r3, [r2, #68]	@ 0x44
 800e128:	4b2c      	ldr	r3, [pc, #176]	@ (800e1dc <HAL_InitTick+0xd4>)
 800e12a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e12c:	f003 0301 	and.w	r3, r3, #1
 800e130:	60bb      	str	r3, [r7, #8]
 800e132:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e134:	f107 020c 	add.w	r2, r7, #12
 800e138:	f107 0310 	add.w	r3, r7, #16
 800e13c:	4611      	mov	r1, r2
 800e13e:	4618      	mov	r0, r3
 800e140:	f001 f9b8 	bl	800f4b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800e144:	f001 f9a2 	bl	800f48c <HAL_RCC_GetPCLK2Freq>
 800e148:	4603      	mov	r3, r0
 800e14a:	005b      	lsls	r3, r3, #1
 800e14c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800e14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e150:	4a23      	ldr	r2, [pc, #140]	@ (800e1e0 <HAL_InitTick+0xd8>)
 800e152:	fba2 2303 	umull	r2, r3, r2, r3
 800e156:	0c9b      	lsrs	r3, r3, #18
 800e158:	3b01      	subs	r3, #1
 800e15a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800e15c:	4b21      	ldr	r3, [pc, #132]	@ (800e1e4 <HAL_InitTick+0xdc>)
 800e15e:	4a22      	ldr	r2, [pc, #136]	@ (800e1e8 <HAL_InitTick+0xe0>)
 800e160:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800e162:	4b20      	ldr	r3, [pc, #128]	@ (800e1e4 <HAL_InitTick+0xdc>)
 800e164:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800e168:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800e16a:	4a1e      	ldr	r2, [pc, #120]	@ (800e1e4 <HAL_InitTick+0xdc>)
 800e16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e16e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800e170:	4b1c      	ldr	r3, [pc, #112]	@ (800e1e4 <HAL_InitTick+0xdc>)
 800e172:	2200      	movs	r2, #0
 800e174:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e176:	4b1b      	ldr	r3, [pc, #108]	@ (800e1e4 <HAL_InitTick+0xdc>)
 800e178:	2200      	movs	r2, #0
 800e17a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e17c:	4b19      	ldr	r3, [pc, #100]	@ (800e1e4 <HAL_InitTick+0xdc>)
 800e17e:	2200      	movs	r2, #0
 800e180:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800e182:	4818      	ldr	r0, [pc, #96]	@ (800e1e4 <HAL_InitTick+0xdc>)
 800e184:	f002 fd2b 	bl	8010bde <HAL_TIM_Base_Init>
 800e188:	4603      	mov	r3, r0
 800e18a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800e18e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e192:	2b00      	cmp	r3, #0
 800e194:	d11b      	bne.n	800e1ce <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800e196:	4813      	ldr	r0, [pc, #76]	@ (800e1e4 <HAL_InitTick+0xdc>)
 800e198:	f002 fd7a 	bl	8010c90 <HAL_TIM_Base_Start_IT>
 800e19c:	4603      	mov	r3, r0
 800e19e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800e1a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d111      	bne.n	800e1ce <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800e1aa:	2019      	movs	r0, #25
 800e1ac:	f000 fd80 	bl	800ecb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2b0f      	cmp	r3, #15
 800e1b4:	d808      	bhi.n	800e1c8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	6879      	ldr	r1, [r7, #4]
 800e1ba:	2019      	movs	r0, #25
 800e1bc:	f000 fd5c 	bl	800ec78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800e1c0:	4a0a      	ldr	r2, [pc, #40]	@ (800e1ec <HAL_InitTick+0xe4>)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6013      	str	r3, [r2, #0]
 800e1c6:	e002      	b.n	800e1ce <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800e1ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3730      	adds	r7, #48	@ 0x30
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
 800e1da:	bf00      	nop
 800e1dc:	40023800 	.word	0x40023800
 800e1e0:	431bde83 	.word	0x431bde83
 800e1e4:	200005d4 	.word	0x200005d4
 800e1e8:	40010000 	.word	0x40010000
 800e1ec:	20000060 	.word	0x20000060

0800e1f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800e1f4:	bf00      	nop
 800e1f6:	e7fd      	b.n	800e1f4 <NMI_Handler+0x4>

0800e1f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e1fc:	bf00      	nop
 800e1fe:	e7fd      	b.n	800e1fc <HardFault_Handler+0x4>

0800e200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e200:	b480      	push	{r7}
 800e202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e204:	bf00      	nop
 800e206:	e7fd      	b.n	800e204 <MemManage_Handler+0x4>

0800e208 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e208:	b480      	push	{r7}
 800e20a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e20c:	bf00      	nop
 800e20e:	e7fd      	b.n	800e20c <BusFault_Handler+0x4>

0800e210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e210:	b480      	push	{r7}
 800e212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e214:	bf00      	nop
 800e216:	e7fd      	b.n	800e214 <UsageFault_Handler+0x4>

0800e218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e218:	b480      	push	{r7}
 800e21a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e21c:	bf00      	nop
 800e21e:	46bd      	mov	sp, r7
 800e220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e224:	4770      	bx	lr

0800e226 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800e226:	b580      	push	{r7, lr}
 800e228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800e22a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e22e:	f000 ffbf 	bl	800f1b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800e232:	bf00      	nop
 800e234:	bd80      	pop	{r7, pc}
	...

0800e238 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e23c:	4802      	ldr	r0, [pc, #8]	@ (800e248 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800e23e:	f002 fd97 	bl	8010d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800e242:	bf00      	nop
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	200005d4 	.word	0x200005d4

0800e24c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800e250:	4802      	ldr	r0, [pc, #8]	@ (800e25c <SPI2_IRQHandler+0x10>)
 800e252:	f002 f89d 	bl	8010390 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800e256:	bf00      	nop
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	2000040c 	.word	0x2000040c

0800e260 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800e264:	4802      	ldr	r0, [pc, #8]	@ (800e270 <USART3_IRQHandler+0x10>)
 800e266:	f003 f855 	bl	8011314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800e26a:	bf00      	nop
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	20000504 	.word	0x20000504

0800e274 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800e278:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800e27c:	f000 ff98 	bl	800f1b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800e280:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800e284:	f000 ff94 	bl	800f1b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800e288:	bf00      	nop
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800e28c:	b480      	push	{r7}
 800e28e:	af00      	add	r7, sp, #0
  return 1;
 800e290:	2301      	movs	r3, #1
}
 800e292:	4618      	mov	r0, r3
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr

0800e29c <_kill>:

int _kill(int pid, int sig)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800e2a6:	f007 ffdb 	bl	8016260 <__errno>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	2216      	movs	r2, #22
 800e2ae:	601a      	str	r2, [r3, #0]
  return -1;
 800e2b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3708      	adds	r7, #8
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <_exit>:

void _exit (int status)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800e2c4:	f04f 31ff 	mov.w	r1, #4294967295
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f7ff ffe7 	bl	800e29c <_kill>
  while (1) {}    /* Make sure we hang here */
 800e2ce:	bf00      	nop
 800e2d0:	e7fd      	b.n	800e2ce <_exit+0x12>

0800e2d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e2d2:	b580      	push	{r7, lr}
 800e2d4:	b086      	sub	sp, #24
 800e2d6:	af00      	add	r7, sp, #0
 800e2d8:	60f8      	str	r0, [r7, #12]
 800e2da:	60b9      	str	r1, [r7, #8]
 800e2dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e2de:	2300      	movs	r3, #0
 800e2e0:	617b      	str	r3, [r7, #20]
 800e2e2:	e00a      	b.n	800e2fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800e2e4:	f3af 8000 	nop.w
 800e2e8:	4601      	mov	r1, r0
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	1c5a      	adds	r2, r3, #1
 800e2ee:	60ba      	str	r2, [r7, #8]
 800e2f0:	b2ca      	uxtb	r2, r1
 800e2f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	617b      	str	r3, [r7, #20]
 800e2fa:	697a      	ldr	r2, [r7, #20]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	dbf0      	blt.n	800e2e4 <_read+0x12>
  }

  return len;
 800e302:	687b      	ldr	r3, [r7, #4]
}
 800e304:	4618      	mov	r0, r3
 800e306:	3718      	adds	r7, #24
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b086      	sub	sp, #24
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e318:	2300      	movs	r3, #0
 800e31a:	617b      	str	r3, [r7, #20]
 800e31c:	e009      	b.n	800e332 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	1c5a      	adds	r2, r3, #1
 800e322:	60ba      	str	r2, [r7, #8]
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	4618      	mov	r0, r3
 800e328:	f7ff f8ca 	bl	800d4c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	3301      	adds	r3, #1
 800e330:	617b      	str	r3, [r7, #20]
 800e332:	697a      	ldr	r2, [r7, #20]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	429a      	cmp	r2, r3
 800e338:	dbf1      	blt.n	800e31e <_write+0x12>
  }
  return len;
 800e33a:	687b      	ldr	r3, [r7, #4]
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3718      	adds	r7, #24
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <_close>:

int _close(int file)
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800e34c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e350:	4618      	mov	r0, r3
 800e352:	370c      	adds	r7, #12
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr

0800e35c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800e36c:	605a      	str	r2, [r3, #4]
  return 0;
 800e36e:	2300      	movs	r3, #0
}
 800e370:	4618      	mov	r0, r3
 800e372:	370c      	adds	r7, #12
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr

0800e37c <_isatty>:

int _isatty(int file)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b083      	sub	sp, #12
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800e384:	2301      	movs	r3, #1
}
 800e386:	4618      	mov	r0, r3
 800e388:	370c      	adds	r7, #12
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr

0800e392 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e392:	b480      	push	{r7}
 800e394:	b085      	sub	sp, #20
 800e396:	af00      	add	r7, sp, #0
 800e398:	60f8      	str	r0, [r7, #12]
 800e39a:	60b9      	str	r1, [r7, #8]
 800e39c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800e39e:	2300      	movs	r3, #0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3714      	adds	r7, #20
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr

0800e3ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e3b0:	4b07      	ldr	r3, [pc, #28]	@ (800e3d0 <SystemInit+0x24>)
 800e3b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3b6:	4a06      	ldr	r2, [pc, #24]	@ (800e3d0 <SystemInit+0x24>)
 800e3b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e3bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800e3c0:	4b03      	ldr	r3, [pc, #12]	@ (800e3d0 <SystemInit+0x24>)
 800e3c2:	4a04      	ldr	r2, [pc, #16]	@ (800e3d4 <SystemInit+0x28>)
 800e3c4:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e3c6:	bf00      	nop
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr
 800e3d0:	e000ed00 	.word	0xe000ed00
 800e3d4:	08008000 	.word	0x08008000

0800e3d8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e3dc:	f3bf 8f4f 	dsb	sy
}
 800e3e0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e3e2:	4b06      	ldr	r3, [pc, #24]	@ (800e3fc <__NVIC_SystemReset+0x24>)
 800e3e4:	68db      	ldr	r3, [r3, #12]
 800e3e6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e3ea:	4904      	ldr	r1, [pc, #16]	@ (800e3fc <__NVIC_SystemReset+0x24>)
 800e3ec:	4b04      	ldr	r3, [pc, #16]	@ (800e400 <__NVIC_SystemReset+0x28>)
 800e3ee:	4313      	orrs	r3, r2
 800e3f0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e3f2:	f3bf 8f4f 	dsb	sy
}
 800e3f6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800e3f8:	bf00      	nop
 800e3fa:	e7fd      	b.n	800e3f8 <__NVIC_SystemReset+0x20>
 800e3fc:	e000ed00 	.word	0xe000ed00
 800e400:	05fa0004 	.word	0x05fa0004

0800e404 <UART_Handler>:
volatile uint16_t uartHead = 0;
volatile uint16_t uartTail = 0;
uint8_t uartRxByte;

void UART_Handler(void *param)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b0aa      	sub	sp, #168	@ 0xa8
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
    uint8_t jsonBuffer[JSON_BUFFER_SIZE];
    uint8_t index = 0;
 800e40c:	2300      	movs	r3, #0
 800e40e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    bool collecting = false;
 800e412:	2300      	movs	r3, #0
 800e414:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

    while (1)
    {
        if (uartHead != uartTail)
 800e418:	4b39      	ldr	r3, [pc, #228]	@ (800e500 <UART_Handler+0xfc>)
 800e41a:	881b      	ldrh	r3, [r3, #0]
 800e41c:	b29a      	uxth	r2, r3
 800e41e:	4b39      	ldr	r3, [pc, #228]	@ (800e504 <UART_Handler+0x100>)
 800e420:	881b      	ldrh	r3, [r3, #0]
 800e422:	b29b      	uxth	r3, r3
 800e424:	429a      	cmp	r2, r3
 800e426:	d066      	beq.n	800e4f6 <UART_Handler+0xf2>
        {
            uint8_t byte = uartRingBuffer[uartTail];
 800e428:	4b36      	ldr	r3, [pc, #216]	@ (800e504 <UART_Handler+0x100>)
 800e42a:	881b      	ldrh	r3, [r3, #0]
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	461a      	mov	r2, r3
 800e430:	4b35      	ldr	r3, [pc, #212]	@ (800e508 <UART_Handler+0x104>)
 800e432:	5c9b      	ldrb	r3, [r3, r2]
 800e434:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
            uartTail = (uartTail + 1) % UART_RING_BUFFER_SIZE;
 800e438:	4b32      	ldr	r3, [pc, #200]	@ (800e504 <UART_Handler+0x100>)
 800e43a:	881b      	ldrh	r3, [r3, #0]
 800e43c:	b29b      	uxth	r3, r3
 800e43e:	3301      	adds	r3, #1
 800e440:	425a      	negs	r2, r3
 800e442:	b2db      	uxtb	r3, r3
 800e444:	b2d2      	uxtb	r2, r2
 800e446:	bf58      	it	pl
 800e448:	4253      	negpl	r3, r2
 800e44a:	b29a      	uxth	r2, r3
 800e44c:	4b2d      	ldr	r3, [pc, #180]	@ (800e504 <UART_Handler+0x100>)
 800e44e:	801a      	strh	r2, [r3, #0]

            if (byte == '{')
 800e450:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800e454:	2b7b      	cmp	r3, #123	@ 0x7b
 800e456:	d111      	bne.n	800e47c <UART_Handler+0x78>
            {
                collecting = true;
 800e458:	2301      	movs	r3, #1
 800e45a:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
                index = 0;
 800e45e:	2300      	movs	r3, #0
 800e460:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                jsonBuffer[index++] = byte;
 800e464:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800e468:	1c5a      	adds	r2, r3, #1
 800e46a:	f887 20a7 	strb.w	r2, [r7, #167]	@ 0xa7
 800e46e:	33a8      	adds	r3, #168	@ 0xa8
 800e470:	443b      	add	r3, r7
 800e472:	f897 20a5 	ldrb.w	r2, [r7, #165]	@ 0xa5
 800e476:	f803 2c9c 	strb.w	r2, [r3, #-156]
 800e47a:	e7cd      	b.n	800e418 <UART_Handler+0x14>
            }
            else if (collecting)
 800e47c:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 800e480:	2b00      	cmp	r3, #0
 800e482:	d032      	beq.n	800e4ea <UART_Handler+0xe6>
            {
                if (index < JSON_BUFFER_SIZE - 1)
 800e484:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800e488:	2b94      	cmp	r3, #148	@ 0x94
 800e48a:	d827      	bhi.n	800e4dc <UART_Handler+0xd8>
                {
                    jsonBuffer[index++] = byte;
 800e48c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800e490:	1c5a      	adds	r2, r3, #1
 800e492:	f887 20a7 	strb.w	r2, [r7, #167]	@ 0xa7
 800e496:	33a8      	adds	r3, #168	@ 0xa8
 800e498:	443b      	add	r3, r7
 800e49a:	f897 20a5 	ldrb.w	r2, [r7, #165]	@ 0xa5
 800e49e:	f803 2c9c 	strb.w	r2, [r3, #-156]

                    if (byte == '}')
 800e4a2:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800e4a6:	2b7d      	cmp	r3, #125	@ 0x7d
 800e4a8:	d1b6      	bne.n	800e418 <UART_Handler+0x14>
                    {
                        jsonBuffer[index] = '\0';
 800e4aa:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800e4ae:	33a8      	adds	r3, #168	@ 0xa8
 800e4b0:	443b      	add	r3, r7
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f803 2c9c 	strb.w	r2, [r3, #-156]
                        printf("JSON received: %s\n", jsonBuffer);
 800e4b8:	f107 030c 	add.w	r3, r7, #12
 800e4bc:	4619      	mov	r1, r3
 800e4be:	4813      	ldr	r0, [pc, #76]	@ (800e50c <UART_Handler+0x108>)
 800e4c0:	f007 fc7c 	bl	8015dbc <iprintf>
                        process_json(jsonBuffer);
 800e4c4:	f107 030c 	add.w	r3, r7, #12
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f000 f957 	bl	800e77c <process_json>
                        collecting = false;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
                        index = 0;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800e4da:	e79d      	b.n	800e418 <UART_Handler+0x14>
                    }
                }
                else
                {
                    collecting = false;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
                    index = 0;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800e4e8:	e796      	b.n	800e418 <UART_Handler+0x14>
                }
            }
            else if (byte == BOOT_CMD)
 800e4ea:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800e4ee:	2b50      	cmp	r3, #80	@ 0x50
 800e4f0:	d192      	bne.n	800e418 <UART_Handler+0x14>
            {
                NVIC_SystemReset();
 800e4f2:	f7ff ff71 	bl	800e3d8 <__NVIC_SystemReset>
            }
        }
        else
        {
            vTaskDelay(pdMS_TO_TICKS(5));
 800e4f6:	2005      	movs	r0, #5
 800e4f8:	f004 febc 	bl	8013274 <vTaskDelay>
        if (uartHead != uartTail)
 800e4fc:	e78c      	b.n	800e418 <UART_Handler+0x14>
 800e4fe:	bf00      	nop
 800e500:	2000071c 	.word	0x2000071c
 800e504:	2000071e 	.word	0x2000071e
 800e508:	2000061c 	.word	0x2000061c
 800e50c:	08018b3c 	.word	0x08018b3c

0800e510 <send_json_response>:
    }
}


void send_json_response(cJSON *jsonObj)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b084      	sub	sp, #16
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
    char *response = cJSON_PrintUnformatted(jsonObj);
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f7fc fe7d 	bl	800b218 <cJSON_PrintUnformatted>
 800e51e:	60f8      	str	r0, [r7, #12]
    if (response)
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d018      	beq.n	800e558 <send_json_response+0x48>
    {
    	printf("Device State JSON: %s\n", response);
 800e526:	68f9      	ldr	r1, [r7, #12]
 800e528:	480d      	ldr	r0, [pc, #52]	@ (800e560 <send_json_response+0x50>)
 800e52a:	f007 fc47 	bl	8015dbc <iprintf>
        HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 800e52e:	68f8      	ldr	r0, [r7, #12]
 800e530:	f7f9 fe78 	bl	8008224 <strlen>
 800e534:	4603      	mov	r3, r0
 800e536:	b29a      	uxth	r2, r3
 800e538:	f04f 33ff 	mov.w	r3, #4294967295
 800e53c:	68f9      	ldr	r1, [r7, #12]
 800e53e:	4809      	ldr	r0, [pc, #36]	@ (800e564 <send_json_response+0x54>)
 800e540:	f002 fe38 	bl	80111b4 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800e544:	f04f 33ff 	mov.w	r3, #4294967295
 800e548:	2201      	movs	r2, #1
 800e54a:	4907      	ldr	r1, [pc, #28]	@ (800e568 <send_json_response+0x58>)
 800e54c:	4805      	ldr	r0, [pc, #20]	@ (800e564 <send_json_response+0x54>)
 800e54e:	f002 fe31 	bl	80111b4 <HAL_UART_Transmit>
        free(response);
 800e552:	68f8      	ldr	r0, [r7, #12]
 800e554:	f006 fc76 	bl	8014e44 <free>
    }
}
 800e558:	bf00      	nop
 800e55a:	3710      	adds	r7, #16
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}
 800e560:	08018b50 	.word	0x08018b50
 800e564:	20000504 	.word	0x20000504
 800e568:	08018b68 	.word	0x08018b68

0800e56c <handle_get_status_request>:

void handle_get_status_request(void)
{
 800e56c:	b590      	push	{r4, r7, lr}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
    cJSON *resp = cJSON_CreateObject();
 800e572:	f7fd fd11 	bl	800bf98 <cJSON_CreateObject>
 800e576:	6038      	str	r0, [r7, #0]
    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800e578:	4b1a      	ldr	r3, [pc, #104]	@ (800e5e4 <handle_get_status_request+0x78>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	2164      	movs	r1, #100	@ 0x64
 800e57e:	4618      	mov	r0, r3
 800e580:	f004 fa9c 	bl	8012abc <xQueueSemaphoreTake>
 800e584:	4603      	mov	r3, r0
 800e586:	2b01      	cmp	r3, #1
 800e588:	d122      	bne.n	800e5d0 <handle_get_status_request+0x64>
    {
        for (int i = 0; i < DEVICE_COUNT; i++)
 800e58a:	2300      	movs	r3, #0
 800e58c:	607b      	str	r3, [r7, #4]
 800e58e:	e015      	b.n	800e5bc <handle_get_status_request+0x50>
        {
            cJSON_AddNumberToObject(resp, devices[i], global_device_states[i]);
 800e590:	4a15      	ldr	r2, [pc, #84]	@ (800e5e8 <handle_get_status_request+0x7c>)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e598:	4a14      	ldr	r2, [pc, #80]	@ (800e5ec <handle_get_status_request+0x80>)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7f9 ffef 	bl	8008584 <__aeabi_i2d>
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	ec43 2b10 	vmov	d0, r2, r3
 800e5ae:	4621      	mov	r1, r4
 800e5b0:	6838      	ldr	r0, [r7, #0]
 800e5b2:	f7fd fc83 	bl	800bebc <cJSON_AddNumberToObject>
        for (int i = 0; i < DEVICE_COUNT; i++)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	607b      	str	r3, [r7, #4]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2b03      	cmp	r3, #3
 800e5c0:	dde6      	ble.n	800e590 <handle_get_status_request+0x24>
        }
        xSemaphoreGive(deviceStateMutex);
 800e5c2:	4b08      	ldr	r3, [pc, #32]	@ (800e5e4 <handle_get_status_request+0x78>)
 800e5c4:	6818      	ldr	r0, [r3, #0]
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	2100      	movs	r1, #0
 800e5cc:	f003 ffe4 	bl	8012598 <xQueueGenericSend>
    }
    send_json_response(resp);
 800e5d0:	6838      	ldr	r0, [r7, #0]
 800e5d2:	f7ff ff9d 	bl	800e510 <send_json_response>
    cJSON_Delete(resp);
 800e5d6:	6838      	ldr	r0, [r7, #0]
 800e5d8:	f7fb fd70 	bl	800a0bc <cJSON_Delete>
}
 800e5dc:	bf00      	nop
 800e5de:	370c      	adds	r7, #12
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd90      	pop	{r4, r7, pc}
 800e5e4:	20000724 	.word	0x20000724
 800e5e8:	20000038 	.word	0x20000038
 800e5ec:	2000072c 	.word	0x2000072c

0800e5f0 <handle_device_control>:

void handle_device_control(cJSON *json)
{
 800e5f0:	b590      	push	{r4, r7, lr}
 800e5f2:	b089      	sub	sp, #36	@ 0x24
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
    cJSON *resp = cJSON_CreateObject();
 800e5f8:	f7fd fcce 	bl	800bf98 <cJSON_CreateObject>
 800e5fc:	61b8      	str	r0, [r7, #24]
    cJSON *Display = cJSON_GetObjectItem(json, "backlit");
 800e5fe:	4955      	ldr	r1, [pc, #340]	@ (800e754 <handle_device_control+0x164>)
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f7fd fba5 	bl	800bd50 <cJSON_GetObjectItem>
 800e606:	6178      	str	r0, [r7, #20]

    if(Display)
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d022      	beq.n	800e654 <handle_device_control+0x64>
	{
		if (cJSON_IsNumber(Display))
 800e60e:	6978      	ldr	r0, [r7, #20]
 800e610:	f7fd fcd6 	bl	800bfc0 <cJSON_IsNumber>
 800e614:	4603      	mov	r3, r0
 800e616:	2b00      	cmp	r3, #0
 800e618:	d01c      	beq.n	800e654 <handle_device_control+0x64>
		{
			GPIO_PinState state = HAL_GPIO_ReadPin(DISP_BACKLIT_GPIO_Port, DISP_BACKLIT_Pin);
 800e61a:	2101      	movs	r1, #1
 800e61c:	484e      	ldr	r0, [pc, #312]	@ (800e758 <handle_device_control+0x168>)
 800e61e:	f000 fd7b 	bl	800f118 <HAL_GPIO_ReadPin>
 800e622:	4603      	mov	r3, r0
 800e624:	74fb      	strb	r3, [r7, #19]
			uint8_t dispState = (state == GPIO_PIN_SET) ? 1 : 0;
 800e626:	7cfb      	ldrb	r3, [r7, #19]
 800e628:	2b01      	cmp	r3, #1
 800e62a:	bf0c      	ite	eq
 800e62c:	2301      	moveq	r3, #1
 800e62e:	2300      	movne	r3, #0
 800e630:	b2db      	uxtb	r3, r3
 800e632:	74bb      	strb	r3, [r7, #18]
			if(dispState == 1)
 800e634:	7cbb      	ldrb	r3, [r7, #18]
 800e636:	2b01      	cmp	r3, #1
 800e638:	f000 8088 	beq.w	800e74c <handle_device_control+0x15c>
			{
				return;
			}
			else
			{
				HAL_GPIO_WritePin(DISP_BACKLIT_GPIO_Port, DISP_BACKLIT_Pin, Display->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	695b      	ldr	r3, [r3, #20]
 800e640:	2b00      	cmp	r3, #0
 800e642:	bf14      	ite	ne
 800e644:	2301      	movne	r3, #1
 800e646:	2300      	moveq	r3, #0
 800e648:	b2db      	uxtb	r3, r3
 800e64a:	461a      	mov	r2, r3
 800e64c:	2101      	movs	r1, #1
 800e64e:	4842      	ldr	r0, [pc, #264]	@ (800e758 <handle_device_control+0x168>)
 800e650:	f000 fd7a 	bl	800f148 <HAL_GPIO_WritePin>
			}
		}
	}


	if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800e654:	4b41      	ldr	r3, [pc, #260]	@ (800e75c <handle_device_control+0x16c>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	2164      	movs	r1, #100	@ 0x64
 800e65a:	4618      	mov	r0, r3
 800e65c:	f004 fa2e 	bl	8012abc <xQueueSemaphoreTake>
 800e660:	4603      	mov	r3, r0
 800e662:	2b01      	cmp	r3, #1
 800e664:	d16b      	bne.n	800e73e <handle_device_control+0x14e>
	{
		for (int i = 0; i < DEVICE_COUNT; i++)
 800e666:	2300      	movs	r3, #0
 800e668:	61fb      	str	r3, [r7, #28]
 800e66a:	e05e      	b.n	800e72a <handle_device_control+0x13a>
		{
			cJSON *Device = cJSON_GetObjectItem(json, devices[i]);
 800e66c:	4a3c      	ldr	r2, [pc, #240]	@ (800e760 <handle_device_control+0x170>)
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e674:	4619      	mov	r1, r3
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f7fd fb6a 	bl	800bd50 <cJSON_GetObjectItem>
 800e67c:	60f8      	str	r0, [r7, #12]
			if (cJSON_IsNumber(Device))
 800e67e:	68f8      	ldr	r0, [r7, #12]
 800e680:	f7fd fc9e 	bl	800bfc0 <cJSON_IsNumber>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d04c      	beq.n	800e724 <handle_device_control+0x134>
			{
				HAL_GPIO_WritePin(ports[i], pins[i], Device->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800e68a:	4a36      	ldr	r2, [pc, #216]	@ (800e764 <handle_device_control+0x174>)
 800e68c:	69fb      	ldr	r3, [r7, #28]
 800e68e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e692:	4a35      	ldr	r2, [pc, #212]	@ (800e768 <handle_device_control+0x178>)
 800e694:	69fb      	ldr	r3, [r7, #28]
 800e696:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	695b      	ldr	r3, [r3, #20]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	bf14      	ite	ne
 800e6a2:	2301      	movne	r3, #1
 800e6a4:	2300      	moveq	r3, #0
 800e6a6:	b2db      	uxtb	r3, r3
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	f000 fd4d 	bl	800f148 <HAL_GPIO_WritePin>
				GPIO_PinState state = HAL_GPIO_ReadPin(ports[i], pins[i]);
 800e6ae:	4a2d      	ldr	r2, [pc, #180]	@ (800e764 <handle_device_control+0x174>)
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e6b6:	492c      	ldr	r1, [pc, #176]	@ (800e768 <handle_device_control+0x178>)
 800e6b8:	69fb      	ldr	r3, [r7, #28]
 800e6ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e6be:	4619      	mov	r1, r3
 800e6c0:	4610      	mov	r0, r2
 800e6c2:	f000 fd29 	bl	800f118 <HAL_GPIO_ReadPin>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	72fb      	strb	r3, [r7, #11]
				global_device_states[i] = (state == GPIO_PIN_SET) ? 1 : 0;
 800e6ca:	7afb      	ldrb	r3, [r7, #11]
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	bf0c      	ite	eq
 800e6d0:	2301      	moveq	r3, #1
 800e6d2:	2300      	movne	r3, #0
 800e6d4:	b2db      	uxtb	r3, r3
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	4a24      	ldr	r2, [pc, #144]	@ (800e76c <handle_device_control+0x17c>)
 800e6da:	69fb      	ldr	r3, [r7, #28]
 800e6dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				cJSON_AddNumberToObject(resp, devices[i], global_device_states[i]);
 800e6e0:	4a1f      	ldr	r2, [pc, #124]	@ (800e760 <handle_device_control+0x170>)
 800e6e2:	69fb      	ldr	r3, [r7, #28]
 800e6e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e6e8:	4a20      	ldr	r2, [pc, #128]	@ (800e76c <handle_device_control+0x17c>)
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7f9 ff47 	bl	8008584 <__aeabi_i2d>
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	ec43 2b10 	vmov	d0, r2, r3
 800e6fe:	4621      	mov	r1, r4
 800e700:	69b8      	ldr	r0, [r7, #24]
 800e702:	f7fd fbdb 	bl	800bebc <cJSON_AddNumberToObject>
				printf("ESP: Device %d set to %s\n", i + 1, global_device_states[i] ? "ON" : "OFF");
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	1c59      	adds	r1, r3, #1
 800e70a:	4a18      	ldr	r2, [pc, #96]	@ (800e76c <handle_device_control+0x17c>)
 800e70c:	69fb      	ldr	r3, [r7, #28]
 800e70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d001      	beq.n	800e71a <handle_device_control+0x12a>
 800e716:	4b16      	ldr	r3, [pc, #88]	@ (800e770 <handle_device_control+0x180>)
 800e718:	e000      	b.n	800e71c <handle_device_control+0x12c>
 800e71a:	4b16      	ldr	r3, [pc, #88]	@ (800e774 <handle_device_control+0x184>)
 800e71c:	461a      	mov	r2, r3
 800e71e:	4816      	ldr	r0, [pc, #88]	@ (800e778 <handle_device_control+0x188>)
 800e720:	f007 fb4c 	bl	8015dbc <iprintf>
		for (int i = 0; i < DEVICE_COUNT; i++)
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	3301      	adds	r3, #1
 800e728:	61fb      	str	r3, [r7, #28]
 800e72a:	69fb      	ldr	r3, [r7, #28]
 800e72c:	2b03      	cmp	r3, #3
 800e72e:	dd9d      	ble.n	800e66c <handle_device_control+0x7c>
			}
		}
		xSemaphoreGive(deviceStateMutex);
 800e730:	4b0a      	ldr	r3, [pc, #40]	@ (800e75c <handle_device_control+0x16c>)
 800e732:	6818      	ldr	r0, [r3, #0]
 800e734:	2300      	movs	r3, #0
 800e736:	2200      	movs	r2, #0
 800e738:	2100      	movs	r1, #0
 800e73a:	f003 ff2d 	bl	8012598 <xQueueGenericSend>
	}
	send_json_response(resp);
 800e73e:	69b8      	ldr	r0, [r7, #24]
 800e740:	f7ff fee6 	bl	800e510 <send_json_response>
	cJSON_Delete(resp);
 800e744:	69b8      	ldr	r0, [r7, #24]
 800e746:	f7fb fcb9 	bl	800a0bc <cJSON_Delete>
 800e74a:	e000      	b.n	800e74e <handle_device_control+0x15e>
				return;
 800e74c:	bf00      	nop
}
 800e74e:	3724      	adds	r7, #36	@ 0x24
 800e750:	46bd      	mov	sp, r7
 800e752:	bd90      	pop	{r4, r7, pc}
 800e754:	08018b6c 	.word	0x08018b6c
 800e758:	40020000 	.word	0x40020000
 800e75c:	20000724 	.word	0x20000724
 800e760:	20000038 	.word	0x20000038
 800e764:	20000048 	.word	0x20000048
 800e768:	20000058 	.word	0x20000058
 800e76c:	2000072c 	.word	0x2000072c
 800e770:	08018b74 	.word	0x08018b74
 800e774:	08018b78 	.word	0x08018b78
 800e778:	08018b7c 	.word	0x08018b7c

0800e77c <process_json>:

void process_json(uint8_t *jsonBuffer)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b084      	sub	sp, #16
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
    cJSON *json = cJSON_Parse((char *)jsonBuffer);
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f7fc fcaf 	bl	800b0e8 <cJSON_Parse>
 800e78a:	60f8      	str	r0, [r7, #12]
    if (!json)
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d103      	bne.n	800e79a <process_json+0x1e>
    {
        printf("Invalid JSON!\n");
 800e792:	4812      	ldr	r0, [pc, #72]	@ (800e7dc <process_json+0x60>)
 800e794:	f007 fb7a 	bl	8015e8c <puts>
        return;
 800e798:	e01c      	b.n	800e7d4 <process_json+0x58>
    }

    cJSON *request = cJSON_GetObjectItem(json, "request");
 800e79a:	4911      	ldr	r1, [pc, #68]	@ (800e7e0 <process_json+0x64>)
 800e79c:	68f8      	ldr	r0, [r7, #12]
 800e79e:	f7fd fad7 	bl	800bd50 <cJSON_GetObjectItem>
 800e7a2:	60b8      	str	r0, [r7, #8]
    if (cJSON_IsString(request) && strcmp(request->valuestring, "getCurrentStatus") == 0)
 800e7a4:	68b8      	ldr	r0, [r7, #8]
 800e7a6:	f7fd fc22 	bl	800bfee <cJSON_IsString>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d00b      	beq.n	800e7c8 <process_json+0x4c>
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	691b      	ldr	r3, [r3, #16]
 800e7b4:	490b      	ldr	r1, [pc, #44]	@ (800e7e4 <process_json+0x68>)
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7f9 fd2a 	bl	8008210 <strcmp>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d102      	bne.n	800e7c8 <process_json+0x4c>
    {
        handle_get_status_request();
 800e7c2:	f7ff fed3 	bl	800e56c <handle_get_status_request>
 800e7c6:	e002      	b.n	800e7ce <process_json+0x52>
    }
    else
    {
        handle_device_control(json);
 800e7c8:	68f8      	ldr	r0, [r7, #12]
 800e7ca:	f7ff ff11 	bl	800e5f0 <handle_device_control>
    }

    cJSON_Delete(json);
 800e7ce:	68f8      	ldr	r0, [r7, #12]
 800e7d0:	f7fb fc74 	bl	800a0bc <cJSON_Delete>
}
 800e7d4:	3710      	adds	r7, #16
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	bf00      	nop
 800e7dc:	08018b98 	.word	0x08018b98
 800e7e0:	08018ba8 	.word	0x08018ba8
 800e7e4:	08018bb0 	.word	0x08018bb0

0800e7e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4a15      	ldr	r2, [pc, #84]	@ (800e84c <HAL_UART_RxCpltCallback+0x64>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d123      	bne.n	800e842 <HAL_UART_RxCpltCallback+0x5a>
        uint16_t nextHead = (uartHead + 1) % UART_RING_BUFFER_SIZE;
 800e7fa:	4b15      	ldr	r3, [pc, #84]	@ (800e850 <HAL_UART_RxCpltCallback+0x68>)
 800e7fc:	881b      	ldrh	r3, [r3, #0]
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	3301      	adds	r3, #1
 800e802:	425a      	negs	r2, r3
 800e804:	b2db      	uxtb	r3, r3
 800e806:	b2d2      	uxtb	r2, r2
 800e808:	bf58      	it	pl
 800e80a:	4253      	negpl	r3, r2
 800e80c:	81fb      	strh	r3, [r7, #14]

        if (nextHead != uartTail) {
 800e80e:	4b11      	ldr	r3, [pc, #68]	@ (800e854 <HAL_UART_RxCpltCallback+0x6c>)
 800e810:	881b      	ldrh	r3, [r3, #0]
 800e812:	b29b      	uxth	r3, r3
 800e814:	89fa      	ldrh	r2, [r7, #14]
 800e816:	429a      	cmp	r2, r3
 800e818:	d00b      	beq.n	800e832 <HAL_UART_RxCpltCallback+0x4a>
            uartRingBuffer[uartHead] = uartRxByte;
 800e81a:	4b0d      	ldr	r3, [pc, #52]	@ (800e850 <HAL_UART_RxCpltCallback+0x68>)
 800e81c:	881b      	ldrh	r3, [r3, #0]
 800e81e:	b29b      	uxth	r3, r3
 800e820:	461a      	mov	r2, r3
 800e822:	4b0d      	ldr	r3, [pc, #52]	@ (800e858 <HAL_UART_RxCpltCallback+0x70>)
 800e824:	7819      	ldrb	r1, [r3, #0]
 800e826:	4b0d      	ldr	r3, [pc, #52]	@ (800e85c <HAL_UART_RxCpltCallback+0x74>)
 800e828:	5499      	strb	r1, [r3, r2]
            uartHead = nextHead;
 800e82a:	4a09      	ldr	r2, [pc, #36]	@ (800e850 <HAL_UART_RxCpltCallback+0x68>)
 800e82c:	89fb      	ldrh	r3, [r7, #14]
 800e82e:	8013      	strh	r3, [r2, #0]
 800e830:	e002      	b.n	800e838 <HAL_UART_RxCpltCallback+0x50>
        } else {
            printf("UART ring buffer overflow!\n");
 800e832:	480b      	ldr	r0, [pc, #44]	@ (800e860 <HAL_UART_RxCpltCallback+0x78>)
 800e834:	f007 fb2a 	bl	8015e8c <puts>
        }

        HAL_UART_Receive_IT(&huart3, &uartRxByte, 1);
 800e838:	2201      	movs	r2, #1
 800e83a:	4907      	ldr	r1, [pc, #28]	@ (800e858 <HAL_UART_RxCpltCallback+0x70>)
 800e83c:	4809      	ldr	r0, [pc, #36]	@ (800e864 <HAL_UART_RxCpltCallback+0x7c>)
 800e83e:	f002 fd44 	bl	80112ca <HAL_UART_Receive_IT>
    }
}
 800e842:	bf00      	nop
 800e844:	3710      	adds	r7, #16
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
 800e84a:	bf00      	nop
 800e84c:	40004800 	.word	0x40004800
 800e850:	2000071c 	.word	0x2000071c
 800e854:	2000071e 	.word	0x2000071e
 800e858:	20000720 	.word	0x20000720
 800e85c:	2000061c 	.word	0x2000061c
 800e860:	08018bc4 	.word	0x08018bc4
 800e864:	20000504 	.word	0x20000504

0800e868 <setup_freeRTOS>:
uint16_t pins[DEVICE_COUNT] = {TOUCH_LED1_Pin, TOUCH_LED2_Pin, TOUCH_LED3_Pin, TOUCH_LED4_Pin};
volatile int global_device_states[4] = {0, 0, 0, 0};


void setup_freeRTOS(void)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b086      	sub	sp, #24
 800e86c:	af02      	add	r7, sp, #8
	HAL_SPI_Receive_IT(&hspi2, &spiRxByte, 1);
 800e86e:	2201      	movs	r2, #1
 800e870:	4934      	ldr	r1, [pc, #208]	@ (800e944 <setup_freeRTOS+0xdc>)
 800e872:	4835      	ldr	r0, [pc, #212]	@ (800e948 <setup_freeRTOS+0xe0>)
 800e874:	f001 fc66 	bl	8010144 <HAL_SPI_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &uartRxByte, 1);
 800e878:	2201      	movs	r2, #1
 800e87a:	4934      	ldr	r1, [pc, #208]	@ (800e94c <setup_freeRTOS+0xe4>)
 800e87c:	4834      	ldr	r0, [pc, #208]	@ (800e950 <setup_freeRTOS+0xe8>)
 800e87e:	f002 fd24 	bl	80112ca <HAL_UART_Receive_IT>

	status = xTaskCreate(SPI_Handler, "SPIHandler", 512, NULL, 5, NULL);
 800e882:	2300      	movs	r3, #0
 800e884:	9301      	str	r3, [sp, #4]
 800e886:	2305      	movs	r3, #5
 800e888:	9300      	str	r3, [sp, #0]
 800e88a:	2300      	movs	r3, #0
 800e88c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e890:	4930      	ldr	r1, [pc, #192]	@ (800e954 <setup_freeRTOS+0xec>)
 800e892:	4831      	ldr	r0, [pc, #196]	@ (800e958 <setup_freeRTOS+0xf0>)
 800e894:	f004 fba8 	bl	8012fe8 <xTaskCreate>
 800e898:	4603      	mov	r3, r0
 800e89a:	4a30      	ldr	r2, [pc, #192]	@ (800e95c <setup_freeRTOS+0xf4>)
 800e89c:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800e89e:	4b2f      	ldr	r3, [pc, #188]	@ (800e95c <setup_freeRTOS+0xf4>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d00b      	beq.n	800e8be <setup_freeRTOS+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800e8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8aa:	f383 8811 	msr	BASEPRI, r3
 800e8ae:	f3bf 8f6f 	isb	sy
 800e8b2:	f3bf 8f4f 	dsb	sy
 800e8b6:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800e8b8:	bf00      	nop
 800e8ba:	bf00      	nop
 800e8bc:	e7fd      	b.n	800e8ba <setup_freeRTOS+0x52>

	status = xTaskCreate(UART_Handler, "UARTHandler", 1024, NULL, 4, NULL);
 800e8be:	2300      	movs	r3, #0
 800e8c0:	9301      	str	r3, [sp, #4]
 800e8c2:	2304      	movs	r3, #4
 800e8c4:	9300      	str	r3, [sp, #0]
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e8cc:	4924      	ldr	r1, [pc, #144]	@ (800e960 <setup_freeRTOS+0xf8>)
 800e8ce:	4825      	ldr	r0, [pc, #148]	@ (800e964 <setup_freeRTOS+0xfc>)
 800e8d0:	f004 fb8a 	bl	8012fe8 <xTaskCreate>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	4a21      	ldr	r2, [pc, #132]	@ (800e95c <setup_freeRTOS+0xf4>)
 800e8d8:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800e8da:	4b20      	ldr	r3, [pc, #128]	@ (800e95c <setup_freeRTOS+0xf4>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	2b01      	cmp	r3, #1
 800e8e0:	d00b      	beq.n	800e8fa <setup_freeRTOS+0x92>
        __asm volatile
 800e8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8e6:	f383 8811 	msr	BASEPRI, r3
 800e8ea:	f3bf 8f6f 	isb	sy
 800e8ee:	f3bf 8f4f 	dsb	sy
 800e8f2:	60bb      	str	r3, [r7, #8]
    }
 800e8f4:	bf00      	nop
 800e8f6:	bf00      	nop
 800e8f8:	e7fd      	b.n	800e8f6 <setup_freeRTOS+0x8e>

	status = xTaskCreate(Display_Handler, "DisplayHandler", 1024, NULL, 3, NULL);
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	9301      	str	r3, [sp, #4]
 800e8fe:	2303      	movs	r3, #3
 800e900:	9300      	str	r3, [sp, #0]
 800e902:	2300      	movs	r3, #0
 800e904:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e908:	4917      	ldr	r1, [pc, #92]	@ (800e968 <setup_freeRTOS+0x100>)
 800e90a:	4818      	ldr	r0, [pc, #96]	@ (800e96c <setup_freeRTOS+0x104>)
 800e90c:	f004 fb6c 	bl	8012fe8 <xTaskCreate>
 800e910:	4603      	mov	r3, r0
 800e912:	4a12      	ldr	r2, [pc, #72]	@ (800e95c <setup_freeRTOS+0xf4>)
 800e914:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800e916:	4b11      	ldr	r3, [pc, #68]	@ (800e95c <setup_freeRTOS+0xf4>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	2b01      	cmp	r3, #1
 800e91c:	d00b      	beq.n	800e936 <setup_freeRTOS+0xce>
        __asm volatile
 800e91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e922:	f383 8811 	msr	BASEPRI, r3
 800e926:	f3bf 8f6f 	isb	sy
 800e92a:	f3bf 8f4f 	dsb	sy
 800e92e:	607b      	str	r3, [r7, #4]
    }
 800e930:	bf00      	nop
 800e932:	bf00      	nop
 800e934:	e7fd      	b.n	800e932 <setup_freeRTOS+0xca>

	vTaskStartScheduler();
 800e936:	f004 fcd3 	bl	80132e0 <vTaskStartScheduler>
}
 800e93a:	bf00      	nop
 800e93c:	3710      	adds	r7, #16
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	200005d0 	.word	0x200005d0
 800e948:	2000040c 	.word	0x2000040c
 800e94c:	20000720 	.word	0x20000720
 800e950:	20000504 	.word	0x20000504
 800e954:	08018c00 	.word	0x08018c00
 800e958:	0800da21 	.word	0x0800da21
 800e95c:	20000728 	.word	0x20000728
 800e960:	08018c0c 	.word	0x08018c0c
 800e964:	0800e405 	.word	0x0800e405
 800e968:	08018c18 	.word	0x08018c18
 800e96c:	0800c01d 	.word	0x0800c01d

0800e970 <user_app_init>:

void user_app_init(void)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b082      	sub	sp, #8
 800e974:	af00      	add	r7, sp, #0
	ST7735_Init(0);
 800e976:	2000      	movs	r0, #0
 800e978:	f7fb f8b8 	bl	8009aec <ST7735_Init>
	ST7735_SetRotation(1);
 800e97c:	2001      	movs	r0, #1
 800e97e:	f7fb f8e1 	bl	8009b44 <ST7735_SetRotation>
	fillScreen(BLACK);
 800e982:	2000      	movs	r0, #0
 800e984:	f7fa ffa6 	bl	80098d4 <fillScreen>
	showStartupLogoAndMenu();
 800e988:	f7ff f83a 	bl	800da00 <showStartupLogoAndMenu>
	deviceStateMutex = xSemaphoreCreateMutex();
 800e98c:	2001      	movs	r0, #1
 800e98e:	f003 fdea 	bl	8012566 <xQueueCreateMutex>
 800e992:	4603      	mov	r3, r0
 800e994:	4a10      	ldr	r2, [pc, #64]	@ (800e9d8 <user_app_init+0x68>)
 800e996:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 4; i++) {
 800e998:	2300      	movs	r3, #0
 800e99a:	607b      	str	r3, [r7, #4]
 800e99c:	e00c      	b.n	800e9b8 <user_app_init+0x48>
	  global_device_states[i] = 0;
 800e99e:	4a0f      	ldr	r2, [pc, #60]	@ (800e9dc <user_app_init+0x6c>)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2100      	movs	r1, #0
 800e9a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  device_states[i] = 0;
 800e9a8:	4a0d      	ldr	r2, [pc, #52]	@ (800e9e0 <user_app_init+0x70>)
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2100      	movs	r1, #0
 800e9ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	607b      	str	r3, [r7, #4]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2b03      	cmp	r3, #3
 800e9bc:	ddef      	ble.n	800e99e <user_app_init+0x2e>
	}
	HAL_GPIO_WritePin(TI_SS_GPIO_Port, TI_SS_Pin, GPIO_PIN_SET);
 800e9be:	2201      	movs	r2, #1
 800e9c0:	2102      	movs	r1, #2
 800e9c2:	4808      	ldr	r0, [pc, #32]	@ (800e9e4 <user_app_init+0x74>)
 800e9c4:	f000 fbc0 	bl	800f148 <HAL_GPIO_WritePin>
	initializeMenu();
 800e9c8:	f7fe fd2a 	bl	800d420 <initializeMenu>
	setup_freeRTOS();
 800e9cc:	f7ff ff4c 	bl	800e868 <setup_freeRTOS>
}
 800e9d0:	bf00      	nop
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	20000724 	.word	0x20000724
 800e9dc:	2000072c 	.word	0x2000072c
 800e9e0:	2000027c 	.word	0x2000027c
 800e9e4:	40020400 	.word	0x40020400

0800e9e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800e9e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ea20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800e9ec:	f7ff fcde 	bl	800e3ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800e9f0:	480c      	ldr	r0, [pc, #48]	@ (800ea24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800e9f2:	490d      	ldr	r1, [pc, #52]	@ (800ea28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800e9f4:	4a0d      	ldr	r2, [pc, #52]	@ (800ea2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800e9f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e9f8:	e002      	b.n	800ea00 <LoopCopyDataInit>

0800e9fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e9fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e9fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e9fe:	3304      	adds	r3, #4

0800ea00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ea00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ea02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ea04:	d3f9      	bcc.n	800e9fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ea06:	4a0a      	ldr	r2, [pc, #40]	@ (800ea30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ea08:	4c0a      	ldr	r4, [pc, #40]	@ (800ea34 <LoopFillZerobss+0x22>)
  movs r3, #0
 800ea0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ea0c:	e001      	b.n	800ea12 <LoopFillZerobss>

0800ea0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ea0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ea10:	3204      	adds	r2, #4

0800ea12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ea12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ea14:	d3fb      	bcc.n	800ea0e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800ea16:	f007 fc29 	bl	801626c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ea1a:	f7fe fd63 	bl	800d4e4 <main>
  bx  lr    
 800ea1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ea20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ea24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ea28:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 800ea2c:	0801ab80 	.word	0x0801ab80
  ldr r2, =_sbss
 800ea30:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 800ea34:	20013638 	.word	0x20013638

0800ea38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ea38:	e7fe      	b.n	800ea38 <ADC_IRQHandler>
	...

0800ea3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ea40:	4b0e      	ldr	r3, [pc, #56]	@ (800ea7c <HAL_Init+0x40>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	4a0d      	ldr	r2, [pc, #52]	@ (800ea7c <HAL_Init+0x40>)
 800ea46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ea4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ea4c:	4b0b      	ldr	r3, [pc, #44]	@ (800ea7c <HAL_Init+0x40>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	4a0a      	ldr	r2, [pc, #40]	@ (800ea7c <HAL_Init+0x40>)
 800ea52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ea56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ea58:	4b08      	ldr	r3, [pc, #32]	@ (800ea7c <HAL_Init+0x40>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	4a07      	ldr	r2, [pc, #28]	@ (800ea7c <HAL_Init+0x40>)
 800ea5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ea62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ea64:	2003      	movs	r0, #3
 800ea66:	f000 f8fc 	bl	800ec62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ea6a:	200f      	movs	r0, #15
 800ea6c:	f7ff fb4c 	bl	800e108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ea70:	f7ff f982 	bl	800dd78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	40023c00 	.word	0x40023c00

0800ea80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ea80:	b480      	push	{r7}
 800ea82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ea84:	4b06      	ldr	r3, [pc, #24]	@ (800eaa0 <HAL_IncTick+0x20>)
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	461a      	mov	r2, r3
 800ea8a:	4b06      	ldr	r3, [pc, #24]	@ (800eaa4 <HAL_IncTick+0x24>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	4413      	add	r3, r2
 800ea90:	4a04      	ldr	r2, [pc, #16]	@ (800eaa4 <HAL_IncTick+0x24>)
 800ea92:	6013      	str	r3, [r2, #0]
}
 800ea94:	bf00      	nop
 800ea96:	46bd      	mov	sp, r7
 800ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9c:	4770      	bx	lr
 800ea9e:	bf00      	nop
 800eaa0:	20000064 	.word	0x20000064
 800eaa4:	2000073c 	.word	0x2000073c

0800eaa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	af00      	add	r7, sp, #0
  return uwTick;
 800eaac:	4b03      	ldr	r3, [pc, #12]	@ (800eabc <HAL_GetTick+0x14>)
 800eaae:	681b      	ldr	r3, [r3, #0]
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	46bd      	mov	sp, r7
 800eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab8:	4770      	bx	lr
 800eaba:	bf00      	nop
 800eabc:	2000073c 	.word	0x2000073c

0800eac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800eac8:	f7ff ffee 	bl	800eaa8 <HAL_GetTick>
 800eacc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ead8:	d005      	beq.n	800eae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800eada:	4b0a      	ldr	r3, [pc, #40]	@ (800eb04 <HAL_Delay+0x44>)
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	461a      	mov	r2, r3
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	4413      	add	r3, r2
 800eae4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800eae6:	bf00      	nop
 800eae8:	f7ff ffde 	bl	800eaa8 <HAL_GetTick>
 800eaec:	4602      	mov	r2, r0
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	1ad3      	subs	r3, r2, r3
 800eaf2:	68fa      	ldr	r2, [r7, #12]
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d8f7      	bhi.n	800eae8 <HAL_Delay+0x28>
  {
  }
}
 800eaf8:	bf00      	nop
 800eafa:	bf00      	nop
 800eafc:	3710      	adds	r7, #16
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	20000064 	.word	0x20000064

0800eb08 <__NVIC_SetPriorityGrouping>:
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b085      	sub	sp, #20
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f003 0307 	and.w	r3, r3, #7
 800eb16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800eb18:	4b0c      	ldr	r3, [pc, #48]	@ (800eb4c <__NVIC_SetPriorityGrouping+0x44>)
 800eb1a:	68db      	ldr	r3, [r3, #12]
 800eb1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800eb1e:	68ba      	ldr	r2, [r7, #8]
 800eb20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800eb24:	4013      	ands	r3, r2
 800eb26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800eb30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800eb34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eb38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800eb3a:	4a04      	ldr	r2, [pc, #16]	@ (800eb4c <__NVIC_SetPriorityGrouping+0x44>)
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	60d3      	str	r3, [r2, #12]
}
 800eb40:	bf00      	nop
 800eb42:	3714      	adds	r7, #20
 800eb44:	46bd      	mov	sp, r7
 800eb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4a:	4770      	bx	lr
 800eb4c:	e000ed00 	.word	0xe000ed00

0800eb50 <__NVIC_GetPriorityGrouping>:
{
 800eb50:	b480      	push	{r7}
 800eb52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800eb54:	4b04      	ldr	r3, [pc, #16]	@ (800eb68 <__NVIC_GetPriorityGrouping+0x18>)
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	0a1b      	lsrs	r3, r3, #8
 800eb5a:	f003 0307 	and.w	r3, r3, #7
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	46bd      	mov	sp, r7
 800eb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb66:	4770      	bx	lr
 800eb68:	e000ed00 	.word	0xe000ed00

0800eb6c <__NVIC_EnableIRQ>:
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	4603      	mov	r3, r0
 800eb74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800eb76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	db0b      	blt.n	800eb96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800eb7e:	79fb      	ldrb	r3, [r7, #7]
 800eb80:	f003 021f 	and.w	r2, r3, #31
 800eb84:	4907      	ldr	r1, [pc, #28]	@ (800eba4 <__NVIC_EnableIRQ+0x38>)
 800eb86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb8a:	095b      	lsrs	r3, r3, #5
 800eb8c:	2001      	movs	r0, #1
 800eb8e:	fa00 f202 	lsl.w	r2, r0, r2
 800eb92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800eb96:	bf00      	nop
 800eb98:	370c      	adds	r7, #12
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba0:	4770      	bx	lr
 800eba2:	bf00      	nop
 800eba4:	e000e100 	.word	0xe000e100

0800eba8 <__NVIC_SetPriority>:
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	4603      	mov	r3, r0
 800ebb0:	6039      	str	r1, [r7, #0]
 800ebb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ebb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	db0a      	blt.n	800ebd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	b2da      	uxtb	r2, r3
 800ebc0:	490c      	ldr	r1, [pc, #48]	@ (800ebf4 <__NVIC_SetPriority+0x4c>)
 800ebc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ebc6:	0112      	lsls	r2, r2, #4
 800ebc8:	b2d2      	uxtb	r2, r2
 800ebca:	440b      	add	r3, r1
 800ebcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ebd0:	e00a      	b.n	800ebe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	b2da      	uxtb	r2, r3
 800ebd6:	4908      	ldr	r1, [pc, #32]	@ (800ebf8 <__NVIC_SetPriority+0x50>)
 800ebd8:	79fb      	ldrb	r3, [r7, #7]
 800ebda:	f003 030f 	and.w	r3, r3, #15
 800ebde:	3b04      	subs	r3, #4
 800ebe0:	0112      	lsls	r2, r2, #4
 800ebe2:	b2d2      	uxtb	r2, r2
 800ebe4:	440b      	add	r3, r1
 800ebe6:	761a      	strb	r2, [r3, #24]
}
 800ebe8:	bf00      	nop
 800ebea:	370c      	adds	r7, #12
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr
 800ebf4:	e000e100 	.word	0xe000e100
 800ebf8:	e000ed00 	.word	0xe000ed00

0800ebfc <NVIC_EncodePriority>:
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b089      	sub	sp, #36	@ 0x24
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	60b9      	str	r1, [r7, #8]
 800ec06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f003 0307 	and.w	r3, r3, #7
 800ec0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ec10:	69fb      	ldr	r3, [r7, #28]
 800ec12:	f1c3 0307 	rsb	r3, r3, #7
 800ec16:	2b04      	cmp	r3, #4
 800ec18:	bf28      	it	cs
 800ec1a:	2304      	movcs	r3, #4
 800ec1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ec1e:	69fb      	ldr	r3, [r7, #28]
 800ec20:	3304      	adds	r3, #4
 800ec22:	2b06      	cmp	r3, #6
 800ec24:	d902      	bls.n	800ec2c <NVIC_EncodePriority+0x30>
 800ec26:	69fb      	ldr	r3, [r7, #28]
 800ec28:	3b03      	subs	r3, #3
 800ec2a:	e000      	b.n	800ec2e <NVIC_EncodePriority+0x32>
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ec30:	f04f 32ff 	mov.w	r2, #4294967295
 800ec34:	69bb      	ldr	r3, [r7, #24]
 800ec36:	fa02 f303 	lsl.w	r3, r2, r3
 800ec3a:	43da      	mvns	r2, r3
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	401a      	ands	r2, r3
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ec44:	f04f 31ff 	mov.w	r1, #4294967295
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	fa01 f303 	lsl.w	r3, r1, r3
 800ec4e:	43d9      	mvns	r1, r3
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ec54:	4313      	orrs	r3, r2
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3724      	adds	r7, #36	@ 0x24
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr

0800ec62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ec62:	b580      	push	{r7, lr}
 800ec64:	b082      	sub	sp, #8
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f7ff ff4c 	bl	800eb08 <__NVIC_SetPriorityGrouping>
}
 800ec70:	bf00      	nop
 800ec72:	3708      	adds	r7, #8
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}

0800ec78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b086      	sub	sp, #24
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	4603      	mov	r3, r0
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	607a      	str	r2, [r7, #4]
 800ec84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ec86:	2300      	movs	r3, #0
 800ec88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ec8a:	f7ff ff61 	bl	800eb50 <__NVIC_GetPriorityGrouping>
 800ec8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	68b9      	ldr	r1, [r7, #8]
 800ec94:	6978      	ldr	r0, [r7, #20]
 800ec96:	f7ff ffb1 	bl	800ebfc <NVIC_EncodePriority>
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eca0:	4611      	mov	r1, r2
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7ff ff80 	bl	800eba8 <__NVIC_SetPriority>
}
 800eca8:	bf00      	nop
 800ecaa:	3718      	adds	r7, #24
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}

0800ecb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ecba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7ff ff54 	bl	800eb6c <__NVIC_EnableIRQ>
}
 800ecc4:	bf00      	nop
 800ecc6:	3708      	adds	r7, #8
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800ecda:	f7ff fee5 	bl	800eaa8 <HAL_GetTick>
 800ecde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	2b02      	cmp	r3, #2
 800ecea:	d008      	beq.n	800ecfe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2280      	movs	r2, #128	@ 0x80
 800ecf0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	e052      	b.n	800eda4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	681a      	ldr	r2, [r3, #0]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	f022 0216 	bic.w	r2, r2, #22
 800ed0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	695a      	ldr	r2, [r3, #20]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ed1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d103      	bne.n	800ed2e <HAL_DMA_Abort+0x62>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d007      	beq.n	800ed3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	681a      	ldr	r2, [r3, #0]
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	f022 0208 	bic.w	r2, r2, #8
 800ed3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f022 0201 	bic.w	r2, r2, #1
 800ed4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ed4e:	e013      	b.n	800ed78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ed50:	f7ff feaa 	bl	800eaa8 <HAL_GetTick>
 800ed54:	4602      	mov	r2, r0
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	1ad3      	subs	r3, r2, r3
 800ed5a:	2b05      	cmp	r3, #5
 800ed5c:	d90c      	bls.n	800ed78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2220      	movs	r2, #32
 800ed62:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2203      	movs	r2, #3
 800ed68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800ed74:	2303      	movs	r3, #3
 800ed76:	e015      	b.n	800eda4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f003 0301 	and.w	r3, r3, #1
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d1e4      	bne.n	800ed50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed8a:	223f      	movs	r2, #63	@ 0x3f
 800ed8c:	409a      	lsls	r2, r3
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2201      	movs	r2, #1
 800ed96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800eda2:	2300      	movs	r3, #0
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3710      	adds	r7, #16
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800edac:	b480      	push	{r7}
 800edae:	b083      	sub	sp, #12
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800edba:	b2db      	uxtb	r3, r3
 800edbc:	2b02      	cmp	r3, #2
 800edbe:	d004      	beq.n	800edca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2280      	movs	r2, #128	@ 0x80
 800edc4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800edc6:	2301      	movs	r3, #1
 800edc8:	e00c      	b.n	800ede4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2205      	movs	r2, #5
 800edce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f022 0201 	bic.w	r2, r2, #1
 800ede0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ede2:	2300      	movs	r3, #0
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	370c      	adds	r7, #12
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr

0800edf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b089      	sub	sp, #36	@ 0x24
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800edfa:	2300      	movs	r3, #0
 800edfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800edfe:	2300      	movs	r3, #0
 800ee00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ee02:	2300      	movs	r3, #0
 800ee04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ee06:	2300      	movs	r3, #0
 800ee08:	61fb      	str	r3, [r7, #28]
 800ee0a:	e165      	b.n	800f0d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	69fb      	ldr	r3, [r7, #28]
 800ee10:	fa02 f303 	lsl.w	r3, r2, r3
 800ee14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	697a      	ldr	r2, [r7, #20]
 800ee1c:	4013      	ands	r3, r2
 800ee1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ee20:	693a      	ldr	r2, [r7, #16]
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	429a      	cmp	r2, r3
 800ee26:	f040 8154 	bne.w	800f0d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	f003 0303 	and.w	r3, r3, #3
 800ee32:	2b01      	cmp	r3, #1
 800ee34:	d005      	beq.n	800ee42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ee3e:	2b02      	cmp	r3, #2
 800ee40:	d130      	bne.n	800eea4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	689b      	ldr	r3, [r3, #8]
 800ee46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ee48:	69fb      	ldr	r3, [r7, #28]
 800ee4a:	005b      	lsls	r3, r3, #1
 800ee4c:	2203      	movs	r2, #3
 800ee4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ee52:	43db      	mvns	r3, r3
 800ee54:	69ba      	ldr	r2, [r7, #24]
 800ee56:	4013      	ands	r3, r2
 800ee58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	68da      	ldr	r2, [r3, #12]
 800ee5e:	69fb      	ldr	r3, [r7, #28]
 800ee60:	005b      	lsls	r3, r3, #1
 800ee62:	fa02 f303 	lsl.w	r3, r2, r3
 800ee66:	69ba      	ldr	r2, [r7, #24]
 800ee68:	4313      	orrs	r3, r2
 800ee6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	69ba      	ldr	r2, [r7, #24]
 800ee70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ee78:	2201      	movs	r2, #1
 800ee7a:	69fb      	ldr	r3, [r7, #28]
 800ee7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ee80:	43db      	mvns	r3, r3
 800ee82:	69ba      	ldr	r2, [r7, #24]
 800ee84:	4013      	ands	r3, r2
 800ee86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	091b      	lsrs	r3, r3, #4
 800ee8e:	f003 0201 	and.w	r2, r3, #1
 800ee92:	69fb      	ldr	r3, [r7, #28]
 800ee94:	fa02 f303 	lsl.w	r3, r2, r3
 800ee98:	69ba      	ldr	r2, [r7, #24]
 800ee9a:	4313      	orrs	r3, r2
 800ee9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	69ba      	ldr	r2, [r7, #24]
 800eea2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	685b      	ldr	r3, [r3, #4]
 800eea8:	f003 0303 	and.w	r3, r3, #3
 800eeac:	2b03      	cmp	r3, #3
 800eeae:	d017      	beq.n	800eee0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	68db      	ldr	r3, [r3, #12]
 800eeb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800eeb6:	69fb      	ldr	r3, [r7, #28]
 800eeb8:	005b      	lsls	r3, r3, #1
 800eeba:	2203      	movs	r2, #3
 800eebc:	fa02 f303 	lsl.w	r3, r2, r3
 800eec0:	43db      	mvns	r3, r3
 800eec2:	69ba      	ldr	r2, [r7, #24]
 800eec4:	4013      	ands	r3, r2
 800eec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	689a      	ldr	r2, [r3, #8]
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	005b      	lsls	r3, r3, #1
 800eed0:	fa02 f303 	lsl.w	r3, r2, r3
 800eed4:	69ba      	ldr	r2, [r7, #24]
 800eed6:	4313      	orrs	r3, r2
 800eed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	69ba      	ldr	r2, [r7, #24]
 800eede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	f003 0303 	and.w	r3, r3, #3
 800eee8:	2b02      	cmp	r3, #2
 800eeea:	d123      	bne.n	800ef34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	08da      	lsrs	r2, r3, #3
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	3208      	adds	r2, #8
 800eef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	f003 0307 	and.w	r3, r3, #7
 800ef00:	009b      	lsls	r3, r3, #2
 800ef02:	220f      	movs	r2, #15
 800ef04:	fa02 f303 	lsl.w	r3, r2, r3
 800ef08:	43db      	mvns	r3, r3
 800ef0a:	69ba      	ldr	r2, [r7, #24]
 800ef0c:	4013      	ands	r3, r2
 800ef0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	691a      	ldr	r2, [r3, #16]
 800ef14:	69fb      	ldr	r3, [r7, #28]
 800ef16:	f003 0307 	and.w	r3, r3, #7
 800ef1a:	009b      	lsls	r3, r3, #2
 800ef1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ef20:	69ba      	ldr	r2, [r7, #24]
 800ef22:	4313      	orrs	r3, r2
 800ef24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ef26:	69fb      	ldr	r3, [r7, #28]
 800ef28:	08da      	lsrs	r2, r3, #3
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	3208      	adds	r2, #8
 800ef2e:	69b9      	ldr	r1, [r7, #24]
 800ef30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	005b      	lsls	r3, r3, #1
 800ef3e:	2203      	movs	r2, #3
 800ef40:	fa02 f303 	lsl.w	r3, r2, r3
 800ef44:	43db      	mvns	r3, r3
 800ef46:	69ba      	ldr	r2, [r7, #24]
 800ef48:	4013      	ands	r3, r2
 800ef4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	f003 0203 	and.w	r2, r3, #3
 800ef54:	69fb      	ldr	r3, [r7, #28]
 800ef56:	005b      	lsls	r3, r3, #1
 800ef58:	fa02 f303 	lsl.w	r3, r2, r3
 800ef5c:	69ba      	ldr	r2, [r7, #24]
 800ef5e:	4313      	orrs	r3, r2
 800ef60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	69ba      	ldr	r2, [r7, #24]
 800ef66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	f000 80ae 	beq.w	800f0d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ef76:	2300      	movs	r3, #0
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	4b5d      	ldr	r3, [pc, #372]	@ (800f0f0 <HAL_GPIO_Init+0x300>)
 800ef7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef7e:	4a5c      	ldr	r2, [pc, #368]	@ (800f0f0 <HAL_GPIO_Init+0x300>)
 800ef80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ef84:	6453      	str	r3, [r2, #68]	@ 0x44
 800ef86:	4b5a      	ldr	r3, [pc, #360]	@ (800f0f0 <HAL_GPIO_Init+0x300>)
 800ef88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ef8e:	60fb      	str	r3, [r7, #12]
 800ef90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ef92:	4a58      	ldr	r2, [pc, #352]	@ (800f0f4 <HAL_GPIO_Init+0x304>)
 800ef94:	69fb      	ldr	r3, [r7, #28]
 800ef96:	089b      	lsrs	r3, r3, #2
 800ef98:	3302      	adds	r3, #2
 800ef9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800efa0:	69fb      	ldr	r3, [r7, #28]
 800efa2:	f003 0303 	and.w	r3, r3, #3
 800efa6:	009b      	lsls	r3, r3, #2
 800efa8:	220f      	movs	r2, #15
 800efaa:	fa02 f303 	lsl.w	r3, r2, r3
 800efae:	43db      	mvns	r3, r3
 800efb0:	69ba      	ldr	r2, [r7, #24]
 800efb2:	4013      	ands	r3, r2
 800efb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	4a4f      	ldr	r2, [pc, #316]	@ (800f0f8 <HAL_GPIO_Init+0x308>)
 800efba:	4293      	cmp	r3, r2
 800efbc:	d025      	beq.n	800f00a <HAL_GPIO_Init+0x21a>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	4a4e      	ldr	r2, [pc, #312]	@ (800f0fc <HAL_GPIO_Init+0x30c>)
 800efc2:	4293      	cmp	r3, r2
 800efc4:	d01f      	beq.n	800f006 <HAL_GPIO_Init+0x216>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	4a4d      	ldr	r2, [pc, #308]	@ (800f100 <HAL_GPIO_Init+0x310>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d019      	beq.n	800f002 <HAL_GPIO_Init+0x212>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	4a4c      	ldr	r2, [pc, #304]	@ (800f104 <HAL_GPIO_Init+0x314>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d013      	beq.n	800effe <HAL_GPIO_Init+0x20e>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	4a4b      	ldr	r2, [pc, #300]	@ (800f108 <HAL_GPIO_Init+0x318>)
 800efda:	4293      	cmp	r3, r2
 800efdc:	d00d      	beq.n	800effa <HAL_GPIO_Init+0x20a>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	4a4a      	ldr	r2, [pc, #296]	@ (800f10c <HAL_GPIO_Init+0x31c>)
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d007      	beq.n	800eff6 <HAL_GPIO_Init+0x206>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	4a49      	ldr	r2, [pc, #292]	@ (800f110 <HAL_GPIO_Init+0x320>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d101      	bne.n	800eff2 <HAL_GPIO_Init+0x202>
 800efee:	2306      	movs	r3, #6
 800eff0:	e00c      	b.n	800f00c <HAL_GPIO_Init+0x21c>
 800eff2:	2307      	movs	r3, #7
 800eff4:	e00a      	b.n	800f00c <HAL_GPIO_Init+0x21c>
 800eff6:	2305      	movs	r3, #5
 800eff8:	e008      	b.n	800f00c <HAL_GPIO_Init+0x21c>
 800effa:	2304      	movs	r3, #4
 800effc:	e006      	b.n	800f00c <HAL_GPIO_Init+0x21c>
 800effe:	2303      	movs	r3, #3
 800f000:	e004      	b.n	800f00c <HAL_GPIO_Init+0x21c>
 800f002:	2302      	movs	r3, #2
 800f004:	e002      	b.n	800f00c <HAL_GPIO_Init+0x21c>
 800f006:	2301      	movs	r3, #1
 800f008:	e000      	b.n	800f00c <HAL_GPIO_Init+0x21c>
 800f00a:	2300      	movs	r3, #0
 800f00c:	69fa      	ldr	r2, [r7, #28]
 800f00e:	f002 0203 	and.w	r2, r2, #3
 800f012:	0092      	lsls	r2, r2, #2
 800f014:	4093      	lsls	r3, r2
 800f016:	69ba      	ldr	r2, [r7, #24]
 800f018:	4313      	orrs	r3, r2
 800f01a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f01c:	4935      	ldr	r1, [pc, #212]	@ (800f0f4 <HAL_GPIO_Init+0x304>)
 800f01e:	69fb      	ldr	r3, [r7, #28]
 800f020:	089b      	lsrs	r3, r3, #2
 800f022:	3302      	adds	r3, #2
 800f024:	69ba      	ldr	r2, [r7, #24]
 800f026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f02a:	4b3a      	ldr	r3, [pc, #232]	@ (800f114 <HAL_GPIO_Init+0x324>)
 800f02c:	689b      	ldr	r3, [r3, #8]
 800f02e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	43db      	mvns	r3, r3
 800f034:	69ba      	ldr	r2, [r7, #24]
 800f036:	4013      	ands	r3, r2
 800f038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f042:	2b00      	cmp	r3, #0
 800f044:	d003      	beq.n	800f04e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800f046:	69ba      	ldr	r2, [r7, #24]
 800f048:	693b      	ldr	r3, [r7, #16]
 800f04a:	4313      	orrs	r3, r2
 800f04c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800f04e:	4a31      	ldr	r2, [pc, #196]	@ (800f114 <HAL_GPIO_Init+0x324>)
 800f050:	69bb      	ldr	r3, [r7, #24]
 800f052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800f054:	4b2f      	ldr	r3, [pc, #188]	@ (800f114 <HAL_GPIO_Init+0x324>)
 800f056:	68db      	ldr	r3, [r3, #12]
 800f058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	43db      	mvns	r3, r3
 800f05e:	69ba      	ldr	r2, [r7, #24]
 800f060:	4013      	ands	r3, r2
 800f062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d003      	beq.n	800f078 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800f070:	69ba      	ldr	r2, [r7, #24]
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	4313      	orrs	r3, r2
 800f076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800f078:	4a26      	ldr	r2, [pc, #152]	@ (800f114 <HAL_GPIO_Init+0x324>)
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800f07e:	4b25      	ldr	r3, [pc, #148]	@ (800f114 <HAL_GPIO_Init+0x324>)
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	43db      	mvns	r3, r3
 800f088:	69ba      	ldr	r2, [r7, #24]
 800f08a:	4013      	ands	r3, r2
 800f08c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f096:	2b00      	cmp	r3, #0
 800f098:	d003      	beq.n	800f0a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800f09a:	69ba      	ldr	r2, [r7, #24]
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	4313      	orrs	r3, r2
 800f0a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800f0a2:	4a1c      	ldr	r2, [pc, #112]	@ (800f114 <HAL_GPIO_Init+0x324>)
 800f0a4:	69bb      	ldr	r3, [r7, #24]
 800f0a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f0a8:	4b1a      	ldr	r3, [pc, #104]	@ (800f114 <HAL_GPIO_Init+0x324>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	43db      	mvns	r3, r3
 800f0b2:	69ba      	ldr	r2, [r7, #24]
 800f0b4:	4013      	ands	r3, r2
 800f0b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d003      	beq.n	800f0cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800f0c4:	69ba      	ldr	r2, [r7, #24]
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	4313      	orrs	r3, r2
 800f0ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800f0cc:	4a11      	ldr	r2, [pc, #68]	@ (800f114 <HAL_GPIO_Init+0x324>)
 800f0ce:	69bb      	ldr	r3, [r7, #24]
 800f0d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f0d2:	69fb      	ldr	r3, [r7, #28]
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	61fb      	str	r3, [r7, #28]
 800f0d8:	69fb      	ldr	r3, [r7, #28]
 800f0da:	2b0f      	cmp	r3, #15
 800f0dc:	f67f ae96 	bls.w	800ee0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800f0e0:	bf00      	nop
 800f0e2:	bf00      	nop
 800f0e4:	3724      	adds	r7, #36	@ 0x24
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ec:	4770      	bx	lr
 800f0ee:	bf00      	nop
 800f0f0:	40023800 	.word	0x40023800
 800f0f4:	40013800 	.word	0x40013800
 800f0f8:	40020000 	.word	0x40020000
 800f0fc:	40020400 	.word	0x40020400
 800f100:	40020800 	.word	0x40020800
 800f104:	40020c00 	.word	0x40020c00
 800f108:	40021000 	.word	0x40021000
 800f10c:	40021400 	.word	0x40021400
 800f110:	40021800 	.word	0x40021800
 800f114:	40013c00 	.word	0x40013c00

0800f118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f118:	b480      	push	{r7}
 800f11a:	b085      	sub	sp, #20
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	460b      	mov	r3, r1
 800f122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	691a      	ldr	r2, [r3, #16]
 800f128:	887b      	ldrh	r3, [r7, #2]
 800f12a:	4013      	ands	r3, r2
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d002      	beq.n	800f136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800f130:	2301      	movs	r3, #1
 800f132:	73fb      	strb	r3, [r7, #15]
 800f134:	e001      	b.n	800f13a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f136:	2300      	movs	r3, #0
 800f138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f13a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3714      	adds	r7, #20
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr

0800f148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f148:	b480      	push	{r7}
 800f14a:	b083      	sub	sp, #12
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	460b      	mov	r3, r1
 800f152:	807b      	strh	r3, [r7, #2]
 800f154:	4613      	mov	r3, r2
 800f156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f158:	787b      	ldrb	r3, [r7, #1]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d003      	beq.n	800f166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f15e:	887a      	ldrh	r2, [r7, #2]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800f164:	e003      	b.n	800f16e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800f166:	887b      	ldrh	r3, [r7, #2]
 800f168:	041a      	lsls	r2, r3, #16
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	619a      	str	r2, [r3, #24]
}
 800f16e:	bf00      	nop
 800f170:	370c      	adds	r7, #12
 800f172:	46bd      	mov	sp, r7
 800f174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f178:	4770      	bx	lr

0800f17a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f17a:	b480      	push	{r7}
 800f17c:	b085      	sub	sp, #20
 800f17e:	af00      	add	r7, sp, #0
 800f180:	6078      	str	r0, [r7, #4]
 800f182:	460b      	mov	r3, r1
 800f184:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	695b      	ldr	r3, [r3, #20]
 800f18a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800f18c:	887a      	ldrh	r2, [r7, #2]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	4013      	ands	r3, r2
 800f192:	041a      	lsls	r2, r3, #16
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	43d9      	mvns	r1, r3
 800f198:	887b      	ldrh	r3, [r7, #2]
 800f19a:	400b      	ands	r3, r1
 800f19c:	431a      	orrs	r2, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	619a      	str	r2, [r3, #24]
}
 800f1a2:	bf00      	nop
 800f1a4:	3714      	adds	r7, #20
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ac:	4770      	bx	lr
	...

0800f1b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800f1ba:	4b08      	ldr	r3, [pc, #32]	@ (800f1dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f1bc:	695a      	ldr	r2, [r3, #20]
 800f1be:	88fb      	ldrh	r3, [r7, #6]
 800f1c0:	4013      	ands	r3, r2
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d006      	beq.n	800f1d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f1c6:	4a05      	ldr	r2, [pc, #20]	@ (800f1dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f1c8:	88fb      	ldrh	r3, [r7, #6]
 800f1ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f1cc:	88fb      	ldrh	r3, [r7, #6]
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7fe f8ee 	bl	800d3b0 <HAL_GPIO_EXTI_Callback>
  }
}
 800f1d4:	bf00      	nop
 800f1d6:	3708      	adds	r7, #8
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}
 800f1dc:	40013c00 	.word	0x40013c00

0800f1e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b082      	sub	sp, #8
 800f1e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	603b      	str	r3, [r7, #0]
 800f1ee:	4b20      	ldr	r3, [pc, #128]	@ (800f270 <HAL_PWREx_EnableOverDrive+0x90>)
 800f1f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1f2:	4a1f      	ldr	r2, [pc, #124]	@ (800f270 <HAL_PWREx_EnableOverDrive+0x90>)
 800f1f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f1f8:	6413      	str	r3, [r2, #64]	@ 0x40
 800f1fa:	4b1d      	ldr	r3, [pc, #116]	@ (800f270 <HAL_PWREx_EnableOverDrive+0x90>)
 800f1fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f202:	603b      	str	r3, [r7, #0]
 800f204:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800f206:	4b1b      	ldr	r3, [pc, #108]	@ (800f274 <HAL_PWREx_EnableOverDrive+0x94>)
 800f208:	2201      	movs	r2, #1
 800f20a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f20c:	f7ff fc4c 	bl	800eaa8 <HAL_GetTick>
 800f210:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800f212:	e009      	b.n	800f228 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800f214:	f7ff fc48 	bl	800eaa8 <HAL_GetTick>
 800f218:	4602      	mov	r2, r0
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	1ad3      	subs	r3, r2, r3
 800f21e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f222:	d901      	bls.n	800f228 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800f224:	2303      	movs	r3, #3
 800f226:	e01f      	b.n	800f268 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800f228:	4b13      	ldr	r3, [pc, #76]	@ (800f278 <HAL_PWREx_EnableOverDrive+0x98>)
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f234:	d1ee      	bne.n	800f214 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800f236:	4b11      	ldr	r3, [pc, #68]	@ (800f27c <HAL_PWREx_EnableOverDrive+0x9c>)
 800f238:	2201      	movs	r2, #1
 800f23a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f23c:	f7ff fc34 	bl	800eaa8 <HAL_GetTick>
 800f240:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800f242:	e009      	b.n	800f258 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800f244:	f7ff fc30 	bl	800eaa8 <HAL_GetTick>
 800f248:	4602      	mov	r2, r0
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	1ad3      	subs	r3, r2, r3
 800f24e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f252:	d901      	bls.n	800f258 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800f254:	2303      	movs	r3, #3
 800f256:	e007      	b.n	800f268 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800f258:	4b07      	ldr	r3, [pc, #28]	@ (800f278 <HAL_PWREx_EnableOverDrive+0x98>)
 800f25a:	685b      	ldr	r3, [r3, #4]
 800f25c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f260:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f264:	d1ee      	bne.n	800f244 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800f266:	2300      	movs	r3, #0
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3708      	adds	r7, #8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}
 800f270:	40023800 	.word	0x40023800
 800f274:	420e0040 	.word	0x420e0040
 800f278:	40007000 	.word	0x40007000
 800f27c:	420e0044 	.word	0x420e0044

0800f280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b084      	sub	sp, #16
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d101      	bne.n	800f294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f290:	2301      	movs	r3, #1
 800f292:	e0cc      	b.n	800f42e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f294:	4b68      	ldr	r3, [pc, #416]	@ (800f438 <HAL_RCC_ClockConfig+0x1b8>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f003 030f 	and.w	r3, r3, #15
 800f29c:	683a      	ldr	r2, [r7, #0]
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d90c      	bls.n	800f2bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f2a2:	4b65      	ldr	r3, [pc, #404]	@ (800f438 <HAL_RCC_ClockConfig+0x1b8>)
 800f2a4:	683a      	ldr	r2, [r7, #0]
 800f2a6:	b2d2      	uxtb	r2, r2
 800f2a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f2aa:	4b63      	ldr	r3, [pc, #396]	@ (800f438 <HAL_RCC_ClockConfig+0x1b8>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f003 030f 	and.w	r3, r3, #15
 800f2b2:	683a      	ldr	r2, [r7, #0]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d001      	beq.n	800f2bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	e0b8      	b.n	800f42e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	f003 0302 	and.w	r3, r3, #2
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d020      	beq.n	800f30a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f003 0304 	and.w	r3, r3, #4
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d005      	beq.n	800f2e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f2d4:	4b59      	ldr	r3, [pc, #356]	@ (800f43c <HAL_RCC_ClockConfig+0x1bc>)
 800f2d6:	689b      	ldr	r3, [r3, #8]
 800f2d8:	4a58      	ldr	r2, [pc, #352]	@ (800f43c <HAL_RCC_ClockConfig+0x1bc>)
 800f2da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800f2de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f003 0308 	and.w	r3, r3, #8
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d005      	beq.n	800f2f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f2ec:	4b53      	ldr	r3, [pc, #332]	@ (800f43c <HAL_RCC_ClockConfig+0x1bc>)
 800f2ee:	689b      	ldr	r3, [r3, #8]
 800f2f0:	4a52      	ldr	r2, [pc, #328]	@ (800f43c <HAL_RCC_ClockConfig+0x1bc>)
 800f2f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800f2f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f2f8:	4b50      	ldr	r3, [pc, #320]	@ (800f43c <HAL_RCC_ClockConfig+0x1bc>)
 800f2fa:	689b      	ldr	r3, [r3, #8]
 800f2fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	689b      	ldr	r3, [r3, #8]
 800f304:	494d      	ldr	r1, [pc, #308]	@ (800f43c <HAL_RCC_ClockConfig+0x1bc>)
 800f306:	4313      	orrs	r3, r2
 800f308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f003 0301 	and.w	r3, r3, #1
 800f312:	2b00      	cmp	r3, #0
 800f314:	d044      	beq.n	800f3a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	2b01      	cmp	r3, #1
 800f31c:	d107      	bne.n	800f32e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f31e:	4b47      	ldr	r3, [pc, #284]	@ (800f43c <HAL_RCC_ClockConfig+0x1bc>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f326:	2b00      	cmp	r3, #0
 800f328:	d119      	bne.n	800f35e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f32a:	2301      	movs	r3, #1
 800f32c:	e07f      	b.n	800f42e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	685b      	ldr	r3, [r3, #4]
 800f332:	2b02      	cmp	r3, #2
 800f334:	d003      	beq.n	800f33e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f33a:	2b03      	cmp	r3, #3
 800f33c:	d107      	bne.n	800f34e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f33e:	4b3f      	ldr	r3, [pc, #252]	@ (800f43c <HAL_RCC_ClockConfig+0x1bc>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f346:	2b00      	cmp	r3, #0
 800f348:	d109      	bne.n	800f35e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f34a:	2301      	movs	r3, #1
 800f34c:	e06f      	b.n	800f42e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f34e:	4b3b      	ldr	r3, [pc, #236]	@ (800f43c <HAL_RCC_ClockConfig+0x1bc>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f003 0302 	and.w	r3, r3, #2
 800f356:	2b00      	cmp	r3, #0
 800f358:	d101      	bne.n	800f35e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f35a:	2301      	movs	r3, #1
 800f35c:	e067      	b.n	800f42e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f35e:	4b37      	ldr	r3, [pc, #220]	@ (800f43c <HAL_RCC_ClockConfig+0x1bc>)
 800f360:	689b      	ldr	r3, [r3, #8]
 800f362:	f023 0203 	bic.w	r2, r3, #3
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	4934      	ldr	r1, [pc, #208]	@ (800f43c <HAL_RCC_ClockConfig+0x1bc>)
 800f36c:	4313      	orrs	r3, r2
 800f36e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f370:	f7ff fb9a 	bl	800eaa8 <HAL_GetTick>
 800f374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f376:	e00a      	b.n	800f38e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f378:	f7ff fb96 	bl	800eaa8 <HAL_GetTick>
 800f37c:	4602      	mov	r2, r0
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	1ad3      	subs	r3, r2, r3
 800f382:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f386:	4293      	cmp	r3, r2
 800f388:	d901      	bls.n	800f38e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f38a:	2303      	movs	r3, #3
 800f38c:	e04f      	b.n	800f42e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f38e:	4b2b      	ldr	r3, [pc, #172]	@ (800f43c <HAL_RCC_ClockConfig+0x1bc>)
 800f390:	689b      	ldr	r3, [r3, #8]
 800f392:	f003 020c 	and.w	r2, r3, #12
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	009b      	lsls	r3, r3, #2
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d1eb      	bne.n	800f378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f3a0:	4b25      	ldr	r3, [pc, #148]	@ (800f438 <HAL_RCC_ClockConfig+0x1b8>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f003 030f 	and.w	r3, r3, #15
 800f3a8:	683a      	ldr	r2, [r7, #0]
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d20c      	bcs.n	800f3c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f3ae:	4b22      	ldr	r3, [pc, #136]	@ (800f438 <HAL_RCC_ClockConfig+0x1b8>)
 800f3b0:	683a      	ldr	r2, [r7, #0]
 800f3b2:	b2d2      	uxtb	r2, r2
 800f3b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f3b6:	4b20      	ldr	r3, [pc, #128]	@ (800f438 <HAL_RCC_ClockConfig+0x1b8>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f003 030f 	and.w	r3, r3, #15
 800f3be:	683a      	ldr	r2, [r7, #0]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d001      	beq.n	800f3c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	e032      	b.n	800f42e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	f003 0304 	and.w	r3, r3, #4
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d008      	beq.n	800f3e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f3d4:	4b19      	ldr	r3, [pc, #100]	@ (800f43c <HAL_RCC_ClockConfig+0x1bc>)
 800f3d6:	689b      	ldr	r3, [r3, #8]
 800f3d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	68db      	ldr	r3, [r3, #12]
 800f3e0:	4916      	ldr	r1, [pc, #88]	@ (800f43c <HAL_RCC_ClockConfig+0x1bc>)
 800f3e2:	4313      	orrs	r3, r2
 800f3e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f003 0308 	and.w	r3, r3, #8
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d009      	beq.n	800f406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f3f2:	4b12      	ldr	r3, [pc, #72]	@ (800f43c <HAL_RCC_ClockConfig+0x1bc>)
 800f3f4:	689b      	ldr	r3, [r3, #8]
 800f3f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	691b      	ldr	r3, [r3, #16]
 800f3fe:	00db      	lsls	r3, r3, #3
 800f400:	490e      	ldr	r1, [pc, #56]	@ (800f43c <HAL_RCC_ClockConfig+0x1bc>)
 800f402:	4313      	orrs	r3, r2
 800f404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800f406:	f000 f887 	bl	800f518 <HAL_RCC_GetSysClockFreq>
 800f40a:	4602      	mov	r2, r0
 800f40c:	4b0b      	ldr	r3, [pc, #44]	@ (800f43c <HAL_RCC_ClockConfig+0x1bc>)
 800f40e:	689b      	ldr	r3, [r3, #8]
 800f410:	091b      	lsrs	r3, r3, #4
 800f412:	f003 030f 	and.w	r3, r3, #15
 800f416:	490a      	ldr	r1, [pc, #40]	@ (800f440 <HAL_RCC_ClockConfig+0x1c0>)
 800f418:	5ccb      	ldrb	r3, [r1, r3]
 800f41a:	fa22 f303 	lsr.w	r3, r2, r3
 800f41e:	4a09      	ldr	r2, [pc, #36]	@ (800f444 <HAL_RCC_ClockConfig+0x1c4>)
 800f420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800f422:	4b09      	ldr	r3, [pc, #36]	@ (800f448 <HAL_RCC_ClockConfig+0x1c8>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	4618      	mov	r0, r3
 800f428:	f7fe fe6e 	bl	800e108 <HAL_InitTick>

  return HAL_OK;
 800f42c:	2300      	movs	r3, #0
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3710      	adds	r7, #16
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}
 800f436:	bf00      	nop
 800f438:	40023c00 	.word	0x40023c00
 800f43c:	40023800 	.word	0x40023800
 800f440:	0801a77c 	.word	0x0801a77c
 800f444:	20000034 	.word	0x20000034
 800f448:	20000060 	.word	0x20000060

0800f44c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f44c:	b480      	push	{r7}
 800f44e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f450:	4b03      	ldr	r3, [pc, #12]	@ (800f460 <HAL_RCC_GetHCLKFreq+0x14>)
 800f452:	681b      	ldr	r3, [r3, #0]
}
 800f454:	4618      	mov	r0, r3
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr
 800f45e:	bf00      	nop
 800f460:	20000034 	.word	0x20000034

0800f464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f468:	f7ff fff0 	bl	800f44c <HAL_RCC_GetHCLKFreq>
 800f46c:	4602      	mov	r2, r0
 800f46e:	4b05      	ldr	r3, [pc, #20]	@ (800f484 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f470:	689b      	ldr	r3, [r3, #8]
 800f472:	0a9b      	lsrs	r3, r3, #10
 800f474:	f003 0307 	and.w	r3, r3, #7
 800f478:	4903      	ldr	r1, [pc, #12]	@ (800f488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f47a:	5ccb      	ldrb	r3, [r1, r3]
 800f47c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f480:	4618      	mov	r0, r3
 800f482:	bd80      	pop	{r7, pc}
 800f484:	40023800 	.word	0x40023800
 800f488:	0801a78c 	.word	0x0801a78c

0800f48c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f490:	f7ff ffdc 	bl	800f44c <HAL_RCC_GetHCLKFreq>
 800f494:	4602      	mov	r2, r0
 800f496:	4b05      	ldr	r3, [pc, #20]	@ (800f4ac <HAL_RCC_GetPCLK2Freq+0x20>)
 800f498:	689b      	ldr	r3, [r3, #8]
 800f49a:	0b5b      	lsrs	r3, r3, #13
 800f49c:	f003 0307 	and.w	r3, r3, #7
 800f4a0:	4903      	ldr	r1, [pc, #12]	@ (800f4b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f4a2:	5ccb      	ldrb	r3, [r1, r3]
 800f4a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	40023800 	.word	0x40023800
 800f4b0:	0801a78c 	.word	0x0801a78c

0800f4b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b083      	sub	sp, #12
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	220f      	movs	r2, #15
 800f4c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f4c4:	4b12      	ldr	r3, [pc, #72]	@ (800f510 <HAL_RCC_GetClockConfig+0x5c>)
 800f4c6:	689b      	ldr	r3, [r3, #8]
 800f4c8:	f003 0203 	and.w	r2, r3, #3
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800f4d0:	4b0f      	ldr	r3, [pc, #60]	@ (800f510 <HAL_RCC_GetClockConfig+0x5c>)
 800f4d2:	689b      	ldr	r3, [r3, #8]
 800f4d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800f4dc:	4b0c      	ldr	r3, [pc, #48]	@ (800f510 <HAL_RCC_GetClockConfig+0x5c>)
 800f4de:	689b      	ldr	r3, [r3, #8]
 800f4e0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800f4e8:	4b09      	ldr	r3, [pc, #36]	@ (800f510 <HAL_RCC_GetClockConfig+0x5c>)
 800f4ea:	689b      	ldr	r3, [r3, #8]
 800f4ec:	08db      	lsrs	r3, r3, #3
 800f4ee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f4f6:	4b07      	ldr	r3, [pc, #28]	@ (800f514 <HAL_RCC_GetClockConfig+0x60>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	f003 020f 	and.w	r2, r3, #15
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	601a      	str	r2, [r3, #0]
}
 800f502:	bf00      	nop
 800f504:	370c      	adds	r7, #12
 800f506:	46bd      	mov	sp, r7
 800f508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50c:	4770      	bx	lr
 800f50e:	bf00      	nop
 800f510:	40023800 	.word	0x40023800
 800f514:	40023c00 	.word	0x40023c00

0800f518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f51c:	b0a6      	sub	sp, #152	@ 0x98
 800f51e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800f520:	2300      	movs	r3, #0
 800f522:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800f526:	2300      	movs	r3, #0
 800f528:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800f52c:	2300      	movs	r3, #0
 800f52e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800f532:	2300      	movs	r3, #0
 800f534:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800f538:	2300      	movs	r3, #0
 800f53a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f53e:	4bc8      	ldr	r3, [pc, #800]	@ (800f860 <HAL_RCC_GetSysClockFreq+0x348>)
 800f540:	689b      	ldr	r3, [r3, #8]
 800f542:	f003 030c 	and.w	r3, r3, #12
 800f546:	2b0c      	cmp	r3, #12
 800f548:	f200 817e 	bhi.w	800f848 <HAL_RCC_GetSysClockFreq+0x330>
 800f54c:	a201      	add	r2, pc, #4	@ (adr r2, 800f554 <HAL_RCC_GetSysClockFreq+0x3c>)
 800f54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f552:	bf00      	nop
 800f554:	0800f589 	.word	0x0800f589
 800f558:	0800f849 	.word	0x0800f849
 800f55c:	0800f849 	.word	0x0800f849
 800f560:	0800f849 	.word	0x0800f849
 800f564:	0800f591 	.word	0x0800f591
 800f568:	0800f849 	.word	0x0800f849
 800f56c:	0800f849 	.word	0x0800f849
 800f570:	0800f849 	.word	0x0800f849
 800f574:	0800f599 	.word	0x0800f599
 800f578:	0800f849 	.word	0x0800f849
 800f57c:	0800f849 	.word	0x0800f849
 800f580:	0800f849 	.word	0x0800f849
 800f584:	0800f703 	.word	0x0800f703
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f588:	4bb6      	ldr	r3, [pc, #728]	@ (800f864 <HAL_RCC_GetSysClockFreq+0x34c>)
 800f58a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800f58e:	e15f      	b.n	800f850 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f590:	4bb5      	ldr	r3, [pc, #724]	@ (800f868 <HAL_RCC_GetSysClockFreq+0x350>)
 800f592:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800f596:	e15b      	b.n	800f850 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f598:	4bb1      	ldr	r3, [pc, #708]	@ (800f860 <HAL_RCC_GetSysClockFreq+0x348>)
 800f59a:	685b      	ldr	r3, [r3, #4]
 800f59c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f5a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f5a4:	4bae      	ldr	r3, [pc, #696]	@ (800f860 <HAL_RCC_GetSysClockFreq+0x348>)
 800f5a6:	685b      	ldr	r3, [r3, #4]
 800f5a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d031      	beq.n	800f614 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f5b0:	4bab      	ldr	r3, [pc, #684]	@ (800f860 <HAL_RCC_GetSysClockFreq+0x348>)
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	099b      	lsrs	r3, r3, #6
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f5ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f5bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f5be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5c2:	663b      	str	r3, [r7, #96]	@ 0x60
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	667b      	str	r3, [r7, #100]	@ 0x64
 800f5c8:	4ba7      	ldr	r3, [pc, #668]	@ (800f868 <HAL_RCC_GetSysClockFreq+0x350>)
 800f5ca:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800f5ce:	462a      	mov	r2, r5
 800f5d0:	fb03 f202 	mul.w	r2, r3, r2
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	4621      	mov	r1, r4
 800f5d8:	fb01 f303 	mul.w	r3, r1, r3
 800f5dc:	4413      	add	r3, r2
 800f5de:	4aa2      	ldr	r2, [pc, #648]	@ (800f868 <HAL_RCC_GetSysClockFreq+0x350>)
 800f5e0:	4621      	mov	r1, r4
 800f5e2:	fba1 1202 	umull	r1, r2, r1, r2
 800f5e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800f5e8:	460a      	mov	r2, r1
 800f5ea:	67ba      	str	r2, [r7, #120]	@ 0x78
 800f5ec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f5ee:	4413      	add	r3, r2
 800f5f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f5f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f5fa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800f5fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800f600:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800f604:	f7f9 fb20 	bl	8008c48 <__aeabi_uldivmod>
 800f608:	4602      	mov	r2, r0
 800f60a:	460b      	mov	r3, r1
 800f60c:	4613      	mov	r3, r2
 800f60e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f612:	e064      	b.n	800f6de <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f614:	4b92      	ldr	r3, [pc, #584]	@ (800f860 <HAL_RCC_GetSysClockFreq+0x348>)
 800f616:	685b      	ldr	r3, [r3, #4]
 800f618:	099b      	lsrs	r3, r3, #6
 800f61a:	2200      	movs	r2, #0
 800f61c:	653b      	str	r3, [r7, #80]	@ 0x50
 800f61e:	657a      	str	r2, [r7, #84]	@ 0x54
 800f620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f626:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f628:	2300      	movs	r3, #0
 800f62a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f62c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800f630:	4622      	mov	r2, r4
 800f632:	462b      	mov	r3, r5
 800f634:	f04f 0000 	mov.w	r0, #0
 800f638:	f04f 0100 	mov.w	r1, #0
 800f63c:	0159      	lsls	r1, r3, #5
 800f63e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f642:	0150      	lsls	r0, r2, #5
 800f644:	4602      	mov	r2, r0
 800f646:	460b      	mov	r3, r1
 800f648:	4621      	mov	r1, r4
 800f64a:	1a51      	subs	r1, r2, r1
 800f64c:	6139      	str	r1, [r7, #16]
 800f64e:	4629      	mov	r1, r5
 800f650:	eb63 0301 	sbc.w	r3, r3, r1
 800f654:	617b      	str	r3, [r7, #20]
 800f656:	f04f 0200 	mov.w	r2, #0
 800f65a:	f04f 0300 	mov.w	r3, #0
 800f65e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f662:	4659      	mov	r1, fp
 800f664:	018b      	lsls	r3, r1, #6
 800f666:	4651      	mov	r1, sl
 800f668:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800f66c:	4651      	mov	r1, sl
 800f66e:	018a      	lsls	r2, r1, #6
 800f670:	4651      	mov	r1, sl
 800f672:	ebb2 0801 	subs.w	r8, r2, r1
 800f676:	4659      	mov	r1, fp
 800f678:	eb63 0901 	sbc.w	r9, r3, r1
 800f67c:	f04f 0200 	mov.w	r2, #0
 800f680:	f04f 0300 	mov.w	r3, #0
 800f684:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f688:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f68c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f690:	4690      	mov	r8, r2
 800f692:	4699      	mov	r9, r3
 800f694:	4623      	mov	r3, r4
 800f696:	eb18 0303 	adds.w	r3, r8, r3
 800f69a:	60bb      	str	r3, [r7, #8]
 800f69c:	462b      	mov	r3, r5
 800f69e:	eb49 0303 	adc.w	r3, r9, r3
 800f6a2:	60fb      	str	r3, [r7, #12]
 800f6a4:	f04f 0200 	mov.w	r2, #0
 800f6a8:	f04f 0300 	mov.w	r3, #0
 800f6ac:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800f6b0:	4629      	mov	r1, r5
 800f6b2:	028b      	lsls	r3, r1, #10
 800f6b4:	4621      	mov	r1, r4
 800f6b6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f6ba:	4621      	mov	r1, r4
 800f6bc:	028a      	lsls	r2, r1, #10
 800f6be:	4610      	mov	r0, r2
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800f6ca:	647a      	str	r2, [r7, #68]	@ 0x44
 800f6cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800f6d0:	f7f9 faba 	bl	8008c48 <__aeabi_uldivmod>
 800f6d4:	4602      	mov	r2, r0
 800f6d6:	460b      	mov	r3, r1
 800f6d8:	4613      	mov	r3, r2
 800f6da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800f6de:	4b60      	ldr	r3, [pc, #384]	@ (800f860 <HAL_RCC_GetSysClockFreq+0x348>)
 800f6e0:	685b      	ldr	r3, [r3, #4]
 800f6e2:	0c1b      	lsrs	r3, r3, #16
 800f6e4:	f003 0303 	and.w	r3, r3, #3
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	005b      	lsls	r3, r3, #1
 800f6ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800f6f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f6f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f6f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800f700:	e0a6      	b.n	800f850 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f702:	4b57      	ldr	r3, [pc, #348]	@ (800f860 <HAL_RCC_GetSysClockFreq+0x348>)
 800f704:	685b      	ldr	r3, [r3, #4]
 800f706:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f70a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f70e:	4b54      	ldr	r3, [pc, #336]	@ (800f860 <HAL_RCC_GetSysClockFreq+0x348>)
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f716:	2b00      	cmp	r3, #0
 800f718:	d02a      	beq.n	800f770 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f71a:	4b51      	ldr	r3, [pc, #324]	@ (800f860 <HAL_RCC_GetSysClockFreq+0x348>)
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	099b      	lsrs	r3, r3, #6
 800f720:	2200      	movs	r2, #0
 800f722:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f724:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800f726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f728:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800f72c:	2100      	movs	r1, #0
 800f72e:	4b4e      	ldr	r3, [pc, #312]	@ (800f868 <HAL_RCC_GetSysClockFreq+0x350>)
 800f730:	fb03 f201 	mul.w	r2, r3, r1
 800f734:	2300      	movs	r3, #0
 800f736:	fb00 f303 	mul.w	r3, r0, r3
 800f73a:	4413      	add	r3, r2
 800f73c:	4a4a      	ldr	r2, [pc, #296]	@ (800f868 <HAL_RCC_GetSysClockFreq+0x350>)
 800f73e:	fba0 1202 	umull	r1, r2, r0, r2
 800f742:	677a      	str	r2, [r7, #116]	@ 0x74
 800f744:	460a      	mov	r2, r1
 800f746:	673a      	str	r2, [r7, #112]	@ 0x70
 800f748:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800f74a:	4413      	add	r3, r2
 800f74c:	677b      	str	r3, [r7, #116]	@ 0x74
 800f74e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f752:	2200      	movs	r2, #0
 800f754:	633b      	str	r3, [r7, #48]	@ 0x30
 800f756:	637a      	str	r2, [r7, #52]	@ 0x34
 800f758:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800f75c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800f760:	f7f9 fa72 	bl	8008c48 <__aeabi_uldivmod>
 800f764:	4602      	mov	r2, r0
 800f766:	460b      	mov	r3, r1
 800f768:	4613      	mov	r3, r2
 800f76a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f76e:	e05b      	b.n	800f828 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f770:	4b3b      	ldr	r3, [pc, #236]	@ (800f860 <HAL_RCC_GetSysClockFreq+0x348>)
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	099b      	lsrs	r3, r3, #6
 800f776:	2200      	movs	r2, #0
 800f778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f77a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f77e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f782:	623b      	str	r3, [r7, #32]
 800f784:	2300      	movs	r3, #0
 800f786:	627b      	str	r3, [r7, #36]	@ 0x24
 800f788:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800f78c:	4642      	mov	r2, r8
 800f78e:	464b      	mov	r3, r9
 800f790:	f04f 0000 	mov.w	r0, #0
 800f794:	f04f 0100 	mov.w	r1, #0
 800f798:	0159      	lsls	r1, r3, #5
 800f79a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f79e:	0150      	lsls	r0, r2, #5
 800f7a0:	4602      	mov	r2, r0
 800f7a2:	460b      	mov	r3, r1
 800f7a4:	4641      	mov	r1, r8
 800f7a6:	ebb2 0a01 	subs.w	sl, r2, r1
 800f7aa:	4649      	mov	r1, r9
 800f7ac:	eb63 0b01 	sbc.w	fp, r3, r1
 800f7b0:	f04f 0200 	mov.w	r2, #0
 800f7b4:	f04f 0300 	mov.w	r3, #0
 800f7b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800f7bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800f7c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800f7c4:	ebb2 040a 	subs.w	r4, r2, sl
 800f7c8:	eb63 050b 	sbc.w	r5, r3, fp
 800f7cc:	f04f 0200 	mov.w	r2, #0
 800f7d0:	f04f 0300 	mov.w	r3, #0
 800f7d4:	00eb      	lsls	r3, r5, #3
 800f7d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f7da:	00e2      	lsls	r2, r4, #3
 800f7dc:	4614      	mov	r4, r2
 800f7de:	461d      	mov	r5, r3
 800f7e0:	4643      	mov	r3, r8
 800f7e2:	18e3      	adds	r3, r4, r3
 800f7e4:	603b      	str	r3, [r7, #0]
 800f7e6:	464b      	mov	r3, r9
 800f7e8:	eb45 0303 	adc.w	r3, r5, r3
 800f7ec:	607b      	str	r3, [r7, #4]
 800f7ee:	f04f 0200 	mov.w	r2, #0
 800f7f2:	f04f 0300 	mov.w	r3, #0
 800f7f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f7fa:	4629      	mov	r1, r5
 800f7fc:	028b      	lsls	r3, r1, #10
 800f7fe:	4621      	mov	r1, r4
 800f800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f804:	4621      	mov	r1, r4
 800f806:	028a      	lsls	r2, r1, #10
 800f808:	4610      	mov	r0, r2
 800f80a:	4619      	mov	r1, r3
 800f80c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f810:	2200      	movs	r2, #0
 800f812:	61bb      	str	r3, [r7, #24]
 800f814:	61fa      	str	r2, [r7, #28]
 800f816:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f81a:	f7f9 fa15 	bl	8008c48 <__aeabi_uldivmod>
 800f81e:	4602      	mov	r2, r0
 800f820:	460b      	mov	r3, r1
 800f822:	4613      	mov	r3, r2
 800f824:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800f828:	4b0d      	ldr	r3, [pc, #52]	@ (800f860 <HAL_RCC_GetSysClockFreq+0x348>)
 800f82a:	685b      	ldr	r3, [r3, #4]
 800f82c:	0f1b      	lsrs	r3, r3, #28
 800f82e:	f003 0307 	and.w	r3, r3, #7
 800f832:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800f836:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f83a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f83e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f842:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800f846:	e003      	b.n	800f850 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f848:	4b06      	ldr	r3, [pc, #24]	@ (800f864 <HAL_RCC_GetSysClockFreq+0x34c>)
 800f84a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800f84e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f850:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800f854:	4618      	mov	r0, r3
 800f856:	3798      	adds	r7, #152	@ 0x98
 800f858:	46bd      	mov	sp, r7
 800f85a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f85e:	bf00      	nop
 800f860:	40023800 	.word	0x40023800
 800f864:	00f42400 	.word	0x00f42400
 800f868:	017d7840 	.word	0x017d7840

0800f86c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b086      	sub	sp, #24
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d101      	bne.n	800f87e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f87a:	2301      	movs	r3, #1
 800f87c:	e28d      	b.n	800fd9a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f003 0301 	and.w	r3, r3, #1
 800f886:	2b00      	cmp	r3, #0
 800f888:	f000 8083 	beq.w	800f992 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800f88c:	4b94      	ldr	r3, [pc, #592]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f88e:	689b      	ldr	r3, [r3, #8]
 800f890:	f003 030c 	and.w	r3, r3, #12
 800f894:	2b04      	cmp	r3, #4
 800f896:	d019      	beq.n	800f8cc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800f898:	4b91      	ldr	r3, [pc, #580]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f89a:	689b      	ldr	r3, [r3, #8]
 800f89c:	f003 030c 	and.w	r3, r3, #12
        || \
 800f8a0:	2b08      	cmp	r3, #8
 800f8a2:	d106      	bne.n	800f8b2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800f8a4:	4b8e      	ldr	r3, [pc, #568]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f8a6:	685b      	ldr	r3, [r3, #4]
 800f8a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f8ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f8b0:	d00c      	beq.n	800f8cc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f8b2:	4b8b      	ldr	r3, [pc, #556]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f8b4:	689b      	ldr	r3, [r3, #8]
 800f8b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800f8ba:	2b0c      	cmp	r3, #12
 800f8bc:	d112      	bne.n	800f8e4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f8be:	4b88      	ldr	r3, [pc, #544]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f8c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f8ca:	d10b      	bne.n	800f8e4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f8cc:	4b84      	ldr	r3, [pc, #528]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d05b      	beq.n	800f990 <HAL_RCC_OscConfig+0x124>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d157      	bne.n	800f990 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	e25a      	b.n	800fd9a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8ec:	d106      	bne.n	800f8fc <HAL_RCC_OscConfig+0x90>
 800f8ee:	4b7c      	ldr	r3, [pc, #496]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	4a7b      	ldr	r2, [pc, #492]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f8f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f8f8:	6013      	str	r3, [r2, #0]
 800f8fa:	e01d      	b.n	800f938 <HAL_RCC_OscConfig+0xcc>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f904:	d10c      	bne.n	800f920 <HAL_RCC_OscConfig+0xb4>
 800f906:	4b76      	ldr	r3, [pc, #472]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	4a75      	ldr	r2, [pc, #468]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f90c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f910:	6013      	str	r3, [r2, #0]
 800f912:	4b73      	ldr	r3, [pc, #460]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	4a72      	ldr	r2, [pc, #456]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f91c:	6013      	str	r3, [r2, #0]
 800f91e:	e00b      	b.n	800f938 <HAL_RCC_OscConfig+0xcc>
 800f920:	4b6f      	ldr	r3, [pc, #444]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	4a6e      	ldr	r2, [pc, #440]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f92a:	6013      	str	r3, [r2, #0]
 800f92c:	4b6c      	ldr	r3, [pc, #432]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a6b      	ldr	r2, [pc, #428]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f932:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d013      	beq.n	800f968 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f940:	f7ff f8b2 	bl	800eaa8 <HAL_GetTick>
 800f944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f946:	e008      	b.n	800f95a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f948:	f7ff f8ae 	bl	800eaa8 <HAL_GetTick>
 800f94c:	4602      	mov	r2, r0
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	1ad3      	subs	r3, r2, r3
 800f952:	2b64      	cmp	r3, #100	@ 0x64
 800f954:	d901      	bls.n	800f95a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800f956:	2303      	movs	r3, #3
 800f958:	e21f      	b.n	800fd9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f95a:	4b61      	ldr	r3, [pc, #388]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f962:	2b00      	cmp	r3, #0
 800f964:	d0f0      	beq.n	800f948 <HAL_RCC_OscConfig+0xdc>
 800f966:	e014      	b.n	800f992 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f968:	f7ff f89e 	bl	800eaa8 <HAL_GetTick>
 800f96c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f96e:	e008      	b.n	800f982 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f970:	f7ff f89a 	bl	800eaa8 <HAL_GetTick>
 800f974:	4602      	mov	r2, r0
 800f976:	693b      	ldr	r3, [r7, #16]
 800f978:	1ad3      	subs	r3, r2, r3
 800f97a:	2b64      	cmp	r3, #100	@ 0x64
 800f97c:	d901      	bls.n	800f982 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800f97e:	2303      	movs	r3, #3
 800f980:	e20b      	b.n	800fd9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f982:	4b57      	ldr	r3, [pc, #348]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d1f0      	bne.n	800f970 <HAL_RCC_OscConfig+0x104>
 800f98e:	e000      	b.n	800f992 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	f003 0302 	and.w	r3, r3, #2
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d06f      	beq.n	800fa7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800f99e:	4b50      	ldr	r3, [pc, #320]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f9a0:	689b      	ldr	r3, [r3, #8]
 800f9a2:	f003 030c 	and.w	r3, r3, #12
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d017      	beq.n	800f9da <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800f9aa:	4b4d      	ldr	r3, [pc, #308]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f9ac:	689b      	ldr	r3, [r3, #8]
 800f9ae:	f003 030c 	and.w	r3, r3, #12
        || \
 800f9b2:	2b08      	cmp	r3, #8
 800f9b4:	d105      	bne.n	800f9c2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800f9b6:	4b4a      	ldr	r3, [pc, #296]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f9b8:	685b      	ldr	r3, [r3, #4]
 800f9ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d00b      	beq.n	800f9da <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f9c2:	4b47      	ldr	r3, [pc, #284]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f9c4:	689b      	ldr	r3, [r3, #8]
 800f9c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800f9ca:	2b0c      	cmp	r3, #12
 800f9cc:	d11c      	bne.n	800fa08 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f9ce:	4b44      	ldr	r3, [pc, #272]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f9d0:	685b      	ldr	r3, [r3, #4]
 800f9d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d116      	bne.n	800fa08 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f9da:	4b41      	ldr	r3, [pc, #260]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f003 0302 	and.w	r3, r3, #2
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d005      	beq.n	800f9f2 <HAL_RCC_OscConfig+0x186>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	68db      	ldr	r3, [r3, #12]
 800f9ea:	2b01      	cmp	r3, #1
 800f9ec:	d001      	beq.n	800f9f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	e1d3      	b.n	800fd9a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f9f2:	4b3b      	ldr	r3, [pc, #236]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	691b      	ldr	r3, [r3, #16]
 800f9fe:	00db      	lsls	r3, r3, #3
 800fa00:	4937      	ldr	r1, [pc, #220]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800fa02:	4313      	orrs	r3, r2
 800fa04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fa06:	e03a      	b.n	800fa7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d020      	beq.n	800fa52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fa10:	4b34      	ldr	r3, [pc, #208]	@ (800fae4 <HAL_RCC_OscConfig+0x278>)
 800fa12:	2201      	movs	r2, #1
 800fa14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fa16:	f7ff f847 	bl	800eaa8 <HAL_GetTick>
 800fa1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fa1c:	e008      	b.n	800fa30 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fa1e:	f7ff f843 	bl	800eaa8 <HAL_GetTick>
 800fa22:	4602      	mov	r2, r0
 800fa24:	693b      	ldr	r3, [r7, #16]
 800fa26:	1ad3      	subs	r3, r2, r3
 800fa28:	2b02      	cmp	r3, #2
 800fa2a:	d901      	bls.n	800fa30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800fa2c:	2303      	movs	r3, #3
 800fa2e:	e1b4      	b.n	800fd9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fa30:	4b2b      	ldr	r3, [pc, #172]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	f003 0302 	and.w	r3, r3, #2
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d0f0      	beq.n	800fa1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fa3c:	4b28      	ldr	r3, [pc, #160]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	691b      	ldr	r3, [r3, #16]
 800fa48:	00db      	lsls	r3, r3, #3
 800fa4a:	4925      	ldr	r1, [pc, #148]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800fa4c:	4313      	orrs	r3, r2
 800fa4e:	600b      	str	r3, [r1, #0]
 800fa50:	e015      	b.n	800fa7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fa52:	4b24      	ldr	r3, [pc, #144]	@ (800fae4 <HAL_RCC_OscConfig+0x278>)
 800fa54:	2200      	movs	r2, #0
 800fa56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fa58:	f7ff f826 	bl	800eaa8 <HAL_GetTick>
 800fa5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fa5e:	e008      	b.n	800fa72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fa60:	f7ff f822 	bl	800eaa8 <HAL_GetTick>
 800fa64:	4602      	mov	r2, r0
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	1ad3      	subs	r3, r2, r3
 800fa6a:	2b02      	cmp	r3, #2
 800fa6c:	d901      	bls.n	800fa72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800fa6e:	2303      	movs	r3, #3
 800fa70:	e193      	b.n	800fd9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fa72:	4b1b      	ldr	r3, [pc, #108]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f003 0302 	and.w	r3, r3, #2
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d1f0      	bne.n	800fa60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	f003 0308 	and.w	r3, r3, #8
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d036      	beq.n	800faf8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	695b      	ldr	r3, [r3, #20]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d016      	beq.n	800fac0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fa92:	4b15      	ldr	r3, [pc, #84]	@ (800fae8 <HAL_RCC_OscConfig+0x27c>)
 800fa94:	2201      	movs	r2, #1
 800fa96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa98:	f7ff f806 	bl	800eaa8 <HAL_GetTick>
 800fa9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fa9e:	e008      	b.n	800fab2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800faa0:	f7ff f802 	bl	800eaa8 <HAL_GetTick>
 800faa4:	4602      	mov	r2, r0
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	1ad3      	subs	r3, r2, r3
 800faaa:	2b02      	cmp	r3, #2
 800faac:	d901      	bls.n	800fab2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800faae:	2303      	movs	r3, #3
 800fab0:	e173      	b.n	800fd9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fab2:	4b0b      	ldr	r3, [pc, #44]	@ (800fae0 <HAL_RCC_OscConfig+0x274>)
 800fab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fab6:	f003 0302 	and.w	r3, r3, #2
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d0f0      	beq.n	800faa0 <HAL_RCC_OscConfig+0x234>
 800fabe:	e01b      	b.n	800faf8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fac0:	4b09      	ldr	r3, [pc, #36]	@ (800fae8 <HAL_RCC_OscConfig+0x27c>)
 800fac2:	2200      	movs	r2, #0
 800fac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fac6:	f7fe ffef 	bl	800eaa8 <HAL_GetTick>
 800faca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800facc:	e00e      	b.n	800faec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800face:	f7fe ffeb 	bl	800eaa8 <HAL_GetTick>
 800fad2:	4602      	mov	r2, r0
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	1ad3      	subs	r3, r2, r3
 800fad8:	2b02      	cmp	r3, #2
 800fada:	d907      	bls.n	800faec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800fadc:	2303      	movs	r3, #3
 800fade:	e15c      	b.n	800fd9a <HAL_RCC_OscConfig+0x52e>
 800fae0:	40023800 	.word	0x40023800
 800fae4:	42470000 	.word	0x42470000
 800fae8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800faec:	4b8a      	ldr	r3, [pc, #552]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800faee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800faf0:	f003 0302 	and.w	r3, r3, #2
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d1ea      	bne.n	800face <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	f003 0304 	and.w	r3, r3, #4
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	f000 8097 	beq.w	800fc34 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fb06:	2300      	movs	r3, #0
 800fb08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fb0a:	4b83      	ldr	r3, [pc, #524]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fb0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d10f      	bne.n	800fb36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fb16:	2300      	movs	r3, #0
 800fb18:	60bb      	str	r3, [r7, #8]
 800fb1a:	4b7f      	ldr	r3, [pc, #508]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fb1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb1e:	4a7e      	ldr	r2, [pc, #504]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fb20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fb24:	6413      	str	r3, [r2, #64]	@ 0x40
 800fb26:	4b7c      	ldr	r3, [pc, #496]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fb28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fb2e:	60bb      	str	r3, [r7, #8]
 800fb30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fb32:	2301      	movs	r3, #1
 800fb34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fb36:	4b79      	ldr	r3, [pc, #484]	@ (800fd1c <HAL_RCC_OscConfig+0x4b0>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d118      	bne.n	800fb74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fb42:	4b76      	ldr	r3, [pc, #472]	@ (800fd1c <HAL_RCC_OscConfig+0x4b0>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	4a75      	ldr	r2, [pc, #468]	@ (800fd1c <HAL_RCC_OscConfig+0x4b0>)
 800fb48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fb4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fb4e:	f7fe ffab 	bl	800eaa8 <HAL_GetTick>
 800fb52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fb54:	e008      	b.n	800fb68 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fb56:	f7fe ffa7 	bl	800eaa8 <HAL_GetTick>
 800fb5a:	4602      	mov	r2, r0
 800fb5c:	693b      	ldr	r3, [r7, #16]
 800fb5e:	1ad3      	subs	r3, r2, r3
 800fb60:	2b02      	cmp	r3, #2
 800fb62:	d901      	bls.n	800fb68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800fb64:	2303      	movs	r3, #3
 800fb66:	e118      	b.n	800fd9a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fb68:	4b6c      	ldr	r3, [pc, #432]	@ (800fd1c <HAL_RCC_OscConfig+0x4b0>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d0f0      	beq.n	800fb56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	689b      	ldr	r3, [r3, #8]
 800fb78:	2b01      	cmp	r3, #1
 800fb7a:	d106      	bne.n	800fb8a <HAL_RCC_OscConfig+0x31e>
 800fb7c:	4b66      	ldr	r3, [pc, #408]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fb7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb80:	4a65      	ldr	r2, [pc, #404]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fb82:	f043 0301 	orr.w	r3, r3, #1
 800fb86:	6713      	str	r3, [r2, #112]	@ 0x70
 800fb88:	e01c      	b.n	800fbc4 <HAL_RCC_OscConfig+0x358>
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	689b      	ldr	r3, [r3, #8]
 800fb8e:	2b05      	cmp	r3, #5
 800fb90:	d10c      	bne.n	800fbac <HAL_RCC_OscConfig+0x340>
 800fb92:	4b61      	ldr	r3, [pc, #388]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fb94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb96:	4a60      	ldr	r2, [pc, #384]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fb98:	f043 0304 	orr.w	r3, r3, #4
 800fb9c:	6713      	str	r3, [r2, #112]	@ 0x70
 800fb9e:	4b5e      	ldr	r3, [pc, #376]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fba2:	4a5d      	ldr	r2, [pc, #372]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fba4:	f043 0301 	orr.w	r3, r3, #1
 800fba8:	6713      	str	r3, [r2, #112]	@ 0x70
 800fbaa:	e00b      	b.n	800fbc4 <HAL_RCC_OscConfig+0x358>
 800fbac:	4b5a      	ldr	r3, [pc, #360]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fbae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fbb0:	4a59      	ldr	r2, [pc, #356]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fbb2:	f023 0301 	bic.w	r3, r3, #1
 800fbb6:	6713      	str	r3, [r2, #112]	@ 0x70
 800fbb8:	4b57      	ldr	r3, [pc, #348]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fbba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fbbc:	4a56      	ldr	r2, [pc, #344]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fbbe:	f023 0304 	bic.w	r3, r3, #4
 800fbc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	689b      	ldr	r3, [r3, #8]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d015      	beq.n	800fbf8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fbcc:	f7fe ff6c 	bl	800eaa8 <HAL_GetTick>
 800fbd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fbd2:	e00a      	b.n	800fbea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fbd4:	f7fe ff68 	bl	800eaa8 <HAL_GetTick>
 800fbd8:	4602      	mov	r2, r0
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	1ad3      	subs	r3, r2, r3
 800fbde:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d901      	bls.n	800fbea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800fbe6:	2303      	movs	r3, #3
 800fbe8:	e0d7      	b.n	800fd9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fbea:	4b4b      	ldr	r3, [pc, #300]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fbec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fbee:	f003 0302 	and.w	r3, r3, #2
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d0ee      	beq.n	800fbd4 <HAL_RCC_OscConfig+0x368>
 800fbf6:	e014      	b.n	800fc22 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fbf8:	f7fe ff56 	bl	800eaa8 <HAL_GetTick>
 800fbfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fbfe:	e00a      	b.n	800fc16 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fc00:	f7fe ff52 	bl	800eaa8 <HAL_GetTick>
 800fc04:	4602      	mov	r2, r0
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	1ad3      	subs	r3, r2, r3
 800fc0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d901      	bls.n	800fc16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800fc12:	2303      	movs	r3, #3
 800fc14:	e0c1      	b.n	800fd9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fc16:	4b40      	ldr	r3, [pc, #256]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fc18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fc1a:	f003 0302 	and.w	r3, r3, #2
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d1ee      	bne.n	800fc00 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800fc22:	7dfb      	ldrb	r3, [r7, #23]
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d105      	bne.n	800fc34 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fc28:	4b3b      	ldr	r3, [pc, #236]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fc2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc2c:	4a3a      	ldr	r2, [pc, #232]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fc2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fc32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	699b      	ldr	r3, [r3, #24]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	f000 80ad 	beq.w	800fd98 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800fc3e:	4b36      	ldr	r3, [pc, #216]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fc40:	689b      	ldr	r3, [r3, #8]
 800fc42:	f003 030c 	and.w	r3, r3, #12
 800fc46:	2b08      	cmp	r3, #8
 800fc48:	d060      	beq.n	800fd0c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	699b      	ldr	r3, [r3, #24]
 800fc4e:	2b02      	cmp	r3, #2
 800fc50:	d145      	bne.n	800fcde <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fc52:	4b33      	ldr	r3, [pc, #204]	@ (800fd20 <HAL_RCC_OscConfig+0x4b4>)
 800fc54:	2200      	movs	r2, #0
 800fc56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fc58:	f7fe ff26 	bl	800eaa8 <HAL_GetTick>
 800fc5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fc5e:	e008      	b.n	800fc72 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fc60:	f7fe ff22 	bl	800eaa8 <HAL_GetTick>
 800fc64:	4602      	mov	r2, r0
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	1ad3      	subs	r3, r2, r3
 800fc6a:	2b02      	cmp	r3, #2
 800fc6c:	d901      	bls.n	800fc72 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800fc6e:	2303      	movs	r3, #3
 800fc70:	e093      	b.n	800fd9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fc72:	4b29      	ldr	r3, [pc, #164]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d1f0      	bne.n	800fc60 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	69da      	ldr	r2, [r3, #28]
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	6a1b      	ldr	r3, [r3, #32]
 800fc86:	431a      	orrs	r2, r3
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc8c:	019b      	lsls	r3, r3, #6
 800fc8e:	431a      	orrs	r2, r3
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc94:	085b      	lsrs	r3, r3, #1
 800fc96:	3b01      	subs	r3, #1
 800fc98:	041b      	lsls	r3, r3, #16
 800fc9a:	431a      	orrs	r2, r3
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fca0:	061b      	lsls	r3, r3, #24
 800fca2:	431a      	orrs	r2, r3
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fca8:	071b      	lsls	r3, r3, #28
 800fcaa:	491b      	ldr	r1, [pc, #108]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fcac:	4313      	orrs	r3, r2
 800fcae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800fcb0:	4b1b      	ldr	r3, [pc, #108]	@ (800fd20 <HAL_RCC_OscConfig+0x4b4>)
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fcb6:	f7fe fef7 	bl	800eaa8 <HAL_GetTick>
 800fcba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fcbc:	e008      	b.n	800fcd0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fcbe:	f7fe fef3 	bl	800eaa8 <HAL_GetTick>
 800fcc2:	4602      	mov	r2, r0
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	1ad3      	subs	r3, r2, r3
 800fcc8:	2b02      	cmp	r3, #2
 800fcca:	d901      	bls.n	800fcd0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800fccc:	2303      	movs	r3, #3
 800fcce:	e064      	b.n	800fd9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fcd0:	4b11      	ldr	r3, [pc, #68]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d0f0      	beq.n	800fcbe <HAL_RCC_OscConfig+0x452>
 800fcdc:	e05c      	b.n	800fd98 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fcde:	4b10      	ldr	r3, [pc, #64]	@ (800fd20 <HAL_RCC_OscConfig+0x4b4>)
 800fce0:	2200      	movs	r2, #0
 800fce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fce4:	f7fe fee0 	bl	800eaa8 <HAL_GetTick>
 800fce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fcea:	e008      	b.n	800fcfe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fcec:	f7fe fedc 	bl	800eaa8 <HAL_GetTick>
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	1ad3      	subs	r3, r2, r3
 800fcf6:	2b02      	cmp	r3, #2
 800fcf8:	d901      	bls.n	800fcfe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800fcfa:	2303      	movs	r3, #3
 800fcfc:	e04d      	b.n	800fd9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fcfe:	4b06      	ldr	r3, [pc, #24]	@ (800fd18 <HAL_RCC_OscConfig+0x4ac>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d1f0      	bne.n	800fcec <HAL_RCC_OscConfig+0x480>
 800fd0a:	e045      	b.n	800fd98 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	699b      	ldr	r3, [r3, #24]
 800fd10:	2b01      	cmp	r3, #1
 800fd12:	d107      	bne.n	800fd24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800fd14:	2301      	movs	r3, #1
 800fd16:	e040      	b.n	800fd9a <HAL_RCC_OscConfig+0x52e>
 800fd18:	40023800 	.word	0x40023800
 800fd1c:	40007000 	.word	0x40007000
 800fd20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800fd24:	4b1f      	ldr	r3, [pc, #124]	@ (800fda4 <HAL_RCC_OscConfig+0x538>)
 800fd26:	685b      	ldr	r3, [r3, #4]
 800fd28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	699b      	ldr	r3, [r3, #24]
 800fd2e:	2b01      	cmp	r3, #1
 800fd30:	d030      	beq.n	800fd94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fd3c:	429a      	cmp	r2, r3
 800fd3e:	d129      	bne.n	800fd94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d122      	bne.n	800fd94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800fd4e:	68fa      	ldr	r2, [r7, #12]
 800fd50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800fd54:	4013      	ands	r3, r2
 800fd56:	687a      	ldr	r2, [r7, #4]
 800fd58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800fd5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d119      	bne.n	800fd94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd6a:	085b      	lsrs	r3, r3, #1
 800fd6c:	3b01      	subs	r3, #1
 800fd6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d10f      	bne.n	800fd94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d107      	bne.n	800fd94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd8e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d001      	beq.n	800fd98 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800fd94:	2301      	movs	r3, #1
 800fd96:	e000      	b.n	800fd9a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800fd98:	2300      	movs	r3, #0
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3718      	adds	r7, #24
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}
 800fda2:	bf00      	nop
 800fda4:	40023800 	.word	0x40023800

0800fda8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b082      	sub	sp, #8
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d101      	bne.n	800fdba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	e07b      	b.n	800feb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d108      	bne.n	800fdd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	685b      	ldr	r3, [r3, #4]
 800fdc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fdca:	d009      	beq.n	800fde0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	61da      	str	r2, [r3, #28]
 800fdd2:	e005      	b.n	800fde0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2200      	movs	r2, #0
 800fdde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2200      	movs	r2, #0
 800fde4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fdec:	b2db      	uxtb	r3, r3
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d106      	bne.n	800fe00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f7fd ffe4 	bl	800ddc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2202      	movs	r2, #2
 800fe04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	681a      	ldr	r2, [r3, #0]
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fe16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	685b      	ldr	r3, [r3, #4]
 800fe1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	689b      	ldr	r3, [r3, #8]
 800fe24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800fe28:	431a      	orrs	r2, r3
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fe32:	431a      	orrs	r2, r3
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	691b      	ldr	r3, [r3, #16]
 800fe38:	f003 0302 	and.w	r3, r3, #2
 800fe3c:	431a      	orrs	r2, r3
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	695b      	ldr	r3, [r3, #20]
 800fe42:	f003 0301 	and.w	r3, r3, #1
 800fe46:	431a      	orrs	r2, r3
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	699b      	ldr	r3, [r3, #24]
 800fe4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fe50:	431a      	orrs	r2, r3
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	69db      	ldr	r3, [r3, #28]
 800fe56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fe5a:	431a      	orrs	r2, r3
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6a1b      	ldr	r3, [r3, #32]
 800fe60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe64:	ea42 0103 	orr.w	r1, r2, r3
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	430a      	orrs	r2, r1
 800fe76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	699b      	ldr	r3, [r3, #24]
 800fe7c:	0c1b      	lsrs	r3, r3, #16
 800fe7e:	f003 0104 	and.w	r1, r3, #4
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe86:	f003 0210 	and.w	r2, r3, #16
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	430a      	orrs	r2, r1
 800fe90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	69da      	ldr	r2, [r3, #28]
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800fea0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2200      	movs	r2, #0
 800fea6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2201      	movs	r2, #1
 800feac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800feb0:	2300      	movs	r3, #0
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3708      	adds	r7, #8
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}

0800feba <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800feba:	b580      	push	{r7, lr}
 800febc:	b088      	sub	sp, #32
 800febe:	af00      	add	r7, sp, #0
 800fec0:	60f8      	str	r0, [r7, #12]
 800fec2:	60b9      	str	r1, [r7, #8]
 800fec4:	603b      	str	r3, [r7, #0]
 800fec6:	4613      	mov	r3, r2
 800fec8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800feca:	f7fe fded 	bl	800eaa8 <HAL_GetTick>
 800fece:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800fed0:	88fb      	ldrh	r3, [r7, #6]
 800fed2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800feda:	b2db      	uxtb	r3, r3
 800fedc:	2b01      	cmp	r3, #1
 800fede:	d001      	beq.n	800fee4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800fee0:	2302      	movs	r3, #2
 800fee2:	e12a      	b.n	801013a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d002      	beq.n	800fef0 <HAL_SPI_Transmit+0x36>
 800feea:	88fb      	ldrh	r3, [r7, #6]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d101      	bne.n	800fef4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800fef0:	2301      	movs	r3, #1
 800fef2:	e122      	b.n	801013a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fefa:	2b01      	cmp	r3, #1
 800fefc:	d101      	bne.n	800ff02 <HAL_SPI_Transmit+0x48>
 800fefe:	2302      	movs	r3, #2
 800ff00:	e11b      	b.n	801013a <HAL_SPI_Transmit+0x280>
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2201      	movs	r2, #1
 800ff06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2203      	movs	r2, #3
 800ff0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	2200      	movs	r2, #0
 800ff16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	68ba      	ldr	r2, [r7, #8]
 800ff1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	88fa      	ldrh	r2, [r7, #6]
 800ff22:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	88fa      	ldrh	r2, [r7, #6]
 800ff28:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2200      	movs	r2, #0
 800ff34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	2200      	movs	r2, #0
 800ff46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	689b      	ldr	r3, [r3, #8]
 800ff4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ff50:	d10f      	bne.n	800ff72 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	681a      	ldr	r2, [r3, #0]
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ff60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	681a      	ldr	r2, [r3, #0]
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ff70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff7c:	2b40      	cmp	r3, #64	@ 0x40
 800ff7e:	d007      	beq.n	800ff90 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	681a      	ldr	r2, [r3, #0]
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ff8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ff98:	d152      	bne.n	8010040 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d002      	beq.n	800ffa8 <HAL_SPI_Transmit+0xee>
 800ffa2:	8b7b      	ldrh	r3, [r7, #26]
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	d145      	bne.n	8010034 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffac:	881a      	ldrh	r2, [r3, #0]
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffb8:	1c9a      	adds	r2, r3, #2
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ffc2:	b29b      	uxth	r3, r3
 800ffc4:	3b01      	subs	r3, #1
 800ffc6:	b29a      	uxth	r2, r3
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ffcc:	e032      	b.n	8010034 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	689b      	ldr	r3, [r3, #8]
 800ffd4:	f003 0302 	and.w	r3, r3, #2
 800ffd8:	2b02      	cmp	r3, #2
 800ffda:	d112      	bne.n	8010002 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffe0:	881a      	ldrh	r2, [r3, #0]
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffec:	1c9a      	adds	r2, r3, #2
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fff6:	b29b      	uxth	r3, r3
 800fff8:	3b01      	subs	r3, #1
 800fffa:	b29a      	uxth	r2, r3
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8010000:	e018      	b.n	8010034 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010002:	f7fe fd51 	bl	800eaa8 <HAL_GetTick>
 8010006:	4602      	mov	r2, r0
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	1ad3      	subs	r3, r2, r3
 801000c:	683a      	ldr	r2, [r7, #0]
 801000e:	429a      	cmp	r2, r3
 8010010:	d803      	bhi.n	801001a <HAL_SPI_Transmit+0x160>
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010018:	d102      	bne.n	8010020 <HAL_SPI_Transmit+0x166>
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d109      	bne.n	8010034 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	2201      	movs	r2, #1
 8010024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	2200      	movs	r2, #0
 801002c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8010030:	2303      	movs	r3, #3
 8010032:	e082      	b.n	801013a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010038:	b29b      	uxth	r3, r3
 801003a:	2b00      	cmp	r3, #0
 801003c:	d1c7      	bne.n	800ffce <HAL_SPI_Transmit+0x114>
 801003e:	e053      	b.n	80100e8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d002      	beq.n	801004e <HAL_SPI_Transmit+0x194>
 8010048:	8b7b      	ldrh	r3, [r7, #26]
 801004a:	2b01      	cmp	r3, #1
 801004c:	d147      	bne.n	80100de <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	330c      	adds	r3, #12
 8010058:	7812      	ldrb	r2, [r2, #0]
 801005a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010060:	1c5a      	adds	r2, r3, #1
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801006a:	b29b      	uxth	r3, r3
 801006c:	3b01      	subs	r3, #1
 801006e:	b29a      	uxth	r2, r3
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8010074:	e033      	b.n	80100de <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	689b      	ldr	r3, [r3, #8]
 801007c:	f003 0302 	and.w	r3, r3, #2
 8010080:	2b02      	cmp	r3, #2
 8010082:	d113      	bne.n	80100ac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	330c      	adds	r3, #12
 801008e:	7812      	ldrb	r2, [r2, #0]
 8010090:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010096:	1c5a      	adds	r2, r3, #1
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80100a0:	b29b      	uxth	r3, r3
 80100a2:	3b01      	subs	r3, #1
 80100a4:	b29a      	uxth	r2, r3
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80100aa:	e018      	b.n	80100de <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80100ac:	f7fe fcfc 	bl	800eaa8 <HAL_GetTick>
 80100b0:	4602      	mov	r2, r0
 80100b2:	69fb      	ldr	r3, [r7, #28]
 80100b4:	1ad3      	subs	r3, r2, r3
 80100b6:	683a      	ldr	r2, [r7, #0]
 80100b8:	429a      	cmp	r2, r3
 80100ba:	d803      	bhi.n	80100c4 <HAL_SPI_Transmit+0x20a>
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100c2:	d102      	bne.n	80100ca <HAL_SPI_Transmit+0x210>
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d109      	bne.n	80100de <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	2201      	movs	r2, #1
 80100ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	2200      	movs	r2, #0
 80100d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80100da:	2303      	movs	r3, #3
 80100dc:	e02d      	b.n	801013a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80100e2:	b29b      	uxth	r3, r3
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d1c6      	bne.n	8010076 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80100e8:	69fa      	ldr	r2, [r7, #28]
 80100ea:	6839      	ldr	r1, [r7, #0]
 80100ec:	68f8      	ldr	r0, [r7, #12]
 80100ee:	f000 fc6f 	bl	80109d0 <SPI_EndRxTxTransaction>
 80100f2:	4603      	mov	r3, r0
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d002      	beq.n	80100fe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	2220      	movs	r2, #32
 80100fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	689b      	ldr	r3, [r3, #8]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d10a      	bne.n	801011c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010106:	2300      	movs	r3, #0
 8010108:	617b      	str	r3, [r7, #20]
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	617b      	str	r3, [r7, #20]
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	689b      	ldr	r3, [r3, #8]
 8010118:	617b      	str	r3, [r7, #20]
 801011a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	2201      	movs	r2, #1
 8010120:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	2200      	movs	r2, #0
 8010128:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010130:	2b00      	cmp	r3, #0
 8010132:	d001      	beq.n	8010138 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8010134:	2301      	movs	r3, #1
 8010136:	e000      	b.n	801013a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8010138:	2300      	movs	r3, #0
  }
}
 801013a:	4618      	mov	r0, r3
 801013c:	3720      	adds	r7, #32
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
	...

08010144 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	af00      	add	r7, sp, #0
 801014a:	60f8      	str	r0, [r7, #12]
 801014c:	60b9      	str	r1, [r7, #8]
 801014e:	4613      	mov	r3, r2
 8010150:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010158:	b2db      	uxtb	r3, r3
 801015a:	2b01      	cmp	r3, #1
 801015c:	d001      	beq.n	8010162 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 801015e:	2302      	movs	r3, #2
 8010160:	e07f      	b.n	8010262 <HAL_SPI_Receive_IT+0x11e>
  }

  if ((pData == NULL) || (Size == 0U))
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d002      	beq.n	801016e <HAL_SPI_Receive_IT+0x2a>
 8010168:	88fb      	ldrh	r3, [r7, #6]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d101      	bne.n	8010172 <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 801016e:	2301      	movs	r3, #1
 8010170:	e077      	b.n	8010262 <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	689b      	ldr	r3, [r3, #8]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d110      	bne.n	801019c <HAL_SPI_Receive_IT+0x58>
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	685b      	ldr	r3, [r3, #4]
 801017e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010182:	d10b      	bne.n	801019c <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	2204      	movs	r2, #4
 8010188:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 801018c:	88fb      	ldrh	r3, [r7, #6]
 801018e:	68ba      	ldr	r2, [r7, #8]
 8010190:	68b9      	ldr	r1, [r7, #8]
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f000 f86e 	bl	8010274 <HAL_SPI_TransmitReceive_IT>
 8010198:	4603      	mov	r3, r0
 801019a:	e062      	b.n	8010262 <HAL_SPI_Receive_IT+0x11e>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d101      	bne.n	80101aa <HAL_SPI_Receive_IT+0x66>
 80101a6:	2302      	movs	r3, #2
 80101a8:	e05b      	b.n	8010262 <HAL_SPI_Receive_IT+0x11e>
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2201      	movs	r2, #1
 80101ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2204      	movs	r2, #4
 80101b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2200      	movs	r2, #0
 80101be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	68ba      	ldr	r2, [r7, #8]
 80101c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	88fa      	ldrh	r2, [r7, #6]
 80101ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	88fa      	ldrh	r2, [r7, #6]
 80101d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	2200      	movs	r2, #0
 80101d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	2200      	movs	r2, #0
 80101dc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2200      	movs	r2, #0
 80101e2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	2200      	movs	r2, #0
 80101e8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	68db      	ldr	r3, [r3, #12]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d003      	beq.n	80101fa <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	4a1d      	ldr	r2, [pc, #116]	@ (801026c <HAL_SPI_Receive_IT+0x128>)
 80101f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80101f8:	e002      	b.n	8010200 <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	4a1c      	ldr	r2, [pc, #112]	@ (8010270 <HAL_SPI_Receive_IT+0x12c>)
 80101fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	689b      	ldr	r3, [r3, #8]
 8010204:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010208:	d10f      	bne.n	801022a <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	681a      	ldr	r2, [r3, #0]
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010218:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	681a      	ldr	r2, [r3, #0]
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010228:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010234:	2b40      	cmp	r3, #64	@ 0x40
 8010236:	d007      	beq.n	8010248 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	681a      	ldr	r2, [r3, #0]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010246:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	2200      	movs	r2, #0
 801024c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	685a      	ldr	r2, [r3, #4]
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 801025e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010260:	2300      	movs	r3, #0
}
 8010262:	4618      	mov	r0, r3
 8010264:	3710      	adds	r7, #16
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
 801026a:	bf00      	nop
 801026c:	080107ad 	.word	0x080107ad
 8010270:	08010763 	.word	0x08010763

08010274 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8010274:	b480      	push	{r7}
 8010276:	b087      	sub	sp, #28
 8010278:	af00      	add	r7, sp, #0
 801027a:	60f8      	str	r0, [r7, #12]
 801027c:	60b9      	str	r1, [r7, #8]
 801027e:	607a      	str	r2, [r7, #4]
 8010280:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010288:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	685b      	ldr	r3, [r3, #4]
 801028e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010290:	7dfb      	ldrb	r3, [r7, #23]
 8010292:	2b01      	cmp	r3, #1
 8010294:	d00c      	beq.n	80102b0 <HAL_SPI_TransmitReceive_IT+0x3c>
 8010296:	693b      	ldr	r3, [r7, #16]
 8010298:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801029c:	d106      	bne.n	80102ac <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	689b      	ldr	r3, [r3, #8]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d102      	bne.n	80102ac <HAL_SPI_TransmitReceive_IT+0x38>
 80102a6:	7dfb      	ldrb	r3, [r7, #23]
 80102a8:	2b04      	cmp	r3, #4
 80102aa:	d001      	beq.n	80102b0 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80102ac:	2302      	movs	r3, #2
 80102ae:	e061      	b.n	8010374 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d005      	beq.n	80102c2 <HAL_SPI_TransmitReceive_IT+0x4e>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d002      	beq.n	80102c2 <HAL_SPI_TransmitReceive_IT+0x4e>
 80102bc:	887b      	ldrh	r3, [r7, #2]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d101      	bne.n	80102c6 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 80102c2:	2301      	movs	r3, #1
 80102c4:	e056      	b.n	8010374 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80102cc:	2b01      	cmp	r3, #1
 80102ce:	d101      	bne.n	80102d4 <HAL_SPI_TransmitReceive_IT+0x60>
 80102d0:	2302      	movs	r3, #2
 80102d2:	e04f      	b.n	8010374 <HAL_SPI_TransmitReceive_IT+0x100>
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	2201      	movs	r2, #1
 80102d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80102e2:	b2db      	uxtb	r3, r3
 80102e4:	2b04      	cmp	r3, #4
 80102e6:	d003      	beq.n	80102f0 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	2205      	movs	r2, #5
 80102ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	2200      	movs	r2, #0
 80102f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	68ba      	ldr	r2, [r7, #8]
 80102fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	887a      	ldrh	r2, [r7, #2]
 8010300:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	887a      	ldrh	r2, [r7, #2]
 8010306:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	687a      	ldr	r2, [r7, #4]
 801030c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	887a      	ldrh	r2, [r7, #2]
 8010312:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	887a      	ldrh	r2, [r7, #2]
 8010318:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	68db      	ldr	r3, [r3, #12]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d006      	beq.n	8010330 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	4a16      	ldr	r2, [pc, #88]	@ (8010380 <HAL_SPI_TransmitReceive_IT+0x10c>)
 8010326:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	4a16      	ldr	r2, [pc, #88]	@ (8010384 <HAL_SPI_TransmitReceive_IT+0x110>)
 801032c:	645a      	str	r2, [r3, #68]	@ 0x44
 801032e:	e005      	b.n	801033c <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	4a15      	ldr	r2, [pc, #84]	@ (8010388 <HAL_SPI_TransmitReceive_IT+0x114>)
 8010334:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	4a14      	ldr	r2, [pc, #80]	@ (801038c <HAL_SPI_TransmitReceive_IT+0x118>)
 801033a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010346:	2b40      	cmp	r3, #64	@ 0x40
 8010348:	d007      	beq.n	801035a <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	681a      	ldr	r2, [r3, #0]
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010358:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	2200      	movs	r2, #0
 801035e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	685a      	ldr	r2, [r3, #4]
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8010370:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010372:	2300      	movs	r3, #0
}
 8010374:	4618      	mov	r0, r3
 8010376:	371c      	adds	r7, #28
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr
 8010380:	080106a5 	.word	0x080106a5
 8010384:	08010705 	.word	0x08010705
 8010388:	080105e1 	.word	0x080105e1
 801038c:	08010645 	.word	0x08010645

08010390 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b088      	sub	sp, #32
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	685b      	ldr	r3, [r3, #4]
 801039e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	689b      	ldr	r3, [r3, #8]
 80103a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80103a8:	69bb      	ldr	r3, [r7, #24]
 80103aa:	099b      	lsrs	r3, r3, #6
 80103ac:	f003 0301 	and.w	r3, r3, #1
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d10f      	bne.n	80103d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80103b4:	69bb      	ldr	r3, [r7, #24]
 80103b6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d00a      	beq.n	80103d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80103be:	69fb      	ldr	r3, [r7, #28]
 80103c0:	099b      	lsrs	r3, r3, #6
 80103c2:	f003 0301 	and.w	r3, r3, #1
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d004      	beq.n	80103d4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	4798      	blx	r3
    return;
 80103d2:	e0d7      	b.n	8010584 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80103d4:	69bb      	ldr	r3, [r7, #24]
 80103d6:	085b      	lsrs	r3, r3, #1
 80103d8:	f003 0301 	and.w	r3, r3, #1
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d00a      	beq.n	80103f6 <HAL_SPI_IRQHandler+0x66>
 80103e0:	69fb      	ldr	r3, [r7, #28]
 80103e2:	09db      	lsrs	r3, r3, #7
 80103e4:	f003 0301 	and.w	r3, r3, #1
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d004      	beq.n	80103f6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	4798      	blx	r3
    return;
 80103f4:	e0c6      	b.n	8010584 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80103f6:	69bb      	ldr	r3, [r7, #24]
 80103f8:	095b      	lsrs	r3, r3, #5
 80103fa:	f003 0301 	and.w	r3, r3, #1
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d10c      	bne.n	801041c <HAL_SPI_IRQHandler+0x8c>
 8010402:	69bb      	ldr	r3, [r7, #24]
 8010404:	099b      	lsrs	r3, r3, #6
 8010406:	f003 0301 	and.w	r3, r3, #1
 801040a:	2b00      	cmp	r3, #0
 801040c:	d106      	bne.n	801041c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801040e:	69bb      	ldr	r3, [r7, #24]
 8010410:	0a1b      	lsrs	r3, r3, #8
 8010412:	f003 0301 	and.w	r3, r3, #1
 8010416:	2b00      	cmp	r3, #0
 8010418:	f000 80b4 	beq.w	8010584 <HAL_SPI_IRQHandler+0x1f4>
 801041c:	69fb      	ldr	r3, [r7, #28]
 801041e:	095b      	lsrs	r3, r3, #5
 8010420:	f003 0301 	and.w	r3, r3, #1
 8010424:	2b00      	cmp	r3, #0
 8010426:	f000 80ad 	beq.w	8010584 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801042a:	69bb      	ldr	r3, [r7, #24]
 801042c:	099b      	lsrs	r3, r3, #6
 801042e:	f003 0301 	and.w	r3, r3, #1
 8010432:	2b00      	cmp	r3, #0
 8010434:	d023      	beq.n	801047e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801043c:	b2db      	uxtb	r3, r3
 801043e:	2b03      	cmp	r3, #3
 8010440:	d011      	beq.n	8010466 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010446:	f043 0204 	orr.w	r2, r3, #4
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801044e:	2300      	movs	r3, #0
 8010450:	617b      	str	r3, [r7, #20]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	68db      	ldr	r3, [r3, #12]
 8010458:	617b      	str	r3, [r7, #20]
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	689b      	ldr	r3, [r3, #8]
 8010460:	617b      	str	r3, [r7, #20]
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	e00b      	b.n	801047e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010466:	2300      	movs	r3, #0
 8010468:	613b      	str	r3, [r7, #16]
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	68db      	ldr	r3, [r3, #12]
 8010470:	613b      	str	r3, [r7, #16]
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	689b      	ldr	r3, [r3, #8]
 8010478:	613b      	str	r3, [r7, #16]
 801047a:	693b      	ldr	r3, [r7, #16]
        return;
 801047c:	e082      	b.n	8010584 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801047e:	69bb      	ldr	r3, [r7, #24]
 8010480:	095b      	lsrs	r3, r3, #5
 8010482:	f003 0301 	and.w	r3, r3, #1
 8010486:	2b00      	cmp	r3, #0
 8010488:	d014      	beq.n	80104b4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801048e:	f043 0201 	orr.w	r2, r3, #1
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010496:	2300      	movs	r3, #0
 8010498:	60fb      	str	r3, [r7, #12]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	689b      	ldr	r3, [r3, #8]
 80104a0:	60fb      	str	r3, [r7, #12]
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	681a      	ldr	r2, [r3, #0]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80104b0:	601a      	str	r2, [r3, #0]
 80104b2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80104b4:	69bb      	ldr	r3, [r7, #24]
 80104b6:	0a1b      	lsrs	r3, r3, #8
 80104b8:	f003 0301 	and.w	r3, r3, #1
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d00c      	beq.n	80104da <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104c4:	f043 0208 	orr.w	r2, r3, #8
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80104cc:	2300      	movs	r3, #0
 80104ce:	60bb      	str	r3, [r7, #8]
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	689b      	ldr	r3, [r3, #8]
 80104d6:	60bb      	str	r3, [r7, #8]
 80104d8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d04f      	beq.n	8010582 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	685a      	ldr	r2, [r3, #4]
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80104f0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2201      	movs	r2, #1
 80104f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80104fa:	69fb      	ldr	r3, [r7, #28]
 80104fc:	f003 0302 	and.w	r3, r3, #2
 8010500:	2b00      	cmp	r3, #0
 8010502:	d104      	bne.n	801050e <HAL_SPI_IRQHandler+0x17e>
 8010504:	69fb      	ldr	r3, [r7, #28]
 8010506:	f003 0301 	and.w	r3, r3, #1
 801050a:	2b00      	cmp	r3, #0
 801050c:	d034      	beq.n	8010578 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	685a      	ldr	r2, [r3, #4]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	f022 0203 	bic.w	r2, r2, #3
 801051c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010522:	2b00      	cmp	r3, #0
 8010524:	d011      	beq.n	801054a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801052a:	4a18      	ldr	r2, [pc, #96]	@ (801058c <HAL_SPI_IRQHandler+0x1fc>)
 801052c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010532:	4618      	mov	r0, r3
 8010534:	f7fe fc3a 	bl	800edac <HAL_DMA_Abort_IT>
 8010538:	4603      	mov	r3, r0
 801053a:	2b00      	cmp	r3, #0
 801053c:	d005      	beq.n	801054a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010542:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801054e:	2b00      	cmp	r3, #0
 8010550:	d016      	beq.n	8010580 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010556:	4a0d      	ldr	r2, [pc, #52]	@ (801058c <HAL_SPI_IRQHandler+0x1fc>)
 8010558:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801055e:	4618      	mov	r0, r3
 8010560:	f7fe fc24 	bl	800edac <HAL_DMA_Abort_IT>
 8010564:	4603      	mov	r3, r0
 8010566:	2b00      	cmp	r3, #0
 8010568:	d00a      	beq.n	8010580 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801056e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8010576:	e003      	b.n	8010580 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f000 f813 	bl	80105a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801057e:	e000      	b.n	8010582 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8010580:	bf00      	nop
    return;
 8010582:	bf00      	nop
  }
}
 8010584:	3720      	adds	r7, #32
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
 801058a:	bf00      	nop
 801058c:	080105b9 	.word	0x080105b9

08010590 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010590:	b480      	push	{r7}
 8010592:	b083      	sub	sp, #12
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8010598:	bf00      	nop
 801059a:	370c      	adds	r7, #12
 801059c:	46bd      	mov	sp, r7
 801059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a2:	4770      	bx	lr

080105a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80105a4:	b480      	push	{r7}
 80105a6:	b083      	sub	sp, #12
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80105ac:	bf00      	nop
 80105ae:	370c      	adds	r7, #12
 80105b0:	46bd      	mov	sp, r7
 80105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b6:	4770      	bx	lr

080105b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b084      	sub	sp, #16
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	2200      	movs	r2, #0
 80105ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	2200      	movs	r2, #0
 80105d0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80105d2:	68f8      	ldr	r0, [r7, #12]
 80105d4:	f7ff ffe6 	bl	80105a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80105d8:	bf00      	nop
 80105da:	3710      	adds	r7, #16
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}

080105e0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	f103 020c 	add.w	r2, r3, #12
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105f4:	7812      	ldrb	r2, [r2, #0]
 80105f6:	b2d2      	uxtb	r2, r2
 80105f8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105fe:	1c5a      	adds	r2, r3, #1
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010608:	b29b      	uxth	r3, r3
 801060a:	3b01      	subs	r3, #1
 801060c:	b29a      	uxth	r2, r3
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010616:	b29b      	uxth	r3, r3
 8010618:	2b00      	cmp	r3, #0
 801061a:	d10f      	bne.n	801063c <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	685a      	ldr	r2, [r3, #4]
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801062a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010630:	b29b      	uxth	r3, r3
 8010632:	2b00      	cmp	r3, #0
 8010634:	d102      	bne.n	801063c <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8010636:	6878      	ldr	r0, [r7, #4]
 8010638:	f000 fa1e 	bl	8010a78 <SPI_CloseRxTx_ISR>
    }
  }
}
 801063c:	bf00      	nop
 801063e:	3708      	adds	r7, #8
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b082      	sub	sp, #8
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	330c      	adds	r3, #12
 8010656:	7812      	ldrb	r2, [r2, #0]
 8010658:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801065e:	1c5a      	adds	r2, r3, #1
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010668:	b29b      	uxth	r3, r3
 801066a:	3b01      	subs	r3, #1
 801066c:	b29a      	uxth	r2, r3
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010676:	b29b      	uxth	r3, r3
 8010678:	2b00      	cmp	r3, #0
 801067a:	d10f      	bne.n	801069c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	685a      	ldr	r2, [r3, #4]
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801068a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010690:	b29b      	uxth	r3, r3
 8010692:	2b00      	cmp	r3, #0
 8010694:	d102      	bne.n	801069c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f000 f9ee 	bl	8010a78 <SPI_CloseRxTx_ISR>
    }
  }
}
 801069c:	bf00      	nop
 801069e:	3708      	adds	r7, #8
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}

080106a4 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b082      	sub	sp, #8
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	68da      	ldr	r2, [r3, #12]
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80106b6:	b292      	uxth	r2, r2
 80106b8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80106be:	1c9a      	adds	r2, r3, #2
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80106c8:	b29b      	uxth	r3, r3
 80106ca:	3b01      	subs	r3, #1
 80106cc:	b29a      	uxth	r2, r3
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d10f      	bne.n	80106fc <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	685a      	ldr	r2, [r3, #4]
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80106ea:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80106f0:	b29b      	uxth	r3, r3
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d102      	bne.n	80106fc <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f000 f9be 	bl	8010a78 <SPI_CloseRxTx_ISR>
    }
  }
}
 80106fc:	bf00      	nop
 80106fe:	3708      	adds	r7, #8
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}

08010704 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b082      	sub	sp, #8
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010710:	881a      	ldrh	r2, [r3, #0]
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801071c:	1c9a      	adds	r2, r3, #2
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010726:	b29b      	uxth	r3, r3
 8010728:	3b01      	subs	r3, #1
 801072a:	b29a      	uxth	r2, r3
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8010734:	b29b      	uxth	r3, r3
 8010736:	2b00      	cmp	r3, #0
 8010738:	d10f      	bne.n	801075a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	685a      	ldr	r2, [r3, #4]
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010748:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801074e:	b29b      	uxth	r3, r3
 8010750:	2b00      	cmp	r3, #0
 8010752:	d102      	bne.n	801075a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f000 f98f 	bl	8010a78 <SPI_CloseRxTx_ISR>
    }
  }
}
 801075a:	bf00      	nop
 801075c:	3708      	adds	r7, #8
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}

08010762 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8010762:	b580      	push	{r7, lr}
 8010764:	b082      	sub	sp, #8
 8010766:	af00      	add	r7, sp, #0
 8010768:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	f103 020c 	add.w	r2, r3, #12
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010776:	7812      	ldrb	r2, [r2, #0]
 8010778:	b2d2      	uxtb	r2, r2
 801077a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010780:	1c5a      	adds	r2, r3, #1
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801078a:	b29b      	uxth	r3, r3
 801078c:	3b01      	subs	r3, #1
 801078e:	b29a      	uxth	r2, r3
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010798:	b29b      	uxth	r3, r3
 801079a:	2b00      	cmp	r3, #0
 801079c:	d102      	bne.n	80107a4 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f000 f9de 	bl	8010b60 <SPI_CloseRx_ISR>
  }
}
 80107a4:	bf00      	nop
 80107a6:	3708      	adds	r7, #8
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b082      	sub	sp, #8
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	68da      	ldr	r2, [r3, #12]
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107be:	b292      	uxth	r2, r2
 80107c0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107c6:	1c9a      	adds	r2, r3, #2
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80107d0:	b29b      	uxth	r3, r3
 80107d2:	3b01      	subs	r3, #1
 80107d4:	b29a      	uxth	r2, r3
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80107de:	b29b      	uxth	r3, r3
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d102      	bne.n	80107ea <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f000 f9bb 	bl	8010b60 <SPI_CloseRx_ISR>
  }
}
 80107ea:	bf00      	nop
 80107ec:	3708      	adds	r7, #8
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
	...

080107f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b088      	sub	sp, #32
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	60f8      	str	r0, [r7, #12]
 80107fc:	60b9      	str	r1, [r7, #8]
 80107fe:	603b      	str	r3, [r7, #0]
 8010800:	4613      	mov	r3, r2
 8010802:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010804:	f7fe f950 	bl	800eaa8 <HAL_GetTick>
 8010808:	4602      	mov	r2, r0
 801080a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801080c:	1a9b      	subs	r3, r3, r2
 801080e:	683a      	ldr	r2, [r7, #0]
 8010810:	4413      	add	r3, r2
 8010812:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010814:	f7fe f948 	bl	800eaa8 <HAL_GetTick>
 8010818:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801081a:	4b39      	ldr	r3, [pc, #228]	@ (8010900 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	015b      	lsls	r3, r3, #5
 8010820:	0d1b      	lsrs	r3, r3, #20
 8010822:	69fa      	ldr	r2, [r7, #28]
 8010824:	fb02 f303 	mul.w	r3, r2, r3
 8010828:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801082a:	e055      	b.n	80108d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010832:	d051      	beq.n	80108d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010834:	f7fe f938 	bl	800eaa8 <HAL_GetTick>
 8010838:	4602      	mov	r2, r0
 801083a:	69bb      	ldr	r3, [r7, #24]
 801083c:	1ad3      	subs	r3, r2, r3
 801083e:	69fa      	ldr	r2, [r7, #28]
 8010840:	429a      	cmp	r2, r3
 8010842:	d902      	bls.n	801084a <SPI_WaitFlagStateUntilTimeout+0x56>
 8010844:	69fb      	ldr	r3, [r7, #28]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d13d      	bne.n	80108c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	685a      	ldr	r2, [r3, #4]
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8010858:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	685b      	ldr	r3, [r3, #4]
 801085e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010862:	d111      	bne.n	8010888 <SPI_WaitFlagStateUntilTimeout+0x94>
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	689b      	ldr	r3, [r3, #8]
 8010868:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801086c:	d004      	beq.n	8010878 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	689b      	ldr	r3, [r3, #8]
 8010872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010876:	d107      	bne.n	8010888 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010886:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801088c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010890:	d10f      	bne.n	80108b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	681a      	ldr	r2, [r3, #0]
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80108a0:	601a      	str	r2, [r3, #0]
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	681a      	ldr	r2, [r3, #0]
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80108b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	2201      	movs	r2, #1
 80108b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	2200      	movs	r2, #0
 80108be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80108c2:	2303      	movs	r3, #3
 80108c4:	e018      	b.n	80108f8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d102      	bne.n	80108d2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80108cc:	2300      	movs	r3, #0
 80108ce:	61fb      	str	r3, [r7, #28]
 80108d0:	e002      	b.n	80108d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	3b01      	subs	r3, #1
 80108d6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	689a      	ldr	r2, [r3, #8]
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	4013      	ands	r3, r2
 80108e2:	68ba      	ldr	r2, [r7, #8]
 80108e4:	429a      	cmp	r2, r3
 80108e6:	bf0c      	ite	eq
 80108e8:	2301      	moveq	r3, #1
 80108ea:	2300      	movne	r3, #0
 80108ec:	b2db      	uxtb	r3, r3
 80108ee:	461a      	mov	r2, r3
 80108f0:	79fb      	ldrb	r3, [r7, #7]
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d19a      	bne.n	801082c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80108f6:	2300      	movs	r3, #0
}
 80108f8:	4618      	mov	r0, r3
 80108fa:	3720      	adds	r7, #32
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}
 8010900:	20000034 	.word	0x20000034

08010904 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b086      	sub	sp, #24
 8010908:	af02      	add	r7, sp, #8
 801090a:	60f8      	str	r0, [r7, #12]
 801090c:	60b9      	str	r1, [r7, #8]
 801090e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	685b      	ldr	r3, [r3, #4]
 8010914:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010918:	d111      	bne.n	801093e <SPI_EndRxTransaction+0x3a>
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	689b      	ldr	r3, [r3, #8]
 801091e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010922:	d004      	beq.n	801092e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	689b      	ldr	r3, [r3, #8]
 8010928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801092c:	d107      	bne.n	801093e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	681a      	ldr	r2, [r3, #0]
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801093c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	685b      	ldr	r3, [r3, #4]
 8010942:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010946:	d12a      	bne.n	801099e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	689b      	ldr	r3, [r3, #8]
 801094c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010950:	d012      	beq.n	8010978 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	9300      	str	r3, [sp, #0]
 8010956:	68bb      	ldr	r3, [r7, #8]
 8010958:	2200      	movs	r2, #0
 801095a:	2180      	movs	r1, #128	@ 0x80
 801095c:	68f8      	ldr	r0, [r7, #12]
 801095e:	f7ff ff49 	bl	80107f4 <SPI_WaitFlagStateUntilTimeout>
 8010962:	4603      	mov	r3, r0
 8010964:	2b00      	cmp	r3, #0
 8010966:	d02d      	beq.n	80109c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801096c:	f043 0220 	orr.w	r2, r3, #32
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8010974:	2303      	movs	r3, #3
 8010976:	e026      	b.n	80109c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	9300      	str	r3, [sp, #0]
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	2200      	movs	r2, #0
 8010980:	2101      	movs	r1, #1
 8010982:	68f8      	ldr	r0, [r7, #12]
 8010984:	f7ff ff36 	bl	80107f4 <SPI_WaitFlagStateUntilTimeout>
 8010988:	4603      	mov	r3, r0
 801098a:	2b00      	cmp	r3, #0
 801098c:	d01a      	beq.n	80109c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010992:	f043 0220 	orr.w	r2, r3, #32
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 801099a:	2303      	movs	r3, #3
 801099c:	e013      	b.n	80109c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	9300      	str	r3, [sp, #0]
 80109a2:	68bb      	ldr	r3, [r7, #8]
 80109a4:	2200      	movs	r2, #0
 80109a6:	2101      	movs	r1, #1
 80109a8:	68f8      	ldr	r0, [r7, #12]
 80109aa:	f7ff ff23 	bl	80107f4 <SPI_WaitFlagStateUntilTimeout>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d007      	beq.n	80109c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109b8:	f043 0220 	orr.w	r2, r3, #32
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80109c0:	2303      	movs	r3, #3
 80109c2:	e000      	b.n	80109c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80109c4:	2300      	movs	r3, #0
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	3710      	adds	r7, #16
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
	...

080109d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b088      	sub	sp, #32
 80109d4:	af02      	add	r7, sp, #8
 80109d6:	60f8      	str	r0, [r7, #12]
 80109d8:	60b9      	str	r1, [r7, #8]
 80109da:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	9300      	str	r3, [sp, #0]
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	2201      	movs	r2, #1
 80109e4:	2102      	movs	r1, #2
 80109e6:	68f8      	ldr	r0, [r7, #12]
 80109e8:	f7ff ff04 	bl	80107f4 <SPI_WaitFlagStateUntilTimeout>
 80109ec:	4603      	mov	r3, r0
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d007      	beq.n	8010a02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109f6:	f043 0220 	orr.w	r2, r3, #32
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80109fe:	2303      	movs	r3, #3
 8010a00:	e032      	b.n	8010a68 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010a02:	4b1b      	ldr	r3, [pc, #108]	@ (8010a70 <SPI_EndRxTxTransaction+0xa0>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	4a1b      	ldr	r2, [pc, #108]	@ (8010a74 <SPI_EndRxTxTransaction+0xa4>)
 8010a08:	fba2 2303 	umull	r2, r3, r2, r3
 8010a0c:	0d5b      	lsrs	r3, r3, #21
 8010a0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010a12:	fb02 f303 	mul.w	r3, r2, r3
 8010a16:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	685b      	ldr	r3, [r3, #4]
 8010a1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010a20:	d112      	bne.n	8010a48 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	9300      	str	r3, [sp, #0]
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	2180      	movs	r1, #128	@ 0x80
 8010a2c:	68f8      	ldr	r0, [r7, #12]
 8010a2e:	f7ff fee1 	bl	80107f4 <SPI_WaitFlagStateUntilTimeout>
 8010a32:	4603      	mov	r3, r0
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d016      	beq.n	8010a66 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a3c:	f043 0220 	orr.w	r2, r3, #32
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8010a44:	2303      	movs	r3, #3
 8010a46:	e00f      	b.n	8010a68 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d00a      	beq.n	8010a64 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	3b01      	subs	r3, #1
 8010a52:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	689b      	ldr	r3, [r3, #8]
 8010a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a5e:	2b80      	cmp	r3, #128	@ 0x80
 8010a60:	d0f2      	beq.n	8010a48 <SPI_EndRxTxTransaction+0x78>
 8010a62:	e000      	b.n	8010a66 <SPI_EndRxTxTransaction+0x96>
        break;
 8010a64:	bf00      	nop
  }

  return HAL_OK;
 8010a66:	2300      	movs	r3, #0
}
 8010a68:	4618      	mov	r0, r3
 8010a6a:	3718      	adds	r7, #24
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}
 8010a70:	20000034 	.word	0x20000034
 8010a74:	165e9f81 	.word	0x165e9f81

08010a78 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b086      	sub	sp, #24
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8010a80:	4b35      	ldr	r3, [pc, #212]	@ (8010b58 <SPI_CloseRxTx_ISR+0xe0>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	4a35      	ldr	r2, [pc, #212]	@ (8010b5c <SPI_CloseRxTx_ISR+0xe4>)
 8010a86:	fba2 2303 	umull	r2, r3, r2, r3
 8010a8a:	0a5b      	lsrs	r3, r3, #9
 8010a8c:	2264      	movs	r2, #100	@ 0x64
 8010a8e:	fb02 f303 	mul.w	r3, r2, r3
 8010a92:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010a94:	f7fe f808 	bl	800eaa8 <HAL_GetTick>
 8010a98:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	685a      	ldr	r2, [r3, #4]
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f022 0220 	bic.w	r2, r2, #32
 8010aa8:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8010aaa:	693b      	ldr	r3, [r7, #16]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d106      	bne.n	8010abe <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ab4:	f043 0220 	orr.w	r2, r3, #32
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8010abc:	e009      	b.n	8010ad2 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	3b01      	subs	r3, #1
 8010ac2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	689b      	ldr	r3, [r3, #8]
 8010aca:	f003 0302 	and.w	r3, r3, #2
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d0eb      	beq.n	8010aaa <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8010ad2:	697a      	ldr	r2, [r7, #20]
 8010ad4:	2164      	movs	r1, #100	@ 0x64
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f7ff ff7a 	bl	80109d0 <SPI_EndRxTxTransaction>
 8010adc:	4603      	mov	r3, r0
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d005      	beq.n	8010aee <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ae6:	f043 0220 	orr.w	r2, r3, #32
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	689b      	ldr	r3, [r3, #8]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d10a      	bne.n	8010b0c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010af6:	2300      	movs	r3, #0
 8010af8:	60fb      	str	r3, [r7, #12]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	68db      	ldr	r3, [r3, #12]
 8010b00:	60fb      	str	r3, [r7, #12]
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	689b      	ldr	r3, [r3, #8]
 8010b08:	60fb      	str	r3, [r7, #12]
 8010b0a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d115      	bne.n	8010b40 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	2b04      	cmp	r3, #4
 8010b1e:	d107      	bne.n	8010b30 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2201      	movs	r2, #1
 8010b24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f7fd f8d9 	bl	800dce0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8010b2e:	e00e      	b.n	8010b4e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2201      	movs	r2, #1
 8010b34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	f7ff fd29 	bl	8010590 <HAL_SPI_TxRxCpltCallback>
}
 8010b3e:	e006      	b.n	8010b4e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2201      	movs	r2, #1
 8010b44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f7ff fd2b 	bl	80105a4 <HAL_SPI_ErrorCallback>
}
 8010b4e:	bf00      	nop
 8010b50:	3718      	adds	r7, #24
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}
 8010b56:	bf00      	nop
 8010b58:	20000034 	.word	0x20000034
 8010b5c:	057619f1 	.word	0x057619f1

08010b60 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b084      	sub	sp, #16
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	685a      	ldr	r2, [r3, #4]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8010b76:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8010b78:	f7fd ff96 	bl	800eaa8 <HAL_GetTick>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	461a      	mov	r2, r3
 8010b80:	2164      	movs	r1, #100	@ 0x64
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f7ff febe 	bl	8010904 <SPI_EndRxTransaction>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d005      	beq.n	8010b9a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b92:	f043 0220 	orr.w	r2, r3, #32
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	689b      	ldr	r3, [r3, #8]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d10a      	bne.n	8010bb8 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	60fb      	str	r3, [r7, #12]
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	68db      	ldr	r3, [r3, #12]
 8010bac:	60fb      	str	r3, [r7, #12]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	689b      	ldr	r3, [r3, #8]
 8010bb4:	60fb      	str	r3, [r7, #12]
 8010bb6:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2201      	movs	r2, #1
 8010bbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d103      	bne.n	8010bd0 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f7fd f889 	bl	800dce0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8010bce:	e002      	b.n	8010bd6 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f7ff fce7 	bl	80105a4 <HAL_SPI_ErrorCallback>
}
 8010bd6:	bf00      	nop
 8010bd8:	3710      	adds	r7, #16
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}

08010bde <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010bde:	b580      	push	{r7, lr}
 8010be0:	b082      	sub	sp, #8
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d101      	bne.n	8010bf0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010bec:	2301      	movs	r3, #1
 8010bee:	e041      	b.n	8010c74 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010bf6:	b2db      	uxtb	r3, r3
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d106      	bne.n	8010c0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f000 f839 	bl	8010c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2202      	movs	r2, #2
 8010c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681a      	ldr	r2, [r3, #0]
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	3304      	adds	r3, #4
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	4610      	mov	r0, r2
 8010c1e:	f000 f9bf 	bl	8010fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2201      	movs	r2, #1
 8010c26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2201      	movs	r2, #1
 8010c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2201      	movs	r2, #1
 8010c36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	2201      	movs	r2, #1
 8010c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	2201      	movs	r2, #1
 8010c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	2201      	movs	r2, #1
 8010c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2201      	movs	r2, #1
 8010c56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2201      	movs	r2, #1
 8010c5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	2201      	movs	r2, #1
 8010c66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2201      	movs	r2, #1
 8010c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010c72:	2300      	movs	r3, #0
}
 8010c74:	4618      	mov	r0, r3
 8010c76:	3708      	adds	r7, #8
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}

08010c7c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b083      	sub	sp, #12
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8010c84:	bf00      	nop
 8010c86:	370c      	adds	r7, #12
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8e:	4770      	bx	lr

08010c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010c90:	b480      	push	{r7}
 8010c92:	b085      	sub	sp, #20
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010c9e:	b2db      	uxtb	r3, r3
 8010ca0:	2b01      	cmp	r3, #1
 8010ca2:	d001      	beq.n	8010ca8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	e04e      	b.n	8010d46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2202      	movs	r2, #2
 8010cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	68da      	ldr	r2, [r3, #12]
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	f042 0201 	orr.w	r2, r2, #1
 8010cbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	4a23      	ldr	r2, [pc, #140]	@ (8010d54 <HAL_TIM_Base_Start_IT+0xc4>)
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	d022      	beq.n	8010d10 <HAL_TIM_Base_Start_IT+0x80>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010cd2:	d01d      	beq.n	8010d10 <HAL_TIM_Base_Start_IT+0x80>
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8010d58 <HAL_TIM_Base_Start_IT+0xc8>)
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d018      	beq.n	8010d10 <HAL_TIM_Base_Start_IT+0x80>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8010d5c <HAL_TIM_Base_Start_IT+0xcc>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d013      	beq.n	8010d10 <HAL_TIM_Base_Start_IT+0x80>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	4a1c      	ldr	r2, [pc, #112]	@ (8010d60 <HAL_TIM_Base_Start_IT+0xd0>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d00e      	beq.n	8010d10 <HAL_TIM_Base_Start_IT+0x80>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8010d64 <HAL_TIM_Base_Start_IT+0xd4>)
 8010cf8:	4293      	cmp	r3, r2
 8010cfa:	d009      	beq.n	8010d10 <HAL_TIM_Base_Start_IT+0x80>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	4a19      	ldr	r2, [pc, #100]	@ (8010d68 <HAL_TIM_Base_Start_IT+0xd8>)
 8010d02:	4293      	cmp	r3, r2
 8010d04:	d004      	beq.n	8010d10 <HAL_TIM_Base_Start_IT+0x80>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	4a18      	ldr	r2, [pc, #96]	@ (8010d6c <HAL_TIM_Base_Start_IT+0xdc>)
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d111      	bne.n	8010d34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	689b      	ldr	r3, [r3, #8]
 8010d16:	f003 0307 	and.w	r3, r3, #7
 8010d1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	2b06      	cmp	r3, #6
 8010d20:	d010      	beq.n	8010d44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	681a      	ldr	r2, [r3, #0]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	f042 0201 	orr.w	r2, r2, #1
 8010d30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d32:	e007      	b.n	8010d44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	681a      	ldr	r2, [r3, #0]
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	f042 0201 	orr.w	r2, r2, #1
 8010d42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010d44:	2300      	movs	r3, #0
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3714      	adds	r7, #20
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d50:	4770      	bx	lr
 8010d52:	bf00      	nop
 8010d54:	40010000 	.word	0x40010000
 8010d58:	40000400 	.word	0x40000400
 8010d5c:	40000800 	.word	0x40000800
 8010d60:	40000c00 	.word	0x40000c00
 8010d64:	40010400 	.word	0x40010400
 8010d68:	40014000 	.word	0x40014000
 8010d6c:	40001800 	.word	0x40001800

08010d70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b084      	sub	sp, #16
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	68db      	ldr	r3, [r3, #12]
 8010d7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	691b      	ldr	r3, [r3, #16]
 8010d86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	f003 0302 	and.w	r3, r3, #2
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d020      	beq.n	8010dd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	f003 0302 	and.w	r3, r3, #2
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d01b      	beq.n	8010dd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	f06f 0202 	mvn.w	r2, #2
 8010da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2201      	movs	r2, #1
 8010daa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	699b      	ldr	r3, [r3, #24]
 8010db2:	f003 0303 	and.w	r3, r3, #3
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d003      	beq.n	8010dc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f000 f8d2 	bl	8010f64 <HAL_TIM_IC_CaptureCallback>
 8010dc0:	e005      	b.n	8010dce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f000 f8c4 	bl	8010f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010dc8:	6878      	ldr	r0, [r7, #4]
 8010dca:	f000 f8d5 	bl	8010f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	f003 0304 	and.w	r3, r3, #4
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d020      	beq.n	8010e20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	f003 0304 	and.w	r3, r3, #4
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d01b      	beq.n	8010e20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	f06f 0204 	mvn.w	r2, #4
 8010df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2202      	movs	r2, #2
 8010df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	699b      	ldr	r3, [r3, #24]
 8010dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d003      	beq.n	8010e0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f000 f8ac 	bl	8010f64 <HAL_TIM_IC_CaptureCallback>
 8010e0c:	e005      	b.n	8010e1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f000 f89e 	bl	8010f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f000 f8af 	bl	8010f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	f003 0308 	and.w	r3, r3, #8
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d020      	beq.n	8010e6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	f003 0308 	and.w	r3, r3, #8
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d01b      	beq.n	8010e6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	f06f 0208 	mvn.w	r2, #8
 8010e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2204      	movs	r2, #4
 8010e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	69db      	ldr	r3, [r3, #28]
 8010e4a:	f003 0303 	and.w	r3, r3, #3
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d003      	beq.n	8010e5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f000 f886 	bl	8010f64 <HAL_TIM_IC_CaptureCallback>
 8010e58:	e005      	b.n	8010e66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e5a:	6878      	ldr	r0, [r7, #4]
 8010e5c:	f000 f878 	bl	8010f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f000 f889 	bl	8010f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2200      	movs	r2, #0
 8010e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	f003 0310 	and.w	r3, r3, #16
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d020      	beq.n	8010eb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	f003 0310 	and.w	r3, r3, #16
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d01b      	beq.n	8010eb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	f06f 0210 	mvn.w	r2, #16
 8010e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2208      	movs	r2, #8
 8010e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	69db      	ldr	r3, [r3, #28]
 8010e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d003      	beq.n	8010ea6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	f000 f860 	bl	8010f64 <HAL_TIM_IC_CaptureCallback>
 8010ea4:	e005      	b.n	8010eb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f000 f852 	bl	8010f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f000 f863 	bl	8010f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	f003 0301 	and.w	r3, r3, #1
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d00c      	beq.n	8010edc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	f003 0301 	and.w	r3, r3, #1
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d007      	beq.n	8010edc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f06f 0201 	mvn.w	r2, #1
 8010ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f7fc fd40 	bl	800d95c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d00c      	beq.n	8010f00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d007      	beq.n	8010f00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8010ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f000 f900 	bl	8011100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d00c      	beq.n	8010f24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d007      	beq.n	8010f24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010f1e:	6878      	ldr	r0, [r7, #4]
 8010f20:	f000 f834 	bl	8010f8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	f003 0320 	and.w	r3, r3, #32
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d00c      	beq.n	8010f48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	f003 0320 	and.w	r3, r3, #32
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d007      	beq.n	8010f48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	f06f 0220 	mvn.w	r2, #32
 8010f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010f42:	6878      	ldr	r0, [r7, #4]
 8010f44:	f000 f8d2 	bl	80110ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010f48:	bf00      	nop
 8010f4a:	3710      	adds	r7, #16
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}

08010f50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010f50:	b480      	push	{r7}
 8010f52:	b083      	sub	sp, #12
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010f58:	bf00      	nop
 8010f5a:	370c      	adds	r7, #12
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f62:	4770      	bx	lr

08010f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010f64:	b480      	push	{r7}
 8010f66:	b083      	sub	sp, #12
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010f6c:	bf00      	nop
 8010f6e:	370c      	adds	r7, #12
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr

08010f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010f78:	b480      	push	{r7}
 8010f7a:	b083      	sub	sp, #12
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010f80:	bf00      	nop
 8010f82:	370c      	adds	r7, #12
 8010f84:	46bd      	mov	sp, r7
 8010f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8a:	4770      	bx	lr

08010f8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	b083      	sub	sp, #12
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010f94:	bf00      	nop
 8010f96:	370c      	adds	r7, #12
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr

08010fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b085      	sub	sp, #20
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	4a43      	ldr	r2, [pc, #268]	@ (80110c0 <TIM_Base_SetConfig+0x120>)
 8010fb4:	4293      	cmp	r3, r2
 8010fb6:	d013      	beq.n	8010fe0 <TIM_Base_SetConfig+0x40>
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010fbe:	d00f      	beq.n	8010fe0 <TIM_Base_SetConfig+0x40>
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	4a40      	ldr	r2, [pc, #256]	@ (80110c4 <TIM_Base_SetConfig+0x124>)
 8010fc4:	4293      	cmp	r3, r2
 8010fc6:	d00b      	beq.n	8010fe0 <TIM_Base_SetConfig+0x40>
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	4a3f      	ldr	r2, [pc, #252]	@ (80110c8 <TIM_Base_SetConfig+0x128>)
 8010fcc:	4293      	cmp	r3, r2
 8010fce:	d007      	beq.n	8010fe0 <TIM_Base_SetConfig+0x40>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	4a3e      	ldr	r2, [pc, #248]	@ (80110cc <TIM_Base_SetConfig+0x12c>)
 8010fd4:	4293      	cmp	r3, r2
 8010fd6:	d003      	beq.n	8010fe0 <TIM_Base_SetConfig+0x40>
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	4a3d      	ldr	r2, [pc, #244]	@ (80110d0 <TIM_Base_SetConfig+0x130>)
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	d108      	bne.n	8010ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	685b      	ldr	r3, [r3, #4]
 8010fec:	68fa      	ldr	r2, [r7, #12]
 8010fee:	4313      	orrs	r3, r2
 8010ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	4a32      	ldr	r2, [pc, #200]	@ (80110c0 <TIM_Base_SetConfig+0x120>)
 8010ff6:	4293      	cmp	r3, r2
 8010ff8:	d02b      	beq.n	8011052 <TIM_Base_SetConfig+0xb2>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011000:	d027      	beq.n	8011052 <TIM_Base_SetConfig+0xb2>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	4a2f      	ldr	r2, [pc, #188]	@ (80110c4 <TIM_Base_SetConfig+0x124>)
 8011006:	4293      	cmp	r3, r2
 8011008:	d023      	beq.n	8011052 <TIM_Base_SetConfig+0xb2>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	4a2e      	ldr	r2, [pc, #184]	@ (80110c8 <TIM_Base_SetConfig+0x128>)
 801100e:	4293      	cmp	r3, r2
 8011010:	d01f      	beq.n	8011052 <TIM_Base_SetConfig+0xb2>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	4a2d      	ldr	r2, [pc, #180]	@ (80110cc <TIM_Base_SetConfig+0x12c>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d01b      	beq.n	8011052 <TIM_Base_SetConfig+0xb2>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	4a2c      	ldr	r2, [pc, #176]	@ (80110d0 <TIM_Base_SetConfig+0x130>)
 801101e:	4293      	cmp	r3, r2
 8011020:	d017      	beq.n	8011052 <TIM_Base_SetConfig+0xb2>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	4a2b      	ldr	r2, [pc, #172]	@ (80110d4 <TIM_Base_SetConfig+0x134>)
 8011026:	4293      	cmp	r3, r2
 8011028:	d013      	beq.n	8011052 <TIM_Base_SetConfig+0xb2>
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	4a2a      	ldr	r2, [pc, #168]	@ (80110d8 <TIM_Base_SetConfig+0x138>)
 801102e:	4293      	cmp	r3, r2
 8011030:	d00f      	beq.n	8011052 <TIM_Base_SetConfig+0xb2>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	4a29      	ldr	r2, [pc, #164]	@ (80110dc <TIM_Base_SetConfig+0x13c>)
 8011036:	4293      	cmp	r3, r2
 8011038:	d00b      	beq.n	8011052 <TIM_Base_SetConfig+0xb2>
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	4a28      	ldr	r2, [pc, #160]	@ (80110e0 <TIM_Base_SetConfig+0x140>)
 801103e:	4293      	cmp	r3, r2
 8011040:	d007      	beq.n	8011052 <TIM_Base_SetConfig+0xb2>
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	4a27      	ldr	r2, [pc, #156]	@ (80110e4 <TIM_Base_SetConfig+0x144>)
 8011046:	4293      	cmp	r3, r2
 8011048:	d003      	beq.n	8011052 <TIM_Base_SetConfig+0xb2>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	4a26      	ldr	r2, [pc, #152]	@ (80110e8 <TIM_Base_SetConfig+0x148>)
 801104e:	4293      	cmp	r3, r2
 8011050:	d108      	bne.n	8011064 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	68db      	ldr	r3, [r3, #12]
 801105e:	68fa      	ldr	r2, [r7, #12]
 8011060:	4313      	orrs	r3, r2
 8011062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	695b      	ldr	r3, [r3, #20]
 801106e:	4313      	orrs	r3, r2
 8011070:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	689a      	ldr	r2, [r3, #8]
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801107a:	683b      	ldr	r3, [r7, #0]
 801107c:	681a      	ldr	r2, [r3, #0]
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	4a0e      	ldr	r2, [pc, #56]	@ (80110c0 <TIM_Base_SetConfig+0x120>)
 8011086:	4293      	cmp	r3, r2
 8011088:	d003      	beq.n	8011092 <TIM_Base_SetConfig+0xf2>
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	4a10      	ldr	r2, [pc, #64]	@ (80110d0 <TIM_Base_SetConfig+0x130>)
 801108e:	4293      	cmp	r3, r2
 8011090:	d103      	bne.n	801109a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	691a      	ldr	r2, [r3, #16]
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	f043 0204 	orr.w	r2, r3, #4
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2201      	movs	r2, #1
 80110aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	68fa      	ldr	r2, [r7, #12]
 80110b0:	601a      	str	r2, [r3, #0]
}
 80110b2:	bf00      	nop
 80110b4:	3714      	adds	r7, #20
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr
 80110be:	bf00      	nop
 80110c0:	40010000 	.word	0x40010000
 80110c4:	40000400 	.word	0x40000400
 80110c8:	40000800 	.word	0x40000800
 80110cc:	40000c00 	.word	0x40000c00
 80110d0:	40010400 	.word	0x40010400
 80110d4:	40014000 	.word	0x40014000
 80110d8:	40014400 	.word	0x40014400
 80110dc:	40014800 	.word	0x40014800
 80110e0:	40001800 	.word	0x40001800
 80110e4:	40001c00 	.word	0x40001c00
 80110e8:	40002000 	.word	0x40002000

080110ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80110ec:	b480      	push	{r7}
 80110ee:	b083      	sub	sp, #12
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80110f4:	bf00      	nop
 80110f6:	370c      	adds	r7, #12
 80110f8:	46bd      	mov	sp, r7
 80110fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fe:	4770      	bx	lr

08011100 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011100:	b480      	push	{r7}
 8011102:	b083      	sub	sp, #12
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011108:	bf00      	nop
 801110a:	370c      	adds	r7, #12
 801110c:	46bd      	mov	sp, r7
 801110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011112:	4770      	bx	lr

08011114 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b082      	sub	sp, #8
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d101      	bne.n	8011126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011122:	2301      	movs	r3, #1
 8011124:	e042      	b.n	80111ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801112c:	b2db      	uxtb	r3, r3
 801112e:	2b00      	cmp	r3, #0
 8011130:	d106      	bne.n	8011140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2200      	movs	r2, #0
 8011136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f7fc ff3e 	bl	800dfbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2224      	movs	r2, #36	@ 0x24
 8011144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	68da      	ldr	r2, [r3, #12]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8011156:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f000 fdd3 	bl	8011d04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	691a      	ldr	r2, [r3, #16]
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801116c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	695a      	ldr	r2, [r3, #20]
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801117c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	68da      	ldr	r2, [r3, #12]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801118c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2200      	movs	r2, #0
 8011192:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2220      	movs	r2, #32
 8011198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2220      	movs	r2, #32
 80111a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2200      	movs	r2, #0
 80111a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80111aa:	2300      	movs	r3, #0
}
 80111ac:	4618      	mov	r0, r3
 80111ae:	3708      	adds	r7, #8
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}

080111b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b08a      	sub	sp, #40	@ 0x28
 80111b8:	af02      	add	r7, sp, #8
 80111ba:	60f8      	str	r0, [r7, #12]
 80111bc:	60b9      	str	r1, [r7, #8]
 80111be:	603b      	str	r3, [r7, #0]
 80111c0:	4613      	mov	r3, r2
 80111c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80111c4:	2300      	movs	r3, #0
 80111c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80111ce:	b2db      	uxtb	r3, r3
 80111d0:	2b20      	cmp	r3, #32
 80111d2:	d175      	bne.n	80112c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d002      	beq.n	80111e0 <HAL_UART_Transmit+0x2c>
 80111da:	88fb      	ldrh	r3, [r7, #6]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d101      	bne.n	80111e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80111e0:	2301      	movs	r3, #1
 80111e2:	e06e      	b.n	80112c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	2200      	movs	r2, #0
 80111e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	2221      	movs	r2, #33	@ 0x21
 80111ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80111f2:	f7fd fc59 	bl	800eaa8 <HAL_GetTick>
 80111f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	88fa      	ldrh	r2, [r7, #6]
 80111fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	88fa      	ldrh	r2, [r7, #6]
 8011202:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	689b      	ldr	r3, [r3, #8]
 8011208:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801120c:	d108      	bne.n	8011220 <HAL_UART_Transmit+0x6c>
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	691b      	ldr	r3, [r3, #16]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d104      	bne.n	8011220 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8011216:	2300      	movs	r3, #0
 8011218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	61bb      	str	r3, [r7, #24]
 801121e:	e003      	b.n	8011228 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011224:	2300      	movs	r3, #0
 8011226:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011228:	e02e      	b.n	8011288 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	9300      	str	r3, [sp, #0]
 801122e:	697b      	ldr	r3, [r7, #20]
 8011230:	2200      	movs	r2, #0
 8011232:	2180      	movs	r1, #128	@ 0x80
 8011234:	68f8      	ldr	r0, [r7, #12]
 8011236:	f000 fb37 	bl	80118a8 <UART_WaitOnFlagUntilTimeout>
 801123a:	4603      	mov	r3, r0
 801123c:	2b00      	cmp	r3, #0
 801123e:	d005      	beq.n	801124c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	2220      	movs	r2, #32
 8011244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8011248:	2303      	movs	r3, #3
 801124a:	e03a      	b.n	80112c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 801124c:	69fb      	ldr	r3, [r7, #28]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d10b      	bne.n	801126a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011252:	69bb      	ldr	r3, [r7, #24]
 8011254:	881b      	ldrh	r3, [r3, #0]
 8011256:	461a      	mov	r2, r3
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011260:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8011262:	69bb      	ldr	r3, [r7, #24]
 8011264:	3302      	adds	r3, #2
 8011266:	61bb      	str	r3, [r7, #24]
 8011268:	e007      	b.n	801127a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801126a:	69fb      	ldr	r3, [r7, #28]
 801126c:	781a      	ldrb	r2, [r3, #0]
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8011274:	69fb      	ldr	r3, [r7, #28]
 8011276:	3301      	adds	r3, #1
 8011278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 801127e:	b29b      	uxth	r3, r3
 8011280:	3b01      	subs	r3, #1
 8011282:	b29a      	uxth	r2, r3
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 801128c:	b29b      	uxth	r3, r3
 801128e:	2b00      	cmp	r3, #0
 8011290:	d1cb      	bne.n	801122a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	9300      	str	r3, [sp, #0]
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	2200      	movs	r2, #0
 801129a:	2140      	movs	r1, #64	@ 0x40
 801129c:	68f8      	ldr	r0, [r7, #12]
 801129e:	f000 fb03 	bl	80118a8 <UART_WaitOnFlagUntilTimeout>
 80112a2:	4603      	mov	r3, r0
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d005      	beq.n	80112b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	2220      	movs	r2, #32
 80112ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80112b0:	2303      	movs	r3, #3
 80112b2:	e006      	b.n	80112c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	2220      	movs	r2, #32
 80112b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80112bc:	2300      	movs	r3, #0
 80112be:	e000      	b.n	80112c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80112c0:	2302      	movs	r3, #2
  }
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3720      	adds	r7, #32
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}

080112ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80112ca:	b580      	push	{r7, lr}
 80112cc:	b084      	sub	sp, #16
 80112ce:	af00      	add	r7, sp, #0
 80112d0:	60f8      	str	r0, [r7, #12]
 80112d2:	60b9      	str	r1, [r7, #8]
 80112d4:	4613      	mov	r3, r2
 80112d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80112de:	b2db      	uxtb	r3, r3
 80112e0:	2b20      	cmp	r3, #32
 80112e2:	d112      	bne.n	801130a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d002      	beq.n	80112f0 <HAL_UART_Receive_IT+0x26>
 80112ea:	88fb      	ldrh	r3, [r7, #6]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d101      	bne.n	80112f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80112f0:	2301      	movs	r3, #1
 80112f2:	e00b      	b.n	801130c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	2200      	movs	r2, #0
 80112f8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80112fa:	88fb      	ldrh	r3, [r7, #6]
 80112fc:	461a      	mov	r2, r3
 80112fe:	68b9      	ldr	r1, [r7, #8]
 8011300:	68f8      	ldr	r0, [r7, #12]
 8011302:	f000 fb2a 	bl	801195a <UART_Start_Receive_IT>
 8011306:	4603      	mov	r3, r0
 8011308:	e000      	b.n	801130c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 801130a:	2302      	movs	r3, #2
  }
}
 801130c:	4618      	mov	r0, r3
 801130e:	3710      	adds	r7, #16
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}

08011314 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b0ba      	sub	sp, #232	@ 0xe8
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	68db      	ldr	r3, [r3, #12]
 801132c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	695b      	ldr	r3, [r3, #20]
 8011336:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 801133a:	2300      	movs	r3, #0
 801133c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8011340:	2300      	movs	r3, #0
 8011342:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8011346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801134a:	f003 030f 	and.w	r3, r3, #15
 801134e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8011352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011356:	2b00      	cmp	r3, #0
 8011358:	d10f      	bne.n	801137a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801135a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801135e:	f003 0320 	and.w	r3, r3, #32
 8011362:	2b00      	cmp	r3, #0
 8011364:	d009      	beq.n	801137a <HAL_UART_IRQHandler+0x66>
 8011366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801136a:	f003 0320 	and.w	r3, r3, #32
 801136e:	2b00      	cmp	r3, #0
 8011370:	d003      	beq.n	801137a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8011372:	6878      	ldr	r0, [r7, #4]
 8011374:	f000 fc07 	bl	8011b86 <UART_Receive_IT>
      return;
 8011378:	e273      	b.n	8011862 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801137a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801137e:	2b00      	cmp	r3, #0
 8011380:	f000 80de 	beq.w	8011540 <HAL_UART_IRQHandler+0x22c>
 8011384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011388:	f003 0301 	and.w	r3, r3, #1
 801138c:	2b00      	cmp	r3, #0
 801138e:	d106      	bne.n	801139e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8011390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011394:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8011398:	2b00      	cmp	r3, #0
 801139a:	f000 80d1 	beq.w	8011540 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801139e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80113a2:	f003 0301 	and.w	r3, r3, #1
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d00b      	beq.n	80113c2 <HAL_UART_IRQHandler+0xae>
 80113aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80113ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d005      	beq.n	80113c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113ba:	f043 0201 	orr.w	r2, r3, #1
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80113c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80113c6:	f003 0304 	and.w	r3, r3, #4
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d00b      	beq.n	80113e6 <HAL_UART_IRQHandler+0xd2>
 80113ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80113d2:	f003 0301 	and.w	r3, r3, #1
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d005      	beq.n	80113e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113de:	f043 0202 	orr.w	r2, r3, #2
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80113e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80113ea:	f003 0302 	and.w	r3, r3, #2
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d00b      	beq.n	801140a <HAL_UART_IRQHandler+0xf6>
 80113f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80113f6:	f003 0301 	and.w	r3, r3, #1
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d005      	beq.n	801140a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011402:	f043 0204 	orr.w	r2, r3, #4
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801140a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801140e:	f003 0308 	and.w	r3, r3, #8
 8011412:	2b00      	cmp	r3, #0
 8011414:	d011      	beq.n	801143a <HAL_UART_IRQHandler+0x126>
 8011416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801141a:	f003 0320 	and.w	r3, r3, #32
 801141e:	2b00      	cmp	r3, #0
 8011420:	d105      	bne.n	801142e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8011422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011426:	f003 0301 	and.w	r3, r3, #1
 801142a:	2b00      	cmp	r3, #0
 801142c:	d005      	beq.n	801143a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011432:	f043 0208 	orr.w	r2, r3, #8
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801143e:	2b00      	cmp	r3, #0
 8011440:	f000 820a 	beq.w	8011858 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011448:	f003 0320 	and.w	r3, r3, #32
 801144c:	2b00      	cmp	r3, #0
 801144e:	d008      	beq.n	8011462 <HAL_UART_IRQHandler+0x14e>
 8011450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011454:	f003 0320 	and.w	r3, r3, #32
 8011458:	2b00      	cmp	r3, #0
 801145a:	d002      	beq.n	8011462 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f000 fb92 	bl	8011b86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	695b      	ldr	r3, [r3, #20]
 8011468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801146c:	2b40      	cmp	r3, #64	@ 0x40
 801146e:	bf0c      	ite	eq
 8011470:	2301      	moveq	r3, #1
 8011472:	2300      	movne	r3, #0
 8011474:	b2db      	uxtb	r3, r3
 8011476:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801147e:	f003 0308 	and.w	r3, r3, #8
 8011482:	2b00      	cmp	r3, #0
 8011484:	d103      	bne.n	801148e <HAL_UART_IRQHandler+0x17a>
 8011486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801148a:	2b00      	cmp	r3, #0
 801148c:	d04f      	beq.n	801152e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	f000 fa9d 	bl	80119ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	695b      	ldr	r3, [r3, #20]
 801149a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801149e:	2b40      	cmp	r3, #64	@ 0x40
 80114a0:	d141      	bne.n	8011526 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	3314      	adds	r3, #20
 80114a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80114b0:	e853 3f00 	ldrex	r3, [r3]
 80114b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80114b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80114bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80114c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	3314      	adds	r3, #20
 80114ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80114ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80114d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80114da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80114de:	e841 2300 	strex	r3, r2, [r1]
 80114e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80114e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d1d9      	bne.n	80114a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d013      	beq.n	801151e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80114fa:	4a8a      	ldr	r2, [pc, #552]	@ (8011724 <HAL_UART_IRQHandler+0x410>)
 80114fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011502:	4618      	mov	r0, r3
 8011504:	f7fd fc52 	bl	800edac <HAL_DMA_Abort_IT>
 8011508:	4603      	mov	r3, r0
 801150a:	2b00      	cmp	r3, #0
 801150c:	d016      	beq.n	801153c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011514:	687a      	ldr	r2, [r7, #4]
 8011516:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8011518:	4610      	mov	r0, r2
 801151a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801151c:	e00e      	b.n	801153c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f000 f9ac 	bl	801187c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011524:	e00a      	b.n	801153c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f000 f9a8 	bl	801187c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801152c:	e006      	b.n	801153c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f000 f9a4 	bl	801187c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2200      	movs	r2, #0
 8011538:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 801153a:	e18d      	b.n	8011858 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801153c:	bf00      	nop
    return;
 801153e:	e18b      	b.n	8011858 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011544:	2b01      	cmp	r3, #1
 8011546:	f040 8167 	bne.w	8011818 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801154a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801154e:	f003 0310 	and.w	r3, r3, #16
 8011552:	2b00      	cmp	r3, #0
 8011554:	f000 8160 	beq.w	8011818 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8011558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801155c:	f003 0310 	and.w	r3, r3, #16
 8011560:	2b00      	cmp	r3, #0
 8011562:	f000 8159 	beq.w	8011818 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011566:	2300      	movs	r3, #0
 8011568:	60bb      	str	r3, [r7, #8]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	60bb      	str	r3, [r7, #8]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	685b      	ldr	r3, [r3, #4]
 8011578:	60bb      	str	r3, [r7, #8]
 801157a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	695b      	ldr	r3, [r3, #20]
 8011582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011586:	2b40      	cmp	r3, #64	@ 0x40
 8011588:	f040 80ce 	bne.w	8011728 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	685b      	ldr	r3, [r3, #4]
 8011594:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011598:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801159c:	2b00      	cmp	r3, #0
 801159e:	f000 80a9 	beq.w	80116f4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80115a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80115aa:	429a      	cmp	r2, r3
 80115ac:	f080 80a2 	bcs.w	80116f4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80115b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80115bc:	69db      	ldr	r3, [r3, #28]
 80115be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80115c2:	f000 8088 	beq.w	80116d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	330c      	adds	r3, #12
 80115cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80115d4:	e853 3f00 	ldrex	r3, [r3]
 80115d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80115dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80115e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80115e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	330c      	adds	r3, #12
 80115ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80115f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80115f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80115fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011602:	e841 2300 	strex	r3, r2, [r1]
 8011606:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801160a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801160e:	2b00      	cmp	r3, #0
 8011610:	d1d9      	bne.n	80115c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	3314      	adds	r3, #20
 8011618:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801161a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801161c:	e853 3f00 	ldrex	r3, [r3]
 8011620:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011622:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011624:	f023 0301 	bic.w	r3, r3, #1
 8011628:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	3314      	adds	r3, #20
 8011632:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011636:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801163a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801163c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801163e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011642:	e841 2300 	strex	r3, r2, [r1]
 8011646:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011648:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801164a:	2b00      	cmp	r3, #0
 801164c:	d1e1      	bne.n	8011612 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	3314      	adds	r3, #20
 8011654:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011656:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011658:	e853 3f00 	ldrex	r3, [r3]
 801165c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801165e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011664:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	3314      	adds	r3, #20
 801166e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011672:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011674:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011676:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011678:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801167a:	e841 2300 	strex	r3, r2, [r1]
 801167e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011680:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011682:	2b00      	cmp	r3, #0
 8011684:	d1e3      	bne.n	801164e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2220      	movs	r2, #32
 801168a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2200      	movs	r2, #0
 8011692:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	330c      	adds	r3, #12
 801169a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801169c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801169e:	e853 3f00 	ldrex	r3, [r3]
 80116a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80116a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80116a6:	f023 0310 	bic.w	r3, r3, #16
 80116aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	330c      	adds	r3, #12
 80116b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80116b8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80116ba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80116be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80116c0:	e841 2300 	strex	r3, r2, [r1]
 80116c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80116c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d1e3      	bne.n	8011694 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7fd fafb 	bl	800eccc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	2202      	movs	r2, #2
 80116da:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80116e4:	b29b      	uxth	r3, r3
 80116e6:	1ad3      	subs	r3, r2, r3
 80116e8:	b29b      	uxth	r3, r3
 80116ea:	4619      	mov	r1, r3
 80116ec:	6878      	ldr	r0, [r7, #4]
 80116ee:	f000 f8cf 	bl	8011890 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80116f2:	e0b3      	b.n	801185c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80116f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80116fc:	429a      	cmp	r2, r3
 80116fe:	f040 80ad 	bne.w	801185c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011706:	69db      	ldr	r3, [r3, #28]
 8011708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801170c:	f040 80a6 	bne.w	801185c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2202      	movs	r2, #2
 8011714:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801171a:	4619      	mov	r1, r3
 801171c:	6878      	ldr	r0, [r7, #4]
 801171e:	f000 f8b7 	bl	8011890 <HAL_UARTEx_RxEventCallback>
      return;
 8011722:	e09b      	b.n	801185c <HAL_UART_IRQHandler+0x548>
 8011724:	08011a95 	.word	0x08011a95
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011730:	b29b      	uxth	r3, r3
 8011732:	1ad3      	subs	r3, r2, r3
 8011734:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801173c:	b29b      	uxth	r3, r3
 801173e:	2b00      	cmp	r3, #0
 8011740:	f000 808e 	beq.w	8011860 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8011744:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011748:	2b00      	cmp	r3, #0
 801174a:	f000 8089 	beq.w	8011860 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	330c      	adds	r3, #12
 8011754:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011758:	e853 3f00 	ldrex	r3, [r3]
 801175c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801175e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011760:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011764:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	330c      	adds	r3, #12
 801176e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8011772:	647a      	str	r2, [r7, #68]	@ 0x44
 8011774:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011776:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011778:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801177a:	e841 2300 	strex	r3, r2, [r1]
 801177e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011782:	2b00      	cmp	r3, #0
 8011784:	d1e3      	bne.n	801174e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	3314      	adds	r3, #20
 801178c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011790:	e853 3f00 	ldrex	r3, [r3]
 8011794:	623b      	str	r3, [r7, #32]
   return(result);
 8011796:	6a3b      	ldr	r3, [r7, #32]
 8011798:	f023 0301 	bic.w	r3, r3, #1
 801179c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	3314      	adds	r3, #20
 80117a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80117aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80117ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80117b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80117b2:	e841 2300 	strex	r3, r2, [r1]
 80117b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80117b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d1e3      	bne.n	8011786 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2220      	movs	r2, #32
 80117c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2200      	movs	r2, #0
 80117ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	330c      	adds	r3, #12
 80117d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	e853 3f00 	ldrex	r3, [r3]
 80117da:	60fb      	str	r3, [r7, #12]
   return(result);
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	f023 0310 	bic.w	r3, r3, #16
 80117e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	330c      	adds	r3, #12
 80117ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80117f0:	61fa      	str	r2, [r7, #28]
 80117f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117f4:	69b9      	ldr	r1, [r7, #24]
 80117f6:	69fa      	ldr	r2, [r7, #28]
 80117f8:	e841 2300 	strex	r3, r2, [r1]
 80117fc:	617b      	str	r3, [r7, #20]
   return(result);
 80117fe:	697b      	ldr	r3, [r7, #20]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d1e3      	bne.n	80117cc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2202      	movs	r2, #2
 8011808:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801180a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801180e:	4619      	mov	r1, r3
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	f000 f83d 	bl	8011890 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011816:	e023      	b.n	8011860 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8011818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801181c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011820:	2b00      	cmp	r3, #0
 8011822:	d009      	beq.n	8011838 <HAL_UART_IRQHandler+0x524>
 8011824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801182c:	2b00      	cmp	r3, #0
 801182e:	d003      	beq.n	8011838 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	f000 f940 	bl	8011ab6 <UART_Transmit_IT>
    return;
 8011836:	e014      	b.n	8011862 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8011838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801183c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011840:	2b00      	cmp	r3, #0
 8011842:	d00e      	beq.n	8011862 <HAL_UART_IRQHandler+0x54e>
 8011844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801184c:	2b00      	cmp	r3, #0
 801184e:	d008      	beq.n	8011862 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f000 f980 	bl	8011b56 <UART_EndTransmit_IT>
    return;
 8011856:	e004      	b.n	8011862 <HAL_UART_IRQHandler+0x54e>
    return;
 8011858:	bf00      	nop
 801185a:	e002      	b.n	8011862 <HAL_UART_IRQHandler+0x54e>
      return;
 801185c:	bf00      	nop
 801185e:	e000      	b.n	8011862 <HAL_UART_IRQHandler+0x54e>
      return;
 8011860:	bf00      	nop
  }
}
 8011862:	37e8      	adds	r7, #232	@ 0xe8
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}

08011868 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011868:	b480      	push	{r7}
 801186a:	b083      	sub	sp, #12
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011870:	bf00      	nop
 8011872:	370c      	adds	r7, #12
 8011874:	46bd      	mov	sp, r7
 8011876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187a:	4770      	bx	lr

0801187c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801187c:	b480      	push	{r7}
 801187e:	b083      	sub	sp, #12
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8011884:	bf00      	nop
 8011886:	370c      	adds	r7, #12
 8011888:	46bd      	mov	sp, r7
 801188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188e:	4770      	bx	lr

08011890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011890:	b480      	push	{r7}
 8011892:	b083      	sub	sp, #12
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	460b      	mov	r3, r1
 801189a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801189c:	bf00      	nop
 801189e:	370c      	adds	r7, #12
 80118a0:	46bd      	mov	sp, r7
 80118a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a6:	4770      	bx	lr

080118a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b086      	sub	sp, #24
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	60f8      	str	r0, [r7, #12]
 80118b0:	60b9      	str	r1, [r7, #8]
 80118b2:	603b      	str	r3, [r7, #0]
 80118b4:	4613      	mov	r3, r2
 80118b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80118b8:	e03b      	b.n	8011932 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80118ba:	6a3b      	ldr	r3, [r7, #32]
 80118bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118c0:	d037      	beq.n	8011932 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80118c2:	f7fd f8f1 	bl	800eaa8 <HAL_GetTick>
 80118c6:	4602      	mov	r2, r0
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	1ad3      	subs	r3, r2, r3
 80118cc:	6a3a      	ldr	r2, [r7, #32]
 80118ce:	429a      	cmp	r2, r3
 80118d0:	d302      	bcc.n	80118d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80118d2:	6a3b      	ldr	r3, [r7, #32]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d101      	bne.n	80118dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80118d8:	2303      	movs	r3, #3
 80118da:	e03a      	b.n	8011952 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	68db      	ldr	r3, [r3, #12]
 80118e2:	f003 0304 	and.w	r3, r3, #4
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d023      	beq.n	8011932 <UART_WaitOnFlagUntilTimeout+0x8a>
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	2b80      	cmp	r3, #128	@ 0x80
 80118ee:	d020      	beq.n	8011932 <UART_WaitOnFlagUntilTimeout+0x8a>
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	2b40      	cmp	r3, #64	@ 0x40
 80118f4:	d01d      	beq.n	8011932 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	f003 0308 	and.w	r3, r3, #8
 8011900:	2b08      	cmp	r3, #8
 8011902:	d116      	bne.n	8011932 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8011904:	2300      	movs	r3, #0
 8011906:	617b      	str	r3, [r7, #20]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	617b      	str	r3, [r7, #20]
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	685b      	ldr	r3, [r3, #4]
 8011916:	617b      	str	r3, [r7, #20]
 8011918:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801191a:	68f8      	ldr	r0, [r7, #12]
 801191c:	f000 f857 	bl	80119ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	2208      	movs	r2, #8
 8011924:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	2200      	movs	r2, #0
 801192a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 801192e:	2301      	movs	r3, #1
 8011930:	e00f      	b.n	8011952 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	681a      	ldr	r2, [r3, #0]
 8011938:	68bb      	ldr	r3, [r7, #8]
 801193a:	4013      	ands	r3, r2
 801193c:	68ba      	ldr	r2, [r7, #8]
 801193e:	429a      	cmp	r2, r3
 8011940:	bf0c      	ite	eq
 8011942:	2301      	moveq	r3, #1
 8011944:	2300      	movne	r3, #0
 8011946:	b2db      	uxtb	r3, r3
 8011948:	461a      	mov	r2, r3
 801194a:	79fb      	ldrb	r3, [r7, #7]
 801194c:	429a      	cmp	r2, r3
 801194e:	d0b4      	beq.n	80118ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011950:	2300      	movs	r3, #0
}
 8011952:	4618      	mov	r0, r3
 8011954:	3718      	adds	r7, #24
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}

0801195a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801195a:	b480      	push	{r7}
 801195c:	b085      	sub	sp, #20
 801195e:	af00      	add	r7, sp, #0
 8011960:	60f8      	str	r0, [r7, #12]
 8011962:	60b9      	str	r1, [r7, #8]
 8011964:	4613      	mov	r3, r2
 8011966:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	68ba      	ldr	r2, [r7, #8]
 801196c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	88fa      	ldrh	r2, [r7, #6]
 8011972:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	88fa      	ldrh	r2, [r7, #6]
 8011978:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	2200      	movs	r2, #0
 801197e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	2222      	movs	r2, #34	@ 0x22
 8011984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	691b      	ldr	r3, [r3, #16]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d007      	beq.n	80119a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	68da      	ldr	r2, [r3, #12]
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801199e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	695a      	ldr	r2, [r3, #20]
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	f042 0201 	orr.w	r2, r2, #1
 80119ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	68da      	ldr	r2, [r3, #12]
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	f042 0220 	orr.w	r2, r2, #32
 80119be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80119c0:	2300      	movs	r3, #0
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	3714      	adds	r7, #20
 80119c6:	46bd      	mov	sp, r7
 80119c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119cc:	4770      	bx	lr

080119ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80119ce:	b480      	push	{r7}
 80119d0:	b095      	sub	sp, #84	@ 0x54
 80119d2:	af00      	add	r7, sp, #0
 80119d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	330c      	adds	r3, #12
 80119dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119e0:	e853 3f00 	ldrex	r3, [r3]
 80119e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80119e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80119ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	330c      	adds	r3, #12
 80119f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80119f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80119f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80119fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80119fe:	e841 2300 	strex	r3, r2, [r1]
 8011a02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d1e5      	bne.n	80119d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	3314      	adds	r3, #20
 8011a10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a12:	6a3b      	ldr	r3, [r7, #32]
 8011a14:	e853 3f00 	ldrex	r3, [r3]
 8011a18:	61fb      	str	r3, [r7, #28]
   return(result);
 8011a1a:	69fb      	ldr	r3, [r7, #28]
 8011a1c:	f023 0301 	bic.w	r3, r3, #1
 8011a20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	3314      	adds	r3, #20
 8011a28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011a2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011a30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a32:	e841 2300 	strex	r3, r2, [r1]
 8011a36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d1e5      	bne.n	8011a0a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a42:	2b01      	cmp	r3, #1
 8011a44:	d119      	bne.n	8011a7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	330c      	adds	r3, #12
 8011a4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	e853 3f00 	ldrex	r3, [r3]
 8011a54:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	f023 0310 	bic.w	r3, r3, #16
 8011a5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	330c      	adds	r3, #12
 8011a64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011a66:	61ba      	str	r2, [r7, #24]
 8011a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a6a:	6979      	ldr	r1, [r7, #20]
 8011a6c:	69ba      	ldr	r2, [r7, #24]
 8011a6e:	e841 2300 	strex	r3, r2, [r1]
 8011a72:	613b      	str	r3, [r7, #16]
   return(result);
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d1e5      	bne.n	8011a46 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2220      	movs	r2, #32
 8011a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	2200      	movs	r2, #0
 8011a86:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8011a88:	bf00      	nop
 8011a8a:	3754      	adds	r7, #84	@ 0x54
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a92:	4770      	bx	lr

08011a94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b084      	sub	sp, #16
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011aa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011aa8:	68f8      	ldr	r0, [r7, #12]
 8011aaa:	f7ff fee7 	bl	801187c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011aae:	bf00      	nop
 8011ab0:	3710      	adds	r7, #16
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	bd80      	pop	{r7, pc}

08011ab6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011ab6:	b480      	push	{r7}
 8011ab8:	b085      	sub	sp, #20
 8011aba:	af00      	add	r7, sp, #0
 8011abc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011ac4:	b2db      	uxtb	r3, r3
 8011ac6:	2b21      	cmp	r3, #33	@ 0x21
 8011ac8:	d13e      	bne.n	8011b48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	689b      	ldr	r3, [r3, #8]
 8011ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011ad2:	d114      	bne.n	8011afe <UART_Transmit_IT+0x48>
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	691b      	ldr	r3, [r3, #16]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d110      	bne.n	8011afe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	6a1b      	ldr	r3, [r3, #32]
 8011ae0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	881b      	ldrh	r3, [r3, #0]
 8011ae6:	461a      	mov	r2, r3
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011af0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	6a1b      	ldr	r3, [r3, #32]
 8011af6:	1c9a      	adds	r2, r3, #2
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	621a      	str	r2, [r3, #32]
 8011afc:	e008      	b.n	8011b10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	6a1b      	ldr	r3, [r3, #32]
 8011b02:	1c59      	adds	r1, r3, #1
 8011b04:	687a      	ldr	r2, [r7, #4]
 8011b06:	6211      	str	r1, [r2, #32]
 8011b08:	781a      	ldrb	r2, [r3, #0]
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8011b14:	b29b      	uxth	r3, r3
 8011b16:	3b01      	subs	r3, #1
 8011b18:	b29b      	uxth	r3, r3
 8011b1a:	687a      	ldr	r2, [r7, #4]
 8011b1c:	4619      	mov	r1, r3
 8011b1e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d10f      	bne.n	8011b44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	68da      	ldr	r2, [r3, #12]
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011b32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	68da      	ldr	r2, [r3, #12]
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011b42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011b44:	2300      	movs	r3, #0
 8011b46:	e000      	b.n	8011b4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011b48:	2302      	movs	r3, #2
  }
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3714      	adds	r7, #20
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b54:	4770      	bx	lr

08011b56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011b56:	b580      	push	{r7, lr}
 8011b58:	b082      	sub	sp, #8
 8011b5a:	af00      	add	r7, sp, #0
 8011b5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	68da      	ldr	r2, [r3, #12]
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011b6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	2220      	movs	r2, #32
 8011b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f7ff fe76 	bl	8011868 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011b7c:	2300      	movs	r3, #0
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3708      	adds	r7, #8
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}

08011b86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011b86:	b580      	push	{r7, lr}
 8011b88:	b08c      	sub	sp, #48	@ 0x30
 8011b8a:	af00      	add	r7, sp, #0
 8011b8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8011b8e:	2300      	movs	r3, #0
 8011b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8011b92:	2300      	movs	r3, #0
 8011b94:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011b9c:	b2db      	uxtb	r3, r3
 8011b9e:	2b22      	cmp	r3, #34	@ 0x22
 8011ba0:	f040 80aa 	bne.w	8011cf8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	689b      	ldr	r3, [r3, #8]
 8011ba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011bac:	d115      	bne.n	8011bda <UART_Receive_IT+0x54>
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	691b      	ldr	r3, [r3, #16]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d111      	bne.n	8011bda <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	685b      	ldr	r3, [r3, #4]
 8011bc2:	b29b      	uxth	r3, r3
 8011bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011bc8:	b29a      	uxth	r2, r3
 8011bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bd2:	1c9a      	adds	r2, r3, #2
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	629a      	str	r2, [r3, #40]	@ 0x28
 8011bd8:	e024      	b.n	8011c24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	689b      	ldr	r3, [r3, #8]
 8011be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011be8:	d007      	beq.n	8011bfa <UART_Receive_IT+0x74>
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	689b      	ldr	r3, [r3, #8]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d10a      	bne.n	8011c08 <UART_Receive_IT+0x82>
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	691b      	ldr	r3, [r3, #16]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d106      	bne.n	8011c08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	685b      	ldr	r3, [r3, #4]
 8011c00:	b2da      	uxtb	r2, r3
 8011c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c04:	701a      	strb	r2, [r3, #0]
 8011c06:	e008      	b.n	8011c1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	685b      	ldr	r3, [r3, #4]
 8011c0e:	b2db      	uxtb	r3, r3
 8011c10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c14:	b2da      	uxtb	r2, r3
 8011c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c1e:	1c5a      	adds	r2, r3, #1
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011c28:	b29b      	uxth	r3, r3
 8011c2a:	3b01      	subs	r3, #1
 8011c2c:	b29b      	uxth	r3, r3
 8011c2e:	687a      	ldr	r2, [r7, #4]
 8011c30:	4619      	mov	r1, r3
 8011c32:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d15d      	bne.n	8011cf4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	68da      	ldr	r2, [r3, #12]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	f022 0220 	bic.w	r2, r2, #32
 8011c46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	68da      	ldr	r2, [r3, #12]
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011c56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	695a      	ldr	r2, [r3, #20]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	f022 0201 	bic.w	r2, r2, #1
 8011c66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	2220      	movs	r2, #32
 8011c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2200      	movs	r2, #0
 8011c74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c7a:	2b01      	cmp	r3, #1
 8011c7c:	d135      	bne.n	8011cea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	2200      	movs	r2, #0
 8011c82:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	330c      	adds	r3, #12
 8011c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	e853 3f00 	ldrex	r3, [r3]
 8011c92:	613b      	str	r3, [r7, #16]
   return(result);
 8011c94:	693b      	ldr	r3, [r7, #16]
 8011c96:	f023 0310 	bic.w	r3, r3, #16
 8011c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	330c      	adds	r3, #12
 8011ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ca4:	623a      	str	r2, [r7, #32]
 8011ca6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ca8:	69f9      	ldr	r1, [r7, #28]
 8011caa:	6a3a      	ldr	r2, [r7, #32]
 8011cac:	e841 2300 	strex	r3, r2, [r1]
 8011cb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8011cb2:	69bb      	ldr	r3, [r7, #24]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d1e5      	bne.n	8011c84 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	f003 0310 	and.w	r3, r3, #16
 8011cc2:	2b10      	cmp	r3, #16
 8011cc4:	d10a      	bne.n	8011cdc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	60fb      	str	r3, [r7, #12]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	60fb      	str	r3, [r7, #12]
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	685b      	ldr	r3, [r3, #4]
 8011cd8:	60fb      	str	r3, [r7, #12]
 8011cda:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f7ff fdd4 	bl	8011890 <HAL_UARTEx_RxEventCallback>
 8011ce8:	e002      	b.n	8011cf0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	f7fc fd7c 	bl	800e7e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	e002      	b.n	8011cfa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	e000      	b.n	8011cfa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8011cf8:	2302      	movs	r3, #2
  }
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3730      	adds	r7, #48	@ 0x30
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
	...

08011d04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011d08:	b0c0      	sub	sp, #256	@ 0x100
 8011d0a:	af00      	add	r7, sp, #0
 8011d0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	691b      	ldr	r3, [r3, #16]
 8011d18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8011d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d20:	68d9      	ldr	r1, [r3, #12]
 8011d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d26:	681a      	ldr	r2, [r3, #0]
 8011d28:	ea40 0301 	orr.w	r3, r0, r1
 8011d2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d32:	689a      	ldr	r2, [r3, #8]
 8011d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d38:	691b      	ldr	r3, [r3, #16]
 8011d3a:	431a      	orrs	r2, r3
 8011d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d40:	695b      	ldr	r3, [r3, #20]
 8011d42:	431a      	orrs	r2, r3
 8011d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d48:	69db      	ldr	r3, [r3, #28]
 8011d4a:	4313      	orrs	r3, r2
 8011d4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	68db      	ldr	r3, [r3, #12]
 8011d58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8011d5c:	f021 010c 	bic.w	r1, r1, #12
 8011d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d64:	681a      	ldr	r2, [r3, #0]
 8011d66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011d6a:	430b      	orrs	r3, r1
 8011d6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	695b      	ldr	r3, [r3, #20]
 8011d76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8011d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d7e:	6999      	ldr	r1, [r3, #24]
 8011d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d84:	681a      	ldr	r2, [r3, #0]
 8011d86:	ea40 0301 	orr.w	r3, r0, r1
 8011d8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d90:	681a      	ldr	r2, [r3, #0]
 8011d92:	4b8f      	ldr	r3, [pc, #572]	@ (8011fd0 <UART_SetConfig+0x2cc>)
 8011d94:	429a      	cmp	r2, r3
 8011d96:	d005      	beq.n	8011da4 <UART_SetConfig+0xa0>
 8011d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d9c:	681a      	ldr	r2, [r3, #0]
 8011d9e:	4b8d      	ldr	r3, [pc, #564]	@ (8011fd4 <UART_SetConfig+0x2d0>)
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d104      	bne.n	8011dae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011da4:	f7fd fb72 	bl	800f48c <HAL_RCC_GetPCLK2Freq>
 8011da8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8011dac:	e003      	b.n	8011db6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011dae:	f7fd fb59 	bl	800f464 <HAL_RCC_GetPCLK1Freq>
 8011db2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011dba:	69db      	ldr	r3, [r3, #28]
 8011dbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011dc0:	f040 810c 	bne.w	8011fdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011dc8:	2200      	movs	r2, #0
 8011dca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8011dce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8011dd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8011dd6:	4622      	mov	r2, r4
 8011dd8:	462b      	mov	r3, r5
 8011dda:	1891      	adds	r1, r2, r2
 8011ddc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8011dde:	415b      	adcs	r3, r3
 8011de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011de2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011de6:	4621      	mov	r1, r4
 8011de8:	eb12 0801 	adds.w	r8, r2, r1
 8011dec:	4629      	mov	r1, r5
 8011dee:	eb43 0901 	adc.w	r9, r3, r1
 8011df2:	f04f 0200 	mov.w	r2, #0
 8011df6:	f04f 0300 	mov.w	r3, #0
 8011dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011e06:	4690      	mov	r8, r2
 8011e08:	4699      	mov	r9, r3
 8011e0a:	4623      	mov	r3, r4
 8011e0c:	eb18 0303 	adds.w	r3, r8, r3
 8011e10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011e14:	462b      	mov	r3, r5
 8011e16:	eb49 0303 	adc.w	r3, r9, r3
 8011e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8011e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e22:	685b      	ldr	r3, [r3, #4]
 8011e24:	2200      	movs	r2, #0
 8011e26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8011e2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8011e2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8011e32:	460b      	mov	r3, r1
 8011e34:	18db      	adds	r3, r3, r3
 8011e36:	653b      	str	r3, [r7, #80]	@ 0x50
 8011e38:	4613      	mov	r3, r2
 8011e3a:	eb42 0303 	adc.w	r3, r2, r3
 8011e3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8011e40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8011e44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8011e48:	f7f6 fefe 	bl	8008c48 <__aeabi_uldivmod>
 8011e4c:	4602      	mov	r2, r0
 8011e4e:	460b      	mov	r3, r1
 8011e50:	4b61      	ldr	r3, [pc, #388]	@ (8011fd8 <UART_SetConfig+0x2d4>)
 8011e52:	fba3 2302 	umull	r2, r3, r3, r2
 8011e56:	095b      	lsrs	r3, r3, #5
 8011e58:	011c      	lsls	r4, r3, #4
 8011e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011e5e:	2200      	movs	r2, #0
 8011e60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011e64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8011e68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8011e6c:	4642      	mov	r2, r8
 8011e6e:	464b      	mov	r3, r9
 8011e70:	1891      	adds	r1, r2, r2
 8011e72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011e74:	415b      	adcs	r3, r3
 8011e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011e78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8011e7c:	4641      	mov	r1, r8
 8011e7e:	eb12 0a01 	adds.w	sl, r2, r1
 8011e82:	4649      	mov	r1, r9
 8011e84:	eb43 0b01 	adc.w	fp, r3, r1
 8011e88:	f04f 0200 	mov.w	r2, #0
 8011e8c:	f04f 0300 	mov.w	r3, #0
 8011e90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011e94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011e98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011e9c:	4692      	mov	sl, r2
 8011e9e:	469b      	mov	fp, r3
 8011ea0:	4643      	mov	r3, r8
 8011ea2:	eb1a 0303 	adds.w	r3, sl, r3
 8011ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011eaa:	464b      	mov	r3, r9
 8011eac:	eb4b 0303 	adc.w	r3, fp, r3
 8011eb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8011eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011eb8:	685b      	ldr	r3, [r3, #4]
 8011eba:	2200      	movs	r2, #0
 8011ebc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011ec0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8011ec4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8011ec8:	460b      	mov	r3, r1
 8011eca:	18db      	adds	r3, r3, r3
 8011ecc:	643b      	str	r3, [r7, #64]	@ 0x40
 8011ece:	4613      	mov	r3, r2
 8011ed0:	eb42 0303 	adc.w	r3, r2, r3
 8011ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8011ed6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8011eda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8011ede:	f7f6 feb3 	bl	8008c48 <__aeabi_uldivmod>
 8011ee2:	4602      	mov	r2, r0
 8011ee4:	460b      	mov	r3, r1
 8011ee6:	4611      	mov	r1, r2
 8011ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8011fd8 <UART_SetConfig+0x2d4>)
 8011eea:	fba3 2301 	umull	r2, r3, r3, r1
 8011eee:	095b      	lsrs	r3, r3, #5
 8011ef0:	2264      	movs	r2, #100	@ 0x64
 8011ef2:	fb02 f303 	mul.w	r3, r2, r3
 8011ef6:	1acb      	subs	r3, r1, r3
 8011ef8:	00db      	lsls	r3, r3, #3
 8011efa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8011efe:	4b36      	ldr	r3, [pc, #216]	@ (8011fd8 <UART_SetConfig+0x2d4>)
 8011f00:	fba3 2302 	umull	r2, r3, r3, r2
 8011f04:	095b      	lsrs	r3, r3, #5
 8011f06:	005b      	lsls	r3, r3, #1
 8011f08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8011f0c:	441c      	add	r4, r3
 8011f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011f12:	2200      	movs	r2, #0
 8011f14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011f18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8011f1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8011f20:	4642      	mov	r2, r8
 8011f22:	464b      	mov	r3, r9
 8011f24:	1891      	adds	r1, r2, r2
 8011f26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8011f28:	415b      	adcs	r3, r3
 8011f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011f2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8011f30:	4641      	mov	r1, r8
 8011f32:	1851      	adds	r1, r2, r1
 8011f34:	6339      	str	r1, [r7, #48]	@ 0x30
 8011f36:	4649      	mov	r1, r9
 8011f38:	414b      	adcs	r3, r1
 8011f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f3c:	f04f 0200 	mov.w	r2, #0
 8011f40:	f04f 0300 	mov.w	r3, #0
 8011f44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8011f48:	4659      	mov	r1, fp
 8011f4a:	00cb      	lsls	r3, r1, #3
 8011f4c:	4651      	mov	r1, sl
 8011f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011f52:	4651      	mov	r1, sl
 8011f54:	00ca      	lsls	r2, r1, #3
 8011f56:	4610      	mov	r0, r2
 8011f58:	4619      	mov	r1, r3
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	4642      	mov	r2, r8
 8011f5e:	189b      	adds	r3, r3, r2
 8011f60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011f64:	464b      	mov	r3, r9
 8011f66:	460a      	mov	r2, r1
 8011f68:	eb42 0303 	adc.w	r3, r2, r3
 8011f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f74:	685b      	ldr	r3, [r3, #4]
 8011f76:	2200      	movs	r2, #0
 8011f78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011f7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8011f80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8011f84:	460b      	mov	r3, r1
 8011f86:	18db      	adds	r3, r3, r3
 8011f88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011f8a:	4613      	mov	r3, r2
 8011f8c:	eb42 0303 	adc.w	r3, r2, r3
 8011f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011f92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8011f96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8011f9a:	f7f6 fe55 	bl	8008c48 <__aeabi_uldivmod>
 8011f9e:	4602      	mov	r2, r0
 8011fa0:	460b      	mov	r3, r1
 8011fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8011fd8 <UART_SetConfig+0x2d4>)
 8011fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8011fa8:	095b      	lsrs	r3, r3, #5
 8011faa:	2164      	movs	r1, #100	@ 0x64
 8011fac:	fb01 f303 	mul.w	r3, r1, r3
 8011fb0:	1ad3      	subs	r3, r2, r3
 8011fb2:	00db      	lsls	r3, r3, #3
 8011fb4:	3332      	adds	r3, #50	@ 0x32
 8011fb6:	4a08      	ldr	r2, [pc, #32]	@ (8011fd8 <UART_SetConfig+0x2d4>)
 8011fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8011fbc:	095b      	lsrs	r3, r3, #5
 8011fbe:	f003 0207 	and.w	r2, r3, #7
 8011fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	4422      	add	r2, r4
 8011fca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011fcc:	e106      	b.n	80121dc <UART_SetConfig+0x4d8>
 8011fce:	bf00      	nop
 8011fd0:	40011000 	.word	0x40011000
 8011fd4:	40011400 	.word	0x40011400
 8011fd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011fe6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011fea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8011fee:	4642      	mov	r2, r8
 8011ff0:	464b      	mov	r3, r9
 8011ff2:	1891      	adds	r1, r2, r2
 8011ff4:	6239      	str	r1, [r7, #32]
 8011ff6:	415b      	adcs	r3, r3
 8011ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8011ffa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011ffe:	4641      	mov	r1, r8
 8012000:	1854      	adds	r4, r2, r1
 8012002:	4649      	mov	r1, r9
 8012004:	eb43 0501 	adc.w	r5, r3, r1
 8012008:	f04f 0200 	mov.w	r2, #0
 801200c:	f04f 0300 	mov.w	r3, #0
 8012010:	00eb      	lsls	r3, r5, #3
 8012012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012016:	00e2      	lsls	r2, r4, #3
 8012018:	4614      	mov	r4, r2
 801201a:	461d      	mov	r5, r3
 801201c:	4643      	mov	r3, r8
 801201e:	18e3      	adds	r3, r4, r3
 8012020:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012024:	464b      	mov	r3, r9
 8012026:	eb45 0303 	adc.w	r3, r5, r3
 801202a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801202e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012032:	685b      	ldr	r3, [r3, #4]
 8012034:	2200      	movs	r2, #0
 8012036:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801203a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801203e:	f04f 0200 	mov.w	r2, #0
 8012042:	f04f 0300 	mov.w	r3, #0
 8012046:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801204a:	4629      	mov	r1, r5
 801204c:	008b      	lsls	r3, r1, #2
 801204e:	4621      	mov	r1, r4
 8012050:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012054:	4621      	mov	r1, r4
 8012056:	008a      	lsls	r2, r1, #2
 8012058:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 801205c:	f7f6 fdf4 	bl	8008c48 <__aeabi_uldivmod>
 8012060:	4602      	mov	r2, r0
 8012062:	460b      	mov	r3, r1
 8012064:	4b60      	ldr	r3, [pc, #384]	@ (80121e8 <UART_SetConfig+0x4e4>)
 8012066:	fba3 2302 	umull	r2, r3, r3, r2
 801206a:	095b      	lsrs	r3, r3, #5
 801206c:	011c      	lsls	r4, r3, #4
 801206e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012072:	2200      	movs	r2, #0
 8012074:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012078:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801207c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8012080:	4642      	mov	r2, r8
 8012082:	464b      	mov	r3, r9
 8012084:	1891      	adds	r1, r2, r2
 8012086:	61b9      	str	r1, [r7, #24]
 8012088:	415b      	adcs	r3, r3
 801208a:	61fb      	str	r3, [r7, #28]
 801208c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012090:	4641      	mov	r1, r8
 8012092:	1851      	adds	r1, r2, r1
 8012094:	6139      	str	r1, [r7, #16]
 8012096:	4649      	mov	r1, r9
 8012098:	414b      	adcs	r3, r1
 801209a:	617b      	str	r3, [r7, #20]
 801209c:	f04f 0200 	mov.w	r2, #0
 80120a0:	f04f 0300 	mov.w	r3, #0
 80120a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80120a8:	4659      	mov	r1, fp
 80120aa:	00cb      	lsls	r3, r1, #3
 80120ac:	4651      	mov	r1, sl
 80120ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80120b2:	4651      	mov	r1, sl
 80120b4:	00ca      	lsls	r2, r1, #3
 80120b6:	4610      	mov	r0, r2
 80120b8:	4619      	mov	r1, r3
 80120ba:	4603      	mov	r3, r0
 80120bc:	4642      	mov	r2, r8
 80120be:	189b      	adds	r3, r3, r2
 80120c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80120c4:	464b      	mov	r3, r9
 80120c6:	460a      	mov	r2, r1
 80120c8:	eb42 0303 	adc.w	r3, r2, r3
 80120cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80120d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80120d4:	685b      	ldr	r3, [r3, #4]
 80120d6:	2200      	movs	r2, #0
 80120d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80120da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80120dc:	f04f 0200 	mov.w	r2, #0
 80120e0:	f04f 0300 	mov.w	r3, #0
 80120e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80120e8:	4649      	mov	r1, r9
 80120ea:	008b      	lsls	r3, r1, #2
 80120ec:	4641      	mov	r1, r8
 80120ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80120f2:	4641      	mov	r1, r8
 80120f4:	008a      	lsls	r2, r1, #2
 80120f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80120fa:	f7f6 fda5 	bl	8008c48 <__aeabi_uldivmod>
 80120fe:	4602      	mov	r2, r0
 8012100:	460b      	mov	r3, r1
 8012102:	4611      	mov	r1, r2
 8012104:	4b38      	ldr	r3, [pc, #224]	@ (80121e8 <UART_SetConfig+0x4e4>)
 8012106:	fba3 2301 	umull	r2, r3, r3, r1
 801210a:	095b      	lsrs	r3, r3, #5
 801210c:	2264      	movs	r2, #100	@ 0x64
 801210e:	fb02 f303 	mul.w	r3, r2, r3
 8012112:	1acb      	subs	r3, r1, r3
 8012114:	011b      	lsls	r3, r3, #4
 8012116:	3332      	adds	r3, #50	@ 0x32
 8012118:	4a33      	ldr	r2, [pc, #204]	@ (80121e8 <UART_SetConfig+0x4e4>)
 801211a:	fba2 2303 	umull	r2, r3, r2, r3
 801211e:	095b      	lsrs	r3, r3, #5
 8012120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012124:	441c      	add	r4, r3
 8012126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801212a:	2200      	movs	r2, #0
 801212c:	673b      	str	r3, [r7, #112]	@ 0x70
 801212e:	677a      	str	r2, [r7, #116]	@ 0x74
 8012130:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8012134:	4642      	mov	r2, r8
 8012136:	464b      	mov	r3, r9
 8012138:	1891      	adds	r1, r2, r2
 801213a:	60b9      	str	r1, [r7, #8]
 801213c:	415b      	adcs	r3, r3
 801213e:	60fb      	str	r3, [r7, #12]
 8012140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012144:	4641      	mov	r1, r8
 8012146:	1851      	adds	r1, r2, r1
 8012148:	6039      	str	r1, [r7, #0]
 801214a:	4649      	mov	r1, r9
 801214c:	414b      	adcs	r3, r1
 801214e:	607b      	str	r3, [r7, #4]
 8012150:	f04f 0200 	mov.w	r2, #0
 8012154:	f04f 0300 	mov.w	r3, #0
 8012158:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801215c:	4659      	mov	r1, fp
 801215e:	00cb      	lsls	r3, r1, #3
 8012160:	4651      	mov	r1, sl
 8012162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012166:	4651      	mov	r1, sl
 8012168:	00ca      	lsls	r2, r1, #3
 801216a:	4610      	mov	r0, r2
 801216c:	4619      	mov	r1, r3
 801216e:	4603      	mov	r3, r0
 8012170:	4642      	mov	r2, r8
 8012172:	189b      	adds	r3, r3, r2
 8012174:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012176:	464b      	mov	r3, r9
 8012178:	460a      	mov	r2, r1
 801217a:	eb42 0303 	adc.w	r3, r2, r3
 801217e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012184:	685b      	ldr	r3, [r3, #4]
 8012186:	2200      	movs	r2, #0
 8012188:	663b      	str	r3, [r7, #96]	@ 0x60
 801218a:	667a      	str	r2, [r7, #100]	@ 0x64
 801218c:	f04f 0200 	mov.w	r2, #0
 8012190:	f04f 0300 	mov.w	r3, #0
 8012194:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8012198:	4649      	mov	r1, r9
 801219a:	008b      	lsls	r3, r1, #2
 801219c:	4641      	mov	r1, r8
 801219e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80121a2:	4641      	mov	r1, r8
 80121a4:	008a      	lsls	r2, r1, #2
 80121a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80121aa:	f7f6 fd4d 	bl	8008c48 <__aeabi_uldivmod>
 80121ae:	4602      	mov	r2, r0
 80121b0:	460b      	mov	r3, r1
 80121b2:	4b0d      	ldr	r3, [pc, #52]	@ (80121e8 <UART_SetConfig+0x4e4>)
 80121b4:	fba3 1302 	umull	r1, r3, r3, r2
 80121b8:	095b      	lsrs	r3, r3, #5
 80121ba:	2164      	movs	r1, #100	@ 0x64
 80121bc:	fb01 f303 	mul.w	r3, r1, r3
 80121c0:	1ad3      	subs	r3, r2, r3
 80121c2:	011b      	lsls	r3, r3, #4
 80121c4:	3332      	adds	r3, #50	@ 0x32
 80121c6:	4a08      	ldr	r2, [pc, #32]	@ (80121e8 <UART_SetConfig+0x4e4>)
 80121c8:	fba2 2303 	umull	r2, r3, r2, r3
 80121cc:	095b      	lsrs	r3, r3, #5
 80121ce:	f003 020f 	and.w	r2, r3, #15
 80121d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	4422      	add	r2, r4
 80121da:	609a      	str	r2, [r3, #8]
}
 80121dc:	bf00      	nop
 80121de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80121e2:	46bd      	mov	sp, r7
 80121e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80121e8:	51eb851f 	.word	0x51eb851f

080121ec <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80121ec:	b480      	push	{r7}
 80121ee:	b083      	sub	sp, #12
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f103 0208 	add.w	r2, r3, #8
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	f04f 32ff 	mov.w	r2, #4294967295
 8012204:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f103 0208 	add.w	r2, r3, #8
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f103 0208 	add.w	r2, r3, #8
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2200      	movs	r2, #0
 801221e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012220:	bf00      	nop
 8012222:	370c      	adds	r7, #12
 8012224:	46bd      	mov	sp, r7
 8012226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222a:	4770      	bx	lr

0801222c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801222c:	b480      	push	{r7}
 801222e:	b083      	sub	sp, #12
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	2200      	movs	r2, #0
 8012238:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801223a:	bf00      	nop
 801223c:	370c      	adds	r7, #12
 801223e:	46bd      	mov	sp, r7
 8012240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012244:	4770      	bx	lr

08012246 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8012246:	b480      	push	{r7}
 8012248:	b085      	sub	sp, #20
 801224a:	af00      	add	r7, sp, #0
 801224c:	6078      	str	r0, [r7, #4]
 801224e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	685b      	ldr	r3, [r3, #4]
 8012254:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8012256:	683b      	ldr	r3, [r7, #0]
 8012258:	68fa      	ldr	r2, [r7, #12]
 801225a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	689a      	ldr	r2, [r3, #8]
 8012260:	683b      	ldr	r3, [r7, #0]
 8012262:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	689b      	ldr	r3, [r3, #8]
 8012268:	683a      	ldr	r2, [r7, #0]
 801226a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	683a      	ldr	r2, [r7, #0]
 8012270:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	687a      	ldr	r2, [r7, #4]
 8012276:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	1c5a      	adds	r2, r3, #1
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	601a      	str	r2, [r3, #0]
}
 8012282:	bf00      	nop
 8012284:	3714      	adds	r7, #20
 8012286:	46bd      	mov	sp, r7
 8012288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228c:	4770      	bx	lr

0801228e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 801228e:	b480      	push	{r7}
 8012290:	b085      	sub	sp, #20
 8012292:	af00      	add	r7, sp, #0
 8012294:	6078      	str	r0, [r7, #4]
 8012296:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122a4:	d103      	bne.n	80122ae <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	691b      	ldr	r3, [r3, #16]
 80122aa:	60fb      	str	r3, [r7, #12]
 80122ac:	e00c      	b.n	80122c8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	3308      	adds	r3, #8
 80122b2:	60fb      	str	r3, [r7, #12]
 80122b4:	e002      	b.n	80122bc <vListInsert+0x2e>
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	685b      	ldr	r3, [r3, #4]
 80122ba:	60fb      	str	r3, [r7, #12]
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	68ba      	ldr	r2, [r7, #8]
 80122c4:	429a      	cmp	r2, r3
 80122c6:	d2f6      	bcs.n	80122b6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	685a      	ldr	r2, [r3, #4]
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	683a      	ldr	r2, [r7, #0]
 80122d6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	68fa      	ldr	r2, [r7, #12]
 80122dc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	683a      	ldr	r2, [r7, #0]
 80122e2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	687a      	ldr	r2, [r7, #4]
 80122e8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	1c5a      	adds	r2, r3, #1
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	601a      	str	r2, [r3, #0]
}
 80122f4:	bf00      	nop
 80122f6:	3714      	adds	r7, #20
 80122f8:	46bd      	mov	sp, r7
 80122fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fe:	4770      	bx	lr

08012300 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012300:	b480      	push	{r7}
 8012302:	b085      	sub	sp, #20
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	691b      	ldr	r3, [r3, #16]
 801230c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	685b      	ldr	r3, [r3, #4]
 8012312:	687a      	ldr	r2, [r7, #4]
 8012314:	6892      	ldr	r2, [r2, #8]
 8012316:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	689b      	ldr	r3, [r3, #8]
 801231c:	687a      	ldr	r2, [r7, #4]
 801231e:	6852      	ldr	r2, [r2, #4]
 8012320:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	687a      	ldr	r2, [r7, #4]
 8012328:	429a      	cmp	r2, r3
 801232a:	d103      	bne.n	8012334 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	689a      	ldr	r2, [r3, #8]
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2200      	movs	r2, #0
 8012338:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	1e5a      	subs	r2, r3, #1
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	681b      	ldr	r3, [r3, #0]
}
 8012348:	4618      	mov	r0, r3
 801234a:	3714      	adds	r7, #20
 801234c:	46bd      	mov	sp, r7
 801234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012352:	4770      	bx	lr

08012354 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b084      	sub	sp, #16
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d10b      	bne.n	8012380 <xQueueGenericReset+0x2c>
        __asm volatile
 8012368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801236c:	f383 8811 	msr	BASEPRI, r3
 8012370:	f3bf 8f6f 	isb	sy
 8012374:	f3bf 8f4f 	dsb	sy
 8012378:	60bb      	str	r3, [r7, #8]
    }
 801237a:	bf00      	nop
 801237c:	bf00      	nop
 801237e:	e7fd      	b.n	801237c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8012380:	f002 fa2c 	bl	80147dc <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	681a      	ldr	r2, [r3, #0]
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801238c:	68f9      	ldr	r1, [r7, #12]
 801238e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012390:	fb01 f303 	mul.w	r3, r1, r3
 8012394:	441a      	add	r2, r3
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	2200      	movs	r2, #0
 801239e:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	681a      	ldr	r2, [r3, #0]
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	681a      	ldr	r2, [r3, #0]
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80123b0:	3b01      	subs	r3, #1
 80123b2:	68f9      	ldr	r1, [r7, #12]
 80123b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80123b6:	fb01 f303 	mul.w	r3, r1, r3
 80123ba:	441a      	add	r2, r3
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	22ff      	movs	r2, #255	@ 0xff
 80123c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	22ff      	movs	r2, #255	@ 0xff
 80123cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d114      	bne.n	8012400 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	691b      	ldr	r3, [r3, #16]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d01a      	beq.n	8012414 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	3310      	adds	r3, #16
 80123e2:	4618      	mov	r0, r3
 80123e4:	f001 f9f2 	bl	80137cc <xTaskRemoveFromEventList>
 80123e8:	4603      	mov	r3, r0
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d012      	beq.n	8012414 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80123ee:	4b0d      	ldr	r3, [pc, #52]	@ (8012424 <xQueueGenericReset+0xd0>)
 80123f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80123f4:	601a      	str	r2, [r3, #0]
 80123f6:	f3bf 8f4f 	dsb	sy
 80123fa:	f3bf 8f6f 	isb	sy
 80123fe:	e009      	b.n	8012414 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	3310      	adds	r3, #16
 8012404:	4618      	mov	r0, r3
 8012406:	f7ff fef1 	bl	80121ec <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	3324      	adds	r3, #36	@ 0x24
 801240e:	4618      	mov	r0, r3
 8012410:	f7ff feec 	bl	80121ec <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8012414:	f002 fa14 	bl	8014840 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8012418:	2301      	movs	r3, #1
}
 801241a:	4618      	mov	r0, r3
 801241c:	3710      	adds	r7, #16
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}
 8012422:	bf00      	nop
 8012424:	e000ed04 	.word	0xe000ed04

08012428 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8012428:	b580      	push	{r7, lr}
 801242a:	b08c      	sub	sp, #48	@ 0x30
 801242c:	af02      	add	r7, sp, #8
 801242e:	60f8      	str	r0, [r7, #12]
 8012430:	60b9      	str	r1, [r7, #8]
 8012432:	4613      	mov	r3, r2
 8012434:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d10b      	bne.n	8012454 <xQueueGenericCreate+0x2c>
        __asm volatile
 801243c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012440:	f383 8811 	msr	BASEPRI, r3
 8012444:	f3bf 8f6f 	isb	sy
 8012448:	f3bf 8f4f 	dsb	sy
 801244c:	61bb      	str	r3, [r7, #24]
    }
 801244e:	bf00      	nop
 8012450:	bf00      	nop
 8012452:	e7fd      	b.n	8012450 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	68ba      	ldr	r2, [r7, #8]
 8012458:	fb02 f303 	mul.w	r3, r2, r3
 801245c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d006      	beq.n	8012472 <xQueueGenericCreate+0x4a>
 8012464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	fbb2 f3f3 	udiv	r3, r2, r3
 801246c:	68fa      	ldr	r2, [r7, #12]
 801246e:	429a      	cmp	r2, r3
 8012470:	d101      	bne.n	8012476 <xQueueGenericCreate+0x4e>
 8012472:	2301      	movs	r3, #1
 8012474:	e000      	b.n	8012478 <xQueueGenericCreate+0x50>
 8012476:	2300      	movs	r3, #0
 8012478:	2b00      	cmp	r3, #0
 801247a:	d10b      	bne.n	8012494 <xQueueGenericCreate+0x6c>
        __asm volatile
 801247c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012480:	f383 8811 	msr	BASEPRI, r3
 8012484:	f3bf 8f6f 	isb	sy
 8012488:	f3bf 8f4f 	dsb	sy
 801248c:	617b      	str	r3, [r7, #20]
    }
 801248e:	bf00      	nop
 8012490:	bf00      	nop
 8012492:	e7fd      	b.n	8012490 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8012494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012496:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 801249a:	d90b      	bls.n	80124b4 <xQueueGenericCreate+0x8c>
        __asm volatile
 801249c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124a0:	f383 8811 	msr	BASEPRI, r3
 80124a4:	f3bf 8f6f 	isb	sy
 80124a8:	f3bf 8f4f 	dsb	sy
 80124ac:	613b      	str	r3, [r7, #16]
    }
 80124ae:	bf00      	nop
 80124b0:	bf00      	nop
 80124b2:	e7fd      	b.n	80124b0 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80124b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124b6:	3350      	adds	r3, #80	@ 0x50
 80124b8:	4618      	mov	r0, r3
 80124ba:	f002 fab9 	bl	8014a30 <pvPortMalloc>
 80124be:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80124c0:	6a3b      	ldr	r3, [r7, #32]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d00d      	beq.n	80124e2 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80124c6:	6a3b      	ldr	r3, [r7, #32]
 80124c8:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80124ca:	69fb      	ldr	r3, [r7, #28]
 80124cc:	3350      	adds	r3, #80	@ 0x50
 80124ce:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80124d0:	79fa      	ldrb	r2, [r7, #7]
 80124d2:	6a3b      	ldr	r3, [r7, #32]
 80124d4:	9300      	str	r3, [sp, #0]
 80124d6:	4613      	mov	r3, r2
 80124d8:	69fa      	ldr	r2, [r7, #28]
 80124da:	68b9      	ldr	r1, [r7, #8]
 80124dc:	68f8      	ldr	r0, [r7, #12]
 80124de:	f000 f805 	bl	80124ec <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80124e2:	6a3b      	ldr	r3, [r7, #32]
    }
 80124e4:	4618      	mov	r0, r3
 80124e6:	3728      	adds	r7, #40	@ 0x28
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}

080124ec <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b084      	sub	sp, #16
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	60f8      	str	r0, [r7, #12]
 80124f4:	60b9      	str	r1, [r7, #8]
 80124f6:	607a      	str	r2, [r7, #4]
 80124f8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d103      	bne.n	8012508 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012500:	69bb      	ldr	r3, [r7, #24]
 8012502:	69ba      	ldr	r2, [r7, #24]
 8012504:	601a      	str	r2, [r3, #0]
 8012506:	e002      	b.n	801250e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012508:	69bb      	ldr	r3, [r7, #24]
 801250a:	687a      	ldr	r2, [r7, #4]
 801250c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 801250e:	69bb      	ldr	r3, [r7, #24]
 8012510:	68fa      	ldr	r2, [r7, #12]
 8012512:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8012514:	69bb      	ldr	r3, [r7, #24]
 8012516:	68ba      	ldr	r2, [r7, #8]
 8012518:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801251a:	2101      	movs	r1, #1
 801251c:	69b8      	ldr	r0, [r7, #24]
 801251e:	f7ff ff19 	bl	8012354 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8012522:	69bb      	ldr	r3, [r7, #24]
 8012524:	78fa      	ldrb	r2, [r7, #3]
 8012526:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 801252a:	bf00      	nop
 801252c:	3710      	adds	r7, #16
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}

08012532 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8012532:	b580      	push	{r7, lr}
 8012534:	b082      	sub	sp, #8
 8012536:	af00      	add	r7, sp, #0
 8012538:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d00e      	beq.n	801255e <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2200      	movs	r2, #0
 8012544:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2200      	movs	r2, #0
 801254a:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	2200      	movs	r2, #0
 8012550:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012552:	2300      	movs	r3, #0
 8012554:	2200      	movs	r2, #0
 8012556:	2100      	movs	r1, #0
 8012558:	6878      	ldr	r0, [r7, #4]
 801255a:	f000 f81d 	bl	8012598 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 801255e:	bf00      	nop
 8012560:	3708      	adds	r7, #8
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}

08012566 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8012566:	b580      	push	{r7, lr}
 8012568:	b086      	sub	sp, #24
 801256a:	af00      	add	r7, sp, #0
 801256c:	4603      	mov	r3, r0
 801256e:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012570:	2301      	movs	r3, #1
 8012572:	617b      	str	r3, [r7, #20]
 8012574:	2300      	movs	r3, #0
 8012576:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012578:	79fb      	ldrb	r3, [r7, #7]
 801257a:	461a      	mov	r2, r3
 801257c:	6939      	ldr	r1, [r7, #16]
 801257e:	6978      	ldr	r0, [r7, #20]
 8012580:	f7ff ff52 	bl	8012428 <xQueueGenericCreate>
 8012584:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012586:	68f8      	ldr	r0, [r7, #12]
 8012588:	f7ff ffd3 	bl	8012532 <prvInitialiseMutex>

        return xNewQueue;
 801258c:	68fb      	ldr	r3, [r7, #12]
    }
 801258e:	4618      	mov	r0, r3
 8012590:	3718      	adds	r7, #24
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}
	...

08012598 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b08e      	sub	sp, #56	@ 0x38
 801259c:	af00      	add	r7, sp, #0
 801259e:	60f8      	str	r0, [r7, #12]
 80125a0:	60b9      	str	r1, [r7, #8]
 80125a2:	607a      	str	r2, [r7, #4]
 80125a4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80125a6:	2300      	movs	r3, #0
 80125a8:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80125ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d10b      	bne.n	80125cc <xQueueGenericSend+0x34>
        __asm volatile
 80125b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125b8:	f383 8811 	msr	BASEPRI, r3
 80125bc:	f3bf 8f6f 	isb	sy
 80125c0:	f3bf 8f4f 	dsb	sy
 80125c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80125c6:	bf00      	nop
 80125c8:	bf00      	nop
 80125ca:	e7fd      	b.n	80125c8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d103      	bne.n	80125da <xQueueGenericSend+0x42>
 80125d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d101      	bne.n	80125de <xQueueGenericSend+0x46>
 80125da:	2301      	movs	r3, #1
 80125dc:	e000      	b.n	80125e0 <xQueueGenericSend+0x48>
 80125de:	2300      	movs	r3, #0
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d10b      	bne.n	80125fc <xQueueGenericSend+0x64>
        __asm volatile
 80125e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125e8:	f383 8811 	msr	BASEPRI, r3
 80125ec:	f3bf 8f6f 	isb	sy
 80125f0:	f3bf 8f4f 	dsb	sy
 80125f4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80125f6:	bf00      	nop
 80125f8:	bf00      	nop
 80125fa:	e7fd      	b.n	80125f8 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	2b02      	cmp	r3, #2
 8012600:	d103      	bne.n	801260a <xQueueGenericSend+0x72>
 8012602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012606:	2b01      	cmp	r3, #1
 8012608:	d101      	bne.n	801260e <xQueueGenericSend+0x76>
 801260a:	2301      	movs	r3, #1
 801260c:	e000      	b.n	8012610 <xQueueGenericSend+0x78>
 801260e:	2300      	movs	r3, #0
 8012610:	2b00      	cmp	r3, #0
 8012612:	d10b      	bne.n	801262c <xQueueGenericSend+0x94>
        __asm volatile
 8012614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012618:	f383 8811 	msr	BASEPRI, r3
 801261c:	f3bf 8f6f 	isb	sy
 8012620:	f3bf 8f4f 	dsb	sy
 8012624:	623b      	str	r3, [r7, #32]
    }
 8012626:	bf00      	nop
 8012628:	bf00      	nop
 801262a:	e7fd      	b.n	8012628 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801262c:	f001 fa6e 	bl	8013b0c <xTaskGetSchedulerState>
 8012630:	4603      	mov	r3, r0
 8012632:	2b00      	cmp	r3, #0
 8012634:	d102      	bne.n	801263c <xQueueGenericSend+0xa4>
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d101      	bne.n	8012640 <xQueueGenericSend+0xa8>
 801263c:	2301      	movs	r3, #1
 801263e:	e000      	b.n	8012642 <xQueueGenericSend+0xaa>
 8012640:	2300      	movs	r3, #0
 8012642:	2b00      	cmp	r3, #0
 8012644:	d10b      	bne.n	801265e <xQueueGenericSend+0xc6>
        __asm volatile
 8012646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801264a:	f383 8811 	msr	BASEPRI, r3
 801264e:	f3bf 8f6f 	isb	sy
 8012652:	f3bf 8f4f 	dsb	sy
 8012656:	61fb      	str	r3, [r7, #28]
    }
 8012658:	bf00      	nop
 801265a:	bf00      	nop
 801265c:	e7fd      	b.n	801265a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 801265e:	f002 f8bd 	bl	80147dc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801266a:	429a      	cmp	r2, r3
 801266c:	d302      	bcc.n	8012674 <xQueueGenericSend+0xdc>
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	2b02      	cmp	r3, #2
 8012672:	d129      	bne.n	80126c8 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012674:	683a      	ldr	r2, [r7, #0]
 8012676:	68b9      	ldr	r1, [r7, #8]
 8012678:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801267a:	f000 fb47 	bl	8012d0c <prvCopyDataToQueue>
 801267e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012684:	2b00      	cmp	r3, #0
 8012686:	d010      	beq.n	80126aa <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801268a:	3324      	adds	r3, #36	@ 0x24
 801268c:	4618      	mov	r0, r3
 801268e:	f001 f89d 	bl	80137cc <xTaskRemoveFromEventList>
 8012692:	4603      	mov	r3, r0
 8012694:	2b00      	cmp	r3, #0
 8012696:	d013      	beq.n	80126c0 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8012698:	4b3f      	ldr	r3, [pc, #252]	@ (8012798 <xQueueGenericSend+0x200>)
 801269a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801269e:	601a      	str	r2, [r3, #0]
 80126a0:	f3bf 8f4f 	dsb	sy
 80126a4:	f3bf 8f6f 	isb	sy
 80126a8:	e00a      	b.n	80126c0 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80126aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d007      	beq.n	80126c0 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80126b0:	4b39      	ldr	r3, [pc, #228]	@ (8012798 <xQueueGenericSend+0x200>)
 80126b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80126b6:	601a      	str	r2, [r3, #0]
 80126b8:	f3bf 8f4f 	dsb	sy
 80126bc:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80126c0:	f002 f8be 	bl	8014840 <vPortExitCritical>
                return pdPASS;
 80126c4:	2301      	movs	r3, #1
 80126c6:	e063      	b.n	8012790 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d103      	bne.n	80126d6 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80126ce:	f002 f8b7 	bl	8014840 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80126d2:	2300      	movs	r3, #0
 80126d4:	e05c      	b.n	8012790 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80126d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d106      	bne.n	80126ea <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80126dc:	f107 0314 	add.w	r3, r7, #20
 80126e0:	4618      	mov	r0, r3
 80126e2:	f001 f8d7 	bl	8013894 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80126e6:	2301      	movs	r3, #1
 80126e8:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80126ea:	f002 f8a9 	bl	8014840 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80126ee:	f000 fe49 	bl	8013384 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80126f2:	f002 f873 	bl	80147dc <vPortEnterCritical>
 80126f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80126fc:	b25b      	sxtb	r3, r3
 80126fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012702:	d103      	bne.n	801270c <xQueueGenericSend+0x174>
 8012704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012706:	2200      	movs	r2, #0
 8012708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801270c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801270e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012712:	b25b      	sxtb	r3, r3
 8012714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012718:	d103      	bne.n	8012722 <xQueueGenericSend+0x18a>
 801271a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801271c:	2200      	movs	r2, #0
 801271e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012722:	f002 f88d 	bl	8014840 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012726:	1d3a      	adds	r2, r7, #4
 8012728:	f107 0314 	add.w	r3, r7, #20
 801272c:	4611      	mov	r1, r2
 801272e:	4618      	mov	r0, r3
 8012730:	f001 f8c6 	bl	80138c0 <xTaskCheckForTimeOut>
 8012734:	4603      	mov	r3, r0
 8012736:	2b00      	cmp	r3, #0
 8012738:	d124      	bne.n	8012784 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801273a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801273c:	f000 fbde 	bl	8012efc <prvIsQueueFull>
 8012740:	4603      	mov	r3, r0
 8012742:	2b00      	cmp	r3, #0
 8012744:	d018      	beq.n	8012778 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012748:	3310      	adds	r3, #16
 801274a:	687a      	ldr	r2, [r7, #4]
 801274c:	4611      	mov	r1, r2
 801274e:	4618      	mov	r0, r3
 8012750:	f000 ffea 	bl	8013728 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8012754:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012756:	f000 fb69 	bl	8012e2c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 801275a:	f000 fe21 	bl	80133a0 <xTaskResumeAll>
 801275e:	4603      	mov	r3, r0
 8012760:	2b00      	cmp	r3, #0
 8012762:	f47f af7c 	bne.w	801265e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8012766:	4b0c      	ldr	r3, [pc, #48]	@ (8012798 <xQueueGenericSend+0x200>)
 8012768:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801276c:	601a      	str	r2, [r3, #0]
 801276e:	f3bf 8f4f 	dsb	sy
 8012772:	f3bf 8f6f 	isb	sy
 8012776:	e772      	b.n	801265e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8012778:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801277a:	f000 fb57 	bl	8012e2c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 801277e:	f000 fe0f 	bl	80133a0 <xTaskResumeAll>
 8012782:	e76c      	b.n	801265e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8012784:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012786:	f000 fb51 	bl	8012e2c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 801278a:	f000 fe09 	bl	80133a0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 801278e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8012790:	4618      	mov	r0, r3
 8012792:	3738      	adds	r7, #56	@ 0x38
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}
 8012798:	e000ed04 	.word	0xe000ed04

0801279c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b090      	sub	sp, #64	@ 0x40
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	60f8      	str	r0, [r7, #12]
 80127a4:	60b9      	str	r1, [r7, #8]
 80127a6:	607a      	str	r2, [r7, #4]
 80127a8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80127ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d10b      	bne.n	80127cc <xQueueGenericSendFromISR+0x30>
        __asm volatile
 80127b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127b8:	f383 8811 	msr	BASEPRI, r3
 80127bc:	f3bf 8f6f 	isb	sy
 80127c0:	f3bf 8f4f 	dsb	sy
 80127c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80127c6:	bf00      	nop
 80127c8:	bf00      	nop
 80127ca:	e7fd      	b.n	80127c8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d103      	bne.n	80127da <xQueueGenericSendFromISR+0x3e>
 80127d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d101      	bne.n	80127de <xQueueGenericSendFromISR+0x42>
 80127da:	2301      	movs	r3, #1
 80127dc:	e000      	b.n	80127e0 <xQueueGenericSendFromISR+0x44>
 80127de:	2300      	movs	r3, #0
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d10b      	bne.n	80127fc <xQueueGenericSendFromISR+0x60>
        __asm volatile
 80127e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127e8:	f383 8811 	msr	BASEPRI, r3
 80127ec:	f3bf 8f6f 	isb	sy
 80127f0:	f3bf 8f4f 	dsb	sy
 80127f4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80127f6:	bf00      	nop
 80127f8:	bf00      	nop
 80127fa:	e7fd      	b.n	80127f8 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	2b02      	cmp	r3, #2
 8012800:	d103      	bne.n	801280a <xQueueGenericSendFromISR+0x6e>
 8012802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012806:	2b01      	cmp	r3, #1
 8012808:	d101      	bne.n	801280e <xQueueGenericSendFromISR+0x72>
 801280a:	2301      	movs	r3, #1
 801280c:	e000      	b.n	8012810 <xQueueGenericSendFromISR+0x74>
 801280e:	2300      	movs	r3, #0
 8012810:	2b00      	cmp	r3, #0
 8012812:	d10b      	bne.n	801282c <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8012814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012818:	f383 8811 	msr	BASEPRI, r3
 801281c:	f3bf 8f6f 	isb	sy
 8012820:	f3bf 8f4f 	dsb	sy
 8012824:	623b      	str	r3, [r7, #32]
    }
 8012826:	bf00      	nop
 8012828:	bf00      	nop
 801282a:	e7fd      	b.n	8012828 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801282c:	f002 f8be 	bl	80149ac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8012830:	f3ef 8211 	mrs	r2, BASEPRI
 8012834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012838:	f383 8811 	msr	BASEPRI, r3
 801283c:	f3bf 8f6f 	isb	sy
 8012840:	f3bf 8f4f 	dsb	sy
 8012844:	61fa      	str	r2, [r7, #28]
 8012846:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8012848:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801284a:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801284c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801284e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012854:	429a      	cmp	r2, r3
 8012856:	d302      	bcc.n	801285e <xQueueGenericSendFromISR+0xc2>
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	2b02      	cmp	r3, #2
 801285c:	d13f      	bne.n	80128de <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 801285e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012860:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012864:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801286a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801286c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801286e:	683a      	ldr	r2, [r7, #0]
 8012870:	68b9      	ldr	r1, [r7, #8]
 8012872:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012874:	f000 fa4a 	bl	8012d0c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8012878:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 801287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012880:	d112      	bne.n	80128a8 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012886:	2b00      	cmp	r3, #0
 8012888:	d026      	beq.n	80128d8 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801288a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801288c:	3324      	adds	r3, #36	@ 0x24
 801288e:	4618      	mov	r0, r3
 8012890:	f000 ff9c 	bl	80137cc <xTaskRemoveFromEventList>
 8012894:	4603      	mov	r3, r0
 8012896:	2b00      	cmp	r3, #0
 8012898:	d01e      	beq.n	80128d8 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d01b      	beq.n	80128d8 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2201      	movs	r2, #1
 80128a4:	601a      	str	r2, [r3, #0]
 80128a6:	e017      	b.n	80128d8 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80128a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80128ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80128ae:	d10b      	bne.n	80128c8 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 80128b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128b4:	f383 8811 	msr	BASEPRI, r3
 80128b8:	f3bf 8f6f 	isb	sy
 80128bc:	f3bf 8f4f 	dsb	sy
 80128c0:	617b      	str	r3, [r7, #20]
    }
 80128c2:	bf00      	nop
 80128c4:	bf00      	nop
 80128c6:	e7fd      	b.n	80128c4 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80128c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80128cc:	3301      	adds	r3, #1
 80128ce:	b2db      	uxtb	r3, r3
 80128d0:	b25a      	sxtb	r2, r3
 80128d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80128d8:	2301      	movs	r3, #1
 80128da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 80128dc:	e001      	b.n	80128e2 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80128de:	2300      	movs	r3, #0
 80128e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80128e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128e4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80128e6:	693b      	ldr	r3, [r7, #16]
 80128e8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80128ec:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80128ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3740      	adds	r7, #64	@ 0x40
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}

080128f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b08c      	sub	sp, #48	@ 0x30
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	60f8      	str	r0, [r7, #12]
 8012900:	60b9      	str	r1, [r7, #8]
 8012902:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8012904:	2300      	movs	r3, #0
 8012906:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 801290c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801290e:	2b00      	cmp	r3, #0
 8012910:	d10b      	bne.n	801292a <xQueueReceive+0x32>
        __asm volatile
 8012912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012916:	f383 8811 	msr	BASEPRI, r3
 801291a:	f3bf 8f6f 	isb	sy
 801291e:	f3bf 8f4f 	dsb	sy
 8012922:	623b      	str	r3, [r7, #32]
    }
 8012924:	bf00      	nop
 8012926:	bf00      	nop
 8012928:	e7fd      	b.n	8012926 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d103      	bne.n	8012938 <xQueueReceive+0x40>
 8012930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012934:	2b00      	cmp	r3, #0
 8012936:	d101      	bne.n	801293c <xQueueReceive+0x44>
 8012938:	2301      	movs	r3, #1
 801293a:	e000      	b.n	801293e <xQueueReceive+0x46>
 801293c:	2300      	movs	r3, #0
 801293e:	2b00      	cmp	r3, #0
 8012940:	d10b      	bne.n	801295a <xQueueReceive+0x62>
        __asm volatile
 8012942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012946:	f383 8811 	msr	BASEPRI, r3
 801294a:	f3bf 8f6f 	isb	sy
 801294e:	f3bf 8f4f 	dsb	sy
 8012952:	61fb      	str	r3, [r7, #28]
    }
 8012954:	bf00      	nop
 8012956:	bf00      	nop
 8012958:	e7fd      	b.n	8012956 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801295a:	f001 f8d7 	bl	8013b0c <xTaskGetSchedulerState>
 801295e:	4603      	mov	r3, r0
 8012960:	2b00      	cmp	r3, #0
 8012962:	d102      	bne.n	801296a <xQueueReceive+0x72>
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d101      	bne.n	801296e <xQueueReceive+0x76>
 801296a:	2301      	movs	r3, #1
 801296c:	e000      	b.n	8012970 <xQueueReceive+0x78>
 801296e:	2300      	movs	r3, #0
 8012970:	2b00      	cmp	r3, #0
 8012972:	d10b      	bne.n	801298c <xQueueReceive+0x94>
        __asm volatile
 8012974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012978:	f383 8811 	msr	BASEPRI, r3
 801297c:	f3bf 8f6f 	isb	sy
 8012980:	f3bf 8f4f 	dsb	sy
 8012984:	61bb      	str	r3, [r7, #24]
    }
 8012986:	bf00      	nop
 8012988:	bf00      	nop
 801298a:	e7fd      	b.n	8012988 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 801298c:	f001 ff26 	bl	80147dc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012994:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012998:	2b00      	cmp	r3, #0
 801299a:	d01f      	beq.n	80129dc <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 801299c:	68b9      	ldr	r1, [r7, #8]
 801299e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80129a0:	f000 fa1e 	bl	8012de0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80129a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129a6:	1e5a      	subs	r2, r3, #1
 80129a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129aa:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80129ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129ae:	691b      	ldr	r3, [r3, #16]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d00f      	beq.n	80129d4 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80129b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129b6:	3310      	adds	r3, #16
 80129b8:	4618      	mov	r0, r3
 80129ba:	f000 ff07 	bl	80137cc <xTaskRemoveFromEventList>
 80129be:	4603      	mov	r3, r0
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d007      	beq.n	80129d4 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80129c4:	4b3c      	ldr	r3, [pc, #240]	@ (8012ab8 <xQueueReceive+0x1c0>)
 80129c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80129ca:	601a      	str	r2, [r3, #0]
 80129cc:	f3bf 8f4f 	dsb	sy
 80129d0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80129d4:	f001 ff34 	bl	8014840 <vPortExitCritical>
                return pdPASS;
 80129d8:	2301      	movs	r3, #1
 80129da:	e069      	b.n	8012ab0 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d103      	bne.n	80129ea <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80129e2:	f001 ff2d 	bl	8014840 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80129e6:	2300      	movs	r3, #0
 80129e8:	e062      	b.n	8012ab0 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80129ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d106      	bne.n	80129fe <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80129f0:	f107 0310 	add.w	r3, r7, #16
 80129f4:	4618      	mov	r0, r3
 80129f6:	f000 ff4d 	bl	8013894 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80129fa:	2301      	movs	r3, #1
 80129fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80129fe:	f001 ff1f 	bl	8014840 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8012a02:	f000 fcbf 	bl	8013384 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8012a06:	f001 fee9 	bl	80147dc <vPortEnterCritical>
 8012a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012a10:	b25b      	sxtb	r3, r3
 8012a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a16:	d103      	bne.n	8012a20 <xQueueReceive+0x128>
 8012a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012a26:	b25b      	sxtb	r3, r3
 8012a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a2c:	d103      	bne.n	8012a36 <xQueueReceive+0x13e>
 8012a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a30:	2200      	movs	r2, #0
 8012a32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012a36:	f001 ff03 	bl	8014840 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012a3a:	1d3a      	adds	r2, r7, #4
 8012a3c:	f107 0310 	add.w	r3, r7, #16
 8012a40:	4611      	mov	r1, r2
 8012a42:	4618      	mov	r0, r3
 8012a44:	f000 ff3c 	bl	80138c0 <xTaskCheckForTimeOut>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d123      	bne.n	8012a96 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012a4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012a50:	f000 fa3e 	bl	8012ed0 <prvIsQueueEmpty>
 8012a54:	4603      	mov	r3, r0
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d017      	beq.n	8012a8a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a5c:	3324      	adds	r3, #36	@ 0x24
 8012a5e:	687a      	ldr	r2, [r7, #4]
 8012a60:	4611      	mov	r1, r2
 8012a62:	4618      	mov	r0, r3
 8012a64:	f000 fe60 	bl	8013728 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8012a68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012a6a:	f000 f9df 	bl	8012e2c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8012a6e:	f000 fc97 	bl	80133a0 <xTaskResumeAll>
 8012a72:	4603      	mov	r3, r0
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d189      	bne.n	801298c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8012a78:	4b0f      	ldr	r3, [pc, #60]	@ (8012ab8 <xQueueReceive+0x1c0>)
 8012a7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a7e:	601a      	str	r2, [r3, #0]
 8012a80:	f3bf 8f4f 	dsb	sy
 8012a84:	f3bf 8f6f 	isb	sy
 8012a88:	e780      	b.n	801298c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8012a8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012a8c:	f000 f9ce 	bl	8012e2c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8012a90:	f000 fc86 	bl	80133a0 <xTaskResumeAll>
 8012a94:	e77a      	b.n	801298c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8012a96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012a98:	f000 f9c8 	bl	8012e2c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8012a9c:	f000 fc80 	bl	80133a0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012aa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012aa2:	f000 fa15 	bl	8012ed0 <prvIsQueueEmpty>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	f43f af6f 	beq.w	801298c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8012aae:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	3730      	adds	r7, #48	@ 0x30
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}
 8012ab8:	e000ed04 	.word	0xe000ed04

08012abc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b08e      	sub	sp, #56	@ 0x38
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
 8012ac4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8012ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d10b      	bne.n	8012af0 <xQueueSemaphoreTake+0x34>
        __asm volatile
 8012ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012adc:	f383 8811 	msr	BASEPRI, r3
 8012ae0:	f3bf 8f6f 	isb	sy
 8012ae4:	f3bf 8f4f 	dsb	sy
 8012ae8:	623b      	str	r3, [r7, #32]
    }
 8012aea:	bf00      	nop
 8012aec:	bf00      	nop
 8012aee:	e7fd      	b.n	8012aec <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8012af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d00b      	beq.n	8012b10 <xQueueSemaphoreTake+0x54>
        __asm volatile
 8012af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012afc:	f383 8811 	msr	BASEPRI, r3
 8012b00:	f3bf 8f6f 	isb	sy
 8012b04:	f3bf 8f4f 	dsb	sy
 8012b08:	61fb      	str	r3, [r7, #28]
    }
 8012b0a:	bf00      	nop
 8012b0c:	bf00      	nop
 8012b0e:	e7fd      	b.n	8012b0c <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012b10:	f000 fffc 	bl	8013b0c <xTaskGetSchedulerState>
 8012b14:	4603      	mov	r3, r0
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d102      	bne.n	8012b20 <xQueueSemaphoreTake+0x64>
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d101      	bne.n	8012b24 <xQueueSemaphoreTake+0x68>
 8012b20:	2301      	movs	r3, #1
 8012b22:	e000      	b.n	8012b26 <xQueueSemaphoreTake+0x6a>
 8012b24:	2300      	movs	r3, #0
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d10b      	bne.n	8012b42 <xQueueSemaphoreTake+0x86>
        __asm volatile
 8012b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b2e:	f383 8811 	msr	BASEPRI, r3
 8012b32:	f3bf 8f6f 	isb	sy
 8012b36:	f3bf 8f4f 	dsb	sy
 8012b3a:	61bb      	str	r3, [r7, #24]
    }
 8012b3c:	bf00      	nop
 8012b3e:	bf00      	nop
 8012b40:	e7fd      	b.n	8012b3e <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8012b42:	f001 fe4b 	bl	80147dc <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b4a:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d024      	beq.n	8012b9c <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b54:	1e5a      	subs	r2, r3, #1
 8012b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b58:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d104      	bne.n	8012b6c <xQueueSemaphoreTake+0xb0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012b62:	f001 f973 	bl	8013e4c <pvTaskIncrementMutexHeldCount>
 8012b66:	4602      	mov	r2, r0
 8012b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b6a:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b6e:	691b      	ldr	r3, [r3, #16]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d00f      	beq.n	8012b94 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b76:	3310      	adds	r3, #16
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f000 fe27 	bl	80137cc <xTaskRemoveFromEventList>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d007      	beq.n	8012b94 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8012b84:	4b54      	ldr	r3, [pc, #336]	@ (8012cd8 <xQueueSemaphoreTake+0x21c>)
 8012b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b8a:	601a      	str	r2, [r3, #0]
 8012b8c:	f3bf 8f4f 	dsb	sy
 8012b90:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8012b94:	f001 fe54 	bl	8014840 <vPortExitCritical>
                return pdPASS;
 8012b98:	2301      	movs	r3, #1
 8012b9a:	e098      	b.n	8012cce <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d112      	bne.n	8012bc8 <xQueueSemaphoreTake+0x10c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8012ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d00b      	beq.n	8012bc0 <xQueueSemaphoreTake+0x104>
        __asm volatile
 8012ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bac:	f383 8811 	msr	BASEPRI, r3
 8012bb0:	f3bf 8f6f 	isb	sy
 8012bb4:	f3bf 8f4f 	dsb	sy
 8012bb8:	617b      	str	r3, [r7, #20]
    }
 8012bba:	bf00      	nop
 8012bbc:	bf00      	nop
 8012bbe:	e7fd      	b.n	8012bbc <xQueueSemaphoreTake+0x100>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8012bc0:	f001 fe3e 	bl	8014840 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	e082      	b.n	8012cce <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 8012bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d106      	bne.n	8012bdc <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8012bce:	f107 030c 	add.w	r3, r7, #12
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f000 fe5e 	bl	8013894 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8012bd8:	2301      	movs	r3, #1
 8012bda:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8012bdc:	f001 fe30 	bl	8014840 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8012be0:	f000 fbd0 	bl	8013384 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8012be4:	f001 fdfa 	bl	80147dc <vPortEnterCritical>
 8012be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012bee:	b25b      	sxtb	r3, r3
 8012bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bf4:	d103      	bne.n	8012bfe <xQueueSemaphoreTake+0x142>
 8012bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012c04:	b25b      	sxtb	r3, r3
 8012c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c0a:	d103      	bne.n	8012c14 <xQueueSemaphoreTake+0x158>
 8012c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c0e:	2200      	movs	r2, #0
 8012c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012c14:	f001 fe14 	bl	8014840 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012c18:	463a      	mov	r2, r7
 8012c1a:	f107 030c 	add.w	r3, r7, #12
 8012c1e:	4611      	mov	r1, r2
 8012c20:	4618      	mov	r0, r3
 8012c22:	f000 fe4d 	bl	80138c0 <xTaskCheckForTimeOut>
 8012c26:	4603      	mov	r3, r0
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d132      	bne.n	8012c92 <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012c2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012c2e:	f000 f94f 	bl	8012ed0 <prvIsQueueEmpty>
 8012c32:	4603      	mov	r3, r0
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d026      	beq.n	8012c86 <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d109      	bne.n	8012c54 <xQueueSemaphoreTake+0x198>
                        {
                            taskENTER_CRITICAL();
 8012c40:	f001 fdcc 	bl	80147dc <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c46:	689b      	ldr	r3, [r3, #8]
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f000 ff7d 	bl	8013b48 <xTaskPriorityInherit>
 8012c4e:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 8012c50:	f001 fdf6 	bl	8014840 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c56:	3324      	adds	r3, #36	@ 0x24
 8012c58:	683a      	ldr	r2, [r7, #0]
 8012c5a:	4611      	mov	r1, r2
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f000 fd63 	bl	8013728 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8012c62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012c64:	f000 f8e2 	bl	8012e2c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8012c68:	f000 fb9a 	bl	80133a0 <xTaskResumeAll>
 8012c6c:	4603      	mov	r3, r0
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	f47f af67 	bne.w	8012b42 <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 8012c74:	4b18      	ldr	r3, [pc, #96]	@ (8012cd8 <xQueueSemaphoreTake+0x21c>)
 8012c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c7a:	601a      	str	r2, [r3, #0]
 8012c7c:	f3bf 8f4f 	dsb	sy
 8012c80:	f3bf 8f6f 	isb	sy
 8012c84:	e75d      	b.n	8012b42 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8012c86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012c88:	f000 f8d0 	bl	8012e2c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8012c8c:	f000 fb88 	bl	80133a0 <xTaskResumeAll>
 8012c90:	e757      	b.n	8012b42 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8012c92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012c94:	f000 f8ca 	bl	8012e2c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8012c98:	f000 fb82 	bl	80133a0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012c9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012c9e:	f000 f917 	bl	8012ed0 <prvIsQueueEmpty>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	f43f af4c 	beq.w	8012b42 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8012caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d00d      	beq.n	8012ccc <xQueueSemaphoreTake+0x210>
                        {
                            taskENTER_CRITICAL();
 8012cb0:	f001 fd94 	bl	80147dc <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012cb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012cb6:	f000 f811 	bl	8012cdc <prvGetDisinheritPriorityAfterTimeout>
 8012cba:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cbe:	689b      	ldr	r3, [r3, #8]
 8012cc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f001 f832 	bl	8013d2c <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8012cc8:	f001 fdba 	bl	8014840 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8012ccc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3738      	adds	r7, #56	@ 0x38
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
 8012cd6:	bf00      	nop
 8012cd8:	e000ed04 	.word	0xe000ed04

08012cdc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8012cdc:	b480      	push	{r7}
 8012cde:	b085      	sub	sp, #20
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d006      	beq.n	8012cfa <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	f1c3 0305 	rsb	r3, r3, #5
 8012cf6:	60fb      	str	r3, [r7, #12]
 8012cf8:	e001      	b.n	8012cfe <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8012cfe:	68fb      	ldr	r3, [r7, #12]
    }
 8012d00:	4618      	mov	r0, r3
 8012d02:	3714      	adds	r7, #20
 8012d04:	46bd      	mov	sp, r7
 8012d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0a:	4770      	bx	lr

08012d0c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b086      	sub	sp, #24
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	60f8      	str	r0, [r7, #12]
 8012d14:	60b9      	str	r1, [r7, #8]
 8012d16:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8012d18:	2300      	movs	r3, #0
 8012d1a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d20:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d10d      	bne.n	8012d46 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d14d      	bne.n	8012dce <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	689b      	ldr	r3, [r3, #8]
 8012d36:	4618      	mov	r0, r3
 8012d38:	f000 ff7c 	bl	8013c34 <xTaskPriorityDisinherit>
 8012d3c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	2200      	movs	r2, #0
 8012d42:	609a      	str	r2, [r3, #8]
 8012d44:	e043      	b.n	8012dce <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d119      	bne.n	8012d80 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	6858      	ldr	r0, [r3, #4]
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d54:	461a      	mov	r2, r3
 8012d56:	68b9      	ldr	r1, [r7, #8]
 8012d58:	f003 faaf 	bl	80162ba <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	685a      	ldr	r2, [r3, #4]
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d64:	441a      	add	r2, r3
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	685a      	ldr	r2, [r3, #4]
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	689b      	ldr	r3, [r3, #8]
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d32b      	bcc.n	8012dce <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	681a      	ldr	r2, [r3, #0]
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	605a      	str	r2, [r3, #4]
 8012d7e:	e026      	b.n	8012dce <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	68d8      	ldr	r0, [r3, #12]
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d88:	461a      	mov	r2, r3
 8012d8a:	68b9      	ldr	r1, [r7, #8]
 8012d8c:	f003 fa95 	bl	80162ba <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	68da      	ldr	r2, [r3, #12]
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d98:	425b      	negs	r3, r3
 8012d9a:	441a      	add	r2, r3
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	68da      	ldr	r2, [r3, #12]
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	429a      	cmp	r2, r3
 8012daa:	d207      	bcs.n	8012dbc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	689a      	ldr	r2, [r3, #8]
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012db4:	425b      	negs	r3, r3
 8012db6:	441a      	add	r2, r3
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2b02      	cmp	r3, #2
 8012dc0:	d105      	bne.n	8012dce <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012dc2:	693b      	ldr	r3, [r7, #16]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d002      	beq.n	8012dce <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8012dc8:	693b      	ldr	r3, [r7, #16]
 8012dca:	3b01      	subs	r3, #1
 8012dcc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012dce:	693b      	ldr	r3, [r7, #16]
 8012dd0:	1c5a      	adds	r2, r3, #1
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8012dd6:	697b      	ldr	r3, [r7, #20]
}
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3718      	adds	r7, #24
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}

08012de0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b082      	sub	sp, #8
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d018      	beq.n	8012e24 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	68da      	ldr	r2, [r3, #12]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012dfa:	441a      	add	r2, r3
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	68da      	ldr	r2, [r3, #12]
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	689b      	ldr	r3, [r3, #8]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d303      	bcc.n	8012e14 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681a      	ldr	r2, [r3, #0]
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	68d9      	ldr	r1, [r3, #12]
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e1c:	461a      	mov	r2, r3
 8012e1e:	6838      	ldr	r0, [r7, #0]
 8012e20:	f003 fa4b 	bl	80162ba <memcpy>
    }
}
 8012e24:	bf00      	nop
 8012e26:	3708      	adds	r7, #8
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bd80      	pop	{r7, pc}

08012e2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b084      	sub	sp, #16
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8012e34:	f001 fcd2 	bl	80147dc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012e3e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8012e40:	e011      	b.n	8012e66 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d012      	beq.n	8012e70 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	3324      	adds	r3, #36	@ 0x24
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f000 fcbc 	bl	80137cc <xTaskRemoveFromEventList>
 8012e54:	4603      	mov	r3, r0
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d001      	beq.n	8012e5e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8012e5a:	f000 fd99 	bl	8013990 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8012e5e:	7bfb      	ldrb	r3, [r7, #15]
 8012e60:	3b01      	subs	r3, #1
 8012e62:	b2db      	uxtb	r3, r3
 8012e64:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8012e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	dce9      	bgt.n	8012e42 <prvUnlockQueue+0x16>
 8012e6e:	e000      	b.n	8012e72 <prvUnlockQueue+0x46>
                        break;
 8012e70:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	22ff      	movs	r2, #255	@ 0xff
 8012e76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8012e7a:	f001 fce1 	bl	8014840 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8012e7e:	f001 fcad 	bl	80147dc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012e88:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8012e8a:	e011      	b.n	8012eb0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	691b      	ldr	r3, [r3, #16]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d012      	beq.n	8012eba <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	3310      	adds	r3, #16
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f000 fc97 	bl	80137cc <xTaskRemoveFromEventList>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d001      	beq.n	8012ea8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8012ea4:	f000 fd74 	bl	8013990 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8012ea8:	7bbb      	ldrb	r3, [r7, #14]
 8012eaa:	3b01      	subs	r3, #1
 8012eac:	b2db      	uxtb	r3, r3
 8012eae:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8012eb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	dce9      	bgt.n	8012e8c <prvUnlockQueue+0x60>
 8012eb8:	e000      	b.n	8012ebc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8012eba:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	22ff      	movs	r2, #255	@ 0xff
 8012ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8012ec4:	f001 fcbc 	bl	8014840 <vPortExitCritical>
}
 8012ec8:	bf00      	nop
 8012eca:	3710      	adds	r7, #16
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	bd80      	pop	{r7, pc}

08012ed0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b084      	sub	sp, #16
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8012ed8:	f001 fc80 	bl	80147dc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d102      	bne.n	8012eea <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8012ee4:	2301      	movs	r3, #1
 8012ee6:	60fb      	str	r3, [r7, #12]
 8012ee8:	e001      	b.n	8012eee <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8012eea:	2300      	movs	r3, #0
 8012eec:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8012eee:	f001 fca7 	bl	8014840 <vPortExitCritical>

    return xReturn;
 8012ef2:	68fb      	ldr	r3, [r7, #12]
}
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	3710      	adds	r7, #16
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd80      	pop	{r7, pc}

08012efc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b084      	sub	sp, #16
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8012f04:	f001 fc6a 	bl	80147dc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f10:	429a      	cmp	r2, r3
 8012f12:	d102      	bne.n	8012f1a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8012f14:	2301      	movs	r3, #1
 8012f16:	60fb      	str	r3, [r7, #12]
 8012f18:	e001      	b.n	8012f1e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8012f1e:	f001 fc8f 	bl	8014840 <vPortExitCritical>

    return xReturn;
 8012f22:	68fb      	ldr	r3, [r7, #12]
}
 8012f24:	4618      	mov	r0, r3
 8012f26:	3710      	adds	r7, #16
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	bd80      	pop	{r7, pc}

08012f2c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8012f2c:	b480      	push	{r7}
 8012f2e:	b085      	sub	sp, #20
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
 8012f34:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012f36:	2300      	movs	r3, #0
 8012f38:	60fb      	str	r3, [r7, #12]
 8012f3a:	e014      	b.n	8012f66 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012f3c:	4a0f      	ldr	r2, [pc, #60]	@ (8012f7c <vQueueAddToRegistry+0x50>)
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d10b      	bne.n	8012f60 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012f48:	490c      	ldr	r1, [pc, #48]	@ (8012f7c <vQueueAddToRegistry+0x50>)
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	683a      	ldr	r2, [r7, #0]
 8012f4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8012f52:	4a0a      	ldr	r2, [pc, #40]	@ (8012f7c <vQueueAddToRegistry+0x50>)
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	00db      	lsls	r3, r3, #3
 8012f58:	4413      	add	r3, r2
 8012f5a:	687a      	ldr	r2, [r7, #4]
 8012f5c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8012f5e:	e006      	b.n	8012f6e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	3301      	adds	r3, #1
 8012f64:	60fb      	str	r3, [r7, #12]
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2b07      	cmp	r3, #7
 8012f6a:	d9e7      	bls.n	8012f3c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8012f6c:	bf00      	nop
 8012f6e:	bf00      	nop
 8012f70:	3714      	adds	r7, #20
 8012f72:	46bd      	mov	sp, r7
 8012f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f78:	4770      	bx	lr
 8012f7a:	bf00      	nop
 8012f7c:	20000740 	.word	0x20000740

08012f80 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b086      	sub	sp, #24
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	60f8      	str	r0, [r7, #12]
 8012f88:	60b9      	str	r1, [r7, #8]
 8012f8a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8012f90:	f001 fc24 	bl	80147dc <vPortEnterCritical>
 8012f94:	697b      	ldr	r3, [r7, #20]
 8012f96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012f9a:	b25b      	sxtb	r3, r3
 8012f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fa0:	d103      	bne.n	8012faa <vQueueWaitForMessageRestricted+0x2a>
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012faa:	697b      	ldr	r3, [r7, #20]
 8012fac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012fb0:	b25b      	sxtb	r3, r3
 8012fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fb6:	d103      	bne.n	8012fc0 <vQueueWaitForMessageRestricted+0x40>
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012fc0:	f001 fc3e 	bl	8014840 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d106      	bne.n	8012fda <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012fcc:	697b      	ldr	r3, [r7, #20]
 8012fce:	3324      	adds	r3, #36	@ 0x24
 8012fd0:	687a      	ldr	r2, [r7, #4]
 8012fd2:	68b9      	ldr	r1, [r7, #8]
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	f000 fbcd 	bl	8013774 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8012fda:	6978      	ldr	r0, [r7, #20]
 8012fdc:	f7ff ff26 	bl	8012e2c <prvUnlockQueue>
    }
 8012fe0:	bf00      	nop
 8012fe2:	3718      	adds	r7, #24
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}

08012fe8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b08c      	sub	sp, #48	@ 0x30
 8012fec:	af04      	add	r7, sp, #16
 8012fee:	60f8      	str	r0, [r7, #12]
 8012ff0:	60b9      	str	r1, [r7, #8]
 8012ff2:	603b      	str	r3, [r7, #0]
 8012ff4:	4613      	mov	r3, r2
 8012ff6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012ff8:	88fb      	ldrh	r3, [r7, #6]
 8012ffa:	009b      	lsls	r3, r3, #2
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f001 fd17 	bl	8014a30 <pvPortMalloc>
 8013002:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d00e      	beq.n	8013028 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801300a:	2058      	movs	r0, #88	@ 0x58
 801300c:	f001 fd10 	bl	8014a30 <pvPortMalloc>
 8013010:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8013012:	69fb      	ldr	r3, [r7, #28]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d003      	beq.n	8013020 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8013018:	69fb      	ldr	r3, [r7, #28]
 801301a:	697a      	ldr	r2, [r7, #20]
 801301c:	631a      	str	r2, [r3, #48]	@ 0x30
 801301e:	e005      	b.n	801302c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8013020:	6978      	ldr	r0, [r7, #20]
 8013022:	f001 fde7 	bl	8014bf4 <vPortFree>
 8013026:	e001      	b.n	801302c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8013028:	2300      	movs	r3, #0
 801302a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 801302c:	69fb      	ldr	r3, [r7, #28]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d013      	beq.n	801305a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013032:	88fa      	ldrh	r2, [r7, #6]
 8013034:	2300      	movs	r3, #0
 8013036:	9303      	str	r3, [sp, #12]
 8013038:	69fb      	ldr	r3, [r7, #28]
 801303a:	9302      	str	r3, [sp, #8]
 801303c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801303e:	9301      	str	r3, [sp, #4]
 8013040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013042:	9300      	str	r3, [sp, #0]
 8013044:	683b      	ldr	r3, [r7, #0]
 8013046:	68b9      	ldr	r1, [r7, #8]
 8013048:	68f8      	ldr	r0, [r7, #12]
 801304a:	f000 f80e 	bl	801306a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 801304e:	69f8      	ldr	r0, [r7, #28]
 8013050:	f000 f8a2 	bl	8013198 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8013054:	2301      	movs	r3, #1
 8013056:	61bb      	str	r3, [r7, #24]
 8013058:	e002      	b.n	8013060 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801305a:	f04f 33ff 	mov.w	r3, #4294967295
 801305e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8013060:	69bb      	ldr	r3, [r7, #24]
    }
 8013062:	4618      	mov	r0, r3
 8013064:	3720      	adds	r7, #32
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}

0801306a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 801306a:	b580      	push	{r7, lr}
 801306c:	b088      	sub	sp, #32
 801306e:	af00      	add	r7, sp, #0
 8013070:	60f8      	str	r0, [r7, #12]
 8013072:	60b9      	str	r1, [r7, #8]
 8013074:	607a      	str	r2, [r7, #4]
 8013076:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801307a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	009b      	lsls	r3, r3, #2
 8013080:	461a      	mov	r2, r3
 8013082:	21a5      	movs	r1, #165	@ 0xa5
 8013084:	f003 f868 	bl	8016158 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801308a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013092:	3b01      	subs	r3, #1
 8013094:	009b      	lsls	r3, r3, #2
 8013096:	4413      	add	r3, r2
 8013098:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801309a:	69bb      	ldr	r3, [r7, #24]
 801309c:	f023 0307 	bic.w	r3, r3, #7
 80130a0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80130a2:	69bb      	ldr	r3, [r7, #24]
 80130a4:	f003 0307 	and.w	r3, r3, #7
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d00b      	beq.n	80130c4 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80130ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130b0:	f383 8811 	msr	BASEPRI, r3
 80130b4:	f3bf 8f6f 	isb	sy
 80130b8:	f3bf 8f4f 	dsb	sy
 80130bc:	617b      	str	r3, [r7, #20]
    }
 80130be:	bf00      	nop
 80130c0:	bf00      	nop
 80130c2:	e7fd      	b.n	80130c0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d01f      	beq.n	801310a <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80130ca:	2300      	movs	r3, #0
 80130cc:	61fb      	str	r3, [r7, #28]
 80130ce:	e012      	b.n	80130f6 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80130d0:	68ba      	ldr	r2, [r7, #8]
 80130d2:	69fb      	ldr	r3, [r7, #28]
 80130d4:	4413      	add	r3, r2
 80130d6:	7819      	ldrb	r1, [r3, #0]
 80130d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80130da:	69fb      	ldr	r3, [r7, #28]
 80130dc:	4413      	add	r3, r2
 80130de:	3334      	adds	r3, #52	@ 0x34
 80130e0:	460a      	mov	r2, r1
 80130e2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80130e4:	68ba      	ldr	r2, [r7, #8]
 80130e6:	69fb      	ldr	r3, [r7, #28]
 80130e8:	4413      	add	r3, r2
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d006      	beq.n	80130fe <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80130f0:	69fb      	ldr	r3, [r7, #28]
 80130f2:	3301      	adds	r3, #1
 80130f4:	61fb      	str	r3, [r7, #28]
 80130f6:	69fb      	ldr	r3, [r7, #28]
 80130f8:	2b09      	cmp	r3, #9
 80130fa:	d9e9      	bls.n	80130d0 <prvInitialiseNewTask+0x66>
 80130fc:	e000      	b.n	8013100 <prvInitialiseNewTask+0x96>
            {
                break;
 80130fe:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013102:	2200      	movs	r2, #0
 8013104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8013108:	e003      	b.n	8013112 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801310a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801310c:	2200      	movs	r2, #0
 801310e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013114:	2b04      	cmp	r3, #4
 8013116:	d901      	bls.n	801311c <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013118:	2304      	movs	r3, #4
 801311a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 801311c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801311e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013120:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8013122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013124:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013126:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8013128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801312a:	2200      	movs	r2, #0
 801312c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801312e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013130:	3304      	adds	r3, #4
 8013132:	4618      	mov	r0, r3
 8013134:	f7ff f87a 	bl	801222c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801313a:	3318      	adds	r3, #24
 801313c:	4618      	mov	r0, r3
 801313e:	f7ff f875 	bl	801222c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013146:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801314a:	f1c3 0205 	rsb	r2, r3, #5
 801314e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013150:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013154:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013156:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8013158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801315a:	3350      	adds	r3, #80	@ 0x50
 801315c:	2204      	movs	r2, #4
 801315e:	2100      	movs	r1, #0
 8013160:	4618      	mov	r0, r3
 8013162:	f002 fff9 	bl	8016158 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8013166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013168:	3354      	adds	r3, #84	@ 0x54
 801316a:	2201      	movs	r2, #1
 801316c:	2100      	movs	r1, #0
 801316e:	4618      	mov	r0, r3
 8013170:	f002 fff2 	bl	8016158 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013174:	683a      	ldr	r2, [r7, #0]
 8013176:	68f9      	ldr	r1, [r7, #12]
 8013178:	69b8      	ldr	r0, [r7, #24]
 801317a:	f001 f9ff 	bl	801457c <pxPortInitialiseStack>
 801317e:	4602      	mov	r2, r0
 8013180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013182:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8013184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013186:	2b00      	cmp	r3, #0
 8013188:	d002      	beq.n	8013190 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801318a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801318c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801318e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8013190:	bf00      	nop
 8013192:	3720      	adds	r7, #32
 8013194:	46bd      	mov	sp, r7
 8013196:	bd80      	pop	{r7, pc}

08013198 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b082      	sub	sp, #8
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80131a0:	f001 fb1c 	bl	80147dc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80131a4:	4b2c      	ldr	r3, [pc, #176]	@ (8013258 <prvAddNewTaskToReadyList+0xc0>)
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	3301      	adds	r3, #1
 80131aa:	4a2b      	ldr	r2, [pc, #172]	@ (8013258 <prvAddNewTaskToReadyList+0xc0>)
 80131ac:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80131ae:	4b2b      	ldr	r3, [pc, #172]	@ (801325c <prvAddNewTaskToReadyList+0xc4>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d109      	bne.n	80131ca <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80131b6:	4a29      	ldr	r2, [pc, #164]	@ (801325c <prvAddNewTaskToReadyList+0xc4>)
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80131bc:	4b26      	ldr	r3, [pc, #152]	@ (8013258 <prvAddNewTaskToReadyList+0xc0>)
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	2b01      	cmp	r3, #1
 80131c2:	d110      	bne.n	80131e6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80131c4:	f000 fc08 	bl	80139d8 <prvInitialiseTaskLists>
 80131c8:	e00d      	b.n	80131e6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80131ca:	4b25      	ldr	r3, [pc, #148]	@ (8013260 <prvAddNewTaskToReadyList+0xc8>)
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d109      	bne.n	80131e6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80131d2:	4b22      	ldr	r3, [pc, #136]	@ (801325c <prvAddNewTaskToReadyList+0xc4>)
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131dc:	429a      	cmp	r2, r3
 80131de:	d802      	bhi.n	80131e6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80131e0:	4a1e      	ldr	r2, [pc, #120]	@ (801325c <prvAddNewTaskToReadyList+0xc4>)
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80131e6:	4b1f      	ldr	r3, [pc, #124]	@ (8013264 <prvAddNewTaskToReadyList+0xcc>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	3301      	adds	r3, #1
 80131ec:	4a1d      	ldr	r2, [pc, #116]	@ (8013264 <prvAddNewTaskToReadyList+0xcc>)
 80131ee:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80131f0:	4b1c      	ldr	r3, [pc, #112]	@ (8013264 <prvAddNewTaskToReadyList+0xcc>)
 80131f2:	681a      	ldr	r2, [r3, #0]
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131fc:	2201      	movs	r2, #1
 80131fe:	409a      	lsls	r2, r3
 8013200:	4b19      	ldr	r3, [pc, #100]	@ (8013268 <prvAddNewTaskToReadyList+0xd0>)
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	4313      	orrs	r3, r2
 8013206:	4a18      	ldr	r2, [pc, #96]	@ (8013268 <prvAddNewTaskToReadyList+0xd0>)
 8013208:	6013      	str	r3, [r2, #0]
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801320e:	4613      	mov	r3, r2
 8013210:	009b      	lsls	r3, r3, #2
 8013212:	4413      	add	r3, r2
 8013214:	009b      	lsls	r3, r3, #2
 8013216:	4a15      	ldr	r2, [pc, #84]	@ (801326c <prvAddNewTaskToReadyList+0xd4>)
 8013218:	441a      	add	r2, r3
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	3304      	adds	r3, #4
 801321e:	4619      	mov	r1, r3
 8013220:	4610      	mov	r0, r2
 8013222:	f7ff f810 	bl	8012246 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8013226:	f001 fb0b 	bl	8014840 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 801322a:	4b0d      	ldr	r3, [pc, #52]	@ (8013260 <prvAddNewTaskToReadyList+0xc8>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d00e      	beq.n	8013250 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013232:	4b0a      	ldr	r3, [pc, #40]	@ (801325c <prvAddNewTaskToReadyList+0xc4>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801323c:	429a      	cmp	r2, r3
 801323e:	d207      	bcs.n	8013250 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8013240:	4b0b      	ldr	r3, [pc, #44]	@ (8013270 <prvAddNewTaskToReadyList+0xd8>)
 8013242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013246:	601a      	str	r2, [r3, #0]
 8013248:	f3bf 8f4f 	dsb	sy
 801324c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8013250:	bf00      	nop
 8013252:	3708      	adds	r7, #8
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}
 8013258:	20000858 	.word	0x20000858
 801325c:	20000780 	.word	0x20000780
 8013260:	20000864 	.word	0x20000864
 8013264:	20000874 	.word	0x20000874
 8013268:	20000860 	.word	0x20000860
 801326c:	20000784 	.word	0x20000784
 8013270:	e000ed04 	.word	0xe000ed04

08013274 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8013274:	b580      	push	{r7, lr}
 8013276:	b084      	sub	sp, #16
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 801327c:	2300      	movs	r3, #0
 801327e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d018      	beq.n	80132b8 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8013286:	4b14      	ldr	r3, [pc, #80]	@ (80132d8 <vTaskDelay+0x64>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d00b      	beq.n	80132a6 <vTaskDelay+0x32>
        __asm volatile
 801328e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013292:	f383 8811 	msr	BASEPRI, r3
 8013296:	f3bf 8f6f 	isb	sy
 801329a:	f3bf 8f4f 	dsb	sy
 801329e:	60bb      	str	r3, [r7, #8]
    }
 80132a0:	bf00      	nop
 80132a2:	bf00      	nop
 80132a4:	e7fd      	b.n	80132a2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80132a6:	f000 f86d 	bl	8013384 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80132aa:	2100      	movs	r1, #0
 80132ac:	6878      	ldr	r0, [r7, #4]
 80132ae:	f000 fde1 	bl	8013e74 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80132b2:	f000 f875 	bl	80133a0 <xTaskResumeAll>
 80132b6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d107      	bne.n	80132ce <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 80132be:	4b07      	ldr	r3, [pc, #28]	@ (80132dc <vTaskDelay+0x68>)
 80132c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80132c4:	601a      	str	r2, [r3, #0]
 80132c6:	f3bf 8f4f 	dsb	sy
 80132ca:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80132ce:	bf00      	nop
 80132d0:	3710      	adds	r7, #16
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}
 80132d6:	bf00      	nop
 80132d8:	20000880 	.word	0x20000880
 80132dc:	e000ed04 	.word	0xe000ed04

080132e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b086      	sub	sp, #24
 80132e4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80132e6:	4b20      	ldr	r3, [pc, #128]	@ (8013368 <vTaskStartScheduler+0x88>)
 80132e8:	9301      	str	r3, [sp, #4]
 80132ea:	2300      	movs	r3, #0
 80132ec:	9300      	str	r3, [sp, #0]
 80132ee:	2300      	movs	r3, #0
 80132f0:	2282      	movs	r2, #130	@ 0x82
 80132f2:	491e      	ldr	r1, [pc, #120]	@ (801336c <vTaskStartScheduler+0x8c>)
 80132f4:	481e      	ldr	r0, [pc, #120]	@ (8013370 <vTaskStartScheduler+0x90>)
 80132f6:	f7ff fe77 	bl	8012fe8 <xTaskCreate>
 80132fa:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	2b01      	cmp	r3, #1
 8013300:	d102      	bne.n	8013308 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8013302:	f000 fe1d 	bl	8013f40 <xTimerCreateTimerTask>
 8013306:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	2b01      	cmp	r3, #1
 801330c:	d116      	bne.n	801333c <vTaskStartScheduler+0x5c>
        __asm volatile
 801330e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013312:	f383 8811 	msr	BASEPRI, r3
 8013316:	f3bf 8f6f 	isb	sy
 801331a:	f3bf 8f4f 	dsb	sy
 801331e:	60bb      	str	r3, [r7, #8]
    }
 8013320:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8013322:	4b14      	ldr	r3, [pc, #80]	@ (8013374 <vTaskStartScheduler+0x94>)
 8013324:	f04f 32ff 	mov.w	r2, #4294967295
 8013328:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 801332a:	4b13      	ldr	r3, [pc, #76]	@ (8013378 <vTaskStartScheduler+0x98>)
 801332c:	2201      	movs	r2, #1
 801332e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013330:	4b12      	ldr	r3, [pc, #72]	@ (801337c <vTaskStartScheduler+0x9c>)
 8013332:	2200      	movs	r2, #0
 8013334:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8013336:	f001 f9ad 	bl	8014694 <xPortStartScheduler>
 801333a:	e00f      	b.n	801335c <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013342:	d10b      	bne.n	801335c <vTaskStartScheduler+0x7c>
        __asm volatile
 8013344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013348:	f383 8811 	msr	BASEPRI, r3
 801334c:	f3bf 8f6f 	isb	sy
 8013350:	f3bf 8f4f 	dsb	sy
 8013354:	607b      	str	r3, [r7, #4]
    }
 8013356:	bf00      	nop
 8013358:	bf00      	nop
 801335a:	e7fd      	b.n	8013358 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 801335c:	4b08      	ldr	r3, [pc, #32]	@ (8013380 <vTaskStartScheduler+0xa0>)
 801335e:	681b      	ldr	r3, [r3, #0]
}
 8013360:	bf00      	nop
 8013362:	3710      	adds	r7, #16
 8013364:	46bd      	mov	sp, r7
 8013366:	bd80      	pop	{r7, pc}
 8013368:	2000087c 	.word	0x2000087c
 801336c:	08018c28 	.word	0x08018c28
 8013370:	080139a9 	.word	0x080139a9
 8013374:	20000878 	.word	0x20000878
 8013378:	20000864 	.word	0x20000864
 801337c:	2000085c 	.word	0x2000085c
 8013380:	0801a794 	.word	0x0801a794

08013384 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013384:	b480      	push	{r7}
 8013386:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8013388:	4b04      	ldr	r3, [pc, #16]	@ (801339c <vTaskSuspendAll+0x18>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	3301      	adds	r3, #1
 801338e:	4a03      	ldr	r2, [pc, #12]	@ (801339c <vTaskSuspendAll+0x18>)
 8013390:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8013392:	bf00      	nop
 8013394:	46bd      	mov	sp, r7
 8013396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339a:	4770      	bx	lr
 801339c:	20000880 	.word	0x20000880

080133a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b084      	sub	sp, #16
 80133a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80133a6:	2300      	movs	r3, #0
 80133a8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80133aa:	2300      	movs	r3, #0
 80133ac:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80133ae:	4b42      	ldr	r3, [pc, #264]	@ (80134b8 <xTaskResumeAll+0x118>)
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d10b      	bne.n	80133ce <xTaskResumeAll+0x2e>
        __asm volatile
 80133b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133ba:	f383 8811 	msr	BASEPRI, r3
 80133be:	f3bf 8f6f 	isb	sy
 80133c2:	f3bf 8f4f 	dsb	sy
 80133c6:	603b      	str	r3, [r7, #0]
    }
 80133c8:	bf00      	nop
 80133ca:	bf00      	nop
 80133cc:	e7fd      	b.n	80133ca <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80133ce:	f001 fa05 	bl	80147dc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80133d2:	4b39      	ldr	r3, [pc, #228]	@ (80134b8 <xTaskResumeAll+0x118>)
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	3b01      	subs	r3, #1
 80133d8:	4a37      	ldr	r2, [pc, #220]	@ (80134b8 <xTaskResumeAll+0x118>)
 80133da:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80133dc:	4b36      	ldr	r3, [pc, #216]	@ (80134b8 <xTaskResumeAll+0x118>)
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d161      	bne.n	80134a8 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80133e4:	4b35      	ldr	r3, [pc, #212]	@ (80134bc <xTaskResumeAll+0x11c>)
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d05d      	beq.n	80134a8 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80133ec:	e02e      	b.n	801344c <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133ee:	4b34      	ldr	r3, [pc, #208]	@ (80134c0 <xTaskResumeAll+0x120>)
 80133f0:	68db      	ldr	r3, [r3, #12]
 80133f2:	68db      	ldr	r3, [r3, #12]
 80133f4:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	3318      	adds	r3, #24
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7fe ff80 	bl	8012300 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	3304      	adds	r3, #4
 8013404:	4618      	mov	r0, r3
 8013406:	f7fe ff7b 	bl	8012300 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801340e:	2201      	movs	r2, #1
 8013410:	409a      	lsls	r2, r3
 8013412:	4b2c      	ldr	r3, [pc, #176]	@ (80134c4 <xTaskResumeAll+0x124>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	4313      	orrs	r3, r2
 8013418:	4a2a      	ldr	r2, [pc, #168]	@ (80134c4 <xTaskResumeAll+0x124>)
 801341a:	6013      	str	r3, [r2, #0]
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013420:	4613      	mov	r3, r2
 8013422:	009b      	lsls	r3, r3, #2
 8013424:	4413      	add	r3, r2
 8013426:	009b      	lsls	r3, r3, #2
 8013428:	4a27      	ldr	r2, [pc, #156]	@ (80134c8 <xTaskResumeAll+0x128>)
 801342a:	441a      	add	r2, r3
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	3304      	adds	r3, #4
 8013430:	4619      	mov	r1, r3
 8013432:	4610      	mov	r0, r2
 8013434:	f7fe ff07 	bl	8012246 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801343c:	4b23      	ldr	r3, [pc, #140]	@ (80134cc <xTaskResumeAll+0x12c>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013442:	429a      	cmp	r2, r3
 8013444:	d302      	bcc.n	801344c <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8013446:	4b22      	ldr	r3, [pc, #136]	@ (80134d0 <xTaskResumeAll+0x130>)
 8013448:	2201      	movs	r2, #1
 801344a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801344c:	4b1c      	ldr	r3, [pc, #112]	@ (80134c0 <xTaskResumeAll+0x120>)
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d1cc      	bne.n	80133ee <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d001      	beq.n	801345e <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 801345a:	f000 fb3b 	bl	8013ad4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801345e:	4b1d      	ldr	r3, [pc, #116]	@ (80134d4 <xTaskResumeAll+0x134>)
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d010      	beq.n	801348c <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 801346a:	f000 f847 	bl	80134fc <xTaskIncrementTick>
 801346e:	4603      	mov	r3, r0
 8013470:	2b00      	cmp	r3, #0
 8013472:	d002      	beq.n	801347a <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8013474:	4b16      	ldr	r3, [pc, #88]	@ (80134d0 <xTaskResumeAll+0x130>)
 8013476:	2201      	movs	r2, #1
 8013478:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	3b01      	subs	r3, #1
 801347e:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d1f1      	bne.n	801346a <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8013486:	4b13      	ldr	r3, [pc, #76]	@ (80134d4 <xTaskResumeAll+0x134>)
 8013488:	2200      	movs	r2, #0
 801348a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 801348c:	4b10      	ldr	r3, [pc, #64]	@ (80134d0 <xTaskResumeAll+0x130>)
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d009      	beq.n	80134a8 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8013494:	2301      	movs	r3, #1
 8013496:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8013498:	4b0f      	ldr	r3, [pc, #60]	@ (80134d8 <xTaskResumeAll+0x138>)
 801349a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801349e:	601a      	str	r2, [r3, #0]
 80134a0:	f3bf 8f4f 	dsb	sy
 80134a4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80134a8:	f001 f9ca 	bl	8014840 <vPortExitCritical>

    return xAlreadyYielded;
 80134ac:	68bb      	ldr	r3, [r7, #8]
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	3710      	adds	r7, #16
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}
 80134b6:	bf00      	nop
 80134b8:	20000880 	.word	0x20000880
 80134bc:	20000858 	.word	0x20000858
 80134c0:	20000818 	.word	0x20000818
 80134c4:	20000860 	.word	0x20000860
 80134c8:	20000784 	.word	0x20000784
 80134cc:	20000780 	.word	0x20000780
 80134d0:	2000086c 	.word	0x2000086c
 80134d4:	20000868 	.word	0x20000868
 80134d8:	e000ed04 	.word	0xe000ed04

080134dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80134dc:	b480      	push	{r7}
 80134de:	b083      	sub	sp, #12
 80134e0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80134e2:	4b05      	ldr	r3, [pc, #20]	@ (80134f8 <xTaskGetTickCount+0x1c>)
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80134e8:	687b      	ldr	r3, [r7, #4]
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	370c      	adds	r7, #12
 80134ee:	46bd      	mov	sp, r7
 80134f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f4:	4770      	bx	lr
 80134f6:	bf00      	nop
 80134f8:	2000085c 	.word	0x2000085c

080134fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b086      	sub	sp, #24
 8013500:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8013502:	2300      	movs	r3, #0
 8013504:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013506:	4b4f      	ldr	r3, [pc, #316]	@ (8013644 <xTaskIncrementTick+0x148>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	2b00      	cmp	r3, #0
 801350c:	f040 808f 	bne.w	801362e <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013510:	4b4d      	ldr	r3, [pc, #308]	@ (8013648 <xTaskIncrementTick+0x14c>)
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	3301      	adds	r3, #1
 8013516:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8013518:	4a4b      	ldr	r2, [pc, #300]	@ (8013648 <xTaskIncrementTick+0x14c>)
 801351a:	693b      	ldr	r3, [r7, #16]
 801351c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801351e:	693b      	ldr	r3, [r7, #16]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d121      	bne.n	8013568 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8013524:	4b49      	ldr	r3, [pc, #292]	@ (801364c <xTaskIncrementTick+0x150>)
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d00b      	beq.n	8013546 <xTaskIncrementTick+0x4a>
        __asm volatile
 801352e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013532:	f383 8811 	msr	BASEPRI, r3
 8013536:	f3bf 8f6f 	isb	sy
 801353a:	f3bf 8f4f 	dsb	sy
 801353e:	603b      	str	r3, [r7, #0]
    }
 8013540:	bf00      	nop
 8013542:	bf00      	nop
 8013544:	e7fd      	b.n	8013542 <xTaskIncrementTick+0x46>
 8013546:	4b41      	ldr	r3, [pc, #260]	@ (801364c <xTaskIncrementTick+0x150>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	60fb      	str	r3, [r7, #12]
 801354c:	4b40      	ldr	r3, [pc, #256]	@ (8013650 <xTaskIncrementTick+0x154>)
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	4a3e      	ldr	r2, [pc, #248]	@ (801364c <xTaskIncrementTick+0x150>)
 8013552:	6013      	str	r3, [r2, #0]
 8013554:	4a3e      	ldr	r2, [pc, #248]	@ (8013650 <xTaskIncrementTick+0x154>)
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	6013      	str	r3, [r2, #0]
 801355a:	4b3e      	ldr	r3, [pc, #248]	@ (8013654 <xTaskIncrementTick+0x158>)
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	3301      	adds	r3, #1
 8013560:	4a3c      	ldr	r2, [pc, #240]	@ (8013654 <xTaskIncrementTick+0x158>)
 8013562:	6013      	str	r3, [r2, #0]
 8013564:	f000 fab6 	bl	8013ad4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8013568:	4b3b      	ldr	r3, [pc, #236]	@ (8013658 <xTaskIncrementTick+0x15c>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	693a      	ldr	r2, [r7, #16]
 801356e:	429a      	cmp	r2, r3
 8013570:	d348      	bcc.n	8013604 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013572:	4b36      	ldr	r3, [pc, #216]	@ (801364c <xTaskIncrementTick+0x150>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d104      	bne.n	8013586 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801357c:	4b36      	ldr	r3, [pc, #216]	@ (8013658 <xTaskIncrementTick+0x15c>)
 801357e:	f04f 32ff 	mov.w	r2, #4294967295
 8013582:	601a      	str	r2, [r3, #0]
                    break;
 8013584:	e03e      	b.n	8013604 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013586:	4b31      	ldr	r3, [pc, #196]	@ (801364c <xTaskIncrementTick+0x150>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	68db      	ldr	r3, [r3, #12]
 801358c:	68db      	ldr	r3, [r3, #12]
 801358e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013590:	68bb      	ldr	r3, [r7, #8]
 8013592:	685b      	ldr	r3, [r3, #4]
 8013594:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8013596:	693a      	ldr	r2, [r7, #16]
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	429a      	cmp	r2, r3
 801359c:	d203      	bcs.n	80135a6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 801359e:	4a2e      	ldr	r2, [pc, #184]	@ (8013658 <xTaskIncrementTick+0x15c>)
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80135a4:	e02e      	b.n	8013604 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	3304      	adds	r3, #4
 80135aa:	4618      	mov	r0, r3
 80135ac:	f7fe fea8 	bl	8012300 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d004      	beq.n	80135c2 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	3318      	adds	r3, #24
 80135bc:	4618      	mov	r0, r3
 80135be:	f7fe fe9f 	bl	8012300 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80135c2:	68bb      	ldr	r3, [r7, #8]
 80135c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135c6:	2201      	movs	r2, #1
 80135c8:	409a      	lsls	r2, r3
 80135ca:	4b24      	ldr	r3, [pc, #144]	@ (801365c <xTaskIncrementTick+0x160>)
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	4313      	orrs	r3, r2
 80135d0:	4a22      	ldr	r2, [pc, #136]	@ (801365c <xTaskIncrementTick+0x160>)
 80135d2:	6013      	str	r3, [r2, #0]
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80135d8:	4613      	mov	r3, r2
 80135da:	009b      	lsls	r3, r3, #2
 80135dc:	4413      	add	r3, r2
 80135de:	009b      	lsls	r3, r3, #2
 80135e0:	4a1f      	ldr	r2, [pc, #124]	@ (8013660 <xTaskIncrementTick+0x164>)
 80135e2:	441a      	add	r2, r3
 80135e4:	68bb      	ldr	r3, [r7, #8]
 80135e6:	3304      	adds	r3, #4
 80135e8:	4619      	mov	r1, r3
 80135ea:	4610      	mov	r0, r2
 80135ec:	f7fe fe2b 	bl	8012246 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80135f0:	68bb      	ldr	r3, [r7, #8]
 80135f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80135f4:	4b1b      	ldr	r3, [pc, #108]	@ (8013664 <xTaskIncrementTick+0x168>)
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135fa:	429a      	cmp	r2, r3
 80135fc:	d3b9      	bcc.n	8013572 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80135fe:	2301      	movs	r3, #1
 8013600:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013602:	e7b6      	b.n	8013572 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013604:	4b17      	ldr	r3, [pc, #92]	@ (8013664 <xTaskIncrementTick+0x168>)
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801360a:	4915      	ldr	r1, [pc, #84]	@ (8013660 <xTaskIncrementTick+0x164>)
 801360c:	4613      	mov	r3, r2
 801360e:	009b      	lsls	r3, r3, #2
 8013610:	4413      	add	r3, r2
 8013612:	009b      	lsls	r3, r3, #2
 8013614:	440b      	add	r3, r1
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	2b01      	cmp	r3, #1
 801361a:	d901      	bls.n	8013620 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 801361c:	2301      	movs	r3, #1
 801361e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8013620:	4b11      	ldr	r3, [pc, #68]	@ (8013668 <xTaskIncrementTick+0x16c>)
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d007      	beq.n	8013638 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8013628:	2301      	movs	r3, #1
 801362a:	617b      	str	r3, [r7, #20]
 801362c:	e004      	b.n	8013638 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 801362e:	4b0f      	ldr	r3, [pc, #60]	@ (801366c <xTaskIncrementTick+0x170>)
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	3301      	adds	r3, #1
 8013634:	4a0d      	ldr	r2, [pc, #52]	@ (801366c <xTaskIncrementTick+0x170>)
 8013636:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8013638:	697b      	ldr	r3, [r7, #20]
}
 801363a:	4618      	mov	r0, r3
 801363c:	3718      	adds	r7, #24
 801363e:	46bd      	mov	sp, r7
 8013640:	bd80      	pop	{r7, pc}
 8013642:	bf00      	nop
 8013644:	20000880 	.word	0x20000880
 8013648:	2000085c 	.word	0x2000085c
 801364c:	20000810 	.word	0x20000810
 8013650:	20000814 	.word	0x20000814
 8013654:	20000870 	.word	0x20000870
 8013658:	20000878 	.word	0x20000878
 801365c:	20000860 	.word	0x20000860
 8013660:	20000784 	.word	0x20000784
 8013664:	20000780 	.word	0x20000780
 8013668:	2000086c 	.word	0x2000086c
 801366c:	20000868 	.word	0x20000868

08013670 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013670:	b480      	push	{r7}
 8013672:	b087      	sub	sp, #28
 8013674:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013676:	4b27      	ldr	r3, [pc, #156]	@ (8013714 <vTaskSwitchContext+0xa4>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d003      	beq.n	8013686 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 801367e:	4b26      	ldr	r3, [pc, #152]	@ (8013718 <vTaskSwitchContext+0xa8>)
 8013680:	2201      	movs	r2, #1
 8013682:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8013684:	e040      	b.n	8013708 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8013686:	4b24      	ldr	r3, [pc, #144]	@ (8013718 <vTaskSwitchContext+0xa8>)
 8013688:	2200      	movs	r2, #0
 801368a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801368c:	4b23      	ldr	r3, [pc, #140]	@ (801371c <vTaskSwitchContext+0xac>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	fab3 f383 	clz	r3, r3
 8013698:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 801369a:	7afb      	ldrb	r3, [r7, #11]
 801369c:	f1c3 031f 	rsb	r3, r3, #31
 80136a0:	617b      	str	r3, [r7, #20]
 80136a2:	491f      	ldr	r1, [pc, #124]	@ (8013720 <vTaskSwitchContext+0xb0>)
 80136a4:	697a      	ldr	r2, [r7, #20]
 80136a6:	4613      	mov	r3, r2
 80136a8:	009b      	lsls	r3, r3, #2
 80136aa:	4413      	add	r3, r2
 80136ac:	009b      	lsls	r3, r3, #2
 80136ae:	440b      	add	r3, r1
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d10b      	bne.n	80136ce <vTaskSwitchContext+0x5e>
        __asm volatile
 80136b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136ba:	f383 8811 	msr	BASEPRI, r3
 80136be:	f3bf 8f6f 	isb	sy
 80136c2:	f3bf 8f4f 	dsb	sy
 80136c6:	607b      	str	r3, [r7, #4]
    }
 80136c8:	bf00      	nop
 80136ca:	bf00      	nop
 80136cc:	e7fd      	b.n	80136ca <vTaskSwitchContext+0x5a>
 80136ce:	697a      	ldr	r2, [r7, #20]
 80136d0:	4613      	mov	r3, r2
 80136d2:	009b      	lsls	r3, r3, #2
 80136d4:	4413      	add	r3, r2
 80136d6:	009b      	lsls	r3, r3, #2
 80136d8:	4a11      	ldr	r2, [pc, #68]	@ (8013720 <vTaskSwitchContext+0xb0>)
 80136da:	4413      	add	r3, r2
 80136dc:	613b      	str	r3, [r7, #16]
 80136de:	693b      	ldr	r3, [r7, #16]
 80136e0:	685b      	ldr	r3, [r3, #4]
 80136e2:	685a      	ldr	r2, [r3, #4]
 80136e4:	693b      	ldr	r3, [r7, #16]
 80136e6:	605a      	str	r2, [r3, #4]
 80136e8:	693b      	ldr	r3, [r7, #16]
 80136ea:	685a      	ldr	r2, [r3, #4]
 80136ec:	693b      	ldr	r3, [r7, #16]
 80136ee:	3308      	adds	r3, #8
 80136f0:	429a      	cmp	r2, r3
 80136f2:	d104      	bne.n	80136fe <vTaskSwitchContext+0x8e>
 80136f4:	693b      	ldr	r3, [r7, #16]
 80136f6:	685b      	ldr	r3, [r3, #4]
 80136f8:	685a      	ldr	r2, [r3, #4]
 80136fa:	693b      	ldr	r3, [r7, #16]
 80136fc:	605a      	str	r2, [r3, #4]
 80136fe:	693b      	ldr	r3, [r7, #16]
 8013700:	685b      	ldr	r3, [r3, #4]
 8013702:	68db      	ldr	r3, [r3, #12]
 8013704:	4a07      	ldr	r2, [pc, #28]	@ (8013724 <vTaskSwitchContext+0xb4>)
 8013706:	6013      	str	r3, [r2, #0]
}
 8013708:	bf00      	nop
 801370a:	371c      	adds	r7, #28
 801370c:	46bd      	mov	sp, r7
 801370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013712:	4770      	bx	lr
 8013714:	20000880 	.word	0x20000880
 8013718:	2000086c 	.word	0x2000086c
 801371c:	20000860 	.word	0x20000860
 8013720:	20000784 	.word	0x20000784
 8013724:	20000780 	.word	0x20000780

08013728 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b084      	sub	sp, #16
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
 8013730:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d10b      	bne.n	8013750 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8013738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801373c:	f383 8811 	msr	BASEPRI, r3
 8013740:	f3bf 8f6f 	isb	sy
 8013744:	f3bf 8f4f 	dsb	sy
 8013748:	60fb      	str	r3, [r7, #12]
    }
 801374a:	bf00      	nop
 801374c:	bf00      	nop
 801374e:	e7fd      	b.n	801374c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013750:	4b07      	ldr	r3, [pc, #28]	@ (8013770 <vTaskPlaceOnEventList+0x48>)
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	3318      	adds	r3, #24
 8013756:	4619      	mov	r1, r3
 8013758:	6878      	ldr	r0, [r7, #4]
 801375a:	f7fe fd98 	bl	801228e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801375e:	2101      	movs	r1, #1
 8013760:	6838      	ldr	r0, [r7, #0]
 8013762:	f000 fb87 	bl	8013e74 <prvAddCurrentTaskToDelayedList>
}
 8013766:	bf00      	nop
 8013768:	3710      	adds	r7, #16
 801376a:	46bd      	mov	sp, r7
 801376c:	bd80      	pop	{r7, pc}
 801376e:	bf00      	nop
 8013770:	20000780 	.word	0x20000780

08013774 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8013774:	b580      	push	{r7, lr}
 8013776:	b086      	sub	sp, #24
 8013778:	af00      	add	r7, sp, #0
 801377a:	60f8      	str	r0, [r7, #12]
 801377c:	60b9      	str	r1, [r7, #8]
 801377e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d10b      	bne.n	801379e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8013786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801378a:	f383 8811 	msr	BASEPRI, r3
 801378e:	f3bf 8f6f 	isb	sy
 8013792:	f3bf 8f4f 	dsb	sy
 8013796:	617b      	str	r3, [r7, #20]
    }
 8013798:	bf00      	nop
 801379a:	bf00      	nop
 801379c:	e7fd      	b.n	801379a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801379e:	4b0a      	ldr	r3, [pc, #40]	@ (80137c8 <vTaskPlaceOnEventListRestricted+0x54>)
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	3318      	adds	r3, #24
 80137a4:	4619      	mov	r1, r3
 80137a6:	68f8      	ldr	r0, [r7, #12]
 80137a8:	f7fe fd4d 	bl	8012246 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d002      	beq.n	80137b8 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80137b2:	f04f 33ff 	mov.w	r3, #4294967295
 80137b6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80137b8:	6879      	ldr	r1, [r7, #4]
 80137ba:	68b8      	ldr	r0, [r7, #8]
 80137bc:	f000 fb5a 	bl	8013e74 <prvAddCurrentTaskToDelayedList>
    }
 80137c0:	bf00      	nop
 80137c2:	3718      	adds	r7, #24
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}
 80137c8:	20000780 	.word	0x20000780

080137cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b086      	sub	sp, #24
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	68db      	ldr	r3, [r3, #12]
 80137d8:	68db      	ldr	r3, [r3, #12]
 80137da:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80137dc:	693b      	ldr	r3, [r7, #16]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d10b      	bne.n	80137fa <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80137e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137e6:	f383 8811 	msr	BASEPRI, r3
 80137ea:	f3bf 8f6f 	isb	sy
 80137ee:	f3bf 8f4f 	dsb	sy
 80137f2:	60fb      	str	r3, [r7, #12]
    }
 80137f4:	bf00      	nop
 80137f6:	bf00      	nop
 80137f8:	e7fd      	b.n	80137f6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80137fa:	693b      	ldr	r3, [r7, #16]
 80137fc:	3318      	adds	r3, #24
 80137fe:	4618      	mov	r0, r3
 8013800:	f7fe fd7e 	bl	8012300 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013804:	4b1d      	ldr	r3, [pc, #116]	@ (801387c <xTaskRemoveFromEventList+0xb0>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d11c      	bne.n	8013846 <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801380c:	693b      	ldr	r3, [r7, #16]
 801380e:	3304      	adds	r3, #4
 8013810:	4618      	mov	r0, r3
 8013812:	f7fe fd75 	bl	8012300 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8013816:	693b      	ldr	r3, [r7, #16]
 8013818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801381a:	2201      	movs	r2, #1
 801381c:	409a      	lsls	r2, r3
 801381e:	4b18      	ldr	r3, [pc, #96]	@ (8013880 <xTaskRemoveFromEventList+0xb4>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	4313      	orrs	r3, r2
 8013824:	4a16      	ldr	r2, [pc, #88]	@ (8013880 <xTaskRemoveFromEventList+0xb4>)
 8013826:	6013      	str	r3, [r2, #0]
 8013828:	693b      	ldr	r3, [r7, #16]
 801382a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801382c:	4613      	mov	r3, r2
 801382e:	009b      	lsls	r3, r3, #2
 8013830:	4413      	add	r3, r2
 8013832:	009b      	lsls	r3, r3, #2
 8013834:	4a13      	ldr	r2, [pc, #76]	@ (8013884 <xTaskRemoveFromEventList+0xb8>)
 8013836:	441a      	add	r2, r3
 8013838:	693b      	ldr	r3, [r7, #16]
 801383a:	3304      	adds	r3, #4
 801383c:	4619      	mov	r1, r3
 801383e:	4610      	mov	r0, r2
 8013840:	f7fe fd01 	bl	8012246 <vListInsertEnd>
 8013844:	e005      	b.n	8013852 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013846:	693b      	ldr	r3, [r7, #16]
 8013848:	3318      	adds	r3, #24
 801384a:	4619      	mov	r1, r3
 801384c:	480e      	ldr	r0, [pc, #56]	@ (8013888 <xTaskRemoveFromEventList+0xbc>)
 801384e:	f7fe fcfa 	bl	8012246 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013852:	693b      	ldr	r3, [r7, #16]
 8013854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013856:	4b0d      	ldr	r3, [pc, #52]	@ (801388c <xTaskRemoveFromEventList+0xc0>)
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801385c:	429a      	cmp	r2, r3
 801385e:	d905      	bls.n	801386c <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8013860:	2301      	movs	r3, #1
 8013862:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8013864:	4b0a      	ldr	r3, [pc, #40]	@ (8013890 <xTaskRemoveFromEventList+0xc4>)
 8013866:	2201      	movs	r2, #1
 8013868:	601a      	str	r2, [r3, #0]
 801386a:	e001      	b.n	8013870 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 801386c:	2300      	movs	r3, #0
 801386e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8013870:	697b      	ldr	r3, [r7, #20]
}
 8013872:	4618      	mov	r0, r3
 8013874:	3718      	adds	r7, #24
 8013876:	46bd      	mov	sp, r7
 8013878:	bd80      	pop	{r7, pc}
 801387a:	bf00      	nop
 801387c:	20000880 	.word	0x20000880
 8013880:	20000860 	.word	0x20000860
 8013884:	20000784 	.word	0x20000784
 8013888:	20000818 	.word	0x20000818
 801388c:	20000780 	.word	0x20000780
 8013890:	2000086c 	.word	0x2000086c

08013894 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013894:	b480      	push	{r7}
 8013896:	b083      	sub	sp, #12
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 801389c:	4b06      	ldr	r3, [pc, #24]	@ (80138b8 <vTaskInternalSetTimeOutState+0x24>)
 801389e:	681a      	ldr	r2, [r3, #0]
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80138a4:	4b05      	ldr	r3, [pc, #20]	@ (80138bc <vTaskInternalSetTimeOutState+0x28>)
 80138a6:	681a      	ldr	r2, [r3, #0]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	605a      	str	r2, [r3, #4]
}
 80138ac:	bf00      	nop
 80138ae:	370c      	adds	r7, #12
 80138b0:	46bd      	mov	sp, r7
 80138b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b6:	4770      	bx	lr
 80138b8:	20000870 	.word	0x20000870
 80138bc:	2000085c 	.word	0x2000085c

080138c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b088      	sub	sp, #32
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
 80138c8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d10b      	bne.n	80138e8 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80138d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138d4:	f383 8811 	msr	BASEPRI, r3
 80138d8:	f3bf 8f6f 	isb	sy
 80138dc:	f3bf 8f4f 	dsb	sy
 80138e0:	613b      	str	r3, [r7, #16]
    }
 80138e2:	bf00      	nop
 80138e4:	bf00      	nop
 80138e6:	e7fd      	b.n	80138e4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80138e8:	683b      	ldr	r3, [r7, #0]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d10b      	bne.n	8013906 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80138ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138f2:	f383 8811 	msr	BASEPRI, r3
 80138f6:	f3bf 8f6f 	isb	sy
 80138fa:	f3bf 8f4f 	dsb	sy
 80138fe:	60fb      	str	r3, [r7, #12]
    }
 8013900:	bf00      	nop
 8013902:	bf00      	nop
 8013904:	e7fd      	b.n	8013902 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8013906:	f000 ff69 	bl	80147dc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 801390a:	4b1f      	ldr	r3, [pc, #124]	@ (8013988 <xTaskCheckForTimeOut+0xc8>)
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	685b      	ldr	r3, [r3, #4]
 8013914:	69ba      	ldr	r2, [r7, #24]
 8013916:	1ad3      	subs	r3, r2, r3
 8013918:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 801391a:	683b      	ldr	r3, [r7, #0]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013922:	d102      	bne.n	801392a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8013924:	2300      	movs	r3, #0
 8013926:	61fb      	str	r3, [r7, #28]
 8013928:	e026      	b.n	8013978 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	681a      	ldr	r2, [r3, #0]
 801392e:	4b17      	ldr	r3, [pc, #92]	@ (801398c <xTaskCheckForTimeOut+0xcc>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	429a      	cmp	r2, r3
 8013934:	d00a      	beq.n	801394c <xTaskCheckForTimeOut+0x8c>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	69ba      	ldr	r2, [r7, #24]
 801393c:	429a      	cmp	r2, r3
 801393e:	d305      	bcc.n	801394c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8013940:	2301      	movs	r3, #1
 8013942:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	2200      	movs	r2, #0
 8013948:	601a      	str	r2, [r3, #0]
 801394a:	e015      	b.n	8013978 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801394c:	683b      	ldr	r3, [r7, #0]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	697a      	ldr	r2, [r7, #20]
 8013952:	429a      	cmp	r2, r3
 8013954:	d20b      	bcs.n	801396e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8013956:	683b      	ldr	r3, [r7, #0]
 8013958:	681a      	ldr	r2, [r3, #0]
 801395a:	697b      	ldr	r3, [r7, #20]
 801395c:	1ad2      	subs	r2, r2, r3
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8013962:	6878      	ldr	r0, [r7, #4]
 8013964:	f7ff ff96 	bl	8013894 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8013968:	2300      	movs	r3, #0
 801396a:	61fb      	str	r3, [r7, #28]
 801396c:	e004      	b.n	8013978 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 801396e:	683b      	ldr	r3, [r7, #0]
 8013970:	2200      	movs	r2, #0
 8013972:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8013974:	2301      	movs	r3, #1
 8013976:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8013978:	f000 ff62 	bl	8014840 <vPortExitCritical>

    return xReturn;
 801397c:	69fb      	ldr	r3, [r7, #28]
}
 801397e:	4618      	mov	r0, r3
 8013980:	3720      	adds	r7, #32
 8013982:	46bd      	mov	sp, r7
 8013984:	bd80      	pop	{r7, pc}
 8013986:	bf00      	nop
 8013988:	2000085c 	.word	0x2000085c
 801398c:	20000870 	.word	0x20000870

08013990 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013990:	b480      	push	{r7}
 8013992:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8013994:	4b03      	ldr	r3, [pc, #12]	@ (80139a4 <vTaskMissedYield+0x14>)
 8013996:	2201      	movs	r2, #1
 8013998:	601a      	str	r2, [r3, #0]
}
 801399a:	bf00      	nop
 801399c:	46bd      	mov	sp, r7
 801399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a2:	4770      	bx	lr
 80139a4:	2000086c 	.word	0x2000086c

080139a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b082      	sub	sp, #8
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80139b0:	f000 f852 	bl	8013a58 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80139b4:	4b06      	ldr	r3, [pc, #24]	@ (80139d0 <prvIdleTask+0x28>)
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	2b01      	cmp	r3, #1
 80139ba:	d9f9      	bls.n	80139b0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80139bc:	4b05      	ldr	r3, [pc, #20]	@ (80139d4 <prvIdleTask+0x2c>)
 80139be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80139c2:	601a      	str	r2, [r3, #0]
 80139c4:	f3bf 8f4f 	dsb	sy
 80139c8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80139cc:	e7f0      	b.n	80139b0 <prvIdleTask+0x8>
 80139ce:	bf00      	nop
 80139d0:	20000784 	.word	0x20000784
 80139d4:	e000ed04 	.word	0xe000ed04

080139d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	b082      	sub	sp, #8
 80139dc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80139de:	2300      	movs	r3, #0
 80139e0:	607b      	str	r3, [r7, #4]
 80139e2:	e00c      	b.n	80139fe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80139e4:	687a      	ldr	r2, [r7, #4]
 80139e6:	4613      	mov	r3, r2
 80139e8:	009b      	lsls	r3, r3, #2
 80139ea:	4413      	add	r3, r2
 80139ec:	009b      	lsls	r3, r3, #2
 80139ee:	4a12      	ldr	r2, [pc, #72]	@ (8013a38 <prvInitialiseTaskLists+0x60>)
 80139f0:	4413      	add	r3, r2
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7fe fbfa 	bl	80121ec <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	3301      	adds	r3, #1
 80139fc:	607b      	str	r3, [r7, #4]
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2b04      	cmp	r3, #4
 8013a02:	d9ef      	bls.n	80139e4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8013a04:	480d      	ldr	r0, [pc, #52]	@ (8013a3c <prvInitialiseTaskLists+0x64>)
 8013a06:	f7fe fbf1 	bl	80121ec <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8013a0a:	480d      	ldr	r0, [pc, #52]	@ (8013a40 <prvInitialiseTaskLists+0x68>)
 8013a0c:	f7fe fbee 	bl	80121ec <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8013a10:	480c      	ldr	r0, [pc, #48]	@ (8013a44 <prvInitialiseTaskLists+0x6c>)
 8013a12:	f7fe fbeb 	bl	80121ec <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8013a16:	480c      	ldr	r0, [pc, #48]	@ (8013a48 <prvInitialiseTaskLists+0x70>)
 8013a18:	f7fe fbe8 	bl	80121ec <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8013a1c:	480b      	ldr	r0, [pc, #44]	@ (8013a4c <prvInitialiseTaskLists+0x74>)
 8013a1e:	f7fe fbe5 	bl	80121ec <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8013a22:	4b0b      	ldr	r3, [pc, #44]	@ (8013a50 <prvInitialiseTaskLists+0x78>)
 8013a24:	4a05      	ldr	r2, [pc, #20]	@ (8013a3c <prvInitialiseTaskLists+0x64>)
 8013a26:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013a28:	4b0a      	ldr	r3, [pc, #40]	@ (8013a54 <prvInitialiseTaskLists+0x7c>)
 8013a2a:	4a05      	ldr	r2, [pc, #20]	@ (8013a40 <prvInitialiseTaskLists+0x68>)
 8013a2c:	601a      	str	r2, [r3, #0]
}
 8013a2e:	bf00      	nop
 8013a30:	3708      	adds	r7, #8
 8013a32:	46bd      	mov	sp, r7
 8013a34:	bd80      	pop	{r7, pc}
 8013a36:	bf00      	nop
 8013a38:	20000784 	.word	0x20000784
 8013a3c:	200007e8 	.word	0x200007e8
 8013a40:	200007fc 	.word	0x200007fc
 8013a44:	20000818 	.word	0x20000818
 8013a48:	2000082c 	.word	0x2000082c
 8013a4c:	20000844 	.word	0x20000844
 8013a50:	20000810 	.word	0x20000810
 8013a54:	20000814 	.word	0x20000814

08013a58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b082      	sub	sp, #8
 8013a5c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013a5e:	e019      	b.n	8013a94 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8013a60:	f000 febc 	bl	80147dc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a64:	4b10      	ldr	r3, [pc, #64]	@ (8013aa8 <prvCheckTasksWaitingTermination+0x50>)
 8013a66:	68db      	ldr	r3, [r3, #12]
 8013a68:	68db      	ldr	r3, [r3, #12]
 8013a6a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	3304      	adds	r3, #4
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7fe fc45 	bl	8012300 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8013a76:	4b0d      	ldr	r3, [pc, #52]	@ (8013aac <prvCheckTasksWaitingTermination+0x54>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	3b01      	subs	r3, #1
 8013a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8013aac <prvCheckTasksWaitingTermination+0x54>)
 8013a7e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8013a80:	4b0b      	ldr	r3, [pc, #44]	@ (8013ab0 <prvCheckTasksWaitingTermination+0x58>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	3b01      	subs	r3, #1
 8013a86:	4a0a      	ldr	r2, [pc, #40]	@ (8013ab0 <prvCheckTasksWaitingTermination+0x58>)
 8013a88:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8013a8a:	f000 fed9 	bl	8014840 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	f000 f810 	bl	8013ab4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013a94:	4b06      	ldr	r3, [pc, #24]	@ (8013ab0 <prvCheckTasksWaitingTermination+0x58>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d1e1      	bne.n	8013a60 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8013a9c:	bf00      	nop
 8013a9e:	bf00      	nop
 8013aa0:	3708      	adds	r7, #8
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}
 8013aa6:	bf00      	nop
 8013aa8:	2000082c 	.word	0x2000082c
 8013aac:	20000858 	.word	0x20000858
 8013ab0:	20000840 	.word	0x20000840

08013ab4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b082      	sub	sp, #8
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	f001 f897 	bl	8014bf4 <vPortFree>
                vPortFree( pxTCB );
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	f001 f894 	bl	8014bf4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8013acc:	bf00      	nop
 8013ace:	3708      	adds	r7, #8
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}

08013ad4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013ad4:	b480      	push	{r7}
 8013ad6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8013b04 <prvResetNextTaskUnblockTime+0x30>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d104      	bne.n	8013aec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8013ae2:	4b09      	ldr	r3, [pc, #36]	@ (8013b08 <prvResetNextTaskUnblockTime+0x34>)
 8013ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8013ae8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8013aea:	e005      	b.n	8013af8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013aec:	4b05      	ldr	r3, [pc, #20]	@ (8013b04 <prvResetNextTaskUnblockTime+0x30>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	68db      	ldr	r3, [r3, #12]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	4a04      	ldr	r2, [pc, #16]	@ (8013b08 <prvResetNextTaskUnblockTime+0x34>)
 8013af6:	6013      	str	r3, [r2, #0]
}
 8013af8:	bf00      	nop
 8013afa:	46bd      	mov	sp, r7
 8013afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b00:	4770      	bx	lr
 8013b02:	bf00      	nop
 8013b04:	20000810 	.word	0x20000810
 8013b08:	20000878 	.word	0x20000878

08013b0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8013b0c:	b480      	push	{r7}
 8013b0e:	b083      	sub	sp, #12
 8013b10:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8013b12:	4b0b      	ldr	r3, [pc, #44]	@ (8013b40 <xTaskGetSchedulerState+0x34>)
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d102      	bne.n	8013b20 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	607b      	str	r3, [r7, #4]
 8013b1e:	e008      	b.n	8013b32 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b20:	4b08      	ldr	r3, [pc, #32]	@ (8013b44 <xTaskGetSchedulerState+0x38>)
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d102      	bne.n	8013b2e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8013b28:	2302      	movs	r3, #2
 8013b2a:	607b      	str	r3, [r7, #4]
 8013b2c:	e001      	b.n	8013b32 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8013b2e:	2300      	movs	r3, #0
 8013b30:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8013b32:	687b      	ldr	r3, [r7, #4]
    }
 8013b34:	4618      	mov	r0, r3
 8013b36:	370c      	adds	r7, #12
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3e:	4770      	bx	lr
 8013b40:	20000864 	.word	0x20000864
 8013b44:	20000880 	.word	0x20000880

08013b48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b084      	sub	sp, #16
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8013b54:	2300      	movs	r3, #0
 8013b56:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d05e      	beq.n	8013c1c <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013b5e:	68bb      	ldr	r3, [r7, #8]
 8013b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b62:	4b31      	ldr	r3, [pc, #196]	@ (8013c28 <xTaskPriorityInherit+0xe0>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b68:	429a      	cmp	r2, r3
 8013b6a:	d24e      	bcs.n	8013c0a <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013b6c:	68bb      	ldr	r3, [r7, #8]
 8013b6e:	699b      	ldr	r3, [r3, #24]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	db06      	blt.n	8013b82 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b74:	4b2c      	ldr	r3, [pc, #176]	@ (8013c28 <xTaskPriorityInherit+0xe0>)
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b7a:	f1c3 0205 	rsb	r2, r3, #5
 8013b7e:	68bb      	ldr	r3, [r7, #8]
 8013b80:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013b82:	68bb      	ldr	r3, [r7, #8]
 8013b84:	6959      	ldr	r1, [r3, #20]
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b8a:	4613      	mov	r3, r2
 8013b8c:	009b      	lsls	r3, r3, #2
 8013b8e:	4413      	add	r3, r2
 8013b90:	009b      	lsls	r3, r3, #2
 8013b92:	4a26      	ldr	r2, [pc, #152]	@ (8013c2c <xTaskPriorityInherit+0xe4>)
 8013b94:	4413      	add	r3, r2
 8013b96:	4299      	cmp	r1, r3
 8013b98:	d12f      	bne.n	8013bfa <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013b9a:	68bb      	ldr	r3, [r7, #8]
 8013b9c:	3304      	adds	r3, #4
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f7fe fbae 	bl	8012300 <uxListRemove>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d10a      	bne.n	8013bc0 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8013baa:	68bb      	ldr	r3, [r7, #8]
 8013bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bae:	2201      	movs	r2, #1
 8013bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8013bb4:	43da      	mvns	r2, r3
 8013bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8013c30 <xTaskPriorityInherit+0xe8>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	4013      	ands	r3, r2
 8013bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8013c30 <xTaskPriorityInherit+0xe8>)
 8013bbe:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013bc0:	4b19      	ldr	r3, [pc, #100]	@ (8013c28 <xTaskPriorityInherit+0xe0>)
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8013bca:	68bb      	ldr	r3, [r7, #8]
 8013bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bce:	2201      	movs	r2, #1
 8013bd0:	409a      	lsls	r2, r3
 8013bd2:	4b17      	ldr	r3, [pc, #92]	@ (8013c30 <xTaskPriorityInherit+0xe8>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	4313      	orrs	r3, r2
 8013bd8:	4a15      	ldr	r2, [pc, #84]	@ (8013c30 <xTaskPriorityInherit+0xe8>)
 8013bda:	6013      	str	r3, [r2, #0]
 8013bdc:	68bb      	ldr	r3, [r7, #8]
 8013bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013be0:	4613      	mov	r3, r2
 8013be2:	009b      	lsls	r3, r3, #2
 8013be4:	4413      	add	r3, r2
 8013be6:	009b      	lsls	r3, r3, #2
 8013be8:	4a10      	ldr	r2, [pc, #64]	@ (8013c2c <xTaskPriorityInherit+0xe4>)
 8013bea:	441a      	add	r2, r3
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	3304      	adds	r3, #4
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	4610      	mov	r0, r2
 8013bf4:	f7fe fb27 	bl	8012246 <vListInsertEnd>
 8013bf8:	e004      	b.n	8013c04 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8013c28 <xTaskPriorityInherit+0xe0>)
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c00:	68bb      	ldr	r3, [r7, #8]
 8013c02:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8013c04:	2301      	movs	r3, #1
 8013c06:	60fb      	str	r3, [r7, #12]
 8013c08:	e008      	b.n	8013c1c <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013c0a:	68bb      	ldr	r3, [r7, #8]
 8013c0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013c0e:	4b06      	ldr	r3, [pc, #24]	@ (8013c28 <xTaskPriorityInherit+0xe0>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d201      	bcs.n	8013c1c <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8013c18:	2301      	movs	r3, #1
 8013c1a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8013c1c:	68fb      	ldr	r3, [r7, #12]
    }
 8013c1e:	4618      	mov	r0, r3
 8013c20:	3710      	adds	r7, #16
 8013c22:	46bd      	mov	sp, r7
 8013c24:	bd80      	pop	{r7, pc}
 8013c26:	bf00      	nop
 8013c28:	20000780 	.word	0x20000780
 8013c2c:	20000784 	.word	0x20000784
 8013c30:	20000860 	.word	0x20000860

08013c34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8013c34:	b580      	push	{r7, lr}
 8013c36:	b086      	sub	sp, #24
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8013c40:	2300      	movs	r3, #0
 8013c42:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d065      	beq.n	8013d16 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8013c4a:	4b35      	ldr	r3, [pc, #212]	@ (8013d20 <xTaskPriorityDisinherit+0xec>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	693a      	ldr	r2, [r7, #16]
 8013c50:	429a      	cmp	r2, r3
 8013c52:	d00b      	beq.n	8013c6c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8013c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c58:	f383 8811 	msr	BASEPRI, r3
 8013c5c:	f3bf 8f6f 	isb	sy
 8013c60:	f3bf 8f4f 	dsb	sy
 8013c64:	60fb      	str	r3, [r7, #12]
    }
 8013c66:	bf00      	nop
 8013c68:	bf00      	nop
 8013c6a:	e7fd      	b.n	8013c68 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8013c6c:	693b      	ldr	r3, [r7, #16]
 8013c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d10b      	bne.n	8013c8c <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8013c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c78:	f383 8811 	msr	BASEPRI, r3
 8013c7c:	f3bf 8f6f 	isb	sy
 8013c80:	f3bf 8f4f 	dsb	sy
 8013c84:	60bb      	str	r3, [r7, #8]
    }
 8013c86:	bf00      	nop
 8013c88:	bf00      	nop
 8013c8a:	e7fd      	b.n	8013c88 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8013c8c:	693b      	ldr	r3, [r7, #16]
 8013c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013c90:	1e5a      	subs	r2, r3, #1
 8013c92:	693b      	ldr	r3, [r7, #16]
 8013c94:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013c96:	693b      	ldr	r3, [r7, #16]
 8013c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c9a:	693b      	ldr	r3, [r7, #16]
 8013c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d039      	beq.n	8013d16 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013ca2:	693b      	ldr	r3, [r7, #16]
 8013ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d135      	bne.n	8013d16 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013caa:	693b      	ldr	r3, [r7, #16]
 8013cac:	3304      	adds	r3, #4
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f7fe fb26 	bl	8012300 <uxListRemove>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d10a      	bne.n	8013cd0 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8013cba:	693b      	ldr	r3, [r7, #16]
 8013cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cbe:	2201      	movs	r2, #1
 8013cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8013cc4:	43da      	mvns	r2, r3
 8013cc6:	4b17      	ldr	r3, [pc, #92]	@ (8013d24 <xTaskPriorityDisinherit+0xf0>)
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	4013      	ands	r3, r2
 8013ccc:	4a15      	ldr	r2, [pc, #84]	@ (8013d24 <xTaskPriorityDisinherit+0xf0>)
 8013cce:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013cd0:	693b      	ldr	r3, [r7, #16]
 8013cd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013cd4:	693b      	ldr	r3, [r7, #16]
 8013cd6:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013cd8:	693b      	ldr	r3, [r7, #16]
 8013cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cdc:	f1c3 0205 	rsb	r2, r3, #5
 8013ce0:	693b      	ldr	r3, [r7, #16]
 8013ce2:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8013ce4:	693b      	ldr	r3, [r7, #16]
 8013ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ce8:	2201      	movs	r2, #1
 8013cea:	409a      	lsls	r2, r3
 8013cec:	4b0d      	ldr	r3, [pc, #52]	@ (8013d24 <xTaskPriorityDisinherit+0xf0>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	4313      	orrs	r3, r2
 8013cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8013d24 <xTaskPriorityDisinherit+0xf0>)
 8013cf4:	6013      	str	r3, [r2, #0]
 8013cf6:	693b      	ldr	r3, [r7, #16]
 8013cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013cfa:	4613      	mov	r3, r2
 8013cfc:	009b      	lsls	r3, r3, #2
 8013cfe:	4413      	add	r3, r2
 8013d00:	009b      	lsls	r3, r3, #2
 8013d02:	4a09      	ldr	r2, [pc, #36]	@ (8013d28 <xTaskPriorityDisinherit+0xf4>)
 8013d04:	441a      	add	r2, r3
 8013d06:	693b      	ldr	r3, [r7, #16]
 8013d08:	3304      	adds	r3, #4
 8013d0a:	4619      	mov	r1, r3
 8013d0c:	4610      	mov	r0, r2
 8013d0e:	f7fe fa9a 	bl	8012246 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8013d12:	2301      	movs	r3, #1
 8013d14:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8013d16:	697b      	ldr	r3, [r7, #20]
    }
 8013d18:	4618      	mov	r0, r3
 8013d1a:	3718      	adds	r7, #24
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}
 8013d20:	20000780 	.word	0x20000780
 8013d24:	20000860 	.word	0x20000860
 8013d28:	20000784 	.word	0x20000784

08013d2c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b088      	sub	sp, #32
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
 8013d34:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013d3a:	2301      	movs	r3, #1
 8013d3c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d079      	beq.n	8013e38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8013d44:	69bb      	ldr	r3, [r7, #24]
 8013d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d10b      	bne.n	8013d64 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8013d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d50:	f383 8811 	msr	BASEPRI, r3
 8013d54:	f3bf 8f6f 	isb	sy
 8013d58:	f3bf 8f4f 	dsb	sy
 8013d5c:	60fb      	str	r3, [r7, #12]
    }
 8013d5e:	bf00      	nop
 8013d60:	bf00      	nop
 8013d62:	e7fd      	b.n	8013d60 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013d64:	69bb      	ldr	r3, [r7, #24]
 8013d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013d68:	683a      	ldr	r2, [r7, #0]
 8013d6a:	429a      	cmp	r2, r3
 8013d6c:	d902      	bls.n	8013d74 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013d6e:	683b      	ldr	r3, [r7, #0]
 8013d70:	61fb      	str	r3, [r7, #28]
 8013d72:	e002      	b.n	8013d7a <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8013d74:	69bb      	ldr	r3, [r7, #24]
 8013d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013d78:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8013d7a:	69bb      	ldr	r3, [r7, #24]
 8013d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d7e:	69fa      	ldr	r2, [r7, #28]
 8013d80:	429a      	cmp	r2, r3
 8013d82:	d059      	beq.n	8013e38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013d84:	69bb      	ldr	r3, [r7, #24]
 8013d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013d88:	697a      	ldr	r2, [r7, #20]
 8013d8a:	429a      	cmp	r2, r3
 8013d8c:	d154      	bne.n	8013e38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8013d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8013e40 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	69ba      	ldr	r2, [r7, #24]
 8013d94:	429a      	cmp	r2, r3
 8013d96:	d10b      	bne.n	8013db0 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8013d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d9c:	f383 8811 	msr	BASEPRI, r3
 8013da0:	f3bf 8f6f 	isb	sy
 8013da4:	f3bf 8f4f 	dsb	sy
 8013da8:	60bb      	str	r3, [r7, #8]
    }
 8013daa:	bf00      	nop
 8013dac:	bf00      	nop
 8013dae:	e7fd      	b.n	8013dac <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013db0:	69bb      	ldr	r3, [r7, #24]
 8013db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013db4:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8013db6:	69bb      	ldr	r3, [r7, #24]
 8013db8:	69fa      	ldr	r2, [r7, #28]
 8013dba:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013dbc:	69bb      	ldr	r3, [r7, #24]
 8013dbe:	699b      	ldr	r3, [r3, #24]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	db04      	blt.n	8013dce <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013dc4:	69fb      	ldr	r3, [r7, #28]
 8013dc6:	f1c3 0205 	rsb	r2, r3, #5
 8013dca:	69bb      	ldr	r3, [r7, #24]
 8013dcc:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013dce:	69bb      	ldr	r3, [r7, #24]
 8013dd0:	6959      	ldr	r1, [r3, #20]
 8013dd2:	693a      	ldr	r2, [r7, #16]
 8013dd4:	4613      	mov	r3, r2
 8013dd6:	009b      	lsls	r3, r3, #2
 8013dd8:	4413      	add	r3, r2
 8013dda:	009b      	lsls	r3, r3, #2
 8013ddc:	4a19      	ldr	r2, [pc, #100]	@ (8013e44 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8013dde:	4413      	add	r3, r2
 8013de0:	4299      	cmp	r1, r3
 8013de2:	d129      	bne.n	8013e38 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013de4:	69bb      	ldr	r3, [r7, #24]
 8013de6:	3304      	adds	r3, #4
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7fe fa89 	bl	8012300 <uxListRemove>
 8013dee:	4603      	mov	r3, r0
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d10a      	bne.n	8013e0a <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8013df4:	69bb      	ldr	r3, [r7, #24]
 8013df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013df8:	2201      	movs	r2, #1
 8013dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8013dfe:	43da      	mvns	r2, r3
 8013e00:	4b11      	ldr	r3, [pc, #68]	@ (8013e48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	4013      	ands	r3, r2
 8013e06:	4a10      	ldr	r2, [pc, #64]	@ (8013e48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013e08:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8013e0a:	69bb      	ldr	r3, [r7, #24]
 8013e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e0e:	2201      	movs	r2, #1
 8013e10:	409a      	lsls	r2, r3
 8013e12:	4b0d      	ldr	r3, [pc, #52]	@ (8013e48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	4313      	orrs	r3, r2
 8013e18:	4a0b      	ldr	r2, [pc, #44]	@ (8013e48 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8013e1a:	6013      	str	r3, [r2, #0]
 8013e1c:	69bb      	ldr	r3, [r7, #24]
 8013e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e20:	4613      	mov	r3, r2
 8013e22:	009b      	lsls	r3, r3, #2
 8013e24:	4413      	add	r3, r2
 8013e26:	009b      	lsls	r3, r3, #2
 8013e28:	4a06      	ldr	r2, [pc, #24]	@ (8013e44 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8013e2a:	441a      	add	r2, r3
 8013e2c:	69bb      	ldr	r3, [r7, #24]
 8013e2e:	3304      	adds	r3, #4
 8013e30:	4619      	mov	r1, r3
 8013e32:	4610      	mov	r0, r2
 8013e34:	f7fe fa07 	bl	8012246 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8013e38:	bf00      	nop
 8013e3a:	3720      	adds	r7, #32
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}
 8013e40:	20000780 	.word	0x20000780
 8013e44:	20000784 	.word	0x20000784
 8013e48:	20000860 	.word	0x20000860

08013e4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8013e4c:	b480      	push	{r7}
 8013e4e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8013e50:	4b07      	ldr	r3, [pc, #28]	@ (8013e70 <pvTaskIncrementMutexHeldCount+0x24>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d004      	beq.n	8013e62 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8013e58:	4b05      	ldr	r3, [pc, #20]	@ (8013e70 <pvTaskIncrementMutexHeldCount+0x24>)
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013e5e:	3201      	adds	r2, #1
 8013e60:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 8013e62:	4b03      	ldr	r3, [pc, #12]	@ (8013e70 <pvTaskIncrementMutexHeldCount+0x24>)
 8013e64:	681b      	ldr	r3, [r3, #0]
    }
 8013e66:	4618      	mov	r0, r3
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6e:	4770      	bx	lr
 8013e70:	20000780 	.word	0x20000780

08013e74 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8013e7e:	4b29      	ldr	r3, [pc, #164]	@ (8013f24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013e84:	4b28      	ldr	r3, [pc, #160]	@ (8013f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	3304      	adds	r3, #4
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7fe fa38 	bl	8012300 <uxListRemove>
 8013e90:	4603      	mov	r3, r0
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d10b      	bne.n	8013eae <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013e96:	4b24      	ldr	r3, [pc, #144]	@ (8013f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e9c:	2201      	movs	r2, #1
 8013e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8013ea2:	43da      	mvns	r2, r3
 8013ea4:	4b21      	ldr	r3, [pc, #132]	@ (8013f2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	4013      	ands	r3, r2
 8013eaa:	4a20      	ldr	r2, [pc, #128]	@ (8013f2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8013eac:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013eb4:	d10a      	bne.n	8013ecc <prvAddCurrentTaskToDelayedList+0x58>
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d007      	beq.n	8013ecc <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8013f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	3304      	adds	r3, #4
 8013ec2:	4619      	mov	r1, r3
 8013ec4:	481a      	ldr	r0, [pc, #104]	@ (8013f30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013ec6:	f7fe f9be 	bl	8012246 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8013eca:	e026      	b.n	8013f1a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8013ecc:	68fa      	ldr	r2, [r7, #12]
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	4413      	add	r3, r2
 8013ed2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013ed4:	4b14      	ldr	r3, [pc, #80]	@ (8013f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	68ba      	ldr	r2, [r7, #8]
 8013eda:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8013edc:	68ba      	ldr	r2, [r7, #8]
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	429a      	cmp	r2, r3
 8013ee2:	d209      	bcs.n	8013ef8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013ee4:	4b13      	ldr	r3, [pc, #76]	@ (8013f34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013ee6:	681a      	ldr	r2, [r3, #0]
 8013ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8013f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	3304      	adds	r3, #4
 8013eee:	4619      	mov	r1, r3
 8013ef0:	4610      	mov	r0, r2
 8013ef2:	f7fe f9cc 	bl	801228e <vListInsert>
}
 8013ef6:	e010      	b.n	8013f1a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8013f38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013efa:	681a      	ldr	r2, [r3, #0]
 8013efc:	4b0a      	ldr	r3, [pc, #40]	@ (8013f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	3304      	adds	r3, #4
 8013f02:	4619      	mov	r1, r3
 8013f04:	4610      	mov	r0, r2
 8013f06:	f7fe f9c2 	bl	801228e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8013f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8013f3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	68ba      	ldr	r2, [r7, #8]
 8013f10:	429a      	cmp	r2, r3
 8013f12:	d202      	bcs.n	8013f1a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8013f14:	4a09      	ldr	r2, [pc, #36]	@ (8013f3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	6013      	str	r3, [r2, #0]
}
 8013f1a:	bf00      	nop
 8013f1c:	3710      	adds	r7, #16
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd80      	pop	{r7, pc}
 8013f22:	bf00      	nop
 8013f24:	2000085c 	.word	0x2000085c
 8013f28:	20000780 	.word	0x20000780
 8013f2c:	20000860 	.word	0x20000860
 8013f30:	20000844 	.word	0x20000844
 8013f34:	20000814 	.word	0x20000814
 8013f38:	20000810 	.word	0x20000810
 8013f3c:	20000878 	.word	0x20000878

08013f40 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b084      	sub	sp, #16
 8013f44:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8013f46:	2300      	movs	r3, #0
 8013f48:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8013f4a:	f000 fae1 	bl	8014510 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8013f4e:	4b12      	ldr	r3, [pc, #72]	@ (8013f98 <xTimerCreateTimerTask+0x58>)
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d00b      	beq.n	8013f6e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8013f56:	4b11      	ldr	r3, [pc, #68]	@ (8013f9c <xTimerCreateTimerTask+0x5c>)
 8013f58:	9301      	str	r3, [sp, #4]
 8013f5a:	2302      	movs	r3, #2
 8013f5c:	9300      	str	r3, [sp, #0]
 8013f5e:	2300      	movs	r3, #0
 8013f60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8013f64:	490e      	ldr	r1, [pc, #56]	@ (8013fa0 <xTimerCreateTimerTask+0x60>)
 8013f66:	480f      	ldr	r0, [pc, #60]	@ (8013fa4 <xTimerCreateTimerTask+0x64>)
 8013f68:	f7ff f83e 	bl	8012fe8 <xTaskCreate>
 8013f6c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d10b      	bne.n	8013f8c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8013f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f78:	f383 8811 	msr	BASEPRI, r3
 8013f7c:	f3bf 8f6f 	isb	sy
 8013f80:	f3bf 8f4f 	dsb	sy
 8013f84:	603b      	str	r3, [r7, #0]
    }
 8013f86:	bf00      	nop
 8013f88:	bf00      	nop
 8013f8a:	e7fd      	b.n	8013f88 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8013f8c:	687b      	ldr	r3, [r7, #4]
    }
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3708      	adds	r7, #8
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}
 8013f96:	bf00      	nop
 8013f98:	200008b4 	.word	0x200008b4
 8013f9c:	200008b8 	.word	0x200008b8
 8013fa0:	08018c30 	.word	0x08018c30
 8013fa4:	080140e1 	.word	0x080140e1

08013fa8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b08a      	sub	sp, #40	@ 0x28
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	60f8      	str	r0, [r7, #12]
 8013fb0:	60b9      	str	r1, [r7, #8]
 8013fb2:	607a      	str	r2, [r7, #4]
 8013fb4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d10b      	bne.n	8013fd8 <xTimerGenericCommand+0x30>
        __asm volatile
 8013fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fc4:	f383 8811 	msr	BASEPRI, r3
 8013fc8:	f3bf 8f6f 	isb	sy
 8013fcc:	f3bf 8f4f 	dsb	sy
 8013fd0:	623b      	str	r3, [r7, #32]
    }
 8013fd2:	bf00      	nop
 8013fd4:	bf00      	nop
 8013fd6:	e7fd      	b.n	8013fd4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8013fd8:	4b19      	ldr	r3, [pc, #100]	@ (8014040 <xTimerGenericCommand+0x98>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d02a      	beq.n	8014036 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8013fe0:	68bb      	ldr	r3, [r7, #8]
 8013fe2:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013fec:	68bb      	ldr	r3, [r7, #8]
 8013fee:	2b05      	cmp	r3, #5
 8013ff0:	dc18      	bgt.n	8014024 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013ff2:	f7ff fd8b 	bl	8013b0c <xTaskGetSchedulerState>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	2b02      	cmp	r3, #2
 8013ffa:	d109      	bne.n	8014010 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013ffc:	4b10      	ldr	r3, [pc, #64]	@ (8014040 <xTimerGenericCommand+0x98>)
 8013ffe:	6818      	ldr	r0, [r3, #0]
 8014000:	f107 0114 	add.w	r1, r7, #20
 8014004:	2300      	movs	r3, #0
 8014006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014008:	f7fe fac6 	bl	8012598 <xQueueGenericSend>
 801400c:	6278      	str	r0, [r7, #36]	@ 0x24
 801400e:	e012      	b.n	8014036 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014010:	4b0b      	ldr	r3, [pc, #44]	@ (8014040 <xTimerGenericCommand+0x98>)
 8014012:	6818      	ldr	r0, [r3, #0]
 8014014:	f107 0114 	add.w	r1, r7, #20
 8014018:	2300      	movs	r3, #0
 801401a:	2200      	movs	r2, #0
 801401c:	f7fe fabc 	bl	8012598 <xQueueGenericSend>
 8014020:	6278      	str	r0, [r7, #36]	@ 0x24
 8014022:	e008      	b.n	8014036 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014024:	4b06      	ldr	r3, [pc, #24]	@ (8014040 <xTimerGenericCommand+0x98>)
 8014026:	6818      	ldr	r0, [r3, #0]
 8014028:	f107 0114 	add.w	r1, r7, #20
 801402c:	2300      	movs	r3, #0
 801402e:	683a      	ldr	r2, [r7, #0]
 8014030:	f7fe fbb4 	bl	801279c <xQueueGenericSendFromISR>
 8014034:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8014036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8014038:	4618      	mov	r0, r3
 801403a:	3728      	adds	r7, #40	@ 0x28
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}
 8014040:	200008b4 	.word	0x200008b4

08014044 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8014044:	b580      	push	{r7, lr}
 8014046:	b088      	sub	sp, #32
 8014048:	af02      	add	r7, sp, #8
 801404a:	6078      	str	r0, [r7, #4]
 801404c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801404e:	4b23      	ldr	r3, [pc, #140]	@ (80140dc <prvProcessExpiredTimer+0x98>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	68db      	ldr	r3, [r3, #12]
 8014054:	68db      	ldr	r3, [r3, #12]
 8014056:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014058:	697b      	ldr	r3, [r7, #20]
 801405a:	3304      	adds	r3, #4
 801405c:	4618      	mov	r0, r3
 801405e:	f7fe f94f 	bl	8012300 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014068:	f003 0304 	and.w	r3, r3, #4
 801406c:	2b00      	cmp	r3, #0
 801406e:	d023      	beq.n	80140b8 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014070:	697b      	ldr	r3, [r7, #20]
 8014072:	699a      	ldr	r2, [r3, #24]
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	18d1      	adds	r1, r2, r3
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	683a      	ldr	r2, [r7, #0]
 801407c:	6978      	ldr	r0, [r7, #20]
 801407e:	f000 f8d5 	bl	801422c <prvInsertTimerInActiveList>
 8014082:	4603      	mov	r3, r0
 8014084:	2b00      	cmp	r3, #0
 8014086:	d020      	beq.n	80140ca <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014088:	2300      	movs	r3, #0
 801408a:	9300      	str	r3, [sp, #0]
 801408c:	2300      	movs	r3, #0
 801408e:	687a      	ldr	r2, [r7, #4]
 8014090:	2100      	movs	r1, #0
 8014092:	6978      	ldr	r0, [r7, #20]
 8014094:	f7ff ff88 	bl	8013fa8 <xTimerGenericCommand>
 8014098:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 801409a:	693b      	ldr	r3, [r7, #16]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d114      	bne.n	80140ca <prvProcessExpiredTimer+0x86>
        __asm volatile
 80140a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140a4:	f383 8811 	msr	BASEPRI, r3
 80140a8:	f3bf 8f6f 	isb	sy
 80140ac:	f3bf 8f4f 	dsb	sy
 80140b0:	60fb      	str	r3, [r7, #12]
    }
 80140b2:	bf00      	nop
 80140b4:	bf00      	nop
 80140b6:	e7fd      	b.n	80140b4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80140b8:	697b      	ldr	r3, [r7, #20]
 80140ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80140be:	f023 0301 	bic.w	r3, r3, #1
 80140c2:	b2da      	uxtb	r2, r3
 80140c4:	697b      	ldr	r3, [r7, #20]
 80140c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80140ca:	697b      	ldr	r3, [r7, #20]
 80140cc:	6a1b      	ldr	r3, [r3, #32]
 80140ce:	6978      	ldr	r0, [r7, #20]
 80140d0:	4798      	blx	r3
    }
 80140d2:	bf00      	nop
 80140d4:	3718      	adds	r7, #24
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}
 80140da:	bf00      	nop
 80140dc:	200008ac 	.word	0x200008ac

080140e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b084      	sub	sp, #16
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80140e8:	f107 0308 	add.w	r3, r7, #8
 80140ec:	4618      	mov	r0, r3
 80140ee:	f000 f859 	bl	80141a4 <prvGetNextExpireTime>
 80140f2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	4619      	mov	r1, r3
 80140f8:	68f8      	ldr	r0, [r7, #12]
 80140fa:	f000 f805 	bl	8014108 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80140fe:	f000 f8d7 	bl	80142b0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014102:	bf00      	nop
 8014104:	e7f0      	b.n	80140e8 <prvTimerTask+0x8>
	...

08014108 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8014108:	b580      	push	{r7, lr}
 801410a:	b084      	sub	sp, #16
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
 8014110:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8014112:	f7ff f937 	bl	8013384 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014116:	f107 0308 	add.w	r3, r7, #8
 801411a:	4618      	mov	r0, r3
 801411c:	f000 f866 	bl	80141ec <prvSampleTimeNow>
 8014120:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8014122:	68bb      	ldr	r3, [r7, #8]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d130      	bne.n	801418a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014128:	683b      	ldr	r3, [r7, #0]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d10a      	bne.n	8014144 <prvProcessTimerOrBlockTask+0x3c>
 801412e:	687a      	ldr	r2, [r7, #4]
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	429a      	cmp	r2, r3
 8014134:	d806      	bhi.n	8014144 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8014136:	f7ff f933 	bl	80133a0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801413a:	68f9      	ldr	r1, [r7, #12]
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	f7ff ff81 	bl	8014044 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8014142:	e024      	b.n	801418e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d008      	beq.n	801415c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801414a:	4b13      	ldr	r3, [pc, #76]	@ (8014198 <prvProcessTimerOrBlockTask+0x90>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d101      	bne.n	8014158 <prvProcessTimerOrBlockTask+0x50>
 8014154:	2301      	movs	r3, #1
 8014156:	e000      	b.n	801415a <prvProcessTimerOrBlockTask+0x52>
 8014158:	2300      	movs	r3, #0
 801415a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801415c:	4b0f      	ldr	r3, [pc, #60]	@ (801419c <prvProcessTimerOrBlockTask+0x94>)
 801415e:	6818      	ldr	r0, [r3, #0]
 8014160:	687a      	ldr	r2, [r7, #4]
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	1ad3      	subs	r3, r2, r3
 8014166:	683a      	ldr	r2, [r7, #0]
 8014168:	4619      	mov	r1, r3
 801416a:	f7fe ff09 	bl	8012f80 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 801416e:	f7ff f917 	bl	80133a0 <xTaskResumeAll>
 8014172:	4603      	mov	r3, r0
 8014174:	2b00      	cmp	r3, #0
 8014176:	d10a      	bne.n	801418e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8014178:	4b09      	ldr	r3, [pc, #36]	@ (80141a0 <prvProcessTimerOrBlockTask+0x98>)
 801417a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801417e:	601a      	str	r2, [r3, #0]
 8014180:	f3bf 8f4f 	dsb	sy
 8014184:	f3bf 8f6f 	isb	sy
    }
 8014188:	e001      	b.n	801418e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 801418a:	f7ff f909 	bl	80133a0 <xTaskResumeAll>
    }
 801418e:	bf00      	nop
 8014190:	3710      	adds	r7, #16
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}
 8014196:	bf00      	nop
 8014198:	200008b0 	.word	0x200008b0
 801419c:	200008b4 	.word	0x200008b4
 80141a0:	e000ed04 	.word	0xe000ed04

080141a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80141a4:	b480      	push	{r7}
 80141a6:	b085      	sub	sp, #20
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80141ac:	4b0e      	ldr	r3, [pc, #56]	@ (80141e8 <prvGetNextExpireTime+0x44>)
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d101      	bne.n	80141ba <prvGetNextExpireTime+0x16>
 80141b6:	2201      	movs	r2, #1
 80141b8:	e000      	b.n	80141bc <prvGetNextExpireTime+0x18>
 80141ba:	2200      	movs	r2, #0
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d105      	bne.n	80141d4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80141c8:	4b07      	ldr	r3, [pc, #28]	@ (80141e8 <prvGetNextExpireTime+0x44>)
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	68db      	ldr	r3, [r3, #12]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	60fb      	str	r3, [r7, #12]
 80141d2:	e001      	b.n	80141d8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80141d4:	2300      	movs	r3, #0
 80141d6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80141d8:	68fb      	ldr	r3, [r7, #12]
    }
 80141da:	4618      	mov	r0, r3
 80141dc:	3714      	adds	r7, #20
 80141de:	46bd      	mov	sp, r7
 80141e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e4:	4770      	bx	lr
 80141e6:	bf00      	nop
 80141e8:	200008ac 	.word	0x200008ac

080141ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b084      	sub	sp, #16
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80141f4:	f7ff f972 	bl	80134dc <xTaskGetTickCount>
 80141f8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80141fa:	4b0b      	ldr	r3, [pc, #44]	@ (8014228 <prvSampleTimeNow+0x3c>)
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	68fa      	ldr	r2, [r7, #12]
 8014200:	429a      	cmp	r2, r3
 8014202:	d205      	bcs.n	8014210 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8014204:	f000 f91e 	bl	8014444 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	2201      	movs	r2, #1
 801420c:	601a      	str	r2, [r3, #0]
 801420e:	e002      	b.n	8014216 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	2200      	movs	r2, #0
 8014214:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8014216:	4a04      	ldr	r2, [pc, #16]	@ (8014228 <prvSampleTimeNow+0x3c>)
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 801421c:	68fb      	ldr	r3, [r7, #12]
    }
 801421e:	4618      	mov	r0, r3
 8014220:	3710      	adds	r7, #16
 8014222:	46bd      	mov	sp, r7
 8014224:	bd80      	pop	{r7, pc}
 8014226:	bf00      	nop
 8014228:	200008bc 	.word	0x200008bc

0801422c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 801422c:	b580      	push	{r7, lr}
 801422e:	b086      	sub	sp, #24
 8014230:	af00      	add	r7, sp, #0
 8014232:	60f8      	str	r0, [r7, #12]
 8014234:	60b9      	str	r1, [r7, #8]
 8014236:	607a      	str	r2, [r7, #4]
 8014238:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 801423a:	2300      	movs	r3, #0
 801423c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	68ba      	ldr	r2, [r7, #8]
 8014242:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	68fa      	ldr	r2, [r7, #12]
 8014248:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 801424a:	68ba      	ldr	r2, [r7, #8]
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	429a      	cmp	r2, r3
 8014250:	d812      	bhi.n	8014278 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014252:	687a      	ldr	r2, [r7, #4]
 8014254:	683b      	ldr	r3, [r7, #0]
 8014256:	1ad2      	subs	r2, r2, r3
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	699b      	ldr	r3, [r3, #24]
 801425c:	429a      	cmp	r2, r3
 801425e:	d302      	bcc.n	8014266 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8014260:	2301      	movs	r3, #1
 8014262:	617b      	str	r3, [r7, #20]
 8014264:	e01b      	b.n	801429e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014266:	4b10      	ldr	r3, [pc, #64]	@ (80142a8 <prvInsertTimerInActiveList+0x7c>)
 8014268:	681a      	ldr	r2, [r3, #0]
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	3304      	adds	r3, #4
 801426e:	4619      	mov	r1, r3
 8014270:	4610      	mov	r0, r2
 8014272:	f7fe f80c 	bl	801228e <vListInsert>
 8014276:	e012      	b.n	801429e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014278:	687a      	ldr	r2, [r7, #4]
 801427a:	683b      	ldr	r3, [r7, #0]
 801427c:	429a      	cmp	r2, r3
 801427e:	d206      	bcs.n	801428e <prvInsertTimerInActiveList+0x62>
 8014280:	68ba      	ldr	r2, [r7, #8]
 8014282:	683b      	ldr	r3, [r7, #0]
 8014284:	429a      	cmp	r2, r3
 8014286:	d302      	bcc.n	801428e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8014288:	2301      	movs	r3, #1
 801428a:	617b      	str	r3, [r7, #20]
 801428c:	e007      	b.n	801429e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801428e:	4b07      	ldr	r3, [pc, #28]	@ (80142ac <prvInsertTimerInActiveList+0x80>)
 8014290:	681a      	ldr	r2, [r3, #0]
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	3304      	adds	r3, #4
 8014296:	4619      	mov	r1, r3
 8014298:	4610      	mov	r0, r2
 801429a:	f7fd fff8 	bl	801228e <vListInsert>
            }
        }

        return xProcessTimerNow;
 801429e:	697b      	ldr	r3, [r7, #20]
    }
 80142a0:	4618      	mov	r0, r3
 80142a2:	3718      	adds	r7, #24
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}
 80142a8:	200008b0 	.word	0x200008b0
 80142ac:	200008ac 	.word	0x200008ac

080142b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b08c      	sub	sp, #48	@ 0x30
 80142b4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80142b6:	e0b2      	b.n	801441e <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80142b8:	68bb      	ldr	r3, [r7, #8]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	f2c0 80af 	blt.w	801441e <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80142c0:	693b      	ldr	r3, [r7, #16]
 80142c2:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80142c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142c6:	695b      	ldr	r3, [r3, #20]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d004      	beq.n	80142d6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80142cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142ce:	3304      	adds	r3, #4
 80142d0:	4618      	mov	r0, r3
 80142d2:	f7fe f815 	bl	8012300 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80142d6:	1d3b      	adds	r3, r7, #4
 80142d8:	4618      	mov	r0, r3
 80142da:	f7ff ff87 	bl	80141ec <prvSampleTimeNow>
 80142de:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	2b09      	cmp	r3, #9
 80142e4:	f200 8098 	bhi.w	8014418 <prvProcessReceivedCommands+0x168>
 80142e8:	a201      	add	r2, pc, #4	@ (adr r2, 80142f0 <prvProcessReceivedCommands+0x40>)
 80142ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142ee:	bf00      	nop
 80142f0:	08014319 	.word	0x08014319
 80142f4:	08014319 	.word	0x08014319
 80142f8:	08014319 	.word	0x08014319
 80142fc:	0801438f 	.word	0x0801438f
 8014300:	080143a3 	.word	0x080143a3
 8014304:	080143ef 	.word	0x080143ef
 8014308:	08014319 	.word	0x08014319
 801430c:	08014319 	.word	0x08014319
 8014310:	0801438f 	.word	0x0801438f
 8014314:	080143a3 	.word	0x080143a3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801431a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801431e:	f043 0301 	orr.w	r3, r3, #1
 8014322:	b2da      	uxtb	r2, r3
 8014324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014326:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801432a:	68fa      	ldr	r2, [r7, #12]
 801432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801432e:	699b      	ldr	r3, [r3, #24]
 8014330:	18d1      	adds	r1, r2, r3
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	6a3a      	ldr	r2, [r7, #32]
 8014336:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014338:	f7ff ff78 	bl	801422c <prvInsertTimerInActiveList>
 801433c:	4603      	mov	r3, r0
 801433e:	2b00      	cmp	r3, #0
 8014340:	d06c      	beq.n	801441c <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014344:	6a1b      	ldr	r3, [r3, #32]
 8014346:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014348:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801434c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014350:	f003 0304 	and.w	r3, r3, #4
 8014354:	2b00      	cmp	r3, #0
 8014356:	d061      	beq.n	801441c <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014358:	68fa      	ldr	r2, [r7, #12]
 801435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801435c:	699b      	ldr	r3, [r3, #24]
 801435e:	441a      	add	r2, r3
 8014360:	2300      	movs	r3, #0
 8014362:	9300      	str	r3, [sp, #0]
 8014364:	2300      	movs	r3, #0
 8014366:	2100      	movs	r1, #0
 8014368:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801436a:	f7ff fe1d 	bl	8013fa8 <xTimerGenericCommand>
 801436e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8014370:	69fb      	ldr	r3, [r7, #28]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d152      	bne.n	801441c <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8014376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801437a:	f383 8811 	msr	BASEPRI, r3
 801437e:	f3bf 8f6f 	isb	sy
 8014382:	f3bf 8f4f 	dsb	sy
 8014386:	61bb      	str	r3, [r7, #24]
    }
 8014388:	bf00      	nop
 801438a:	bf00      	nop
 801438c:	e7fd      	b.n	801438a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801438e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014390:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014394:	f023 0301 	bic.w	r3, r3, #1
 8014398:	b2da      	uxtb	r2, r3
 801439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801439c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80143a0:	e03d      	b.n	801441e <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80143a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80143a8:	f043 0301 	orr.w	r3, r3, #1
 80143ac:	b2da      	uxtb	r2, r3
 80143ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80143b4:	68fa      	ldr	r2, [r7, #12]
 80143b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143b8:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80143ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143bc:	699b      	ldr	r3, [r3, #24]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d10b      	bne.n	80143da <prvProcessReceivedCommands+0x12a>
        __asm volatile
 80143c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143c6:	f383 8811 	msr	BASEPRI, r3
 80143ca:	f3bf 8f6f 	isb	sy
 80143ce:	f3bf 8f4f 	dsb	sy
 80143d2:	617b      	str	r3, [r7, #20]
    }
 80143d4:	bf00      	nop
 80143d6:	bf00      	nop
 80143d8:	e7fd      	b.n	80143d6 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80143da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143dc:	699a      	ldr	r2, [r3, #24]
 80143de:	6a3b      	ldr	r3, [r7, #32]
 80143e0:	18d1      	adds	r1, r2, r3
 80143e2:	6a3b      	ldr	r3, [r7, #32]
 80143e4:	6a3a      	ldr	r2, [r7, #32]
 80143e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80143e8:	f7ff ff20 	bl	801422c <prvInsertTimerInActiveList>
                        break;
 80143ec:	e017      	b.n	801441e <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80143ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80143f4:	f003 0302 	and.w	r3, r3, #2
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d103      	bne.n	8014404 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 80143fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80143fe:	f000 fbf9 	bl	8014bf4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8014402:	e00c      	b.n	801441e <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014406:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801440a:	f023 0301 	bic.w	r3, r3, #1
 801440e:	b2da      	uxtb	r2, r3
 8014410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014412:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8014416:	e002      	b.n	801441e <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8014418:	bf00      	nop
 801441a:	e000      	b.n	801441e <prvProcessReceivedCommands+0x16e>
                        break;
 801441c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801441e:	4b08      	ldr	r3, [pc, #32]	@ (8014440 <prvProcessReceivedCommands+0x190>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	f107 0108 	add.w	r1, r7, #8
 8014426:	2200      	movs	r2, #0
 8014428:	4618      	mov	r0, r3
 801442a:	f7fe fa65 	bl	80128f8 <xQueueReceive>
 801442e:	4603      	mov	r3, r0
 8014430:	2b00      	cmp	r3, #0
 8014432:	f47f af41 	bne.w	80142b8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8014436:	bf00      	nop
 8014438:	bf00      	nop
 801443a:	3728      	adds	r7, #40	@ 0x28
 801443c:	46bd      	mov	sp, r7
 801443e:	bd80      	pop	{r7, pc}
 8014440:	200008b4 	.word	0x200008b4

08014444 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8014444:	b580      	push	{r7, lr}
 8014446:	b088      	sub	sp, #32
 8014448:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801444a:	e049      	b.n	80144e0 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801444c:	4b2e      	ldr	r3, [pc, #184]	@ (8014508 <prvSwitchTimerLists+0xc4>)
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	68db      	ldr	r3, [r3, #12]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014456:	4b2c      	ldr	r3, [pc, #176]	@ (8014508 <prvSwitchTimerLists+0xc4>)
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	68db      	ldr	r3, [r3, #12]
 801445c:	68db      	ldr	r3, [r3, #12]
 801445e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	3304      	adds	r3, #4
 8014464:	4618      	mov	r0, r3
 8014466:	f7fd ff4b 	bl	8012300 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	6a1b      	ldr	r3, [r3, #32]
 801446e:	68f8      	ldr	r0, [r7, #12]
 8014470:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014478:	f003 0304 	and.w	r3, r3, #4
 801447c:	2b00      	cmp	r3, #0
 801447e:	d02f      	beq.n	80144e0 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	699b      	ldr	r3, [r3, #24]
 8014484:	693a      	ldr	r2, [r7, #16]
 8014486:	4413      	add	r3, r2
 8014488:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 801448a:	68ba      	ldr	r2, [r7, #8]
 801448c:	693b      	ldr	r3, [r7, #16]
 801448e:	429a      	cmp	r2, r3
 8014490:	d90e      	bls.n	80144b0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	68ba      	ldr	r2, [r7, #8]
 8014496:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	68fa      	ldr	r2, [r7, #12]
 801449c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801449e:	4b1a      	ldr	r3, [pc, #104]	@ (8014508 <prvSwitchTimerLists+0xc4>)
 80144a0:	681a      	ldr	r2, [r3, #0]
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	3304      	adds	r3, #4
 80144a6:	4619      	mov	r1, r3
 80144a8:	4610      	mov	r0, r2
 80144aa:	f7fd fef0 	bl	801228e <vListInsert>
 80144ae:	e017      	b.n	80144e0 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80144b0:	2300      	movs	r3, #0
 80144b2:	9300      	str	r3, [sp, #0]
 80144b4:	2300      	movs	r3, #0
 80144b6:	693a      	ldr	r2, [r7, #16]
 80144b8:	2100      	movs	r1, #0
 80144ba:	68f8      	ldr	r0, [r7, #12]
 80144bc:	f7ff fd74 	bl	8013fa8 <xTimerGenericCommand>
 80144c0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d10b      	bne.n	80144e0 <prvSwitchTimerLists+0x9c>
        __asm volatile
 80144c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144cc:	f383 8811 	msr	BASEPRI, r3
 80144d0:	f3bf 8f6f 	isb	sy
 80144d4:	f3bf 8f4f 	dsb	sy
 80144d8:	603b      	str	r3, [r7, #0]
    }
 80144da:	bf00      	nop
 80144dc:	bf00      	nop
 80144de:	e7fd      	b.n	80144dc <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80144e0:	4b09      	ldr	r3, [pc, #36]	@ (8014508 <prvSwitchTimerLists+0xc4>)
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d1b0      	bne.n	801444c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80144ea:	4b07      	ldr	r3, [pc, #28]	@ (8014508 <prvSwitchTimerLists+0xc4>)
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80144f0:	4b06      	ldr	r3, [pc, #24]	@ (801450c <prvSwitchTimerLists+0xc8>)
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	4a04      	ldr	r2, [pc, #16]	@ (8014508 <prvSwitchTimerLists+0xc4>)
 80144f6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80144f8:	4a04      	ldr	r2, [pc, #16]	@ (801450c <prvSwitchTimerLists+0xc8>)
 80144fa:	697b      	ldr	r3, [r7, #20]
 80144fc:	6013      	str	r3, [r2, #0]
    }
 80144fe:	bf00      	nop
 8014500:	3718      	adds	r7, #24
 8014502:	46bd      	mov	sp, r7
 8014504:	bd80      	pop	{r7, pc}
 8014506:	bf00      	nop
 8014508:	200008ac 	.word	0x200008ac
 801450c:	200008b0 	.word	0x200008b0

08014510 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8014510:	b580      	push	{r7, lr}
 8014512:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8014514:	f000 f962 	bl	80147dc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8014518:	4b12      	ldr	r3, [pc, #72]	@ (8014564 <prvCheckForValidListAndQueue+0x54>)
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d11d      	bne.n	801455c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8014520:	4811      	ldr	r0, [pc, #68]	@ (8014568 <prvCheckForValidListAndQueue+0x58>)
 8014522:	f7fd fe63 	bl	80121ec <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8014526:	4811      	ldr	r0, [pc, #68]	@ (801456c <prvCheckForValidListAndQueue+0x5c>)
 8014528:	f7fd fe60 	bl	80121ec <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 801452c:	4b10      	ldr	r3, [pc, #64]	@ (8014570 <prvCheckForValidListAndQueue+0x60>)
 801452e:	4a0e      	ldr	r2, [pc, #56]	@ (8014568 <prvCheckForValidListAndQueue+0x58>)
 8014530:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8014532:	4b10      	ldr	r3, [pc, #64]	@ (8014574 <prvCheckForValidListAndQueue+0x64>)
 8014534:	4a0d      	ldr	r2, [pc, #52]	@ (801456c <prvCheckForValidListAndQueue+0x5c>)
 8014536:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8014538:	2200      	movs	r2, #0
 801453a:	210c      	movs	r1, #12
 801453c:	200a      	movs	r0, #10
 801453e:	f7fd ff73 	bl	8012428 <xQueueGenericCreate>
 8014542:	4603      	mov	r3, r0
 8014544:	4a07      	ldr	r2, [pc, #28]	@ (8014564 <prvCheckForValidListAndQueue+0x54>)
 8014546:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8014548:	4b06      	ldr	r3, [pc, #24]	@ (8014564 <prvCheckForValidListAndQueue+0x54>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d005      	beq.n	801455c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014550:	4b04      	ldr	r3, [pc, #16]	@ (8014564 <prvCheckForValidListAndQueue+0x54>)
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	4908      	ldr	r1, [pc, #32]	@ (8014578 <prvCheckForValidListAndQueue+0x68>)
 8014556:	4618      	mov	r0, r3
 8014558:	f7fe fce8 	bl	8012f2c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 801455c:	f000 f970 	bl	8014840 <vPortExitCritical>
    }
 8014560:	bf00      	nop
 8014562:	bd80      	pop	{r7, pc}
 8014564:	200008b4 	.word	0x200008b4
 8014568:	20000884 	.word	0x20000884
 801456c:	20000898 	.word	0x20000898
 8014570:	200008ac 	.word	0x200008ac
 8014574:	200008b0 	.word	0x200008b0
 8014578:	08018c38 	.word	0x08018c38

0801457c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 801457c:	b480      	push	{r7}
 801457e:	b085      	sub	sp, #20
 8014580:	af00      	add	r7, sp, #0
 8014582:	60f8      	str	r0, [r7, #12]
 8014584:	60b9      	str	r1, [r7, #8]
 8014586:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	3b04      	subs	r3, #4
 801458c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014594:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	3b04      	subs	r3, #4
 801459a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 801459c:	68bb      	ldr	r3, [r7, #8]
 801459e:	f023 0201 	bic.w	r2, r3, #1
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	3b04      	subs	r3, #4
 80145aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80145ac:	4a0c      	ldr	r2, [pc, #48]	@ (80145e0 <pxPortInitialiseStack+0x64>)
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	3b14      	subs	r3, #20
 80145b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80145b8:	687a      	ldr	r2, [r7, #4]
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	3b04      	subs	r3, #4
 80145c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	f06f 0202 	mvn.w	r2, #2
 80145ca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	3b20      	subs	r3, #32
 80145d0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80145d2:	68fb      	ldr	r3, [r7, #12]
}
 80145d4:	4618      	mov	r0, r3
 80145d6:	3714      	adds	r7, #20
 80145d8:	46bd      	mov	sp, r7
 80145da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145de:	4770      	bx	lr
 80145e0:	080145e5 	.word	0x080145e5

080145e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80145e4:	b480      	push	{r7}
 80145e6:	b085      	sub	sp, #20
 80145e8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80145ea:	2300      	movs	r3, #0
 80145ec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80145ee:	4b13      	ldr	r3, [pc, #76]	@ (801463c <prvTaskExitError+0x58>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145f6:	d00b      	beq.n	8014610 <prvTaskExitError+0x2c>
        __asm volatile
 80145f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145fc:	f383 8811 	msr	BASEPRI, r3
 8014600:	f3bf 8f6f 	isb	sy
 8014604:	f3bf 8f4f 	dsb	sy
 8014608:	60fb      	str	r3, [r7, #12]
    }
 801460a:	bf00      	nop
 801460c:	bf00      	nop
 801460e:	e7fd      	b.n	801460c <prvTaskExitError+0x28>
        __asm volatile
 8014610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014614:	f383 8811 	msr	BASEPRI, r3
 8014618:	f3bf 8f6f 	isb	sy
 801461c:	f3bf 8f4f 	dsb	sy
 8014620:	60bb      	str	r3, [r7, #8]
    }
 8014622:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8014624:	bf00      	nop
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	2b00      	cmp	r3, #0
 801462a:	d0fc      	beq.n	8014626 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 801462c:	bf00      	nop
 801462e:	bf00      	nop
 8014630:	3714      	adds	r7, #20
 8014632:	46bd      	mov	sp, r7
 8014634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014638:	4770      	bx	lr
 801463a:	bf00      	nop
 801463c:	20000068 	.word	0x20000068

08014640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8014640:	4b07      	ldr	r3, [pc, #28]	@ (8014660 <pxCurrentTCBConst2>)
 8014642:	6819      	ldr	r1, [r3, #0]
 8014644:	6808      	ldr	r0, [r1, #0]
 8014646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801464a:	f380 8809 	msr	PSP, r0
 801464e:	f3bf 8f6f 	isb	sy
 8014652:	f04f 0000 	mov.w	r0, #0
 8014656:	f380 8811 	msr	BASEPRI, r0
 801465a:	4770      	bx	lr
 801465c:	f3af 8000 	nop.w

08014660 <pxCurrentTCBConst2>:
 8014660:	20000780 	.word	0x20000780
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8014664:	bf00      	nop
 8014666:	bf00      	nop

08014668 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8014668:	4808      	ldr	r0, [pc, #32]	@ (801468c <prvPortStartFirstTask+0x24>)
 801466a:	6800      	ldr	r0, [r0, #0]
 801466c:	6800      	ldr	r0, [r0, #0]
 801466e:	f380 8808 	msr	MSP, r0
 8014672:	f04f 0000 	mov.w	r0, #0
 8014676:	f380 8814 	msr	CONTROL, r0
 801467a:	b662      	cpsie	i
 801467c:	b661      	cpsie	f
 801467e:	f3bf 8f4f 	dsb	sy
 8014682:	f3bf 8f6f 	isb	sy
 8014686:	df00      	svc	0
 8014688:	bf00      	nop
 801468a:	0000      	.short	0x0000
 801468c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8014690:	bf00      	nop
 8014692:	bf00      	nop

08014694 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014694:	b580      	push	{r7, lr}
 8014696:	b086      	sub	sp, #24
 8014698:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801469a:	4b47      	ldr	r3, [pc, #284]	@ (80147b8 <xPortStartScheduler+0x124>)
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	4a47      	ldr	r2, [pc, #284]	@ (80147bc <xPortStartScheduler+0x128>)
 80146a0:	4293      	cmp	r3, r2
 80146a2:	d10b      	bne.n	80146bc <xPortStartScheduler+0x28>
        __asm volatile
 80146a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146a8:	f383 8811 	msr	BASEPRI, r3
 80146ac:	f3bf 8f6f 	isb	sy
 80146b0:	f3bf 8f4f 	dsb	sy
 80146b4:	60fb      	str	r3, [r7, #12]
    }
 80146b6:	bf00      	nop
 80146b8:	bf00      	nop
 80146ba:	e7fd      	b.n	80146b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80146bc:	4b3e      	ldr	r3, [pc, #248]	@ (80147b8 <xPortStartScheduler+0x124>)
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	4a3f      	ldr	r2, [pc, #252]	@ (80147c0 <xPortStartScheduler+0x12c>)
 80146c2:	4293      	cmp	r3, r2
 80146c4:	d10b      	bne.n	80146de <xPortStartScheduler+0x4a>
        __asm volatile
 80146c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146ca:	f383 8811 	msr	BASEPRI, r3
 80146ce:	f3bf 8f6f 	isb	sy
 80146d2:	f3bf 8f4f 	dsb	sy
 80146d6:	613b      	str	r3, [r7, #16]
    }
 80146d8:	bf00      	nop
 80146da:	bf00      	nop
 80146dc:	e7fd      	b.n	80146da <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80146de:	4b39      	ldr	r3, [pc, #228]	@ (80147c4 <xPortStartScheduler+0x130>)
 80146e0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80146e2:	697b      	ldr	r3, [r7, #20]
 80146e4:	781b      	ldrb	r3, [r3, #0]
 80146e6:	b2db      	uxtb	r3, r3
 80146e8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80146ea:	697b      	ldr	r3, [r7, #20]
 80146ec:	22ff      	movs	r2, #255	@ 0xff
 80146ee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80146f0:	697b      	ldr	r3, [r7, #20]
 80146f2:	781b      	ldrb	r3, [r3, #0]
 80146f4:	b2db      	uxtb	r3, r3
 80146f6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80146f8:	78fb      	ldrb	r3, [r7, #3]
 80146fa:	b2db      	uxtb	r3, r3
 80146fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8014700:	b2da      	uxtb	r2, r3
 8014702:	4b31      	ldr	r3, [pc, #196]	@ (80147c8 <xPortStartScheduler+0x134>)
 8014704:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014706:	4b31      	ldr	r3, [pc, #196]	@ (80147cc <xPortStartScheduler+0x138>)
 8014708:	2207      	movs	r2, #7
 801470a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801470c:	e009      	b.n	8014722 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 801470e:	4b2f      	ldr	r3, [pc, #188]	@ (80147cc <xPortStartScheduler+0x138>)
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	3b01      	subs	r3, #1
 8014714:	4a2d      	ldr	r2, [pc, #180]	@ (80147cc <xPortStartScheduler+0x138>)
 8014716:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014718:	78fb      	ldrb	r3, [r7, #3]
 801471a:	b2db      	uxtb	r3, r3
 801471c:	005b      	lsls	r3, r3, #1
 801471e:	b2db      	uxtb	r3, r3
 8014720:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014722:	78fb      	ldrb	r3, [r7, #3]
 8014724:	b2db      	uxtb	r3, r3
 8014726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801472a:	2b80      	cmp	r3, #128	@ 0x80
 801472c:	d0ef      	beq.n	801470e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801472e:	4b27      	ldr	r3, [pc, #156]	@ (80147cc <xPortStartScheduler+0x138>)
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	f1c3 0307 	rsb	r3, r3, #7
 8014736:	2b04      	cmp	r3, #4
 8014738:	d00b      	beq.n	8014752 <xPortStartScheduler+0xbe>
        __asm volatile
 801473a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801473e:	f383 8811 	msr	BASEPRI, r3
 8014742:	f3bf 8f6f 	isb	sy
 8014746:	f3bf 8f4f 	dsb	sy
 801474a:	60bb      	str	r3, [r7, #8]
    }
 801474c:	bf00      	nop
 801474e:	bf00      	nop
 8014750:	e7fd      	b.n	801474e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014752:	4b1e      	ldr	r3, [pc, #120]	@ (80147cc <xPortStartScheduler+0x138>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	021b      	lsls	r3, r3, #8
 8014758:	4a1c      	ldr	r2, [pc, #112]	@ (80147cc <xPortStartScheduler+0x138>)
 801475a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801475c:	4b1b      	ldr	r3, [pc, #108]	@ (80147cc <xPortStartScheduler+0x138>)
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014764:	4a19      	ldr	r2, [pc, #100]	@ (80147cc <xPortStartScheduler+0x138>)
 8014766:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	b2da      	uxtb	r2, r3
 801476c:	697b      	ldr	r3, [r7, #20]
 801476e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8014770:	4b17      	ldr	r3, [pc, #92]	@ (80147d0 <xPortStartScheduler+0x13c>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	4a16      	ldr	r2, [pc, #88]	@ (80147d0 <xPortStartScheduler+0x13c>)
 8014776:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801477a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 801477c:	4b14      	ldr	r3, [pc, #80]	@ (80147d0 <xPortStartScheduler+0x13c>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	4a13      	ldr	r2, [pc, #76]	@ (80147d0 <xPortStartScheduler+0x13c>)
 8014782:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014786:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8014788:	f000 f8e0 	bl	801494c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 801478c:	4b11      	ldr	r3, [pc, #68]	@ (80147d4 <xPortStartScheduler+0x140>)
 801478e:	2200      	movs	r2, #0
 8014790:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8014792:	f000 f8ff 	bl	8014994 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014796:	4b10      	ldr	r3, [pc, #64]	@ (80147d8 <xPortStartScheduler+0x144>)
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	4a0f      	ldr	r2, [pc, #60]	@ (80147d8 <xPortStartScheduler+0x144>)
 801479c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80147a0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80147a2:	f7ff ff61 	bl	8014668 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80147a6:	f7fe ff63 	bl	8013670 <vTaskSwitchContext>
    prvTaskExitError();
 80147aa:	f7ff ff1b 	bl	80145e4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80147ae:	2300      	movs	r3, #0
}
 80147b0:	4618      	mov	r0, r3
 80147b2:	3718      	adds	r7, #24
 80147b4:	46bd      	mov	sp, r7
 80147b6:	bd80      	pop	{r7, pc}
 80147b8:	e000ed00 	.word	0xe000ed00
 80147bc:	410fc271 	.word	0x410fc271
 80147c0:	410fc270 	.word	0x410fc270
 80147c4:	e000e400 	.word	0xe000e400
 80147c8:	200008c0 	.word	0x200008c0
 80147cc:	200008c4 	.word	0x200008c4
 80147d0:	e000ed20 	.word	0xe000ed20
 80147d4:	20000068 	.word	0x20000068
 80147d8:	e000ef34 	.word	0xe000ef34

080147dc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80147dc:	b480      	push	{r7}
 80147de:	b083      	sub	sp, #12
 80147e0:	af00      	add	r7, sp, #0
        __asm volatile
 80147e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147e6:	f383 8811 	msr	BASEPRI, r3
 80147ea:	f3bf 8f6f 	isb	sy
 80147ee:	f3bf 8f4f 	dsb	sy
 80147f2:	607b      	str	r3, [r7, #4]
    }
 80147f4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80147f6:	4b10      	ldr	r3, [pc, #64]	@ (8014838 <vPortEnterCritical+0x5c>)
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	3301      	adds	r3, #1
 80147fc:	4a0e      	ldr	r2, [pc, #56]	@ (8014838 <vPortEnterCritical+0x5c>)
 80147fe:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8014800:	4b0d      	ldr	r3, [pc, #52]	@ (8014838 <vPortEnterCritical+0x5c>)
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	2b01      	cmp	r3, #1
 8014806:	d110      	bne.n	801482a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014808:	4b0c      	ldr	r3, [pc, #48]	@ (801483c <vPortEnterCritical+0x60>)
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	b2db      	uxtb	r3, r3
 801480e:	2b00      	cmp	r3, #0
 8014810:	d00b      	beq.n	801482a <vPortEnterCritical+0x4e>
        __asm volatile
 8014812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014816:	f383 8811 	msr	BASEPRI, r3
 801481a:	f3bf 8f6f 	isb	sy
 801481e:	f3bf 8f4f 	dsb	sy
 8014822:	603b      	str	r3, [r7, #0]
    }
 8014824:	bf00      	nop
 8014826:	bf00      	nop
 8014828:	e7fd      	b.n	8014826 <vPortEnterCritical+0x4a>
    }
}
 801482a:	bf00      	nop
 801482c:	370c      	adds	r7, #12
 801482e:	46bd      	mov	sp, r7
 8014830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014834:	4770      	bx	lr
 8014836:	bf00      	nop
 8014838:	20000068 	.word	0x20000068
 801483c:	e000ed04 	.word	0xe000ed04

08014840 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014840:	b480      	push	{r7}
 8014842:	b083      	sub	sp, #12
 8014844:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8014846:	4b12      	ldr	r3, [pc, #72]	@ (8014890 <vPortExitCritical+0x50>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d10b      	bne.n	8014866 <vPortExitCritical+0x26>
        __asm volatile
 801484e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014852:	f383 8811 	msr	BASEPRI, r3
 8014856:	f3bf 8f6f 	isb	sy
 801485a:	f3bf 8f4f 	dsb	sy
 801485e:	607b      	str	r3, [r7, #4]
    }
 8014860:	bf00      	nop
 8014862:	bf00      	nop
 8014864:	e7fd      	b.n	8014862 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8014866:	4b0a      	ldr	r3, [pc, #40]	@ (8014890 <vPortExitCritical+0x50>)
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	3b01      	subs	r3, #1
 801486c:	4a08      	ldr	r2, [pc, #32]	@ (8014890 <vPortExitCritical+0x50>)
 801486e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8014870:	4b07      	ldr	r3, [pc, #28]	@ (8014890 <vPortExitCritical+0x50>)
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d105      	bne.n	8014884 <vPortExitCritical+0x44>
 8014878:	2300      	movs	r3, #0
 801487a:	603b      	str	r3, [r7, #0]
        __asm volatile
 801487c:	683b      	ldr	r3, [r7, #0]
 801487e:	f383 8811 	msr	BASEPRI, r3
    }
 8014882:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8014884:	bf00      	nop
 8014886:	370c      	adds	r7, #12
 8014888:	46bd      	mov	sp, r7
 801488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488e:	4770      	bx	lr
 8014890:	20000068 	.word	0x20000068
	...

080148a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80148a0:	f3ef 8009 	mrs	r0, PSP
 80148a4:	f3bf 8f6f 	isb	sy
 80148a8:	4b15      	ldr	r3, [pc, #84]	@ (8014900 <pxCurrentTCBConst>)
 80148aa:	681a      	ldr	r2, [r3, #0]
 80148ac:	f01e 0f10 	tst.w	lr, #16
 80148b0:	bf08      	it	eq
 80148b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80148b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148ba:	6010      	str	r0, [r2, #0]
 80148bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80148c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80148c4:	f380 8811 	msr	BASEPRI, r0
 80148c8:	f3bf 8f4f 	dsb	sy
 80148cc:	f3bf 8f6f 	isb	sy
 80148d0:	f7fe fece 	bl	8013670 <vTaskSwitchContext>
 80148d4:	f04f 0000 	mov.w	r0, #0
 80148d8:	f380 8811 	msr	BASEPRI, r0
 80148dc:	bc09      	pop	{r0, r3}
 80148de:	6819      	ldr	r1, [r3, #0]
 80148e0:	6808      	ldr	r0, [r1, #0]
 80148e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148e6:	f01e 0f10 	tst.w	lr, #16
 80148ea:	bf08      	it	eq
 80148ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80148f0:	f380 8809 	msr	PSP, r0
 80148f4:	f3bf 8f6f 	isb	sy
 80148f8:	4770      	bx	lr
 80148fa:	bf00      	nop
 80148fc:	f3af 8000 	nop.w

08014900 <pxCurrentTCBConst>:
 8014900:	20000780 	.word	0x20000780
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8014904:	bf00      	nop
 8014906:	bf00      	nop

08014908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b082      	sub	sp, #8
 801490c:	af00      	add	r7, sp, #0
        __asm volatile
 801490e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014912:	f383 8811 	msr	BASEPRI, r3
 8014916:	f3bf 8f6f 	isb	sy
 801491a:	f3bf 8f4f 	dsb	sy
 801491e:	607b      	str	r3, [r7, #4]
    }
 8014920:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8014922:	f7fe fdeb 	bl	80134fc <xTaskIncrementTick>
 8014926:	4603      	mov	r3, r0
 8014928:	2b00      	cmp	r3, #0
 801492a:	d003      	beq.n	8014934 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801492c:	4b06      	ldr	r3, [pc, #24]	@ (8014948 <SysTick_Handler+0x40>)
 801492e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014932:	601a      	str	r2, [r3, #0]
 8014934:	2300      	movs	r3, #0
 8014936:	603b      	str	r3, [r7, #0]
        __asm volatile
 8014938:	683b      	ldr	r3, [r7, #0]
 801493a:	f383 8811 	msr	BASEPRI, r3
    }
 801493e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8014940:	bf00      	nop
 8014942:	3708      	adds	r7, #8
 8014944:	46bd      	mov	sp, r7
 8014946:	bd80      	pop	{r7, pc}
 8014948:	e000ed04 	.word	0xe000ed04

0801494c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 801494c:	b480      	push	{r7}
 801494e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014950:	4b0b      	ldr	r3, [pc, #44]	@ (8014980 <vPortSetupTimerInterrupt+0x34>)
 8014952:	2200      	movs	r2, #0
 8014954:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014956:	4b0b      	ldr	r3, [pc, #44]	@ (8014984 <vPortSetupTimerInterrupt+0x38>)
 8014958:	2200      	movs	r2, #0
 801495a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801495c:	4b0a      	ldr	r3, [pc, #40]	@ (8014988 <vPortSetupTimerInterrupt+0x3c>)
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	4a0a      	ldr	r2, [pc, #40]	@ (801498c <vPortSetupTimerInterrupt+0x40>)
 8014962:	fba2 2303 	umull	r2, r3, r2, r3
 8014966:	099b      	lsrs	r3, r3, #6
 8014968:	4a09      	ldr	r2, [pc, #36]	@ (8014990 <vPortSetupTimerInterrupt+0x44>)
 801496a:	3b01      	subs	r3, #1
 801496c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801496e:	4b04      	ldr	r3, [pc, #16]	@ (8014980 <vPortSetupTimerInterrupt+0x34>)
 8014970:	2207      	movs	r2, #7
 8014972:	601a      	str	r2, [r3, #0]
}
 8014974:	bf00      	nop
 8014976:	46bd      	mov	sp, r7
 8014978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497c:	4770      	bx	lr
 801497e:	bf00      	nop
 8014980:	e000e010 	.word	0xe000e010
 8014984:	e000e018 	.word	0xe000e018
 8014988:	20000034 	.word	0x20000034
 801498c:	10624dd3 	.word	0x10624dd3
 8014990:	e000e014 	.word	0xe000e014

08014994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8014994:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80149a4 <vPortEnableVFP+0x10>
 8014998:	6801      	ldr	r1, [r0, #0]
 801499a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801499e:	6001      	str	r1, [r0, #0]
 80149a0:	4770      	bx	lr
 80149a2:	0000      	.short	0x0000
 80149a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80149a8:	bf00      	nop
 80149aa:	bf00      	nop

080149ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80149ac:	b480      	push	{r7}
 80149ae:	b085      	sub	sp, #20
 80149b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80149b2:	f3ef 8305 	mrs	r3, IPSR
 80149b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	2b0f      	cmp	r3, #15
 80149bc:	d915      	bls.n	80149ea <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80149be:	4a18      	ldr	r2, [pc, #96]	@ (8014a20 <vPortValidateInterruptPriority+0x74>)
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	4413      	add	r3, r2
 80149c4:	781b      	ldrb	r3, [r3, #0]
 80149c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80149c8:	4b16      	ldr	r3, [pc, #88]	@ (8014a24 <vPortValidateInterruptPriority+0x78>)
 80149ca:	781b      	ldrb	r3, [r3, #0]
 80149cc:	7afa      	ldrb	r2, [r7, #11]
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d20b      	bcs.n	80149ea <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80149d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149d6:	f383 8811 	msr	BASEPRI, r3
 80149da:	f3bf 8f6f 	isb	sy
 80149de:	f3bf 8f4f 	dsb	sy
 80149e2:	607b      	str	r3, [r7, #4]
    }
 80149e4:	bf00      	nop
 80149e6:	bf00      	nop
 80149e8:	e7fd      	b.n	80149e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80149ea:	4b0f      	ldr	r3, [pc, #60]	@ (8014a28 <vPortValidateInterruptPriority+0x7c>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80149f2:	4b0e      	ldr	r3, [pc, #56]	@ (8014a2c <vPortValidateInterruptPriority+0x80>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	429a      	cmp	r2, r3
 80149f8:	d90b      	bls.n	8014a12 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80149fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149fe:	f383 8811 	msr	BASEPRI, r3
 8014a02:	f3bf 8f6f 	isb	sy
 8014a06:	f3bf 8f4f 	dsb	sy
 8014a0a:	603b      	str	r3, [r7, #0]
    }
 8014a0c:	bf00      	nop
 8014a0e:	bf00      	nop
 8014a10:	e7fd      	b.n	8014a0e <vPortValidateInterruptPriority+0x62>
    }
 8014a12:	bf00      	nop
 8014a14:	3714      	adds	r7, #20
 8014a16:	46bd      	mov	sp, r7
 8014a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1c:	4770      	bx	lr
 8014a1e:	bf00      	nop
 8014a20:	e000e3f0 	.word	0xe000e3f0
 8014a24:	200008c0 	.word	0x200008c0
 8014a28:	e000ed0c 	.word	0xe000ed0c
 8014a2c:	200008c4 	.word	0x200008c4

08014a30 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b08a      	sub	sp, #40	@ 0x28
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8014a38:	2300      	movs	r3, #0
 8014a3a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8014a3c:	f7fe fca2 	bl	8013384 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8014a40:	4b66      	ldr	r3, [pc, #408]	@ (8014bdc <pvPortMalloc+0x1ac>)
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d101      	bne.n	8014a4c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8014a48:	f000 f938 	bl	8014cbc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014a4c:	4b64      	ldr	r3, [pc, #400]	@ (8014be0 <pvPortMalloc+0x1b0>)
 8014a4e:	681a      	ldr	r2, [r3, #0]
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	4013      	ands	r3, r2
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	f040 80a9 	bne.w	8014bac <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d02e      	beq.n	8014abe <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8014a60:	2208      	movs	r2, #8
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8014a66:	687a      	ldr	r2, [r7, #4]
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	d228      	bcs.n	8014abe <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8014a6c:	2208      	movs	r2, #8
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	4413      	add	r3, r2
 8014a72:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	f003 0307 	and.w	r3, r3, #7
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d022      	beq.n	8014ac4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f023 0307 	bic.w	r3, r3, #7
 8014a84:	3308      	adds	r3, #8
 8014a86:	687a      	ldr	r2, [r7, #4]
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	d215      	bcs.n	8014ab8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	f023 0307 	bic.w	r3, r3, #7
 8014a92:	3308      	adds	r3, #8
 8014a94:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	f003 0307 	and.w	r3, r3, #7
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d011      	beq.n	8014ac4 <pvPortMalloc+0x94>
        __asm volatile
 8014aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014aa4:	f383 8811 	msr	BASEPRI, r3
 8014aa8:	f3bf 8f6f 	isb	sy
 8014aac:	f3bf 8f4f 	dsb	sy
 8014ab0:	617b      	str	r3, [r7, #20]
    }
 8014ab2:	bf00      	nop
 8014ab4:	bf00      	nop
 8014ab6:	e7fd      	b.n	8014ab4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8014ab8:	2300      	movs	r3, #0
 8014aba:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014abc:	e002      	b.n	8014ac4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8014abe:	2300      	movs	r3, #0
 8014ac0:	607b      	str	r3, [r7, #4]
 8014ac2:	e000      	b.n	8014ac6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014ac4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d06f      	beq.n	8014bac <pvPortMalloc+0x17c>
 8014acc:	4b45      	ldr	r3, [pc, #276]	@ (8014be4 <pvPortMalloc+0x1b4>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	687a      	ldr	r2, [r7, #4]
 8014ad2:	429a      	cmp	r2, r3
 8014ad4:	d86a      	bhi.n	8014bac <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8014ad6:	4b44      	ldr	r3, [pc, #272]	@ (8014be8 <pvPortMalloc+0x1b8>)
 8014ad8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8014ada:	4b43      	ldr	r3, [pc, #268]	@ (8014be8 <pvPortMalloc+0x1b8>)
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014ae0:	e004      	b.n	8014aec <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8014ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ae4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8014ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014aee:	685b      	ldr	r3, [r3, #4]
 8014af0:	687a      	ldr	r2, [r7, #4]
 8014af2:	429a      	cmp	r2, r3
 8014af4:	d903      	bls.n	8014afe <pvPortMalloc+0xce>
 8014af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d1f1      	bne.n	8014ae2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8014afe:	4b37      	ldr	r3, [pc, #220]	@ (8014bdc <pvPortMalloc+0x1ac>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014b04:	429a      	cmp	r2, r3
 8014b06:	d051      	beq.n	8014bac <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014b08:	6a3b      	ldr	r3, [r7, #32]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	2208      	movs	r2, #8
 8014b0e:	4413      	add	r3, r2
 8014b10:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b14:	681a      	ldr	r2, [r3, #0]
 8014b16:	6a3b      	ldr	r3, [r7, #32]
 8014b18:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b1c:	685a      	ldr	r2, [r3, #4]
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	1ad2      	subs	r2, r2, r3
 8014b22:	2308      	movs	r3, #8
 8014b24:	005b      	lsls	r3, r3, #1
 8014b26:	429a      	cmp	r2, r3
 8014b28:	d920      	bls.n	8014b6c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	4413      	add	r3, r2
 8014b30:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014b32:	69bb      	ldr	r3, [r7, #24]
 8014b34:	f003 0307 	and.w	r3, r3, #7
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d00b      	beq.n	8014b54 <pvPortMalloc+0x124>
        __asm volatile
 8014b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b40:	f383 8811 	msr	BASEPRI, r3
 8014b44:	f3bf 8f6f 	isb	sy
 8014b48:	f3bf 8f4f 	dsb	sy
 8014b4c:	613b      	str	r3, [r7, #16]
    }
 8014b4e:	bf00      	nop
 8014b50:	bf00      	nop
 8014b52:	e7fd      	b.n	8014b50 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b56:	685a      	ldr	r2, [r3, #4]
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	1ad2      	subs	r2, r2, r3
 8014b5c:	69bb      	ldr	r3, [r7, #24]
 8014b5e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8014b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b62:	687a      	ldr	r2, [r7, #4]
 8014b64:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014b66:	69b8      	ldr	r0, [r7, #24]
 8014b68:	f000 f90a 	bl	8014d80 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8014be4 <pvPortMalloc+0x1b4>)
 8014b6e:	681a      	ldr	r2, [r3, #0]
 8014b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b72:	685b      	ldr	r3, [r3, #4]
 8014b74:	1ad3      	subs	r3, r2, r3
 8014b76:	4a1b      	ldr	r2, [pc, #108]	@ (8014be4 <pvPortMalloc+0x1b4>)
 8014b78:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8014be4 <pvPortMalloc+0x1b4>)
 8014b7c:	681a      	ldr	r2, [r3, #0]
 8014b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8014bec <pvPortMalloc+0x1bc>)
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	429a      	cmp	r2, r3
 8014b84:	d203      	bcs.n	8014b8e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014b86:	4b17      	ldr	r3, [pc, #92]	@ (8014be4 <pvPortMalloc+0x1b4>)
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	4a18      	ldr	r2, [pc, #96]	@ (8014bec <pvPortMalloc+0x1bc>)
 8014b8c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b90:	685a      	ldr	r2, [r3, #4]
 8014b92:	4b13      	ldr	r3, [pc, #76]	@ (8014be0 <pvPortMalloc+0x1b0>)
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	431a      	orrs	r2, r3
 8014b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b9a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8014b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8014ba2:	4b13      	ldr	r3, [pc, #76]	@ (8014bf0 <pvPortMalloc+0x1c0>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	3301      	adds	r3, #1
 8014ba8:	4a11      	ldr	r2, [pc, #68]	@ (8014bf0 <pvPortMalloc+0x1c0>)
 8014baa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8014bac:	f7fe fbf8 	bl	80133a0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014bb0:	69fb      	ldr	r3, [r7, #28]
 8014bb2:	f003 0307 	and.w	r3, r3, #7
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d00b      	beq.n	8014bd2 <pvPortMalloc+0x1a2>
        __asm volatile
 8014bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bbe:	f383 8811 	msr	BASEPRI, r3
 8014bc2:	f3bf 8f6f 	isb	sy
 8014bc6:	f3bf 8f4f 	dsb	sy
 8014bca:	60fb      	str	r3, [r7, #12]
    }
 8014bcc:	bf00      	nop
 8014bce:	bf00      	nop
 8014bd0:	e7fd      	b.n	8014bce <pvPortMalloc+0x19e>
    return pvReturn;
 8014bd2:	69fb      	ldr	r3, [r7, #28]
}
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	3728      	adds	r7, #40	@ 0x28
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	bd80      	pop	{r7, pc}
 8014bdc:	200134d0 	.word	0x200134d0
 8014be0:	200134e4 	.word	0x200134e4
 8014be4:	200134d4 	.word	0x200134d4
 8014be8:	200134c8 	.word	0x200134c8
 8014bec:	200134d8 	.word	0x200134d8
 8014bf0:	200134dc 	.word	0x200134dc

08014bf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b086      	sub	sp, #24
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d04f      	beq.n	8014ca6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8014c06:	2308      	movs	r3, #8
 8014c08:	425b      	negs	r3, r3
 8014c0a:	697a      	ldr	r2, [r7, #20]
 8014c0c:	4413      	add	r3, r2
 8014c0e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8014c10:	697b      	ldr	r3, [r7, #20]
 8014c12:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014c14:	693b      	ldr	r3, [r7, #16]
 8014c16:	685a      	ldr	r2, [r3, #4]
 8014c18:	4b25      	ldr	r3, [pc, #148]	@ (8014cb0 <vPortFree+0xbc>)
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	4013      	ands	r3, r2
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d10b      	bne.n	8014c3a <vPortFree+0x46>
        __asm volatile
 8014c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c26:	f383 8811 	msr	BASEPRI, r3
 8014c2a:	f3bf 8f6f 	isb	sy
 8014c2e:	f3bf 8f4f 	dsb	sy
 8014c32:	60fb      	str	r3, [r7, #12]
    }
 8014c34:	bf00      	nop
 8014c36:	bf00      	nop
 8014c38:	e7fd      	b.n	8014c36 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014c3a:	693b      	ldr	r3, [r7, #16]
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d00b      	beq.n	8014c5a <vPortFree+0x66>
        __asm volatile
 8014c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c46:	f383 8811 	msr	BASEPRI, r3
 8014c4a:	f3bf 8f6f 	isb	sy
 8014c4e:	f3bf 8f4f 	dsb	sy
 8014c52:	60bb      	str	r3, [r7, #8]
    }
 8014c54:	bf00      	nop
 8014c56:	bf00      	nop
 8014c58:	e7fd      	b.n	8014c56 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014c5a:	693b      	ldr	r3, [r7, #16]
 8014c5c:	685a      	ldr	r2, [r3, #4]
 8014c5e:	4b14      	ldr	r3, [pc, #80]	@ (8014cb0 <vPortFree+0xbc>)
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	4013      	ands	r3, r2
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d01e      	beq.n	8014ca6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8014c68:	693b      	ldr	r3, [r7, #16]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d11a      	bne.n	8014ca6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014c70:	693b      	ldr	r3, [r7, #16]
 8014c72:	685a      	ldr	r2, [r3, #4]
 8014c74:	4b0e      	ldr	r3, [pc, #56]	@ (8014cb0 <vPortFree+0xbc>)
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	43db      	mvns	r3, r3
 8014c7a:	401a      	ands	r2, r3
 8014c7c:	693b      	ldr	r3, [r7, #16]
 8014c7e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8014c80:	f7fe fb80 	bl	8013384 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8014c84:	693b      	ldr	r3, [r7, #16]
 8014c86:	685a      	ldr	r2, [r3, #4]
 8014c88:	4b0a      	ldr	r3, [pc, #40]	@ (8014cb4 <vPortFree+0xc0>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	4413      	add	r3, r2
 8014c8e:	4a09      	ldr	r2, [pc, #36]	@ (8014cb4 <vPortFree+0xc0>)
 8014c90:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014c92:	6938      	ldr	r0, [r7, #16]
 8014c94:	f000 f874 	bl	8014d80 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8014c98:	4b07      	ldr	r3, [pc, #28]	@ (8014cb8 <vPortFree+0xc4>)
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	3301      	adds	r3, #1
 8014c9e:	4a06      	ldr	r2, [pc, #24]	@ (8014cb8 <vPortFree+0xc4>)
 8014ca0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8014ca2:	f7fe fb7d 	bl	80133a0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8014ca6:	bf00      	nop
 8014ca8:	3718      	adds	r7, #24
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bd80      	pop	{r7, pc}
 8014cae:	bf00      	nop
 8014cb0:	200134e4 	.word	0x200134e4
 8014cb4:	200134d4 	.word	0x200134d4
 8014cb8:	200134e0 	.word	0x200134e0

08014cbc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8014cbc:	b480      	push	{r7}
 8014cbe:	b085      	sub	sp, #20
 8014cc0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014cc2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8014cc6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8014cc8:	4b27      	ldr	r3, [pc, #156]	@ (8014d68 <prvHeapInit+0xac>)
 8014cca:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	f003 0307 	and.w	r3, r3, #7
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d00c      	beq.n	8014cf0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	3307      	adds	r3, #7
 8014cda:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	f023 0307 	bic.w	r3, r3, #7
 8014ce2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014ce4:	68ba      	ldr	r2, [r7, #8]
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	1ad3      	subs	r3, r2, r3
 8014cea:	4a1f      	ldr	r2, [pc, #124]	@ (8014d68 <prvHeapInit+0xac>)
 8014cec:	4413      	add	r3, r2
 8014cee:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8014d6c <prvHeapInit+0xb0>)
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8014cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8014d6c <prvHeapInit+0xb0>)
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	68ba      	ldr	r2, [r7, #8]
 8014d04:	4413      	add	r3, r2
 8014d06:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8014d08:	2208      	movs	r2, #8
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	1a9b      	subs	r3, r3, r2
 8014d0e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	f023 0307 	bic.w	r3, r3, #7
 8014d16:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	4a15      	ldr	r2, [pc, #84]	@ (8014d70 <prvHeapInit+0xb4>)
 8014d1c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8014d1e:	4b14      	ldr	r3, [pc, #80]	@ (8014d70 <prvHeapInit+0xb4>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	2200      	movs	r2, #0
 8014d24:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8014d26:	4b12      	ldr	r3, [pc, #72]	@ (8014d70 <prvHeapInit+0xb4>)
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	2200      	movs	r2, #0
 8014d2c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014d32:	683b      	ldr	r3, [r7, #0]
 8014d34:	68fa      	ldr	r2, [r7, #12]
 8014d36:	1ad2      	subs	r2, r2, r3
 8014d38:	683b      	ldr	r3, [r7, #0]
 8014d3a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8014d70 <prvHeapInit+0xb4>)
 8014d3e:	681a      	ldr	r2, [r3, #0]
 8014d40:	683b      	ldr	r3, [r7, #0]
 8014d42:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014d44:	683b      	ldr	r3, [r7, #0]
 8014d46:	685b      	ldr	r3, [r3, #4]
 8014d48:	4a0a      	ldr	r2, [pc, #40]	@ (8014d74 <prvHeapInit+0xb8>)
 8014d4a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014d4c:	683b      	ldr	r3, [r7, #0]
 8014d4e:	685b      	ldr	r3, [r3, #4]
 8014d50:	4a09      	ldr	r2, [pc, #36]	@ (8014d78 <prvHeapInit+0xbc>)
 8014d52:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014d54:	4b09      	ldr	r3, [pc, #36]	@ (8014d7c <prvHeapInit+0xc0>)
 8014d56:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8014d5a:	601a      	str	r2, [r3, #0]
}
 8014d5c:	bf00      	nop
 8014d5e:	3714      	adds	r7, #20
 8014d60:	46bd      	mov	sp, r7
 8014d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d66:	4770      	bx	lr
 8014d68:	200008c8 	.word	0x200008c8
 8014d6c:	200134c8 	.word	0x200134c8
 8014d70:	200134d0 	.word	0x200134d0
 8014d74:	200134d8 	.word	0x200134d8
 8014d78:	200134d4 	.word	0x200134d4
 8014d7c:	200134e4 	.word	0x200134e4

08014d80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8014d80:	b480      	push	{r7}
 8014d82:	b085      	sub	sp, #20
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014d88:	4b28      	ldr	r3, [pc, #160]	@ (8014e2c <prvInsertBlockIntoFreeList+0xac>)
 8014d8a:	60fb      	str	r3, [r7, #12]
 8014d8c:	e002      	b.n	8014d94 <prvInsertBlockIntoFreeList+0x14>
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	60fb      	str	r3, [r7, #12]
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	687a      	ldr	r2, [r7, #4]
 8014d9a:	429a      	cmp	r2, r3
 8014d9c:	d8f7      	bhi.n	8014d8e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	685b      	ldr	r3, [r3, #4]
 8014da6:	68ba      	ldr	r2, [r7, #8]
 8014da8:	4413      	add	r3, r2
 8014daa:	687a      	ldr	r2, [r7, #4]
 8014dac:	429a      	cmp	r2, r3
 8014dae:	d108      	bne.n	8014dc2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	685a      	ldr	r2, [r3, #4]
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	685b      	ldr	r3, [r3, #4]
 8014db8:	441a      	add	r2, r3
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	685b      	ldr	r3, [r3, #4]
 8014dca:	68ba      	ldr	r2, [r7, #8]
 8014dcc:	441a      	add	r2, r3
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	429a      	cmp	r2, r3
 8014dd4:	d118      	bne.n	8014e08 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	681a      	ldr	r2, [r3, #0]
 8014dda:	4b15      	ldr	r3, [pc, #84]	@ (8014e30 <prvInsertBlockIntoFreeList+0xb0>)
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	429a      	cmp	r2, r3
 8014de0:	d00d      	beq.n	8014dfe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	685a      	ldr	r2, [r3, #4]
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	685b      	ldr	r3, [r3, #4]
 8014dec:	441a      	add	r2, r3
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	681a      	ldr	r2, [r3, #0]
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	601a      	str	r2, [r3, #0]
 8014dfc:	e008      	b.n	8014e10 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8014e30 <prvInsertBlockIntoFreeList+0xb0>)
 8014e00:	681a      	ldr	r2, [r3, #0]
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	601a      	str	r2, [r3, #0]
 8014e06:	e003      	b.n	8014e10 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	681a      	ldr	r2, [r3, #0]
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8014e10:	68fa      	ldr	r2, [r7, #12]
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	429a      	cmp	r2, r3
 8014e16:	d002      	beq.n	8014e1e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	687a      	ldr	r2, [r7, #4]
 8014e1c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8014e1e:	bf00      	nop
 8014e20:	3714      	adds	r7, #20
 8014e22:	46bd      	mov	sp, r7
 8014e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e28:	4770      	bx	lr
 8014e2a:	bf00      	nop
 8014e2c:	200134c8 	.word	0x200134c8
 8014e30:	200134d0 	.word	0x200134d0

08014e34 <malloc>:
 8014e34:	4b02      	ldr	r3, [pc, #8]	@ (8014e40 <malloc+0xc>)
 8014e36:	4601      	mov	r1, r0
 8014e38:	6818      	ldr	r0, [r3, #0]
 8014e3a:	f000 b82d 	b.w	8014e98 <_malloc_r>
 8014e3e:	bf00      	nop
 8014e40:	200001e4 	.word	0x200001e4

08014e44 <free>:
 8014e44:	4b02      	ldr	r3, [pc, #8]	@ (8014e50 <free+0xc>)
 8014e46:	4601      	mov	r1, r0
 8014e48:	6818      	ldr	r0, [r3, #0]
 8014e4a:	f001 ba4d 	b.w	80162e8 <_free_r>
 8014e4e:	bf00      	nop
 8014e50:	200001e4 	.word	0x200001e4

08014e54 <sbrk_aligned>:
 8014e54:	b570      	push	{r4, r5, r6, lr}
 8014e56:	4e0f      	ldr	r6, [pc, #60]	@ (8014e94 <sbrk_aligned+0x40>)
 8014e58:	460c      	mov	r4, r1
 8014e5a:	6831      	ldr	r1, [r6, #0]
 8014e5c:	4605      	mov	r5, r0
 8014e5e:	b911      	cbnz	r1, 8014e66 <sbrk_aligned+0x12>
 8014e60:	f001 f9dc 	bl	801621c <_sbrk_r>
 8014e64:	6030      	str	r0, [r6, #0]
 8014e66:	4621      	mov	r1, r4
 8014e68:	4628      	mov	r0, r5
 8014e6a:	f001 f9d7 	bl	801621c <_sbrk_r>
 8014e6e:	1c43      	adds	r3, r0, #1
 8014e70:	d103      	bne.n	8014e7a <sbrk_aligned+0x26>
 8014e72:	f04f 34ff 	mov.w	r4, #4294967295
 8014e76:	4620      	mov	r0, r4
 8014e78:	bd70      	pop	{r4, r5, r6, pc}
 8014e7a:	1cc4      	adds	r4, r0, #3
 8014e7c:	f024 0403 	bic.w	r4, r4, #3
 8014e80:	42a0      	cmp	r0, r4
 8014e82:	d0f8      	beq.n	8014e76 <sbrk_aligned+0x22>
 8014e84:	1a21      	subs	r1, r4, r0
 8014e86:	4628      	mov	r0, r5
 8014e88:	f001 f9c8 	bl	801621c <_sbrk_r>
 8014e8c:	3001      	adds	r0, #1
 8014e8e:	d1f2      	bne.n	8014e76 <sbrk_aligned+0x22>
 8014e90:	e7ef      	b.n	8014e72 <sbrk_aligned+0x1e>
 8014e92:	bf00      	nop
 8014e94:	200134e8 	.word	0x200134e8

08014e98 <_malloc_r>:
 8014e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e9c:	1ccd      	adds	r5, r1, #3
 8014e9e:	f025 0503 	bic.w	r5, r5, #3
 8014ea2:	3508      	adds	r5, #8
 8014ea4:	2d0c      	cmp	r5, #12
 8014ea6:	bf38      	it	cc
 8014ea8:	250c      	movcc	r5, #12
 8014eaa:	2d00      	cmp	r5, #0
 8014eac:	4606      	mov	r6, r0
 8014eae:	db01      	blt.n	8014eb4 <_malloc_r+0x1c>
 8014eb0:	42a9      	cmp	r1, r5
 8014eb2:	d904      	bls.n	8014ebe <_malloc_r+0x26>
 8014eb4:	230c      	movs	r3, #12
 8014eb6:	6033      	str	r3, [r6, #0]
 8014eb8:	2000      	movs	r0, #0
 8014eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ebe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014f94 <_malloc_r+0xfc>
 8014ec2:	f000 f869 	bl	8014f98 <__malloc_lock>
 8014ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8014eca:	461c      	mov	r4, r3
 8014ecc:	bb44      	cbnz	r4, 8014f20 <_malloc_r+0x88>
 8014ece:	4629      	mov	r1, r5
 8014ed0:	4630      	mov	r0, r6
 8014ed2:	f7ff ffbf 	bl	8014e54 <sbrk_aligned>
 8014ed6:	1c43      	adds	r3, r0, #1
 8014ed8:	4604      	mov	r4, r0
 8014eda:	d158      	bne.n	8014f8e <_malloc_r+0xf6>
 8014edc:	f8d8 4000 	ldr.w	r4, [r8]
 8014ee0:	4627      	mov	r7, r4
 8014ee2:	2f00      	cmp	r7, #0
 8014ee4:	d143      	bne.n	8014f6e <_malloc_r+0xd6>
 8014ee6:	2c00      	cmp	r4, #0
 8014ee8:	d04b      	beq.n	8014f82 <_malloc_r+0xea>
 8014eea:	6823      	ldr	r3, [r4, #0]
 8014eec:	4639      	mov	r1, r7
 8014eee:	4630      	mov	r0, r6
 8014ef0:	eb04 0903 	add.w	r9, r4, r3
 8014ef4:	f001 f992 	bl	801621c <_sbrk_r>
 8014ef8:	4581      	cmp	r9, r0
 8014efa:	d142      	bne.n	8014f82 <_malloc_r+0xea>
 8014efc:	6821      	ldr	r1, [r4, #0]
 8014efe:	1a6d      	subs	r5, r5, r1
 8014f00:	4629      	mov	r1, r5
 8014f02:	4630      	mov	r0, r6
 8014f04:	f7ff ffa6 	bl	8014e54 <sbrk_aligned>
 8014f08:	3001      	adds	r0, #1
 8014f0a:	d03a      	beq.n	8014f82 <_malloc_r+0xea>
 8014f0c:	6823      	ldr	r3, [r4, #0]
 8014f0e:	442b      	add	r3, r5
 8014f10:	6023      	str	r3, [r4, #0]
 8014f12:	f8d8 3000 	ldr.w	r3, [r8]
 8014f16:	685a      	ldr	r2, [r3, #4]
 8014f18:	bb62      	cbnz	r2, 8014f74 <_malloc_r+0xdc>
 8014f1a:	f8c8 7000 	str.w	r7, [r8]
 8014f1e:	e00f      	b.n	8014f40 <_malloc_r+0xa8>
 8014f20:	6822      	ldr	r2, [r4, #0]
 8014f22:	1b52      	subs	r2, r2, r5
 8014f24:	d420      	bmi.n	8014f68 <_malloc_r+0xd0>
 8014f26:	2a0b      	cmp	r2, #11
 8014f28:	d917      	bls.n	8014f5a <_malloc_r+0xc2>
 8014f2a:	1961      	adds	r1, r4, r5
 8014f2c:	42a3      	cmp	r3, r4
 8014f2e:	6025      	str	r5, [r4, #0]
 8014f30:	bf18      	it	ne
 8014f32:	6059      	strne	r1, [r3, #4]
 8014f34:	6863      	ldr	r3, [r4, #4]
 8014f36:	bf08      	it	eq
 8014f38:	f8c8 1000 	streq.w	r1, [r8]
 8014f3c:	5162      	str	r2, [r4, r5]
 8014f3e:	604b      	str	r3, [r1, #4]
 8014f40:	4630      	mov	r0, r6
 8014f42:	f000 f82f 	bl	8014fa4 <__malloc_unlock>
 8014f46:	f104 000b 	add.w	r0, r4, #11
 8014f4a:	1d23      	adds	r3, r4, #4
 8014f4c:	f020 0007 	bic.w	r0, r0, #7
 8014f50:	1ac2      	subs	r2, r0, r3
 8014f52:	bf1c      	itt	ne
 8014f54:	1a1b      	subne	r3, r3, r0
 8014f56:	50a3      	strne	r3, [r4, r2]
 8014f58:	e7af      	b.n	8014eba <_malloc_r+0x22>
 8014f5a:	6862      	ldr	r2, [r4, #4]
 8014f5c:	42a3      	cmp	r3, r4
 8014f5e:	bf0c      	ite	eq
 8014f60:	f8c8 2000 	streq.w	r2, [r8]
 8014f64:	605a      	strne	r2, [r3, #4]
 8014f66:	e7eb      	b.n	8014f40 <_malloc_r+0xa8>
 8014f68:	4623      	mov	r3, r4
 8014f6a:	6864      	ldr	r4, [r4, #4]
 8014f6c:	e7ae      	b.n	8014ecc <_malloc_r+0x34>
 8014f6e:	463c      	mov	r4, r7
 8014f70:	687f      	ldr	r7, [r7, #4]
 8014f72:	e7b6      	b.n	8014ee2 <_malloc_r+0x4a>
 8014f74:	461a      	mov	r2, r3
 8014f76:	685b      	ldr	r3, [r3, #4]
 8014f78:	42a3      	cmp	r3, r4
 8014f7a:	d1fb      	bne.n	8014f74 <_malloc_r+0xdc>
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	6053      	str	r3, [r2, #4]
 8014f80:	e7de      	b.n	8014f40 <_malloc_r+0xa8>
 8014f82:	230c      	movs	r3, #12
 8014f84:	6033      	str	r3, [r6, #0]
 8014f86:	4630      	mov	r0, r6
 8014f88:	f000 f80c 	bl	8014fa4 <__malloc_unlock>
 8014f8c:	e794      	b.n	8014eb8 <_malloc_r+0x20>
 8014f8e:	6005      	str	r5, [r0, #0]
 8014f90:	e7d6      	b.n	8014f40 <_malloc_r+0xa8>
 8014f92:	bf00      	nop
 8014f94:	200134ec 	.word	0x200134ec

08014f98 <__malloc_lock>:
 8014f98:	4801      	ldr	r0, [pc, #4]	@ (8014fa0 <__malloc_lock+0x8>)
 8014f9a:	f001 b98c 	b.w	80162b6 <__retarget_lock_acquire_recursive>
 8014f9e:	bf00      	nop
 8014fa0:	20013630 	.word	0x20013630

08014fa4 <__malloc_unlock>:
 8014fa4:	4801      	ldr	r0, [pc, #4]	@ (8014fac <__malloc_unlock+0x8>)
 8014fa6:	f001 b987 	b.w	80162b8 <__retarget_lock_release_recursive>
 8014faa:	bf00      	nop
 8014fac:	20013630 	.word	0x20013630

08014fb0 <realloc>:
 8014fb0:	4b02      	ldr	r3, [pc, #8]	@ (8014fbc <realloc+0xc>)
 8014fb2:	460a      	mov	r2, r1
 8014fb4:	4601      	mov	r1, r0
 8014fb6:	6818      	ldr	r0, [r3, #0]
 8014fb8:	f000 b802 	b.w	8014fc0 <_realloc_r>
 8014fbc:	200001e4 	.word	0x200001e4

08014fc0 <_realloc_r>:
 8014fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fc4:	4607      	mov	r7, r0
 8014fc6:	4614      	mov	r4, r2
 8014fc8:	460d      	mov	r5, r1
 8014fca:	b921      	cbnz	r1, 8014fd6 <_realloc_r+0x16>
 8014fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014fd0:	4611      	mov	r1, r2
 8014fd2:	f7ff bf61 	b.w	8014e98 <_malloc_r>
 8014fd6:	b92a      	cbnz	r2, 8014fe4 <_realloc_r+0x24>
 8014fd8:	f001 f986 	bl	80162e8 <_free_r>
 8014fdc:	4625      	mov	r5, r4
 8014fde:	4628      	mov	r0, r5
 8014fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fe4:	f002 f9c0 	bl	8017368 <_malloc_usable_size_r>
 8014fe8:	4284      	cmp	r4, r0
 8014fea:	4606      	mov	r6, r0
 8014fec:	d802      	bhi.n	8014ff4 <_realloc_r+0x34>
 8014fee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014ff2:	d8f4      	bhi.n	8014fde <_realloc_r+0x1e>
 8014ff4:	4621      	mov	r1, r4
 8014ff6:	4638      	mov	r0, r7
 8014ff8:	f7ff ff4e 	bl	8014e98 <_malloc_r>
 8014ffc:	4680      	mov	r8, r0
 8014ffe:	b908      	cbnz	r0, 8015004 <_realloc_r+0x44>
 8015000:	4645      	mov	r5, r8
 8015002:	e7ec      	b.n	8014fde <_realloc_r+0x1e>
 8015004:	42b4      	cmp	r4, r6
 8015006:	4622      	mov	r2, r4
 8015008:	4629      	mov	r1, r5
 801500a:	bf28      	it	cs
 801500c:	4632      	movcs	r2, r6
 801500e:	f001 f954 	bl	80162ba <memcpy>
 8015012:	4629      	mov	r1, r5
 8015014:	4638      	mov	r0, r7
 8015016:	f001 f967 	bl	80162e8 <_free_r>
 801501a:	e7f1      	b.n	8015000 <_realloc_r+0x40>

0801501c <sulp>:
 801501c:	b570      	push	{r4, r5, r6, lr}
 801501e:	4604      	mov	r4, r0
 8015020:	460d      	mov	r5, r1
 8015022:	ec45 4b10 	vmov	d0, r4, r5
 8015026:	4616      	mov	r6, r2
 8015028:	f002 f860 	bl	80170ec <__ulp>
 801502c:	ec51 0b10 	vmov	r0, r1, d0
 8015030:	b17e      	cbz	r6, 8015052 <sulp+0x36>
 8015032:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015036:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801503a:	2b00      	cmp	r3, #0
 801503c:	dd09      	ble.n	8015052 <sulp+0x36>
 801503e:	051b      	lsls	r3, r3, #20
 8015040:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8015044:	2400      	movs	r4, #0
 8015046:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801504a:	4622      	mov	r2, r4
 801504c:	462b      	mov	r3, r5
 801504e:	f7f3 fb03 	bl	8008658 <__aeabi_dmul>
 8015052:	ec41 0b10 	vmov	d0, r0, r1
 8015056:	bd70      	pop	{r4, r5, r6, pc}

08015058 <_strtod_l>:
 8015058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801505c:	b09f      	sub	sp, #124	@ 0x7c
 801505e:	460c      	mov	r4, r1
 8015060:	9217      	str	r2, [sp, #92]	@ 0x5c
 8015062:	2200      	movs	r2, #0
 8015064:	921a      	str	r2, [sp, #104]	@ 0x68
 8015066:	9005      	str	r0, [sp, #20]
 8015068:	f04f 0a00 	mov.w	sl, #0
 801506c:	f04f 0b00 	mov.w	fp, #0
 8015070:	460a      	mov	r2, r1
 8015072:	9219      	str	r2, [sp, #100]	@ 0x64
 8015074:	7811      	ldrb	r1, [r2, #0]
 8015076:	292b      	cmp	r1, #43	@ 0x2b
 8015078:	d04a      	beq.n	8015110 <_strtod_l+0xb8>
 801507a:	d838      	bhi.n	80150ee <_strtod_l+0x96>
 801507c:	290d      	cmp	r1, #13
 801507e:	d832      	bhi.n	80150e6 <_strtod_l+0x8e>
 8015080:	2908      	cmp	r1, #8
 8015082:	d832      	bhi.n	80150ea <_strtod_l+0x92>
 8015084:	2900      	cmp	r1, #0
 8015086:	d03b      	beq.n	8015100 <_strtod_l+0xa8>
 8015088:	2200      	movs	r2, #0
 801508a:	920e      	str	r2, [sp, #56]	@ 0x38
 801508c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801508e:	782a      	ldrb	r2, [r5, #0]
 8015090:	2a30      	cmp	r2, #48	@ 0x30
 8015092:	f040 80b2 	bne.w	80151fa <_strtod_l+0x1a2>
 8015096:	786a      	ldrb	r2, [r5, #1]
 8015098:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801509c:	2a58      	cmp	r2, #88	@ 0x58
 801509e:	d16e      	bne.n	801517e <_strtod_l+0x126>
 80150a0:	9302      	str	r3, [sp, #8]
 80150a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80150a4:	9301      	str	r3, [sp, #4]
 80150a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80150a8:	9300      	str	r3, [sp, #0]
 80150aa:	4a8f      	ldr	r2, [pc, #572]	@ (80152e8 <_strtod_l+0x290>)
 80150ac:	9805      	ldr	r0, [sp, #20]
 80150ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80150b0:	a919      	add	r1, sp, #100	@ 0x64
 80150b2:	f001 f9cb 	bl	801644c <__gethex>
 80150b6:	f010 060f 	ands.w	r6, r0, #15
 80150ba:	4604      	mov	r4, r0
 80150bc:	d005      	beq.n	80150ca <_strtod_l+0x72>
 80150be:	2e06      	cmp	r6, #6
 80150c0:	d128      	bne.n	8015114 <_strtod_l+0xbc>
 80150c2:	3501      	adds	r5, #1
 80150c4:	2300      	movs	r3, #0
 80150c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80150c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80150ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	f040 858e 	bne.w	8015bee <_strtod_l+0xb96>
 80150d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80150d4:	b1cb      	cbz	r3, 801510a <_strtod_l+0xb2>
 80150d6:	4652      	mov	r2, sl
 80150d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80150dc:	ec43 2b10 	vmov	d0, r2, r3
 80150e0:	b01f      	add	sp, #124	@ 0x7c
 80150e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150e6:	2920      	cmp	r1, #32
 80150e8:	d1ce      	bne.n	8015088 <_strtod_l+0x30>
 80150ea:	3201      	adds	r2, #1
 80150ec:	e7c1      	b.n	8015072 <_strtod_l+0x1a>
 80150ee:	292d      	cmp	r1, #45	@ 0x2d
 80150f0:	d1ca      	bne.n	8015088 <_strtod_l+0x30>
 80150f2:	2101      	movs	r1, #1
 80150f4:	910e      	str	r1, [sp, #56]	@ 0x38
 80150f6:	1c51      	adds	r1, r2, #1
 80150f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80150fa:	7852      	ldrb	r2, [r2, #1]
 80150fc:	2a00      	cmp	r2, #0
 80150fe:	d1c5      	bne.n	801508c <_strtod_l+0x34>
 8015100:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015102:	9419      	str	r4, [sp, #100]	@ 0x64
 8015104:	2b00      	cmp	r3, #0
 8015106:	f040 8570 	bne.w	8015bea <_strtod_l+0xb92>
 801510a:	4652      	mov	r2, sl
 801510c:	465b      	mov	r3, fp
 801510e:	e7e5      	b.n	80150dc <_strtod_l+0x84>
 8015110:	2100      	movs	r1, #0
 8015112:	e7ef      	b.n	80150f4 <_strtod_l+0x9c>
 8015114:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8015116:	b13a      	cbz	r2, 8015128 <_strtod_l+0xd0>
 8015118:	2135      	movs	r1, #53	@ 0x35
 801511a:	a81c      	add	r0, sp, #112	@ 0x70
 801511c:	f002 f8e0 	bl	80172e0 <__copybits>
 8015120:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015122:	9805      	ldr	r0, [sp, #20]
 8015124:	f001 fcb6 	bl	8016a94 <_Bfree>
 8015128:	3e01      	subs	r6, #1
 801512a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801512c:	2e04      	cmp	r6, #4
 801512e:	d806      	bhi.n	801513e <_strtod_l+0xe6>
 8015130:	e8df f006 	tbb	[pc, r6]
 8015134:	201d0314 	.word	0x201d0314
 8015138:	14          	.byte	0x14
 8015139:	00          	.byte	0x00
 801513a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801513e:	05e1      	lsls	r1, r4, #23
 8015140:	bf48      	it	mi
 8015142:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8015146:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801514a:	0d1b      	lsrs	r3, r3, #20
 801514c:	051b      	lsls	r3, r3, #20
 801514e:	2b00      	cmp	r3, #0
 8015150:	d1bb      	bne.n	80150ca <_strtod_l+0x72>
 8015152:	f001 f885 	bl	8016260 <__errno>
 8015156:	2322      	movs	r3, #34	@ 0x22
 8015158:	6003      	str	r3, [r0, #0]
 801515a:	e7b6      	b.n	80150ca <_strtod_l+0x72>
 801515c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8015160:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8015164:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8015168:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801516c:	e7e7      	b.n	801513e <_strtod_l+0xe6>
 801516e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80152f0 <_strtod_l+0x298>
 8015172:	e7e4      	b.n	801513e <_strtod_l+0xe6>
 8015174:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015178:	f04f 3aff 	mov.w	sl, #4294967295
 801517c:	e7df      	b.n	801513e <_strtod_l+0xe6>
 801517e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015180:	1c5a      	adds	r2, r3, #1
 8015182:	9219      	str	r2, [sp, #100]	@ 0x64
 8015184:	785b      	ldrb	r3, [r3, #1]
 8015186:	2b30      	cmp	r3, #48	@ 0x30
 8015188:	d0f9      	beq.n	801517e <_strtod_l+0x126>
 801518a:	2b00      	cmp	r3, #0
 801518c:	d09d      	beq.n	80150ca <_strtod_l+0x72>
 801518e:	2301      	movs	r3, #1
 8015190:	2700      	movs	r7, #0
 8015192:	9308      	str	r3, [sp, #32]
 8015194:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015196:	930c      	str	r3, [sp, #48]	@ 0x30
 8015198:	970b      	str	r7, [sp, #44]	@ 0x2c
 801519a:	46b9      	mov	r9, r7
 801519c:	220a      	movs	r2, #10
 801519e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80151a0:	7805      	ldrb	r5, [r0, #0]
 80151a2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80151a6:	b2d9      	uxtb	r1, r3
 80151a8:	2909      	cmp	r1, #9
 80151aa:	d928      	bls.n	80151fe <_strtod_l+0x1a6>
 80151ac:	494f      	ldr	r1, [pc, #316]	@ (80152ec <_strtod_l+0x294>)
 80151ae:	2201      	movs	r2, #1
 80151b0:	f000 ffda 	bl	8016168 <strncmp>
 80151b4:	2800      	cmp	r0, #0
 80151b6:	d032      	beq.n	801521e <_strtod_l+0x1c6>
 80151b8:	2000      	movs	r0, #0
 80151ba:	462a      	mov	r2, r5
 80151bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80151be:	464d      	mov	r5, r9
 80151c0:	4603      	mov	r3, r0
 80151c2:	2a65      	cmp	r2, #101	@ 0x65
 80151c4:	d001      	beq.n	80151ca <_strtod_l+0x172>
 80151c6:	2a45      	cmp	r2, #69	@ 0x45
 80151c8:	d114      	bne.n	80151f4 <_strtod_l+0x19c>
 80151ca:	b91d      	cbnz	r5, 80151d4 <_strtod_l+0x17c>
 80151cc:	9a08      	ldr	r2, [sp, #32]
 80151ce:	4302      	orrs	r2, r0
 80151d0:	d096      	beq.n	8015100 <_strtod_l+0xa8>
 80151d2:	2500      	movs	r5, #0
 80151d4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80151d6:	1c62      	adds	r2, r4, #1
 80151d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80151da:	7862      	ldrb	r2, [r4, #1]
 80151dc:	2a2b      	cmp	r2, #43	@ 0x2b
 80151de:	d07a      	beq.n	80152d6 <_strtod_l+0x27e>
 80151e0:	2a2d      	cmp	r2, #45	@ 0x2d
 80151e2:	d07e      	beq.n	80152e2 <_strtod_l+0x28a>
 80151e4:	f04f 0c00 	mov.w	ip, #0
 80151e8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80151ec:	2909      	cmp	r1, #9
 80151ee:	f240 8085 	bls.w	80152fc <_strtod_l+0x2a4>
 80151f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80151f4:	f04f 0800 	mov.w	r8, #0
 80151f8:	e0a5      	b.n	8015346 <_strtod_l+0x2ee>
 80151fa:	2300      	movs	r3, #0
 80151fc:	e7c8      	b.n	8015190 <_strtod_l+0x138>
 80151fe:	f1b9 0f08 	cmp.w	r9, #8
 8015202:	bfd8      	it	le
 8015204:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8015206:	f100 0001 	add.w	r0, r0, #1
 801520a:	bfda      	itte	le
 801520c:	fb02 3301 	mlale	r3, r2, r1, r3
 8015210:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8015212:	fb02 3707 	mlagt	r7, r2, r7, r3
 8015216:	f109 0901 	add.w	r9, r9, #1
 801521a:	9019      	str	r0, [sp, #100]	@ 0x64
 801521c:	e7bf      	b.n	801519e <_strtod_l+0x146>
 801521e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015220:	1c5a      	adds	r2, r3, #1
 8015222:	9219      	str	r2, [sp, #100]	@ 0x64
 8015224:	785a      	ldrb	r2, [r3, #1]
 8015226:	f1b9 0f00 	cmp.w	r9, #0
 801522a:	d03b      	beq.n	80152a4 <_strtod_l+0x24c>
 801522c:	900a      	str	r0, [sp, #40]	@ 0x28
 801522e:	464d      	mov	r5, r9
 8015230:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8015234:	2b09      	cmp	r3, #9
 8015236:	d912      	bls.n	801525e <_strtod_l+0x206>
 8015238:	2301      	movs	r3, #1
 801523a:	e7c2      	b.n	80151c2 <_strtod_l+0x16a>
 801523c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801523e:	1c5a      	adds	r2, r3, #1
 8015240:	9219      	str	r2, [sp, #100]	@ 0x64
 8015242:	785a      	ldrb	r2, [r3, #1]
 8015244:	3001      	adds	r0, #1
 8015246:	2a30      	cmp	r2, #48	@ 0x30
 8015248:	d0f8      	beq.n	801523c <_strtod_l+0x1e4>
 801524a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801524e:	2b08      	cmp	r3, #8
 8015250:	f200 84d2 	bhi.w	8015bf8 <_strtod_l+0xba0>
 8015254:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015256:	900a      	str	r0, [sp, #40]	@ 0x28
 8015258:	2000      	movs	r0, #0
 801525a:	930c      	str	r3, [sp, #48]	@ 0x30
 801525c:	4605      	mov	r5, r0
 801525e:	3a30      	subs	r2, #48	@ 0x30
 8015260:	f100 0301 	add.w	r3, r0, #1
 8015264:	d018      	beq.n	8015298 <_strtod_l+0x240>
 8015266:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015268:	4419      	add	r1, r3
 801526a:	910a      	str	r1, [sp, #40]	@ 0x28
 801526c:	462e      	mov	r6, r5
 801526e:	f04f 0e0a 	mov.w	lr, #10
 8015272:	1c71      	adds	r1, r6, #1
 8015274:	eba1 0c05 	sub.w	ip, r1, r5
 8015278:	4563      	cmp	r3, ip
 801527a:	dc15      	bgt.n	80152a8 <_strtod_l+0x250>
 801527c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8015280:	182b      	adds	r3, r5, r0
 8015282:	2b08      	cmp	r3, #8
 8015284:	f105 0501 	add.w	r5, r5, #1
 8015288:	4405      	add	r5, r0
 801528a:	dc1a      	bgt.n	80152c2 <_strtod_l+0x26a>
 801528c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801528e:	230a      	movs	r3, #10
 8015290:	fb03 2301 	mla	r3, r3, r1, r2
 8015294:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015296:	2300      	movs	r3, #0
 8015298:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801529a:	1c51      	adds	r1, r2, #1
 801529c:	9119      	str	r1, [sp, #100]	@ 0x64
 801529e:	7852      	ldrb	r2, [r2, #1]
 80152a0:	4618      	mov	r0, r3
 80152a2:	e7c5      	b.n	8015230 <_strtod_l+0x1d8>
 80152a4:	4648      	mov	r0, r9
 80152a6:	e7ce      	b.n	8015246 <_strtod_l+0x1ee>
 80152a8:	2e08      	cmp	r6, #8
 80152aa:	dc05      	bgt.n	80152b8 <_strtod_l+0x260>
 80152ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80152ae:	fb0e f606 	mul.w	r6, lr, r6
 80152b2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80152b4:	460e      	mov	r6, r1
 80152b6:	e7dc      	b.n	8015272 <_strtod_l+0x21a>
 80152b8:	2910      	cmp	r1, #16
 80152ba:	bfd8      	it	le
 80152bc:	fb0e f707 	mulle.w	r7, lr, r7
 80152c0:	e7f8      	b.n	80152b4 <_strtod_l+0x25c>
 80152c2:	2b0f      	cmp	r3, #15
 80152c4:	bfdc      	itt	le
 80152c6:	230a      	movle	r3, #10
 80152c8:	fb03 2707 	mlale	r7, r3, r7, r2
 80152cc:	e7e3      	b.n	8015296 <_strtod_l+0x23e>
 80152ce:	2300      	movs	r3, #0
 80152d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80152d2:	2301      	movs	r3, #1
 80152d4:	e77a      	b.n	80151cc <_strtod_l+0x174>
 80152d6:	f04f 0c00 	mov.w	ip, #0
 80152da:	1ca2      	adds	r2, r4, #2
 80152dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80152de:	78a2      	ldrb	r2, [r4, #2]
 80152e0:	e782      	b.n	80151e8 <_strtod_l+0x190>
 80152e2:	f04f 0c01 	mov.w	ip, #1
 80152e6:	e7f8      	b.n	80152da <_strtod_l+0x282>
 80152e8:	0801a930 	.word	0x0801a930
 80152ec:	0801a798 	.word	0x0801a798
 80152f0:	7ff00000 	.word	0x7ff00000
 80152f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80152f6:	1c51      	adds	r1, r2, #1
 80152f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80152fa:	7852      	ldrb	r2, [r2, #1]
 80152fc:	2a30      	cmp	r2, #48	@ 0x30
 80152fe:	d0f9      	beq.n	80152f4 <_strtod_l+0x29c>
 8015300:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8015304:	2908      	cmp	r1, #8
 8015306:	f63f af75 	bhi.w	80151f4 <_strtod_l+0x19c>
 801530a:	3a30      	subs	r2, #48	@ 0x30
 801530c:	9209      	str	r2, [sp, #36]	@ 0x24
 801530e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015310:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015312:	f04f 080a 	mov.w	r8, #10
 8015316:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015318:	1c56      	adds	r6, r2, #1
 801531a:	9619      	str	r6, [sp, #100]	@ 0x64
 801531c:	7852      	ldrb	r2, [r2, #1]
 801531e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8015322:	f1be 0f09 	cmp.w	lr, #9
 8015326:	d939      	bls.n	801539c <_strtod_l+0x344>
 8015328:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801532a:	1a76      	subs	r6, r6, r1
 801532c:	2e08      	cmp	r6, #8
 801532e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8015332:	dc03      	bgt.n	801533c <_strtod_l+0x2e4>
 8015334:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015336:	4588      	cmp	r8, r1
 8015338:	bfa8      	it	ge
 801533a:	4688      	movge	r8, r1
 801533c:	f1bc 0f00 	cmp.w	ip, #0
 8015340:	d001      	beq.n	8015346 <_strtod_l+0x2ee>
 8015342:	f1c8 0800 	rsb	r8, r8, #0
 8015346:	2d00      	cmp	r5, #0
 8015348:	d14e      	bne.n	80153e8 <_strtod_l+0x390>
 801534a:	9908      	ldr	r1, [sp, #32]
 801534c:	4308      	orrs	r0, r1
 801534e:	f47f aebc 	bne.w	80150ca <_strtod_l+0x72>
 8015352:	2b00      	cmp	r3, #0
 8015354:	f47f aed4 	bne.w	8015100 <_strtod_l+0xa8>
 8015358:	2a69      	cmp	r2, #105	@ 0x69
 801535a:	d028      	beq.n	80153ae <_strtod_l+0x356>
 801535c:	dc25      	bgt.n	80153aa <_strtod_l+0x352>
 801535e:	2a49      	cmp	r2, #73	@ 0x49
 8015360:	d025      	beq.n	80153ae <_strtod_l+0x356>
 8015362:	2a4e      	cmp	r2, #78	@ 0x4e
 8015364:	f47f aecc 	bne.w	8015100 <_strtod_l+0xa8>
 8015368:	499a      	ldr	r1, [pc, #616]	@ (80155d4 <_strtod_l+0x57c>)
 801536a:	a819      	add	r0, sp, #100	@ 0x64
 801536c:	f001 fa90 	bl	8016890 <__match>
 8015370:	2800      	cmp	r0, #0
 8015372:	f43f aec5 	beq.w	8015100 <_strtod_l+0xa8>
 8015376:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015378:	781b      	ldrb	r3, [r3, #0]
 801537a:	2b28      	cmp	r3, #40	@ 0x28
 801537c:	d12e      	bne.n	80153dc <_strtod_l+0x384>
 801537e:	4996      	ldr	r1, [pc, #600]	@ (80155d8 <_strtod_l+0x580>)
 8015380:	aa1c      	add	r2, sp, #112	@ 0x70
 8015382:	a819      	add	r0, sp, #100	@ 0x64
 8015384:	f001 fa98 	bl	80168b8 <__hexnan>
 8015388:	2805      	cmp	r0, #5
 801538a:	d127      	bne.n	80153dc <_strtod_l+0x384>
 801538c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801538e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8015392:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8015396:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801539a:	e696      	b.n	80150ca <_strtod_l+0x72>
 801539c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801539e:	fb08 2101 	mla	r1, r8, r1, r2
 80153a2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80153a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80153a8:	e7b5      	b.n	8015316 <_strtod_l+0x2be>
 80153aa:	2a6e      	cmp	r2, #110	@ 0x6e
 80153ac:	e7da      	b.n	8015364 <_strtod_l+0x30c>
 80153ae:	498b      	ldr	r1, [pc, #556]	@ (80155dc <_strtod_l+0x584>)
 80153b0:	a819      	add	r0, sp, #100	@ 0x64
 80153b2:	f001 fa6d 	bl	8016890 <__match>
 80153b6:	2800      	cmp	r0, #0
 80153b8:	f43f aea2 	beq.w	8015100 <_strtod_l+0xa8>
 80153bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80153be:	4988      	ldr	r1, [pc, #544]	@ (80155e0 <_strtod_l+0x588>)
 80153c0:	3b01      	subs	r3, #1
 80153c2:	a819      	add	r0, sp, #100	@ 0x64
 80153c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80153c6:	f001 fa63 	bl	8016890 <__match>
 80153ca:	b910      	cbnz	r0, 80153d2 <_strtod_l+0x37a>
 80153cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80153ce:	3301      	adds	r3, #1
 80153d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80153d2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80155f0 <_strtod_l+0x598>
 80153d6:	f04f 0a00 	mov.w	sl, #0
 80153da:	e676      	b.n	80150ca <_strtod_l+0x72>
 80153dc:	4881      	ldr	r0, [pc, #516]	@ (80155e4 <_strtod_l+0x58c>)
 80153de:	f000 ff7b 	bl	80162d8 <nan>
 80153e2:	ec5b ab10 	vmov	sl, fp, d0
 80153e6:	e670      	b.n	80150ca <_strtod_l+0x72>
 80153e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80153ea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80153ec:	eba8 0303 	sub.w	r3, r8, r3
 80153f0:	f1b9 0f00 	cmp.w	r9, #0
 80153f4:	bf08      	it	eq
 80153f6:	46a9      	moveq	r9, r5
 80153f8:	2d10      	cmp	r5, #16
 80153fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80153fc:	462c      	mov	r4, r5
 80153fe:	bfa8      	it	ge
 8015400:	2410      	movge	r4, #16
 8015402:	f7f3 f8af 	bl	8008564 <__aeabi_ui2d>
 8015406:	2d09      	cmp	r5, #9
 8015408:	4682      	mov	sl, r0
 801540a:	468b      	mov	fp, r1
 801540c:	dc13      	bgt.n	8015436 <_strtod_l+0x3de>
 801540e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015410:	2b00      	cmp	r3, #0
 8015412:	f43f ae5a 	beq.w	80150ca <_strtod_l+0x72>
 8015416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015418:	dd78      	ble.n	801550c <_strtod_l+0x4b4>
 801541a:	2b16      	cmp	r3, #22
 801541c:	dc5f      	bgt.n	80154de <_strtod_l+0x486>
 801541e:	4972      	ldr	r1, [pc, #456]	@ (80155e8 <_strtod_l+0x590>)
 8015420:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015428:	4652      	mov	r2, sl
 801542a:	465b      	mov	r3, fp
 801542c:	f7f3 f914 	bl	8008658 <__aeabi_dmul>
 8015430:	4682      	mov	sl, r0
 8015432:	468b      	mov	fp, r1
 8015434:	e649      	b.n	80150ca <_strtod_l+0x72>
 8015436:	4b6c      	ldr	r3, [pc, #432]	@ (80155e8 <_strtod_l+0x590>)
 8015438:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801543c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8015440:	f7f3 f90a 	bl	8008658 <__aeabi_dmul>
 8015444:	4682      	mov	sl, r0
 8015446:	4638      	mov	r0, r7
 8015448:	468b      	mov	fp, r1
 801544a:	f7f3 f88b 	bl	8008564 <__aeabi_ui2d>
 801544e:	4602      	mov	r2, r0
 8015450:	460b      	mov	r3, r1
 8015452:	4650      	mov	r0, sl
 8015454:	4659      	mov	r1, fp
 8015456:	f7f2 ff49 	bl	80082ec <__adddf3>
 801545a:	2d0f      	cmp	r5, #15
 801545c:	4682      	mov	sl, r0
 801545e:	468b      	mov	fp, r1
 8015460:	ddd5      	ble.n	801540e <_strtod_l+0x3b6>
 8015462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015464:	1b2c      	subs	r4, r5, r4
 8015466:	441c      	add	r4, r3
 8015468:	2c00      	cmp	r4, #0
 801546a:	f340 8093 	ble.w	8015594 <_strtod_l+0x53c>
 801546e:	f014 030f 	ands.w	r3, r4, #15
 8015472:	d00a      	beq.n	801548a <_strtod_l+0x432>
 8015474:	495c      	ldr	r1, [pc, #368]	@ (80155e8 <_strtod_l+0x590>)
 8015476:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801547a:	4652      	mov	r2, sl
 801547c:	465b      	mov	r3, fp
 801547e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015482:	f7f3 f8e9 	bl	8008658 <__aeabi_dmul>
 8015486:	4682      	mov	sl, r0
 8015488:	468b      	mov	fp, r1
 801548a:	f034 040f 	bics.w	r4, r4, #15
 801548e:	d073      	beq.n	8015578 <_strtod_l+0x520>
 8015490:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8015494:	dd49      	ble.n	801552a <_strtod_l+0x4d2>
 8015496:	2400      	movs	r4, #0
 8015498:	46a0      	mov	r8, r4
 801549a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801549c:	46a1      	mov	r9, r4
 801549e:	9a05      	ldr	r2, [sp, #20]
 80154a0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80155f0 <_strtod_l+0x598>
 80154a4:	2322      	movs	r3, #34	@ 0x22
 80154a6:	6013      	str	r3, [r2, #0]
 80154a8:	f04f 0a00 	mov.w	sl, #0
 80154ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	f43f ae0b 	beq.w	80150ca <_strtod_l+0x72>
 80154b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80154b6:	9805      	ldr	r0, [sp, #20]
 80154b8:	f001 faec 	bl	8016a94 <_Bfree>
 80154bc:	9805      	ldr	r0, [sp, #20]
 80154be:	4649      	mov	r1, r9
 80154c0:	f001 fae8 	bl	8016a94 <_Bfree>
 80154c4:	9805      	ldr	r0, [sp, #20]
 80154c6:	4641      	mov	r1, r8
 80154c8:	f001 fae4 	bl	8016a94 <_Bfree>
 80154cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80154ce:	9805      	ldr	r0, [sp, #20]
 80154d0:	f001 fae0 	bl	8016a94 <_Bfree>
 80154d4:	9805      	ldr	r0, [sp, #20]
 80154d6:	4621      	mov	r1, r4
 80154d8:	f001 fadc 	bl	8016a94 <_Bfree>
 80154dc:	e5f5      	b.n	80150ca <_strtod_l+0x72>
 80154de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80154e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80154e4:	4293      	cmp	r3, r2
 80154e6:	dbbc      	blt.n	8015462 <_strtod_l+0x40a>
 80154e8:	4c3f      	ldr	r4, [pc, #252]	@ (80155e8 <_strtod_l+0x590>)
 80154ea:	f1c5 050f 	rsb	r5, r5, #15
 80154ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80154f2:	4652      	mov	r2, sl
 80154f4:	465b      	mov	r3, fp
 80154f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154fa:	f7f3 f8ad 	bl	8008658 <__aeabi_dmul>
 80154fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015500:	1b5d      	subs	r5, r3, r5
 8015502:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8015506:	e9d4 2300 	ldrd	r2, r3, [r4]
 801550a:	e78f      	b.n	801542c <_strtod_l+0x3d4>
 801550c:	3316      	adds	r3, #22
 801550e:	dba8      	blt.n	8015462 <_strtod_l+0x40a>
 8015510:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015512:	eba3 0808 	sub.w	r8, r3, r8
 8015516:	4b34      	ldr	r3, [pc, #208]	@ (80155e8 <_strtod_l+0x590>)
 8015518:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801551c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8015520:	4650      	mov	r0, sl
 8015522:	4659      	mov	r1, fp
 8015524:	f7f3 f9c2 	bl	80088ac <__aeabi_ddiv>
 8015528:	e782      	b.n	8015430 <_strtod_l+0x3d8>
 801552a:	2300      	movs	r3, #0
 801552c:	4f2f      	ldr	r7, [pc, #188]	@ (80155ec <_strtod_l+0x594>)
 801552e:	1124      	asrs	r4, r4, #4
 8015530:	4650      	mov	r0, sl
 8015532:	4659      	mov	r1, fp
 8015534:	461e      	mov	r6, r3
 8015536:	2c01      	cmp	r4, #1
 8015538:	dc21      	bgt.n	801557e <_strtod_l+0x526>
 801553a:	b10b      	cbz	r3, 8015540 <_strtod_l+0x4e8>
 801553c:	4682      	mov	sl, r0
 801553e:	468b      	mov	fp, r1
 8015540:	492a      	ldr	r1, [pc, #168]	@ (80155ec <_strtod_l+0x594>)
 8015542:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015546:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801554a:	4652      	mov	r2, sl
 801554c:	465b      	mov	r3, fp
 801554e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015552:	f7f3 f881 	bl	8008658 <__aeabi_dmul>
 8015556:	4b26      	ldr	r3, [pc, #152]	@ (80155f0 <_strtod_l+0x598>)
 8015558:	460a      	mov	r2, r1
 801555a:	400b      	ands	r3, r1
 801555c:	4925      	ldr	r1, [pc, #148]	@ (80155f4 <_strtod_l+0x59c>)
 801555e:	428b      	cmp	r3, r1
 8015560:	4682      	mov	sl, r0
 8015562:	d898      	bhi.n	8015496 <_strtod_l+0x43e>
 8015564:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8015568:	428b      	cmp	r3, r1
 801556a:	bf86      	itte	hi
 801556c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80155f8 <_strtod_l+0x5a0>
 8015570:	f04f 3aff 	movhi.w	sl, #4294967295
 8015574:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8015578:	2300      	movs	r3, #0
 801557a:	9308      	str	r3, [sp, #32]
 801557c:	e076      	b.n	801566c <_strtod_l+0x614>
 801557e:	07e2      	lsls	r2, r4, #31
 8015580:	d504      	bpl.n	801558c <_strtod_l+0x534>
 8015582:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015586:	f7f3 f867 	bl	8008658 <__aeabi_dmul>
 801558a:	2301      	movs	r3, #1
 801558c:	3601      	adds	r6, #1
 801558e:	1064      	asrs	r4, r4, #1
 8015590:	3708      	adds	r7, #8
 8015592:	e7d0      	b.n	8015536 <_strtod_l+0x4de>
 8015594:	d0f0      	beq.n	8015578 <_strtod_l+0x520>
 8015596:	4264      	negs	r4, r4
 8015598:	f014 020f 	ands.w	r2, r4, #15
 801559c:	d00a      	beq.n	80155b4 <_strtod_l+0x55c>
 801559e:	4b12      	ldr	r3, [pc, #72]	@ (80155e8 <_strtod_l+0x590>)
 80155a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80155a4:	4650      	mov	r0, sl
 80155a6:	4659      	mov	r1, fp
 80155a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ac:	f7f3 f97e 	bl	80088ac <__aeabi_ddiv>
 80155b0:	4682      	mov	sl, r0
 80155b2:	468b      	mov	fp, r1
 80155b4:	1124      	asrs	r4, r4, #4
 80155b6:	d0df      	beq.n	8015578 <_strtod_l+0x520>
 80155b8:	2c1f      	cmp	r4, #31
 80155ba:	dd1f      	ble.n	80155fc <_strtod_l+0x5a4>
 80155bc:	2400      	movs	r4, #0
 80155be:	46a0      	mov	r8, r4
 80155c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80155c2:	46a1      	mov	r9, r4
 80155c4:	9a05      	ldr	r2, [sp, #20]
 80155c6:	2322      	movs	r3, #34	@ 0x22
 80155c8:	f04f 0a00 	mov.w	sl, #0
 80155cc:	f04f 0b00 	mov.w	fp, #0
 80155d0:	6013      	str	r3, [r2, #0]
 80155d2:	e76b      	b.n	80154ac <_strtod_l+0x454>
 80155d4:	0801a7a3 	.word	0x0801a7a3
 80155d8:	0801a91c 	.word	0x0801a91c
 80155dc:	0801a79a 	.word	0x0801a79a
 80155e0:	0801a79d 	.word	0x0801a79d
 80155e4:	0801a918 	.word	0x0801a918
 80155e8:	0801aaa8 	.word	0x0801aaa8
 80155ec:	0801aa80 	.word	0x0801aa80
 80155f0:	7ff00000 	.word	0x7ff00000
 80155f4:	7ca00000 	.word	0x7ca00000
 80155f8:	7fefffff 	.word	0x7fefffff
 80155fc:	f014 0310 	ands.w	r3, r4, #16
 8015600:	bf18      	it	ne
 8015602:	236a      	movne	r3, #106	@ 0x6a
 8015604:	4ea9      	ldr	r6, [pc, #676]	@ (80158ac <_strtod_l+0x854>)
 8015606:	9308      	str	r3, [sp, #32]
 8015608:	4650      	mov	r0, sl
 801560a:	4659      	mov	r1, fp
 801560c:	2300      	movs	r3, #0
 801560e:	07e7      	lsls	r7, r4, #31
 8015610:	d504      	bpl.n	801561c <_strtod_l+0x5c4>
 8015612:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015616:	f7f3 f81f 	bl	8008658 <__aeabi_dmul>
 801561a:	2301      	movs	r3, #1
 801561c:	1064      	asrs	r4, r4, #1
 801561e:	f106 0608 	add.w	r6, r6, #8
 8015622:	d1f4      	bne.n	801560e <_strtod_l+0x5b6>
 8015624:	b10b      	cbz	r3, 801562a <_strtod_l+0x5d2>
 8015626:	4682      	mov	sl, r0
 8015628:	468b      	mov	fp, r1
 801562a:	9b08      	ldr	r3, [sp, #32]
 801562c:	b1b3      	cbz	r3, 801565c <_strtod_l+0x604>
 801562e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8015632:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8015636:	2b00      	cmp	r3, #0
 8015638:	4659      	mov	r1, fp
 801563a:	dd0f      	ble.n	801565c <_strtod_l+0x604>
 801563c:	2b1f      	cmp	r3, #31
 801563e:	dd56      	ble.n	80156ee <_strtod_l+0x696>
 8015640:	2b34      	cmp	r3, #52	@ 0x34
 8015642:	bfde      	ittt	le
 8015644:	f04f 33ff 	movle.w	r3, #4294967295
 8015648:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801564c:	4093      	lslle	r3, r2
 801564e:	f04f 0a00 	mov.w	sl, #0
 8015652:	bfcc      	ite	gt
 8015654:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015658:	ea03 0b01 	andle.w	fp, r3, r1
 801565c:	2200      	movs	r2, #0
 801565e:	2300      	movs	r3, #0
 8015660:	4650      	mov	r0, sl
 8015662:	4659      	mov	r1, fp
 8015664:	f7f3 fa60 	bl	8008b28 <__aeabi_dcmpeq>
 8015668:	2800      	cmp	r0, #0
 801566a:	d1a7      	bne.n	80155bc <_strtod_l+0x564>
 801566c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801566e:	9300      	str	r3, [sp, #0]
 8015670:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015672:	9805      	ldr	r0, [sp, #20]
 8015674:	462b      	mov	r3, r5
 8015676:	464a      	mov	r2, r9
 8015678:	f001 fa74 	bl	8016b64 <__s2b>
 801567c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801567e:	2800      	cmp	r0, #0
 8015680:	f43f af09 	beq.w	8015496 <_strtod_l+0x43e>
 8015684:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015686:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015688:	2a00      	cmp	r2, #0
 801568a:	eba3 0308 	sub.w	r3, r3, r8
 801568e:	bfa8      	it	ge
 8015690:	2300      	movge	r3, #0
 8015692:	9312      	str	r3, [sp, #72]	@ 0x48
 8015694:	2400      	movs	r4, #0
 8015696:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801569a:	9316      	str	r3, [sp, #88]	@ 0x58
 801569c:	46a0      	mov	r8, r4
 801569e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80156a0:	9805      	ldr	r0, [sp, #20]
 80156a2:	6859      	ldr	r1, [r3, #4]
 80156a4:	f001 f9b6 	bl	8016a14 <_Balloc>
 80156a8:	4681      	mov	r9, r0
 80156aa:	2800      	cmp	r0, #0
 80156ac:	f43f aef7 	beq.w	801549e <_strtod_l+0x446>
 80156b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80156b2:	691a      	ldr	r2, [r3, #16]
 80156b4:	3202      	adds	r2, #2
 80156b6:	f103 010c 	add.w	r1, r3, #12
 80156ba:	0092      	lsls	r2, r2, #2
 80156bc:	300c      	adds	r0, #12
 80156be:	f000 fdfc 	bl	80162ba <memcpy>
 80156c2:	ec4b ab10 	vmov	d0, sl, fp
 80156c6:	9805      	ldr	r0, [sp, #20]
 80156c8:	aa1c      	add	r2, sp, #112	@ 0x70
 80156ca:	a91b      	add	r1, sp, #108	@ 0x6c
 80156cc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80156d0:	f001 fd7c 	bl	80171cc <__d2b>
 80156d4:	901a      	str	r0, [sp, #104]	@ 0x68
 80156d6:	2800      	cmp	r0, #0
 80156d8:	f43f aee1 	beq.w	801549e <_strtod_l+0x446>
 80156dc:	9805      	ldr	r0, [sp, #20]
 80156de:	2101      	movs	r1, #1
 80156e0:	f001 fad6 	bl	8016c90 <__i2b>
 80156e4:	4680      	mov	r8, r0
 80156e6:	b948      	cbnz	r0, 80156fc <_strtod_l+0x6a4>
 80156e8:	f04f 0800 	mov.w	r8, #0
 80156ec:	e6d7      	b.n	801549e <_strtod_l+0x446>
 80156ee:	f04f 32ff 	mov.w	r2, #4294967295
 80156f2:	fa02 f303 	lsl.w	r3, r2, r3
 80156f6:	ea03 0a0a 	and.w	sl, r3, sl
 80156fa:	e7af      	b.n	801565c <_strtod_l+0x604>
 80156fc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80156fe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015700:	2d00      	cmp	r5, #0
 8015702:	bfab      	itete	ge
 8015704:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8015706:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8015708:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801570a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801570c:	bfac      	ite	ge
 801570e:	18ef      	addge	r7, r5, r3
 8015710:	1b5e      	sublt	r6, r3, r5
 8015712:	9b08      	ldr	r3, [sp, #32]
 8015714:	1aed      	subs	r5, r5, r3
 8015716:	4415      	add	r5, r2
 8015718:	4b65      	ldr	r3, [pc, #404]	@ (80158b0 <_strtod_l+0x858>)
 801571a:	3d01      	subs	r5, #1
 801571c:	429d      	cmp	r5, r3
 801571e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8015722:	da50      	bge.n	80157c6 <_strtod_l+0x76e>
 8015724:	1b5b      	subs	r3, r3, r5
 8015726:	2b1f      	cmp	r3, #31
 8015728:	eba2 0203 	sub.w	r2, r2, r3
 801572c:	f04f 0101 	mov.w	r1, #1
 8015730:	dc3d      	bgt.n	80157ae <_strtod_l+0x756>
 8015732:	fa01 f303 	lsl.w	r3, r1, r3
 8015736:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015738:	2300      	movs	r3, #0
 801573a:	9310      	str	r3, [sp, #64]	@ 0x40
 801573c:	18bd      	adds	r5, r7, r2
 801573e:	9b08      	ldr	r3, [sp, #32]
 8015740:	42af      	cmp	r7, r5
 8015742:	4416      	add	r6, r2
 8015744:	441e      	add	r6, r3
 8015746:	463b      	mov	r3, r7
 8015748:	bfa8      	it	ge
 801574a:	462b      	movge	r3, r5
 801574c:	42b3      	cmp	r3, r6
 801574e:	bfa8      	it	ge
 8015750:	4633      	movge	r3, r6
 8015752:	2b00      	cmp	r3, #0
 8015754:	bfc2      	ittt	gt
 8015756:	1aed      	subgt	r5, r5, r3
 8015758:	1af6      	subgt	r6, r6, r3
 801575a:	1aff      	subgt	r7, r7, r3
 801575c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801575e:	2b00      	cmp	r3, #0
 8015760:	dd16      	ble.n	8015790 <_strtod_l+0x738>
 8015762:	4641      	mov	r1, r8
 8015764:	9805      	ldr	r0, [sp, #20]
 8015766:	461a      	mov	r2, r3
 8015768:	f001 fb4a 	bl	8016e00 <__pow5mult>
 801576c:	4680      	mov	r8, r0
 801576e:	2800      	cmp	r0, #0
 8015770:	d0ba      	beq.n	80156e8 <_strtod_l+0x690>
 8015772:	4601      	mov	r1, r0
 8015774:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8015776:	9805      	ldr	r0, [sp, #20]
 8015778:	f001 faa0 	bl	8016cbc <__multiply>
 801577c:	900a      	str	r0, [sp, #40]	@ 0x28
 801577e:	2800      	cmp	r0, #0
 8015780:	f43f ae8d 	beq.w	801549e <_strtod_l+0x446>
 8015784:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015786:	9805      	ldr	r0, [sp, #20]
 8015788:	f001 f984 	bl	8016a94 <_Bfree>
 801578c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801578e:	931a      	str	r3, [sp, #104]	@ 0x68
 8015790:	2d00      	cmp	r5, #0
 8015792:	dc1d      	bgt.n	80157d0 <_strtod_l+0x778>
 8015794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015796:	2b00      	cmp	r3, #0
 8015798:	dd23      	ble.n	80157e2 <_strtod_l+0x78a>
 801579a:	4649      	mov	r1, r9
 801579c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801579e:	9805      	ldr	r0, [sp, #20]
 80157a0:	f001 fb2e 	bl	8016e00 <__pow5mult>
 80157a4:	4681      	mov	r9, r0
 80157a6:	b9e0      	cbnz	r0, 80157e2 <_strtod_l+0x78a>
 80157a8:	f04f 0900 	mov.w	r9, #0
 80157ac:	e677      	b.n	801549e <_strtod_l+0x446>
 80157ae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80157b2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80157b6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80157ba:	35e2      	adds	r5, #226	@ 0xe2
 80157bc:	fa01 f305 	lsl.w	r3, r1, r5
 80157c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80157c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80157c4:	e7ba      	b.n	801573c <_strtod_l+0x6e4>
 80157c6:	2300      	movs	r3, #0
 80157c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80157ca:	2301      	movs	r3, #1
 80157cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80157ce:	e7b5      	b.n	801573c <_strtod_l+0x6e4>
 80157d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80157d2:	9805      	ldr	r0, [sp, #20]
 80157d4:	462a      	mov	r2, r5
 80157d6:	f001 fb6d 	bl	8016eb4 <__lshift>
 80157da:	901a      	str	r0, [sp, #104]	@ 0x68
 80157dc:	2800      	cmp	r0, #0
 80157de:	d1d9      	bne.n	8015794 <_strtod_l+0x73c>
 80157e0:	e65d      	b.n	801549e <_strtod_l+0x446>
 80157e2:	2e00      	cmp	r6, #0
 80157e4:	dd07      	ble.n	80157f6 <_strtod_l+0x79e>
 80157e6:	4649      	mov	r1, r9
 80157e8:	9805      	ldr	r0, [sp, #20]
 80157ea:	4632      	mov	r2, r6
 80157ec:	f001 fb62 	bl	8016eb4 <__lshift>
 80157f0:	4681      	mov	r9, r0
 80157f2:	2800      	cmp	r0, #0
 80157f4:	d0d8      	beq.n	80157a8 <_strtod_l+0x750>
 80157f6:	2f00      	cmp	r7, #0
 80157f8:	dd08      	ble.n	801580c <_strtod_l+0x7b4>
 80157fa:	4641      	mov	r1, r8
 80157fc:	9805      	ldr	r0, [sp, #20]
 80157fe:	463a      	mov	r2, r7
 8015800:	f001 fb58 	bl	8016eb4 <__lshift>
 8015804:	4680      	mov	r8, r0
 8015806:	2800      	cmp	r0, #0
 8015808:	f43f ae49 	beq.w	801549e <_strtod_l+0x446>
 801580c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801580e:	9805      	ldr	r0, [sp, #20]
 8015810:	464a      	mov	r2, r9
 8015812:	f001 fbd7 	bl	8016fc4 <__mdiff>
 8015816:	4604      	mov	r4, r0
 8015818:	2800      	cmp	r0, #0
 801581a:	f43f ae40 	beq.w	801549e <_strtod_l+0x446>
 801581e:	68c3      	ldr	r3, [r0, #12]
 8015820:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015822:	2300      	movs	r3, #0
 8015824:	60c3      	str	r3, [r0, #12]
 8015826:	4641      	mov	r1, r8
 8015828:	f001 fbb0 	bl	8016f8c <__mcmp>
 801582c:	2800      	cmp	r0, #0
 801582e:	da45      	bge.n	80158bc <_strtod_l+0x864>
 8015830:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015832:	ea53 030a 	orrs.w	r3, r3, sl
 8015836:	d16b      	bne.n	8015910 <_strtod_l+0x8b8>
 8015838:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801583c:	2b00      	cmp	r3, #0
 801583e:	d167      	bne.n	8015910 <_strtod_l+0x8b8>
 8015840:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015844:	0d1b      	lsrs	r3, r3, #20
 8015846:	051b      	lsls	r3, r3, #20
 8015848:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801584c:	d960      	bls.n	8015910 <_strtod_l+0x8b8>
 801584e:	6963      	ldr	r3, [r4, #20]
 8015850:	b913      	cbnz	r3, 8015858 <_strtod_l+0x800>
 8015852:	6923      	ldr	r3, [r4, #16]
 8015854:	2b01      	cmp	r3, #1
 8015856:	dd5b      	ble.n	8015910 <_strtod_l+0x8b8>
 8015858:	4621      	mov	r1, r4
 801585a:	2201      	movs	r2, #1
 801585c:	9805      	ldr	r0, [sp, #20]
 801585e:	f001 fb29 	bl	8016eb4 <__lshift>
 8015862:	4641      	mov	r1, r8
 8015864:	4604      	mov	r4, r0
 8015866:	f001 fb91 	bl	8016f8c <__mcmp>
 801586a:	2800      	cmp	r0, #0
 801586c:	dd50      	ble.n	8015910 <_strtod_l+0x8b8>
 801586e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015872:	9a08      	ldr	r2, [sp, #32]
 8015874:	0d1b      	lsrs	r3, r3, #20
 8015876:	051b      	lsls	r3, r3, #20
 8015878:	2a00      	cmp	r2, #0
 801587a:	d06a      	beq.n	8015952 <_strtod_l+0x8fa>
 801587c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015880:	d867      	bhi.n	8015952 <_strtod_l+0x8fa>
 8015882:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8015886:	f67f ae9d 	bls.w	80155c4 <_strtod_l+0x56c>
 801588a:	4b0a      	ldr	r3, [pc, #40]	@ (80158b4 <_strtod_l+0x85c>)
 801588c:	4650      	mov	r0, sl
 801588e:	4659      	mov	r1, fp
 8015890:	2200      	movs	r2, #0
 8015892:	f7f2 fee1 	bl	8008658 <__aeabi_dmul>
 8015896:	4b08      	ldr	r3, [pc, #32]	@ (80158b8 <_strtod_l+0x860>)
 8015898:	400b      	ands	r3, r1
 801589a:	4682      	mov	sl, r0
 801589c:	468b      	mov	fp, r1
 801589e:	2b00      	cmp	r3, #0
 80158a0:	f47f ae08 	bne.w	80154b4 <_strtod_l+0x45c>
 80158a4:	9a05      	ldr	r2, [sp, #20]
 80158a6:	2322      	movs	r3, #34	@ 0x22
 80158a8:	6013      	str	r3, [r2, #0]
 80158aa:	e603      	b.n	80154b4 <_strtod_l+0x45c>
 80158ac:	0801a948 	.word	0x0801a948
 80158b0:	fffffc02 	.word	0xfffffc02
 80158b4:	39500000 	.word	0x39500000
 80158b8:	7ff00000 	.word	0x7ff00000
 80158bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80158c0:	d165      	bne.n	801598e <_strtod_l+0x936>
 80158c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80158c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80158c8:	b35a      	cbz	r2, 8015922 <_strtod_l+0x8ca>
 80158ca:	4a9f      	ldr	r2, [pc, #636]	@ (8015b48 <_strtod_l+0xaf0>)
 80158cc:	4293      	cmp	r3, r2
 80158ce:	d12b      	bne.n	8015928 <_strtod_l+0x8d0>
 80158d0:	9b08      	ldr	r3, [sp, #32]
 80158d2:	4651      	mov	r1, sl
 80158d4:	b303      	cbz	r3, 8015918 <_strtod_l+0x8c0>
 80158d6:	4b9d      	ldr	r3, [pc, #628]	@ (8015b4c <_strtod_l+0xaf4>)
 80158d8:	465a      	mov	r2, fp
 80158da:	4013      	ands	r3, r2
 80158dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80158e0:	f04f 32ff 	mov.w	r2, #4294967295
 80158e4:	d81b      	bhi.n	801591e <_strtod_l+0x8c6>
 80158e6:	0d1b      	lsrs	r3, r3, #20
 80158e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80158ec:	fa02 f303 	lsl.w	r3, r2, r3
 80158f0:	4299      	cmp	r1, r3
 80158f2:	d119      	bne.n	8015928 <_strtod_l+0x8d0>
 80158f4:	4b96      	ldr	r3, [pc, #600]	@ (8015b50 <_strtod_l+0xaf8>)
 80158f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80158f8:	429a      	cmp	r2, r3
 80158fa:	d102      	bne.n	8015902 <_strtod_l+0x8aa>
 80158fc:	3101      	adds	r1, #1
 80158fe:	f43f adce 	beq.w	801549e <_strtod_l+0x446>
 8015902:	4b92      	ldr	r3, [pc, #584]	@ (8015b4c <_strtod_l+0xaf4>)
 8015904:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015906:	401a      	ands	r2, r3
 8015908:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801590c:	f04f 0a00 	mov.w	sl, #0
 8015910:	9b08      	ldr	r3, [sp, #32]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d1b9      	bne.n	801588a <_strtod_l+0x832>
 8015916:	e5cd      	b.n	80154b4 <_strtod_l+0x45c>
 8015918:	f04f 33ff 	mov.w	r3, #4294967295
 801591c:	e7e8      	b.n	80158f0 <_strtod_l+0x898>
 801591e:	4613      	mov	r3, r2
 8015920:	e7e6      	b.n	80158f0 <_strtod_l+0x898>
 8015922:	ea53 030a 	orrs.w	r3, r3, sl
 8015926:	d0a2      	beq.n	801586e <_strtod_l+0x816>
 8015928:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801592a:	b1db      	cbz	r3, 8015964 <_strtod_l+0x90c>
 801592c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801592e:	4213      	tst	r3, r2
 8015930:	d0ee      	beq.n	8015910 <_strtod_l+0x8b8>
 8015932:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015934:	9a08      	ldr	r2, [sp, #32]
 8015936:	4650      	mov	r0, sl
 8015938:	4659      	mov	r1, fp
 801593a:	b1bb      	cbz	r3, 801596c <_strtod_l+0x914>
 801593c:	f7ff fb6e 	bl	801501c <sulp>
 8015940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015944:	ec53 2b10 	vmov	r2, r3, d0
 8015948:	f7f2 fcd0 	bl	80082ec <__adddf3>
 801594c:	4682      	mov	sl, r0
 801594e:	468b      	mov	fp, r1
 8015950:	e7de      	b.n	8015910 <_strtod_l+0x8b8>
 8015952:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015956:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801595a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801595e:	f04f 3aff 	mov.w	sl, #4294967295
 8015962:	e7d5      	b.n	8015910 <_strtod_l+0x8b8>
 8015964:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015966:	ea13 0f0a 	tst.w	r3, sl
 801596a:	e7e1      	b.n	8015930 <_strtod_l+0x8d8>
 801596c:	f7ff fb56 	bl	801501c <sulp>
 8015970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015974:	ec53 2b10 	vmov	r2, r3, d0
 8015978:	f7f2 fcb6 	bl	80082e8 <__aeabi_dsub>
 801597c:	2200      	movs	r2, #0
 801597e:	2300      	movs	r3, #0
 8015980:	4682      	mov	sl, r0
 8015982:	468b      	mov	fp, r1
 8015984:	f7f3 f8d0 	bl	8008b28 <__aeabi_dcmpeq>
 8015988:	2800      	cmp	r0, #0
 801598a:	d0c1      	beq.n	8015910 <_strtod_l+0x8b8>
 801598c:	e61a      	b.n	80155c4 <_strtod_l+0x56c>
 801598e:	4641      	mov	r1, r8
 8015990:	4620      	mov	r0, r4
 8015992:	f001 fc73 	bl	801727c <__ratio>
 8015996:	ec57 6b10 	vmov	r6, r7, d0
 801599a:	2200      	movs	r2, #0
 801599c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80159a0:	4630      	mov	r0, r6
 80159a2:	4639      	mov	r1, r7
 80159a4:	f7f3 f8d4 	bl	8008b50 <__aeabi_dcmple>
 80159a8:	2800      	cmp	r0, #0
 80159aa:	d06f      	beq.n	8015a8c <_strtod_l+0xa34>
 80159ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d17a      	bne.n	8015aa8 <_strtod_l+0xa50>
 80159b2:	f1ba 0f00 	cmp.w	sl, #0
 80159b6:	d158      	bne.n	8015a6a <_strtod_l+0xa12>
 80159b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80159ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d15a      	bne.n	8015a78 <_strtod_l+0xa20>
 80159c2:	4b64      	ldr	r3, [pc, #400]	@ (8015b54 <_strtod_l+0xafc>)
 80159c4:	2200      	movs	r2, #0
 80159c6:	4630      	mov	r0, r6
 80159c8:	4639      	mov	r1, r7
 80159ca:	f7f3 f8b7 	bl	8008b3c <__aeabi_dcmplt>
 80159ce:	2800      	cmp	r0, #0
 80159d0:	d159      	bne.n	8015a86 <_strtod_l+0xa2e>
 80159d2:	4630      	mov	r0, r6
 80159d4:	4639      	mov	r1, r7
 80159d6:	4b60      	ldr	r3, [pc, #384]	@ (8015b58 <_strtod_l+0xb00>)
 80159d8:	2200      	movs	r2, #0
 80159da:	f7f2 fe3d 	bl	8008658 <__aeabi_dmul>
 80159de:	4606      	mov	r6, r0
 80159e0:	460f      	mov	r7, r1
 80159e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80159e6:	9606      	str	r6, [sp, #24]
 80159e8:	9307      	str	r3, [sp, #28]
 80159ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80159ee:	4d57      	ldr	r5, [pc, #348]	@ (8015b4c <_strtod_l+0xaf4>)
 80159f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80159f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80159f6:	401d      	ands	r5, r3
 80159f8:	4b58      	ldr	r3, [pc, #352]	@ (8015b5c <_strtod_l+0xb04>)
 80159fa:	429d      	cmp	r5, r3
 80159fc:	f040 80b2 	bne.w	8015b64 <_strtod_l+0xb0c>
 8015a00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015a02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8015a06:	ec4b ab10 	vmov	d0, sl, fp
 8015a0a:	f001 fb6f 	bl	80170ec <__ulp>
 8015a0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015a12:	ec51 0b10 	vmov	r0, r1, d0
 8015a16:	f7f2 fe1f 	bl	8008658 <__aeabi_dmul>
 8015a1a:	4652      	mov	r2, sl
 8015a1c:	465b      	mov	r3, fp
 8015a1e:	f7f2 fc65 	bl	80082ec <__adddf3>
 8015a22:	460b      	mov	r3, r1
 8015a24:	4949      	ldr	r1, [pc, #292]	@ (8015b4c <_strtod_l+0xaf4>)
 8015a26:	4a4e      	ldr	r2, [pc, #312]	@ (8015b60 <_strtod_l+0xb08>)
 8015a28:	4019      	ands	r1, r3
 8015a2a:	4291      	cmp	r1, r2
 8015a2c:	4682      	mov	sl, r0
 8015a2e:	d942      	bls.n	8015ab6 <_strtod_l+0xa5e>
 8015a30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015a32:	4b47      	ldr	r3, [pc, #284]	@ (8015b50 <_strtod_l+0xaf8>)
 8015a34:	429a      	cmp	r2, r3
 8015a36:	d103      	bne.n	8015a40 <_strtod_l+0x9e8>
 8015a38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015a3a:	3301      	adds	r3, #1
 8015a3c:	f43f ad2f 	beq.w	801549e <_strtod_l+0x446>
 8015a40:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8015b50 <_strtod_l+0xaf8>
 8015a44:	f04f 3aff 	mov.w	sl, #4294967295
 8015a48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015a4a:	9805      	ldr	r0, [sp, #20]
 8015a4c:	f001 f822 	bl	8016a94 <_Bfree>
 8015a50:	9805      	ldr	r0, [sp, #20]
 8015a52:	4649      	mov	r1, r9
 8015a54:	f001 f81e 	bl	8016a94 <_Bfree>
 8015a58:	9805      	ldr	r0, [sp, #20]
 8015a5a:	4641      	mov	r1, r8
 8015a5c:	f001 f81a 	bl	8016a94 <_Bfree>
 8015a60:	9805      	ldr	r0, [sp, #20]
 8015a62:	4621      	mov	r1, r4
 8015a64:	f001 f816 	bl	8016a94 <_Bfree>
 8015a68:	e619      	b.n	801569e <_strtod_l+0x646>
 8015a6a:	f1ba 0f01 	cmp.w	sl, #1
 8015a6e:	d103      	bne.n	8015a78 <_strtod_l+0xa20>
 8015a70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	f43f ada6 	beq.w	80155c4 <_strtod_l+0x56c>
 8015a78:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8015b28 <_strtod_l+0xad0>
 8015a7c:	4f35      	ldr	r7, [pc, #212]	@ (8015b54 <_strtod_l+0xafc>)
 8015a7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015a82:	2600      	movs	r6, #0
 8015a84:	e7b1      	b.n	80159ea <_strtod_l+0x992>
 8015a86:	4f34      	ldr	r7, [pc, #208]	@ (8015b58 <_strtod_l+0xb00>)
 8015a88:	2600      	movs	r6, #0
 8015a8a:	e7aa      	b.n	80159e2 <_strtod_l+0x98a>
 8015a8c:	4b32      	ldr	r3, [pc, #200]	@ (8015b58 <_strtod_l+0xb00>)
 8015a8e:	4630      	mov	r0, r6
 8015a90:	4639      	mov	r1, r7
 8015a92:	2200      	movs	r2, #0
 8015a94:	f7f2 fde0 	bl	8008658 <__aeabi_dmul>
 8015a98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a9a:	4606      	mov	r6, r0
 8015a9c:	460f      	mov	r7, r1
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d09f      	beq.n	80159e2 <_strtod_l+0x98a>
 8015aa2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015aa6:	e7a0      	b.n	80159ea <_strtod_l+0x992>
 8015aa8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8015b30 <_strtod_l+0xad8>
 8015aac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015ab0:	ec57 6b17 	vmov	r6, r7, d7
 8015ab4:	e799      	b.n	80159ea <_strtod_l+0x992>
 8015ab6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8015aba:	9b08      	ldr	r3, [sp, #32]
 8015abc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d1c1      	bne.n	8015a48 <_strtod_l+0x9f0>
 8015ac4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015ac8:	0d1b      	lsrs	r3, r3, #20
 8015aca:	051b      	lsls	r3, r3, #20
 8015acc:	429d      	cmp	r5, r3
 8015ace:	d1bb      	bne.n	8015a48 <_strtod_l+0x9f0>
 8015ad0:	4630      	mov	r0, r6
 8015ad2:	4639      	mov	r1, r7
 8015ad4:	f7f3 f8d0 	bl	8008c78 <__aeabi_d2lz>
 8015ad8:	f7f2 fd90 	bl	80085fc <__aeabi_l2d>
 8015adc:	4602      	mov	r2, r0
 8015ade:	460b      	mov	r3, r1
 8015ae0:	4630      	mov	r0, r6
 8015ae2:	4639      	mov	r1, r7
 8015ae4:	f7f2 fc00 	bl	80082e8 <__aeabi_dsub>
 8015ae8:	460b      	mov	r3, r1
 8015aea:	4602      	mov	r2, r0
 8015aec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8015af0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8015af4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015af6:	ea46 060a 	orr.w	r6, r6, sl
 8015afa:	431e      	orrs	r6, r3
 8015afc:	d06f      	beq.n	8015bde <_strtod_l+0xb86>
 8015afe:	a30e      	add	r3, pc, #56	@ (adr r3, 8015b38 <_strtod_l+0xae0>)
 8015b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b04:	f7f3 f81a 	bl	8008b3c <__aeabi_dcmplt>
 8015b08:	2800      	cmp	r0, #0
 8015b0a:	f47f acd3 	bne.w	80154b4 <_strtod_l+0x45c>
 8015b0e:	a30c      	add	r3, pc, #48	@ (adr r3, 8015b40 <_strtod_l+0xae8>)
 8015b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015b18:	f7f3 f82e 	bl	8008b78 <__aeabi_dcmpgt>
 8015b1c:	2800      	cmp	r0, #0
 8015b1e:	d093      	beq.n	8015a48 <_strtod_l+0x9f0>
 8015b20:	e4c8      	b.n	80154b4 <_strtod_l+0x45c>
 8015b22:	bf00      	nop
 8015b24:	f3af 8000 	nop.w
 8015b28:	00000000 	.word	0x00000000
 8015b2c:	bff00000 	.word	0xbff00000
 8015b30:	00000000 	.word	0x00000000
 8015b34:	3ff00000 	.word	0x3ff00000
 8015b38:	94a03595 	.word	0x94a03595
 8015b3c:	3fdfffff 	.word	0x3fdfffff
 8015b40:	35afe535 	.word	0x35afe535
 8015b44:	3fe00000 	.word	0x3fe00000
 8015b48:	000fffff 	.word	0x000fffff
 8015b4c:	7ff00000 	.word	0x7ff00000
 8015b50:	7fefffff 	.word	0x7fefffff
 8015b54:	3ff00000 	.word	0x3ff00000
 8015b58:	3fe00000 	.word	0x3fe00000
 8015b5c:	7fe00000 	.word	0x7fe00000
 8015b60:	7c9fffff 	.word	0x7c9fffff
 8015b64:	9b08      	ldr	r3, [sp, #32]
 8015b66:	b323      	cbz	r3, 8015bb2 <_strtod_l+0xb5a>
 8015b68:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8015b6c:	d821      	bhi.n	8015bb2 <_strtod_l+0xb5a>
 8015b6e:	a328      	add	r3, pc, #160	@ (adr r3, 8015c10 <_strtod_l+0xbb8>)
 8015b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b74:	4630      	mov	r0, r6
 8015b76:	4639      	mov	r1, r7
 8015b78:	f7f2 ffea 	bl	8008b50 <__aeabi_dcmple>
 8015b7c:	b1a0      	cbz	r0, 8015ba8 <_strtod_l+0xb50>
 8015b7e:	4639      	mov	r1, r7
 8015b80:	4630      	mov	r0, r6
 8015b82:	f7f3 f841 	bl	8008c08 <__aeabi_d2uiz>
 8015b86:	2801      	cmp	r0, #1
 8015b88:	bf38      	it	cc
 8015b8a:	2001      	movcc	r0, #1
 8015b8c:	f7f2 fcea 	bl	8008564 <__aeabi_ui2d>
 8015b90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015b92:	4606      	mov	r6, r0
 8015b94:	460f      	mov	r7, r1
 8015b96:	b9fb      	cbnz	r3, 8015bd8 <_strtod_l+0xb80>
 8015b98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015b9c:	9014      	str	r0, [sp, #80]	@ 0x50
 8015b9e:	9315      	str	r3, [sp, #84]	@ 0x54
 8015ba0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8015ba4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015ba8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015baa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8015bae:	1b5b      	subs	r3, r3, r5
 8015bb0:	9311      	str	r3, [sp, #68]	@ 0x44
 8015bb2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8015bb6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8015bba:	f001 fa97 	bl	80170ec <__ulp>
 8015bbe:	4650      	mov	r0, sl
 8015bc0:	ec53 2b10 	vmov	r2, r3, d0
 8015bc4:	4659      	mov	r1, fp
 8015bc6:	f7f2 fd47 	bl	8008658 <__aeabi_dmul>
 8015bca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8015bce:	f7f2 fb8d 	bl	80082ec <__adddf3>
 8015bd2:	4682      	mov	sl, r0
 8015bd4:	468b      	mov	fp, r1
 8015bd6:	e770      	b.n	8015aba <_strtod_l+0xa62>
 8015bd8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8015bdc:	e7e0      	b.n	8015ba0 <_strtod_l+0xb48>
 8015bde:	a30e      	add	r3, pc, #56	@ (adr r3, 8015c18 <_strtod_l+0xbc0>)
 8015be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015be4:	f7f2 ffaa 	bl	8008b3c <__aeabi_dcmplt>
 8015be8:	e798      	b.n	8015b1c <_strtod_l+0xac4>
 8015bea:	2300      	movs	r3, #0
 8015bec:	930e      	str	r3, [sp, #56]	@ 0x38
 8015bee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8015bf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015bf2:	6013      	str	r3, [r2, #0]
 8015bf4:	f7ff ba6d 	b.w	80150d2 <_strtod_l+0x7a>
 8015bf8:	2a65      	cmp	r2, #101	@ 0x65
 8015bfa:	f43f ab68 	beq.w	80152ce <_strtod_l+0x276>
 8015bfe:	2a45      	cmp	r2, #69	@ 0x45
 8015c00:	f43f ab65 	beq.w	80152ce <_strtod_l+0x276>
 8015c04:	2301      	movs	r3, #1
 8015c06:	f7ff bba0 	b.w	801534a <_strtod_l+0x2f2>
 8015c0a:	bf00      	nop
 8015c0c:	f3af 8000 	nop.w
 8015c10:	ffc00000 	.word	0xffc00000
 8015c14:	41dfffff 	.word	0x41dfffff
 8015c18:	94a03595 	.word	0x94a03595
 8015c1c:	3fcfffff 	.word	0x3fcfffff

08015c20 <strtod>:
 8015c20:	460a      	mov	r2, r1
 8015c22:	4601      	mov	r1, r0
 8015c24:	4802      	ldr	r0, [pc, #8]	@ (8015c30 <strtod+0x10>)
 8015c26:	4b03      	ldr	r3, [pc, #12]	@ (8015c34 <strtod+0x14>)
 8015c28:	6800      	ldr	r0, [r0, #0]
 8015c2a:	f7ff ba15 	b.w	8015058 <_strtod_l>
 8015c2e:	bf00      	nop
 8015c30:	200001e4 	.word	0x200001e4
 8015c34:	20000078 	.word	0x20000078

08015c38 <std>:
 8015c38:	2300      	movs	r3, #0
 8015c3a:	b510      	push	{r4, lr}
 8015c3c:	4604      	mov	r4, r0
 8015c3e:	e9c0 3300 	strd	r3, r3, [r0]
 8015c42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015c46:	6083      	str	r3, [r0, #8]
 8015c48:	8181      	strh	r1, [r0, #12]
 8015c4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8015c4c:	81c2      	strh	r2, [r0, #14]
 8015c4e:	6183      	str	r3, [r0, #24]
 8015c50:	4619      	mov	r1, r3
 8015c52:	2208      	movs	r2, #8
 8015c54:	305c      	adds	r0, #92	@ 0x5c
 8015c56:	f000 fa7f 	bl	8016158 <memset>
 8015c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8015c90 <std+0x58>)
 8015c5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8015c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8015c94 <std+0x5c>)
 8015c60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015c62:	4b0d      	ldr	r3, [pc, #52]	@ (8015c98 <std+0x60>)
 8015c64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015c66:	4b0d      	ldr	r3, [pc, #52]	@ (8015c9c <std+0x64>)
 8015c68:	6323      	str	r3, [r4, #48]	@ 0x30
 8015c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8015ca0 <std+0x68>)
 8015c6c:	6224      	str	r4, [r4, #32]
 8015c6e:	429c      	cmp	r4, r3
 8015c70:	d006      	beq.n	8015c80 <std+0x48>
 8015c72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015c76:	4294      	cmp	r4, r2
 8015c78:	d002      	beq.n	8015c80 <std+0x48>
 8015c7a:	33d0      	adds	r3, #208	@ 0xd0
 8015c7c:	429c      	cmp	r4, r3
 8015c7e:	d105      	bne.n	8015c8c <std+0x54>
 8015c80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015c88:	f000 bb14 	b.w	80162b4 <__retarget_lock_init_recursive>
 8015c8c:	bd10      	pop	{r4, pc}
 8015c8e:	bf00      	nop
 8015c90:	08015fa5 	.word	0x08015fa5
 8015c94:	08015fcb 	.word	0x08015fcb
 8015c98:	08016003 	.word	0x08016003
 8015c9c:	08016027 	.word	0x08016027
 8015ca0:	200134f0 	.word	0x200134f0

08015ca4 <stdio_exit_handler>:
 8015ca4:	4a02      	ldr	r2, [pc, #8]	@ (8015cb0 <stdio_exit_handler+0xc>)
 8015ca6:	4903      	ldr	r1, [pc, #12]	@ (8015cb4 <stdio_exit_handler+0x10>)
 8015ca8:	4803      	ldr	r0, [pc, #12]	@ (8015cb8 <stdio_exit_handler+0x14>)
 8015caa:	f000 b869 	b.w	8015d80 <_fwalk_sglue>
 8015cae:	bf00      	nop
 8015cb0:	2000006c 	.word	0x2000006c
 8015cb4:	08018321 	.word	0x08018321
 8015cb8:	200001e8 	.word	0x200001e8

08015cbc <cleanup_stdio>:
 8015cbc:	6841      	ldr	r1, [r0, #4]
 8015cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8015cf0 <cleanup_stdio+0x34>)
 8015cc0:	4299      	cmp	r1, r3
 8015cc2:	b510      	push	{r4, lr}
 8015cc4:	4604      	mov	r4, r0
 8015cc6:	d001      	beq.n	8015ccc <cleanup_stdio+0x10>
 8015cc8:	f002 fb2a 	bl	8018320 <_fflush_r>
 8015ccc:	68a1      	ldr	r1, [r4, #8]
 8015cce:	4b09      	ldr	r3, [pc, #36]	@ (8015cf4 <cleanup_stdio+0x38>)
 8015cd0:	4299      	cmp	r1, r3
 8015cd2:	d002      	beq.n	8015cda <cleanup_stdio+0x1e>
 8015cd4:	4620      	mov	r0, r4
 8015cd6:	f002 fb23 	bl	8018320 <_fflush_r>
 8015cda:	68e1      	ldr	r1, [r4, #12]
 8015cdc:	4b06      	ldr	r3, [pc, #24]	@ (8015cf8 <cleanup_stdio+0x3c>)
 8015cde:	4299      	cmp	r1, r3
 8015ce0:	d004      	beq.n	8015cec <cleanup_stdio+0x30>
 8015ce2:	4620      	mov	r0, r4
 8015ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ce8:	f002 bb1a 	b.w	8018320 <_fflush_r>
 8015cec:	bd10      	pop	{r4, pc}
 8015cee:	bf00      	nop
 8015cf0:	200134f0 	.word	0x200134f0
 8015cf4:	20013558 	.word	0x20013558
 8015cf8:	200135c0 	.word	0x200135c0

08015cfc <global_stdio_init.part.0>:
 8015cfc:	b510      	push	{r4, lr}
 8015cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8015d2c <global_stdio_init.part.0+0x30>)
 8015d00:	4c0b      	ldr	r4, [pc, #44]	@ (8015d30 <global_stdio_init.part.0+0x34>)
 8015d02:	4a0c      	ldr	r2, [pc, #48]	@ (8015d34 <global_stdio_init.part.0+0x38>)
 8015d04:	601a      	str	r2, [r3, #0]
 8015d06:	4620      	mov	r0, r4
 8015d08:	2200      	movs	r2, #0
 8015d0a:	2104      	movs	r1, #4
 8015d0c:	f7ff ff94 	bl	8015c38 <std>
 8015d10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015d14:	2201      	movs	r2, #1
 8015d16:	2109      	movs	r1, #9
 8015d18:	f7ff ff8e 	bl	8015c38 <std>
 8015d1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015d20:	2202      	movs	r2, #2
 8015d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d26:	2112      	movs	r1, #18
 8015d28:	f7ff bf86 	b.w	8015c38 <std>
 8015d2c:	20013628 	.word	0x20013628
 8015d30:	200134f0 	.word	0x200134f0
 8015d34:	08015ca5 	.word	0x08015ca5

08015d38 <__sfp_lock_acquire>:
 8015d38:	4801      	ldr	r0, [pc, #4]	@ (8015d40 <__sfp_lock_acquire+0x8>)
 8015d3a:	f000 babc 	b.w	80162b6 <__retarget_lock_acquire_recursive>
 8015d3e:	bf00      	nop
 8015d40:	20013631 	.word	0x20013631

08015d44 <__sfp_lock_release>:
 8015d44:	4801      	ldr	r0, [pc, #4]	@ (8015d4c <__sfp_lock_release+0x8>)
 8015d46:	f000 bab7 	b.w	80162b8 <__retarget_lock_release_recursive>
 8015d4a:	bf00      	nop
 8015d4c:	20013631 	.word	0x20013631

08015d50 <__sinit>:
 8015d50:	b510      	push	{r4, lr}
 8015d52:	4604      	mov	r4, r0
 8015d54:	f7ff fff0 	bl	8015d38 <__sfp_lock_acquire>
 8015d58:	6a23      	ldr	r3, [r4, #32]
 8015d5a:	b11b      	cbz	r3, 8015d64 <__sinit+0x14>
 8015d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d60:	f7ff bff0 	b.w	8015d44 <__sfp_lock_release>
 8015d64:	4b04      	ldr	r3, [pc, #16]	@ (8015d78 <__sinit+0x28>)
 8015d66:	6223      	str	r3, [r4, #32]
 8015d68:	4b04      	ldr	r3, [pc, #16]	@ (8015d7c <__sinit+0x2c>)
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d1f5      	bne.n	8015d5c <__sinit+0xc>
 8015d70:	f7ff ffc4 	bl	8015cfc <global_stdio_init.part.0>
 8015d74:	e7f2      	b.n	8015d5c <__sinit+0xc>
 8015d76:	bf00      	nop
 8015d78:	08015cbd 	.word	0x08015cbd
 8015d7c:	20013628 	.word	0x20013628

08015d80 <_fwalk_sglue>:
 8015d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d84:	4607      	mov	r7, r0
 8015d86:	4688      	mov	r8, r1
 8015d88:	4614      	mov	r4, r2
 8015d8a:	2600      	movs	r6, #0
 8015d8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015d90:	f1b9 0901 	subs.w	r9, r9, #1
 8015d94:	d505      	bpl.n	8015da2 <_fwalk_sglue+0x22>
 8015d96:	6824      	ldr	r4, [r4, #0]
 8015d98:	2c00      	cmp	r4, #0
 8015d9a:	d1f7      	bne.n	8015d8c <_fwalk_sglue+0xc>
 8015d9c:	4630      	mov	r0, r6
 8015d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015da2:	89ab      	ldrh	r3, [r5, #12]
 8015da4:	2b01      	cmp	r3, #1
 8015da6:	d907      	bls.n	8015db8 <_fwalk_sglue+0x38>
 8015da8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015dac:	3301      	adds	r3, #1
 8015dae:	d003      	beq.n	8015db8 <_fwalk_sglue+0x38>
 8015db0:	4629      	mov	r1, r5
 8015db2:	4638      	mov	r0, r7
 8015db4:	47c0      	blx	r8
 8015db6:	4306      	orrs	r6, r0
 8015db8:	3568      	adds	r5, #104	@ 0x68
 8015dba:	e7e9      	b.n	8015d90 <_fwalk_sglue+0x10>

08015dbc <iprintf>:
 8015dbc:	b40f      	push	{r0, r1, r2, r3}
 8015dbe:	b507      	push	{r0, r1, r2, lr}
 8015dc0:	4906      	ldr	r1, [pc, #24]	@ (8015ddc <iprintf+0x20>)
 8015dc2:	ab04      	add	r3, sp, #16
 8015dc4:	6808      	ldr	r0, [r1, #0]
 8015dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dca:	6881      	ldr	r1, [r0, #8]
 8015dcc:	9301      	str	r3, [sp, #4]
 8015dce:	f001 fe31 	bl	8017a34 <_vfiprintf_r>
 8015dd2:	b003      	add	sp, #12
 8015dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8015dd8:	b004      	add	sp, #16
 8015dda:	4770      	bx	lr
 8015ddc:	200001e4 	.word	0x200001e4

08015de0 <_puts_r>:
 8015de0:	6a03      	ldr	r3, [r0, #32]
 8015de2:	b570      	push	{r4, r5, r6, lr}
 8015de4:	6884      	ldr	r4, [r0, #8]
 8015de6:	4605      	mov	r5, r0
 8015de8:	460e      	mov	r6, r1
 8015dea:	b90b      	cbnz	r3, 8015df0 <_puts_r+0x10>
 8015dec:	f7ff ffb0 	bl	8015d50 <__sinit>
 8015df0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015df2:	07db      	lsls	r3, r3, #31
 8015df4:	d405      	bmi.n	8015e02 <_puts_r+0x22>
 8015df6:	89a3      	ldrh	r3, [r4, #12]
 8015df8:	0598      	lsls	r0, r3, #22
 8015dfa:	d402      	bmi.n	8015e02 <_puts_r+0x22>
 8015dfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015dfe:	f000 fa5a 	bl	80162b6 <__retarget_lock_acquire_recursive>
 8015e02:	89a3      	ldrh	r3, [r4, #12]
 8015e04:	0719      	lsls	r1, r3, #28
 8015e06:	d502      	bpl.n	8015e0e <_puts_r+0x2e>
 8015e08:	6923      	ldr	r3, [r4, #16]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d135      	bne.n	8015e7a <_puts_r+0x9a>
 8015e0e:	4621      	mov	r1, r4
 8015e10:	4628      	mov	r0, r5
 8015e12:	f000 f94b 	bl	80160ac <__swsetup_r>
 8015e16:	b380      	cbz	r0, 8015e7a <_puts_r+0x9a>
 8015e18:	f04f 35ff 	mov.w	r5, #4294967295
 8015e1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015e1e:	07da      	lsls	r2, r3, #31
 8015e20:	d405      	bmi.n	8015e2e <_puts_r+0x4e>
 8015e22:	89a3      	ldrh	r3, [r4, #12]
 8015e24:	059b      	lsls	r3, r3, #22
 8015e26:	d402      	bmi.n	8015e2e <_puts_r+0x4e>
 8015e28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015e2a:	f000 fa45 	bl	80162b8 <__retarget_lock_release_recursive>
 8015e2e:	4628      	mov	r0, r5
 8015e30:	bd70      	pop	{r4, r5, r6, pc}
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	da04      	bge.n	8015e40 <_puts_r+0x60>
 8015e36:	69a2      	ldr	r2, [r4, #24]
 8015e38:	429a      	cmp	r2, r3
 8015e3a:	dc17      	bgt.n	8015e6c <_puts_r+0x8c>
 8015e3c:	290a      	cmp	r1, #10
 8015e3e:	d015      	beq.n	8015e6c <_puts_r+0x8c>
 8015e40:	6823      	ldr	r3, [r4, #0]
 8015e42:	1c5a      	adds	r2, r3, #1
 8015e44:	6022      	str	r2, [r4, #0]
 8015e46:	7019      	strb	r1, [r3, #0]
 8015e48:	68a3      	ldr	r3, [r4, #8]
 8015e4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015e4e:	3b01      	subs	r3, #1
 8015e50:	60a3      	str	r3, [r4, #8]
 8015e52:	2900      	cmp	r1, #0
 8015e54:	d1ed      	bne.n	8015e32 <_puts_r+0x52>
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	da11      	bge.n	8015e7e <_puts_r+0x9e>
 8015e5a:	4622      	mov	r2, r4
 8015e5c:	210a      	movs	r1, #10
 8015e5e:	4628      	mov	r0, r5
 8015e60:	f000 f8e5 	bl	801602e <__swbuf_r>
 8015e64:	3001      	adds	r0, #1
 8015e66:	d0d7      	beq.n	8015e18 <_puts_r+0x38>
 8015e68:	250a      	movs	r5, #10
 8015e6a:	e7d7      	b.n	8015e1c <_puts_r+0x3c>
 8015e6c:	4622      	mov	r2, r4
 8015e6e:	4628      	mov	r0, r5
 8015e70:	f000 f8dd 	bl	801602e <__swbuf_r>
 8015e74:	3001      	adds	r0, #1
 8015e76:	d1e7      	bne.n	8015e48 <_puts_r+0x68>
 8015e78:	e7ce      	b.n	8015e18 <_puts_r+0x38>
 8015e7a:	3e01      	subs	r6, #1
 8015e7c:	e7e4      	b.n	8015e48 <_puts_r+0x68>
 8015e7e:	6823      	ldr	r3, [r4, #0]
 8015e80:	1c5a      	adds	r2, r3, #1
 8015e82:	6022      	str	r2, [r4, #0]
 8015e84:	220a      	movs	r2, #10
 8015e86:	701a      	strb	r2, [r3, #0]
 8015e88:	e7ee      	b.n	8015e68 <_puts_r+0x88>
	...

08015e8c <puts>:
 8015e8c:	4b02      	ldr	r3, [pc, #8]	@ (8015e98 <puts+0xc>)
 8015e8e:	4601      	mov	r1, r0
 8015e90:	6818      	ldr	r0, [r3, #0]
 8015e92:	f7ff bfa5 	b.w	8015de0 <_puts_r>
 8015e96:	bf00      	nop
 8015e98:	200001e4 	.word	0x200001e4

08015e9c <sniprintf>:
 8015e9c:	b40c      	push	{r2, r3}
 8015e9e:	b530      	push	{r4, r5, lr}
 8015ea0:	4b18      	ldr	r3, [pc, #96]	@ (8015f04 <sniprintf+0x68>)
 8015ea2:	1e0c      	subs	r4, r1, #0
 8015ea4:	681d      	ldr	r5, [r3, #0]
 8015ea6:	b09d      	sub	sp, #116	@ 0x74
 8015ea8:	da08      	bge.n	8015ebc <sniprintf+0x20>
 8015eaa:	238b      	movs	r3, #139	@ 0x8b
 8015eac:	602b      	str	r3, [r5, #0]
 8015eae:	f04f 30ff 	mov.w	r0, #4294967295
 8015eb2:	b01d      	add	sp, #116	@ 0x74
 8015eb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015eb8:	b002      	add	sp, #8
 8015eba:	4770      	bx	lr
 8015ebc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015ec0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015ec4:	f04f 0300 	mov.w	r3, #0
 8015ec8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8015eca:	bf14      	ite	ne
 8015ecc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015ed0:	4623      	moveq	r3, r4
 8015ed2:	9304      	str	r3, [sp, #16]
 8015ed4:	9307      	str	r3, [sp, #28]
 8015ed6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015eda:	9002      	str	r0, [sp, #8]
 8015edc:	9006      	str	r0, [sp, #24]
 8015ede:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015ee2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015ee4:	ab21      	add	r3, sp, #132	@ 0x84
 8015ee6:	a902      	add	r1, sp, #8
 8015ee8:	4628      	mov	r0, r5
 8015eea:	9301      	str	r3, [sp, #4]
 8015eec:	f001 faac 	bl	8017448 <_svfiprintf_r>
 8015ef0:	1c43      	adds	r3, r0, #1
 8015ef2:	bfbc      	itt	lt
 8015ef4:	238b      	movlt	r3, #139	@ 0x8b
 8015ef6:	602b      	strlt	r3, [r5, #0]
 8015ef8:	2c00      	cmp	r4, #0
 8015efa:	d0da      	beq.n	8015eb2 <sniprintf+0x16>
 8015efc:	9b02      	ldr	r3, [sp, #8]
 8015efe:	2200      	movs	r2, #0
 8015f00:	701a      	strb	r2, [r3, #0]
 8015f02:	e7d6      	b.n	8015eb2 <sniprintf+0x16>
 8015f04:	200001e4 	.word	0x200001e4

08015f08 <siprintf>:
 8015f08:	b40e      	push	{r1, r2, r3}
 8015f0a:	b510      	push	{r4, lr}
 8015f0c:	b09d      	sub	sp, #116	@ 0x74
 8015f0e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015f10:	9002      	str	r0, [sp, #8]
 8015f12:	9006      	str	r0, [sp, #24]
 8015f14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015f18:	480a      	ldr	r0, [pc, #40]	@ (8015f44 <siprintf+0x3c>)
 8015f1a:	9107      	str	r1, [sp, #28]
 8015f1c:	9104      	str	r1, [sp, #16]
 8015f1e:	490a      	ldr	r1, [pc, #40]	@ (8015f48 <siprintf+0x40>)
 8015f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f24:	9105      	str	r1, [sp, #20]
 8015f26:	2400      	movs	r4, #0
 8015f28:	a902      	add	r1, sp, #8
 8015f2a:	6800      	ldr	r0, [r0, #0]
 8015f2c:	9301      	str	r3, [sp, #4]
 8015f2e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8015f30:	f001 fa8a 	bl	8017448 <_svfiprintf_r>
 8015f34:	9b02      	ldr	r3, [sp, #8]
 8015f36:	701c      	strb	r4, [r3, #0]
 8015f38:	b01d      	add	sp, #116	@ 0x74
 8015f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f3e:	b003      	add	sp, #12
 8015f40:	4770      	bx	lr
 8015f42:	bf00      	nop
 8015f44:	200001e4 	.word	0x200001e4
 8015f48:	ffff0208 	.word	0xffff0208

08015f4c <siscanf>:
 8015f4c:	b40e      	push	{r1, r2, r3}
 8015f4e:	b570      	push	{r4, r5, r6, lr}
 8015f50:	b09d      	sub	sp, #116	@ 0x74
 8015f52:	ac21      	add	r4, sp, #132	@ 0x84
 8015f54:	2500      	movs	r5, #0
 8015f56:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8015f5a:	f854 6b04 	ldr.w	r6, [r4], #4
 8015f5e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015f62:	951b      	str	r5, [sp, #108]	@ 0x6c
 8015f64:	9002      	str	r0, [sp, #8]
 8015f66:	9006      	str	r0, [sp, #24]
 8015f68:	f7f2 f95c 	bl	8008224 <strlen>
 8015f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8015f9c <siscanf+0x50>)
 8015f6e:	9003      	str	r0, [sp, #12]
 8015f70:	9007      	str	r0, [sp, #28]
 8015f72:	480b      	ldr	r0, [pc, #44]	@ (8015fa0 <siscanf+0x54>)
 8015f74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015f76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015f7a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015f7e:	4632      	mov	r2, r6
 8015f80:	4623      	mov	r3, r4
 8015f82:	a902      	add	r1, sp, #8
 8015f84:	6800      	ldr	r0, [r0, #0]
 8015f86:	950f      	str	r5, [sp, #60]	@ 0x3c
 8015f88:	9514      	str	r5, [sp, #80]	@ 0x50
 8015f8a:	9401      	str	r4, [sp, #4]
 8015f8c:	f001 fbb2 	bl	80176f4 <__ssvfiscanf_r>
 8015f90:	b01d      	add	sp, #116	@ 0x74
 8015f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f96:	b003      	add	sp, #12
 8015f98:	4770      	bx	lr
 8015f9a:	bf00      	nop
 8015f9c:	08015fc7 	.word	0x08015fc7
 8015fa0:	200001e4 	.word	0x200001e4

08015fa4 <__sread>:
 8015fa4:	b510      	push	{r4, lr}
 8015fa6:	460c      	mov	r4, r1
 8015fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015fac:	f000 f924 	bl	80161f8 <_read_r>
 8015fb0:	2800      	cmp	r0, #0
 8015fb2:	bfab      	itete	ge
 8015fb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015fb6:	89a3      	ldrhlt	r3, [r4, #12]
 8015fb8:	181b      	addge	r3, r3, r0
 8015fba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015fbe:	bfac      	ite	ge
 8015fc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015fc2:	81a3      	strhlt	r3, [r4, #12]
 8015fc4:	bd10      	pop	{r4, pc}

08015fc6 <__seofread>:
 8015fc6:	2000      	movs	r0, #0
 8015fc8:	4770      	bx	lr

08015fca <__swrite>:
 8015fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fce:	461f      	mov	r7, r3
 8015fd0:	898b      	ldrh	r3, [r1, #12]
 8015fd2:	05db      	lsls	r3, r3, #23
 8015fd4:	4605      	mov	r5, r0
 8015fd6:	460c      	mov	r4, r1
 8015fd8:	4616      	mov	r6, r2
 8015fda:	d505      	bpl.n	8015fe8 <__swrite+0x1e>
 8015fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015fe0:	2302      	movs	r3, #2
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	f000 f8f6 	bl	80161d4 <_lseek_r>
 8015fe8:	89a3      	ldrh	r3, [r4, #12]
 8015fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015fee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015ff2:	81a3      	strh	r3, [r4, #12]
 8015ff4:	4632      	mov	r2, r6
 8015ff6:	463b      	mov	r3, r7
 8015ff8:	4628      	mov	r0, r5
 8015ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ffe:	f000 b91d 	b.w	801623c <_write_r>

08016002 <__sseek>:
 8016002:	b510      	push	{r4, lr}
 8016004:	460c      	mov	r4, r1
 8016006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801600a:	f000 f8e3 	bl	80161d4 <_lseek_r>
 801600e:	1c43      	adds	r3, r0, #1
 8016010:	89a3      	ldrh	r3, [r4, #12]
 8016012:	bf15      	itete	ne
 8016014:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016016:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801601a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801601e:	81a3      	strheq	r3, [r4, #12]
 8016020:	bf18      	it	ne
 8016022:	81a3      	strhne	r3, [r4, #12]
 8016024:	bd10      	pop	{r4, pc}

08016026 <__sclose>:
 8016026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801602a:	f000 b8c3 	b.w	80161b4 <_close_r>

0801602e <__swbuf_r>:
 801602e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016030:	460e      	mov	r6, r1
 8016032:	4614      	mov	r4, r2
 8016034:	4605      	mov	r5, r0
 8016036:	b118      	cbz	r0, 8016040 <__swbuf_r+0x12>
 8016038:	6a03      	ldr	r3, [r0, #32]
 801603a:	b90b      	cbnz	r3, 8016040 <__swbuf_r+0x12>
 801603c:	f7ff fe88 	bl	8015d50 <__sinit>
 8016040:	69a3      	ldr	r3, [r4, #24]
 8016042:	60a3      	str	r3, [r4, #8]
 8016044:	89a3      	ldrh	r3, [r4, #12]
 8016046:	071a      	lsls	r2, r3, #28
 8016048:	d501      	bpl.n	801604e <__swbuf_r+0x20>
 801604a:	6923      	ldr	r3, [r4, #16]
 801604c:	b943      	cbnz	r3, 8016060 <__swbuf_r+0x32>
 801604e:	4621      	mov	r1, r4
 8016050:	4628      	mov	r0, r5
 8016052:	f000 f82b 	bl	80160ac <__swsetup_r>
 8016056:	b118      	cbz	r0, 8016060 <__swbuf_r+0x32>
 8016058:	f04f 37ff 	mov.w	r7, #4294967295
 801605c:	4638      	mov	r0, r7
 801605e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016060:	6823      	ldr	r3, [r4, #0]
 8016062:	6922      	ldr	r2, [r4, #16]
 8016064:	1a98      	subs	r0, r3, r2
 8016066:	6963      	ldr	r3, [r4, #20]
 8016068:	b2f6      	uxtb	r6, r6
 801606a:	4283      	cmp	r3, r0
 801606c:	4637      	mov	r7, r6
 801606e:	dc05      	bgt.n	801607c <__swbuf_r+0x4e>
 8016070:	4621      	mov	r1, r4
 8016072:	4628      	mov	r0, r5
 8016074:	f002 f954 	bl	8018320 <_fflush_r>
 8016078:	2800      	cmp	r0, #0
 801607a:	d1ed      	bne.n	8016058 <__swbuf_r+0x2a>
 801607c:	68a3      	ldr	r3, [r4, #8]
 801607e:	3b01      	subs	r3, #1
 8016080:	60a3      	str	r3, [r4, #8]
 8016082:	6823      	ldr	r3, [r4, #0]
 8016084:	1c5a      	adds	r2, r3, #1
 8016086:	6022      	str	r2, [r4, #0]
 8016088:	701e      	strb	r6, [r3, #0]
 801608a:	6962      	ldr	r2, [r4, #20]
 801608c:	1c43      	adds	r3, r0, #1
 801608e:	429a      	cmp	r2, r3
 8016090:	d004      	beq.n	801609c <__swbuf_r+0x6e>
 8016092:	89a3      	ldrh	r3, [r4, #12]
 8016094:	07db      	lsls	r3, r3, #31
 8016096:	d5e1      	bpl.n	801605c <__swbuf_r+0x2e>
 8016098:	2e0a      	cmp	r6, #10
 801609a:	d1df      	bne.n	801605c <__swbuf_r+0x2e>
 801609c:	4621      	mov	r1, r4
 801609e:	4628      	mov	r0, r5
 80160a0:	f002 f93e 	bl	8018320 <_fflush_r>
 80160a4:	2800      	cmp	r0, #0
 80160a6:	d0d9      	beq.n	801605c <__swbuf_r+0x2e>
 80160a8:	e7d6      	b.n	8016058 <__swbuf_r+0x2a>
	...

080160ac <__swsetup_r>:
 80160ac:	b538      	push	{r3, r4, r5, lr}
 80160ae:	4b29      	ldr	r3, [pc, #164]	@ (8016154 <__swsetup_r+0xa8>)
 80160b0:	4605      	mov	r5, r0
 80160b2:	6818      	ldr	r0, [r3, #0]
 80160b4:	460c      	mov	r4, r1
 80160b6:	b118      	cbz	r0, 80160c0 <__swsetup_r+0x14>
 80160b8:	6a03      	ldr	r3, [r0, #32]
 80160ba:	b90b      	cbnz	r3, 80160c0 <__swsetup_r+0x14>
 80160bc:	f7ff fe48 	bl	8015d50 <__sinit>
 80160c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80160c4:	0719      	lsls	r1, r3, #28
 80160c6:	d422      	bmi.n	801610e <__swsetup_r+0x62>
 80160c8:	06da      	lsls	r2, r3, #27
 80160ca:	d407      	bmi.n	80160dc <__swsetup_r+0x30>
 80160cc:	2209      	movs	r2, #9
 80160ce:	602a      	str	r2, [r5, #0]
 80160d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80160d4:	81a3      	strh	r3, [r4, #12]
 80160d6:	f04f 30ff 	mov.w	r0, #4294967295
 80160da:	e033      	b.n	8016144 <__swsetup_r+0x98>
 80160dc:	0758      	lsls	r0, r3, #29
 80160de:	d512      	bpl.n	8016106 <__swsetup_r+0x5a>
 80160e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80160e2:	b141      	cbz	r1, 80160f6 <__swsetup_r+0x4a>
 80160e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80160e8:	4299      	cmp	r1, r3
 80160ea:	d002      	beq.n	80160f2 <__swsetup_r+0x46>
 80160ec:	4628      	mov	r0, r5
 80160ee:	f000 f8fb 	bl	80162e8 <_free_r>
 80160f2:	2300      	movs	r3, #0
 80160f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80160f6:	89a3      	ldrh	r3, [r4, #12]
 80160f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80160fc:	81a3      	strh	r3, [r4, #12]
 80160fe:	2300      	movs	r3, #0
 8016100:	6063      	str	r3, [r4, #4]
 8016102:	6923      	ldr	r3, [r4, #16]
 8016104:	6023      	str	r3, [r4, #0]
 8016106:	89a3      	ldrh	r3, [r4, #12]
 8016108:	f043 0308 	orr.w	r3, r3, #8
 801610c:	81a3      	strh	r3, [r4, #12]
 801610e:	6923      	ldr	r3, [r4, #16]
 8016110:	b94b      	cbnz	r3, 8016126 <__swsetup_r+0x7a>
 8016112:	89a3      	ldrh	r3, [r4, #12]
 8016114:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801611c:	d003      	beq.n	8016126 <__swsetup_r+0x7a>
 801611e:	4621      	mov	r1, r4
 8016120:	4628      	mov	r0, r5
 8016122:	f002 f94b 	bl	80183bc <__smakebuf_r>
 8016126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801612a:	f013 0201 	ands.w	r2, r3, #1
 801612e:	d00a      	beq.n	8016146 <__swsetup_r+0x9a>
 8016130:	2200      	movs	r2, #0
 8016132:	60a2      	str	r2, [r4, #8]
 8016134:	6962      	ldr	r2, [r4, #20]
 8016136:	4252      	negs	r2, r2
 8016138:	61a2      	str	r2, [r4, #24]
 801613a:	6922      	ldr	r2, [r4, #16]
 801613c:	b942      	cbnz	r2, 8016150 <__swsetup_r+0xa4>
 801613e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016142:	d1c5      	bne.n	80160d0 <__swsetup_r+0x24>
 8016144:	bd38      	pop	{r3, r4, r5, pc}
 8016146:	0799      	lsls	r1, r3, #30
 8016148:	bf58      	it	pl
 801614a:	6962      	ldrpl	r2, [r4, #20]
 801614c:	60a2      	str	r2, [r4, #8]
 801614e:	e7f4      	b.n	801613a <__swsetup_r+0x8e>
 8016150:	2000      	movs	r0, #0
 8016152:	e7f7      	b.n	8016144 <__swsetup_r+0x98>
 8016154:	200001e4 	.word	0x200001e4

08016158 <memset>:
 8016158:	4402      	add	r2, r0
 801615a:	4603      	mov	r3, r0
 801615c:	4293      	cmp	r3, r2
 801615e:	d100      	bne.n	8016162 <memset+0xa>
 8016160:	4770      	bx	lr
 8016162:	f803 1b01 	strb.w	r1, [r3], #1
 8016166:	e7f9      	b.n	801615c <memset+0x4>

08016168 <strncmp>:
 8016168:	b510      	push	{r4, lr}
 801616a:	b16a      	cbz	r2, 8016188 <strncmp+0x20>
 801616c:	3901      	subs	r1, #1
 801616e:	1884      	adds	r4, r0, r2
 8016170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016174:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016178:	429a      	cmp	r2, r3
 801617a:	d103      	bne.n	8016184 <strncmp+0x1c>
 801617c:	42a0      	cmp	r0, r4
 801617e:	d001      	beq.n	8016184 <strncmp+0x1c>
 8016180:	2a00      	cmp	r2, #0
 8016182:	d1f5      	bne.n	8016170 <strncmp+0x8>
 8016184:	1ad0      	subs	r0, r2, r3
 8016186:	bd10      	pop	{r4, pc}
 8016188:	4610      	mov	r0, r2
 801618a:	e7fc      	b.n	8016186 <strncmp+0x1e>

0801618c <strncpy>:
 801618c:	b510      	push	{r4, lr}
 801618e:	3901      	subs	r1, #1
 8016190:	4603      	mov	r3, r0
 8016192:	b132      	cbz	r2, 80161a2 <strncpy+0x16>
 8016194:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016198:	f803 4b01 	strb.w	r4, [r3], #1
 801619c:	3a01      	subs	r2, #1
 801619e:	2c00      	cmp	r4, #0
 80161a0:	d1f7      	bne.n	8016192 <strncpy+0x6>
 80161a2:	441a      	add	r2, r3
 80161a4:	2100      	movs	r1, #0
 80161a6:	4293      	cmp	r3, r2
 80161a8:	d100      	bne.n	80161ac <strncpy+0x20>
 80161aa:	bd10      	pop	{r4, pc}
 80161ac:	f803 1b01 	strb.w	r1, [r3], #1
 80161b0:	e7f9      	b.n	80161a6 <strncpy+0x1a>
	...

080161b4 <_close_r>:
 80161b4:	b538      	push	{r3, r4, r5, lr}
 80161b6:	4d06      	ldr	r5, [pc, #24]	@ (80161d0 <_close_r+0x1c>)
 80161b8:	2300      	movs	r3, #0
 80161ba:	4604      	mov	r4, r0
 80161bc:	4608      	mov	r0, r1
 80161be:	602b      	str	r3, [r5, #0]
 80161c0:	f7f8 f8c0 	bl	800e344 <_close>
 80161c4:	1c43      	adds	r3, r0, #1
 80161c6:	d102      	bne.n	80161ce <_close_r+0x1a>
 80161c8:	682b      	ldr	r3, [r5, #0]
 80161ca:	b103      	cbz	r3, 80161ce <_close_r+0x1a>
 80161cc:	6023      	str	r3, [r4, #0]
 80161ce:	bd38      	pop	{r3, r4, r5, pc}
 80161d0:	2001362c 	.word	0x2001362c

080161d4 <_lseek_r>:
 80161d4:	b538      	push	{r3, r4, r5, lr}
 80161d6:	4d07      	ldr	r5, [pc, #28]	@ (80161f4 <_lseek_r+0x20>)
 80161d8:	4604      	mov	r4, r0
 80161da:	4608      	mov	r0, r1
 80161dc:	4611      	mov	r1, r2
 80161de:	2200      	movs	r2, #0
 80161e0:	602a      	str	r2, [r5, #0]
 80161e2:	461a      	mov	r2, r3
 80161e4:	f7f8 f8d5 	bl	800e392 <_lseek>
 80161e8:	1c43      	adds	r3, r0, #1
 80161ea:	d102      	bne.n	80161f2 <_lseek_r+0x1e>
 80161ec:	682b      	ldr	r3, [r5, #0]
 80161ee:	b103      	cbz	r3, 80161f2 <_lseek_r+0x1e>
 80161f0:	6023      	str	r3, [r4, #0]
 80161f2:	bd38      	pop	{r3, r4, r5, pc}
 80161f4:	2001362c 	.word	0x2001362c

080161f8 <_read_r>:
 80161f8:	b538      	push	{r3, r4, r5, lr}
 80161fa:	4d07      	ldr	r5, [pc, #28]	@ (8016218 <_read_r+0x20>)
 80161fc:	4604      	mov	r4, r0
 80161fe:	4608      	mov	r0, r1
 8016200:	4611      	mov	r1, r2
 8016202:	2200      	movs	r2, #0
 8016204:	602a      	str	r2, [r5, #0]
 8016206:	461a      	mov	r2, r3
 8016208:	f7f8 f863 	bl	800e2d2 <_read>
 801620c:	1c43      	adds	r3, r0, #1
 801620e:	d102      	bne.n	8016216 <_read_r+0x1e>
 8016210:	682b      	ldr	r3, [r5, #0]
 8016212:	b103      	cbz	r3, 8016216 <_read_r+0x1e>
 8016214:	6023      	str	r3, [r4, #0]
 8016216:	bd38      	pop	{r3, r4, r5, pc}
 8016218:	2001362c 	.word	0x2001362c

0801621c <_sbrk_r>:
 801621c:	b538      	push	{r3, r4, r5, lr}
 801621e:	4d06      	ldr	r5, [pc, #24]	@ (8016238 <_sbrk_r+0x1c>)
 8016220:	2300      	movs	r3, #0
 8016222:	4604      	mov	r4, r0
 8016224:	4608      	mov	r0, r1
 8016226:	602b      	str	r3, [r5, #0]
 8016228:	f002 fb30 	bl	801888c <_sbrk>
 801622c:	1c43      	adds	r3, r0, #1
 801622e:	d102      	bne.n	8016236 <_sbrk_r+0x1a>
 8016230:	682b      	ldr	r3, [r5, #0]
 8016232:	b103      	cbz	r3, 8016236 <_sbrk_r+0x1a>
 8016234:	6023      	str	r3, [r4, #0]
 8016236:	bd38      	pop	{r3, r4, r5, pc}
 8016238:	2001362c 	.word	0x2001362c

0801623c <_write_r>:
 801623c:	b538      	push	{r3, r4, r5, lr}
 801623e:	4d07      	ldr	r5, [pc, #28]	@ (801625c <_write_r+0x20>)
 8016240:	4604      	mov	r4, r0
 8016242:	4608      	mov	r0, r1
 8016244:	4611      	mov	r1, r2
 8016246:	2200      	movs	r2, #0
 8016248:	602a      	str	r2, [r5, #0]
 801624a:	461a      	mov	r2, r3
 801624c:	f7f8 f85e 	bl	800e30c <_write>
 8016250:	1c43      	adds	r3, r0, #1
 8016252:	d102      	bne.n	801625a <_write_r+0x1e>
 8016254:	682b      	ldr	r3, [r5, #0]
 8016256:	b103      	cbz	r3, 801625a <_write_r+0x1e>
 8016258:	6023      	str	r3, [r4, #0]
 801625a:	bd38      	pop	{r3, r4, r5, pc}
 801625c:	2001362c 	.word	0x2001362c

08016260 <__errno>:
 8016260:	4b01      	ldr	r3, [pc, #4]	@ (8016268 <__errno+0x8>)
 8016262:	6818      	ldr	r0, [r3, #0]
 8016264:	4770      	bx	lr
 8016266:	bf00      	nop
 8016268:	200001e4 	.word	0x200001e4

0801626c <__libc_init_array>:
 801626c:	b570      	push	{r4, r5, r6, lr}
 801626e:	4d0d      	ldr	r5, [pc, #52]	@ (80162a4 <__libc_init_array+0x38>)
 8016270:	4c0d      	ldr	r4, [pc, #52]	@ (80162a8 <__libc_init_array+0x3c>)
 8016272:	1b64      	subs	r4, r4, r5
 8016274:	10a4      	asrs	r4, r4, #2
 8016276:	2600      	movs	r6, #0
 8016278:	42a6      	cmp	r6, r4
 801627a:	d109      	bne.n	8016290 <__libc_init_array+0x24>
 801627c:	4d0b      	ldr	r5, [pc, #44]	@ (80162ac <__libc_init_array+0x40>)
 801627e:	4c0c      	ldr	r4, [pc, #48]	@ (80162b0 <__libc_init_array+0x44>)
 8016280:	f002 fb12 	bl	80188a8 <_init>
 8016284:	1b64      	subs	r4, r4, r5
 8016286:	10a4      	asrs	r4, r4, #2
 8016288:	2600      	movs	r6, #0
 801628a:	42a6      	cmp	r6, r4
 801628c:	d105      	bne.n	801629a <__libc_init_array+0x2e>
 801628e:	bd70      	pop	{r4, r5, r6, pc}
 8016290:	f855 3b04 	ldr.w	r3, [r5], #4
 8016294:	4798      	blx	r3
 8016296:	3601      	adds	r6, #1
 8016298:	e7ee      	b.n	8016278 <__libc_init_array+0xc>
 801629a:	f855 3b04 	ldr.w	r3, [r5], #4
 801629e:	4798      	blx	r3
 80162a0:	3601      	adds	r6, #1
 80162a2:	e7f2      	b.n	801628a <__libc_init_array+0x1e>
 80162a4:	0801ab78 	.word	0x0801ab78
 80162a8:	0801ab78 	.word	0x0801ab78
 80162ac:	0801ab78 	.word	0x0801ab78
 80162b0:	0801ab7c 	.word	0x0801ab7c

080162b4 <__retarget_lock_init_recursive>:
 80162b4:	4770      	bx	lr

080162b6 <__retarget_lock_acquire_recursive>:
 80162b6:	4770      	bx	lr

080162b8 <__retarget_lock_release_recursive>:
 80162b8:	4770      	bx	lr

080162ba <memcpy>:
 80162ba:	440a      	add	r2, r1
 80162bc:	4291      	cmp	r1, r2
 80162be:	f100 33ff 	add.w	r3, r0, #4294967295
 80162c2:	d100      	bne.n	80162c6 <memcpy+0xc>
 80162c4:	4770      	bx	lr
 80162c6:	b510      	push	{r4, lr}
 80162c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80162cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80162d0:	4291      	cmp	r1, r2
 80162d2:	d1f9      	bne.n	80162c8 <memcpy+0xe>
 80162d4:	bd10      	pop	{r4, pc}
	...

080162d8 <nan>:
 80162d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80162e0 <nan+0x8>
 80162dc:	4770      	bx	lr
 80162de:	bf00      	nop
 80162e0:	00000000 	.word	0x00000000
 80162e4:	7ff80000 	.word	0x7ff80000

080162e8 <_free_r>:
 80162e8:	b538      	push	{r3, r4, r5, lr}
 80162ea:	4605      	mov	r5, r0
 80162ec:	2900      	cmp	r1, #0
 80162ee:	d041      	beq.n	8016374 <_free_r+0x8c>
 80162f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162f4:	1f0c      	subs	r4, r1, #4
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	bfb8      	it	lt
 80162fa:	18e4      	addlt	r4, r4, r3
 80162fc:	f7fe fe4c 	bl	8014f98 <__malloc_lock>
 8016300:	4a1d      	ldr	r2, [pc, #116]	@ (8016378 <_free_r+0x90>)
 8016302:	6813      	ldr	r3, [r2, #0]
 8016304:	b933      	cbnz	r3, 8016314 <_free_r+0x2c>
 8016306:	6063      	str	r3, [r4, #4]
 8016308:	6014      	str	r4, [r2, #0]
 801630a:	4628      	mov	r0, r5
 801630c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016310:	f7fe be48 	b.w	8014fa4 <__malloc_unlock>
 8016314:	42a3      	cmp	r3, r4
 8016316:	d908      	bls.n	801632a <_free_r+0x42>
 8016318:	6820      	ldr	r0, [r4, #0]
 801631a:	1821      	adds	r1, r4, r0
 801631c:	428b      	cmp	r3, r1
 801631e:	bf01      	itttt	eq
 8016320:	6819      	ldreq	r1, [r3, #0]
 8016322:	685b      	ldreq	r3, [r3, #4]
 8016324:	1809      	addeq	r1, r1, r0
 8016326:	6021      	streq	r1, [r4, #0]
 8016328:	e7ed      	b.n	8016306 <_free_r+0x1e>
 801632a:	461a      	mov	r2, r3
 801632c:	685b      	ldr	r3, [r3, #4]
 801632e:	b10b      	cbz	r3, 8016334 <_free_r+0x4c>
 8016330:	42a3      	cmp	r3, r4
 8016332:	d9fa      	bls.n	801632a <_free_r+0x42>
 8016334:	6811      	ldr	r1, [r2, #0]
 8016336:	1850      	adds	r0, r2, r1
 8016338:	42a0      	cmp	r0, r4
 801633a:	d10b      	bne.n	8016354 <_free_r+0x6c>
 801633c:	6820      	ldr	r0, [r4, #0]
 801633e:	4401      	add	r1, r0
 8016340:	1850      	adds	r0, r2, r1
 8016342:	4283      	cmp	r3, r0
 8016344:	6011      	str	r1, [r2, #0]
 8016346:	d1e0      	bne.n	801630a <_free_r+0x22>
 8016348:	6818      	ldr	r0, [r3, #0]
 801634a:	685b      	ldr	r3, [r3, #4]
 801634c:	6053      	str	r3, [r2, #4]
 801634e:	4408      	add	r0, r1
 8016350:	6010      	str	r0, [r2, #0]
 8016352:	e7da      	b.n	801630a <_free_r+0x22>
 8016354:	d902      	bls.n	801635c <_free_r+0x74>
 8016356:	230c      	movs	r3, #12
 8016358:	602b      	str	r3, [r5, #0]
 801635a:	e7d6      	b.n	801630a <_free_r+0x22>
 801635c:	6820      	ldr	r0, [r4, #0]
 801635e:	1821      	adds	r1, r4, r0
 8016360:	428b      	cmp	r3, r1
 8016362:	bf04      	itt	eq
 8016364:	6819      	ldreq	r1, [r3, #0]
 8016366:	685b      	ldreq	r3, [r3, #4]
 8016368:	6063      	str	r3, [r4, #4]
 801636a:	bf04      	itt	eq
 801636c:	1809      	addeq	r1, r1, r0
 801636e:	6021      	streq	r1, [r4, #0]
 8016370:	6054      	str	r4, [r2, #4]
 8016372:	e7ca      	b.n	801630a <_free_r+0x22>
 8016374:	bd38      	pop	{r3, r4, r5, pc}
 8016376:	bf00      	nop
 8016378:	200134ec 	.word	0x200134ec

0801637c <rshift>:
 801637c:	6903      	ldr	r3, [r0, #16]
 801637e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016386:	ea4f 1261 	mov.w	r2, r1, asr #5
 801638a:	f100 0414 	add.w	r4, r0, #20
 801638e:	dd45      	ble.n	801641c <rshift+0xa0>
 8016390:	f011 011f 	ands.w	r1, r1, #31
 8016394:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016398:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801639c:	d10c      	bne.n	80163b8 <rshift+0x3c>
 801639e:	f100 0710 	add.w	r7, r0, #16
 80163a2:	4629      	mov	r1, r5
 80163a4:	42b1      	cmp	r1, r6
 80163a6:	d334      	bcc.n	8016412 <rshift+0x96>
 80163a8:	1a9b      	subs	r3, r3, r2
 80163aa:	009b      	lsls	r3, r3, #2
 80163ac:	1eea      	subs	r2, r5, #3
 80163ae:	4296      	cmp	r6, r2
 80163b0:	bf38      	it	cc
 80163b2:	2300      	movcc	r3, #0
 80163b4:	4423      	add	r3, r4
 80163b6:	e015      	b.n	80163e4 <rshift+0x68>
 80163b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80163bc:	f1c1 0820 	rsb	r8, r1, #32
 80163c0:	40cf      	lsrs	r7, r1
 80163c2:	f105 0e04 	add.w	lr, r5, #4
 80163c6:	46a1      	mov	r9, r4
 80163c8:	4576      	cmp	r6, lr
 80163ca:	46f4      	mov	ip, lr
 80163cc:	d815      	bhi.n	80163fa <rshift+0x7e>
 80163ce:	1a9a      	subs	r2, r3, r2
 80163d0:	0092      	lsls	r2, r2, #2
 80163d2:	3a04      	subs	r2, #4
 80163d4:	3501      	adds	r5, #1
 80163d6:	42ae      	cmp	r6, r5
 80163d8:	bf38      	it	cc
 80163da:	2200      	movcc	r2, #0
 80163dc:	18a3      	adds	r3, r4, r2
 80163de:	50a7      	str	r7, [r4, r2]
 80163e0:	b107      	cbz	r7, 80163e4 <rshift+0x68>
 80163e2:	3304      	adds	r3, #4
 80163e4:	1b1a      	subs	r2, r3, r4
 80163e6:	42a3      	cmp	r3, r4
 80163e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80163ec:	bf08      	it	eq
 80163ee:	2300      	moveq	r3, #0
 80163f0:	6102      	str	r2, [r0, #16]
 80163f2:	bf08      	it	eq
 80163f4:	6143      	streq	r3, [r0, #20]
 80163f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163fa:	f8dc c000 	ldr.w	ip, [ip]
 80163fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8016402:	ea4c 0707 	orr.w	r7, ip, r7
 8016406:	f849 7b04 	str.w	r7, [r9], #4
 801640a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801640e:	40cf      	lsrs	r7, r1
 8016410:	e7da      	b.n	80163c8 <rshift+0x4c>
 8016412:	f851 cb04 	ldr.w	ip, [r1], #4
 8016416:	f847 cf04 	str.w	ip, [r7, #4]!
 801641a:	e7c3      	b.n	80163a4 <rshift+0x28>
 801641c:	4623      	mov	r3, r4
 801641e:	e7e1      	b.n	80163e4 <rshift+0x68>

08016420 <__hexdig_fun>:
 8016420:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8016424:	2b09      	cmp	r3, #9
 8016426:	d802      	bhi.n	801642e <__hexdig_fun+0xe>
 8016428:	3820      	subs	r0, #32
 801642a:	b2c0      	uxtb	r0, r0
 801642c:	4770      	bx	lr
 801642e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8016432:	2b05      	cmp	r3, #5
 8016434:	d801      	bhi.n	801643a <__hexdig_fun+0x1a>
 8016436:	3847      	subs	r0, #71	@ 0x47
 8016438:	e7f7      	b.n	801642a <__hexdig_fun+0xa>
 801643a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801643e:	2b05      	cmp	r3, #5
 8016440:	d801      	bhi.n	8016446 <__hexdig_fun+0x26>
 8016442:	3827      	subs	r0, #39	@ 0x27
 8016444:	e7f1      	b.n	801642a <__hexdig_fun+0xa>
 8016446:	2000      	movs	r0, #0
 8016448:	4770      	bx	lr
	...

0801644c <__gethex>:
 801644c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016450:	b085      	sub	sp, #20
 8016452:	468a      	mov	sl, r1
 8016454:	9302      	str	r3, [sp, #8]
 8016456:	680b      	ldr	r3, [r1, #0]
 8016458:	9001      	str	r0, [sp, #4]
 801645a:	4690      	mov	r8, r2
 801645c:	1c9c      	adds	r4, r3, #2
 801645e:	46a1      	mov	r9, r4
 8016460:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016464:	2830      	cmp	r0, #48	@ 0x30
 8016466:	d0fa      	beq.n	801645e <__gethex+0x12>
 8016468:	eba9 0303 	sub.w	r3, r9, r3
 801646c:	f1a3 0b02 	sub.w	fp, r3, #2
 8016470:	f7ff ffd6 	bl	8016420 <__hexdig_fun>
 8016474:	4605      	mov	r5, r0
 8016476:	2800      	cmp	r0, #0
 8016478:	d168      	bne.n	801654c <__gethex+0x100>
 801647a:	49a0      	ldr	r1, [pc, #640]	@ (80166fc <__gethex+0x2b0>)
 801647c:	2201      	movs	r2, #1
 801647e:	4648      	mov	r0, r9
 8016480:	f7ff fe72 	bl	8016168 <strncmp>
 8016484:	4607      	mov	r7, r0
 8016486:	2800      	cmp	r0, #0
 8016488:	d167      	bne.n	801655a <__gethex+0x10e>
 801648a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801648e:	4626      	mov	r6, r4
 8016490:	f7ff ffc6 	bl	8016420 <__hexdig_fun>
 8016494:	2800      	cmp	r0, #0
 8016496:	d062      	beq.n	801655e <__gethex+0x112>
 8016498:	4623      	mov	r3, r4
 801649a:	7818      	ldrb	r0, [r3, #0]
 801649c:	2830      	cmp	r0, #48	@ 0x30
 801649e:	4699      	mov	r9, r3
 80164a0:	f103 0301 	add.w	r3, r3, #1
 80164a4:	d0f9      	beq.n	801649a <__gethex+0x4e>
 80164a6:	f7ff ffbb 	bl	8016420 <__hexdig_fun>
 80164aa:	fab0 f580 	clz	r5, r0
 80164ae:	096d      	lsrs	r5, r5, #5
 80164b0:	f04f 0b01 	mov.w	fp, #1
 80164b4:	464a      	mov	r2, r9
 80164b6:	4616      	mov	r6, r2
 80164b8:	3201      	adds	r2, #1
 80164ba:	7830      	ldrb	r0, [r6, #0]
 80164bc:	f7ff ffb0 	bl	8016420 <__hexdig_fun>
 80164c0:	2800      	cmp	r0, #0
 80164c2:	d1f8      	bne.n	80164b6 <__gethex+0x6a>
 80164c4:	498d      	ldr	r1, [pc, #564]	@ (80166fc <__gethex+0x2b0>)
 80164c6:	2201      	movs	r2, #1
 80164c8:	4630      	mov	r0, r6
 80164ca:	f7ff fe4d 	bl	8016168 <strncmp>
 80164ce:	2800      	cmp	r0, #0
 80164d0:	d13f      	bne.n	8016552 <__gethex+0x106>
 80164d2:	b944      	cbnz	r4, 80164e6 <__gethex+0x9a>
 80164d4:	1c74      	adds	r4, r6, #1
 80164d6:	4622      	mov	r2, r4
 80164d8:	4616      	mov	r6, r2
 80164da:	3201      	adds	r2, #1
 80164dc:	7830      	ldrb	r0, [r6, #0]
 80164de:	f7ff ff9f 	bl	8016420 <__hexdig_fun>
 80164e2:	2800      	cmp	r0, #0
 80164e4:	d1f8      	bne.n	80164d8 <__gethex+0x8c>
 80164e6:	1ba4      	subs	r4, r4, r6
 80164e8:	00a7      	lsls	r7, r4, #2
 80164ea:	7833      	ldrb	r3, [r6, #0]
 80164ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80164f0:	2b50      	cmp	r3, #80	@ 0x50
 80164f2:	d13e      	bne.n	8016572 <__gethex+0x126>
 80164f4:	7873      	ldrb	r3, [r6, #1]
 80164f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80164f8:	d033      	beq.n	8016562 <__gethex+0x116>
 80164fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80164fc:	d034      	beq.n	8016568 <__gethex+0x11c>
 80164fe:	1c71      	adds	r1, r6, #1
 8016500:	2400      	movs	r4, #0
 8016502:	7808      	ldrb	r0, [r1, #0]
 8016504:	f7ff ff8c 	bl	8016420 <__hexdig_fun>
 8016508:	1e43      	subs	r3, r0, #1
 801650a:	b2db      	uxtb	r3, r3
 801650c:	2b18      	cmp	r3, #24
 801650e:	d830      	bhi.n	8016572 <__gethex+0x126>
 8016510:	f1a0 0210 	sub.w	r2, r0, #16
 8016514:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016518:	f7ff ff82 	bl	8016420 <__hexdig_fun>
 801651c:	f100 3cff 	add.w	ip, r0, #4294967295
 8016520:	fa5f fc8c 	uxtb.w	ip, ip
 8016524:	f1bc 0f18 	cmp.w	ip, #24
 8016528:	f04f 030a 	mov.w	r3, #10
 801652c:	d91e      	bls.n	801656c <__gethex+0x120>
 801652e:	b104      	cbz	r4, 8016532 <__gethex+0xe6>
 8016530:	4252      	negs	r2, r2
 8016532:	4417      	add	r7, r2
 8016534:	f8ca 1000 	str.w	r1, [sl]
 8016538:	b1ed      	cbz	r5, 8016576 <__gethex+0x12a>
 801653a:	f1bb 0f00 	cmp.w	fp, #0
 801653e:	bf0c      	ite	eq
 8016540:	2506      	moveq	r5, #6
 8016542:	2500      	movne	r5, #0
 8016544:	4628      	mov	r0, r5
 8016546:	b005      	add	sp, #20
 8016548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801654c:	2500      	movs	r5, #0
 801654e:	462c      	mov	r4, r5
 8016550:	e7b0      	b.n	80164b4 <__gethex+0x68>
 8016552:	2c00      	cmp	r4, #0
 8016554:	d1c7      	bne.n	80164e6 <__gethex+0x9a>
 8016556:	4627      	mov	r7, r4
 8016558:	e7c7      	b.n	80164ea <__gethex+0x9e>
 801655a:	464e      	mov	r6, r9
 801655c:	462f      	mov	r7, r5
 801655e:	2501      	movs	r5, #1
 8016560:	e7c3      	b.n	80164ea <__gethex+0x9e>
 8016562:	2400      	movs	r4, #0
 8016564:	1cb1      	adds	r1, r6, #2
 8016566:	e7cc      	b.n	8016502 <__gethex+0xb6>
 8016568:	2401      	movs	r4, #1
 801656a:	e7fb      	b.n	8016564 <__gethex+0x118>
 801656c:	fb03 0002 	mla	r0, r3, r2, r0
 8016570:	e7ce      	b.n	8016510 <__gethex+0xc4>
 8016572:	4631      	mov	r1, r6
 8016574:	e7de      	b.n	8016534 <__gethex+0xe8>
 8016576:	eba6 0309 	sub.w	r3, r6, r9
 801657a:	3b01      	subs	r3, #1
 801657c:	4629      	mov	r1, r5
 801657e:	2b07      	cmp	r3, #7
 8016580:	dc0a      	bgt.n	8016598 <__gethex+0x14c>
 8016582:	9801      	ldr	r0, [sp, #4]
 8016584:	f000 fa46 	bl	8016a14 <_Balloc>
 8016588:	4604      	mov	r4, r0
 801658a:	b940      	cbnz	r0, 801659e <__gethex+0x152>
 801658c:	4b5c      	ldr	r3, [pc, #368]	@ (8016700 <__gethex+0x2b4>)
 801658e:	4602      	mov	r2, r0
 8016590:	21e4      	movs	r1, #228	@ 0xe4
 8016592:	485c      	ldr	r0, [pc, #368]	@ (8016704 <__gethex+0x2b8>)
 8016594:	f001 fffe 	bl	8018594 <__assert_func>
 8016598:	3101      	adds	r1, #1
 801659a:	105b      	asrs	r3, r3, #1
 801659c:	e7ef      	b.n	801657e <__gethex+0x132>
 801659e:	f100 0a14 	add.w	sl, r0, #20
 80165a2:	2300      	movs	r3, #0
 80165a4:	4655      	mov	r5, sl
 80165a6:	469b      	mov	fp, r3
 80165a8:	45b1      	cmp	r9, r6
 80165aa:	d337      	bcc.n	801661c <__gethex+0x1d0>
 80165ac:	f845 bb04 	str.w	fp, [r5], #4
 80165b0:	eba5 050a 	sub.w	r5, r5, sl
 80165b4:	10ad      	asrs	r5, r5, #2
 80165b6:	6125      	str	r5, [r4, #16]
 80165b8:	4658      	mov	r0, fp
 80165ba:	f000 fb1d 	bl	8016bf8 <__hi0bits>
 80165be:	016d      	lsls	r5, r5, #5
 80165c0:	f8d8 6000 	ldr.w	r6, [r8]
 80165c4:	1a2d      	subs	r5, r5, r0
 80165c6:	42b5      	cmp	r5, r6
 80165c8:	dd54      	ble.n	8016674 <__gethex+0x228>
 80165ca:	1bad      	subs	r5, r5, r6
 80165cc:	4629      	mov	r1, r5
 80165ce:	4620      	mov	r0, r4
 80165d0:	f000 fea9 	bl	8017326 <__any_on>
 80165d4:	4681      	mov	r9, r0
 80165d6:	b178      	cbz	r0, 80165f8 <__gethex+0x1ac>
 80165d8:	1e6b      	subs	r3, r5, #1
 80165da:	1159      	asrs	r1, r3, #5
 80165dc:	f003 021f 	and.w	r2, r3, #31
 80165e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80165e4:	f04f 0901 	mov.w	r9, #1
 80165e8:	fa09 f202 	lsl.w	r2, r9, r2
 80165ec:	420a      	tst	r2, r1
 80165ee:	d003      	beq.n	80165f8 <__gethex+0x1ac>
 80165f0:	454b      	cmp	r3, r9
 80165f2:	dc36      	bgt.n	8016662 <__gethex+0x216>
 80165f4:	f04f 0902 	mov.w	r9, #2
 80165f8:	4629      	mov	r1, r5
 80165fa:	4620      	mov	r0, r4
 80165fc:	f7ff febe 	bl	801637c <rshift>
 8016600:	442f      	add	r7, r5
 8016602:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016606:	42bb      	cmp	r3, r7
 8016608:	da42      	bge.n	8016690 <__gethex+0x244>
 801660a:	9801      	ldr	r0, [sp, #4]
 801660c:	4621      	mov	r1, r4
 801660e:	f000 fa41 	bl	8016a94 <_Bfree>
 8016612:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016614:	2300      	movs	r3, #0
 8016616:	6013      	str	r3, [r2, #0]
 8016618:	25a3      	movs	r5, #163	@ 0xa3
 801661a:	e793      	b.n	8016544 <__gethex+0xf8>
 801661c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016620:	2a2e      	cmp	r2, #46	@ 0x2e
 8016622:	d012      	beq.n	801664a <__gethex+0x1fe>
 8016624:	2b20      	cmp	r3, #32
 8016626:	d104      	bne.n	8016632 <__gethex+0x1e6>
 8016628:	f845 bb04 	str.w	fp, [r5], #4
 801662c:	f04f 0b00 	mov.w	fp, #0
 8016630:	465b      	mov	r3, fp
 8016632:	7830      	ldrb	r0, [r6, #0]
 8016634:	9303      	str	r3, [sp, #12]
 8016636:	f7ff fef3 	bl	8016420 <__hexdig_fun>
 801663a:	9b03      	ldr	r3, [sp, #12]
 801663c:	f000 000f 	and.w	r0, r0, #15
 8016640:	4098      	lsls	r0, r3
 8016642:	ea4b 0b00 	orr.w	fp, fp, r0
 8016646:	3304      	adds	r3, #4
 8016648:	e7ae      	b.n	80165a8 <__gethex+0x15c>
 801664a:	45b1      	cmp	r9, r6
 801664c:	d8ea      	bhi.n	8016624 <__gethex+0x1d8>
 801664e:	492b      	ldr	r1, [pc, #172]	@ (80166fc <__gethex+0x2b0>)
 8016650:	9303      	str	r3, [sp, #12]
 8016652:	2201      	movs	r2, #1
 8016654:	4630      	mov	r0, r6
 8016656:	f7ff fd87 	bl	8016168 <strncmp>
 801665a:	9b03      	ldr	r3, [sp, #12]
 801665c:	2800      	cmp	r0, #0
 801665e:	d1e1      	bne.n	8016624 <__gethex+0x1d8>
 8016660:	e7a2      	b.n	80165a8 <__gethex+0x15c>
 8016662:	1ea9      	subs	r1, r5, #2
 8016664:	4620      	mov	r0, r4
 8016666:	f000 fe5e 	bl	8017326 <__any_on>
 801666a:	2800      	cmp	r0, #0
 801666c:	d0c2      	beq.n	80165f4 <__gethex+0x1a8>
 801666e:	f04f 0903 	mov.w	r9, #3
 8016672:	e7c1      	b.n	80165f8 <__gethex+0x1ac>
 8016674:	da09      	bge.n	801668a <__gethex+0x23e>
 8016676:	1b75      	subs	r5, r6, r5
 8016678:	4621      	mov	r1, r4
 801667a:	9801      	ldr	r0, [sp, #4]
 801667c:	462a      	mov	r2, r5
 801667e:	f000 fc19 	bl	8016eb4 <__lshift>
 8016682:	1b7f      	subs	r7, r7, r5
 8016684:	4604      	mov	r4, r0
 8016686:	f100 0a14 	add.w	sl, r0, #20
 801668a:	f04f 0900 	mov.w	r9, #0
 801668e:	e7b8      	b.n	8016602 <__gethex+0x1b6>
 8016690:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016694:	42bd      	cmp	r5, r7
 8016696:	dd6f      	ble.n	8016778 <__gethex+0x32c>
 8016698:	1bed      	subs	r5, r5, r7
 801669a:	42ae      	cmp	r6, r5
 801669c:	dc34      	bgt.n	8016708 <__gethex+0x2bc>
 801669e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80166a2:	2b02      	cmp	r3, #2
 80166a4:	d022      	beq.n	80166ec <__gethex+0x2a0>
 80166a6:	2b03      	cmp	r3, #3
 80166a8:	d024      	beq.n	80166f4 <__gethex+0x2a8>
 80166aa:	2b01      	cmp	r3, #1
 80166ac:	d115      	bne.n	80166da <__gethex+0x28e>
 80166ae:	42ae      	cmp	r6, r5
 80166b0:	d113      	bne.n	80166da <__gethex+0x28e>
 80166b2:	2e01      	cmp	r6, #1
 80166b4:	d10b      	bne.n	80166ce <__gethex+0x282>
 80166b6:	9a02      	ldr	r2, [sp, #8]
 80166b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80166bc:	6013      	str	r3, [r2, #0]
 80166be:	2301      	movs	r3, #1
 80166c0:	6123      	str	r3, [r4, #16]
 80166c2:	f8ca 3000 	str.w	r3, [sl]
 80166c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80166c8:	2562      	movs	r5, #98	@ 0x62
 80166ca:	601c      	str	r4, [r3, #0]
 80166cc:	e73a      	b.n	8016544 <__gethex+0xf8>
 80166ce:	1e71      	subs	r1, r6, #1
 80166d0:	4620      	mov	r0, r4
 80166d2:	f000 fe28 	bl	8017326 <__any_on>
 80166d6:	2800      	cmp	r0, #0
 80166d8:	d1ed      	bne.n	80166b6 <__gethex+0x26a>
 80166da:	9801      	ldr	r0, [sp, #4]
 80166dc:	4621      	mov	r1, r4
 80166de:	f000 f9d9 	bl	8016a94 <_Bfree>
 80166e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80166e4:	2300      	movs	r3, #0
 80166e6:	6013      	str	r3, [r2, #0]
 80166e8:	2550      	movs	r5, #80	@ 0x50
 80166ea:	e72b      	b.n	8016544 <__gethex+0xf8>
 80166ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d1f3      	bne.n	80166da <__gethex+0x28e>
 80166f2:	e7e0      	b.n	80166b6 <__gethex+0x26a>
 80166f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d1dd      	bne.n	80166b6 <__gethex+0x26a>
 80166fa:	e7ee      	b.n	80166da <__gethex+0x28e>
 80166fc:	0801a798 	.word	0x0801a798
 8016700:	0801a7ae 	.word	0x0801a7ae
 8016704:	0801a7bf 	.word	0x0801a7bf
 8016708:	1e6f      	subs	r7, r5, #1
 801670a:	f1b9 0f00 	cmp.w	r9, #0
 801670e:	d130      	bne.n	8016772 <__gethex+0x326>
 8016710:	b127      	cbz	r7, 801671c <__gethex+0x2d0>
 8016712:	4639      	mov	r1, r7
 8016714:	4620      	mov	r0, r4
 8016716:	f000 fe06 	bl	8017326 <__any_on>
 801671a:	4681      	mov	r9, r0
 801671c:	117a      	asrs	r2, r7, #5
 801671e:	2301      	movs	r3, #1
 8016720:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016724:	f007 071f 	and.w	r7, r7, #31
 8016728:	40bb      	lsls	r3, r7
 801672a:	4213      	tst	r3, r2
 801672c:	4629      	mov	r1, r5
 801672e:	4620      	mov	r0, r4
 8016730:	bf18      	it	ne
 8016732:	f049 0902 	orrne.w	r9, r9, #2
 8016736:	f7ff fe21 	bl	801637c <rshift>
 801673a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801673e:	1b76      	subs	r6, r6, r5
 8016740:	2502      	movs	r5, #2
 8016742:	f1b9 0f00 	cmp.w	r9, #0
 8016746:	d047      	beq.n	80167d8 <__gethex+0x38c>
 8016748:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801674c:	2b02      	cmp	r3, #2
 801674e:	d015      	beq.n	801677c <__gethex+0x330>
 8016750:	2b03      	cmp	r3, #3
 8016752:	d017      	beq.n	8016784 <__gethex+0x338>
 8016754:	2b01      	cmp	r3, #1
 8016756:	d109      	bne.n	801676c <__gethex+0x320>
 8016758:	f019 0f02 	tst.w	r9, #2
 801675c:	d006      	beq.n	801676c <__gethex+0x320>
 801675e:	f8da 3000 	ldr.w	r3, [sl]
 8016762:	ea49 0903 	orr.w	r9, r9, r3
 8016766:	f019 0f01 	tst.w	r9, #1
 801676a:	d10e      	bne.n	801678a <__gethex+0x33e>
 801676c:	f045 0510 	orr.w	r5, r5, #16
 8016770:	e032      	b.n	80167d8 <__gethex+0x38c>
 8016772:	f04f 0901 	mov.w	r9, #1
 8016776:	e7d1      	b.n	801671c <__gethex+0x2d0>
 8016778:	2501      	movs	r5, #1
 801677a:	e7e2      	b.n	8016742 <__gethex+0x2f6>
 801677c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801677e:	f1c3 0301 	rsb	r3, r3, #1
 8016782:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016786:	2b00      	cmp	r3, #0
 8016788:	d0f0      	beq.n	801676c <__gethex+0x320>
 801678a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801678e:	f104 0314 	add.w	r3, r4, #20
 8016792:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016796:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801679a:	f04f 0c00 	mov.w	ip, #0
 801679e:	4618      	mov	r0, r3
 80167a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80167a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80167a8:	d01b      	beq.n	80167e2 <__gethex+0x396>
 80167aa:	3201      	adds	r2, #1
 80167ac:	6002      	str	r2, [r0, #0]
 80167ae:	2d02      	cmp	r5, #2
 80167b0:	f104 0314 	add.w	r3, r4, #20
 80167b4:	d13c      	bne.n	8016830 <__gethex+0x3e4>
 80167b6:	f8d8 2000 	ldr.w	r2, [r8]
 80167ba:	3a01      	subs	r2, #1
 80167bc:	42b2      	cmp	r2, r6
 80167be:	d109      	bne.n	80167d4 <__gethex+0x388>
 80167c0:	1171      	asrs	r1, r6, #5
 80167c2:	2201      	movs	r2, #1
 80167c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80167c8:	f006 061f 	and.w	r6, r6, #31
 80167cc:	fa02 f606 	lsl.w	r6, r2, r6
 80167d0:	421e      	tst	r6, r3
 80167d2:	d13a      	bne.n	801684a <__gethex+0x3fe>
 80167d4:	f045 0520 	orr.w	r5, r5, #32
 80167d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80167da:	601c      	str	r4, [r3, #0]
 80167dc:	9b02      	ldr	r3, [sp, #8]
 80167de:	601f      	str	r7, [r3, #0]
 80167e0:	e6b0      	b.n	8016544 <__gethex+0xf8>
 80167e2:	4299      	cmp	r1, r3
 80167e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80167e8:	d8d9      	bhi.n	801679e <__gethex+0x352>
 80167ea:	68a3      	ldr	r3, [r4, #8]
 80167ec:	459b      	cmp	fp, r3
 80167ee:	db17      	blt.n	8016820 <__gethex+0x3d4>
 80167f0:	6861      	ldr	r1, [r4, #4]
 80167f2:	9801      	ldr	r0, [sp, #4]
 80167f4:	3101      	adds	r1, #1
 80167f6:	f000 f90d 	bl	8016a14 <_Balloc>
 80167fa:	4681      	mov	r9, r0
 80167fc:	b918      	cbnz	r0, 8016806 <__gethex+0x3ba>
 80167fe:	4b1a      	ldr	r3, [pc, #104]	@ (8016868 <__gethex+0x41c>)
 8016800:	4602      	mov	r2, r0
 8016802:	2184      	movs	r1, #132	@ 0x84
 8016804:	e6c5      	b.n	8016592 <__gethex+0x146>
 8016806:	6922      	ldr	r2, [r4, #16]
 8016808:	3202      	adds	r2, #2
 801680a:	f104 010c 	add.w	r1, r4, #12
 801680e:	0092      	lsls	r2, r2, #2
 8016810:	300c      	adds	r0, #12
 8016812:	f7ff fd52 	bl	80162ba <memcpy>
 8016816:	4621      	mov	r1, r4
 8016818:	9801      	ldr	r0, [sp, #4]
 801681a:	f000 f93b 	bl	8016a94 <_Bfree>
 801681e:	464c      	mov	r4, r9
 8016820:	6923      	ldr	r3, [r4, #16]
 8016822:	1c5a      	adds	r2, r3, #1
 8016824:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016828:	6122      	str	r2, [r4, #16]
 801682a:	2201      	movs	r2, #1
 801682c:	615a      	str	r2, [r3, #20]
 801682e:	e7be      	b.n	80167ae <__gethex+0x362>
 8016830:	6922      	ldr	r2, [r4, #16]
 8016832:	455a      	cmp	r2, fp
 8016834:	dd0b      	ble.n	801684e <__gethex+0x402>
 8016836:	2101      	movs	r1, #1
 8016838:	4620      	mov	r0, r4
 801683a:	f7ff fd9f 	bl	801637c <rshift>
 801683e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016842:	3701      	adds	r7, #1
 8016844:	42bb      	cmp	r3, r7
 8016846:	f6ff aee0 	blt.w	801660a <__gethex+0x1be>
 801684a:	2501      	movs	r5, #1
 801684c:	e7c2      	b.n	80167d4 <__gethex+0x388>
 801684e:	f016 061f 	ands.w	r6, r6, #31
 8016852:	d0fa      	beq.n	801684a <__gethex+0x3fe>
 8016854:	4453      	add	r3, sl
 8016856:	f1c6 0620 	rsb	r6, r6, #32
 801685a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801685e:	f000 f9cb 	bl	8016bf8 <__hi0bits>
 8016862:	42b0      	cmp	r0, r6
 8016864:	dbe7      	blt.n	8016836 <__gethex+0x3ea>
 8016866:	e7f0      	b.n	801684a <__gethex+0x3fe>
 8016868:	0801a7ae 	.word	0x0801a7ae

0801686c <L_shift>:
 801686c:	f1c2 0208 	rsb	r2, r2, #8
 8016870:	0092      	lsls	r2, r2, #2
 8016872:	b570      	push	{r4, r5, r6, lr}
 8016874:	f1c2 0620 	rsb	r6, r2, #32
 8016878:	6843      	ldr	r3, [r0, #4]
 801687a:	6804      	ldr	r4, [r0, #0]
 801687c:	fa03 f506 	lsl.w	r5, r3, r6
 8016880:	432c      	orrs	r4, r5
 8016882:	40d3      	lsrs	r3, r2
 8016884:	6004      	str	r4, [r0, #0]
 8016886:	f840 3f04 	str.w	r3, [r0, #4]!
 801688a:	4288      	cmp	r0, r1
 801688c:	d3f4      	bcc.n	8016878 <L_shift+0xc>
 801688e:	bd70      	pop	{r4, r5, r6, pc}

08016890 <__match>:
 8016890:	b530      	push	{r4, r5, lr}
 8016892:	6803      	ldr	r3, [r0, #0]
 8016894:	3301      	adds	r3, #1
 8016896:	f811 4b01 	ldrb.w	r4, [r1], #1
 801689a:	b914      	cbnz	r4, 80168a2 <__match+0x12>
 801689c:	6003      	str	r3, [r0, #0]
 801689e:	2001      	movs	r0, #1
 80168a0:	bd30      	pop	{r4, r5, pc}
 80168a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80168a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80168aa:	2d19      	cmp	r5, #25
 80168ac:	bf98      	it	ls
 80168ae:	3220      	addls	r2, #32
 80168b0:	42a2      	cmp	r2, r4
 80168b2:	d0f0      	beq.n	8016896 <__match+0x6>
 80168b4:	2000      	movs	r0, #0
 80168b6:	e7f3      	b.n	80168a0 <__match+0x10>

080168b8 <__hexnan>:
 80168b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168bc:	680b      	ldr	r3, [r1, #0]
 80168be:	6801      	ldr	r1, [r0, #0]
 80168c0:	115e      	asrs	r6, r3, #5
 80168c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80168c6:	f013 031f 	ands.w	r3, r3, #31
 80168ca:	b087      	sub	sp, #28
 80168cc:	bf18      	it	ne
 80168ce:	3604      	addne	r6, #4
 80168d0:	2500      	movs	r5, #0
 80168d2:	1f37      	subs	r7, r6, #4
 80168d4:	4682      	mov	sl, r0
 80168d6:	4690      	mov	r8, r2
 80168d8:	9301      	str	r3, [sp, #4]
 80168da:	f846 5c04 	str.w	r5, [r6, #-4]
 80168de:	46b9      	mov	r9, r7
 80168e0:	463c      	mov	r4, r7
 80168e2:	9502      	str	r5, [sp, #8]
 80168e4:	46ab      	mov	fp, r5
 80168e6:	784a      	ldrb	r2, [r1, #1]
 80168e8:	1c4b      	adds	r3, r1, #1
 80168ea:	9303      	str	r3, [sp, #12]
 80168ec:	b342      	cbz	r2, 8016940 <__hexnan+0x88>
 80168ee:	4610      	mov	r0, r2
 80168f0:	9105      	str	r1, [sp, #20]
 80168f2:	9204      	str	r2, [sp, #16]
 80168f4:	f7ff fd94 	bl	8016420 <__hexdig_fun>
 80168f8:	2800      	cmp	r0, #0
 80168fa:	d151      	bne.n	80169a0 <__hexnan+0xe8>
 80168fc:	9a04      	ldr	r2, [sp, #16]
 80168fe:	9905      	ldr	r1, [sp, #20]
 8016900:	2a20      	cmp	r2, #32
 8016902:	d818      	bhi.n	8016936 <__hexnan+0x7e>
 8016904:	9b02      	ldr	r3, [sp, #8]
 8016906:	459b      	cmp	fp, r3
 8016908:	dd13      	ble.n	8016932 <__hexnan+0x7a>
 801690a:	454c      	cmp	r4, r9
 801690c:	d206      	bcs.n	801691c <__hexnan+0x64>
 801690e:	2d07      	cmp	r5, #7
 8016910:	dc04      	bgt.n	801691c <__hexnan+0x64>
 8016912:	462a      	mov	r2, r5
 8016914:	4649      	mov	r1, r9
 8016916:	4620      	mov	r0, r4
 8016918:	f7ff ffa8 	bl	801686c <L_shift>
 801691c:	4544      	cmp	r4, r8
 801691e:	d952      	bls.n	80169c6 <__hexnan+0x10e>
 8016920:	2300      	movs	r3, #0
 8016922:	f1a4 0904 	sub.w	r9, r4, #4
 8016926:	f844 3c04 	str.w	r3, [r4, #-4]
 801692a:	f8cd b008 	str.w	fp, [sp, #8]
 801692e:	464c      	mov	r4, r9
 8016930:	461d      	mov	r5, r3
 8016932:	9903      	ldr	r1, [sp, #12]
 8016934:	e7d7      	b.n	80168e6 <__hexnan+0x2e>
 8016936:	2a29      	cmp	r2, #41	@ 0x29
 8016938:	d157      	bne.n	80169ea <__hexnan+0x132>
 801693a:	3102      	adds	r1, #2
 801693c:	f8ca 1000 	str.w	r1, [sl]
 8016940:	f1bb 0f00 	cmp.w	fp, #0
 8016944:	d051      	beq.n	80169ea <__hexnan+0x132>
 8016946:	454c      	cmp	r4, r9
 8016948:	d206      	bcs.n	8016958 <__hexnan+0xa0>
 801694a:	2d07      	cmp	r5, #7
 801694c:	dc04      	bgt.n	8016958 <__hexnan+0xa0>
 801694e:	462a      	mov	r2, r5
 8016950:	4649      	mov	r1, r9
 8016952:	4620      	mov	r0, r4
 8016954:	f7ff ff8a 	bl	801686c <L_shift>
 8016958:	4544      	cmp	r4, r8
 801695a:	d936      	bls.n	80169ca <__hexnan+0x112>
 801695c:	f1a8 0204 	sub.w	r2, r8, #4
 8016960:	4623      	mov	r3, r4
 8016962:	f853 1b04 	ldr.w	r1, [r3], #4
 8016966:	f842 1f04 	str.w	r1, [r2, #4]!
 801696a:	429f      	cmp	r7, r3
 801696c:	d2f9      	bcs.n	8016962 <__hexnan+0xaa>
 801696e:	1b3b      	subs	r3, r7, r4
 8016970:	f023 0303 	bic.w	r3, r3, #3
 8016974:	3304      	adds	r3, #4
 8016976:	3401      	adds	r4, #1
 8016978:	3e03      	subs	r6, #3
 801697a:	42b4      	cmp	r4, r6
 801697c:	bf88      	it	hi
 801697e:	2304      	movhi	r3, #4
 8016980:	4443      	add	r3, r8
 8016982:	2200      	movs	r2, #0
 8016984:	f843 2b04 	str.w	r2, [r3], #4
 8016988:	429f      	cmp	r7, r3
 801698a:	d2fb      	bcs.n	8016984 <__hexnan+0xcc>
 801698c:	683b      	ldr	r3, [r7, #0]
 801698e:	b91b      	cbnz	r3, 8016998 <__hexnan+0xe0>
 8016990:	4547      	cmp	r7, r8
 8016992:	d128      	bne.n	80169e6 <__hexnan+0x12e>
 8016994:	2301      	movs	r3, #1
 8016996:	603b      	str	r3, [r7, #0]
 8016998:	2005      	movs	r0, #5
 801699a:	b007      	add	sp, #28
 801699c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169a0:	3501      	adds	r5, #1
 80169a2:	2d08      	cmp	r5, #8
 80169a4:	f10b 0b01 	add.w	fp, fp, #1
 80169a8:	dd06      	ble.n	80169b8 <__hexnan+0x100>
 80169aa:	4544      	cmp	r4, r8
 80169ac:	d9c1      	bls.n	8016932 <__hexnan+0x7a>
 80169ae:	2300      	movs	r3, #0
 80169b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80169b4:	2501      	movs	r5, #1
 80169b6:	3c04      	subs	r4, #4
 80169b8:	6822      	ldr	r2, [r4, #0]
 80169ba:	f000 000f 	and.w	r0, r0, #15
 80169be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80169c2:	6020      	str	r0, [r4, #0]
 80169c4:	e7b5      	b.n	8016932 <__hexnan+0x7a>
 80169c6:	2508      	movs	r5, #8
 80169c8:	e7b3      	b.n	8016932 <__hexnan+0x7a>
 80169ca:	9b01      	ldr	r3, [sp, #4]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d0dd      	beq.n	801698c <__hexnan+0xd4>
 80169d0:	f1c3 0320 	rsb	r3, r3, #32
 80169d4:	f04f 32ff 	mov.w	r2, #4294967295
 80169d8:	40da      	lsrs	r2, r3
 80169da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80169de:	4013      	ands	r3, r2
 80169e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80169e4:	e7d2      	b.n	801698c <__hexnan+0xd4>
 80169e6:	3f04      	subs	r7, #4
 80169e8:	e7d0      	b.n	801698c <__hexnan+0xd4>
 80169ea:	2004      	movs	r0, #4
 80169ec:	e7d5      	b.n	801699a <__hexnan+0xe2>

080169ee <__ascii_mbtowc>:
 80169ee:	b082      	sub	sp, #8
 80169f0:	b901      	cbnz	r1, 80169f4 <__ascii_mbtowc+0x6>
 80169f2:	a901      	add	r1, sp, #4
 80169f4:	b142      	cbz	r2, 8016a08 <__ascii_mbtowc+0x1a>
 80169f6:	b14b      	cbz	r3, 8016a0c <__ascii_mbtowc+0x1e>
 80169f8:	7813      	ldrb	r3, [r2, #0]
 80169fa:	600b      	str	r3, [r1, #0]
 80169fc:	7812      	ldrb	r2, [r2, #0]
 80169fe:	1e10      	subs	r0, r2, #0
 8016a00:	bf18      	it	ne
 8016a02:	2001      	movne	r0, #1
 8016a04:	b002      	add	sp, #8
 8016a06:	4770      	bx	lr
 8016a08:	4610      	mov	r0, r2
 8016a0a:	e7fb      	b.n	8016a04 <__ascii_mbtowc+0x16>
 8016a0c:	f06f 0001 	mvn.w	r0, #1
 8016a10:	e7f8      	b.n	8016a04 <__ascii_mbtowc+0x16>
	...

08016a14 <_Balloc>:
 8016a14:	b570      	push	{r4, r5, r6, lr}
 8016a16:	69c6      	ldr	r6, [r0, #28]
 8016a18:	4604      	mov	r4, r0
 8016a1a:	460d      	mov	r5, r1
 8016a1c:	b976      	cbnz	r6, 8016a3c <_Balloc+0x28>
 8016a1e:	2010      	movs	r0, #16
 8016a20:	f7fe fa08 	bl	8014e34 <malloc>
 8016a24:	4602      	mov	r2, r0
 8016a26:	61e0      	str	r0, [r4, #28]
 8016a28:	b920      	cbnz	r0, 8016a34 <_Balloc+0x20>
 8016a2a:	4b18      	ldr	r3, [pc, #96]	@ (8016a8c <_Balloc+0x78>)
 8016a2c:	4818      	ldr	r0, [pc, #96]	@ (8016a90 <_Balloc+0x7c>)
 8016a2e:	216b      	movs	r1, #107	@ 0x6b
 8016a30:	f001 fdb0 	bl	8018594 <__assert_func>
 8016a34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016a38:	6006      	str	r6, [r0, #0]
 8016a3a:	60c6      	str	r6, [r0, #12]
 8016a3c:	69e6      	ldr	r6, [r4, #28]
 8016a3e:	68f3      	ldr	r3, [r6, #12]
 8016a40:	b183      	cbz	r3, 8016a64 <_Balloc+0x50>
 8016a42:	69e3      	ldr	r3, [r4, #28]
 8016a44:	68db      	ldr	r3, [r3, #12]
 8016a46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016a4a:	b9b8      	cbnz	r0, 8016a7c <_Balloc+0x68>
 8016a4c:	2101      	movs	r1, #1
 8016a4e:	fa01 f605 	lsl.w	r6, r1, r5
 8016a52:	1d72      	adds	r2, r6, #5
 8016a54:	0092      	lsls	r2, r2, #2
 8016a56:	4620      	mov	r0, r4
 8016a58:	f001 fdba 	bl	80185d0 <_calloc_r>
 8016a5c:	b160      	cbz	r0, 8016a78 <_Balloc+0x64>
 8016a5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016a62:	e00e      	b.n	8016a82 <_Balloc+0x6e>
 8016a64:	2221      	movs	r2, #33	@ 0x21
 8016a66:	2104      	movs	r1, #4
 8016a68:	4620      	mov	r0, r4
 8016a6a:	f001 fdb1 	bl	80185d0 <_calloc_r>
 8016a6e:	69e3      	ldr	r3, [r4, #28]
 8016a70:	60f0      	str	r0, [r6, #12]
 8016a72:	68db      	ldr	r3, [r3, #12]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d1e4      	bne.n	8016a42 <_Balloc+0x2e>
 8016a78:	2000      	movs	r0, #0
 8016a7a:	bd70      	pop	{r4, r5, r6, pc}
 8016a7c:	6802      	ldr	r2, [r0, #0]
 8016a7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016a82:	2300      	movs	r3, #0
 8016a84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016a88:	e7f7      	b.n	8016a7a <_Balloc+0x66>
 8016a8a:	bf00      	nop
 8016a8c:	0801a81f 	.word	0x0801a81f
 8016a90:	0801a836 	.word	0x0801a836

08016a94 <_Bfree>:
 8016a94:	b570      	push	{r4, r5, r6, lr}
 8016a96:	69c6      	ldr	r6, [r0, #28]
 8016a98:	4605      	mov	r5, r0
 8016a9a:	460c      	mov	r4, r1
 8016a9c:	b976      	cbnz	r6, 8016abc <_Bfree+0x28>
 8016a9e:	2010      	movs	r0, #16
 8016aa0:	f7fe f9c8 	bl	8014e34 <malloc>
 8016aa4:	4602      	mov	r2, r0
 8016aa6:	61e8      	str	r0, [r5, #28]
 8016aa8:	b920      	cbnz	r0, 8016ab4 <_Bfree+0x20>
 8016aaa:	4b09      	ldr	r3, [pc, #36]	@ (8016ad0 <_Bfree+0x3c>)
 8016aac:	4809      	ldr	r0, [pc, #36]	@ (8016ad4 <_Bfree+0x40>)
 8016aae:	218f      	movs	r1, #143	@ 0x8f
 8016ab0:	f001 fd70 	bl	8018594 <__assert_func>
 8016ab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016ab8:	6006      	str	r6, [r0, #0]
 8016aba:	60c6      	str	r6, [r0, #12]
 8016abc:	b13c      	cbz	r4, 8016ace <_Bfree+0x3a>
 8016abe:	69eb      	ldr	r3, [r5, #28]
 8016ac0:	6862      	ldr	r2, [r4, #4]
 8016ac2:	68db      	ldr	r3, [r3, #12]
 8016ac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016ac8:	6021      	str	r1, [r4, #0]
 8016aca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016ace:	bd70      	pop	{r4, r5, r6, pc}
 8016ad0:	0801a81f 	.word	0x0801a81f
 8016ad4:	0801a836 	.word	0x0801a836

08016ad8 <__multadd>:
 8016ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016adc:	690d      	ldr	r5, [r1, #16]
 8016ade:	4607      	mov	r7, r0
 8016ae0:	460c      	mov	r4, r1
 8016ae2:	461e      	mov	r6, r3
 8016ae4:	f101 0c14 	add.w	ip, r1, #20
 8016ae8:	2000      	movs	r0, #0
 8016aea:	f8dc 3000 	ldr.w	r3, [ip]
 8016aee:	b299      	uxth	r1, r3
 8016af0:	fb02 6101 	mla	r1, r2, r1, r6
 8016af4:	0c1e      	lsrs	r6, r3, #16
 8016af6:	0c0b      	lsrs	r3, r1, #16
 8016af8:	fb02 3306 	mla	r3, r2, r6, r3
 8016afc:	b289      	uxth	r1, r1
 8016afe:	3001      	adds	r0, #1
 8016b00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016b04:	4285      	cmp	r5, r0
 8016b06:	f84c 1b04 	str.w	r1, [ip], #4
 8016b0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016b0e:	dcec      	bgt.n	8016aea <__multadd+0x12>
 8016b10:	b30e      	cbz	r6, 8016b56 <__multadd+0x7e>
 8016b12:	68a3      	ldr	r3, [r4, #8]
 8016b14:	42ab      	cmp	r3, r5
 8016b16:	dc19      	bgt.n	8016b4c <__multadd+0x74>
 8016b18:	6861      	ldr	r1, [r4, #4]
 8016b1a:	4638      	mov	r0, r7
 8016b1c:	3101      	adds	r1, #1
 8016b1e:	f7ff ff79 	bl	8016a14 <_Balloc>
 8016b22:	4680      	mov	r8, r0
 8016b24:	b928      	cbnz	r0, 8016b32 <__multadd+0x5a>
 8016b26:	4602      	mov	r2, r0
 8016b28:	4b0c      	ldr	r3, [pc, #48]	@ (8016b5c <__multadd+0x84>)
 8016b2a:	480d      	ldr	r0, [pc, #52]	@ (8016b60 <__multadd+0x88>)
 8016b2c:	21ba      	movs	r1, #186	@ 0xba
 8016b2e:	f001 fd31 	bl	8018594 <__assert_func>
 8016b32:	6922      	ldr	r2, [r4, #16]
 8016b34:	3202      	adds	r2, #2
 8016b36:	f104 010c 	add.w	r1, r4, #12
 8016b3a:	0092      	lsls	r2, r2, #2
 8016b3c:	300c      	adds	r0, #12
 8016b3e:	f7ff fbbc 	bl	80162ba <memcpy>
 8016b42:	4621      	mov	r1, r4
 8016b44:	4638      	mov	r0, r7
 8016b46:	f7ff ffa5 	bl	8016a94 <_Bfree>
 8016b4a:	4644      	mov	r4, r8
 8016b4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016b50:	3501      	adds	r5, #1
 8016b52:	615e      	str	r6, [r3, #20]
 8016b54:	6125      	str	r5, [r4, #16]
 8016b56:	4620      	mov	r0, r4
 8016b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b5c:	0801a7ae 	.word	0x0801a7ae
 8016b60:	0801a836 	.word	0x0801a836

08016b64 <__s2b>:
 8016b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b68:	460c      	mov	r4, r1
 8016b6a:	4615      	mov	r5, r2
 8016b6c:	461f      	mov	r7, r3
 8016b6e:	2209      	movs	r2, #9
 8016b70:	3308      	adds	r3, #8
 8016b72:	4606      	mov	r6, r0
 8016b74:	fb93 f3f2 	sdiv	r3, r3, r2
 8016b78:	2100      	movs	r1, #0
 8016b7a:	2201      	movs	r2, #1
 8016b7c:	429a      	cmp	r2, r3
 8016b7e:	db09      	blt.n	8016b94 <__s2b+0x30>
 8016b80:	4630      	mov	r0, r6
 8016b82:	f7ff ff47 	bl	8016a14 <_Balloc>
 8016b86:	b940      	cbnz	r0, 8016b9a <__s2b+0x36>
 8016b88:	4602      	mov	r2, r0
 8016b8a:	4b19      	ldr	r3, [pc, #100]	@ (8016bf0 <__s2b+0x8c>)
 8016b8c:	4819      	ldr	r0, [pc, #100]	@ (8016bf4 <__s2b+0x90>)
 8016b8e:	21d3      	movs	r1, #211	@ 0xd3
 8016b90:	f001 fd00 	bl	8018594 <__assert_func>
 8016b94:	0052      	lsls	r2, r2, #1
 8016b96:	3101      	adds	r1, #1
 8016b98:	e7f0      	b.n	8016b7c <__s2b+0x18>
 8016b9a:	9b08      	ldr	r3, [sp, #32]
 8016b9c:	6143      	str	r3, [r0, #20]
 8016b9e:	2d09      	cmp	r5, #9
 8016ba0:	f04f 0301 	mov.w	r3, #1
 8016ba4:	6103      	str	r3, [r0, #16]
 8016ba6:	dd16      	ble.n	8016bd6 <__s2b+0x72>
 8016ba8:	f104 0909 	add.w	r9, r4, #9
 8016bac:	46c8      	mov	r8, r9
 8016bae:	442c      	add	r4, r5
 8016bb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016bb4:	4601      	mov	r1, r0
 8016bb6:	3b30      	subs	r3, #48	@ 0x30
 8016bb8:	220a      	movs	r2, #10
 8016bba:	4630      	mov	r0, r6
 8016bbc:	f7ff ff8c 	bl	8016ad8 <__multadd>
 8016bc0:	45a0      	cmp	r8, r4
 8016bc2:	d1f5      	bne.n	8016bb0 <__s2b+0x4c>
 8016bc4:	f1a5 0408 	sub.w	r4, r5, #8
 8016bc8:	444c      	add	r4, r9
 8016bca:	1b2d      	subs	r5, r5, r4
 8016bcc:	1963      	adds	r3, r4, r5
 8016bce:	42bb      	cmp	r3, r7
 8016bd0:	db04      	blt.n	8016bdc <__s2b+0x78>
 8016bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bd6:	340a      	adds	r4, #10
 8016bd8:	2509      	movs	r5, #9
 8016bda:	e7f6      	b.n	8016bca <__s2b+0x66>
 8016bdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016be0:	4601      	mov	r1, r0
 8016be2:	3b30      	subs	r3, #48	@ 0x30
 8016be4:	220a      	movs	r2, #10
 8016be6:	4630      	mov	r0, r6
 8016be8:	f7ff ff76 	bl	8016ad8 <__multadd>
 8016bec:	e7ee      	b.n	8016bcc <__s2b+0x68>
 8016bee:	bf00      	nop
 8016bf0:	0801a7ae 	.word	0x0801a7ae
 8016bf4:	0801a836 	.word	0x0801a836

08016bf8 <__hi0bits>:
 8016bf8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016bfc:	4603      	mov	r3, r0
 8016bfe:	bf36      	itet	cc
 8016c00:	0403      	lslcc	r3, r0, #16
 8016c02:	2000      	movcs	r0, #0
 8016c04:	2010      	movcc	r0, #16
 8016c06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016c0a:	bf3c      	itt	cc
 8016c0c:	021b      	lslcc	r3, r3, #8
 8016c0e:	3008      	addcc	r0, #8
 8016c10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016c14:	bf3c      	itt	cc
 8016c16:	011b      	lslcc	r3, r3, #4
 8016c18:	3004      	addcc	r0, #4
 8016c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016c1e:	bf3c      	itt	cc
 8016c20:	009b      	lslcc	r3, r3, #2
 8016c22:	3002      	addcc	r0, #2
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	db05      	blt.n	8016c34 <__hi0bits+0x3c>
 8016c28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016c2c:	f100 0001 	add.w	r0, r0, #1
 8016c30:	bf08      	it	eq
 8016c32:	2020      	moveq	r0, #32
 8016c34:	4770      	bx	lr

08016c36 <__lo0bits>:
 8016c36:	6803      	ldr	r3, [r0, #0]
 8016c38:	4602      	mov	r2, r0
 8016c3a:	f013 0007 	ands.w	r0, r3, #7
 8016c3e:	d00b      	beq.n	8016c58 <__lo0bits+0x22>
 8016c40:	07d9      	lsls	r1, r3, #31
 8016c42:	d421      	bmi.n	8016c88 <__lo0bits+0x52>
 8016c44:	0798      	lsls	r0, r3, #30
 8016c46:	bf49      	itett	mi
 8016c48:	085b      	lsrmi	r3, r3, #1
 8016c4a:	089b      	lsrpl	r3, r3, #2
 8016c4c:	2001      	movmi	r0, #1
 8016c4e:	6013      	strmi	r3, [r2, #0]
 8016c50:	bf5c      	itt	pl
 8016c52:	6013      	strpl	r3, [r2, #0]
 8016c54:	2002      	movpl	r0, #2
 8016c56:	4770      	bx	lr
 8016c58:	b299      	uxth	r1, r3
 8016c5a:	b909      	cbnz	r1, 8016c60 <__lo0bits+0x2a>
 8016c5c:	0c1b      	lsrs	r3, r3, #16
 8016c5e:	2010      	movs	r0, #16
 8016c60:	b2d9      	uxtb	r1, r3
 8016c62:	b909      	cbnz	r1, 8016c68 <__lo0bits+0x32>
 8016c64:	3008      	adds	r0, #8
 8016c66:	0a1b      	lsrs	r3, r3, #8
 8016c68:	0719      	lsls	r1, r3, #28
 8016c6a:	bf04      	itt	eq
 8016c6c:	091b      	lsreq	r3, r3, #4
 8016c6e:	3004      	addeq	r0, #4
 8016c70:	0799      	lsls	r1, r3, #30
 8016c72:	bf04      	itt	eq
 8016c74:	089b      	lsreq	r3, r3, #2
 8016c76:	3002      	addeq	r0, #2
 8016c78:	07d9      	lsls	r1, r3, #31
 8016c7a:	d403      	bmi.n	8016c84 <__lo0bits+0x4e>
 8016c7c:	085b      	lsrs	r3, r3, #1
 8016c7e:	f100 0001 	add.w	r0, r0, #1
 8016c82:	d003      	beq.n	8016c8c <__lo0bits+0x56>
 8016c84:	6013      	str	r3, [r2, #0]
 8016c86:	4770      	bx	lr
 8016c88:	2000      	movs	r0, #0
 8016c8a:	4770      	bx	lr
 8016c8c:	2020      	movs	r0, #32
 8016c8e:	4770      	bx	lr

08016c90 <__i2b>:
 8016c90:	b510      	push	{r4, lr}
 8016c92:	460c      	mov	r4, r1
 8016c94:	2101      	movs	r1, #1
 8016c96:	f7ff febd 	bl	8016a14 <_Balloc>
 8016c9a:	4602      	mov	r2, r0
 8016c9c:	b928      	cbnz	r0, 8016caa <__i2b+0x1a>
 8016c9e:	4b05      	ldr	r3, [pc, #20]	@ (8016cb4 <__i2b+0x24>)
 8016ca0:	4805      	ldr	r0, [pc, #20]	@ (8016cb8 <__i2b+0x28>)
 8016ca2:	f240 1145 	movw	r1, #325	@ 0x145
 8016ca6:	f001 fc75 	bl	8018594 <__assert_func>
 8016caa:	2301      	movs	r3, #1
 8016cac:	6144      	str	r4, [r0, #20]
 8016cae:	6103      	str	r3, [r0, #16]
 8016cb0:	bd10      	pop	{r4, pc}
 8016cb2:	bf00      	nop
 8016cb4:	0801a7ae 	.word	0x0801a7ae
 8016cb8:	0801a836 	.word	0x0801a836

08016cbc <__multiply>:
 8016cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cc0:	4617      	mov	r7, r2
 8016cc2:	690a      	ldr	r2, [r1, #16]
 8016cc4:	693b      	ldr	r3, [r7, #16]
 8016cc6:	429a      	cmp	r2, r3
 8016cc8:	bfa8      	it	ge
 8016cca:	463b      	movge	r3, r7
 8016ccc:	4689      	mov	r9, r1
 8016cce:	bfa4      	itt	ge
 8016cd0:	460f      	movge	r7, r1
 8016cd2:	4699      	movge	r9, r3
 8016cd4:	693d      	ldr	r5, [r7, #16]
 8016cd6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016cda:	68bb      	ldr	r3, [r7, #8]
 8016cdc:	6879      	ldr	r1, [r7, #4]
 8016cde:	eb05 060a 	add.w	r6, r5, sl
 8016ce2:	42b3      	cmp	r3, r6
 8016ce4:	b085      	sub	sp, #20
 8016ce6:	bfb8      	it	lt
 8016ce8:	3101      	addlt	r1, #1
 8016cea:	f7ff fe93 	bl	8016a14 <_Balloc>
 8016cee:	b930      	cbnz	r0, 8016cfe <__multiply+0x42>
 8016cf0:	4602      	mov	r2, r0
 8016cf2:	4b41      	ldr	r3, [pc, #260]	@ (8016df8 <__multiply+0x13c>)
 8016cf4:	4841      	ldr	r0, [pc, #260]	@ (8016dfc <__multiply+0x140>)
 8016cf6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016cfa:	f001 fc4b 	bl	8018594 <__assert_func>
 8016cfe:	f100 0414 	add.w	r4, r0, #20
 8016d02:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8016d06:	4623      	mov	r3, r4
 8016d08:	2200      	movs	r2, #0
 8016d0a:	4573      	cmp	r3, lr
 8016d0c:	d320      	bcc.n	8016d50 <__multiply+0x94>
 8016d0e:	f107 0814 	add.w	r8, r7, #20
 8016d12:	f109 0114 	add.w	r1, r9, #20
 8016d16:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8016d1a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8016d1e:	9302      	str	r3, [sp, #8]
 8016d20:	1beb      	subs	r3, r5, r7
 8016d22:	3b15      	subs	r3, #21
 8016d24:	f023 0303 	bic.w	r3, r3, #3
 8016d28:	3304      	adds	r3, #4
 8016d2a:	3715      	adds	r7, #21
 8016d2c:	42bd      	cmp	r5, r7
 8016d2e:	bf38      	it	cc
 8016d30:	2304      	movcc	r3, #4
 8016d32:	9301      	str	r3, [sp, #4]
 8016d34:	9b02      	ldr	r3, [sp, #8]
 8016d36:	9103      	str	r1, [sp, #12]
 8016d38:	428b      	cmp	r3, r1
 8016d3a:	d80c      	bhi.n	8016d56 <__multiply+0x9a>
 8016d3c:	2e00      	cmp	r6, #0
 8016d3e:	dd03      	ble.n	8016d48 <__multiply+0x8c>
 8016d40:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d055      	beq.n	8016df4 <__multiply+0x138>
 8016d48:	6106      	str	r6, [r0, #16]
 8016d4a:	b005      	add	sp, #20
 8016d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d50:	f843 2b04 	str.w	r2, [r3], #4
 8016d54:	e7d9      	b.n	8016d0a <__multiply+0x4e>
 8016d56:	f8b1 a000 	ldrh.w	sl, [r1]
 8016d5a:	f1ba 0f00 	cmp.w	sl, #0
 8016d5e:	d01f      	beq.n	8016da0 <__multiply+0xe4>
 8016d60:	46c4      	mov	ip, r8
 8016d62:	46a1      	mov	r9, r4
 8016d64:	2700      	movs	r7, #0
 8016d66:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016d6a:	f8d9 3000 	ldr.w	r3, [r9]
 8016d6e:	fa1f fb82 	uxth.w	fp, r2
 8016d72:	b29b      	uxth	r3, r3
 8016d74:	fb0a 330b 	mla	r3, sl, fp, r3
 8016d78:	443b      	add	r3, r7
 8016d7a:	f8d9 7000 	ldr.w	r7, [r9]
 8016d7e:	0c12      	lsrs	r2, r2, #16
 8016d80:	0c3f      	lsrs	r7, r7, #16
 8016d82:	fb0a 7202 	mla	r2, sl, r2, r7
 8016d86:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8016d8a:	b29b      	uxth	r3, r3
 8016d8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016d90:	4565      	cmp	r5, ip
 8016d92:	f849 3b04 	str.w	r3, [r9], #4
 8016d96:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8016d9a:	d8e4      	bhi.n	8016d66 <__multiply+0xaa>
 8016d9c:	9b01      	ldr	r3, [sp, #4]
 8016d9e:	50e7      	str	r7, [r4, r3]
 8016da0:	9b03      	ldr	r3, [sp, #12]
 8016da2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016da6:	3104      	adds	r1, #4
 8016da8:	f1b9 0f00 	cmp.w	r9, #0
 8016dac:	d020      	beq.n	8016df0 <__multiply+0x134>
 8016dae:	6823      	ldr	r3, [r4, #0]
 8016db0:	4647      	mov	r7, r8
 8016db2:	46a4      	mov	ip, r4
 8016db4:	f04f 0a00 	mov.w	sl, #0
 8016db8:	f8b7 b000 	ldrh.w	fp, [r7]
 8016dbc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016dc0:	fb09 220b 	mla	r2, r9, fp, r2
 8016dc4:	4452      	add	r2, sl
 8016dc6:	b29b      	uxth	r3, r3
 8016dc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016dcc:	f84c 3b04 	str.w	r3, [ip], #4
 8016dd0:	f857 3b04 	ldr.w	r3, [r7], #4
 8016dd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016dd8:	f8bc 3000 	ldrh.w	r3, [ip]
 8016ddc:	fb09 330a 	mla	r3, r9, sl, r3
 8016de0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8016de4:	42bd      	cmp	r5, r7
 8016de6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016dea:	d8e5      	bhi.n	8016db8 <__multiply+0xfc>
 8016dec:	9a01      	ldr	r2, [sp, #4]
 8016dee:	50a3      	str	r3, [r4, r2]
 8016df0:	3404      	adds	r4, #4
 8016df2:	e79f      	b.n	8016d34 <__multiply+0x78>
 8016df4:	3e01      	subs	r6, #1
 8016df6:	e7a1      	b.n	8016d3c <__multiply+0x80>
 8016df8:	0801a7ae 	.word	0x0801a7ae
 8016dfc:	0801a836 	.word	0x0801a836

08016e00 <__pow5mult>:
 8016e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e04:	4615      	mov	r5, r2
 8016e06:	f012 0203 	ands.w	r2, r2, #3
 8016e0a:	4607      	mov	r7, r0
 8016e0c:	460e      	mov	r6, r1
 8016e0e:	d007      	beq.n	8016e20 <__pow5mult+0x20>
 8016e10:	4c25      	ldr	r4, [pc, #148]	@ (8016ea8 <__pow5mult+0xa8>)
 8016e12:	3a01      	subs	r2, #1
 8016e14:	2300      	movs	r3, #0
 8016e16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016e1a:	f7ff fe5d 	bl	8016ad8 <__multadd>
 8016e1e:	4606      	mov	r6, r0
 8016e20:	10ad      	asrs	r5, r5, #2
 8016e22:	d03d      	beq.n	8016ea0 <__pow5mult+0xa0>
 8016e24:	69fc      	ldr	r4, [r7, #28]
 8016e26:	b97c      	cbnz	r4, 8016e48 <__pow5mult+0x48>
 8016e28:	2010      	movs	r0, #16
 8016e2a:	f7fe f803 	bl	8014e34 <malloc>
 8016e2e:	4602      	mov	r2, r0
 8016e30:	61f8      	str	r0, [r7, #28]
 8016e32:	b928      	cbnz	r0, 8016e40 <__pow5mult+0x40>
 8016e34:	4b1d      	ldr	r3, [pc, #116]	@ (8016eac <__pow5mult+0xac>)
 8016e36:	481e      	ldr	r0, [pc, #120]	@ (8016eb0 <__pow5mult+0xb0>)
 8016e38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016e3c:	f001 fbaa 	bl	8018594 <__assert_func>
 8016e40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016e44:	6004      	str	r4, [r0, #0]
 8016e46:	60c4      	str	r4, [r0, #12]
 8016e48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016e4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016e50:	b94c      	cbnz	r4, 8016e66 <__pow5mult+0x66>
 8016e52:	f240 2171 	movw	r1, #625	@ 0x271
 8016e56:	4638      	mov	r0, r7
 8016e58:	f7ff ff1a 	bl	8016c90 <__i2b>
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016e62:	4604      	mov	r4, r0
 8016e64:	6003      	str	r3, [r0, #0]
 8016e66:	f04f 0900 	mov.w	r9, #0
 8016e6a:	07eb      	lsls	r3, r5, #31
 8016e6c:	d50a      	bpl.n	8016e84 <__pow5mult+0x84>
 8016e6e:	4631      	mov	r1, r6
 8016e70:	4622      	mov	r2, r4
 8016e72:	4638      	mov	r0, r7
 8016e74:	f7ff ff22 	bl	8016cbc <__multiply>
 8016e78:	4631      	mov	r1, r6
 8016e7a:	4680      	mov	r8, r0
 8016e7c:	4638      	mov	r0, r7
 8016e7e:	f7ff fe09 	bl	8016a94 <_Bfree>
 8016e82:	4646      	mov	r6, r8
 8016e84:	106d      	asrs	r5, r5, #1
 8016e86:	d00b      	beq.n	8016ea0 <__pow5mult+0xa0>
 8016e88:	6820      	ldr	r0, [r4, #0]
 8016e8a:	b938      	cbnz	r0, 8016e9c <__pow5mult+0x9c>
 8016e8c:	4622      	mov	r2, r4
 8016e8e:	4621      	mov	r1, r4
 8016e90:	4638      	mov	r0, r7
 8016e92:	f7ff ff13 	bl	8016cbc <__multiply>
 8016e96:	6020      	str	r0, [r4, #0]
 8016e98:	f8c0 9000 	str.w	r9, [r0]
 8016e9c:	4604      	mov	r4, r0
 8016e9e:	e7e4      	b.n	8016e6a <__pow5mult+0x6a>
 8016ea0:	4630      	mov	r0, r6
 8016ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ea6:	bf00      	nop
 8016ea8:	0801aa74 	.word	0x0801aa74
 8016eac:	0801a81f 	.word	0x0801a81f
 8016eb0:	0801a836 	.word	0x0801a836

08016eb4 <__lshift>:
 8016eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016eb8:	460c      	mov	r4, r1
 8016eba:	6849      	ldr	r1, [r1, #4]
 8016ebc:	6923      	ldr	r3, [r4, #16]
 8016ebe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016ec2:	68a3      	ldr	r3, [r4, #8]
 8016ec4:	4607      	mov	r7, r0
 8016ec6:	4691      	mov	r9, r2
 8016ec8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016ecc:	f108 0601 	add.w	r6, r8, #1
 8016ed0:	42b3      	cmp	r3, r6
 8016ed2:	db0b      	blt.n	8016eec <__lshift+0x38>
 8016ed4:	4638      	mov	r0, r7
 8016ed6:	f7ff fd9d 	bl	8016a14 <_Balloc>
 8016eda:	4605      	mov	r5, r0
 8016edc:	b948      	cbnz	r0, 8016ef2 <__lshift+0x3e>
 8016ede:	4602      	mov	r2, r0
 8016ee0:	4b28      	ldr	r3, [pc, #160]	@ (8016f84 <__lshift+0xd0>)
 8016ee2:	4829      	ldr	r0, [pc, #164]	@ (8016f88 <__lshift+0xd4>)
 8016ee4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016ee8:	f001 fb54 	bl	8018594 <__assert_func>
 8016eec:	3101      	adds	r1, #1
 8016eee:	005b      	lsls	r3, r3, #1
 8016ef0:	e7ee      	b.n	8016ed0 <__lshift+0x1c>
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	f100 0114 	add.w	r1, r0, #20
 8016ef8:	f100 0210 	add.w	r2, r0, #16
 8016efc:	4618      	mov	r0, r3
 8016efe:	4553      	cmp	r3, sl
 8016f00:	db33      	blt.n	8016f6a <__lshift+0xb6>
 8016f02:	6920      	ldr	r0, [r4, #16]
 8016f04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016f08:	f104 0314 	add.w	r3, r4, #20
 8016f0c:	f019 091f 	ands.w	r9, r9, #31
 8016f10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016f14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016f18:	d02b      	beq.n	8016f72 <__lshift+0xbe>
 8016f1a:	f1c9 0e20 	rsb	lr, r9, #32
 8016f1e:	468a      	mov	sl, r1
 8016f20:	2200      	movs	r2, #0
 8016f22:	6818      	ldr	r0, [r3, #0]
 8016f24:	fa00 f009 	lsl.w	r0, r0, r9
 8016f28:	4310      	orrs	r0, r2
 8016f2a:	f84a 0b04 	str.w	r0, [sl], #4
 8016f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f32:	459c      	cmp	ip, r3
 8016f34:	fa22 f20e 	lsr.w	r2, r2, lr
 8016f38:	d8f3      	bhi.n	8016f22 <__lshift+0x6e>
 8016f3a:	ebac 0304 	sub.w	r3, ip, r4
 8016f3e:	3b15      	subs	r3, #21
 8016f40:	f023 0303 	bic.w	r3, r3, #3
 8016f44:	3304      	adds	r3, #4
 8016f46:	f104 0015 	add.w	r0, r4, #21
 8016f4a:	4560      	cmp	r0, ip
 8016f4c:	bf88      	it	hi
 8016f4e:	2304      	movhi	r3, #4
 8016f50:	50ca      	str	r2, [r1, r3]
 8016f52:	b10a      	cbz	r2, 8016f58 <__lshift+0xa4>
 8016f54:	f108 0602 	add.w	r6, r8, #2
 8016f58:	3e01      	subs	r6, #1
 8016f5a:	4638      	mov	r0, r7
 8016f5c:	612e      	str	r6, [r5, #16]
 8016f5e:	4621      	mov	r1, r4
 8016f60:	f7ff fd98 	bl	8016a94 <_Bfree>
 8016f64:	4628      	mov	r0, r5
 8016f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8016f6e:	3301      	adds	r3, #1
 8016f70:	e7c5      	b.n	8016efe <__lshift+0x4a>
 8016f72:	3904      	subs	r1, #4
 8016f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f78:	f841 2f04 	str.w	r2, [r1, #4]!
 8016f7c:	459c      	cmp	ip, r3
 8016f7e:	d8f9      	bhi.n	8016f74 <__lshift+0xc0>
 8016f80:	e7ea      	b.n	8016f58 <__lshift+0xa4>
 8016f82:	bf00      	nop
 8016f84:	0801a7ae 	.word	0x0801a7ae
 8016f88:	0801a836 	.word	0x0801a836

08016f8c <__mcmp>:
 8016f8c:	690a      	ldr	r2, [r1, #16]
 8016f8e:	4603      	mov	r3, r0
 8016f90:	6900      	ldr	r0, [r0, #16]
 8016f92:	1a80      	subs	r0, r0, r2
 8016f94:	b530      	push	{r4, r5, lr}
 8016f96:	d10e      	bne.n	8016fb6 <__mcmp+0x2a>
 8016f98:	3314      	adds	r3, #20
 8016f9a:	3114      	adds	r1, #20
 8016f9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016fa0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016fa4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016fa8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016fac:	4295      	cmp	r5, r2
 8016fae:	d003      	beq.n	8016fb8 <__mcmp+0x2c>
 8016fb0:	d205      	bcs.n	8016fbe <__mcmp+0x32>
 8016fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8016fb6:	bd30      	pop	{r4, r5, pc}
 8016fb8:	42a3      	cmp	r3, r4
 8016fba:	d3f3      	bcc.n	8016fa4 <__mcmp+0x18>
 8016fbc:	e7fb      	b.n	8016fb6 <__mcmp+0x2a>
 8016fbe:	2001      	movs	r0, #1
 8016fc0:	e7f9      	b.n	8016fb6 <__mcmp+0x2a>
	...

08016fc4 <__mdiff>:
 8016fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fc8:	4689      	mov	r9, r1
 8016fca:	4606      	mov	r6, r0
 8016fcc:	4611      	mov	r1, r2
 8016fce:	4648      	mov	r0, r9
 8016fd0:	4614      	mov	r4, r2
 8016fd2:	f7ff ffdb 	bl	8016f8c <__mcmp>
 8016fd6:	1e05      	subs	r5, r0, #0
 8016fd8:	d112      	bne.n	8017000 <__mdiff+0x3c>
 8016fda:	4629      	mov	r1, r5
 8016fdc:	4630      	mov	r0, r6
 8016fde:	f7ff fd19 	bl	8016a14 <_Balloc>
 8016fe2:	4602      	mov	r2, r0
 8016fe4:	b928      	cbnz	r0, 8016ff2 <__mdiff+0x2e>
 8016fe6:	4b3f      	ldr	r3, [pc, #252]	@ (80170e4 <__mdiff+0x120>)
 8016fe8:	f240 2137 	movw	r1, #567	@ 0x237
 8016fec:	483e      	ldr	r0, [pc, #248]	@ (80170e8 <__mdiff+0x124>)
 8016fee:	f001 fad1 	bl	8018594 <__assert_func>
 8016ff2:	2301      	movs	r3, #1
 8016ff4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016ff8:	4610      	mov	r0, r2
 8016ffa:	b003      	add	sp, #12
 8016ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017000:	bfbc      	itt	lt
 8017002:	464b      	movlt	r3, r9
 8017004:	46a1      	movlt	r9, r4
 8017006:	4630      	mov	r0, r6
 8017008:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801700c:	bfba      	itte	lt
 801700e:	461c      	movlt	r4, r3
 8017010:	2501      	movlt	r5, #1
 8017012:	2500      	movge	r5, #0
 8017014:	f7ff fcfe 	bl	8016a14 <_Balloc>
 8017018:	4602      	mov	r2, r0
 801701a:	b918      	cbnz	r0, 8017024 <__mdiff+0x60>
 801701c:	4b31      	ldr	r3, [pc, #196]	@ (80170e4 <__mdiff+0x120>)
 801701e:	f240 2145 	movw	r1, #581	@ 0x245
 8017022:	e7e3      	b.n	8016fec <__mdiff+0x28>
 8017024:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017028:	6926      	ldr	r6, [r4, #16]
 801702a:	60c5      	str	r5, [r0, #12]
 801702c:	f109 0310 	add.w	r3, r9, #16
 8017030:	f109 0514 	add.w	r5, r9, #20
 8017034:	f104 0e14 	add.w	lr, r4, #20
 8017038:	f100 0b14 	add.w	fp, r0, #20
 801703c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017040:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017044:	9301      	str	r3, [sp, #4]
 8017046:	46d9      	mov	r9, fp
 8017048:	f04f 0c00 	mov.w	ip, #0
 801704c:	9b01      	ldr	r3, [sp, #4]
 801704e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017052:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017056:	9301      	str	r3, [sp, #4]
 8017058:	fa1f f38a 	uxth.w	r3, sl
 801705c:	4619      	mov	r1, r3
 801705e:	b283      	uxth	r3, r0
 8017060:	1acb      	subs	r3, r1, r3
 8017062:	0c00      	lsrs	r0, r0, #16
 8017064:	4463      	add	r3, ip
 8017066:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801706a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801706e:	b29b      	uxth	r3, r3
 8017070:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017074:	4576      	cmp	r6, lr
 8017076:	f849 3b04 	str.w	r3, [r9], #4
 801707a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801707e:	d8e5      	bhi.n	801704c <__mdiff+0x88>
 8017080:	1b33      	subs	r3, r6, r4
 8017082:	3b15      	subs	r3, #21
 8017084:	f023 0303 	bic.w	r3, r3, #3
 8017088:	3415      	adds	r4, #21
 801708a:	3304      	adds	r3, #4
 801708c:	42a6      	cmp	r6, r4
 801708e:	bf38      	it	cc
 8017090:	2304      	movcc	r3, #4
 8017092:	441d      	add	r5, r3
 8017094:	445b      	add	r3, fp
 8017096:	461e      	mov	r6, r3
 8017098:	462c      	mov	r4, r5
 801709a:	4544      	cmp	r4, r8
 801709c:	d30e      	bcc.n	80170bc <__mdiff+0xf8>
 801709e:	f108 0103 	add.w	r1, r8, #3
 80170a2:	1b49      	subs	r1, r1, r5
 80170a4:	f021 0103 	bic.w	r1, r1, #3
 80170a8:	3d03      	subs	r5, #3
 80170aa:	45a8      	cmp	r8, r5
 80170ac:	bf38      	it	cc
 80170ae:	2100      	movcc	r1, #0
 80170b0:	440b      	add	r3, r1
 80170b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80170b6:	b191      	cbz	r1, 80170de <__mdiff+0x11a>
 80170b8:	6117      	str	r7, [r2, #16]
 80170ba:	e79d      	b.n	8016ff8 <__mdiff+0x34>
 80170bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80170c0:	46e6      	mov	lr, ip
 80170c2:	0c08      	lsrs	r0, r1, #16
 80170c4:	fa1c fc81 	uxtah	ip, ip, r1
 80170c8:	4471      	add	r1, lr
 80170ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80170ce:	b289      	uxth	r1, r1
 80170d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80170d4:	f846 1b04 	str.w	r1, [r6], #4
 80170d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80170dc:	e7dd      	b.n	801709a <__mdiff+0xd6>
 80170de:	3f01      	subs	r7, #1
 80170e0:	e7e7      	b.n	80170b2 <__mdiff+0xee>
 80170e2:	bf00      	nop
 80170e4:	0801a7ae 	.word	0x0801a7ae
 80170e8:	0801a836 	.word	0x0801a836

080170ec <__ulp>:
 80170ec:	b082      	sub	sp, #8
 80170ee:	ed8d 0b00 	vstr	d0, [sp]
 80170f2:	9a01      	ldr	r2, [sp, #4]
 80170f4:	4b0f      	ldr	r3, [pc, #60]	@ (8017134 <__ulp+0x48>)
 80170f6:	4013      	ands	r3, r2
 80170f8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	dc08      	bgt.n	8017112 <__ulp+0x26>
 8017100:	425b      	negs	r3, r3
 8017102:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8017106:	ea4f 5223 	mov.w	r2, r3, asr #20
 801710a:	da04      	bge.n	8017116 <__ulp+0x2a>
 801710c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8017110:	4113      	asrs	r3, r2
 8017112:	2200      	movs	r2, #0
 8017114:	e008      	b.n	8017128 <__ulp+0x3c>
 8017116:	f1a2 0314 	sub.w	r3, r2, #20
 801711a:	2b1e      	cmp	r3, #30
 801711c:	bfda      	itte	le
 801711e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8017122:	40da      	lsrle	r2, r3
 8017124:	2201      	movgt	r2, #1
 8017126:	2300      	movs	r3, #0
 8017128:	4619      	mov	r1, r3
 801712a:	4610      	mov	r0, r2
 801712c:	ec41 0b10 	vmov	d0, r0, r1
 8017130:	b002      	add	sp, #8
 8017132:	4770      	bx	lr
 8017134:	7ff00000 	.word	0x7ff00000

08017138 <__b2d>:
 8017138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801713c:	6906      	ldr	r6, [r0, #16]
 801713e:	f100 0814 	add.w	r8, r0, #20
 8017142:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8017146:	1f37      	subs	r7, r6, #4
 8017148:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801714c:	4610      	mov	r0, r2
 801714e:	f7ff fd53 	bl	8016bf8 <__hi0bits>
 8017152:	f1c0 0320 	rsb	r3, r0, #32
 8017156:	280a      	cmp	r0, #10
 8017158:	600b      	str	r3, [r1, #0]
 801715a:	491b      	ldr	r1, [pc, #108]	@ (80171c8 <__b2d+0x90>)
 801715c:	dc15      	bgt.n	801718a <__b2d+0x52>
 801715e:	f1c0 0c0b 	rsb	ip, r0, #11
 8017162:	fa22 f30c 	lsr.w	r3, r2, ip
 8017166:	45b8      	cmp	r8, r7
 8017168:	ea43 0501 	orr.w	r5, r3, r1
 801716c:	bf34      	ite	cc
 801716e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017172:	2300      	movcs	r3, #0
 8017174:	3015      	adds	r0, #21
 8017176:	fa02 f000 	lsl.w	r0, r2, r0
 801717a:	fa23 f30c 	lsr.w	r3, r3, ip
 801717e:	4303      	orrs	r3, r0
 8017180:	461c      	mov	r4, r3
 8017182:	ec45 4b10 	vmov	d0, r4, r5
 8017186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801718a:	45b8      	cmp	r8, r7
 801718c:	bf3a      	itte	cc
 801718e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017192:	f1a6 0708 	subcc.w	r7, r6, #8
 8017196:	2300      	movcs	r3, #0
 8017198:	380b      	subs	r0, #11
 801719a:	d012      	beq.n	80171c2 <__b2d+0x8a>
 801719c:	f1c0 0120 	rsb	r1, r0, #32
 80171a0:	fa23 f401 	lsr.w	r4, r3, r1
 80171a4:	4082      	lsls	r2, r0
 80171a6:	4322      	orrs	r2, r4
 80171a8:	4547      	cmp	r7, r8
 80171aa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80171ae:	bf8c      	ite	hi
 80171b0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80171b4:	2200      	movls	r2, #0
 80171b6:	4083      	lsls	r3, r0
 80171b8:	40ca      	lsrs	r2, r1
 80171ba:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80171be:	4313      	orrs	r3, r2
 80171c0:	e7de      	b.n	8017180 <__b2d+0x48>
 80171c2:	ea42 0501 	orr.w	r5, r2, r1
 80171c6:	e7db      	b.n	8017180 <__b2d+0x48>
 80171c8:	3ff00000 	.word	0x3ff00000

080171cc <__d2b>:
 80171cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80171d0:	460f      	mov	r7, r1
 80171d2:	2101      	movs	r1, #1
 80171d4:	ec59 8b10 	vmov	r8, r9, d0
 80171d8:	4616      	mov	r6, r2
 80171da:	f7ff fc1b 	bl	8016a14 <_Balloc>
 80171de:	4604      	mov	r4, r0
 80171e0:	b930      	cbnz	r0, 80171f0 <__d2b+0x24>
 80171e2:	4602      	mov	r2, r0
 80171e4:	4b23      	ldr	r3, [pc, #140]	@ (8017274 <__d2b+0xa8>)
 80171e6:	4824      	ldr	r0, [pc, #144]	@ (8017278 <__d2b+0xac>)
 80171e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80171ec:	f001 f9d2 	bl	8018594 <__assert_func>
 80171f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80171f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80171f8:	b10d      	cbz	r5, 80171fe <__d2b+0x32>
 80171fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80171fe:	9301      	str	r3, [sp, #4]
 8017200:	f1b8 0300 	subs.w	r3, r8, #0
 8017204:	d023      	beq.n	801724e <__d2b+0x82>
 8017206:	4668      	mov	r0, sp
 8017208:	9300      	str	r3, [sp, #0]
 801720a:	f7ff fd14 	bl	8016c36 <__lo0bits>
 801720e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017212:	b1d0      	cbz	r0, 801724a <__d2b+0x7e>
 8017214:	f1c0 0320 	rsb	r3, r0, #32
 8017218:	fa02 f303 	lsl.w	r3, r2, r3
 801721c:	430b      	orrs	r3, r1
 801721e:	40c2      	lsrs	r2, r0
 8017220:	6163      	str	r3, [r4, #20]
 8017222:	9201      	str	r2, [sp, #4]
 8017224:	9b01      	ldr	r3, [sp, #4]
 8017226:	61a3      	str	r3, [r4, #24]
 8017228:	2b00      	cmp	r3, #0
 801722a:	bf0c      	ite	eq
 801722c:	2201      	moveq	r2, #1
 801722e:	2202      	movne	r2, #2
 8017230:	6122      	str	r2, [r4, #16]
 8017232:	b1a5      	cbz	r5, 801725e <__d2b+0x92>
 8017234:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017238:	4405      	add	r5, r0
 801723a:	603d      	str	r5, [r7, #0]
 801723c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017240:	6030      	str	r0, [r6, #0]
 8017242:	4620      	mov	r0, r4
 8017244:	b003      	add	sp, #12
 8017246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801724a:	6161      	str	r1, [r4, #20]
 801724c:	e7ea      	b.n	8017224 <__d2b+0x58>
 801724e:	a801      	add	r0, sp, #4
 8017250:	f7ff fcf1 	bl	8016c36 <__lo0bits>
 8017254:	9b01      	ldr	r3, [sp, #4]
 8017256:	6163      	str	r3, [r4, #20]
 8017258:	3020      	adds	r0, #32
 801725a:	2201      	movs	r2, #1
 801725c:	e7e8      	b.n	8017230 <__d2b+0x64>
 801725e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017262:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8017266:	6038      	str	r0, [r7, #0]
 8017268:	6918      	ldr	r0, [r3, #16]
 801726a:	f7ff fcc5 	bl	8016bf8 <__hi0bits>
 801726e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017272:	e7e5      	b.n	8017240 <__d2b+0x74>
 8017274:	0801a7ae 	.word	0x0801a7ae
 8017278:	0801a836 	.word	0x0801a836

0801727c <__ratio>:
 801727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017280:	b085      	sub	sp, #20
 8017282:	e9cd 1000 	strd	r1, r0, [sp]
 8017286:	a902      	add	r1, sp, #8
 8017288:	f7ff ff56 	bl	8017138 <__b2d>
 801728c:	9800      	ldr	r0, [sp, #0]
 801728e:	a903      	add	r1, sp, #12
 8017290:	ec55 4b10 	vmov	r4, r5, d0
 8017294:	f7ff ff50 	bl	8017138 <__b2d>
 8017298:	9b01      	ldr	r3, [sp, #4]
 801729a:	6919      	ldr	r1, [r3, #16]
 801729c:	9b00      	ldr	r3, [sp, #0]
 801729e:	691b      	ldr	r3, [r3, #16]
 80172a0:	1ac9      	subs	r1, r1, r3
 80172a2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80172a6:	1a9b      	subs	r3, r3, r2
 80172a8:	ec5b ab10 	vmov	sl, fp, d0
 80172ac:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	bfce      	itee	gt
 80172b4:	462a      	movgt	r2, r5
 80172b6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80172ba:	465a      	movle	r2, fp
 80172bc:	462f      	mov	r7, r5
 80172be:	46d9      	mov	r9, fp
 80172c0:	bfcc      	ite	gt
 80172c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80172c6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80172ca:	464b      	mov	r3, r9
 80172cc:	4652      	mov	r2, sl
 80172ce:	4620      	mov	r0, r4
 80172d0:	4639      	mov	r1, r7
 80172d2:	f7f1 faeb 	bl	80088ac <__aeabi_ddiv>
 80172d6:	ec41 0b10 	vmov	d0, r0, r1
 80172da:	b005      	add	sp, #20
 80172dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080172e0 <__copybits>:
 80172e0:	3901      	subs	r1, #1
 80172e2:	b570      	push	{r4, r5, r6, lr}
 80172e4:	1149      	asrs	r1, r1, #5
 80172e6:	6914      	ldr	r4, [r2, #16]
 80172e8:	3101      	adds	r1, #1
 80172ea:	f102 0314 	add.w	r3, r2, #20
 80172ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80172f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80172f6:	1f05      	subs	r5, r0, #4
 80172f8:	42a3      	cmp	r3, r4
 80172fa:	d30c      	bcc.n	8017316 <__copybits+0x36>
 80172fc:	1aa3      	subs	r3, r4, r2
 80172fe:	3b11      	subs	r3, #17
 8017300:	f023 0303 	bic.w	r3, r3, #3
 8017304:	3211      	adds	r2, #17
 8017306:	42a2      	cmp	r2, r4
 8017308:	bf88      	it	hi
 801730a:	2300      	movhi	r3, #0
 801730c:	4418      	add	r0, r3
 801730e:	2300      	movs	r3, #0
 8017310:	4288      	cmp	r0, r1
 8017312:	d305      	bcc.n	8017320 <__copybits+0x40>
 8017314:	bd70      	pop	{r4, r5, r6, pc}
 8017316:	f853 6b04 	ldr.w	r6, [r3], #4
 801731a:	f845 6f04 	str.w	r6, [r5, #4]!
 801731e:	e7eb      	b.n	80172f8 <__copybits+0x18>
 8017320:	f840 3b04 	str.w	r3, [r0], #4
 8017324:	e7f4      	b.n	8017310 <__copybits+0x30>

08017326 <__any_on>:
 8017326:	f100 0214 	add.w	r2, r0, #20
 801732a:	6900      	ldr	r0, [r0, #16]
 801732c:	114b      	asrs	r3, r1, #5
 801732e:	4298      	cmp	r0, r3
 8017330:	b510      	push	{r4, lr}
 8017332:	db11      	blt.n	8017358 <__any_on+0x32>
 8017334:	dd0a      	ble.n	801734c <__any_on+0x26>
 8017336:	f011 011f 	ands.w	r1, r1, #31
 801733a:	d007      	beq.n	801734c <__any_on+0x26>
 801733c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017340:	fa24 f001 	lsr.w	r0, r4, r1
 8017344:	fa00 f101 	lsl.w	r1, r0, r1
 8017348:	428c      	cmp	r4, r1
 801734a:	d10b      	bne.n	8017364 <__any_on+0x3e>
 801734c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017350:	4293      	cmp	r3, r2
 8017352:	d803      	bhi.n	801735c <__any_on+0x36>
 8017354:	2000      	movs	r0, #0
 8017356:	bd10      	pop	{r4, pc}
 8017358:	4603      	mov	r3, r0
 801735a:	e7f7      	b.n	801734c <__any_on+0x26>
 801735c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017360:	2900      	cmp	r1, #0
 8017362:	d0f5      	beq.n	8017350 <__any_on+0x2a>
 8017364:	2001      	movs	r0, #1
 8017366:	e7f6      	b.n	8017356 <__any_on+0x30>

08017368 <_malloc_usable_size_r>:
 8017368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801736c:	1f18      	subs	r0, r3, #4
 801736e:	2b00      	cmp	r3, #0
 8017370:	bfbc      	itt	lt
 8017372:	580b      	ldrlt	r3, [r1, r0]
 8017374:	18c0      	addlt	r0, r0, r3
 8017376:	4770      	bx	lr

08017378 <__ascii_wctomb>:
 8017378:	4603      	mov	r3, r0
 801737a:	4608      	mov	r0, r1
 801737c:	b141      	cbz	r1, 8017390 <__ascii_wctomb+0x18>
 801737e:	2aff      	cmp	r2, #255	@ 0xff
 8017380:	d904      	bls.n	801738c <__ascii_wctomb+0x14>
 8017382:	228a      	movs	r2, #138	@ 0x8a
 8017384:	601a      	str	r2, [r3, #0]
 8017386:	f04f 30ff 	mov.w	r0, #4294967295
 801738a:	4770      	bx	lr
 801738c:	700a      	strb	r2, [r1, #0]
 801738e:	2001      	movs	r0, #1
 8017390:	4770      	bx	lr

08017392 <__ssputs_r>:
 8017392:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017396:	688e      	ldr	r6, [r1, #8]
 8017398:	461f      	mov	r7, r3
 801739a:	42be      	cmp	r6, r7
 801739c:	680b      	ldr	r3, [r1, #0]
 801739e:	4682      	mov	sl, r0
 80173a0:	460c      	mov	r4, r1
 80173a2:	4690      	mov	r8, r2
 80173a4:	d82d      	bhi.n	8017402 <__ssputs_r+0x70>
 80173a6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80173aa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80173ae:	d026      	beq.n	80173fe <__ssputs_r+0x6c>
 80173b0:	6965      	ldr	r5, [r4, #20]
 80173b2:	6909      	ldr	r1, [r1, #16]
 80173b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80173b8:	eba3 0901 	sub.w	r9, r3, r1
 80173bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80173c0:	1c7b      	adds	r3, r7, #1
 80173c2:	444b      	add	r3, r9
 80173c4:	106d      	asrs	r5, r5, #1
 80173c6:	429d      	cmp	r5, r3
 80173c8:	bf38      	it	cc
 80173ca:	461d      	movcc	r5, r3
 80173cc:	0553      	lsls	r3, r2, #21
 80173ce:	d527      	bpl.n	8017420 <__ssputs_r+0x8e>
 80173d0:	4629      	mov	r1, r5
 80173d2:	f7fd fd61 	bl	8014e98 <_malloc_r>
 80173d6:	4606      	mov	r6, r0
 80173d8:	b360      	cbz	r0, 8017434 <__ssputs_r+0xa2>
 80173da:	6921      	ldr	r1, [r4, #16]
 80173dc:	464a      	mov	r2, r9
 80173de:	f7fe ff6c 	bl	80162ba <memcpy>
 80173e2:	89a3      	ldrh	r3, [r4, #12]
 80173e4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80173e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80173ec:	81a3      	strh	r3, [r4, #12]
 80173ee:	6126      	str	r6, [r4, #16]
 80173f0:	6165      	str	r5, [r4, #20]
 80173f2:	444e      	add	r6, r9
 80173f4:	eba5 0509 	sub.w	r5, r5, r9
 80173f8:	6026      	str	r6, [r4, #0]
 80173fa:	60a5      	str	r5, [r4, #8]
 80173fc:	463e      	mov	r6, r7
 80173fe:	42be      	cmp	r6, r7
 8017400:	d900      	bls.n	8017404 <__ssputs_r+0x72>
 8017402:	463e      	mov	r6, r7
 8017404:	6820      	ldr	r0, [r4, #0]
 8017406:	4632      	mov	r2, r6
 8017408:	4641      	mov	r1, r8
 801740a:	f001 f886 	bl	801851a <memmove>
 801740e:	68a3      	ldr	r3, [r4, #8]
 8017410:	1b9b      	subs	r3, r3, r6
 8017412:	60a3      	str	r3, [r4, #8]
 8017414:	6823      	ldr	r3, [r4, #0]
 8017416:	4433      	add	r3, r6
 8017418:	6023      	str	r3, [r4, #0]
 801741a:	2000      	movs	r0, #0
 801741c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017420:	462a      	mov	r2, r5
 8017422:	f7fd fdcd 	bl	8014fc0 <_realloc_r>
 8017426:	4606      	mov	r6, r0
 8017428:	2800      	cmp	r0, #0
 801742a:	d1e0      	bne.n	80173ee <__ssputs_r+0x5c>
 801742c:	6921      	ldr	r1, [r4, #16]
 801742e:	4650      	mov	r0, sl
 8017430:	f7fe ff5a 	bl	80162e8 <_free_r>
 8017434:	230c      	movs	r3, #12
 8017436:	f8ca 3000 	str.w	r3, [sl]
 801743a:	89a3      	ldrh	r3, [r4, #12]
 801743c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017440:	81a3      	strh	r3, [r4, #12]
 8017442:	f04f 30ff 	mov.w	r0, #4294967295
 8017446:	e7e9      	b.n	801741c <__ssputs_r+0x8a>

08017448 <_svfiprintf_r>:
 8017448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801744c:	4698      	mov	r8, r3
 801744e:	898b      	ldrh	r3, [r1, #12]
 8017450:	061b      	lsls	r3, r3, #24
 8017452:	b09d      	sub	sp, #116	@ 0x74
 8017454:	4607      	mov	r7, r0
 8017456:	460d      	mov	r5, r1
 8017458:	4614      	mov	r4, r2
 801745a:	d510      	bpl.n	801747e <_svfiprintf_r+0x36>
 801745c:	690b      	ldr	r3, [r1, #16]
 801745e:	b973      	cbnz	r3, 801747e <_svfiprintf_r+0x36>
 8017460:	2140      	movs	r1, #64	@ 0x40
 8017462:	f7fd fd19 	bl	8014e98 <_malloc_r>
 8017466:	6028      	str	r0, [r5, #0]
 8017468:	6128      	str	r0, [r5, #16]
 801746a:	b930      	cbnz	r0, 801747a <_svfiprintf_r+0x32>
 801746c:	230c      	movs	r3, #12
 801746e:	603b      	str	r3, [r7, #0]
 8017470:	f04f 30ff 	mov.w	r0, #4294967295
 8017474:	b01d      	add	sp, #116	@ 0x74
 8017476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801747a:	2340      	movs	r3, #64	@ 0x40
 801747c:	616b      	str	r3, [r5, #20]
 801747e:	2300      	movs	r3, #0
 8017480:	9309      	str	r3, [sp, #36]	@ 0x24
 8017482:	2320      	movs	r3, #32
 8017484:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017488:	f8cd 800c 	str.w	r8, [sp, #12]
 801748c:	2330      	movs	r3, #48	@ 0x30
 801748e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801762c <_svfiprintf_r+0x1e4>
 8017492:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017496:	f04f 0901 	mov.w	r9, #1
 801749a:	4623      	mov	r3, r4
 801749c:	469a      	mov	sl, r3
 801749e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80174a2:	b10a      	cbz	r2, 80174a8 <_svfiprintf_r+0x60>
 80174a4:	2a25      	cmp	r2, #37	@ 0x25
 80174a6:	d1f9      	bne.n	801749c <_svfiprintf_r+0x54>
 80174a8:	ebba 0b04 	subs.w	fp, sl, r4
 80174ac:	d00b      	beq.n	80174c6 <_svfiprintf_r+0x7e>
 80174ae:	465b      	mov	r3, fp
 80174b0:	4622      	mov	r2, r4
 80174b2:	4629      	mov	r1, r5
 80174b4:	4638      	mov	r0, r7
 80174b6:	f7ff ff6c 	bl	8017392 <__ssputs_r>
 80174ba:	3001      	adds	r0, #1
 80174bc:	f000 80a7 	beq.w	801760e <_svfiprintf_r+0x1c6>
 80174c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80174c2:	445a      	add	r2, fp
 80174c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80174c6:	f89a 3000 	ldrb.w	r3, [sl]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	f000 809f 	beq.w	801760e <_svfiprintf_r+0x1c6>
 80174d0:	2300      	movs	r3, #0
 80174d2:	f04f 32ff 	mov.w	r2, #4294967295
 80174d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80174da:	f10a 0a01 	add.w	sl, sl, #1
 80174de:	9304      	str	r3, [sp, #16]
 80174e0:	9307      	str	r3, [sp, #28]
 80174e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80174e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80174e8:	4654      	mov	r4, sl
 80174ea:	2205      	movs	r2, #5
 80174ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174f0:	484e      	ldr	r0, [pc, #312]	@ (801762c <_svfiprintf_r+0x1e4>)
 80174f2:	f7f0 fea5 	bl	8008240 <memchr>
 80174f6:	9a04      	ldr	r2, [sp, #16]
 80174f8:	b9d8      	cbnz	r0, 8017532 <_svfiprintf_r+0xea>
 80174fa:	06d0      	lsls	r0, r2, #27
 80174fc:	bf44      	itt	mi
 80174fe:	2320      	movmi	r3, #32
 8017500:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017504:	0711      	lsls	r1, r2, #28
 8017506:	bf44      	itt	mi
 8017508:	232b      	movmi	r3, #43	@ 0x2b
 801750a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801750e:	f89a 3000 	ldrb.w	r3, [sl]
 8017512:	2b2a      	cmp	r3, #42	@ 0x2a
 8017514:	d015      	beq.n	8017542 <_svfiprintf_r+0xfa>
 8017516:	9a07      	ldr	r2, [sp, #28]
 8017518:	4654      	mov	r4, sl
 801751a:	2000      	movs	r0, #0
 801751c:	f04f 0c0a 	mov.w	ip, #10
 8017520:	4621      	mov	r1, r4
 8017522:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017526:	3b30      	subs	r3, #48	@ 0x30
 8017528:	2b09      	cmp	r3, #9
 801752a:	d94b      	bls.n	80175c4 <_svfiprintf_r+0x17c>
 801752c:	b1b0      	cbz	r0, 801755c <_svfiprintf_r+0x114>
 801752e:	9207      	str	r2, [sp, #28]
 8017530:	e014      	b.n	801755c <_svfiprintf_r+0x114>
 8017532:	eba0 0308 	sub.w	r3, r0, r8
 8017536:	fa09 f303 	lsl.w	r3, r9, r3
 801753a:	4313      	orrs	r3, r2
 801753c:	9304      	str	r3, [sp, #16]
 801753e:	46a2      	mov	sl, r4
 8017540:	e7d2      	b.n	80174e8 <_svfiprintf_r+0xa0>
 8017542:	9b03      	ldr	r3, [sp, #12]
 8017544:	1d19      	adds	r1, r3, #4
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	9103      	str	r1, [sp, #12]
 801754a:	2b00      	cmp	r3, #0
 801754c:	bfbb      	ittet	lt
 801754e:	425b      	neglt	r3, r3
 8017550:	f042 0202 	orrlt.w	r2, r2, #2
 8017554:	9307      	strge	r3, [sp, #28]
 8017556:	9307      	strlt	r3, [sp, #28]
 8017558:	bfb8      	it	lt
 801755a:	9204      	strlt	r2, [sp, #16]
 801755c:	7823      	ldrb	r3, [r4, #0]
 801755e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017560:	d10a      	bne.n	8017578 <_svfiprintf_r+0x130>
 8017562:	7863      	ldrb	r3, [r4, #1]
 8017564:	2b2a      	cmp	r3, #42	@ 0x2a
 8017566:	d132      	bne.n	80175ce <_svfiprintf_r+0x186>
 8017568:	9b03      	ldr	r3, [sp, #12]
 801756a:	1d1a      	adds	r2, r3, #4
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	9203      	str	r2, [sp, #12]
 8017570:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017574:	3402      	adds	r4, #2
 8017576:	9305      	str	r3, [sp, #20]
 8017578:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801763c <_svfiprintf_r+0x1f4>
 801757c:	7821      	ldrb	r1, [r4, #0]
 801757e:	2203      	movs	r2, #3
 8017580:	4650      	mov	r0, sl
 8017582:	f7f0 fe5d 	bl	8008240 <memchr>
 8017586:	b138      	cbz	r0, 8017598 <_svfiprintf_r+0x150>
 8017588:	9b04      	ldr	r3, [sp, #16]
 801758a:	eba0 000a 	sub.w	r0, r0, sl
 801758e:	2240      	movs	r2, #64	@ 0x40
 8017590:	4082      	lsls	r2, r0
 8017592:	4313      	orrs	r3, r2
 8017594:	3401      	adds	r4, #1
 8017596:	9304      	str	r3, [sp, #16]
 8017598:	f814 1b01 	ldrb.w	r1, [r4], #1
 801759c:	4824      	ldr	r0, [pc, #144]	@ (8017630 <_svfiprintf_r+0x1e8>)
 801759e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80175a2:	2206      	movs	r2, #6
 80175a4:	f7f0 fe4c 	bl	8008240 <memchr>
 80175a8:	2800      	cmp	r0, #0
 80175aa:	d036      	beq.n	801761a <_svfiprintf_r+0x1d2>
 80175ac:	4b21      	ldr	r3, [pc, #132]	@ (8017634 <_svfiprintf_r+0x1ec>)
 80175ae:	bb1b      	cbnz	r3, 80175f8 <_svfiprintf_r+0x1b0>
 80175b0:	9b03      	ldr	r3, [sp, #12]
 80175b2:	3307      	adds	r3, #7
 80175b4:	f023 0307 	bic.w	r3, r3, #7
 80175b8:	3308      	adds	r3, #8
 80175ba:	9303      	str	r3, [sp, #12]
 80175bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175be:	4433      	add	r3, r6
 80175c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80175c2:	e76a      	b.n	801749a <_svfiprintf_r+0x52>
 80175c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80175c8:	460c      	mov	r4, r1
 80175ca:	2001      	movs	r0, #1
 80175cc:	e7a8      	b.n	8017520 <_svfiprintf_r+0xd8>
 80175ce:	2300      	movs	r3, #0
 80175d0:	3401      	adds	r4, #1
 80175d2:	9305      	str	r3, [sp, #20]
 80175d4:	4619      	mov	r1, r3
 80175d6:	f04f 0c0a 	mov.w	ip, #10
 80175da:	4620      	mov	r0, r4
 80175dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175e0:	3a30      	subs	r2, #48	@ 0x30
 80175e2:	2a09      	cmp	r2, #9
 80175e4:	d903      	bls.n	80175ee <_svfiprintf_r+0x1a6>
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d0c6      	beq.n	8017578 <_svfiprintf_r+0x130>
 80175ea:	9105      	str	r1, [sp, #20]
 80175ec:	e7c4      	b.n	8017578 <_svfiprintf_r+0x130>
 80175ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80175f2:	4604      	mov	r4, r0
 80175f4:	2301      	movs	r3, #1
 80175f6:	e7f0      	b.n	80175da <_svfiprintf_r+0x192>
 80175f8:	ab03      	add	r3, sp, #12
 80175fa:	9300      	str	r3, [sp, #0]
 80175fc:	462a      	mov	r2, r5
 80175fe:	4b0e      	ldr	r3, [pc, #56]	@ (8017638 <_svfiprintf_r+0x1f0>)
 8017600:	a904      	add	r1, sp, #16
 8017602:	4638      	mov	r0, r7
 8017604:	f3af 8000 	nop.w
 8017608:	1c42      	adds	r2, r0, #1
 801760a:	4606      	mov	r6, r0
 801760c:	d1d6      	bne.n	80175bc <_svfiprintf_r+0x174>
 801760e:	89ab      	ldrh	r3, [r5, #12]
 8017610:	065b      	lsls	r3, r3, #25
 8017612:	f53f af2d 	bmi.w	8017470 <_svfiprintf_r+0x28>
 8017616:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017618:	e72c      	b.n	8017474 <_svfiprintf_r+0x2c>
 801761a:	ab03      	add	r3, sp, #12
 801761c:	9300      	str	r3, [sp, #0]
 801761e:	462a      	mov	r2, r5
 8017620:	4b05      	ldr	r3, [pc, #20]	@ (8017638 <_svfiprintf_r+0x1f0>)
 8017622:	a904      	add	r1, sp, #16
 8017624:	4638      	mov	r0, r7
 8017626:	f000 fb8b 	bl	8017d40 <_printf_i>
 801762a:	e7ed      	b.n	8017608 <_svfiprintf_r+0x1c0>
 801762c:	0801a88f 	.word	0x0801a88f
 8017630:	0801a899 	.word	0x0801a899
 8017634:	00000000 	.word	0x00000000
 8017638:	08017393 	.word	0x08017393
 801763c:	0801a895 	.word	0x0801a895

08017640 <_sungetc_r>:
 8017640:	b538      	push	{r3, r4, r5, lr}
 8017642:	1c4b      	adds	r3, r1, #1
 8017644:	4614      	mov	r4, r2
 8017646:	d103      	bne.n	8017650 <_sungetc_r+0x10>
 8017648:	f04f 35ff 	mov.w	r5, #4294967295
 801764c:	4628      	mov	r0, r5
 801764e:	bd38      	pop	{r3, r4, r5, pc}
 8017650:	8993      	ldrh	r3, [r2, #12]
 8017652:	f023 0320 	bic.w	r3, r3, #32
 8017656:	8193      	strh	r3, [r2, #12]
 8017658:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801765a:	6852      	ldr	r2, [r2, #4]
 801765c:	b2cd      	uxtb	r5, r1
 801765e:	b18b      	cbz	r3, 8017684 <_sungetc_r+0x44>
 8017660:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017662:	4293      	cmp	r3, r2
 8017664:	dd08      	ble.n	8017678 <_sungetc_r+0x38>
 8017666:	6823      	ldr	r3, [r4, #0]
 8017668:	1e5a      	subs	r2, r3, #1
 801766a:	6022      	str	r2, [r4, #0]
 801766c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017670:	6863      	ldr	r3, [r4, #4]
 8017672:	3301      	adds	r3, #1
 8017674:	6063      	str	r3, [r4, #4]
 8017676:	e7e9      	b.n	801764c <_sungetc_r+0xc>
 8017678:	4621      	mov	r1, r4
 801767a:	f000 ff14 	bl	80184a6 <__submore>
 801767e:	2800      	cmp	r0, #0
 8017680:	d0f1      	beq.n	8017666 <_sungetc_r+0x26>
 8017682:	e7e1      	b.n	8017648 <_sungetc_r+0x8>
 8017684:	6921      	ldr	r1, [r4, #16]
 8017686:	6823      	ldr	r3, [r4, #0]
 8017688:	b151      	cbz	r1, 80176a0 <_sungetc_r+0x60>
 801768a:	4299      	cmp	r1, r3
 801768c:	d208      	bcs.n	80176a0 <_sungetc_r+0x60>
 801768e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017692:	42a9      	cmp	r1, r5
 8017694:	d104      	bne.n	80176a0 <_sungetc_r+0x60>
 8017696:	3b01      	subs	r3, #1
 8017698:	3201      	adds	r2, #1
 801769a:	6023      	str	r3, [r4, #0]
 801769c:	6062      	str	r2, [r4, #4]
 801769e:	e7d5      	b.n	801764c <_sungetc_r+0xc>
 80176a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80176a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80176a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80176aa:	2303      	movs	r3, #3
 80176ac:	63a3      	str	r3, [r4, #56]	@ 0x38
 80176ae:	4623      	mov	r3, r4
 80176b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80176b4:	6023      	str	r3, [r4, #0]
 80176b6:	2301      	movs	r3, #1
 80176b8:	e7dc      	b.n	8017674 <_sungetc_r+0x34>

080176ba <__ssrefill_r>:
 80176ba:	b510      	push	{r4, lr}
 80176bc:	460c      	mov	r4, r1
 80176be:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80176c0:	b169      	cbz	r1, 80176de <__ssrefill_r+0x24>
 80176c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80176c6:	4299      	cmp	r1, r3
 80176c8:	d001      	beq.n	80176ce <__ssrefill_r+0x14>
 80176ca:	f7fe fe0d 	bl	80162e8 <_free_r>
 80176ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80176d0:	6063      	str	r3, [r4, #4]
 80176d2:	2000      	movs	r0, #0
 80176d4:	6360      	str	r0, [r4, #52]	@ 0x34
 80176d6:	b113      	cbz	r3, 80176de <__ssrefill_r+0x24>
 80176d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80176da:	6023      	str	r3, [r4, #0]
 80176dc:	bd10      	pop	{r4, pc}
 80176de:	6923      	ldr	r3, [r4, #16]
 80176e0:	6023      	str	r3, [r4, #0]
 80176e2:	2300      	movs	r3, #0
 80176e4:	6063      	str	r3, [r4, #4]
 80176e6:	89a3      	ldrh	r3, [r4, #12]
 80176e8:	f043 0320 	orr.w	r3, r3, #32
 80176ec:	81a3      	strh	r3, [r4, #12]
 80176ee:	f04f 30ff 	mov.w	r0, #4294967295
 80176f2:	e7f3      	b.n	80176dc <__ssrefill_r+0x22>

080176f4 <__ssvfiscanf_r>:
 80176f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176f8:	460c      	mov	r4, r1
 80176fa:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80176fe:	2100      	movs	r1, #0
 8017700:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8017704:	49a6      	ldr	r1, [pc, #664]	@ (80179a0 <__ssvfiscanf_r+0x2ac>)
 8017706:	91a0      	str	r1, [sp, #640]	@ 0x280
 8017708:	f10d 0804 	add.w	r8, sp, #4
 801770c:	49a5      	ldr	r1, [pc, #660]	@ (80179a4 <__ssvfiscanf_r+0x2b0>)
 801770e:	4fa6      	ldr	r7, [pc, #664]	@ (80179a8 <__ssvfiscanf_r+0x2b4>)
 8017710:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8017714:	4606      	mov	r6, r0
 8017716:	91a1      	str	r1, [sp, #644]	@ 0x284
 8017718:	9300      	str	r3, [sp, #0]
 801771a:	f892 9000 	ldrb.w	r9, [r2]
 801771e:	f1b9 0f00 	cmp.w	r9, #0
 8017722:	f000 8158 	beq.w	80179d6 <__ssvfiscanf_r+0x2e2>
 8017726:	f817 3009 	ldrb.w	r3, [r7, r9]
 801772a:	f013 0308 	ands.w	r3, r3, #8
 801772e:	f102 0501 	add.w	r5, r2, #1
 8017732:	d019      	beq.n	8017768 <__ssvfiscanf_r+0x74>
 8017734:	6863      	ldr	r3, [r4, #4]
 8017736:	2b00      	cmp	r3, #0
 8017738:	dd0f      	ble.n	801775a <__ssvfiscanf_r+0x66>
 801773a:	6823      	ldr	r3, [r4, #0]
 801773c:	781a      	ldrb	r2, [r3, #0]
 801773e:	5cba      	ldrb	r2, [r7, r2]
 8017740:	0712      	lsls	r2, r2, #28
 8017742:	d401      	bmi.n	8017748 <__ssvfiscanf_r+0x54>
 8017744:	462a      	mov	r2, r5
 8017746:	e7e8      	b.n	801771a <__ssvfiscanf_r+0x26>
 8017748:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801774a:	3201      	adds	r2, #1
 801774c:	9245      	str	r2, [sp, #276]	@ 0x114
 801774e:	6862      	ldr	r2, [r4, #4]
 8017750:	3301      	adds	r3, #1
 8017752:	3a01      	subs	r2, #1
 8017754:	6062      	str	r2, [r4, #4]
 8017756:	6023      	str	r3, [r4, #0]
 8017758:	e7ec      	b.n	8017734 <__ssvfiscanf_r+0x40>
 801775a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801775c:	4621      	mov	r1, r4
 801775e:	4630      	mov	r0, r6
 8017760:	4798      	blx	r3
 8017762:	2800      	cmp	r0, #0
 8017764:	d0e9      	beq.n	801773a <__ssvfiscanf_r+0x46>
 8017766:	e7ed      	b.n	8017744 <__ssvfiscanf_r+0x50>
 8017768:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801776c:	f040 8085 	bne.w	801787a <__ssvfiscanf_r+0x186>
 8017770:	9341      	str	r3, [sp, #260]	@ 0x104
 8017772:	9343      	str	r3, [sp, #268]	@ 0x10c
 8017774:	7853      	ldrb	r3, [r2, #1]
 8017776:	2b2a      	cmp	r3, #42	@ 0x2a
 8017778:	bf02      	ittt	eq
 801777a:	2310      	moveq	r3, #16
 801777c:	1c95      	addeq	r5, r2, #2
 801777e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8017780:	220a      	movs	r2, #10
 8017782:	46aa      	mov	sl, r5
 8017784:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017788:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801778c:	2b09      	cmp	r3, #9
 801778e:	d91e      	bls.n	80177ce <__ssvfiscanf_r+0xda>
 8017790:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80179ac <__ssvfiscanf_r+0x2b8>
 8017794:	2203      	movs	r2, #3
 8017796:	4658      	mov	r0, fp
 8017798:	f7f0 fd52 	bl	8008240 <memchr>
 801779c:	b138      	cbz	r0, 80177ae <__ssvfiscanf_r+0xba>
 801779e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80177a0:	eba0 000b 	sub.w	r0, r0, fp
 80177a4:	2301      	movs	r3, #1
 80177a6:	4083      	lsls	r3, r0
 80177a8:	4313      	orrs	r3, r2
 80177aa:	9341      	str	r3, [sp, #260]	@ 0x104
 80177ac:	4655      	mov	r5, sl
 80177ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80177b2:	2b78      	cmp	r3, #120	@ 0x78
 80177b4:	d806      	bhi.n	80177c4 <__ssvfiscanf_r+0xd0>
 80177b6:	2b57      	cmp	r3, #87	@ 0x57
 80177b8:	d810      	bhi.n	80177dc <__ssvfiscanf_r+0xe8>
 80177ba:	2b25      	cmp	r3, #37	@ 0x25
 80177bc:	d05d      	beq.n	801787a <__ssvfiscanf_r+0x186>
 80177be:	d857      	bhi.n	8017870 <__ssvfiscanf_r+0x17c>
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d075      	beq.n	80178b0 <__ssvfiscanf_r+0x1bc>
 80177c4:	2303      	movs	r3, #3
 80177c6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80177c8:	230a      	movs	r3, #10
 80177ca:	9342      	str	r3, [sp, #264]	@ 0x108
 80177cc:	e088      	b.n	80178e0 <__ssvfiscanf_r+0x1ec>
 80177ce:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80177d0:	fb02 1103 	mla	r1, r2, r3, r1
 80177d4:	3930      	subs	r1, #48	@ 0x30
 80177d6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80177d8:	4655      	mov	r5, sl
 80177da:	e7d2      	b.n	8017782 <__ssvfiscanf_r+0x8e>
 80177dc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80177e0:	2a20      	cmp	r2, #32
 80177e2:	d8ef      	bhi.n	80177c4 <__ssvfiscanf_r+0xd0>
 80177e4:	a101      	add	r1, pc, #4	@ (adr r1, 80177ec <__ssvfiscanf_r+0xf8>)
 80177e6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80177ea:	bf00      	nop
 80177ec:	080178bf 	.word	0x080178bf
 80177f0:	080177c5 	.word	0x080177c5
 80177f4:	080177c5 	.word	0x080177c5
 80177f8:	08017919 	.word	0x08017919
 80177fc:	080177c5 	.word	0x080177c5
 8017800:	080177c5 	.word	0x080177c5
 8017804:	080177c5 	.word	0x080177c5
 8017808:	080177c5 	.word	0x080177c5
 801780c:	080177c5 	.word	0x080177c5
 8017810:	080177c5 	.word	0x080177c5
 8017814:	080177c5 	.word	0x080177c5
 8017818:	0801792f 	.word	0x0801792f
 801781c:	08017915 	.word	0x08017915
 8017820:	08017877 	.word	0x08017877
 8017824:	08017877 	.word	0x08017877
 8017828:	08017877 	.word	0x08017877
 801782c:	080177c5 	.word	0x080177c5
 8017830:	080178d1 	.word	0x080178d1
 8017834:	080177c5 	.word	0x080177c5
 8017838:	080177c5 	.word	0x080177c5
 801783c:	080177c5 	.word	0x080177c5
 8017840:	080177c5 	.word	0x080177c5
 8017844:	0801793f 	.word	0x0801793f
 8017848:	080178d9 	.word	0x080178d9
 801784c:	080178b7 	.word	0x080178b7
 8017850:	080177c5 	.word	0x080177c5
 8017854:	080177c5 	.word	0x080177c5
 8017858:	0801793b 	.word	0x0801793b
 801785c:	080177c5 	.word	0x080177c5
 8017860:	08017915 	.word	0x08017915
 8017864:	080177c5 	.word	0x080177c5
 8017868:	080177c5 	.word	0x080177c5
 801786c:	080178bf 	.word	0x080178bf
 8017870:	3b45      	subs	r3, #69	@ 0x45
 8017872:	2b02      	cmp	r3, #2
 8017874:	d8a6      	bhi.n	80177c4 <__ssvfiscanf_r+0xd0>
 8017876:	2305      	movs	r3, #5
 8017878:	e031      	b.n	80178de <__ssvfiscanf_r+0x1ea>
 801787a:	6863      	ldr	r3, [r4, #4]
 801787c:	2b00      	cmp	r3, #0
 801787e:	dd0d      	ble.n	801789c <__ssvfiscanf_r+0x1a8>
 8017880:	6823      	ldr	r3, [r4, #0]
 8017882:	781a      	ldrb	r2, [r3, #0]
 8017884:	454a      	cmp	r2, r9
 8017886:	f040 80a6 	bne.w	80179d6 <__ssvfiscanf_r+0x2e2>
 801788a:	3301      	adds	r3, #1
 801788c:	6862      	ldr	r2, [r4, #4]
 801788e:	6023      	str	r3, [r4, #0]
 8017890:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8017892:	3a01      	subs	r2, #1
 8017894:	3301      	adds	r3, #1
 8017896:	6062      	str	r2, [r4, #4]
 8017898:	9345      	str	r3, [sp, #276]	@ 0x114
 801789a:	e753      	b.n	8017744 <__ssvfiscanf_r+0x50>
 801789c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801789e:	4621      	mov	r1, r4
 80178a0:	4630      	mov	r0, r6
 80178a2:	4798      	blx	r3
 80178a4:	2800      	cmp	r0, #0
 80178a6:	d0eb      	beq.n	8017880 <__ssvfiscanf_r+0x18c>
 80178a8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80178aa:	2800      	cmp	r0, #0
 80178ac:	f040 808b 	bne.w	80179c6 <__ssvfiscanf_r+0x2d2>
 80178b0:	f04f 30ff 	mov.w	r0, #4294967295
 80178b4:	e08b      	b.n	80179ce <__ssvfiscanf_r+0x2da>
 80178b6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80178b8:	f042 0220 	orr.w	r2, r2, #32
 80178bc:	9241      	str	r2, [sp, #260]	@ 0x104
 80178be:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80178c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80178c4:	9241      	str	r2, [sp, #260]	@ 0x104
 80178c6:	2210      	movs	r2, #16
 80178c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80178ca:	9242      	str	r2, [sp, #264]	@ 0x108
 80178cc:	d902      	bls.n	80178d4 <__ssvfiscanf_r+0x1e0>
 80178ce:	e005      	b.n	80178dc <__ssvfiscanf_r+0x1e8>
 80178d0:	2300      	movs	r3, #0
 80178d2:	9342      	str	r3, [sp, #264]	@ 0x108
 80178d4:	2303      	movs	r3, #3
 80178d6:	e002      	b.n	80178de <__ssvfiscanf_r+0x1ea>
 80178d8:	2308      	movs	r3, #8
 80178da:	9342      	str	r3, [sp, #264]	@ 0x108
 80178dc:	2304      	movs	r3, #4
 80178de:	9347      	str	r3, [sp, #284]	@ 0x11c
 80178e0:	6863      	ldr	r3, [r4, #4]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	dd39      	ble.n	801795a <__ssvfiscanf_r+0x266>
 80178e6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80178e8:	0659      	lsls	r1, r3, #25
 80178ea:	d404      	bmi.n	80178f6 <__ssvfiscanf_r+0x202>
 80178ec:	6823      	ldr	r3, [r4, #0]
 80178ee:	781a      	ldrb	r2, [r3, #0]
 80178f0:	5cba      	ldrb	r2, [r7, r2]
 80178f2:	0712      	lsls	r2, r2, #28
 80178f4:	d438      	bmi.n	8017968 <__ssvfiscanf_r+0x274>
 80178f6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80178f8:	2b02      	cmp	r3, #2
 80178fa:	dc47      	bgt.n	801798c <__ssvfiscanf_r+0x298>
 80178fc:	466b      	mov	r3, sp
 80178fe:	4622      	mov	r2, r4
 8017900:	a941      	add	r1, sp, #260	@ 0x104
 8017902:	4630      	mov	r0, r6
 8017904:	f000 fb3a 	bl	8017f7c <_scanf_chars>
 8017908:	2801      	cmp	r0, #1
 801790a:	d064      	beq.n	80179d6 <__ssvfiscanf_r+0x2e2>
 801790c:	2802      	cmp	r0, #2
 801790e:	f47f af19 	bne.w	8017744 <__ssvfiscanf_r+0x50>
 8017912:	e7c9      	b.n	80178a8 <__ssvfiscanf_r+0x1b4>
 8017914:	220a      	movs	r2, #10
 8017916:	e7d7      	b.n	80178c8 <__ssvfiscanf_r+0x1d4>
 8017918:	4629      	mov	r1, r5
 801791a:	4640      	mov	r0, r8
 801791c:	f000 fd8a 	bl	8018434 <__sccl>
 8017920:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8017922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017926:	9341      	str	r3, [sp, #260]	@ 0x104
 8017928:	4605      	mov	r5, r0
 801792a:	2301      	movs	r3, #1
 801792c:	e7d7      	b.n	80178de <__ssvfiscanf_r+0x1ea>
 801792e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8017930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017934:	9341      	str	r3, [sp, #260]	@ 0x104
 8017936:	2300      	movs	r3, #0
 8017938:	e7d1      	b.n	80178de <__ssvfiscanf_r+0x1ea>
 801793a:	2302      	movs	r3, #2
 801793c:	e7cf      	b.n	80178de <__ssvfiscanf_r+0x1ea>
 801793e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8017940:	06c3      	lsls	r3, r0, #27
 8017942:	f53f aeff 	bmi.w	8017744 <__ssvfiscanf_r+0x50>
 8017946:	9b00      	ldr	r3, [sp, #0]
 8017948:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801794a:	1d19      	adds	r1, r3, #4
 801794c:	9100      	str	r1, [sp, #0]
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	07c0      	lsls	r0, r0, #31
 8017952:	bf4c      	ite	mi
 8017954:	801a      	strhmi	r2, [r3, #0]
 8017956:	601a      	strpl	r2, [r3, #0]
 8017958:	e6f4      	b.n	8017744 <__ssvfiscanf_r+0x50>
 801795a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801795c:	4621      	mov	r1, r4
 801795e:	4630      	mov	r0, r6
 8017960:	4798      	blx	r3
 8017962:	2800      	cmp	r0, #0
 8017964:	d0bf      	beq.n	80178e6 <__ssvfiscanf_r+0x1f2>
 8017966:	e79f      	b.n	80178a8 <__ssvfiscanf_r+0x1b4>
 8017968:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801796a:	3201      	adds	r2, #1
 801796c:	9245      	str	r2, [sp, #276]	@ 0x114
 801796e:	6862      	ldr	r2, [r4, #4]
 8017970:	3a01      	subs	r2, #1
 8017972:	2a00      	cmp	r2, #0
 8017974:	6062      	str	r2, [r4, #4]
 8017976:	dd02      	ble.n	801797e <__ssvfiscanf_r+0x28a>
 8017978:	3301      	adds	r3, #1
 801797a:	6023      	str	r3, [r4, #0]
 801797c:	e7b6      	b.n	80178ec <__ssvfiscanf_r+0x1f8>
 801797e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017980:	4621      	mov	r1, r4
 8017982:	4630      	mov	r0, r6
 8017984:	4798      	blx	r3
 8017986:	2800      	cmp	r0, #0
 8017988:	d0b0      	beq.n	80178ec <__ssvfiscanf_r+0x1f8>
 801798a:	e78d      	b.n	80178a8 <__ssvfiscanf_r+0x1b4>
 801798c:	2b04      	cmp	r3, #4
 801798e:	dc0f      	bgt.n	80179b0 <__ssvfiscanf_r+0x2bc>
 8017990:	466b      	mov	r3, sp
 8017992:	4622      	mov	r2, r4
 8017994:	a941      	add	r1, sp, #260	@ 0x104
 8017996:	4630      	mov	r0, r6
 8017998:	f000 fb4a 	bl	8018030 <_scanf_i>
 801799c:	e7b4      	b.n	8017908 <__ssvfiscanf_r+0x214>
 801799e:	bf00      	nop
 80179a0:	08017641 	.word	0x08017641
 80179a4:	080176bb 	.word	0x080176bb
 80179a8:	0801a971 	.word	0x0801a971
 80179ac:	0801a895 	.word	0x0801a895
 80179b0:	4b0a      	ldr	r3, [pc, #40]	@ (80179dc <__ssvfiscanf_r+0x2e8>)
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	f43f aec6 	beq.w	8017744 <__ssvfiscanf_r+0x50>
 80179b8:	466b      	mov	r3, sp
 80179ba:	4622      	mov	r2, r4
 80179bc:	a941      	add	r1, sp, #260	@ 0x104
 80179be:	4630      	mov	r0, r6
 80179c0:	f3af 8000 	nop.w
 80179c4:	e7a0      	b.n	8017908 <__ssvfiscanf_r+0x214>
 80179c6:	89a3      	ldrh	r3, [r4, #12]
 80179c8:	065b      	lsls	r3, r3, #25
 80179ca:	f53f af71 	bmi.w	80178b0 <__ssvfiscanf_r+0x1bc>
 80179ce:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80179d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179d6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80179d8:	e7f9      	b.n	80179ce <__ssvfiscanf_r+0x2da>
 80179da:	bf00      	nop
 80179dc:	00000000 	.word	0x00000000

080179e0 <__sfputc_r>:
 80179e0:	6893      	ldr	r3, [r2, #8]
 80179e2:	3b01      	subs	r3, #1
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	b410      	push	{r4}
 80179e8:	6093      	str	r3, [r2, #8]
 80179ea:	da08      	bge.n	80179fe <__sfputc_r+0x1e>
 80179ec:	6994      	ldr	r4, [r2, #24]
 80179ee:	42a3      	cmp	r3, r4
 80179f0:	db01      	blt.n	80179f6 <__sfputc_r+0x16>
 80179f2:	290a      	cmp	r1, #10
 80179f4:	d103      	bne.n	80179fe <__sfputc_r+0x1e>
 80179f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179fa:	f7fe bb18 	b.w	801602e <__swbuf_r>
 80179fe:	6813      	ldr	r3, [r2, #0]
 8017a00:	1c58      	adds	r0, r3, #1
 8017a02:	6010      	str	r0, [r2, #0]
 8017a04:	7019      	strb	r1, [r3, #0]
 8017a06:	4608      	mov	r0, r1
 8017a08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a0c:	4770      	bx	lr

08017a0e <__sfputs_r>:
 8017a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a10:	4606      	mov	r6, r0
 8017a12:	460f      	mov	r7, r1
 8017a14:	4614      	mov	r4, r2
 8017a16:	18d5      	adds	r5, r2, r3
 8017a18:	42ac      	cmp	r4, r5
 8017a1a:	d101      	bne.n	8017a20 <__sfputs_r+0x12>
 8017a1c:	2000      	movs	r0, #0
 8017a1e:	e007      	b.n	8017a30 <__sfputs_r+0x22>
 8017a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a24:	463a      	mov	r2, r7
 8017a26:	4630      	mov	r0, r6
 8017a28:	f7ff ffda 	bl	80179e0 <__sfputc_r>
 8017a2c:	1c43      	adds	r3, r0, #1
 8017a2e:	d1f3      	bne.n	8017a18 <__sfputs_r+0xa>
 8017a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017a34 <_vfiprintf_r>:
 8017a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a38:	460d      	mov	r5, r1
 8017a3a:	b09d      	sub	sp, #116	@ 0x74
 8017a3c:	4614      	mov	r4, r2
 8017a3e:	4698      	mov	r8, r3
 8017a40:	4606      	mov	r6, r0
 8017a42:	b118      	cbz	r0, 8017a4c <_vfiprintf_r+0x18>
 8017a44:	6a03      	ldr	r3, [r0, #32]
 8017a46:	b90b      	cbnz	r3, 8017a4c <_vfiprintf_r+0x18>
 8017a48:	f7fe f982 	bl	8015d50 <__sinit>
 8017a4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017a4e:	07d9      	lsls	r1, r3, #31
 8017a50:	d405      	bmi.n	8017a5e <_vfiprintf_r+0x2a>
 8017a52:	89ab      	ldrh	r3, [r5, #12]
 8017a54:	059a      	lsls	r2, r3, #22
 8017a56:	d402      	bmi.n	8017a5e <_vfiprintf_r+0x2a>
 8017a58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017a5a:	f7fe fc2c 	bl	80162b6 <__retarget_lock_acquire_recursive>
 8017a5e:	89ab      	ldrh	r3, [r5, #12]
 8017a60:	071b      	lsls	r3, r3, #28
 8017a62:	d501      	bpl.n	8017a68 <_vfiprintf_r+0x34>
 8017a64:	692b      	ldr	r3, [r5, #16]
 8017a66:	b99b      	cbnz	r3, 8017a90 <_vfiprintf_r+0x5c>
 8017a68:	4629      	mov	r1, r5
 8017a6a:	4630      	mov	r0, r6
 8017a6c:	f7fe fb1e 	bl	80160ac <__swsetup_r>
 8017a70:	b170      	cbz	r0, 8017a90 <_vfiprintf_r+0x5c>
 8017a72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017a74:	07dc      	lsls	r4, r3, #31
 8017a76:	d504      	bpl.n	8017a82 <_vfiprintf_r+0x4e>
 8017a78:	f04f 30ff 	mov.w	r0, #4294967295
 8017a7c:	b01d      	add	sp, #116	@ 0x74
 8017a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a82:	89ab      	ldrh	r3, [r5, #12]
 8017a84:	0598      	lsls	r0, r3, #22
 8017a86:	d4f7      	bmi.n	8017a78 <_vfiprintf_r+0x44>
 8017a88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017a8a:	f7fe fc15 	bl	80162b8 <__retarget_lock_release_recursive>
 8017a8e:	e7f3      	b.n	8017a78 <_vfiprintf_r+0x44>
 8017a90:	2300      	movs	r3, #0
 8017a92:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a94:	2320      	movs	r3, #32
 8017a96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017a9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8017a9e:	2330      	movs	r3, #48	@ 0x30
 8017aa0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017c50 <_vfiprintf_r+0x21c>
 8017aa4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017aa8:	f04f 0901 	mov.w	r9, #1
 8017aac:	4623      	mov	r3, r4
 8017aae:	469a      	mov	sl, r3
 8017ab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ab4:	b10a      	cbz	r2, 8017aba <_vfiprintf_r+0x86>
 8017ab6:	2a25      	cmp	r2, #37	@ 0x25
 8017ab8:	d1f9      	bne.n	8017aae <_vfiprintf_r+0x7a>
 8017aba:	ebba 0b04 	subs.w	fp, sl, r4
 8017abe:	d00b      	beq.n	8017ad8 <_vfiprintf_r+0xa4>
 8017ac0:	465b      	mov	r3, fp
 8017ac2:	4622      	mov	r2, r4
 8017ac4:	4629      	mov	r1, r5
 8017ac6:	4630      	mov	r0, r6
 8017ac8:	f7ff ffa1 	bl	8017a0e <__sfputs_r>
 8017acc:	3001      	adds	r0, #1
 8017ace:	f000 80a7 	beq.w	8017c20 <_vfiprintf_r+0x1ec>
 8017ad2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017ad4:	445a      	add	r2, fp
 8017ad6:	9209      	str	r2, [sp, #36]	@ 0x24
 8017ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	f000 809f 	beq.w	8017c20 <_vfiprintf_r+0x1ec>
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8017ae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017aec:	f10a 0a01 	add.w	sl, sl, #1
 8017af0:	9304      	str	r3, [sp, #16]
 8017af2:	9307      	str	r3, [sp, #28]
 8017af4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017af8:	931a      	str	r3, [sp, #104]	@ 0x68
 8017afa:	4654      	mov	r4, sl
 8017afc:	2205      	movs	r2, #5
 8017afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b02:	4853      	ldr	r0, [pc, #332]	@ (8017c50 <_vfiprintf_r+0x21c>)
 8017b04:	f7f0 fb9c 	bl	8008240 <memchr>
 8017b08:	9a04      	ldr	r2, [sp, #16]
 8017b0a:	b9d8      	cbnz	r0, 8017b44 <_vfiprintf_r+0x110>
 8017b0c:	06d1      	lsls	r1, r2, #27
 8017b0e:	bf44      	itt	mi
 8017b10:	2320      	movmi	r3, #32
 8017b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017b16:	0713      	lsls	r3, r2, #28
 8017b18:	bf44      	itt	mi
 8017b1a:	232b      	movmi	r3, #43	@ 0x2b
 8017b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017b20:	f89a 3000 	ldrb.w	r3, [sl]
 8017b24:	2b2a      	cmp	r3, #42	@ 0x2a
 8017b26:	d015      	beq.n	8017b54 <_vfiprintf_r+0x120>
 8017b28:	9a07      	ldr	r2, [sp, #28]
 8017b2a:	4654      	mov	r4, sl
 8017b2c:	2000      	movs	r0, #0
 8017b2e:	f04f 0c0a 	mov.w	ip, #10
 8017b32:	4621      	mov	r1, r4
 8017b34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b38:	3b30      	subs	r3, #48	@ 0x30
 8017b3a:	2b09      	cmp	r3, #9
 8017b3c:	d94b      	bls.n	8017bd6 <_vfiprintf_r+0x1a2>
 8017b3e:	b1b0      	cbz	r0, 8017b6e <_vfiprintf_r+0x13a>
 8017b40:	9207      	str	r2, [sp, #28]
 8017b42:	e014      	b.n	8017b6e <_vfiprintf_r+0x13a>
 8017b44:	eba0 0308 	sub.w	r3, r0, r8
 8017b48:	fa09 f303 	lsl.w	r3, r9, r3
 8017b4c:	4313      	orrs	r3, r2
 8017b4e:	9304      	str	r3, [sp, #16]
 8017b50:	46a2      	mov	sl, r4
 8017b52:	e7d2      	b.n	8017afa <_vfiprintf_r+0xc6>
 8017b54:	9b03      	ldr	r3, [sp, #12]
 8017b56:	1d19      	adds	r1, r3, #4
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	9103      	str	r1, [sp, #12]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	bfbb      	ittet	lt
 8017b60:	425b      	neglt	r3, r3
 8017b62:	f042 0202 	orrlt.w	r2, r2, #2
 8017b66:	9307      	strge	r3, [sp, #28]
 8017b68:	9307      	strlt	r3, [sp, #28]
 8017b6a:	bfb8      	it	lt
 8017b6c:	9204      	strlt	r2, [sp, #16]
 8017b6e:	7823      	ldrb	r3, [r4, #0]
 8017b70:	2b2e      	cmp	r3, #46	@ 0x2e
 8017b72:	d10a      	bne.n	8017b8a <_vfiprintf_r+0x156>
 8017b74:	7863      	ldrb	r3, [r4, #1]
 8017b76:	2b2a      	cmp	r3, #42	@ 0x2a
 8017b78:	d132      	bne.n	8017be0 <_vfiprintf_r+0x1ac>
 8017b7a:	9b03      	ldr	r3, [sp, #12]
 8017b7c:	1d1a      	adds	r2, r3, #4
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	9203      	str	r2, [sp, #12]
 8017b82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017b86:	3402      	adds	r4, #2
 8017b88:	9305      	str	r3, [sp, #20]
 8017b8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017c60 <_vfiprintf_r+0x22c>
 8017b8e:	7821      	ldrb	r1, [r4, #0]
 8017b90:	2203      	movs	r2, #3
 8017b92:	4650      	mov	r0, sl
 8017b94:	f7f0 fb54 	bl	8008240 <memchr>
 8017b98:	b138      	cbz	r0, 8017baa <_vfiprintf_r+0x176>
 8017b9a:	9b04      	ldr	r3, [sp, #16]
 8017b9c:	eba0 000a 	sub.w	r0, r0, sl
 8017ba0:	2240      	movs	r2, #64	@ 0x40
 8017ba2:	4082      	lsls	r2, r0
 8017ba4:	4313      	orrs	r3, r2
 8017ba6:	3401      	adds	r4, #1
 8017ba8:	9304      	str	r3, [sp, #16]
 8017baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bae:	4829      	ldr	r0, [pc, #164]	@ (8017c54 <_vfiprintf_r+0x220>)
 8017bb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017bb4:	2206      	movs	r2, #6
 8017bb6:	f7f0 fb43 	bl	8008240 <memchr>
 8017bba:	2800      	cmp	r0, #0
 8017bbc:	d03f      	beq.n	8017c3e <_vfiprintf_r+0x20a>
 8017bbe:	4b26      	ldr	r3, [pc, #152]	@ (8017c58 <_vfiprintf_r+0x224>)
 8017bc0:	bb1b      	cbnz	r3, 8017c0a <_vfiprintf_r+0x1d6>
 8017bc2:	9b03      	ldr	r3, [sp, #12]
 8017bc4:	3307      	adds	r3, #7
 8017bc6:	f023 0307 	bic.w	r3, r3, #7
 8017bca:	3308      	adds	r3, #8
 8017bcc:	9303      	str	r3, [sp, #12]
 8017bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017bd0:	443b      	add	r3, r7
 8017bd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8017bd4:	e76a      	b.n	8017aac <_vfiprintf_r+0x78>
 8017bd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8017bda:	460c      	mov	r4, r1
 8017bdc:	2001      	movs	r0, #1
 8017bde:	e7a8      	b.n	8017b32 <_vfiprintf_r+0xfe>
 8017be0:	2300      	movs	r3, #0
 8017be2:	3401      	adds	r4, #1
 8017be4:	9305      	str	r3, [sp, #20]
 8017be6:	4619      	mov	r1, r3
 8017be8:	f04f 0c0a 	mov.w	ip, #10
 8017bec:	4620      	mov	r0, r4
 8017bee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017bf2:	3a30      	subs	r2, #48	@ 0x30
 8017bf4:	2a09      	cmp	r2, #9
 8017bf6:	d903      	bls.n	8017c00 <_vfiprintf_r+0x1cc>
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d0c6      	beq.n	8017b8a <_vfiprintf_r+0x156>
 8017bfc:	9105      	str	r1, [sp, #20]
 8017bfe:	e7c4      	b.n	8017b8a <_vfiprintf_r+0x156>
 8017c00:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c04:	4604      	mov	r4, r0
 8017c06:	2301      	movs	r3, #1
 8017c08:	e7f0      	b.n	8017bec <_vfiprintf_r+0x1b8>
 8017c0a:	ab03      	add	r3, sp, #12
 8017c0c:	9300      	str	r3, [sp, #0]
 8017c0e:	462a      	mov	r2, r5
 8017c10:	4b12      	ldr	r3, [pc, #72]	@ (8017c5c <_vfiprintf_r+0x228>)
 8017c12:	a904      	add	r1, sp, #16
 8017c14:	4630      	mov	r0, r6
 8017c16:	f3af 8000 	nop.w
 8017c1a:	4607      	mov	r7, r0
 8017c1c:	1c78      	adds	r0, r7, #1
 8017c1e:	d1d6      	bne.n	8017bce <_vfiprintf_r+0x19a>
 8017c20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017c22:	07d9      	lsls	r1, r3, #31
 8017c24:	d405      	bmi.n	8017c32 <_vfiprintf_r+0x1fe>
 8017c26:	89ab      	ldrh	r3, [r5, #12]
 8017c28:	059a      	lsls	r2, r3, #22
 8017c2a:	d402      	bmi.n	8017c32 <_vfiprintf_r+0x1fe>
 8017c2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017c2e:	f7fe fb43 	bl	80162b8 <__retarget_lock_release_recursive>
 8017c32:	89ab      	ldrh	r3, [r5, #12]
 8017c34:	065b      	lsls	r3, r3, #25
 8017c36:	f53f af1f 	bmi.w	8017a78 <_vfiprintf_r+0x44>
 8017c3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017c3c:	e71e      	b.n	8017a7c <_vfiprintf_r+0x48>
 8017c3e:	ab03      	add	r3, sp, #12
 8017c40:	9300      	str	r3, [sp, #0]
 8017c42:	462a      	mov	r2, r5
 8017c44:	4b05      	ldr	r3, [pc, #20]	@ (8017c5c <_vfiprintf_r+0x228>)
 8017c46:	a904      	add	r1, sp, #16
 8017c48:	4630      	mov	r0, r6
 8017c4a:	f000 f879 	bl	8017d40 <_printf_i>
 8017c4e:	e7e4      	b.n	8017c1a <_vfiprintf_r+0x1e6>
 8017c50:	0801a88f 	.word	0x0801a88f
 8017c54:	0801a899 	.word	0x0801a899
 8017c58:	00000000 	.word	0x00000000
 8017c5c:	08017a0f 	.word	0x08017a0f
 8017c60:	0801a895 	.word	0x0801a895

08017c64 <_printf_common>:
 8017c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c68:	4616      	mov	r6, r2
 8017c6a:	4698      	mov	r8, r3
 8017c6c:	688a      	ldr	r2, [r1, #8]
 8017c6e:	690b      	ldr	r3, [r1, #16]
 8017c70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017c74:	4293      	cmp	r3, r2
 8017c76:	bfb8      	it	lt
 8017c78:	4613      	movlt	r3, r2
 8017c7a:	6033      	str	r3, [r6, #0]
 8017c7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017c80:	4607      	mov	r7, r0
 8017c82:	460c      	mov	r4, r1
 8017c84:	b10a      	cbz	r2, 8017c8a <_printf_common+0x26>
 8017c86:	3301      	adds	r3, #1
 8017c88:	6033      	str	r3, [r6, #0]
 8017c8a:	6823      	ldr	r3, [r4, #0]
 8017c8c:	0699      	lsls	r1, r3, #26
 8017c8e:	bf42      	ittt	mi
 8017c90:	6833      	ldrmi	r3, [r6, #0]
 8017c92:	3302      	addmi	r3, #2
 8017c94:	6033      	strmi	r3, [r6, #0]
 8017c96:	6825      	ldr	r5, [r4, #0]
 8017c98:	f015 0506 	ands.w	r5, r5, #6
 8017c9c:	d106      	bne.n	8017cac <_printf_common+0x48>
 8017c9e:	f104 0a19 	add.w	sl, r4, #25
 8017ca2:	68e3      	ldr	r3, [r4, #12]
 8017ca4:	6832      	ldr	r2, [r6, #0]
 8017ca6:	1a9b      	subs	r3, r3, r2
 8017ca8:	42ab      	cmp	r3, r5
 8017caa:	dc26      	bgt.n	8017cfa <_printf_common+0x96>
 8017cac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017cb0:	6822      	ldr	r2, [r4, #0]
 8017cb2:	3b00      	subs	r3, #0
 8017cb4:	bf18      	it	ne
 8017cb6:	2301      	movne	r3, #1
 8017cb8:	0692      	lsls	r2, r2, #26
 8017cba:	d42b      	bmi.n	8017d14 <_printf_common+0xb0>
 8017cbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017cc0:	4641      	mov	r1, r8
 8017cc2:	4638      	mov	r0, r7
 8017cc4:	47c8      	blx	r9
 8017cc6:	3001      	adds	r0, #1
 8017cc8:	d01e      	beq.n	8017d08 <_printf_common+0xa4>
 8017cca:	6823      	ldr	r3, [r4, #0]
 8017ccc:	6922      	ldr	r2, [r4, #16]
 8017cce:	f003 0306 	and.w	r3, r3, #6
 8017cd2:	2b04      	cmp	r3, #4
 8017cd4:	bf02      	ittt	eq
 8017cd6:	68e5      	ldreq	r5, [r4, #12]
 8017cd8:	6833      	ldreq	r3, [r6, #0]
 8017cda:	1aed      	subeq	r5, r5, r3
 8017cdc:	68a3      	ldr	r3, [r4, #8]
 8017cde:	bf0c      	ite	eq
 8017ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ce4:	2500      	movne	r5, #0
 8017ce6:	4293      	cmp	r3, r2
 8017ce8:	bfc4      	itt	gt
 8017cea:	1a9b      	subgt	r3, r3, r2
 8017cec:	18ed      	addgt	r5, r5, r3
 8017cee:	2600      	movs	r6, #0
 8017cf0:	341a      	adds	r4, #26
 8017cf2:	42b5      	cmp	r5, r6
 8017cf4:	d11a      	bne.n	8017d2c <_printf_common+0xc8>
 8017cf6:	2000      	movs	r0, #0
 8017cf8:	e008      	b.n	8017d0c <_printf_common+0xa8>
 8017cfa:	2301      	movs	r3, #1
 8017cfc:	4652      	mov	r2, sl
 8017cfe:	4641      	mov	r1, r8
 8017d00:	4638      	mov	r0, r7
 8017d02:	47c8      	blx	r9
 8017d04:	3001      	adds	r0, #1
 8017d06:	d103      	bne.n	8017d10 <_printf_common+0xac>
 8017d08:	f04f 30ff 	mov.w	r0, #4294967295
 8017d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d10:	3501      	adds	r5, #1
 8017d12:	e7c6      	b.n	8017ca2 <_printf_common+0x3e>
 8017d14:	18e1      	adds	r1, r4, r3
 8017d16:	1c5a      	adds	r2, r3, #1
 8017d18:	2030      	movs	r0, #48	@ 0x30
 8017d1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017d1e:	4422      	add	r2, r4
 8017d20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017d24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017d28:	3302      	adds	r3, #2
 8017d2a:	e7c7      	b.n	8017cbc <_printf_common+0x58>
 8017d2c:	2301      	movs	r3, #1
 8017d2e:	4622      	mov	r2, r4
 8017d30:	4641      	mov	r1, r8
 8017d32:	4638      	mov	r0, r7
 8017d34:	47c8      	blx	r9
 8017d36:	3001      	adds	r0, #1
 8017d38:	d0e6      	beq.n	8017d08 <_printf_common+0xa4>
 8017d3a:	3601      	adds	r6, #1
 8017d3c:	e7d9      	b.n	8017cf2 <_printf_common+0x8e>
	...

08017d40 <_printf_i>:
 8017d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017d44:	7e0f      	ldrb	r7, [r1, #24]
 8017d46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017d48:	2f78      	cmp	r7, #120	@ 0x78
 8017d4a:	4691      	mov	r9, r2
 8017d4c:	4680      	mov	r8, r0
 8017d4e:	460c      	mov	r4, r1
 8017d50:	469a      	mov	sl, r3
 8017d52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017d56:	d807      	bhi.n	8017d68 <_printf_i+0x28>
 8017d58:	2f62      	cmp	r7, #98	@ 0x62
 8017d5a:	d80a      	bhi.n	8017d72 <_printf_i+0x32>
 8017d5c:	2f00      	cmp	r7, #0
 8017d5e:	f000 80d1 	beq.w	8017f04 <_printf_i+0x1c4>
 8017d62:	2f58      	cmp	r7, #88	@ 0x58
 8017d64:	f000 80b8 	beq.w	8017ed8 <_printf_i+0x198>
 8017d68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017d6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017d70:	e03a      	b.n	8017de8 <_printf_i+0xa8>
 8017d72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017d76:	2b15      	cmp	r3, #21
 8017d78:	d8f6      	bhi.n	8017d68 <_printf_i+0x28>
 8017d7a:	a101      	add	r1, pc, #4	@ (adr r1, 8017d80 <_printf_i+0x40>)
 8017d7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017d80:	08017dd9 	.word	0x08017dd9
 8017d84:	08017ded 	.word	0x08017ded
 8017d88:	08017d69 	.word	0x08017d69
 8017d8c:	08017d69 	.word	0x08017d69
 8017d90:	08017d69 	.word	0x08017d69
 8017d94:	08017d69 	.word	0x08017d69
 8017d98:	08017ded 	.word	0x08017ded
 8017d9c:	08017d69 	.word	0x08017d69
 8017da0:	08017d69 	.word	0x08017d69
 8017da4:	08017d69 	.word	0x08017d69
 8017da8:	08017d69 	.word	0x08017d69
 8017dac:	08017eeb 	.word	0x08017eeb
 8017db0:	08017e17 	.word	0x08017e17
 8017db4:	08017ea5 	.word	0x08017ea5
 8017db8:	08017d69 	.word	0x08017d69
 8017dbc:	08017d69 	.word	0x08017d69
 8017dc0:	08017f0d 	.word	0x08017f0d
 8017dc4:	08017d69 	.word	0x08017d69
 8017dc8:	08017e17 	.word	0x08017e17
 8017dcc:	08017d69 	.word	0x08017d69
 8017dd0:	08017d69 	.word	0x08017d69
 8017dd4:	08017ead 	.word	0x08017ead
 8017dd8:	6833      	ldr	r3, [r6, #0]
 8017dda:	1d1a      	adds	r2, r3, #4
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	6032      	str	r2, [r6, #0]
 8017de0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017de4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017de8:	2301      	movs	r3, #1
 8017dea:	e09c      	b.n	8017f26 <_printf_i+0x1e6>
 8017dec:	6833      	ldr	r3, [r6, #0]
 8017dee:	6820      	ldr	r0, [r4, #0]
 8017df0:	1d19      	adds	r1, r3, #4
 8017df2:	6031      	str	r1, [r6, #0]
 8017df4:	0606      	lsls	r6, r0, #24
 8017df6:	d501      	bpl.n	8017dfc <_printf_i+0xbc>
 8017df8:	681d      	ldr	r5, [r3, #0]
 8017dfa:	e003      	b.n	8017e04 <_printf_i+0xc4>
 8017dfc:	0645      	lsls	r5, r0, #25
 8017dfe:	d5fb      	bpl.n	8017df8 <_printf_i+0xb8>
 8017e00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017e04:	2d00      	cmp	r5, #0
 8017e06:	da03      	bge.n	8017e10 <_printf_i+0xd0>
 8017e08:	232d      	movs	r3, #45	@ 0x2d
 8017e0a:	426d      	negs	r5, r5
 8017e0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017e10:	4858      	ldr	r0, [pc, #352]	@ (8017f74 <_printf_i+0x234>)
 8017e12:	230a      	movs	r3, #10
 8017e14:	e011      	b.n	8017e3a <_printf_i+0xfa>
 8017e16:	6821      	ldr	r1, [r4, #0]
 8017e18:	6833      	ldr	r3, [r6, #0]
 8017e1a:	0608      	lsls	r0, r1, #24
 8017e1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017e20:	d402      	bmi.n	8017e28 <_printf_i+0xe8>
 8017e22:	0649      	lsls	r1, r1, #25
 8017e24:	bf48      	it	mi
 8017e26:	b2ad      	uxthmi	r5, r5
 8017e28:	2f6f      	cmp	r7, #111	@ 0x6f
 8017e2a:	4852      	ldr	r0, [pc, #328]	@ (8017f74 <_printf_i+0x234>)
 8017e2c:	6033      	str	r3, [r6, #0]
 8017e2e:	bf14      	ite	ne
 8017e30:	230a      	movne	r3, #10
 8017e32:	2308      	moveq	r3, #8
 8017e34:	2100      	movs	r1, #0
 8017e36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017e3a:	6866      	ldr	r6, [r4, #4]
 8017e3c:	60a6      	str	r6, [r4, #8]
 8017e3e:	2e00      	cmp	r6, #0
 8017e40:	db05      	blt.n	8017e4e <_printf_i+0x10e>
 8017e42:	6821      	ldr	r1, [r4, #0]
 8017e44:	432e      	orrs	r6, r5
 8017e46:	f021 0104 	bic.w	r1, r1, #4
 8017e4a:	6021      	str	r1, [r4, #0]
 8017e4c:	d04b      	beq.n	8017ee6 <_printf_i+0x1a6>
 8017e4e:	4616      	mov	r6, r2
 8017e50:	fbb5 f1f3 	udiv	r1, r5, r3
 8017e54:	fb03 5711 	mls	r7, r3, r1, r5
 8017e58:	5dc7      	ldrb	r7, [r0, r7]
 8017e5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017e5e:	462f      	mov	r7, r5
 8017e60:	42bb      	cmp	r3, r7
 8017e62:	460d      	mov	r5, r1
 8017e64:	d9f4      	bls.n	8017e50 <_printf_i+0x110>
 8017e66:	2b08      	cmp	r3, #8
 8017e68:	d10b      	bne.n	8017e82 <_printf_i+0x142>
 8017e6a:	6823      	ldr	r3, [r4, #0]
 8017e6c:	07df      	lsls	r7, r3, #31
 8017e6e:	d508      	bpl.n	8017e82 <_printf_i+0x142>
 8017e70:	6923      	ldr	r3, [r4, #16]
 8017e72:	6861      	ldr	r1, [r4, #4]
 8017e74:	4299      	cmp	r1, r3
 8017e76:	bfde      	ittt	le
 8017e78:	2330      	movle	r3, #48	@ 0x30
 8017e7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017e7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017e82:	1b92      	subs	r2, r2, r6
 8017e84:	6122      	str	r2, [r4, #16]
 8017e86:	f8cd a000 	str.w	sl, [sp]
 8017e8a:	464b      	mov	r3, r9
 8017e8c:	aa03      	add	r2, sp, #12
 8017e8e:	4621      	mov	r1, r4
 8017e90:	4640      	mov	r0, r8
 8017e92:	f7ff fee7 	bl	8017c64 <_printf_common>
 8017e96:	3001      	adds	r0, #1
 8017e98:	d14a      	bne.n	8017f30 <_printf_i+0x1f0>
 8017e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8017e9e:	b004      	add	sp, #16
 8017ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ea4:	6823      	ldr	r3, [r4, #0]
 8017ea6:	f043 0320 	orr.w	r3, r3, #32
 8017eaa:	6023      	str	r3, [r4, #0]
 8017eac:	4832      	ldr	r0, [pc, #200]	@ (8017f78 <_printf_i+0x238>)
 8017eae:	2778      	movs	r7, #120	@ 0x78
 8017eb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017eb4:	6823      	ldr	r3, [r4, #0]
 8017eb6:	6831      	ldr	r1, [r6, #0]
 8017eb8:	061f      	lsls	r7, r3, #24
 8017eba:	f851 5b04 	ldr.w	r5, [r1], #4
 8017ebe:	d402      	bmi.n	8017ec6 <_printf_i+0x186>
 8017ec0:	065f      	lsls	r7, r3, #25
 8017ec2:	bf48      	it	mi
 8017ec4:	b2ad      	uxthmi	r5, r5
 8017ec6:	6031      	str	r1, [r6, #0]
 8017ec8:	07d9      	lsls	r1, r3, #31
 8017eca:	bf44      	itt	mi
 8017ecc:	f043 0320 	orrmi.w	r3, r3, #32
 8017ed0:	6023      	strmi	r3, [r4, #0]
 8017ed2:	b11d      	cbz	r5, 8017edc <_printf_i+0x19c>
 8017ed4:	2310      	movs	r3, #16
 8017ed6:	e7ad      	b.n	8017e34 <_printf_i+0xf4>
 8017ed8:	4826      	ldr	r0, [pc, #152]	@ (8017f74 <_printf_i+0x234>)
 8017eda:	e7e9      	b.n	8017eb0 <_printf_i+0x170>
 8017edc:	6823      	ldr	r3, [r4, #0]
 8017ede:	f023 0320 	bic.w	r3, r3, #32
 8017ee2:	6023      	str	r3, [r4, #0]
 8017ee4:	e7f6      	b.n	8017ed4 <_printf_i+0x194>
 8017ee6:	4616      	mov	r6, r2
 8017ee8:	e7bd      	b.n	8017e66 <_printf_i+0x126>
 8017eea:	6833      	ldr	r3, [r6, #0]
 8017eec:	6825      	ldr	r5, [r4, #0]
 8017eee:	6961      	ldr	r1, [r4, #20]
 8017ef0:	1d18      	adds	r0, r3, #4
 8017ef2:	6030      	str	r0, [r6, #0]
 8017ef4:	062e      	lsls	r6, r5, #24
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	d501      	bpl.n	8017efe <_printf_i+0x1be>
 8017efa:	6019      	str	r1, [r3, #0]
 8017efc:	e002      	b.n	8017f04 <_printf_i+0x1c4>
 8017efe:	0668      	lsls	r0, r5, #25
 8017f00:	d5fb      	bpl.n	8017efa <_printf_i+0x1ba>
 8017f02:	8019      	strh	r1, [r3, #0]
 8017f04:	2300      	movs	r3, #0
 8017f06:	6123      	str	r3, [r4, #16]
 8017f08:	4616      	mov	r6, r2
 8017f0a:	e7bc      	b.n	8017e86 <_printf_i+0x146>
 8017f0c:	6833      	ldr	r3, [r6, #0]
 8017f0e:	1d1a      	adds	r2, r3, #4
 8017f10:	6032      	str	r2, [r6, #0]
 8017f12:	681e      	ldr	r6, [r3, #0]
 8017f14:	6862      	ldr	r2, [r4, #4]
 8017f16:	2100      	movs	r1, #0
 8017f18:	4630      	mov	r0, r6
 8017f1a:	f7f0 f991 	bl	8008240 <memchr>
 8017f1e:	b108      	cbz	r0, 8017f24 <_printf_i+0x1e4>
 8017f20:	1b80      	subs	r0, r0, r6
 8017f22:	6060      	str	r0, [r4, #4]
 8017f24:	6863      	ldr	r3, [r4, #4]
 8017f26:	6123      	str	r3, [r4, #16]
 8017f28:	2300      	movs	r3, #0
 8017f2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017f2e:	e7aa      	b.n	8017e86 <_printf_i+0x146>
 8017f30:	6923      	ldr	r3, [r4, #16]
 8017f32:	4632      	mov	r2, r6
 8017f34:	4649      	mov	r1, r9
 8017f36:	4640      	mov	r0, r8
 8017f38:	47d0      	blx	sl
 8017f3a:	3001      	adds	r0, #1
 8017f3c:	d0ad      	beq.n	8017e9a <_printf_i+0x15a>
 8017f3e:	6823      	ldr	r3, [r4, #0]
 8017f40:	079b      	lsls	r3, r3, #30
 8017f42:	d413      	bmi.n	8017f6c <_printf_i+0x22c>
 8017f44:	68e0      	ldr	r0, [r4, #12]
 8017f46:	9b03      	ldr	r3, [sp, #12]
 8017f48:	4298      	cmp	r0, r3
 8017f4a:	bfb8      	it	lt
 8017f4c:	4618      	movlt	r0, r3
 8017f4e:	e7a6      	b.n	8017e9e <_printf_i+0x15e>
 8017f50:	2301      	movs	r3, #1
 8017f52:	4632      	mov	r2, r6
 8017f54:	4649      	mov	r1, r9
 8017f56:	4640      	mov	r0, r8
 8017f58:	47d0      	blx	sl
 8017f5a:	3001      	adds	r0, #1
 8017f5c:	d09d      	beq.n	8017e9a <_printf_i+0x15a>
 8017f5e:	3501      	adds	r5, #1
 8017f60:	68e3      	ldr	r3, [r4, #12]
 8017f62:	9903      	ldr	r1, [sp, #12]
 8017f64:	1a5b      	subs	r3, r3, r1
 8017f66:	42ab      	cmp	r3, r5
 8017f68:	dcf2      	bgt.n	8017f50 <_printf_i+0x210>
 8017f6a:	e7eb      	b.n	8017f44 <_printf_i+0x204>
 8017f6c:	2500      	movs	r5, #0
 8017f6e:	f104 0619 	add.w	r6, r4, #25
 8017f72:	e7f5      	b.n	8017f60 <_printf_i+0x220>
 8017f74:	0801a8a0 	.word	0x0801a8a0
 8017f78:	0801a8b1 	.word	0x0801a8b1

08017f7c <_scanf_chars>:
 8017f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f80:	4615      	mov	r5, r2
 8017f82:	688a      	ldr	r2, [r1, #8]
 8017f84:	4680      	mov	r8, r0
 8017f86:	460c      	mov	r4, r1
 8017f88:	b932      	cbnz	r2, 8017f98 <_scanf_chars+0x1c>
 8017f8a:	698a      	ldr	r2, [r1, #24]
 8017f8c:	2a00      	cmp	r2, #0
 8017f8e:	bf14      	ite	ne
 8017f90:	f04f 32ff 	movne.w	r2, #4294967295
 8017f94:	2201      	moveq	r2, #1
 8017f96:	608a      	str	r2, [r1, #8]
 8017f98:	6822      	ldr	r2, [r4, #0]
 8017f9a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801802c <_scanf_chars+0xb0>
 8017f9e:	06d1      	lsls	r1, r2, #27
 8017fa0:	bf5f      	itttt	pl
 8017fa2:	681a      	ldrpl	r2, [r3, #0]
 8017fa4:	1d11      	addpl	r1, r2, #4
 8017fa6:	6019      	strpl	r1, [r3, #0]
 8017fa8:	6816      	ldrpl	r6, [r2, #0]
 8017faa:	2700      	movs	r7, #0
 8017fac:	69a0      	ldr	r0, [r4, #24]
 8017fae:	b188      	cbz	r0, 8017fd4 <_scanf_chars+0x58>
 8017fb0:	2801      	cmp	r0, #1
 8017fb2:	d107      	bne.n	8017fc4 <_scanf_chars+0x48>
 8017fb4:	682b      	ldr	r3, [r5, #0]
 8017fb6:	781a      	ldrb	r2, [r3, #0]
 8017fb8:	6963      	ldr	r3, [r4, #20]
 8017fba:	5c9b      	ldrb	r3, [r3, r2]
 8017fbc:	b953      	cbnz	r3, 8017fd4 <_scanf_chars+0x58>
 8017fbe:	2f00      	cmp	r7, #0
 8017fc0:	d031      	beq.n	8018026 <_scanf_chars+0xaa>
 8017fc2:	e022      	b.n	801800a <_scanf_chars+0x8e>
 8017fc4:	2802      	cmp	r0, #2
 8017fc6:	d120      	bne.n	801800a <_scanf_chars+0x8e>
 8017fc8:	682b      	ldr	r3, [r5, #0]
 8017fca:	781b      	ldrb	r3, [r3, #0]
 8017fcc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017fd0:	071b      	lsls	r3, r3, #28
 8017fd2:	d41a      	bmi.n	801800a <_scanf_chars+0x8e>
 8017fd4:	6823      	ldr	r3, [r4, #0]
 8017fd6:	06da      	lsls	r2, r3, #27
 8017fd8:	bf5e      	ittt	pl
 8017fda:	682b      	ldrpl	r3, [r5, #0]
 8017fdc:	781b      	ldrbpl	r3, [r3, #0]
 8017fde:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017fe2:	682a      	ldr	r2, [r5, #0]
 8017fe4:	686b      	ldr	r3, [r5, #4]
 8017fe6:	3201      	adds	r2, #1
 8017fe8:	602a      	str	r2, [r5, #0]
 8017fea:	68a2      	ldr	r2, [r4, #8]
 8017fec:	3b01      	subs	r3, #1
 8017fee:	3a01      	subs	r2, #1
 8017ff0:	606b      	str	r3, [r5, #4]
 8017ff2:	3701      	adds	r7, #1
 8017ff4:	60a2      	str	r2, [r4, #8]
 8017ff6:	b142      	cbz	r2, 801800a <_scanf_chars+0x8e>
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	dcd7      	bgt.n	8017fac <_scanf_chars+0x30>
 8017ffc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8018000:	4629      	mov	r1, r5
 8018002:	4640      	mov	r0, r8
 8018004:	4798      	blx	r3
 8018006:	2800      	cmp	r0, #0
 8018008:	d0d0      	beq.n	8017fac <_scanf_chars+0x30>
 801800a:	6823      	ldr	r3, [r4, #0]
 801800c:	f013 0310 	ands.w	r3, r3, #16
 8018010:	d105      	bne.n	801801e <_scanf_chars+0xa2>
 8018012:	68e2      	ldr	r2, [r4, #12]
 8018014:	3201      	adds	r2, #1
 8018016:	60e2      	str	r2, [r4, #12]
 8018018:	69a2      	ldr	r2, [r4, #24]
 801801a:	b102      	cbz	r2, 801801e <_scanf_chars+0xa2>
 801801c:	7033      	strb	r3, [r6, #0]
 801801e:	6923      	ldr	r3, [r4, #16]
 8018020:	443b      	add	r3, r7
 8018022:	6123      	str	r3, [r4, #16]
 8018024:	2000      	movs	r0, #0
 8018026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801802a:	bf00      	nop
 801802c:	0801a971 	.word	0x0801a971

08018030 <_scanf_i>:
 8018030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018034:	4698      	mov	r8, r3
 8018036:	4b74      	ldr	r3, [pc, #464]	@ (8018208 <_scanf_i+0x1d8>)
 8018038:	460c      	mov	r4, r1
 801803a:	4682      	mov	sl, r0
 801803c:	4616      	mov	r6, r2
 801803e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018042:	b087      	sub	sp, #28
 8018044:	ab03      	add	r3, sp, #12
 8018046:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801804a:	4b70      	ldr	r3, [pc, #448]	@ (801820c <_scanf_i+0x1dc>)
 801804c:	69a1      	ldr	r1, [r4, #24]
 801804e:	4a70      	ldr	r2, [pc, #448]	@ (8018210 <_scanf_i+0x1e0>)
 8018050:	2903      	cmp	r1, #3
 8018052:	bf08      	it	eq
 8018054:	461a      	moveq	r2, r3
 8018056:	68a3      	ldr	r3, [r4, #8]
 8018058:	9201      	str	r2, [sp, #4]
 801805a:	1e5a      	subs	r2, r3, #1
 801805c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8018060:	bf88      	it	hi
 8018062:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8018066:	4627      	mov	r7, r4
 8018068:	bf82      	ittt	hi
 801806a:	eb03 0905 	addhi.w	r9, r3, r5
 801806e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8018072:	60a3      	strhi	r3, [r4, #8]
 8018074:	f857 3b1c 	ldr.w	r3, [r7], #28
 8018078:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801807c:	bf98      	it	ls
 801807e:	f04f 0900 	movls.w	r9, #0
 8018082:	6023      	str	r3, [r4, #0]
 8018084:	463d      	mov	r5, r7
 8018086:	f04f 0b00 	mov.w	fp, #0
 801808a:	6831      	ldr	r1, [r6, #0]
 801808c:	ab03      	add	r3, sp, #12
 801808e:	7809      	ldrb	r1, [r1, #0]
 8018090:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8018094:	2202      	movs	r2, #2
 8018096:	f7f0 f8d3 	bl	8008240 <memchr>
 801809a:	b328      	cbz	r0, 80180e8 <_scanf_i+0xb8>
 801809c:	f1bb 0f01 	cmp.w	fp, #1
 80180a0:	d159      	bne.n	8018156 <_scanf_i+0x126>
 80180a2:	6862      	ldr	r2, [r4, #4]
 80180a4:	b92a      	cbnz	r2, 80180b2 <_scanf_i+0x82>
 80180a6:	6822      	ldr	r2, [r4, #0]
 80180a8:	2108      	movs	r1, #8
 80180aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80180ae:	6061      	str	r1, [r4, #4]
 80180b0:	6022      	str	r2, [r4, #0]
 80180b2:	6822      	ldr	r2, [r4, #0]
 80180b4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80180b8:	6022      	str	r2, [r4, #0]
 80180ba:	68a2      	ldr	r2, [r4, #8]
 80180bc:	1e51      	subs	r1, r2, #1
 80180be:	60a1      	str	r1, [r4, #8]
 80180c0:	b192      	cbz	r2, 80180e8 <_scanf_i+0xb8>
 80180c2:	6832      	ldr	r2, [r6, #0]
 80180c4:	1c51      	adds	r1, r2, #1
 80180c6:	6031      	str	r1, [r6, #0]
 80180c8:	7812      	ldrb	r2, [r2, #0]
 80180ca:	f805 2b01 	strb.w	r2, [r5], #1
 80180ce:	6872      	ldr	r2, [r6, #4]
 80180d0:	3a01      	subs	r2, #1
 80180d2:	2a00      	cmp	r2, #0
 80180d4:	6072      	str	r2, [r6, #4]
 80180d6:	dc07      	bgt.n	80180e8 <_scanf_i+0xb8>
 80180d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80180dc:	4631      	mov	r1, r6
 80180de:	4650      	mov	r0, sl
 80180e0:	4790      	blx	r2
 80180e2:	2800      	cmp	r0, #0
 80180e4:	f040 8085 	bne.w	80181f2 <_scanf_i+0x1c2>
 80180e8:	f10b 0b01 	add.w	fp, fp, #1
 80180ec:	f1bb 0f03 	cmp.w	fp, #3
 80180f0:	d1cb      	bne.n	801808a <_scanf_i+0x5a>
 80180f2:	6863      	ldr	r3, [r4, #4]
 80180f4:	b90b      	cbnz	r3, 80180fa <_scanf_i+0xca>
 80180f6:	230a      	movs	r3, #10
 80180f8:	6063      	str	r3, [r4, #4]
 80180fa:	6863      	ldr	r3, [r4, #4]
 80180fc:	4945      	ldr	r1, [pc, #276]	@ (8018214 <_scanf_i+0x1e4>)
 80180fe:	6960      	ldr	r0, [r4, #20]
 8018100:	1ac9      	subs	r1, r1, r3
 8018102:	f000 f997 	bl	8018434 <__sccl>
 8018106:	f04f 0b00 	mov.w	fp, #0
 801810a:	68a3      	ldr	r3, [r4, #8]
 801810c:	6822      	ldr	r2, [r4, #0]
 801810e:	2b00      	cmp	r3, #0
 8018110:	d03d      	beq.n	801818e <_scanf_i+0x15e>
 8018112:	6831      	ldr	r1, [r6, #0]
 8018114:	6960      	ldr	r0, [r4, #20]
 8018116:	f891 c000 	ldrb.w	ip, [r1]
 801811a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801811e:	2800      	cmp	r0, #0
 8018120:	d035      	beq.n	801818e <_scanf_i+0x15e>
 8018122:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8018126:	d124      	bne.n	8018172 <_scanf_i+0x142>
 8018128:	0510      	lsls	r0, r2, #20
 801812a:	d522      	bpl.n	8018172 <_scanf_i+0x142>
 801812c:	f10b 0b01 	add.w	fp, fp, #1
 8018130:	f1b9 0f00 	cmp.w	r9, #0
 8018134:	d003      	beq.n	801813e <_scanf_i+0x10e>
 8018136:	3301      	adds	r3, #1
 8018138:	f109 39ff 	add.w	r9, r9, #4294967295
 801813c:	60a3      	str	r3, [r4, #8]
 801813e:	6873      	ldr	r3, [r6, #4]
 8018140:	3b01      	subs	r3, #1
 8018142:	2b00      	cmp	r3, #0
 8018144:	6073      	str	r3, [r6, #4]
 8018146:	dd1b      	ble.n	8018180 <_scanf_i+0x150>
 8018148:	6833      	ldr	r3, [r6, #0]
 801814a:	3301      	adds	r3, #1
 801814c:	6033      	str	r3, [r6, #0]
 801814e:	68a3      	ldr	r3, [r4, #8]
 8018150:	3b01      	subs	r3, #1
 8018152:	60a3      	str	r3, [r4, #8]
 8018154:	e7d9      	b.n	801810a <_scanf_i+0xda>
 8018156:	f1bb 0f02 	cmp.w	fp, #2
 801815a:	d1ae      	bne.n	80180ba <_scanf_i+0x8a>
 801815c:	6822      	ldr	r2, [r4, #0]
 801815e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8018162:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8018166:	d1c4      	bne.n	80180f2 <_scanf_i+0xc2>
 8018168:	2110      	movs	r1, #16
 801816a:	6061      	str	r1, [r4, #4]
 801816c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8018170:	e7a2      	b.n	80180b8 <_scanf_i+0x88>
 8018172:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8018176:	6022      	str	r2, [r4, #0]
 8018178:	780b      	ldrb	r3, [r1, #0]
 801817a:	f805 3b01 	strb.w	r3, [r5], #1
 801817e:	e7de      	b.n	801813e <_scanf_i+0x10e>
 8018180:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8018184:	4631      	mov	r1, r6
 8018186:	4650      	mov	r0, sl
 8018188:	4798      	blx	r3
 801818a:	2800      	cmp	r0, #0
 801818c:	d0df      	beq.n	801814e <_scanf_i+0x11e>
 801818e:	6823      	ldr	r3, [r4, #0]
 8018190:	05d9      	lsls	r1, r3, #23
 8018192:	d50d      	bpl.n	80181b0 <_scanf_i+0x180>
 8018194:	42bd      	cmp	r5, r7
 8018196:	d909      	bls.n	80181ac <_scanf_i+0x17c>
 8018198:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801819c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80181a0:	4632      	mov	r2, r6
 80181a2:	4650      	mov	r0, sl
 80181a4:	4798      	blx	r3
 80181a6:	f105 39ff 	add.w	r9, r5, #4294967295
 80181aa:	464d      	mov	r5, r9
 80181ac:	42bd      	cmp	r5, r7
 80181ae:	d028      	beq.n	8018202 <_scanf_i+0x1d2>
 80181b0:	6822      	ldr	r2, [r4, #0]
 80181b2:	f012 0210 	ands.w	r2, r2, #16
 80181b6:	d113      	bne.n	80181e0 <_scanf_i+0x1b0>
 80181b8:	702a      	strb	r2, [r5, #0]
 80181ba:	6863      	ldr	r3, [r4, #4]
 80181bc:	9e01      	ldr	r6, [sp, #4]
 80181be:	4639      	mov	r1, r7
 80181c0:	4650      	mov	r0, sl
 80181c2:	47b0      	blx	r6
 80181c4:	f8d8 3000 	ldr.w	r3, [r8]
 80181c8:	6821      	ldr	r1, [r4, #0]
 80181ca:	1d1a      	adds	r2, r3, #4
 80181cc:	f8c8 2000 	str.w	r2, [r8]
 80181d0:	f011 0f20 	tst.w	r1, #32
 80181d4:	681b      	ldr	r3, [r3, #0]
 80181d6:	d00f      	beq.n	80181f8 <_scanf_i+0x1c8>
 80181d8:	6018      	str	r0, [r3, #0]
 80181da:	68e3      	ldr	r3, [r4, #12]
 80181dc:	3301      	adds	r3, #1
 80181de:	60e3      	str	r3, [r4, #12]
 80181e0:	6923      	ldr	r3, [r4, #16]
 80181e2:	1bed      	subs	r5, r5, r7
 80181e4:	445d      	add	r5, fp
 80181e6:	442b      	add	r3, r5
 80181e8:	6123      	str	r3, [r4, #16]
 80181ea:	2000      	movs	r0, #0
 80181ec:	b007      	add	sp, #28
 80181ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181f2:	f04f 0b00 	mov.w	fp, #0
 80181f6:	e7ca      	b.n	801818e <_scanf_i+0x15e>
 80181f8:	07ca      	lsls	r2, r1, #31
 80181fa:	bf4c      	ite	mi
 80181fc:	8018      	strhmi	r0, [r3, #0]
 80181fe:	6018      	strpl	r0, [r3, #0]
 8018200:	e7eb      	b.n	80181da <_scanf_i+0x1aa>
 8018202:	2001      	movs	r0, #1
 8018204:	e7f2      	b.n	80181ec <_scanf_i+0x1bc>
 8018206:	bf00      	nop
 8018208:	08018c40 	.word	0x08018c40
 801820c:	080186ed 	.word	0x080186ed
 8018210:	080187cd 	.word	0x080187cd
 8018214:	0801a8d2 	.word	0x0801a8d2

08018218 <__sflush_r>:
 8018218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801821c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018220:	0716      	lsls	r6, r2, #28
 8018222:	4605      	mov	r5, r0
 8018224:	460c      	mov	r4, r1
 8018226:	d454      	bmi.n	80182d2 <__sflush_r+0xba>
 8018228:	684b      	ldr	r3, [r1, #4]
 801822a:	2b00      	cmp	r3, #0
 801822c:	dc02      	bgt.n	8018234 <__sflush_r+0x1c>
 801822e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018230:	2b00      	cmp	r3, #0
 8018232:	dd48      	ble.n	80182c6 <__sflush_r+0xae>
 8018234:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018236:	2e00      	cmp	r6, #0
 8018238:	d045      	beq.n	80182c6 <__sflush_r+0xae>
 801823a:	2300      	movs	r3, #0
 801823c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018240:	682f      	ldr	r7, [r5, #0]
 8018242:	6a21      	ldr	r1, [r4, #32]
 8018244:	602b      	str	r3, [r5, #0]
 8018246:	d030      	beq.n	80182aa <__sflush_r+0x92>
 8018248:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801824a:	89a3      	ldrh	r3, [r4, #12]
 801824c:	0759      	lsls	r1, r3, #29
 801824e:	d505      	bpl.n	801825c <__sflush_r+0x44>
 8018250:	6863      	ldr	r3, [r4, #4]
 8018252:	1ad2      	subs	r2, r2, r3
 8018254:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018256:	b10b      	cbz	r3, 801825c <__sflush_r+0x44>
 8018258:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801825a:	1ad2      	subs	r2, r2, r3
 801825c:	2300      	movs	r3, #0
 801825e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018260:	6a21      	ldr	r1, [r4, #32]
 8018262:	4628      	mov	r0, r5
 8018264:	47b0      	blx	r6
 8018266:	1c43      	adds	r3, r0, #1
 8018268:	89a3      	ldrh	r3, [r4, #12]
 801826a:	d106      	bne.n	801827a <__sflush_r+0x62>
 801826c:	6829      	ldr	r1, [r5, #0]
 801826e:	291d      	cmp	r1, #29
 8018270:	d82b      	bhi.n	80182ca <__sflush_r+0xb2>
 8018272:	4a2a      	ldr	r2, [pc, #168]	@ (801831c <__sflush_r+0x104>)
 8018274:	40ca      	lsrs	r2, r1
 8018276:	07d6      	lsls	r6, r2, #31
 8018278:	d527      	bpl.n	80182ca <__sflush_r+0xb2>
 801827a:	2200      	movs	r2, #0
 801827c:	6062      	str	r2, [r4, #4]
 801827e:	04d9      	lsls	r1, r3, #19
 8018280:	6922      	ldr	r2, [r4, #16]
 8018282:	6022      	str	r2, [r4, #0]
 8018284:	d504      	bpl.n	8018290 <__sflush_r+0x78>
 8018286:	1c42      	adds	r2, r0, #1
 8018288:	d101      	bne.n	801828e <__sflush_r+0x76>
 801828a:	682b      	ldr	r3, [r5, #0]
 801828c:	b903      	cbnz	r3, 8018290 <__sflush_r+0x78>
 801828e:	6560      	str	r0, [r4, #84]	@ 0x54
 8018290:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018292:	602f      	str	r7, [r5, #0]
 8018294:	b1b9      	cbz	r1, 80182c6 <__sflush_r+0xae>
 8018296:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801829a:	4299      	cmp	r1, r3
 801829c:	d002      	beq.n	80182a4 <__sflush_r+0x8c>
 801829e:	4628      	mov	r0, r5
 80182a0:	f7fe f822 	bl	80162e8 <_free_r>
 80182a4:	2300      	movs	r3, #0
 80182a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80182a8:	e00d      	b.n	80182c6 <__sflush_r+0xae>
 80182aa:	2301      	movs	r3, #1
 80182ac:	4628      	mov	r0, r5
 80182ae:	47b0      	blx	r6
 80182b0:	4602      	mov	r2, r0
 80182b2:	1c50      	adds	r0, r2, #1
 80182b4:	d1c9      	bne.n	801824a <__sflush_r+0x32>
 80182b6:	682b      	ldr	r3, [r5, #0]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d0c6      	beq.n	801824a <__sflush_r+0x32>
 80182bc:	2b1d      	cmp	r3, #29
 80182be:	d001      	beq.n	80182c4 <__sflush_r+0xac>
 80182c0:	2b16      	cmp	r3, #22
 80182c2:	d11e      	bne.n	8018302 <__sflush_r+0xea>
 80182c4:	602f      	str	r7, [r5, #0]
 80182c6:	2000      	movs	r0, #0
 80182c8:	e022      	b.n	8018310 <__sflush_r+0xf8>
 80182ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80182ce:	b21b      	sxth	r3, r3
 80182d0:	e01b      	b.n	801830a <__sflush_r+0xf2>
 80182d2:	690f      	ldr	r7, [r1, #16]
 80182d4:	2f00      	cmp	r7, #0
 80182d6:	d0f6      	beq.n	80182c6 <__sflush_r+0xae>
 80182d8:	0793      	lsls	r3, r2, #30
 80182da:	680e      	ldr	r6, [r1, #0]
 80182dc:	bf08      	it	eq
 80182de:	694b      	ldreq	r3, [r1, #20]
 80182e0:	600f      	str	r7, [r1, #0]
 80182e2:	bf18      	it	ne
 80182e4:	2300      	movne	r3, #0
 80182e6:	eba6 0807 	sub.w	r8, r6, r7
 80182ea:	608b      	str	r3, [r1, #8]
 80182ec:	f1b8 0f00 	cmp.w	r8, #0
 80182f0:	dde9      	ble.n	80182c6 <__sflush_r+0xae>
 80182f2:	6a21      	ldr	r1, [r4, #32]
 80182f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80182f6:	4643      	mov	r3, r8
 80182f8:	463a      	mov	r2, r7
 80182fa:	4628      	mov	r0, r5
 80182fc:	47b0      	blx	r6
 80182fe:	2800      	cmp	r0, #0
 8018300:	dc08      	bgt.n	8018314 <__sflush_r+0xfc>
 8018302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801830a:	81a3      	strh	r3, [r4, #12]
 801830c:	f04f 30ff 	mov.w	r0, #4294967295
 8018310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018314:	4407      	add	r7, r0
 8018316:	eba8 0800 	sub.w	r8, r8, r0
 801831a:	e7e7      	b.n	80182ec <__sflush_r+0xd4>
 801831c:	20400001 	.word	0x20400001

08018320 <_fflush_r>:
 8018320:	b538      	push	{r3, r4, r5, lr}
 8018322:	690b      	ldr	r3, [r1, #16]
 8018324:	4605      	mov	r5, r0
 8018326:	460c      	mov	r4, r1
 8018328:	b913      	cbnz	r3, 8018330 <_fflush_r+0x10>
 801832a:	2500      	movs	r5, #0
 801832c:	4628      	mov	r0, r5
 801832e:	bd38      	pop	{r3, r4, r5, pc}
 8018330:	b118      	cbz	r0, 801833a <_fflush_r+0x1a>
 8018332:	6a03      	ldr	r3, [r0, #32]
 8018334:	b90b      	cbnz	r3, 801833a <_fflush_r+0x1a>
 8018336:	f7fd fd0b 	bl	8015d50 <__sinit>
 801833a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801833e:	2b00      	cmp	r3, #0
 8018340:	d0f3      	beq.n	801832a <_fflush_r+0xa>
 8018342:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018344:	07d0      	lsls	r0, r2, #31
 8018346:	d404      	bmi.n	8018352 <_fflush_r+0x32>
 8018348:	0599      	lsls	r1, r3, #22
 801834a:	d402      	bmi.n	8018352 <_fflush_r+0x32>
 801834c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801834e:	f7fd ffb2 	bl	80162b6 <__retarget_lock_acquire_recursive>
 8018352:	4628      	mov	r0, r5
 8018354:	4621      	mov	r1, r4
 8018356:	f7ff ff5f 	bl	8018218 <__sflush_r>
 801835a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801835c:	07da      	lsls	r2, r3, #31
 801835e:	4605      	mov	r5, r0
 8018360:	d4e4      	bmi.n	801832c <_fflush_r+0xc>
 8018362:	89a3      	ldrh	r3, [r4, #12]
 8018364:	059b      	lsls	r3, r3, #22
 8018366:	d4e1      	bmi.n	801832c <_fflush_r+0xc>
 8018368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801836a:	f7fd ffa5 	bl	80162b8 <__retarget_lock_release_recursive>
 801836e:	e7dd      	b.n	801832c <_fflush_r+0xc>

08018370 <__swhatbuf_r>:
 8018370:	b570      	push	{r4, r5, r6, lr}
 8018372:	460c      	mov	r4, r1
 8018374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018378:	2900      	cmp	r1, #0
 801837a:	b096      	sub	sp, #88	@ 0x58
 801837c:	4615      	mov	r5, r2
 801837e:	461e      	mov	r6, r3
 8018380:	da0d      	bge.n	801839e <__swhatbuf_r+0x2e>
 8018382:	89a3      	ldrh	r3, [r4, #12]
 8018384:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018388:	f04f 0100 	mov.w	r1, #0
 801838c:	bf14      	ite	ne
 801838e:	2340      	movne	r3, #64	@ 0x40
 8018390:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018394:	2000      	movs	r0, #0
 8018396:	6031      	str	r1, [r6, #0]
 8018398:	602b      	str	r3, [r5, #0]
 801839a:	b016      	add	sp, #88	@ 0x58
 801839c:	bd70      	pop	{r4, r5, r6, pc}
 801839e:	466a      	mov	r2, sp
 80183a0:	f000 f8d6 	bl	8018550 <_fstat_r>
 80183a4:	2800      	cmp	r0, #0
 80183a6:	dbec      	blt.n	8018382 <__swhatbuf_r+0x12>
 80183a8:	9901      	ldr	r1, [sp, #4]
 80183aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80183ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80183b2:	4259      	negs	r1, r3
 80183b4:	4159      	adcs	r1, r3
 80183b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80183ba:	e7eb      	b.n	8018394 <__swhatbuf_r+0x24>

080183bc <__smakebuf_r>:
 80183bc:	898b      	ldrh	r3, [r1, #12]
 80183be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80183c0:	079d      	lsls	r5, r3, #30
 80183c2:	4606      	mov	r6, r0
 80183c4:	460c      	mov	r4, r1
 80183c6:	d507      	bpl.n	80183d8 <__smakebuf_r+0x1c>
 80183c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80183cc:	6023      	str	r3, [r4, #0]
 80183ce:	6123      	str	r3, [r4, #16]
 80183d0:	2301      	movs	r3, #1
 80183d2:	6163      	str	r3, [r4, #20]
 80183d4:	b003      	add	sp, #12
 80183d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183d8:	ab01      	add	r3, sp, #4
 80183da:	466a      	mov	r2, sp
 80183dc:	f7ff ffc8 	bl	8018370 <__swhatbuf_r>
 80183e0:	9f00      	ldr	r7, [sp, #0]
 80183e2:	4605      	mov	r5, r0
 80183e4:	4639      	mov	r1, r7
 80183e6:	4630      	mov	r0, r6
 80183e8:	f7fc fd56 	bl	8014e98 <_malloc_r>
 80183ec:	b948      	cbnz	r0, 8018402 <__smakebuf_r+0x46>
 80183ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183f2:	059a      	lsls	r2, r3, #22
 80183f4:	d4ee      	bmi.n	80183d4 <__smakebuf_r+0x18>
 80183f6:	f023 0303 	bic.w	r3, r3, #3
 80183fa:	f043 0302 	orr.w	r3, r3, #2
 80183fe:	81a3      	strh	r3, [r4, #12]
 8018400:	e7e2      	b.n	80183c8 <__smakebuf_r+0xc>
 8018402:	89a3      	ldrh	r3, [r4, #12]
 8018404:	6020      	str	r0, [r4, #0]
 8018406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801840a:	81a3      	strh	r3, [r4, #12]
 801840c:	9b01      	ldr	r3, [sp, #4]
 801840e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018412:	b15b      	cbz	r3, 801842c <__smakebuf_r+0x70>
 8018414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018418:	4630      	mov	r0, r6
 801841a:	f000 f8ab 	bl	8018574 <_isatty_r>
 801841e:	b128      	cbz	r0, 801842c <__smakebuf_r+0x70>
 8018420:	89a3      	ldrh	r3, [r4, #12]
 8018422:	f023 0303 	bic.w	r3, r3, #3
 8018426:	f043 0301 	orr.w	r3, r3, #1
 801842a:	81a3      	strh	r3, [r4, #12]
 801842c:	89a3      	ldrh	r3, [r4, #12]
 801842e:	431d      	orrs	r5, r3
 8018430:	81a5      	strh	r5, [r4, #12]
 8018432:	e7cf      	b.n	80183d4 <__smakebuf_r+0x18>

08018434 <__sccl>:
 8018434:	b570      	push	{r4, r5, r6, lr}
 8018436:	780b      	ldrb	r3, [r1, #0]
 8018438:	4604      	mov	r4, r0
 801843a:	2b5e      	cmp	r3, #94	@ 0x5e
 801843c:	bf0b      	itete	eq
 801843e:	784b      	ldrbeq	r3, [r1, #1]
 8018440:	1c4a      	addne	r2, r1, #1
 8018442:	1c8a      	addeq	r2, r1, #2
 8018444:	2100      	movne	r1, #0
 8018446:	bf08      	it	eq
 8018448:	2101      	moveq	r1, #1
 801844a:	3801      	subs	r0, #1
 801844c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8018450:	f800 1f01 	strb.w	r1, [r0, #1]!
 8018454:	42a8      	cmp	r0, r5
 8018456:	d1fb      	bne.n	8018450 <__sccl+0x1c>
 8018458:	b90b      	cbnz	r3, 801845e <__sccl+0x2a>
 801845a:	1e50      	subs	r0, r2, #1
 801845c:	bd70      	pop	{r4, r5, r6, pc}
 801845e:	f081 0101 	eor.w	r1, r1, #1
 8018462:	54e1      	strb	r1, [r4, r3]
 8018464:	4610      	mov	r0, r2
 8018466:	4602      	mov	r2, r0
 8018468:	f812 5b01 	ldrb.w	r5, [r2], #1
 801846c:	2d2d      	cmp	r5, #45	@ 0x2d
 801846e:	d005      	beq.n	801847c <__sccl+0x48>
 8018470:	2d5d      	cmp	r5, #93	@ 0x5d
 8018472:	d016      	beq.n	80184a2 <__sccl+0x6e>
 8018474:	2d00      	cmp	r5, #0
 8018476:	d0f1      	beq.n	801845c <__sccl+0x28>
 8018478:	462b      	mov	r3, r5
 801847a:	e7f2      	b.n	8018462 <__sccl+0x2e>
 801847c:	7846      	ldrb	r6, [r0, #1]
 801847e:	2e5d      	cmp	r6, #93	@ 0x5d
 8018480:	d0fa      	beq.n	8018478 <__sccl+0x44>
 8018482:	42b3      	cmp	r3, r6
 8018484:	dcf8      	bgt.n	8018478 <__sccl+0x44>
 8018486:	3002      	adds	r0, #2
 8018488:	461a      	mov	r2, r3
 801848a:	3201      	adds	r2, #1
 801848c:	4296      	cmp	r6, r2
 801848e:	54a1      	strb	r1, [r4, r2]
 8018490:	dcfb      	bgt.n	801848a <__sccl+0x56>
 8018492:	1af2      	subs	r2, r6, r3
 8018494:	3a01      	subs	r2, #1
 8018496:	1c5d      	adds	r5, r3, #1
 8018498:	42b3      	cmp	r3, r6
 801849a:	bfa8      	it	ge
 801849c:	2200      	movge	r2, #0
 801849e:	18ab      	adds	r3, r5, r2
 80184a0:	e7e1      	b.n	8018466 <__sccl+0x32>
 80184a2:	4610      	mov	r0, r2
 80184a4:	e7da      	b.n	801845c <__sccl+0x28>

080184a6 <__submore>:
 80184a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184aa:	460c      	mov	r4, r1
 80184ac:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80184ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80184b2:	4299      	cmp	r1, r3
 80184b4:	d11d      	bne.n	80184f2 <__submore+0x4c>
 80184b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80184ba:	f7fc fced 	bl	8014e98 <_malloc_r>
 80184be:	b918      	cbnz	r0, 80184c8 <__submore+0x22>
 80184c0:	f04f 30ff 	mov.w	r0, #4294967295
 80184c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80184cc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80184ce:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80184d2:	6360      	str	r0, [r4, #52]	@ 0x34
 80184d4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80184d8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80184dc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80184e0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80184e4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80184e8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80184ec:	6020      	str	r0, [r4, #0]
 80184ee:	2000      	movs	r0, #0
 80184f0:	e7e8      	b.n	80184c4 <__submore+0x1e>
 80184f2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80184f4:	0077      	lsls	r7, r6, #1
 80184f6:	463a      	mov	r2, r7
 80184f8:	f7fc fd62 	bl	8014fc0 <_realloc_r>
 80184fc:	4605      	mov	r5, r0
 80184fe:	2800      	cmp	r0, #0
 8018500:	d0de      	beq.n	80184c0 <__submore+0x1a>
 8018502:	eb00 0806 	add.w	r8, r0, r6
 8018506:	4601      	mov	r1, r0
 8018508:	4632      	mov	r2, r6
 801850a:	4640      	mov	r0, r8
 801850c:	f7fd fed5 	bl	80162ba <memcpy>
 8018510:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8018514:	f8c4 8000 	str.w	r8, [r4]
 8018518:	e7e9      	b.n	80184ee <__submore+0x48>

0801851a <memmove>:
 801851a:	4288      	cmp	r0, r1
 801851c:	b510      	push	{r4, lr}
 801851e:	eb01 0402 	add.w	r4, r1, r2
 8018522:	d902      	bls.n	801852a <memmove+0x10>
 8018524:	4284      	cmp	r4, r0
 8018526:	4623      	mov	r3, r4
 8018528:	d807      	bhi.n	801853a <memmove+0x20>
 801852a:	1e43      	subs	r3, r0, #1
 801852c:	42a1      	cmp	r1, r4
 801852e:	d008      	beq.n	8018542 <memmove+0x28>
 8018530:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018534:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018538:	e7f8      	b.n	801852c <memmove+0x12>
 801853a:	4402      	add	r2, r0
 801853c:	4601      	mov	r1, r0
 801853e:	428a      	cmp	r2, r1
 8018540:	d100      	bne.n	8018544 <memmove+0x2a>
 8018542:	bd10      	pop	{r4, pc}
 8018544:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018548:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801854c:	e7f7      	b.n	801853e <memmove+0x24>
	...

08018550 <_fstat_r>:
 8018550:	b538      	push	{r3, r4, r5, lr}
 8018552:	4d07      	ldr	r5, [pc, #28]	@ (8018570 <_fstat_r+0x20>)
 8018554:	2300      	movs	r3, #0
 8018556:	4604      	mov	r4, r0
 8018558:	4608      	mov	r0, r1
 801855a:	4611      	mov	r1, r2
 801855c:	602b      	str	r3, [r5, #0]
 801855e:	f7f5 fefd 	bl	800e35c <_fstat>
 8018562:	1c43      	adds	r3, r0, #1
 8018564:	d102      	bne.n	801856c <_fstat_r+0x1c>
 8018566:	682b      	ldr	r3, [r5, #0]
 8018568:	b103      	cbz	r3, 801856c <_fstat_r+0x1c>
 801856a:	6023      	str	r3, [r4, #0]
 801856c:	bd38      	pop	{r3, r4, r5, pc}
 801856e:	bf00      	nop
 8018570:	2001362c 	.word	0x2001362c

08018574 <_isatty_r>:
 8018574:	b538      	push	{r3, r4, r5, lr}
 8018576:	4d06      	ldr	r5, [pc, #24]	@ (8018590 <_isatty_r+0x1c>)
 8018578:	2300      	movs	r3, #0
 801857a:	4604      	mov	r4, r0
 801857c:	4608      	mov	r0, r1
 801857e:	602b      	str	r3, [r5, #0]
 8018580:	f7f5 fefc 	bl	800e37c <_isatty>
 8018584:	1c43      	adds	r3, r0, #1
 8018586:	d102      	bne.n	801858e <_isatty_r+0x1a>
 8018588:	682b      	ldr	r3, [r5, #0]
 801858a:	b103      	cbz	r3, 801858e <_isatty_r+0x1a>
 801858c:	6023      	str	r3, [r4, #0]
 801858e:	bd38      	pop	{r3, r4, r5, pc}
 8018590:	2001362c 	.word	0x2001362c

08018594 <__assert_func>:
 8018594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018596:	4614      	mov	r4, r2
 8018598:	461a      	mov	r2, r3
 801859a:	4b09      	ldr	r3, [pc, #36]	@ (80185c0 <__assert_func+0x2c>)
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	4605      	mov	r5, r0
 80185a0:	68d8      	ldr	r0, [r3, #12]
 80185a2:	b14c      	cbz	r4, 80185b8 <__assert_func+0x24>
 80185a4:	4b07      	ldr	r3, [pc, #28]	@ (80185c4 <__assert_func+0x30>)
 80185a6:	9100      	str	r1, [sp, #0]
 80185a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80185ac:	4906      	ldr	r1, [pc, #24]	@ (80185c8 <__assert_func+0x34>)
 80185ae:	462b      	mov	r3, r5
 80185b0:	f000 f90e 	bl	80187d0 <fiprintf>
 80185b4:	f000 f91e 	bl	80187f4 <abort>
 80185b8:	4b04      	ldr	r3, [pc, #16]	@ (80185cc <__assert_func+0x38>)
 80185ba:	461c      	mov	r4, r3
 80185bc:	e7f3      	b.n	80185a6 <__assert_func+0x12>
 80185be:	bf00      	nop
 80185c0:	200001e4 	.word	0x200001e4
 80185c4:	0801a8dd 	.word	0x0801a8dd
 80185c8:	0801a8ea 	.word	0x0801a8ea
 80185cc:	0801a918 	.word	0x0801a918

080185d0 <_calloc_r>:
 80185d0:	b570      	push	{r4, r5, r6, lr}
 80185d2:	fba1 5402 	umull	r5, r4, r1, r2
 80185d6:	b934      	cbnz	r4, 80185e6 <_calloc_r+0x16>
 80185d8:	4629      	mov	r1, r5
 80185da:	f7fc fc5d 	bl	8014e98 <_malloc_r>
 80185de:	4606      	mov	r6, r0
 80185e0:	b928      	cbnz	r0, 80185ee <_calloc_r+0x1e>
 80185e2:	4630      	mov	r0, r6
 80185e4:	bd70      	pop	{r4, r5, r6, pc}
 80185e6:	220c      	movs	r2, #12
 80185e8:	6002      	str	r2, [r0, #0]
 80185ea:	2600      	movs	r6, #0
 80185ec:	e7f9      	b.n	80185e2 <_calloc_r+0x12>
 80185ee:	462a      	mov	r2, r5
 80185f0:	4621      	mov	r1, r4
 80185f2:	f7fd fdb1 	bl	8016158 <memset>
 80185f6:	e7f4      	b.n	80185e2 <_calloc_r+0x12>

080185f8 <_strtol_l.isra.0>:
 80185f8:	2b24      	cmp	r3, #36	@ 0x24
 80185fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185fe:	4686      	mov	lr, r0
 8018600:	4690      	mov	r8, r2
 8018602:	d801      	bhi.n	8018608 <_strtol_l.isra.0+0x10>
 8018604:	2b01      	cmp	r3, #1
 8018606:	d106      	bne.n	8018616 <_strtol_l.isra.0+0x1e>
 8018608:	f7fd fe2a 	bl	8016260 <__errno>
 801860c:	2316      	movs	r3, #22
 801860e:	6003      	str	r3, [r0, #0]
 8018610:	2000      	movs	r0, #0
 8018612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018616:	4834      	ldr	r0, [pc, #208]	@ (80186e8 <_strtol_l.isra.0+0xf0>)
 8018618:	460d      	mov	r5, r1
 801861a:	462a      	mov	r2, r5
 801861c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018620:	5d06      	ldrb	r6, [r0, r4]
 8018622:	f016 0608 	ands.w	r6, r6, #8
 8018626:	d1f8      	bne.n	801861a <_strtol_l.isra.0+0x22>
 8018628:	2c2d      	cmp	r4, #45	@ 0x2d
 801862a:	d110      	bne.n	801864e <_strtol_l.isra.0+0x56>
 801862c:	782c      	ldrb	r4, [r5, #0]
 801862e:	2601      	movs	r6, #1
 8018630:	1c95      	adds	r5, r2, #2
 8018632:	f033 0210 	bics.w	r2, r3, #16
 8018636:	d115      	bne.n	8018664 <_strtol_l.isra.0+0x6c>
 8018638:	2c30      	cmp	r4, #48	@ 0x30
 801863a:	d10d      	bne.n	8018658 <_strtol_l.isra.0+0x60>
 801863c:	782a      	ldrb	r2, [r5, #0]
 801863e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8018642:	2a58      	cmp	r2, #88	@ 0x58
 8018644:	d108      	bne.n	8018658 <_strtol_l.isra.0+0x60>
 8018646:	786c      	ldrb	r4, [r5, #1]
 8018648:	3502      	adds	r5, #2
 801864a:	2310      	movs	r3, #16
 801864c:	e00a      	b.n	8018664 <_strtol_l.isra.0+0x6c>
 801864e:	2c2b      	cmp	r4, #43	@ 0x2b
 8018650:	bf04      	itt	eq
 8018652:	782c      	ldrbeq	r4, [r5, #0]
 8018654:	1c95      	addeq	r5, r2, #2
 8018656:	e7ec      	b.n	8018632 <_strtol_l.isra.0+0x3a>
 8018658:	2b00      	cmp	r3, #0
 801865a:	d1f6      	bne.n	801864a <_strtol_l.isra.0+0x52>
 801865c:	2c30      	cmp	r4, #48	@ 0x30
 801865e:	bf14      	ite	ne
 8018660:	230a      	movne	r3, #10
 8018662:	2308      	moveq	r3, #8
 8018664:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8018668:	f10c 3cff 	add.w	ip, ip, #4294967295
 801866c:	2200      	movs	r2, #0
 801866e:	fbbc f9f3 	udiv	r9, ip, r3
 8018672:	4610      	mov	r0, r2
 8018674:	fb03 ca19 	mls	sl, r3, r9, ip
 8018678:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801867c:	2f09      	cmp	r7, #9
 801867e:	d80f      	bhi.n	80186a0 <_strtol_l.isra.0+0xa8>
 8018680:	463c      	mov	r4, r7
 8018682:	42a3      	cmp	r3, r4
 8018684:	dd1b      	ble.n	80186be <_strtol_l.isra.0+0xc6>
 8018686:	1c57      	adds	r7, r2, #1
 8018688:	d007      	beq.n	801869a <_strtol_l.isra.0+0xa2>
 801868a:	4581      	cmp	r9, r0
 801868c:	d314      	bcc.n	80186b8 <_strtol_l.isra.0+0xc0>
 801868e:	d101      	bne.n	8018694 <_strtol_l.isra.0+0x9c>
 8018690:	45a2      	cmp	sl, r4
 8018692:	db11      	blt.n	80186b8 <_strtol_l.isra.0+0xc0>
 8018694:	fb00 4003 	mla	r0, r0, r3, r4
 8018698:	2201      	movs	r2, #1
 801869a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801869e:	e7eb      	b.n	8018678 <_strtol_l.isra.0+0x80>
 80186a0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80186a4:	2f19      	cmp	r7, #25
 80186a6:	d801      	bhi.n	80186ac <_strtol_l.isra.0+0xb4>
 80186a8:	3c37      	subs	r4, #55	@ 0x37
 80186aa:	e7ea      	b.n	8018682 <_strtol_l.isra.0+0x8a>
 80186ac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80186b0:	2f19      	cmp	r7, #25
 80186b2:	d804      	bhi.n	80186be <_strtol_l.isra.0+0xc6>
 80186b4:	3c57      	subs	r4, #87	@ 0x57
 80186b6:	e7e4      	b.n	8018682 <_strtol_l.isra.0+0x8a>
 80186b8:	f04f 32ff 	mov.w	r2, #4294967295
 80186bc:	e7ed      	b.n	801869a <_strtol_l.isra.0+0xa2>
 80186be:	1c53      	adds	r3, r2, #1
 80186c0:	d108      	bne.n	80186d4 <_strtol_l.isra.0+0xdc>
 80186c2:	2322      	movs	r3, #34	@ 0x22
 80186c4:	f8ce 3000 	str.w	r3, [lr]
 80186c8:	4660      	mov	r0, ip
 80186ca:	f1b8 0f00 	cmp.w	r8, #0
 80186ce:	d0a0      	beq.n	8018612 <_strtol_l.isra.0+0x1a>
 80186d0:	1e69      	subs	r1, r5, #1
 80186d2:	e006      	b.n	80186e2 <_strtol_l.isra.0+0xea>
 80186d4:	b106      	cbz	r6, 80186d8 <_strtol_l.isra.0+0xe0>
 80186d6:	4240      	negs	r0, r0
 80186d8:	f1b8 0f00 	cmp.w	r8, #0
 80186dc:	d099      	beq.n	8018612 <_strtol_l.isra.0+0x1a>
 80186de:	2a00      	cmp	r2, #0
 80186e0:	d1f6      	bne.n	80186d0 <_strtol_l.isra.0+0xd8>
 80186e2:	f8c8 1000 	str.w	r1, [r8]
 80186e6:	e794      	b.n	8018612 <_strtol_l.isra.0+0x1a>
 80186e8:	0801a971 	.word	0x0801a971

080186ec <_strtol_r>:
 80186ec:	f7ff bf84 	b.w	80185f8 <_strtol_l.isra.0>

080186f0 <_strtoul_l.isra.0>:
 80186f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80186f4:	4e34      	ldr	r6, [pc, #208]	@ (80187c8 <_strtoul_l.isra.0+0xd8>)
 80186f6:	4686      	mov	lr, r0
 80186f8:	460d      	mov	r5, r1
 80186fa:	4628      	mov	r0, r5
 80186fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018700:	5d37      	ldrb	r7, [r6, r4]
 8018702:	f017 0708 	ands.w	r7, r7, #8
 8018706:	d1f8      	bne.n	80186fa <_strtoul_l.isra.0+0xa>
 8018708:	2c2d      	cmp	r4, #45	@ 0x2d
 801870a:	d110      	bne.n	801872e <_strtoul_l.isra.0+0x3e>
 801870c:	782c      	ldrb	r4, [r5, #0]
 801870e:	2701      	movs	r7, #1
 8018710:	1c85      	adds	r5, r0, #2
 8018712:	f033 0010 	bics.w	r0, r3, #16
 8018716:	d115      	bne.n	8018744 <_strtoul_l.isra.0+0x54>
 8018718:	2c30      	cmp	r4, #48	@ 0x30
 801871a:	d10d      	bne.n	8018738 <_strtoul_l.isra.0+0x48>
 801871c:	7828      	ldrb	r0, [r5, #0]
 801871e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8018722:	2858      	cmp	r0, #88	@ 0x58
 8018724:	d108      	bne.n	8018738 <_strtoul_l.isra.0+0x48>
 8018726:	786c      	ldrb	r4, [r5, #1]
 8018728:	3502      	adds	r5, #2
 801872a:	2310      	movs	r3, #16
 801872c:	e00a      	b.n	8018744 <_strtoul_l.isra.0+0x54>
 801872e:	2c2b      	cmp	r4, #43	@ 0x2b
 8018730:	bf04      	itt	eq
 8018732:	782c      	ldrbeq	r4, [r5, #0]
 8018734:	1c85      	addeq	r5, r0, #2
 8018736:	e7ec      	b.n	8018712 <_strtoul_l.isra.0+0x22>
 8018738:	2b00      	cmp	r3, #0
 801873a:	d1f6      	bne.n	801872a <_strtoul_l.isra.0+0x3a>
 801873c:	2c30      	cmp	r4, #48	@ 0x30
 801873e:	bf14      	ite	ne
 8018740:	230a      	movne	r3, #10
 8018742:	2308      	moveq	r3, #8
 8018744:	f04f 38ff 	mov.w	r8, #4294967295
 8018748:	2600      	movs	r6, #0
 801874a:	fbb8 f8f3 	udiv	r8, r8, r3
 801874e:	fb03 f908 	mul.w	r9, r3, r8
 8018752:	ea6f 0909 	mvn.w	r9, r9
 8018756:	4630      	mov	r0, r6
 8018758:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801875c:	f1bc 0f09 	cmp.w	ip, #9
 8018760:	d810      	bhi.n	8018784 <_strtoul_l.isra.0+0x94>
 8018762:	4664      	mov	r4, ip
 8018764:	42a3      	cmp	r3, r4
 8018766:	dd1e      	ble.n	80187a6 <_strtoul_l.isra.0+0xb6>
 8018768:	f1b6 3fff 	cmp.w	r6, #4294967295
 801876c:	d007      	beq.n	801877e <_strtoul_l.isra.0+0x8e>
 801876e:	4580      	cmp	r8, r0
 8018770:	d316      	bcc.n	80187a0 <_strtoul_l.isra.0+0xb0>
 8018772:	d101      	bne.n	8018778 <_strtoul_l.isra.0+0x88>
 8018774:	45a1      	cmp	r9, r4
 8018776:	db13      	blt.n	80187a0 <_strtoul_l.isra.0+0xb0>
 8018778:	fb00 4003 	mla	r0, r0, r3, r4
 801877c:	2601      	movs	r6, #1
 801877e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018782:	e7e9      	b.n	8018758 <_strtoul_l.isra.0+0x68>
 8018784:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8018788:	f1bc 0f19 	cmp.w	ip, #25
 801878c:	d801      	bhi.n	8018792 <_strtoul_l.isra.0+0xa2>
 801878e:	3c37      	subs	r4, #55	@ 0x37
 8018790:	e7e8      	b.n	8018764 <_strtoul_l.isra.0+0x74>
 8018792:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8018796:	f1bc 0f19 	cmp.w	ip, #25
 801879a:	d804      	bhi.n	80187a6 <_strtoul_l.isra.0+0xb6>
 801879c:	3c57      	subs	r4, #87	@ 0x57
 801879e:	e7e1      	b.n	8018764 <_strtoul_l.isra.0+0x74>
 80187a0:	f04f 36ff 	mov.w	r6, #4294967295
 80187a4:	e7eb      	b.n	801877e <_strtoul_l.isra.0+0x8e>
 80187a6:	1c73      	adds	r3, r6, #1
 80187a8:	d106      	bne.n	80187b8 <_strtoul_l.isra.0+0xc8>
 80187aa:	2322      	movs	r3, #34	@ 0x22
 80187ac:	f8ce 3000 	str.w	r3, [lr]
 80187b0:	4630      	mov	r0, r6
 80187b2:	b932      	cbnz	r2, 80187c2 <_strtoul_l.isra.0+0xd2>
 80187b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187b8:	b107      	cbz	r7, 80187bc <_strtoul_l.isra.0+0xcc>
 80187ba:	4240      	negs	r0, r0
 80187bc:	2a00      	cmp	r2, #0
 80187be:	d0f9      	beq.n	80187b4 <_strtoul_l.isra.0+0xc4>
 80187c0:	b106      	cbz	r6, 80187c4 <_strtoul_l.isra.0+0xd4>
 80187c2:	1e69      	subs	r1, r5, #1
 80187c4:	6011      	str	r1, [r2, #0]
 80187c6:	e7f5      	b.n	80187b4 <_strtoul_l.isra.0+0xc4>
 80187c8:	0801a971 	.word	0x0801a971

080187cc <_strtoul_r>:
 80187cc:	f7ff bf90 	b.w	80186f0 <_strtoul_l.isra.0>

080187d0 <fiprintf>:
 80187d0:	b40e      	push	{r1, r2, r3}
 80187d2:	b503      	push	{r0, r1, lr}
 80187d4:	4601      	mov	r1, r0
 80187d6:	ab03      	add	r3, sp, #12
 80187d8:	4805      	ldr	r0, [pc, #20]	@ (80187f0 <fiprintf+0x20>)
 80187da:	f853 2b04 	ldr.w	r2, [r3], #4
 80187de:	6800      	ldr	r0, [r0, #0]
 80187e0:	9301      	str	r3, [sp, #4]
 80187e2:	f7ff f927 	bl	8017a34 <_vfiprintf_r>
 80187e6:	b002      	add	sp, #8
 80187e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80187ec:	b003      	add	sp, #12
 80187ee:	4770      	bx	lr
 80187f0:	200001e4 	.word	0x200001e4

080187f4 <abort>:
 80187f4:	b508      	push	{r3, lr}
 80187f6:	2006      	movs	r0, #6
 80187f8:	f000 f82c 	bl	8018854 <raise>
 80187fc:	2001      	movs	r0, #1
 80187fe:	f7f5 fd5d 	bl	800e2bc <_exit>

08018802 <_raise_r>:
 8018802:	291f      	cmp	r1, #31
 8018804:	b538      	push	{r3, r4, r5, lr}
 8018806:	4605      	mov	r5, r0
 8018808:	460c      	mov	r4, r1
 801880a:	d904      	bls.n	8018816 <_raise_r+0x14>
 801880c:	2316      	movs	r3, #22
 801880e:	6003      	str	r3, [r0, #0]
 8018810:	f04f 30ff 	mov.w	r0, #4294967295
 8018814:	bd38      	pop	{r3, r4, r5, pc}
 8018816:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018818:	b112      	cbz	r2, 8018820 <_raise_r+0x1e>
 801881a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801881e:	b94b      	cbnz	r3, 8018834 <_raise_r+0x32>
 8018820:	4628      	mov	r0, r5
 8018822:	f000 f831 	bl	8018888 <_getpid_r>
 8018826:	4622      	mov	r2, r4
 8018828:	4601      	mov	r1, r0
 801882a:	4628      	mov	r0, r5
 801882c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018830:	f000 b818 	b.w	8018864 <_kill_r>
 8018834:	2b01      	cmp	r3, #1
 8018836:	d00a      	beq.n	801884e <_raise_r+0x4c>
 8018838:	1c59      	adds	r1, r3, #1
 801883a:	d103      	bne.n	8018844 <_raise_r+0x42>
 801883c:	2316      	movs	r3, #22
 801883e:	6003      	str	r3, [r0, #0]
 8018840:	2001      	movs	r0, #1
 8018842:	e7e7      	b.n	8018814 <_raise_r+0x12>
 8018844:	2100      	movs	r1, #0
 8018846:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801884a:	4620      	mov	r0, r4
 801884c:	4798      	blx	r3
 801884e:	2000      	movs	r0, #0
 8018850:	e7e0      	b.n	8018814 <_raise_r+0x12>
	...

08018854 <raise>:
 8018854:	4b02      	ldr	r3, [pc, #8]	@ (8018860 <raise+0xc>)
 8018856:	4601      	mov	r1, r0
 8018858:	6818      	ldr	r0, [r3, #0]
 801885a:	f7ff bfd2 	b.w	8018802 <_raise_r>
 801885e:	bf00      	nop
 8018860:	200001e4 	.word	0x200001e4

08018864 <_kill_r>:
 8018864:	b538      	push	{r3, r4, r5, lr}
 8018866:	4d07      	ldr	r5, [pc, #28]	@ (8018884 <_kill_r+0x20>)
 8018868:	2300      	movs	r3, #0
 801886a:	4604      	mov	r4, r0
 801886c:	4608      	mov	r0, r1
 801886e:	4611      	mov	r1, r2
 8018870:	602b      	str	r3, [r5, #0]
 8018872:	f7f5 fd13 	bl	800e29c <_kill>
 8018876:	1c43      	adds	r3, r0, #1
 8018878:	d102      	bne.n	8018880 <_kill_r+0x1c>
 801887a:	682b      	ldr	r3, [r5, #0]
 801887c:	b103      	cbz	r3, 8018880 <_kill_r+0x1c>
 801887e:	6023      	str	r3, [r4, #0]
 8018880:	bd38      	pop	{r3, r4, r5, pc}
 8018882:	bf00      	nop
 8018884:	2001362c 	.word	0x2001362c

08018888 <_getpid_r>:
 8018888:	f7f5 bd00 	b.w	800e28c <_getpid>

0801888c <_sbrk>:
 801888c:	4a04      	ldr	r2, [pc, #16]	@ (80188a0 <_sbrk+0x14>)
 801888e:	6811      	ldr	r1, [r2, #0]
 8018890:	4603      	mov	r3, r0
 8018892:	b909      	cbnz	r1, 8018898 <_sbrk+0xc>
 8018894:	4903      	ldr	r1, [pc, #12]	@ (80188a4 <_sbrk+0x18>)
 8018896:	6011      	str	r1, [r2, #0]
 8018898:	6810      	ldr	r0, [r2, #0]
 801889a:	4403      	add	r3, r0
 801889c:	6013      	str	r3, [r2, #0]
 801889e:	4770      	bx	lr
 80188a0:	20013634 	.word	0x20013634
 80188a4:	20013638 	.word	0x20013638

080188a8 <_init>:
 80188a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188aa:	bf00      	nop
 80188ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80188ae:	bc08      	pop	{r3}
 80188b0:	469e      	mov	lr, r3
 80188b2:	4770      	bx	lr

080188b4 <_fini>:
 80188b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188b6:	bf00      	nop
 80188b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80188ba:	bc08      	pop	{r3}
 80188bc:	469e      	mov	lr, r3
 80188be:	4770      	bx	lr
