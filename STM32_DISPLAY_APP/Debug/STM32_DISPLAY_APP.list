
STM32_DISPLAY_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ad8  080081d0  080081d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a18  0801cca8  0801cca8  00015ca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f6c0  0801f6c0  00019264  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801f6c0  0801f6c0  000186c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f6c8  0801f6c8  00019264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f6c8  0801f6c8  000186c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f6cc  0801f6cc  000186cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  0801f6d0  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000141ec  20000264  0801f934  00019264  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014450  0801f934  00019450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024230  00000000  00000000  00019294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fb3  00000000  00000000  0003d4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020a0  00000000  00000000  00043478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000198d  00000000  00000000  00045518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000297eb  00000000  00000000  00046ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028d50  00000000  00000000  00070690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5993  00000000  00000000  000993e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017ed73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f00  00000000  00000000  0017edb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00188cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d0 <__do_global_dtors_aux>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	4c05      	ldr	r4, [pc, #20]	@ (80081e8 <__do_global_dtors_aux+0x18>)
 80081d4:	7823      	ldrb	r3, [r4, #0]
 80081d6:	b933      	cbnz	r3, 80081e6 <__do_global_dtors_aux+0x16>
 80081d8:	4b04      	ldr	r3, [pc, #16]	@ (80081ec <__do_global_dtors_aux+0x1c>)
 80081da:	b113      	cbz	r3, 80081e2 <__do_global_dtors_aux+0x12>
 80081dc:	4804      	ldr	r0, [pc, #16]	@ (80081f0 <__do_global_dtors_aux+0x20>)
 80081de:	f3af 8000 	nop.w
 80081e2:	2301      	movs	r3, #1
 80081e4:	7023      	strb	r3, [r4, #0]
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	20000264 	.word	0x20000264
 80081ec:	00000000 	.word	0x00000000
 80081f0:	0801cc90 	.word	0x0801cc90

080081f4 <frame_dummy>:
 80081f4:	b508      	push	{r3, lr}
 80081f6:	4b03      	ldr	r3, [pc, #12]	@ (8008204 <frame_dummy+0x10>)
 80081f8:	b11b      	cbz	r3, 8008202 <frame_dummy+0xe>
 80081fa:	4903      	ldr	r1, [pc, #12]	@ (8008208 <frame_dummy+0x14>)
 80081fc:	4803      	ldr	r0, [pc, #12]	@ (800820c <frame_dummy+0x18>)
 80081fe:	f3af 8000 	nop.w
 8008202:	bd08      	pop	{r3, pc}
 8008204:	00000000 	.word	0x00000000
 8008208:	20000268 	.word	0x20000268
 800820c:	0801cc90 	.word	0x0801cc90

08008210 <strcmp>:
 8008210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008218:	2a01      	cmp	r2, #1
 800821a:	bf28      	it	cs
 800821c:	429a      	cmpcs	r2, r3
 800821e:	d0f7      	beq.n	8008210 <strcmp>
 8008220:	1ad0      	subs	r0, r2, r3
 8008222:	4770      	bx	lr
	...

08008230 <memchr>:
 8008230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008234:	2a10      	cmp	r2, #16
 8008236:	db2b      	blt.n	8008290 <memchr+0x60>
 8008238:	f010 0f07 	tst.w	r0, #7
 800823c:	d008      	beq.n	8008250 <memchr+0x20>
 800823e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008242:	3a01      	subs	r2, #1
 8008244:	428b      	cmp	r3, r1
 8008246:	d02d      	beq.n	80082a4 <memchr+0x74>
 8008248:	f010 0f07 	tst.w	r0, #7
 800824c:	b342      	cbz	r2, 80082a0 <memchr+0x70>
 800824e:	d1f6      	bne.n	800823e <memchr+0xe>
 8008250:	b4f0      	push	{r4, r5, r6, r7}
 8008252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800825a:	f022 0407 	bic.w	r4, r2, #7
 800825e:	f07f 0700 	mvns.w	r7, #0
 8008262:	2300      	movs	r3, #0
 8008264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008268:	3c08      	subs	r4, #8
 800826a:	ea85 0501 	eor.w	r5, r5, r1
 800826e:	ea86 0601 	eor.w	r6, r6, r1
 8008272:	fa85 f547 	uadd8	r5, r5, r7
 8008276:	faa3 f587 	sel	r5, r3, r7
 800827a:	fa86 f647 	uadd8	r6, r6, r7
 800827e:	faa5 f687 	sel	r6, r5, r7
 8008282:	b98e      	cbnz	r6, 80082a8 <memchr+0x78>
 8008284:	d1ee      	bne.n	8008264 <memchr+0x34>
 8008286:	bcf0      	pop	{r4, r5, r6, r7}
 8008288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800828c:	f002 0207 	and.w	r2, r2, #7
 8008290:	b132      	cbz	r2, 80082a0 <memchr+0x70>
 8008292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008296:	3a01      	subs	r2, #1
 8008298:	ea83 0301 	eor.w	r3, r3, r1
 800829c:	b113      	cbz	r3, 80082a4 <memchr+0x74>
 800829e:	d1f8      	bne.n	8008292 <memchr+0x62>
 80082a0:	2000      	movs	r0, #0
 80082a2:	4770      	bx	lr
 80082a4:	3801      	subs	r0, #1
 80082a6:	4770      	bx	lr
 80082a8:	2d00      	cmp	r5, #0
 80082aa:	bf06      	itte	eq
 80082ac:	4635      	moveq	r5, r6
 80082ae:	3803      	subeq	r0, #3
 80082b0:	3807      	subne	r0, #7
 80082b2:	f015 0f01 	tst.w	r5, #1
 80082b6:	d107      	bne.n	80082c8 <memchr+0x98>
 80082b8:	3001      	adds	r0, #1
 80082ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80082be:	bf02      	ittt	eq
 80082c0:	3001      	addeq	r0, #1
 80082c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80082c6:	3001      	addeq	r0, #1
 80082c8:	bcf0      	pop	{r4, r5, r6, r7}
 80082ca:	3801      	subs	r0, #1
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop

080082d0 <strlen>:
 80082d0:	4603      	mov	r3, r0
 80082d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	d1fb      	bne.n	80082d2 <strlen+0x2>
 80082da:	1a18      	subs	r0, r3, r0
 80082dc:	3801      	subs	r0, #1
 80082de:	4770      	bx	lr

080082e0 <__aeabi_drsub>:
 80082e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80082e4:	e002      	b.n	80082ec <__adddf3>
 80082e6:	bf00      	nop

080082e8 <__aeabi_dsub>:
 80082e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080082ec <__adddf3>:
 80082ec:	b530      	push	{r4, r5, lr}
 80082ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80082f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	bf1f      	itttt	ne
 8008302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800830a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800830e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008312:	f000 80e2 	beq.w	80084da <__adddf3+0x1ee>
 8008316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800831a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800831e:	bfb8      	it	lt
 8008320:	426d      	neglt	r5, r5
 8008322:	dd0c      	ble.n	800833e <__adddf3+0x52>
 8008324:	442c      	add	r4, r5
 8008326:	ea80 0202 	eor.w	r2, r0, r2
 800832a:	ea81 0303 	eor.w	r3, r1, r3
 800832e:	ea82 0000 	eor.w	r0, r2, r0
 8008332:	ea83 0101 	eor.w	r1, r3, r1
 8008336:	ea80 0202 	eor.w	r2, r0, r2
 800833a:	ea81 0303 	eor.w	r3, r1, r3
 800833e:	2d36      	cmp	r5, #54	@ 0x36
 8008340:	bf88      	it	hi
 8008342:	bd30      	pophi	{r4, r5, pc}
 8008344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800834c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008354:	d002      	beq.n	800835c <__adddf3+0x70>
 8008356:	4240      	negs	r0, r0
 8008358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800835c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008368:	d002      	beq.n	8008370 <__adddf3+0x84>
 800836a:	4252      	negs	r2, r2
 800836c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008370:	ea94 0f05 	teq	r4, r5
 8008374:	f000 80a7 	beq.w	80084c6 <__adddf3+0x1da>
 8008378:	f1a4 0401 	sub.w	r4, r4, #1
 800837c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008380:	db0d      	blt.n	800839e <__adddf3+0xb2>
 8008382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008386:	fa22 f205 	lsr.w	r2, r2, r5
 800838a:	1880      	adds	r0, r0, r2
 800838c:	f141 0100 	adc.w	r1, r1, #0
 8008390:	fa03 f20e 	lsl.w	r2, r3, lr
 8008394:	1880      	adds	r0, r0, r2
 8008396:	fa43 f305 	asr.w	r3, r3, r5
 800839a:	4159      	adcs	r1, r3
 800839c:	e00e      	b.n	80083bc <__adddf3+0xd0>
 800839e:	f1a5 0520 	sub.w	r5, r5, #32
 80083a2:	f10e 0e20 	add.w	lr, lr, #32
 80083a6:	2a01      	cmp	r2, #1
 80083a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80083ac:	bf28      	it	cs
 80083ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80083b2:	fa43 f305 	asr.w	r3, r3, r5
 80083b6:	18c0      	adds	r0, r0, r3
 80083b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80083bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80083c0:	d507      	bpl.n	80083d2 <__adddf3+0xe6>
 80083c2:	f04f 0e00 	mov.w	lr, #0
 80083c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80083ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80083ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80083d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80083d6:	d31b      	bcc.n	8008410 <__adddf3+0x124>
 80083d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80083dc:	d30c      	bcc.n	80083f8 <__adddf3+0x10c>
 80083de:	0849      	lsrs	r1, r1, #1
 80083e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80083e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80083e8:	f104 0401 	add.w	r4, r4, #1
 80083ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80083f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80083f4:	f080 809a 	bcs.w	800852c <__adddf3+0x240>
 80083f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80083fc:	bf08      	it	eq
 80083fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008402:	f150 0000 	adcs.w	r0, r0, #0
 8008406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800840a:	ea41 0105 	orr.w	r1, r1, r5
 800840e:	bd30      	pop	{r4, r5, pc}
 8008410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008414:	4140      	adcs	r0, r0
 8008416:	eb41 0101 	adc.w	r1, r1, r1
 800841a:	3c01      	subs	r4, #1
 800841c:	bf28      	it	cs
 800841e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8008422:	d2e9      	bcs.n	80083f8 <__adddf3+0x10c>
 8008424:	f091 0f00 	teq	r1, #0
 8008428:	bf04      	itt	eq
 800842a:	4601      	moveq	r1, r0
 800842c:	2000      	moveq	r0, #0
 800842e:	fab1 f381 	clz	r3, r1
 8008432:	bf08      	it	eq
 8008434:	3320      	addeq	r3, #32
 8008436:	f1a3 030b 	sub.w	r3, r3, #11
 800843a:	f1b3 0220 	subs.w	r2, r3, #32
 800843e:	da0c      	bge.n	800845a <__adddf3+0x16e>
 8008440:	320c      	adds	r2, #12
 8008442:	dd08      	ble.n	8008456 <__adddf3+0x16a>
 8008444:	f102 0c14 	add.w	ip, r2, #20
 8008448:	f1c2 020c 	rsb	r2, r2, #12
 800844c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008450:	fa21 f102 	lsr.w	r1, r1, r2
 8008454:	e00c      	b.n	8008470 <__adddf3+0x184>
 8008456:	f102 0214 	add.w	r2, r2, #20
 800845a:	bfd8      	it	le
 800845c:	f1c2 0c20 	rsble	ip, r2, #32
 8008460:	fa01 f102 	lsl.w	r1, r1, r2
 8008464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008468:	bfdc      	itt	le
 800846a:	ea41 010c 	orrle.w	r1, r1, ip
 800846e:	4090      	lslle	r0, r2
 8008470:	1ae4      	subs	r4, r4, r3
 8008472:	bfa2      	ittt	ge
 8008474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008478:	4329      	orrge	r1, r5
 800847a:	bd30      	popge	{r4, r5, pc}
 800847c:	ea6f 0404 	mvn.w	r4, r4
 8008480:	3c1f      	subs	r4, #31
 8008482:	da1c      	bge.n	80084be <__adddf3+0x1d2>
 8008484:	340c      	adds	r4, #12
 8008486:	dc0e      	bgt.n	80084a6 <__adddf3+0x1ba>
 8008488:	f104 0414 	add.w	r4, r4, #20
 800848c:	f1c4 0220 	rsb	r2, r4, #32
 8008490:	fa20 f004 	lsr.w	r0, r0, r4
 8008494:	fa01 f302 	lsl.w	r3, r1, r2
 8008498:	ea40 0003 	orr.w	r0, r0, r3
 800849c:	fa21 f304 	lsr.w	r3, r1, r4
 80084a0:	ea45 0103 	orr.w	r1, r5, r3
 80084a4:	bd30      	pop	{r4, r5, pc}
 80084a6:	f1c4 040c 	rsb	r4, r4, #12
 80084aa:	f1c4 0220 	rsb	r2, r4, #32
 80084ae:	fa20 f002 	lsr.w	r0, r0, r2
 80084b2:	fa01 f304 	lsl.w	r3, r1, r4
 80084b6:	ea40 0003 	orr.w	r0, r0, r3
 80084ba:	4629      	mov	r1, r5
 80084bc:	bd30      	pop	{r4, r5, pc}
 80084be:	fa21 f004 	lsr.w	r0, r1, r4
 80084c2:	4629      	mov	r1, r5
 80084c4:	bd30      	pop	{r4, r5, pc}
 80084c6:	f094 0f00 	teq	r4, #0
 80084ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80084ce:	bf06      	itte	eq
 80084d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80084d4:	3401      	addeq	r4, #1
 80084d6:	3d01      	subne	r5, #1
 80084d8:	e74e      	b.n	8008378 <__adddf3+0x8c>
 80084da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80084de:	bf18      	it	ne
 80084e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80084e4:	d029      	beq.n	800853a <__adddf3+0x24e>
 80084e6:	ea94 0f05 	teq	r4, r5
 80084ea:	bf08      	it	eq
 80084ec:	ea90 0f02 	teqeq	r0, r2
 80084f0:	d005      	beq.n	80084fe <__adddf3+0x212>
 80084f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80084f6:	bf04      	itt	eq
 80084f8:	4619      	moveq	r1, r3
 80084fa:	4610      	moveq	r0, r2
 80084fc:	bd30      	pop	{r4, r5, pc}
 80084fe:	ea91 0f03 	teq	r1, r3
 8008502:	bf1e      	ittt	ne
 8008504:	2100      	movne	r1, #0
 8008506:	2000      	movne	r0, #0
 8008508:	bd30      	popne	{r4, r5, pc}
 800850a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800850e:	d105      	bne.n	800851c <__adddf3+0x230>
 8008510:	0040      	lsls	r0, r0, #1
 8008512:	4149      	adcs	r1, r1
 8008514:	bf28      	it	cs
 8008516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800851a:	bd30      	pop	{r4, r5, pc}
 800851c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8008520:	bf3c      	itt	cc
 8008522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8008526:	bd30      	popcc	{r4, r5, pc}
 8008528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800852c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8008530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008534:	f04f 0000 	mov.w	r0, #0
 8008538:	bd30      	pop	{r4, r5, pc}
 800853a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800853e:	bf1a      	itte	ne
 8008540:	4619      	movne	r1, r3
 8008542:	4610      	movne	r0, r2
 8008544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008548:	bf1c      	itt	ne
 800854a:	460b      	movne	r3, r1
 800854c:	4602      	movne	r2, r0
 800854e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008552:	bf06      	itte	eq
 8008554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008558:	ea91 0f03 	teqeq	r1, r3
 800855c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008560:	bd30      	pop	{r4, r5, pc}
 8008562:	bf00      	nop

08008564 <__aeabi_ui2d>:
 8008564:	f090 0f00 	teq	r0, #0
 8008568:	bf04      	itt	eq
 800856a:	2100      	moveq	r1, #0
 800856c:	4770      	bxeq	lr
 800856e:	b530      	push	{r4, r5, lr}
 8008570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008578:	f04f 0500 	mov.w	r5, #0
 800857c:	f04f 0100 	mov.w	r1, #0
 8008580:	e750      	b.n	8008424 <__adddf3+0x138>
 8008582:	bf00      	nop

08008584 <__aeabi_i2d>:
 8008584:	f090 0f00 	teq	r0, #0
 8008588:	bf04      	itt	eq
 800858a:	2100      	moveq	r1, #0
 800858c:	4770      	bxeq	lr
 800858e:	b530      	push	{r4, r5, lr}
 8008590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800859c:	bf48      	it	mi
 800859e:	4240      	negmi	r0, r0
 80085a0:	f04f 0100 	mov.w	r1, #0
 80085a4:	e73e      	b.n	8008424 <__adddf3+0x138>
 80085a6:	bf00      	nop

080085a8 <__aeabi_f2d>:
 80085a8:	0042      	lsls	r2, r0, #1
 80085aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80085ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80085b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80085b6:	bf1f      	itttt	ne
 80085b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80085bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80085c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80085c4:	4770      	bxne	lr
 80085c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80085ca:	bf08      	it	eq
 80085cc:	4770      	bxeq	lr
 80085ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80085d2:	bf04      	itt	eq
 80085d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80085d8:	4770      	bxeq	lr
 80085da:	b530      	push	{r4, r5, lr}
 80085dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80085e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80085e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80085e8:	e71c      	b.n	8008424 <__adddf3+0x138>
 80085ea:	bf00      	nop

080085ec <__aeabi_ul2d>:
 80085ec:	ea50 0201 	orrs.w	r2, r0, r1
 80085f0:	bf08      	it	eq
 80085f2:	4770      	bxeq	lr
 80085f4:	b530      	push	{r4, r5, lr}
 80085f6:	f04f 0500 	mov.w	r5, #0
 80085fa:	e00a      	b.n	8008612 <__aeabi_l2d+0x16>

080085fc <__aeabi_l2d>:
 80085fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008600:	bf08      	it	eq
 8008602:	4770      	bxeq	lr
 8008604:	b530      	push	{r4, r5, lr}
 8008606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800860a:	d502      	bpl.n	8008612 <__aeabi_l2d+0x16>
 800860c:	4240      	negs	r0, r0
 800860e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800861a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800861e:	f43f aed8 	beq.w	80083d2 <__adddf3+0xe6>
 8008622:	f04f 0203 	mov.w	r2, #3
 8008626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800862a:	bf18      	it	ne
 800862c:	3203      	addne	r2, #3
 800862e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008632:	bf18      	it	ne
 8008634:	3203      	addne	r2, #3
 8008636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800863a:	f1c2 0320 	rsb	r3, r2, #32
 800863e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008642:	fa20 f002 	lsr.w	r0, r0, r2
 8008646:	fa01 fe03 	lsl.w	lr, r1, r3
 800864a:	ea40 000e 	orr.w	r0, r0, lr
 800864e:	fa21 f102 	lsr.w	r1, r1, r2
 8008652:	4414      	add	r4, r2
 8008654:	e6bd      	b.n	80083d2 <__adddf3+0xe6>
 8008656:	bf00      	nop

08008658 <__aeabi_dmul>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800865e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008666:	bf1d      	ittte	ne
 8008668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800866c:	ea94 0f0c 	teqne	r4, ip
 8008670:	ea95 0f0c 	teqne	r5, ip
 8008674:	f000 f8de 	bleq	8008834 <__aeabi_dmul+0x1dc>
 8008678:	442c      	add	r4, r5
 800867a:	ea81 0603 	eor.w	r6, r1, r3
 800867e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800868a:	bf18      	it	ne
 800868c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008698:	d038      	beq.n	800870c <__aeabi_dmul+0xb4>
 800869a:	fba0 ce02 	umull	ip, lr, r0, r2
 800869e:	f04f 0500 	mov.w	r5, #0
 80086a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80086a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80086aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80086ae:	f04f 0600 	mov.w	r6, #0
 80086b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80086b6:	f09c 0f00 	teq	ip, #0
 80086ba:	bf18      	it	ne
 80086bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80086c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80086c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80086c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80086cc:	d204      	bcs.n	80086d8 <__aeabi_dmul+0x80>
 80086ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80086d2:	416d      	adcs	r5, r5
 80086d4:	eb46 0606 	adc.w	r6, r6, r6
 80086d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80086dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80086e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80086e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80086e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80086ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80086f0:	bf88      	it	hi
 80086f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80086f6:	d81e      	bhi.n	8008736 <__aeabi_dmul+0xde>
 80086f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80086fc:	bf08      	it	eq
 80086fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008702:	f150 0000 	adcs.w	r0, r0, #0
 8008706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8008710:	ea46 0101 	orr.w	r1, r6, r1
 8008714:	ea40 0002 	orr.w	r0, r0, r2
 8008718:	ea81 0103 	eor.w	r1, r1, r3
 800871c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008720:	bfc2      	ittt	gt
 8008722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800872a:	bd70      	popgt	{r4, r5, r6, pc}
 800872c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008730:	f04f 0e00 	mov.w	lr, #0
 8008734:	3c01      	subs	r4, #1
 8008736:	f300 80ab 	bgt.w	8008890 <__aeabi_dmul+0x238>
 800873a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800873e:	bfde      	ittt	le
 8008740:	2000      	movle	r0, #0
 8008742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8008746:	bd70      	pople	{r4, r5, r6, pc}
 8008748:	f1c4 0400 	rsb	r4, r4, #0
 800874c:	3c20      	subs	r4, #32
 800874e:	da35      	bge.n	80087bc <__aeabi_dmul+0x164>
 8008750:	340c      	adds	r4, #12
 8008752:	dc1b      	bgt.n	800878c <__aeabi_dmul+0x134>
 8008754:	f104 0414 	add.w	r4, r4, #20
 8008758:	f1c4 0520 	rsb	r5, r4, #32
 800875c:	fa00 f305 	lsl.w	r3, r0, r5
 8008760:	fa20 f004 	lsr.w	r0, r0, r4
 8008764:	fa01 f205 	lsl.w	r2, r1, r5
 8008768:	ea40 0002 	orr.w	r0, r0, r2
 800876c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8008770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008778:	fa21 f604 	lsr.w	r6, r1, r4
 800877c:	eb42 0106 	adc.w	r1, r2, r6
 8008780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008784:	bf08      	it	eq
 8008786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	f1c4 040c 	rsb	r4, r4, #12
 8008790:	f1c4 0520 	rsb	r5, r4, #32
 8008794:	fa00 f304 	lsl.w	r3, r0, r4
 8008798:	fa20 f005 	lsr.w	r0, r0, r5
 800879c:	fa01 f204 	lsl.w	r2, r1, r4
 80087a0:	ea40 0002 	orr.w	r0, r0, r2
 80087a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80087ac:	f141 0100 	adc.w	r1, r1, #0
 80087b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087b4:	bf08      	it	eq
 80087b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	f1c4 0520 	rsb	r5, r4, #32
 80087c0:	fa00 f205 	lsl.w	r2, r0, r5
 80087c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80087c8:	fa20 f304 	lsr.w	r3, r0, r4
 80087cc:	fa01 f205 	lsl.w	r2, r1, r5
 80087d0:	ea43 0302 	orr.w	r3, r3, r2
 80087d4:	fa21 f004 	lsr.w	r0, r1, r4
 80087d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087dc:	fa21 f204 	lsr.w	r2, r1, r4
 80087e0:	ea20 0002 	bic.w	r0, r0, r2
 80087e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80087e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087ec:	bf08      	it	eq
 80087ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087f2:	bd70      	pop	{r4, r5, r6, pc}
 80087f4:	f094 0f00 	teq	r4, #0
 80087f8:	d10f      	bne.n	800881a <__aeabi_dmul+0x1c2>
 80087fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80087fe:	0040      	lsls	r0, r0, #1
 8008800:	eb41 0101 	adc.w	r1, r1, r1
 8008804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008808:	bf08      	it	eq
 800880a:	3c01      	subeq	r4, #1
 800880c:	d0f7      	beq.n	80087fe <__aeabi_dmul+0x1a6>
 800880e:	ea41 0106 	orr.w	r1, r1, r6
 8008812:	f095 0f00 	teq	r5, #0
 8008816:	bf18      	it	ne
 8008818:	4770      	bxne	lr
 800881a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800881e:	0052      	lsls	r2, r2, #1
 8008820:	eb43 0303 	adc.w	r3, r3, r3
 8008824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008828:	bf08      	it	eq
 800882a:	3d01      	subeq	r5, #1
 800882c:	d0f7      	beq.n	800881e <__aeabi_dmul+0x1c6>
 800882e:	ea43 0306 	orr.w	r3, r3, r6
 8008832:	4770      	bx	lr
 8008834:	ea94 0f0c 	teq	r4, ip
 8008838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800883c:	bf18      	it	ne
 800883e:	ea95 0f0c 	teqne	r5, ip
 8008842:	d00c      	beq.n	800885e <__aeabi_dmul+0x206>
 8008844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008848:	bf18      	it	ne
 800884a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800884e:	d1d1      	bne.n	80087f4 <__aeabi_dmul+0x19c>
 8008850:	ea81 0103 	eor.w	r1, r1, r3
 8008854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008858:	f04f 0000 	mov.w	r0, #0
 800885c:	bd70      	pop	{r4, r5, r6, pc}
 800885e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008862:	bf06      	itte	eq
 8008864:	4610      	moveq	r0, r2
 8008866:	4619      	moveq	r1, r3
 8008868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800886c:	d019      	beq.n	80088a2 <__aeabi_dmul+0x24a>
 800886e:	ea94 0f0c 	teq	r4, ip
 8008872:	d102      	bne.n	800887a <__aeabi_dmul+0x222>
 8008874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008878:	d113      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800887a:	ea95 0f0c 	teq	r5, ip
 800887e:	d105      	bne.n	800888c <__aeabi_dmul+0x234>
 8008880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008884:	bf1c      	itt	ne
 8008886:	4610      	movne	r0, r2
 8008888:	4619      	movne	r1, r3
 800888a:	d10a      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800888c:	ea81 0103 	eor.w	r1, r1, r3
 8008890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8008898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800889c:	f04f 0000 	mov.w	r0, #0
 80088a0:	bd70      	pop	{r4, r5, r6, pc}
 80088a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80088a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80088aa:	bd70      	pop	{r4, r5, r6, pc}

080088ac <__aeabi_ddiv>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80088b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80088b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80088ba:	bf1d      	ittte	ne
 80088bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80088c0:	ea94 0f0c 	teqne	r4, ip
 80088c4:	ea95 0f0c 	teqne	r5, ip
 80088c8:	f000 f8a7 	bleq	8008a1a <__aeabi_ddiv+0x16e>
 80088cc:	eba4 0405 	sub.w	r4, r4, r5
 80088d0:	ea81 0e03 	eor.w	lr, r1, r3
 80088d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80088d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80088dc:	f000 8088 	beq.w	80089f0 <__aeabi_ddiv+0x144>
 80088e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80088e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80088e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80088ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80088f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80088f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80088f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80088fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8008904:	429d      	cmp	r5, r3
 8008906:	bf08      	it	eq
 8008908:	4296      	cmpeq	r6, r2
 800890a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800890e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8008912:	d202      	bcs.n	800891a <__aeabi_ddiv+0x6e>
 8008914:	085b      	lsrs	r3, r3, #1
 8008916:	ea4f 0232 	mov.w	r2, r2, rrx
 800891a:	1ab6      	subs	r6, r6, r2
 800891c:	eb65 0503 	sbc.w	r5, r5, r3
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	ea4f 0232 	mov.w	r2, r2, rrx
 8008926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800892a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800892e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008936:	bf22      	ittt	cs
 8008938:	1ab6      	subcs	r6, r6, r2
 800893a:	4675      	movcs	r5, lr
 800893c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008940:	085b      	lsrs	r3, r3, #1
 8008942:	ea4f 0232 	mov.w	r2, r2, rrx
 8008946:	ebb6 0e02 	subs.w	lr, r6, r2
 800894a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800894e:	bf22      	ittt	cs
 8008950:	1ab6      	subcs	r6, r6, r2
 8008952:	4675      	movcs	r5, lr
 8008954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008958:	085b      	lsrs	r3, r3, #1
 800895a:	ea4f 0232 	mov.w	r2, r2, rrx
 800895e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008966:	bf22      	ittt	cs
 8008968:	1ab6      	subcs	r6, r6, r2
 800896a:	4675      	movcs	r5, lr
 800896c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008970:	085b      	lsrs	r3, r3, #1
 8008972:	ea4f 0232 	mov.w	r2, r2, rrx
 8008976:	ebb6 0e02 	subs.w	lr, r6, r2
 800897a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800897e:	bf22      	ittt	cs
 8008980:	1ab6      	subcs	r6, r6, r2
 8008982:	4675      	movcs	r5, lr
 8008984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008988:	ea55 0e06 	orrs.w	lr, r5, r6
 800898c:	d018      	beq.n	80089c0 <__aeabi_ddiv+0x114>
 800898e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800899a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800899e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80089a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80089a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80089aa:	d1c0      	bne.n	800892e <__aeabi_ddiv+0x82>
 80089ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089b0:	d10b      	bne.n	80089ca <__aeabi_ddiv+0x11e>
 80089b2:	ea41 0100 	orr.w	r1, r1, r0
 80089b6:	f04f 0000 	mov.w	r0, #0
 80089ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80089be:	e7b6      	b.n	800892e <__aeabi_ddiv+0x82>
 80089c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089c4:	bf04      	itt	eq
 80089c6:	4301      	orreq	r1, r0
 80089c8:	2000      	moveq	r0, #0
 80089ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80089ce:	bf88      	it	hi
 80089d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80089d4:	f63f aeaf 	bhi.w	8008736 <__aeabi_dmul+0xde>
 80089d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80089dc:	bf04      	itt	eq
 80089de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80089e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80089e6:	f150 0000 	adcs.w	r0, r0, #0
 80089ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80089f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80089f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80089fc:	bfc2      	ittt	gt
 80089fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008a06:	bd70      	popgt	{r4, r5, r6, pc}
 8008a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008a0c:	f04f 0e00 	mov.w	lr, #0
 8008a10:	3c01      	subs	r4, #1
 8008a12:	e690      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a14:	ea45 0e06 	orr.w	lr, r5, r6
 8008a18:	e68d      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008a1e:	ea94 0f0c 	teq	r4, ip
 8008a22:	bf08      	it	eq
 8008a24:	ea95 0f0c 	teqeq	r5, ip
 8008a28:	f43f af3b 	beq.w	80088a2 <__aeabi_dmul+0x24a>
 8008a2c:	ea94 0f0c 	teq	r4, ip
 8008a30:	d10a      	bne.n	8008a48 <__aeabi_ddiv+0x19c>
 8008a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008a36:	f47f af34 	bne.w	80088a2 <__aeabi_dmul+0x24a>
 8008a3a:	ea95 0f0c 	teq	r5, ip
 8008a3e:	f47f af25 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a42:	4610      	mov	r0, r2
 8008a44:	4619      	mov	r1, r3
 8008a46:	e72c      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a48:	ea95 0f0c 	teq	r5, ip
 8008a4c:	d106      	bne.n	8008a5c <__aeabi_ddiv+0x1b0>
 8008a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008a52:	f43f aefd 	beq.w	8008850 <__aeabi_dmul+0x1f8>
 8008a56:	4610      	mov	r0, r2
 8008a58:	4619      	mov	r1, r3
 8008a5a:	e722      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008a60:	bf18      	it	ne
 8008a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008a66:	f47f aec5 	bne.w	80087f4 <__aeabi_dmul+0x19c>
 8008a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008a6e:	f47f af0d 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008a76:	f47f aeeb 	bne.w	8008850 <__aeabi_dmul+0x1f8>
 8008a7a:	e712      	b.n	80088a2 <__aeabi_dmul+0x24a>

08008a7c <__gedf2>:
 8008a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8008a80:	e006      	b.n	8008a90 <__cmpdf2+0x4>
 8008a82:	bf00      	nop

08008a84 <__ledf2>:
 8008a84:	f04f 0c01 	mov.w	ip, #1
 8008a88:	e002      	b.n	8008a90 <__cmpdf2+0x4>
 8008a8a:	bf00      	nop

08008a8c <__cmpdf2>:
 8008a8c:	f04f 0c01 	mov.w	ip, #1
 8008a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008aa0:	bf18      	it	ne
 8008aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008aa6:	d01b      	beq.n	8008ae0 <__cmpdf2+0x54>
 8008aa8:	b001      	add	sp, #4
 8008aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008aae:	bf0c      	ite	eq
 8008ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008ab4:	ea91 0f03 	teqne	r1, r3
 8008ab8:	bf02      	ittt	eq
 8008aba:	ea90 0f02 	teqeq	r0, r2
 8008abe:	2000      	moveq	r0, #0
 8008ac0:	4770      	bxeq	lr
 8008ac2:	f110 0f00 	cmn.w	r0, #0
 8008ac6:	ea91 0f03 	teq	r1, r3
 8008aca:	bf58      	it	pl
 8008acc:	4299      	cmppl	r1, r3
 8008ace:	bf08      	it	eq
 8008ad0:	4290      	cmpeq	r0, r2
 8008ad2:	bf2c      	ite	cs
 8008ad4:	17d8      	asrcs	r0, r3, #31
 8008ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008ada:	f040 0001 	orr.w	r0, r0, #1
 8008ade:	4770      	bx	lr
 8008ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ae8:	d102      	bne.n	8008af0 <__cmpdf2+0x64>
 8008aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008aee:	d107      	bne.n	8008b00 <__cmpdf2+0x74>
 8008af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008af8:	d1d6      	bne.n	8008aa8 <__cmpdf2+0x1c>
 8008afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008afe:	d0d3      	beq.n	8008aa8 <__cmpdf2+0x1c>
 8008b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop

08008b08 <__aeabi_cdrcmple>:
 8008b08:	4684      	mov	ip, r0
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	4662      	mov	r2, ip
 8008b0e:	468c      	mov	ip, r1
 8008b10:	4619      	mov	r1, r3
 8008b12:	4663      	mov	r3, ip
 8008b14:	e000      	b.n	8008b18 <__aeabi_cdcmpeq>
 8008b16:	bf00      	nop

08008b18 <__aeabi_cdcmpeq>:
 8008b18:	b501      	push	{r0, lr}
 8008b1a:	f7ff ffb7 	bl	8008a8c <__cmpdf2>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	bf48      	it	mi
 8008b22:	f110 0f00 	cmnmi.w	r0, #0
 8008b26:	bd01      	pop	{r0, pc}

08008b28 <__aeabi_dcmpeq>:
 8008b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b2c:	f7ff fff4 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b30:	bf0c      	ite	eq
 8008b32:	2001      	moveq	r0, #1
 8008b34:	2000      	movne	r0, #0
 8008b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b3a:	bf00      	nop

08008b3c <__aeabi_dcmplt>:
 8008b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b40:	f7ff ffea 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b44:	bf34      	ite	cc
 8008b46:	2001      	movcc	r0, #1
 8008b48:	2000      	movcs	r0, #0
 8008b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b4e:	bf00      	nop

08008b50 <__aeabi_dcmple>:
 8008b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b54:	f7ff ffe0 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b58:	bf94      	ite	ls
 8008b5a:	2001      	movls	r0, #1
 8008b5c:	2000      	movhi	r0, #0
 8008b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b62:	bf00      	nop

08008b64 <__aeabi_dcmpge>:
 8008b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b68:	f7ff ffce 	bl	8008b08 <__aeabi_cdrcmple>
 8008b6c:	bf94      	ite	ls
 8008b6e:	2001      	movls	r0, #1
 8008b70:	2000      	movhi	r0, #0
 8008b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b76:	bf00      	nop

08008b78 <__aeabi_dcmpgt>:
 8008b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b7c:	f7ff ffc4 	bl	8008b08 <__aeabi_cdrcmple>
 8008b80:	bf34      	ite	cc
 8008b82:	2001      	movcc	r0, #1
 8008b84:	2000      	movcs	r0, #0
 8008b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b8a:	bf00      	nop

08008b8c <__aeabi_dcmpun>:
 8008b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b94:	d102      	bne.n	8008b9c <__aeabi_dcmpun+0x10>
 8008b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008b9a:	d10a      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ba4:	d102      	bne.n	8008bac <__aeabi_dcmpun+0x20>
 8008ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008baa:	d102      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008bac:	f04f 0000 	mov.w	r0, #0
 8008bb0:	4770      	bx	lr
 8008bb2:	f04f 0001 	mov.w	r0, #1
 8008bb6:	4770      	bx	lr

08008bb8 <__aeabi_d2iz>:
 8008bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008bc0:	d215      	bcs.n	8008bee <__aeabi_d2iz+0x36>
 8008bc2:	d511      	bpl.n	8008be8 <__aeabi_d2iz+0x30>
 8008bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008bcc:	d912      	bls.n	8008bf4 <__aeabi_d2iz+0x3c>
 8008bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008bde:	fa23 f002 	lsr.w	r0, r3, r2
 8008be2:	bf18      	it	ne
 8008be4:	4240      	negne	r0, r0
 8008be6:	4770      	bx	lr
 8008be8:	f04f 0000 	mov.w	r0, #0
 8008bec:	4770      	bx	lr
 8008bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008bf2:	d105      	bne.n	8008c00 <__aeabi_d2iz+0x48>
 8008bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008bf8:	bf08      	it	eq
 8008bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008bfe:	4770      	bx	lr
 8008c00:	f04f 0000 	mov.w	r0, #0
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop

08008c08 <__aeabi_d2uiz>:
 8008c08:	004a      	lsls	r2, r1, #1
 8008c0a:	d211      	bcs.n	8008c30 <__aeabi_d2uiz+0x28>
 8008c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008c10:	d211      	bcs.n	8008c36 <__aeabi_d2uiz+0x2e>
 8008c12:	d50d      	bpl.n	8008c30 <__aeabi_d2uiz+0x28>
 8008c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008c1c:	d40e      	bmi.n	8008c3c <__aeabi_d2uiz+0x34>
 8008c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8008c2e:	4770      	bx	lr
 8008c30:	f04f 0000 	mov.w	r0, #0
 8008c34:	4770      	bx	lr
 8008c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008c3a:	d102      	bne.n	8008c42 <__aeabi_d2uiz+0x3a>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	4770      	bx	lr
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	4770      	bx	lr

08008c48 <__aeabi_uldivmod>:
 8008c48:	b953      	cbnz	r3, 8008c60 <__aeabi_uldivmod+0x18>
 8008c4a:	b94a      	cbnz	r2, 8008c60 <__aeabi_uldivmod+0x18>
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	bf08      	it	eq
 8008c50:	2800      	cmpeq	r0, #0
 8008c52:	bf1c      	itt	ne
 8008c54:	f04f 31ff 	movne.w	r1, #4294967295
 8008c58:	f04f 30ff 	movne.w	r0, #4294967295
 8008c5c:	f000 b9be 	b.w	8008fdc <__aeabi_idiv0>
 8008c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8008c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008c68:	f000 f83c 	bl	8008ce4 <__udivmoddi4>
 8008c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c74:	b004      	add	sp, #16
 8008c76:	4770      	bx	lr

08008c78 <__aeabi_d2lz>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	460d      	mov	r5, r1
 8008c82:	f7ff ff5b 	bl	8008b3c <__aeabi_dcmplt>
 8008c86:	b928      	cbnz	r0, 8008c94 <__aeabi_d2lz+0x1c>
 8008c88:	4620      	mov	r0, r4
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c90:	f000 b80a 	b.w	8008ca8 <__aeabi_d2ulz>
 8008c94:	4620      	mov	r0, r4
 8008c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8008c9a:	f000 f805 	bl	8008ca8 <__aeabi_d2ulz>
 8008c9e:	4240      	negs	r0, r0
 8008ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008ca4:	bd38      	pop	{r3, r4, r5, pc}
 8008ca6:	bf00      	nop

08008ca8 <__aeabi_d2ulz>:
 8008ca8:	b5d0      	push	{r4, r6, r7, lr}
 8008caa:	4b0c      	ldr	r3, [pc, #48]	@ (8008cdc <__aeabi_d2ulz+0x34>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460f      	mov	r7, r1
 8008cb2:	f7ff fcd1 	bl	8008658 <__aeabi_dmul>
 8008cb6:	f7ff ffa7 	bl	8008c08 <__aeabi_d2uiz>
 8008cba:	4604      	mov	r4, r0
 8008cbc:	f7ff fc52 	bl	8008564 <__aeabi_ui2d>
 8008cc0:	4b07      	ldr	r3, [pc, #28]	@ (8008ce0 <__aeabi_d2ulz+0x38>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f7ff fcc8 	bl	8008658 <__aeabi_dmul>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4630      	mov	r0, r6
 8008cce:	4639      	mov	r1, r7
 8008cd0:	f7ff fb0a 	bl	80082e8 <__aeabi_dsub>
 8008cd4:	f7ff ff98 	bl	8008c08 <__aeabi_d2uiz>
 8008cd8:	4621      	mov	r1, r4
 8008cda:	bdd0      	pop	{r4, r6, r7, pc}
 8008cdc:	3df00000 	.word	0x3df00000
 8008ce0:	41f00000 	.word	0x41f00000

08008ce4 <__udivmoddi4>:
 8008ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce8:	9d08      	ldr	r5, [sp, #32]
 8008cea:	468e      	mov	lr, r1
 8008cec:	4604      	mov	r4, r0
 8008cee:	4688      	mov	r8, r1
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d14a      	bne.n	8008d8a <__udivmoddi4+0xa6>
 8008cf4:	428a      	cmp	r2, r1
 8008cf6:	4617      	mov	r7, r2
 8008cf8:	d962      	bls.n	8008dc0 <__udivmoddi4+0xdc>
 8008cfa:	fab2 f682 	clz	r6, r2
 8008cfe:	b14e      	cbz	r6, 8008d14 <__udivmoddi4+0x30>
 8008d00:	f1c6 0320 	rsb	r3, r6, #32
 8008d04:	fa01 f806 	lsl.w	r8, r1, r6
 8008d08:	fa20 f303 	lsr.w	r3, r0, r3
 8008d0c:	40b7      	lsls	r7, r6
 8008d0e:	ea43 0808 	orr.w	r8, r3, r8
 8008d12:	40b4      	lsls	r4, r6
 8008d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008d18:	fa1f fc87 	uxth.w	ip, r7
 8008d1c:	fbb8 f1fe 	udiv	r1, r8, lr
 8008d20:	0c23      	lsrs	r3, r4, #16
 8008d22:	fb0e 8811 	mls	r8, lr, r1, r8
 8008d26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008d2a:	fb01 f20c 	mul.w	r2, r1, ip
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d909      	bls.n	8008d46 <__udivmoddi4+0x62>
 8008d32:	18fb      	adds	r3, r7, r3
 8008d34:	f101 30ff 	add.w	r0, r1, #4294967295
 8008d38:	f080 80ea 	bcs.w	8008f10 <__udivmoddi4+0x22c>
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	f240 80e7 	bls.w	8008f10 <__udivmoddi4+0x22c>
 8008d42:	3902      	subs	r1, #2
 8008d44:	443b      	add	r3, r7
 8008d46:	1a9a      	subs	r2, r3, r2
 8008d48:	b2a3      	uxth	r3, r4
 8008d4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8008d4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8008d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d56:	fb00 fc0c 	mul.w	ip, r0, ip
 8008d5a:	459c      	cmp	ip, r3
 8008d5c:	d909      	bls.n	8008d72 <__udivmoddi4+0x8e>
 8008d5e:	18fb      	adds	r3, r7, r3
 8008d60:	f100 32ff 	add.w	r2, r0, #4294967295
 8008d64:	f080 80d6 	bcs.w	8008f14 <__udivmoddi4+0x230>
 8008d68:	459c      	cmp	ip, r3
 8008d6a:	f240 80d3 	bls.w	8008f14 <__udivmoddi4+0x230>
 8008d6e:	443b      	add	r3, r7
 8008d70:	3802      	subs	r0, #2
 8008d72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008d76:	eba3 030c 	sub.w	r3, r3, ip
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	b11d      	cbz	r5, 8008d86 <__udivmoddi4+0xa2>
 8008d7e:	40f3      	lsrs	r3, r6
 8008d80:	2200      	movs	r2, #0
 8008d82:	e9c5 3200 	strd	r3, r2, [r5]
 8008d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8a:	428b      	cmp	r3, r1
 8008d8c:	d905      	bls.n	8008d9a <__udivmoddi4+0xb6>
 8008d8e:	b10d      	cbz	r5, 8008d94 <__udivmoddi4+0xb0>
 8008d90:	e9c5 0100 	strd	r0, r1, [r5]
 8008d94:	2100      	movs	r1, #0
 8008d96:	4608      	mov	r0, r1
 8008d98:	e7f5      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008d9a:	fab3 f183 	clz	r1, r3
 8008d9e:	2900      	cmp	r1, #0
 8008da0:	d146      	bne.n	8008e30 <__udivmoddi4+0x14c>
 8008da2:	4573      	cmp	r3, lr
 8008da4:	d302      	bcc.n	8008dac <__udivmoddi4+0xc8>
 8008da6:	4282      	cmp	r2, r0
 8008da8:	f200 8105 	bhi.w	8008fb6 <__udivmoddi4+0x2d2>
 8008dac:	1a84      	subs	r4, r0, r2
 8008dae:	eb6e 0203 	sbc.w	r2, lr, r3
 8008db2:	2001      	movs	r0, #1
 8008db4:	4690      	mov	r8, r2
 8008db6:	2d00      	cmp	r5, #0
 8008db8:	d0e5      	beq.n	8008d86 <__udivmoddi4+0xa2>
 8008dba:	e9c5 4800 	strd	r4, r8, [r5]
 8008dbe:	e7e2      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008dc0:	2a00      	cmp	r2, #0
 8008dc2:	f000 8090 	beq.w	8008ee6 <__udivmoddi4+0x202>
 8008dc6:	fab2 f682 	clz	r6, r2
 8008dca:	2e00      	cmp	r6, #0
 8008dcc:	f040 80a4 	bne.w	8008f18 <__udivmoddi4+0x234>
 8008dd0:	1a8a      	subs	r2, r1, r2
 8008dd2:	0c03      	lsrs	r3, r0, #16
 8008dd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008dd8:	b280      	uxth	r0, r0
 8008dda:	b2bc      	uxth	r4, r7
 8008ddc:	2101      	movs	r1, #1
 8008dde:	fbb2 fcfe 	udiv	ip, r2, lr
 8008de2:	fb0e 221c 	mls	r2, lr, ip, r2
 8008de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dea:	fb04 f20c 	mul.w	r2, r4, ip
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d907      	bls.n	8008e02 <__udivmoddi4+0x11e>
 8008df2:	18fb      	adds	r3, r7, r3
 8008df4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008df8:	d202      	bcs.n	8008e00 <__udivmoddi4+0x11c>
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	f200 80e0 	bhi.w	8008fc0 <__udivmoddi4+0x2dc>
 8008e00:	46c4      	mov	ip, r8
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	fbb3 f2fe 	udiv	r2, r3, lr
 8008e08:	fb0e 3312 	mls	r3, lr, r2, r3
 8008e0c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8008e10:	fb02 f404 	mul.w	r4, r2, r4
 8008e14:	429c      	cmp	r4, r3
 8008e16:	d907      	bls.n	8008e28 <__udivmoddi4+0x144>
 8008e18:	18fb      	adds	r3, r7, r3
 8008e1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8008e1e:	d202      	bcs.n	8008e26 <__udivmoddi4+0x142>
 8008e20:	429c      	cmp	r4, r3
 8008e22:	f200 80ca 	bhi.w	8008fba <__udivmoddi4+0x2d6>
 8008e26:	4602      	mov	r2, r0
 8008e28:	1b1b      	subs	r3, r3, r4
 8008e2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8008e2e:	e7a5      	b.n	8008d7c <__udivmoddi4+0x98>
 8008e30:	f1c1 0620 	rsb	r6, r1, #32
 8008e34:	408b      	lsls	r3, r1
 8008e36:	fa22 f706 	lsr.w	r7, r2, r6
 8008e3a:	431f      	orrs	r7, r3
 8008e3c:	fa0e f401 	lsl.w	r4, lr, r1
 8008e40:	fa20 f306 	lsr.w	r3, r0, r6
 8008e44:	fa2e fe06 	lsr.w	lr, lr, r6
 8008e48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008e4c:	4323      	orrs	r3, r4
 8008e4e:	fa00 f801 	lsl.w	r8, r0, r1
 8008e52:	fa1f fc87 	uxth.w	ip, r7
 8008e56:	fbbe f0f9 	udiv	r0, lr, r9
 8008e5a:	0c1c      	lsrs	r4, r3, #16
 8008e5c:	fb09 ee10 	mls	lr, r9, r0, lr
 8008e60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008e64:	fb00 fe0c 	mul.w	lr, r0, ip
 8008e68:	45a6      	cmp	lr, r4
 8008e6a:	fa02 f201 	lsl.w	r2, r2, r1
 8008e6e:	d909      	bls.n	8008e84 <__udivmoddi4+0x1a0>
 8008e70:	193c      	adds	r4, r7, r4
 8008e72:	f100 3aff 	add.w	sl, r0, #4294967295
 8008e76:	f080 809c 	bcs.w	8008fb2 <__udivmoddi4+0x2ce>
 8008e7a:	45a6      	cmp	lr, r4
 8008e7c:	f240 8099 	bls.w	8008fb2 <__udivmoddi4+0x2ce>
 8008e80:	3802      	subs	r0, #2
 8008e82:	443c      	add	r4, r7
 8008e84:	eba4 040e 	sub.w	r4, r4, lr
 8008e88:	fa1f fe83 	uxth.w	lr, r3
 8008e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8008e90:	fb09 4413 	mls	r4, r9, r3, r4
 8008e94:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8008e98:	fb03 fc0c 	mul.w	ip, r3, ip
 8008e9c:	45a4      	cmp	ip, r4
 8008e9e:	d908      	bls.n	8008eb2 <__udivmoddi4+0x1ce>
 8008ea0:	193c      	adds	r4, r7, r4
 8008ea2:	f103 3eff 	add.w	lr, r3, #4294967295
 8008ea6:	f080 8082 	bcs.w	8008fae <__udivmoddi4+0x2ca>
 8008eaa:	45a4      	cmp	ip, r4
 8008eac:	d97f      	bls.n	8008fae <__udivmoddi4+0x2ca>
 8008eae:	3b02      	subs	r3, #2
 8008eb0:	443c      	add	r4, r7
 8008eb2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008eb6:	eba4 040c 	sub.w	r4, r4, ip
 8008eba:	fba0 ec02 	umull	lr, ip, r0, r2
 8008ebe:	4564      	cmp	r4, ip
 8008ec0:	4673      	mov	r3, lr
 8008ec2:	46e1      	mov	r9, ip
 8008ec4:	d362      	bcc.n	8008f8c <__udivmoddi4+0x2a8>
 8008ec6:	d05f      	beq.n	8008f88 <__udivmoddi4+0x2a4>
 8008ec8:	b15d      	cbz	r5, 8008ee2 <__udivmoddi4+0x1fe>
 8008eca:	ebb8 0203 	subs.w	r2, r8, r3
 8008ece:	eb64 0409 	sbc.w	r4, r4, r9
 8008ed2:	fa04 f606 	lsl.w	r6, r4, r6
 8008ed6:	fa22 f301 	lsr.w	r3, r2, r1
 8008eda:	431e      	orrs	r6, r3
 8008edc:	40cc      	lsrs	r4, r1
 8008ede:	e9c5 6400 	strd	r6, r4, [r5]
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	e74f      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008ee6:	fbb1 fcf2 	udiv	ip, r1, r2
 8008eea:	0c01      	lsrs	r1, r0, #16
 8008eec:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8008ef0:	b280      	uxth	r0, r0
 8008ef2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8008ef6:	463b      	mov	r3, r7
 8008ef8:	4638      	mov	r0, r7
 8008efa:	463c      	mov	r4, r7
 8008efc:	46b8      	mov	r8, r7
 8008efe:	46be      	mov	lr, r7
 8008f00:	2620      	movs	r6, #32
 8008f02:	fbb1 f1f7 	udiv	r1, r1, r7
 8008f06:	eba2 0208 	sub.w	r2, r2, r8
 8008f0a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8008f0e:	e766      	b.n	8008dde <__udivmoddi4+0xfa>
 8008f10:	4601      	mov	r1, r0
 8008f12:	e718      	b.n	8008d46 <__udivmoddi4+0x62>
 8008f14:	4610      	mov	r0, r2
 8008f16:	e72c      	b.n	8008d72 <__udivmoddi4+0x8e>
 8008f18:	f1c6 0220 	rsb	r2, r6, #32
 8008f1c:	fa2e f302 	lsr.w	r3, lr, r2
 8008f20:	40b7      	lsls	r7, r6
 8008f22:	40b1      	lsls	r1, r6
 8008f24:	fa20 f202 	lsr.w	r2, r0, r2
 8008f28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	fbb3 f8fe 	udiv	r8, r3, lr
 8008f32:	b2bc      	uxth	r4, r7
 8008f34:	fb0e 3318 	mls	r3, lr, r8, r3
 8008f38:	0c11      	lsrs	r1, r2, #16
 8008f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008f3e:	fb08 f904 	mul.w	r9, r8, r4
 8008f42:	40b0      	lsls	r0, r6
 8008f44:	4589      	cmp	r9, r1
 8008f46:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8008f4a:	b280      	uxth	r0, r0
 8008f4c:	d93e      	bls.n	8008fcc <__udivmoddi4+0x2e8>
 8008f4e:	1879      	adds	r1, r7, r1
 8008f50:	f108 3cff 	add.w	ip, r8, #4294967295
 8008f54:	d201      	bcs.n	8008f5a <__udivmoddi4+0x276>
 8008f56:	4589      	cmp	r9, r1
 8008f58:	d81f      	bhi.n	8008f9a <__udivmoddi4+0x2b6>
 8008f5a:	eba1 0109 	sub.w	r1, r1, r9
 8008f5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8008f62:	fb09 f804 	mul.w	r8, r9, r4
 8008f66:	fb0e 1119 	mls	r1, lr, r9, r1
 8008f6a:	b292      	uxth	r2, r2
 8008f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008f70:	4542      	cmp	r2, r8
 8008f72:	d229      	bcs.n	8008fc8 <__udivmoddi4+0x2e4>
 8008f74:	18ba      	adds	r2, r7, r2
 8008f76:	f109 31ff 	add.w	r1, r9, #4294967295
 8008f7a:	d2c4      	bcs.n	8008f06 <__udivmoddi4+0x222>
 8008f7c:	4542      	cmp	r2, r8
 8008f7e:	d2c2      	bcs.n	8008f06 <__udivmoddi4+0x222>
 8008f80:	f1a9 0102 	sub.w	r1, r9, #2
 8008f84:	443a      	add	r2, r7
 8008f86:	e7be      	b.n	8008f06 <__udivmoddi4+0x222>
 8008f88:	45f0      	cmp	r8, lr
 8008f8a:	d29d      	bcs.n	8008ec8 <__udivmoddi4+0x1e4>
 8008f8c:	ebbe 0302 	subs.w	r3, lr, r2
 8008f90:	eb6c 0c07 	sbc.w	ip, ip, r7
 8008f94:	3801      	subs	r0, #1
 8008f96:	46e1      	mov	r9, ip
 8008f98:	e796      	b.n	8008ec8 <__udivmoddi4+0x1e4>
 8008f9a:	eba7 0909 	sub.w	r9, r7, r9
 8008f9e:	4449      	add	r1, r9
 8008fa0:	f1a8 0c02 	sub.w	ip, r8, #2
 8008fa4:	fbb1 f9fe 	udiv	r9, r1, lr
 8008fa8:	fb09 f804 	mul.w	r8, r9, r4
 8008fac:	e7db      	b.n	8008f66 <__udivmoddi4+0x282>
 8008fae:	4673      	mov	r3, lr
 8008fb0:	e77f      	b.n	8008eb2 <__udivmoddi4+0x1ce>
 8008fb2:	4650      	mov	r0, sl
 8008fb4:	e766      	b.n	8008e84 <__udivmoddi4+0x1a0>
 8008fb6:	4608      	mov	r0, r1
 8008fb8:	e6fd      	b.n	8008db6 <__udivmoddi4+0xd2>
 8008fba:	443b      	add	r3, r7
 8008fbc:	3a02      	subs	r2, #2
 8008fbe:	e733      	b.n	8008e28 <__udivmoddi4+0x144>
 8008fc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8008fc4:	443b      	add	r3, r7
 8008fc6:	e71c      	b.n	8008e02 <__udivmoddi4+0x11e>
 8008fc8:	4649      	mov	r1, r9
 8008fca:	e79c      	b.n	8008f06 <__udivmoddi4+0x222>
 8008fcc:	eba1 0109 	sub.w	r1, r1, r9
 8008fd0:	46c4      	mov	ip, r8
 8008fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8008fd6:	fb09 f804 	mul.w	r8, r9, r4
 8008fda:	e7c4      	b.n	8008f66 <__udivmoddi4+0x282>

08008fdc <__aeabi_idiv0>:
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop

08008fe0 <Display_Handler>:

button_position_t current_buttons[6];
int button_count = 0;

void Display_Handler(void *param)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Menu_Handler();
 8008fe8:	f000 ff34 	bl	8009e54 <Menu_Handler>
 8008fec:	e7fc      	b.n	8008fe8 <Display_Handler+0x8>
	...

08008ff0 <updateToDisplayMenu>:
	}
}

void updateToDisplayMenu(void)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	af00      	add	r7, sp, #0
	if(current_menu == MENU_TOTAL_CONTROL)
 8008ff4:	4b10      	ldr	r3, [pc, #64]	@ (8009038 <updateToDisplayMenu+0x48>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d106      	bne.n	800900a <updateToDisplayMenu+0x1a>
	{
		last_selection = current_selection;
 8008ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800903c <updateToDisplayMenu+0x4c>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a0f      	ldr	r2, [pc, #60]	@ (8009040 <updateToDisplayMenu+0x50>)
 8009002:	6013      	str	r3, [r2, #0]
		displayTotalControlMenu();
 8009004:	f000 f89a 	bl	800913c <displayTotalControlMenu>
	else if(current_menu == MENU_DEVICE_CONTROL)
	{
		last_selection = current_selection;
		displayDeviceControlMenu();
	}
}
 8009008:	e014      	b.n	8009034 <updateToDisplayMenu+0x44>
	else if(current_menu == MENU_SEPARATE_CONTROL)
 800900a:	4b0b      	ldr	r3, [pc, #44]	@ (8009038 <updateToDisplayMenu+0x48>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b02      	cmp	r3, #2
 8009010:	d106      	bne.n	8009020 <updateToDisplayMenu+0x30>
		last_selection = current_selection;
 8009012:	4b0a      	ldr	r3, [pc, #40]	@ (800903c <updateToDisplayMenu+0x4c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a0a      	ldr	r2, [pc, #40]	@ (8009040 <updateToDisplayMenu+0x50>)
 8009018:	6013      	str	r3, [r2, #0]
		displaySeparateControlMenu();
 800901a:	f000 f96d 	bl	80092f8 <displaySeparateControlMenu>
}
 800901e:	e009      	b.n	8009034 <updateToDisplayMenu+0x44>
	else if(current_menu == MENU_DEVICE_CONTROL)
 8009020:	4b05      	ldr	r3, [pc, #20]	@ (8009038 <updateToDisplayMenu+0x48>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b03      	cmp	r3, #3
 8009026:	d105      	bne.n	8009034 <updateToDisplayMenu+0x44>
		last_selection = current_selection;
 8009028:	4b04      	ldr	r3, [pc, #16]	@ (800903c <updateToDisplayMenu+0x4c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a04      	ldr	r2, [pc, #16]	@ (8009040 <updateToDisplayMenu+0x50>)
 800902e:	6013      	str	r3, [r2, #0]
		displayDeviceControlMenu();
 8009030:	f000 fa3c 	bl	80094ac <displayDeviceControlMenu>
}
 8009034:	bf00      	nop
 8009036:	bd80      	pop	{r7, pc}
 8009038:	20000280 	.word	0x20000280
 800903c:	20000284 	.word	0x20000284
 8009040:	20000000 	.word	0x20000000

08009044 <displayMainMenu>:

void displayMainMenu(void)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af04      	add	r7, sp, #16
	if (current_menu != last_menu || !menu_drawn)
 800904a:	4b32      	ldr	r3, [pc, #200]	@ (8009114 <displayMainMenu+0xd0>)
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	4b32      	ldr	r3, [pc, #200]	@ (8009118 <displayMainMenu+0xd4>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	429a      	cmp	r2, r3
 8009054:	d106      	bne.n	8009064 <displayMainMenu+0x20>
 8009056:	4b31      	ldr	r3, [pc, #196]	@ (800911c <displayMainMenu+0xd8>)
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	f083 0301 	eor.w	r3, r3, #1
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	d012      	beq.n	800908a <displayMainMenu+0x46>
	{
		ST7735_SetRotation(1);
 8009064:	2001      	movs	r0, #1
 8009066:	f004 fccd 	bl	800da04 <ST7735_SetRotation>
		fillScreen(BLACK);
 800906a:	2000      	movs	r0, #0
 800906c:	f004 fb92 	bl	800d794 <fillScreen>
		drawTitleBar("HOME MENU");
 8009070:	482b      	ldr	r0, [pc, #172]	@ (8009120 <displayMainMenu+0xdc>)
 8009072:	f001 fa05 	bl	800a480 <drawTitleBar>
		menu_drawn = true;
 8009076:	4b29      	ldr	r3, [pc, #164]	@ (800911c <displayMainMenu+0xd8>)
 8009078:	2201      	movs	r2, #1
 800907a:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 800907c:	4b29      	ldr	r3, [pc, #164]	@ (8009124 <displayMainMenu+0xe0>)
 800907e:	2200      	movs	r2, #0
 8009080:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 8009082:	4b24      	ldr	r3, [pc, #144]	@ (8009114 <displayMainMenu+0xd0>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a24      	ldr	r2, [pc, #144]	@ (8009118 <displayMainMenu+0xd4>)
 8009088:	6013      	str	r3, [r2, #0]
	}

	if (!buttons_drawn || last_selection != current_selection)
 800908a:	4b26      	ldr	r3, [pc, #152]	@ (8009124 <displayMainMenu+0xe0>)
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	f083 0301 	eor.w	r3, r3, #1
 8009092:	b2db      	uxtb	r3, r3
 8009094:	2b00      	cmp	r3, #0
 8009096:	d105      	bne.n	80090a4 <displayMainMenu+0x60>
 8009098:	4b23      	ldr	r3, [pc, #140]	@ (8009128 <displayMainMenu+0xe4>)
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	4b23      	ldr	r3, [pc, #140]	@ (800912c <displayMainMenu+0xe8>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d02f      	beq.n	8009104 <displayMainMenu+0xc0>
	{
		int start_y = TITLE_HEIGHT + 15;
 80090a4:	231e      	movs	r3, #30
 80090a6:	607b      	str	r3, [r7, #4]
		button_count = 2;
 80090a8:	4b21      	ldr	r3, [pc, #132]	@ (8009130 <displayMainMenu+0xec>)
 80090aa:	2202      	movs	r2, #2
 80090ac:	601a      	str	r2, [r3, #0]

		drawSingleButton(MARGIN_X, start_y, BUTTON_WIDTH, BUTTON_HEIGHT,
 80090ae:	4b1f      	ldr	r3, [pc, #124]	@ (800912c <displayMainMenu+0xe8>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	bf0c      	ite	eq
 80090b6:	2301      	moveq	r3, #1
 80090b8:	2300      	movne	r3, #0
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	461a      	mov	r2, r3
 80090be:	2300      	movs	r3, #0
 80090c0:	9302      	str	r3, [sp, #8]
 80090c2:	9201      	str	r2, [sp, #4]
 80090c4:	4b1b      	ldr	r3, [pc, #108]	@ (8009134 <displayMainMenu+0xf0>)
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	2312      	movs	r3, #18
 80090ca:	228c      	movs	r2, #140	@ 0x8c
 80090cc:	6879      	ldr	r1, [r7, #4]
 80090ce:	200a      	movs	r0, #10
 80090d0:	f000 ff6c 	bl	8009fac <drawSingleButton>
						"MASTER CONTROL", (current_selection == 0), 0);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT,
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f103 0116 	add.w	r1, r3, #22
 80090da:	4b14      	ldr	r3, [pc, #80]	@ (800912c <displayMainMenu+0xe8>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	bf0c      	ite	eq
 80090e2:	2301      	moveq	r3, #1
 80090e4:	2300      	movne	r3, #0
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	461a      	mov	r2, r3
 80090ea:	2301      	movs	r3, #1
 80090ec:	9302      	str	r3, [sp, #8]
 80090ee:	9201      	str	r2, [sp, #4]
 80090f0:	4b11      	ldr	r3, [pc, #68]	@ (8009138 <displayMainMenu+0xf4>)
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	2312      	movs	r3, #18
 80090f6:	228c      	movs	r2, #140	@ 0x8c
 80090f8:	200a      	movs	r0, #10
 80090fa:	f000 ff57 	bl	8009fac <drawSingleButton>
						"DEVICE LIST", (current_selection == 1), 1);

		buttons_drawn = true;
 80090fe:	4b09      	ldr	r3, [pc, #36]	@ (8009124 <displayMainMenu+0xe0>)
 8009100:	2201      	movs	r2, #1
 8009102:	701a      	strb	r2, [r3, #0]
	}

	last_selection = current_selection;
 8009104:	4b09      	ldr	r3, [pc, #36]	@ (800912c <displayMainMenu+0xe8>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a07      	ldr	r2, [pc, #28]	@ (8009128 <displayMainMenu+0xe4>)
 800910a:	6013      	str	r3, [r2, #0]
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	20000280 	.word	0x20000280
 8009118:	20000004 	.word	0x20000004
 800911c:	200002a8 	.word	0x200002a8
 8009120:	0801cca8 	.word	0x0801cca8
 8009124:	200002a9 	.word	0x200002a9
 8009128:	20000000 	.word	0x20000000
 800912c:	20000284 	.word	0x20000284
 8009130:	200003cc 	.word	0x200003cc
 8009134:	0801ccb4 	.word	0x0801ccb4
 8009138:	0801ccc4 	.word	0x0801ccc4

0800913c <displayTotalControlMenu>:

void displayTotalControlMenu(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b08a      	sub	sp, #40	@ 0x28
 8009140:	af04      	add	r7, sp, #16
	bool states_changed = false;
 8009142:	2300      	movs	r3, #0
 8009144:	75fb      	strb	r3, [r7, #23]
	syncDisplayDeviceStates();
 8009146:	f000 fc9b 	bl	8009a80 <syncDisplayDeviceStates>

	for (int i = 0; i < 4; i++)
 800914a:	2300      	movs	r3, #0
 800914c:	613b      	str	r3, [r7, #16]
 800914e:	e016      	b.n	800917e <displayTotalControlMenu+0x42>
	{
		if (device_states[i] != last_device_states[i])
 8009150:	4a5c      	ldr	r2, [pc, #368]	@ (80092c4 <displayTotalControlMenu+0x188>)
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009158:	495b      	ldr	r1, [pc, #364]	@ (80092c8 <displayTotalControlMenu+0x18c>)
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009160:	429a      	cmp	r2, r3
 8009162:	d009      	beq.n	8009178 <displayTotalControlMenu+0x3c>
		{
			states_changed = true;
 8009164:	2301      	movs	r3, #1
 8009166:	75fb      	strb	r3, [r7, #23]
			last_device_states[i] = device_states[i];
 8009168:	4a56      	ldr	r2, [pc, #344]	@ (80092c4 <displayTotalControlMenu+0x188>)
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009170:	4955      	ldr	r1, [pc, #340]	@ (80092c8 <displayTotalControlMenu+0x18c>)
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++)
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	3301      	adds	r3, #1
 800917c:	613b      	str	r3, [r7, #16]
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	2b03      	cmp	r3, #3
 8009182:	dde5      	ble.n	8009150 <displayTotalControlMenu+0x14>
		}
	}

	if (current_menu != last_menu || !menu_drawn)
 8009184:	4b51      	ldr	r3, [pc, #324]	@ (80092cc <displayTotalControlMenu+0x190>)
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	4b51      	ldr	r3, [pc, #324]	@ (80092d0 <displayTotalControlMenu+0x194>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	429a      	cmp	r2, r3
 800918e:	d106      	bne.n	800919e <displayTotalControlMenu+0x62>
 8009190:	4b50      	ldr	r3, [pc, #320]	@ (80092d4 <displayTotalControlMenu+0x198>)
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	f083 0301 	eor.w	r3, r3, #1
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d014      	beq.n	80091c8 <displayTotalControlMenu+0x8c>
	{
		ST7735_SetRotation(1);
 800919e:	2001      	movs	r0, #1
 80091a0:	f004 fc30 	bl	800da04 <ST7735_SetRotation>
		fillScreen(BLACK);
 80091a4:	2000      	movs	r0, #0
 80091a6:	f004 faf5 	bl	800d794 <fillScreen>
		drawTitleBar("MASTER CONTROL");
 80091aa:	484b      	ldr	r0, [pc, #300]	@ (80092d8 <displayTotalControlMenu+0x19c>)
 80091ac:	f001 f968 	bl	800a480 <drawTitleBar>
		menu_drawn = true;
 80091b0:	4b48      	ldr	r3, [pc, #288]	@ (80092d4 <displayTotalControlMenu+0x198>)
 80091b2:	2201      	movs	r2, #1
 80091b4:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 80091b6:	4b49      	ldr	r3, [pc, #292]	@ (80092dc <displayTotalControlMenu+0x1a0>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 80091bc:	4b43      	ldr	r3, [pc, #268]	@ (80092cc <displayTotalControlMenu+0x190>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a43      	ldr	r2, [pc, #268]	@ (80092d0 <displayTotalControlMenu+0x194>)
 80091c2:	6013      	str	r3, [r2, #0]
		states_changed = true;
 80091c4:	2301      	movs	r3, #1
 80091c6:	75fb      	strb	r3, [r7, #23]
	}

	if (states_changed)
 80091c8:	7dfb      	ldrb	r3, [r7, #23]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d016      	beq.n	80091fc <displayTotalControlMenu+0xc0>
	{
		int total_on = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < 4; i++)
 80091d2:	2300      	movs	r3, #0
 80091d4:	60bb      	str	r3, [r7, #8]
 80091d6:	e00b      	b.n	80091f0 <displayTotalControlMenu+0xb4>
		{
			if (device_states[i]) total_on++;
 80091d8:	4a3a      	ldr	r2, [pc, #232]	@ (80092c4 <displayTotalControlMenu+0x188>)
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d002      	beq.n	80091ea <displayTotalControlMenu+0xae>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	3301      	adds	r3, #1
 80091e8:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < 4; i++)
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	3301      	adds	r3, #1
 80091ee:	60bb      	str	r3, [r7, #8]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	ddf0      	ble.n	80091d8 <displayTotalControlMenu+0x9c>
		}
		updateDeviceCount(total_on);
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f001 f8ec 	bl	800a3d4 <updateDeviceCount>
	}

	if (!buttons_drawn)
 80091fc:	4b37      	ldr	r3, [pc, #220]	@ (80092dc <displayTotalControlMenu+0x1a0>)
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	f083 0301 	eor.w	r3, r3, #1
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d045      	beq.n	8009296 <displayTotalControlMenu+0x15a>
	{
		int start_y = TITLE_HEIGHT + 25;
 800920a:	2328      	movs	r3, #40	@ 0x28
 800920c:	607b      	str	r3, [r7, #4]
		button_count = 3;
 800920e:	4b34      	ldr	r3, [pc, #208]	@ (80092e0 <displayTotalControlMenu+0x1a4>)
 8009210:	2203      	movs	r2, #3
 8009212:	601a      	str	r2, [r3, #0]

		drawSingleButton(MARGIN_X, start_y, BUTTON_WIDTH, BUTTON_HEIGHT,
 8009214:	4b33      	ldr	r3, [pc, #204]	@ (80092e4 <displayTotalControlMenu+0x1a8>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	bf0c      	ite	eq
 800921c:	2301      	moveq	r3, #1
 800921e:	2300      	movne	r3, #0
 8009220:	b2db      	uxtb	r3, r3
 8009222:	461a      	mov	r2, r3
 8009224:	2300      	movs	r3, #0
 8009226:	9302      	str	r3, [sp, #8]
 8009228:	9201      	str	r2, [sp, #4]
 800922a:	4b2f      	ldr	r3, [pc, #188]	@ (80092e8 <displayTotalControlMenu+0x1ac>)
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	2312      	movs	r3, #18
 8009230:	228c      	movs	r2, #140	@ 0x8c
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	200a      	movs	r0, #10
 8009236:	f000 feb9 	bl	8009fac <drawSingleButton>
						"TOTAL ON", (current_selection == 0), 0);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT,
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f103 0116 	add.w	r1, r3, #22
 8009240:	4b28      	ldr	r3, [pc, #160]	@ (80092e4 <displayTotalControlMenu+0x1a8>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b01      	cmp	r3, #1
 8009246:	bf0c      	ite	eq
 8009248:	2301      	moveq	r3, #1
 800924a:	2300      	movne	r3, #0
 800924c:	b2db      	uxtb	r3, r3
 800924e:	461a      	mov	r2, r3
 8009250:	2301      	movs	r3, #1
 8009252:	9302      	str	r3, [sp, #8]
 8009254:	9201      	str	r2, [sp, #4]
 8009256:	4b25      	ldr	r3, [pc, #148]	@ (80092ec <displayTotalControlMenu+0x1b0>)
 8009258:	9300      	str	r3, [sp, #0]
 800925a:	2312      	movs	r3, #18
 800925c:	228c      	movs	r2, #140	@ 0x8c
 800925e:	200a      	movs	r0, #10
 8009260:	f000 fea4 	bl	8009fac <drawSingleButton>
						"TOTAL OFF", (current_selection == 1), 1);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING*2, BUTTON_WIDTH, BUTTON_HEIGHT,
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 800926a:	4b1e      	ldr	r3, [pc, #120]	@ (80092e4 <displayTotalControlMenu+0x1a8>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b02      	cmp	r3, #2
 8009270:	bf0c      	ite	eq
 8009272:	2301      	moveq	r3, #1
 8009274:	2300      	movne	r3, #0
 8009276:	b2db      	uxtb	r3, r3
 8009278:	461a      	mov	r2, r3
 800927a:	2302      	movs	r3, #2
 800927c:	9302      	str	r3, [sp, #8]
 800927e:	9201      	str	r2, [sp, #4]
 8009280:	4b1b      	ldr	r3, [pc, #108]	@ (80092f0 <displayTotalControlMenu+0x1b4>)
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	2312      	movs	r3, #18
 8009286:	228c      	movs	r2, #140	@ 0x8c
 8009288:	200a      	movs	r0, #10
 800928a:	f000 fe8f 	bl	8009fac <drawSingleButton>
						"GO BACK", (current_selection == 2), 2);

		buttons_drawn = true;
 800928e:	4b13      	ldr	r3, [pc, #76]	@ (80092dc <displayTotalControlMenu+0x1a0>)
 8009290:	2201      	movs	r2, #1
 8009292:	701a      	strb	r2, [r3, #0]
 8009294:	e00d      	b.n	80092b2 <displayTotalControlMenu+0x176>
	}
	else if (last_selection != current_selection)
 8009296:	4b17      	ldr	r3, [pc, #92]	@ (80092f4 <displayTotalControlMenu+0x1b8>)
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	4b12      	ldr	r3, [pc, #72]	@ (80092e4 <displayTotalControlMenu+0x1a8>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d007      	beq.n	80092b2 <displayTotalControlMenu+0x176>
	{
		updateButtonSelection(last_selection, current_selection);
 80092a2:	4b14      	ldr	r3, [pc, #80]	@ (80092f4 <displayTotalControlMenu+0x1b8>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a0f      	ldr	r2, [pc, #60]	@ (80092e4 <displayTotalControlMenu+0x1a8>)
 80092a8:	6812      	ldr	r2, [r2, #0]
 80092aa:	4611      	mov	r1, r2
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 ff71 	bl	800a194 <updateButtonSelection>
	}

	last_selection = current_selection;
 80092b2:	4b0c      	ldr	r3, [pc, #48]	@ (80092e4 <displayTotalControlMenu+0x1a8>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a0f      	ldr	r2, [pc, #60]	@ (80092f4 <displayTotalControlMenu+0x1b8>)
 80092b8:	6013      	str	r3, [r2, #0]
}
 80092ba:	bf00      	nop
 80092bc:	3718      	adds	r7, #24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	20000298 	.word	0x20000298
 80092c8:	20000008 	.word	0x20000008
 80092cc:	20000280 	.word	0x20000280
 80092d0:	20000004 	.word	0x20000004
 80092d4:	200002a8 	.word	0x200002a8
 80092d8:	0801ccb4 	.word	0x0801ccb4
 80092dc:	200002a9 	.word	0x200002a9
 80092e0:	200003cc 	.word	0x200003cc
 80092e4:	20000284 	.word	0x20000284
 80092e8:	0801ccd0 	.word	0x0801ccd0
 80092ec:	0801ccdc 	.word	0x0801ccdc
 80092f0:	0801cce8 	.word	0x0801cce8
 80092f4:	20000000 	.word	0x20000000

080092f8 <displaySeparateControlMenu>:

void displaySeparateControlMenu(void)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b08e      	sub	sp, #56	@ 0x38
 80092fc:	af04      	add	r7, sp, #16
	bool states_changed = false;
 80092fe:	2300      	movs	r3, #0
 8009300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	syncDisplayDeviceStates();
 8009304:	f000 fbbc 	bl	8009a80 <syncDisplayDeviceStates>

	for (int i = 0; i < 4; i++) {
 8009308:	2300      	movs	r3, #0
 800930a:	623b      	str	r3, [r7, #32]
 800930c:	e017      	b.n	800933e <displaySeparateControlMenu+0x46>
		if (device_states[i] != last_device_states[i]) {
 800930e:	4a59      	ldr	r2, [pc, #356]	@ (8009474 <displaySeparateControlMenu+0x17c>)
 8009310:	6a3b      	ldr	r3, [r7, #32]
 8009312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009316:	4958      	ldr	r1, [pc, #352]	@ (8009478 <displaySeparateControlMenu+0x180>)
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800931e:	429a      	cmp	r2, r3
 8009320:	d00a      	beq.n	8009338 <displaySeparateControlMenu+0x40>
			states_changed = true;
 8009322:	2301      	movs	r3, #1
 8009324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			last_device_states[i] = device_states[i];
 8009328:	4a52      	ldr	r2, [pc, #328]	@ (8009474 <displaySeparateControlMenu+0x17c>)
 800932a:	6a3b      	ldr	r3, [r7, #32]
 800932c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009330:	4951      	ldr	r1, [pc, #324]	@ (8009478 <displaySeparateControlMenu+0x180>)
 8009332:	6a3b      	ldr	r3, [r7, #32]
 8009334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	3301      	adds	r3, #1
 800933c:	623b      	str	r3, [r7, #32]
 800933e:	6a3b      	ldr	r3, [r7, #32]
 8009340:	2b03      	cmp	r3, #3
 8009342:	dde4      	ble.n	800930e <displaySeparateControlMenu+0x16>
		}
	}

	if (current_menu != last_menu || !menu_drawn) {
 8009344:	4b4d      	ldr	r3, [pc, #308]	@ (800947c <displaySeparateControlMenu+0x184>)
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	4b4d      	ldr	r3, [pc, #308]	@ (8009480 <displaySeparateControlMenu+0x188>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	429a      	cmp	r2, r3
 800934e:	d106      	bne.n	800935e <displaySeparateControlMenu+0x66>
 8009350:	4b4c      	ldr	r3, [pc, #304]	@ (8009484 <displaySeparateControlMenu+0x18c>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	f083 0301 	eor.w	r3, r3, #1
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d015      	beq.n	800938a <displaySeparateControlMenu+0x92>
		ST7735_SetRotation(1);
 800935e:	2001      	movs	r0, #1
 8009360:	f004 fb50 	bl	800da04 <ST7735_SetRotation>
		fillScreen(BLACK);
 8009364:	2000      	movs	r0, #0
 8009366:	f004 fa15 	bl	800d794 <fillScreen>
		drawTitleBar("DEVICE LIST");
 800936a:	4847      	ldr	r0, [pc, #284]	@ (8009488 <displaySeparateControlMenu+0x190>)
 800936c:	f001 f888 	bl	800a480 <drawTitleBar>
		menu_drawn = true;
 8009370:	4b44      	ldr	r3, [pc, #272]	@ (8009484 <displaySeparateControlMenu+0x18c>)
 8009372:	2201      	movs	r2, #1
 8009374:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 8009376:	4b45      	ldr	r3, [pc, #276]	@ (800948c <displaySeparateControlMenu+0x194>)
 8009378:	2200      	movs	r2, #0
 800937a:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 800937c:	4b3f      	ldr	r3, [pc, #252]	@ (800947c <displaySeparateControlMenu+0x184>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a3f      	ldr	r2, [pc, #252]	@ (8009480 <displaySeparateControlMenu+0x188>)
 8009382:	6013      	str	r3, [r2, #0]
		states_changed = true;
 8009384:	2301      	movs	r3, #1
 8009386:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	if (!buttons_drawn || states_changed) {
 800938a:	4b40      	ldr	r3, [pc, #256]	@ (800948c <displaySeparateControlMenu+0x194>)
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	f083 0301 	eor.w	r3, r3, #1
 8009392:	b2db      	uxtb	r3, r3
 8009394:	2b00      	cmp	r3, #0
 8009396:	d103      	bne.n	80093a0 <displaySeparateControlMenu+0xa8>
 8009398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800939c:	2b00      	cmp	r3, #0
 800939e:	d053      	beq.n	8009448 <displaySeparateControlMenu+0x150>
		int start_y = TITLE_HEIGHT + 10;
 80093a0:	2319      	movs	r3, #25
 80093a2:	61bb      	str	r3, [r7, #24]
		button_count = 5;
 80093a4:	4b3a      	ldr	r3, [pc, #232]	@ (8009490 <displaySeparateControlMenu+0x198>)
 80093a6:	2205      	movs	r2, #5
 80093a8:	601a      	str	r2, [r3, #0]

		for (int i = 0; i < 4; i++)
 80093aa:	2300      	movs	r3, #0
 80093ac:	61fb      	str	r3, [r7, #28]
 80093ae:	e02f      	b.n	8009410 <displaySeparateControlMenu+0x118>
		{
			char device_text[20];
			snprintf(device_text, sizeof(device_text), "DEVICE %d [%s]",
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	1c5a      	adds	r2, r3, #1
					i + 1, device_states[i] ? "ON" : "OFF");
 80093b4:	492f      	ldr	r1, [pc, #188]	@ (8009474 <displaySeparateControlMenu+0x17c>)
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			snprintf(device_text, sizeof(device_text), "DEVICE %d [%s]",
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <displaySeparateControlMenu+0xcc>
 80093c0:	4b34      	ldr	r3, [pc, #208]	@ (8009494 <displaySeparateControlMenu+0x19c>)
 80093c2:	e000      	b.n	80093c6 <displaySeparateControlMenu+0xce>
 80093c4:	4b34      	ldr	r3, [pc, #208]	@ (8009498 <displaySeparateControlMenu+0x1a0>)
 80093c6:	1d38      	adds	r0, r7, #4
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	4613      	mov	r3, r2
 80093cc:	4a33      	ldr	r2, [pc, #204]	@ (800949c <displaySeparateControlMenu+0x1a4>)
 80093ce:	2114      	movs	r1, #20
 80093d0:	f010 fa2c 	bl	801982c <sniprintf>
			drawSingleButton(MARGIN_X, start_y + i * 20, BUTTON_WIDTH, 16,
 80093d4:	69fa      	ldr	r2, [r7, #28]
 80093d6:	4613      	mov	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4413      	add	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	461a      	mov	r2, r3
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	18d1      	adds	r1, r2, r3
 80093e4:	4b2e      	ldr	r3, [pc, #184]	@ (80094a0 <displaySeparateControlMenu+0x1a8>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	69fa      	ldr	r2, [r7, #28]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	bf0c      	ite	eq
 80093ee:	2301      	moveq	r3, #1
 80093f0:	2300      	movne	r3, #0
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	461a      	mov	r2, r3
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	9302      	str	r3, [sp, #8]
 80093fa:	9201      	str	r2, [sp, #4]
 80093fc:	1d3b      	adds	r3, r7, #4
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	2310      	movs	r3, #16
 8009402:	228c      	movs	r2, #140	@ 0x8c
 8009404:	200a      	movs	r0, #10
 8009406:	f000 fdd1 	bl	8009fac <drawSingleButton>
		for (int i = 0; i < 4; i++)
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	3301      	adds	r3, #1
 800940e:	61fb      	str	r3, [r7, #28]
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	2b03      	cmp	r3, #3
 8009414:	ddcc      	ble.n	80093b0 <displaySeparateControlMenu+0xb8>
						   device_text, (current_selection == i), i);
		}

		drawSingleButton(MARGIN_X, start_y + 4 * 20, BUTTON_WIDTH, 16,
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800941c:	4b20      	ldr	r3, [pc, #128]	@ (80094a0 <displaySeparateControlMenu+0x1a8>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b04      	cmp	r3, #4
 8009422:	bf0c      	ite	eq
 8009424:	2301      	moveq	r3, #1
 8009426:	2300      	movne	r3, #0
 8009428:	b2db      	uxtb	r3, r3
 800942a:	461a      	mov	r2, r3
 800942c:	2304      	movs	r3, #4
 800942e:	9302      	str	r3, [sp, #8]
 8009430:	9201      	str	r2, [sp, #4]
 8009432:	4b1c      	ldr	r3, [pc, #112]	@ (80094a4 <displaySeparateControlMenu+0x1ac>)
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	2310      	movs	r3, #16
 8009438:	228c      	movs	r2, #140	@ 0x8c
 800943a:	200a      	movs	r0, #10
 800943c:	f000 fdb6 	bl	8009fac <drawSingleButton>
					   "GO BACK", (current_selection == 4), 4);

		buttons_drawn = true;
 8009440:	4b12      	ldr	r3, [pc, #72]	@ (800948c <displaySeparateControlMenu+0x194>)
 8009442:	2201      	movs	r2, #1
 8009444:	701a      	strb	r2, [r3, #0]
	if (!buttons_drawn || states_changed) {
 8009446:	e00d      	b.n	8009464 <displaySeparateControlMenu+0x16c>
	} else if (last_selection != current_selection) {
 8009448:	4b17      	ldr	r3, [pc, #92]	@ (80094a8 <displaySeparateControlMenu+0x1b0>)
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	4b14      	ldr	r3, [pc, #80]	@ (80094a0 <displaySeparateControlMenu+0x1a8>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	429a      	cmp	r2, r3
 8009452:	d007      	beq.n	8009464 <displaySeparateControlMenu+0x16c>
		updateButtonSelection(last_selection, current_selection);
 8009454:	4b14      	ldr	r3, [pc, #80]	@ (80094a8 <displaySeparateControlMenu+0x1b0>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a11      	ldr	r2, [pc, #68]	@ (80094a0 <displaySeparateControlMenu+0x1a8>)
 800945a:	6812      	ldr	r2, [r2, #0]
 800945c:	4611      	mov	r1, r2
 800945e:	4618      	mov	r0, r3
 8009460:	f000 fe98 	bl	800a194 <updateButtonSelection>
	}

	last_selection = current_selection;
 8009464:	4b0e      	ldr	r3, [pc, #56]	@ (80094a0 <displaySeparateControlMenu+0x1a8>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a0f      	ldr	r2, [pc, #60]	@ (80094a8 <displaySeparateControlMenu+0x1b0>)
 800946a:	6013      	str	r3, [r2, #0]
}
 800946c:	bf00      	nop
 800946e:	3728      	adds	r7, #40	@ 0x28
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	20000298 	.word	0x20000298
 8009478:	20000008 	.word	0x20000008
 800947c:	20000280 	.word	0x20000280
 8009480:	20000004 	.word	0x20000004
 8009484:	200002a8 	.word	0x200002a8
 8009488:	0801ccc4 	.word	0x0801ccc4
 800948c:	200002a9 	.word	0x200002a9
 8009490:	200003cc 	.word	0x200003cc
 8009494:	0801ccf0 	.word	0x0801ccf0
 8009498:	0801ccf4 	.word	0x0801ccf4
 800949c:	0801ccf8 	.word	0x0801ccf8
 80094a0:	20000284 	.word	0x20000284
 80094a4:	0801cce8 	.word	0x0801cce8
 80094a8:	20000000 	.word	0x20000000

080094ac <displayDeviceControlMenu>:

void displayDeviceControlMenu(void) {
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b08e      	sub	sp, #56	@ 0x38
 80094b0:	af04      	add	r7, sp, #16
	bool state_changed = false;
 80094b2:	2300      	movs	r3, #0
 80094b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	syncDisplayDeviceStates();
 80094b8:	f000 fae2 	bl	8009a80 <syncDisplayDeviceStates>

	if (device_states[current_device] != last_device_states[current_device]) {
 80094bc:	4b68      	ldr	r3, [pc, #416]	@ (8009660 <displayDeviceControlMenu+0x1b4>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a68      	ldr	r2, [pc, #416]	@ (8009664 <displayDeviceControlMenu+0x1b8>)
 80094c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80094c6:	4b66      	ldr	r3, [pc, #408]	@ (8009660 <displayDeviceControlMenu+0x1b4>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4967      	ldr	r1, [pc, #412]	@ (8009668 <displayDeviceControlMenu+0x1bc>)
 80094cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d00c      	beq.n	80094ee <displayDeviceControlMenu+0x42>
		state_changed = true;
 80094d4:	2301      	movs	r3, #1
 80094d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		last_device_states[current_device] = device_states[current_device];
 80094da:	4b61      	ldr	r3, [pc, #388]	@ (8009660 <displayDeviceControlMenu+0x1b4>)
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	4b60      	ldr	r3, [pc, #384]	@ (8009660 <displayDeviceControlMenu+0x1b4>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4960      	ldr	r1, [pc, #384]	@ (8009664 <displayDeviceControlMenu+0x1b8>)
 80094e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80094e8:	495f      	ldr	r1, [pc, #380]	@ (8009668 <displayDeviceControlMenu+0x1bc>)
 80094ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (current_menu != last_menu || !menu_drawn) {
 80094ee:	4b5f      	ldr	r3, [pc, #380]	@ (800966c <displayDeviceControlMenu+0x1c0>)
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	4b5f      	ldr	r3, [pc, #380]	@ (8009670 <displayDeviceControlMenu+0x1c4>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d106      	bne.n	8009508 <displayDeviceControlMenu+0x5c>
 80094fa:	4b5e      	ldr	r3, [pc, #376]	@ (8009674 <displayDeviceControlMenu+0x1c8>)
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	f083 0301 	eor.w	r3, r3, #1
 8009502:	b2db      	uxtb	r3, r3
 8009504:	2b00      	cmp	r3, #0
 8009506:	d01e      	beq.n	8009546 <displayDeviceControlMenu+0x9a>
		ST7735_SetRotation(1);
 8009508:	2001      	movs	r0, #1
 800950a:	f004 fa7b 	bl	800da04 <ST7735_SetRotation>
		fillScreen(BLACK);
 800950e:	2000      	movs	r0, #0
 8009510:	f004 f940 	bl	800d794 <fillScreen>

		char title[30];
		snprintf(title, sizeof(title), "DEVICE %d CONTROL", current_device + 1);
 8009514:	4b52      	ldr	r3, [pc, #328]	@ (8009660 <displayDeviceControlMenu+0x1b4>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	3301      	adds	r3, #1
 800951a:	4638      	mov	r0, r7
 800951c:	4a56      	ldr	r2, [pc, #344]	@ (8009678 <displayDeviceControlMenu+0x1cc>)
 800951e:	211e      	movs	r1, #30
 8009520:	f010 f984 	bl	801982c <sniprintf>
		drawTitleBar(title);
 8009524:	463b      	mov	r3, r7
 8009526:	4618      	mov	r0, r3
 8009528:	f000 ffaa 	bl	800a480 <drawTitleBar>

		menu_drawn = true;
 800952c:	4b51      	ldr	r3, [pc, #324]	@ (8009674 <displayDeviceControlMenu+0x1c8>)
 800952e:	2201      	movs	r2, #1
 8009530:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 8009532:	4b52      	ldr	r3, [pc, #328]	@ (800967c <displayDeviceControlMenu+0x1d0>)
 8009534:	2200      	movs	r2, #0
 8009536:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 8009538:	4b4c      	ldr	r3, [pc, #304]	@ (800966c <displayDeviceControlMenu+0x1c0>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a4c      	ldr	r2, [pc, #304]	@ (8009670 <displayDeviceControlMenu+0x1c4>)
 800953e:	6013      	str	r3, [r2, #0]
		state_changed = true;
 8009540:	2301      	movs	r3, #1
 8009542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	if (state_changed) {
 8009546:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00f      	beq.n	800956e <displayDeviceControlMenu+0xc2>
		updateDeviceControlStatus(current_device, device_states[current_device]);
 800954e:	4b44      	ldr	r3, [pc, #272]	@ (8009660 <displayDeviceControlMenu+0x1b4>)
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	4b43      	ldr	r3, [pc, #268]	@ (8009660 <displayDeviceControlMenu+0x1b4>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4943      	ldr	r1, [pc, #268]	@ (8009664 <displayDeviceControlMenu+0x1b8>)
 8009558:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800955c:	2b00      	cmp	r3, #0
 800955e:	bf14      	ite	ne
 8009560:	2301      	movne	r3, #1
 8009562:	2300      	moveq	r3, #0
 8009564:	b2db      	uxtb	r3, r3
 8009566:	4619      	mov	r1, r3
 8009568:	4610      	mov	r0, r2
 800956a:	f000 ff5d 	bl	800a428 <updateDeviceControlStatus>
	}

	if (!buttons_drawn) {
 800956e:	4b43      	ldr	r3, [pc, #268]	@ (800967c <displayDeviceControlMenu+0x1d0>)
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	f083 0301 	eor.w	r3, r3, #1
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b00      	cmp	r3, #0
 800957a:	d05a      	beq.n	8009632 <displayDeviceControlMenu+0x186>
		int start_y = TITLE_HEIGHT + 25;
 800957c:	2328      	movs	r3, #40	@ 0x28
 800957e:	623b      	str	r3, [r7, #32]
		button_count = 4;
 8009580:	4b3f      	ldr	r3, [pc, #252]	@ (8009680 <displayDeviceControlMenu+0x1d4>)
 8009582:	2204      	movs	r2, #4
 8009584:	601a      	str	r2, [r3, #0]

		drawSingleButton(MARGIN_X, start_y, BUTTON_WIDTH, BUTTON_HEIGHT,
 8009586:	4b3f      	ldr	r3, [pc, #252]	@ (8009684 <displayDeviceControlMenu+0x1d8>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	bf0c      	ite	eq
 800958e:	2301      	moveq	r3, #1
 8009590:	2300      	movne	r3, #0
 8009592:	b2db      	uxtb	r3, r3
 8009594:	461a      	mov	r2, r3
 8009596:	2300      	movs	r3, #0
 8009598:	9302      	str	r3, [sp, #8]
 800959a:	9201      	str	r2, [sp, #4]
 800959c:	4b3a      	ldr	r3, [pc, #232]	@ (8009688 <displayDeviceControlMenu+0x1dc>)
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	2312      	movs	r3, #18
 80095a2:	228c      	movs	r2, #140	@ 0x8c
 80095a4:	6a39      	ldr	r1, [r7, #32]
 80095a6:	200a      	movs	r0, #10
 80095a8:	f000 fd00 	bl	8009fac <drawSingleButton>
						"TURN ON", (current_selection == 0), 0);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT,
 80095ac:	6a3b      	ldr	r3, [r7, #32]
 80095ae:	f103 0116 	add.w	r1, r3, #22
 80095b2:	4b34      	ldr	r3, [pc, #208]	@ (8009684 <displayDeviceControlMenu+0x1d8>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	bf0c      	ite	eq
 80095ba:	2301      	moveq	r3, #1
 80095bc:	2300      	movne	r3, #0
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	461a      	mov	r2, r3
 80095c2:	2301      	movs	r3, #1
 80095c4:	9302      	str	r3, [sp, #8]
 80095c6:	9201      	str	r2, [sp, #4]
 80095c8:	4b30      	ldr	r3, [pc, #192]	@ (800968c <displayDeviceControlMenu+0x1e0>)
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	2312      	movs	r3, #18
 80095ce:	228c      	movs	r2, #140	@ 0x8c
 80095d0:	200a      	movs	r0, #10
 80095d2:	f000 fceb 	bl	8009fac <drawSingleButton>
						"TURN OFF", (current_selection == 1), 1);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING*2, BUTTON_WIDTH, BUTTON_HEIGHT,
 80095d6:	6a3b      	ldr	r3, [r7, #32]
 80095d8:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80095dc:	4b29      	ldr	r3, [pc, #164]	@ (8009684 <displayDeviceControlMenu+0x1d8>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	bf0c      	ite	eq
 80095e4:	2301      	moveq	r3, #1
 80095e6:	2300      	movne	r3, #0
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	461a      	mov	r2, r3
 80095ec:	2302      	movs	r3, #2
 80095ee:	9302      	str	r3, [sp, #8]
 80095f0:	9201      	str	r2, [sp, #4]
 80095f2:	4b27      	ldr	r3, [pc, #156]	@ (8009690 <displayDeviceControlMenu+0x1e4>)
 80095f4:	9300      	str	r3, [sp, #0]
 80095f6:	2312      	movs	r3, #18
 80095f8:	228c      	movs	r2, #140	@ 0x8c
 80095fa:	200a      	movs	r0, #10
 80095fc:	f000 fcd6 	bl	8009fac <drawSingleButton>
						"GO BACK", (current_selection == 2), 2);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING*3, BUTTON_WIDTH, BUTTON_HEIGHT,
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	f103 0142 	add.w	r1, r3, #66	@ 0x42
 8009606:	4b1f      	ldr	r3, [pc, #124]	@ (8009684 <displayDeviceControlMenu+0x1d8>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2b03      	cmp	r3, #3
 800960c:	bf0c      	ite	eq
 800960e:	2301      	moveq	r3, #1
 8009610:	2300      	movne	r3, #0
 8009612:	b2db      	uxtb	r3, r3
 8009614:	461a      	mov	r2, r3
 8009616:	2303      	movs	r3, #3
 8009618:	9302      	str	r3, [sp, #8]
 800961a:	9201      	str	r2, [sp, #4]
 800961c:	4b1d      	ldr	r3, [pc, #116]	@ (8009694 <displayDeviceControlMenu+0x1e8>)
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	2312      	movs	r3, #18
 8009622:	228c      	movs	r2, #140	@ 0x8c
 8009624:	200a      	movs	r0, #10
 8009626:	f000 fcc1 	bl	8009fac <drawSingleButton>
						"GO TO HOME", (current_selection == 3), 3);

		buttons_drawn = true;
 800962a:	4b14      	ldr	r3, [pc, #80]	@ (800967c <displayDeviceControlMenu+0x1d0>)
 800962c:	2201      	movs	r2, #1
 800962e:	701a      	strb	r2, [r3, #0]
 8009630:	e00d      	b.n	800964e <displayDeviceControlMenu+0x1a2>
	} else if (last_selection != current_selection) {
 8009632:	4b19      	ldr	r3, [pc, #100]	@ (8009698 <displayDeviceControlMenu+0x1ec>)
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	4b13      	ldr	r3, [pc, #76]	@ (8009684 <displayDeviceControlMenu+0x1d8>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	429a      	cmp	r2, r3
 800963c:	d007      	beq.n	800964e <displayDeviceControlMenu+0x1a2>
		updateButtonSelection(last_selection, current_selection);
 800963e:	4b16      	ldr	r3, [pc, #88]	@ (8009698 <displayDeviceControlMenu+0x1ec>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a10      	ldr	r2, [pc, #64]	@ (8009684 <displayDeviceControlMenu+0x1d8>)
 8009644:	6812      	ldr	r2, [r2, #0]
 8009646:	4611      	mov	r1, r2
 8009648:	4618      	mov	r0, r3
 800964a:	f000 fda3 	bl	800a194 <updateButtonSelection>
	}

	last_selection = current_selection;
 800964e:	4b0d      	ldr	r3, [pc, #52]	@ (8009684 <displayDeviceControlMenu+0x1d8>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a11      	ldr	r2, [pc, #68]	@ (8009698 <displayDeviceControlMenu+0x1ec>)
 8009654:	6013      	str	r3, [r2, #0]
}
 8009656:	bf00      	nop
 8009658:	3728      	adds	r7, #40	@ 0x28
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	20000288 	.word	0x20000288
 8009664:	20000298 	.word	0x20000298
 8009668:	20000008 	.word	0x20000008
 800966c:	20000280 	.word	0x20000280
 8009670:	20000004 	.word	0x20000004
 8009674:	200002a8 	.word	0x200002a8
 8009678:	0801cd08 	.word	0x0801cd08
 800967c:	200002a9 	.word	0x200002a9
 8009680:	200003cc 	.word	0x200003cc
 8009684:	20000284 	.word	0x20000284
 8009688:	0801cd1c 	.word	0x0801cd1c
 800968c:	0801cd24 	.word	0x0801cd24
 8009690:	0801cce8 	.word	0x0801cce8
 8009694:	0801cd30 	.word	0x0801cd30
 8009698:	20000000 	.word	0x20000000

0800969c <setDeviceState>:


void setDeviceState(int device, int state) {
 800969c:	b580      	push	{r7, lr}
 800969e:	b08c      	sub	sp, #48	@ 0x30
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
    GPIO_TypeDef* gpio_led_port;
    GPIO_TypeDef *gpio_relay_port;
    uint16_t gpio_led_pin, gpio_relay_pin;
    char deviceItem[15];

    switch(device) {
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b03      	cmp	r3, #3
 80096aa:	f200 80c9 	bhi.w	8009840 <setDeviceState+0x1a4>
 80096ae:	a201      	add	r2, pc, #4	@ (adr r2, 80096b4 <setDeviceState+0x18>)
 80096b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b4:	080096c5 	.word	0x080096c5
 80096b8:	080096e5 	.word	0x080096e5
 80096bc:	08009705 	.word	0x08009705
 80096c0:	08009725 	.word	0x08009725
        case 0:
            gpio_led_port = TOUCH_LED1_GPIO_Port;
 80096c4:	4b60      	ldr	r3, [pc, #384]	@ (8009848 <setDeviceState+0x1ac>)
 80096c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            gpio_relay_port = L_RELAY_1_GPIO_Port;
 80096c8:	4b5f      	ldr	r3, [pc, #380]	@ (8009848 <setDeviceState+0x1ac>)
 80096ca:	62bb      	str	r3, [r7, #40]	@ 0x28
            gpio_led_pin = TOUCH_LED1_Pin;
 80096cc:	2308      	movs	r3, #8
 80096ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
            gpio_relay_pin = L_RELAY_1_Pin;
 80096d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
            sprintf(deviceItem, "device1");
 80096d6:	f107 030c 	add.w	r3, r7, #12
 80096da:	495c      	ldr	r1, [pc, #368]	@ (800984c <setDeviceState+0x1b0>)
 80096dc:	4618      	mov	r0, r3
 80096de:	f010 f8db 	bl	8019898 <siprintf>
            break;
 80096e2:	e02f      	b.n	8009744 <setDeviceState+0xa8>
        case 1:
            gpio_led_port = TOUCH_LED2_GPIO_Port;
 80096e4:	4b58      	ldr	r3, [pc, #352]	@ (8009848 <setDeviceState+0x1ac>)
 80096e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            gpio_relay_port = L_RELAY_2_GPIO_Port;
 80096e8:	4b57      	ldr	r3, [pc, #348]	@ (8009848 <setDeviceState+0x1ac>)
 80096ea:	62bb      	str	r3, [r7, #40]	@ 0x28
            gpio_led_pin = TOUCH_LED2_Pin;
 80096ec:	2304      	movs	r3, #4
 80096ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
            gpio_relay_pin = L_RELAY_2_Pin;
 80096f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80096f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
            sprintf(deviceItem, "device2");
 80096f6:	f107 030c 	add.w	r3, r7, #12
 80096fa:	4955      	ldr	r1, [pc, #340]	@ (8009850 <setDeviceState+0x1b4>)
 80096fc:	4618      	mov	r0, r3
 80096fe:	f010 f8cb 	bl	8019898 <siprintf>
            break;
 8009702:	e01f      	b.n	8009744 <setDeviceState+0xa8>
        case 2:
            gpio_led_port = TOUCH_LED3_GPIO_Port;
 8009704:	4b53      	ldr	r3, [pc, #332]	@ (8009854 <setDeviceState+0x1b8>)
 8009706:	62fb      	str	r3, [r7, #44]	@ 0x2c
            gpio_relay_port = L_RELAY_3_GPIO_Port;
 8009708:	4b53      	ldr	r3, [pc, #332]	@ (8009858 <setDeviceState+0x1bc>)
 800970a:	62bb      	str	r3, [r7, #40]	@ 0x28
            gpio_led_pin = TOUCH_LED3_Pin;
 800970c:	2302      	movs	r3, #2
 800970e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            gpio_relay_pin = L_RELAY_3_Pin;
 8009710:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009714:	84bb      	strh	r3, [r7, #36]	@ 0x24
            sprintf(deviceItem, "device3");
 8009716:	f107 030c 	add.w	r3, r7, #12
 800971a:	4950      	ldr	r1, [pc, #320]	@ (800985c <setDeviceState+0x1c0>)
 800971c:	4618      	mov	r0, r3
 800971e:	f010 f8bb 	bl	8019898 <siprintf>
            break;
 8009722:	e00f      	b.n	8009744 <setDeviceState+0xa8>
        case 3:
            gpio_led_port = TOUCH_LED4_GPIO_Port;
 8009724:	4b4c      	ldr	r3, [pc, #304]	@ (8009858 <setDeviceState+0x1bc>)
 8009726:	62fb      	str	r3, [r7, #44]	@ 0x2c
            gpio_relay_port = L_RELAY_4_GPIO_Port;
 8009728:	4b47      	ldr	r3, [pc, #284]	@ (8009848 <setDeviceState+0x1ac>)
 800972a:	62bb      	str	r3, [r7, #40]	@ 0x28
            gpio_led_pin = TOUCH_LED4_Pin;
 800972c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009730:	84fb      	strh	r3, [r7, #38]	@ 0x26
            gpio_relay_pin = L_RELAY_4_Pin;
 8009732:	2340      	movs	r3, #64	@ 0x40
 8009734:	84bb      	strh	r3, [r7, #36]	@ 0x24
            sprintf(deviceItem, "device4");
 8009736:	f107 030c 	add.w	r3, r7, #12
 800973a:	4949      	ldr	r1, [pc, #292]	@ (8009860 <setDeviceState+0x1c4>)
 800973c:	4618      	mov	r0, r3
 800973e:	f010 f8ab 	bl	8019898 <siprintf>
            break;
 8009742:	bf00      	nop
        default:
            return;
    }

    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 8009744:	4b47      	ldr	r3, [pc, #284]	@ (8009864 <setDeviceState+0x1c8>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2164      	movs	r1, #100	@ 0x64
 800974a:	4618      	mov	r0, r3
 800974c:	f00b ffc4 	bl	80156d8 <xQueueSemaphoreTake>
 8009750:	4603      	mov	r3, r0
 8009752:	2b01      	cmp	r3, #1
 8009754:	d175      	bne.n	8009842 <setDeviceState+0x1a6>
		if (state) {
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d016      	beq.n	800978a <setDeviceState+0xee>
			HAL_GPIO_WritePin(gpio_led_port, gpio_led_pin, GPIO_PIN_SET);
 800975c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800975e:	2201      	movs	r2, #1
 8009760:	4619      	mov	r1, r3
 8009762:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009764:	f007 ff8c 	bl	8011680 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gpio_relay_port, gpio_relay_pin, GPIO_PIN_SET);
 8009768:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800976a:	2201      	movs	r2, #1
 800976c:	4619      	mov	r1, r3
 800976e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009770:	f007 ff86 	bl	8011680 <HAL_GPIO_WritePin>
			global_device_states[device] = 1;
 8009774:	4a3c      	ldr	r2, [pc, #240]	@ (8009868 <setDeviceState+0x1cc>)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2101      	movs	r1, #1
 800977a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			device_states[device] = 1;
 800977e:	4a3b      	ldr	r2, [pc, #236]	@ (800986c <setDeviceState+0x1d0>)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2101      	movs	r1, #1
 8009784:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8009788:	e015      	b.n	80097b6 <setDeviceState+0x11a>
		} else {
			HAL_GPIO_WritePin(gpio_led_port, gpio_led_pin, GPIO_PIN_RESET);
 800978a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800978c:	2200      	movs	r2, #0
 800978e:	4619      	mov	r1, r3
 8009790:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009792:	f007 ff75 	bl	8011680 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gpio_relay_port, gpio_relay_pin, GPIO_PIN_RESET);
 8009796:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009798:	2200      	movs	r2, #0
 800979a:	4619      	mov	r1, r3
 800979c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800979e:	f007 ff6f 	bl	8011680 <HAL_GPIO_WritePin>
			global_device_states[device] = 0;
 80097a2:	4a31      	ldr	r2, [pc, #196]	@ (8009868 <setDeviceState+0x1cc>)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2100      	movs	r1, #0
 80097a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			device_states[device] = 0;
 80097ac:	4a2f      	ldr	r2, [pc, #188]	@ (800986c <setDeviceState+0x1d0>)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2100      	movs	r1, #0
 80097b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		xSemaphoreGive(deviceStateMutex);
 80097b6:	4b2b      	ldr	r3, [pc, #172]	@ (8009864 <setDeviceState+0x1c8>)
 80097b8:	6818      	ldr	r0, [r3, #0]
 80097ba:	2300      	movs	r3, #0
 80097bc:	2200      	movs	r2, #0
 80097be:	2100      	movs	r1, #0
 80097c0:	f00b fcf8 	bl	80151b4 <xQueueGenericSend>

		cJSON *resp = cJSON_CreateObject();
 80097c4:	f006 fb90 	bl	800fee8 <cJSON_CreateObject>
 80097c8:	6238      	str	r0, [r7, #32]
		cJSON_AddNumberToObject(resp, deviceItem, device_states[device]);
 80097ca:	4a28      	ldr	r2, [pc, #160]	@ (800986c <setDeviceState+0x1d0>)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fe fed6 	bl	8008584 <__aeabi_i2d>
 80097d8:	f107 030c 	add.w	r3, r7, #12
 80097dc:	ec41 0b10 	vmov	d0, r0, r1
 80097e0:	4619      	mov	r1, r3
 80097e2:	6a38      	ldr	r0, [r7, #32]
 80097e4:	f006 fb12 	bl	800fe0c <cJSON_AddNumberToObject>
		char *respStr = cJSON_PrintUnformatted(resp);
 80097e8:	6a38      	ldr	r0, [r7, #32]
 80097ea:	f005 fcbd 	bl	800f168 <cJSON_PrintUnformatted>
 80097ee:	61f8      	str	r0, [r7, #28]
		if (respStr)
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d014      	beq.n	8009820 <setDeviceState+0x184>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)respStr, strlen(respStr), HAL_MAX_DELAY);
 80097f6:	69f8      	ldr	r0, [r7, #28]
 80097f8:	f7fe fd6a 	bl	80082d0 <strlen>
 80097fc:	4603      	mov	r3, r0
 80097fe:	b29a      	uxth	r2, r3
 8009800:	f04f 33ff 	mov.w	r3, #4294967295
 8009804:	69f9      	ldr	r1, [r7, #28]
 8009806:	481a      	ldr	r0, [pc, #104]	@ (8009870 <setDeviceState+0x1d4>)
 8009808:	f00a faac 	bl	8013d64 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800980c:	f04f 33ff 	mov.w	r3, #4294967295
 8009810:	2201      	movs	r2, #1
 8009812:	4918      	ldr	r1, [pc, #96]	@ (8009874 <setDeviceState+0x1d8>)
 8009814:	4816      	ldr	r0, [pc, #88]	@ (8009870 <setDeviceState+0x1d4>)
 8009816:	f00a faa5 	bl	8013d64 <HAL_UART_Transmit>
			free(respStr);
 800981a:	69f8      	ldr	r0, [r7, #28]
 800981c:	f00e fbe2 	bl	8017fe4 <free>
		}
		cJSON_Delete(resp);
 8009820:	6a38      	ldr	r0, [r7, #32]
 8009822:	f004 fbf5 	bl	800e010 <cJSON_Delete>

		safe_printf("DISPLAY: Device %d set to %s\n", device + 1, state ? "ON" : "OFF");
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	1c59      	adds	r1, r3, #1
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <setDeviceState+0x198>
 8009830:	4b11      	ldr	r3, [pc, #68]	@ (8009878 <setDeviceState+0x1dc>)
 8009832:	e000      	b.n	8009836 <setDeviceState+0x19a>
 8009834:	4b11      	ldr	r3, [pc, #68]	@ (800987c <setDeviceState+0x1e0>)
 8009836:	461a      	mov	r2, r3
 8009838:	4811      	ldr	r0, [pc, #68]	@ (8009880 <setDeviceState+0x1e4>)
 800983a:	f001 fe3d 	bl	800b4b8 <safe_printf>
 800983e:	e000      	b.n	8009842 <setDeviceState+0x1a6>
            return;
 8009840:	bf00      	nop
	}
}
 8009842:	3730      	adds	r7, #48	@ 0x30
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	40020800 	.word	0x40020800
 800984c:	0801cd3c 	.word	0x0801cd3c
 8009850:	0801cd44 	.word	0x0801cd44
 8009854:	40021c00 	.word	0x40021c00
 8009858:	40020400 	.word	0x40020400
 800985c:	0801cd4c 	.word	0x0801cd4c
 8009860:	0801cd54 	.word	0x0801cd54
 8009864:	20000570 	.word	0x20000570
 8009868:	20000734 	.word	0x20000734
 800986c:	20000298 	.word	0x20000298
 8009870:	200014c4 	.word	0x200014c4
 8009874:	0801cd5c 	.word	0x0801cd5c
 8009878:	0801ccf0 	.word	0x0801ccf0
 800987c:	0801ccf4 	.word	0x0801ccf4
 8009880:	0801cd60 	.word	0x0801cd60

08009884 <setAllDevicesState>:

void setAllDevicesState(int state) {
 8009884:	b590      	push	{r4, r7, lr}
 8009886:	b08d      	sub	sp, #52	@ 0x34
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
	const char *devices[] = {"device1", "device2", "device3", "device4"};
 800988c:	4b70      	ldr	r3, [pc, #448]	@ (8009a50 <setAllDevicesState+0x1cc>)
 800988e:	f107 0408 	add.w	r4, r7, #8
 8009892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	cJSON *resp = cJSON_CreateObject();
 8009898:	f006 fb26 	bl	800fee8 <cJSON_CreateObject>
 800989c:	61f8      	str	r0, [r7, #28]
    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 800989e:	4b6d      	ldr	r3, [pc, #436]	@ (8009a54 <setAllDevicesState+0x1d0>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2164      	movs	r1, #100	@ 0x64
 80098a4:	4618      	mov	r0, r3
 80098a6:	f00b ff17 	bl	80156d8 <xQueueSemaphoreTake>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	f040 80ca 	bne.w	8009a46 <setAllDevicesState+0x1c2>
        for (int i = 0; i < 4; i++) {
 80098b2:	2300      	movs	r3, #0
 80098b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098b6:	e092      	b.n	80099de <setAllDevicesState+0x15a>
        	GPIO_TypeDef* gpio_led_port;
        	GPIO_TypeDef *gpio_relay_port;
			uint16_t gpio_led_pin, gpio_relay_pin;

            switch(i) {
 80098b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ba:	2b03      	cmp	r3, #3
 80098bc:	d832      	bhi.n	8009924 <setAllDevicesState+0xa0>
 80098be:	a201      	add	r2, pc, #4	@ (adr r2, 80098c4 <setAllDevicesState+0x40>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	080098d5 	.word	0x080098d5
 80098c8:	080098e9 	.word	0x080098e9
 80098cc:	080098fd 	.word	0x080098fd
 80098d0:	08009911 	.word	0x08009911
                case 0:
                	gpio_led_port = TOUCH_LED1_GPIO_Port;
 80098d4:	4b60      	ldr	r3, [pc, #384]	@ (8009a58 <setAllDevicesState+0x1d4>)
 80098d6:	62bb      	str	r3, [r7, #40]	@ 0x28
					gpio_relay_port = L_RELAY_1_GPIO_Port;
 80098d8:	4b5f      	ldr	r3, [pc, #380]	@ (8009a58 <setAllDevicesState+0x1d4>)
 80098da:	627b      	str	r3, [r7, #36]	@ 0x24
					gpio_led_pin = TOUCH_LED1_Pin;
 80098dc:	2308      	movs	r3, #8
 80098de:	847b      	strh	r3, [r7, #34]	@ 0x22
					gpio_relay_pin = L_RELAY_1_Pin;
 80098e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80098e4:	843b      	strh	r3, [r7, #32]
                    break;
 80098e6:	e01d      	b.n	8009924 <setAllDevicesState+0xa0>
                case 1:
                	gpio_led_port = TOUCH_LED2_GPIO_Port;
 80098e8:	4b5b      	ldr	r3, [pc, #364]	@ (8009a58 <setAllDevicesState+0x1d4>)
 80098ea:	62bb      	str	r3, [r7, #40]	@ 0x28
					gpio_relay_port = L_RELAY_2_GPIO_Port;
 80098ec:	4b5a      	ldr	r3, [pc, #360]	@ (8009a58 <setAllDevicesState+0x1d4>)
 80098ee:	627b      	str	r3, [r7, #36]	@ 0x24
					gpio_led_pin = TOUCH_LED2_Pin;
 80098f0:	2304      	movs	r3, #4
 80098f2:	847b      	strh	r3, [r7, #34]	@ 0x22
					gpio_relay_pin = L_RELAY_2_Pin;
 80098f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80098f8:	843b      	strh	r3, [r7, #32]
                    break;
 80098fa:	e013      	b.n	8009924 <setAllDevicesState+0xa0>
                case 2:
                	gpio_led_port = TOUCH_LED3_GPIO_Port;
 80098fc:	4b57      	ldr	r3, [pc, #348]	@ (8009a5c <setAllDevicesState+0x1d8>)
 80098fe:	62bb      	str	r3, [r7, #40]	@ 0x28
					gpio_relay_port = L_RELAY_3_GPIO_Port;
 8009900:	4b57      	ldr	r3, [pc, #348]	@ (8009a60 <setAllDevicesState+0x1dc>)
 8009902:	627b      	str	r3, [r7, #36]	@ 0x24
					gpio_led_pin = TOUCH_LED3_Pin;
 8009904:	2302      	movs	r3, #2
 8009906:	847b      	strh	r3, [r7, #34]	@ 0x22
					gpio_relay_pin = L_RELAY_3_Pin;
 8009908:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800990c:	843b      	strh	r3, [r7, #32]
                    break;
 800990e:	e009      	b.n	8009924 <setAllDevicesState+0xa0>
                case 3:
                	gpio_led_port = TOUCH_LED4_GPIO_Port;
 8009910:	4b53      	ldr	r3, [pc, #332]	@ (8009a60 <setAllDevicesState+0x1dc>)
 8009912:	62bb      	str	r3, [r7, #40]	@ 0x28
					gpio_relay_port = L_RELAY_4_GPIO_Port;
 8009914:	4b50      	ldr	r3, [pc, #320]	@ (8009a58 <setAllDevicesState+0x1d4>)
 8009916:	627b      	str	r3, [r7, #36]	@ 0x24
					gpio_led_pin = TOUCH_LED4_Pin;
 8009918:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800991c:	847b      	strh	r3, [r7, #34]	@ 0x22
					gpio_relay_pin = L_RELAY_4_Pin;
 800991e:	2340      	movs	r3, #64	@ 0x40
 8009920:	843b      	strh	r3, [r7, #32]
                    break;
 8009922:	bf00      	nop
            }

            if (state) {
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d02b      	beq.n	8009982 <setAllDevicesState+0xfe>
            	HAL_GPIO_WritePin(gpio_led_port, gpio_led_pin, GPIO_PIN_SET);
 800992a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800992c:	2201      	movs	r2, #1
 800992e:	4619      	mov	r1, r3
 8009930:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009932:	f007 fea5 	bl	8011680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(gpio_relay_port, gpio_relay_pin, GPIO_PIN_SET);
 8009936:	8c3b      	ldrh	r3, [r7, #32]
 8009938:	2201      	movs	r2, #1
 800993a:	4619      	mov	r1, r3
 800993c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800993e:	f007 fe9f 	bl	8011680 <HAL_GPIO_WritePin>
                global_device_states[i] = 1;
 8009942:	4a48      	ldr	r2, [pc, #288]	@ (8009a64 <setAllDevicesState+0x1e0>)
 8009944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009946:	2101      	movs	r1, #1
 8009948:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                device_states[i] = 1;
 800994c:	4a46      	ldr	r2, [pc, #280]	@ (8009a68 <setAllDevicesState+0x1e4>)
 800994e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009950:	2101      	movs	r1, #1
 8009952:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                cJSON_AddNumberToObject(resp, devices[i], device_states[i]);
 8009956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	3330      	adds	r3, #48	@ 0x30
 800995c:	443b      	add	r3, r7
 800995e:	f853 4c28 	ldr.w	r4, [r3, #-40]
 8009962:	4a41      	ldr	r2, [pc, #260]	@ (8009a68 <setAllDevicesState+0x1e4>)
 8009964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800996a:	4618      	mov	r0, r3
 800996c:	f7fe fe0a 	bl	8008584 <__aeabi_i2d>
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	ec43 2b10 	vmov	d0, r2, r3
 8009978:	4621      	mov	r1, r4
 800997a:	69f8      	ldr	r0, [r7, #28]
 800997c:	f006 fa46 	bl	800fe0c <cJSON_AddNumberToObject>
 8009980:	e02a      	b.n	80099d8 <setAllDevicesState+0x154>
            } else {
            	HAL_GPIO_WritePin(gpio_led_port, gpio_led_pin, GPIO_PIN_RESET);
 8009982:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009984:	2200      	movs	r2, #0
 8009986:	4619      	mov	r1, r3
 8009988:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800998a:	f007 fe79 	bl	8011680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(gpio_relay_port, gpio_relay_pin, GPIO_PIN_RESET);
 800998e:	8c3b      	ldrh	r3, [r7, #32]
 8009990:	2200      	movs	r2, #0
 8009992:	4619      	mov	r1, r3
 8009994:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009996:	f007 fe73 	bl	8011680 <HAL_GPIO_WritePin>
                global_device_states[i] = 0;
 800999a:	4a32      	ldr	r2, [pc, #200]	@ (8009a64 <setAllDevicesState+0x1e0>)
 800999c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800999e:	2100      	movs	r1, #0
 80099a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                device_states[i] = 0;
 80099a4:	4a30      	ldr	r2, [pc, #192]	@ (8009a68 <setAllDevicesState+0x1e4>)
 80099a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a8:	2100      	movs	r1, #0
 80099aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                cJSON_AddNumberToObject(resp, devices[i], device_states[i]);
 80099ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	3330      	adds	r3, #48	@ 0x30
 80099b4:	443b      	add	r3, r7
 80099b6:	f853 4c28 	ldr.w	r4, [r3, #-40]
 80099ba:	4a2b      	ldr	r2, [pc, #172]	@ (8009a68 <setAllDevicesState+0x1e4>)
 80099bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fe fdde 	bl	8008584 <__aeabi_i2d>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	ec43 2b10 	vmov	d0, r2, r3
 80099d0:	4621      	mov	r1, r4
 80099d2:	69f8      	ldr	r0, [r7, #28]
 80099d4:	f006 fa1a 	bl	800fe0c <cJSON_AddNumberToObject>
        for (int i = 0; i < 4; i++) {
 80099d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099da:	3301      	adds	r3, #1
 80099dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	f77f af69 	ble.w	80098b8 <setAllDevicesState+0x34>
            }
        }

        xSemaphoreGive(deviceStateMutex);
 80099e6:	4b1b      	ldr	r3, [pc, #108]	@ (8009a54 <setAllDevicesState+0x1d0>)
 80099e8:	6818      	ldr	r0, [r3, #0]
 80099ea:	2300      	movs	r3, #0
 80099ec:	2200      	movs	r2, #0
 80099ee:	2100      	movs	r1, #0
 80099f0:	f00b fbe0 	bl	80151b4 <xQueueGenericSend>

        char *respStr = cJSON_PrintUnformatted(resp);
 80099f4:	69f8      	ldr	r0, [r7, #28]
 80099f6:	f005 fbb7 	bl	800f168 <cJSON_PrintUnformatted>
 80099fa:	61b8      	str	r0, [r7, #24]
		if (respStr)
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d014      	beq.n	8009a2c <setAllDevicesState+0x1a8>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)respStr, strlen(respStr), HAL_MAX_DELAY);
 8009a02:	69b8      	ldr	r0, [r7, #24]
 8009a04:	f7fe fc64 	bl	80082d0 <strlen>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a10:	69b9      	ldr	r1, [r7, #24]
 8009a12:	4816      	ldr	r0, [pc, #88]	@ (8009a6c <setAllDevicesState+0x1e8>)
 8009a14:	f00a f9a6 	bl	8013d64 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 8009a18:	f04f 33ff 	mov.w	r3, #4294967295
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	4914      	ldr	r1, [pc, #80]	@ (8009a70 <setAllDevicesState+0x1ec>)
 8009a20:	4812      	ldr	r0, [pc, #72]	@ (8009a6c <setAllDevicesState+0x1e8>)
 8009a22:	f00a f99f 	bl	8013d64 <HAL_UART_Transmit>
			free(respStr);
 8009a26:	69b8      	ldr	r0, [r7, #24]
 8009a28:	f00e fadc 	bl	8017fe4 <free>
		}
		cJSON_Delete(resp);
 8009a2c:	69f8      	ldr	r0, [r7, #28]
 8009a2e:	f004 faef 	bl	800e010 <cJSON_Delete>

        safe_printf("DISPLAY: All devices set to %s\n", state ? "ON" : "OFF");
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <setAllDevicesState+0x1b8>
 8009a38:	4b0e      	ldr	r3, [pc, #56]	@ (8009a74 <setAllDevicesState+0x1f0>)
 8009a3a:	e000      	b.n	8009a3e <setAllDevicesState+0x1ba>
 8009a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8009a78 <setAllDevicesState+0x1f4>)
 8009a3e:	4619      	mov	r1, r3
 8009a40:	480e      	ldr	r0, [pc, #56]	@ (8009a7c <setAllDevicesState+0x1f8>)
 8009a42:	f001 fd39 	bl	800b4b8 <safe_printf>
    }
}
 8009a46:	bf00      	nop
 8009a48:	3734      	adds	r7, #52	@ 0x34
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd90      	pop	{r4, r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	0801cda0 	.word	0x0801cda0
 8009a54:	20000570 	.word	0x20000570
 8009a58:	40020800 	.word	0x40020800
 8009a5c:	40021c00 	.word	0x40021c00
 8009a60:	40020400 	.word	0x40020400
 8009a64:	20000734 	.word	0x20000734
 8009a68:	20000298 	.word	0x20000298
 8009a6c:	200014c4 	.word	0x200014c4
 8009a70:	0801cd5c 	.word	0x0801cd5c
 8009a74:	0801ccf0 	.word	0x0801ccf0
 8009a78:	0801ccf4 	.word	0x0801ccf4
 8009a7c:	0801cd80 	.word	0x0801cd80

08009a80 <syncDisplayDeviceStates>:

void syncDisplayDeviceStates(void) {
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(10)) == pdTRUE) {
 8009a86:	4b12      	ldr	r3, [pc, #72]	@ (8009ad0 <syncDisplayDeviceStates+0x50>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	210a      	movs	r1, #10
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f00b fe23 	bl	80156d8 <xQueueSemaphoreTake>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d117      	bne.n	8009ac8 <syncDisplayDeviceStates+0x48>
        for (int i = 0; i < 4; i++) {
 8009a98:	2300      	movs	r3, #0
 8009a9a:	607b      	str	r3, [r7, #4]
 8009a9c:	e00a      	b.n	8009ab4 <syncDisplayDeviceStates+0x34>
            device_states[i] = global_device_states[i];
 8009a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8009ad4 <syncDisplayDeviceStates+0x54>)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009aa6:	490c      	ldr	r1, [pc, #48]	@ (8009ad8 <syncDisplayDeviceStates+0x58>)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < 4; i++) {
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	607b      	str	r3, [r7, #4]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	ddf1      	ble.n	8009a9e <syncDisplayDeviceStates+0x1e>
        }
        xSemaphoreGive(deviceStateMutex);
 8009aba:	4b05      	ldr	r3, [pc, #20]	@ (8009ad0 <syncDisplayDeviceStates+0x50>)
 8009abc:	6818      	ldr	r0, [r3, #0]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	f00b fb76 	bl	80151b4 <xQueueGenericSend>
    }
}
 8009ac8:	bf00      	nop
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	20000570 	.word	0x20000570
 8009ad4:	20000734 	.word	0x20000734
 8009ad8:	20000298 	.word	0x20000298

08009adc <handleNavigation>:
    HAL_Delay(800);
    fillRect(MARGIN_X, DISPLAY_HEIGHT - 15, BUTTON_WIDTH, 12, BLACK);
}


void handleNavigation(void) {
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
    int max_options;

    switch(current_menu) {
 8009ae2:	4b96      	ldr	r3, [pc, #600]	@ (8009d3c <handleNavigation+0x260>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b03      	cmp	r3, #3
 8009ae8:	d816      	bhi.n	8009b18 <handleNavigation+0x3c>
 8009aea:	a201      	add	r2, pc, #4	@ (adr r2, 8009af0 <handleNavigation+0x14>)
 8009aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af0:	08009b01 	.word	0x08009b01
 8009af4:	08009b07 	.word	0x08009b07
 8009af8:	08009b0d 	.word	0x08009b0d
 8009afc:	08009b13 	.word	0x08009b13
        case MENU_MAIN:
            max_options = MAIN_MENU_OPTIONS;
 8009b00:	2302      	movs	r3, #2
 8009b02:	60fb      	str	r3, [r7, #12]
            break;
 8009b04:	e00b      	b.n	8009b1e <handleNavigation+0x42>
        case MENU_TOTAL_CONTROL:
            max_options = TOTAL_CONTROL_OPTIONS;
 8009b06:	2303      	movs	r3, #3
 8009b08:	60fb      	str	r3, [r7, #12]
            break;
 8009b0a:	e008      	b.n	8009b1e <handleNavigation+0x42>
        case MENU_SEPARATE_CONTROL:
            max_options = SEPARATE_CONTROL_OPTIONS;
 8009b0c:	2305      	movs	r3, #5
 8009b0e:	60fb      	str	r3, [r7, #12]
            break;
 8009b10:	e005      	b.n	8009b1e <handleNavigation+0x42>
        case MENU_DEVICE_CONTROL:
            max_options = DEVICE_CONTROL_OPTIONS;
 8009b12:	2304      	movs	r3, #4
 8009b14:	60fb      	str	r3, [r7, #12]
            break;
 8009b16:	e002      	b.n	8009b1e <handleNavigation+0x42>
        default:
            max_options = 2;
 8009b18:	2302      	movs	r3, #2
 8009b1a:	60fb      	str	r3, [r7, #12]
            break;
 8009b1c:	bf00      	nop
    }

    if (upbutton) {
 8009b1e:	4b88      	ldr	r3, [pc, #544]	@ (8009d40 <handleNavigation+0x264>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d052      	beq.n	8009bcc <handleNavigation+0xf0>
        HAL_Delay(200);
 8009b26:	20c8      	movs	r0, #200	@ 0xc8
 8009b28:	f007 f940 	bl	8010dac <HAL_Delay>
        int old_selection = current_selection;
 8009b2c:	4b85      	ldr	r3, [pc, #532]	@ (8009d44 <handleNavigation+0x268>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	60bb      	str	r3, [r7, #8]
        current_selection = (current_selection - 1 + max_options) % max_options;
 8009b32:	4b84      	ldr	r3, [pc, #528]	@ (8009d44 <handleNavigation+0x268>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	1e5a      	subs	r2, r3, #1
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	fb93 f2f2 	sdiv	r2, r3, r2
 8009b42:	68f9      	ldr	r1, [r7, #12]
 8009b44:	fb01 f202 	mul.w	r2, r1, r2
 8009b48:	1a9b      	subs	r3, r3, r2
 8009b4a:	4a7e      	ldr	r2, [pc, #504]	@ (8009d44 <handleNavigation+0x268>)
 8009b4c:	6013      	str	r3, [r2, #0]
        upbutton = 0;
 8009b4e:	4b7c      	ldr	r3, [pc, #496]	@ (8009d40 <handleNavigation+0x264>)
 8009b50:	2200      	movs	r2, #0
 8009b52:	601a      	str	r2, [r3, #0]

        // Quick highlight update instead of full redraw
        switch(current_menu) {
 8009b54:	4b79      	ldr	r3, [pc, #484]	@ (8009d3c <handleNavigation+0x260>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2b03      	cmp	r3, #3
 8009b5a:	d837      	bhi.n	8009bcc <handleNavigation+0xf0>
 8009b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b64 <handleNavigation+0x88>)
 8009b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b62:	bf00      	nop
 8009b64:	08009b75 	.word	0x08009b75
 8009b68:	08009b8b 	.word	0x08009b8b
 8009b6c:	08009ba1 	.word	0x08009ba1
 8009b70:	08009bb7 	.word	0x08009bb7
            case MENU_MAIN:
                updateButtonSelection(old_selection, current_selection);
 8009b74:	4b73      	ldr	r3, [pc, #460]	@ (8009d44 <handleNavigation+0x268>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4619      	mov	r1, r3
 8009b7a:	68b8      	ldr	r0, [r7, #8]
 8009b7c:	f000 fb0a 	bl	800a194 <updateButtonSelection>
                last_selection = current_selection;
 8009b80:	4b70      	ldr	r3, [pc, #448]	@ (8009d44 <handleNavigation+0x268>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a70      	ldr	r2, [pc, #448]	@ (8009d48 <handleNavigation+0x26c>)
 8009b86:	6013      	str	r3, [r2, #0]
                break;
 8009b88:	e020      	b.n	8009bcc <handleNavigation+0xf0>
            case MENU_TOTAL_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 8009b8a:	4b6e      	ldr	r3, [pc, #440]	@ (8009d44 <handleNavigation+0x268>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	68b8      	ldr	r0, [r7, #8]
 8009b92:	f000 faff 	bl	800a194 <updateButtonSelection>
                last_selection = current_selection;
 8009b96:	4b6b      	ldr	r3, [pc, #428]	@ (8009d44 <handleNavigation+0x268>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a6b      	ldr	r2, [pc, #428]	@ (8009d48 <handleNavigation+0x26c>)
 8009b9c:	6013      	str	r3, [r2, #0]
                break;
 8009b9e:	e015      	b.n	8009bcc <handleNavigation+0xf0>
            case MENU_SEPARATE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 8009ba0:	4b68      	ldr	r3, [pc, #416]	@ (8009d44 <handleNavigation+0x268>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	68b8      	ldr	r0, [r7, #8]
 8009ba8:	f000 faf4 	bl	800a194 <updateButtonSelection>
                last_selection = current_selection;
 8009bac:	4b65      	ldr	r3, [pc, #404]	@ (8009d44 <handleNavigation+0x268>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a65      	ldr	r2, [pc, #404]	@ (8009d48 <handleNavigation+0x26c>)
 8009bb2:	6013      	str	r3, [r2, #0]
                break;
 8009bb4:	e00a      	b.n	8009bcc <handleNavigation+0xf0>
            case MENU_DEVICE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 8009bb6:	4b63      	ldr	r3, [pc, #396]	@ (8009d44 <handleNavigation+0x268>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	68b8      	ldr	r0, [r7, #8]
 8009bbe:	f000 fae9 	bl	800a194 <updateButtonSelection>
                last_selection = current_selection;
 8009bc2:	4b60      	ldr	r3, [pc, #384]	@ (8009d44 <handleNavigation+0x268>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a60      	ldr	r2, [pc, #384]	@ (8009d48 <handleNavigation+0x26c>)
 8009bc8:	6013      	str	r3, [r2, #0]
                break;
 8009bca:	bf00      	nop
        }
    }

    if (downbutton) {
 8009bcc:	4b5f      	ldr	r3, [pc, #380]	@ (8009d4c <handleNavigation+0x270>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d04f      	beq.n	8009c74 <handleNavigation+0x198>
        HAL_Delay(200);
 8009bd4:	20c8      	movs	r0, #200	@ 0xc8
 8009bd6:	f007 f8e9 	bl	8010dac <HAL_Delay>
        int old_selection = current_selection;
 8009bda:	4b5a      	ldr	r3, [pc, #360]	@ (8009d44 <handleNavigation+0x268>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	607b      	str	r3, [r7, #4]
        current_selection = (current_selection + 1) % max_options;
 8009be0:	4b58      	ldr	r3, [pc, #352]	@ (8009d44 <handleNavigation+0x268>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3301      	adds	r3, #1
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	fb93 f2f2 	sdiv	r2, r3, r2
 8009bec:	68f9      	ldr	r1, [r7, #12]
 8009bee:	fb01 f202 	mul.w	r2, r1, r2
 8009bf2:	1a9b      	subs	r3, r3, r2
 8009bf4:	4a53      	ldr	r2, [pc, #332]	@ (8009d44 <handleNavigation+0x268>)
 8009bf6:	6013      	str	r3, [r2, #0]
        downbutton = 0;
 8009bf8:	4b54      	ldr	r3, [pc, #336]	@ (8009d4c <handleNavigation+0x270>)
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	601a      	str	r2, [r3, #0]

        switch(current_menu) {
 8009bfe:	4b4f      	ldr	r3, [pc, #316]	@ (8009d3c <handleNavigation+0x260>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b03      	cmp	r3, #3
 8009c04:	d836      	bhi.n	8009c74 <handleNavigation+0x198>
 8009c06:	a201      	add	r2, pc, #4	@ (adr r2, 8009c0c <handleNavigation+0x130>)
 8009c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0c:	08009c1d 	.word	0x08009c1d
 8009c10:	08009c33 	.word	0x08009c33
 8009c14:	08009c49 	.word	0x08009c49
 8009c18:	08009c5f 	.word	0x08009c5f
            case MENU_MAIN:
                updateButtonSelection(old_selection, current_selection);
 8009c1c:	4b49      	ldr	r3, [pc, #292]	@ (8009d44 <handleNavigation+0x268>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fab6 	bl	800a194 <updateButtonSelection>
                last_selection = current_selection;
 8009c28:	4b46      	ldr	r3, [pc, #280]	@ (8009d44 <handleNavigation+0x268>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a46      	ldr	r2, [pc, #280]	@ (8009d48 <handleNavigation+0x26c>)
 8009c2e:	6013      	str	r3, [r2, #0]
                break;
 8009c30:	e020      	b.n	8009c74 <handleNavigation+0x198>
            case MENU_TOTAL_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 8009c32:	4b44      	ldr	r3, [pc, #272]	@ (8009d44 <handleNavigation+0x268>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 faab 	bl	800a194 <updateButtonSelection>
                last_selection = current_selection;
 8009c3e:	4b41      	ldr	r3, [pc, #260]	@ (8009d44 <handleNavigation+0x268>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a41      	ldr	r2, [pc, #260]	@ (8009d48 <handleNavigation+0x26c>)
 8009c44:	6013      	str	r3, [r2, #0]
                break;
 8009c46:	e015      	b.n	8009c74 <handleNavigation+0x198>
            case MENU_SEPARATE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 8009c48:	4b3e      	ldr	r3, [pc, #248]	@ (8009d44 <handleNavigation+0x268>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 faa0 	bl	800a194 <updateButtonSelection>
                last_selection = current_selection;
 8009c54:	4b3b      	ldr	r3, [pc, #236]	@ (8009d44 <handleNavigation+0x268>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a3b      	ldr	r2, [pc, #236]	@ (8009d48 <handleNavigation+0x26c>)
 8009c5a:	6013      	str	r3, [r2, #0]
                break;
 8009c5c:	e00a      	b.n	8009c74 <handleNavigation+0x198>
            case MENU_DEVICE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 8009c5e:	4b39      	ldr	r3, [pc, #228]	@ (8009d44 <handleNavigation+0x268>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4619      	mov	r1, r3
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fa95 	bl	800a194 <updateButtonSelection>
                last_selection = current_selection;
 8009c6a:	4b36      	ldr	r3, [pc, #216]	@ (8009d44 <handleNavigation+0x268>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a36      	ldr	r2, [pc, #216]	@ (8009d48 <handleNavigation+0x26c>)
 8009c70:	6013      	str	r3, [r2, #0]
                break;
 8009c72:	bf00      	nop
        }
    }

    if (enter) {
 8009c74:	4b36      	ldr	r3, [pc, #216]	@ (8009d50 <handleNavigation+0x274>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f000 80df 	beq.w	8009e3c <handleNavigation+0x360>
        HAL_Delay(200);
 8009c7e:	20c8      	movs	r0, #200	@ 0xc8
 8009c80:	f007 f894 	bl	8010dac <HAL_Delay>
        enter = 0;
 8009c84:	4b32      	ldr	r3, [pc, #200]	@ (8009d50 <handleNavigation+0x274>)
 8009c86:	2200      	movs	r2, #0
 8009c88:	601a      	str	r2, [r3, #0]

        switch(current_menu) {
 8009c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8009d3c <handleNavigation+0x260>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b03      	cmp	r3, #3
 8009c90:	f200 80d4 	bhi.w	8009e3c <handleNavigation+0x360>
 8009c94:	a201      	add	r2, pc, #4	@ (adr r2, 8009c9c <handleNavigation+0x1c0>)
 8009c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9a:	bf00      	nop
 8009c9c:	08009cad 	.word	0x08009cad
 8009ca0:	08009cef 	.word	0x08009cef
 8009ca4:	08009d59 	.word	0x08009d59
 8009ca8:	08009db5 	.word	0x08009db5
            case MENU_MAIN:
                if (current_selection == 0) {
 8009cac:	4b25      	ldr	r3, [pc, #148]	@ (8009d44 <handleNavigation+0x268>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10b      	bne.n	8009ccc <handleNavigation+0x1f0>
                    current_menu = MENU_TOTAL_CONTROL;
 8009cb4:	4b21      	ldr	r3, [pc, #132]	@ (8009d3c <handleNavigation+0x260>)
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 8009cba:	4b22      	ldr	r3, [pc, #136]	@ (8009d44 <handleNavigation+0x268>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 8009cc0:	4b24      	ldr	r3, [pc, #144]	@ (8009d54 <handleNavigation+0x278>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	701a      	strb	r2, [r3, #0]
                    displayTotalControlMenu();
 8009cc6:	f7ff fa39 	bl	800913c <displayTotalControlMenu>
                    current_menu = MENU_SEPARATE_CONTROL;
                    current_selection = 0;
                    menu_drawn = false; // Force menu redraw
                    displaySeparateControlMenu();
                }
                break;
 8009cca:	e0b0      	b.n	8009e2e <handleNavigation+0x352>
                } else if (current_selection == 1) {
 8009ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8009d44 <handleNavigation+0x268>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	f040 80ac 	bne.w	8009e2e <handleNavigation+0x352>
                    current_menu = MENU_SEPARATE_CONTROL;
 8009cd6:	4b19      	ldr	r3, [pc, #100]	@ (8009d3c <handleNavigation+0x260>)
 8009cd8:	2202      	movs	r2, #2
 8009cda:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 8009cdc:	4b19      	ldr	r3, [pc, #100]	@ (8009d44 <handleNavigation+0x268>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 8009ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8009d54 <handleNavigation+0x278>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	701a      	strb	r2, [r3, #0]
                    displaySeparateControlMenu();
 8009ce8:	f7ff fb06 	bl	80092f8 <displaySeparateControlMenu>
                break;
 8009cec:	e09f      	b.n	8009e2e <handleNavigation+0x352>

            case MENU_TOTAL_CONTROL:
                if (current_selection == 0) {
 8009cee:	4b15      	ldr	r3, [pc, #84]	@ (8009d44 <handleNavigation+0x268>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d103      	bne.n	8009cfe <handleNavigation+0x222>
                    setAllDevicesState(1);
 8009cf6:	2001      	movs	r0, #1
 8009cf8:	f7ff fdc4 	bl	8009884 <setAllDevicesState>
                    menu_drawn = false; // Force menu redraw
                    displayOnwardsLogoOptimized();
                    HAL_Delay(600);
                    displayMainMenu();
                }
                break;
 8009cfc:	e099      	b.n	8009e32 <handleNavigation+0x356>
                } else if (current_selection == 1) {
 8009cfe:	4b11      	ldr	r3, [pc, #68]	@ (8009d44 <handleNavigation+0x268>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d103      	bne.n	8009d0e <handleNavigation+0x232>
                    setAllDevicesState(0);
 8009d06:	2000      	movs	r0, #0
 8009d08:	f7ff fdbc 	bl	8009884 <setAllDevicesState>
                break;
 8009d0c:	e091      	b.n	8009e32 <handleNavigation+0x356>
                } else if (current_selection == 2) {
 8009d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d44 <handleNavigation+0x268>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	f040 808d 	bne.w	8009e32 <handleNavigation+0x356>
                    current_menu = MENU_MAIN;
 8009d18:	4b08      	ldr	r3, [pc, #32]	@ (8009d3c <handleNavigation+0x260>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 8009d1e:	4b09      	ldr	r3, [pc, #36]	@ (8009d44 <handleNavigation+0x268>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 8009d24:	4b0b      	ldr	r3, [pc, #44]	@ (8009d54 <handleNavigation+0x278>)
 8009d26:	2200      	movs	r2, #0
 8009d28:	701a      	strb	r2, [r3, #0]
                    displayOnwardsLogoOptimized();
 8009d2a:	f004 f87d 	bl	800de28 <displayOnwardsLogoOptimized>
                    HAL_Delay(600);
 8009d2e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8009d32:	f007 f83b 	bl	8010dac <HAL_Delay>
                    displayMainMenu();
 8009d36:	f7ff f985 	bl	8009044 <displayMainMenu>
                break;
 8009d3a:	e07a      	b.n	8009e32 <handleNavigation+0x356>
 8009d3c:	20000280 	.word	0x20000280
 8009d40:	20000290 	.word	0x20000290
 8009d44:	20000284 	.word	0x20000284
 8009d48:	20000000 	.word	0x20000000
 8009d4c:	2000028c 	.word	0x2000028c
 8009d50:	20000294 	.word	0x20000294
 8009d54:	200002a8 	.word	0x200002a8

            case MENU_SEPARATE_CONTROL:
                if (current_selection >= 0 && current_selection <= 3) {
 8009d58:	4b3a      	ldr	r3, [pc, #232]	@ (8009e44 <handleNavigation+0x368>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	db13      	blt.n	8009d88 <handleNavigation+0x2ac>
 8009d60:	4b38      	ldr	r3, [pc, #224]	@ (8009e44 <handleNavigation+0x368>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b03      	cmp	r3, #3
 8009d66:	dc0f      	bgt.n	8009d88 <handleNavigation+0x2ac>
                    current_device = current_selection;
 8009d68:	4b36      	ldr	r3, [pc, #216]	@ (8009e44 <handleNavigation+0x368>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a36      	ldr	r2, [pc, #216]	@ (8009e48 <handleNavigation+0x36c>)
 8009d6e:	6013      	str	r3, [r2, #0]
                    current_menu = MENU_DEVICE_CONTROL;
 8009d70:	4b36      	ldr	r3, [pc, #216]	@ (8009e4c <handleNavigation+0x370>)
 8009d72:	2203      	movs	r2, #3
 8009d74:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 8009d76:	4b33      	ldr	r3, [pc, #204]	@ (8009e44 <handleNavigation+0x368>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 8009d7c:	4b34      	ldr	r3, [pc, #208]	@ (8009e50 <handleNavigation+0x374>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	701a      	strb	r2, [r3, #0]
                    displayDeviceControlMenu();
 8009d82:	f7ff fb93 	bl	80094ac <displayDeviceControlMenu>
                    menu_drawn = false; // Force menu redraw
                    displayOnwardsLogoOptimized();
                    HAL_Delay(600);
                    displayMainMenu();
                }
                break;
 8009d86:	e056      	b.n	8009e36 <handleNavigation+0x35a>
                } else if (current_selection == 4) {
 8009d88:	4b2e      	ldr	r3, [pc, #184]	@ (8009e44 <handleNavigation+0x368>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2b04      	cmp	r3, #4
 8009d8e:	d152      	bne.n	8009e36 <handleNavigation+0x35a>
                    current_menu = MENU_MAIN;
 8009d90:	4b2e      	ldr	r3, [pc, #184]	@ (8009e4c <handleNavigation+0x370>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 8009d96:	4b2b      	ldr	r3, [pc, #172]	@ (8009e44 <handleNavigation+0x368>)
 8009d98:	2200      	movs	r2, #0
 8009d9a:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 8009d9c:	4b2c      	ldr	r3, [pc, #176]	@ (8009e50 <handleNavigation+0x374>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	701a      	strb	r2, [r3, #0]
                    displayOnwardsLogoOptimized();
 8009da2:	f004 f841 	bl	800de28 <displayOnwardsLogoOptimized>
                    HAL_Delay(600);
 8009da6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8009daa:	f006 ffff 	bl	8010dac <HAL_Delay>
                    displayMainMenu();
 8009dae:	f7ff f949 	bl	8009044 <displayMainMenu>
                break;
 8009db2:	e040      	b.n	8009e36 <handleNavigation+0x35a>

            case MENU_DEVICE_CONTROL:
                if (current_selection == 0) {
 8009db4:	4b23      	ldr	r3, [pc, #140]	@ (8009e44 <handleNavigation+0x368>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d106      	bne.n	8009dca <handleNavigation+0x2ee>
                    setDeviceState(current_device, 1);
 8009dbc:	4b22      	ldr	r3, [pc, #136]	@ (8009e48 <handleNavigation+0x36c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2101      	movs	r1, #1
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7ff fc6a 	bl	800969c <setDeviceState>
                    menu_drawn = false; // Force menu redraw
                    displayOnwardsLogoOptimized();
                    HAL_Delay(600);
                    displayMainMenu();
                }
                break;
 8009dc8:	e037      	b.n	8009e3a <handleNavigation+0x35e>
                } else if (current_selection == 1) {
 8009dca:	4b1e      	ldr	r3, [pc, #120]	@ (8009e44 <handleNavigation+0x368>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d106      	bne.n	8009de0 <handleNavigation+0x304>
                    setDeviceState(current_device, 0);
 8009dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8009e48 <handleNavigation+0x36c>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff fc5f 	bl	800969c <setDeviceState>
                break;
 8009dde:	e02c      	b.n	8009e3a <handleNavigation+0x35e>
                } else if (current_selection == 2) {
 8009de0:	4b18      	ldr	r3, [pc, #96]	@ (8009e44 <handleNavigation+0x368>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d10c      	bne.n	8009e02 <handleNavigation+0x326>
                    current_menu = MENU_SEPARATE_CONTROL;
 8009de8:	4b18      	ldr	r3, [pc, #96]	@ (8009e4c <handleNavigation+0x370>)
 8009dea:	2202      	movs	r2, #2
 8009dec:	601a      	str	r2, [r3, #0]
                    current_selection = current_device;
 8009dee:	4b16      	ldr	r3, [pc, #88]	@ (8009e48 <handleNavigation+0x36c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a14      	ldr	r2, [pc, #80]	@ (8009e44 <handleNavigation+0x368>)
 8009df4:	6013      	str	r3, [r2, #0]
                    menu_drawn = false; // Force menu redraw
 8009df6:	4b16      	ldr	r3, [pc, #88]	@ (8009e50 <handleNavigation+0x374>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	701a      	strb	r2, [r3, #0]
                    displaySeparateControlMenu();
 8009dfc:	f7ff fa7c 	bl	80092f8 <displaySeparateControlMenu>
                break;
 8009e00:	e01b      	b.n	8009e3a <handleNavigation+0x35e>
                }else if (current_selection == 3) {
 8009e02:	4b10      	ldr	r3, [pc, #64]	@ (8009e44 <handleNavigation+0x368>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2b03      	cmp	r3, #3
 8009e08:	d117      	bne.n	8009e3a <handleNavigation+0x35e>
                    current_menu = MENU_MAIN;
 8009e0a:	4b10      	ldr	r3, [pc, #64]	@ (8009e4c <handleNavigation+0x370>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 8009e10:	4b0c      	ldr	r3, [pc, #48]	@ (8009e44 <handleNavigation+0x368>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 8009e16:	4b0e      	ldr	r3, [pc, #56]	@ (8009e50 <handleNavigation+0x374>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	701a      	strb	r2, [r3, #0]
                    displayOnwardsLogoOptimized();
 8009e1c:	f004 f804 	bl	800de28 <displayOnwardsLogoOptimized>
                    HAL_Delay(600);
 8009e20:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8009e24:	f006 ffc2 	bl	8010dac <HAL_Delay>
                    displayMainMenu();
 8009e28:	f7ff f90c 	bl	8009044 <displayMainMenu>
                break;
 8009e2c:	e005      	b.n	8009e3a <handleNavigation+0x35e>
                break;
 8009e2e:	bf00      	nop
 8009e30:	e004      	b.n	8009e3c <handleNavigation+0x360>
                break;
 8009e32:	bf00      	nop
 8009e34:	e002      	b.n	8009e3c <handleNavigation+0x360>
                break;
 8009e36:	bf00      	nop
 8009e38:	e000      	b.n	8009e3c <handleNavigation+0x360>
                break;
 8009e3a:	bf00      	nop
        }
    }
}
 8009e3c:	bf00      	nop
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	20000284 	.word	0x20000284
 8009e48:	20000288 	.word	0x20000288
 8009e4c:	20000280 	.word	0x20000280
 8009e50:	200002a8 	.word	0x200002a8

08009e54 <Menu_Handler>:


void Menu_Handler(void) {
 8009e54:	b580      	push	{r7, lr}
 8009e56:	af00      	add	r7, sp, #0
    switch(current_menu) {
 8009e58:	4b0f      	ldr	r3, [pc, #60]	@ (8009e98 <Menu_Handler+0x44>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b03      	cmp	r3, #3
 8009e5e:	d817      	bhi.n	8009e90 <Menu_Handler+0x3c>
 8009e60:	a201      	add	r2, pc, #4	@ (adr r2, 8009e68 <Menu_Handler+0x14>)
 8009e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e66:	bf00      	nop
 8009e68:	08009e79 	.word	0x08009e79
 8009e6c:	08009e7f 	.word	0x08009e7f
 8009e70:	08009e85 	.word	0x08009e85
 8009e74:	08009e8b 	.word	0x08009e8b
        case MENU_MAIN:
            displayMainMenu();
 8009e78:	f7ff f8e4 	bl	8009044 <displayMainMenu>
            break;
 8009e7c:	e008      	b.n	8009e90 <Menu_Handler+0x3c>
        case MENU_TOTAL_CONTROL:
            displayTotalControlMenu();
 8009e7e:	f7ff f95d 	bl	800913c <displayTotalControlMenu>
            break;
 8009e82:	e005      	b.n	8009e90 <Menu_Handler+0x3c>
        case MENU_SEPARATE_CONTROL:
            displaySeparateControlMenu();
 8009e84:	f7ff fa38 	bl	80092f8 <displaySeparateControlMenu>
            break;
 8009e88:	e002      	b.n	8009e90 <Menu_Handler+0x3c>
        case MENU_DEVICE_CONTROL:
            displayDeviceControlMenu();
 8009e8a:	f7ff fb0f 	bl	80094ac <displayDeviceControlMenu>
            break;
 8009e8e:	bf00      	nop
    }

    handleNavigation();
 8009e90:	f7ff fe24 	bl	8009adc <handleNavigation>
}
 8009e94:	bf00      	nop
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20000280 	.word	0x20000280

08009e9c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_10) { // ENTER button
 8009ea6:	88fb      	ldrh	r3, [r7, #6]
 8009ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009eac:	d108      	bne.n	8009ec0 <HAL_GPIO_EXTI_Callback+0x24>
        downbutton = 0;
 8009eae:	4b14      	ldr	r3, [pc, #80]	@ (8009f00 <HAL_GPIO_EXTI_Callback+0x64>)
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	601a      	str	r2, [r3, #0]
        upbutton = 0;
 8009eb4:	4b13      	ldr	r3, [pc, #76]	@ (8009f04 <HAL_GPIO_EXTI_Callback+0x68>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	601a      	str	r2, [r3, #0]
        enter = 1;
 8009eba:	4b13      	ldr	r3, [pc, #76]	@ (8009f08 <HAL_GPIO_EXTI_Callback+0x6c>)
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	601a      	str	r2, [r3, #0]
    }

    if (GPIO_Pin == GPIO_PIN_11) { // DOWN button
 8009ec0:	88fb      	ldrh	r3, [r7, #6]
 8009ec2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ec6:	d108      	bne.n	8009eda <HAL_GPIO_EXTI_Callback+0x3e>
        downbutton = 1;
 8009ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8009f00 <HAL_GPIO_EXTI_Callback+0x64>)
 8009eca:	2201      	movs	r2, #1
 8009ecc:	601a      	str	r2, [r3, #0]
        upbutton = 0;
 8009ece:	4b0d      	ldr	r3, [pc, #52]	@ (8009f04 <HAL_GPIO_EXTI_Callback+0x68>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	601a      	str	r2, [r3, #0]
        enter = 0;
 8009ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8009f08 <HAL_GPIO_EXTI_Callback+0x6c>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	601a      	str	r2, [r3, #0]
    }

    if (GPIO_Pin == GPIO_PIN_9) { // UP button
 8009eda:	88fb      	ldrh	r3, [r7, #6]
 8009edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ee0:	d108      	bne.n	8009ef4 <HAL_GPIO_EXTI_Callback+0x58>
        downbutton = 0;
 8009ee2:	4b07      	ldr	r3, [pc, #28]	@ (8009f00 <HAL_GPIO_EXTI_Callback+0x64>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	601a      	str	r2, [r3, #0]
        upbutton = 1;
 8009ee8:	4b06      	ldr	r3, [pc, #24]	@ (8009f04 <HAL_GPIO_EXTI_Callback+0x68>)
 8009eea:	2201      	movs	r2, #1
 8009eec:	601a      	str	r2, [r3, #0]
        enter = 0;
 8009eee:	4b06      	ldr	r3, [pc, #24]	@ (8009f08 <HAL_GPIO_EXTI_Callback+0x6c>)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	601a      	str	r2, [r3, #0]
    }
}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	2000028c 	.word	0x2000028c
 8009f04:	20000290 	.word	0x20000290
 8009f08:	20000294 	.word	0x20000294

08009f0c <initializeMenu>:


void initializeMenu(void) {
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
    safe_printf("display_init\n\r");
 8009f12:	481c      	ldr	r0, [pc, #112]	@ (8009f84 <initializeMenu+0x78>)
 8009f14:	f001 fad0 	bl	800b4b8 <safe_printf>
    current_menu = MENU_MAIN;
 8009f18:	4b1b      	ldr	r3, [pc, #108]	@ (8009f88 <initializeMenu+0x7c>)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	601a      	str	r2, [r3, #0]
    current_selection = 0;
 8009f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8009f8c <initializeMenu+0x80>)
 8009f20:	2200      	movs	r2, #0
 8009f22:	601a      	str	r2, [r3, #0]
    current_device = 0;
 8009f24:	4b1a      	ldr	r3, [pc, #104]	@ (8009f90 <initializeMenu+0x84>)
 8009f26:	2200      	movs	r2, #0
 8009f28:	601a      	str	r2, [r3, #0]
    last_selection = -1;
 8009f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8009f94 <initializeMenu+0x88>)
 8009f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f30:	601a      	str	r2, [r3, #0]
    last_menu = -1;
 8009f32:	4b19      	ldr	r3, [pc, #100]	@ (8009f98 <initializeMenu+0x8c>)
 8009f34:	f04f 32ff 	mov.w	r2, #4294967295
 8009f38:	601a      	str	r2, [r3, #0]
    menu_drawn = false;
 8009f3a:	4b18      	ldr	r3, [pc, #96]	@ (8009f9c <initializeMenu+0x90>)
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	701a      	strb	r2, [r3, #0]
    buttons_drawn = false;
 8009f40:	4b17      	ldr	r3, [pc, #92]	@ (8009fa0 <initializeMenu+0x94>)
 8009f42:	2200      	movs	r2, #0
 8009f44:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < 4; i++) {
 8009f46:	2300      	movs	r3, #0
 8009f48:	607b      	str	r3, [r7, #4]
 8009f4a:	e011      	b.n	8009f70 <initializeMenu+0x64>
        device_states[i] = 0;
 8009f4c:	4a15      	ldr	r2, [pc, #84]	@ (8009fa4 <initializeMenu+0x98>)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2100      	movs	r1, #0
 8009f52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        last_device_states[i] = -1;
 8009f56:	4a14      	ldr	r2, [pc, #80]	@ (8009fa8 <initializeMenu+0x9c>)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8009f5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        setDeviceState(i, 0);
 8009f62:	2100      	movs	r1, #0
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f7ff fb99 	bl	800969c <setDeviceState>
    for (int i = 0; i < 4; i++) {
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	607b      	str	r3, [r7, #4]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b03      	cmp	r3, #3
 8009f74:	ddea      	ble.n	8009f4c <initializeMenu+0x40>
    }
    displayMainMenu();
 8009f76:	f7ff f865 	bl	8009044 <displayMainMenu>
}
 8009f7a:	bf00      	nop
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	0801cdb0 	.word	0x0801cdb0
 8009f88:	20000280 	.word	0x20000280
 8009f8c:	20000284 	.word	0x20000284
 8009f90:	20000288 	.word	0x20000288
 8009f94:	20000000 	.word	0x20000000
 8009f98:	20000004 	.word	0x20000004
 8009f9c:	200002a8 	.word	0x200002a8
 8009fa0:	200002a9 	.word	0x200002a9
 8009fa4:	20000298 	.word	0x20000298
 8009fa8:	20000008 	.word	0x20000008

08009fac <drawSingleButton>:
#endif
}


void drawSingleButton(int x, int y, int width, int height, char* text, int selected, int button_id)
{
 8009fac:	b590      	push	{r4, r7, lr}
 8009fae:	b089      	sub	sp, #36	@ 0x24
 8009fb0:	af04      	add	r7, sp, #16
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
 8009fb8:	603b      	str	r3, [r7, #0]
    fillRect(x-1, y-1, width+2, height+2, BLACK);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	b218      	sxth	r0, r3
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	b219      	sxth	r1, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	3302      	adds	r3, #2
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	b21a      	sxth	r2, r3
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	3302      	adds	r3, #2
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	b21b      	sxth	r3, r3
 8009fe2:	2400      	movs	r4, #0
 8009fe4:	9400      	str	r4, [sp, #0]
 8009fe6:	f002 ff6e 	bl	800cec6 <fillRect>

    if (selected)
 8009fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d03e      	beq.n	800a06e <drawSingleButton+0xc2>
    {
        drawRoundRect(x-1, y-1, width+2, height+2, 3, WHITE);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	b218      	sxth	r0, r3
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	3b01      	subs	r3, #1
 800a000:	b29b      	uxth	r3, r3
 800a002:	b219      	sxth	r1, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	b29b      	uxth	r3, r3
 800a008:	3302      	adds	r3, #2
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	b21a      	sxth	r2, r3
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	b29b      	uxth	r3, r3
 800a012:	3302      	adds	r3, #2
 800a014:	b29b      	uxth	r3, r3
 800a016:	b21b      	sxth	r3, r3
 800a018:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800a01c:	9401      	str	r4, [sp, #4]
 800a01e:	2403      	movs	r4, #3
 800a020:	9400      	str	r4, [sp, #0]
 800a022:	f003 fa71 	bl	800d508 <drawRoundRect>
        fillRoundRect(x, y, width, height, 3, GREEN);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	b218      	sxth	r0, r3
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	b219      	sxth	r1, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	b21a      	sxth	r2, r3
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	b21b      	sxth	r3, r3
 800a036:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 800a03a:	9401      	str	r4, [sp, #4]
 800a03c:	2403      	movs	r4, #3
 800a03e:	9400      	str	r4, [sp, #0]
 800a040:	f003 fb2f 	bl	800d6a2 <fillRoundRect>
        ST7735_WriteString(x+5, y+4, text, Font_7x10, BLACK, GREEN);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	b29b      	uxth	r3, r3
 800a048:	3305      	adds	r3, #5
 800a04a:	b298      	uxth	r0, r3
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	b29b      	uxth	r3, r3
 800a050:	3304      	adds	r3, #4
 800a052:	b299      	uxth	r1, r3
 800a054:	4b4d      	ldr	r3, [pc, #308]	@ (800a18c <drawSingleButton+0x1e0>)
 800a056:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800a05a:	9202      	str	r2, [sp, #8]
 800a05c:	2200      	movs	r2, #0
 800a05e:	9201      	str	r2, [sp, #4]
 800a060:	685a      	ldr	r2, [r3, #4]
 800a062:	9200      	str	r2, [sp, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	6a3a      	ldr	r2, [r7, #32]
 800a068:	f003 fe02 	bl	800dc70 <ST7735_WriteString>
 800a06c:	e03e      	b.n	800a0ec <drawSingleButton+0x140>
    }
    else
    {
        drawRoundRect(x-1, y-1, width+2, height+2, 3, WHITE);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	b29b      	uxth	r3, r3
 800a072:	3b01      	subs	r3, #1
 800a074:	b29b      	uxth	r3, r3
 800a076:	b218      	sxth	r0, r3
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	3b01      	subs	r3, #1
 800a07e:	b29b      	uxth	r3, r3
 800a080:	b219      	sxth	r1, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	b29b      	uxth	r3, r3
 800a086:	3302      	adds	r3, #2
 800a088:	b29b      	uxth	r3, r3
 800a08a:	b21a      	sxth	r2, r3
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	3302      	adds	r3, #2
 800a092:	b29b      	uxth	r3, r3
 800a094:	b21b      	sxth	r3, r3
 800a096:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800a09a:	9401      	str	r4, [sp, #4]
 800a09c:	2403      	movs	r4, #3
 800a09e:	9400      	str	r4, [sp, #0]
 800a0a0:	f003 fa32 	bl	800d508 <drawRoundRect>
        fillRoundRect(x, y, width, height, 3, GRAY);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	b218      	sxth	r0, r3
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	b219      	sxth	r1, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	b21a      	sxth	r2, r3
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	b21b      	sxth	r3, r3
 800a0b4:	f242 1404 	movw	r4, #8452	@ 0x2104
 800a0b8:	9401      	str	r4, [sp, #4]
 800a0ba:	2403      	movs	r4, #3
 800a0bc:	9400      	str	r4, [sp, #0]
 800a0be:	f003 faf0 	bl	800d6a2 <fillRoundRect>
        ST7735_WriteString(x+5, y+4, text, Font_7x10, WHITE, GRAY);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	3305      	adds	r3, #5
 800a0c8:	b298      	uxth	r0, r3
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	b299      	uxth	r1, r3
 800a0d2:	4b2e      	ldr	r3, [pc, #184]	@ (800a18c <drawSingleButton+0x1e0>)
 800a0d4:	f242 1204 	movw	r2, #8452	@ 0x2104
 800a0d8:	9202      	str	r2, [sp, #8]
 800a0da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a0de:	9201      	str	r2, [sp, #4]
 800a0e0:	685a      	ldr	r2, [r3, #4]
 800a0e2:	9200      	str	r2, [sp, #0]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	6a3a      	ldr	r2, [r7, #32]
 800a0e8:	f003 fdc2 	bl	800dc70 <ST7735_WriteString>
    }

    // Store button position AND TEXT for future updates
    if (button_id < 6)
 800a0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ee:	2b05      	cmp	r3, #5
 800a0f0:	dc48      	bgt.n	800a184 <drawSingleButton+0x1d8>
    {
        current_buttons[button_id].x = x;
 800a0f2:	4927      	ldr	r1, [pc, #156]	@ (800a190 <drawSingleButton+0x1e4>)
 800a0f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	005b      	lsls	r3, r3, #1
 800a0fa:	4413      	add	r3, r2
 800a0fc:	011b      	lsls	r3, r3, #4
 800a0fe:	440b      	add	r3, r1
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].y = y;
 800a104:	4922      	ldr	r1, [pc, #136]	@ (800a190 <drawSingleButton+0x1e4>)
 800a106:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a108:	4613      	mov	r3, r2
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	4413      	add	r3, r2
 800a10e:	011b      	lsls	r3, r3, #4
 800a110:	440b      	add	r3, r1
 800a112:	3304      	adds	r3, #4
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].width = width;
 800a118:	491d      	ldr	r1, [pc, #116]	@ (800a190 <drawSingleButton+0x1e4>)
 800a11a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a11c:	4613      	mov	r3, r2
 800a11e:	005b      	lsls	r3, r3, #1
 800a120:	4413      	add	r3, r2
 800a122:	011b      	lsls	r3, r3, #4
 800a124:	440b      	add	r3, r1
 800a126:	3308      	adds	r3, #8
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].height = height;
 800a12c:	4918      	ldr	r1, [pc, #96]	@ (800a190 <drawSingleButton+0x1e4>)
 800a12e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a130:	4613      	mov	r3, r2
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	4413      	add	r3, r2
 800a136:	011b      	lsls	r3, r3, #4
 800a138:	440b      	add	r3, r1
 800a13a:	330c      	adds	r3, #12
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].button_id = button_id;
 800a140:	4913      	ldr	r1, [pc, #76]	@ (800a190 <drawSingleButton+0x1e4>)
 800a142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a144:	4613      	mov	r3, r2
 800a146:	005b      	lsls	r3, r3, #1
 800a148:	4413      	add	r3, r2
 800a14a:	011b      	lsls	r3, r3, #4
 800a14c:	440b      	add	r3, r1
 800a14e:	3310      	adds	r3, #16
 800a150:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a152:	601a      	str	r2, [r3, #0]
        strncpy(current_buttons[button_id].text, text, 24);
 800a154:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a156:	4613      	mov	r3, r2
 800a158:	005b      	lsls	r3, r3, #1
 800a15a:	4413      	add	r3, r2
 800a15c:	011b      	lsls	r3, r3, #4
 800a15e:	3310      	adds	r3, #16
 800a160:	4a0b      	ldr	r2, [pc, #44]	@ (800a190 <drawSingleButton+0x1e4>)
 800a162:	4413      	add	r3, r2
 800a164:	3304      	adds	r3, #4
 800a166:	2218      	movs	r2, #24
 800a168:	6a39      	ldr	r1, [r7, #32]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f00f fd12 	bl	8019b94 <strncpy>
        current_buttons[button_id].text[24] = '\0';
 800a170:	4907      	ldr	r1, [pc, #28]	@ (800a190 <drawSingleButton+0x1e4>)
 800a172:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a174:	4613      	mov	r3, r2
 800a176:	005b      	lsls	r3, r3, #1
 800a178:	4413      	add	r3, r2
 800a17a:	011b      	lsls	r3, r3, #4
 800a17c:	440b      	add	r3, r1
 800a17e:	332c      	adds	r3, #44	@ 0x2c
 800a180:	2200      	movs	r2, #0
 800a182:	701a      	strb	r2, [r3, #0]
    }
}
 800a184:	bf00      	nop
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd90      	pop	{r4, r7, pc}
 800a18c:	20000070 	.word	0x20000070
 800a190:	200002ac 	.word	0x200002ac

0800a194 <updateButtonSelection>:

void updateButtonSelection(int old_selection, int new_selection)

{
 800a194:	b590      	push	{r4, r7, lr}
 800a196:	b089      	sub	sp, #36	@ 0x24
 800a198:	af04      	add	r7, sp, #16
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
    // Update old button (unselect)
    if (old_selection >= 0 && old_selection < button_count)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	db74      	blt.n	800a28e <updateButtonSelection+0xfa>
 800a1a4:	4b77      	ldr	r3, [pc, #476]	@ (800a384 <updateButtonSelection+0x1f0>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	da6f      	bge.n	800a28e <updateButtonSelection+0xfa>
    {
        button_position_t *old_btn = &current_buttons[old_selection];
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	005b      	lsls	r3, r3, #1
 800a1b4:	4413      	add	r3, r2
 800a1b6:	011b      	lsls	r3, r3, #4
 800a1b8:	4a73      	ldr	r2, [pc, #460]	@ (800a388 <updateButtonSelection+0x1f4>)
 800a1ba:	4413      	add	r3, r2
 800a1bc:	60fb      	str	r3, [r7, #12]

        // Clear and redraw unselected button with text
        fillRect(old_btn->x-1, old_btn->y-1, old_btn->width+2, old_btn->height+2, BLACK);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	b218      	sxth	r0, r3
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	b219      	sxth	r1, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	3302      	adds	r3, #2
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	b21a      	sxth	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	3302      	adds	r3, #2
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	b21b      	sxth	r3, r3
 800a1ee:	2400      	movs	r4, #0
 800a1f0:	9400      	str	r4, [sp, #0]
 800a1f2:	f002 fe68 	bl	800cec6 <fillRect>
        drawRoundRect(old_btn->x-1, old_btn->y-1, old_btn->width+2, old_btn->height+2, 3, WHITE);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	b218      	sxth	r0, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	b29b      	uxth	r3, r3
 800a208:	3b01      	subs	r3, #1
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	b219      	sxth	r1, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	b29b      	uxth	r3, r3
 800a214:	3302      	adds	r3, #2
 800a216:	b29b      	uxth	r3, r3
 800a218:	b21a      	sxth	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	3302      	adds	r3, #2
 800a222:	b29b      	uxth	r3, r3
 800a224:	b21b      	sxth	r3, r3
 800a226:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800a22a:	9401      	str	r4, [sp, #4]
 800a22c:	2403      	movs	r4, #3
 800a22e:	9400      	str	r4, [sp, #0]
 800a230:	f003 f96a 	bl	800d508 <drawRoundRect>
        fillRoundRect(old_btn->x, old_btn->y, old_btn->width, old_btn->height, 3, GRAY);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	b218      	sxth	r0, r3
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	b219      	sxth	r1, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	b21a      	sxth	r2, r3
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	b21b      	sxth	r3, r3
 800a24c:	f242 1404 	movw	r4, #8452	@ 0x2104
 800a250:	9401      	str	r4, [sp, #4]
 800a252:	2403      	movs	r4, #3
 800a254:	9400      	str	r4, [sp, #0]
 800a256:	f003 fa24 	bl	800d6a2 <fillRoundRect>
        ST7735_WriteString(old_btn->x+5, old_btn->y+4, old_btn->text, Font_7x10, WHITE, GRAY);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	b29b      	uxth	r3, r3
 800a260:	3305      	adds	r3, #5
 800a262:	b298      	uxth	r0, r3
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	3304      	adds	r3, #4
 800a26c:	b299      	uxth	r1, r3
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f103 0414 	add.w	r4, r3, #20
 800a274:	4b45      	ldr	r3, [pc, #276]	@ (800a38c <updateButtonSelection+0x1f8>)
 800a276:	f242 1204 	movw	r2, #8452	@ 0x2104
 800a27a:	9202      	str	r2, [sp, #8]
 800a27c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a280:	9201      	str	r2, [sp, #4]
 800a282:	685a      	ldr	r2, [r3, #4]
 800a284:	9200      	str	r2, [sp, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4622      	mov	r2, r4
 800a28a:	f003 fcf1 	bl	800dc70 <ST7735_WriteString>
    }

    // Update new button (select)
    if (new_selection >= 0 && new_selection < button_count)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	db73      	blt.n	800a37c <updateButtonSelection+0x1e8>
 800a294:	4b3b      	ldr	r3, [pc, #236]	@ (800a384 <updateButtonSelection+0x1f0>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	683a      	ldr	r2, [r7, #0]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	da6e      	bge.n	800a37c <updateButtonSelection+0x1e8>
    {
        button_position_t *new_btn = &current_buttons[new_selection];
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	005b      	lsls	r3, r3, #1
 800a2a4:	4413      	add	r3, r2
 800a2a6:	011b      	lsls	r3, r3, #4
 800a2a8:	4a37      	ldr	r2, [pc, #220]	@ (800a388 <updateButtonSelection+0x1f4>)
 800a2aa:	4413      	add	r3, r2
 800a2ac:	60bb      	str	r3, [r7, #8]

        // Clear and redraw selected button with text
        fillRect(new_btn->x-1, new_btn->y-1, new_btn->width+2, new_btn->height+2, BLACK);
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	b218      	sxth	r0, r3
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	b219      	sxth	r1, r3
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	3302      	adds	r3, #2
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	b21a      	sxth	r2, r3
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	3302      	adds	r3, #2
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	b21b      	sxth	r3, r3
 800a2de:	2400      	movs	r4, #0
 800a2e0:	9400      	str	r4, [sp, #0]
 800a2e2:	f002 fdf0 	bl	800cec6 <fillRect>
        drawRoundRect(new_btn->x-1, new_btn->y-1, new_btn->width+2, new_btn->height+2, 3, WHITE);
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	b218      	sxth	r0, r3
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	b219      	sxth	r1, r3
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	b29b      	uxth	r3, r3
 800a304:	3302      	adds	r3, #2
 800a306:	b29b      	uxth	r3, r3
 800a308:	b21a      	sxth	r2, r3
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	b29b      	uxth	r3, r3
 800a310:	3302      	adds	r3, #2
 800a312:	b29b      	uxth	r3, r3
 800a314:	b21b      	sxth	r3, r3
 800a316:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800a31a:	9401      	str	r4, [sp, #4]
 800a31c:	2403      	movs	r4, #3
 800a31e:	9400      	str	r4, [sp, #0]
 800a320:	f003 f8f2 	bl	800d508 <drawRoundRect>
        fillRoundRect(new_btn->x, new_btn->y, new_btn->width, new_btn->height, 3, GREEN);
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	b218      	sxth	r0, r3
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	b219      	sxth	r1, r3
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	b21a      	sxth	r2, r3
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	b21b      	sxth	r3, r3
 800a33c:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 800a340:	9401      	str	r4, [sp, #4]
 800a342:	2403      	movs	r4, #3
 800a344:	9400      	str	r4, [sp, #0]
 800a346:	f003 f9ac 	bl	800d6a2 <fillRoundRect>
        ST7735_WriteString(new_btn->x+5, new_btn->y+4, new_btn->text, Font_7x10, BLACK, GREEN);
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	b29b      	uxth	r3, r3
 800a350:	3305      	adds	r3, #5
 800a352:	b298      	uxth	r0, r3
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	b29b      	uxth	r3, r3
 800a35a:	3304      	adds	r3, #4
 800a35c:	b299      	uxth	r1, r3
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	f103 0414 	add.w	r4, r3, #20
 800a364:	4b09      	ldr	r3, [pc, #36]	@ (800a38c <updateButtonSelection+0x1f8>)
 800a366:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800a36a:	9202      	str	r2, [sp, #8]
 800a36c:	2200      	movs	r2, #0
 800a36e:	9201      	str	r2, [sp, #4]
 800a370:	685a      	ldr	r2, [r3, #4]
 800a372:	9200      	str	r2, [sp, #0]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4622      	mov	r2, r4
 800a378:	f003 fc7a 	bl	800dc70 <ST7735_WriteString>
    }
}
 800a37c:	bf00      	nop
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	bd90      	pop	{r4, r7, pc}
 800a384:	200003cc 	.word	0x200003cc
 800a388:	200002ac 	.word	0x200002ac
 800a38c:	20000070 	.word	0x20000070

0800a390 <updateStatusInfo>:
    snprintf(status, sizeof(status), "[%s]", is_on ? "ON" : "OFF");
    ST7735_WriteString(text_x + 70, text_y, status, Font_7x10, WHITE, GRAY);
}

void updateStatusInfo(char* status, uint16_t color)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af04      	add	r7, sp, #16
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	460b      	mov	r3, r1
 800a39a:	807b      	strh	r3, [r7, #2]
    fillRect(MARGIN_X, TITLE_HEIGHT + 5, BUTTON_WIDTH, 12, BLACK);
 800a39c:	2300      	movs	r3, #0
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	230c      	movs	r3, #12
 800a3a2:	228c      	movs	r2, #140	@ 0x8c
 800a3a4:	2114      	movs	r1, #20
 800a3a6:	200a      	movs	r0, #10
 800a3a8:	f002 fd8d 	bl	800cec6 <fillRect>
    ST7735_WriteString(MARGIN_X + 2, TITLE_HEIGHT + 7, status, Font_7x10, color, BLACK);
 800a3ac:	4b08      	ldr	r3, [pc, #32]	@ (800a3d0 <updateStatusInfo+0x40>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	9202      	str	r2, [sp, #8]
 800a3b2:	887a      	ldrh	r2, [r7, #2]
 800a3b4:	9201      	str	r2, [sp, #4]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	9200      	str	r2, [sp, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	2116      	movs	r1, #22
 800a3c0:	200c      	movs	r0, #12
 800a3c2:	f003 fc55 	bl	800dc70 <ST7735_WriteString>
}
 800a3c6:	bf00      	nop
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	20000070 	.word	0x20000070

0800a3d4 <updateDeviceCount>:

void updateDeviceCount(int total_on)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b08c      	sub	sp, #48	@ 0x30
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
    char status[35];
    if(total_on > 0)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	dd0e      	ble.n	800a400 <updateDeviceCount+0x2c>
    {
    	snprintf(status, sizeof(status), "Status: %d/4 devices", total_on);
 800a3e2:	f107 000c 	add.w	r0, r7, #12
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a0e      	ldr	r2, [pc, #56]	@ (800a424 <updateDeviceCount+0x50>)
 800a3ea:	2123      	movs	r1, #35	@ 0x23
 800a3ec:	f00f fa1e 	bl	801982c <sniprintf>
    	updateStatusInfo(status, GREEN);
 800a3f0:	f107 030c 	add.w	r3, r7, #12
 800a3f4:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7ff ffc9 	bl	800a390 <updateStatusInfo>
    else
    {
    	snprintf(status, sizeof(status), "Status: %d/4 devices", total_on);
		updateStatusInfo(status, RED);
    }
}
 800a3fe:	e00d      	b.n	800a41c <updateDeviceCount+0x48>
    	snprintf(status, sizeof(status), "Status: %d/4 devices", total_on);
 800a400:	f107 000c 	add.w	r0, r7, #12
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a07      	ldr	r2, [pc, #28]	@ (800a424 <updateDeviceCount+0x50>)
 800a408:	2123      	movs	r1, #35	@ 0x23
 800a40a:	f00f fa0f 	bl	801982c <sniprintf>
		updateStatusInfo(status, RED);
 800a40e:	f107 030c 	add.w	r3, r7, #12
 800a412:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff ffba 	bl	800a390 <updateStatusInfo>
}
 800a41c:	bf00      	nop
 800a41e:	3730      	adds	r7, #48	@ 0x30
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	0801cdf4 	.word	0x0801cdf4

0800a428 <updateDeviceControlStatus>:

void updateDeviceControlStatus(int device, bool is_on)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b08a      	sub	sp, #40	@ 0x28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	460b      	mov	r3, r1
 800a432:	70fb      	strb	r3, [r7, #3]
    char status[25];
    snprintf(status, sizeof(status), "Status: %s", is_on ? "ON" : "OFF");
 800a434:	78fb      	ldrb	r3, [r7, #3]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <updateDeviceControlStatus+0x16>
 800a43a:	4b0e      	ldr	r3, [pc, #56]	@ (800a474 <updateDeviceControlStatus+0x4c>)
 800a43c:	e000      	b.n	800a440 <updateDeviceControlStatus+0x18>
 800a43e:	4b0e      	ldr	r3, [pc, #56]	@ (800a478 <updateDeviceControlStatus+0x50>)
 800a440:	f107 000c 	add.w	r0, r7, #12
 800a444:	4a0d      	ldr	r2, [pc, #52]	@ (800a47c <updateDeviceControlStatus+0x54>)
 800a446:	2119      	movs	r1, #25
 800a448:	f00f f9f0 	bl	801982c <sniprintf>
    uint16_t status_color = is_on ? GREEN : RED;
 800a44c:	78fb      	ldrb	r3, [r7, #3]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d002      	beq.n	800a458 <updateDeviceControlStatus+0x30>
 800a452:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800a456:	e001      	b.n	800a45c <updateDeviceControlStatus+0x34>
 800a458:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800a45c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    updateStatusInfo(status, status_color);
 800a45e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a460:	f107 030c 	add.w	r3, r7, #12
 800a464:	4611      	mov	r1, r2
 800a466:	4618      	mov	r0, r3
 800a468:	f7ff ff92 	bl	800a390 <updateStatusInfo>
}
 800a46c:	bf00      	nop
 800a46e:	3728      	adds	r7, #40	@ 0x28
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	0801ccf0 	.word	0x0801ccf0
 800a478:	0801ccf4 	.word	0x0801ccf4
 800a47c:	0801ce0c 	.word	0x0801ce0c

0800a480 <drawTitleBar>:
        fillRoundRect(x, y, width, height, 3, GRAY);
        ST7735_WriteString(x+5, y+4, text, Font_7x10, WHITE, GRAY);
    }
}

void drawTitleBar(char* title) {
 800a480:	b580      	push	{r7, lr}
 800a482:	b08a      	sub	sp, #40	@ 0x28
 800a484:	af04      	add	r7, sp, #16
 800a486:	6078      	str	r0, [r7, #4]
    fillRect(0, 0, DISPLAY_WIDTH, TITLE_HEIGHT, BLUE);
 800a488:	231f      	movs	r3, #31
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	230f      	movs	r3, #15
 800a48e:	22a0      	movs	r2, #160	@ 0xa0
 800a490:	2100      	movs	r1, #0
 800a492:	2000      	movs	r0, #0
 800a494:	f002 fd17 	bl	800cec6 <fillRect>
    int title_length = strlen(title);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f7fd ff19 	bl	80082d0 <strlen>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	613b      	str	r3, [r7, #16]
    int title_width = title_length * 7;
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	00db      	lsls	r3, r3, #3
 800a4a8:	1a9b      	subs	r3, r3, r2
 800a4aa:	60fb      	str	r3, [r7, #12]
    int center_x = (DISPLAY_WIDTH - title_width) / 2;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 800a4b2:	0fda      	lsrs	r2, r3, #31
 800a4b4:	4413      	add	r3, r2
 800a4b6:	105b      	asrs	r3, r3, #1
 800a4b8:	617b      	str	r3, [r7, #20]

    if (center_x < 2) center_x = 2;
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	dc01      	bgt.n	800a4c4 <drawTitleBar+0x44>
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	617b      	str	r3, [r7, #20]

    ST7735_WriteString(center_x, 2, title, Font_7x10, WHITE, BLUE);
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	b298      	uxth	r0, r3
 800a4c8:	4b0c      	ldr	r3, [pc, #48]	@ (800a4fc <drawTitleBar+0x7c>)
 800a4ca:	221f      	movs	r2, #31
 800a4cc:	9202      	str	r2, [sp, #8]
 800a4ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a4d2:	9201      	str	r2, [sp, #4]
 800a4d4:	685a      	ldr	r2, [r3, #4]
 800a4d6:	9200      	str	r2, [sp, #0]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	2102      	movs	r1, #2
 800a4de:	f003 fbc7 	bl	800dc70 <ST7735_WriteString>

    drawLine(0, TITLE_HEIGHT, DISPLAY_WIDTH, TITLE_HEIGHT, WHITE);
 800a4e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a4e6:	9300      	str	r3, [sp, #0]
 800a4e8:	230f      	movs	r3, #15
 800a4ea:	22a0      	movs	r2, #160	@ 0xa0
 800a4ec:	210f      	movs	r1, #15
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	f002 fe06 	bl	800d100 <drawLine>
}
 800a4f4:	bf00      	nop
 800a4f6:	3718      	adds	r7, #24
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	20000070 	.word	0x20000070

0800a500 <GSM_init>:
uint8_t pingreq_sent = 0;
uint32_t pingreq_time = 0;
uint32_t pingresp_timeout_ms = 5000;

void GSM_init(void)
{
 800a500:	b480      	push	{r7}
 800a502:	af00      	add	r7, sp, #0
	SIM800.sim.apn = "internet";
 800a504:	4b10      	ldr	r3, [pc, #64]	@ (800a548 <GSM_init+0x48>)
 800a506:	4a11      	ldr	r2, [pc, #68]	@ (800a54c <GSM_init+0x4c>)
 800a508:	601a      	str	r2, [r3, #0]
	SIM800.sim.apn_user = "";
 800a50a:	4b0f      	ldr	r3, [pc, #60]	@ (800a548 <GSM_init+0x48>)
 800a50c:	4a10      	ldr	r2, [pc, #64]	@ (800a550 <GSM_init+0x50>)
 800a50e:	605a      	str	r2, [r3, #4]
	SIM800.sim.apn_pass = "";
 800a510:	4b0d      	ldr	r3, [pc, #52]	@ (800a548 <GSM_init+0x48>)
 800a512:	4a0f      	ldr	r2, [pc, #60]	@ (800a550 <GSM_init+0x50>)
 800a514:	609a      	str	r2, [r3, #8]
	SIM800.mqttServer.host = "mqtt.onwords.in";
 800a516:	4b0c      	ldr	r3, [pc, #48]	@ (800a548 <GSM_init+0x48>)
 800a518:	4a0e      	ldr	r2, [pc, #56]	@ (800a554 <GSM_init+0x54>)
 800a51a:	60da      	str	r2, [r3, #12]
	SIM800.mqttServer.port = 1883;
 800a51c:	4b0a      	ldr	r3, [pc, #40]	@ (800a548 <GSM_init+0x48>)
 800a51e:	f240 725b 	movw	r2, #1883	@ 0x75b
 800a522:	821a      	strh	r2, [r3, #16]
	SIM800.mqttClient.username = "Appteam";
 800a524:	4b08      	ldr	r3, [pc, #32]	@ (800a548 <GSM_init+0x48>)
 800a526:	4a0c      	ldr	r2, [pc, #48]	@ (800a558 <GSM_init+0x58>)
 800a528:	615a      	str	r2, [r3, #20]
	SIM800.mqttClient.pass = "Appteam@321";
 800a52a:	4b07      	ldr	r3, [pc, #28]	@ (800a548 <GSM_init+0x48>)
 800a52c:	4a0b      	ldr	r2, [pc, #44]	@ (800a55c <GSM_init+0x5c>)
 800a52e:	619a      	str	r2, [r3, #24]
	SIM800.mqttClient.clientID = "TestSub";
 800a530:	4b05      	ldr	r3, [pc, #20]	@ (800a548 <GSM_init+0x48>)
 800a532:	4a0b      	ldr	r2, [pc, #44]	@ (800a560 <GSM_init+0x60>)
 800a534:	61da      	str	r2, [r3, #28]
	SIM800.mqttClient.keepAliveInterval = 60;
 800a536:	4b04      	ldr	r3, [pc, #16]	@ (800a548 <GSM_init+0x48>)
 800a538:	223c      	movs	r2, #60	@ 0x3c
 800a53a:	841a      	strh	r2, [r3, #32]
}
 800a53c:	bf00      	nop
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	2000057c 	.word	0x2000057c
 800a54c:	0801ce18 	.word	0x0801ce18
 800a550:	0801ce24 	.word	0x0801ce24
 800a554:	0801ce28 	.word	0x0801ce28
 800a558:	0801ce38 	.word	0x0801ce38
 800a55c:	0801ce40 	.word	0x0801ce40
 800a560:	0801ce4c 	.word	0x0801ce4c

0800a564 <GSM_MQTT_Task>:

void GSM_MQTT_Task(void *pvParameters)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
    print_task_info();
 800a56c:	f000 ff8a 	bl	800b484 <print_task_info>
    static uint8_t sub_done = 0;

    while (1)
    {
    	SIM800_MQTT_StateMachineHandler();
 800a570:	f001 fc06 	bl	800bd80 <SIM800_MQTT_StateMachineHandler>
        if (mqttState == MQTT_STATE_MQTT_CONNECTED || mqttState == MQTT_STATE_IDLE)
 800a574:	4b3f      	ldr	r3, [pc, #252]	@ (800a674 <GSM_MQTT_Task+0x110>)
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2b08      	cmp	r3, #8
 800a57a:	d003      	beq.n	800a584 <GSM_MQTT_Task+0x20>
 800a57c:	4b3d      	ldr	r3, [pc, #244]	@ (800a674 <GSM_MQTT_Task+0x110>)
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	2b09      	cmp	r3, #9
 800a582:	d16d      	bne.n	800a660 <GSM_MQTT_Task+0xfc>
        {
            if (sub_done == 0)
 800a584:	4b3c      	ldr	r3, [pc, #240]	@ (800a678 <GSM_MQTT_Task+0x114>)
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10e      	bne.n	800a5aa <GSM_MQTT_Task+0x46>
            {
                MQTT_Sub("onwords/4ltc01/status");
 800a58c:	483b      	ldr	r0, [pc, #236]	@ (800a67c <GSM_MQTT_Task+0x118>)
 800a58e:	f001 feff 	bl	800c390 <MQTT_Sub>
                MQTT_Sub("onwords/4ltc01/getCurrentStatus");
 800a592:	483b      	ldr	r0, [pc, #236]	@ (800a680 <GSM_MQTT_Task+0x11c>)
 800a594:	f001 fefc 	bl	800c390 <MQTT_Sub>
                MQTT_Sub("onwords/4ltc01/currentStatus");
 800a598:	483a      	ldr	r0, [pc, #232]	@ (800a684 <GSM_MQTT_Task+0x120>)
 800a59a:	f001 fef9 	bl	800c390 <MQTT_Sub>
                sub_done = 1;
 800a59e:	4b36      	ldr	r3, [pc, #216]	@ (800a678 <GSM_MQTT_Task+0x114>)
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	701a      	strb	r2, [r3, #0]
                safe_printf("MQTT Subscribed to topics\r\n");
 800a5a4:	4838      	ldr	r0, [pc, #224]	@ (800a688 <GSM_MQTT_Task+0x124>)
 800a5a6:	f000 ff87 	bl	800b4b8 <safe_printf>
            }
            if (SIM800.mqttReceive.newEvent)
 800a5aa:	4b38      	ldr	r3, [pc, #224]	@ (800a68c <GSM_MQTT_Task+0x128>)
 800a5ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d013      	beq.n	800a5dc <GSM_MQTT_Task+0x78>
            {
                SIM800.mqttReceive.newEvent = 0;
 800a5b4:	4b35      	ldr	r3, [pc, #212]	@ (800a68c <GSM_MQTT_Task+0x128>)
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                unsigned char *topic = SIM800.mqttReceive.topic;
 800a5bc:	4b34      	ldr	r3, [pc, #208]	@ (800a690 <GSM_MQTT_Task+0x12c>)
 800a5be:	617b      	str	r3, [r7, #20]
                unsigned char *payload = SIM800.mqttReceive.payload;
 800a5c0:	4b34      	ldr	r3, [pc, #208]	@ (800a694 <GSM_MQTT_Task+0x130>)
 800a5c2:	613b      	str	r3, [r7, #16]

                safe_printf("Topic: %s\r\n", topic);
 800a5c4:	6979      	ldr	r1, [r7, #20]
 800a5c6:	4834      	ldr	r0, [pc, #208]	@ (800a698 <GSM_MQTT_Task+0x134>)
 800a5c8:	f000 ff76 	bl	800b4b8 <safe_printf>
                safe_printf("Payload: %s\r\n", payload);
 800a5cc:	6939      	ldr	r1, [r7, #16]
 800a5ce:	4833      	ldr	r0, [pc, #204]	@ (800a69c <GSM_MQTT_Task+0x138>)
 800a5d0:	f000 ff72 	bl	800b4b8 <safe_printf>

                MQTT_Pub("bala", (char *)payload);
 800a5d4:	6939      	ldr	r1, [r7, #16]
 800a5d6:	4832      	ldr	r0, [pc, #200]	@ (800a6a0 <GSM_MQTT_Task+0x13c>)
 800a5d8:	f001 fe6c 	bl	800c2b4 <MQTT_Pub>
            }
            if (!pingreq_sent && (millis() - lastKeepAliveTime) >= (KEEP_ALIVE_INTERVAL * 500))
 800a5dc:	4b31      	ldr	r3, [pc, #196]	@ (800a6a4 <GSM_MQTT_Task+0x140>)
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d122      	bne.n	800a62a <GSM_MQTT_Task+0xc6>
 800a5e4:	f000 f86c 	bl	800a6c0 <millis>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	4b2f      	ldr	r3, [pc, #188]	@ (800a6a8 <GSM_MQTT_Task+0x144>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d918      	bls.n	800a62a <GSM_MQTT_Task+0xc6>
            {
                uint8_t pingreq_packet[2] = {0xC0, 0x00};
 800a5f8:	23c0      	movs	r3, #192	@ 0xc0
 800a5fa:	81bb      	strh	r3, [r7, #12]
                HAL_UART_Transmit(UART_SIM800, pingreq_packet, 2, 100);
 800a5fc:	f107 010c 	add.w	r1, r7, #12
 800a600:	2364      	movs	r3, #100	@ 0x64
 800a602:	2202      	movs	r2, #2
 800a604:	4829      	ldr	r0, [pc, #164]	@ (800a6ac <GSM_MQTT_Task+0x148>)
 800a606:	f009 fbad 	bl	8013d64 <HAL_UART_Transmit>
                lastKeepAliveTime = millis();
 800a60a:	f000 f859 	bl	800a6c0 <millis>
 800a60e:	4603      	mov	r3, r0
 800a610:	4a25      	ldr	r2, [pc, #148]	@ (800a6a8 <GSM_MQTT_Task+0x144>)
 800a612:	6013      	str	r3, [r2, #0]
                pingreq_sent = 1;
 800a614:	4b23      	ldr	r3, [pc, #140]	@ (800a6a4 <GSM_MQTT_Task+0x140>)
 800a616:	2201      	movs	r2, #1
 800a618:	701a      	strb	r2, [r3, #0]
                pingreq_time = millis();
 800a61a:	f000 f851 	bl	800a6c0 <millis>
 800a61e:	4603      	mov	r3, r0
 800a620:	4a23      	ldr	r2, [pc, #140]	@ (800a6b0 <GSM_MQTT_Task+0x14c>)
 800a622:	6013      	str	r3, [r2, #0]
                safe_printf("MQTT PINGREQ sent\r\n");
 800a624:	4823      	ldr	r0, [pc, #140]	@ (800a6b4 <GSM_MQTT_Task+0x150>)
 800a626:	f000 ff47 	bl	800b4b8 <safe_printf>
            }
            if (pingreq_sent && (millis() - pingreq_time) > pingresp_timeout_ms)
 800a62a:	4b1e      	ldr	r3, [pc, #120]	@ (800a6a4 <GSM_MQTT_Task+0x140>)
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d01a      	beq.n	800a668 <GSM_MQTT_Task+0x104>
 800a632:	f000 f845 	bl	800a6c0 <millis>
 800a636:	4602      	mov	r2, r0
 800a638:	4b1d      	ldr	r3, [pc, #116]	@ (800a6b0 <GSM_MQTT_Task+0x14c>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	1ad2      	subs	r2, r2, r3
 800a63e:	4b1e      	ldr	r3, [pc, #120]	@ (800a6b8 <GSM_MQTT_Task+0x154>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	429a      	cmp	r2, r3
 800a644:	d910      	bls.n	800a668 <GSM_MQTT_Task+0x104>
            {
                safe_printf("MQTT PINGRESP timeout! Forcing reconnect...\r\n");
 800a646:	481d      	ldr	r0, [pc, #116]	@ (800a6bc <GSM_MQTT_Task+0x158>)
 800a648:	f000 ff36 	bl	800b4b8 <safe_printf>
                mqttState = MQTT_STATE_RECONNECT;
 800a64c:	4b09      	ldr	r3, [pc, #36]	@ (800a674 <GSM_MQTT_Task+0x110>)
 800a64e:	220a      	movs	r2, #10
 800a650:	701a      	strb	r2, [r3, #0]
                SIM800.mqttServer.connect = 0;
 800a652:	4b0e      	ldr	r3, [pc, #56]	@ (800a68c <GSM_MQTT_Task+0x128>)
 800a654:	2200      	movs	r2, #0
 800a656:	749a      	strb	r2, [r3, #18]
                pingreq_sent = 0;
 800a658:	4b12      	ldr	r3, [pc, #72]	@ (800a6a4 <GSM_MQTT_Task+0x140>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	701a      	strb	r2, [r3, #0]
            if (pingreq_sent && (millis() - pingreq_time) > pingresp_timeout_ms)
 800a65e:	e003      	b.n	800a668 <GSM_MQTT_Task+0x104>
            }
        }
        else
        {
            sub_done = 0;
 800a660:	4b05      	ldr	r3, [pc, #20]	@ (800a678 <GSM_MQTT_Task+0x114>)
 800a662:	2200      	movs	r2, #0
 800a664:	701a      	strb	r2, [r3, #0]
 800a666:	e000      	b.n	800a66a <GSM_MQTT_Task+0x106>
            if (pingreq_sent && (millis() - pingreq_time) > pingresp_timeout_ms)
 800a668:	bf00      	nop
        }

        vTaskDelay(pdMS_TO_TICKS(100));
 800a66a:	2064      	movs	r0, #100	@ 0x64
 800a66c:	f00b fc10 	bl	8015e90 <vTaskDelay>
    	SIM800_MQTT_StateMachineHandler();
 800a670:	e77e      	b.n	800a570 <GSM_MQTT_Task+0xc>
 800a672:	bf00      	nop
 800a674:	200012be 	.word	0x200012be
 800a678:	200003d8 	.word	0x200003d8
 800a67c:	0801ce54 	.word	0x0801ce54
 800a680:	0801ce6c 	.word	0x0801ce6c
 800a684:	0801ce8c 	.word	0x0801ce8c
 800a688:	0801ceac 	.word	0x0801ceac
 800a68c:	2000057c 	.word	0x2000057c
 800a690:	200006b0 	.word	0x200006b0
 800a694:	200005ac 	.word	0x200005ac
 800a698:	0801cec8 	.word	0x0801cec8
 800a69c:	0801ced4 	.word	0x0801ced4
 800a6a0:	0801cee4 	.word	0x0801cee4
 800a6a4:	200003d0 	.word	0x200003d0
 800a6a8:	20000744 	.word	0x20000744
 800a6ac:	20001434 	.word	0x20001434
 800a6b0:	200003d4 	.word	0x200003d4
 800a6b4:	0801ceec 	.word	0x0801ceec
 800a6b8:	20000018 	.word	0x20000018
 800a6bc:	0801cf00 	.word	0x0801cf00

0800a6c0 <millis>:
    }
}

uint32_t millis() {
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800a6c4:	f006 fb66 	bl	8010d94 <HAL_GetTick>
 800a6c8:	4603      	mov	r3, r0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <RFM_Task>:
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};

int count;

void RFM_Task(void)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	af00      	add	r7, sp, #0
	while(1)
	{
		RF69_ModuleHandler();
 800a6d2:	f000 f805 	bl	800a6e0 <RF69_ModuleHandler>
		vTaskDelay(pdMS_TO_TICKS(10));
 800a6d6:	200a      	movs	r0, #10
 800a6d8:	f00b fbda 	bl	8015e90 <vTaskDelay>
		RF69_ModuleHandler();
 800a6dc:	bf00      	nop
 800a6de:	e7f8      	b.n	800a6d2 <RFM_Task+0x4>

0800a6e0 <RF69_ModuleHandler>:
	}
}

void RF69_ModuleHandler(void)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	af00      	add	r7, sp, #0

	if(_DeviceState == STATE_INIT)
 800a6e4:	4b57      	ldr	r3, [pc, #348]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d112      	bne.n	800a712 <RF69_ModuleHandler+0x32>
	{
		PrevState = STATE_INIT;
 800a6ec:	4b56      	ldr	r3, [pc, #344]	@ (800a848 <RF69_ModuleHandler+0x168>)
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	701a      	strb	r2, [r3, #0]
		if(RF69_init() == true)
 800a6f2:	f002 f833 	bl	800c75c <RF69_init>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d006      	beq.n	800a70a <RF69_ModuleHandler+0x2a>
		{
			_DeviceState = SET_FREQ;
 800a6fc:	4b51      	ldr	r3, [pc, #324]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a6fe:	2201      	movs	r2, #1
 800a700:	701a      	strb	r2, [r3, #0]
			safe_printf("RF69_InitSuccess\n");
 800a702:	4852      	ldr	r0, [pc, #328]	@ (800a84c <RF69_ModuleHandler+0x16c>)
 800a704:	f000 fed8 	bl	800b4b8 <safe_printf>
		HAL_UART_DeInit(&huart2);
		HAL_SuspendTick();
		HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON,PWR_SLEEPENTRY_WFI);
		_DeviceState = RX_DATA;
	}
}
 800a708:	e099      	b.n	800a83e <RF69_ModuleHandler+0x15e>
			_DeviceState = FAIL_STATE;
 800a70a:	4b4e      	ldr	r3, [pc, #312]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a70c:	2206      	movs	r2, #6
 800a70e:	701a      	strb	r2, [r3, #0]
}
 800a710:	e095      	b.n	800a83e <RF69_ModuleHandler+0x15e>
	else if(_DeviceState == SET_FREQ)
 800a712:	4b4c      	ldr	r3, [pc, #304]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	2b01      	cmp	r3, #1
 800a718:	d114      	bne.n	800a744 <RF69_ModuleHandler+0x64>
		PrevState =	SET_FREQ;
 800a71a:	4b4b      	ldr	r3, [pc, #300]	@ (800a848 <RF69_ModuleHandler+0x168>)
 800a71c:	2201      	movs	r2, #1
 800a71e:	701a      	strb	r2, [r3, #0]
		if(setFrequency(RF69_FREQ) == true)
 800a720:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 800a850 <RF69_ModuleHandler+0x170>
 800a724:	f002 f934 	bl	800c990 <setFrequency>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d006      	beq.n	800a73c <RF69_ModuleHandler+0x5c>
			_DeviceState = SET_POW;
 800a72e:	4b45      	ldr	r3, [pc, #276]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a730:	2202      	movs	r2, #2
 800a732:	701a      	strb	r2, [r3, #0]
			safe_printf("RF69_FreqSetSuccess\n");
 800a734:	4847      	ldr	r0, [pc, #284]	@ (800a854 <RF69_ModuleHandler+0x174>)
 800a736:	f000 febf 	bl	800b4b8 <safe_printf>
}
 800a73a:	e080      	b.n	800a83e <RF69_ModuleHandler+0x15e>
			_DeviceState = FAIL_STATE;
 800a73c:	4b41      	ldr	r3, [pc, #260]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a73e:	2206      	movs	r2, #6
 800a740:	701a      	strb	r2, [r3, #0]
}
 800a742:	e07c      	b.n	800a83e <RF69_ModuleHandler+0x15e>
	else if(_DeviceState == SET_POW)
 800a744:	4b3f      	ldr	r3, [pc, #252]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d10d      	bne.n	800a768 <RF69_ModuleHandler+0x88>
		PrevState = SET_POW;
 800a74c:	4b3e      	ldr	r3, [pc, #248]	@ (800a848 <RF69_ModuleHandler+0x168>)
 800a74e:	2202      	movs	r2, #2
 800a750:	701a      	strb	r2, [r3, #0]
		setTxPower(20, true);
 800a752:	2101      	movs	r1, #1
 800a754:	2014      	movs	r0, #20
 800a756:	f002 f9f7 	bl	800cb48 <setTxPower>
		_DeviceState = SET_ENCKEY;
 800a75a:	4b3a      	ldr	r3, [pc, #232]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a75c:	2203      	movs	r2, #3
 800a75e:	701a      	strb	r2, [r3, #0]
		safe_printf("RF69_PowerSetSuccess\n");
 800a760:	483d      	ldr	r0, [pc, #244]	@ (800a858 <RF69_ModuleHandler+0x178>)
 800a762:	f000 fea9 	bl	800b4b8 <safe_printf>
}
 800a766:	e06a      	b.n	800a83e <RF69_ModuleHandler+0x15e>
	else if(_DeviceState == SET_ENCKEY)
 800a768:	4b36      	ldr	r3, [pc, #216]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d10c      	bne.n	800a78a <RF69_ModuleHandler+0xaa>
		PrevState = SET_ENCKEY;
 800a770:	4b35      	ldr	r3, [pc, #212]	@ (800a848 <RF69_ModuleHandler+0x168>)
 800a772:	2203      	movs	r2, #3
 800a774:	701a      	strb	r2, [r3, #0]
		setEncryptionKey(&EncryptionKey[0]);
 800a776:	4839      	ldr	r0, [pc, #228]	@ (800a85c <RF69_ModuleHandler+0x17c>)
 800a778:	f002 faf4 	bl	800cd64 <setEncryptionKey>
		_DeviceState = RX_DATA;
 800a77c:	4b31      	ldr	r3, [pc, #196]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a77e:	2205      	movs	r2, #5
 800a780:	701a      	strb	r2, [r3, #0]
		safe_printf("RF69_setEncryptionKeySuccess\n");
 800a782:	4837      	ldr	r0, [pc, #220]	@ (800a860 <RF69_ModuleHandler+0x180>)
 800a784:	f000 fe98 	bl	800b4b8 <safe_printf>
}
 800a788:	e059      	b.n	800a83e <RF69_ModuleHandler+0x15e>
	else if(_DeviceState == TX_DATA)
 800a78a:	4b2e      	ldr	r3, [pc, #184]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	2b04      	cmp	r3, #4
 800a790:	d103      	bne.n	800a79a <RF69_ModuleHandler+0xba>
		PrevState = TX_DATA;
 800a792:	4b2d      	ldr	r3, [pc, #180]	@ (800a848 <RF69_ModuleHandler+0x168>)
 800a794:	2204      	movs	r2, #4
 800a796:	701a      	strb	r2, [r3, #0]
}
 800a798:	e051      	b.n	800a83e <RF69_ModuleHandler+0x15e>
	else if(_DeviceState == RX_DATA)
 800a79a:	4b2a      	ldr	r3, [pc, #168]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	2b05      	cmp	r3, #5
 800a7a0:	d10e      	bne.n	800a7c0 <RF69_ModuleHandler+0xe0>
		PrevState = RX_DATA;
 800a7a2:	4b29      	ldr	r3, [pc, #164]	@ (800a848 <RF69_ModuleHandler+0x168>)
 800a7a4:	2205      	movs	r2, #5
 800a7a6:	701a      	strb	r2, [r3, #0]
		if(RF69_RxData() != true)
 800a7a8:	f000 f864 	bl	800a874 <RF69_RxData>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	f083 0301 	eor.w	r3, r3, #1
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d042      	beq.n	800a83e <RF69_ModuleHandler+0x15e>
			_DeviceState = SYS_RESTART;
 800a7b8:	4b22      	ldr	r3, [pc, #136]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a7ba:	2207      	movs	r2, #7
 800a7bc:	701a      	strb	r2, [r3, #0]
}
 800a7be:	e03e      	b.n	800a83e <RF69_ModuleHandler+0x15e>
	else if(_DeviceState == FAIL_STATE)
 800a7c0:	4b20      	ldr	r3, [pc, #128]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	2b06      	cmp	r3, #6
 800a7c6:	d112      	bne.n	800a7ee <RF69_ModuleHandler+0x10e>
		if(FailIndiCation(PrevState) == true)
 800a7c8:	4b1f      	ldr	r3, [pc, #124]	@ (800a848 <RF69_ModuleHandler+0x168>)
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 f8c9 	bl	800a964 <FailIndiCation>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d032      	beq.n	800a83e <RF69_ModuleHandler+0x15e>
			safe_printf("Module Going To Restart\n");
 800a7d8:	4822      	ldr	r0, [pc, #136]	@ (800a864 <RF69_ModuleHandler+0x184>)
 800a7da:	f000 fe6d 	bl	800b4b8 <safe_printf>
			vTaskDelay(pdMS_TO_TICKS(3000));
 800a7de:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800a7e2:	f00b fb55 	bl	8015e90 <vTaskDelay>
			_DeviceState = SYS_RESTART;
 800a7e6:	4b17      	ldr	r3, [pc, #92]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a7e8:	2207      	movs	r2, #7
 800a7ea:	701a      	strb	r2, [r3, #0]
}
 800a7ec:	e027      	b.n	800a83e <RF69_ModuleHandler+0x15e>
	else if(_DeviceState == SYS_RESTART)
 800a7ee:	4b15      	ldr	r3, [pc, #84]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	2b07      	cmp	r3, #7
 800a7f4:	d106      	bne.n	800a804 <RF69_ModuleHandler+0x124>
		_DeviceState = STATE_INIT;
 800a7f6:	4b13      	ldr	r3, [pc, #76]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	701a      	strb	r2, [r3, #0]
		safe_printf("SYS_Restarted\n");
 800a7fc:	481a      	ldr	r0, [pc, #104]	@ (800a868 <RF69_ModuleHandler+0x188>)
 800a7fe:	f000 fe5b 	bl	800b4b8 <safe_printf>
}
 800a802:	e01c      	b.n	800a83e <RF69_ModuleHandler+0x15e>
	else if(_DeviceState == SYS_REST)
 800a804:	4b0f      	ldr	r3, [pc, #60]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	2b08      	cmp	r3, #8
 800a80a:	d103      	bne.n	800a814 <RF69_ModuleHandler+0x134>
		_DeviceState = SYS_SLEEP;
 800a80c:	4b0d      	ldr	r3, [pc, #52]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a80e:	2209      	movs	r2, #9
 800a810:	701a      	strb	r2, [r3, #0]
}
 800a812:	e014      	b.n	800a83e <RF69_ModuleHandler+0x15e>
	else if(_DeviceState == SYS_SLEEP)
 800a814:	4b0b      	ldr	r3, [pc, #44]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	2b09      	cmp	r3, #9
 800a81a:	d110      	bne.n	800a83e <RF69_ModuleHandler+0x15e>
		setSleep();
 800a81c:	f002 f95e 	bl	800cadc <setSleep>
		HAL_SPI_DeInit(&hspi3);
 800a820:	4812      	ldr	r0, [pc, #72]	@ (800a86c <RF69_ModuleHandler+0x18c>)
 800a822:	f007 fe06 	bl	8012432 <HAL_SPI_DeInit>
		HAL_UART_DeInit(&huart2);
 800a826:	4812      	ldr	r0, [pc, #72]	@ (800a870 <RF69_ModuleHandler+0x190>)
 800a828:	f009 fa6a 	bl	8013d00 <HAL_UART_DeInit>
		HAL_SuspendTick();
 800a82c:	f006 f942 	bl	8010ab4 <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 800a830:	2101      	movs	r1, #1
 800a832:	2001      	movs	r0, #1
 800a834:	f006 ff70 	bl	8011718 <HAL_PWR_EnterSLEEPMode>
		_DeviceState = RX_DATA;
 800a838:	4b02      	ldr	r3, [pc, #8]	@ (800a844 <RF69_ModuleHandler+0x164>)
 800a83a:	2205      	movs	r2, #5
 800a83c:	701a      	strb	r2, [r3, #0]
}
 800a83e:	bf00      	nop
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	200003d9 	.word	0x200003d9
 800a848:	200003da 	.word	0x200003da
 800a84c:	0801cf30 	.word	0x0801cf30
 800a850:	43d88000 	.word	0x43d88000
 800a854:	0801cf44 	.word	0x0801cf44
 800a858:	0801cf5c 	.word	0x0801cf5c
 800a85c:	2000001c 	.word	0x2000001c
 800a860:	0801cf74 	.word	0x0801cf74
 800a864:	0801cf94 	.word	0x0801cf94
 800a868:	0801cfb0 	.word	0x0801cfb0
 800a86c:	200013dc 	.word	0x200013dc
 800a870:	2000147c 	.word	0x2000147c

0800a874 <RF69_RxData>:
{
	return true; //Never Reach Here
}

bool RF69_RxData(void)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b090      	sub	sp, #64	@ 0x40
 800a878:	af00      	add	r7, sp, #0
//	printf("RF69 StartReceiving\n");
//	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);

	if (available())
 800a87a:	f002 fa9b 	bl	800cdb4 <available>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d059      	beq.n	800a938 <RF69_RxData+0xc4>
	{

		uint8_t buf[RH_RF69_MAX_MESSAGE_LEN];
		uint8_t len = sizeof(buf);
 800a884:	233c      	movs	r3, #60	@ 0x3c
 800a886:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		safe_printf("Data Available..\r\n");
 800a88a:	482e      	ldr	r0, [pc, #184]	@ (800a944 <RF69_RxData+0xd0>)
 800a88c:	f000 fe14 	bl	800b4b8 <safe_printf>
		if (recv1(buf, &len))
 800a890:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 800a894:	463b      	mov	r3, r7
 800a896:	4611      	mov	r1, r2
 800a898:	4618      	mov	r0, r3
 800a89a:	f002 fac1 	bl	800ce20 <recv1>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d046      	beq.n	800a932 <RF69_RxData+0xbe>
		{
			if (!len)
 800a8a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d106      	bne.n	800a8ba <RF69_RxData+0x46>
			{
				buf[len] = 0;
 800a8ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a8b0:	3340      	adds	r3, #64	@ 0x40
 800a8b2:	443b      	add	r3, r7
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f803 2c40 	strb.w	r2, [r3, #-64]
			}

			safe_printf("ReceivedData [%d]:%s\n", len, (char*)buf);
 800a8ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a8be:	4619      	mov	r1, r3
 800a8c0:	463b      	mov	r3, r7
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	4820      	ldr	r0, [pc, #128]	@ (800a948 <RF69_RxData+0xd4>)
 800a8c6:	f000 fdf7 	bl	800b4b8 <safe_printf>
			safe_printf("RSSI: %d\n", lastRssi());
 800a8ca:	f002 fadd 	bl	800ce88 <lastRssi>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	481e      	ldr	r0, [pc, #120]	@ (800a94c <RF69_RxData+0xd8>)
 800a8d4:	f000 fdf0 	bl	800b4b8 <safe_printf>

			if (strstr((char *)buf, "Control#1"))
 800a8d8:	463b      	mov	r3, r7
 800a8da:	491d      	ldr	r1, [pc, #116]	@ (800a950 <RF69_RxData+0xdc>)
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f00f f96c 	bl	8019bba <strstr>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d017      	beq.n	800a918 <RF69_RxData+0xa4>
			{
				count++;
 800a8e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a954 <RF69_RxData+0xe0>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	4a19      	ldr	r2, [pc, #100]	@ (800a954 <RF69_RxData+0xe0>)
 800a8f0:	6013      	str	r3, [r2, #0]
				if(count == 1)
 800a8f2:	4b18      	ldr	r3, [pc, #96]	@ (800a954 <RF69_RxData+0xe0>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d103      	bne.n	800a902 <RF69_RxData+0x8e>
				{
					setAllDevicesState(1);
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	f7fe ffc2 	bl	8009884 <setAllDevicesState>
 800a900:	e01a      	b.n	800a938 <RF69_RxData+0xc4>
				}
				else if(count == 2)
 800a902:	4b14      	ldr	r3, [pc, #80]	@ (800a954 <RF69_RxData+0xe0>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2b02      	cmp	r3, #2
 800a908:	d116      	bne.n	800a938 <RF69_RxData+0xc4>
				{
					setAllDevicesState(0);
 800a90a:	2000      	movs	r0, #0
 800a90c:	f7fe ffba 	bl	8009884 <setAllDevicesState>
					count = 0;
 800a910:	4b10      	ldr	r3, [pc, #64]	@ (800a954 <RF69_RxData+0xe0>)
 800a912:	2200      	movs	r2, #0
 800a914:	601a      	str	r2, [r3, #0]
 800a916:	e00f      	b.n	800a938 <RF69_RxData+0xc4>
				}

			}
			else if(strstr((char *)buf, "Control#0"))
 800a918:	463b      	mov	r3, r7
 800a91a:	490f      	ldr	r1, [pc, #60]	@ (800a958 <RF69_RxData+0xe4>)
 800a91c:	4618      	mov	r0, r3
 800a91e:	f00f f94c 	bl	8019bba <strstr>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d007      	beq.n	800a938 <RF69_RxData+0xc4>
			{
				HAL_GPIO_TogglePin(DISP_BACKLIT_GPIO_Port, DISP_BACKLIT_Pin);
 800a928:	2101      	movs	r1, #1
 800a92a:	480c      	ldr	r0, [pc, #48]	@ (800a95c <RF69_RxData+0xe8>)
 800a92c:	f006 fec1 	bl	80116b2 <HAL_GPIO_TogglePin>
 800a930:	e002      	b.n	800a938 <RF69_RxData+0xc4>
			}
		}
		else
		{
			safe_printf("Receive failed\n");
 800a932:	480b      	ldr	r0, [pc, #44]	@ (800a960 <RF69_RxData+0xec>)
 800a934:	f000 fdc0 	bl	800b4b8 <safe_printf>
		}
	}
	return true;
 800a938:	2301      	movs	r3, #1
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3740      	adds	r7, #64	@ 0x40
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	0801cfc0 	.word	0x0801cfc0
 800a948:	0801cfd4 	.word	0x0801cfd4
 800a94c:	0801cfec 	.word	0x0801cfec
 800a950:	0801cff8 	.word	0x0801cff8
 800a954:	200003dc 	.word	0x200003dc
 800a958:	0801d004 	.word	0x0801d004
 800a95c:	40020000 	.word	0x40020000
 800a960:	0801d010 	.word	0x0801d010

0800a964 <FailIndiCation>:

bool FailIndiCation(Rf69_t FailState)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	4603      	mov	r3, r0
 800a96c:	71fb      	strb	r3, [r7, #7]
	if(FailState == STATE_INIT)
 800a96e:	79fb      	ldrb	r3, [r7, #7]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d103      	bne.n	800a97c <FailIndiCation+0x18>
		safe_printf("ModuleInit_Failed\n");
 800a974:	4815      	ldr	r0, [pc, #84]	@ (800a9cc <FailIndiCation+0x68>)
 800a976:	f000 fd9f 	bl	800b4b8 <safe_printf>
 800a97a:	e021      	b.n	800a9c0 <FailIndiCation+0x5c>
	else if(FailState == SET_FREQ)
 800a97c:	79fb      	ldrb	r3, [r7, #7]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d103      	bne.n	800a98a <FailIndiCation+0x26>
		safe_printf("FreqSetOp_Failed\n");
 800a982:	4813      	ldr	r0, [pc, #76]	@ (800a9d0 <FailIndiCation+0x6c>)
 800a984:	f000 fd98 	bl	800b4b8 <safe_printf>
 800a988:	e01a      	b.n	800a9c0 <FailIndiCation+0x5c>
	else if(FailState == SET_POW)
 800a98a:	79fb      	ldrb	r3, [r7, #7]
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d103      	bne.n	800a998 <FailIndiCation+0x34>
		safe_printf("PowerSetOp_Failed\n");
 800a990:	4810      	ldr	r0, [pc, #64]	@ (800a9d4 <FailIndiCation+0x70>)
 800a992:	f000 fd91 	bl	800b4b8 <safe_printf>
 800a996:	e013      	b.n	800a9c0 <FailIndiCation+0x5c>
	else if(FailState == SET_ENCKEY)
 800a998:	79fb      	ldrb	r3, [r7, #7]
 800a99a:	2b03      	cmp	r3, #3
 800a99c:	d103      	bne.n	800a9a6 <FailIndiCation+0x42>
		safe_printf("EncKeySetOp_Failed\n");
 800a99e:	480e      	ldr	r0, [pc, #56]	@ (800a9d8 <FailIndiCation+0x74>)
 800a9a0:	f000 fd8a 	bl	800b4b8 <safe_printf>
 800a9a4:	e00c      	b.n	800a9c0 <FailIndiCation+0x5c>
	else if(FailState == TX_DATA)
 800a9a6:	79fb      	ldrb	r3, [r7, #7]
 800a9a8:	2b04      	cmp	r3, #4
 800a9aa:	d103      	bne.n	800a9b4 <FailIndiCation+0x50>
		safe_printf("DataTxOp_Failed\n");
 800a9ac:	480b      	ldr	r0, [pc, #44]	@ (800a9dc <FailIndiCation+0x78>)
 800a9ae:	f000 fd83 	bl	800b4b8 <safe_printf>
 800a9b2:	e005      	b.n	800a9c0 <FailIndiCation+0x5c>
	else if(FailState == RX_DATA)
 800a9b4:	79fb      	ldrb	r3, [r7, #7]
 800a9b6:	2b05      	cmp	r3, #5
 800a9b8:	d102      	bne.n	800a9c0 <FailIndiCation+0x5c>
		safe_printf("DataRxOp_Failed\n");
 800a9ba:	4809      	ldr	r0, [pc, #36]	@ (800a9e0 <FailIndiCation+0x7c>)
 800a9bc:	f000 fd7c 	bl	800b4b8 <safe_printf>
	return true;
 800a9c0:	2301      	movs	r3, #1
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	0801d020 	.word	0x0801d020
 800a9d0:	0801d034 	.word	0x0801d034
 800a9d4:	0801d048 	.word	0x0801d048
 800a9d8:	0801d05c 	.word	0x0801d05c
 800a9dc:	0801d070 	.word	0x0801d070
 800a9e0:	0801d084 	.word	0x0801d084

0800a9e4 <SPI_Handler>:
volatile uint16_t spiHead = 0;
volatile uint16_t spiTail = 0;
uint8_t spiRxByte;

void SPI_Handler(void *param)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b0a4      	sub	sp, #144	@ 0x90
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
    uint8_t jsonBuffer[SPI_RING_BUFFER_SIZE];
    uint8_t index = 0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    bool collecting = false;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    while (1)
    {
        if(spiHead != spiTail)
 800a9f8:	4b37      	ldr	r3, [pc, #220]	@ (800aad8 <SPI_Handler+0xf4>)
 800a9fa:	881b      	ldrh	r3, [r3, #0]
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	4b37      	ldr	r3, [pc, #220]	@ (800aadc <SPI_Handler+0xf8>)
 800aa00:	881b      	ldrh	r3, [r3, #0]
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d062      	beq.n	800aace <SPI_Handler+0xea>
        {
        	uint8_t byte = spiRingBuffer[spiTail];
 800aa08:	4b34      	ldr	r3, [pc, #208]	@ (800aadc <SPI_Handler+0xf8>)
 800aa0a:	881b      	ldrh	r3, [r3, #0]
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	461a      	mov	r2, r3
 800aa10:	4b33      	ldr	r3, [pc, #204]	@ (800aae0 <SPI_Handler+0xfc>)
 800aa12:	5c9b      	ldrb	r3, [r3, r2]
 800aa14:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
        	spiTail = (spiTail + 1) % SPI_RING_BUFFER_SIZE;
 800aa18:	4b30      	ldr	r3, [pc, #192]	@ (800aadc <SPI_Handler+0xf8>)
 800aa1a:	881b      	ldrh	r3, [r3, #0]
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	3301      	adds	r3, #1
 800aa20:	425a      	negs	r2, r3
 800aa22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800aa2a:	bf58      	it	pl
 800aa2c:	4253      	negpl	r3, r2
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	4b2a      	ldr	r3, [pc, #168]	@ (800aadc <SPI_Handler+0xf8>)
 800aa32:	801a      	strh	r2, [r3, #0]

        	if(byte == '{')
 800aa34:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800aa38:	2b7b      	cmp	r3, #123	@ 0x7b
 800aa3a:	d111      	bne.n	800aa60 <SPI_Handler+0x7c>
        	{
        		collecting = true;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        		index = 0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        		jsonBuffer[index++] = byte;
 800aa48:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800aa4c:	1c5a      	adds	r2, r3, #1
 800aa4e:	f887 208f 	strb.w	r2, [r7, #143]	@ 0x8f
 800aa52:	3390      	adds	r3, #144	@ 0x90
 800aa54:	443b      	add	r3, r7
 800aa56:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800aa5a:	f803 2c84 	strb.w	r2, [r3, #-132]
 800aa5e:	e7cb      	b.n	800a9f8 <SPI_Handler+0x14>
        	}
        	else if(collecting)
 800aa60:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d0c7      	beq.n	800a9f8 <SPI_Handler+0x14>
        	{
        		if(index < SPI_RING_BUFFER_SIZE - 1)
 800aa68:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800aa6c:	2b7e      	cmp	r3, #126	@ 0x7e
 800aa6e:	d827      	bhi.n	800aac0 <SPI_Handler+0xdc>
        		{
        			jsonBuffer[index++] = byte;
 800aa70:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800aa74:	1c5a      	adds	r2, r3, #1
 800aa76:	f887 208f 	strb.w	r2, [r7, #143]	@ 0x8f
 800aa7a:	3390      	adds	r3, #144	@ 0x90
 800aa7c:	443b      	add	r3, r7
 800aa7e:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800aa82:	f803 2c84 	strb.w	r2, [r3, #-132]
        			if(byte == '}')
 800aa86:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800aa8a:	2b7d      	cmp	r3, #125	@ 0x7d
 800aa8c:	d1b4      	bne.n	800a9f8 <SPI_Handler+0x14>
        			{
        				jsonBuffer[index] = '\0';
 800aa8e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800aa92:	3390      	adds	r3, #144	@ 0x90
 800aa94:	443b      	add	r3, r7
 800aa96:	2200      	movs	r2, #0
 800aa98:	f803 2c84 	strb.w	r2, [r3, #-132]
        				safe_printf("JSON received: %s\n", jsonBuffer);
 800aa9c:	f107 030c 	add.w	r3, r7, #12
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	4810      	ldr	r0, [pc, #64]	@ (800aae4 <SPI_Handler+0x100>)
 800aaa4:	f000 fd08 	bl	800b4b8 <safe_printf>
        				process_spi_json(jsonBuffer);
 800aaa8:	f107 030c 	add.w	r3, r7, #12
 800aaac:	4618      	mov	r0, r3
 800aaae:	f000 f81b 	bl	800aae8 <process_spi_json>
        				collecting = false;
 800aab2:	2300      	movs	r3, #0
 800aab4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        				index = 0;
 800aab8:	2300      	movs	r3, #0
 800aaba:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800aabe:	e79b      	b.n	800a9f8 <SPI_Handler+0x14>
        			}
        		}
        		else
        		{
        			collecting = false;
 800aac0:	2300      	movs	r3, #0
 800aac2:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        			index = 0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800aacc:	e794      	b.n	800a9f8 <SPI_Handler+0x14>
        		}
        	}
        }
        else
        {
        	vTaskDelay(pdMS_TO_TICKS(5));
 800aace:	2005      	movs	r0, #5
 800aad0:	f00b f9de 	bl	8015e90 <vTaskDelay>
        if(spiHead != spiTail)
 800aad4:	e790      	b.n	800a9f8 <SPI_Handler+0x14>
 800aad6:	bf00      	nop
 800aad8:	20000460 	.word	0x20000460
 800aadc:	20000462 	.word	0x20000462
 800aae0:	200003e0 	.word	0x200003e0
 800aae4:	0801d098 	.word	0x0801d098

0800aae8 <process_spi_json>:
    }
}


void process_spi_json(uint8_t *jsonBuffer)
{
 800aae8:	b590      	push	{r4, r7, lr}
 800aaea:	b089      	sub	sp, #36	@ 0x24
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
	uint8_t deviceState;
	GPIO_PinState state;
	int deviceIndex = -1;
 800aaf0:	f04f 33ff 	mov.w	r3, #4294967295
 800aaf4:	61fb      	str	r3, [r7, #28]
	cJSON *jsonObj = cJSON_Parse((char *)jsonBuffer);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f004 fa9e 	bl	800f038 <cJSON_Parse>
 800aafc:	61b8      	str	r0, [r7, #24]
	if(jsonObj)
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f000 80b8 	beq.w	800ac76 <process_spi_json+0x18e>
	{
		cJSON *device = cJSON_GetObjectItem(jsonObj, "device");
 800ab06:	495e      	ldr	r1, [pc, #376]	@ (800ac80 <process_spi_json+0x198>)
 800ab08:	69b8      	ldr	r0, [r7, #24]
 800ab0a:	f005 f8c9 	bl	800fca0 <cJSON_GetObjectItem>
 800ab0e:	6178      	str	r0, [r7, #20]
		if(device)
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d03c      	beq.n	800ab90 <process_spi_json+0xa8>
		{
			if(strcmp(device->valuestring, "L1") == 0) deviceIndex = 0;
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	495a      	ldr	r1, [pc, #360]	@ (800ac84 <process_spi_json+0x19c>)
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7fd fb77 	bl	8008210 <strcmp>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d102      	bne.n	800ab2e <process_spi_json+0x46>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	61fb      	str	r3, [r7, #28]
 800ab2c:	e030      	b.n	800ab90 <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "L2") == 0) deviceIndex = 1;
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	691b      	ldr	r3, [r3, #16]
 800ab32:	4955      	ldr	r1, [pc, #340]	@ (800ac88 <process_spi_json+0x1a0>)
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7fd fb6b 	bl	8008210 <strcmp>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d102      	bne.n	800ab46 <process_spi_json+0x5e>
 800ab40:	2301      	movs	r3, #1
 800ab42:	61fb      	str	r3, [r7, #28]
 800ab44:	e024      	b.n	800ab90 <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "L3") == 0) deviceIndex = 2;
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	4950      	ldr	r1, [pc, #320]	@ (800ac8c <process_spi_json+0x1a4>)
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7fd fb5f 	bl	8008210 <strcmp>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d102      	bne.n	800ab5e <process_spi_json+0x76>
 800ab58:	2302      	movs	r3, #2
 800ab5a:	61fb      	str	r3, [r7, #28]
 800ab5c:	e018      	b.n	800ab90 <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "L4") == 0) deviceIndex = 3;
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	494b      	ldr	r1, [pc, #300]	@ (800ac90 <process_spi_json+0x1a8>)
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7fd fb53 	bl	8008210 <strcmp>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d102      	bne.n	800ab76 <process_spi_json+0x8e>
 800ab70:	2303      	movs	r3, #3
 800ab72:	61fb      	str	r3, [r7, #28]
 800ab74:	e00c      	b.n	800ab90 <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "D1") == 0)
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	4946      	ldr	r1, [pc, #280]	@ (800ac94 <process_spi_json+0x1ac>)
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7fd fb47 	bl	8008210 <strcmp>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d103      	bne.n	800ab90 <process_spi_json+0xa8>
			{
				HAL_GPIO_TogglePin(DISP_BACKLIT_GPIO_Port, DISP_BACKLIT_Pin);
 800ab88:	2101      	movs	r1, #1
 800ab8a:	4843      	ldr	r0, [pc, #268]	@ (800ac98 <process_spi_json+0x1b0>)
 800ab8c:	f006 fd91 	bl	80116b2 <HAL_GPIO_TogglePin>
			}
		}
		if(deviceIndex != -1)
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab96:	d06e      	beq.n	800ac76 <process_spi_json+0x18e>
		{
			cJSON *status = cJSON_CreateObject();
 800ab98:	f005 f9a6 	bl	800fee8 <cJSON_CreateObject>
 800ab9c:	6138      	str	r0, [r7, #16]
			if(xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800ab9e:	4b3f      	ldr	r3, [pc, #252]	@ (800ac9c <process_spi_json+0x1b4>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	2164      	movs	r1, #100	@ 0x64
 800aba4:	4618      	mov	r0, r3
 800aba6:	f00a fd97 	bl	80156d8 <xQueueSemaphoreTake>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b01      	cmp	r3, #1
 800abae:	d15a      	bne.n	800ac66 <process_spi_json+0x17e>
			{
				HAL_GPIO_TogglePin(led_ports[deviceIndex], led_pins[deviceIndex]);
 800abb0:	4a3b      	ldr	r2, [pc, #236]	@ (800aca0 <process_spi_json+0x1b8>)
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800abb8:	493a      	ldr	r1, [pc, #232]	@ (800aca4 <process_spi_json+0x1bc>)
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800abc0:	4619      	mov	r1, r3
 800abc2:	4610      	mov	r0, r2
 800abc4:	f006 fd75 	bl	80116b2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(relay_ports[deviceIndex], relay_pins[deviceIndex]);
 800abc8:	4a37      	ldr	r2, [pc, #220]	@ (800aca8 <process_spi_json+0x1c0>)
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800abd0:	4936      	ldr	r1, [pc, #216]	@ (800acac <process_spi_json+0x1c4>)
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800abd8:	4619      	mov	r1, r3
 800abda:	4610      	mov	r0, r2
 800abdc:	f006 fd69 	bl	80116b2 <HAL_GPIO_TogglePin>
				state = HAL_GPIO_ReadPin(led_ports[deviceIndex], led_pins[deviceIndex]);
 800abe0:	4a2f      	ldr	r2, [pc, #188]	@ (800aca0 <process_spi_json+0x1b8>)
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800abe8:	492e      	ldr	r1, [pc, #184]	@ (800aca4 <process_spi_json+0x1bc>)
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800abf0:	4619      	mov	r1, r3
 800abf2:	4610      	mov	r0, r2
 800abf4:	f006 fd2c 	bl	8011650 <HAL_GPIO_ReadPin>
 800abf8:	4603      	mov	r3, r0
 800abfa:	73fb      	strb	r3, [r7, #15]
				deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800abfc:	7bfb      	ldrb	r3, [r7, #15]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	bf0c      	ite	eq
 800ac02:	2301      	moveq	r3, #1
 800ac04:	2300      	movne	r3, #0
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	73bb      	strb	r3, [r7, #14]
				global_device_states[deviceIndex] = deviceState;
 800ac0a:	7bba      	ldrb	r2, [r7, #14]
 800ac0c:	4928      	ldr	r1, [pc, #160]	@ (800acb0 <process_spi_json+0x1c8>)
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				cJSON_AddNumberToObject(status, devices[deviceIndex], global_device_states[deviceIndex]);
 800ac14:	4a27      	ldr	r2, [pc, #156]	@ (800acb4 <process_spi_json+0x1cc>)
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac1c:	4a24      	ldr	r2, [pc, #144]	@ (800acb0 <process_spi_json+0x1c8>)
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7fd fcad 	bl	8008584 <__aeabi_i2d>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	ec43 2b10 	vmov	d0, r2, r3
 800ac32:	4621      	mov	r1, r4
 800ac34:	6938      	ldr	r0, [r7, #16]
 800ac36:	f005 f8e9 	bl	800fe0c <cJSON_AddNumberToObject>
				safe_printf("TOUCH: Device %d set to %s\n", deviceIndex + 1, global_device_states[deviceIndex] ? "ON" : "OFF");
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	1c59      	adds	r1, r3, #1
 800ac3e:	4a1c      	ldr	r2, [pc, #112]	@ (800acb0 <process_spi_json+0x1c8>)
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d001      	beq.n	800ac4e <process_spi_json+0x166>
 800ac4a:	4b1b      	ldr	r3, [pc, #108]	@ (800acb8 <process_spi_json+0x1d0>)
 800ac4c:	e000      	b.n	800ac50 <process_spi_json+0x168>
 800ac4e:	4b1b      	ldr	r3, [pc, #108]	@ (800acbc <process_spi_json+0x1d4>)
 800ac50:	461a      	mov	r2, r3
 800ac52:	481b      	ldr	r0, [pc, #108]	@ (800acc0 <process_spi_json+0x1d8>)
 800ac54:	f000 fc30 	bl	800b4b8 <safe_printf>
				xSemaphoreGive(deviceStateMutex);
 800ac58:	4b10      	ldr	r3, [pc, #64]	@ (800ac9c <process_spi_json+0x1b4>)
 800ac5a:	6818      	ldr	r0, [r3, #0]
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	2200      	movs	r2, #0
 800ac60:	2100      	movs	r1, #0
 800ac62:	f00a faa7 	bl	80151b4 <xQueueGenericSend>
			}
			updateToDisplayMenu();
 800ac66:	f7fe f9c3 	bl	8008ff0 <updateToDisplayMenu>
			send_json_response(status);
 800ac6a:	6938      	ldr	r0, [r7, #16]
 800ac6c:	f000 f912 	bl	800ae94 <send_json_response>
			cJSON_Delete(status);
 800ac70:	6938      	ldr	r0, [r7, #16]
 800ac72:	f003 f9cd 	bl	800e010 <cJSON_Delete>
		}
	}
}
 800ac76:	bf00      	nop
 800ac78:	3724      	adds	r7, #36	@ 0x24
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd90      	pop	{r4, r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	0801d0ac 	.word	0x0801d0ac
 800ac84:	0801d0b4 	.word	0x0801d0b4
 800ac88:	0801d0b8 	.word	0x0801d0b8
 800ac8c:	0801d0bc 	.word	0x0801d0bc
 800ac90:	0801d0c0 	.word	0x0801d0c0
 800ac94:	0801d0c4 	.word	0x0801d0c4
 800ac98:	40020000 	.word	0x40020000
 800ac9c:	20000570 	.word	0x20000570
 800aca0:	2000003c 	.word	0x2000003c
 800aca4:	2000005c 	.word	0x2000005c
 800aca8:	2000004c 	.word	0x2000004c
 800acac:	20000064 	.word	0x20000064
 800acb0:	20000734 	.word	0x20000734
 800acb4:	2000002c 	.word	0x2000002c
 800acb8:	0801d0c8 	.word	0x0801d0c8
 800acbc:	0801d0cc 	.word	0x0801d0cc
 800acc0:	0801d0d0 	.word	0x0801d0d0

0800acc4 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a1b      	ldr	r2, [pc, #108]	@ (800ad40 <HAL_SPI_RxCpltCallback+0x7c>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d125      	bne.n	800ad22 <HAL_SPI_RxCpltCallback+0x5e>
    {
        uint16_t nextHead = (spiHead + 1) % SPI_RING_BUFFER_SIZE;
 800acd6:	4b1b      	ldr	r3, [pc, #108]	@ (800ad44 <HAL_SPI_RxCpltCallback+0x80>)
 800acd8:	881b      	ldrh	r3, [r3, #0]
 800acda:	b29b      	uxth	r3, r3
 800acdc:	3301      	adds	r3, #1
 800acde:	425a      	negs	r2, r3
 800ace0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ace4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ace8:	bf58      	it	pl
 800acea:	4253      	negpl	r3, r2
 800acec:	81fb      	strh	r3, [r7, #14]
        if(nextHead != spiTail)
 800acee:	4b16      	ldr	r3, [pc, #88]	@ (800ad48 <HAL_SPI_RxCpltCallback+0x84>)
 800acf0:	881b      	ldrh	r3, [r3, #0]
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	89fa      	ldrh	r2, [r7, #14]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d00b      	beq.n	800ad12 <HAL_SPI_RxCpltCallback+0x4e>
        {
        	spiRingBuffer[spiHead] = spiRxByte;
 800acfa:	4b12      	ldr	r3, [pc, #72]	@ (800ad44 <HAL_SPI_RxCpltCallback+0x80>)
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	461a      	mov	r2, r3
 800ad02:	4b12      	ldr	r3, [pc, #72]	@ (800ad4c <HAL_SPI_RxCpltCallback+0x88>)
 800ad04:	7819      	ldrb	r1, [r3, #0]
 800ad06:	4b12      	ldr	r3, [pc, #72]	@ (800ad50 <HAL_SPI_RxCpltCallback+0x8c>)
 800ad08:	5499      	strb	r1, [r3, r2]
        	spiHead = nextHead;
 800ad0a:	4a0e      	ldr	r2, [pc, #56]	@ (800ad44 <HAL_SPI_RxCpltCallback+0x80>)
 800ad0c:	89fb      	ldrh	r3, [r7, #14]
 800ad0e:	8013      	strh	r3, [r2, #0]
 800ad10:	e002      	b.n	800ad18 <HAL_SPI_RxCpltCallback+0x54>
        }
        else
        {
        	safe_printf("SPI ring buffer overflow\n");
 800ad12:	4810      	ldr	r0, [pc, #64]	@ (800ad54 <HAL_SPI_RxCpltCallback+0x90>)
 800ad14:	f000 fbd0 	bl	800b4b8 <safe_printf>
        }
        HAL_SPI_Receive_IT(&hspi2, &spiRxByte, 1);
 800ad18:	2201      	movs	r2, #1
 800ad1a:	490c      	ldr	r1, [pc, #48]	@ (800ad4c <HAL_SPI_RxCpltCallback+0x88>)
 800ad1c:	480e      	ldr	r0, [pc, #56]	@ (800ad58 <HAL_SPI_RxCpltCallback+0x94>)
 800ad1e:	f007 ffb7 	bl	8012c90 <HAL_SPI_Receive_IT>
    }
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad22:	2300      	movs	r3, #0
 800ad24:	60bb      	str	r3, [r7, #8]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	60bb      	str	r3, [r7, #8]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	60bb      	str	r3, [r7, #8]
 800ad36:	68bb      	ldr	r3, [r7, #8]
}
 800ad38:	bf00      	nop
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	40003800 	.word	0x40003800
 800ad44:	20000460 	.word	0x20000460
 800ad48:	20000462 	.word	0x20000462
 800ad4c:	20000464 	.word	0x20000464
 800ad50:	200003e0 	.word	0x200003e0
 800ad54:	0801d0ec 	.word	0x0801d0ec
 800ad58:	20001384 	.word	0x20001384

0800ad5c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ad60:	f3bf 8f4f 	dsb	sy
}
 800ad64:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ad66:	4b06      	ldr	r3, [pc, #24]	@ (800ad80 <__NVIC_SystemReset+0x24>)
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ad6e:	4904      	ldr	r1, [pc, #16]	@ (800ad80 <__NVIC_SystemReset+0x24>)
 800ad70:	4b04      	ldr	r3, [pc, #16]	@ (800ad84 <__NVIC_SystemReset+0x28>)
 800ad72:	4313      	orrs	r3, r2
 800ad74:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800ad76:	f3bf 8f4f 	dsb	sy
}
 800ad7a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800ad7c:	bf00      	nop
 800ad7e:	e7fd      	b.n	800ad7c <__NVIC_SystemReset+0x20>
 800ad80:	e000ed00 	.word	0xe000ed00
 800ad84:	05fa0004 	.word	0x05fa0004

0800ad88 <UART_Handler>:
volatile uint16_t uartHead = 0;
volatile uint16_t uartTail = 0;
uint8_t uartRxByte;

void UART_Handler(void *param)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b0aa      	sub	sp, #168	@ 0xa8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
    uint8_t jsonBuffer[JSON_BUFFER_SIZE];
    uint8_t index = 0;
 800ad90:	2300      	movs	r3, #0
 800ad92:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    bool collecting = false;
 800ad96:	2300      	movs	r3, #0
 800ad98:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
    while (1)
    {
        if (uartHead != uartTail)
 800ad9c:	4b39      	ldr	r3, [pc, #228]	@ (800ae84 <UART_Handler+0xfc>)
 800ad9e:	881b      	ldrh	r3, [r3, #0]
 800ada0:	b29a      	uxth	r2, r3
 800ada2:	4b39      	ldr	r3, [pc, #228]	@ (800ae88 <UART_Handler+0x100>)
 800ada4:	881b      	ldrh	r3, [r3, #0]
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d066      	beq.n	800ae7a <UART_Handler+0xf2>
        {
            uint8_t byte = uartRingBuffer[uartTail];
 800adac:	4b36      	ldr	r3, [pc, #216]	@ (800ae88 <UART_Handler+0x100>)
 800adae:	881b      	ldrh	r3, [r3, #0]
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	461a      	mov	r2, r3
 800adb4:	4b35      	ldr	r3, [pc, #212]	@ (800ae8c <UART_Handler+0x104>)
 800adb6:	5c9b      	ldrb	r3, [r3, r2]
 800adb8:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
            uartTail = (uartTail + 1) % UART_RING_BUFFER_SIZE;
 800adbc:	4b32      	ldr	r3, [pc, #200]	@ (800ae88 <UART_Handler+0x100>)
 800adbe:	881b      	ldrh	r3, [r3, #0]
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	3301      	adds	r3, #1
 800adc4:	425a      	negs	r2, r3
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	b2d2      	uxtb	r2, r2
 800adca:	bf58      	it	pl
 800adcc:	4253      	negpl	r3, r2
 800adce:	b29a      	uxth	r2, r3
 800add0:	4b2d      	ldr	r3, [pc, #180]	@ (800ae88 <UART_Handler+0x100>)
 800add2:	801a      	strh	r2, [r3, #0]

            if (byte == '{')
 800add4:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800add8:	2b7b      	cmp	r3, #123	@ 0x7b
 800adda:	d111      	bne.n	800ae00 <UART_Handler+0x78>
            {
                collecting = true;
 800addc:	2301      	movs	r3, #1
 800adde:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
                index = 0;
 800ade2:	2300      	movs	r3, #0
 800ade4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                jsonBuffer[index++] = byte;
 800ade8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800adec:	1c5a      	adds	r2, r3, #1
 800adee:	f887 20a7 	strb.w	r2, [r7, #167]	@ 0xa7
 800adf2:	33a8      	adds	r3, #168	@ 0xa8
 800adf4:	443b      	add	r3, r7
 800adf6:	f897 20a5 	ldrb.w	r2, [r7, #165]	@ 0xa5
 800adfa:	f803 2c9c 	strb.w	r2, [r3, #-156]
 800adfe:	e7cd      	b.n	800ad9c <UART_Handler+0x14>
            }
            else if (collecting)
 800ae00:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d032      	beq.n	800ae6e <UART_Handler+0xe6>
            {
                if (index < JSON_BUFFER_SIZE - 1)
 800ae08:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800ae0c:	2b94      	cmp	r3, #148	@ 0x94
 800ae0e:	d827      	bhi.n	800ae60 <UART_Handler+0xd8>
                {
                    jsonBuffer[index++] = byte;
 800ae10:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800ae14:	1c5a      	adds	r2, r3, #1
 800ae16:	f887 20a7 	strb.w	r2, [r7, #167]	@ 0xa7
 800ae1a:	33a8      	adds	r3, #168	@ 0xa8
 800ae1c:	443b      	add	r3, r7
 800ae1e:	f897 20a5 	ldrb.w	r2, [r7, #165]	@ 0xa5
 800ae22:	f803 2c9c 	strb.w	r2, [r3, #-156]

                    if (byte == '}')
 800ae26:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800ae2a:	2b7d      	cmp	r3, #125	@ 0x7d
 800ae2c:	d1b6      	bne.n	800ad9c <UART_Handler+0x14>
                    {
                        jsonBuffer[index] = '\0';
 800ae2e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800ae32:	33a8      	adds	r3, #168	@ 0xa8
 800ae34:	443b      	add	r3, r7
 800ae36:	2200      	movs	r2, #0
 800ae38:	f803 2c9c 	strb.w	r2, [r3, #-156]
                        safe_printf("JSON received: %s\n", jsonBuffer);
 800ae3c:	f107 030c 	add.w	r3, r7, #12
 800ae40:	4619      	mov	r1, r3
 800ae42:	4813      	ldr	r0, [pc, #76]	@ (800ae90 <UART_Handler+0x108>)
 800ae44:	f000 fb38 	bl	800b4b8 <safe_printf>
                        process_json(jsonBuffer);
 800ae48:	f107 030c 	add.w	r3, r7, #12
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f000 f96d 	bl	800b12c <process_json>
                        collecting = false;
 800ae52:	2300      	movs	r3, #0
 800ae54:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
                        index = 0;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800ae5e:	e79d      	b.n	800ad9c <UART_Handler+0x14>
                    }
                }
                else
                {
                    collecting = false;
 800ae60:	2300      	movs	r3, #0
 800ae62:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
                    index = 0;
 800ae66:	2300      	movs	r3, #0
 800ae68:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800ae6c:	e796      	b.n	800ad9c <UART_Handler+0x14>
                }
            }
            else if (byte == BOOT_CMD)
 800ae6e:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800ae72:	2b50      	cmp	r3, #80	@ 0x50
 800ae74:	d192      	bne.n	800ad9c <UART_Handler+0x14>
            {
                NVIC_SystemReset();
 800ae76:	f7ff ff71 	bl	800ad5c <__NVIC_SystemReset>
            }
        }
        else
        {
            vTaskDelay(pdMS_TO_TICKS(5));
 800ae7a:	2005      	movs	r0, #5
 800ae7c:	f00b f808 	bl	8015e90 <vTaskDelay>
        if (uartHead != uartTail)
 800ae80:	e78c      	b.n	800ad9c <UART_Handler+0x14>
 800ae82:	bf00      	nop
 800ae84:	20000568 	.word	0x20000568
 800ae88:	2000056a 	.word	0x2000056a
 800ae8c:	20000468 	.word	0x20000468
 800ae90:	0801d108 	.word	0x0801d108

0800ae94 <send_json_response>:
    }
}


void send_json_response(cJSON *jsonObj)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
    char *response = cJSON_PrintUnformatted(jsonObj);
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f004 f963 	bl	800f168 <cJSON_PrintUnformatted>
 800aea2:	60f8      	str	r0, [r7, #12]
    if (response)
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d018      	beq.n	800aedc <send_json_response+0x48>
    {
    	safe_printf("Device State JSON: %s\n", response);
 800aeaa:	68f9      	ldr	r1, [r7, #12]
 800aeac:	480d      	ldr	r0, [pc, #52]	@ (800aee4 <send_json_response+0x50>)
 800aeae:	f000 fb03 	bl	800b4b8 <safe_printf>
        HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f7fd fa0c 	bl	80082d0 <strlen>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	b29a      	uxth	r2, r3
 800aebc:	f04f 33ff 	mov.w	r3, #4294967295
 800aec0:	68f9      	ldr	r1, [r7, #12]
 800aec2:	4809      	ldr	r0, [pc, #36]	@ (800aee8 <send_json_response+0x54>)
 800aec4:	f008 ff4e 	bl	8013d64 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800aec8:	f04f 33ff 	mov.w	r3, #4294967295
 800aecc:	2201      	movs	r2, #1
 800aece:	4907      	ldr	r1, [pc, #28]	@ (800aeec <send_json_response+0x58>)
 800aed0:	4805      	ldr	r0, [pc, #20]	@ (800aee8 <send_json_response+0x54>)
 800aed2:	f008 ff47 	bl	8013d64 <HAL_UART_Transmit>
        free(response);
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f00d f884 	bl	8017fe4 <free>
    }
}
 800aedc:	bf00      	nop
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	0801d11c 	.word	0x0801d11c
 800aee8:	200014c4 	.word	0x200014c4
 800aeec:	0801d134 	.word	0x0801d134

0800aef0 <handle_get_status_request>:

void handle_get_status_request(void)
{
 800aef0:	b590      	push	{r4, r7, lr}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
    cJSON *resp = cJSON_CreateObject();
 800aef6:	f004 fff7 	bl	800fee8 <cJSON_CreateObject>
 800aefa:	6038      	str	r0, [r7, #0]
    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800aefc:	4b1a      	ldr	r3, [pc, #104]	@ (800af68 <handle_get_status_request+0x78>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2164      	movs	r1, #100	@ 0x64
 800af02:	4618      	mov	r0, r3
 800af04:	f00a fbe8 	bl	80156d8 <xQueueSemaphoreTake>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d122      	bne.n	800af54 <handle_get_status_request+0x64>
    {
        for (int i = 0; i < DEVICE_COUNT; i++)
 800af0e:	2300      	movs	r3, #0
 800af10:	607b      	str	r3, [r7, #4]
 800af12:	e015      	b.n	800af40 <handle_get_status_request+0x50>
        {
            cJSON_AddNumberToObject(resp, devices[i], global_device_states[i]);
 800af14:	4a15      	ldr	r2, [pc, #84]	@ (800af6c <handle_get_status_request+0x7c>)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800af1c:	4a14      	ldr	r2, [pc, #80]	@ (800af70 <handle_get_status_request+0x80>)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af24:	4618      	mov	r0, r3
 800af26:	f7fd fb2d 	bl	8008584 <__aeabi_i2d>
 800af2a:	4602      	mov	r2, r0
 800af2c:	460b      	mov	r3, r1
 800af2e:	ec43 2b10 	vmov	d0, r2, r3
 800af32:	4621      	mov	r1, r4
 800af34:	6838      	ldr	r0, [r7, #0]
 800af36:	f004 ff69 	bl	800fe0c <cJSON_AddNumberToObject>
        for (int i = 0; i < DEVICE_COUNT; i++)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	3301      	adds	r3, #1
 800af3e:	607b      	str	r3, [r7, #4]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2b03      	cmp	r3, #3
 800af44:	dde6      	ble.n	800af14 <handle_get_status_request+0x24>
        }
        xSemaphoreGive(deviceStateMutex);
 800af46:	4b08      	ldr	r3, [pc, #32]	@ (800af68 <handle_get_status_request+0x78>)
 800af48:	6818      	ldr	r0, [r3, #0]
 800af4a:	2300      	movs	r3, #0
 800af4c:	2200      	movs	r2, #0
 800af4e:	2100      	movs	r1, #0
 800af50:	f00a f930 	bl	80151b4 <xQueueGenericSend>
    }
    send_json_response(resp);
 800af54:	6838      	ldr	r0, [r7, #0]
 800af56:	f7ff ff9d 	bl	800ae94 <send_json_response>
    cJSON_Delete(resp);
 800af5a:	6838      	ldr	r0, [r7, #0]
 800af5c:	f003 f858 	bl	800e010 <cJSON_Delete>
}
 800af60:	bf00      	nop
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	bd90      	pop	{r4, r7, pc}
 800af68:	20000570 	.word	0x20000570
 800af6c:	2000002c 	.word	0x2000002c
 800af70:	20000734 	.word	0x20000734

0800af74 <handle_device_control>:

void handle_device_control(cJSON *json)
{
 800af74:	b590      	push	{r4, r7, lr}
 800af76:	b089      	sub	sp, #36	@ 0x24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
    cJSON *resp = cJSON_CreateObject();
 800af7c:	f004 ffb4 	bl	800fee8 <cJSON_CreateObject>
 800af80:	61b8      	str	r0, [r7, #24]
    cJSON *Display = cJSON_GetObjectItem(json, "backlit");
 800af82:	495e      	ldr	r1, [pc, #376]	@ (800b0fc <handle_device_control+0x188>)
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f004 fe8b 	bl	800fca0 <cJSON_GetObjectItem>
 800af8a:	6178      	str	r0, [r7, #20]

    if(Display)
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d022      	beq.n	800afd8 <handle_device_control+0x64>
	{
		if (cJSON_IsNumber(Display))
 800af92:	6978      	ldr	r0, [r7, #20]
 800af94:	f004 ffbc 	bl	800ff10 <cJSON_IsNumber>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d01c      	beq.n	800afd8 <handle_device_control+0x64>
		{
			GPIO_PinState state = HAL_GPIO_ReadPin(DISP_BACKLIT_GPIO_Port, DISP_BACKLIT_Pin);
 800af9e:	2101      	movs	r1, #1
 800afa0:	4857      	ldr	r0, [pc, #348]	@ (800b100 <handle_device_control+0x18c>)
 800afa2:	f006 fb55 	bl	8011650 <HAL_GPIO_ReadPin>
 800afa6:	4603      	mov	r3, r0
 800afa8:	74fb      	strb	r3, [r7, #19]
			uint8_t dispState = (state == GPIO_PIN_SET) ? 1 : 0;
 800afaa:	7cfb      	ldrb	r3, [r7, #19]
 800afac:	2b01      	cmp	r3, #1
 800afae:	bf0c      	ite	eq
 800afb0:	2301      	moveq	r3, #1
 800afb2:	2300      	movne	r3, #0
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	74bb      	strb	r3, [r7, #18]
			if(dispState == 1)
 800afb8:	7cbb      	ldrb	r3, [r7, #18]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	f000 809a 	beq.w	800b0f4 <handle_device_control+0x180>
			{
				return;
			}
			else
			{
				HAL_GPIO_WritePin(DISP_BACKLIT_GPIO_Port, DISP_BACKLIT_Pin, Display->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	695b      	ldr	r3, [r3, #20]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	bf14      	ite	ne
 800afc8:	2301      	movne	r3, #1
 800afca:	2300      	moveq	r3, #0
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	461a      	mov	r2, r3
 800afd0:	2101      	movs	r1, #1
 800afd2:	484b      	ldr	r0, [pc, #300]	@ (800b100 <handle_device_control+0x18c>)
 800afd4:	f006 fb54 	bl	8011680 <HAL_GPIO_WritePin>
			}
		}
	}


	if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800afd8:	4b4a      	ldr	r3, [pc, #296]	@ (800b104 <handle_device_control+0x190>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2164      	movs	r1, #100	@ 0x64
 800afde:	4618      	mov	r0, r3
 800afe0:	f00a fb7a 	bl	80156d8 <xQueueSemaphoreTake>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d17d      	bne.n	800b0e6 <handle_device_control+0x172>
	{
		for (int i = 0; i < DEVICE_COUNT; i++)
 800afea:	2300      	movs	r3, #0
 800afec:	61fb      	str	r3, [r7, #28]
 800afee:	e070      	b.n	800b0d2 <handle_device_control+0x15e>
		{
			cJSON *Device = cJSON_GetObjectItem(json, devices[i]);
 800aff0:	4a45      	ldr	r2, [pc, #276]	@ (800b108 <handle_device_control+0x194>)
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aff8:	4619      	mov	r1, r3
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f004 fe50 	bl	800fca0 <cJSON_GetObjectItem>
 800b000:	60f8      	str	r0, [r7, #12]
			if (cJSON_IsNumber(Device))
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f004 ff84 	bl	800ff10 <cJSON_IsNumber>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d05e      	beq.n	800b0cc <handle_device_control+0x158>
			{
				HAL_GPIO_WritePin(led_ports[i], led_pins[i], Device->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800b00e:	4a3f      	ldr	r2, [pc, #252]	@ (800b10c <handle_device_control+0x198>)
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b016:	4a3e      	ldr	r2, [pc, #248]	@ (800b110 <handle_device_control+0x19c>)
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	695b      	ldr	r3, [r3, #20]
 800b022:	2b00      	cmp	r3, #0
 800b024:	bf14      	ite	ne
 800b026:	2301      	movne	r3, #1
 800b028:	2300      	moveq	r3, #0
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	461a      	mov	r2, r3
 800b02e:	f006 fb27 	bl	8011680 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(relay_ports[i], relay_pins[i], Device->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800b032:	4a38      	ldr	r2, [pc, #224]	@ (800b114 <handle_device_control+0x1a0>)
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b03a:	4a37      	ldr	r2, [pc, #220]	@ (800b118 <handle_device_control+0x1a4>)
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	695b      	ldr	r3, [r3, #20]
 800b046:	2b00      	cmp	r3, #0
 800b048:	bf14      	ite	ne
 800b04a:	2301      	movne	r3, #1
 800b04c:	2300      	moveq	r3, #0
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	461a      	mov	r2, r3
 800b052:	f006 fb15 	bl	8011680 <HAL_GPIO_WritePin>
				GPIO_PinState state = HAL_GPIO_ReadPin(led_ports[i], led_pins[i]);
 800b056:	4a2d      	ldr	r2, [pc, #180]	@ (800b10c <handle_device_control+0x198>)
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b05e:	492c      	ldr	r1, [pc, #176]	@ (800b110 <handle_device_control+0x19c>)
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b066:	4619      	mov	r1, r3
 800b068:	4610      	mov	r0, r2
 800b06a:	f006 faf1 	bl	8011650 <HAL_GPIO_ReadPin>
 800b06e:	4603      	mov	r3, r0
 800b070:	72fb      	strb	r3, [r7, #11]
				global_device_states[i] = (state == GPIO_PIN_SET) ? 1 : 0;
 800b072:	7afb      	ldrb	r3, [r7, #11]
 800b074:	2b01      	cmp	r3, #1
 800b076:	bf0c      	ite	eq
 800b078:	2301      	moveq	r3, #1
 800b07a:	2300      	movne	r3, #0
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	4619      	mov	r1, r3
 800b080:	4a26      	ldr	r2, [pc, #152]	@ (800b11c <handle_device_control+0x1a8>)
 800b082:	69fb      	ldr	r3, [r7, #28]
 800b084:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				cJSON_AddNumberToObject(resp, devices[i], global_device_states[i]);
 800b088:	4a1f      	ldr	r2, [pc, #124]	@ (800b108 <handle_device_control+0x194>)
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b090:	4a22      	ldr	r2, [pc, #136]	@ (800b11c <handle_device_control+0x1a8>)
 800b092:	69fb      	ldr	r3, [r7, #28]
 800b094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b098:	4618      	mov	r0, r3
 800b09a:	f7fd fa73 	bl	8008584 <__aeabi_i2d>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	ec43 2b10 	vmov	d0, r2, r3
 800b0a6:	4621      	mov	r1, r4
 800b0a8:	69b8      	ldr	r0, [r7, #24]
 800b0aa:	f004 feaf 	bl	800fe0c <cJSON_AddNumberToObject>
				safe_printf("ESP: Device %d set to %s\n", i + 1, global_device_states[i] ? "ON" : "OFF");
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	1c59      	adds	r1, r3, #1
 800b0b2:	4a1a      	ldr	r2, [pc, #104]	@ (800b11c <handle_device_control+0x1a8>)
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d001      	beq.n	800b0c2 <handle_device_control+0x14e>
 800b0be:	4b18      	ldr	r3, [pc, #96]	@ (800b120 <handle_device_control+0x1ac>)
 800b0c0:	e000      	b.n	800b0c4 <handle_device_control+0x150>
 800b0c2:	4b18      	ldr	r3, [pc, #96]	@ (800b124 <handle_device_control+0x1b0>)
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	4818      	ldr	r0, [pc, #96]	@ (800b128 <handle_device_control+0x1b4>)
 800b0c8:	f000 f9f6 	bl	800b4b8 <safe_printf>
		for (int i = 0; i < DEVICE_COUNT; i++)
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	61fb      	str	r3, [r7, #28]
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	2b03      	cmp	r3, #3
 800b0d6:	dd8b      	ble.n	800aff0 <handle_device_control+0x7c>
			}
		}
		xSemaphoreGive(deviceStateMutex);
 800b0d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b104 <handle_device_control+0x190>)
 800b0da:	6818      	ldr	r0, [r3, #0]
 800b0dc:	2300      	movs	r3, #0
 800b0de:	2200      	movs	r2, #0
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	f00a f867 	bl	80151b4 <xQueueGenericSend>
	}
	send_json_response(resp);
 800b0e6:	69b8      	ldr	r0, [r7, #24]
 800b0e8:	f7ff fed4 	bl	800ae94 <send_json_response>
	cJSON_Delete(resp);
 800b0ec:	69b8      	ldr	r0, [r7, #24]
 800b0ee:	f002 ff8f 	bl	800e010 <cJSON_Delete>
 800b0f2:	e000      	b.n	800b0f6 <handle_device_control+0x182>
				return;
 800b0f4:	bf00      	nop
}
 800b0f6:	3724      	adds	r7, #36	@ 0x24
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd90      	pop	{r4, r7, pc}
 800b0fc:	0801d138 	.word	0x0801d138
 800b100:	40020000 	.word	0x40020000
 800b104:	20000570 	.word	0x20000570
 800b108:	2000002c 	.word	0x2000002c
 800b10c:	2000003c 	.word	0x2000003c
 800b110:	2000005c 	.word	0x2000005c
 800b114:	2000004c 	.word	0x2000004c
 800b118:	20000064 	.word	0x20000064
 800b11c:	20000734 	.word	0x20000734
 800b120:	0801d140 	.word	0x0801d140
 800b124:	0801d144 	.word	0x0801d144
 800b128:	0801d148 	.word	0x0801d148

0800b12c <process_json>:

void process_json(uint8_t *jsonBuffer)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
    cJSON *json = cJSON_Parse((char *)jsonBuffer);
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f003 ff7f 	bl	800f038 <cJSON_Parse>
 800b13a:	60f8      	str	r0, [r7, #12]
    if (!json)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d103      	bne.n	800b14a <process_json+0x1e>
    {
        safe_printf("Invalid JSON!\n");
 800b142:	4812      	ldr	r0, [pc, #72]	@ (800b18c <process_json+0x60>)
 800b144:	f000 f9b8 	bl	800b4b8 <safe_printf>
        return;
 800b148:	e01c      	b.n	800b184 <process_json+0x58>
    }

    cJSON *request = cJSON_GetObjectItem(json, "request");
 800b14a:	4911      	ldr	r1, [pc, #68]	@ (800b190 <process_json+0x64>)
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f004 fda7 	bl	800fca0 <cJSON_GetObjectItem>
 800b152:	60b8      	str	r0, [r7, #8]
    if (cJSON_IsString(request) && strcmp(request->valuestring, "getCurrentStatus") == 0)
 800b154:	68b8      	ldr	r0, [r7, #8]
 800b156:	f004 fef2 	bl	800ff3e <cJSON_IsString>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00b      	beq.n	800b178 <process_json+0x4c>
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	691b      	ldr	r3, [r3, #16]
 800b164:	490b      	ldr	r1, [pc, #44]	@ (800b194 <process_json+0x68>)
 800b166:	4618      	mov	r0, r3
 800b168:	f7fd f852 	bl	8008210 <strcmp>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d102      	bne.n	800b178 <process_json+0x4c>
    {
        handle_get_status_request();
 800b172:	f7ff febd 	bl	800aef0 <handle_get_status_request>
 800b176:	e002      	b.n	800b17e <process_json+0x52>
    }
    else
    {
        handle_device_control(json);
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f7ff fefb 	bl	800af74 <handle_device_control>
    }
    cJSON_Delete(json);
 800b17e:	68f8      	ldr	r0, [r7, #12]
 800b180:	f002 ff46 	bl	800e010 <cJSON_Delete>
}
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	0801d164 	.word	0x0801d164
 800b190:	0801d174 	.word	0x0801d174
 800b194:	0801d17c 	.word	0x0801d17c

0800b198 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a1f      	ldr	r2, [pc, #124]	@ (800b224 <HAL_UART_RxCpltCallback+0x8c>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d124      	bne.n	800b1f4 <HAL_UART_RxCpltCallback+0x5c>
    {
        uint16_t nextHead = (uartHead + 1) % UART_RING_BUFFER_SIZE;
 800b1aa:	4b1f      	ldr	r3, [pc, #124]	@ (800b228 <HAL_UART_RxCpltCallback+0x90>)
 800b1ac:	881b      	ldrh	r3, [r3, #0]
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	425a      	negs	r2, r3
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	b2d2      	uxtb	r2, r2
 800b1b8:	bf58      	it	pl
 800b1ba:	4253      	negpl	r3, r2
 800b1bc:	817b      	strh	r3, [r7, #10]
        if (nextHead != uartTail)
 800b1be:	4b1b      	ldr	r3, [pc, #108]	@ (800b22c <HAL_UART_RxCpltCallback+0x94>)
 800b1c0:	881b      	ldrh	r3, [r3, #0]
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	897a      	ldrh	r2, [r7, #10]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d00b      	beq.n	800b1e2 <HAL_UART_RxCpltCallback+0x4a>
        {
            uartRingBuffer[uartHead] = uartRxByte;
 800b1ca:	4b17      	ldr	r3, [pc, #92]	@ (800b228 <HAL_UART_RxCpltCallback+0x90>)
 800b1cc:	881b      	ldrh	r3, [r3, #0]
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	4b17      	ldr	r3, [pc, #92]	@ (800b230 <HAL_UART_RxCpltCallback+0x98>)
 800b1d4:	7819      	ldrb	r1, [r3, #0]
 800b1d6:	4b17      	ldr	r3, [pc, #92]	@ (800b234 <HAL_UART_RxCpltCallback+0x9c>)
 800b1d8:	5499      	strb	r1, [r3, r2]
            uartHead = nextHead;
 800b1da:	4a13      	ldr	r2, [pc, #76]	@ (800b228 <HAL_UART_RxCpltCallback+0x90>)
 800b1dc:	897b      	ldrh	r3, [r7, #10]
 800b1de:	8013      	strh	r3, [r2, #0]
 800b1e0:	e002      	b.n	800b1e8 <HAL_UART_RxCpltCallback+0x50>
        } else {
            safe_printf("UART ring buffer overflow!\n");
 800b1e2:	4815      	ldr	r0, [pc, #84]	@ (800b238 <HAL_UART_RxCpltCallback+0xa0>)
 800b1e4:	f000 f968 	bl	800b4b8 <safe_printf>
        }
        HAL_UART_Receive_IT(&huart3, &uartRxByte, 1);
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	4911      	ldr	r1, [pc, #68]	@ (800b230 <HAL_UART_RxCpltCallback+0x98>)
 800b1ec:	4813      	ldr	r0, [pc, #76]	@ (800b23c <HAL_UART_RxCpltCallback+0xa4>)
 800b1ee:	f008 fe7a 	bl	8013ee6 <HAL_UART_Receive_IT>
    {
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		Sim800_RxCallBack();
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    }
}
 800b1f2:	e012      	b.n	800b21a <HAL_UART_RxCpltCallback+0x82>
    else if(huart == UART_SIM800)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a12      	ldr	r2, [pc, #72]	@ (800b240 <HAL_UART_RxCpltCallback+0xa8>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d10e      	bne.n	800b21a <HAL_UART_RxCpltCallback+0x82>
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	60fb      	str	r3, [r7, #12]
		Sim800_RxCallBack();
 800b200:	f000 ff2c 	bl	800c05c <Sim800_RxCallBack>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d007      	beq.n	800b21a <HAL_UART_RxCpltCallback+0x82>
 800b20a:	4b0e      	ldr	r3, [pc, #56]	@ (800b244 <HAL_UART_RxCpltCallback+0xac>)
 800b20c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b210:	601a      	str	r2, [r3, #0]
 800b212:	f3bf 8f4f 	dsb	sy
 800b216:	f3bf 8f6f 	isb	sy
}
 800b21a:	bf00      	nop
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	40004800 	.word	0x40004800
 800b228:	20000568 	.word	0x20000568
 800b22c:	2000056a 	.word	0x2000056a
 800b230:	2000056c 	.word	0x2000056c
 800b234:	20000468 	.word	0x20000468
 800b238:	0801d190 	.word	0x0801d190
 800b23c:	200014c4 	.word	0x200014c4
 800b240:	20001434 	.word	0x20001434
 800b244:	e000ed04 	.word	0xe000ed04

0800b248 <setup_freeRTOS>:
volatile int global_device_states[4] = {0, 0, 0, 0};
uint32_t lastKeepAliveTime = 0;


void setup_freeRTOS(void)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b088      	sub	sp, #32
 800b24c:	af02      	add	r7, sp, #8
	HAL_SPI_Receive_IT(&hspi2, &spiRxByte, 1);
 800b24e:	2201      	movs	r2, #1
 800b250:	4954      	ldr	r1, [pc, #336]	@ (800b3a4 <setup_freeRTOS+0x15c>)
 800b252:	4855      	ldr	r0, [pc, #340]	@ (800b3a8 <setup_freeRTOS+0x160>)
 800b254:	f007 fd1c 	bl	8012c90 <HAL_SPI_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &rx_data, 1);
 800b258:	2201      	movs	r2, #1
 800b25a:	4954      	ldr	r1, [pc, #336]	@ (800b3ac <setup_freeRTOS+0x164>)
 800b25c:	4854      	ldr	r0, [pc, #336]	@ (800b3b0 <setup_freeRTOS+0x168>)
 800b25e:	f008 fe42 	bl	8013ee6 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &uartRxByte, 1);
 800b262:	2201      	movs	r2, #1
 800b264:	4953      	ldr	r1, [pc, #332]	@ (800b3b4 <setup_freeRTOS+0x16c>)
 800b266:	4854      	ldr	r0, [pc, #336]	@ (800b3b8 <setup_freeRTOS+0x170>)
 800b268:	f008 fe3d 	bl	8013ee6 <HAL_UART_Receive_IT>

	status = xTaskCreate(SPI_Handler, "SPIHandler", 512, NULL, 5, NULL);
 800b26c:	2300      	movs	r3, #0
 800b26e:	9301      	str	r3, [sp, #4]
 800b270:	2305      	movs	r3, #5
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	2300      	movs	r3, #0
 800b276:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b27a:	4950      	ldr	r1, [pc, #320]	@ (800b3bc <setup_freeRTOS+0x174>)
 800b27c:	4850      	ldr	r0, [pc, #320]	@ (800b3c0 <setup_freeRTOS+0x178>)
 800b27e:	f00a fcc1 	bl	8015c04 <xTaskCreate>
 800b282:	4603      	mov	r3, r0
 800b284:	4a4f      	ldr	r2, [pc, #316]	@ (800b3c4 <setup_freeRTOS+0x17c>)
 800b286:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800b288:	4b4e      	ldr	r3, [pc, #312]	@ (800b3c4 <setup_freeRTOS+0x17c>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d00b      	beq.n	800b2a8 <setup_freeRTOS+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800b290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b294:	f383 8811 	msr	BASEPRI, r3
 800b298:	f3bf 8f6f 	isb	sy
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800b2a2:	bf00      	nop
 800b2a4:	bf00      	nop
 800b2a6:	e7fd      	b.n	800b2a4 <setup_freeRTOS+0x5c>

	status = xTaskCreate(RFM_Task, "RFM69Handler", 256, NULL, 6, NULL);
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	9301      	str	r3, [sp, #4]
 800b2ac:	2306      	movs	r3, #6
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b2b6:	4944      	ldr	r1, [pc, #272]	@ (800b3c8 <setup_freeRTOS+0x180>)
 800b2b8:	4844      	ldr	r0, [pc, #272]	@ (800b3cc <setup_freeRTOS+0x184>)
 800b2ba:	f00a fca3 	bl	8015c04 <xTaskCreate>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	4a40      	ldr	r2, [pc, #256]	@ (800b3c4 <setup_freeRTOS+0x17c>)
 800b2c2:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800b2c4:	4b3f      	ldr	r3, [pc, #252]	@ (800b3c4 <setup_freeRTOS+0x17c>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d00b      	beq.n	800b2e4 <setup_freeRTOS+0x9c>
        __asm volatile
 800b2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d0:	f383 8811 	msr	BASEPRI, r3
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	613b      	str	r3, [r7, #16]
    }
 800b2de:	bf00      	nop
 800b2e0:	bf00      	nop
 800b2e2:	e7fd      	b.n	800b2e0 <setup_freeRTOS+0x98>

	status = xTaskCreate(UART_Handler, "UARTHandler", 1024, NULL, 4, NULL);
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	9301      	str	r3, [sp, #4]
 800b2e8:	2304      	movs	r3, #4
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b2f2:	4937      	ldr	r1, [pc, #220]	@ (800b3d0 <setup_freeRTOS+0x188>)
 800b2f4:	4837      	ldr	r0, [pc, #220]	@ (800b3d4 <setup_freeRTOS+0x18c>)
 800b2f6:	f00a fc85 	bl	8015c04 <xTaskCreate>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	4a31      	ldr	r2, [pc, #196]	@ (800b3c4 <setup_freeRTOS+0x17c>)
 800b2fe:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800b300:	4b30      	ldr	r3, [pc, #192]	@ (800b3c4 <setup_freeRTOS+0x17c>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2b01      	cmp	r3, #1
 800b306:	d00b      	beq.n	800b320 <setup_freeRTOS+0xd8>
        __asm volatile
 800b308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b30c:	f383 8811 	msr	BASEPRI, r3
 800b310:	f3bf 8f6f 	isb	sy
 800b314:	f3bf 8f4f 	dsb	sy
 800b318:	60fb      	str	r3, [r7, #12]
    }
 800b31a:	bf00      	nop
 800b31c:	bf00      	nop
 800b31e:	e7fd      	b.n	800b31c <setup_freeRTOS+0xd4>

	status = xTaskCreate(GSM_MQTT_Task, "GSM_MQTT_Task", 1024, NULL, 7, NULL);
 800b320:	2300      	movs	r3, #0
 800b322:	9301      	str	r3, [sp, #4]
 800b324:	2307      	movs	r3, #7
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	2300      	movs	r3, #0
 800b32a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b32e:	492a      	ldr	r1, [pc, #168]	@ (800b3d8 <setup_freeRTOS+0x190>)
 800b330:	482a      	ldr	r0, [pc, #168]	@ (800b3dc <setup_freeRTOS+0x194>)
 800b332:	f00a fc67 	bl	8015c04 <xTaskCreate>
 800b336:	4603      	mov	r3, r0
 800b338:	4a22      	ldr	r2, [pc, #136]	@ (800b3c4 <setup_freeRTOS+0x17c>)
 800b33a:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800b33c:	4b21      	ldr	r3, [pc, #132]	@ (800b3c4 <setup_freeRTOS+0x17c>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b01      	cmp	r3, #1
 800b342:	d00b      	beq.n	800b35c <setup_freeRTOS+0x114>
        __asm volatile
 800b344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b348:	f383 8811 	msr	BASEPRI, r3
 800b34c:	f3bf 8f6f 	isb	sy
 800b350:	f3bf 8f4f 	dsb	sy
 800b354:	60bb      	str	r3, [r7, #8]
    }
 800b356:	bf00      	nop
 800b358:	bf00      	nop
 800b35a:	e7fd      	b.n	800b358 <setup_freeRTOS+0x110>

	status = xTaskCreate(Display_Handler, "DisplayHandler", 1024, NULL, 3, NULL);
 800b35c:	2300      	movs	r3, #0
 800b35e:	9301      	str	r3, [sp, #4]
 800b360:	2303      	movs	r3, #3
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	2300      	movs	r3, #0
 800b366:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b36a:	491d      	ldr	r1, [pc, #116]	@ (800b3e0 <setup_freeRTOS+0x198>)
 800b36c:	481d      	ldr	r0, [pc, #116]	@ (800b3e4 <setup_freeRTOS+0x19c>)
 800b36e:	f00a fc49 	bl	8015c04 <xTaskCreate>
 800b372:	4603      	mov	r3, r0
 800b374:	4a13      	ldr	r2, [pc, #76]	@ (800b3c4 <setup_freeRTOS+0x17c>)
 800b376:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800b378:	4b12      	ldr	r3, [pc, #72]	@ (800b3c4 <setup_freeRTOS+0x17c>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d00b      	beq.n	800b398 <setup_freeRTOS+0x150>
        __asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	607b      	str	r3, [r7, #4]
    }
 800b392:	bf00      	nop
 800b394:	bf00      	nop
 800b396:	e7fd      	b.n	800b394 <setup_freeRTOS+0x14c>

	vTaskStartScheduler();
 800b398:	f00a fe2a 	bl	8015ff0 <vTaskStartScheduler>
}
 800b39c:	bf00      	nop
 800b39e:	3718      	adds	r7, #24
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	20000464 	.word	0x20000464
 800b3a8:	20001384 	.word	0x20001384
 800b3ac:	2000074c 	.word	0x2000074c
 800b3b0:	20001434 	.word	0x20001434
 800b3b4:	2000056c 	.word	0x2000056c
 800b3b8:	200014c4 	.word	0x200014c4
 800b3bc:	0801d1cc 	.word	0x0801d1cc
 800b3c0:	0800a9e5 	.word	0x0800a9e5
 800b3c4:	20000574 	.word	0x20000574
 800b3c8:	0801d1d8 	.word	0x0801d1d8
 800b3cc:	0800a6cf 	.word	0x0800a6cf
 800b3d0:	0801d1e8 	.word	0x0801d1e8
 800b3d4:	0800ad89 	.word	0x0800ad89
 800b3d8:	0801d1f4 	.word	0x0801d1f4
 800b3dc:	0800a565 	.word	0x0800a565
 800b3e0:	0801d204 	.word	0x0801d204
 800b3e4:	08008fe1 	.word	0x08008fe1

0800b3e8 <user_app_init>:

void user_app_init(void)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
	ST7735_Init(0);
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	f002 fadc 	bl	800d9ac <ST7735_Init>
	ST7735_SetRotation(1);
 800b3f4:	2001      	movs	r0, #1
 800b3f6:	f002 fb05 	bl	800da04 <ST7735_SetRotation>
	fillScreen(BLACK);
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	f002 f9ca 	bl	800d794 <fillScreen>
	showStartupLogoAndMenu();
 800b400:	f002 fd4c 	bl	800de9c <showStartupLogoAndMenu>
	deviceStateMutex = xSemaphoreCreateMutex();
 800b404:	2001      	movs	r0, #1
 800b406:	f009 febc 	bl	8015182 <xQueueCreateMutex>
 800b40a:	4603      	mov	r3, r0
 800b40c:	4a12      	ldr	r2, [pc, #72]	@ (800b458 <user_app_init+0x70>)
 800b40e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 4; i++) {
 800b410:	2300      	movs	r3, #0
 800b412:	607b      	str	r3, [r7, #4]
 800b414:	e00c      	b.n	800b430 <user_app_init+0x48>
	  global_device_states[i] = 0;
 800b416:	4a11      	ldr	r2, [pc, #68]	@ (800b45c <user_app_init+0x74>)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2100      	movs	r1, #0
 800b41c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  device_states[i] = 0;
 800b420:	4a0f      	ldr	r2, [pc, #60]	@ (800b460 <user_app_init+0x78>)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2100      	movs	r1, #0
 800b426:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	3301      	adds	r3, #1
 800b42e:	607b      	str	r3, [r7, #4]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2b03      	cmp	r3, #3
 800b434:	ddef      	ble.n	800b416 <user_app_init+0x2e>
	}
	uartMutex = xSemaphoreCreateMutex();
 800b436:	2001      	movs	r0, #1
 800b438:	f009 fea3 	bl	8015182 <xQueueCreateMutex>
 800b43c:	4603      	mov	r3, r0
 800b43e:	4a09      	ldr	r2, [pc, #36]	@ (800b464 <user_app_init+0x7c>)
 800b440:	6013      	str	r3, [r2, #0]
	initializeMenu();
 800b442:	f7fe fd63 	bl	8009f0c <initializeMenu>
	GSM_init();
 800b446:	f7ff f85b 	bl	800a500 <GSM_init>
	setup_freeRTOS();
 800b44a:	f7ff fefd 	bl	800b248 <setup_freeRTOS>
}
 800b44e:	bf00      	nop
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	20000570 	.word	0x20000570
 800b45c:	20000734 	.word	0x20000734
 800b460:	20000298 	.word	0x20000298
 800b464:	20000578 	.word	0x20000578

0800b468 <vApplicationStackOverflowHook>:


void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
    safe_printf("Stack overflow in task: %s\n", pcTaskName);
 800b472:	6839      	ldr	r1, [r7, #0]
 800b474:	4802      	ldr	r0, [pc, #8]	@ (800b480 <vApplicationStackOverflowHook+0x18>)
 800b476:	f000 f81f 	bl	800b4b8 <safe_printf>
    while(1);
 800b47a:	bf00      	nop
 800b47c:	e7fd      	b.n	800b47a <vApplicationStackOverflowHook+0x12>
 800b47e:	bf00      	nop
 800b480:	0801d214 	.word	0x0801d214

0800b484 <print_task_info>:
}

void print_task_info(void)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800b48a:	af00      	add	r7, sp, #0
    char taskList[512];
    safe_printf("Task Info:\nName               State  Prio   StackNum     ID\n");
 800b48c:	4808      	ldr	r0, [pc, #32]	@ (800b4b0 <print_task_info+0x2c>)
 800b48e:	f000 f813 	bl	800b4b8 <safe_printf>
    vTaskList(taskList);
 800b492:	463b      	mov	r3, r7
 800b494:	4618      	mov	r0, r3
 800b496:	f00b fd0f 	bl	8016eb8 <vTaskList>
    safe_printf("%s\n", taskList);
 800b49a:	463b      	mov	r3, r7
 800b49c:	4619      	mov	r1, r3
 800b49e:	4805      	ldr	r0, [pc, #20]	@ (800b4b4 <print_task_info+0x30>)
 800b4a0:	f000 f80a 	bl	800b4b8 <safe_printf>
}
 800b4a4:	bf00      	nop
 800b4a6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	0801d230 	.word	0x0801d230
 800b4b4:	0801d270 	.word	0x0801d270

0800b4b8 <safe_printf>:


void safe_printf(const char *fmt, ...)
{
 800b4b8:	b40f      	push	{r0, r1, r2, r3}
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b0c2      	sub	sp, #264	@ 0x108
 800b4be:	af00      	add	r7, sp, #0
    if (uartMutex != NULL && xSemaphoreTake(uartMutex, pdMS_TO_TICKS(200)) == pdTRUE)
 800b4c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b52c <safe_printf+0x74>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d028      	beq.n	800b51a <safe_printf+0x62>
 800b4c8:	4b18      	ldr	r3, [pc, #96]	@ (800b52c <safe_printf+0x74>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	21c8      	movs	r1, #200	@ 0xc8
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f00a f902 	bl	80156d8 <xQueueSemaphoreTake>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d11f      	bne.n	800b51a <safe_printf+0x62>
    {
        char buffer[256];
        va_list args;
        va_start(args, fmt);
 800b4da:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800b4de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        vsnprintf(buffer, sizeof(buffer), fmt, args);
 800b4e2:	1d38      	adds	r0, r7, #4
 800b4e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4e8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800b4ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b4f0:	f00e fa94 	bl	8019a1c <vsniprintf>
        va_end(args);

        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800b4f4:	1d3b      	adds	r3, r7, #4
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7fc feea 	bl	80082d0 <strlen>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	1d39      	adds	r1, r7, #4
 800b502:	f04f 33ff 	mov.w	r3, #4294967295
 800b506:	480a      	ldr	r0, [pc, #40]	@ (800b530 <safe_printf+0x78>)
 800b508:	f008 fc2c 	bl	8013d64 <HAL_UART_Transmit>
        xSemaphoreGive(uartMutex);
 800b50c:	4b07      	ldr	r3, [pc, #28]	@ (800b52c <safe_printf+0x74>)
 800b50e:	6818      	ldr	r0, [r3, #0]
 800b510:	2300      	movs	r3, #0
 800b512:	2200      	movs	r2, #0
 800b514:	2100      	movs	r1, #0
 800b516:	f009 fe4d 	bl	80151b4 <xQueueGenericSend>
    }
}
 800b51a:	bf00      	nop
 800b51c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800b520:	46bd      	mov	sp, r7
 800b522:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b526:	b004      	add	sp, #16
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	20000578 	.word	0x20000578
 800b530:	2000147c 	.word	0x2000147c

0800b534 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800b534:	b590      	push	{r4, r7, lr}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
	int len = 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	7a1b      	ldrb	r3, [r3, #8]
 800b544:	2b03      	cmp	r3, #3
 800b546:	d102      	bne.n	800b54e <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800b548:	230c      	movs	r3, #12
 800b54a:	60fb      	str	r3, [r7, #12]
 800b54c:	e005      	b.n	800b55a <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	7a1b      	ldrb	r3, [r3, #8]
 800b552:	2b04      	cmp	r3, #4
 800b554:	d101      	bne.n	800b55a <MQTTSerialize_connectLength+0x26>
		len = 10;
 800b556:	230a      	movs	r3, #10
 800b558:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	330c      	adds	r3, #12
 800b55e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b562:	f000 fb5e 	bl	800bc22 <MQTTstrlen>
 800b566:	4603      	mov	r3, r0
 800b568:	3302      	adds	r3, #2
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	4413      	add	r3, r2
 800b56e:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	7edb      	ldrb	r3, [r3, #27]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d013      	beq.n	800b5a0 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	3324      	adds	r3, #36	@ 0x24
 800b57c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b580:	f000 fb4f 	bl	800bc22 <MQTTstrlen>
 800b584:	4603      	mov	r3, r0
 800b586:	1c9c      	adds	r4, r3, #2
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	3330      	adds	r3, #48	@ 0x30
 800b58c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b590:	f000 fb47 	bl	800bc22 <MQTTstrlen>
 800b594:	4603      	mov	r3, r0
 800b596:	4423      	add	r3, r4
 800b598:	3302      	adds	r3, #2
 800b59a:	68fa      	ldr	r2, [r7, #12]
 800b59c:	4413      	add	r3, r2
 800b59e:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d103      	bne.n	800b5b0 <MQTTSerialize_connectLength+0x7c>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00a      	beq.n	800b5c6 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	3340      	adds	r3, #64	@ 0x40
 800b5b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b5b8:	f000 fb33 	bl	800bc22 <MQTTstrlen>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	3302      	adds	r3, #2
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d103      	bne.n	800b5d6 <MQTTSerialize_connectLength+0xa2>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00a      	beq.n	800b5ec <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	334c      	adds	r3, #76	@ 0x4c
 800b5da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b5de:	f000 fb20 	bl	800bc22 <MQTTstrlen>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	3302      	adds	r3, #2
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3714      	adds	r7, #20
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd90      	pop	{r4, r7, pc}
	...

0800b5f8 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b08a      	sub	sp, #40	@ 0x28
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 800b608:	2300      	movs	r3, #0
 800b60a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 800b60c:	2300      	movs	r3, #0
 800b60e:	617b      	str	r3, [r7, #20]
	int len = 0;
 800b610:	2300      	movs	r3, #0
 800b612:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800b614:	f04f 33ff 	mov.w	r3, #4294967295
 800b618:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f7ff ff8a 	bl	800b534 <MQTTSerialize_connectLength>
 800b620:	6238      	str	r0, [r7, #32]
 800b622:	6a38      	ldr	r0, [r7, #32]
 800b624:	f000 f9b2 	bl	800b98c <MQTTPacket_len>
 800b628:	4602      	mov	r2, r0
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	4293      	cmp	r3, r2
 800b62e:	da03      	bge.n	800b638 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800b630:	f06f 0301 	mvn.w	r3, #1
 800b634:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 800b636:	e0c2      	b.n	800b7be <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 800b638:	2300      	movs	r3, #0
 800b63a:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 800b63c:	7e3b      	ldrb	r3, [r7, #24]
 800b63e:	2201      	movs	r2, #1
 800b640:	f362 1307 	bfi	r3, r2, #4, #4
 800b644:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800b646:	7e3a      	ldrb	r2, [r7, #24]
 800b648:	f107 031c 	add.w	r3, r7, #28
 800b64c:	4611      	mov	r1, r2
 800b64e:	4618      	mov	r0, r3
 800b650:	f000 fa2b 	bl	800baaa <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	6a39      	ldr	r1, [r7, #32]
 800b658:	4618      	mov	r0, r3
 800b65a:	f000 f92b 	bl	800b8b4 <MQTTPacket_encode>
 800b65e:	4602      	mov	r2, r0
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	4413      	add	r3, r2
 800b664:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	7a1b      	ldrb	r3, [r3, #8]
 800b66a:	2b04      	cmp	r3, #4
 800b66c:	d10c      	bne.n	800b688 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800b66e:	f107 031c 	add.w	r3, r7, #28
 800b672:	4955      	ldr	r1, [pc, #340]	@ (800b7c8 <MQTTSerialize_connect+0x1d0>)
 800b674:	4618      	mov	r0, r3
 800b676:	f000 fa56 	bl	800bb26 <writeCString>
		writeChar(&ptr, (char) 4);
 800b67a:	f107 031c 	add.w	r3, r7, #28
 800b67e:	2104      	movs	r1, #4
 800b680:	4618      	mov	r0, r3
 800b682:	f000 fa12 	bl	800baaa <writeChar>
 800b686:	e00b      	b.n	800b6a0 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 800b688:	f107 031c 	add.w	r3, r7, #28
 800b68c:	494f      	ldr	r1, [pc, #316]	@ (800b7cc <MQTTSerialize_connect+0x1d4>)
 800b68e:	4618      	mov	r0, r3
 800b690:	f000 fa49 	bl	800bb26 <writeCString>
		writeChar(&ptr, (char) 3);
 800b694:	f107 031c 	add.w	r3, r7, #28
 800b698:	2103      	movs	r1, #3
 800b69a:	4618      	mov	r0, r3
 800b69c:	f000 fa05 	bl	800baaa <writeChar>
	}

	flags.all = 0;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	7e9b      	ldrb	r3, [r3, #26]
 800b6a8:	f003 0301 	and.w	r3, r3, #1
 800b6ac:	b2da      	uxtb	r2, r3
 800b6ae:	7d3b      	ldrb	r3, [r7, #20]
 800b6b0:	f362 0341 	bfi	r3, r2, #1, #1
 800b6b4:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	7edb      	ldrb	r3, [r3, #27]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	bf14      	ite	ne
 800b6be:	2301      	movne	r3, #1
 800b6c0:	2300      	moveq	r3, #0
 800b6c2:	b2da      	uxtb	r2, r3
 800b6c4:	7d3b      	ldrb	r3, [r7, #20]
 800b6c6:	f362 0382 	bfi	r3, r2, #2, #1
 800b6ca:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 800b6cc:	7d3b      	ldrb	r3, [r7, #20]
 800b6ce:	f003 0304 	and.w	r3, r3, #4
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d013      	beq.n	800b700 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6de:	f003 0303 	and.w	r3, r3, #3
 800b6e2:	b2da      	uxtb	r2, r3
 800b6e4:	7d3b      	ldrb	r3, [r7, #20]
 800b6e6:	f362 03c4 	bfi	r3, r2, #3, #2
 800b6ea:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b6f2:	f003 0301 	and.w	r3, r3, #1
 800b6f6:	b2da      	uxtb	r2, r3
 800b6f8:	7d3b      	ldrb	r3, [r7, #20]
 800b6fa:	f362 1345 	bfi	r3, r2, #5, #1
 800b6fe:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b704:	2b00      	cmp	r3, #0
 800b706:	d103      	bne.n	800b710 <MQTTSerialize_connect+0x118>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d003      	beq.n	800b718 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 800b710:	7d3b      	ldrb	r3, [r7, #20]
 800b712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b716:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d103      	bne.n	800b728 <MQTTSerialize_connect+0x130>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b724:	2b00      	cmp	r3, #0
 800b726:	d003      	beq.n	800b730 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 800b728:	7d3b      	ldrb	r3, [r7, #20]
 800b72a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b72e:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 800b730:	7d3a      	ldrb	r2, [r7, #20]
 800b732:	f107 031c 	add.w	r3, r7, #28
 800b736:	4611      	mov	r1, r2
 800b738:	4618      	mov	r0, r3
 800b73a:	f000 f9b6 	bl	800baaa <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	8b1b      	ldrh	r3, [r3, #24]
 800b742:	461a      	mov	r2, r3
 800b744:	f107 031c 	add.w	r3, r7, #28
 800b748:	4611      	mov	r1, r2
 800b74a:	4618      	mov	r0, r3
 800b74c:	f000 f9c2 	bl	800bad4 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f107 001c 	add.w	r0, r7, #28
 800b756:	330c      	adds	r3, #12
 800b758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b75a:	f000 fa03 	bl	800bb64 <writeMQTTString>
	if (options->willFlag)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	7edb      	ldrb	r3, [r3, #27]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00d      	beq.n	800b782 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f107 001c 	add.w	r0, r7, #28
 800b76c:	3324      	adds	r3, #36	@ 0x24
 800b76e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b770:	f000 f9f8 	bl	800bb64 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f107 001c 	add.w	r0, r7, #28
 800b77a:	3330      	adds	r3, #48	@ 0x30
 800b77c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b77e:	f000 f9f1 	bl	800bb64 <writeMQTTString>
	}
	if (flags.bits.username)
 800b782:	7d3b      	ldrb	r3, [r7, #20]
 800b784:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d006      	beq.n	800b79c <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f107 001c 	add.w	r0, r7, #28
 800b794:	3340      	adds	r3, #64	@ 0x40
 800b796:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b798:	f000 f9e4 	bl	800bb64 <writeMQTTString>
	if (flags.bits.password)
 800b79c:	7d3b      	ldrb	r3, [r7, #20]
 800b79e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d006      	beq.n	800b7b6 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f107 001c 	add.w	r0, r7, #28
 800b7ae:	334c      	adds	r3, #76	@ 0x4c
 800b7b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b7b2:	f000 f9d7 	bl	800bb64 <writeMQTTString>

	rc = ptr - buf;
 800b7b6:	69fa      	ldr	r2, [r7, #28]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	1ad3      	subs	r3, r2, r3
 800b7bc:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800b7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3728      	adds	r7, #40	@ 0x28
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	0801d274 	.word	0x0801d274
 800b7cc:	0801d27c 	.word	0x0801d27c

0800b7d0 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b08a      	sub	sp, #40	@ 0x28
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
 800b7dc:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800b7de:	2300      	movs	r3, #0
 800b7e0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800b7e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7e4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800b7f2:	f107 0318 	add.w	r3, r7, #24
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f000 f943 	bl	800ba82 <readChar>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800b800:	7f3b      	ldrb	r3, [r7, #28]
 800b802:	f023 030f 	bic.w	r3, r3, #15
 800b806:	b2db      	uxtb	r3, r3
 800b808:	2b30      	cmp	r3, #48	@ 0x30
 800b80a:	d14b      	bne.n	800b8a4 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800b80c:	7f3b      	ldrb	r3, [r7, #28]
 800b80e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b812:	b2db      	uxtb	r3, r3
 800b814:	461a      	mov	r2, r3
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800b81a:	7f3b      	ldrb	r3, [r7, #28]
 800b81c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800b820:	b2db      	uxtb	r3, r3
 800b822:	461a      	mov	r2, r3
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 800b828:	7f3b      	ldrb	r3, [r7, #28]
 800b82a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	461a      	mov	r2, r3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen));
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	f107 0214 	add.w	r2, r7, #20
 800b83c:	4611      	mov	r1, r2
 800b83e:	4618      	mov	r0, r3
 800b840:	f000 f8ee 	bl	800ba20 <MQTTPacket_decodeBuf>
 800b844:	6278      	str	r0, [r7, #36]	@ 0x24
 800b846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	4413      	add	r3, r2
 800b84c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	697a      	ldr	r2, [r7, #20]
 800b852:	4413      	add	r3, r2
 800b854:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800b856:	f107 0318 	add.w	r3, r7, #24
 800b85a:	6a3a      	ldr	r2, [r7, #32]
 800b85c:	4619      	mov	r1, r3
 800b85e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b860:	f000 f9ae 	bl	800bbc0 <readMQTTLenString>
 800b864:	4603      	mov	r3, r0
 800b866:	2b00      	cmp	r3, #0
 800b868:	d01e      	beq.n	800b8a8 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0)
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	6a3a      	ldr	r2, [r7, #32]
 800b86e:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800b870:	2b00      	cmp	r3, #0
 800b872:	db19      	blt.n	800b8a8 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	dd08      	ble.n	800b88e <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 800b87c:	f107 0318 	add.w	r3, r7, #24
 800b880:	4618      	mov	r0, r3
 800b882:	f000 f8e3 	bl	800ba4c <readInt>
 800b886:	4603      	mov	r3, r0
 800b888:	b29a      	uxth	r2, r3
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	6a3a      	ldr	r2, [r7, #32]
 800b892:	1ad2      	subs	r2, r2, r3
 800b894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b896:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 800b898:	69ba      	ldr	r2, [r7, #24]
 800b89a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b89c:	601a      	str	r2, [r3, #0]
	rc = 1;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8a2:	e002      	b.n	800b8aa <MQTTDeserialize_publish+0xda>
		goto exit;
 800b8a4:	bf00      	nop
 800b8a6:	e000      	b.n	800b8aa <MQTTDeserialize_publish+0xda>
		goto exit;
 800b8a8:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3728      	adds	r7, #40	@ 0x28
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	425a      	negs	r2, r3
 800b8c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b8ce:	bf58      	it	pl
 800b8d0:	4253      	negpl	r3, r2
 800b8d2:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	da00      	bge.n	800b8dc <MQTTPacket_encode+0x28>
 800b8da:	337f      	adds	r3, #127	@ 0x7f
 800b8dc:	11db      	asrs	r3, r3, #7
 800b8de:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	dd03      	ble.n	800b8ee <MQTTPacket_encode+0x3a>
			d |= 0x80;
 800b8e6:	7afb      	ldrb	r3, [r7, #11]
 800b8e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b8ec:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	1c5a      	adds	r2, r3, #1
 800b8f2:	60fa      	str	r2, [r7, #12]
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	7afa      	ldrb	r2, [r7, #11]
 800b8fc:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	dcde      	bgt.n	800b8c2 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 800b904:	68fb      	ldr	r3, [r7, #12]
}
 800b906:	4618      	mov	r0, r3
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr

0800b912 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b086      	sub	sp, #24
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
 800b91a:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800b91c:	2301      	movs	r3, #1
 800b91e:	617b      	str	r3, [r7, #20]
	int len = 0;
 800b920:	2300      	movs	r3, #0
 800b922:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	2200      	movs	r2, #0
 800b928:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 800b92a:	f04f 33ff 	mov.w	r3, #4294967295
 800b92e:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	3301      	adds	r3, #1
 800b934:	613b      	str	r3, [r7, #16]
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	2b04      	cmp	r3, #4
 800b93a:	dd03      	ble.n	800b944 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 800b93c:	f04f 33ff 	mov.w	r3, #4294967295
 800b940:	60fb      	str	r3, [r7, #12]
			goto exit;
 800b942:	e01d      	b.n	800b980 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800b944:	f107 020b 	add.w	r2, r7, #11
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2101      	movs	r1, #1
 800b94c:	4610      	mov	r0, r2
 800b94e:	4798      	blx	r3
 800b950:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2b01      	cmp	r3, #1
 800b956:	d112      	bne.n	800b97e <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	7afb      	ldrb	r3, [r7, #11]
 800b95e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b962:	6979      	ldr	r1, [r7, #20]
 800b964:	fb01 f303 	mul.w	r3, r1, r3
 800b968:	441a      	add	r2, r3
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	01db      	lsls	r3, r3, #7
 800b972:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800b974:	7afb      	ldrb	r3, [r7, #11]
 800b976:	b25b      	sxtb	r3, r3
 800b978:	2b00      	cmp	r3, #0
 800b97a:	dbd6      	blt.n	800b92a <MQTTPacket_decode+0x18>
exit:
 800b97c:	e000      	b.n	800b980 <MQTTPacket_decode+0x6e>
			goto exit;
 800b97e:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800b980:	693b      	ldr	r3, [r7, #16]
}
 800b982:	4618      	mov	r0, r3
 800b984:	3718      	adds	r7, #24
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
	...

0800b98c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	3301      	adds	r3, #1
 800b998:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2b7f      	cmp	r3, #127	@ 0x7f
 800b99e:	dc03      	bgt.n	800b9a8 <MQTTPacket_len+0x1c>
		rem_len += 1;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	607b      	str	r3, [r7, #4]
 800b9a6:	e012      	b.n	800b9ce <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9ae:	da03      	bge.n	800b9b8 <MQTTPacket_len+0x2c>
		rem_len += 2;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	3302      	adds	r3, #2
 800b9b4:	607b      	str	r3, [r7, #4]
 800b9b6:	e00a      	b.n	800b9ce <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	4a08      	ldr	r2, [pc, #32]	@ (800b9dc <MQTTPacket_len+0x50>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	dc03      	bgt.n	800b9c8 <MQTTPacket_len+0x3c>
		rem_len += 3;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	3303      	adds	r3, #3
 800b9c4:	607b      	str	r3, [r7, #4]
 800b9c6:	e002      	b.n	800b9ce <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	3304      	adds	r3, #4
 800b9cc:	607b      	str	r3, [r7, #4]
	return rem_len;
 800b9ce:	687b      	ldr	r3, [r7, #4]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr
 800b9dc:	001ffffe 	.word	0x001ffffe

0800b9e0 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b085      	sub	sp, #20
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	60fb      	str	r3, [r7, #12]
 800b9ee:	e00a      	b.n	800ba06 <bufchar+0x26>
		*c = *bufptr++;
 800b9f0:	4b0a      	ldr	r3, [pc, #40]	@ (800ba1c <bufchar+0x3c>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	1c5a      	adds	r2, r3, #1
 800b9f6:	4909      	ldr	r1, [pc, #36]	@ (800ba1c <bufchar+0x3c>)
 800b9f8:	600a      	str	r2, [r1, #0]
 800b9fa:	781a      	ldrb	r2, [r3, #0]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	3301      	adds	r3, #1
 800ba04:	60fb      	str	r3, [r7, #12]
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	dbf0      	blt.n	800b9f0 <bufchar+0x10>
	return count;
 800ba0e:	683b      	ldr	r3, [r7, #0]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3714      	adds	r7, #20
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr
 800ba1c:	20000748 	.word	0x20000748

0800ba20 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800ba2a:	4a06      	ldr	r2, [pc, #24]	@ (800ba44 <MQTTPacket_decodeBuf+0x24>)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 800ba30:	6839      	ldr	r1, [r7, #0]
 800ba32:	4805      	ldr	r0, [pc, #20]	@ (800ba48 <MQTTPacket_decodeBuf+0x28>)
 800ba34:	f7ff ff6d 	bl	800b912 <MQTTPacket_decode>
 800ba38:	4603      	mov	r3, r0
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3708      	adds	r7, #8
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	20000748 	.word	0x20000748
 800ba48:	0800b9e1 	.word	0x0800b9e1

0800ba4c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	021b      	lsls	r3, r3, #8
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	3201      	adds	r2, #1
 800ba64:	7812      	ldrb	r2, [r2, #0]
 800ba66:	4413      	add	r3, r2
 800ba68:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	1c9a      	adds	r2, r3, #2
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	601a      	str	r2, [r3, #0]
	return len;
 800ba74:	68bb      	ldr	r3, [r7, #8]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3714      	adds	r7, #20
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr

0800ba82 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800ba82:	b480      	push	{r7}
 800ba84:	b085      	sub	sp, #20
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	1c5a      	adds	r2, r3, #1
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	601a      	str	r2, [r3, #0]
	return c;
 800ba9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3714      	adds	r7, #20
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr

0800baaa <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800baaa:	b480      	push	{r7}
 800baac:	b083      	sub	sp, #12
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	460b      	mov	r3, r1
 800bab4:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	78fa      	ldrb	r2, [r7, #3]
 800babc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	1c5a      	adds	r2, r3, #1
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	601a      	str	r2, [r3, #0]
}
 800bac8:	bf00      	nop
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	da00      	bge.n	800bae6 <writeInt+0x12>
 800bae4:	33ff      	adds	r3, #255	@ 0xff
 800bae6:	121b      	asrs	r3, r3, #8
 800bae8:	461a      	mov	r2, r3
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	b2d2      	uxtb	r2, r2
 800baf0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	1c5a      	adds	r2, r3, #1
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	425a      	negs	r2, r3
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	b2d2      	uxtb	r2, r2
 800bb04:	bf58      	it	pl
 800bb06:	4253      	negpl	r3, r2
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	6812      	ldr	r2, [r2, #0]
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	1c5a      	adds	r2, r3, #1
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	601a      	str	r2, [r3, #0]
}
 800bb1a:	bf00      	nop
 800bb1c:	370c      	adds	r7, #12
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr

0800bb26 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b084      	sub	sp, #16
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
 800bb2e:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 800bb30:	6838      	ldr	r0, [r7, #0]
 800bb32:	f7fc fbcd 	bl	80082d0 <strlen>
 800bb36:	4603      	mov	r3, r0
 800bb38:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800bb3a:	68f9      	ldr	r1, [r7, #12]
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f7ff ffc9 	bl	800bad4 <writeInt>
	memcpy(*pptr, string, len);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	6839      	ldr	r1, [r7, #0]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f00e f8db 	bl	8019d06 <memcpy>
	*pptr += len;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	441a      	add	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	601a      	str	r2, [r3, #0]
}
 800bb5c:	bf00      	nop
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	4638      	mov	r0, r7
 800bb6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	dd12      	ble.n	800bb9e <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	f7ff ffa9 	bl	800bad4 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	68b9      	ldr	r1, [r7, #8]
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f00e f8bb 	bl	8019d06 <memcpy>
		*pptr += mqttstring.lenstring.len;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	441a      	add	r2, r3
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800bb9c:	e00c      	b.n	800bbb8 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d005      	beq.n	800bbb0 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	4619      	mov	r1, r3
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f7ff ffbc 	bl	800bb26 <writeCString>
}
 800bbae:	e003      	b.n	800bbb8 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f7ff ff8e 	bl	800bad4 <writeInt>
}
 800bbb8:	bf00      	nop
 800bbba:	3710      	adds	r7, #16
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
	int rc = 0;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	dd1a      	ble.n	800bc12 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800bbdc:	68b8      	ldr	r0, [r7, #8]
 800bbde:	f7ff ff35 	bl	800ba4c <readInt>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	6852      	ldr	r2, [r2, #4]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d30c      	bcc.n	800bc12 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	6852      	ldr	r2, [r2, #4]
 800bc08:	441a      	add	r2, r3
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	601a      	str	r2, [r3, #0]
			rc = 1;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2200      	movs	r2, #0
 800bc16:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 800bc18:	697b      	ldr	r3, [r7, #20]
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3718      	adds	r7, #24
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b086      	sub	sp, #24
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	1d3b      	adds	r3, r7, #4
 800bc2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d006      	beq.n	800bc46 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7fc fb48 	bl	80082d0 <strlen>
 800bc40:	4603      	mov	r3, r0
 800bc42:	617b      	str	r3, [r7, #20]
 800bc44:	e001      	b.n	800bc4a <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	617b      	str	r3, [r7, #20]
	return rc;
 800bc4a:	697b      	ldr	r3, [r7, #20]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3718      	adds	r7, #24
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b086      	sub	sp, #24
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	4638      	mov	r0, r7
 800bc5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 800bc62:	2300      	movs	r3, #0
 800bc64:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800bc66:	463b      	mov	r3, r7
 800bc68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bc6c:	f7ff ffd9 	bl	800bc22 <MQTTstrlen>
 800bc70:	4603      	mov	r3, r0
 800bc72:	1c9a      	adds	r2, r3, #2
 800bc74:	6a3b      	ldr	r3, [r7, #32]
 800bc76:	4413      	add	r3, r2
 800bc78:	697a      	ldr	r2, [r7, #20]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	dd02      	ble.n	800bc8a <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	3302      	adds	r3, #2
 800bc88:	617b      	str	r3, [r7, #20]
	return len;
 800bc8a:	697b      	ldr	r3, [r7, #20]
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3718      	adds	r7, #24
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b08a      	sub	sp, #40	@ 0x28
 800bc98:	af02      	add	r7, sp, #8
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	603b      	str	r3, [r7, #0]
 800bca0:	4613      	mov	r3, r2
 800bca2:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 800bca8:	2300      	movs	r3, #0
 800bcaa:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800bcac:	2300      	movs	r3, #0
 800bcae:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800bcb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcb6:	9300      	str	r3, [sp, #0]
 800bcb8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bcbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bcbe:	6838      	ldr	r0, [r7, #0]
 800bcc0:	f7ff ffc8 	bl	800bc54 <MQTTSerialize_publishLength>
 800bcc4:	61b8      	str	r0, [r7, #24]
 800bcc6:	69b8      	ldr	r0, [r7, #24]
 800bcc8:	f7ff fe60 	bl	800b98c <MQTTPacket_len>
 800bccc:	4602      	mov	r2, r0
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	da03      	bge.n	800bcdc <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800bcd4:	f06f 0301 	mvn.w	r3, #1
 800bcd8:	61fb      	str	r3, [r7, #28]
		goto exit;
 800bcda:	e04c      	b.n	800bd76 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800bcdc:	7c3b      	ldrb	r3, [r7, #16]
 800bcde:	2203      	movs	r2, #3
 800bce0:	f362 1307 	bfi	r3, r2, #4, #4
 800bce4:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 800bce6:	79fb      	ldrb	r3, [r7, #7]
 800bce8:	f003 0301 	and.w	r3, r3, #1
 800bcec:	b2da      	uxtb	r2, r3
 800bcee:	7c3b      	ldrb	r3, [r7, #16]
 800bcf0:	f362 03c3 	bfi	r3, r2, #3, #1
 800bcf4:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	f003 0303 	and.w	r3, r3, #3
 800bcfc:	b2da      	uxtb	r2, r3
 800bcfe:	7c3b      	ldrb	r3, [r7, #16]
 800bd00:	f362 0342 	bfi	r3, r2, #1, #2
 800bd04:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 800bd06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bd0a:	f003 0301 	and.w	r3, r3, #1
 800bd0e:	b2da      	uxtb	r2, r3
 800bd10:	7c3b      	ldrb	r3, [r7, #16]
 800bd12:	f362 0300 	bfi	r3, r2, #0, #1
 800bd16:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800bd18:	7c3a      	ldrb	r2, [r7, #16]
 800bd1a:	f107 0314 	add.w	r3, r7, #20
 800bd1e:	4611      	mov	r1, r2
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7ff fec2 	bl	800baaa <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	69b9      	ldr	r1, [r7, #24]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7ff fdc2 	bl	800b8b4 <MQTTPacket_encode>
 800bd30:	4602      	mov	r2, r0
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	4413      	add	r3, r2
 800bd36:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800bd38:	f107 0014 	add.w	r0, r7, #20
 800bd3c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bd40:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd42:	f7ff ff0f 	bl	800bb64 <writeMQTTString>

	if (qos > 0)
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	dd06      	ble.n	800bd5a <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800bd4c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800bd4e:	f107 0314 	add.w	r3, r7, #20
 800bd52:	4611      	mov	r1, r2
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7ff febd 	bl	800bad4 <writeInt>

	memcpy(ptr, payload, payloadlen);
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bd60:	4618      	mov	r0, r3
 800bd62:	f00d ffd0 	bl	8019d06 <memcpy>
	ptr += payloadlen;
 800bd66:	697a      	ldr	r2, [r7, #20]
 800bd68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd6a:	4413      	add	r3, r2
 800bd6c:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 800bd6e:	697a      	ldr	r2, [r7, #20]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	1ad3      	subs	r3, r2, r3
 800bd74:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800bd76:	69fb      	ldr	r3, [r7, #28]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3720      	adds	r7, #32
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <SIM800_MQTT_StateMachineHandler>:

mqtt_state_t mqttState = MQTT_STATE_INIT;
int mqttError = 0;

void SIM800_MQTT_StateMachineHandler(void)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b0ba      	sub	sp, #232	@ 0xe8
 800bd84:	af02      	add	r7, sp, #8
	char str[128] = {0};
 800bd86:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800bd8a:	2280      	movs	r2, #128	@ 0x80
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f00d fee6 	bl	8019b60 <memset>
	static uint8_t tcp_wait_counter = 0;

	switch(mqttState)
 800bd94:	4b97      	ldr	r3, [pc, #604]	@ (800bff4 <SIM800_MQTT_StateMachineHandler+0x274>)
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	2b0a      	cmp	r3, #10
 800bd9a:	f200 8127 	bhi.w	800bfec <SIM800_MQTT_StateMachineHandler+0x26c>
 800bd9e:	a201      	add	r2, pc, #4	@ (adr r2, 800bda4 <SIM800_MQTT_StateMachineHandler+0x24>)
 800bda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda4:	0800bdd1 	.word	0x0800bdd1
 800bda8:	0800be2b 	.word	0x0800be2b
 800bdac:	0800be63 	.word	0x0800be63
 800bdb0:	0800bea5 	.word	0x0800bea5
 800bdb4:	0800bec5 	.word	0x0800bec5
 800bdb8:	0800bed9 	.word	0x0800bed9
 800bdbc:	0800bf23 	.word	0x0800bf23
 800bdc0:	0800bf65 	.word	0x0800bf65
 800bdc4:	0800bfc9 	.word	0x0800bfc9
 800bdc8:	0800bfeb 	.word	0x0800bfeb
 800bdcc:	0800bfd7 	.word	0x0800bfd7
	{
		case MQTT_STATE_INIT:
			HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	4989      	ldr	r1, [pc, #548]	@ (800bff8 <SIM800_MQTT_StateMachineHandler+0x278>)
 800bdd4:	4889      	ldr	r0, [pc, #548]	@ (800bffc <SIM800_MQTT_StateMachineHandler+0x27c>)
 800bdd6:	f008 f886 	bl	8013ee6 <HAL_UART_Receive_IT>
			mqttError = SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY);
 800bdda:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800bdde:	4988      	ldr	r1, [pc, #544]	@ (800c000 <SIM800_MQTT_StateMachineHandler+0x280>)
 800bde0:	4888      	ldr	r0, [pc, #544]	@ (800c004 <SIM800_MQTT_StateMachineHandler+0x284>)
 800bde2:	f000 fa31 	bl	800c248 <SIM800_SendCommand>
 800bde6:	4603      	mov	r3, r0
 800bde8:	4a87      	ldr	r2, [pc, #540]	@ (800c008 <SIM800_MQTT_StateMachineHandler+0x288>)
 800bdea:	6013      	str	r3, [r2, #0]
			mqttError += SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY);
 800bdec:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800bdf0:	4983      	ldr	r1, [pc, #524]	@ (800c000 <SIM800_MQTT_StateMachineHandler+0x280>)
 800bdf2:	4886      	ldr	r0, [pc, #536]	@ (800c00c <SIM800_MQTT_StateMachineHandler+0x28c>)
 800bdf4:	f000 fa28 	bl	800c248 <SIM800_SendCommand>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	4b83      	ldr	r3, [pc, #524]	@ (800c008 <SIM800_MQTT_StateMachineHandler+0x288>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4413      	add	r3, r2
 800be00:	4a81      	ldr	r2, [pc, #516]	@ (800c008 <SIM800_MQTT_StateMachineHandler+0x288>)
 800be02:	6013      	str	r3, [r2, #0]
			mqttError += SIM800_SendCommand("AT+CIPSHUT\r\n", "SHUT OK\r\n", CMD_DELAY);
 800be04:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800be08:	4981      	ldr	r1, [pc, #516]	@ (800c010 <SIM800_MQTT_StateMachineHandler+0x290>)
 800be0a:	4882      	ldr	r0, [pc, #520]	@ (800c014 <SIM800_MQTT_StateMachineHandler+0x294>)
 800be0c:	f000 fa1c 	bl	800c248 <SIM800_SendCommand>
 800be10:	4602      	mov	r2, r0
 800be12:	4b7d      	ldr	r3, [pc, #500]	@ (800c008 <SIM800_MQTT_StateMachineHandler+0x288>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4413      	add	r3, r2
 800be18:	4a7b      	ldr	r2, [pc, #492]	@ (800c008 <SIM800_MQTT_StateMachineHandler+0x288>)
 800be1a:	6013      	str	r3, [r2, #0]
			safe_printf("SIM800 Init Done\r\n");
 800be1c:	487e      	ldr	r0, [pc, #504]	@ (800c018 <SIM800_MQTT_StateMachineHandler+0x298>)
 800be1e:	f7ff fb4b 	bl	800b4b8 <safe_printf>
			mqttState = MQTT_STATE_CGATT_ATTACH;
 800be22:	4b74      	ldr	r3, [pc, #464]	@ (800bff4 <SIM800_MQTT_StateMachineHandler+0x274>)
 800be24:	2201      	movs	r2, #1
 800be26:	701a      	strb	r2, [r3, #0]
			break;
 800be28:	e0e0      	b.n	800bfec <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_CGATT_ATTACH:
			mqttError += SIM800_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
 800be2a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800be2e:	4974      	ldr	r1, [pc, #464]	@ (800c000 <SIM800_MQTT_StateMachineHandler+0x280>)
 800be30:	487a      	ldr	r0, [pc, #488]	@ (800c01c <SIM800_MQTT_StateMachineHandler+0x29c>)
 800be32:	f000 fa09 	bl	800c248 <SIM800_SendCommand>
 800be36:	4602      	mov	r2, r0
 800be38:	4b73      	ldr	r3, [pc, #460]	@ (800c008 <SIM800_MQTT_StateMachineHandler+0x288>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4413      	add	r3, r2
 800be3e:	4a72      	ldr	r2, [pc, #456]	@ (800c008 <SIM800_MQTT_StateMachineHandler+0x288>)
 800be40:	6013      	str	r3, [r2, #0]
			mqttError += SIM800_SendCommand("AT+CIPMODE=1\r\n", "OK\r\n", CMD_DELAY);
 800be42:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800be46:	496e      	ldr	r1, [pc, #440]	@ (800c000 <SIM800_MQTT_StateMachineHandler+0x280>)
 800be48:	4875      	ldr	r0, [pc, #468]	@ (800c020 <SIM800_MQTT_StateMachineHandler+0x2a0>)
 800be4a:	f000 f9fd 	bl	800c248 <SIM800_SendCommand>
 800be4e:	4602      	mov	r2, r0
 800be50:	4b6d      	ldr	r3, [pc, #436]	@ (800c008 <SIM800_MQTT_StateMachineHandler+0x288>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4413      	add	r3, r2
 800be56:	4a6c      	ldr	r2, [pc, #432]	@ (800c008 <SIM800_MQTT_StateMachineHandler+0x288>)
 800be58:	6013      	str	r3, [r2, #0]
			mqttState = MQTT_STATE_APN_CONFIG;
 800be5a:	4b66      	ldr	r3, [pc, #408]	@ (800bff4 <SIM800_MQTT_StateMachineHandler+0x274>)
 800be5c:	2202      	movs	r2, #2
 800be5e:	701a      	strb	r2, [r3, #0]
			break;
 800be60:	e0c4      	b.n	800bfec <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_APN_CONFIG:
			snprintf(str, sizeof(str), "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n",
 800be62:	4b70      	ldr	r3, [pc, #448]	@ (800c024 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800be64:	6819      	ldr	r1, [r3, #0]
 800be66:	4b6f      	ldr	r3, [pc, #444]	@ (800c024 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	4a6e      	ldr	r2, [pc, #440]	@ (800c024 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800be6c:	6892      	ldr	r2, [r2, #8]
 800be6e:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800be72:	9201      	str	r2, [sp, #4]
 800be74:	9300      	str	r3, [sp, #0]
 800be76:	460b      	mov	r3, r1
 800be78:	4a6b      	ldr	r2, [pc, #428]	@ (800c028 <SIM800_MQTT_StateMachineHandler+0x2a8>)
 800be7a:	2180      	movs	r1, #128	@ 0x80
 800be7c:	f00d fcd6 	bl	801982c <sniprintf>
					 SIM800.sim.apn, SIM800.sim.apn_user, SIM800.sim.apn_pass);
			mqttError += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 800be80:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800be84:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800be88:	495d      	ldr	r1, [pc, #372]	@ (800c000 <SIM800_MQTT_StateMachineHandler+0x280>)
 800be8a:	4618      	mov	r0, r3
 800be8c:	f000 f9dc 	bl	800c248 <SIM800_SendCommand>
 800be90:	4602      	mov	r2, r0
 800be92:	4b5d      	ldr	r3, [pc, #372]	@ (800c008 <SIM800_MQTT_StateMachineHandler+0x288>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4413      	add	r3, r2
 800be98:	4a5b      	ldr	r2, [pc, #364]	@ (800c008 <SIM800_MQTT_StateMachineHandler+0x288>)
 800be9a:	6013      	str	r3, [r2, #0]
			mqttState = MQTT_STATE_CIICR_BRINGUP;
 800be9c:	4b55      	ldr	r3, [pc, #340]	@ (800bff4 <SIM800_MQTT_StateMachineHandler+0x274>)
 800be9e:	2203      	movs	r2, #3
 800bea0:	701a      	strb	r2, [r3, #0]
			break;
 800bea2:	e0a3      	b.n	800bfec <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_CIICR_BRINGUP:
			mqttError += SIM800_SendCommand("AT+CIICR\r\n", "OK\r\n", CMD_DELAY);
 800bea4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800bea8:	4955      	ldr	r1, [pc, #340]	@ (800c000 <SIM800_MQTT_StateMachineHandler+0x280>)
 800beaa:	4860      	ldr	r0, [pc, #384]	@ (800c02c <SIM800_MQTT_StateMachineHandler+0x2ac>)
 800beac:	f000 f9cc 	bl	800c248 <SIM800_SendCommand>
 800beb0:	4602      	mov	r2, r0
 800beb2:	4b55      	ldr	r3, [pc, #340]	@ (800c008 <SIM800_MQTT_StateMachineHandler+0x288>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4413      	add	r3, r2
 800beb8:	4a53      	ldr	r2, [pc, #332]	@ (800c008 <SIM800_MQTT_StateMachineHandler+0x288>)
 800beba:	6013      	str	r3, [r2, #0]
			mqttState = MQTT_STATE_GET_IP;
 800bebc:	4b4d      	ldr	r3, [pc, #308]	@ (800bff4 <SIM800_MQTT_StateMachineHandler+0x274>)
 800bebe:	2204      	movs	r2, #4
 800bec0:	701a      	strb	r2, [r3, #0]
			break;
 800bec2:	e093      	b.n	800bfec <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_GET_IP:
			SIM800_SendCommand("AT+CIFSR\r\n", "", CMD_DELAY);
 800bec4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800bec8:	4959      	ldr	r1, [pc, #356]	@ (800c030 <SIM800_MQTT_StateMachineHandler+0x2b0>)
 800beca:	485a      	ldr	r0, [pc, #360]	@ (800c034 <SIM800_MQTT_StateMachineHandler+0x2b4>)
 800becc:	f000 f9bc 	bl	800c248 <SIM800_SendCommand>
			mqttState = MQTT_STATE_TCP_CONNECT;
 800bed0:	4b48      	ldr	r3, [pc, #288]	@ (800bff4 <SIM800_MQTT_StateMachineHandler+0x274>)
 800bed2:	2205      	movs	r2, #5
 800bed4:	701a      	strb	r2, [r3, #0]
			break;
 800bed6:	e089      	b.n	800bfec <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_TCP_CONNECT:
			sprintf(str, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", SIM800.mqttServer.host, SIM800.mqttServer.port);
 800bed8:	4b52      	ldr	r3, [pc, #328]	@ (800c024 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800beda:	68da      	ldr	r2, [r3, #12]
 800bedc:	4b51      	ldr	r3, [pc, #324]	@ (800c024 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800bede:	8a1b      	ldrh	r3, [r3, #16]
 800bee0:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800bee4:	4954      	ldr	r1, [pc, #336]	@ (800c038 <SIM800_MQTT_StateMachineHandler+0x2b8>)
 800bee6:	f00d fcd7 	bl	8019898 <siprintf>
			safe_printf("Connecting TCP: %s\r\n", str);
 800beea:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800beee:	4619      	mov	r1, r3
 800bef0:	4852      	ldr	r0, [pc, #328]	@ (800c03c <SIM800_MQTT_StateMachineHandler+0x2bc>)
 800bef2:	f7ff fae1 	bl	800b4b8 <safe_printf>
			if (SIM800_SendCommand(str, "OK\r\n", CMD_DELAY) == 0)
 800bef6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800befa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800befe:	4940      	ldr	r1, [pc, #256]	@ (800c000 <SIM800_MQTT_StateMachineHandler+0x280>)
 800bf00:	4618      	mov	r0, r3
 800bf02:	f000 f9a1 	bl	800c248 <SIM800_SendCommand>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d106      	bne.n	800bf1a <SIM800_MQTT_StateMachineHandler+0x19a>
			{
				tcp_wait_counter = 0;
 800bf0c:	4b4c      	ldr	r3, [pc, #304]	@ (800c040 <SIM800_MQTT_StateMachineHandler+0x2c0>)
 800bf0e:	2200      	movs	r2, #0
 800bf10:	701a      	strb	r2, [r3, #0]
				mqttState = MQTT_STATE_WAIT_TCP_RESPONSE;
 800bf12:	4b38      	ldr	r3, [pc, #224]	@ (800bff4 <SIM800_MQTT_StateMachineHandler+0x274>)
 800bf14:	2206      	movs	r2, #6
 800bf16:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				mqttState = MQTT_STATE_RECONNECT;
			}
			break;
 800bf18:	e068      	b.n	800bfec <SIM800_MQTT_StateMachineHandler+0x26c>
				mqttState = MQTT_STATE_RECONNECT;
 800bf1a:	4b36      	ldr	r3, [pc, #216]	@ (800bff4 <SIM800_MQTT_StateMachineHandler+0x274>)
 800bf1c:	220a      	movs	r2, #10
 800bf1e:	701a      	strb	r2, [r3, #0]
			break;
 800bf20:	e064      	b.n	800bfec <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_WAIT_TCP_RESPONSE:
			// Wait until SIM800.mqttServer.connect becomes 1 from RX callback
			if (SIM800.mqttServer.connect == 1)
 800bf22:	4b40      	ldr	r3, [pc, #256]	@ (800c024 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800bf24:	7c9b      	ldrb	r3, [r3, #18]
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d106      	bne.n	800bf38 <SIM800_MQTT_StateMachineHandler+0x1b8>
			{
				safe_printf("TCP connected to MQTT broker\r\n");
 800bf2a:	4846      	ldr	r0, [pc, #280]	@ (800c044 <SIM800_MQTT_StateMachineHandler+0x2c4>)
 800bf2c:	f7ff fac4 	bl	800b4b8 <safe_printf>
				mqttState = MQTT_STATE_MQTT_CONNECT;
 800bf30:	4b30      	ldr	r3, [pc, #192]	@ (800bff4 <SIM800_MQTT_StateMachineHandler+0x274>)
 800bf32:	2207      	movs	r2, #7
 800bf34:	701a      	strb	r2, [r3, #0]
				vTaskDelay(pdMS_TO_TICKS(1000));
	#else
				HAL_Delay(1000);
	#endif
			}
			break;
 800bf36:	e059      	b.n	800bfec <SIM800_MQTT_StateMachineHandler+0x26c>
			else if (++tcp_wait_counter > 5)
 800bf38:	4b41      	ldr	r3, [pc, #260]	@ (800c040 <SIM800_MQTT_StateMachineHandler+0x2c0>)
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	b2da      	uxtb	r2, r3
 800bf40:	4b3f      	ldr	r3, [pc, #252]	@ (800c040 <SIM800_MQTT_StateMachineHandler+0x2c0>)
 800bf42:	701a      	strb	r2, [r3, #0]
 800bf44:	4b3e      	ldr	r3, [pc, #248]	@ (800c040 <SIM800_MQTT_StateMachineHandler+0x2c0>)
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	2b05      	cmp	r3, #5
 800bf4a:	d906      	bls.n	800bf5a <SIM800_MQTT_StateMachineHandler+0x1da>
				safe_printf("MQTT TCP connect timeout\r\n");
 800bf4c:	483e      	ldr	r0, [pc, #248]	@ (800c048 <SIM800_MQTT_StateMachineHandler+0x2c8>)
 800bf4e:	f7ff fab3 	bl	800b4b8 <safe_printf>
				mqttState = MQTT_STATE_RECONNECT;
 800bf52:	4b28      	ldr	r3, [pc, #160]	@ (800bff4 <SIM800_MQTT_StateMachineHandler+0x274>)
 800bf54:	220a      	movs	r2, #10
 800bf56:	701a      	strb	r2, [r3, #0]
			break;
 800bf58:	e048      	b.n	800bfec <SIM800_MQTT_StateMachineHandler+0x26c>
				vTaskDelay(pdMS_TO_TICKS(1000));
 800bf5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800bf5e:	f009 ff97 	bl	8015e90 <vTaskDelay>
			break;
 800bf62:	e043      	b.n	800bfec <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_MQTT_CONNECT:
		{
			MQTTPacket_connectData datas = MQTTPacket_connectData_initializer;
 800bf64:	4a39      	ldr	r2, [pc, #228]	@ (800c04c <SIM800_MQTT_StateMachineHandler+0x2cc>)
 800bf66:	1d3b      	adds	r3, r7, #4
 800bf68:	4611      	mov	r1, r2
 800bf6a:	2258      	movs	r2, #88	@ 0x58
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f00d feca 	bl	8019d06 <memcpy>
			datas.username.cstring = SIM800.mqttClient.username;
 800bf72:	4b2c      	ldr	r3, [pc, #176]	@ (800c024 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800bf74:	695b      	ldr	r3, [r3, #20]
 800bf76:	647b      	str	r3, [r7, #68]	@ 0x44
			datas.password.cstring = SIM800.mqttClient.pass;
 800bf78:	4b2a      	ldr	r3, [pc, #168]	@ (800c024 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800bf7a:	699b      	ldr	r3, [r3, #24]
 800bf7c:	653b      	str	r3, [r7, #80]	@ 0x50
			datas.clientID.cstring = SIM800.mqttClient.clientID;
 800bf7e:	4b29      	ldr	r3, [pc, #164]	@ (800c024 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800bf80:	69db      	ldr	r3, [r3, #28]
 800bf82:	613b      	str	r3, [r7, #16]
			datas.keepAliveInterval = SIM800.mqttClient.keepAliveInterval;
 800bf84:	4b27      	ldr	r3, [pc, #156]	@ (800c024 <SIM800_MQTT_StateMachineHandler+0x2a4>)
 800bf86:	8c1b      	ldrh	r3, [r3, #32]
 800bf88:	83bb      	strh	r3, [r7, #28]
			datas.cleansession = 1;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	77bb      	strb	r3, [r7, #30]

			int mqtt_len = MQTTSerialize_connect((unsigned char *)str, sizeof(str), &datas);
 800bf8e:	1d3a      	adds	r2, r7, #4
 800bf90:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800bf94:	2180      	movs	r1, #128	@ 0x80
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7ff fb2e 	bl	800b5f8 <MQTTSerialize_connect>
 800bf9c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
			HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)str, mqtt_len);
 800bfa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800bfaa:	4619      	mov	r1, r3
 800bfac:	4813      	ldr	r0, [pc, #76]	@ (800bffc <SIM800_MQTT_StateMachineHandler+0x27c>)
 800bfae:	f007 ff64 	bl	8013e7a <HAL_UART_Transmit_IT>
			safe_printf("MQTT CONNECT sent\r\n");
 800bfb2:	4827      	ldr	r0, [pc, #156]	@ (800c050 <SIM800_MQTT_StateMachineHandler+0x2d0>)
 800bfb4:	f7ff fa80 	bl	800b4b8 <safe_printf>

	#if FREERTOS == 1
			vTaskDelay(pdMS_TO_TICKS(2000));
 800bfb8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800bfbc:	f009 ff68 	bl	8015e90 <vTaskDelay>
	#else
			HAL_Delay(2000);
	#endif
			mqttState = MQTT_STATE_MQTT_CONNECTED;
 800bfc0:	4b0c      	ldr	r3, [pc, #48]	@ (800bff4 <SIM800_MQTT_StateMachineHandler+0x274>)
 800bfc2:	2208      	movs	r2, #8
 800bfc4:	701a      	strb	r2, [r3, #0]
			break;
 800bfc6:	e011      	b.n	800bfec <SIM800_MQTT_StateMachineHandler+0x26c>
		}

		case MQTT_STATE_MQTT_CONNECTED:
			safe_printf("MQTT connected and ready.\r\n");
 800bfc8:	4822      	ldr	r0, [pc, #136]	@ (800c054 <SIM800_MQTT_StateMachineHandler+0x2d4>)
 800bfca:	f7ff fa75 	bl	800b4b8 <safe_printf>
			mqttState = MQTT_STATE_IDLE;
 800bfce:	4b09      	ldr	r3, [pc, #36]	@ (800bff4 <SIM800_MQTT_StateMachineHandler+0x274>)
 800bfd0:	2209      	movs	r2, #9
 800bfd2:	701a      	strb	r2, [r3, #0]
			break;
 800bfd4:	e00a      	b.n	800bfec <SIM800_MQTT_StateMachineHandler+0x26c>

		case MQTT_STATE_IDLE:
			break;

		case MQTT_STATE_RECONNECT:
			safe_printf("Reconnecting...\r\n");
 800bfd6:	4820      	ldr	r0, [pc, #128]	@ (800c058 <SIM800_MQTT_StateMachineHandler+0x2d8>)
 800bfd8:	f7ff fa6e 	bl	800b4b8 <safe_printf>
			mqttError = 0;
 800bfdc:	4b0a      	ldr	r3, [pc, #40]	@ (800c008 <SIM800_MQTT_StateMachineHandler+0x288>)
 800bfde:	2200      	movs	r2, #0
 800bfe0:	601a      	str	r2, [r3, #0]
			mqttState = MQTT_STATE_INIT;
 800bfe2:	4b04      	ldr	r3, [pc, #16]	@ (800bff4 <SIM800_MQTT_StateMachineHandler+0x274>)
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	701a      	strb	r2, [r3, #0]
			break;
 800bfe8:	e000      	b.n	800bfec <SIM800_MQTT_StateMachineHandler+0x26c>
			break;
 800bfea:	bf00      	nop
	}
}
 800bfec:	bf00      	nop
 800bfee:	37e0      	adds	r7, #224	@ 0xe0
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	200012be 	.word	0x200012be
 800bff8:	2000074c 	.word	0x2000074c
 800bffc:	20001434 	.word	0x20001434
 800c000:	0801d284 	.word	0x0801d284
 800c004:	0801d28c 	.word	0x0801d28c
 800c008:	200012c0 	.word	0x200012c0
 800c00c:	0801d294 	.word	0x0801d294
 800c010:	0801d29c 	.word	0x0801d29c
 800c014:	0801d2a8 	.word	0x0801d2a8
 800c018:	0801d2b8 	.word	0x0801d2b8
 800c01c:	0801d2cc 	.word	0x0801d2cc
 800c020:	0801d2dc 	.word	0x0801d2dc
 800c024:	2000057c 	.word	0x2000057c
 800c028:	0801d2ec 	.word	0x0801d2ec
 800c02c:	0801d308 	.word	0x0801d308
 800c030:	0801d314 	.word	0x0801d314
 800c034:	0801d318 	.word	0x0801d318
 800c038:	0801d324 	.word	0x0801d324
 800c03c:	0801d340 	.word	0x0801d340
 800c040:	200012c4 	.word	0x200012c4
 800c044:	0801d358 	.word	0x0801d358
 800c048:	0801d378 	.word	0x0801d378
 800c04c:	0801d3d8 	.word	0x0801d3d8
 800c050:	0801d394 	.word	0x0801d394
 800c054:	0801d3a8 	.word	0x0801d3a8
 800c058:	0801d3c4 	.word	0x0801d3c4

0800c05c <Sim800_RxCallBack>:
 * Call back function for release read SIM800 UART buffer.
 * @param NONE
 * @return NONE
 */
void Sim800_RxCallBack(void)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	af00      	add	r7, sp, #0
    rx_buffer[rx_index++] = rx_data;
 800c060:	4b56      	ldr	r3, [pc, #344]	@ (800c1bc <Sim800_RxCallBack+0x160>)
 800c062:	881b      	ldrh	r3, [r3, #0]
 800c064:	1c5a      	adds	r2, r3, #1
 800c066:	b291      	uxth	r1, r2
 800c068:	4a54      	ldr	r2, [pc, #336]	@ (800c1bc <Sim800_RxCallBack+0x160>)
 800c06a:	8011      	strh	r1, [r2, #0]
 800c06c:	461a      	mov	r2, r3
 800c06e:	4b54      	ldr	r3, [pc, #336]	@ (800c1c0 <Sim800_RxCallBack+0x164>)
 800c070:	7819      	ldrb	r1, [r3, #0]
 800c072:	4b54      	ldr	r3, [pc, #336]	@ (800c1c4 <Sim800_RxCallBack+0x168>)
 800c074:	5499      	strb	r1, [r3, r2]
    if (rx_data == 0xD0 && pingreq_sent == 1)
 800c076:	4b52      	ldr	r3, [pc, #328]	@ (800c1c0 <Sim800_RxCallBack+0x164>)
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	2bd0      	cmp	r3, #208	@ 0xd0
 800c07c:	d106      	bne.n	800c08c <Sim800_RxCallBack+0x30>
 800c07e:	4b52      	ldr	r3, [pc, #328]	@ (800c1c8 <Sim800_RxCallBack+0x16c>)
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	2b01      	cmp	r3, #1
 800c084:	d102      	bne.n	800c08c <Sim800_RxCallBack+0x30>
    {
        pingreq_sent = 0;
 800c086:	4b50      	ldr	r3, [pc, #320]	@ (800c1c8 <Sim800_RxCallBack+0x16c>)
 800c088:	2200      	movs	r2, #0
 800c08a:	701a      	strb	r2, [r3, #0]
    }

    if (SIM800.mqttServer.connect == 0)
 800c08c:	4b4f      	ldr	r3, [pc, #316]	@ (800c1cc <Sim800_RxCallBack+0x170>)
 800c08e:	7c9b      	ldrb	r3, [r3, #18]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d135      	bne.n	800c100 <Sim800_RxCallBack+0xa4>
    {
        if (strstr((char *)rx_buffer, "\r\n") != NULL && rx_index == 2)
 800c094:	494e      	ldr	r1, [pc, #312]	@ (800c1d0 <Sim800_RxCallBack+0x174>)
 800c096:	484b      	ldr	r0, [pc, #300]	@ (800c1c4 <Sim800_RxCallBack+0x168>)
 800c098:	f00d fd8f 	bl	8019bba <strstr>
 800c09c:	4603      	mov	r3, r0
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d007      	beq.n	800c0b2 <Sim800_RxCallBack+0x56>
 800c0a2:	4b46      	ldr	r3, [pc, #280]	@ (800c1bc <Sim800_RxCallBack+0x160>)
 800c0a4:	881b      	ldrh	r3, [r3, #0]
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	d103      	bne.n	800c0b2 <Sim800_RxCallBack+0x56>
        {
            rx_index = 0;
 800c0aa:	4b44      	ldr	r3, [pc, #272]	@ (800c1bc <Sim800_RxCallBack+0x160>)
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	801a      	strh	r2, [r3, #0]
 800c0b0:	e026      	b.n	800c100 <Sim800_RxCallBack+0xa4>
        }
        else if (strstr((char *)rx_buffer, "\r\n") != NULL)
 800c0b2:	4947      	ldr	r1, [pc, #284]	@ (800c1d0 <Sim800_RxCallBack+0x174>)
 800c0b4:	4843      	ldr	r0, [pc, #268]	@ (800c1c4 <Sim800_RxCallBack+0x168>)
 800c0b6:	f00d fd80 	bl	8019bba <strstr>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d01f      	beq.n	800c100 <Sim800_RxCallBack+0xa4>
        {
            memcpy(mqtt_buffer, rx_buffer, sizeof(rx_buffer));
 800c0c0:	4a44      	ldr	r2, [pc, #272]	@ (800c1d4 <Sim800_RxCallBack+0x178>)
 800c0c2:	4b40      	ldr	r3, [pc, #256]	@ (800c1c4 <Sim800_RxCallBack+0x168>)
 800c0c4:	4610      	mov	r0, r2
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	f00d fe1a 	bl	8019d06 <memcpy>
            clearRxBuffer();
 800c0d2:	f000 f891 	bl	800c1f8 <clearRxBuffer>
            if (strstr(mqtt_buffer, "DY CONNECT\r\n"))
 800c0d6:	4940      	ldr	r1, [pc, #256]	@ (800c1d8 <Sim800_RxCallBack+0x17c>)
 800c0d8:	483e      	ldr	r0, [pc, #248]	@ (800c1d4 <Sim800_RxCallBack+0x178>)
 800c0da:	f00d fd6e 	bl	8019bba <strstr>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d003      	beq.n	800c0ec <Sim800_RxCallBack+0x90>
            {
                SIM800.mqttServer.connect = 0;
 800c0e4:	4b39      	ldr	r3, [pc, #228]	@ (800c1cc <Sim800_RxCallBack+0x170>)
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	749a      	strb	r2, [r3, #18]
 800c0ea:	e009      	b.n	800c100 <Sim800_RxCallBack+0xa4>
            }
            else if (strstr(mqtt_buffer, "CONNECT\r\n"))
 800c0ec:	493b      	ldr	r1, [pc, #236]	@ (800c1dc <Sim800_RxCallBack+0x180>)
 800c0ee:	4839      	ldr	r0, [pc, #228]	@ (800c1d4 <Sim800_RxCallBack+0x178>)
 800c0f0:	f00d fd63 	bl	8019bba <strstr>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d002      	beq.n	800c100 <Sim800_RxCallBack+0xa4>
            {
                SIM800.mqttServer.connect = 1;
 800c0fa:	4b34      	ldr	r3, [pc, #208]	@ (800c1cc <Sim800_RxCallBack+0x170>)
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	749a      	strb	r2, [r3, #18]
            }
        }
    }
    if (strstr((char *)rx_buffer, "CLOSED\r\n") || strstr((char *)rx_buffer, "ERROR\r\n") || strstr((char *)rx_buffer, "DEACT\r\n"))
 800c100:	4937      	ldr	r1, [pc, #220]	@ (800c1e0 <Sim800_RxCallBack+0x184>)
 800c102:	4830      	ldr	r0, [pc, #192]	@ (800c1c4 <Sim800_RxCallBack+0x168>)
 800c104:	f00d fd59 	bl	8019bba <strstr>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d10d      	bne.n	800c12a <Sim800_RxCallBack+0xce>
 800c10e:	4935      	ldr	r1, [pc, #212]	@ (800c1e4 <Sim800_RxCallBack+0x188>)
 800c110:	482c      	ldr	r0, [pc, #176]	@ (800c1c4 <Sim800_RxCallBack+0x168>)
 800c112:	f00d fd52 	bl	8019bba <strstr>
 800c116:	4603      	mov	r3, r0
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d106      	bne.n	800c12a <Sim800_RxCallBack+0xce>
 800c11c:	4932      	ldr	r1, [pc, #200]	@ (800c1e8 <Sim800_RxCallBack+0x18c>)
 800c11e:	4829      	ldr	r0, [pc, #164]	@ (800c1c4 <Sim800_RxCallBack+0x168>)
 800c120:	f00d fd4b 	bl	8019bba <strstr>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d002      	beq.n	800c130 <Sim800_RxCallBack+0xd4>
    {
        SIM800.mqttServer.connect = 0;
 800c12a:	4b28      	ldr	r3, [pc, #160]	@ (800c1cc <Sim800_RxCallBack+0x170>)
 800c12c:	2200      	movs	r2, #0
 800c12e:	749a      	strb	r2, [r3, #18]
    }
    if (SIM800.mqttServer.connect == 1 && rx_data == 48)
 800c130:	4b26      	ldr	r3, [pc, #152]	@ (800c1cc <Sim800_RxCallBack+0x170>)
 800c132:	7c9b      	ldrb	r3, [r3, #18]
 800c134:	2b01      	cmp	r3, #1
 800c136:	d106      	bne.n	800c146 <Sim800_RxCallBack+0xea>
 800c138:	4b21      	ldr	r3, [pc, #132]	@ (800c1c0 <Sim800_RxCallBack+0x164>)
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	2b30      	cmp	r3, #48	@ 0x30
 800c13e:	d102      	bne.n	800c146 <Sim800_RxCallBack+0xea>
    {
        mqtt_receive = 1;
 800c140:	4b2a      	ldr	r3, [pc, #168]	@ (800c1ec <Sim800_RxCallBack+0x190>)
 800c142:	2201      	movs	r2, #1
 800c144:	701a      	strb	r2, [r3, #0]
    }
    if (mqtt_receive == 1)
 800c146:	4b29      	ldr	r3, [pc, #164]	@ (800c1ec <Sim800_RxCallBack+0x190>)
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d124      	bne.n	800c198 <Sim800_RxCallBack+0x13c>
    {
        mqtt_buffer[mqtt_index++] = rx_data;
 800c14e:	4b28      	ldr	r3, [pc, #160]	@ (800c1f0 <Sim800_RxCallBack+0x194>)
 800c150:	881b      	ldrh	r3, [r3, #0]
 800c152:	1c5a      	adds	r2, r3, #1
 800c154:	b291      	uxth	r1, r2
 800c156:	4a26      	ldr	r2, [pc, #152]	@ (800c1f0 <Sim800_RxCallBack+0x194>)
 800c158:	8011      	strh	r1, [r2, #0]
 800c15a:	461a      	mov	r2, r3
 800c15c:	4b18      	ldr	r3, [pc, #96]	@ (800c1c0 <Sim800_RxCallBack+0x164>)
 800c15e:	7819      	ldrb	r1, [r3, #0]
 800c160:	4b1c      	ldr	r3, [pc, #112]	@ (800c1d4 <Sim800_RxCallBack+0x178>)
 800c162:	5499      	strb	r1, [r3, r2]
        if (mqtt_index > 1 && mqtt_index - 1 > mqtt_buffer[1])
 800c164:	4b22      	ldr	r3, [pc, #136]	@ (800c1f0 <Sim800_RxCallBack+0x194>)
 800c166:	881b      	ldrh	r3, [r3, #0]
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d90d      	bls.n	800c188 <Sim800_RxCallBack+0x12c>
 800c16c:	4b20      	ldr	r3, [pc, #128]	@ (800c1f0 <Sim800_RxCallBack+0x194>)
 800c16e:	881b      	ldrh	r3, [r3, #0]
 800c170:	3b01      	subs	r3, #1
 800c172:	4a18      	ldr	r2, [pc, #96]	@ (800c1d4 <Sim800_RxCallBack+0x178>)
 800c174:	7852      	ldrb	r2, [r2, #1]
 800c176:	4293      	cmp	r3, r2
 800c178:	dd06      	ble.n	800c188 <Sim800_RxCallBack+0x12c>
        {
            MQTT_Receive((unsigned char *)mqtt_buffer);
 800c17a:	4816      	ldr	r0, [pc, #88]	@ (800c1d4 <Sim800_RxCallBack+0x178>)
 800c17c:	f000 f95c 	bl	800c438 <MQTT_Receive>
            clearRxBuffer();
 800c180:	f000 f83a 	bl	800c1f8 <clearRxBuffer>
            clearMqttBuffer();
 800c184:	f000 f84a 	bl	800c21c <clearMqttBuffer>
        }
        if (mqtt_index >= sizeof(mqtt_buffer))
 800c188:	4b19      	ldr	r3, [pc, #100]	@ (800c1f0 <Sim800_RxCallBack+0x194>)
 800c18a:	881b      	ldrh	r3, [r3, #0]
 800c18c:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800c190:	4293      	cmp	r3, r2
 800c192:	d901      	bls.n	800c198 <Sim800_RxCallBack+0x13c>
        {
            clearMqttBuffer();
 800c194:	f000 f842 	bl	800c21c <clearMqttBuffer>
        }
    }
    if (rx_index >= sizeof(mqtt_buffer))
 800c198:	4b08      	ldr	r3, [pc, #32]	@ (800c1bc <Sim800_RxCallBack+0x160>)
 800c19a:	881b      	ldrh	r3, [r3, #0]
 800c19c:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d903      	bls.n	800c1ac <Sim800_RxCallBack+0x150>
    {
        clearRxBuffer();
 800c1a4:	f000 f828 	bl	800c1f8 <clearRxBuffer>
        clearMqttBuffer();
 800c1a8:	f000 f838 	bl	800c21c <clearMqttBuffer>
    }
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	4904      	ldr	r1, [pc, #16]	@ (800c1c0 <Sim800_RxCallBack+0x164>)
 800c1b0:	4810      	ldr	r0, [pc, #64]	@ (800c1f4 <Sim800_RxCallBack+0x198>)
 800c1b2:	f007 fe98 	bl	8013ee6 <HAL_UART_Receive_IT>
}
 800c1b6:	bf00      	nop
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20000d04 	.word	0x20000d04
 800c1c0:	2000074c 	.word	0x2000074c
 800c1c4:	20000750 	.word	0x20000750
 800c1c8:	200003d0 	.word	0x200003d0
 800c1cc:	2000057c 	.word	0x2000057c
 800c1d0:	0801d430 	.word	0x0801d430
 800c1d4:	20000d08 	.word	0x20000d08
 800c1d8:	0801d434 	.word	0x0801d434
 800c1dc:	0801d444 	.word	0x0801d444
 800c1e0:	0801d450 	.word	0x0801d450
 800c1e4:	0801d45c 	.word	0x0801d45c
 800c1e8:	0801d464 	.word	0x0801d464
 800c1ec:	20000d06 	.word	0x20000d06
 800c1f0:	200012bc 	.word	0x200012bc
 800c1f4:	20001434 	.word	0x20001434

0800c1f8 <clearRxBuffer>:
 * Clear SIM800 UART RX buffer.
 * @param NONE
 * @return NONE
 */
void clearRxBuffer(void)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	af00      	add	r7, sp, #0
    rx_index = 0;
 800c1fc:	4b05      	ldr	r3, [pc, #20]	@ (800c214 <clearRxBuffer+0x1c>)
 800c1fe:	2200      	movs	r2, #0
 800c200:	801a      	strh	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 800c202:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800c206:	2100      	movs	r1, #0
 800c208:	4803      	ldr	r0, [pc, #12]	@ (800c218 <clearRxBuffer+0x20>)
 800c20a:	f00d fca9 	bl	8019b60 <memset>
}
 800c20e:	bf00      	nop
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	20000d04 	.word	0x20000d04
 800c218:	20000750 	.word	0x20000750

0800c21c <clearMqttBuffer>:
 * Clear MQTT buffer.
 * @param NONE
 * @return NONE
 */
void clearMqttBuffer(void)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	af00      	add	r7, sp, #0
    mqtt_receive = 0;
 800c220:	4b06      	ldr	r3, [pc, #24]	@ (800c23c <clearMqttBuffer+0x20>)
 800c222:	2200      	movs	r2, #0
 800c224:	701a      	strb	r2, [r3, #0]
    mqtt_index = 0;
 800c226:	4b06      	ldr	r3, [pc, #24]	@ (800c240 <clearMqttBuffer+0x24>)
 800c228:	2200      	movs	r2, #0
 800c22a:	801a      	strh	r2, [r3, #0]
    memset(mqtt_buffer, 0, sizeof(mqtt_buffer));
 800c22c:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800c230:	2100      	movs	r1, #0
 800c232:	4804      	ldr	r0, [pc, #16]	@ (800c244 <clearMqttBuffer+0x28>)
 800c234:	f00d fc94 	bl	8019b60 <memset>
}
 800c238:	bf00      	nop
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	20000d06 	.word	0x20000d06
 800c240:	200012bc 	.word	0x200012bc
 800c244:	20000d08 	.word	0x20000d08

0800c248 <SIM800_SendCommand>:
 * @param reply to be used to set the correct answer to the command
 * @param delay to be used to the set pause to the reply
 * @return error, 0 is OK
 */
int SIM800_SendCommand(char *command, char *reply, uint16_t delay)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	4613      	mov	r3, r2
 800c254:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
                         (uint16_t)strlen(command));
 800c256:	68f8      	ldr	r0, [r7, #12]
 800c258:	f7fc f83a 	bl	80082d0 <strlen>
 800c25c:	4603      	mov	r3, r0
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
 800c25e:	b29b      	uxth	r3, r3
 800c260:	461a      	mov	r2, r3
 800c262:	68f9      	ldr	r1, [r7, #12]
 800c264:	4810      	ldr	r0, [pc, #64]	@ (800c2a8 <SIM800_SendCommand+0x60>)
 800c266:	f007 fe08 	bl	8013e7a <HAL_UART_Transmit_IT>

#if FREERTOS == 1
    vTaskDelay(pdMS_TO_TICKS(delay));
 800c26a:	88fb      	ldrh	r3, [r7, #6]
 800c26c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c270:	fb02 f303 	mul.w	r3, r2, r3
 800c274:	4a0d      	ldr	r2, [pc, #52]	@ (800c2ac <SIM800_SendCommand+0x64>)
 800c276:	fba2 2303 	umull	r2, r3, r2, r3
 800c27a:	099b      	lsrs	r3, r3, #6
 800c27c:	4618      	mov	r0, r3
 800c27e:	f009 fe07 	bl	8015e90 <vTaskDelay>
#else
    HAL_Delay(delay);
#endif

    if (strstr(mqtt_buffer, reply) != NULL)
 800c282:	68b9      	ldr	r1, [r7, #8]
 800c284:	480a      	ldr	r0, [pc, #40]	@ (800c2b0 <SIM800_SendCommand+0x68>)
 800c286:	f00d fc98 	bl	8019bba <strstr>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d003      	beq.n	800c298 <SIM800_SendCommand+0x50>
    {
        clearRxBuffer();
 800c290:	f7ff ffb2 	bl	800c1f8 <clearRxBuffer>
        return 0;
 800c294:	2300      	movs	r3, #0
 800c296:	e002      	b.n	800c29e <SIM800_SendCommand+0x56>
    }
    clearRxBuffer();
 800c298:	f7ff ffae 	bl	800c1f8 <clearRxBuffer>
    return 1;
 800c29c:	2301      	movs	r3, #1
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	20001434 	.word	0x20001434
 800c2ac:	10624dd3 	.word	0x10624dd3
 800c2b0:	20000d08 	.word	0x20000d08

0800c2b4 <MQTT_Pub>:
 * @param topic to be used to the set topic
 * @param payload to be used to the set message for topic
 * @return NONE
 */
void MQTT_Pub(char *topic, char *payload)
{
 800c2b4:	b590      	push	{r4, r7, lr}
 800c2b6:	b0cf      	sub	sp, #316	@ 0x13c
 800c2b8:	af08      	add	r7, sp, #32
 800c2ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c2be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c2c2:	6018      	str	r0, [r3, #0]
 800c2c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c2c8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800c2cc:	6019      	str	r1, [r3, #0]
    unsigned char buf[256] = {0};
 800c2ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c2d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c2dc:	461a      	mov	r2, r3
 800c2de:	2100      	movs	r1, #0
 800c2e0:	f00d fc3e 	bl	8019b60 <memset>

    MQTTString topicString = MQTTString_initializer;
 800c2e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c2e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	601a      	str	r2, [r3, #0]
 800c2f0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c2f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	605a      	str	r2, [r3, #4]
 800c2fc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c300:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c304:	2200      	movs	r2, #0
 800c306:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 800c308:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c30c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c310:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800c314:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800c318:	6812      	ldr	r2, [r2, #0]
 800c31a:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
                                         topicString, (unsigned char *)payload, (int)strlen(payload));
 800c31c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c320:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800c324:	6818      	ldr	r0, [r3, #0]
 800c326:	f7fb ffd3 	bl	80082d0 <strlen>
 800c32a:	4603      	mov	r3, r0
    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
 800c32c:	f107 0414 	add.w	r4, r7, #20
 800c330:	9306      	str	r3, [sp, #24]
 800c332:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c336:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	9305      	str	r3, [sp, #20]
 800c33e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c342:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 800c346:	ab02      	add	r3, sp, #8
 800c348:	ca07      	ldmia	r2, {r0, r1, r2}
 800c34a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c34e:	2300      	movs	r3, #0
 800c350:	9301      	str	r3, [sp, #4]
 800c352:	2300      	movs	r3, #0
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	2300      	movs	r3, #0
 800c358:	2200      	movs	r2, #0
 800c35a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c35e:	4620      	mov	r0, r4
 800c360:	f7ff fc98 	bl	800bc94 <MQTTSerialize_publish>
 800c364:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 800c368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c36c:	b29a      	uxth	r2, r3
 800c36e:	f107 0314 	add.w	r3, r7, #20
 800c372:	4619      	mov	r1, r3
 800c374:	4805      	ldr	r0, [pc, #20]	@ (800c38c <MQTT_Pub+0xd8>)
 800c376:	f007 fd80 	bl	8013e7a <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    vTaskDelay(pdMS_TO_TICKS(100));
 800c37a:	2064      	movs	r0, #100	@ 0x64
 800c37c:	f009 fd88 	bl	8015e90 <vTaskDelay>
#else
    HAL_Delay(100);
#endif
}
 800c380:	bf00      	nop
 800c382:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 800c386:	46bd      	mov	sp, r7
 800c388:	bd90      	pop	{r4, r7, pc}
 800c38a:	bf00      	nop
 800c38c:	20001434 	.word	0x20001434

0800c390 <MQTT_Sub>:
 * Subscribe on the MQTT broker of the message in a topic
 * @param topic to be used to the set topic
 * @return NONE
 */
void MQTT_Sub(char *topic)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b0ca      	sub	sp, #296	@ 0x128
 800c394:	af04      	add	r7, sp, #16
 800c396:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c39a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c39e:	6018      	str	r0, [r3, #0]
    unsigned char buf[256] = {0};
 800c3a0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c3a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	f00d fbd5 	bl	8019b60 <memset>

    MQTTString topicString = MQTTString_initializer;
 800c3b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c3ba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c3be:	2200      	movs	r2, #0
 800c3c0:	601a      	str	r2, [r3, #0]
 800c3c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c3c6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	605a      	str	r2, [r3, #4]
 800c3ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c3d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 800c3da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c3de:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c3e2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800c3e6:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800c3ea:	6812      	ldr	r2, [r2, #0]
 800c3ec:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_subscribe(buf, sizeof(buf), 0, 1, 1,
 800c3ee:	f107 0014 	add.w	r0, r7, #20
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	9302      	str	r3, [sp, #8]
 800c3f6:	f107 0308 	add.w	r3, r7, #8
 800c3fa:	9301      	str	r3, [sp, #4]
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	2301      	movs	r3, #1
 800c402:	2200      	movs	r2, #0
 800c404:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c408:	f000 f889 	bl	800c51e <MQTTSerialize_subscribe>
 800c40c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
                                           &topicString, 0);
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 800c410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c414:	b29a      	uxth	r2, r3
 800c416:	f107 0314 	add.w	r3, r7, #20
 800c41a:	4619      	mov	r1, r3
 800c41c:	4805      	ldr	r0, [pc, #20]	@ (800c434 <MQTT_Sub+0xa4>)
 800c41e:	f007 fd2c 	bl	8013e7a <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    vTaskDelay(pdMS_TO_TICKS(100));
 800c422:	2064      	movs	r0, #100	@ 0x64
 800c424:	f009 fd34 	bl	8015e90 <vTaskDelay>
#else
    HAL_Delay(100);
#endif
}
 800c428:	bf00      	nop
 800c42a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	20001434 	.word	0x20001434

0800c438 <MQTT_Receive>:
 * Receive message from MQTT broker
 * @param receive mqtt bufer
 * @return NONE
 */
void MQTT_Receive(unsigned char *buf)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b08c      	sub	sp, #48	@ 0x30
 800c43c:	af06      	add	r7, sp, #24
 800c43e:	6078      	str	r0, [r7, #4]
    memset(SIM800.mqttReceive.topic, 0, sizeof(SIM800.mqttReceive.topic));
 800c440:	2280      	movs	r2, #128	@ 0x80
 800c442:	2100      	movs	r1, #0
 800c444:	481a      	ldr	r0, [pc, #104]	@ (800c4b0 <MQTT_Receive+0x78>)
 800c446:	f00d fb8b 	bl	8019b60 <memset>
    memset(SIM800.mqttReceive.payload, 0, sizeof(SIM800.mqttReceive.payload));
 800c44a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c44e:	2100      	movs	r1, #0
 800c450:	4818      	ldr	r0, [pc, #96]	@ (800c4b4 <MQTT_Receive+0x7c>)
 800c452:	f00d fb85 	bl	8019b60 <memset>
    MQTTString receivedTopic;
    unsigned char *payload;
    MQTTDeserialize_publish(&SIM800.mqttReceive.dup, &SIM800.mqttReceive.qos, &SIM800.mqttReceive.retained,
 800c456:	2304      	movs	r3, #4
 800c458:	9304      	str	r3, [sp, #16]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	9303      	str	r3, [sp, #12]
 800c45e:	4b16      	ldr	r3, [pc, #88]	@ (800c4b8 <MQTT_Receive+0x80>)
 800c460:	9302      	str	r3, [sp, #8]
 800c462:	f107 0308 	add.w	r3, r7, #8
 800c466:	9301      	str	r3, [sp, #4]
 800c468:	f107 030c 	add.w	r3, r7, #12
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	4b13      	ldr	r3, [pc, #76]	@ (800c4bc <MQTT_Receive+0x84>)
 800c470:	4a13      	ldr	r2, [pc, #76]	@ (800c4c0 <MQTT_Receive+0x88>)
 800c472:	4914      	ldr	r1, [pc, #80]	@ (800c4c4 <MQTT_Receive+0x8c>)
 800c474:	4814      	ldr	r0, [pc, #80]	@ (800c4c8 <MQTT_Receive+0x90>)
 800c476:	f7ff f9ab 	bl	800b7d0 <MQTTDeserialize_publish>
                            &SIM800.mqttReceive.msgId,
                            &receivedTopic, &payload, &SIM800.mqttReceive.payloadLen, buf,
                            sizeof(buf));
    memcpy(SIM800.mqttReceive.topic, receivedTopic.lenstring.data, receivedTopic.lenstring.len);
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	693a      	ldr	r2, [r7, #16]
 800c47e:	4619      	mov	r1, r3
 800c480:	480b      	ldr	r0, [pc, #44]	@ (800c4b0 <MQTT_Receive+0x78>)
 800c482:	f00d fc40 	bl	8019d06 <memcpy>
    SIM800.mqttReceive.topicLen = receivedTopic.lenstring.len;
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	4a10      	ldr	r2, [pc, #64]	@ (800c4cc <MQTT_Receive+0x94>)
 800c48a:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
    memcpy(SIM800.mqttReceive.payload, payload, SIM800.mqttReceive.payloadLen);
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	4a0e      	ldr	r2, [pc, #56]	@ (800c4cc <MQTT_Receive+0x94>)
 800c492:	f8d2 2130 	ldr.w	r2, [r2, #304]	@ 0x130
 800c496:	4619      	mov	r1, r3
 800c498:	4806      	ldr	r0, [pc, #24]	@ (800c4b4 <MQTT_Receive+0x7c>)
 800c49a:	f00d fc34 	bl	8019d06 <memcpy>
    SIM800.mqttReceive.newEvent = 1;
 800c49e:	4b0b      	ldr	r3, [pc, #44]	@ (800c4cc <MQTT_Receive+0x94>)
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800c4a6:	bf00      	nop
 800c4a8:	3718      	adds	r7, #24
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	200006b0 	.word	0x200006b0
 800c4b4:	200005ac 	.word	0x200005ac
 800c4b8:	200006ac 	.word	0x200006ac
 800c4bc:	200005aa 	.word	0x200005aa
 800c4c0:	200005a8 	.word	0x200005a8
 800c4c4:	200005a4 	.word	0x200005a4
 800c4c8:	200005a1 	.word	0x200005a1
 800c4cc:	2000057c 	.word	0x2000057c

0800c4d0 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 800c4da:	2302      	movs	r3, #2
 800c4dc:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 800c4de:	2300      	movs	r3, #0
 800c4e0:	60fb      	str	r3, [r7, #12]
 800c4e2:	e013      	b.n	800c50c <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	005b      	lsls	r3, r3, #1
 800c4ea:	4413      	add	r3, r2
 800c4ec:	009b      	lsls	r3, r3, #2
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c4f8:	f7ff fb93 	bl	800bc22 <MQTTstrlen>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	3303      	adds	r3, #3
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	4413      	add	r3, r2
 800c504:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	3301      	adds	r3, #1
 800c50a:	60fb      	str	r3, [r7, #12]
 800c50c:	68fa      	ldr	r2, [r7, #12]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	429a      	cmp	r2, r3
 800c512:	dbe7      	blt.n	800c4e4 <MQTTSerialize_subscribeLength+0x14>
	return len;
 800c514:	68bb      	ldr	r3, [r7, #8]
}
 800c516:	4618      	mov	r0, r3
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 800c51e:	b580      	push	{r7, lr}
 800c520:	b08a      	sub	sp, #40	@ 0x28
 800c522:	af00      	add	r7, sp, #0
 800c524:	60f8      	str	r0, [r7, #12]
 800c526:	60b9      	str	r1, [r7, #8]
 800c528:	4611      	mov	r1, r2
 800c52a:	461a      	mov	r2, r3
 800c52c:	460b      	mov	r3, r1
 800c52e:	71fb      	strb	r3, [r7, #7]
 800c530:	4613      	mov	r3, r2
 800c532:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 800c538:	2300      	movs	r3, #0
 800c53a:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 800c53c:	2300      	movs	r3, #0
 800c53e:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 800c540:	2300      	movs	r3, #0
 800c542:	627b      	str	r3, [r7, #36]	@ 0x24
	int i = 0;
 800c544:	2300      	movs	r3, #0
 800c546:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 800c548:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c54a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c54c:	f7ff ffc0 	bl	800c4d0 <MQTTSerialize_subscribeLength>
 800c550:	61f8      	str	r0, [r7, #28]
 800c552:	69f8      	ldr	r0, [r7, #28]
 800c554:	f7ff fa1a 	bl	800b98c <MQTTPacket_len>
 800c558:	4602      	mov	r2, r0
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	4293      	cmp	r3, r2
 800c55e:	da03      	bge.n	800c568 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800c560:	f06f 0301 	mvn.w	r3, #1
 800c564:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 800c566:	e051      	b.n	800c60c <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 800c568:	2300      	movs	r3, #0
 800c56a:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 800c56c:	7d3b      	ldrb	r3, [r7, #20]
 800c56e:	2208      	movs	r2, #8
 800c570:	f362 1307 	bfi	r3, r2, #4, #4
 800c574:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 800c576:	79fb      	ldrb	r3, [r7, #7]
 800c578:	f003 0301 	and.w	r3, r3, #1
 800c57c:	b2da      	uxtb	r2, r3
 800c57e:	7d3b      	ldrb	r3, [r7, #20]
 800c580:	f362 03c3 	bfi	r3, r2, #3, #1
 800c584:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 800c586:	7d3b      	ldrb	r3, [r7, #20]
 800c588:	2201      	movs	r2, #1
 800c58a:	f362 0342 	bfi	r3, r2, #1, #2
 800c58e:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 800c590:	7d3a      	ldrb	r2, [r7, #20]
 800c592:	f107 0318 	add.w	r3, r7, #24
 800c596:	4611      	mov	r1, r2
 800c598:	4618      	mov	r0, r3
 800c59a:	f7ff fa86 	bl	800baaa <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	69f9      	ldr	r1, [r7, #28]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7ff f986 	bl	800b8b4 <MQTTPacket_encode>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	4413      	add	r3, r2
 800c5ae:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 800c5b0:	88ba      	ldrh	r2, [r7, #4]
 800c5b2:	f107 0318 	add.w	r3, r7, #24
 800c5b6:	4611      	mov	r1, r2
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7ff fa8b 	bl	800bad4 <writeInt>

	for (i = 0; i < count; ++i)
 800c5be:	2300      	movs	r3, #0
 800c5c0:	623b      	str	r3, [r7, #32]
 800c5c2:	e01b      	b.n	800c5fc <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 800c5c4:	6a3a      	ldr	r2, [r7, #32]
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	005b      	lsls	r3, r3, #1
 800c5ca:	4413      	add	r3, r2
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5d2:	4413      	add	r3, r2
 800c5d4:	f107 0018 	add.w	r0, r7, #24
 800c5d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5da:	f7ff fac3 	bl	800bb64 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800c5de:	6a3b      	ldr	r3, [r7, #32]
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5e4:	4413      	add	r3, r2
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	b2da      	uxtb	r2, r3
 800c5ea:	f107 0318 	add.w	r3, r7, #24
 800c5ee:	4611      	mov	r1, r2
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7ff fa5a 	bl	800baaa <writeChar>
	for (i = 0; i < count; ++i)
 800c5f6:	6a3b      	ldr	r3, [r7, #32]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	623b      	str	r3, [r7, #32]
 800c5fc:	6a3a      	ldr	r2, [r7, #32]
 800c5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c600:	429a      	cmp	r2, r3
 800c602:	dbdf      	blt.n	800c5c4 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 800c604:	69ba      	ldr	r2, [r7, #24]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	1ad3      	subs	r3, r2, r3
 800c60a:	627b      	str	r3, [r7, #36]	@ 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800c60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3728      	adds	r7, #40	@ 0x28
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
	...

0800c618 <spiRead>:
#define LOW  0
#define HIGH 1


uint8_t spiRead(uint8_t reg)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	4603      	mov	r3, r0
 800c620:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	uint8_t TxDt;

	TxDt = (reg & ~RH_RF69_SPI_WRITE_MASK);
 800c622:	79fb      	ldrb	r3, [r7, #7]
 800c624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, GPIO_PIN_RESET);
 800c62c:	2200      	movs	r2, #0
 800c62e:	2102      	movs	r1, #2
 800c630:	480e      	ldr	r0, [pc, #56]	@ (800c66c <spiRead+0x54>)
 800c632:	f005 f825 	bl	8011680 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &TxDt,sizeof(TxDt), 1000);                   // Send the address with the write mask off
 800c636:	f107 010e 	add.w	r1, r7, #14
 800c63a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c63e:	2201      	movs	r2, #1
 800c640:	480b      	ldr	r0, [pc, #44]	@ (800c670 <spiRead+0x58>)
 800c642:	f005 ff1e 	bl	8012482 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &val, sizeof(val), 1000);                     // The written value is ignored, reg value is read
 800c646:	f107 010f 	add.w	r1, r7, #15
 800c64a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c64e:	2201      	movs	r2, #1
 800c650:	4807      	ldr	r0, [pc, #28]	@ (800c670 <spiRead+0x58>)
 800c652:	f006 f85a 	bl	801270a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, GPIO_PIN_SET);
 800c656:	2201      	movs	r2, #1
 800c658:	2102      	movs	r1, #2
 800c65a:	4804      	ldr	r0, [pc, #16]	@ (800c66c <spiRead+0x54>)
 800c65c:	f005 f810 	bl	8011680 <HAL_GPIO_WritePin>
	return val;
 800c660:	7bfb      	ldrb	r3, [r7, #15]
}
 800c662:	4618      	mov	r0, r3
 800c664:	3710      	adds	r7, #16
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	40020400 	.word	0x40020400
 800c670:	200013dc 	.word	0x200013dc

0800c674 <spiWrite>:

uint8_t spiWrite(uint8_t reg, uint8_t val)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b086      	sub	sp, #24
 800c678:	af02      	add	r7, sp, #8
 800c67a:	4603      	mov	r3, r0
 800c67c:	460a      	mov	r2, r1
 800c67e:	71fb      	strb	r3, [r7, #7]
 800c680:	4613      	mov	r3, r2
 800c682:	71bb      	strb	r3, [r7, #6]
	uint8_t TxDt;
	uint8_t status = 0;
 800c684:	2300      	movs	r3, #0
 800c686:	73bb      	strb	r3, [r7, #14]

	TxDt = (reg | RH_RF69_SPI_WRITE_MASK);
 800c688:	79fb      	ldrb	r3, [r7, #7]
 800c68a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, GPIO_PIN_RESET);
 800c692:	2200      	movs	r2, #0
 800c694:	2102      	movs	r1, #2
 800c696:	480f      	ldr	r0, [pc, #60]	@ (800c6d4 <spiWrite+0x60>)
 800c698:	f004 fff2 	bl	8011680 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, &TxDt, &status, sizeof(TxDt), 1000); // Send the address with the write mask on
 800c69c:	f107 020e 	add.w	r2, r7, #14
 800c6a0:	f107 010f 	add.w	r1, r7, #15
 800c6a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c6a8:	9300      	str	r3, [sp, #0]
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	480a      	ldr	r0, [pc, #40]	@ (800c6d8 <spiWrite+0x64>)
 800c6ae:	f006 f945 	bl	801293c <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi3, &val, sizeof(val), 1000);                   // New value follows
 800c6b2:	1db9      	adds	r1, r7, #6
 800c6b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	4807      	ldr	r0, [pc, #28]	@ (800c6d8 <spiWrite+0x64>)
 800c6bc:	f005 fee1 	bl	8012482 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, GPIO_PIN_SET);
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	2102      	movs	r1, #2
 800c6c4:	4803      	ldr	r0, [pc, #12]	@ (800c6d4 <spiWrite+0x60>)
 800c6c6:	f004 ffdb 	bl	8011680 <HAL_GPIO_WritePin>
	return status;
 800c6ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3710      	adds	r7, #16
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	40020400 	.word	0x40020400
 800c6d8:	200013dc 	.word	0x200013dc

0800c6dc <spiBurstWrite>:
	HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, GPIO_PIN_SET);
	return status;
}

uint8_t spiBurstWrite(uint8_t reg, const uint8_t* src, uint8_t len)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b086      	sub	sp, #24
 800c6e0:	af02      	add	r7, sp, #8
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	6039      	str	r1, [r7, #0]
 800c6e6:	71fb      	strb	r3, [r7, #7]
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	71bb      	strb	r3, [r7, #6]
	uint8_t TxDt;
	uint8_t status = 0;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	73bb      	strb	r3, [r7, #14]
	uint8_t TxDt1;
	TxDt = (reg | RH_RF69_SPI_WRITE_MASK);
 800c6f0:	79fb      	ldrb	r3, [r7, #7]
 800c6f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, GPIO_PIN_RESET);
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	2102      	movs	r1, #2
 800c6fe:	4815      	ldr	r0, [pc, #84]	@ (800c754 <spiBurstWrite+0x78>)
 800c700:	f004 ffbe 	bl	8011680 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, &TxDt, &status, sizeof(TxDt), 1000);  // Send the start address with the write mask on
 800c704:	f107 020e 	add.w	r2, r7, #14
 800c708:	f107 010f 	add.w	r1, r7, #15
 800c70c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c710:	9300      	str	r3, [sp, #0]
 800c712:	2301      	movs	r3, #1
 800c714:	4810      	ldr	r0, [pc, #64]	@ (800c758 <spiBurstWrite+0x7c>)
 800c716:	f006 f911 	bl	801293c <HAL_SPI_TransmitReceive>
	while (len--)
 800c71a:	e00c      	b.n	800c736 <spiBurstWrite+0x5a>
	{
		TxDt1 = *src++;
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	1c5a      	adds	r2, r3, #1
 800c720:	603a      	str	r2, [r7, #0]
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit(&hspi3, &TxDt1, sizeof(TxDt1), 1000);            // New value follows
 800c726:	f107 010d 	add.w	r1, r7, #13
 800c72a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c72e:	2201      	movs	r2, #1
 800c730:	4809      	ldr	r0, [pc, #36]	@ (800c758 <spiBurstWrite+0x7c>)
 800c732:	f005 fea6 	bl	8012482 <HAL_SPI_Transmit>
	while (len--)
 800c736:	79bb      	ldrb	r3, [r7, #6]
 800c738:	1e5a      	subs	r2, r3, #1
 800c73a:	71ba      	strb	r2, [r7, #6]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1ed      	bne.n	800c71c <spiBurstWrite+0x40>
	}
	HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, GPIO_PIN_SET);
 800c740:	2201      	movs	r2, #1
 800c742:	2102      	movs	r1, #2
 800c744:	4803      	ldr	r0, [pc, #12]	@ (800c754 <spiBurstWrite+0x78>)
 800c746:	f004 ff9b 	bl	8011680 <HAL_GPIO_WritePin>
	return status;
 800c74a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3710      	adds	r7, #16
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	40020400 	.word	0x40020400
 800c758:	200013dc 	.word	0x200013dc

0800c75c <RF69_init>:
{
	_idleMode = idleMode;
}

bool RF69_init()
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RF_RST_GPIO_Port,RF_RST_Pin,GPIO_PIN_SET);
 800c762:	2201      	movs	r2, #1
 800c764:	2104      	movs	r1, #4
 800c766:	482c      	ldr	r0, [pc, #176]	@ (800c818 <RF69_init+0xbc>)
 800c768:	f004 ff8a 	bl	8011680 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800c76c:	2064      	movs	r0, #100	@ 0x64
 800c76e:	f004 fb1d 	bl	8010dac <HAL_Delay>
	HAL_GPIO_WritePin(RF_RST_GPIO_Port,RF_RST_Pin,GPIO_PIN_RESET);
 800c772:	2200      	movs	r2, #0
 800c774:	2104      	movs	r1, #4
 800c776:	4828      	ldr	r0, [pc, #160]	@ (800c818 <RF69_init+0xbc>)
 800c778:	f004 ff82 	bl	8011680 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800c77c:	2064      	movs	r0, #100	@ 0x64
 800c77e:	f004 fb15 	bl	8010dac <HAL_Delay>

	_idleMode = RH_RF69_OPMODE_MODE_STDBY;
 800c782:	4b26      	ldr	r3, [pc, #152]	@ (800c81c <RF69_init+0xc0>)
 800c784:	2204      	movs	r2, #4
 800c786:	701a      	strb	r2, [r3, #0]

	// Get the device type and check it
	_deviceType = spiRead(RH_RF69_REG_10_VERSION);
 800c788:	2010      	movs	r0, #16
 800c78a:	f7ff ff45 	bl	800c618 <spiRead>
 800c78e:	4603      	mov	r3, r0
 800c790:	461a      	mov	r2, r3
 800c792:	4b23      	ldr	r3, [pc, #140]	@ (800c820 <RF69_init+0xc4>)
 800c794:	701a      	strb	r2, [r3, #0]
	safe_printf("_deviceType=%x\n", _deviceType);
 800c796:	4b22      	ldr	r3, [pc, #136]	@ (800c820 <RF69_init+0xc4>)
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	4619      	mov	r1, r3
 800c79c:	4821      	ldr	r0, [pc, #132]	@ (800c824 <RF69_init+0xc8>)
 800c79e:	f7fe fe8b 	bl	800b4b8 <safe_printf>

	if (_deviceType != 0x24)
 800c7a2:	4b1f      	ldr	r3, [pc, #124]	@ (800c820 <RF69_init+0xc4>)
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	2b24      	cmp	r3, #36	@ 0x24
 800c7a8:	d001      	beq.n	800c7ae <RF69_init+0x52>
		return false;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	e02f      	b.n	800c80e <RF69_init+0xb2>

	setModeIdle();
 800c7ae:	f000 f971 	bl	800ca94 <setModeIdle>
	// 2 CRC CCITT octets computed on the header, length and data (this in the modem config data)
	// 0 to 60 bytes data
	// RSSI Threshold -114dBm
	// We dont use the RH_RF69s address filtering: instead we prepend our own headers to the beginning
	// of the RH_RF69 payload
	spiWrite(RH_RF69_REG_3C_FIFOTHRESH, RH_RF69_FIFOTHRESH_TXSTARTCONDITION_NOTEMPTY | 0x0f); // thresh 15 is default
 800c7b2:	218f      	movs	r1, #143	@ 0x8f
 800c7b4:	203c      	movs	r0, #60	@ 0x3c
 800c7b6:	f7ff ff5d 	bl	800c674 <spiWrite>
	// SYNCCONFIG is default. SyncSize is set later by setSyncWords()
	//	  spiWrite(RH_RF69_REG_2E_SYNCCONFIG, RH_RF69_SYNCCONFIG_SYNCON); // auto, tolerance 0
	// PAYLOADLENGTH is default
	//	  spiWrite(RH_RF69_REG_38_PAYLOADLENGTH, RH_RF69_FIFO_SIZE); // max size only for RX
	// PACKETCONFIG 2 is default
	spiWrite(RH_RF69_REG_6F_TESTDAGC, RH_RF69_TESTDAGC_CONTINUOUSDAGC_IMPROVED_LOWBETAOFF);
 800c7ba:	2130      	movs	r1, #48	@ 0x30
 800c7bc:	206f      	movs	r0, #111	@ 0x6f
 800c7be:	f7ff ff59 	bl	800c674 <spiWrite>
	// If high power boost set previously, disable it
	spiWrite(RH_RF69_REG_5A_TESTPA1, RH_RF69_TESTPA1_NORMAL);
 800c7c2:	2155      	movs	r1, #85	@ 0x55
 800c7c4:	205a      	movs	r0, #90	@ 0x5a
 800c7c6:	f7ff ff55 	bl	800c674 <spiWrite>
	spiWrite(RH_RF69_REG_5C_TESTPA2, RH_RF69_TESTPA2_NORMAL);
 800c7ca:	2170      	movs	r1, #112	@ 0x70
 800c7cc:	205c      	movs	r0, #92	@ 0x5c
 800c7ce:	f7ff ff51 	bl	800c674 <spiWrite>

	// The following can be changed later by the user if necessary.
	// Set up default configuration
	uint8_t syncwords[] = { 0x2d, 0xd4 };
 800c7d2:	f24d 432d 	movw	r3, #54317	@ 0xd42d
 800c7d6:	80bb      	strh	r3, [r7, #4]

	setSyncWords(syncwords, sizeof(syncwords)); // Same as RF22's
 800c7d8:	1d3b      	adds	r3, r7, #4
 800c7da:	2102      	movs	r1, #2
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f000 fa7f 	bl	800cce0 <setSyncWords>
	// Reasonably fast and reliable default speed and modulation
	setModemConfig(GFSK_Rb250Fd250);
 800c7e2:	2012      	movs	r0, #18
 800c7e4:	f000 fa44 	bl	800cc70 <setModemConfig>

	// 3 would be sufficient, but this is the same as RF22's
	setPreambleLength(4);
 800c7e8:	2004      	movs	r0, #4
 800c7ea:	f000 fa61 	bl	800ccb0 <setPreambleLength>
	// An innocuous ISM frequency, same as RF22's
	setFrequency(434.0);
 800c7ee:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 800c828 <RF69_init+0xcc>
 800c7f2:	f000 f8cd 	bl	800c990 <setFrequency>
	// No encryption
	setEncryptionKey(NULL);
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	f000 fab4 	bl	800cd64 <setEncryptionKey>
	// +13dBm, same as power-on default
	setTxPower(13, RH_RF69_DEFAULT_HIGHPOWER);
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	200d      	movs	r0, #13
 800c800:	f000 f9a2 	bl	800cb48 <setTxPower>

	spiWrite(RH_RF69_REG_25_DIOMAPPING1, RH_RF69_DIOMAPPING1_DIO0MAPPING_00 );
 800c804:	2100      	movs	r1, #0
 800c806:	2025      	movs	r0, #37	@ 0x25
 800c808:	f7ff ff34 	bl	800c674 <spiWrite>

	return true;
 800c80c:	2301      	movs	r3, #1
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3708      	adds	r7, #8
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	40020400 	.word	0x40020400
 800c81c:	200012c5 	.word	0x200012c5
 800c820:	200012c6 	.word	0x200012c6
 800c824:	0801d478 	.word	0x0801d478
 800c828:	43d90000 	.word	0x43d90000

0800c82c <readFifo>:
// Low level function reads the FIFO and checks the address
// Caution: since we put our headers in what the RH_RF69 considers to be the payload, if encryption is enabled
// we have to suffer the cost of decryption before we can determine whether the address is acceptable.
// Performance issue?
void readFifo()
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
	uint8_t Data;
	uint8_t payloadlen ;

	HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, 0);
 800c832:	2200      	movs	r2, #0
 800c834:	2102      	movs	r1, #2
 800c836:	4845      	ldr	r0, [pc, #276]	@ (800c94c <readFifo+0x120>)
 800c838:	f004 ff22 	bl	8011680 <HAL_GPIO_WritePin>
	Data = RH_RF69_REG_00_FIFO;
 800c83c:	2300      	movs	r3, #0
 800c83e:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi3, &Data, sizeof(Data), 100) ;			// Send the start address with the write mask off
 800c840:	1df9      	adds	r1, r7, #7
 800c842:	2364      	movs	r3, #100	@ 0x64
 800c844:	2201      	movs	r2, #1
 800c846:	4842      	ldr	r0, [pc, #264]	@ (800c950 <readFifo+0x124>)
 800c848:	f005 fe1b 	bl	8012482 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &payloadlen, sizeof(payloadlen), 100);	// First byte is payload len (counting the headers)
 800c84c:	1db9      	adds	r1, r7, #6
 800c84e:	2364      	movs	r3, #100	@ 0x64
 800c850:	2201      	movs	r2, #1
 800c852:	483f      	ldr	r0, [pc, #252]	@ (800c950 <readFifo+0x124>)
 800c854:	f005 ff59 	bl	801270a <HAL_SPI_Receive>
	safe_printf("PayloadLen:%d\n",payloadlen);
 800c858:	79bb      	ldrb	r3, [r7, #6]
 800c85a:	4619      	mov	r1, r3
 800c85c:	483d      	ldr	r0, [pc, #244]	@ (800c954 <readFifo+0x128>)
 800c85e:	f7fe fe2b 	bl	800b4b8 <safe_printf>
	if (payloadlen <= RH_RF69_MAX_ENCRYPTABLE_PAYLOAD_LEN && payloadlen >= RH_RF69_HEADER_LEN)
 800c862:	79bb      	ldrb	r3, [r7, #6]
 800c864:	2b40      	cmp	r3, #64	@ 0x40
 800c866:	d868      	bhi.n	800c93a <readFifo+0x10e>
 800c868:	79bb      	ldrb	r3, [r7, #6]
 800c86a:	2b03      	cmp	r3, #3
 800c86c:	d965      	bls.n	800c93a <readFifo+0x10e>
	{
		HAL_SPI_Receive(&hspi3, &_rxHeaderTo, sizeof(_rxHeaderTo), 100);
 800c86e:	2364      	movs	r3, #100	@ 0x64
 800c870:	2201      	movs	r2, #1
 800c872:	4939      	ldr	r1, [pc, #228]	@ (800c958 <readFifo+0x12c>)
 800c874:	4836      	ldr	r0, [pc, #216]	@ (800c950 <readFifo+0x124>)
 800c876:	f005 ff48 	bl	801270a <HAL_SPI_Receive>
		printf("_rxHeaderTo:%d\n",_rxHeaderTo);
 800c87a:	4b37      	ldr	r3, [pc, #220]	@ (800c958 <readFifo+0x12c>)
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	4619      	mov	r1, r3
 800c880:	4836      	ldr	r0, [pc, #216]	@ (800c95c <readFifo+0x130>)
 800c882:	f00c ffc1 	bl	8019808 <iprintf>
		// Check addressing
		if (_promiscuous ||	_rxHeaderTo == _thisAddress ||_rxHeaderTo == RH_BROADCAST_ADDRESS)
 800c886:	4b36      	ldr	r3, [pc, #216]	@ (800c960 <readFifo+0x134>)
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d109      	bne.n	800c8a2 <readFifo+0x76>
 800c88e:	4b32      	ldr	r3, [pc, #200]	@ (800c958 <readFifo+0x12c>)
 800c890:	781a      	ldrb	r2, [r3, #0]
 800c892:	4b34      	ldr	r3, [pc, #208]	@ (800c964 <readFifo+0x138>)
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	429a      	cmp	r2, r3
 800c898:	d003      	beq.n	800c8a2 <readFifo+0x76>
 800c89a:	4b2f      	ldr	r3, [pc, #188]	@ (800c958 <readFifo+0x12c>)
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	2bff      	cmp	r3, #255	@ 0xff
 800c8a0:	d14b      	bne.n	800c93a <readFifo+0x10e>
		{
			// Get the rest of the headers
			HAL_SPI_Receive(&hspi3, &_rxHeaderFrom, sizeof(_rxHeaderFrom), 1000);
 800c8a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	492f      	ldr	r1, [pc, #188]	@ (800c968 <readFifo+0x13c>)
 800c8aa:	4829      	ldr	r0, [pc, #164]	@ (800c950 <readFifo+0x124>)
 800c8ac:	f005 ff2d 	bl	801270a <HAL_SPI_Receive>
			safe_printf("_rxHeaderFrom:%d\n",_rxHeaderFrom);
 800c8b0:	4b2d      	ldr	r3, [pc, #180]	@ (800c968 <readFifo+0x13c>)
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	482d      	ldr	r0, [pc, #180]	@ (800c96c <readFifo+0x140>)
 800c8b8:	f7fe fdfe 	bl	800b4b8 <safe_printf>
			HAL_SPI_Receive(&hspi3, &_rxHeaderId, sizeof(_rxHeaderId), 1000);
 800c8bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	492b      	ldr	r1, [pc, #172]	@ (800c970 <readFifo+0x144>)
 800c8c4:	4822      	ldr	r0, [pc, #136]	@ (800c950 <readFifo+0x124>)
 800c8c6:	f005 ff20 	bl	801270a <HAL_SPI_Receive>
			safe_printf("_rxHeaderId:%d\n",_rxHeaderId);
 800c8ca:	4b29      	ldr	r3, [pc, #164]	@ (800c970 <readFifo+0x144>)
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	4828      	ldr	r0, [pc, #160]	@ (800c974 <readFifo+0x148>)
 800c8d2:	f7fe fdf1 	bl	800b4b8 <safe_printf>
			HAL_SPI_Receive(&hspi3, &_rxHeaderFlags, sizeof(_rxHeaderFlags), 1000);
 800c8d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c8da:	2201      	movs	r2, #1
 800c8dc:	4926      	ldr	r1, [pc, #152]	@ (800c978 <readFifo+0x14c>)
 800c8de:	481c      	ldr	r0, [pc, #112]	@ (800c950 <readFifo+0x124>)
 800c8e0:	f005 ff13 	bl	801270a <HAL_SPI_Receive>
			safe_printf("_rxHeaderFlags:%d\n",_rxHeaderFlags);
 800c8e4:	4b24      	ldr	r3, [pc, #144]	@ (800c978 <readFifo+0x14c>)
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	4824      	ldr	r0, [pc, #144]	@ (800c97c <readFifo+0x150>)
 800c8ec:	f7fe fde4 	bl	800b4b8 <safe_printf>

			// And now the real payload
			for (_bufLen = 0; _bufLen < (payloadlen - RH_RF69_HEADER_LEN); _bufLen++)
 800c8f0:	4b23      	ldr	r3, [pc, #140]	@ (800c980 <readFifo+0x154>)
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	701a      	strb	r2, [r3, #0]
 800c8f6:	e010      	b.n	800c91a <readFifo+0xee>
			{
				HAL_SPI_Receive(&hspi3, &_buf[_bufLen], 1, 1000);
 800c8f8:	4b21      	ldr	r3, [pc, #132]	@ (800c980 <readFifo+0x154>)
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	4b21      	ldr	r3, [pc, #132]	@ (800c984 <readFifo+0x158>)
 800c900:	18d1      	adds	r1, r2, r3
 800c902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c906:	2201      	movs	r2, #1
 800c908:	4811      	ldr	r0, [pc, #68]	@ (800c950 <readFifo+0x124>)
 800c90a:	f005 fefe 	bl	801270a <HAL_SPI_Receive>
			for (_bufLen = 0; _bufLen < (payloadlen - RH_RF69_HEADER_LEN); _bufLen++)
 800c90e:	4b1c      	ldr	r3, [pc, #112]	@ (800c980 <readFifo+0x154>)
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	3301      	adds	r3, #1
 800c914:	b2da      	uxtb	r2, r3
 800c916:	4b1a      	ldr	r3, [pc, #104]	@ (800c980 <readFifo+0x154>)
 800c918:	701a      	strb	r2, [r3, #0]
 800c91a:	4b19      	ldr	r3, [pc, #100]	@ (800c980 <readFifo+0x154>)
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	461a      	mov	r2, r3
 800c920:	79bb      	ldrb	r3, [r7, #6]
 800c922:	3b04      	subs	r3, #4
 800c924:	429a      	cmp	r2, r3
 800c926:	dbe7      	blt.n	800c8f8 <readFifo+0xcc>
			}
				_rxGood++;
 800c928:	4b17      	ldr	r3, [pc, #92]	@ (800c988 <readFifo+0x15c>)
 800c92a:	881b      	ldrh	r3, [r3, #0]
 800c92c:	3301      	adds	r3, #1
 800c92e:	b29a      	uxth	r2, r3
 800c930:	4b15      	ldr	r3, [pc, #84]	@ (800c988 <readFifo+0x15c>)
 800c932:	801a      	strh	r2, [r3, #0]
				_rxBufValid = true;
 800c934:	4b15      	ldr	r3, [pc, #84]	@ (800c98c <readFifo+0x160>)
 800c936:	2201      	movs	r2, #1
 800c938:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, 1);
 800c93a:	2201      	movs	r2, #1
 800c93c:	2102      	movs	r1, #2
 800c93e:	4803      	ldr	r0, [pc, #12]	@ (800c94c <readFifo+0x120>)
 800c940:	f004 fe9e 	bl	8011680 <HAL_GPIO_WritePin>
	// Any junk remaining in the FIFO will be cleared next time we go to receive mode.
}
 800c944:	bf00      	nop
 800c946:	3708      	adds	r7, #8
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	40020400 	.word	0x40020400
 800c950:	200013dc 	.word	0x200013dc
 800c954:	0801d488 	.word	0x0801d488
 800c958:	20001312 	.word	0x20001312
 800c95c:	0801d498 	.word	0x0801d498
 800c960:	20001311 	.word	0x20001311
 800c964:	2000006c 	.word	0x2000006c
 800c968:	20001313 	.word	0x20001313
 800c96c:	0801d4a8 	.word	0x0801d4a8
 800c970:	20001314 	.word	0x20001314
 800c974:	0801d4bc 	.word	0x0801d4bc
 800c978:	20001315 	.word	0x20001315
 800c97c:	0801d4cc 	.word	0x0801d4cc
 800c980:	200012c8 	.word	0x200012c8
 800c984:	200012cc 	.word	0x200012cc
 800c988:	20001318 	.word	0x20001318
 800c98c:	20001308 	.word	0x20001308

0800c990 <setFrequency>:
		;                                                        // Wait for the measurement to complete
	return 166 - spiRead(RH_RF69_REG_4F_TEMP2);                  // Very approximate, based on observation
}

bool setFrequency(float centre)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t frf = (uint32_t)((centre * 1000000.0) / RH_RF69_FSTEP);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f7fb fe04 	bl	80085a8 <__aeabi_f2d>
 800c9a0:	a317      	add	r3, pc, #92	@ (adr r3, 800ca00 <setFrequency+0x70>)
 800c9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a6:	f7fb fe57 	bl	8008658 <__aeabi_dmul>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	4610      	mov	r0, r2
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	a315      	add	r3, pc, #84	@ (adr r3, 800ca08 <setFrequency+0x78>)
 800c9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b8:	f7fb ff78 	bl	80088ac <__aeabi_ddiv>
 800c9bc:	4602      	mov	r2, r0
 800c9be:	460b      	mov	r3, r1
 800c9c0:	4610      	mov	r0, r2
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	f7fc f920 	bl	8008c08 <__aeabi_d2uiz>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	60fb      	str	r3, [r7, #12]
	spiWrite(RH_RF69_REG_07_FRFMSB, (frf >> 16) & 0xff);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	0c1b      	lsrs	r3, r3, #16
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	2007      	movs	r0, #7
 800c9d6:	f7ff fe4d 	bl	800c674 <spiWrite>
	spiWrite(RH_RF69_REG_08_FRFMID, (frf >> 8) & 0xff);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	0a1b      	lsrs	r3, r3, #8
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	2008      	movs	r0, #8
 800c9e4:	f7ff fe46 	bl	800c674 <spiWrite>
	spiWrite(RH_RF69_REG_09_FRFLSB, frf & 0xff);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	2009      	movs	r0, #9
 800c9f0:	f7ff fe40 	bl	800c674 <spiWrite>

	return true;
 800c9f4:	2301      	movs	r3, #1
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	00000000 	.word	0x00000000
 800ca04:	412e8480 	.word	0x412e8480
 800ca08:	00000000 	.word	0x00000000
 800ca0c:	404e8480 	.word	0x404e8480

0800ca10 <setOpMode>:
{
	return -((int8_t)(spiRead(RH_RF69_REG_24_RSSIVALUE) >> 1));
}

void setOpMode(uint8_t mode)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	4603      	mov	r3, r0
 800ca18:	71fb      	strb	r3, [r7, #7]
	uint8_t opmode = spiRead(RH_RF69_REG_01_OPMODE);
 800ca1a:	2001      	movs	r0, #1
 800ca1c:	f7ff fdfc 	bl	800c618 <spiRead>
 800ca20:	4603      	mov	r3, r0
 800ca22:	73fb      	strb	r3, [r7, #15]
	opmode &= ~RH_RF69_OPMODE_MODE;
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
 800ca26:	f023 031c 	bic.w	r3, r3, #28
 800ca2a:	73fb      	strb	r3, [r7, #15]
	opmode |= (mode & RH_RF69_OPMODE_MODE);
 800ca2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca30:	f003 031c 	and.w	r3, r3, #28
 800ca34:	b25a      	sxtb	r2, r3
 800ca36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	b25b      	sxtb	r3, r3
 800ca3e:	73fb      	strb	r3, [r7, #15]
	spiWrite(RH_RF69_REG_01_OPMODE, opmode);
 800ca40:	7bfb      	ldrb	r3, [r7, #15]
 800ca42:	4619      	mov	r1, r3
 800ca44:	2001      	movs	r0, #1
 800ca46:	f7ff fe15 	bl	800c674 <spiWrite>
	safe_printf("setOpMode=%x\n", opmode);
 800ca4a:	7bfb      	ldrb	r3, [r7, #15]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	480f      	ldr	r0, [pc, #60]	@ (800ca8c <setOpMode+0x7c>)
 800ca50:	f7fe fd32 	bl	800b4b8 <safe_printf>

	// Wait for mode to change.
	while (!(spiRead(RH_RF69_REG_27_IRQFLAGS1) & RH_RF69_IRQFLAGS1_MODEREADY))
 800ca54:	bf00      	nop
 800ca56:	2027      	movs	r0, #39	@ 0x27
 800ca58:	f7ff fdde 	bl	800c618 <spiRead>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	b25b      	sxtb	r3, r3
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	daf8      	bge.n	800ca56 <setOpMode+0x46>
		;

	// Verify new mode
	uint8_t _opmode = spiRead(RH_RF69_REG_01_OPMODE);
 800ca64:	2001      	movs	r0, #1
 800ca66:	f7ff fdd7 	bl	800c618 <spiRead>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	73bb      	strb	r3, [r7, #14]
	if (opmode != _opmode)
 800ca6e:	7bfa      	ldrb	r2, [r7, #15]
 800ca70:	7bbb      	ldrb	r3, [r7, #14]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d005      	beq.n	800ca82 <setOpMode+0x72>
	{
		safe_printf("setOpMode fail. %x %x\n", opmode, _opmode);
 800ca76:	7bfb      	ldrb	r3, [r7, #15]
 800ca78:	7bba      	ldrb	r2, [r7, #14]
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	4804      	ldr	r0, [pc, #16]	@ (800ca90 <setOpMode+0x80>)
 800ca7e:	f7fe fd1b 	bl	800b4b8 <safe_printf>
	}
}
 800ca82:	bf00      	nop
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	0801d4e0 	.word	0x0801d4e0
 800ca90:	0801d4f0 	.word	0x0801d4f0

0800ca94 <setModeIdle>:

void setModeIdle()
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	af00      	add	r7, sp, #0
	if (_mode != RHModeIdle)
 800ca98:	4b0d      	ldr	r3, [pc, #52]	@ (800cad0 <setModeIdle+0x3c>)
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	2b02      	cmp	r3, #2
 800ca9e:	d014      	beq.n	800caca <setModeIdle+0x36>
	{
		if (_power >= 18)
 800caa0:	4b0c      	ldr	r3, [pc, #48]	@ (800cad4 <setModeIdle+0x40>)
 800caa2:	f993 3000 	ldrsb.w	r3, [r3]
 800caa6:	2b11      	cmp	r3, #17
 800caa8:	dd07      	ble.n	800caba <setModeIdle+0x26>
		{
			// If high power boost, return power amp to receive mode
			spiWrite(RH_RF69_REG_5A_TESTPA1, RH_RF69_TESTPA1_NORMAL);
 800caaa:	2155      	movs	r1, #85	@ 0x55
 800caac:	205a      	movs	r0, #90	@ 0x5a
 800caae:	f7ff fde1 	bl	800c674 <spiWrite>
			spiWrite(RH_RF69_REG_5C_TESTPA2, RH_RF69_TESTPA2_NORMAL);
 800cab2:	2170      	movs	r1, #112	@ 0x70
 800cab4:	205c      	movs	r0, #92	@ 0x5c
 800cab6:	f7ff fddd 	bl	800c674 <spiWrite>
		}
		setOpMode(_idleMode);
 800caba:	4b07      	ldr	r3, [pc, #28]	@ (800cad8 <setModeIdle+0x44>)
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7ff ffa6 	bl	800ca10 <setOpMode>
		_mode = RHModeIdle;
 800cac4:	4b02      	ldr	r3, [pc, #8]	@ (800cad0 <setModeIdle+0x3c>)
 800cac6:	2202      	movs	r2, #2
 800cac8:	701a      	strb	r2, [r3, #0]
	}
}
 800caca:	bf00      	nop
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop
 800cad0:	20001310 	.word	0x20001310
 800cad4:	200012c7 	.word	0x200012c7
 800cad8:	200012c5 	.word	0x200012c5

0800cadc <setSleep>:

bool setSleep()
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	af00      	add	r7, sp, #0
	if (_mode != RHModeSleep)
 800cae0:	4b06      	ldr	r3, [pc, #24]	@ (800cafc <setSleep+0x20>)
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d006      	beq.n	800caf6 <setSleep+0x1a>
	{
		spiWrite(RH_RF69_REG_01_OPMODE, RH_RF69_OPMODE_MODE_SLEEP);
 800cae8:	2100      	movs	r1, #0
 800caea:	2001      	movs	r0, #1
 800caec:	f7ff fdc2 	bl	800c674 <spiWrite>
		_mode = RHModeSleep;
 800caf0:	4b02      	ldr	r3, [pc, #8]	@ (800cafc <setSleep+0x20>)
 800caf2:	2201      	movs	r2, #1
 800caf4:	701a      	strb	r2, [r3, #0]
	}
	return true;
 800caf6:	2301      	movs	r3, #1
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	20001310 	.word	0x20001310

0800cb00 <setModeRx>:

void setModeRx()
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	af00      	add	r7, sp, #0
	if (_mode != RHModeRx)
 800cb04:	4b0e      	ldr	r3, [pc, #56]	@ (800cb40 <setModeRx+0x40>)
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	2b04      	cmp	r3, #4
 800cb0a:	d016      	beq.n	800cb3a <setModeRx+0x3a>
	{
		if (_power >= 18)
 800cb0c:	4b0d      	ldr	r3, [pc, #52]	@ (800cb44 <setModeRx+0x44>)
 800cb0e:	f993 3000 	ldrsb.w	r3, [r3]
 800cb12:	2b11      	cmp	r3, #17
 800cb14:	dd07      	ble.n	800cb26 <setModeRx+0x26>
		{
			spiWrite(RH_RF69_REG_5A_TESTPA1, RH_RF69_TESTPA1_NORMAL);
 800cb16:	2155      	movs	r1, #85	@ 0x55
 800cb18:	205a      	movs	r0, #90	@ 0x5a
 800cb1a:	f7ff fdab 	bl	800c674 <spiWrite>
			spiWrite(RH_RF69_REG_5C_TESTPA2, RH_RF69_TESTPA2_NORMAL);
 800cb1e:	2170      	movs	r1, #112	@ 0x70
 800cb20:	205c      	movs	r0, #92	@ 0x5c
 800cb22:	f7ff fda7 	bl	800c674 <spiWrite>
		}
		spiWrite(RH_RF69_REG_25_DIOMAPPING1, RH_RF69_DIOMAPPING1_DIO0MAPPING_01);
 800cb26:	2140      	movs	r1, #64	@ 0x40
 800cb28:	2025      	movs	r0, #37	@ 0x25
 800cb2a:	f7ff fda3 	bl	800c674 <spiWrite>
		setOpMode(RH_RF69_OPMODE_MODE_RX);
 800cb2e:	2010      	movs	r0, #16
 800cb30:	f7ff ff6e 	bl	800ca10 <setOpMode>
		_mode = RHModeRx;
 800cb34:	4b02      	ldr	r3, [pc, #8]	@ (800cb40 <setModeRx+0x40>)
 800cb36:	2204      	movs	r2, #4
 800cb38:	701a      	strb	r2, [r3, #0]
	}
}
 800cb3a:	bf00      	nop
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	20001310 	.word	0x20001310
 800cb44:	200012c7 	.word	0x200012c7

0800cb48 <setTxPower>:
		_mode = RHModeTx;
	}
}

void setTxPower(int8_t power, bool ishighpowermodule)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	4603      	mov	r3, r0
 800cb50:	460a      	mov	r2, r1
 800cb52:	71fb      	strb	r3, [r7, #7]
 800cb54:	4613      	mov	r3, r2
 800cb56:	71bb      	strb	r3, [r7, #6]
  _power = power;
 800cb58:	4a36      	ldr	r2, [pc, #216]	@ (800cc34 <setTxPower+0xec>)
 800cb5a:	79fb      	ldrb	r3, [r7, #7]
 800cb5c:	7013      	strb	r3, [r2, #0]
  uint8_t palevel;

  if (ishighpowermodule)
 800cb5e:	79bb      	ldrb	r3, [r7, #6]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d03f      	beq.n	800cbe4 <setTxPower+0x9c>
  {
	if (_power < -2)
 800cb64:	4b33      	ldr	r3, [pc, #204]	@ (800cc34 <setTxPower+0xec>)
 800cb66:	f993 3000 	ldrsb.w	r3, [r3]
 800cb6a:	f113 0f02 	cmn.w	r3, #2
 800cb6e:	da02      	bge.n	800cb76 <setTxPower+0x2e>
	  _power = -2; //RFM69HW only works down to -2.
 800cb70:	4b30      	ldr	r3, [pc, #192]	@ (800cc34 <setTxPower+0xec>)
 800cb72:	22fe      	movs	r2, #254	@ 0xfe
 800cb74:	701a      	strb	r2, [r3, #0]
	if (_power <= 13)
 800cb76:	4b2f      	ldr	r3, [pc, #188]	@ (800cc34 <setTxPower+0xec>)
 800cb78:	f993 3000 	ldrsb.w	r3, [r3]
 800cb7c:	2b0d      	cmp	r3, #13
 800cb7e:	dc0e      	bgt.n	800cb9e <setTxPower+0x56>
	{
	  // -2dBm to +13dBm
	  //Need PA1 exclusivelly on RFM69HW
	  palevel = RH_RF69_PALEVEL_PA1ON | ((_power + 18) &
 800cb80:	4b2c      	ldr	r3, [pc, #176]	@ (800cc34 <setTxPower+0xec>)
 800cb82:	f993 3000 	ldrsb.w	r3, [r3]
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	3312      	adds	r3, #18
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	b25b      	sxtb	r3, r3
 800cb8e:	f003 031f 	and.w	r3, r3, #31
 800cb92:	b25b      	sxtb	r3, r3
 800cb94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb98:	b25b      	sxtb	r3, r3
 800cb9a:	73fb      	strb	r3, [r7, #15]
 800cb9c:	e041      	b.n	800cc22 <setTxPower+0xda>
	  RH_RF69_PALEVEL_OUTPUTPOWER);
	}
	else if (_power >= 18)
 800cb9e:	4b25      	ldr	r3, [pc, #148]	@ (800cc34 <setTxPower+0xec>)
 800cba0:	f993 3000 	ldrsb.w	r3, [r3]
 800cba4:	2b11      	cmp	r3, #17
 800cba6:	dd0e      	ble.n	800cbc6 <setTxPower+0x7e>
	  // +18dBm to +20dBm
	  // Need PA1+PA2
	  // Also need PA boost settings change when tx is turned on and off, see setModeTx()
	  palevel = RH_RF69_PALEVEL_PA1ON
	| RH_RF69_PALEVEL_PA2ON
	| ((_power + 11) & RH_RF69_PALEVEL_OUTPUTPOWER);
 800cba8:	4b22      	ldr	r3, [pc, #136]	@ (800cc34 <setTxPower+0xec>)
 800cbaa:	f993 3000 	ldrsb.w	r3, [r3]
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	330b      	adds	r3, #11
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	b25b      	sxtb	r3, r3
 800cbb6:	f003 031f 	and.w	r3, r3, #31
 800cbba:	b25b      	sxtb	r3, r3
 800cbbc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800cbc0:	b25b      	sxtb	r3, r3
	  palevel = RH_RF69_PALEVEL_PA1ON
 800cbc2:	73fb      	strb	r3, [r7, #15]
 800cbc4:	e02d      	b.n	800cc22 <setTxPower+0xda>
	{
	  // +14dBm to +17dBm
	  // Need PA1+PA2
	  palevel = RH_RF69_PALEVEL_PA1ON
	| RH_RF69_PALEVEL_PA2ON
	| ((_power + 14) & RH_RF69_PALEVEL_OUTPUTPOWER);
 800cbc6:	4b1b      	ldr	r3, [pc, #108]	@ (800cc34 <setTxPower+0xec>)
 800cbc8:	f993 3000 	ldrsb.w	r3, [r3]
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	330e      	adds	r3, #14
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	b25b      	sxtb	r3, r3
 800cbd4:	f003 031f 	and.w	r3, r3, #31
 800cbd8:	b25b      	sxtb	r3, r3
 800cbda:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800cbde:	b25b      	sxtb	r3, r3
	  palevel = RH_RF69_PALEVEL_PA1ON
 800cbe0:	73fb      	strb	r3, [r7, #15]
 800cbe2:	e01e      	b.n	800cc22 <setTxPower+0xda>
	}
  }
  else
  {
	if (_power < -18) _power = -18;
 800cbe4:	4b13      	ldr	r3, [pc, #76]	@ (800cc34 <setTxPower+0xec>)
 800cbe6:	f993 3000 	ldrsb.w	r3, [r3]
 800cbea:	f113 0f12 	cmn.w	r3, #18
 800cbee:	da02      	bge.n	800cbf6 <setTxPower+0xae>
 800cbf0:	4b10      	ldr	r3, [pc, #64]	@ (800cc34 <setTxPower+0xec>)
 800cbf2:	22ee      	movs	r2, #238	@ 0xee
 800cbf4:	701a      	strb	r2, [r3, #0]
	if (_power > 13) _power = 13; //limit for RFM69W
 800cbf6:	4b0f      	ldr	r3, [pc, #60]	@ (800cc34 <setTxPower+0xec>)
 800cbf8:	f993 3000 	ldrsb.w	r3, [r3]
 800cbfc:	2b0d      	cmp	r3, #13
 800cbfe:	dd02      	ble.n	800cc06 <setTxPower+0xbe>
 800cc00:	4b0c      	ldr	r3, [pc, #48]	@ (800cc34 <setTxPower+0xec>)
 800cc02:	220d      	movs	r2, #13
 800cc04:	701a      	strb	r2, [r3, #0]
	palevel = RH_RF69_PALEVEL_PA0ON
	  | ((_power + 18) & RH_RF69_PALEVEL_OUTPUTPOWER);
 800cc06:	4b0b      	ldr	r3, [pc, #44]	@ (800cc34 <setTxPower+0xec>)
 800cc08:	f993 3000 	ldrsb.w	r3, [r3]
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	3312      	adds	r3, #18
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	b25b      	sxtb	r3, r3
 800cc14:	f003 031f 	and.w	r3, r3, #31
 800cc18:	b25b      	sxtb	r3, r3
 800cc1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cc1e:	b25b      	sxtb	r3, r3
	palevel = RH_RF69_PALEVEL_PA0ON
 800cc20:	73fb      	strb	r3, [r7, #15]
  }
  spiWrite(RH_RF69_REG_11_PALEVEL, palevel);
 800cc22:	7bfb      	ldrb	r3, [r7, #15]
 800cc24:	4619      	mov	r1, r3
 800cc26:	2011      	movs	r0, #17
 800cc28:	f7ff fd24 	bl	800c674 <spiWrite>
}
 800cc2c:	bf00      	nop
 800cc2e:	3710      	adds	r7, #16
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	200012c7 	.word	0x200012c7

0800cc38 <setModemRegisters>:

// Sets registers from a canned modem configuration structure
void setModemRegisters(const ModemConfig* config)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
	spiBurstWrite(RH_RF69_REG_02_DATAMODUL,		&config->reg_02, 5);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2205      	movs	r2, #5
 800cc44:	4619      	mov	r1, r3
 800cc46:	2002      	movs	r0, #2
 800cc48:	f7ff fd48 	bl	800c6dc <spiBurstWrite>
	spiBurstWrite(RH_RF69_REG_19_RXBW,			&config->reg_19, 2);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	3305      	adds	r3, #5
 800cc50:	2202      	movs	r2, #2
 800cc52:	4619      	mov	r1, r3
 800cc54:	2019      	movs	r0, #25
 800cc56:	f7ff fd41 	bl	800c6dc <spiBurstWrite>
	spiWrite(RH_RF69_REG_37_PACKETCONFIG1,		 config->reg_37);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	79db      	ldrb	r3, [r3, #7]
 800cc5e:	4619      	mov	r1, r3
 800cc60:	2037      	movs	r0, #55	@ 0x37
 800cc62:	f7ff fd07 	bl	800c674 <spiWrite>

}
 800cc66:	bf00      	nop
 800cc68:	3708      	adds	r7, #8
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <setModemConfig>:

// Set one of the canned FSK Modem configs
// Returns true if its a valid choice
bool setModemConfig(ModemConfigChoice index)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	4603      	mov	r3, r0
 800cc78:	71fb      	strb	r3, [r7, #7]
	if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 800cc7a:	79fb      	ldrb	r3, [r7, #7]
 800cc7c:	2b1b      	cmp	r3, #27
 800cc7e:	d901      	bls.n	800cc84 <setModemConfig+0x14>
		return false;
 800cc80:	2300      	movs	r3, #0
 800cc82:	e00e      	b.n	800cca2 <setModemConfig+0x32>

	ModemConfig cfg;
	memcpy(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(ModemConfig));
 800cc84:	79fb      	ldrb	r3, [r7, #7]
 800cc86:	00db      	lsls	r3, r3, #3
 800cc88:	4a08      	ldr	r2, [pc, #32]	@ (800ccac <setModemConfig+0x3c>)
 800cc8a:	441a      	add	r2, r3
 800cc8c:	f107 0308 	add.w	r3, r7, #8
 800cc90:	6810      	ldr	r0, [r2, #0]
 800cc92:	6851      	ldr	r1, [r2, #4]
 800cc94:	c303      	stmia	r3!, {r0, r1}
	setModemRegisters(&cfg);
 800cc96:	f107 0308 	add.w	r3, r7, #8
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7ff ffcc 	bl	800cc38 <setModemRegisters>

	return true;
 800cca0:	2301      	movs	r3, #1
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3710      	adds	r7, #16
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	0801d65c 	.word	0x0801d65c

0800ccb0 <setPreambleLength>:

void setPreambleLength(uint16_t bytes)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	80fb      	strh	r3, [r7, #6]
	spiWrite(RH_RF69_REG_2C_PREAMBLEMSB, bytes >> 8);
 800ccba:	88fb      	ldrh	r3, [r7, #6]
 800ccbc:	0a1b      	lsrs	r3, r3, #8
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	202c      	movs	r0, #44	@ 0x2c
 800ccc6:	f7ff fcd5 	bl	800c674 <spiWrite>
	spiWrite(RH_RF69_REG_2D_PREAMBLELSB, bytes & 0xff);
 800ccca:	88fb      	ldrh	r3, [r7, #6]
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	4619      	mov	r1, r3
 800ccd0:	202d      	movs	r0, #45	@ 0x2d
 800ccd2:	f7ff fccf 	bl	800c674 <spiWrite>
}
 800ccd6:	bf00      	nop
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
	...

0800cce0 <setSyncWords>:

void setSyncWords(const uint8_t* syncWords, uint8_t len)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	460b      	mov	r3, r1
 800ccea:	70fb      	strb	r3, [r7, #3]
	uint8_t syncconfig = spiRead(RH_RF69_REG_2E_SYNCCONFIG);
 800ccec:	202e      	movs	r0, #46	@ 0x2e
 800ccee:	f7ff fc93 	bl	800c618 <spiRead>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	73fb      	strb	r3, [r7, #15]

	if (syncWords && len && len <= 4)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d010      	beq.n	800cd1e <setSyncWords+0x3e>
 800ccfc:	78fb      	ldrb	r3, [r7, #3]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d00d      	beq.n	800cd1e <setSyncWords+0x3e>
 800cd02:	78fb      	ldrb	r3, [r7, #3]
 800cd04:	2b04      	cmp	r3, #4
 800cd06:	d80a      	bhi.n	800cd1e <setSyncWords+0x3e>
	{
		spiBurstWrite(RH_RF69_REG_2F_SYNCVALUE1, syncWords, len);
 800cd08:	78fb      	ldrb	r3, [r7, #3]
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	6879      	ldr	r1, [r7, #4]
 800cd0e:	202f      	movs	r0, #47	@ 0x2f
 800cd10:	f7ff fce4 	bl	800c6dc <spiBurstWrite>
		syncconfig |= RH_RF69_SYNCCONFIG_SYNCON;
 800cd14:	7bfb      	ldrb	r3, [r7, #15]
 800cd16:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cd1a:	73fb      	strb	r3, [r7, #15]
 800cd1c:	e003      	b.n	800cd26 <setSyncWords+0x46>
	}
	else
	{
		syncconfig &= ~RH_RF69_SYNCCONFIG_SYNCON;
 800cd1e:	7bfb      	ldrb	r3, [r7, #15]
 800cd20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd24:	73fb      	strb	r3, [r7, #15]
	}
		syncconfig &= ~RH_RF69_SYNCCONFIG_SYNCSIZE;
 800cd26:	7bfb      	ldrb	r3, [r7, #15]
 800cd28:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800cd2c:	73fb      	strb	r3, [r7, #15]
		syncconfig |= (len-1) << 3;
 800cd2e:	78fb      	ldrb	r3, [r7, #3]
 800cd30:	3b01      	subs	r3, #1
 800cd32:	b25b      	sxtb	r3, r3
 800cd34:	00db      	lsls	r3, r3, #3
 800cd36:	b25a      	sxtb	r2, r3
 800cd38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	b25b      	sxtb	r3, r3
 800cd40:	73fb      	strb	r3, [r7, #15]
		safe_printf("syncconfig=%x\n", syncconfig);
 800cd42:	7bfb      	ldrb	r3, [r7, #15]
 800cd44:	4619      	mov	r1, r3
 800cd46:	4806      	ldr	r0, [pc, #24]	@ (800cd60 <setSyncWords+0x80>)
 800cd48:	f7fe fbb6 	bl	800b4b8 <safe_printf>
		spiWrite(RH_RF69_REG_2E_SYNCCONFIG, syncconfig);
 800cd4c:	7bfb      	ldrb	r3, [r7, #15]
 800cd4e:	4619      	mov	r1, r3
 800cd50:	202e      	movs	r0, #46	@ 0x2e
 800cd52:	f7ff fc8f 	bl	800c674 <spiWrite>

}
 800cd56:	bf00      	nop
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	0801d508 	.word	0x0801d508

0800cd64 <setEncryptionKey>:

void setEncryptionKey(uint8_t* key)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
	if (key)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d010      	beq.n	800cd94 <setEncryptionKey+0x30>
	{
		spiBurstWrite(RH_RF69_REG_3E_AESKEY1, key, 16);
 800cd72:	2210      	movs	r2, #16
 800cd74:	6879      	ldr	r1, [r7, #4]
 800cd76:	203e      	movs	r0, #62	@ 0x3e
 800cd78:	f7ff fcb0 	bl	800c6dc <spiBurstWrite>
		spiWrite(RH_RF69_REG_3D_PACKETCONFIG2, spiRead(RH_RF69_REG_3D_PACKETCONFIG2) | RH_RF69_PACKETCONFIG2_AESON);
 800cd7c:	203d      	movs	r0, #61	@ 0x3d
 800cd7e:	f7ff fc4b 	bl	800c618 <spiRead>
 800cd82:	4603      	mov	r3, r0
 800cd84:	f043 0301 	orr.w	r3, r3, #1
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	203d      	movs	r0, #61	@ 0x3d
 800cd8e:	f7ff fc71 	bl	800c674 <spiWrite>
	}
	else
	{
		spiWrite(RH_RF69_REG_3D_PACKETCONFIG2, spiRead(RH_RF69_REG_3D_PACKETCONFIG2) & ~RH_RF69_PACKETCONFIG2_AESON);
	}
}
 800cd92:	e00a      	b.n	800cdaa <setEncryptionKey+0x46>
		spiWrite(RH_RF69_REG_3D_PACKETCONFIG2, spiRead(RH_RF69_REG_3D_PACKETCONFIG2) & ~RH_RF69_PACKETCONFIG2_AESON);
 800cd94:	203d      	movs	r0, #61	@ 0x3d
 800cd96:	f7ff fc3f 	bl	800c618 <spiRead>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	f023 0301 	bic.w	r3, r3, #1
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	4619      	mov	r1, r3
 800cda4:	203d      	movs	r0, #61	@ 0x3d
 800cda6:	f7ff fc65 	bl	800c674 <spiWrite>
}
 800cdaa:	bf00      	nop
 800cdac:	3708      	adds	r7, #8
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
	...

0800cdb4 <available>:

bool available()
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
	// Get the interrupt cause
	uint8_t irqflags2 = spiRead(RH_RF69_REG_28_IRQFLAGS2);
 800cdba:	2028      	movs	r0, #40	@ 0x28
 800cdbc:	f7ff fc2c 	bl	800c618 <spiRead>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	71fb      	strb	r3, [r7, #7]
//		printf("available irqflags2=%x\n", irqflags2);
	// Must look for PAYLOADREADY, not CRCOK, since only PAYLOADREADY occurs _after_ AES decryption
	// has been done
	if (irqflags2 & RH_RF69_IRQFLAGS2_PAYLOADREADY) {
 800cdc4:	79fb      	ldrb	r3, [r7, #7]
 800cdc6:	f003 0304 	and.w	r3, r3, #4
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d018      	beq.n	800ce00 <available+0x4c>
		// A complete message has been received with good CRC
		_lastRssi = -((int8_t)(spiRead(RH_RF69_REG_24_RSSIVALUE) >> 1));
 800cdce:	2024      	movs	r0, #36	@ 0x24
 800cdd0:	f7ff fc22 	bl	800c618 <spiRead>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	085b      	lsrs	r3, r3, #1
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	b25b      	sxtb	r3, r3
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	425b      	negs	r3, r3
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	b21a      	sxth	r2, r3
 800cde4:	4b0a      	ldr	r3, [pc, #40]	@ (800ce10 <available+0x5c>)
 800cde6:	801a      	strh	r2, [r3, #0]
		_lastPreambleTime = HAL_GetTick();
 800cde8:	f003 ffd4 	bl	8010d94 <HAL_GetTick>
 800cdec:	4603      	mov	r3, r0
 800cdee:	4a09      	ldr	r2, [pc, #36]	@ (800ce14 <available+0x60>)
 800cdf0:	6013      	str	r3, [r2, #0]

		setModeIdle();
 800cdf2:	f7ff fe4f 	bl	800ca94 <setModeIdle>
		// Save it in our buffer
		readFifo();
 800cdf6:	f7ff fd19 	bl	800c82c <readFifo>
		safe_printf("PAYLOADREADY\n");
 800cdfa:	4807      	ldr	r0, [pc, #28]	@ (800ce18 <available+0x64>)
 800cdfc:	f7fe fb5c 	bl	800b4b8 <safe_printf>
	}
	setModeRx(); // Make sure we are receiving
 800ce00:	f7ff fe7e 	bl	800cb00 <setModeRx>
	return _rxBufValid;
 800ce04:	4b05      	ldr	r3, [pc, #20]	@ (800ce1c <available+0x68>)
 800ce06:	781b      	ldrb	r3, [r3, #0]
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	20001316 	.word	0x20001316
 800ce14:	2000130c 	.word	0x2000130c
 800ce18:	0801d518 	.word	0x0801d518
 800ce1c:	20001308 	.word	0x20001308

0800ce20 <recv1>:
	return false;
}


bool recv1(uint8_t* buf, uint8_t* len)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
	if (!available())
 800ce2a:	f7ff ffc3 	bl	800cdb4 <available>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	f083 0301 	eor.w	r3, r3, #1
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d001      	beq.n	800ce3e <recv1+0x1e>
	return false;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	e01a      	b.n	800ce74 <recv1+0x54>

	if (buf && len)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d013      	beq.n	800ce6c <recv1+0x4c>
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d010      	beq.n	800ce6c <recv1+0x4c>
	{
	if (*len > _bufLen)
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	781a      	ldrb	r2, [r3, #0]
 800ce4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ce7c <recv1+0x5c>)
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d903      	bls.n	800ce5e <recv1+0x3e>
		*len = _bufLen;
 800ce56:	4b09      	ldr	r3, [pc, #36]	@ (800ce7c <recv1+0x5c>)
 800ce58:	781a      	ldrb	r2, [r3, #0]
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	701a      	strb	r2, [r3, #0]
	memcpy(buf, _buf, *len);
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	461a      	mov	r2, r3
 800ce64:	4906      	ldr	r1, [pc, #24]	@ (800ce80 <recv1+0x60>)
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f00c ff4d 	bl	8019d06 <memcpy>
	}
	_rxBufValid = false; // Got the most recent message
 800ce6c:	4b05      	ldr	r3, [pc, #20]	@ (800ce84 <recv1+0x64>)
 800ce6e:	2200      	movs	r2, #0
 800ce70:	701a      	strb	r2, [r3, #0]
//	  printBuffer("recv:", buf, *len);
	return true;
 800ce72:	2301      	movs	r3, #1
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	200012c8 	.word	0x200012c8
 800ce80:	200012cc 	.word	0x200012cc
 800ce84:	20001308 	.word	0x20001308

0800ce88 <lastRssi>:
{
	return _rxHeaderFlags;
}

int16_t lastRssi()
{
 800ce88:	b480      	push	{r7}
 800ce8a:	af00      	add	r7, sp, #0
	return _lastRssi;
 800ce8c:	4b03      	ldr	r3, [pc, #12]	@ (800ce9c <lastRssi+0x14>)
 800ce8e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr
 800ce9c:	20001316 	.word	0x20001316

0800cea0 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	4603      	mov	r3, r0
 800cea8:	80fb      	strh	r3, [r7, #6]
 800ceaa:	460b      	mov	r3, r1
 800ceac:	80bb      	strh	r3, [r7, #4]
 800ceae:	4613      	mov	r3, r2
 800ceb0:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 800ceb2:	88fb      	ldrh	r3, [r7, #6]
 800ceb4:	88b9      	ldrh	r1, [r7, #4]
 800ceb6:	887a      	ldrh	r2, [r7, #2]
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f000 fe23 	bl	800db04 <ST7735_DrawPixel>
}
 800cebe:	bf00      	nop
 800cec0:	3708      	adds	r7, #8
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800cec6:	b590      	push	{r4, r7, lr}
 800cec8:	b085      	sub	sp, #20
 800ceca:	af02      	add	r7, sp, #8
 800cecc:	4604      	mov	r4, r0
 800cece:	4608      	mov	r0, r1
 800ced0:	4611      	mov	r1, r2
 800ced2:	461a      	mov	r2, r3
 800ced4:	4623      	mov	r3, r4
 800ced6:	80fb      	strh	r3, [r7, #6]
 800ced8:	4603      	mov	r3, r0
 800ceda:	80bb      	strh	r3, [r7, #4]
 800cedc:	460b      	mov	r3, r1
 800cede:	807b      	strh	r3, [r7, #2]
 800cee0:	4613      	mov	r3, r2
 800cee2:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 800cee4:	88f8      	ldrh	r0, [r7, #6]
 800cee6:	88b9      	ldrh	r1, [r7, #4]
 800cee8:	887a      	ldrh	r2, [r7, #2]
 800ceea:	883c      	ldrh	r4, [r7, #0]
 800ceec:	8b3b      	ldrh	r3, [r7, #24]
 800ceee:	9300      	str	r3, [sp, #0]
 800cef0:	4623      	mov	r3, r4
 800cef2:	f000 ff11 	bl	800dd18 <ST7735_FillRectangle>
}
 800cef6:	bf00      	nop
 800cef8:	370c      	adds	r7, #12
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd90      	pop	{r4, r7, pc}

0800cefe <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b082      	sub	sp, #8
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	4603      	mov	r3, r0
 800cf06:	80fb      	strh	r3, [r7, #6]
 800cf08:	460b      	mov	r3, r1
 800cf0a:	80bb      	strh	r3, [r7, #4]
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 800cf10:	887a      	ldrh	r2, [r7, #2]
 800cf12:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800cf16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7ff ffc0 	bl	800cea0 <drawPixel>
}
 800cf20:	bf00      	nop
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800cf28:	b590      	push	{r4, r7, lr}
 800cf2a:	b089      	sub	sp, #36	@ 0x24
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	4604      	mov	r4, r0
 800cf30:	4608      	mov	r0, r1
 800cf32:	4611      	mov	r1, r2
 800cf34:	461a      	mov	r2, r3
 800cf36:	4623      	mov	r3, r4
 800cf38:	80fb      	strh	r3, [r7, #6]
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	80bb      	strh	r3, [r7, #4]
 800cf3e:	460b      	mov	r3, r1
 800cf40:	807b      	strh	r3, [r7, #2]
 800cf42:	4613      	mov	r3, r2
 800cf44:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800cf46:	f9b7 2000 	ldrsh.w	r2, [r7]
 800cf4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800cf4e:	1ad3      	subs	r3, r2, r3
 800cf50:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800cf54:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800cf58:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800cf5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf60:	1acb      	subs	r3, r1, r3
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	bfb8      	it	lt
 800cf66:	425b      	neglt	r3, r3
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	bfcc      	ite	gt
 800cf6c:	2301      	movgt	r3, #1
 800cf6e:	2300      	movle	r3, #0
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	837b      	strh	r3, [r7, #26]
    if (steep) {
 800cf74:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d00b      	beq.n	800cf94 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 800cf7c:	88fb      	ldrh	r3, [r7, #6]
 800cf7e:	833b      	strh	r3, [r7, #24]
 800cf80:	88bb      	ldrh	r3, [r7, #4]
 800cf82:	80fb      	strh	r3, [r7, #6]
 800cf84:	8b3b      	ldrh	r3, [r7, #24]
 800cf86:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 800cf88:	887b      	ldrh	r3, [r7, #2]
 800cf8a:	82fb      	strh	r3, [r7, #22]
 800cf8c:	883b      	ldrh	r3, [r7, #0]
 800cf8e:	807b      	strh	r3, [r7, #2]
 800cf90:	8afb      	ldrh	r3, [r7, #22]
 800cf92:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800cf94:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cf98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	dd0b      	ble.n	800cfb8 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 800cfa0:	88fb      	ldrh	r3, [r7, #6]
 800cfa2:	82bb      	strh	r3, [r7, #20]
 800cfa4:	887b      	ldrh	r3, [r7, #2]
 800cfa6:	80fb      	strh	r3, [r7, #6]
 800cfa8:	8abb      	ldrh	r3, [r7, #20]
 800cfaa:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 800cfac:	88bb      	ldrh	r3, [r7, #4]
 800cfae:	827b      	strh	r3, [r7, #18]
 800cfb0:	883b      	ldrh	r3, [r7, #0]
 800cfb2:	80bb      	strh	r3, [r7, #4]
 800cfb4:	8a7b      	ldrh	r3, [r7, #18]
 800cfb6:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 800cfb8:	887a      	ldrh	r2, [r7, #2]
 800cfba:	88fb      	ldrh	r3, [r7, #6]
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 800cfc2:	f9b7 2000 	ldrsh.w	r2, [r7]
 800cfc6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800cfca:	1ad3      	subs	r3, r2, r3
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	bfb8      	it	lt
 800cfd0:	425b      	neglt	r3, r3
 800cfd2:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 800cfd4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800cfd8:	0fda      	lsrs	r2, r3, #31
 800cfda:	4413      	add	r3, r2
 800cfdc:	105b      	asrs	r3, r3, #1
 800cfde:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 800cfe0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800cfe4:	f9b7 3000 	ldrsh.w	r3, [r7]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	da02      	bge.n	800cff2 <writeLine+0xca>
        ystep = 1;
 800cfec:	2301      	movs	r3, #1
 800cfee:	83bb      	strh	r3, [r7, #28]
 800cff0:	e031      	b.n	800d056 <writeLine+0x12e>
    } else {
        ystep = -1;
 800cff2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cff6:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 800cff8:	e02d      	b.n	800d056 <writeLine+0x12e>
        if (steep) {
 800cffa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d008      	beq.n	800d014 <writeLine+0xec>
            writePixel(y0, x0, color);
 800d002:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800d004:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800d008:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7ff ff76 	bl	800cefe <writePixel>
 800d012:	e007      	b.n	800d024 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 800d014:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800d016:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d01a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d01e:	4618      	mov	r0, r3
 800d020:	f7ff ff6d 	bl	800cefe <writePixel>
        }
        err -= dy;
 800d024:	8bfa      	ldrh	r2, [r7, #30]
 800d026:	89fb      	ldrh	r3, [r7, #14]
 800d028:	1ad3      	subs	r3, r2, r3
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 800d02e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d032:	2b00      	cmp	r3, #0
 800d034:	da09      	bge.n	800d04a <writeLine+0x122>
            y0 += ystep;
 800d036:	88ba      	ldrh	r2, [r7, #4]
 800d038:	8bbb      	ldrh	r3, [r7, #28]
 800d03a:	4413      	add	r3, r2
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	80bb      	strh	r3, [r7, #4]
            err += dx;
 800d040:	8bfa      	ldrh	r2, [r7, #30]
 800d042:	8a3b      	ldrh	r3, [r7, #16]
 800d044:	4413      	add	r3, r2
 800d046:	b29b      	uxth	r3, r3
 800d048:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 800d04a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d04e:	b29b      	uxth	r3, r3
 800d050:	3301      	adds	r3, #1
 800d052:	b29b      	uxth	r3, r3
 800d054:	80fb      	strh	r3, [r7, #6]
 800d056:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d05a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d05e:	429a      	cmp	r2, r3
 800d060:	ddcb      	ble.n	800cffa <writeLine+0xd2>
        }
    }
}
 800d062:	bf00      	nop
 800d064:	bf00      	nop
 800d066:	3724      	adds	r7, #36	@ 0x24
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd90      	pop	{r4, r7, pc}

0800d06c <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800d06c:	b590      	push	{r4, r7, lr}
 800d06e:	b085      	sub	sp, #20
 800d070:	af02      	add	r7, sp, #8
 800d072:	4604      	mov	r4, r0
 800d074:	4608      	mov	r0, r1
 800d076:	4611      	mov	r1, r2
 800d078:	461a      	mov	r2, r3
 800d07a:	4623      	mov	r3, r4
 800d07c:	80fb      	strh	r3, [r7, #6]
 800d07e:	4603      	mov	r3, r0
 800d080:	80bb      	strh	r3, [r7, #4]
 800d082:	460b      	mov	r3, r1
 800d084:	807b      	strh	r3, [r7, #2]
 800d086:	4613      	mov	r3, r2
 800d088:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 800d08a:	88ba      	ldrh	r2, [r7, #4]
 800d08c:	887b      	ldrh	r3, [r7, #2]
 800d08e:	4413      	add	r3, r2
 800d090:	b29b      	uxth	r3, r3
 800d092:	3b01      	subs	r3, #1
 800d094:	b29b      	uxth	r3, r3
 800d096:	b21c      	sxth	r4, r3
 800d098:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d09c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d0a0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800d0a4:	883b      	ldrh	r3, [r7, #0]
 800d0a6:	9300      	str	r3, [sp, #0]
 800d0a8:	4623      	mov	r3, r4
 800d0aa:	f7ff ff3d 	bl	800cf28 <writeLine>
}
 800d0ae:	bf00      	nop
 800d0b0:	370c      	adds	r7, #12
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd90      	pop	{r4, r7, pc}

0800d0b6 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800d0b6:	b590      	push	{r4, r7, lr}
 800d0b8:	b085      	sub	sp, #20
 800d0ba:	af02      	add	r7, sp, #8
 800d0bc:	4604      	mov	r4, r0
 800d0be:	4608      	mov	r0, r1
 800d0c0:	4611      	mov	r1, r2
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	4623      	mov	r3, r4
 800d0c6:	80fb      	strh	r3, [r7, #6]
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	80bb      	strh	r3, [r7, #4]
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	807b      	strh	r3, [r7, #2]
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 800d0d4:	88fa      	ldrh	r2, [r7, #6]
 800d0d6:	887b      	ldrh	r3, [r7, #2]
 800d0d8:	4413      	add	r3, r2
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	3b01      	subs	r3, #1
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	b21a      	sxth	r2, r3
 800d0e2:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800d0e6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d0ea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800d0ee:	883b      	ldrh	r3, [r7, #0]
 800d0f0:	9300      	str	r3, [sp, #0]
 800d0f2:	4623      	mov	r3, r4
 800d0f4:	f7ff ff18 	bl	800cf28 <writeLine>
}
 800d0f8:	bf00      	nop
 800d0fa:	370c      	adds	r7, #12
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd90      	pop	{r4, r7, pc}

0800d100 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800d100:	b590      	push	{r4, r7, lr}
 800d102:	b087      	sub	sp, #28
 800d104:	af02      	add	r7, sp, #8
 800d106:	4604      	mov	r4, r0
 800d108:	4608      	mov	r0, r1
 800d10a:	4611      	mov	r1, r2
 800d10c:	461a      	mov	r2, r3
 800d10e:	4623      	mov	r3, r4
 800d110:	80fb      	strh	r3, [r7, #6]
 800d112:	4603      	mov	r3, r0
 800d114:	80bb      	strh	r3, [r7, #4]
 800d116:	460b      	mov	r3, r1
 800d118:	807b      	strh	r3, [r7, #2]
 800d11a:	4613      	mov	r3, r2
 800d11c:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 800d11e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d122:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d126:	429a      	cmp	r2, r3
 800d128:	d11a      	bne.n	800d160 <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 800d12a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d12e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800d132:	429a      	cmp	r2, r3
 800d134:	dd05      	ble.n	800d142 <drawLine+0x42>
 800d136:	88bb      	ldrh	r3, [r7, #4]
 800d138:	81bb      	strh	r3, [r7, #12]
 800d13a:	883b      	ldrh	r3, [r7, #0]
 800d13c:	80bb      	strh	r3, [r7, #4]
 800d13e:	89bb      	ldrh	r3, [r7, #12]
 800d140:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 800d142:	883a      	ldrh	r2, [r7, #0]
 800d144:	88bb      	ldrh	r3, [r7, #4]
 800d146:	1ad3      	subs	r3, r2, r3
 800d148:	b29b      	uxth	r3, r3
 800d14a:	3301      	adds	r3, #1
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	b21a      	sxth	r2, r3
 800d150:	8c3b      	ldrh	r3, [r7, #32]
 800d152:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d156:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800d15a:	f7ff ff87 	bl	800d06c <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 800d15e:	e02d      	b.n	800d1bc <drawLine+0xbc>
    } else if(y0 == y1){
 800d160:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d164:	f9b7 3000 	ldrsh.w	r3, [r7]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d11a      	bne.n	800d1a2 <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 800d16c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d170:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d174:	429a      	cmp	r2, r3
 800d176:	dd05      	ble.n	800d184 <drawLine+0x84>
 800d178:	88fb      	ldrh	r3, [r7, #6]
 800d17a:	81fb      	strh	r3, [r7, #14]
 800d17c:	887b      	ldrh	r3, [r7, #2]
 800d17e:	80fb      	strh	r3, [r7, #6]
 800d180:	89fb      	ldrh	r3, [r7, #14]
 800d182:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 800d184:	887a      	ldrh	r2, [r7, #2]
 800d186:	88fb      	ldrh	r3, [r7, #6]
 800d188:	1ad3      	subs	r3, r2, r3
 800d18a:	b29b      	uxth	r3, r3
 800d18c:	3301      	adds	r3, #1
 800d18e:	b29b      	uxth	r3, r3
 800d190:	b21a      	sxth	r2, r3
 800d192:	8c3b      	ldrh	r3, [r7, #32]
 800d194:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d198:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800d19c:	f7ff ff8b 	bl	800d0b6 <drawFastHLine>
}
 800d1a0:	e00c      	b.n	800d1bc <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 800d1a2:	f9b7 4000 	ldrsh.w	r4, [r7]
 800d1a6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d1aa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d1ae:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800d1b2:	8c3b      	ldrh	r3, [r7, #32]
 800d1b4:	9300      	str	r3, [sp, #0]
 800d1b6:	4623      	mov	r3, r4
 800d1b8:	f7ff feb6 	bl	800cf28 <writeLine>
}
 800d1bc:	bf00      	nop
 800d1be:	3714      	adds	r7, #20
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd90      	pop	{r4, r7, pc}

0800d1c4 <drawCircleHelper>:
        writePixel(x0 - y, y0 - x, color);
    }
}

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 800d1c4:	b590      	push	{r4, r7, lr}
 800d1c6:	b087      	sub	sp, #28
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	4604      	mov	r4, r0
 800d1cc:	4608      	mov	r0, r1
 800d1ce:	4611      	mov	r1, r2
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	4623      	mov	r3, r4
 800d1d4:	80fb      	strh	r3, [r7, #6]
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	80bb      	strh	r3, [r7, #4]
 800d1da:	460b      	mov	r3, r1
 800d1dc:	807b      	strh	r3, [r7, #2]
 800d1de:	4613      	mov	r3, r2
 800d1e0:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 800d1e2:	887b      	ldrh	r3, [r7, #2]
 800d1e4:	f1c3 0301 	rsb	r3, r3, #1
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800d1f0:	887b      	ldrh	r3, [r7, #2]
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	03d2      	lsls	r2, r2, #15
 800d1f6:	1ad3      	subs	r3, r2, r3
 800d1f8:	005b      	lsls	r3, r3, #1
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800d1fe:	2300      	movs	r3, #0
 800d200:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 800d202:	887b      	ldrh	r3, [r7, #2]
 800d204:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 800d206:	e0a5      	b.n	800d354 <drawCircleHelper+0x190>
        if (f >= 0) {
 800d208:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	db0e      	blt.n	800d22e <drawCircleHelper+0x6a>
            y--;
 800d210:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d214:	b29b      	uxth	r3, r3
 800d216:	3b01      	subs	r3, #1
 800d218:	b29b      	uxth	r3, r3
 800d21a:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800d21c:	8a7b      	ldrh	r3, [r7, #18]
 800d21e:	3302      	adds	r3, #2
 800d220:	b29b      	uxth	r3, r3
 800d222:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 800d224:	8afa      	ldrh	r2, [r7, #22]
 800d226:	8a7b      	ldrh	r3, [r7, #18]
 800d228:	4413      	add	r3, r2
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800d22e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d232:	b29b      	uxth	r3, r3
 800d234:	3301      	adds	r3, #1
 800d236:	b29b      	uxth	r3, r3
 800d238:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800d23a:	8abb      	ldrh	r3, [r7, #20]
 800d23c:	3302      	adds	r3, #2
 800d23e:	b29b      	uxth	r3, r3
 800d240:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800d242:	8afa      	ldrh	r2, [r7, #22]
 800d244:	8abb      	ldrh	r3, [r7, #20]
 800d246:	4413      	add	r3, r2
 800d248:	b29b      	uxth	r3, r3
 800d24a:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 800d24c:	787b      	ldrb	r3, [r7, #1]
 800d24e:	f003 0304 	and.w	r3, r3, #4
 800d252:	2b00      	cmp	r3, #0
 800d254:	d01b      	beq.n	800d28e <drawCircleHelper+0xca>
            writePixel(x0 + x, y0 + y, color);
 800d256:	88fa      	ldrh	r2, [r7, #6]
 800d258:	8a3b      	ldrh	r3, [r7, #16]
 800d25a:	4413      	add	r3, r2
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	b218      	sxth	r0, r3
 800d260:	88ba      	ldrh	r2, [r7, #4]
 800d262:	89fb      	ldrh	r3, [r7, #14]
 800d264:	4413      	add	r3, r2
 800d266:	b29b      	uxth	r3, r3
 800d268:	b21b      	sxth	r3, r3
 800d26a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d26c:	4619      	mov	r1, r3
 800d26e:	f7ff fe46 	bl	800cefe <writePixel>
            writePixel(x0 + y, y0 + x, color);
 800d272:	88fa      	ldrh	r2, [r7, #6]
 800d274:	89fb      	ldrh	r3, [r7, #14]
 800d276:	4413      	add	r3, r2
 800d278:	b29b      	uxth	r3, r3
 800d27a:	b218      	sxth	r0, r3
 800d27c:	88ba      	ldrh	r2, [r7, #4]
 800d27e:	8a3b      	ldrh	r3, [r7, #16]
 800d280:	4413      	add	r3, r2
 800d282:	b29b      	uxth	r3, r3
 800d284:	b21b      	sxth	r3, r3
 800d286:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d288:	4619      	mov	r1, r3
 800d28a:	f7ff fe38 	bl	800cefe <writePixel>
        }
        if (cornername & 0x2) {
 800d28e:	787b      	ldrb	r3, [r7, #1]
 800d290:	f003 0302 	and.w	r3, r3, #2
 800d294:	2b00      	cmp	r3, #0
 800d296:	d01b      	beq.n	800d2d0 <drawCircleHelper+0x10c>
            writePixel(x0 + x, y0 - y, color);
 800d298:	88fa      	ldrh	r2, [r7, #6]
 800d29a:	8a3b      	ldrh	r3, [r7, #16]
 800d29c:	4413      	add	r3, r2
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	b218      	sxth	r0, r3
 800d2a2:	88ba      	ldrh	r2, [r7, #4]
 800d2a4:	89fb      	ldrh	r3, [r7, #14]
 800d2a6:	1ad3      	subs	r3, r2, r3
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	b21b      	sxth	r3, r3
 800d2ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	f7ff fe25 	bl	800cefe <writePixel>
            writePixel(x0 + y, y0 - x, color);
 800d2b4:	88fa      	ldrh	r2, [r7, #6]
 800d2b6:	89fb      	ldrh	r3, [r7, #14]
 800d2b8:	4413      	add	r3, r2
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	b218      	sxth	r0, r3
 800d2be:	88ba      	ldrh	r2, [r7, #4]
 800d2c0:	8a3b      	ldrh	r3, [r7, #16]
 800d2c2:	1ad3      	subs	r3, r2, r3
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	b21b      	sxth	r3, r3
 800d2c8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	f7ff fe17 	bl	800cefe <writePixel>
        }
        if (cornername & 0x8) {
 800d2d0:	787b      	ldrb	r3, [r7, #1]
 800d2d2:	f003 0308 	and.w	r3, r3, #8
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d01b      	beq.n	800d312 <drawCircleHelper+0x14e>
            writePixel(x0 - y, y0 + x, color);
 800d2da:	88fa      	ldrh	r2, [r7, #6]
 800d2dc:	89fb      	ldrh	r3, [r7, #14]
 800d2de:	1ad3      	subs	r3, r2, r3
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	b218      	sxth	r0, r3
 800d2e4:	88ba      	ldrh	r2, [r7, #4]
 800d2e6:	8a3b      	ldrh	r3, [r7, #16]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	b21b      	sxth	r3, r3
 800d2ee:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	f7ff fe04 	bl	800cefe <writePixel>
            writePixel(x0 - x, y0 + y, color);
 800d2f6:	88fa      	ldrh	r2, [r7, #6]
 800d2f8:	8a3b      	ldrh	r3, [r7, #16]
 800d2fa:	1ad3      	subs	r3, r2, r3
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	b218      	sxth	r0, r3
 800d300:	88ba      	ldrh	r2, [r7, #4]
 800d302:	89fb      	ldrh	r3, [r7, #14]
 800d304:	4413      	add	r3, r2
 800d306:	b29b      	uxth	r3, r3
 800d308:	b21b      	sxth	r3, r3
 800d30a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d30c:	4619      	mov	r1, r3
 800d30e:	f7ff fdf6 	bl	800cefe <writePixel>
        }
        if (cornername & 0x1) {
 800d312:	787b      	ldrb	r3, [r7, #1]
 800d314:	f003 0301 	and.w	r3, r3, #1
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d01b      	beq.n	800d354 <drawCircleHelper+0x190>
            writePixel(x0 - y, y0 - x, color);
 800d31c:	88fa      	ldrh	r2, [r7, #6]
 800d31e:	89fb      	ldrh	r3, [r7, #14]
 800d320:	1ad3      	subs	r3, r2, r3
 800d322:	b29b      	uxth	r3, r3
 800d324:	b218      	sxth	r0, r3
 800d326:	88ba      	ldrh	r2, [r7, #4]
 800d328:	8a3b      	ldrh	r3, [r7, #16]
 800d32a:	1ad3      	subs	r3, r2, r3
 800d32c:	b29b      	uxth	r3, r3
 800d32e:	b21b      	sxth	r3, r3
 800d330:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d332:	4619      	mov	r1, r3
 800d334:	f7ff fde3 	bl	800cefe <writePixel>
            writePixel(x0 - x, y0 - y, color);
 800d338:	88fa      	ldrh	r2, [r7, #6]
 800d33a:	8a3b      	ldrh	r3, [r7, #16]
 800d33c:	1ad3      	subs	r3, r2, r3
 800d33e:	b29b      	uxth	r3, r3
 800d340:	b218      	sxth	r0, r3
 800d342:	88ba      	ldrh	r2, [r7, #4]
 800d344:	89fb      	ldrh	r3, [r7, #14]
 800d346:	1ad3      	subs	r3, r2, r3
 800d348:	b29b      	uxth	r3, r3
 800d34a:	b21b      	sxth	r3, r3
 800d34c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d34e:	4619      	mov	r1, r3
 800d350:	f7ff fdd5 	bl	800cefe <writePixel>
    while (x<y) {
 800d354:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800d358:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	f6ff af53 	blt.w	800d208 <drawCircleHelper+0x44>
        }
    }
}
 800d362:	bf00      	nop
 800d364:	bf00      	nop
 800d366:	371c      	adds	r7, #28
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd90      	pop	{r4, r7, pc}

0800d36c <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 800d36c:	b590      	push	{r4, r7, lr}
 800d36e:	b087      	sub	sp, #28
 800d370:	af00      	add	r7, sp, #0
 800d372:	4604      	mov	r4, r0
 800d374:	4608      	mov	r0, r1
 800d376:	4611      	mov	r1, r2
 800d378:	461a      	mov	r2, r3
 800d37a:	4623      	mov	r3, r4
 800d37c:	80fb      	strh	r3, [r7, #6]
 800d37e:	4603      	mov	r3, r0
 800d380:	80bb      	strh	r3, [r7, #4]
 800d382:	460b      	mov	r3, r1
 800d384:	807b      	strh	r3, [r7, #2]
 800d386:	4613      	mov	r3, r2
 800d388:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 800d38a:	887b      	ldrh	r3, [r7, #2]
 800d38c:	f1c3 0301 	rsb	r3, r3, #1
 800d390:	b29b      	uxth	r3, r3
 800d392:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 800d394:	2301      	movs	r3, #1
 800d396:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800d398:	887b      	ldrh	r3, [r7, #2]
 800d39a:	461a      	mov	r2, r3
 800d39c:	03d2      	lsls	r2, r2, #15
 800d39e:	1ad3      	subs	r3, r2, r3
 800d3a0:	005b      	lsls	r3, r3, #1
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 800d3aa:	887b      	ldrh	r3, [r7, #2]
 800d3ac:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 800d3ae:	8a3b      	ldrh	r3, [r7, #16]
 800d3b0:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 800d3b2:	89fb      	ldrh	r3, [r7, #14]
 800d3b4:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 800d3b6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	3301      	adds	r3, #1
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	853b      	strh	r3, [r7, #40]	@ 0x28

    while(x < y) {
 800d3c2:	e095      	b.n	800d4f0 <fillCircleHelper+0x184>
        if (f >= 0) {
 800d3c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	db0e      	blt.n	800d3ea <fillCircleHelper+0x7e>
            y--;
 800d3cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d3d0:	b29b      	uxth	r3, r3
 800d3d2:	3b01      	subs	r3, #1
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800d3d8:	8a7b      	ldrh	r3, [r7, #18]
 800d3da:	3302      	adds	r3, #2
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 800d3e0:	8afa      	ldrh	r2, [r7, #22]
 800d3e2:	8a7b      	ldrh	r3, [r7, #18]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800d3ea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	b29b      	uxth	r3, r3
 800d3f4:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800d3f6:	8abb      	ldrh	r3, [r7, #20]
 800d3f8:	3302      	adds	r3, #2
 800d3fa:	b29b      	uxth	r3, r3
 800d3fc:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800d3fe:	8afa      	ldrh	r2, [r7, #22]
 800d400:	8abb      	ldrh	r3, [r7, #20]
 800d402:	4413      	add	r3, r2
 800d404:	b29b      	uxth	r3, r3
 800d406:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 800d408:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d40c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d410:	429a      	cmp	r2, r3
 800d412:	db31      	blt.n	800d478 <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 800d414:	787b      	ldrb	r3, [r7, #1]
 800d416:	f003 0301 	and.w	r3, r3, #1
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d013      	beq.n	800d446 <fillCircleHelper+0xda>
 800d41e:	88fa      	ldrh	r2, [r7, #6]
 800d420:	8a3b      	ldrh	r3, [r7, #16]
 800d422:	4413      	add	r3, r2
 800d424:	b29b      	uxth	r3, r3
 800d426:	b218      	sxth	r0, r3
 800d428:	88ba      	ldrh	r2, [r7, #4]
 800d42a:	89fb      	ldrh	r3, [r7, #14]
 800d42c:	1ad3      	subs	r3, r2, r3
 800d42e:	b29b      	uxth	r3, r3
 800d430:	b219      	sxth	r1, r3
 800d432:	89fb      	ldrh	r3, [r7, #14]
 800d434:	005b      	lsls	r3, r3, #1
 800d436:	b29a      	uxth	r2, r3
 800d438:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d43a:	4413      	add	r3, r2
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	b21a      	sxth	r2, r3
 800d440:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d442:	f7ff fe13 	bl	800d06c <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 800d446:	787b      	ldrb	r3, [r7, #1]
 800d448:	f003 0302 	and.w	r3, r3, #2
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d013      	beq.n	800d478 <fillCircleHelper+0x10c>
 800d450:	88fa      	ldrh	r2, [r7, #6]
 800d452:	8a3b      	ldrh	r3, [r7, #16]
 800d454:	1ad3      	subs	r3, r2, r3
 800d456:	b29b      	uxth	r3, r3
 800d458:	b218      	sxth	r0, r3
 800d45a:	88ba      	ldrh	r2, [r7, #4]
 800d45c:	89fb      	ldrh	r3, [r7, #14]
 800d45e:	1ad3      	subs	r3, r2, r3
 800d460:	b29b      	uxth	r3, r3
 800d462:	b219      	sxth	r1, r3
 800d464:	89fb      	ldrh	r3, [r7, #14]
 800d466:	005b      	lsls	r3, r3, #1
 800d468:	b29a      	uxth	r2, r3
 800d46a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d46c:	4413      	add	r3, r2
 800d46e:	b29b      	uxth	r3, r3
 800d470:	b21a      	sxth	r2, r3
 800d472:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d474:	f7ff fdfa 	bl	800d06c <drawFastVLine>
        }
        if(y != py) {
 800d478:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d47c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d480:	429a      	cmp	r2, r3
 800d482:	d033      	beq.n	800d4ec <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 800d484:	787b      	ldrb	r3, [r7, #1]
 800d486:	f003 0301 	and.w	r3, r3, #1
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d013      	beq.n	800d4b6 <fillCircleHelper+0x14a>
 800d48e:	88fa      	ldrh	r2, [r7, #6]
 800d490:	897b      	ldrh	r3, [r7, #10]
 800d492:	4413      	add	r3, r2
 800d494:	b29b      	uxth	r3, r3
 800d496:	b218      	sxth	r0, r3
 800d498:	88ba      	ldrh	r2, [r7, #4]
 800d49a:	89bb      	ldrh	r3, [r7, #12]
 800d49c:	1ad3      	subs	r3, r2, r3
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	b219      	sxth	r1, r3
 800d4a2:	89bb      	ldrh	r3, [r7, #12]
 800d4a4:	005b      	lsls	r3, r3, #1
 800d4a6:	b29a      	uxth	r2, r3
 800d4a8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d4aa:	4413      	add	r3, r2
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	b21a      	sxth	r2, r3
 800d4b0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d4b2:	f7ff fddb 	bl	800d06c <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 800d4b6:	787b      	ldrb	r3, [r7, #1]
 800d4b8:	f003 0302 	and.w	r3, r3, #2
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d013      	beq.n	800d4e8 <fillCircleHelper+0x17c>
 800d4c0:	88fa      	ldrh	r2, [r7, #6]
 800d4c2:	897b      	ldrh	r3, [r7, #10]
 800d4c4:	1ad3      	subs	r3, r2, r3
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	b218      	sxth	r0, r3
 800d4ca:	88ba      	ldrh	r2, [r7, #4]
 800d4cc:	89bb      	ldrh	r3, [r7, #12]
 800d4ce:	1ad3      	subs	r3, r2, r3
 800d4d0:	b29b      	uxth	r3, r3
 800d4d2:	b219      	sxth	r1, r3
 800d4d4:	89bb      	ldrh	r3, [r7, #12]
 800d4d6:	005b      	lsls	r3, r3, #1
 800d4d8:	b29a      	uxth	r2, r3
 800d4da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d4dc:	4413      	add	r3, r2
 800d4de:	b29b      	uxth	r3, r3
 800d4e0:	b21a      	sxth	r2, r3
 800d4e2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d4e4:	f7ff fdc2 	bl	800d06c <drawFastVLine>
            py = y;
 800d4e8:	89fb      	ldrh	r3, [r7, #14]
 800d4ea:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 800d4ec:	8a3b      	ldrh	r3, [r7, #16]
 800d4ee:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 800d4f0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800d4f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	f6ff af63 	blt.w	800d3c4 <fillCircleHelper+0x58>
    }
}
 800d4fe:	bf00      	nop
 800d500:	bf00      	nop
 800d502:	371c      	adds	r7, #28
 800d504:	46bd      	mov	sp, r7
 800d506:	bd90      	pop	{r4, r7, pc}

0800d508 <drawRoundRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 800d508:	b590      	push	{r4, r7, lr}
 800d50a:	b087      	sub	sp, #28
 800d50c:	af02      	add	r7, sp, #8
 800d50e:	4604      	mov	r4, r0
 800d510:	4608      	mov	r0, r1
 800d512:	4611      	mov	r1, r2
 800d514:	461a      	mov	r2, r3
 800d516:	4623      	mov	r3, r4
 800d518:	80fb      	strh	r3, [r7, #6]
 800d51a:	4603      	mov	r3, r0
 800d51c:	80bb      	strh	r3, [r7, #4]
 800d51e:	460b      	mov	r3, r1
 800d520:	807b      	strh	r3, [r7, #2]
 800d522:	4613      	mov	r3, r2
 800d524:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 800d526:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d52a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d52e:	4293      	cmp	r3, r2
 800d530:	bfa8      	it	ge
 800d532:	4613      	movge	r3, r2
 800d534:	b21b      	sxth	r3, r3
 800d536:	0fda      	lsrs	r2, r3, #31
 800d538:	4413      	add	r3, r2
 800d53a:	105b      	asrs	r3, r3, #1
 800d53c:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 800d53e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d546:	429a      	cmp	r2, r3
 800d548:	dd01      	ble.n	800d54e <drawRoundRect+0x46>
 800d54a:	89fb      	ldrh	r3, [r7, #14]
 800d54c:	843b      	strh	r3, [r7, #32]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 800d54e:	88fa      	ldrh	r2, [r7, #6]
 800d550:	8c3b      	ldrh	r3, [r7, #32]
 800d552:	4413      	add	r3, r2
 800d554:	b29b      	uxth	r3, r3
 800d556:	b218      	sxth	r0, r3
 800d558:	887a      	ldrh	r2, [r7, #2]
 800d55a:	8c3b      	ldrh	r3, [r7, #32]
 800d55c:	005b      	lsls	r3, r3, #1
 800d55e:	b29b      	uxth	r3, r3
 800d560:	1ad3      	subs	r3, r2, r3
 800d562:	b29b      	uxth	r3, r3
 800d564:	b21a      	sxth	r2, r3
 800d566:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d568:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d56c:	f7ff fda3 	bl	800d0b6 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 800d570:	88fa      	ldrh	r2, [r7, #6]
 800d572:	8c3b      	ldrh	r3, [r7, #32]
 800d574:	4413      	add	r3, r2
 800d576:	b29b      	uxth	r3, r3
 800d578:	b218      	sxth	r0, r3
 800d57a:	88ba      	ldrh	r2, [r7, #4]
 800d57c:	883b      	ldrh	r3, [r7, #0]
 800d57e:	4413      	add	r3, r2
 800d580:	b29b      	uxth	r3, r3
 800d582:	3b01      	subs	r3, #1
 800d584:	b29b      	uxth	r3, r3
 800d586:	b219      	sxth	r1, r3
 800d588:	887a      	ldrh	r2, [r7, #2]
 800d58a:	8c3b      	ldrh	r3, [r7, #32]
 800d58c:	005b      	lsls	r3, r3, #1
 800d58e:	b29b      	uxth	r3, r3
 800d590:	1ad3      	subs	r3, r2, r3
 800d592:	b29b      	uxth	r3, r3
 800d594:	b21a      	sxth	r2, r3
 800d596:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d598:	f7ff fd8d 	bl	800d0b6 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 800d59c:	88ba      	ldrh	r2, [r7, #4]
 800d59e:	8c3b      	ldrh	r3, [r7, #32]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	b219      	sxth	r1, r3
 800d5a6:	883a      	ldrh	r2, [r7, #0]
 800d5a8:	8c3b      	ldrh	r3, [r7, #32]
 800d5aa:	005b      	lsls	r3, r3, #1
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	1ad3      	subs	r3, r2, r3
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	b21a      	sxth	r2, r3
 800d5b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d5b6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800d5ba:	f7ff fd57 	bl	800d06c <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 800d5be:	88fa      	ldrh	r2, [r7, #6]
 800d5c0:	887b      	ldrh	r3, [r7, #2]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	3b01      	subs	r3, #1
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	b218      	sxth	r0, r3
 800d5cc:	88ba      	ldrh	r2, [r7, #4]
 800d5ce:	8c3b      	ldrh	r3, [r7, #32]
 800d5d0:	4413      	add	r3, r2
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	b219      	sxth	r1, r3
 800d5d6:	883a      	ldrh	r2, [r7, #0]
 800d5d8:	8c3b      	ldrh	r3, [r7, #32]
 800d5da:	005b      	lsls	r3, r3, #1
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	1ad3      	subs	r3, r2, r3
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	b21a      	sxth	r2, r3
 800d5e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d5e6:	f7ff fd41 	bl	800d06c <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 800d5ea:	88fa      	ldrh	r2, [r7, #6]
 800d5ec:	8c3b      	ldrh	r3, [r7, #32]
 800d5ee:	4413      	add	r3, r2
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	b218      	sxth	r0, r3
 800d5f4:	88ba      	ldrh	r2, [r7, #4]
 800d5f6:	8c3b      	ldrh	r3, [r7, #32]
 800d5f8:	4413      	add	r3, r2
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	b219      	sxth	r1, r3
 800d5fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d602:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d604:	9300      	str	r3, [sp, #0]
 800d606:	2301      	movs	r3, #1
 800d608:	f7ff fddc 	bl	800d1c4 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 800d60c:	88fa      	ldrh	r2, [r7, #6]
 800d60e:	887b      	ldrh	r3, [r7, #2]
 800d610:	4413      	add	r3, r2
 800d612:	b29a      	uxth	r2, r3
 800d614:	8c3b      	ldrh	r3, [r7, #32]
 800d616:	1ad3      	subs	r3, r2, r3
 800d618:	b29b      	uxth	r3, r3
 800d61a:	3b01      	subs	r3, #1
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	b218      	sxth	r0, r3
 800d620:	88ba      	ldrh	r2, [r7, #4]
 800d622:	8c3b      	ldrh	r3, [r7, #32]
 800d624:	4413      	add	r3, r2
 800d626:	b29b      	uxth	r3, r3
 800d628:	b219      	sxth	r1, r3
 800d62a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d62e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d630:	9300      	str	r3, [sp, #0]
 800d632:	2302      	movs	r3, #2
 800d634:	f7ff fdc6 	bl	800d1c4 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 800d638:	88fa      	ldrh	r2, [r7, #6]
 800d63a:	887b      	ldrh	r3, [r7, #2]
 800d63c:	4413      	add	r3, r2
 800d63e:	b29a      	uxth	r2, r3
 800d640:	8c3b      	ldrh	r3, [r7, #32]
 800d642:	1ad3      	subs	r3, r2, r3
 800d644:	b29b      	uxth	r3, r3
 800d646:	3b01      	subs	r3, #1
 800d648:	b29b      	uxth	r3, r3
 800d64a:	b218      	sxth	r0, r3
 800d64c:	88ba      	ldrh	r2, [r7, #4]
 800d64e:	883b      	ldrh	r3, [r7, #0]
 800d650:	4413      	add	r3, r2
 800d652:	b29a      	uxth	r2, r3
 800d654:	8c3b      	ldrh	r3, [r7, #32]
 800d656:	1ad3      	subs	r3, r2, r3
 800d658:	b29b      	uxth	r3, r3
 800d65a:	3b01      	subs	r3, #1
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	b219      	sxth	r1, r3
 800d660:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d664:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d666:	9300      	str	r3, [sp, #0]
 800d668:	2304      	movs	r3, #4
 800d66a:	f7ff fdab 	bl	800d1c4 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 800d66e:	88fa      	ldrh	r2, [r7, #6]
 800d670:	8c3b      	ldrh	r3, [r7, #32]
 800d672:	4413      	add	r3, r2
 800d674:	b29b      	uxth	r3, r3
 800d676:	b218      	sxth	r0, r3
 800d678:	88ba      	ldrh	r2, [r7, #4]
 800d67a:	883b      	ldrh	r3, [r7, #0]
 800d67c:	4413      	add	r3, r2
 800d67e:	b29a      	uxth	r2, r3
 800d680:	8c3b      	ldrh	r3, [r7, #32]
 800d682:	1ad3      	subs	r3, r2, r3
 800d684:	b29b      	uxth	r3, r3
 800d686:	3b01      	subs	r3, #1
 800d688:	b29b      	uxth	r3, r3
 800d68a:	b219      	sxth	r1, r3
 800d68c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d690:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d692:	9300      	str	r3, [sp, #0]
 800d694:	2308      	movs	r3, #8
 800d696:	f7ff fd95 	bl	800d1c4 <drawCircleHelper>
}
 800d69a:	bf00      	nop
 800d69c:	3714      	adds	r7, #20
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd90      	pop	{r4, r7, pc}

0800d6a2 <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 800d6a2:	b590      	push	{r4, r7, lr}
 800d6a4:	b087      	sub	sp, #28
 800d6a6:	af02      	add	r7, sp, #8
 800d6a8:	4604      	mov	r4, r0
 800d6aa:	4608      	mov	r0, r1
 800d6ac:	4611      	mov	r1, r2
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	4623      	mov	r3, r4
 800d6b2:	80fb      	strh	r3, [r7, #6]
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	80bb      	strh	r3, [r7, #4]
 800d6b8:	460b      	mov	r3, r1
 800d6ba:	807b      	strh	r3, [r7, #2]
 800d6bc:	4613      	mov	r3, r2
 800d6be:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 800d6c0:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d6c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	bfa8      	it	ge
 800d6cc:	4613      	movge	r3, r2
 800d6ce:	b21b      	sxth	r3, r3
 800d6d0:	0fda      	lsrs	r2, r3, #31
 800d6d2:	4413      	add	r3, r2
 800d6d4:	105b      	asrs	r3, r3, #1
 800d6d6:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 800d6d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	dd01      	ble.n	800d6e8 <fillRoundRect+0x46>
 800d6e4:	89fb      	ldrh	r3, [r7, #14]
 800d6e6:	843b      	strh	r3, [r7, #32]
    // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 800d6e8:	88fa      	ldrh	r2, [r7, #6]
 800d6ea:	8c3b      	ldrh	r3, [r7, #32]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	b218      	sxth	r0, r3
 800d6f2:	887a      	ldrh	r2, [r7, #2]
 800d6f4:	8c3b      	ldrh	r3, [r7, #32]
 800d6f6:	005b      	lsls	r3, r3, #1
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	1ad3      	subs	r3, r2, r3
 800d6fc:	b29b      	uxth	r3, r3
 800d6fe:	b21a      	sxth	r2, r3
 800d700:	f9b7 4000 	ldrsh.w	r4, [r7]
 800d704:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d708:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d70a:	9300      	str	r3, [sp, #0]
 800d70c:	4623      	mov	r3, r4
 800d70e:	f7ff fbda 	bl	800cec6 <fillRect>
    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 800d712:	88fa      	ldrh	r2, [r7, #6]
 800d714:	887b      	ldrh	r3, [r7, #2]
 800d716:	4413      	add	r3, r2
 800d718:	b29a      	uxth	r2, r3
 800d71a:	8c3b      	ldrh	r3, [r7, #32]
 800d71c:	1ad3      	subs	r3, r2, r3
 800d71e:	b29b      	uxth	r3, r3
 800d720:	3b01      	subs	r3, #1
 800d722:	b29b      	uxth	r3, r3
 800d724:	b218      	sxth	r0, r3
 800d726:	88ba      	ldrh	r2, [r7, #4]
 800d728:	8c3b      	ldrh	r3, [r7, #32]
 800d72a:	4413      	add	r3, r2
 800d72c:	b29b      	uxth	r3, r3
 800d72e:	b219      	sxth	r1, r3
 800d730:	883a      	ldrh	r2, [r7, #0]
 800d732:	8c3b      	ldrh	r3, [r7, #32]
 800d734:	005b      	lsls	r3, r3, #1
 800d736:	b29b      	uxth	r3, r3
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	3b01      	subs	r3, #1
 800d73e:	b29b      	uxth	r3, r3
 800d740:	b21b      	sxth	r3, r3
 800d742:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800d746:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d748:	9201      	str	r2, [sp, #4]
 800d74a:	9300      	str	r3, [sp, #0]
 800d74c:	2301      	movs	r3, #1
 800d74e:	4622      	mov	r2, r4
 800d750:	f7ff fe0c 	bl	800d36c <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 800d754:	88fa      	ldrh	r2, [r7, #6]
 800d756:	8c3b      	ldrh	r3, [r7, #32]
 800d758:	4413      	add	r3, r2
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	b218      	sxth	r0, r3
 800d75e:	88ba      	ldrh	r2, [r7, #4]
 800d760:	8c3b      	ldrh	r3, [r7, #32]
 800d762:	4413      	add	r3, r2
 800d764:	b29b      	uxth	r3, r3
 800d766:	b219      	sxth	r1, r3
 800d768:	883a      	ldrh	r2, [r7, #0]
 800d76a:	8c3b      	ldrh	r3, [r7, #32]
 800d76c:	005b      	lsls	r3, r3, #1
 800d76e:	b29b      	uxth	r3, r3
 800d770:	1ad3      	subs	r3, r2, r3
 800d772:	b29b      	uxth	r3, r3
 800d774:	3b01      	subs	r3, #1
 800d776:	b29b      	uxth	r3, r3
 800d778:	b21b      	sxth	r3, r3
 800d77a:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800d77e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d780:	9201      	str	r2, [sp, #4]
 800d782:	9300      	str	r3, [sp, #0]
 800d784:	2302      	movs	r3, #2
 800d786:	4622      	mov	r2, r4
 800d788:	f7ff fdf0 	bl	800d36c <fillCircleHelper>
}
 800d78c:	bf00      	nop
 800d78e:	3714      	adds	r7, #20
 800d790:	46bd      	mov	sp, r7
 800d792:	bd90      	pop	{r4, r7, pc}

0800d794 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af02      	add	r7, sp, #8
 800d79a:	4603      	mov	r3, r0
 800d79c:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800d79e:	4b08      	ldr	r3, [pc, #32]	@ (800d7c0 <fillScreen+0x2c>)
 800d7a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d7a4:	4b07      	ldr	r3, [pc, #28]	@ (800d7c4 <fillScreen+0x30>)
 800d7a6:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d7aa:	88fb      	ldrh	r3, [r7, #6]
 800d7ac:	9300      	str	r3, [sp, #0]
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	2000      	movs	r0, #0
 800d7b4:	f7ff fb87 	bl	800cec6 <fillRect>
}
 800d7b8:	bf00      	nop
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	2000131a 	.word	0x2000131a
 800d7c4:	2000131c 	.word	0x2000131c

0800d7c8 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	2102      	movs	r1, #2
 800d7d0:	4802      	ldr	r0, [pc, #8]	@ (800d7dc <ST7735_Select+0x14>)
 800d7d2:	f003 ff55 	bl	8011680 <HAL_GPIO_WritePin>
}
 800d7d6:	bf00      	nop
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	40020000 	.word	0x40020000

0800d7e0 <ST7735_Unselect>:

void ST7735_Unselect()
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	2102      	movs	r1, #2
 800d7e8:	4802      	ldr	r0, [pc, #8]	@ (800d7f4 <ST7735_Unselect+0x14>)
 800d7ea:	f003 ff49 	bl	8011680 <HAL_GPIO_WritePin>
}
 800d7ee:	bf00      	nop
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	40020000 	.word	0x40020000

0800d7f8 <ST7735_Reset>:

void ST7735_Reset()
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	2110      	movs	r1, #16
 800d800:	4806      	ldr	r0, [pc, #24]	@ (800d81c <ST7735_Reset+0x24>)
 800d802:	f003 ff3d 	bl	8011680 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800d806:	2005      	movs	r0, #5
 800d808:	f003 fad0 	bl	8010dac <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800d80c:	2201      	movs	r2, #1
 800d80e:	2110      	movs	r1, #16
 800d810:	4802      	ldr	r0, [pc, #8]	@ (800d81c <ST7735_Reset+0x24>)
 800d812:	f003 ff35 	bl	8011680 <HAL_GPIO_WritePin>
}
 800d816:	bf00      	nop
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	40020000 	.word	0x40020000

0800d820 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	4603      	mov	r3, r0
 800d828:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800d82a:	2200      	movs	r2, #0
 800d82c:	2110      	movs	r1, #16
 800d82e:	4807      	ldr	r0, [pc, #28]	@ (800d84c <ST7735_WriteCommand+0x2c>)
 800d830:	f003 ff26 	bl	8011680 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800d834:	1df9      	adds	r1, r7, #7
 800d836:	f04f 33ff 	mov.w	r3, #4294967295
 800d83a:	2201      	movs	r2, #1
 800d83c:	4804      	ldr	r0, [pc, #16]	@ (800d850 <ST7735_WriteCommand+0x30>)
 800d83e:	f004 fe20 	bl	8012482 <HAL_SPI_Transmit>
}
 800d842:	bf00      	nop
 800d844:	3708      	adds	r7, #8
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	40020800 	.word	0x40020800
 800d850:	2000132c 	.word	0x2000132c

0800d854 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800d85e:	2201      	movs	r2, #1
 800d860:	2110      	movs	r1, #16
 800d862:	4807      	ldr	r0, [pc, #28]	@ (800d880 <ST7735_WriteData+0x2c>)
 800d864:	f003 ff0c 	bl	8011680 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	b29a      	uxth	r2, r3
 800d86c:	f04f 33ff 	mov.w	r3, #4294967295
 800d870:	6879      	ldr	r1, [r7, #4]
 800d872:	4804      	ldr	r0, [pc, #16]	@ (800d884 <ST7735_WriteData+0x30>)
 800d874:	f004 fe05 	bl	8012482 <HAL_SPI_Transmit>
}
 800d878:	bf00      	nop
 800d87a:	3708      	adds	r7, #8
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	40020800 	.word	0x40020800
 800d884:	2000132c 	.word	0x2000132c

0800d888 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	1c5a      	adds	r2, r3, #1
 800d894:	607a      	str	r2, [r7, #4]
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800d89a:	e034      	b.n	800d906 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	1c5a      	adds	r2, r3, #1
 800d8a0:	607a      	str	r2, [r7, #4]
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800d8a6:	7afb      	ldrb	r3, [r7, #11]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7ff ffb9 	bl	800d820 <ST7735_WriteCommand>

        numArgs = *addr++;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	1c5a      	adds	r2, r3, #1
 800d8b2:	607a      	str	r2, [r7, #4]
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800d8b8:	7abb      	ldrb	r3, [r7, #10]
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d8c0:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800d8c2:	7abb      	ldrb	r3, [r7, #10]
 800d8c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8c8:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800d8ca:	7abb      	ldrb	r3, [r7, #10]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d008      	beq.n	800d8e2 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800d8d0:	7abb      	ldrb	r3, [r7, #10]
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f7ff ffbd 	bl	800d854 <ST7735_WriteData>
            addr += numArgs;
 800d8da:	7abb      	ldrb	r3, [r7, #10]
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	4413      	add	r3, r2
 800d8e0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800d8e2:	89bb      	ldrh	r3, [r7, #12]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d00e      	beq.n	800d906 <DisplayInit+0x7e>
            ms = *addr++;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	1c5a      	adds	r2, r3, #1
 800d8ec:	607a      	str	r2, [r7, #4]
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800d8f2:	89bb      	ldrh	r3, [r7, #12]
 800d8f4:	2bff      	cmp	r3, #255	@ 0xff
 800d8f6:	d102      	bne.n	800d8fe <DisplayInit+0x76>
 800d8f8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800d8fc:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800d8fe:	89bb      	ldrh	r3, [r7, #12]
 800d900:	4618      	mov	r0, r3
 800d902:	f003 fa53 	bl	8010dac <HAL_Delay>
    while(numCommands--) {
 800d906:	7bfb      	ldrb	r3, [r7, #15]
 800d908:	1e5a      	subs	r2, r3, #1
 800d90a:	73fa      	strb	r2, [r7, #15]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d1c5      	bne.n	800d89c <DisplayInit+0x14>
        }
    }
}
 800d910:	bf00      	nop
 800d912:	bf00      	nop
 800d914:	3710      	adds	r7, #16
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
	...

0800d91c <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800d91c:	b590      	push	{r4, r7, lr}
 800d91e:	b085      	sub	sp, #20
 800d920:	af00      	add	r7, sp, #0
 800d922:	4604      	mov	r4, r0
 800d924:	4608      	mov	r0, r1
 800d926:	4611      	mov	r1, r2
 800d928:	461a      	mov	r2, r3
 800d92a:	4623      	mov	r3, r4
 800d92c:	71fb      	strb	r3, [r7, #7]
 800d92e:	4603      	mov	r3, r0
 800d930:	71bb      	strb	r3, [r7, #6]
 800d932:	460b      	mov	r3, r1
 800d934:	717b      	strb	r3, [r7, #5]
 800d936:	4613      	mov	r3, r2
 800d938:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800d93a:	202a      	movs	r0, #42	@ 0x2a
 800d93c:	f7ff ff70 	bl	800d820 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800d940:	2300      	movs	r3, #0
 800d942:	733b      	strb	r3, [r7, #12]
 800d944:	4b17      	ldr	r3, [pc, #92]	@ (800d9a4 <ST7735_SetAddressWindow+0x88>)
 800d946:	781a      	ldrb	r2, [r3, #0]
 800d948:	79fb      	ldrb	r3, [r7, #7]
 800d94a:	4413      	add	r3, r2
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	737b      	strb	r3, [r7, #13]
 800d950:	2300      	movs	r3, #0
 800d952:	73bb      	strb	r3, [r7, #14]
 800d954:	4b13      	ldr	r3, [pc, #76]	@ (800d9a4 <ST7735_SetAddressWindow+0x88>)
 800d956:	781a      	ldrb	r2, [r3, #0]
 800d958:	797b      	ldrb	r3, [r7, #5]
 800d95a:	4413      	add	r3, r2
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800d960:	f107 030c 	add.w	r3, r7, #12
 800d964:	2104      	movs	r1, #4
 800d966:	4618      	mov	r0, r3
 800d968:	f7ff ff74 	bl	800d854 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800d96c:	202b      	movs	r0, #43	@ 0x2b
 800d96e:	f7ff ff57 	bl	800d820 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800d972:	4b0d      	ldr	r3, [pc, #52]	@ (800d9a8 <ST7735_SetAddressWindow+0x8c>)
 800d974:	781a      	ldrb	r2, [r3, #0]
 800d976:	79bb      	ldrb	r3, [r7, #6]
 800d978:	4413      	add	r3, r2
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800d97e:	4b0a      	ldr	r3, [pc, #40]	@ (800d9a8 <ST7735_SetAddressWindow+0x8c>)
 800d980:	781a      	ldrb	r2, [r3, #0]
 800d982:	793b      	ldrb	r3, [r7, #4]
 800d984:	4413      	add	r3, r2
 800d986:	b2db      	uxtb	r3, r3
 800d988:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800d98a:	f107 030c 	add.w	r3, r7, #12
 800d98e:	2104      	movs	r1, #4
 800d990:	4618      	mov	r0, r3
 800d992:	f7ff ff5f 	bl	800d854 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800d996:	202c      	movs	r0, #44	@ 0x2c
 800d998:	f7ff ff42 	bl	800d820 <ST7735_WriteCommand>
}
 800d99c:	bf00      	nop
 800d99e:	3714      	adds	r7, #20
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd90      	pop	{r4, r7, pc}
 800d9a4:	20001321 	.word	0x20001321
 800d9a8:	20001322 	.word	0x20001322

0800d9ac <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800d9b6:	f7ff ff07 	bl	800d7c8 <ST7735_Select>
    ST7735_Reset();
 800d9ba:	f7ff ff1d 	bl	800d7f8 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800d9be:	480c      	ldr	r0, [pc, #48]	@ (800d9f0 <ST7735_Init+0x44>)
 800d9c0:	f7ff ff62 	bl	800d888 <DisplayInit>
    DisplayInit(init_cmds2);
 800d9c4:	480b      	ldr	r0, [pc, #44]	@ (800d9f4 <ST7735_Init+0x48>)
 800d9c6:	f7ff ff5f 	bl	800d888 <DisplayInit>
    DisplayInit(init_cmds3);
 800d9ca:	480b      	ldr	r0, [pc, #44]	@ (800d9f8 <ST7735_Init+0x4c>)
 800d9cc:	f7ff ff5c 	bl	800d888 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 800d9d0:	4b0a      	ldr	r3, [pc, #40]	@ (800d9fc <ST7735_Init+0x50>)
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800d9d6:	4b0a      	ldr	r3, [pc, #40]	@ (800da00 <ST7735_Init+0x54>)
 800d9d8:	2200      	movs	r2, #0
 800d9da:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 800d9dc:	79fb      	ldrb	r3, [r7, #7]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f000 f810 	bl	800da04 <ST7735_SetRotation>
    ST7735_Unselect();
 800d9e4:	f7ff fefc 	bl	800d7e0 <ST7735_Unselect>

}
 800d9e8:	bf00      	nop
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	0801d734 	.word	0x0801d734
 800d9f4:	0801d76c 	.word	0x0801d76c
 800d9f8:	0801d77c 	.word	0x0801d77c
 800d9fc:	2000131f 	.word	0x2000131f
 800da00:	20001320 	.word	0x20001320

0800da04 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b084      	sub	sp, #16
 800da08:	af00      	add	r7, sp, #0
 800da0a:	4603      	mov	r3, r0
 800da0c:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800da0e:	2300      	movs	r3, #0
 800da10:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800da12:	79fb      	ldrb	r3, [r7, #7]
 800da14:	f003 0303 	and.w	r3, r3, #3
 800da18:	b2da      	uxtb	r2, r3
 800da1a:	4b33      	ldr	r3, [pc, #204]	@ (800dae8 <ST7735_SetRotation+0xe4>)
 800da1c:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800da1e:	4b32      	ldr	r3, [pc, #200]	@ (800dae8 <ST7735_SetRotation+0xe4>)
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	2b03      	cmp	r3, #3
 800da24:	d84e      	bhi.n	800dac4 <ST7735_SetRotation+0xc0>
 800da26:	a201      	add	r2, pc, #4	@ (adr r2, 800da2c <ST7735_SetRotation+0x28>)
 800da28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2c:	0800da3d 	.word	0x0800da3d
 800da30:	0800da5f 	.word	0x0800da5f
 800da34:	0800da81 	.word	0x0800da81
 800da38:	0800daa3 	.word	0x0800daa3
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 800da3c:	23c0      	movs	r3, #192	@ 0xc0
 800da3e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800da40:	4b2a      	ldr	r3, [pc, #168]	@ (800daec <ST7735_SetRotation+0xe8>)
 800da42:	22a0      	movs	r2, #160	@ 0xa0
 800da44:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800da46:	4b2a      	ldr	r3, [pc, #168]	@ (800daf0 <ST7735_SetRotation+0xec>)
 800da48:	2280      	movs	r2, #128	@ 0x80
 800da4a:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 800da4c:	4b29      	ldr	r3, [pc, #164]	@ (800daf4 <ST7735_SetRotation+0xf0>)
 800da4e:	781a      	ldrb	r2, [r3, #0]
 800da50:	4b29      	ldr	r3, [pc, #164]	@ (800daf8 <ST7735_SetRotation+0xf4>)
 800da52:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 800da54:	4b29      	ldr	r3, [pc, #164]	@ (800dafc <ST7735_SetRotation+0xf8>)
 800da56:	781a      	ldrb	r2, [r3, #0]
 800da58:	4b29      	ldr	r3, [pc, #164]	@ (800db00 <ST7735_SetRotation+0xfc>)
 800da5a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800da5c:	e032      	b.n	800dac4 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800da5e:	23a0      	movs	r3, #160	@ 0xa0
 800da60:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800da62:	4b23      	ldr	r3, [pc, #140]	@ (800daf0 <ST7735_SetRotation+0xec>)
 800da64:	22a0      	movs	r2, #160	@ 0xa0
 800da66:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800da68:	4b20      	ldr	r3, [pc, #128]	@ (800daec <ST7735_SetRotation+0xe8>)
 800da6a:	2280      	movs	r2, #128	@ 0x80
 800da6c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800da6e:	4b21      	ldr	r3, [pc, #132]	@ (800daf4 <ST7735_SetRotation+0xf0>)
 800da70:	781a      	ldrb	r2, [r3, #0]
 800da72:	4b23      	ldr	r3, [pc, #140]	@ (800db00 <ST7735_SetRotation+0xfc>)
 800da74:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800da76:	4b21      	ldr	r3, [pc, #132]	@ (800dafc <ST7735_SetRotation+0xf8>)
 800da78:	781a      	ldrb	r2, [r3, #0]
 800da7a:	4b1f      	ldr	r3, [pc, #124]	@ (800daf8 <ST7735_SetRotation+0xf4>)
 800da7c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800da7e:	e021      	b.n	800dac4 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800da80:	2300      	movs	r3, #0
 800da82:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800da84:	4b19      	ldr	r3, [pc, #100]	@ (800daec <ST7735_SetRotation+0xe8>)
 800da86:	22a0      	movs	r2, #160	@ 0xa0
 800da88:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800da8a:	4b19      	ldr	r3, [pc, #100]	@ (800daf0 <ST7735_SetRotation+0xec>)
 800da8c:	2280      	movs	r2, #128	@ 0x80
 800da8e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 800da90:	4b18      	ldr	r3, [pc, #96]	@ (800daf4 <ST7735_SetRotation+0xf0>)
 800da92:	781a      	ldrb	r2, [r3, #0]
 800da94:	4b18      	ldr	r3, [pc, #96]	@ (800daf8 <ST7735_SetRotation+0xf4>)
 800da96:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 800da98:	4b18      	ldr	r3, [pc, #96]	@ (800dafc <ST7735_SetRotation+0xf8>)
 800da9a:	781a      	ldrb	r2, [r3, #0]
 800da9c:	4b18      	ldr	r3, [pc, #96]	@ (800db00 <ST7735_SetRotation+0xfc>)
 800da9e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800daa0:	e010      	b.n	800dac4 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800daa2:	2360      	movs	r3, #96	@ 0x60
 800daa4:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800daa6:	4b12      	ldr	r3, [pc, #72]	@ (800daf0 <ST7735_SetRotation+0xec>)
 800daa8:	22a0      	movs	r2, #160	@ 0xa0
 800daaa:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800daac:	4b0f      	ldr	r3, [pc, #60]	@ (800daec <ST7735_SetRotation+0xe8>)
 800daae:	2280      	movs	r2, #128	@ 0x80
 800dab0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800dab2:	4b10      	ldr	r3, [pc, #64]	@ (800daf4 <ST7735_SetRotation+0xf0>)
 800dab4:	781a      	ldrb	r2, [r3, #0]
 800dab6:	4b12      	ldr	r3, [pc, #72]	@ (800db00 <ST7735_SetRotation+0xfc>)
 800dab8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800daba:	4b10      	ldr	r3, [pc, #64]	@ (800dafc <ST7735_SetRotation+0xf8>)
 800dabc:	781a      	ldrb	r2, [r3, #0]
 800dabe:	4b0e      	ldr	r3, [pc, #56]	@ (800daf8 <ST7735_SetRotation+0xf4>)
 800dac0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800dac2:	bf00      	nop
  }
  ST7735_Select();
 800dac4:	f7ff fe80 	bl	800d7c8 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800dac8:	2036      	movs	r0, #54	@ 0x36
 800daca:	f7ff fea9 	bl	800d820 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800dace:	f107 030f 	add.w	r3, r7, #15
 800dad2:	2101      	movs	r1, #1
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7ff febd 	bl	800d854 <ST7735_WriteData>
  ST7735_Unselect();
 800dada:	f7ff fe81 	bl	800d7e0 <ST7735_Unselect>
}
 800dade:	bf00      	nop
 800dae0:	3710      	adds	r7, #16
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	2000131e 	.word	0x2000131e
 800daec:	2000131c 	.word	0x2000131c
 800daf0:	2000131a 	.word	0x2000131a
 800daf4:	2000131f 	.word	0x2000131f
 800daf8:	20001321 	.word	0x20001321
 800dafc:	20001320 	.word	0x20001320
 800db00:	20001322 	.word	0x20001322

0800db04 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
 800db0a:	4603      	mov	r3, r0
 800db0c:	80fb      	strh	r3, [r7, #6]
 800db0e:	460b      	mov	r3, r1
 800db10:	80bb      	strh	r3, [r7, #4]
 800db12:	4613      	mov	r3, r2
 800db14:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800db16:	88fb      	ldrh	r3, [r7, #6]
 800db18:	4a17      	ldr	r2, [pc, #92]	@ (800db78 <ST7735_DrawPixel+0x74>)
 800db1a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800db1e:	4293      	cmp	r3, r2
 800db20:	da26      	bge.n	800db70 <ST7735_DrawPixel+0x6c>
 800db22:	88bb      	ldrh	r3, [r7, #4]
 800db24:	4a15      	ldr	r2, [pc, #84]	@ (800db7c <ST7735_DrawPixel+0x78>)
 800db26:	f9b2 2000 	ldrsh.w	r2, [r2]
 800db2a:	4293      	cmp	r3, r2
 800db2c:	da20      	bge.n	800db70 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 800db2e:	f7ff fe4b 	bl	800d7c8 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800db32:	88fb      	ldrh	r3, [r7, #6]
 800db34:	b2d8      	uxtb	r0, r3
 800db36:	88bb      	ldrh	r3, [r7, #4]
 800db38:	b2d9      	uxtb	r1, r3
 800db3a:	88fb      	ldrh	r3, [r7, #6]
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	3301      	adds	r3, #1
 800db40:	b2da      	uxtb	r2, r3
 800db42:	88bb      	ldrh	r3, [r7, #4]
 800db44:	b2db      	uxtb	r3, r3
 800db46:	3301      	adds	r3, #1
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	f7ff fee7 	bl	800d91c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800db4e:	887b      	ldrh	r3, [r7, #2]
 800db50:	0a1b      	lsrs	r3, r3, #8
 800db52:	b29b      	uxth	r3, r3
 800db54:	b2db      	uxtb	r3, r3
 800db56:	733b      	strb	r3, [r7, #12]
 800db58:	887b      	ldrh	r3, [r7, #2]
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800db5e:	f107 030c 	add.w	r3, r7, #12
 800db62:	2102      	movs	r1, #2
 800db64:	4618      	mov	r0, r3
 800db66:	f7ff fe75 	bl	800d854 <ST7735_WriteData>

    ST7735_Unselect();
 800db6a:	f7ff fe39 	bl	800d7e0 <ST7735_Unselect>
 800db6e:	e000      	b.n	800db72 <ST7735_DrawPixel+0x6e>
        return;
 800db70:	bf00      	nop
}
 800db72:	3710      	adds	r7, #16
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	2000131a 	.word	0x2000131a
 800db7c:	2000131c 	.word	0x2000131c

0800db80 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800db80:	b082      	sub	sp, #8
 800db82:	b590      	push	{r4, r7, lr}
 800db84:	b089      	sub	sp, #36	@ 0x24
 800db86:	af00      	add	r7, sp, #0
 800db88:	637b      	str	r3, [r7, #52]	@ 0x34
 800db8a:	4603      	mov	r3, r0
 800db8c:	80fb      	strh	r3, [r7, #6]
 800db8e:	460b      	mov	r3, r1
 800db90:	80bb      	strh	r3, [r7, #4]
 800db92:	4613      	mov	r3, r2
 800db94:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800db96:	88fb      	ldrh	r3, [r7, #6]
 800db98:	b2d8      	uxtb	r0, r3
 800db9a:	88bb      	ldrh	r3, [r7, #4]
 800db9c:	b2d9      	uxtb	r1, r3
 800db9e:	88fb      	ldrh	r3, [r7, #6]
 800dba0:	b2da      	uxtb	r2, r3
 800dba2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800dba6:	4413      	add	r3, r2
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	3b01      	subs	r3, #1
 800dbac:	b2dc      	uxtb	r4, r3
 800dbae:	88bb      	ldrh	r3, [r7, #4]
 800dbb0:	b2da      	uxtb	r2, r3
 800dbb2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800dbb6:	4413      	add	r3, r2
 800dbb8:	b2db      	uxtb	r3, r3
 800dbba:	3b01      	subs	r3, #1
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	4622      	mov	r2, r4
 800dbc0:	f7ff feac 	bl	800d91c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	61fb      	str	r3, [r7, #28]
 800dbc8:	e043      	b.n	800dc52 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800dbca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbcc:	78fb      	ldrb	r3, [r7, #3]
 800dbce:	3b20      	subs	r3, #32
 800dbd0:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800dbd4:	fb01 f303 	mul.w	r3, r1, r3
 800dbd8:	4619      	mov	r1, r3
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	440b      	add	r3, r1
 800dbde:	005b      	lsls	r3, r3, #1
 800dbe0:	4413      	add	r3, r2
 800dbe2:	881b      	ldrh	r3, [r3, #0]
 800dbe4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	61bb      	str	r3, [r7, #24]
 800dbea:	e029      	b.n	800dc40 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800dbec:	697a      	ldr	r2, [r7, #20]
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	fa02 f303 	lsl.w	r3, r2, r3
 800dbf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00e      	beq.n	800dc1a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800dbfc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800dbfe:	0a1b      	lsrs	r3, r3, #8
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	743b      	strb	r3, [r7, #16]
 800dc06:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800dc0c:	f107 0310 	add.w	r3, r7, #16
 800dc10:	2102      	movs	r1, #2
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7ff fe1e 	bl	800d854 <ST7735_WriteData>
 800dc18:	e00f      	b.n	800dc3a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800dc1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dc1e:	0a1b      	lsrs	r3, r3, #8
 800dc20:	b29b      	uxth	r3, r3
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	733b      	strb	r3, [r7, #12]
 800dc26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800dc2e:	f107 030c 	add.w	r3, r7, #12
 800dc32:	2102      	movs	r1, #2
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7ff fe0d 	bl	800d854 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800dc3a:	69bb      	ldr	r3, [r7, #24]
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	61bb      	str	r3, [r7, #24]
 800dc40:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800dc44:	461a      	mov	r2, r3
 800dc46:	69bb      	ldr	r3, [r7, #24]
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d3cf      	bcc.n	800dbec <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	3301      	adds	r3, #1
 800dc50:	61fb      	str	r3, [r7, #28]
 800dc52:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800dc56:	461a      	mov	r2, r3
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d3b5      	bcc.n	800dbca <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800dc5e:	bf00      	nop
 800dc60:	bf00      	nop
 800dc62:	3724      	adds	r7, #36	@ 0x24
 800dc64:	46bd      	mov	sp, r7
 800dc66:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800dc6a:	b002      	add	sp, #8
 800dc6c:	4770      	bx	lr
	...

0800dc70 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800dc70:	b082      	sub	sp, #8
 800dc72:	b580      	push	{r7, lr}
 800dc74:	b086      	sub	sp, #24
 800dc76:	af04      	add	r7, sp, #16
 800dc78:	603a      	str	r2, [r7, #0]
 800dc7a:	617b      	str	r3, [r7, #20]
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	80fb      	strh	r3, [r7, #6]
 800dc80:	460b      	mov	r3, r1
 800dc82:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800dc84:	f7ff fda0 	bl	800d7c8 <ST7735_Select>

    while(*str) {
 800dc88:	e033      	b.n	800dcf2 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 800dc8a:	88fb      	ldrh	r3, [r7, #6]
 800dc8c:	7d3a      	ldrb	r2, [r7, #20]
 800dc8e:	4413      	add	r3, r2
 800dc90:	4a1f      	ldr	r2, [pc, #124]	@ (800dd10 <ST7735_WriteString+0xa0>)
 800dc92:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dc96:	4293      	cmp	r3, r2
 800dc98:	db16      	blt.n	800dcc8 <ST7735_WriteString+0x58>
            x = 0;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800dc9e:	7d7b      	ldrb	r3, [r7, #21]
 800dca0:	461a      	mov	r2, r3
 800dca2:	88bb      	ldrh	r3, [r7, #4]
 800dca4:	4413      	add	r3, r2
 800dca6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 800dca8:	88bb      	ldrh	r3, [r7, #4]
 800dcaa:	7d7a      	ldrb	r2, [r7, #21]
 800dcac:	4413      	add	r3, r2
 800dcae:	4a19      	ldr	r2, [pc, #100]	@ (800dd14 <ST7735_WriteString+0xa4>)
 800dcb0:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	da21      	bge.n	800dcfc <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	781b      	ldrb	r3, [r3, #0]
 800dcbc:	2b20      	cmp	r3, #32
 800dcbe:	d103      	bne.n	800dcc8 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	603b      	str	r3, [r7, #0]
                continue;
 800dcc6:	e014      	b.n	800dcf2 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	781a      	ldrb	r2, [r3, #0]
 800dccc:	88b9      	ldrh	r1, [r7, #4]
 800dcce:	88f8      	ldrh	r0, [r7, #6]
 800dcd0:	8c3b      	ldrh	r3, [r7, #32]
 800dcd2:	9302      	str	r3, [sp, #8]
 800dcd4:	8bbb      	ldrh	r3, [r7, #28]
 800dcd6:	9301      	str	r3, [sp, #4]
 800dcd8:	69bb      	ldr	r3, [r7, #24]
 800dcda:	9300      	str	r3, [sp, #0]
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	f7ff ff4f 	bl	800db80 <ST7735_WriteChar>
        x += font.width;
 800dce2:	7d3b      	ldrb	r3, [r7, #20]
 800dce4:	461a      	mov	r2, r3
 800dce6:	88fb      	ldrh	r3, [r7, #6]
 800dce8:	4413      	add	r3, r2
 800dcea:	80fb      	strh	r3, [r7, #6]
        str++;
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	3301      	adds	r3, #1
 800dcf0:	603b      	str	r3, [r7, #0]
    while(*str) {
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d1c7      	bne.n	800dc8a <ST7735_WriteString+0x1a>
 800dcfa:	e000      	b.n	800dcfe <ST7735_WriteString+0x8e>
                break;
 800dcfc:	bf00      	nop
    }

    ST7735_Unselect();
 800dcfe:	f7ff fd6f 	bl	800d7e0 <ST7735_Unselect>
}
 800dd02:	bf00      	nop
 800dd04:	3708      	adds	r7, #8
 800dd06:	46bd      	mov	sp, r7
 800dd08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd0c:	b002      	add	sp, #8
 800dd0e:	4770      	bx	lr
 800dd10:	2000131a 	.word	0x2000131a
 800dd14:	2000131c 	.word	0x2000131c

0800dd18 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800dd18:	b590      	push	{r4, r7, lr}
 800dd1a:	b085      	sub	sp, #20
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	4604      	mov	r4, r0
 800dd20:	4608      	mov	r0, r1
 800dd22:	4611      	mov	r1, r2
 800dd24:	461a      	mov	r2, r3
 800dd26:	4623      	mov	r3, r4
 800dd28:	80fb      	strh	r3, [r7, #6]
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	80bb      	strh	r3, [r7, #4]
 800dd2e:	460b      	mov	r3, r1
 800dd30:	807b      	strh	r3, [r7, #2]
 800dd32:	4613      	mov	r3, r2
 800dd34:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 800dd36:	88fb      	ldrh	r3, [r7, #6]
 800dd38:	4a37      	ldr	r2, [pc, #220]	@ (800de18 <ST7735_FillRectangle+0x100>)
 800dd3a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	da66      	bge.n	800de10 <ST7735_FillRectangle+0xf8>
 800dd42:	88bb      	ldrh	r3, [r7, #4]
 800dd44:	4a35      	ldr	r2, [pc, #212]	@ (800de1c <ST7735_FillRectangle+0x104>)
 800dd46:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	da60      	bge.n	800de10 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 800dd4e:	88fa      	ldrh	r2, [r7, #6]
 800dd50:	887b      	ldrh	r3, [r7, #2]
 800dd52:	4413      	add	r3, r2
 800dd54:	4a30      	ldr	r2, [pc, #192]	@ (800de18 <ST7735_FillRectangle+0x100>)
 800dd56:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	dd06      	ble.n	800dd6c <ST7735_FillRectangle+0x54>
 800dd5e:	4b2e      	ldr	r3, [pc, #184]	@ (800de18 <ST7735_FillRectangle+0x100>)
 800dd60:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd64:	b29a      	uxth	r2, r3
 800dd66:	88fb      	ldrh	r3, [r7, #6]
 800dd68:	1ad3      	subs	r3, r2, r3
 800dd6a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 800dd6c:	88ba      	ldrh	r2, [r7, #4]
 800dd6e:	883b      	ldrh	r3, [r7, #0]
 800dd70:	4413      	add	r3, r2
 800dd72:	4a2a      	ldr	r2, [pc, #168]	@ (800de1c <ST7735_FillRectangle+0x104>)
 800dd74:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	dd06      	ble.n	800dd8a <ST7735_FillRectangle+0x72>
 800dd7c:	4b27      	ldr	r3, [pc, #156]	@ (800de1c <ST7735_FillRectangle+0x104>)
 800dd7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	88bb      	ldrh	r3, [r7, #4]
 800dd86:	1ad3      	subs	r3, r2, r3
 800dd88:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800dd8a:	f7ff fd1d 	bl	800d7c8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800dd8e:	88fb      	ldrh	r3, [r7, #6]
 800dd90:	b2d8      	uxtb	r0, r3
 800dd92:	88bb      	ldrh	r3, [r7, #4]
 800dd94:	b2d9      	uxtb	r1, r3
 800dd96:	88fb      	ldrh	r3, [r7, #6]
 800dd98:	b2da      	uxtb	r2, r3
 800dd9a:	887b      	ldrh	r3, [r7, #2]
 800dd9c:	b2db      	uxtb	r3, r3
 800dd9e:	4413      	add	r3, r2
 800dda0:	b2db      	uxtb	r3, r3
 800dda2:	3b01      	subs	r3, #1
 800dda4:	b2dc      	uxtb	r4, r3
 800dda6:	88bb      	ldrh	r3, [r7, #4]
 800dda8:	b2da      	uxtb	r2, r3
 800ddaa:	883b      	ldrh	r3, [r7, #0]
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	4413      	add	r3, r2
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	3b01      	subs	r3, #1
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	4622      	mov	r2, r4
 800ddb8:	f7ff fdb0 	bl	800d91c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800ddbc:	8c3b      	ldrh	r3, [r7, #32]
 800ddbe:	0a1b      	lsrs	r3, r3, #8
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	733b      	strb	r3, [r7, #12]
 800ddc6:	8c3b      	ldrh	r3, [r7, #32]
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800ddcc:	2201      	movs	r2, #1
 800ddce:	2110      	movs	r1, #16
 800ddd0:	4813      	ldr	r0, [pc, #76]	@ (800de20 <ST7735_FillRectangle+0x108>)
 800ddd2:	f003 fc55 	bl	8011680 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800ddd6:	883b      	ldrh	r3, [r7, #0]
 800ddd8:	80bb      	strh	r3, [r7, #4]
 800ddda:	e013      	b.n	800de04 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 800dddc:	887b      	ldrh	r3, [r7, #2]
 800ddde:	80fb      	strh	r3, [r7, #6]
 800dde0:	e00a      	b.n	800ddf8 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800dde2:	f107 010c 	add.w	r1, r7, #12
 800dde6:	f04f 33ff 	mov.w	r3, #4294967295
 800ddea:	2202      	movs	r2, #2
 800ddec:	480d      	ldr	r0, [pc, #52]	@ (800de24 <ST7735_FillRectangle+0x10c>)
 800ddee:	f004 fb48 	bl	8012482 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800ddf2:	88fb      	ldrh	r3, [r7, #6]
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	80fb      	strh	r3, [r7, #6]
 800ddf8:	88fb      	ldrh	r3, [r7, #6]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d1f1      	bne.n	800dde2 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 800ddfe:	88bb      	ldrh	r3, [r7, #4]
 800de00:	3b01      	subs	r3, #1
 800de02:	80bb      	strh	r3, [r7, #4]
 800de04:	88bb      	ldrh	r3, [r7, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d1e8      	bne.n	800dddc <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 800de0a:	f7ff fce9 	bl	800d7e0 <ST7735_Unselect>
 800de0e:	e000      	b.n	800de12 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 800de10:	bf00      	nop
}
 800de12:	3714      	adds	r7, #20
 800de14:	46bd      	mov	sp, r7
 800de16:	bd90      	pop	{r4, r7, pc}
 800de18:	2000131a 	.word	0x2000131a
 800de1c:	2000131c 	.word	0x2000131c
 800de20:	40020800 	.word	0x40020800
 800de24:	2000132c 	.word	0x2000132c

0800de28 <displayOnwardsLogoOptimized>:
    ST7735_WriteString(start_x, start_y, "on", Font_16x26, RED, BLACK);
    ST7735_WriteString(start_x + 32, start_y, "words", Font_16x26, WHITE, BLACK);
}

// Optimized version with exact positioning
void displayOnwardsLogoOptimized(void) {
 800de28:	b580      	push	{r7, lr}
 800de2a:	b086      	sub	sp, #24
 800de2c:	af04      	add	r7, sp, #16
    ST7735_SetRotation(1);
 800de2e:	2001      	movs	r0, #1
 800de30:	f7ff fde8 	bl	800da04 <ST7735_SetRotation>
    fillScreen(BLACK);
 800de34:	2000      	movs	r0, #0
 800de36:	f7ff fcad 	bl	800d794 <fillScreen>
    // Exact calculations for 160×128 display
    // Font_16x26: each character is 16px wide, 26px tall
    // "onwards" = 7 characters = 112px total width

    // Perfect center positioning
    int x_pos = 24;  // (160 - 112) / 2 = 24
 800de3a:	2318      	movs	r3, #24
 800de3c:	607b      	str	r3, [r7, #4]
    int y_pos = 51;  // (128 - 26) / 2 = 51
 800de3e:	2333      	movs	r3, #51	@ 0x33
 800de40:	603b      	str	r3, [r7, #0]

    // Draw "on" in red (positions 0-1, 32px wide)
    ST7735_WriteString(x_pos, y_pos, "on", Font_16x26, RED, BLACK);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	b298      	uxth	r0, r3
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	b299      	uxth	r1, r3
 800de4a:	4b11      	ldr	r3, [pc, #68]	@ (800de90 <displayOnwardsLogoOptimized+0x68>)
 800de4c:	2200      	movs	r2, #0
 800de4e:	9202      	str	r2, [sp, #8]
 800de50:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800de54:	9201      	str	r2, [sp, #4]
 800de56:	685a      	ldr	r2, [r3, #4]
 800de58:	9200      	str	r2, [sp, #0]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4a0d      	ldr	r2, [pc, #52]	@ (800de94 <displayOnwardsLogoOptimized+0x6c>)
 800de5e:	f7ff ff07 	bl	800dc70 <ST7735_WriteString>

    // Draw "wards" in white (positions 2-6, 80px wide)
    ST7735_WriteString(x_pos + 32, y_pos, "words", Font_16x26, WHITE, BLACK);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	b29b      	uxth	r3, r3
 800de66:	3320      	adds	r3, #32
 800de68:	b298      	uxth	r0, r3
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	b299      	uxth	r1, r3
 800de6e:	4b08      	ldr	r3, [pc, #32]	@ (800de90 <displayOnwardsLogoOptimized+0x68>)
 800de70:	2200      	movs	r2, #0
 800de72:	9202      	str	r2, [sp, #8]
 800de74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800de78:	9201      	str	r2, [sp, #4]
 800de7a:	685a      	ldr	r2, [r3, #4]
 800de7c:	9200      	str	r2, [sp, #0]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4a05      	ldr	r2, [pc, #20]	@ (800de98 <displayOnwardsLogoOptimized+0x70>)
 800de82:	f7ff fef5 	bl	800dc70 <ST7735_WriteString>
}
 800de86:	bf00      	nop
 800de88:	3708      	adds	r7, #8
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	20000078 	.word	0x20000078
 800de94:	0801d58c 	.word	0x0801d58c
 800de98:	0801d590 	.word	0x0801d590

0800de9c <showStartupLogoAndMenu>:
    HAL_Delay(3000);
    printf("Logo display complete\n");
}

// Integration with your menu system
void showStartupLogoAndMenu(void) {
 800de9c:	b580      	push	{r7, lr}
 800de9e:	af00      	add	r7, sp, #0
    // Show logo first
    displayOnwardsLogoOptimized();
 800dea0:	f7ff ffc2 	bl	800de28 <displayOnwardsLogoOptimized>
    HAL_Delay(3000);
 800dea4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800dea8:	f002 ff80 	bl	8010dac <HAL_Delay>

    // Transition to menu
    fillScreen(BLACK);
 800deac:	2000      	movs	r0, #0
 800deae:	f7ff fc71 	bl	800d794 <fillScreen>
    HAL_Delay(200);
 800deb2:	20c8      	movs	r0, #200	@ 0xc8
 800deb4:	f002 ff7a 	bl	8010dac <HAL_Delay>
}
 800deb8:	bf00      	nop
 800deba:	bd80      	pop	{r7, pc}

0800debc <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800debc:	b480      	push	{r7}
 800debe:	b085      	sub	sp, #20
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d002      	beq.n	800ded2 <case_insensitive_strcmp+0x16>
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d101      	bne.n	800ded6 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800ded2:	2301      	movs	r3, #1
 800ded4:	e056      	b.n	800df84 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800ded6:	687a      	ldr	r2, [r7, #4]
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	429a      	cmp	r2, r3
 800dedc:	d10d      	bne.n	800defa <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800dede:	2300      	movs	r3, #0
 800dee0:	e050      	b.n	800df84 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d101      	bne.n	800deee <case_insensitive_strcmp+0x32>
        {
            return 0;
 800deea:	2300      	movs	r3, #0
 800deec:	e04a      	b.n	800df84 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	3301      	adds	r3, #1
 800def2:	607b      	str	r3, [r7, #4]
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	3301      	adds	r3, #1
 800def8:	603b      	str	r3, [r7, #0]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	73fb      	strb	r3, [r7, #15]
 800df00:	7bfb      	ldrb	r3, [r7, #15]
 800df02:	3301      	adds	r3, #1
 800df04:	4a22      	ldr	r2, [pc, #136]	@ (800df90 <case_insensitive_strcmp+0xd4>)
 800df06:	4413      	add	r3, r2
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	f003 0303 	and.w	r3, r3, #3
 800df0e:	2b01      	cmp	r3, #1
 800df10:	d103      	bne.n	800df1a <case_insensitive_strcmp+0x5e>
 800df12:	7bfb      	ldrb	r3, [r7, #15]
 800df14:	f103 0220 	add.w	r2, r3, #32
 800df18:	e000      	b.n	800df1c <case_insensitive_strcmp+0x60>
 800df1a:	7bfa      	ldrb	r2, [r7, #15]
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	73bb      	strb	r3, [r7, #14]
 800df22:	7bbb      	ldrb	r3, [r7, #14]
 800df24:	3301      	adds	r3, #1
 800df26:	491a      	ldr	r1, [pc, #104]	@ (800df90 <case_insensitive_strcmp+0xd4>)
 800df28:	440b      	add	r3, r1
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	f003 0303 	and.w	r3, r3, #3
 800df30:	2b01      	cmp	r3, #1
 800df32:	d102      	bne.n	800df3a <case_insensitive_strcmp+0x7e>
 800df34:	7bbb      	ldrb	r3, [r7, #14]
 800df36:	3320      	adds	r3, #32
 800df38:	e000      	b.n	800df3c <case_insensitive_strcmp+0x80>
 800df3a:	7bbb      	ldrb	r3, [r7, #14]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d0d0      	beq.n	800dee2 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	737b      	strb	r3, [r7, #13]
 800df46:	7b7b      	ldrb	r3, [r7, #13]
 800df48:	3301      	adds	r3, #1
 800df4a:	4a11      	ldr	r2, [pc, #68]	@ (800df90 <case_insensitive_strcmp+0xd4>)
 800df4c:	4413      	add	r3, r2
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	f003 0303 	and.w	r3, r3, #3
 800df54:	2b01      	cmp	r3, #1
 800df56:	d103      	bne.n	800df60 <case_insensitive_strcmp+0xa4>
 800df58:	7b7b      	ldrb	r3, [r7, #13]
 800df5a:	f103 0220 	add.w	r2, r3, #32
 800df5e:	e000      	b.n	800df62 <case_insensitive_strcmp+0xa6>
 800df60:	7b7a      	ldrb	r2, [r7, #13]
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	733b      	strb	r3, [r7, #12]
 800df68:	7b3b      	ldrb	r3, [r7, #12]
 800df6a:	3301      	adds	r3, #1
 800df6c:	4908      	ldr	r1, [pc, #32]	@ (800df90 <case_insensitive_strcmp+0xd4>)
 800df6e:	440b      	add	r3, r1
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	f003 0303 	and.w	r3, r3, #3
 800df76:	2b01      	cmp	r3, #1
 800df78:	d102      	bne.n	800df80 <case_insensitive_strcmp+0xc4>
 800df7a:	7b3b      	ldrb	r3, [r7, #12]
 800df7c:	3320      	adds	r3, #32
 800df7e:	e000      	b.n	800df82 <case_insensitive_strcmp+0xc6>
 800df80:	7b3b      	ldrb	r3, [r7, #12]
 800df82:	1ad3      	subs	r3, r2, r3
}
 800df84:	4618      	mov	r0, r3
 800df86:	3714      	adds	r7, #20
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr
 800df90:	0801f4c0 	.word	0x0801f4c0

0800df94 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d101      	bne.n	800dfb0 <cJSON_strdup+0x1c>
    {
        return NULL;
 800dfac:	2300      	movs	r3, #0
 800dfae:	e015      	b.n	800dfdc <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f7fa f98d 	bl	80082d0 <strlen>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	3301      	adds	r3, #1
 800dfba:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	68f8      	ldr	r0, [r7, #12]
 800dfc2:	4798      	blx	r3
 800dfc4:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d101      	bne.n	800dfd0 <cJSON_strdup+0x3c>
    {
        return NULL;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	e005      	b.n	800dfdc <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 800dfd0:	68fa      	ldr	r2, [r7, #12]
 800dfd2:	6879      	ldr	r1, [r7, #4]
 800dfd4:	68b8      	ldr	r0, [r7, #8]
 800dfd6:	f00b fe96 	bl	8019d06 <memcpy>

    return copy;
 800dfda:	68bb      	ldr	r3, [r7, #8]
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3710      	adds	r7, #16
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b084      	sub	sp, #16
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2028      	movs	r0, #40	@ 0x28
 800dff2:	4798      	blx	r3
 800dff4:	60f8      	str	r0, [r7, #12]
    if (node)
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d004      	beq.n	800e006 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800dffc:	2228      	movs	r2, #40	@ 0x28
 800dffe:	2100      	movs	r1, #0
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	f00b fdad 	bl	8019b60 <memset>
    }

    return node;
 800e006:	68fb      	ldr	r3, [r7, #12]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3710      	adds	r7, #16
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800e018:	2300      	movs	r3, #0
 800e01a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800e01c:	e03d      	b.n	800e09a <cJSON_Delete+0x8a>
    {
        next = item->next;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	68db      	ldr	r3, [r3, #12]
 800e028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d108      	bne.n	800e042 <cJSON_Delete+0x32>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d004      	beq.n	800e042 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7ff ffe7 	bl	800e010 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d10c      	bne.n	800e068 <cJSON_Delete+0x58>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	691b      	ldr	r3, [r3, #16]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d008      	beq.n	800e068 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 800e056:	4b15      	ldr	r3, [pc, #84]	@ (800e0ac <cJSON_Delete+0x9c>)
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	687a      	ldr	r2, [r7, #4]
 800e05c:	6912      	ldr	r2, [r2, #16]
 800e05e:	4610      	mov	r0, r2
 800e060:	4798      	blx	r3
            item->valuestring = NULL;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e070:	2b00      	cmp	r3, #0
 800e072:	d10c      	bne.n	800e08e <cJSON_Delete+0x7e>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6a1b      	ldr	r3, [r3, #32]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d008      	beq.n	800e08e <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 800e07c:	4b0b      	ldr	r3, [pc, #44]	@ (800e0ac <cJSON_Delete+0x9c>)
 800e07e:	685b      	ldr	r3, [r3, #4]
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	6a12      	ldr	r2, [r2, #32]
 800e084:	4610      	mov	r0, r2
 800e086:	4798      	blx	r3
            item->string = NULL;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2200      	movs	r2, #0
 800e08c:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 800e08e:	4b07      	ldr	r3, [pc, #28]	@ (800e0ac <cJSON_Delete+0x9c>)
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	4798      	blx	r3
        item = next;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d1be      	bne.n	800e01e <cJSON_Delete+0xe>
    }
}
 800e0a0:	bf00      	nop
 800e0a2:	bf00      	nop
 800e0a4:	3710      	adds	r7, #16
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
 800e0aa:	bf00      	nop
 800e0ac:	20000080 	.word	0x20000080

0800e0b0 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800e0b4:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr

0800e0c0 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b098      	sub	sp, #96	@ 0x60
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	6039      	str	r1, [r7, #0]
    double number = 0;
 800e0ca:	f04f 0200 	mov.w	r2, #0
 800e0ce:	f04f 0300 	mov.w	r3, #0
 800e0d2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800e0da:	f7ff ffe9 	bl	800e0b0 <get_decimal_point>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d003      	beq.n	800e0f6 <parse_number+0x36>
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d101      	bne.n	800e0fa <parse_number+0x3a>
    {
        return false;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	e0a0      	b.n	800e23c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e0fe:	e03d      	b.n	800e17c <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	6899      	ldr	r1, [r3, #8]
 800e108:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e10a:	440b      	add	r3, r1
 800e10c:	4413      	add	r3, r2
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	2b45      	cmp	r3, #69	@ 0x45
 800e112:	dc17      	bgt.n	800e144 <parse_number+0x84>
 800e114:	2b2b      	cmp	r3, #43	@ 0x2b
 800e116:	db40      	blt.n	800e19a <parse_number+0xda>
 800e118:	3b2b      	subs	r3, #43	@ 0x2b
 800e11a:	2201      	movs	r2, #1
 800e11c:	409a      	lsls	r2, r3
 800e11e:	4b4c      	ldr	r3, [pc, #304]	@ (800e250 <parse_number+0x190>)
 800e120:	4013      	ands	r3, r2
 800e122:	2b00      	cmp	r3, #0
 800e124:	bf14      	ite	ne
 800e126:	2301      	movne	r3, #1
 800e128:	2300      	moveq	r3, #0
 800e12a:	b2db      	uxtb	r3, r3
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d10b      	bne.n	800e148 <parse_number+0x88>
 800e130:	f002 0308 	and.w	r3, r2, #8
 800e134:	2b00      	cmp	r3, #0
 800e136:	bf14      	ite	ne
 800e138:	2301      	movne	r3, #1
 800e13a:	2300      	moveq	r3, #0
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d111      	bne.n	800e166 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800e142:	e02a      	b.n	800e19a <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800e144:	2b65      	cmp	r3, #101	@ 0x65
 800e146:	d128      	bne.n	800e19a <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	681a      	ldr	r2, [r3, #0]
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	6899      	ldr	r1, [r3, #8]
 800e150:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e152:	440b      	add	r3, r1
 800e154:	4413      	add	r3, r2
 800e156:	7819      	ldrb	r1, [r3, #0]
 800e158:	f107 0208 	add.w	r2, r7, #8
 800e15c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e15e:	4413      	add	r3, r2
 800e160:	460a      	mov	r2, r1
 800e162:	701a      	strb	r2, [r3, #0]
                break;
 800e164:	e007      	b.n	800e176 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800e166:	f107 0208 	add.w	r2, r7, #8
 800e16a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e16c:	4413      	add	r3, r2
 800e16e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800e172:	701a      	strb	r2, [r3, #0]
                break;
 800e174:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800e176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e178:	3301      	adds	r3, #1
 800e17a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e17c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e17e:	2b3e      	cmp	r3, #62	@ 0x3e
 800e180:	d80d      	bhi.n	800e19e <parse_number+0xde>
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d00a      	beq.n	800e19e <parse_number+0xde>
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	689a      	ldr	r2, [r3, #8]
 800e18c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e18e:	441a      	add	r2, r3
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	429a      	cmp	r2, r3
 800e196:	d3b3      	bcc.n	800e100 <parse_number+0x40>
        }
    }
loop_end:
 800e198:	e001      	b.n	800e19e <parse_number+0xde>
                goto loop_end;
 800e19a:	bf00      	nop
 800e19c:	e000      	b.n	800e1a0 <parse_number+0xe0>
loop_end:
 800e19e:	bf00      	nop
    number_c_string[i] = '\0';
 800e1a0:	f107 0208 	add.w	r2, r7, #8
 800e1a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e1a6:	4413      	add	r3, r2
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800e1ac:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800e1b0:	f107 0308 	add.w	r3, r7, #8
 800e1b4:	4611      	mov	r1, r2
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f00a fe02 	bl	8018dc0 <strtod>
 800e1bc:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 800e1c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1c2:	f107 0308 	add.w	r3, r7, #8
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d101      	bne.n	800e1ce <parse_number+0x10e>
    {
        return false; /* parse_error */
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	e036      	b.n	800e23c <parse_number+0x17c>
    }

    item->valuedouble = number;
 800e1ce:	6879      	ldr	r1, [r7, #4]
 800e1d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800e1d4:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800e1d8:	a31b      	add	r3, pc, #108	@ (adr r3, 800e248 <parse_number+0x188>)
 800e1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800e1e2:	f7fa fcbf 	bl	8008b64 <__aeabi_dcmpge>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d004      	beq.n	800e1f6 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800e1f2:	615a      	str	r2, [r3, #20]
 800e1f4:	e015      	b.n	800e222 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800e1f6:	f04f 0200 	mov.w	r2, #0
 800e1fa:	4b16      	ldr	r3, [pc, #88]	@ (800e254 <parse_number+0x194>)
 800e1fc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800e200:	f7fa fca6 	bl	8008b50 <__aeabi_dcmple>
 800e204:	4603      	mov	r3, r0
 800e206:	2b00      	cmp	r3, #0
 800e208:	d004      	beq.n	800e214 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e210:	615a      	str	r2, [r3, #20]
 800e212:	e006      	b.n	800e222 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800e214:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800e218:	f7fa fcce 	bl	8008bb8 <__aeabi_d2iz>
 800e21c:	4602      	mov	r2, r0
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2208      	movs	r2, #8
 800e226:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	689b      	ldr	r3, [r3, #8]
 800e22c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e22e:	f107 0208 	add.w	r2, r7, #8
 800e232:	1a8a      	subs	r2, r1, r2
 800e234:	441a      	add	r2, r3
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	609a      	str	r2, [r3, #8]
    return true;
 800e23a:	2301      	movs	r3, #1
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3760      	adds	r7, #96	@ 0x60
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}
 800e244:	f3af 8000 	nop.w
 800e248:	ffc00000 	.word	0xffc00000
 800e24c:	41dfffff 	.word	0x41dfffff
 800e250:	04007fe5 	.word	0x04007fe5
 800e254:	c1e00000 	.word	0xc1e00000

0800e258 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800e262:	2300      	movs	r3, #0
 800e264:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800e266:	2300      	movs	r3, #0
 800e268:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d003      	beq.n	800e278 <ensure+0x20>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d101      	bne.n	800e27c <ensure+0x24>
    {
        return NULL;
 800e278:	2300      	movs	r3, #0
 800e27a:	e083      	b.n	800e384 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d007      	beq.n	800e294 <ensure+0x3c>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	689a      	ldr	r2, [r3, #8]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d301      	bcc.n	800e294 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800e290:	2300      	movs	r3, #0
 800e292:	e077      	b.n	800e384 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	da01      	bge.n	800e29e <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800e29a:	2300      	movs	r3, #0
 800e29c:	e072      	b.n	800e384 <ensure+0x12c>
    }

    needed += p->offset + 1;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	689a      	ldr	r2, [r3, #8]
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	4413      	add	r3, r2
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	683a      	ldr	r2, [r7, #0]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d805      	bhi.n	800e2c0 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	689b      	ldr	r3, [r3, #8]
 800e2bc:	4413      	add	r3, r2
 800e2be:	e061      	b.n	800e384 <ensure+0x12c>
    }

    if (p->noalloc) {
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	691b      	ldr	r3, [r3, #16]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d001      	beq.n	800e2cc <ensure+0x74>
        return NULL;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	e05b      	b.n	800e384 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2d2:	d308      	bcc.n	800e2e6 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	db03      	blt.n	800e2e2 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800e2da:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e2de:	60bb      	str	r3, [r7, #8]
 800e2e0:	e004      	b.n	800e2ec <ensure+0x94>
        }
        else
        {
            return NULL;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	e04e      	b.n	800e384 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	005b      	lsls	r3, r3, #1
 800e2ea:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6a1b      	ldr	r3, [r3, #32]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d018      	beq.n	800e326 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6a1b      	ldr	r3, [r3, #32]
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	6812      	ldr	r2, [r2, #0]
 800e2fc:	68b9      	ldr	r1, [r7, #8]
 800e2fe:	4610      	mov	r0, r2
 800e300:	4798      	blx	r3
 800e302:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d132      	bne.n	800e370 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	69db      	ldr	r3, [r3, #28]
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	6812      	ldr	r2, [r2, #0]
 800e312:	4610      	mov	r0, r2
 800e314:	4798      	blx	r3
            p->length = 0;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2200      	movs	r2, #0
 800e31a:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2200      	movs	r2, #0
 800e320:	601a      	str	r2, [r3, #0]

            return NULL;
 800e322:	2300      	movs	r3, #0
 800e324:	e02e      	b.n	800e384 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	699b      	ldr	r3, [r3, #24]
 800e32a:	68b8      	ldr	r0, [r7, #8]
 800e32c:	4798      	blx	r3
 800e32e:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d10d      	bne.n	800e352 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	69db      	ldr	r3, [r3, #28]
 800e33a:	687a      	ldr	r2, [r7, #4]
 800e33c:	6812      	ldr	r2, [r2, #0]
 800e33e:	4610      	mov	r0, r2
 800e340:	4798      	blx	r3
            p->length = 0;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2200      	movs	r2, #0
 800e346:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2200      	movs	r2, #0
 800e34c:	601a      	str	r2, [r3, #0]

            return NULL;
 800e34e:	2300      	movs	r3, #0
 800e350:	e018      	b.n	800e384 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6819      	ldr	r1, [r3, #0]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	689b      	ldr	r3, [r3, #8]
 800e35a:	3301      	adds	r3, #1
 800e35c:	461a      	mov	r2, r3
 800e35e:	68f8      	ldr	r0, [r7, #12]
 800e360:	f00b fcd1 	bl	8019d06 <memcpy>
        p->hooks.deallocate(p->buffer);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	69db      	ldr	r3, [r3, #28]
 800e368:	687a      	ldr	r2, [r7, #4]
 800e36a:	6812      	ldr	r2, [r2, #0]
 800e36c:	4610      	mov	r0, r2
 800e36e:	4798      	blx	r3
    }
    p->length = newsize;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	68ba      	ldr	r2, [r7, #8]
 800e374:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	689b      	ldr	r3, [r3, #8]
 800e380:	68fa      	ldr	r2, [r7, #12]
 800e382:	4413      	add	r3, r2
}
 800e384:	4618      	mov	r0, r3
 800e386:	3710      	adds	r7, #16
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800e38c:	b590      	push	{r4, r7, lr}
 800e38e:	b085      	sub	sp, #20
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 800e394:	2300      	movs	r3, #0
 800e396:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d013      	beq.n	800e3c6 <update_offset+0x3a>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d00f      	beq.n	800e3c6 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	689b      	ldr	r3, [r3, #8]
 800e3ae:	4413      	add	r3, r2
 800e3b0:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	689c      	ldr	r4, [r3, #8]
 800e3b6:	68f8      	ldr	r0, [r7, #12]
 800e3b8:	f7f9 ff8a 	bl	80082d0 <strlen>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	18e2      	adds	r2, r4, r3
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	609a      	str	r2, [r3, #8]
 800e3c4:	e000      	b.n	800e3c8 <update_offset+0x3c>
        return;
 800e3c6:	bf00      	nop
}
 800e3c8:	3714      	adds	r7, #20
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd90      	pop	{r4, r7, pc}
	...

0800e3d0 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 800e3d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3d4:	b087      	sub	sp, #28
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	ed87 0b02 	vstr	d0, [r7, #8]
 800e3dc:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 800e3e0:	68b8      	ldr	r0, [r7, #8]
 800e3e2:	68fe      	ldr	r6, [r7, #12]
 800e3e4:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 800e3e8:	683a      	ldr	r2, [r7, #0]
 800e3ea:	687e      	ldr	r6, [r7, #4]
 800e3ec:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e3f0:	f7fa fbc2 	bl	8008b78 <__aeabi_dcmpgt>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d004      	beq.n	800e404 <compare_double+0x34>
 800e3fa:	68bc      	ldr	r4, [r7, #8]
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800e402:	e003      	b.n	800e40c <compare_double+0x3c>
 800e404:	683c      	ldr	r4, [r7, #0]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800e40c:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 800e410:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e414:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e418:	f7f9 ff66 	bl	80082e8 <__aeabi_dsub>
 800e41c:	4602      	mov	r2, r0
 800e41e:	460b      	mov	r3, r1
 800e420:	4690      	mov	r8, r2
 800e422:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800e426:	f04f 0200 	mov.w	r2, #0
 800e42a:	4b0c      	ldr	r3, [pc, #48]	@ (800e45c <compare_double+0x8c>)
 800e42c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e430:	f7fa f912 	bl	8008658 <__aeabi_dmul>
 800e434:	4602      	mov	r2, r0
 800e436:	460b      	mov	r3, r1
 800e438:	2101      	movs	r1, #1
 800e43a:	460c      	mov	r4, r1
 800e43c:	4640      	mov	r0, r8
 800e43e:	4649      	mov	r1, r9
 800e440:	f7fa fb86 	bl	8008b50 <__aeabi_dcmple>
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d101      	bne.n	800e44e <compare_double+0x7e>
 800e44a:	2300      	movs	r3, #0
 800e44c:	461c      	mov	r4, r3
 800e44e:	b2e3      	uxtb	r3, r4
}
 800e450:	4618      	mov	r0, r3
 800e452:	371c      	adds	r7, #28
 800e454:	46bd      	mov	sp, r7
 800e456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e45a:	bf00      	nop
 800e45c:	3cb00000 	.word	0x3cb00000

0800e460 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 800e460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e462:	b093      	sub	sp, #76	@ 0x4c
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800e46a:	2300      	movs	r3, #0
 800e46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800e474:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 800e478:	2300      	movs	r3, #0
 800e47a:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 800e47c:	2300      	movs	r3, #0
 800e47e:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 800e480:	f107 0314 	add.w	r3, r7, #20
 800e484:	2200      	movs	r2, #0
 800e486:	601a      	str	r2, [r3, #0]
 800e488:	605a      	str	r2, [r3, #4]
 800e48a:	609a      	str	r2, [r3, #8]
 800e48c:	60da      	str	r2, [r3, #12]
 800e48e:	611a      	str	r2, [r3, #16]
 800e490:	615a      	str	r2, [r3, #20]
 800e492:	831a      	strh	r2, [r3, #24]
    unsigned char decimal_point = get_decimal_point();
 800e494:	f7ff fe0c 	bl	800e0b0 <get_decimal_point>
 800e498:	4603      	mov	r3, r0
 800e49a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 800e49e:	f04f 0200 	mov.w	r2, #0
 800e4a2:	f04f 0300 	mov.w	r3, #0
 800e4a6:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d101      	bne.n	800e4b4 <print_number+0x54>
    {
        return false;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	e0b4      	b.n	800e61e <print_number+0x1be>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800e4b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800e4b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800e4bc:	f7fa fb66 	bl	8008b8c <__aeabi_dcmpun>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d121      	bne.n	800e50a <print_number+0xaa>
 800e4c6:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 800e4c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4ca:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	461e      	mov	r6, r3
 800e4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4d6:	4b54      	ldr	r3, [pc, #336]	@ (800e628 <print_number+0x1c8>)
 800e4d8:	4620      	mov	r0, r4
 800e4da:	4629      	mov	r1, r5
 800e4dc:	f7fa fb56 	bl	8008b8c <__aeabi_dcmpun>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d10b      	bne.n	800e4fe <print_number+0x9e>
 800e4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ea:	4b4f      	ldr	r3, [pc, #316]	@ (800e628 <print_number+0x1c8>)
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	4629      	mov	r1, r5
 800e4f0:	f7fa fb2e 	bl	8008b50 <__aeabi_dcmple>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d101      	bne.n	800e4fe <print_number+0x9e>
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	461e      	mov	r6, r3
 800e4fe:	b2f3      	uxtb	r3, r6
 800e500:	f083 0301 	eor.w	r3, r3, #1
 800e504:	b2db      	uxtb	r3, r3
 800e506:	2b00      	cmp	r3, #0
 800e508:	d007      	beq.n	800e51a <print_number+0xba>
    {
        length = sprintf((char*)number_buffer, "null");
 800e50a:	f107 0314 	add.w	r3, r7, #20
 800e50e:	4947      	ldr	r1, [pc, #284]	@ (800e62c <print_number+0x1cc>)
 800e510:	4618      	mov	r0, r3
 800e512:	f00b f9c1 	bl	8019898 <siprintf>
 800e516:	6478      	str	r0, [r7, #68]	@ 0x44
 800e518:	e03f      	b.n	800e59a <print_number+0x13a>
    }
    else if(d == (double)item->valueint)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	695b      	ldr	r3, [r3, #20]
 800e51e:	4618      	mov	r0, r3
 800e520:	f7fa f830 	bl	8008584 <__aeabi_i2d>
 800e524:	4602      	mov	r2, r0
 800e526:	460b      	mov	r3, r1
 800e528:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800e52c:	f7fa fafc 	bl	8008b28 <__aeabi_dcmpeq>
 800e530:	4603      	mov	r3, r0
 800e532:	2b00      	cmp	r3, #0
 800e534:	d009      	beq.n	800e54a <print_number+0xea>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	695a      	ldr	r2, [r3, #20]
 800e53a:	f107 0314 	add.w	r3, r7, #20
 800e53e:	493c      	ldr	r1, [pc, #240]	@ (800e630 <print_number+0x1d0>)
 800e540:	4618      	mov	r0, r3
 800e542:	f00b f9a9 	bl	8019898 <siprintf>
 800e546:	6478      	str	r0, [r7, #68]	@ 0x44
 800e548:	e027      	b.n	800e59a <print_number+0x13a>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 800e54a:	f107 0014 	add.w	r0, r7, #20
 800e54e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800e552:	4938      	ldr	r1, [pc, #224]	@ (800e634 <print_number+0x1d4>)
 800e554:	f00b f9a0 	bl	8019898 <siprintf>
 800e558:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 800e55a:	f107 0208 	add.w	r2, r7, #8
 800e55e:	f107 0314 	add.w	r3, r7, #20
 800e562:	4935      	ldr	r1, [pc, #212]	@ (800e638 <print_number+0x1d8>)
 800e564:	4618      	mov	r0, r3
 800e566:	f00b f9b9 	bl	80198dc <siscanf>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d10c      	bne.n	800e58a <print_number+0x12a>
 800e570:	ed97 7b02 	vldr	d7, [r7, #8]
 800e574:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 800e578:	eeb0 0a47 	vmov.f32	s0, s14
 800e57c:	eef0 0a67 	vmov.f32	s1, s15
 800e580:	f7ff ff26 	bl	800e3d0 <compare_double>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d107      	bne.n	800e59a <print_number+0x13a>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 800e58a:	f107 0014 	add.w	r0, r7, #20
 800e58e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800e592:	492a      	ldr	r1, [pc, #168]	@ (800e63c <print_number+0x1dc>)
 800e594:	f00b f980 	bl	8019898 <siprintf>
 800e598:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800e59a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	db02      	blt.n	800e5a6 <print_number+0x146>
 800e5a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5a2:	2b19      	cmp	r3, #25
 800e5a4:	dd01      	ble.n	800e5aa <print_number+0x14a>
    {
        return false;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	e039      	b.n	800e61e <print_number+0x1be>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800e5aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	6838      	ldr	r0, [r7, #0]
 800e5b2:	f7ff fe51 	bl	800e258 <ensure>
 800e5b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 800e5b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d101      	bne.n	800e5c2 <print_number+0x162>
    {
        return false;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	e02d      	b.n	800e61e <print_number+0x1be>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800e5c6:	e01a      	b.n	800e5fe <print_number+0x19e>
    {
        if (number_buffer[i] == decimal_point)
 800e5c8:	f107 0214 	add.w	r2, r7, #20
 800e5cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5ce:	4413      	add	r3, r2
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d105      	bne.n	800e5e6 <print_number+0x186>
        {
            output_pointer[i] = '.';
 800e5da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e5dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5de:	4413      	add	r3, r2
 800e5e0:	222e      	movs	r2, #46	@ 0x2e
 800e5e2:	701a      	strb	r2, [r3, #0]
            continue;
 800e5e4:	e008      	b.n	800e5f8 <print_number+0x198>
        }

        output_pointer[i] = number_buffer[i];
 800e5e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e5e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5ea:	4413      	add	r3, r2
 800e5ec:	f107 0114 	add.w	r1, r7, #20
 800e5f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e5f2:	440a      	add	r2, r1
 800e5f4:	7812      	ldrb	r2, [r2, #0]
 800e5f6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800e5f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800e5fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e600:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e602:	429a      	cmp	r2, r3
 800e604:	d3e0      	bcc.n	800e5c8 <print_number+0x168>
    }
    output_pointer[i] = '\0';
 800e606:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e60a:	4413      	add	r3, r2
 800e60c:	2200      	movs	r2, #0
 800e60e:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	689a      	ldr	r2, [r3, #8]
 800e614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e616:	441a      	add	r2, r3
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	609a      	str	r2, [r3, #8]

    return true;
 800e61c:	2301      	movs	r3, #1
}
 800e61e:	4618      	mov	r0, r3
 800e620:	374c      	adds	r7, #76	@ 0x4c
 800e622:	46bd      	mov	sp, r7
 800e624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e626:	bf00      	nop
 800e628:	7fefffff 	.word	0x7fefffff
 800e62c:	0801d5e8 	.word	0x0801d5e8
 800e630:	0801d5f0 	.word	0x0801d5f0
 800e634:	0801d5f4 	.word	0x0801d5f4
 800e638:	0801d5fc 	.word	0x0801d5fc
 800e63c:	0801d600 	.word	0x0801d600

0800e640 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800e640:	b480      	push	{r7}
 800e642:	b085      	sub	sp, #20
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800e648:	2300      	movs	r3, #0
 800e64a:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800e64c:	2300      	movs	r3, #0
 800e64e:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800e650:	2300      	movs	r3, #0
 800e652:	60bb      	str	r3, [r7, #8]
 800e654:	e04c      	b.n	800e6f0 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	4413      	add	r3, r2
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	2b2f      	cmp	r3, #47	@ 0x2f
 800e660:	d90f      	bls.n	800e682 <parse_hex4+0x42>
 800e662:	687a      	ldr	r2, [r7, #4]
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	4413      	add	r3, r2
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	2b39      	cmp	r3, #57	@ 0x39
 800e66c:	d809      	bhi.n	800e682 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800e66e:	687a      	ldr	r2, [r7, #4]
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	4413      	add	r3, r2
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	461a      	mov	r2, r3
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	4413      	add	r3, r2
 800e67c:	3b30      	subs	r3, #48	@ 0x30
 800e67e:	60fb      	str	r3, [r7, #12]
 800e680:	e02d      	b.n	800e6de <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800e682:	687a      	ldr	r2, [r7, #4]
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	4413      	add	r3, r2
 800e688:	781b      	ldrb	r3, [r3, #0]
 800e68a:	2b40      	cmp	r3, #64	@ 0x40
 800e68c:	d90f      	bls.n	800e6ae <parse_hex4+0x6e>
 800e68e:	687a      	ldr	r2, [r7, #4]
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	4413      	add	r3, r2
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	2b46      	cmp	r3, #70	@ 0x46
 800e698:	d809      	bhi.n	800e6ae <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800e69a:	687a      	ldr	r2, [r7, #4]
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	4413      	add	r3, r2
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	4413      	add	r3, r2
 800e6a8:	3b37      	subs	r3, #55	@ 0x37
 800e6aa:	60fb      	str	r3, [r7, #12]
 800e6ac:	e017      	b.n	800e6de <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800e6ae:	687a      	ldr	r2, [r7, #4]
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	4413      	add	r3, r2
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	2b60      	cmp	r3, #96	@ 0x60
 800e6b8:	d90f      	bls.n	800e6da <parse_hex4+0x9a>
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	4413      	add	r3, r2
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	2b66      	cmp	r3, #102	@ 0x66
 800e6c4:	d809      	bhi.n	800e6da <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	4413      	add	r3, r2
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	4413      	add	r3, r2
 800e6d4:	3b57      	subs	r3, #87	@ 0x57
 800e6d6:	60fb      	str	r3, [r7, #12]
 800e6d8:	e001      	b.n	800e6de <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	e00c      	b.n	800e6f8 <parse_hex4+0xb8>
        }

        if (i < 3)
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	2b02      	cmp	r3, #2
 800e6e2:	d802      	bhi.n	800e6ea <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	011b      	lsls	r3, r3, #4
 800e6e8:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	3301      	adds	r3, #1
 800e6ee:	60bb      	str	r3, [r7, #8]
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	2b03      	cmp	r3, #3
 800e6f4:	d9af      	bls.n	800e656 <parse_hex4+0x16>
        }
    }

    return h;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3714      	adds	r7, #20
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e702:	4770      	bx	lr

0800e704 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b08a      	sub	sp, #40	@ 0x28
 800e708:	af00      	add	r7, sp, #0
 800e70a:	60f8      	str	r0, [r7, #12]
 800e70c:	60b9      	str	r1, [r7, #8]
 800e70e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800e710:	2300      	movs	r3, #0
 800e712:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800e714:	2300      	movs	r3, #0
 800e716:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800e71c:	2300      	movs	r3, #0
 800e71e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 800e722:	2300      	movs	r3, #0
 800e724:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 800e728:	2300      	movs	r3, #0
 800e72a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 800e72e:	2300      	movs	r3, #0
 800e730:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800e734:	68ba      	ldr	r2, [r7, #8]
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	1ad3      	subs	r3, r2, r3
 800e73a:	2b05      	cmp	r3, #5
 800e73c:	f340 80b7 	ble.w	800e8ae <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800e740:	69bb      	ldr	r3, [r7, #24]
 800e742:	3302      	adds	r3, #2
 800e744:	4618      	mov	r0, r3
 800e746:	f7ff ff7b 	bl	800e640 <parse_hex4>
 800e74a:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800e752:	d304      	bcc.n	800e75e <utf16_literal_to_utf8+0x5a>
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800e75a:	f0c0 80aa 	bcc.w	800e8b2 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800e75e:	69fb      	ldr	r3, [r7, #28]
 800e760:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800e764:	d337      	bcc.n	800e7d6 <utf16_literal_to_utf8+0xd2>
 800e766:	69fb      	ldr	r3, [r7, #28]
 800e768:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800e76c:	d233      	bcs.n	800e7d6 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800e76e:	69bb      	ldr	r3, [r7, #24]
 800e770:	3306      	adds	r3, #6
 800e772:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800e774:	2300      	movs	r3, #0
 800e776:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800e778:	230c      	movs	r3, #12
 800e77a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 800e77e:	68ba      	ldr	r2, [r7, #8]
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	1ad3      	subs	r3, r2, r3
 800e784:	2b05      	cmp	r3, #5
 800e786:	f340 8096 	ble.w	800e8b6 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	2b5c      	cmp	r3, #92	@ 0x5c
 800e790:	f040 8093 	bne.w	800e8ba <utf16_literal_to_utf8+0x1b6>
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	3301      	adds	r3, #1
 800e798:	781b      	ldrb	r3, [r3, #0]
 800e79a:	2b75      	cmp	r3, #117	@ 0x75
 800e79c:	f040 808d 	bne.w	800e8ba <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	3302      	adds	r3, #2
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7ff ff4b 	bl	800e640 <parse_hex4>
 800e7aa:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800e7b2:	f0c0 8084 	bcc.w	800e8be <utf16_literal_to_utf8+0x1ba>
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800e7bc:	d27f      	bcs.n	800e8be <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	029a      	lsls	r2, r3, #10
 800e7c2:	4b43      	ldr	r3, [pc, #268]	@ (800e8d0 <utf16_literal_to_utf8+0x1cc>)
 800e7c4:	4013      	ands	r3, r2
 800e7c6:	693a      	ldr	r2, [r7, #16]
 800e7c8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800e7d2:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 800e7d4:	e004      	b.n	800e7e0 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800e7d6:	2306      	movs	r3, #6
 800e7d8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800e7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e2:	2b7f      	cmp	r3, #127	@ 0x7f
 800e7e4:	d803      	bhi.n	800e7ee <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e7ec:	e01f      	b.n	800e82e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800e7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e7f4:	d206      	bcs.n	800e804 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800e7f6:	2302      	movs	r3, #2
 800e7f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800e7fc:	23c0      	movs	r3, #192	@ 0xc0
 800e7fe:	f887 3020 	strb.w	r3, [r7, #32]
 800e802:	e014      	b.n	800e82e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800e804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e80a:	d206      	bcs.n	800e81a <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800e80c:	2303      	movs	r3, #3
 800e80e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800e812:	23e0      	movs	r3, #224	@ 0xe0
 800e814:	f887 3020 	strb.w	r3, [r7, #32]
 800e818:	e009      	b.n	800e82e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800e81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e81c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800e820:	d24f      	bcs.n	800e8c2 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800e822:	2304      	movs	r3, #4
 800e824:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800e828:	23f0      	movs	r3, #240	@ 0xf0
 800e82a:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800e82e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e832:	3b01      	subs	r3, #1
 800e834:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e838:	e015      	b.n	800e866 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800e83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e842:	b2da      	uxtb	r2, r3
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6819      	ldr	r1, [r3, #0]
 800e848:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e84c:	440b      	add	r3, r1
 800e84e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800e852:	b2d2      	uxtb	r2, r2
 800e854:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800e856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e858:	099b      	lsrs	r3, r3, #6
 800e85a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800e85c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e860:	3b01      	subs	r3, #1
 800e862:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e866:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d1e5      	bne.n	800e83a <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800e86e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e872:	2b01      	cmp	r3, #1
 800e874:	d909      	bls.n	800e88a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800e876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e878:	b2d9      	uxtb	r1, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e882:	430a      	orrs	r2, r1
 800e884:	b2d2      	uxtb	r2, r2
 800e886:	701a      	strb	r2, [r3, #0]
 800e888:	e007      	b.n	800e89a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800e88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e88c:	b2da      	uxtb	r2, r3
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e896:	b2d2      	uxtb	r2, r2
 800e898:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681a      	ldr	r2, [r3, #0]
 800e89e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e8a2:	441a      	add	r2, r3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800e8a8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e8ac:	e00b      	b.n	800e8c6 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800e8ae:	bf00      	nop
 800e8b0:	e008      	b.n	800e8c4 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800e8b2:	bf00      	nop
 800e8b4:	e006      	b.n	800e8c4 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800e8b6:	bf00      	nop
 800e8b8:	e004      	b.n	800e8c4 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800e8ba:	bf00      	nop
 800e8bc:	e002      	b.n	800e8c4 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800e8be:	bf00      	nop
 800e8c0:	e000      	b.n	800e8c4 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800e8c2:	bf00      	nop

fail:
    return 0;
 800e8c4:	2300      	movs	r3, #0
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3728      	adds	r7, #40	@ 0x28
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	000ffc00 	.word	0x000ffc00

0800e8d4 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b08a      	sub	sp, #40	@ 0x28
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	689b      	ldr	r3, [r3, #8]
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	4413      	add	r3, r2
 800e8ea:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	689b      	ldr	r3, [r3, #8]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	4413      	add	r3, r2
 800e8f8:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800e8fe:	2300      	movs	r3, #0
 800e900:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	681a      	ldr	r2, [r3, #0]
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	689b      	ldr	r3, [r3, #8]
 800e90a:	4413      	add	r3, r2
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	2b22      	cmp	r3, #34	@ 0x22
 800e910:	f040 8103 	bne.w	800eb1a <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800e914:	2300      	movs	r3, #0
 800e916:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800e918:	2300      	movs	r3, #0
 800e91a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800e91c:	e017      	b.n	800e94e <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800e91e:	6a3b      	ldr	r3, [r7, #32]
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	2b5c      	cmp	r3, #92	@ 0x5c
 800e924:	d110      	bne.n	800e948 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800e926:	6a3b      	ldr	r3, [r7, #32]
 800e928:	1c5a      	adds	r2, r3, #1
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	1ad3      	subs	r3, r2, r3
 800e930:	461a      	mov	r2, r3
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	685b      	ldr	r3, [r3, #4]
 800e936:	429a      	cmp	r2, r3
 800e938:	f080 80f1 	bcs.w	800eb1e <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	3301      	adds	r3, #1
 800e940:	61bb      	str	r3, [r7, #24]
                input_end++;
 800e942:	6a3b      	ldr	r3, [r7, #32]
 800e944:	3301      	adds	r3, #1
 800e946:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800e948:	6a3b      	ldr	r3, [r7, #32]
 800e94a:	3301      	adds	r3, #1
 800e94c:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	6a3a      	ldr	r2, [r7, #32]
 800e954:	1ad3      	subs	r3, r2, r3
 800e956:	461a      	mov	r2, r3
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d203      	bcs.n	800e968 <parse_string+0x94>
 800e960:	6a3b      	ldr	r3, [r7, #32]
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	2b22      	cmp	r3, #34	@ 0x22
 800e966:	d1da      	bne.n	800e91e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	6a3a      	ldr	r2, [r7, #32]
 800e96e:	1ad3      	subs	r3, r2, r3
 800e970:	461a      	mov	r2, r3
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	685b      	ldr	r3, [r3, #4]
 800e976:	429a      	cmp	r2, r3
 800e978:	f080 80d3 	bcs.w	800eb22 <parse_string+0x24e>
 800e97c:	6a3b      	ldr	r3, [r7, #32]
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	2b22      	cmp	r3, #34	@ 0x22
 800e982:	f040 80ce 	bne.w	800eb22 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	681a      	ldr	r2, [r3, #0]
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	689b      	ldr	r3, [r3, #8]
 800e98e:	4413      	add	r3, r2
 800e990:	6a3a      	ldr	r2, [r7, #32]
 800e992:	1ad3      	subs	r3, r2, r3
 800e994:	461a      	mov	r2, r3
 800e996:	69bb      	ldr	r3, [r7, #24]
 800e998:	1ad3      	subs	r3, r2, r3
 800e99a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	691b      	ldr	r3, [r3, #16]
 800e9a0:	693a      	ldr	r2, [r7, #16]
 800e9a2:	3201      	adds	r2, #1
 800e9a4:	4610      	mov	r0, r2
 800e9a6:	4798      	blx	r3
 800e9a8:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800e9aa:	69fb      	ldr	r3, [r7, #28]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	f000 80ba 	beq.w	800eb26 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800e9b2:	69fb      	ldr	r3, [r7, #28]
 800e9b4:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800e9b6:	e094      	b.n	800eae2 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 800e9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	2b5c      	cmp	r3, #92	@ 0x5c
 800e9be:	d008      	beq.n	800e9d2 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800e9c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9c2:	1c53      	adds	r3, r2, #1
 800e9c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	1c59      	adds	r1, r3, #1
 800e9ca:	60f9      	str	r1, [r7, #12]
 800e9cc:	7812      	ldrb	r2, [r2, #0]
 800e9ce:	701a      	strb	r2, [r3, #0]
 800e9d0:	e087      	b.n	800eae2 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800e9d2:	2302      	movs	r3, #2
 800e9d4:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800e9d6:	6a3a      	ldr	r2, [r7, #32]
 800e9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9da:	1ad3      	subs	r3, r2, r3
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	f340 80a4 	ble.w	800eb2a <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800e9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	2b75      	cmp	r3, #117	@ 0x75
 800e9ea:	f300 80a0 	bgt.w	800eb2e <parse_string+0x25a>
 800e9ee:	2b5c      	cmp	r3, #92	@ 0x5c
 800e9f0:	da04      	bge.n	800e9fc <parse_string+0x128>
 800e9f2:	2b22      	cmp	r3, #34	@ 0x22
 800e9f4:	d05c      	beq.n	800eab0 <parse_string+0x1dc>
 800e9f6:	2b2f      	cmp	r3, #47	@ 0x2f
 800e9f8:	d05a      	beq.n	800eab0 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800e9fa:	e098      	b.n	800eb2e <parse_string+0x25a>
            switch (input_pointer[1])
 800e9fc:	3b5c      	subs	r3, #92	@ 0x5c
 800e9fe:	2b19      	cmp	r3, #25
 800ea00:	f200 8095 	bhi.w	800eb2e <parse_string+0x25a>
 800ea04:	a201      	add	r2, pc, #4	@ (adr r2, 800ea0c <parse_string+0x138>)
 800ea06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea0a:	bf00      	nop
 800ea0c:	0800eab1 	.word	0x0800eab1
 800ea10:	0800eb2f 	.word	0x0800eb2f
 800ea14:	0800eb2f 	.word	0x0800eb2f
 800ea18:	0800eb2f 	.word	0x0800eb2f
 800ea1c:	0800eb2f 	.word	0x0800eb2f
 800ea20:	0800eb2f 	.word	0x0800eb2f
 800ea24:	0800ea75 	.word	0x0800ea75
 800ea28:	0800eb2f 	.word	0x0800eb2f
 800ea2c:	0800eb2f 	.word	0x0800eb2f
 800ea30:	0800eb2f 	.word	0x0800eb2f
 800ea34:	0800ea81 	.word	0x0800ea81
 800ea38:	0800eb2f 	.word	0x0800eb2f
 800ea3c:	0800eb2f 	.word	0x0800eb2f
 800ea40:	0800eb2f 	.word	0x0800eb2f
 800ea44:	0800eb2f 	.word	0x0800eb2f
 800ea48:	0800eb2f 	.word	0x0800eb2f
 800ea4c:	0800eb2f 	.word	0x0800eb2f
 800ea50:	0800eb2f 	.word	0x0800eb2f
 800ea54:	0800ea8d 	.word	0x0800ea8d
 800ea58:	0800eb2f 	.word	0x0800eb2f
 800ea5c:	0800eb2f 	.word	0x0800eb2f
 800ea60:	0800eb2f 	.word	0x0800eb2f
 800ea64:	0800ea99 	.word	0x0800ea99
 800ea68:	0800eb2f 	.word	0x0800eb2f
 800ea6c:	0800eaa5 	.word	0x0800eaa5
 800ea70:	0800eac1 	.word	0x0800eac1
                    *output_pointer++ = '\b';
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	1c5a      	adds	r2, r3, #1
 800ea78:	60fa      	str	r2, [r7, #12]
 800ea7a:	2208      	movs	r2, #8
 800ea7c:	701a      	strb	r2, [r3, #0]
                    break;
 800ea7e:	e02c      	b.n	800eada <parse_string+0x206>
                    *output_pointer++ = '\f';
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	1c5a      	adds	r2, r3, #1
 800ea84:	60fa      	str	r2, [r7, #12]
 800ea86:	220c      	movs	r2, #12
 800ea88:	701a      	strb	r2, [r3, #0]
                    break;
 800ea8a:	e026      	b.n	800eada <parse_string+0x206>
                    *output_pointer++ = '\n';
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	1c5a      	adds	r2, r3, #1
 800ea90:	60fa      	str	r2, [r7, #12]
 800ea92:	220a      	movs	r2, #10
 800ea94:	701a      	strb	r2, [r3, #0]
                    break;
 800ea96:	e020      	b.n	800eada <parse_string+0x206>
                    *output_pointer++ = '\r';
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	1c5a      	adds	r2, r3, #1
 800ea9c:	60fa      	str	r2, [r7, #12]
 800ea9e:	220d      	movs	r2, #13
 800eaa0:	701a      	strb	r2, [r3, #0]
                    break;
 800eaa2:	e01a      	b.n	800eada <parse_string+0x206>
                    *output_pointer++ = '\t';
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	1c5a      	adds	r2, r3, #1
 800eaa8:	60fa      	str	r2, [r7, #12]
 800eaaa:	2209      	movs	r2, #9
 800eaac:	701a      	strb	r2, [r3, #0]
                    break;
 800eaae:	e014      	b.n	800eada <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 800eab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eab2:	1c5a      	adds	r2, r3, #1
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	1c59      	adds	r1, r3, #1
 800eab8:	60f9      	str	r1, [r7, #12]
 800eaba:	7812      	ldrb	r2, [r2, #0]
 800eabc:	701a      	strb	r2, [r3, #0]
                    break;
 800eabe:	e00c      	b.n	800eada <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800eac0:	f107 030c 	add.w	r3, r7, #12
 800eac4:	461a      	mov	r2, r3
 800eac6:	6a39      	ldr	r1, [r7, #32]
 800eac8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eaca:	f7ff fe1b 	bl	800e704 <utf16_literal_to_utf8>
 800eace:	4603      	mov	r3, r0
 800ead0:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800ead2:	7dfb      	ldrb	r3, [r7, #23]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d02c      	beq.n	800eb32 <parse_string+0x25e>
                    break;
 800ead8:	bf00      	nop
            }
            input_pointer += sequence_length;
 800eada:	7dfb      	ldrb	r3, [r7, #23]
 800eadc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eade:	4413      	add	r3, r2
 800eae0:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800eae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eae4:	6a3b      	ldr	r3, [r7, #32]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	f4ff af66 	bcc.w	800e9b8 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2210      	movs	r2, #16
 800eaf6:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	69fa      	ldr	r2, [r7, #28]
 800eafc:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	6a3a      	ldr	r2, [r7, #32]
 800eb04:	1ad3      	subs	r3, r2, r3
 800eb06:	461a      	mov	r2, r3
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	689b      	ldr	r3, [r3, #8]
 800eb10:	1c5a      	adds	r2, r3, #1
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	609a      	str	r2, [r3, #8]

    return true;
 800eb16:	2301      	movs	r3, #1
 800eb18:	e020      	b.n	800eb5c <parse_string+0x288>
        goto fail;
 800eb1a:	bf00      	nop
 800eb1c:	e00a      	b.n	800eb34 <parse_string+0x260>
                    goto fail;
 800eb1e:	bf00      	nop
 800eb20:	e008      	b.n	800eb34 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800eb22:	bf00      	nop
 800eb24:	e006      	b.n	800eb34 <parse_string+0x260>
            goto fail; /* allocation failure */
 800eb26:	bf00      	nop
 800eb28:	e004      	b.n	800eb34 <parse_string+0x260>
                goto fail;
 800eb2a:	bf00      	nop
 800eb2c:	e002      	b.n	800eb34 <parse_string+0x260>
                    goto fail;
 800eb2e:	bf00      	nop
 800eb30:	e000      	b.n	800eb34 <parse_string+0x260>
                        goto fail;
 800eb32:	bf00      	nop

fail:
    if (output != NULL)
 800eb34:	69fb      	ldr	r3, [r7, #28]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d005      	beq.n	800eb46 <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	695b      	ldr	r3, [r3, #20]
 800eb3e:	69f8      	ldr	r0, [r7, #28]
 800eb40:	4798      	blx	r3
        output = NULL;
 800eb42:	2300      	movs	r3, #0
 800eb44:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 800eb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d006      	beq.n	800eb5a <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb52:	1ad3      	subs	r3, r2, r3
 800eb54:	461a      	mov	r2, r3
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	609a      	str	r2, [r3, #8]
    }

    return false;
 800eb5a:	2300      	movs	r3, #0
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3728      	adds	r7, #40	@ 0x28
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b088      	sub	sp, #32
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 800eb72:	2300      	movs	r3, #0
 800eb74:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800eb76:	2300      	movs	r3, #0
 800eb78:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d101      	bne.n	800eb8c <print_string_ptr+0x28>
    {
        return false;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	e110      	b.n	800edae <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d111      	bne.n	800ebb6 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 800eb92:	2103      	movs	r1, #3
 800eb94:	6838      	ldr	r0, [r7, #0]
 800eb96:	f7ff fb5f 	bl	800e258 <ensure>
 800eb9a:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d101      	bne.n	800eba6 <print_string_ptr+0x42>
        {
            return false;
 800eba2:	2300      	movs	r3, #0
 800eba4:	e103      	b.n	800edae <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	4a83      	ldr	r2, [pc, #524]	@ (800edb8 <print_string_ptr+0x254>)
 800ebaa:	8811      	ldrh	r1, [r2, #0]
 800ebac:	7892      	ldrb	r2, [r2, #2]
 800ebae:	8019      	strh	r1, [r3, #0]
 800ebb0:	709a      	strb	r2, [r3, #2]

        return true;
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	e0fb      	b.n	800edae <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	61fb      	str	r3, [r7, #28]
 800ebba:	e024      	b.n	800ec06 <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 800ebbc:	69fb      	ldr	r3, [r7, #28]
 800ebbe:	781b      	ldrb	r3, [r3, #0]
 800ebc0:	2b22      	cmp	r3, #34	@ 0x22
 800ebc2:	dc0f      	bgt.n	800ebe4 <print_string_ptr+0x80>
 800ebc4:	2b08      	cmp	r3, #8
 800ebc6:	db13      	blt.n	800ebf0 <print_string_ptr+0x8c>
 800ebc8:	3b08      	subs	r3, #8
 800ebca:	4a7c      	ldr	r2, [pc, #496]	@ (800edbc <print_string_ptr+0x258>)
 800ebcc:	fa22 f303 	lsr.w	r3, r2, r3
 800ebd0:	f003 0301 	and.w	r3, r3, #1
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	bf14      	ite	ne
 800ebd8:	2301      	movne	r3, #1
 800ebda:	2300      	moveq	r3, #0
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d102      	bne.n	800ebe8 <print_string_ptr+0x84>
 800ebe2:	e005      	b.n	800ebf0 <print_string_ptr+0x8c>
 800ebe4:	2b5c      	cmp	r3, #92	@ 0x5c
 800ebe6:	d103      	bne.n	800ebf0 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	3301      	adds	r3, #1
 800ebec:	617b      	str	r3, [r7, #20]
                break;
 800ebee:	e007      	b.n	800ec00 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	2b1f      	cmp	r3, #31
 800ebf6:	d802      	bhi.n	800ebfe <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	3305      	adds	r3, #5
 800ebfc:	617b      	str	r3, [r7, #20]
                }
                break;
 800ebfe:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	3301      	adds	r3, #1
 800ec04:	61fb      	str	r3, [r7, #28]
 800ec06:	69fb      	ldr	r3, [r7, #28]
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d1d6      	bne.n	800ebbc <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800ec0e:	69fa      	ldr	r2, [r7, #28]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	1ad3      	subs	r3, r2, r3
 800ec14:	461a      	mov	r2, r3
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	4413      	add	r3, r2
 800ec1a:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	3303      	adds	r3, #3
 800ec20:	4619      	mov	r1, r3
 800ec22:	6838      	ldr	r0, [r7, #0]
 800ec24:	f7ff fb18 	bl	800e258 <ensure>
 800ec28:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d101      	bne.n	800ec34 <print_string_ptr+0xd0>
    {
        return false;
 800ec30:	2300      	movs	r3, #0
 800ec32:	e0bc      	b.n	800edae <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d117      	bne.n	800ec6a <print_string_ptr+0x106>
    {
        output[0] = '\"';
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	2222      	movs	r2, #34	@ 0x22
 800ec3e:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	3301      	adds	r3, #1
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	6879      	ldr	r1, [r7, #4]
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f00b f85c 	bl	8019d06 <memcpy>
        output[output_length + 1] = '\"';
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	3301      	adds	r3, #1
 800ec52:	693a      	ldr	r2, [r7, #16]
 800ec54:	4413      	add	r3, r2
 800ec56:	2222      	movs	r2, #34	@ 0x22
 800ec58:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	3302      	adds	r3, #2
 800ec5e:	693a      	ldr	r2, [r7, #16]
 800ec60:	4413      	add	r3, r2
 800ec62:	2200      	movs	r2, #0
 800ec64:	701a      	strb	r2, [r3, #0]

        return true;
 800ec66:	2301      	movs	r3, #1
 800ec68:	e0a1      	b.n	800edae <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	2222      	movs	r2, #34	@ 0x22
 800ec6e:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	3301      	adds	r3, #1
 800ec74:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	61fb      	str	r3, [r7, #28]
 800ec7a:	e086      	b.n	800ed8a <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	781b      	ldrb	r3, [r3, #0]
 800ec80:	2b1f      	cmp	r3, #31
 800ec82:	d90c      	bls.n	800ec9e <print_string_ptr+0x13a>
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	2b22      	cmp	r3, #34	@ 0x22
 800ec8a:	d008      	beq.n	800ec9e <print_string_ptr+0x13a>
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	2b5c      	cmp	r3, #92	@ 0x5c
 800ec92:	d004      	beq.n	800ec9e <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 800ec94:	69fb      	ldr	r3, [r7, #28]
 800ec96:	781a      	ldrb	r2, [r3, #0]
 800ec98:	69bb      	ldr	r3, [r7, #24]
 800ec9a:	701a      	strb	r2, [r3, #0]
 800ec9c:	e06f      	b.n	800ed7e <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 800ec9e:	69bb      	ldr	r3, [r7, #24]
 800eca0:	1c5a      	adds	r2, r3, #1
 800eca2:	61ba      	str	r2, [r7, #24]
 800eca4:	225c      	movs	r2, #92	@ 0x5c
 800eca6:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	2b22      	cmp	r3, #34	@ 0x22
 800ecae:	dc3d      	bgt.n	800ed2c <print_string_ptr+0x1c8>
 800ecb0:	2b08      	cmp	r3, #8
 800ecb2:	db59      	blt.n	800ed68 <print_string_ptr+0x204>
 800ecb4:	3b08      	subs	r3, #8
 800ecb6:	2b1a      	cmp	r3, #26
 800ecb8:	d856      	bhi.n	800ed68 <print_string_ptr+0x204>
 800ecba:	a201      	add	r2, pc, #4	@ (adr r2, 800ecc0 <print_string_ptr+0x15c>)
 800ecbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecc0:	0800ed41 	.word	0x0800ed41
 800ecc4:	0800ed61 	.word	0x0800ed61
 800ecc8:	0800ed51 	.word	0x0800ed51
 800eccc:	0800ed69 	.word	0x0800ed69
 800ecd0:	0800ed49 	.word	0x0800ed49
 800ecd4:	0800ed59 	.word	0x0800ed59
 800ecd8:	0800ed69 	.word	0x0800ed69
 800ecdc:	0800ed69 	.word	0x0800ed69
 800ece0:	0800ed69 	.word	0x0800ed69
 800ece4:	0800ed69 	.word	0x0800ed69
 800ece8:	0800ed69 	.word	0x0800ed69
 800ecec:	0800ed69 	.word	0x0800ed69
 800ecf0:	0800ed69 	.word	0x0800ed69
 800ecf4:	0800ed69 	.word	0x0800ed69
 800ecf8:	0800ed69 	.word	0x0800ed69
 800ecfc:	0800ed69 	.word	0x0800ed69
 800ed00:	0800ed69 	.word	0x0800ed69
 800ed04:	0800ed69 	.word	0x0800ed69
 800ed08:	0800ed69 	.word	0x0800ed69
 800ed0c:	0800ed69 	.word	0x0800ed69
 800ed10:	0800ed69 	.word	0x0800ed69
 800ed14:	0800ed69 	.word	0x0800ed69
 800ed18:	0800ed69 	.word	0x0800ed69
 800ed1c:	0800ed69 	.word	0x0800ed69
 800ed20:	0800ed69 	.word	0x0800ed69
 800ed24:	0800ed69 	.word	0x0800ed69
 800ed28:	0800ed39 	.word	0x0800ed39
 800ed2c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ed2e:	d11b      	bne.n	800ed68 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 800ed30:	69bb      	ldr	r3, [r7, #24]
 800ed32:	225c      	movs	r2, #92	@ 0x5c
 800ed34:	701a      	strb	r2, [r3, #0]
                    break;
 800ed36:	e022      	b.n	800ed7e <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 800ed38:	69bb      	ldr	r3, [r7, #24]
 800ed3a:	2222      	movs	r2, #34	@ 0x22
 800ed3c:	701a      	strb	r2, [r3, #0]
                    break;
 800ed3e:	e01e      	b.n	800ed7e <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	2262      	movs	r2, #98	@ 0x62
 800ed44:	701a      	strb	r2, [r3, #0]
                    break;
 800ed46:	e01a      	b.n	800ed7e <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 800ed48:	69bb      	ldr	r3, [r7, #24]
 800ed4a:	2266      	movs	r2, #102	@ 0x66
 800ed4c:	701a      	strb	r2, [r3, #0]
                    break;
 800ed4e:	e016      	b.n	800ed7e <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 800ed50:	69bb      	ldr	r3, [r7, #24]
 800ed52:	226e      	movs	r2, #110	@ 0x6e
 800ed54:	701a      	strb	r2, [r3, #0]
                    break;
 800ed56:	e012      	b.n	800ed7e <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 800ed58:	69bb      	ldr	r3, [r7, #24]
 800ed5a:	2272      	movs	r2, #114	@ 0x72
 800ed5c:	701a      	strb	r2, [r3, #0]
                    break;
 800ed5e:	e00e      	b.n	800ed7e <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 800ed60:	69bb      	ldr	r3, [r7, #24]
 800ed62:	2274      	movs	r2, #116	@ 0x74
 800ed64:	701a      	strb	r2, [r3, #0]
                    break;
 800ed66:	e00a      	b.n	800ed7e <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 800ed68:	69fb      	ldr	r3, [r7, #28]
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	4914      	ldr	r1, [pc, #80]	@ (800edc0 <print_string_ptr+0x25c>)
 800ed70:	69b8      	ldr	r0, [r7, #24]
 800ed72:	f00a fd91 	bl	8019898 <siprintf>
                    output_pointer += 4;
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	3304      	adds	r3, #4
 800ed7a:	61bb      	str	r3, [r7, #24]
                    break;
 800ed7c:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800ed7e:	69fb      	ldr	r3, [r7, #28]
 800ed80:	3301      	adds	r3, #1
 800ed82:	61fb      	str	r3, [r7, #28]
 800ed84:	69bb      	ldr	r3, [r7, #24]
 800ed86:	3301      	adds	r3, #1
 800ed88:	61bb      	str	r3, [r7, #24]
 800ed8a:	69fb      	ldr	r3, [r7, #28]
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	f47f af74 	bne.w	800ec7c <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	3301      	adds	r3, #1
 800ed98:	693a      	ldr	r2, [r7, #16]
 800ed9a:	4413      	add	r3, r2
 800ed9c:	2222      	movs	r2, #34	@ 0x22
 800ed9e:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	3302      	adds	r3, #2
 800eda4:	693a      	ldr	r2, [r7, #16]
 800eda6:	4413      	add	r3, r2
 800eda8:	2200      	movs	r2, #0
 800edaa:	701a      	strb	r2, [r3, #0]

    return true;
 800edac:	2301      	movs	r3, #1
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3720      	adds	r7, #32
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	0801d608 	.word	0x0801d608
 800edbc:	04000037 	.word	0x04000037
 800edc0:	0801d60c 	.word	0x0801d60c

0800edc4 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	691b      	ldr	r3, [r3, #16]
 800edd2:	6839      	ldr	r1, [r7, #0]
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7ff fec5 	bl	800eb64 <print_string_ptr>
 800edda:	4603      	mov	r3, r0
}
 800eddc:	4618      	mov	r0, r3
 800edde:	3708      	adds	r7, #8
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}

0800ede4 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800ede4:	b480      	push	{r7}
 800ede6:	b083      	sub	sp, #12
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d003      	beq.n	800edfa <buffer_skip_whitespace+0x16>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d101      	bne.n	800edfe <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800edfa:	2300      	movs	r3, #0
 800edfc:	e02c      	b.n	800ee58 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d005      	beq.n	800ee10 <buffer_skip_whitespace+0x2c>
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	689a      	ldr	r2, [r3, #8]
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	685b      	ldr	r3, [r3, #4]
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d306      	bcc.n	800ee1e <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	e021      	b.n	800ee58 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	689b      	ldr	r3, [r3, #8]
 800ee18:	1c5a      	adds	r2, r3, #1
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d00d      	beq.n	800ee40 <buffer_skip_whitespace+0x5c>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	689a      	ldr	r2, [r3, #8]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d207      	bcs.n	800ee40 <buffer_skip_whitespace+0x5c>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	689b      	ldr	r3, [r3, #8]
 800ee38:	4413      	add	r3, r2
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	2b20      	cmp	r3, #32
 800ee3e:	d9e9      	bls.n	800ee14 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	689a      	ldr	r2, [r3, #8]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	685b      	ldr	r3, [r3, #4]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d104      	bne.n	800ee56 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	689b      	ldr	r3, [r3, #8]
 800ee50:	1e5a      	subs	r2, r3, #1
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800ee56:	687b      	ldr	r3, [r7, #4]
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	370c      	adds	r7, #12
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr

0800ee64 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d007      	beq.n	800ee82 <skip_utf8_bom+0x1e>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d003      	beq.n	800ee82 <skip_utf8_bom+0x1e>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	689b      	ldr	r3, [r3, #8]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d001      	beq.n	800ee86 <skip_utf8_bom+0x22>
    {
        return NULL;
 800ee82:	2300      	movs	r3, #0
 800ee84:	e01c      	b.n	800eec0 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d018      	beq.n	800eebe <skip_utf8_bom+0x5a>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	689b      	ldr	r3, [r3, #8]
 800ee90:	1d1a      	adds	r2, r3, #4
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	685b      	ldr	r3, [r3, #4]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d211      	bcs.n	800eebe <skip_utf8_bom+0x5a>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	689b      	ldr	r3, [r3, #8]
 800eea2:	4413      	add	r3, r2
 800eea4:	2203      	movs	r2, #3
 800eea6:	4908      	ldr	r1, [pc, #32]	@ (800eec8 <skip_utf8_bom+0x64>)
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f00a fe61 	bl	8019b70 <strncmp>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d104      	bne.n	800eebe <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	689b      	ldr	r3, [r3, #8]
 800eeb8:	1cda      	adds	r2, r3, #3
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800eebe:	687b      	ldr	r3, [r7, #4]
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3708      	adds	r7, #8
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}
 800eec8:	0801d614 	.word	0x0801d614

0800eecc <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b086      	sub	sp, #24
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d101      	bne.n	800eee2 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800eede:	2300      	movs	r3, #0
 800eee0:	e00c      	b.n	800eefc <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800eee2:	68f8      	ldr	r0, [r7, #12]
 800eee4:	f7f9 f9f4 	bl	80082d0 <strlen>
 800eee8:	4603      	mov	r3, r0
 800eeea:	3301      	adds	r3, #1
 800eeec:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	68ba      	ldr	r2, [r7, #8]
 800eef2:	6979      	ldr	r1, [r7, #20]
 800eef4:	68f8      	ldr	r0, [r7, #12]
 800eef6:	f000 f805 	bl	800ef04 <cJSON_ParseWithLengthOpts>
 800eefa:	4603      	mov	r3, r0
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3718      	adds	r7, #24
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b08e      	sub	sp, #56	@ 0x38
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	60b9      	str	r1, [r7, #8]
 800ef0e:	607a      	str	r2, [r7, #4]
 800ef10:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800ef12:	f107 0318 	add.w	r3, r7, #24
 800ef16:	2200      	movs	r2, #0
 800ef18:	601a      	str	r2, [r3, #0]
 800ef1a:	605a      	str	r2, [r3, #4]
 800ef1c:	609a      	str	r2, [r3, #8]
 800ef1e:	60da      	str	r2, [r3, #12]
 800ef20:	611a      	str	r2, [r3, #16]
 800ef22:	615a      	str	r2, [r3, #20]
 800ef24:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800ef26:	2300      	movs	r3, #0
 800ef28:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 800ef2a:	4b41      	ldr	r3, [pc, #260]	@ (800f030 <cJSON_ParseWithLengthOpts+0x12c>)
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800ef30:	4b3f      	ldr	r3, [pc, #252]	@ (800f030 <cJSON_ParseWithLengthOpts+0x12c>)
 800ef32:	2200      	movs	r2, #0
 800ef34:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d042      	beq.n	800efc2 <cJSON_ParseWithLengthOpts+0xbe>
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d03f      	beq.n	800efc2 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800ef4e:	4a39      	ldr	r2, [pc, #228]	@ (800f034 <cJSON_ParseWithLengthOpts+0x130>)
 800ef50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ef54:	ca07      	ldmia	r2, {r0, r1, r2}
 800ef56:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800ef5a:	4836      	ldr	r0, [pc, #216]	@ (800f034 <cJSON_ParseWithLengthOpts+0x130>)
 800ef5c:	f7ff f842 	bl	800dfe4 <cJSON_New_Item>
 800ef60:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 800ef62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d02e      	beq.n	800efc6 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800ef68:	f107 0318 	add.w	r3, r7, #24
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7ff ff79 	bl	800ee64 <skip_utf8_bom>
 800ef72:	4603      	mov	r3, r0
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7ff ff35 	bl	800ede4 <buffer_skip_whitespace>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ef80:	f000 f902 	bl	800f188 <parse_value>
 800ef84:	4603      	mov	r3, r0
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d01f      	beq.n	800efca <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d00e      	beq.n	800efae <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800ef90:	f107 0318 	add.w	r3, r7, #24
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7ff ff25 	bl	800ede4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800ef9a:	6a3a      	ldr	r2, [r7, #32]
 800ef9c:	69fb      	ldr	r3, [r7, #28]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d215      	bcs.n	800efce <cJSON_ParseWithLengthOpts+0xca>
 800efa2:	69ba      	ldr	r2, [r7, #24]
 800efa4:	6a3b      	ldr	r3, [r7, #32]
 800efa6:	4413      	add	r3, r2
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d10f      	bne.n	800efce <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d004      	beq.n	800efbe <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800efb4:	69ba      	ldr	r2, [r7, #24]
 800efb6:	6a3b      	ldr	r3, [r7, #32]
 800efb8:	441a      	add	r2, r3
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	601a      	str	r2, [r3, #0]
    }

    return item;
 800efbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efc0:	e031      	b.n	800f026 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800efc2:	bf00      	nop
 800efc4:	e004      	b.n	800efd0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800efc6:	bf00      	nop
 800efc8:	e002      	b.n	800efd0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800efca:	bf00      	nop
 800efcc:	e000      	b.n	800efd0 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800efce:	bf00      	nop

fail:
    if (item != NULL)
 800efd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d002      	beq.n	800efdc <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800efd6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800efd8:	f7ff f81a 	bl	800e010 <cJSON_Delete>
    }

    if (value != NULL)
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d020      	beq.n	800f024 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800efe6:	2300      	movs	r3, #0
 800efe8:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800efea:	6a3a      	ldr	r2, [r7, #32]
 800efec:	69fb      	ldr	r3, [r7, #28]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d202      	bcs.n	800eff8 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800eff2:	6a3b      	ldr	r3, [r7, #32]
 800eff4:	617b      	str	r3, [r7, #20]
 800eff6:	e005      	b.n	800f004 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800eff8:	69fb      	ldr	r3, [r7, #28]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d002      	beq.n	800f004 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800effe:	69fb      	ldr	r3, [r7, #28]
 800f000:	3b01      	subs	r3, #1
 800f002:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d004      	beq.n	800f014 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800f00a:	693a      	ldr	r2, [r7, #16]
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	441a      	add	r2, r3
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800f014:	4b06      	ldr	r3, [pc, #24]	@ (800f030 <cJSON_ParseWithLengthOpts+0x12c>)
 800f016:	461a      	mov	r2, r3
 800f018:	f107 0310 	add.w	r3, r7, #16
 800f01c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f020:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800f024:	2300      	movs	r3, #0
}
 800f026:	4618      	mov	r0, r3
 800f028:	3738      	adds	r7, #56	@ 0x38
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	20001324 	.word	0x20001324
 800f034:	20000080 	.word	0x20000080

0800f038 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800f040:	2200      	movs	r2, #0
 800f042:	2100      	movs	r1, #0
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f7ff ff41 	bl	800eecc <cJSON_ParseWithOpts>
 800f04a:	4603      	mov	r3, r0
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3708      	adds	r7, #8
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b08e      	sub	sp, #56	@ 0x38
 800f058:	af00      	add	r7, sp, #0
 800f05a:	60f8      	str	r0, [r7, #12]
 800f05c:	60b9      	str	r1, [r7, #8]
 800f05e:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 800f060:	2300      	movs	r3, #0
 800f062:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 800f064:	f107 0310 	add.w	r3, r7, #16
 800f068:	2224      	movs	r2, #36	@ 0x24
 800f06a:	2100      	movs	r1, #0
 800f06c:	4618      	mov	r0, r3
 800f06e:	f00a fd77 	bl	8019b60 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	4a3b      	ldr	r2, [pc, #236]	@ (800f164 <print+0x110>)
 800f078:	6812      	ldr	r2, [r2, #0]
 800f07a:	4610      	mov	r0, r2
 800f07c:	4798      	blx	r3
 800f07e:	4603      	mov	r3, r0
 800f080:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800f082:	4b38      	ldr	r3, [pc, #224]	@ (800f164 <print+0x110>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 800f08c:	687a      	ldr	r2, [r7, #4]
 800f08e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f092:	ca07      	ldmia	r2, {r0, r1, r2}
 800f094:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 800f098:	693b      	ldr	r3, [r7, #16]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d042      	beq.n	800f124 <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800f09e:	f107 0310 	add.w	r3, r7, #16
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	68f8      	ldr	r0, [r7, #12]
 800f0a6:	f000 f95b 	bl	800f360 <print_value>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d03b      	beq.n	800f128 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 800f0b0:	f107 0310 	add.w	r3, r7, #16
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f7ff f969 	bl	800e38c <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	689b      	ldr	r3, [r3, #8]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00d      	beq.n	800f0de <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	689b      	ldr	r3, [r3, #8]
 800f0c6:	6938      	ldr	r0, [r7, #16]
 800f0c8:	69ba      	ldr	r2, [r7, #24]
 800f0ca:	3201      	adds	r2, #1
 800f0cc:	4611      	mov	r1, r2
 800f0ce:	4798      	blx	r3
 800f0d0:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 800f0d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d029      	beq.n	800f12c <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	613b      	str	r3, [r7, #16]
 800f0dc:	e020      	b.n	800f120 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	69ba      	ldr	r2, [r7, #24]
 800f0e4:	3201      	adds	r2, #1
 800f0e6:	4610      	mov	r0, r2
 800f0e8:	4798      	blx	r3
 800f0ea:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 800f0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d01e      	beq.n	800f130 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800f0f2:	6939      	ldr	r1, [r7, #16]
 800f0f4:	69bb      	ldr	r3, [r7, #24]
 800f0f6:	1c5a      	adds	r2, r3, #1
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	bf28      	it	cs
 800f0fe:	4613      	movcs	r3, r2
 800f100:	461a      	mov	r2, r3
 800f102:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f104:	f00a fdff 	bl	8019d06 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 800f108:	69bb      	ldr	r3, [r7, #24]
 800f10a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f10c:	4413      	add	r3, r2
 800f10e:	2200      	movs	r2, #0
 800f110:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	685b      	ldr	r3, [r3, #4]
 800f116:	693a      	ldr	r2, [r7, #16]
 800f118:	4610      	mov	r0, r2
 800f11a:	4798      	blx	r3
        buffer->buffer = NULL;
 800f11c:	2300      	movs	r3, #0
 800f11e:	613b      	str	r3, [r7, #16]
    }

    return printed;
 800f120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f122:	e01a      	b.n	800f15a <print+0x106>
        goto fail;
 800f124:	bf00      	nop
 800f126:	e004      	b.n	800f132 <print+0xde>
        goto fail;
 800f128:	bf00      	nop
 800f12a:	e002      	b.n	800f132 <print+0xde>
            goto fail;
 800f12c:	bf00      	nop
 800f12e:	e000      	b.n	800f132 <print+0xde>
            goto fail;
 800f130:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d006      	beq.n	800f146 <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	693a      	ldr	r2, [r7, #16]
 800f13e:	4610      	mov	r0, r2
 800f140:	4798      	blx	r3
        buffer->buffer = NULL;
 800f142:	2300      	movs	r3, #0
 800f144:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 800f146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d005      	beq.n	800f158 <print+0x104>
    {
        hooks->deallocate(printed);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f152:	4798      	blx	r3
        printed = NULL;
 800f154:	2300      	movs	r3, #0
 800f156:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 800f158:	2300      	movs	r3, #0
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3738      	adds	r7, #56	@ 0x38
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	0801f260 	.word	0x0801f260

0800f168 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b082      	sub	sp, #8
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 800f170:	4a04      	ldr	r2, [pc, #16]	@ (800f184 <cJSON_PrintUnformatted+0x1c>)
 800f172:	2100      	movs	r1, #0
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f7ff ff6d 	bl	800f054 <print>
 800f17a:	4603      	mov	r3, r0
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3708      	adds	r7, #8
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	20000080 	.word	0x20000080

0800f188 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b082      	sub	sp, #8
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d003      	beq.n	800f1a0 <parse_value+0x18>
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d101      	bne.n	800f1a4 <parse_value+0x1c>
    {
        return false; /* no input */
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	e0d2      	b.n	800f34a <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d01d      	beq.n	800f1e6 <parse_value+0x5e>
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	689b      	ldr	r3, [r3, #8]
 800f1ae:	1d1a      	adds	r2, r3, #4
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d816      	bhi.n	800f1e6 <parse_value+0x5e>
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	681a      	ldr	r2, [r3, #0]
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	689b      	ldr	r3, [r3, #8]
 800f1c0:	4413      	add	r3, r2
 800f1c2:	2204      	movs	r2, #4
 800f1c4:	4963      	ldr	r1, [pc, #396]	@ (800f354 <parse_value+0x1cc>)
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f00a fcd2 	bl	8019b70 <strncmp>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d109      	bne.n	800f1e6 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2204      	movs	r2, #4
 800f1d6:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	689b      	ldr	r3, [r3, #8]
 800f1dc:	1d1a      	adds	r2, r3, #4
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	609a      	str	r2, [r3, #8]
        return true;
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	e0b1      	b.n	800f34a <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d01d      	beq.n	800f228 <parse_value+0xa0>
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	689b      	ldr	r3, [r3, #8]
 800f1f0:	1d5a      	adds	r2, r3, #5
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	685b      	ldr	r3, [r3, #4]
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d816      	bhi.n	800f228 <parse_value+0xa0>
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	681a      	ldr	r2, [r3, #0]
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	689b      	ldr	r3, [r3, #8]
 800f202:	4413      	add	r3, r2
 800f204:	2205      	movs	r2, #5
 800f206:	4954      	ldr	r1, [pc, #336]	@ (800f358 <parse_value+0x1d0>)
 800f208:	4618      	mov	r0, r3
 800f20a:	f00a fcb1 	bl	8019b70 <strncmp>
 800f20e:	4603      	mov	r3, r0
 800f210:	2b00      	cmp	r3, #0
 800f212:	d109      	bne.n	800f228 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2201      	movs	r2, #1
 800f218:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	689b      	ldr	r3, [r3, #8]
 800f21e:	1d5a      	adds	r2, r3, #5
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	609a      	str	r2, [r3, #8]
        return true;
 800f224:	2301      	movs	r3, #1
 800f226:	e090      	b.n	800f34a <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d020      	beq.n	800f270 <parse_value+0xe8>
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	689b      	ldr	r3, [r3, #8]
 800f232:	1d1a      	adds	r2, r3, #4
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	685b      	ldr	r3, [r3, #4]
 800f238:	429a      	cmp	r2, r3
 800f23a:	d819      	bhi.n	800f270 <parse_value+0xe8>
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	681a      	ldr	r2, [r3, #0]
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	4413      	add	r3, r2
 800f246:	2204      	movs	r2, #4
 800f248:	4944      	ldr	r1, [pc, #272]	@ (800f35c <parse_value+0x1d4>)
 800f24a:	4618      	mov	r0, r3
 800f24c:	f00a fc90 	bl	8019b70 <strncmp>
 800f250:	4603      	mov	r3, r0
 800f252:	2b00      	cmp	r3, #0
 800f254:	d10c      	bne.n	800f270 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2202      	movs	r2, #2
 800f25a:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2201      	movs	r2, #1
 800f260:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	689b      	ldr	r3, [r3, #8]
 800f266:	1d1a      	adds	r2, r3, #4
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	609a      	str	r2, [r3, #8]
        return true;
 800f26c:	2301      	movs	r3, #1
 800f26e:	e06c      	b.n	800f34a <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d013      	beq.n	800f29e <parse_value+0x116>
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	689a      	ldr	r2, [r3, #8]
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	429a      	cmp	r2, r3
 800f280:	d20d      	bcs.n	800f29e <parse_value+0x116>
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	681a      	ldr	r2, [r3, #0]
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	689b      	ldr	r3, [r3, #8]
 800f28a:	4413      	add	r3, r2
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	2b22      	cmp	r3, #34	@ 0x22
 800f290:	d105      	bne.n	800f29e <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800f292:	6839      	ldr	r1, [r7, #0]
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f7ff fb1d 	bl	800e8d4 <parse_string>
 800f29a:	4603      	mov	r3, r0
 800f29c:	e055      	b.n	800f34a <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d023      	beq.n	800f2ec <parse_value+0x164>
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	689a      	ldr	r2, [r3, #8]
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	d21d      	bcs.n	800f2ec <parse_value+0x164>
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	681a      	ldr	r2, [r3, #0]
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	689b      	ldr	r3, [r3, #8]
 800f2b8:	4413      	add	r3, r2
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	2b2d      	cmp	r3, #45	@ 0x2d
 800f2be:	d00f      	beq.n	800f2e0 <parse_value+0x158>
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	2b2f      	cmp	r3, #47	@ 0x2f
 800f2ce:	d90d      	bls.n	800f2ec <parse_value+0x164>
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	681a      	ldr	r2, [r3, #0]
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	689b      	ldr	r3, [r3, #8]
 800f2d8:	4413      	add	r3, r2
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	2b39      	cmp	r3, #57	@ 0x39
 800f2de:	d805      	bhi.n	800f2ec <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800f2e0:	6839      	ldr	r1, [r7, #0]
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f7fe feec 	bl	800e0c0 <parse_number>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	e02e      	b.n	800f34a <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d013      	beq.n	800f31a <parse_value+0x192>
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	689a      	ldr	r2, [r3, #8]
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d20d      	bcs.n	800f31a <parse_value+0x192>
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	681a      	ldr	r2, [r3, #0]
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	689b      	ldr	r3, [r3, #8]
 800f306:	4413      	add	r3, r2
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	2b5b      	cmp	r3, #91	@ 0x5b
 800f30c:	d105      	bne.n	800f31a <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800f30e:	6839      	ldr	r1, [r7, #0]
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f000 f909 	bl	800f528 <parse_array>
 800f316:	4603      	mov	r3, r0
 800f318:	e017      	b.n	800f34a <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d013      	beq.n	800f348 <parse_value+0x1c0>
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	689a      	ldr	r2, [r3, #8]
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	429a      	cmp	r2, r3
 800f32a:	d20d      	bcs.n	800f348 <parse_value+0x1c0>
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	681a      	ldr	r2, [r3, #0]
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	689b      	ldr	r3, [r3, #8]
 800f334:	4413      	add	r3, r2
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	2b7b      	cmp	r3, #123	@ 0x7b
 800f33a:	d105      	bne.n	800f348 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800f33c:	6839      	ldr	r1, [r7, #0]
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f000 fa3c 	bl	800f7bc <parse_object>
 800f344:	4603      	mov	r3, r0
 800f346:	e000      	b.n	800f34a <parse_value+0x1c2>
    }

    return false;
 800f348:	2300      	movs	r3, #0
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3708      	adds	r7, #8
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
 800f352:	bf00      	nop
 800f354:	0801d5e8 	.word	0x0801d5e8
 800f358:	0801d618 	.word	0x0801d618
 800f35c:	0801d620 	.word	0x0801d620

0800f360 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b084      	sub	sp, #16
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800f36a:	2300      	movs	r3, #0
 800f36c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d002      	beq.n	800f37a <print_value+0x1a>
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d101      	bne.n	800f37e <print_value+0x1e>
    {
        return false;
 800f37a:	2300      	movs	r3, #0
 800f37c:	e0c9      	b.n	800f512 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	68db      	ldr	r3, [r3, #12]
 800f382:	b2db      	uxtb	r3, r3
 800f384:	2b80      	cmp	r3, #128	@ 0x80
 800f386:	f000 808e 	beq.w	800f4a6 <print_value+0x146>
 800f38a:	2b80      	cmp	r3, #128	@ 0x80
 800f38c:	f300 80c0 	bgt.w	800f510 <print_value+0x1b0>
 800f390:	2b20      	cmp	r3, #32
 800f392:	dc49      	bgt.n	800f428 <print_value+0xc8>
 800f394:	2b00      	cmp	r3, #0
 800f396:	f340 80bb 	ble.w	800f510 <print_value+0x1b0>
 800f39a:	3b01      	subs	r3, #1
 800f39c:	2b1f      	cmp	r3, #31
 800f39e:	f200 80b7 	bhi.w	800f510 <print_value+0x1b0>
 800f3a2:	a201      	add	r2, pc, #4	@ (adr r2, 800f3a8 <print_value+0x48>)
 800f3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a8:	0800f453 	.word	0x0800f453
 800f3ac:	0800f477 	.word	0x0800f477
 800f3b0:	0800f511 	.word	0x0800f511
 800f3b4:	0800f42f 	.word	0x0800f42f
 800f3b8:	0800f511 	.word	0x0800f511
 800f3bc:	0800f511 	.word	0x0800f511
 800f3c0:	0800f511 	.word	0x0800f511
 800f3c4:	0800f49b 	.word	0x0800f49b
 800f3c8:	0800f511 	.word	0x0800f511
 800f3cc:	0800f511 	.word	0x0800f511
 800f3d0:	0800f511 	.word	0x0800f511
 800f3d4:	0800f511 	.word	0x0800f511
 800f3d8:	0800f511 	.word	0x0800f511
 800f3dc:	0800f511 	.word	0x0800f511
 800f3e0:	0800f511 	.word	0x0800f511
 800f3e4:	0800f4ed 	.word	0x0800f4ed
 800f3e8:	0800f511 	.word	0x0800f511
 800f3ec:	0800f511 	.word	0x0800f511
 800f3f0:	0800f511 	.word	0x0800f511
 800f3f4:	0800f511 	.word	0x0800f511
 800f3f8:	0800f511 	.word	0x0800f511
 800f3fc:	0800f511 	.word	0x0800f511
 800f400:	0800f511 	.word	0x0800f511
 800f404:	0800f511 	.word	0x0800f511
 800f408:	0800f511 	.word	0x0800f511
 800f40c:	0800f511 	.word	0x0800f511
 800f410:	0800f511 	.word	0x0800f511
 800f414:	0800f511 	.word	0x0800f511
 800f418:	0800f511 	.word	0x0800f511
 800f41c:	0800f511 	.word	0x0800f511
 800f420:	0800f511 	.word	0x0800f511
 800f424:	0800f4f9 	.word	0x0800f4f9
 800f428:	2b40      	cmp	r3, #64	@ 0x40
 800f42a:	d06b      	beq.n	800f504 <print_value+0x1a4>
 800f42c:	e070      	b.n	800f510 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800f42e:	2105      	movs	r1, #5
 800f430:	6838      	ldr	r0, [r7, #0]
 800f432:	f7fe ff11 	bl	800e258 <ensure>
 800f436:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d101      	bne.n	800f442 <print_value+0xe2>
            {
                return false;
 800f43e:	2300      	movs	r3, #0
 800f440:	e067      	b.n	800f512 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	4a35      	ldr	r2, [pc, #212]	@ (800f51c <print_value+0x1bc>)
 800f446:	6810      	ldr	r0, [r2, #0]
 800f448:	6018      	str	r0, [r3, #0]
 800f44a:	7912      	ldrb	r2, [r2, #4]
 800f44c:	711a      	strb	r2, [r3, #4]
            return true;
 800f44e:	2301      	movs	r3, #1
 800f450:	e05f      	b.n	800f512 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 800f452:	2106      	movs	r1, #6
 800f454:	6838      	ldr	r0, [r7, #0]
 800f456:	f7fe feff 	bl	800e258 <ensure>
 800f45a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d101      	bne.n	800f466 <print_value+0x106>
            {
                return false;
 800f462:	2300      	movs	r3, #0
 800f464:	e055      	b.n	800f512 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	4a2d      	ldr	r2, [pc, #180]	@ (800f520 <print_value+0x1c0>)
 800f46a:	6810      	ldr	r0, [r2, #0]
 800f46c:	6018      	str	r0, [r3, #0]
 800f46e:	8892      	ldrh	r2, [r2, #4]
 800f470:	809a      	strh	r2, [r3, #4]
            return true;
 800f472:	2301      	movs	r3, #1
 800f474:	e04d      	b.n	800f512 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800f476:	2105      	movs	r1, #5
 800f478:	6838      	ldr	r0, [r7, #0]
 800f47a:	f7fe feed 	bl	800e258 <ensure>
 800f47e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d101      	bne.n	800f48a <print_value+0x12a>
            {
                return false;
 800f486:	2300      	movs	r3, #0
 800f488:	e043      	b.n	800f512 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	4a25      	ldr	r2, [pc, #148]	@ (800f524 <print_value+0x1c4>)
 800f48e:	6810      	ldr	r0, [r2, #0]
 800f490:	6018      	str	r0, [r3, #0]
 800f492:	7912      	ldrb	r2, [r2, #4]
 800f494:	711a      	strb	r2, [r3, #4]
            return true;
 800f496:	2301      	movs	r3, #1
 800f498:	e03b      	b.n	800f512 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800f49a:	6839      	ldr	r1, [r7, #0]
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f7fe ffdf 	bl	800e460 <print_number>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	e035      	b.n	800f512 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	691b      	ldr	r3, [r3, #16]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d101      	bne.n	800f4b6 <print_value+0x156>
            {
                return false;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	e02d      	b.n	800f512 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	691b      	ldr	r3, [r3, #16]
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7f8 ff08 	bl	80082d0 <strlen>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800f4c6:	68b9      	ldr	r1, [r7, #8]
 800f4c8:	6838      	ldr	r0, [r7, #0]
 800f4ca:	f7fe fec5 	bl	800e258 <ensure>
 800f4ce:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d101      	bne.n	800f4da <print_value+0x17a>
            {
                return false;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	e01b      	b.n	800f512 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	691b      	ldr	r3, [r3, #16]
 800f4de:	68ba      	ldr	r2, [r7, #8]
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	68f8      	ldr	r0, [r7, #12]
 800f4e4:	f00a fc0f 	bl	8019d06 <memcpy>
            return true;
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	e012      	b.n	800f512 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 800f4ec:	6839      	ldr	r1, [r7, #0]
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f7ff fc68 	bl	800edc4 <print_string>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	e00c      	b.n	800f512 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 800f4f8:	6839      	ldr	r1, [r7, #0]
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f000 f8d8 	bl	800f6b0 <print_array>
 800f500:	4603      	mov	r3, r0
 800f502:	e006      	b.n	800f512 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 800f504:	6839      	ldr	r1, [r7, #0]
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 fa64 	bl	800f9d4 <print_object>
 800f50c:	4603      	mov	r3, r0
 800f50e:	e000      	b.n	800f512 <print_value+0x1b2>

        default:
            return false;
 800f510:	2300      	movs	r3, #0
    }
}
 800f512:	4618      	mov	r0, r3
 800f514:	3710      	adds	r7, #16
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	0801d5e8 	.word	0x0801d5e8
 800f520:	0801d618 	.word	0x0801d618
 800f524:	0801d620 	.word	0x0801d620

0800f528 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b086      	sub	sp, #24
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800f532:	2300      	movs	r3, #0
 800f534:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800f536:	2300      	movs	r3, #0
 800f538:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	68db      	ldr	r3, [r3, #12]
 800f53e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f542:	d301      	bcc.n	800f548 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800f544:	2300      	movs	r3, #0
 800f546:	e0af      	b.n	800f6a8 <parse_array+0x180>
    }
    input_buffer->depth++;
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	68db      	ldr	r3, [r3, #12]
 800f54c:	1c5a      	adds	r2, r3, #1
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	689b      	ldr	r3, [r3, #8]
 800f55a:	4413      	add	r3, r2
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	2b5b      	cmp	r3, #91	@ 0x5b
 800f560:	f040 8094 	bne.w	800f68c <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	689b      	ldr	r3, [r3, #8]
 800f568:	1c5a      	adds	r2, r3, #1
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800f56e:	6838      	ldr	r0, [r7, #0]
 800f570:	f7ff fc38 	bl	800ede4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d00d      	beq.n	800f596 <parse_array+0x6e>
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	689a      	ldr	r2, [r3, #8]
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	685b      	ldr	r3, [r3, #4]
 800f582:	429a      	cmp	r2, r3
 800f584:	d207      	bcs.n	800f596 <parse_array+0x6e>
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	681a      	ldr	r2, [r3, #0]
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	689b      	ldr	r3, [r3, #8]
 800f58e:	4413      	add	r3, r2
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	2b5d      	cmp	r3, #93	@ 0x5d
 800f594:	d061      	beq.n	800f65a <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d005      	beq.n	800f5a8 <parse_array+0x80>
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	689a      	ldr	r2, [r3, #8]
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d305      	bcc.n	800f5b4 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	689b      	ldr	r3, [r3, #8]
 800f5ac:	1e5a      	subs	r2, r3, #1
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	609a      	str	r2, [r3, #8]
        goto fail;
 800f5b2:	e072      	b.n	800f69a <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	689b      	ldr	r3, [r3, #8]
 800f5b8:	1e5a      	subs	r2, r3, #1
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	3310      	adds	r3, #16
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7fe fd0e 	bl	800dfe4 <cJSON_New_Item>
 800f5c8:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d05f      	beq.n	800f690 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d104      	bne.n	800f5e0 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	617b      	str	r3, [r7, #20]
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	613b      	str	r3, [r7, #16]
 800f5de:	e007      	b.n	800f5f0 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	68fa      	ldr	r2, [r7, #12]
 800f5e4:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	693a      	ldr	r2, [r7, #16]
 800f5ea:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	689b      	ldr	r3, [r3, #8]
 800f5f4:	1c5a      	adds	r2, r3, #1
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800f5fa:	6838      	ldr	r0, [r7, #0]
 800f5fc:	f7ff fbf2 	bl	800ede4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800f600:	6839      	ldr	r1, [r7, #0]
 800f602:	6938      	ldr	r0, [r7, #16]
 800f604:	f7ff fdc0 	bl	800f188 <parse_value>
 800f608:	4603      	mov	r3, r0
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d042      	beq.n	800f694 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800f60e:	6838      	ldr	r0, [r7, #0]
 800f610:	f7ff fbe8 	bl	800ede4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d00d      	beq.n	800f636 <parse_array+0x10e>
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	689a      	ldr	r2, [r3, #8]
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	685b      	ldr	r3, [r3, #4]
 800f622:	429a      	cmp	r2, r3
 800f624:	d207      	bcs.n	800f636 <parse_array+0x10e>
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	681a      	ldr	r2, [r3, #0]
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	689b      	ldr	r3, [r3, #8]
 800f62e:	4413      	add	r3, r2
 800f630:	781b      	ldrb	r3, [r3, #0]
 800f632:	2b2c      	cmp	r3, #44	@ 0x2c
 800f634:	d0c3      	beq.n	800f5be <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d02d      	beq.n	800f698 <parse_array+0x170>
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	689a      	ldr	r2, [r3, #8]
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	429a      	cmp	r2, r3
 800f646:	d227      	bcs.n	800f698 <parse_array+0x170>
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	681a      	ldr	r2, [r3, #0]
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	689b      	ldr	r3, [r3, #8]
 800f650:	4413      	add	r3, r2
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	2b5d      	cmp	r3, #93	@ 0x5d
 800f656:	d11f      	bne.n	800f698 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800f658:	e000      	b.n	800f65c <parse_array+0x134>
        goto success;
 800f65a:	bf00      	nop
    input_buffer->depth--;
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	68db      	ldr	r3, [r3, #12]
 800f660:	1e5a      	subs	r2, r3, #1
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d002      	beq.n	800f672 <parse_array+0x14a>
        head->prev = current_item;
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	693a      	ldr	r2, [r7, #16]
 800f670:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2220      	movs	r2, #32
 800f676:	60da      	str	r2, [r3, #12]
    item->child = head;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	697a      	ldr	r2, [r7, #20]
 800f67c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	689b      	ldr	r3, [r3, #8]
 800f682:	1c5a      	adds	r2, r3, #1
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	609a      	str	r2, [r3, #8]

    return true;
 800f688:	2301      	movs	r3, #1
 800f68a:	e00d      	b.n	800f6a8 <parse_array+0x180>
        goto fail;
 800f68c:	bf00      	nop
 800f68e:	e004      	b.n	800f69a <parse_array+0x172>
            goto fail; /* allocation failure */
 800f690:	bf00      	nop
 800f692:	e002      	b.n	800f69a <parse_array+0x172>
            goto fail; /* failed to parse value */
 800f694:	bf00      	nop
 800f696:	e000      	b.n	800f69a <parse_array+0x172>
        goto fail; /* expected end of array */
 800f698:	bf00      	nop

fail:
    if (head != NULL)
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d002      	beq.n	800f6a6 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800f6a0:	6978      	ldr	r0, [r7, #20]
 800f6a2:	f7fe fcb5 	bl	800e010 <cJSON_Delete>
    }

    return false;
 800f6a6:	2300      	movs	r3, #0
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3718      	adds	r7, #24
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}

0800f6b0 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b086      	sub	sp, #24
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
 800f6b8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	689b      	ldr	r3, [r3, #8]
 800f6c6:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d101      	bne.n	800f6d2 <print_array+0x22>
    {
        return false;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	e070      	b.n	800f7b4 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800f6d2:	2101      	movs	r1, #1
 800f6d4:	6838      	ldr	r0, [r7, #0]
 800f6d6:	f7fe fdbf 	bl	800e258 <ensure>
 800f6da:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d101      	bne.n	800f6e6 <print_array+0x36>
    {
        return false;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	e066      	b.n	800f7b4 <print_array+0x104>
    }

    *output_pointer = '[';
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	225b      	movs	r2, #91	@ 0x5b
 800f6ea:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	689b      	ldr	r3, [r3, #8]
 800f6f0:	1c5a      	adds	r2, r3, #1
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	68db      	ldr	r3, [r3, #12]
 800f6fa:	1c5a      	adds	r2, r3, #1
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800f700:	e03d      	b.n	800f77e <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800f702:	6839      	ldr	r1, [r7, #0]
 800f704:	6938      	ldr	r0, [r7, #16]
 800f706:	f7ff fe2b 	bl	800f360 <print_value>
 800f70a:	4603      	mov	r3, r0
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d101      	bne.n	800f714 <print_array+0x64>
        {
            return false;
 800f710:	2300      	movs	r3, #0
 800f712:	e04f      	b.n	800f7b4 <print_array+0x104>
        }
        update_offset(output_buffer);
 800f714:	6838      	ldr	r0, [r7, #0]
 800f716:	f7fe fe39 	bl	800e38c <update_offset>
        if (current_element->next)
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d02a      	beq.n	800f778 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	695b      	ldr	r3, [r3, #20]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d001      	beq.n	800f72e <print_array+0x7e>
 800f72a:	2302      	movs	r3, #2
 800f72c:	e000      	b.n	800f730 <print_array+0x80>
 800f72e:	2301      	movs	r3, #1
 800f730:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	3301      	adds	r3, #1
 800f736:	4619      	mov	r1, r3
 800f738:	6838      	ldr	r0, [r7, #0]
 800f73a:	f7fe fd8d 	bl	800e258 <ensure>
 800f73e:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d101      	bne.n	800f74a <print_array+0x9a>
            {
                return false;
 800f746:	2300      	movs	r3, #0
 800f748:	e034      	b.n	800f7b4 <print_array+0x104>
            }
            *output_pointer++ = ',';
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	1c5a      	adds	r2, r3, #1
 800f74e:	617a      	str	r2, [r7, #20]
 800f750:	222c      	movs	r2, #44	@ 0x2c
 800f752:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	695b      	ldr	r3, [r3, #20]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d004      	beq.n	800f766 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	1c5a      	adds	r2, r3, #1
 800f760:	617a      	str	r2, [r7, #20]
 800f762:	2220      	movs	r2, #32
 800f764:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	2200      	movs	r2, #0
 800f76a:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	689a      	ldr	r2, [r3, #8]
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	441a      	add	r2, r3
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d1be      	bne.n	800f702 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 800f784:	2102      	movs	r1, #2
 800f786:	6838      	ldr	r0, [r7, #0]
 800f788:	f7fe fd66 	bl	800e258 <ensure>
 800f78c:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d101      	bne.n	800f798 <print_array+0xe8>
    {
        return false;
 800f794:	2300      	movs	r3, #0
 800f796:	e00d      	b.n	800f7b4 <print_array+0x104>
    }
    *output_pointer++ = ']';
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	1c5a      	adds	r2, r3, #1
 800f79c:	617a      	str	r2, [r7, #20]
 800f79e:	225d      	movs	r2, #93	@ 0x5d
 800f7a0:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	1e5a      	subs	r2, r3, #1
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	60da      	str	r2, [r3, #12]

    return true;
 800f7b2:	2301      	movs	r3, #1
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3718      	adds	r7, #24
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}

0800f7bc <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b086      	sub	sp, #24
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	68db      	ldr	r3, [r3, #12]
 800f7d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f7d6:	d301      	bcc.n	800f7dc <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800f7d8:	2300      	movs	r3, #0
 800f7da:	e0f7      	b.n	800f9cc <parse_object+0x210>
    }
    input_buffer->depth++;
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	68db      	ldr	r3, [r3, #12]
 800f7e0:	1c5a      	adds	r2, r3, #1
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	f000 80db 	beq.w	800f9a4 <parse_object+0x1e8>
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	689a      	ldr	r2, [r3, #8]
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	685b      	ldr	r3, [r3, #4]
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	f080 80d4 	bcs.w	800f9a4 <parse_object+0x1e8>
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	681a      	ldr	r2, [r3, #0]
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	689b      	ldr	r3, [r3, #8]
 800f804:	4413      	add	r3, r2
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	2b7b      	cmp	r3, #123	@ 0x7b
 800f80a:	f040 80cb 	bne.w	800f9a4 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	689b      	ldr	r3, [r3, #8]
 800f812:	1c5a      	adds	r2, r3, #1
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800f818:	6838      	ldr	r0, [r7, #0]
 800f81a:	f7ff fae3 	bl	800ede4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d00e      	beq.n	800f842 <parse_object+0x86>
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	689a      	ldr	r2, [r3, #8]
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	685b      	ldr	r3, [r3, #4]
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d208      	bcs.n	800f842 <parse_object+0x86>
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	681a      	ldr	r2, [r3, #0]
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	689b      	ldr	r3, [r3, #8]
 800f838:	4413      	add	r3, r2
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	2b7d      	cmp	r3, #125	@ 0x7d
 800f83e:	f000 8098 	beq.w	800f972 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d005      	beq.n	800f854 <parse_object+0x98>
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	689a      	ldr	r2, [r3, #8]
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	429a      	cmp	r2, r3
 800f852:	d305      	bcc.n	800f860 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	689b      	ldr	r3, [r3, #8]
 800f858:	1e5a      	subs	r2, r3, #1
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	609a      	str	r2, [r3, #8]
        goto fail;
 800f85e:	e0ae      	b.n	800f9be <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	689b      	ldr	r3, [r3, #8]
 800f864:	1e5a      	subs	r2, r3, #1
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	3310      	adds	r3, #16
 800f86e:	4618      	mov	r0, r3
 800f870:	f7fe fbb8 	bl	800dfe4 <cJSON_New_Item>
 800f874:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	f000 8095 	beq.w	800f9a8 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d104      	bne.n	800f88e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	617b      	str	r3, [r7, #20]
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	613b      	str	r3, [r7, #16]
 800f88c:	e007      	b.n	800f89e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	68fa      	ldr	r2, [r7, #12]
 800f892:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	693a      	ldr	r2, [r7, #16]
 800f898:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	f000 8083 	beq.w	800f9ac <parse_object+0x1f0>
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	689b      	ldr	r3, [r3, #8]
 800f8aa:	1c5a      	adds	r2, r3, #1
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d27b      	bcs.n	800f9ac <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	689b      	ldr	r3, [r3, #8]
 800f8b8:	1c5a      	adds	r2, r3, #1
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800f8be:	6838      	ldr	r0, [r7, #0]
 800f8c0:	f7ff fa90 	bl	800ede4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800f8c4:	6839      	ldr	r1, [r7, #0]
 800f8c6:	6938      	ldr	r0, [r7, #16]
 800f8c8:	f7ff f804 	bl	800e8d4 <parse_string>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d06e      	beq.n	800f9b0 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800f8d2:	6838      	ldr	r0, [r7, #0]
 800f8d4:	f7ff fa86 	bl	800ede4 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	691a      	ldr	r2, [r3, #16]
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800f8e0:	693b      	ldr	r3, [r7, #16]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d063      	beq.n	800f9b4 <parse_object+0x1f8>
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	689a      	ldr	r2, [r3, #8]
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	685b      	ldr	r3, [r3, #4]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d25d      	bcs.n	800f9b4 <parse_object+0x1f8>
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	689b      	ldr	r3, [r3, #8]
 800f900:	4413      	add	r3, r2
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	2b3a      	cmp	r3, #58	@ 0x3a
 800f906:	d155      	bne.n	800f9b4 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	689b      	ldr	r3, [r3, #8]
 800f90c:	1c5a      	adds	r2, r3, #1
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800f912:	6838      	ldr	r0, [r7, #0]
 800f914:	f7ff fa66 	bl	800ede4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800f918:	6839      	ldr	r1, [r7, #0]
 800f91a:	6938      	ldr	r0, [r7, #16]
 800f91c:	f7ff fc34 	bl	800f188 <parse_value>
 800f920:	4603      	mov	r3, r0
 800f922:	2b00      	cmp	r3, #0
 800f924:	d048      	beq.n	800f9b8 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800f926:	6838      	ldr	r0, [r7, #0]
 800f928:	f7ff fa5c 	bl	800ede4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d00d      	beq.n	800f94e <parse_object+0x192>
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	689a      	ldr	r2, [r3, #8]
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	685b      	ldr	r3, [r3, #4]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d207      	bcs.n	800f94e <parse_object+0x192>
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	689b      	ldr	r3, [r3, #8]
 800f946:	4413      	add	r3, r2
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	2b2c      	cmp	r3, #44	@ 0x2c
 800f94c:	d08d      	beq.n	800f86a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d033      	beq.n	800f9bc <parse_object+0x200>
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	689a      	ldr	r2, [r3, #8]
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d22d      	bcs.n	800f9bc <parse_object+0x200>
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	681a      	ldr	r2, [r3, #0]
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	689b      	ldr	r3, [r3, #8]
 800f968:	4413      	add	r3, r2
 800f96a:	781b      	ldrb	r3, [r3, #0]
 800f96c:	2b7d      	cmp	r3, #125	@ 0x7d
 800f96e:	d125      	bne.n	800f9bc <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 800f970:	e000      	b.n	800f974 <parse_object+0x1b8>
        goto success; /* empty object */
 800f972:	bf00      	nop
    input_buffer->depth--;
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	68db      	ldr	r3, [r3, #12]
 800f978:	1e5a      	subs	r2, r3, #1
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d002      	beq.n	800f98a <parse_object+0x1ce>
        head->prev = current_item;
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	693a      	ldr	r2, [r7, #16]
 800f988:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2240      	movs	r2, #64	@ 0x40
 800f98e:	60da      	str	r2, [r3, #12]
    item->child = head;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	697a      	ldr	r2, [r7, #20]
 800f994:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	689b      	ldr	r3, [r3, #8]
 800f99a:	1c5a      	adds	r2, r3, #1
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	609a      	str	r2, [r3, #8]
    return true;
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	e013      	b.n	800f9cc <parse_object+0x210>
        goto fail; /* not an object */
 800f9a4:	bf00      	nop
 800f9a6:	e00a      	b.n	800f9be <parse_object+0x202>
            goto fail; /* allocation failure */
 800f9a8:	bf00      	nop
 800f9aa:	e008      	b.n	800f9be <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 800f9ac:	bf00      	nop
 800f9ae:	e006      	b.n	800f9be <parse_object+0x202>
            goto fail; /* failed to parse name */
 800f9b0:	bf00      	nop
 800f9b2:	e004      	b.n	800f9be <parse_object+0x202>
            goto fail; /* invalid object */
 800f9b4:	bf00      	nop
 800f9b6:	e002      	b.n	800f9be <parse_object+0x202>
            goto fail; /* failed to parse value */
 800f9b8:	bf00      	nop
 800f9ba:	e000      	b.n	800f9be <parse_object+0x202>
        goto fail; /* expected end of object */
 800f9bc:	bf00      	nop

fail:
    if (head != NULL)
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d002      	beq.n	800f9ca <parse_object+0x20e>
    {
        cJSON_Delete(head);
 800f9c4:	6978      	ldr	r0, [r7, #20]
 800f9c6:	f7fe fb23 	bl	800e010 <cJSON_Delete>
    }

    return false;
 800f9ca:	2300      	movs	r3, #0
}
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	3718      	adds	r7, #24
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}

0800f9d4 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b088      	sub	sp, #32
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
 800f9dc:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	689b      	ldr	r3, [r3, #8]
 800f9ea:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d101      	bne.n	800f9f6 <print_object+0x22>
    {
        return false;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	e108      	b.n	800fc08 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	695b      	ldr	r3, [r3, #20]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d001      	beq.n	800fa02 <print_object+0x2e>
 800f9fe:	2302      	movs	r3, #2
 800fa00:	e000      	b.n	800fa04 <print_object+0x30>
 800fa02:	2301      	movs	r3, #1
 800fa04:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	3301      	adds	r3, #1
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	6838      	ldr	r0, [r7, #0]
 800fa0e:	f7fe fc23 	bl	800e258 <ensure>
 800fa12:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800fa14:	69fb      	ldr	r3, [r7, #28]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d101      	bne.n	800fa1e <print_object+0x4a>
    {
        return false;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	e0f4      	b.n	800fc08 <print_object+0x234>
    }

    *output_pointer++ = '{';
 800fa1e:	69fb      	ldr	r3, [r7, #28]
 800fa20:	1c5a      	adds	r2, r3, #1
 800fa22:	61fa      	str	r2, [r7, #28]
 800fa24:	227b      	movs	r2, #123	@ 0x7b
 800fa26:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	68db      	ldr	r3, [r3, #12]
 800fa2c:	1c5a      	adds	r2, r3, #1
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	695b      	ldr	r3, [r3, #20]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d004      	beq.n	800fa44 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 800fa3a:	69fb      	ldr	r3, [r7, #28]
 800fa3c:	1c5a      	adds	r2, r3, #1
 800fa3e:	61fa      	str	r2, [r7, #28]
 800fa40:	220a      	movs	r2, #10
 800fa42:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	689a      	ldr	r2, [r3, #8]
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	441a      	add	r2, r3
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	609a      	str	r2, [r3, #8]

    while (current_item)
 800fa50:	e0a0      	b.n	800fb94 <print_object+0x1c0>
    {
        if (output_buffer->format)
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	695b      	ldr	r3, [r3, #20]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d022      	beq.n	800faa0 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	68db      	ldr	r3, [r3, #12]
 800fa5e:	4619      	mov	r1, r3
 800fa60:	6838      	ldr	r0, [r7, #0]
 800fa62:	f7fe fbf9 	bl	800e258 <ensure>
 800fa66:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d101      	bne.n	800fa72 <print_object+0x9e>
            {
                return false;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	e0ca      	b.n	800fc08 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 800fa72:	2300      	movs	r3, #0
 800fa74:	617b      	str	r3, [r7, #20]
 800fa76:	e007      	b.n	800fa88 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 800fa78:	69fb      	ldr	r3, [r7, #28]
 800fa7a:	1c5a      	adds	r2, r3, #1
 800fa7c:	61fa      	str	r2, [r7, #28]
 800fa7e:	2209      	movs	r2, #9
 800fa80:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	3301      	adds	r3, #1
 800fa86:	617b      	str	r3, [r7, #20]
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	697a      	ldr	r2, [r7, #20]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d3f2      	bcc.n	800fa78 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	689a      	ldr	r2, [r3, #8]
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	68db      	ldr	r3, [r3, #12]
 800fa9a:	441a      	add	r2, r3
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800faa0:	69bb      	ldr	r3, [r7, #24]
 800faa2:	6a1b      	ldr	r3, [r3, #32]
 800faa4:	6839      	ldr	r1, [r7, #0]
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7ff f85c 	bl	800eb64 <print_string_ptr>
 800faac:	4603      	mov	r3, r0
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d101      	bne.n	800fab6 <print_object+0xe2>
        {
            return false;
 800fab2:	2300      	movs	r3, #0
 800fab4:	e0a8      	b.n	800fc08 <print_object+0x234>
        }
        update_offset(output_buffer);
 800fab6:	6838      	ldr	r0, [r7, #0]
 800fab8:	f7fe fc68 	bl	800e38c <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	695b      	ldr	r3, [r3, #20]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d001      	beq.n	800fac8 <print_object+0xf4>
 800fac4:	2302      	movs	r3, #2
 800fac6:	e000      	b.n	800faca <print_object+0xf6>
 800fac8:	2301      	movs	r3, #1
 800faca:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800facc:	68f9      	ldr	r1, [r7, #12]
 800face:	6838      	ldr	r0, [r7, #0]
 800fad0:	f7fe fbc2 	bl	800e258 <ensure>
 800fad4:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800fad6:	69fb      	ldr	r3, [r7, #28]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d101      	bne.n	800fae0 <print_object+0x10c>
        {
            return false;
 800fadc:	2300      	movs	r3, #0
 800fade:	e093      	b.n	800fc08 <print_object+0x234>
        }
        *output_pointer++ = ':';
 800fae0:	69fb      	ldr	r3, [r7, #28]
 800fae2:	1c5a      	adds	r2, r3, #1
 800fae4:	61fa      	str	r2, [r7, #28]
 800fae6:	223a      	movs	r2, #58	@ 0x3a
 800fae8:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	695b      	ldr	r3, [r3, #20]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d004      	beq.n	800fafc <print_object+0x128>
        {
            *output_pointer++ = '\t';
 800faf2:	69fb      	ldr	r3, [r7, #28]
 800faf4:	1c5a      	adds	r2, r3, #1
 800faf6:	61fa      	str	r2, [r7, #28]
 800faf8:	2209      	movs	r2, #9
 800fafa:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	689a      	ldr	r2, [r3, #8]
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	441a      	add	r2, r3
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800fb08:	6839      	ldr	r1, [r7, #0]
 800fb0a:	69b8      	ldr	r0, [r7, #24]
 800fb0c:	f7ff fc28 	bl	800f360 <print_value>
 800fb10:	4603      	mov	r3, r0
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d101      	bne.n	800fb1a <print_object+0x146>
        {
            return false;
 800fb16:	2300      	movs	r3, #0
 800fb18:	e076      	b.n	800fc08 <print_object+0x234>
        }
        update_offset(output_buffer);
 800fb1a:	6838      	ldr	r0, [r7, #0]
 800fb1c:	f7fe fc36 	bl	800e38c <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	695b      	ldr	r3, [r3, #20]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d001      	beq.n	800fb2c <print_object+0x158>
 800fb28:	2201      	movs	r2, #1
 800fb2a:	e000      	b.n	800fb2e <print_object+0x15a>
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	69bb      	ldr	r3, [r7, #24]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d001      	beq.n	800fb3a <print_object+0x166>
 800fb36:	2301      	movs	r3, #1
 800fb38:	e000      	b.n	800fb3c <print_object+0x168>
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	4413      	add	r3, r2
 800fb3e:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	3301      	adds	r3, #1
 800fb44:	4619      	mov	r1, r3
 800fb46:	6838      	ldr	r0, [r7, #0]
 800fb48:	f7fe fb86 	bl	800e258 <ensure>
 800fb4c:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800fb4e:	69fb      	ldr	r3, [r7, #28]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d101      	bne.n	800fb58 <print_object+0x184>
        {
            return false;
 800fb54:	2300      	movs	r3, #0
 800fb56:	e057      	b.n	800fc08 <print_object+0x234>
        }
        if (current_item->next)
 800fb58:	69bb      	ldr	r3, [r7, #24]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d004      	beq.n	800fb6a <print_object+0x196>
        {
            *output_pointer++ = ',';
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	1c5a      	adds	r2, r3, #1
 800fb64:	61fa      	str	r2, [r7, #28]
 800fb66:	222c      	movs	r2, #44	@ 0x2c
 800fb68:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	695b      	ldr	r3, [r3, #20]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d004      	beq.n	800fb7c <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 800fb72:	69fb      	ldr	r3, [r7, #28]
 800fb74:	1c5a      	adds	r2, r3, #1
 800fb76:	61fa      	str	r2, [r7, #28]
 800fb78:	220a      	movs	r2, #10
 800fb7a:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 800fb7c:	69fb      	ldr	r3, [r7, #28]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	689a      	ldr	r2, [r3, #8]
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	441a      	add	r2, r3
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 800fb8e:	69bb      	ldr	r3, [r7, #24]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	61bb      	str	r3, [r7, #24]
    while (current_item)
 800fb94:	69bb      	ldr	r3, [r7, #24]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	f47f af5b 	bne.w	800fa52 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	695b      	ldr	r3, [r3, #20]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d003      	beq.n	800fbac <print_object+0x1d8>
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	68db      	ldr	r3, [r3, #12]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	e000      	b.n	800fbae <print_object+0x1da>
 800fbac:	2302      	movs	r3, #2
 800fbae:	4619      	mov	r1, r3
 800fbb0:	6838      	ldr	r0, [r7, #0]
 800fbb2:	f7fe fb51 	bl	800e258 <ensure>
 800fbb6:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d101      	bne.n	800fbc2 <print_object+0x1ee>
    {
        return false;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	e022      	b.n	800fc08 <print_object+0x234>
    }
    if (output_buffer->format)
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	695b      	ldr	r3, [r3, #20]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d010      	beq.n	800fbec <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800fbca:	2300      	movs	r3, #0
 800fbcc:	613b      	str	r3, [r7, #16]
 800fbce:	e007      	b.n	800fbe0 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 800fbd0:	69fb      	ldr	r3, [r7, #28]
 800fbd2:	1c5a      	adds	r2, r3, #1
 800fbd4:	61fa      	str	r2, [r7, #28]
 800fbd6:	2209      	movs	r2, #9
 800fbd8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	3301      	adds	r3, #1
 800fbde:	613b      	str	r3, [r7, #16]
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	68db      	ldr	r3, [r3, #12]
 800fbe4:	3b01      	subs	r3, #1
 800fbe6:	693a      	ldr	r2, [r7, #16]
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d3f1      	bcc.n	800fbd0 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 800fbec:	69fb      	ldr	r3, [r7, #28]
 800fbee:	1c5a      	adds	r2, r3, #1
 800fbf0:	61fa      	str	r2, [r7, #28]
 800fbf2:	227d      	movs	r2, #125	@ 0x7d
 800fbf4:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800fbf6:	69fb      	ldr	r3, [r7, #28]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	68db      	ldr	r3, [r3, #12]
 800fc00:	1e5a      	subs	r2, r3, #1
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	60da      	str	r2, [r3, #12]

    return true;
 800fc06:	2301      	movs	r3, #1
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3720      	adds	r7, #32
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b086      	sub	sp, #24
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	60f8      	str	r0, [r7, #12]
 800fc18:	60b9      	str	r1, [r7, #8]
 800fc1a:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d002      	beq.n	800fc2c <get_object_item+0x1c>
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d101      	bne.n	800fc30 <get_object_item+0x20>
    {
        return NULL;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	e033      	b.n	800fc98 <get_object_item+0x88>
    }

    current_element = object->child;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	689b      	ldr	r3, [r3, #8]
 800fc34:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d017      	beq.n	800fc6c <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800fc3c:	e002      	b.n	800fc44 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d01c      	beq.n	800fc84 <get_object_item+0x74>
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	6a1b      	ldr	r3, [r3, #32]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d018      	beq.n	800fc84 <get_object_item+0x74>
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	6a1b      	ldr	r3, [r3, #32]
 800fc56:	4619      	mov	r1, r3
 800fc58:	68b8      	ldr	r0, [r7, #8]
 800fc5a:	f7f8 fad9 	bl	8008210 <strcmp>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d1ec      	bne.n	800fc3e <get_object_item+0x2e>
 800fc64:	e00e      	b.n	800fc84 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d008      	beq.n	800fc84 <get_object_item+0x74>
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	6a1b      	ldr	r3, [r3, #32]
 800fc76:	4619      	mov	r1, r3
 800fc78:	68b8      	ldr	r0, [r7, #8]
 800fc7a:	f7fe f91f 	bl	800debc <case_insensitive_strcmp>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d1f0      	bne.n	800fc66 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d003      	beq.n	800fc92 <get_object_item+0x82>
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	6a1b      	ldr	r3, [r3, #32]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d101      	bne.n	800fc96 <get_object_item+0x86>
        return NULL;
 800fc92:	2300      	movs	r3, #0
 800fc94:	e000      	b.n	800fc98 <get_object_item+0x88>
    }

    return current_element;
 800fc96:	697b      	ldr	r3, [r7, #20]
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3718      	adds	r7, #24
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b082      	sub	sp, #8
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800fcaa:	2200      	movs	r2, #0
 800fcac:	6839      	ldr	r1, [r7, #0]
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f7ff ffae 	bl	800fc10 <get_object_item>
 800fcb4:	4603      	mov	r3, r0
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3708      	adds	r7, #8
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}

0800fcbe <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 800fcbe:	b480      	push	{r7}
 800fcc0:	b083      	sub	sp, #12
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	6078      	str	r0, [r7, #4]
 800fcc6:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	683a      	ldr	r2, [r7, #0]
 800fccc:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	605a      	str	r2, [r3, #4]
}
 800fcd4:	bf00      	nop
 800fcd6:	370c      	adds	r7, #12
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr

0800fce0 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 800fcea:	2300      	movs	r3, #0
 800fcec:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d006      	beq.n	800fd02 <add_item_to_array+0x22>
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d003      	beq.n	800fd02 <add_item_to_array+0x22>
 800fcfa:	687a      	ldr	r2, [r7, #4]
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d101      	bne.n	800fd06 <add_item_to_array+0x26>
    {
        return false;
 800fd02:	2300      	movs	r3, #0
 800fd04:	e01e      	b.n	800fd44 <add_item_to_array+0x64>
    }

    child = array->child;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	689b      	ldr	r3, [r3, #8]
 800fd0a:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d109      	bne.n	800fd26 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	683a      	ldr	r2, [r7, #0]
 800fd16:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	683a      	ldr	r2, [r7, #0]
 800fd1c:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	2200      	movs	r2, #0
 800fd22:	601a      	str	r2, [r3, #0]
 800fd24:	e00d      	b.n	800fd42 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	685b      	ldr	r3, [r3, #4]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d009      	beq.n	800fd42 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	6839      	ldr	r1, [r7, #0]
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7ff ffc2 	bl	800fcbe <suffix_object>
            array->child->prev = item;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	689b      	ldr	r3, [r3, #8]
 800fd3e:	683a      	ldr	r2, [r7, #0]
 800fd40:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 800fd42:	2301      	movs	r3, #1
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3710      	adds	r7, #16
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b083      	sub	sp, #12
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
    return (void*)string;
 800fd54:	687b      	ldr	r3, [r7, #4]
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	370c      	adds	r7, #12
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd60:	4770      	bx	lr

0800fd62 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 800fd62:	b580      	push	{r7, lr}
 800fd64:	b086      	sub	sp, #24
 800fd66:	af00      	add	r7, sp, #0
 800fd68:	60f8      	str	r0, [r7, #12]
 800fd6a:	60b9      	str	r1, [r7, #8]
 800fd6c:	607a      	str	r2, [r7, #4]
 800fd6e:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 800fd70:	2300      	movs	r3, #0
 800fd72:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 800fd74:	2300      	movs	r3, #0
 800fd76:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d009      	beq.n	800fd92 <add_item_to_object+0x30>
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d006      	beq.n	800fd92 <add_item_to_object+0x30>
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d003      	beq.n	800fd92 <add_item_to_object+0x30>
 800fd8a:	68fa      	ldr	r2, [r7, #12]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d101      	bne.n	800fd96 <add_item_to_object+0x34>
    {
        return false;
 800fd92:	2300      	movs	r3, #0
 800fd94:	e036      	b.n	800fe04 <add_item_to_object+0xa2>
    }

    if (constant_key)
 800fd96:	6a3b      	ldr	r3, [r7, #32]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d009      	beq.n	800fdb0 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 800fd9c:	68b8      	ldr	r0, [r7, #8]
 800fd9e:	f7ff ffd5 	bl	800fd4c <cast_away_const>
 800fda2:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	68db      	ldr	r3, [r3, #12]
 800fda8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800fdac:	613b      	str	r3, [r7, #16]
 800fdae:	e00e      	b.n	800fdce <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 800fdb0:	6839      	ldr	r1, [r7, #0]
 800fdb2:	68b8      	ldr	r0, [r7, #8]
 800fdb4:	f7fe f8ee 	bl	800df94 <cJSON_strdup>
 800fdb8:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d101      	bne.n	800fdc4 <add_item_to_object+0x62>
        {
            return false;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	e01f      	b.n	800fe04 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	68db      	ldr	r3, [r3, #12]
 800fdc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fdcc:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	68db      	ldr	r3, [r3, #12]
 800fdd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d109      	bne.n	800fdee <add_item_to_object+0x8c>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6a1b      	ldr	r3, [r3, #32]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d005      	beq.n	800fdee <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	685b      	ldr	r3, [r3, #4]
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	6a12      	ldr	r2, [r2, #32]
 800fdea:	4610      	mov	r0, r2
 800fdec:	4798      	blx	r3
    }

    item->string = new_key;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	697a      	ldr	r2, [r7, #20]
 800fdf2:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	693a      	ldr	r2, [r7, #16]
 800fdf8:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800fdfa:	6879      	ldr	r1, [r7, #4]
 800fdfc:	68f8      	ldr	r0, [r7, #12]
 800fdfe:	f7ff ff6f 	bl	800fce0 <add_item_to_array>
 800fe02:	4603      	mov	r3, r0
}
 800fe04:	4618      	mov	r0, r3
 800fe06:	3718      	adds	r7, #24
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}

0800fe0c <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b088      	sub	sp, #32
 800fe10:	af02      	add	r7, sp, #8
 800fe12:	60f8      	str	r0, [r7, #12]
 800fe14:	60b9      	str	r1, [r7, #8]
 800fe16:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 800fe1a:	ed97 0b00 	vldr	d0, [r7]
 800fe1e:	f000 f81b 	bl	800fe58 <cJSON_CreateNumber>
 800fe22:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 800fe24:	2300      	movs	r3, #0
 800fe26:	9300      	str	r3, [sp, #0]
 800fe28:	4b09      	ldr	r3, [pc, #36]	@ (800fe50 <cJSON_AddNumberToObject+0x44>)
 800fe2a:	697a      	ldr	r2, [r7, #20]
 800fe2c:	68b9      	ldr	r1, [r7, #8]
 800fe2e:	68f8      	ldr	r0, [r7, #12]
 800fe30:	f7ff ff97 	bl	800fd62 <add_item_to_object>
 800fe34:	4603      	mov	r3, r0
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d001      	beq.n	800fe3e <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	e003      	b.n	800fe46 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 800fe3e:	6978      	ldr	r0, [r7, #20]
 800fe40:	f7fe f8e6 	bl	800e010 <cJSON_Delete>
    return NULL;
 800fe44:	2300      	movs	r3, #0
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3718      	adds	r7, #24
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}
 800fe4e:	bf00      	nop
 800fe50:	20000080 	.word	0x20000080
 800fe54:	00000000 	.word	0x00000000

0800fe58 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 800fe62:	481f      	ldr	r0, [pc, #124]	@ (800fee0 <cJSON_CreateNumber+0x88>)
 800fe64:	f7fe f8be 	bl	800dfe4 <cJSON_New_Item>
 800fe68:	60f8      	str	r0, [r7, #12]
    if(item)
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d02c      	beq.n	800feca <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	2208      	movs	r2, #8
 800fe74:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 800fe76:	68f9      	ldr	r1, [r7, #12]
 800fe78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe7c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 800fe80:	a315      	add	r3, pc, #84	@ (adr r3, 800fed8 <cJSON_CreateNumber+0x80>)
 800fe82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe86:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fe8a:	f7f8 fe6b 	bl	8008b64 <__aeabi_dcmpge>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d004      	beq.n	800fe9e <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800fe9a:	615a      	str	r2, [r3, #20]
 800fe9c:	e015      	b.n	800feca <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 800fe9e:	f04f 0200 	mov.w	r2, #0
 800fea2:	4b10      	ldr	r3, [pc, #64]	@ (800fee4 <cJSON_CreateNumber+0x8c>)
 800fea4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fea8:	f7f8 fe52 	bl	8008b50 <__aeabi_dcmple>
 800feac:	4603      	mov	r3, r0
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d004      	beq.n	800febc <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800feb8:	615a      	str	r2, [r3, #20]
 800feba:	e006      	b.n	800feca <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 800febc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fec0:	f7f8 fe7a 	bl	8008bb8 <__aeabi_d2iz>
 800fec4:	4602      	mov	r2, r0
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 800feca:	68fb      	ldr	r3, [r7, #12]
}
 800fecc:	4618      	mov	r0, r3
 800fece:	3710      	adds	r7, #16
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	f3af 8000 	nop.w
 800fed8:	ffc00000 	.word	0xffc00000
 800fedc:	41dfffff 	.word	0x41dfffff
 800fee0:	20000080 	.word	0x20000080
 800fee4:	c1e00000 	.word	0xc1e00000

0800fee8 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b082      	sub	sp, #8
 800feec:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800feee:	4807      	ldr	r0, [pc, #28]	@ (800ff0c <cJSON_CreateObject+0x24>)
 800fef0:	f7fe f878 	bl	800dfe4 <cJSON_New_Item>
 800fef4:	6078      	str	r0, [r7, #4]
    if (item)
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d002      	beq.n	800ff02 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2240      	movs	r2, #64	@ 0x40
 800ff00:	60da      	str	r2, [r3, #12]
    }

    return item;
 800ff02:	687b      	ldr	r3, [r7, #4]
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	3708      	adds	r7, #8
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}
 800ff0c:	20000080 	.word	0x20000080

0800ff10 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d101      	bne.n	800ff22 <cJSON_IsNumber+0x12>
    {
        return false;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	e007      	b.n	800ff32 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	68db      	ldr	r3, [r3, #12]
 800ff26:	b2db      	uxtb	r3, r3
 800ff28:	2b08      	cmp	r3, #8
 800ff2a:	bf0c      	ite	eq
 800ff2c:	2301      	moveq	r3, #1
 800ff2e:	2300      	movne	r3, #0
 800ff30:	b2db      	uxtb	r3, r3
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	370c      	adds	r7, #12
 800ff36:	46bd      	mov	sp, r7
 800ff38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3c:	4770      	bx	lr

0800ff3e <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 800ff3e:	b480      	push	{r7}
 800ff40:	b083      	sub	sp, #12
 800ff42:	af00      	add	r7, sp, #0
 800ff44:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d101      	bne.n	800ff50 <cJSON_IsString+0x12>
    {
        return false;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	e007      	b.n	800ff60 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	68db      	ldr	r3, [r3, #12]
 800ff54:	b2db      	uxtb	r3, r3
 800ff56:	2b10      	cmp	r3, #16
 800ff58:	bf0c      	ite	eq
 800ff5a:	2301      	moveq	r3, #1
 800ff5c:	2300      	movne	r3, #0
 800ff5e:	b2db      	uxtb	r3, r3
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	370c      	adds	r7, #12
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr

0800ff6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ff70:	f000 feda 	bl	8010d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ff74:	f000 f812 	bl	800ff9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ff78:	f000 f9a2 	bl	80102c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800ff7c:	f000 f880 	bl	8010080 <MX_SPI1_Init>
  MX_SPI2_Init();
 800ff80:	f000 f8b6 	bl	80100f0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800ff84:	f000 f948 	bl	8010218 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800ff88:	f000 f970 	bl	801026c <MX_USART3_UART_Init>
  MX_SPI3_Init();
 800ff8c:	f000 f8e4 	bl	8010158 <MX_SPI3_Init>
  MX_UART4_Init();
 800ff90:	f000 f918 	bl	80101c4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  user_app_init();
 800ff94:	f7fb fa28 	bl	800b3e8 <user_app_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800ff98:	bf00      	nop
 800ff9a:	e7fd      	b.n	800ff98 <main+0x2c>

0800ff9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b094      	sub	sp, #80	@ 0x50
 800ffa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ffa2:	f107 031c 	add.w	r3, r7, #28
 800ffa6:	2234      	movs	r2, #52	@ 0x34
 800ffa8:	2100      	movs	r1, #0
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f009 fdd8 	bl	8019b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ffb0:	f107 0308 	add.w	r3, r7, #8
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	601a      	str	r2, [r3, #0]
 800ffb8:	605a      	str	r2, [r3, #4]
 800ffba:	609a      	str	r2, [r3, #8]
 800ffbc:	60da      	str	r2, [r3, #12]
 800ffbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	607b      	str	r3, [r7, #4]
 800ffc4:	4b2c      	ldr	r3, [pc, #176]	@ (8010078 <SystemClock_Config+0xdc>)
 800ffc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffc8:	4a2b      	ldr	r2, [pc, #172]	@ (8010078 <SystemClock_Config+0xdc>)
 800ffca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ffce:	6413      	str	r3, [r2, #64]	@ 0x40
 800ffd0:	4b29      	ldr	r3, [pc, #164]	@ (8010078 <SystemClock_Config+0xdc>)
 800ffd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ffd8:	607b      	str	r3, [r7, #4]
 800ffda:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ffdc:	2300      	movs	r3, #0
 800ffde:	603b      	str	r3, [r7, #0]
 800ffe0:	4b26      	ldr	r3, [pc, #152]	@ (801007c <SystemClock_Config+0xe0>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	4a25      	ldr	r2, [pc, #148]	@ (801007c <SystemClock_Config+0xe0>)
 800ffe6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ffea:	6013      	str	r3, [r2, #0]
 800ffec:	4b23      	ldr	r3, [pc, #140]	@ (801007c <SystemClock_Config+0xe0>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800fff4:	603b      	str	r3, [r7, #0]
 800fff6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800fff8:	2302      	movs	r3, #2
 800fffa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800fffc:	2301      	movs	r3, #1
 800fffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8010000:	2310      	movs	r3, #16
 8010002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010004:	2302      	movs	r3, #2
 8010006:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8010008:	2300      	movs	r3, #0
 801000a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 801000c:	2308      	movs	r3, #8
 801000e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8010010:	23b4      	movs	r3, #180	@ 0xb4
 8010012:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010014:	2302      	movs	r3, #2
 8010016:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8010018:	2302      	movs	r3, #2
 801001a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 801001c:	2302      	movs	r3, #2
 801001e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010020:	f107 031c 	add.w	r3, r7, #28
 8010024:	4618      	mov	r0, r3
 8010026:	f001 fedd 	bl	8011de4 <HAL_RCC_OscConfig>
 801002a:	4603      	mov	r3, r0
 801002c:	2b00      	cmp	r3, #0
 801002e:	d001      	beq.n	8010034 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8010030:	f000 fa30 	bl	8010494 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8010034:	f001 fb90 	bl	8011758 <HAL_PWREx_EnableOverDrive>
 8010038:	4603      	mov	r3, r0
 801003a:	2b00      	cmp	r3, #0
 801003c:	d001      	beq.n	8010042 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 801003e:	f000 fa29 	bl	8010494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010042:	230f      	movs	r3, #15
 8010044:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010046:	2302      	movs	r3, #2
 8010048:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801004a:	2300      	movs	r3, #0
 801004c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801004e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8010052:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8010054:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010058:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801005a:	f107 0308 	add.w	r3, r7, #8
 801005e:	2105      	movs	r1, #5
 8010060:	4618      	mov	r0, r3
 8010062:	f001 fbc9 	bl	80117f8 <HAL_RCC_ClockConfig>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d001      	beq.n	8010070 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 801006c:	f000 fa12 	bl	8010494 <Error_Handler>
  }
}
 8010070:	bf00      	nop
 8010072:	3750      	adds	r7, #80	@ 0x50
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}
 8010078:	40023800 	.word	0x40023800
 801007c:	40007000 	.word	0x40007000

08010080 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8010084:	4b18      	ldr	r3, [pc, #96]	@ (80100e8 <MX_SPI1_Init+0x68>)
 8010086:	4a19      	ldr	r2, [pc, #100]	@ (80100ec <MX_SPI1_Init+0x6c>)
 8010088:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801008a:	4b17      	ldr	r3, [pc, #92]	@ (80100e8 <MX_SPI1_Init+0x68>)
 801008c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8010090:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8010092:	4b15      	ldr	r3, [pc, #84]	@ (80100e8 <MX_SPI1_Init+0x68>)
 8010094:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8010098:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801009a:	4b13      	ldr	r3, [pc, #76]	@ (80100e8 <MX_SPI1_Init+0x68>)
 801009c:	2200      	movs	r2, #0
 801009e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80100a0:	4b11      	ldr	r3, [pc, #68]	@ (80100e8 <MX_SPI1_Init+0x68>)
 80100a2:	2200      	movs	r2, #0
 80100a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80100a6:	4b10      	ldr	r3, [pc, #64]	@ (80100e8 <MX_SPI1_Init+0x68>)
 80100a8:	2200      	movs	r2, #0
 80100aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80100ac:	4b0e      	ldr	r3, [pc, #56]	@ (80100e8 <MX_SPI1_Init+0x68>)
 80100ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80100b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80100b4:	4b0c      	ldr	r3, [pc, #48]	@ (80100e8 <MX_SPI1_Init+0x68>)
 80100b6:	2208      	movs	r2, #8
 80100b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80100ba:	4b0b      	ldr	r3, [pc, #44]	@ (80100e8 <MX_SPI1_Init+0x68>)
 80100bc:	2200      	movs	r2, #0
 80100be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80100c0:	4b09      	ldr	r3, [pc, #36]	@ (80100e8 <MX_SPI1_Init+0x68>)
 80100c2:	2200      	movs	r2, #0
 80100c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80100c6:	4b08      	ldr	r3, [pc, #32]	@ (80100e8 <MX_SPI1_Init+0x68>)
 80100c8:	2200      	movs	r2, #0
 80100ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80100cc:	4b06      	ldr	r3, [pc, #24]	@ (80100e8 <MX_SPI1_Init+0x68>)
 80100ce:	220a      	movs	r2, #10
 80100d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80100d2:	4805      	ldr	r0, [pc, #20]	@ (80100e8 <MX_SPI1_Init+0x68>)
 80100d4:	f002 f924 	bl	8012320 <HAL_SPI_Init>
 80100d8:	4603      	mov	r3, r0
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d001      	beq.n	80100e2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80100de:	f000 f9d9 	bl	8010494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80100e2:	bf00      	nop
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	2000132c 	.word	0x2000132c
 80100ec:	40013000 	.word	0x40013000

080100f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80100f4:	4b16      	ldr	r3, [pc, #88]	@ (8010150 <MX_SPI2_Init+0x60>)
 80100f6:	4a17      	ldr	r2, [pc, #92]	@ (8010154 <MX_SPI2_Init+0x64>)
 80100f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80100fa:	4b15      	ldr	r3, [pc, #84]	@ (8010150 <MX_SPI2_Init+0x60>)
 80100fc:	2200      	movs	r2, #0
 80100fe:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8010100:	4b13      	ldr	r3, [pc, #76]	@ (8010150 <MX_SPI2_Init+0x60>)
 8010102:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010106:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8010108:	4b11      	ldr	r3, [pc, #68]	@ (8010150 <MX_SPI2_Init+0x60>)
 801010a:	2200      	movs	r2, #0
 801010c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 801010e:	4b10      	ldr	r3, [pc, #64]	@ (8010150 <MX_SPI2_Init+0x60>)
 8010110:	2200      	movs	r2, #0
 8010112:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8010114:	4b0e      	ldr	r3, [pc, #56]	@ (8010150 <MX_SPI2_Init+0x60>)
 8010116:	2200      	movs	r2, #0
 8010118:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 801011a:	4b0d      	ldr	r3, [pc, #52]	@ (8010150 <MX_SPI2_Init+0x60>)
 801011c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010120:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010122:	4b0b      	ldr	r3, [pc, #44]	@ (8010150 <MX_SPI2_Init+0x60>)
 8010124:	2200      	movs	r2, #0
 8010126:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8010128:	4b09      	ldr	r3, [pc, #36]	@ (8010150 <MX_SPI2_Init+0x60>)
 801012a:	2200      	movs	r2, #0
 801012c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801012e:	4b08      	ldr	r3, [pc, #32]	@ (8010150 <MX_SPI2_Init+0x60>)
 8010130:	2200      	movs	r2, #0
 8010132:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8010134:	4b06      	ldr	r3, [pc, #24]	@ (8010150 <MX_SPI2_Init+0x60>)
 8010136:	220a      	movs	r2, #10
 8010138:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 801013a:	4805      	ldr	r0, [pc, #20]	@ (8010150 <MX_SPI2_Init+0x60>)
 801013c:	f002 f8f0 	bl	8012320 <HAL_SPI_Init>
 8010140:	4603      	mov	r3, r0
 8010142:	2b00      	cmp	r3, #0
 8010144:	d001      	beq.n	801014a <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 8010146:	f000 f9a5 	bl	8010494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 801014a:	bf00      	nop
 801014c:	bd80      	pop	{r7, pc}
 801014e:	bf00      	nop
 8010150:	20001384 	.word	0x20001384
 8010154:	40003800 	.word	0x40003800

08010158 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 801015c:	4b17      	ldr	r3, [pc, #92]	@ (80101bc <MX_SPI3_Init+0x64>)
 801015e:	4a18      	ldr	r2, [pc, #96]	@ (80101c0 <MX_SPI3_Init+0x68>)
 8010160:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8010162:	4b16      	ldr	r3, [pc, #88]	@ (80101bc <MX_SPI3_Init+0x64>)
 8010164:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8010168:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 801016a:	4b14      	ldr	r3, [pc, #80]	@ (80101bc <MX_SPI3_Init+0x64>)
 801016c:	2200      	movs	r2, #0
 801016e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8010170:	4b12      	ldr	r3, [pc, #72]	@ (80101bc <MX_SPI3_Init+0x64>)
 8010172:	2200      	movs	r2, #0
 8010174:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010176:	4b11      	ldr	r3, [pc, #68]	@ (80101bc <MX_SPI3_Init+0x64>)
 8010178:	2200      	movs	r2, #0
 801017a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 801017c:	4b0f      	ldr	r3, [pc, #60]	@ (80101bc <MX_SPI3_Init+0x64>)
 801017e:	2200      	movs	r2, #0
 8010180:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8010182:	4b0e      	ldr	r3, [pc, #56]	@ (80101bc <MX_SPI3_Init+0x64>)
 8010184:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010188:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 801018a:	4b0c      	ldr	r3, [pc, #48]	@ (80101bc <MX_SPI3_Init+0x64>)
 801018c:	2218      	movs	r2, #24
 801018e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010190:	4b0a      	ldr	r3, [pc, #40]	@ (80101bc <MX_SPI3_Init+0x64>)
 8010192:	2200      	movs	r2, #0
 8010194:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8010196:	4b09      	ldr	r3, [pc, #36]	@ (80101bc <MX_SPI3_Init+0x64>)
 8010198:	2200      	movs	r2, #0
 801019a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801019c:	4b07      	ldr	r3, [pc, #28]	@ (80101bc <MX_SPI3_Init+0x64>)
 801019e:	2200      	movs	r2, #0
 80101a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80101a2:	4b06      	ldr	r3, [pc, #24]	@ (80101bc <MX_SPI3_Init+0x64>)
 80101a4:	220a      	movs	r2, #10
 80101a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80101a8:	4804      	ldr	r0, [pc, #16]	@ (80101bc <MX_SPI3_Init+0x64>)
 80101aa:	f002 f8b9 	bl	8012320 <HAL_SPI_Init>
 80101ae:	4603      	mov	r3, r0
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d001      	beq.n	80101b8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80101b4:	f000 f96e 	bl	8010494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80101b8:	bf00      	nop
 80101ba:	bd80      	pop	{r7, pc}
 80101bc:	200013dc 	.word	0x200013dc
 80101c0:	40003c00 	.word	0x40003c00

080101c4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80101c8:	4b11      	ldr	r3, [pc, #68]	@ (8010210 <MX_UART4_Init+0x4c>)
 80101ca:	4a12      	ldr	r2, [pc, #72]	@ (8010214 <MX_UART4_Init+0x50>)
 80101cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80101ce:	4b10      	ldr	r3, [pc, #64]	@ (8010210 <MX_UART4_Init+0x4c>)
 80101d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80101d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80101d6:	4b0e      	ldr	r3, [pc, #56]	@ (8010210 <MX_UART4_Init+0x4c>)
 80101d8:	2200      	movs	r2, #0
 80101da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80101dc:	4b0c      	ldr	r3, [pc, #48]	@ (8010210 <MX_UART4_Init+0x4c>)
 80101de:	2200      	movs	r2, #0
 80101e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80101e2:	4b0b      	ldr	r3, [pc, #44]	@ (8010210 <MX_UART4_Init+0x4c>)
 80101e4:	2200      	movs	r2, #0
 80101e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80101e8:	4b09      	ldr	r3, [pc, #36]	@ (8010210 <MX_UART4_Init+0x4c>)
 80101ea:	220c      	movs	r2, #12
 80101ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80101ee:	4b08      	ldr	r3, [pc, #32]	@ (8010210 <MX_UART4_Init+0x4c>)
 80101f0:	2200      	movs	r2, #0
 80101f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80101f4:	4b06      	ldr	r3, [pc, #24]	@ (8010210 <MX_UART4_Init+0x4c>)
 80101f6:	2200      	movs	r2, #0
 80101f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80101fa:	4805      	ldr	r0, [pc, #20]	@ (8010210 <MX_UART4_Init+0x4c>)
 80101fc:	f003 fd30 	bl	8013c60 <HAL_UART_Init>
 8010200:	4603      	mov	r3, r0
 8010202:	2b00      	cmp	r3, #0
 8010204:	d001      	beq.n	801020a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8010206:	f000 f945 	bl	8010494 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 801020a:	bf00      	nop
 801020c:	bd80      	pop	{r7, pc}
 801020e:	bf00      	nop
 8010210:	20001434 	.word	0x20001434
 8010214:	40004c00 	.word	0x40004c00

08010218 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 801021c:	4b11      	ldr	r3, [pc, #68]	@ (8010264 <MX_USART2_UART_Init+0x4c>)
 801021e:	4a12      	ldr	r2, [pc, #72]	@ (8010268 <MX_USART2_UART_Init+0x50>)
 8010220:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8010222:	4b10      	ldr	r3, [pc, #64]	@ (8010264 <MX_USART2_UART_Init+0x4c>)
 8010224:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8010228:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801022a:	4b0e      	ldr	r3, [pc, #56]	@ (8010264 <MX_USART2_UART_Init+0x4c>)
 801022c:	2200      	movs	r2, #0
 801022e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8010230:	4b0c      	ldr	r3, [pc, #48]	@ (8010264 <MX_USART2_UART_Init+0x4c>)
 8010232:	2200      	movs	r2, #0
 8010234:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8010236:	4b0b      	ldr	r3, [pc, #44]	@ (8010264 <MX_USART2_UART_Init+0x4c>)
 8010238:	2200      	movs	r2, #0
 801023a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801023c:	4b09      	ldr	r3, [pc, #36]	@ (8010264 <MX_USART2_UART_Init+0x4c>)
 801023e:	220c      	movs	r2, #12
 8010240:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010242:	4b08      	ldr	r3, [pc, #32]	@ (8010264 <MX_USART2_UART_Init+0x4c>)
 8010244:	2200      	movs	r2, #0
 8010246:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8010248:	4b06      	ldr	r3, [pc, #24]	@ (8010264 <MX_USART2_UART_Init+0x4c>)
 801024a:	2200      	movs	r2, #0
 801024c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801024e:	4805      	ldr	r0, [pc, #20]	@ (8010264 <MX_USART2_UART_Init+0x4c>)
 8010250:	f003 fd06 	bl	8013c60 <HAL_UART_Init>
 8010254:	4603      	mov	r3, r0
 8010256:	2b00      	cmp	r3, #0
 8010258:	d001      	beq.n	801025e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 801025a:	f000 f91b 	bl	8010494 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 801025e:	bf00      	nop
 8010260:	bd80      	pop	{r7, pc}
 8010262:	bf00      	nop
 8010264:	2000147c 	.word	0x2000147c
 8010268:	40004400 	.word	0x40004400

0801026c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8010270:	4b11      	ldr	r3, [pc, #68]	@ (80102b8 <MX_USART3_UART_Init+0x4c>)
 8010272:	4a12      	ldr	r2, [pc, #72]	@ (80102bc <MX_USART3_UART_Init+0x50>)
 8010274:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8010276:	4b10      	ldr	r3, [pc, #64]	@ (80102b8 <MX_USART3_UART_Init+0x4c>)
 8010278:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 801027c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 801027e:	4b0e      	ldr	r3, [pc, #56]	@ (80102b8 <MX_USART3_UART_Init+0x4c>)
 8010280:	2200      	movs	r2, #0
 8010282:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8010284:	4b0c      	ldr	r3, [pc, #48]	@ (80102b8 <MX_USART3_UART_Init+0x4c>)
 8010286:	2200      	movs	r2, #0
 8010288:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 801028a:	4b0b      	ldr	r3, [pc, #44]	@ (80102b8 <MX_USART3_UART_Init+0x4c>)
 801028c:	2200      	movs	r2, #0
 801028e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8010290:	4b09      	ldr	r3, [pc, #36]	@ (80102b8 <MX_USART3_UART_Init+0x4c>)
 8010292:	220c      	movs	r2, #12
 8010294:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010296:	4b08      	ldr	r3, [pc, #32]	@ (80102b8 <MX_USART3_UART_Init+0x4c>)
 8010298:	2200      	movs	r2, #0
 801029a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 801029c:	4b06      	ldr	r3, [pc, #24]	@ (80102b8 <MX_USART3_UART_Init+0x4c>)
 801029e:	2200      	movs	r2, #0
 80102a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80102a2:	4805      	ldr	r0, [pc, #20]	@ (80102b8 <MX_USART3_UART_Init+0x4c>)
 80102a4:	f003 fcdc 	bl	8013c60 <HAL_UART_Init>
 80102a8:	4603      	mov	r3, r0
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d001      	beq.n	80102b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80102ae:	f000 f8f1 	bl	8010494 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80102b2:	bf00      	nop
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	200014c4 	.word	0x200014c4
 80102bc:	40004800 	.word	0x40004800

080102c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b08a      	sub	sp, #40	@ 0x28
 80102c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80102c6:	f107 0314 	add.w	r3, r7, #20
 80102ca:	2200      	movs	r2, #0
 80102cc:	601a      	str	r2, [r3, #0]
 80102ce:	605a      	str	r2, [r3, #4]
 80102d0:	609a      	str	r2, [r3, #8]
 80102d2:	60da      	str	r2, [r3, #12]
 80102d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80102d6:	2300      	movs	r3, #0
 80102d8:	613b      	str	r3, [r7, #16]
 80102da:	4b60      	ldr	r3, [pc, #384]	@ (801045c <MX_GPIO_Init+0x19c>)
 80102dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102de:	4a5f      	ldr	r2, [pc, #380]	@ (801045c <MX_GPIO_Init+0x19c>)
 80102e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80102e6:	4b5d      	ldr	r3, [pc, #372]	@ (801045c <MX_GPIO_Init+0x19c>)
 80102e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80102ee:	613b      	str	r3, [r7, #16]
 80102f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80102f2:	2300      	movs	r3, #0
 80102f4:	60fb      	str	r3, [r7, #12]
 80102f6:	4b59      	ldr	r3, [pc, #356]	@ (801045c <MX_GPIO_Init+0x19c>)
 80102f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102fa:	4a58      	ldr	r2, [pc, #352]	@ (801045c <MX_GPIO_Init+0x19c>)
 80102fc:	f043 0304 	orr.w	r3, r3, #4
 8010300:	6313      	str	r3, [r2, #48]	@ 0x30
 8010302:	4b56      	ldr	r3, [pc, #344]	@ (801045c <MX_GPIO_Init+0x19c>)
 8010304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010306:	f003 0304 	and.w	r3, r3, #4
 801030a:	60fb      	str	r3, [r7, #12]
 801030c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801030e:	2300      	movs	r3, #0
 8010310:	60bb      	str	r3, [r7, #8]
 8010312:	4b52      	ldr	r3, [pc, #328]	@ (801045c <MX_GPIO_Init+0x19c>)
 8010314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010316:	4a51      	ldr	r2, [pc, #324]	@ (801045c <MX_GPIO_Init+0x19c>)
 8010318:	f043 0301 	orr.w	r3, r3, #1
 801031c:	6313      	str	r3, [r2, #48]	@ 0x30
 801031e:	4b4f      	ldr	r3, [pc, #316]	@ (801045c <MX_GPIO_Init+0x19c>)
 8010320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010322:	f003 0301 	and.w	r3, r3, #1
 8010326:	60bb      	str	r3, [r7, #8]
 8010328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801032a:	2300      	movs	r3, #0
 801032c:	607b      	str	r3, [r7, #4]
 801032e:	4b4b      	ldr	r3, [pc, #300]	@ (801045c <MX_GPIO_Init+0x19c>)
 8010330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010332:	4a4a      	ldr	r2, [pc, #296]	@ (801045c <MX_GPIO_Init+0x19c>)
 8010334:	f043 0302 	orr.w	r3, r3, #2
 8010338:	6313      	str	r3, [r2, #48]	@ 0x30
 801033a:	4b48      	ldr	r3, [pc, #288]	@ (801045c <MX_GPIO_Init+0x19c>)
 801033c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801033e:	f003 0302 	and.w	r3, r3, #2
 8010342:	607b      	str	r3, [r7, #4]
 8010344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin, GPIO_PIN_RESET);
 8010346:	2200      	movs	r2, #0
 8010348:	2102      	movs	r1, #2
 801034a:	4845      	ldr	r0, [pc, #276]	@ (8010460 <MX_GPIO_Init+0x1a0>)
 801034c:	f001 f998 	bl	8011680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4|L_RELAY_4_Pin, GPIO_PIN_RESET);
 8010350:	2200      	movs	r2, #0
 8010352:	215c      	movs	r1, #92	@ 0x5c
 8010354:	4843      	ldr	r0, [pc, #268]	@ (8010464 <MX_GPIO_Init+0x1a4>)
 8010356:	f001 f993 	bl	8011680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_BACKLIT_Pin|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 801035a:	2200      	movs	r2, #0
 801035c:	2113      	movs	r1, #19
 801035e:	4842      	ldr	r0, [pc, #264]	@ (8010468 <MX_GPIO_Init+0x1a8>)
 8010360:	f001 f98e 	bl	8011680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_CS_Pin|RF_RST_Pin|TOUCH_LED4_Pin, GPIO_PIN_RESET);
 8010364:	2200      	movs	r2, #0
 8010366:	f244 0106 	movw	r1, #16390	@ 0x4006
 801036a:	4840      	ldr	r0, [pc, #256]	@ (801046c <MX_GPIO_Init+0x1ac>)
 801036c:	f001 f988 	bl	8011680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L_RELAY_2_Pin|L_RELAY_1_Pin, GPIO_PIN_SET);
 8010370:	2201      	movs	r2, #1
 8010372:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8010376:	483b      	ldr	r0, [pc, #236]	@ (8010464 <MX_GPIO_Init+0x1a4>)
 8010378:	f001 f982 	bl	8011680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_RELAY_3_GPIO_Port, L_RELAY_3_Pin, GPIO_PIN_SET);
 801037c:	2201      	movs	r2, #1
 801037e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010382:	483a      	ldr	r0, [pc, #232]	@ (801046c <MX_GPIO_Init+0x1ac>)
 8010384:	f001 f97c 	bl	8011680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOUCH_LED3_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED3_Pin;
 8010388:	2302      	movs	r3, #2
 801038a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801038c:	2301      	movs	r3, #1
 801038e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010390:	2300      	movs	r3, #0
 8010392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010394:	2300      	movs	r3, #0
 8010396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_LED3_GPIO_Port, &GPIO_InitStruct);
 8010398:	f107 0314 	add.w	r3, r7, #20
 801039c:	4619      	mov	r1, r3
 801039e:	4830      	ldr	r0, [pc, #192]	@ (8010460 <MX_GPIO_Init+0x1a0>)
 80103a0:	f000 fece 	bl	8011140 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_LED2_Pin TOUCH_LED1_Pin PC4 L_RELAY_2_Pin
                           L_RELAY_1_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4|L_RELAY_2_Pin
 80103a4:	f44f 7347 	mov.w	r3, #796	@ 0x31c
 80103a8:	617b      	str	r3, [r7, #20]
                          |L_RELAY_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80103aa:	2301      	movs	r3, #1
 80103ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103ae:	2300      	movs	r3, #0
 80103b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103b2:	2300      	movs	r3, #0
 80103b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80103b6:	f107 0314 	add.w	r3, r7, #20
 80103ba:	4619      	mov	r1, r3
 80103bc:	4829      	ldr	r0, [pc, #164]	@ (8010464 <MX_GPIO_Init+0x1a4>)
 80103be:	f000 febf 	bl	8011140 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_BACKLIT_Pin PA1 PA4 */
  GPIO_InitStruct.Pin = DISP_BACKLIT_Pin|GPIO_PIN_1|GPIO_PIN_4;
 80103c2:	2313      	movs	r3, #19
 80103c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80103c6:	2301      	movs	r3, #1
 80103c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103ca:	2300      	movs	r3, #0
 80103cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103ce:	2300      	movs	r3, #0
 80103d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80103d2:	f107 0314 	add.w	r3, r7, #20
 80103d6:	4619      	mov	r1, r3
 80103d8:	4823      	ldr	r0, [pc, #140]	@ (8010468 <MX_GPIO_Init+0x1a8>)
 80103da:	f000 feb1 	bl	8011140 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_CS_Pin RF_RST_Pin TOUCH_LED4_Pin L_RELAY_3_Pin */
  GPIO_InitStruct.Pin = RF_CS_Pin|RF_RST_Pin|TOUCH_LED4_Pin|L_RELAY_3_Pin;
 80103de:	f244 1306 	movw	r3, #16646	@ 0x4106
 80103e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80103e4:	2301      	movs	r3, #1
 80103e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103e8:	2300      	movs	r3, #0
 80103ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103ec:	2300      	movs	r3, #0
 80103ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80103f0:	f107 0314 	add.w	r3, r7, #20
 80103f4:	4619      	mov	r1, r3
 80103f6:	481d      	ldr	r0, [pc, #116]	@ (801046c <MX_GPIO_Init+0x1ac>)
 80103f8:	f000 fea2 	bl	8011140 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_RELAY_4_Pin */
  GPIO_InitStruct.Pin = L_RELAY_4_Pin;
 80103fc:	2340      	movs	r3, #64	@ 0x40
 80103fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010400:	2301      	movs	r3, #1
 8010402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8010404:	2302      	movs	r3, #2
 8010406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010408:	2300      	movs	r3, #0
 801040a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(L_RELAY_4_GPIO_Port, &GPIO_InitStruct);
 801040c:	f107 0314 	add.w	r3, r7, #20
 8010410:	4619      	mov	r1, r3
 8010412:	4814      	ldr	r0, [pc, #80]	@ (8010464 <MX_GPIO_Init+0x1a4>)
 8010414:	f000 fe94 	bl	8011140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8010418:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 801041c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801041e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8010422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8010424:	2302      	movs	r3, #2
 8010426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010428:	f107 0314 	add.w	r3, r7, #20
 801042c:	4619      	mov	r1, r3
 801042e:	480e      	ldr	r0, [pc, #56]	@ (8010468 <MX_GPIO_Init+0x1a8>)
 8010430:	f000 fe86 	bl	8011140 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8010434:	2200      	movs	r2, #0
 8010436:	2100      	movs	r1, #0
 8010438:	2017      	movs	r0, #23
 801043a:	f000 fdb7 	bl	8010fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 801043e:	2017      	movs	r0, #23
 8010440:	f000 fdd0 	bl	8010fe4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8010444:	2200      	movs	r2, #0
 8010446:	2100      	movs	r1, #0
 8010448:	2028      	movs	r0, #40	@ 0x28
 801044a:	f000 fdaf 	bl	8010fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 801044e:	2028      	movs	r0, #40	@ 0x28
 8010450:	f000 fdc8 	bl	8010fe4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8010454:	bf00      	nop
 8010456:	3728      	adds	r7, #40	@ 0x28
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}
 801045c:	40023800 	.word	0x40023800
 8010460:	40021c00 	.word	0x40021c00
 8010464:	40020800 	.word	0x40020800
 8010468:	40020000 	.word	0x40020000
 801046c:	40020400 	.word	0x40020400

08010470 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b082      	sub	sp, #8
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	4a04      	ldr	r2, [pc, #16]	@ (8010490 <HAL_TIM_PeriodElapsedCallback+0x20>)
 801047e:	4293      	cmp	r3, r2
 8010480:	d101      	bne.n	8010486 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8010482:	f000 fc73 	bl	8010d6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8010486:	bf00      	nop
 8010488:	3708      	adds	r7, #8
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
 801048e:	bf00      	nop
 8010490:	40010000 	.word	0x40010000

08010494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010494:	b480      	push	{r7}
 8010496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010498:	b672      	cpsid	i
}
 801049a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801049c:	bf00      	nop
 801049e:	e7fd      	b.n	801049c <Error_Handler+0x8>

080104a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80104a0:	b480      	push	{r7}
 80104a2:	b083      	sub	sp, #12
 80104a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80104a6:	2300      	movs	r3, #0
 80104a8:	607b      	str	r3, [r7, #4]
 80104aa:	4b10      	ldr	r3, [pc, #64]	@ (80104ec <HAL_MspInit+0x4c>)
 80104ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104ae:	4a0f      	ldr	r2, [pc, #60]	@ (80104ec <HAL_MspInit+0x4c>)
 80104b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80104b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80104b6:	4b0d      	ldr	r3, [pc, #52]	@ (80104ec <HAL_MspInit+0x4c>)
 80104b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80104be:	607b      	str	r3, [r7, #4]
 80104c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80104c2:	2300      	movs	r3, #0
 80104c4:	603b      	str	r3, [r7, #0]
 80104c6:	4b09      	ldr	r3, [pc, #36]	@ (80104ec <HAL_MspInit+0x4c>)
 80104c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104ca:	4a08      	ldr	r2, [pc, #32]	@ (80104ec <HAL_MspInit+0x4c>)
 80104cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80104d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80104d2:	4b06      	ldr	r3, [pc, #24]	@ (80104ec <HAL_MspInit+0x4c>)
 80104d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80104da:	603b      	str	r3, [r7, #0]
 80104dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80104de:	bf00      	nop
 80104e0:	370c      	adds	r7, #12
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr
 80104ea:	bf00      	nop
 80104ec:	40023800 	.word	0x40023800

080104f0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b08e      	sub	sp, #56	@ 0x38
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80104f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80104fc:	2200      	movs	r2, #0
 80104fe:	601a      	str	r2, [r3, #0]
 8010500:	605a      	str	r2, [r3, #4]
 8010502:	609a      	str	r2, [r3, #8]
 8010504:	60da      	str	r2, [r3, #12]
 8010506:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	4a66      	ldr	r2, [pc, #408]	@ (80106a8 <HAL_SPI_MspInit+0x1b8>)
 801050e:	4293      	cmp	r3, r2
 8010510:	d12c      	bne.n	801056c <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8010512:	2300      	movs	r3, #0
 8010514:	623b      	str	r3, [r7, #32]
 8010516:	4b65      	ldr	r3, [pc, #404]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 8010518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801051a:	4a64      	ldr	r2, [pc, #400]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 801051c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8010520:	6453      	str	r3, [r2, #68]	@ 0x44
 8010522:	4b62      	ldr	r3, [pc, #392]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 8010524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010526:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801052a:	623b      	str	r3, [r7, #32]
 801052c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801052e:	2300      	movs	r3, #0
 8010530:	61fb      	str	r3, [r7, #28]
 8010532:	4b5e      	ldr	r3, [pc, #376]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 8010534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010536:	4a5d      	ldr	r2, [pc, #372]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 8010538:	f043 0301 	orr.w	r3, r3, #1
 801053c:	6313      	str	r3, [r2, #48]	@ 0x30
 801053e:	4b5b      	ldr	r3, [pc, #364]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 8010540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010542:	f003 0301 	and.w	r3, r3, #1
 8010546:	61fb      	str	r3, [r7, #28]
 8010548:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 801054a:	23a0      	movs	r3, #160	@ 0xa0
 801054c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801054e:	2302      	movs	r3, #2
 8010550:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010552:	2300      	movs	r3, #0
 8010554:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010556:	2303      	movs	r3, #3
 8010558:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801055a:	2305      	movs	r3, #5
 801055c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801055e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010562:	4619      	mov	r1, r3
 8010564:	4852      	ldr	r0, [pc, #328]	@ (80106b0 <HAL_SPI_MspInit+0x1c0>)
 8010566:	f000 fdeb 	bl	8011140 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 801056a:	e099      	b.n	80106a0 <HAL_SPI_MspInit+0x1b0>
  else if(hspi->Instance==SPI2)
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	4a50      	ldr	r2, [pc, #320]	@ (80106b4 <HAL_SPI_MspInit+0x1c4>)
 8010572:	4293      	cmp	r3, r2
 8010574:	d153      	bne.n	801061e <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8010576:	2300      	movs	r3, #0
 8010578:	61bb      	str	r3, [r7, #24]
 801057a:	4b4c      	ldr	r3, [pc, #304]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 801057c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801057e:	4a4b      	ldr	r2, [pc, #300]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 8010580:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010584:	6413      	str	r3, [r2, #64]	@ 0x40
 8010586:	4b49      	ldr	r3, [pc, #292]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 8010588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801058a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801058e:	61bb      	str	r3, [r7, #24]
 8010590:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010592:	2300      	movs	r3, #0
 8010594:	617b      	str	r3, [r7, #20]
 8010596:	4b45      	ldr	r3, [pc, #276]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 8010598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801059a:	4a44      	ldr	r2, [pc, #272]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 801059c:	f043 0304 	orr.w	r3, r3, #4
 80105a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80105a2:	4b42      	ldr	r3, [pc, #264]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 80105a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105a6:	f003 0304 	and.w	r3, r3, #4
 80105aa:	617b      	str	r3, [r7, #20]
 80105ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80105ae:	2300      	movs	r3, #0
 80105b0:	613b      	str	r3, [r7, #16]
 80105b2:	4b3e      	ldr	r3, [pc, #248]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 80105b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105b6:	4a3d      	ldr	r2, [pc, #244]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 80105b8:	f043 0302 	orr.w	r3, r3, #2
 80105bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80105be:	4b3b      	ldr	r3, [pc, #236]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 80105c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105c2:	f003 0302 	and.w	r3, r3, #2
 80105c6:	613b      	str	r3, [r7, #16]
 80105c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80105ca:	2302      	movs	r3, #2
 80105cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80105ce:	2302      	movs	r3, #2
 80105d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105d2:	2300      	movs	r3, #0
 80105d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80105d6:	2303      	movs	r3, #3
 80105d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80105da:	2307      	movs	r3, #7
 80105dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80105de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80105e2:	4619      	mov	r1, r3
 80105e4:	4834      	ldr	r0, [pc, #208]	@ (80106b8 <HAL_SPI_MspInit+0x1c8>)
 80105e6:	f000 fdab 	bl	8011140 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80105ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80105ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80105f0:	2302      	movs	r3, #2
 80105f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105f4:	2300      	movs	r3, #0
 80105f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80105f8:	2303      	movs	r3, #3
 80105fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80105fc:	2305      	movs	r3, #5
 80105fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010600:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010604:	4619      	mov	r1, r3
 8010606:	482d      	ldr	r0, [pc, #180]	@ (80106bc <HAL_SPI_MspInit+0x1cc>)
 8010608:	f000 fd9a 	bl	8011140 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 801060c:	2200      	movs	r2, #0
 801060e:	2105      	movs	r1, #5
 8010610:	2024      	movs	r0, #36	@ 0x24
 8010612:	f000 fccb 	bl	8010fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8010616:	2024      	movs	r0, #36	@ 0x24
 8010618:	f000 fce4 	bl	8010fe4 <HAL_NVIC_EnableIRQ>
}
 801061c:	e040      	b.n	80106a0 <HAL_SPI_MspInit+0x1b0>
  else if(hspi->Instance==SPI3)
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	4a27      	ldr	r2, [pc, #156]	@ (80106c0 <HAL_SPI_MspInit+0x1d0>)
 8010624:	4293      	cmp	r3, r2
 8010626:	d13b      	bne.n	80106a0 <HAL_SPI_MspInit+0x1b0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8010628:	2300      	movs	r3, #0
 801062a:	60fb      	str	r3, [r7, #12]
 801062c:	4b1f      	ldr	r3, [pc, #124]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 801062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010630:	4a1e      	ldr	r2, [pc, #120]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 8010632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010636:	6413      	str	r3, [r2, #64]	@ 0x40
 8010638:	4b1c      	ldr	r3, [pc, #112]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 801063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801063c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010640:	60fb      	str	r3, [r7, #12]
 8010642:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010644:	2300      	movs	r3, #0
 8010646:	60bb      	str	r3, [r7, #8]
 8010648:	4b18      	ldr	r3, [pc, #96]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 801064a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801064c:	4a17      	ldr	r2, [pc, #92]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 801064e:	f043 0302 	orr.w	r3, r3, #2
 8010652:	6313      	str	r3, [r2, #48]	@ 0x30
 8010654:	4b15      	ldr	r3, [pc, #84]	@ (80106ac <HAL_SPI_MspInit+0x1bc>)
 8010656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010658:	f003 0302 	and.w	r3, r3, #2
 801065c:	60bb      	str	r3, [r7, #8]
 801065e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RF_MOSI_Pin;
 8010660:	2301      	movs	r3, #1
 8010662:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010664:	2302      	movs	r3, #2
 8010666:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010668:	2300      	movs	r3, #0
 801066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801066c:	2303      	movs	r3, #3
 801066e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8010670:	2307      	movs	r3, #7
 8010672:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RF_MOSI_GPIO_Port, &GPIO_InitStruct);
 8010674:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010678:	4619      	mov	r1, r3
 801067a:	4810      	ldr	r0, [pc, #64]	@ (80106bc <HAL_SPI_MspInit+0x1cc>)
 801067c:	f000 fd60 	bl	8011140 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MISO_Pin;
 8010680:	2318      	movs	r3, #24
 8010682:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010684:	2302      	movs	r3, #2
 8010686:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010688:	2300      	movs	r3, #0
 801068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801068c:	2303      	movs	r3, #3
 801068e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010690:	2306      	movs	r3, #6
 8010692:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010698:	4619      	mov	r1, r3
 801069a:	4808      	ldr	r0, [pc, #32]	@ (80106bc <HAL_SPI_MspInit+0x1cc>)
 801069c:	f000 fd50 	bl	8011140 <HAL_GPIO_Init>
}
 80106a0:	bf00      	nop
 80106a2:	3738      	adds	r7, #56	@ 0x38
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}
 80106a8:	40013000 	.word	0x40013000
 80106ac:	40023800 	.word	0x40023800
 80106b0:	40020000 	.word	0x40020000
 80106b4:	40003800 	.word	0x40003800
 80106b8:	40020800 	.word	0x40020800
 80106bc:	40020400 	.word	0x40020400
 80106c0:	40003c00 	.word	0x40003c00

080106c4 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b082      	sub	sp, #8
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	4a1c      	ldr	r2, [pc, #112]	@ (8010744 <HAL_SPI_MspDeInit+0x80>)
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d10a      	bne.n	80106ec <HAL_SPI_MspDeInit+0x28>
  {
    /* USER CODE BEGIN SPI1_MspDeInit 0 */

    /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80106d6:	4b1c      	ldr	r3, [pc, #112]	@ (8010748 <HAL_SPI_MspDeInit+0x84>)
 80106d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106da:	4a1b      	ldr	r2, [pc, #108]	@ (8010748 <HAL_SPI_MspDeInit+0x84>)
 80106dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80106e0:	6453      	str	r3, [r2, #68]	@ 0x44

    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 80106e2:	21a0      	movs	r1, #160	@ 0xa0
 80106e4:	4819      	ldr	r0, [pc, #100]	@ (801074c <HAL_SPI_MspDeInit+0x88>)
 80106e6:	f000 febf 	bl	8011468 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN SPI3_MspDeInit 1 */

    /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80106ea:	e026      	b.n	801073a <HAL_SPI_MspDeInit+0x76>
  else if(hspi->Instance==SPI2)
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	4a17      	ldr	r2, [pc, #92]	@ (8010750 <HAL_SPI_MspDeInit+0x8c>)
 80106f2:	4293      	cmp	r3, r2
 80106f4:	d112      	bne.n	801071c <HAL_SPI_MspDeInit+0x58>
    __HAL_RCC_SPI2_CLK_DISABLE();
 80106f6:	4b14      	ldr	r3, [pc, #80]	@ (8010748 <HAL_SPI_MspDeInit+0x84>)
 80106f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80106fa:	4a13      	ldr	r2, [pc, #76]	@ (8010748 <HAL_SPI_MspDeInit+0x84>)
 80106fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010700:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1);
 8010702:	2102      	movs	r1, #2
 8010704:	4813      	ldr	r0, [pc, #76]	@ (8010754 <HAL_SPI_MspDeInit+0x90>)
 8010706:	f000 feaf 	bl	8011468 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13);
 801070a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801070e:	4812      	ldr	r0, [pc, #72]	@ (8010758 <HAL_SPI_MspDeInit+0x94>)
 8010710:	f000 feaa 	bl	8011468 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8010714:	2024      	movs	r0, #36	@ 0x24
 8010716:	f000 fc73 	bl	8011000 <HAL_NVIC_DisableIRQ>
}
 801071a:	e00e      	b.n	801073a <HAL_SPI_MspDeInit+0x76>
  else if(hspi->Instance==SPI3)
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	4a0e      	ldr	r2, [pc, #56]	@ (801075c <HAL_SPI_MspDeInit+0x98>)
 8010722:	4293      	cmp	r3, r2
 8010724:	d109      	bne.n	801073a <HAL_SPI_MspDeInit+0x76>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8010726:	4b08      	ldr	r3, [pc, #32]	@ (8010748 <HAL_SPI_MspDeInit+0x84>)
 8010728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801072a:	4a07      	ldr	r2, [pc, #28]	@ (8010748 <HAL_SPI_MspDeInit+0x84>)
 801072c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010730:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, RF_MOSI_Pin|RF_SCK_Pin|RF_MISO_Pin);
 8010732:	2119      	movs	r1, #25
 8010734:	4808      	ldr	r0, [pc, #32]	@ (8010758 <HAL_SPI_MspDeInit+0x94>)
 8010736:	f000 fe97 	bl	8011468 <HAL_GPIO_DeInit>
}
 801073a:	bf00      	nop
 801073c:	3708      	adds	r7, #8
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop
 8010744:	40013000 	.word	0x40013000
 8010748:	40023800 	.word	0x40023800
 801074c:	40020000 	.word	0x40020000
 8010750:	40003800 	.word	0x40003800
 8010754:	40020800 	.word	0x40020800
 8010758:	40020400 	.word	0x40020400
 801075c:	40003c00 	.word	0x40003c00

08010760 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b08e      	sub	sp, #56	@ 0x38
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801076c:	2200      	movs	r2, #0
 801076e:	601a      	str	r2, [r3, #0]
 8010770:	605a      	str	r2, [r3, #4]
 8010772:	609a      	str	r2, [r3, #8]
 8010774:	60da      	str	r2, [r3, #12]
 8010776:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	4a63      	ldr	r2, [pc, #396]	@ (801090c <HAL_UART_MspInit+0x1ac>)
 801077e:	4293      	cmp	r3, r2
 8010780:	d135      	bne.n	80107ee <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8010782:	2300      	movs	r3, #0
 8010784:	623b      	str	r3, [r7, #32]
 8010786:	4b62      	ldr	r3, [pc, #392]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 8010788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801078a:	4a61      	ldr	r2, [pc, #388]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 801078c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010790:	6413      	str	r3, [r2, #64]	@ 0x40
 8010792:	4b5f      	ldr	r3, [pc, #380]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 8010794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010796:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801079a:	623b      	str	r3, [r7, #32]
 801079c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801079e:	2300      	movs	r3, #0
 80107a0:	61fb      	str	r3, [r7, #28]
 80107a2:	4b5b      	ldr	r3, [pc, #364]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 80107a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107a6:	4a5a      	ldr	r2, [pc, #360]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 80107a8:	f043 0304 	orr.w	r3, r3, #4
 80107ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80107ae:	4b58      	ldr	r3, [pc, #352]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 80107b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107b2:	f003 0304 	and.w	r3, r3, #4
 80107b6:	61fb      	str	r3, [r7, #28]
 80107b8:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80107ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80107be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107c0:	2302      	movs	r3, #2
 80107c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107c4:	2300      	movs	r3, #0
 80107c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80107c8:	2303      	movs	r3, #3
 80107ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80107cc:	2308      	movs	r3, #8
 80107ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80107d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80107d4:	4619      	mov	r1, r3
 80107d6:	484f      	ldr	r0, [pc, #316]	@ (8010914 <HAL_UART_MspInit+0x1b4>)
 80107d8:	f000 fcb2 	bl	8011140 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80107dc:	2200      	movs	r2, #0
 80107de:	2100      	movs	r1, #0
 80107e0:	2034      	movs	r0, #52	@ 0x34
 80107e2:	f000 fbe3 	bl	8010fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80107e6:	2034      	movs	r0, #52	@ 0x34
 80107e8:	f000 fbfc 	bl	8010fe4 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80107ec:	e089      	b.n	8010902 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART2)
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	4a49      	ldr	r2, [pc, #292]	@ (8010918 <HAL_UART_MspInit+0x1b8>)
 80107f4:	4293      	cmp	r3, r2
 80107f6:	d12c      	bne.n	8010852 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80107f8:	2300      	movs	r3, #0
 80107fa:	61bb      	str	r3, [r7, #24]
 80107fc:	4b44      	ldr	r3, [pc, #272]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 80107fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010800:	4a43      	ldr	r2, [pc, #268]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 8010802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010806:	6413      	str	r3, [r2, #64]	@ 0x40
 8010808:	4b41      	ldr	r3, [pc, #260]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 801080a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801080c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010810:	61bb      	str	r3, [r7, #24]
 8010812:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010814:	2300      	movs	r3, #0
 8010816:	617b      	str	r3, [r7, #20]
 8010818:	4b3d      	ldr	r3, [pc, #244]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 801081a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801081c:	4a3c      	ldr	r2, [pc, #240]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 801081e:	f043 0301 	orr.w	r3, r3, #1
 8010822:	6313      	str	r3, [r2, #48]	@ 0x30
 8010824:	4b3a      	ldr	r3, [pc, #232]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 8010826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010828:	f003 0301 	and.w	r3, r3, #1
 801082c:	617b      	str	r3, [r7, #20]
 801082e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8010830:	230c      	movs	r3, #12
 8010832:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010834:	2302      	movs	r3, #2
 8010836:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010838:	2300      	movs	r3, #0
 801083a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801083c:	2303      	movs	r3, #3
 801083e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8010840:	2307      	movs	r3, #7
 8010842:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010848:	4619      	mov	r1, r3
 801084a:	4834      	ldr	r0, [pc, #208]	@ (801091c <HAL_UART_MspInit+0x1bc>)
 801084c:	f000 fc78 	bl	8011140 <HAL_GPIO_Init>
}
 8010850:	e057      	b.n	8010902 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	4a32      	ldr	r2, [pc, #200]	@ (8010920 <HAL_UART_MspInit+0x1c0>)
 8010858:	4293      	cmp	r3, r2
 801085a:	d152      	bne.n	8010902 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART3_CLK_ENABLE();
 801085c:	2300      	movs	r3, #0
 801085e:	613b      	str	r3, [r7, #16]
 8010860:	4b2b      	ldr	r3, [pc, #172]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 8010862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010864:	4a2a      	ldr	r2, [pc, #168]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 8010866:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801086a:	6413      	str	r3, [r2, #64]	@ 0x40
 801086c:	4b28      	ldr	r3, [pc, #160]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 801086e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010870:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010874:	613b      	str	r3, [r7, #16]
 8010876:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010878:	2300      	movs	r3, #0
 801087a:	60fb      	str	r3, [r7, #12]
 801087c:	4b24      	ldr	r3, [pc, #144]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 801087e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010880:	4a23      	ldr	r2, [pc, #140]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 8010882:	f043 0304 	orr.w	r3, r3, #4
 8010886:	6313      	str	r3, [r2, #48]	@ 0x30
 8010888:	4b21      	ldr	r3, [pc, #132]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 801088a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801088c:	f003 0304 	and.w	r3, r3, #4
 8010890:	60fb      	str	r3, [r7, #12]
 8010892:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010894:	2300      	movs	r3, #0
 8010896:	60bb      	str	r3, [r7, #8]
 8010898:	4b1d      	ldr	r3, [pc, #116]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 801089a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801089c:	4a1c      	ldr	r2, [pc, #112]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 801089e:	f043 0302 	orr.w	r3, r3, #2
 80108a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80108a4:	4b1a      	ldr	r3, [pc, #104]	@ (8010910 <HAL_UART_MspInit+0x1b0>)
 80108a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108a8:	f003 0302 	and.w	r3, r3, #2
 80108ac:	60bb      	str	r3, [r7, #8]
 80108ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80108b0:	2320      	movs	r3, #32
 80108b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108b4:	2302      	movs	r3, #2
 80108b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108b8:	2300      	movs	r3, #0
 80108ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80108bc:	2303      	movs	r3, #3
 80108be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80108c0:	2307      	movs	r3, #7
 80108c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80108c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80108c8:	4619      	mov	r1, r3
 80108ca:	4812      	ldr	r0, [pc, #72]	@ (8010914 <HAL_UART_MspInit+0x1b4>)
 80108cc:	f000 fc38 	bl	8011140 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80108d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80108d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108d6:	2302      	movs	r3, #2
 80108d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108da:	2300      	movs	r3, #0
 80108dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80108de:	2303      	movs	r3, #3
 80108e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80108e2:	2307      	movs	r3, #7
 80108e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80108e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80108ea:	4619      	mov	r1, r3
 80108ec:	480d      	ldr	r0, [pc, #52]	@ (8010924 <HAL_UART_MspInit+0x1c4>)
 80108ee:	f000 fc27 	bl	8011140 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 80108f2:	2200      	movs	r2, #0
 80108f4:	2106      	movs	r1, #6
 80108f6:	2027      	movs	r0, #39	@ 0x27
 80108f8:	f000 fb58 	bl	8010fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80108fc:	2027      	movs	r0, #39	@ 0x27
 80108fe:	f000 fb71 	bl	8010fe4 <HAL_NVIC_EnableIRQ>
}
 8010902:	bf00      	nop
 8010904:	3738      	adds	r7, #56	@ 0x38
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
 801090a:	bf00      	nop
 801090c:	40004c00 	.word	0x40004c00
 8010910:	40023800 	.word	0x40023800
 8010914:	40020800 	.word	0x40020800
 8010918:	40004400 	.word	0x40004400
 801091c:	40020000 	.word	0x40020000
 8010920:	40004800 	.word	0x40004800
 8010924:	40020400 	.word	0x40020400

08010928 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	4a1e      	ldr	r2, [pc, #120]	@ (80109b0 <HAL_UART_MspDeInit+0x88>)
 8010936:	4293      	cmp	r3, r2
 8010938:	d10e      	bne.n	8010958 <HAL_UART_MspDeInit+0x30>
  {
    /* USER CODE BEGIN UART4_MspDeInit 0 */

    /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 801093a:	4b1e      	ldr	r3, [pc, #120]	@ (80109b4 <HAL_UART_MspDeInit+0x8c>)
 801093c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801093e:	4a1d      	ldr	r2, [pc, #116]	@ (80109b4 <HAL_UART_MspDeInit+0x8c>)
 8010940:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8010944:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 8010946:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 801094a:	481b      	ldr	r0, [pc, #108]	@ (80109b8 <HAL_UART_MspDeInit+0x90>)
 801094c:	f000 fd8c 	bl	8011468 <HAL_GPIO_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8010950:	2034      	movs	r0, #52	@ 0x34
 8010952:	f000 fb55 	bl	8011000 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART3_MspDeInit 1 */

    /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8010956:	e026      	b.n	80109a6 <HAL_UART_MspDeInit+0x7e>
  else if(huart->Instance==USART2)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	4a17      	ldr	r2, [pc, #92]	@ (80109bc <HAL_UART_MspDeInit+0x94>)
 801095e:	4293      	cmp	r3, r2
 8010960:	d10a      	bne.n	8010978 <HAL_UART_MspDeInit+0x50>
    __HAL_RCC_USART2_CLK_DISABLE();
 8010962:	4b14      	ldr	r3, [pc, #80]	@ (80109b4 <HAL_UART_MspDeInit+0x8c>)
 8010964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010966:	4a13      	ldr	r2, [pc, #76]	@ (80109b4 <HAL_UART_MspDeInit+0x8c>)
 8010968:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801096c:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 801096e:	210c      	movs	r1, #12
 8010970:	4813      	ldr	r0, [pc, #76]	@ (80109c0 <HAL_UART_MspDeInit+0x98>)
 8010972:	f000 fd79 	bl	8011468 <HAL_GPIO_DeInit>
}
 8010976:	e016      	b.n	80109a6 <HAL_UART_MspDeInit+0x7e>
  else if(huart->Instance==USART3)
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	4a11      	ldr	r2, [pc, #68]	@ (80109c4 <HAL_UART_MspDeInit+0x9c>)
 801097e:	4293      	cmp	r3, r2
 8010980:	d111      	bne.n	80109a6 <HAL_UART_MspDeInit+0x7e>
    __HAL_RCC_USART3_CLK_DISABLE();
 8010982:	4b0c      	ldr	r3, [pc, #48]	@ (80109b4 <HAL_UART_MspDeInit+0x8c>)
 8010984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010986:	4a0b      	ldr	r2, [pc, #44]	@ (80109b4 <HAL_UART_MspDeInit+0x8c>)
 8010988:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801098c:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_5);
 801098e:	2120      	movs	r1, #32
 8010990:	4809      	ldr	r0, [pc, #36]	@ (80109b8 <HAL_UART_MspDeInit+0x90>)
 8010992:	f000 fd69 	bl	8011468 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8010996:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801099a:	480b      	ldr	r0, [pc, #44]	@ (80109c8 <HAL_UART_MspDeInit+0xa0>)
 801099c:	f000 fd64 	bl	8011468 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 80109a0:	2027      	movs	r0, #39	@ 0x27
 80109a2:	f000 fb2d 	bl	8011000 <HAL_NVIC_DisableIRQ>
}
 80109a6:	bf00      	nop
 80109a8:	3708      	adds	r7, #8
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	40004c00 	.word	0x40004c00
 80109b4:	40023800 	.word	0x40023800
 80109b8:	40020800 	.word	0x40020800
 80109bc:	40004400 	.word	0x40004400
 80109c0:	40020000 	.word	0x40020000
 80109c4:	40004800 	.word	0x40004800
 80109c8:	40020400 	.word	0x40020400

080109cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b08c      	sub	sp, #48	@ 0x30
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80109d4:	2300      	movs	r3, #0
 80109d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80109d8:	2300      	movs	r3, #0
 80109da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80109dc:	2300      	movs	r3, #0
 80109de:	60bb      	str	r3, [r7, #8]
 80109e0:	4b2f      	ldr	r3, [pc, #188]	@ (8010aa0 <HAL_InitTick+0xd4>)
 80109e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109e4:	4a2e      	ldr	r2, [pc, #184]	@ (8010aa0 <HAL_InitTick+0xd4>)
 80109e6:	f043 0301 	orr.w	r3, r3, #1
 80109ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80109ec:	4b2c      	ldr	r3, [pc, #176]	@ (8010aa0 <HAL_InitTick+0xd4>)
 80109ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109f0:	f003 0301 	and.w	r3, r3, #1
 80109f4:	60bb      	str	r3, [r7, #8]
 80109f6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80109f8:	f107 020c 	add.w	r2, r7, #12
 80109fc:	f107 0310 	add.w	r3, r7, #16
 8010a00:	4611      	mov	r1, r2
 8010a02:	4618      	mov	r0, r3
 8010a04:	f001 f812 	bl	8011a2c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8010a08:	f000 fffc 	bl	8011a04 <HAL_RCC_GetPCLK2Freq>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	005b      	lsls	r3, r3, #1
 8010a10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8010a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a14:	4a23      	ldr	r2, [pc, #140]	@ (8010aa4 <HAL_InitTick+0xd8>)
 8010a16:	fba2 2303 	umull	r2, r3, r2, r3
 8010a1a:	0c9b      	lsrs	r3, r3, #18
 8010a1c:	3b01      	subs	r3, #1
 8010a1e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8010a20:	4b21      	ldr	r3, [pc, #132]	@ (8010aa8 <HAL_InitTick+0xdc>)
 8010a22:	4a22      	ldr	r2, [pc, #136]	@ (8010aac <HAL_InitTick+0xe0>)
 8010a24:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8010a26:	4b20      	ldr	r3, [pc, #128]	@ (8010aa8 <HAL_InitTick+0xdc>)
 8010a28:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8010a2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8010a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8010aa8 <HAL_InitTick+0xdc>)
 8010a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8010a34:	4b1c      	ldr	r3, [pc, #112]	@ (8010aa8 <HAL_InitTick+0xdc>)
 8010a36:	2200      	movs	r2, #0
 8010a38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8010aa8 <HAL_InitTick+0xdc>)
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010a40:	4b19      	ldr	r3, [pc, #100]	@ (8010aa8 <HAL_InitTick+0xdc>)
 8010a42:	2200      	movs	r2, #0
 8010a44:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8010a46:	4818      	ldr	r0, [pc, #96]	@ (8010aa8 <HAL_InitTick+0xdc>)
 8010a48:	f002 fe6f 	bl	801372a <HAL_TIM_Base_Init>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8010a52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d11b      	bne.n	8010a92 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8010a5a:	4813      	ldr	r0, [pc, #76]	@ (8010aa8 <HAL_InitTick+0xdc>)
 8010a5c:	f002 febe 	bl	80137dc <HAL_TIM_Base_Start_IT>
 8010a60:	4603      	mov	r3, r0
 8010a62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8010a66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d111      	bne.n	8010a92 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8010a6e:	2019      	movs	r0, #25
 8010a70:	f000 fab8 	bl	8010fe4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2b0f      	cmp	r3, #15
 8010a78:	d808      	bhi.n	8010a8c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	6879      	ldr	r1, [r7, #4]
 8010a7e:	2019      	movs	r0, #25
 8010a80:	f000 fa94 	bl	8010fac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8010a84:	4a0a      	ldr	r2, [pc, #40]	@ (8010ab0 <HAL_InitTick+0xe4>)
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6013      	str	r3, [r2, #0]
 8010a8a:	e002      	b.n	8010a92 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8010a92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	3730      	adds	r7, #48	@ 0x30
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}
 8010a9e:	bf00      	nop
 8010aa0:	40023800 	.word	0x40023800
 8010aa4:	431bde83 	.word	0x431bde83
 8010aa8:	2000150c 	.word	0x2000150c
 8010aac:	40010000 	.word	0x40010000
 8010ab0:	20000090 	.word	0x20000090

08010ab4 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8010ab4:	b480      	push	{r7}
 8010ab6:	af00      	add	r7, sp, #0
  /* Disable TIM1 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);
 8010ab8:	4b06      	ldr	r3, [pc, #24]	@ (8010ad4 <HAL_SuspendTick+0x20>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	68da      	ldr	r2, [r3, #12]
 8010abe:	4b05      	ldr	r3, [pc, #20]	@ (8010ad4 <HAL_SuspendTick+0x20>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	f022 0201 	bic.w	r2, r2, #1
 8010ac6:	60da      	str	r2, [r3, #12]
}
 8010ac8:	bf00      	nop
 8010aca:	46bd      	mov	sp, r7
 8010acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad0:	4770      	bx	lr
 8010ad2:	bf00      	nop
 8010ad4:	2000150c 	.word	0x2000150c

08010ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010ad8:	b480      	push	{r7}
 8010ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8010adc:	bf00      	nop
 8010ade:	e7fd      	b.n	8010adc <NMI_Handler+0x4>

08010ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010ae0:	b480      	push	{r7}
 8010ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010ae4:	bf00      	nop
 8010ae6:	e7fd      	b.n	8010ae4 <HardFault_Handler+0x4>

08010ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010aec:	bf00      	nop
 8010aee:	e7fd      	b.n	8010aec <MemManage_Handler+0x4>

08010af0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010af0:	b480      	push	{r7}
 8010af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010af4:	bf00      	nop
 8010af6:	e7fd      	b.n	8010af4 <BusFault_Handler+0x4>

08010af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010af8:	b480      	push	{r7}
 8010afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010afc:	bf00      	nop
 8010afe:	e7fd      	b.n	8010afc <UsageFault_Handler+0x4>

08010b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010b00:	b480      	push	{r7}
 8010b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010b04:	bf00      	nop
 8010b06:	46bd      	mov	sp, r7
 8010b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0c:	4770      	bx	lr

08010b0e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8010b0e:	b580      	push	{r7, lr}
 8010b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8010b12:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010b16:	f000 fde7 	bl	80116e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8010b1a:	bf00      	nop
 8010b1c:	bd80      	pop	{r7, pc}
	...

08010b20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8010b24:	4802      	ldr	r0, [pc, #8]	@ (8010b30 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8010b26:	f002 fec9 	bl	80138bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8010b2a:	bf00      	nop
 8010b2c:	bd80      	pop	{r7, pc}
 8010b2e:	bf00      	nop
 8010b30:	2000150c 	.word	0x2000150c

08010b34 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8010b38:	4802      	ldr	r0, [pc, #8]	@ (8010b44 <SPI2_IRQHandler+0x10>)
 8010b3a:	f002 f9cf 	bl	8012edc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8010b3e:	bf00      	nop
 8010b40:	bd80      	pop	{r7, pc}
 8010b42:	bf00      	nop
 8010b44:	20001384 	.word	0x20001384

08010b48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8010b4c:	4802      	ldr	r0, [pc, #8]	@ (8010b58 <USART3_IRQHandler+0x10>)
 8010b4e:	f003 f9ef 	bl	8013f30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8010b52:	bf00      	nop
 8010b54:	bd80      	pop	{r7, pc}
 8010b56:	bf00      	nop
 8010b58:	200014c4 	.word	0x200014c4

08010b5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8010b60:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8010b64:	f000 fdc0 	bl	80116e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8010b68:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8010b6c:	f000 fdbc 	bl	80116e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8010b70:	bf00      	nop
 8010b72:	bd80      	pop	{r7, pc}

08010b74 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8010b78:	4802      	ldr	r0, [pc, #8]	@ (8010b84 <UART4_IRQHandler+0x10>)
 8010b7a:	f003 f9d9 	bl	8013f30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8010b7e:	bf00      	nop
 8010b80:	bd80      	pop	{r7, pc}
 8010b82:	bf00      	nop
 8010b84:	20001434 	.word	0x20001434

08010b88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	af00      	add	r7, sp, #0
  return 1;
 8010b8c:	2301      	movs	r3, #1
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr

08010b98 <_kill>:

int _kill(int pid, int sig)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b082      	sub	sp, #8
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8010ba2:	f009 f87b 	bl	8019c9c <__errno>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	2216      	movs	r2, #22
 8010baa:	601a      	str	r2, [r3, #0]
  return -1;
 8010bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3708      	adds	r7, #8
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}

08010bb8 <_exit>:

void _exit (int status)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8010bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f7ff ffe7 	bl	8010b98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8010bca:	bf00      	nop
 8010bcc:	e7fd      	b.n	8010bca <_exit+0x12>

08010bce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010bce:	b580      	push	{r7, lr}
 8010bd0:	b086      	sub	sp, #24
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	60f8      	str	r0, [r7, #12]
 8010bd6:	60b9      	str	r1, [r7, #8]
 8010bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010bda:	2300      	movs	r3, #0
 8010bdc:	617b      	str	r3, [r7, #20]
 8010bde:	e00a      	b.n	8010bf6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8010be0:	f3af 8000 	nop.w
 8010be4:	4601      	mov	r1, r0
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	1c5a      	adds	r2, r3, #1
 8010bea:	60ba      	str	r2, [r7, #8]
 8010bec:	b2ca      	uxtb	r2, r1
 8010bee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	3301      	adds	r3, #1
 8010bf4:	617b      	str	r3, [r7, #20]
 8010bf6:	697a      	ldr	r2, [r7, #20]
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	dbf0      	blt.n	8010be0 <_read+0x12>
  }

  return len;
 8010bfe:	687b      	ldr	r3, [r7, #4]
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3718      	adds	r7, #24
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b086      	sub	sp, #24
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	60b9      	str	r1, [r7, #8]
 8010c12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010c14:	2300      	movs	r3, #0
 8010c16:	617b      	str	r3, [r7, #20]
 8010c18:	e009      	b.n	8010c2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	1c5a      	adds	r2, r3, #1
 8010c1e:	60ba      	str	r2, [r7, #8]
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	4618      	mov	r0, r3
 8010c24:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	617b      	str	r3, [r7, #20]
 8010c2e:	697a      	ldr	r2, [r7, #20]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	429a      	cmp	r2, r3
 8010c34:	dbf1      	blt.n	8010c1a <_write+0x12>
  }
  return len;
 8010c36:	687b      	ldr	r3, [r7, #4]
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3718      	adds	r7, #24
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}

08010c40 <_close>:

int _close(int file)
{
 8010c40:	b480      	push	{r7}
 8010c42:	b083      	sub	sp, #12
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8010c48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	370c      	adds	r7, #12
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr

08010c58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010c58:	b480      	push	{r7}
 8010c5a:	b083      	sub	sp, #12
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8010c68:	605a      	str	r2, [r3, #4]
  return 0;
 8010c6a:	2300      	movs	r3, #0
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	370c      	adds	r7, #12
 8010c70:	46bd      	mov	sp, r7
 8010c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c76:	4770      	bx	lr

08010c78 <_isatty>:

int _isatty(int file)
{
 8010c78:	b480      	push	{r7}
 8010c7a:	b083      	sub	sp, #12
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8010c80:	2301      	movs	r3, #1
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	370c      	adds	r7, #12
 8010c86:	46bd      	mov	sp, r7
 8010c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8c:	4770      	bx	lr

08010c8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010c8e:	b480      	push	{r7}
 8010c90:	b085      	sub	sp, #20
 8010c92:	af00      	add	r7, sp, #0
 8010c94:	60f8      	str	r0, [r7, #12]
 8010c96:	60b9      	str	r1, [r7, #8]
 8010c98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8010c9a:	2300      	movs	r3, #0
}
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	3714      	adds	r7, #20
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca6:	4770      	bx	lr

08010ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010ca8:	b480      	push	{r7}
 8010caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010cac:	4b07      	ldr	r3, [pc, #28]	@ (8010ccc <SystemInit+0x24>)
 8010cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010cb2:	4a06      	ldr	r2, [pc, #24]	@ (8010ccc <SystemInit+0x24>)
 8010cb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010cb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8010cbc:	4b03      	ldr	r3, [pc, #12]	@ (8010ccc <SystemInit+0x24>)
 8010cbe:	4a04      	ldr	r2, [pc, #16]	@ (8010cd0 <SystemInit+0x28>)
 8010cc0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8010cc2:	bf00      	nop
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cca:	4770      	bx	lr
 8010ccc:	e000ed00 	.word	0xe000ed00
 8010cd0:	08008000 	.word	0x08008000

08010cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8010cd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8010d0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8010cd8:	f7ff ffe6 	bl	8010ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8010cdc:	480c      	ldr	r0, [pc, #48]	@ (8010d10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8010cde:	490d      	ldr	r1, [pc, #52]	@ (8010d14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8010ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8010d18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8010ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010ce4:	e002      	b.n	8010cec <LoopCopyDataInit>

08010ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010cea:	3304      	adds	r3, #4

08010cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010cf0:	d3f9      	bcc.n	8010ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8010d1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8010cf4:	4c0a      	ldr	r4, [pc, #40]	@ (8010d20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8010cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010cf8:	e001      	b.n	8010cfe <LoopFillZerobss>

08010cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010cfc:	3204      	adds	r2, #4

08010cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010d00:	d3fb      	bcc.n	8010cfa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8010d02:	f008 ffd1 	bl	8019ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010d06:	f7ff f931 	bl	800ff6c <main>
  bx  lr    
 8010d0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010d0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8010d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010d14:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8010d18:	0801f6d0 	.word	0x0801f6d0
  ldr r2, =_sbss
 8010d1c:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8010d20:	20014450 	.word	0x20014450

08010d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010d24:	e7fe      	b.n	8010d24 <ADC_IRQHandler>
	...

08010d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8010d68 <HAL_Init+0x40>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	4a0d      	ldr	r2, [pc, #52]	@ (8010d68 <HAL_Init+0x40>)
 8010d32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010d38:	4b0b      	ldr	r3, [pc, #44]	@ (8010d68 <HAL_Init+0x40>)
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8010d68 <HAL_Init+0x40>)
 8010d3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8010d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010d44:	4b08      	ldr	r3, [pc, #32]	@ (8010d68 <HAL_Init+0x40>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	4a07      	ldr	r2, [pc, #28]	@ (8010d68 <HAL_Init+0x40>)
 8010d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010d50:	2003      	movs	r0, #3
 8010d52:	f000 f920 	bl	8010f96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010d56:	200f      	movs	r0, #15
 8010d58:	f7ff fe38 	bl	80109cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010d5c:	f7ff fba0 	bl	80104a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010d60:	2300      	movs	r3, #0
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	40023c00 	.word	0x40023c00

08010d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010d70:	4b06      	ldr	r3, [pc, #24]	@ (8010d8c <HAL_IncTick+0x20>)
 8010d72:	781b      	ldrb	r3, [r3, #0]
 8010d74:	461a      	mov	r2, r3
 8010d76:	4b06      	ldr	r3, [pc, #24]	@ (8010d90 <HAL_IncTick+0x24>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	4413      	add	r3, r2
 8010d7c:	4a04      	ldr	r2, [pc, #16]	@ (8010d90 <HAL_IncTick+0x24>)
 8010d7e:	6013      	str	r3, [r2, #0]
}
 8010d80:	bf00      	nop
 8010d82:	46bd      	mov	sp, r7
 8010d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d88:	4770      	bx	lr
 8010d8a:	bf00      	nop
 8010d8c:	20000094 	.word	0x20000094
 8010d90:	20001554 	.word	0x20001554

08010d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010d94:	b480      	push	{r7}
 8010d96:	af00      	add	r7, sp, #0
  return uwTick;
 8010d98:	4b03      	ldr	r3, [pc, #12]	@ (8010da8 <HAL_GetTick+0x14>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
}
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da4:	4770      	bx	lr
 8010da6:	bf00      	nop
 8010da8:	20001554 	.word	0x20001554

08010dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b084      	sub	sp, #16
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010db4:	f7ff ffee 	bl	8010d94 <HAL_GetTick>
 8010db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dc4:	d005      	beq.n	8010dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8010df0 <HAL_Delay+0x44>)
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	461a      	mov	r2, r3
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	4413      	add	r3, r2
 8010dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010dd2:	bf00      	nop
 8010dd4:	f7ff ffde 	bl	8010d94 <HAL_GetTick>
 8010dd8:	4602      	mov	r2, r0
 8010dda:	68bb      	ldr	r3, [r7, #8]
 8010ddc:	1ad3      	subs	r3, r2, r3
 8010dde:	68fa      	ldr	r2, [r7, #12]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d8f7      	bhi.n	8010dd4 <HAL_Delay+0x28>
  {
  }
}
 8010de4:	bf00      	nop
 8010de6:	bf00      	nop
 8010de8:	3710      	adds	r7, #16
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	20000094 	.word	0x20000094

08010df4 <__NVIC_SetPriorityGrouping>:
{
 8010df4:	b480      	push	{r7}
 8010df6:	b085      	sub	sp, #20
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f003 0307 	and.w	r3, r3, #7
 8010e02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010e04:	4b0c      	ldr	r3, [pc, #48]	@ (8010e38 <__NVIC_SetPriorityGrouping+0x44>)
 8010e06:	68db      	ldr	r3, [r3, #12]
 8010e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010e0a:	68ba      	ldr	r2, [r7, #8]
 8010e0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8010e10:	4013      	ands	r3, r2
 8010e12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010e1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8010e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010e26:	4a04      	ldr	r2, [pc, #16]	@ (8010e38 <__NVIC_SetPriorityGrouping+0x44>)
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	60d3      	str	r3, [r2, #12]
}
 8010e2c:	bf00      	nop
 8010e2e:	3714      	adds	r7, #20
 8010e30:	46bd      	mov	sp, r7
 8010e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e36:	4770      	bx	lr
 8010e38:	e000ed00 	.word	0xe000ed00

08010e3c <__NVIC_GetPriorityGrouping>:
{
 8010e3c:	b480      	push	{r7}
 8010e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010e40:	4b04      	ldr	r3, [pc, #16]	@ (8010e54 <__NVIC_GetPriorityGrouping+0x18>)
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	0a1b      	lsrs	r3, r3, #8
 8010e46:	f003 0307 	and.w	r3, r3, #7
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr
 8010e54:	e000ed00 	.word	0xe000ed00

08010e58 <__NVIC_EnableIRQ>:
{
 8010e58:	b480      	push	{r7}
 8010e5a:	b083      	sub	sp, #12
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	4603      	mov	r3, r0
 8010e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	db0b      	blt.n	8010e82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010e6a:	79fb      	ldrb	r3, [r7, #7]
 8010e6c:	f003 021f 	and.w	r2, r3, #31
 8010e70:	4907      	ldr	r1, [pc, #28]	@ (8010e90 <__NVIC_EnableIRQ+0x38>)
 8010e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e76:	095b      	lsrs	r3, r3, #5
 8010e78:	2001      	movs	r0, #1
 8010e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8010e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010e82:	bf00      	nop
 8010e84:	370c      	adds	r7, #12
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr
 8010e8e:	bf00      	nop
 8010e90:	e000e100 	.word	0xe000e100

08010e94 <__NVIC_DisableIRQ>:
{
 8010e94:	b480      	push	{r7}
 8010e96:	b083      	sub	sp, #12
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	db12      	blt.n	8010ecc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010ea6:	79fb      	ldrb	r3, [r7, #7]
 8010ea8:	f003 021f 	and.w	r2, r3, #31
 8010eac:	490a      	ldr	r1, [pc, #40]	@ (8010ed8 <__NVIC_DisableIRQ+0x44>)
 8010eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010eb2:	095b      	lsrs	r3, r3, #5
 8010eb4:	2001      	movs	r0, #1
 8010eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8010eba:	3320      	adds	r3, #32
 8010ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010ec0:	f3bf 8f4f 	dsb	sy
}
 8010ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010ec6:	f3bf 8f6f 	isb	sy
}
 8010eca:	bf00      	nop
}
 8010ecc:	bf00      	nop
 8010ece:	370c      	adds	r7, #12
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed6:	4770      	bx	lr
 8010ed8:	e000e100 	.word	0xe000e100

08010edc <__NVIC_SetPriority>:
{
 8010edc:	b480      	push	{r7}
 8010ede:	b083      	sub	sp, #12
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	6039      	str	r1, [r7, #0]
 8010ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	db0a      	blt.n	8010f06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	b2da      	uxtb	r2, r3
 8010ef4:	490c      	ldr	r1, [pc, #48]	@ (8010f28 <__NVIC_SetPriority+0x4c>)
 8010ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010efa:	0112      	lsls	r2, r2, #4
 8010efc:	b2d2      	uxtb	r2, r2
 8010efe:	440b      	add	r3, r1
 8010f00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8010f04:	e00a      	b.n	8010f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	b2da      	uxtb	r2, r3
 8010f0a:	4908      	ldr	r1, [pc, #32]	@ (8010f2c <__NVIC_SetPriority+0x50>)
 8010f0c:	79fb      	ldrb	r3, [r7, #7]
 8010f0e:	f003 030f 	and.w	r3, r3, #15
 8010f12:	3b04      	subs	r3, #4
 8010f14:	0112      	lsls	r2, r2, #4
 8010f16:	b2d2      	uxtb	r2, r2
 8010f18:	440b      	add	r3, r1
 8010f1a:	761a      	strb	r2, [r3, #24]
}
 8010f1c:	bf00      	nop
 8010f1e:	370c      	adds	r7, #12
 8010f20:	46bd      	mov	sp, r7
 8010f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f26:	4770      	bx	lr
 8010f28:	e000e100 	.word	0xe000e100
 8010f2c:	e000ed00 	.word	0xe000ed00

08010f30 <NVIC_EncodePriority>:
{
 8010f30:	b480      	push	{r7}
 8010f32:	b089      	sub	sp, #36	@ 0x24
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	60f8      	str	r0, [r7, #12]
 8010f38:	60b9      	str	r1, [r7, #8]
 8010f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	f003 0307 	and.w	r3, r3, #7
 8010f42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010f44:	69fb      	ldr	r3, [r7, #28]
 8010f46:	f1c3 0307 	rsb	r3, r3, #7
 8010f4a:	2b04      	cmp	r3, #4
 8010f4c:	bf28      	it	cs
 8010f4e:	2304      	movcs	r3, #4
 8010f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	3304      	adds	r3, #4
 8010f56:	2b06      	cmp	r3, #6
 8010f58:	d902      	bls.n	8010f60 <NVIC_EncodePriority+0x30>
 8010f5a:	69fb      	ldr	r3, [r7, #28]
 8010f5c:	3b03      	subs	r3, #3
 8010f5e:	e000      	b.n	8010f62 <NVIC_EncodePriority+0x32>
 8010f60:	2300      	movs	r3, #0
 8010f62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010f64:	f04f 32ff 	mov.w	r2, #4294967295
 8010f68:	69bb      	ldr	r3, [r7, #24]
 8010f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8010f6e:	43da      	mvns	r2, r3
 8010f70:	68bb      	ldr	r3, [r7, #8]
 8010f72:	401a      	ands	r2, r3
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010f78:	f04f 31ff 	mov.w	r1, #4294967295
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8010f82:	43d9      	mvns	r1, r3
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010f88:	4313      	orrs	r3, r2
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3724      	adds	r7, #36	@ 0x24
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f94:	4770      	bx	lr

08010f96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010f96:	b580      	push	{r7, lr}
 8010f98:	b082      	sub	sp, #8
 8010f9a:	af00      	add	r7, sp, #0
 8010f9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010f9e:	6878      	ldr	r0, [r7, #4]
 8010fa0:	f7ff ff28 	bl	8010df4 <__NVIC_SetPriorityGrouping>
}
 8010fa4:	bf00      	nop
 8010fa6:	3708      	adds	r7, #8
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}

08010fac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b086      	sub	sp, #24
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	60b9      	str	r1, [r7, #8]
 8010fb6:	607a      	str	r2, [r7, #4]
 8010fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010fbe:	f7ff ff3d 	bl	8010e3c <__NVIC_GetPriorityGrouping>
 8010fc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	68b9      	ldr	r1, [r7, #8]
 8010fc8:	6978      	ldr	r0, [r7, #20]
 8010fca:	f7ff ffb1 	bl	8010f30 <NVIC_EncodePriority>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fd4:	4611      	mov	r1, r2
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f7ff ff80 	bl	8010edc <__NVIC_SetPriority>
}
 8010fdc:	bf00      	nop
 8010fde:	3718      	adds	r7, #24
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}

08010fe4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b082      	sub	sp, #8
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	4603      	mov	r3, r0
 8010fec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7ff ff30 	bl	8010e58 <__NVIC_EnableIRQ>
}
 8010ff8:	bf00      	nop
 8010ffa:	3708      	adds	r7, #8
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}

08011000 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b082      	sub	sp, #8
 8011004:	af00      	add	r7, sp, #0
 8011006:	4603      	mov	r3, r0
 8011008:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801100e:	4618      	mov	r0, r3
 8011010:	f7ff ff40 	bl	8010e94 <__NVIC_DisableIRQ>
}
 8011014:	bf00      	nop
 8011016:	3708      	adds	r7, #8
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b084      	sub	sp, #16
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011028:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801102a:	f7ff feb3 	bl	8010d94 <HAL_GetTick>
 801102e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8011036:	b2db      	uxtb	r3, r3
 8011038:	2b02      	cmp	r3, #2
 801103a:	d008      	beq.n	801104e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2280      	movs	r2, #128	@ 0x80
 8011040:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2200      	movs	r2, #0
 8011046:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 801104a:	2301      	movs	r3, #1
 801104c:	e052      	b.n	80110f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	681a      	ldr	r2, [r3, #0]
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	f022 0216 	bic.w	r2, r2, #22
 801105c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	695a      	ldr	r2, [r3, #20]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801106c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011072:	2b00      	cmp	r3, #0
 8011074:	d103      	bne.n	801107e <HAL_DMA_Abort+0x62>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801107a:	2b00      	cmp	r3, #0
 801107c:	d007      	beq.n	801108e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	681a      	ldr	r2, [r3, #0]
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	f022 0208 	bic.w	r2, r2, #8
 801108c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	681a      	ldr	r2, [r3, #0]
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	f022 0201 	bic.w	r2, r2, #1
 801109c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801109e:	e013      	b.n	80110c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80110a0:	f7ff fe78 	bl	8010d94 <HAL_GetTick>
 80110a4:	4602      	mov	r2, r0
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	1ad3      	subs	r3, r2, r3
 80110aa:	2b05      	cmp	r3, #5
 80110ac:	d90c      	bls.n	80110c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	2220      	movs	r2, #32
 80110b2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2203      	movs	r2, #3
 80110b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	2200      	movs	r2, #0
 80110c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80110c4:	2303      	movs	r3, #3
 80110c6:	e015      	b.n	80110f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	f003 0301 	and.w	r3, r3, #1
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d1e4      	bne.n	80110a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80110da:	223f      	movs	r2, #63	@ 0x3f
 80110dc:	409a      	lsls	r2, r3
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2201      	movs	r2, #1
 80110e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2200      	movs	r2, #0
 80110ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80110f2:	2300      	movs	r3, #0
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	3710      	adds	r7, #16
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}

080110fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80110fc:	b480      	push	{r7}
 80110fe:	b083      	sub	sp, #12
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801110a:	b2db      	uxtb	r3, r3
 801110c:	2b02      	cmp	r3, #2
 801110e:	d004      	beq.n	801111a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2280      	movs	r2, #128	@ 0x80
 8011114:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8011116:	2301      	movs	r3, #1
 8011118:	e00c      	b.n	8011134 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2205      	movs	r2, #5
 801111e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	681a      	ldr	r2, [r3, #0]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	f022 0201 	bic.w	r2, r2, #1
 8011130:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8011132:	2300      	movs	r3, #0
}
 8011134:	4618      	mov	r0, r3
 8011136:	370c      	adds	r7, #12
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr

08011140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011140:	b480      	push	{r7}
 8011142:	b089      	sub	sp, #36	@ 0x24
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801114a:	2300      	movs	r3, #0
 801114c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801114e:	2300      	movs	r3, #0
 8011150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8011152:	2300      	movs	r3, #0
 8011154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011156:	2300      	movs	r3, #0
 8011158:	61fb      	str	r3, [r7, #28]
 801115a:	e165      	b.n	8011428 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801115c:	2201      	movs	r2, #1
 801115e:	69fb      	ldr	r3, [r7, #28]
 8011160:	fa02 f303 	lsl.w	r3, r2, r3
 8011164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	697a      	ldr	r2, [r7, #20]
 801116c:	4013      	ands	r3, r2
 801116e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011170:	693a      	ldr	r2, [r7, #16]
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	429a      	cmp	r2, r3
 8011176:	f040 8154 	bne.w	8011422 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	f003 0303 	and.w	r3, r3, #3
 8011182:	2b01      	cmp	r3, #1
 8011184:	d005      	beq.n	8011192 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	685b      	ldr	r3, [r3, #4]
 801118a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801118e:	2b02      	cmp	r3, #2
 8011190:	d130      	bne.n	80111f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	689b      	ldr	r3, [r3, #8]
 8011196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011198:	69fb      	ldr	r3, [r7, #28]
 801119a:	005b      	lsls	r3, r3, #1
 801119c:	2203      	movs	r2, #3
 801119e:	fa02 f303 	lsl.w	r3, r2, r3
 80111a2:	43db      	mvns	r3, r3
 80111a4:	69ba      	ldr	r2, [r7, #24]
 80111a6:	4013      	ands	r3, r2
 80111a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	68da      	ldr	r2, [r3, #12]
 80111ae:	69fb      	ldr	r3, [r7, #28]
 80111b0:	005b      	lsls	r3, r3, #1
 80111b2:	fa02 f303 	lsl.w	r3, r2, r3
 80111b6:	69ba      	ldr	r2, [r7, #24]
 80111b8:	4313      	orrs	r3, r2
 80111ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	69ba      	ldr	r2, [r7, #24]
 80111c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80111c8:	2201      	movs	r2, #1
 80111ca:	69fb      	ldr	r3, [r7, #28]
 80111cc:	fa02 f303 	lsl.w	r3, r2, r3
 80111d0:	43db      	mvns	r3, r3
 80111d2:	69ba      	ldr	r2, [r7, #24]
 80111d4:	4013      	ands	r3, r2
 80111d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80111d8:	683b      	ldr	r3, [r7, #0]
 80111da:	685b      	ldr	r3, [r3, #4]
 80111dc:	091b      	lsrs	r3, r3, #4
 80111de:	f003 0201 	and.w	r2, r3, #1
 80111e2:	69fb      	ldr	r3, [r7, #28]
 80111e4:	fa02 f303 	lsl.w	r3, r2, r3
 80111e8:	69ba      	ldr	r2, [r7, #24]
 80111ea:	4313      	orrs	r3, r2
 80111ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	69ba      	ldr	r2, [r7, #24]
 80111f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	685b      	ldr	r3, [r3, #4]
 80111f8:	f003 0303 	and.w	r3, r3, #3
 80111fc:	2b03      	cmp	r3, #3
 80111fe:	d017      	beq.n	8011230 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	68db      	ldr	r3, [r3, #12]
 8011204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8011206:	69fb      	ldr	r3, [r7, #28]
 8011208:	005b      	lsls	r3, r3, #1
 801120a:	2203      	movs	r2, #3
 801120c:	fa02 f303 	lsl.w	r3, r2, r3
 8011210:	43db      	mvns	r3, r3
 8011212:	69ba      	ldr	r2, [r7, #24]
 8011214:	4013      	ands	r3, r2
 8011216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	689a      	ldr	r2, [r3, #8]
 801121c:	69fb      	ldr	r3, [r7, #28]
 801121e:	005b      	lsls	r3, r3, #1
 8011220:	fa02 f303 	lsl.w	r3, r2, r3
 8011224:	69ba      	ldr	r2, [r7, #24]
 8011226:	4313      	orrs	r3, r2
 8011228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	69ba      	ldr	r2, [r7, #24]
 801122e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	685b      	ldr	r3, [r3, #4]
 8011234:	f003 0303 	and.w	r3, r3, #3
 8011238:	2b02      	cmp	r3, #2
 801123a:	d123      	bne.n	8011284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801123c:	69fb      	ldr	r3, [r7, #28]
 801123e:	08da      	lsrs	r2, r3, #3
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	3208      	adds	r2, #8
 8011244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801124a:	69fb      	ldr	r3, [r7, #28]
 801124c:	f003 0307 	and.w	r3, r3, #7
 8011250:	009b      	lsls	r3, r3, #2
 8011252:	220f      	movs	r2, #15
 8011254:	fa02 f303 	lsl.w	r3, r2, r3
 8011258:	43db      	mvns	r3, r3
 801125a:	69ba      	ldr	r2, [r7, #24]
 801125c:	4013      	ands	r3, r2
 801125e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	691a      	ldr	r2, [r3, #16]
 8011264:	69fb      	ldr	r3, [r7, #28]
 8011266:	f003 0307 	and.w	r3, r3, #7
 801126a:	009b      	lsls	r3, r3, #2
 801126c:	fa02 f303 	lsl.w	r3, r2, r3
 8011270:	69ba      	ldr	r2, [r7, #24]
 8011272:	4313      	orrs	r3, r2
 8011274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011276:	69fb      	ldr	r3, [r7, #28]
 8011278:	08da      	lsrs	r2, r3, #3
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	3208      	adds	r2, #8
 801127e:	69b9      	ldr	r1, [r7, #24]
 8011280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801128a:	69fb      	ldr	r3, [r7, #28]
 801128c:	005b      	lsls	r3, r3, #1
 801128e:	2203      	movs	r2, #3
 8011290:	fa02 f303 	lsl.w	r3, r2, r3
 8011294:	43db      	mvns	r3, r3
 8011296:	69ba      	ldr	r2, [r7, #24]
 8011298:	4013      	ands	r3, r2
 801129a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	685b      	ldr	r3, [r3, #4]
 80112a0:	f003 0203 	and.w	r2, r3, #3
 80112a4:	69fb      	ldr	r3, [r7, #28]
 80112a6:	005b      	lsls	r3, r3, #1
 80112a8:	fa02 f303 	lsl.w	r3, r2, r3
 80112ac:	69ba      	ldr	r2, [r7, #24]
 80112ae:	4313      	orrs	r3, r2
 80112b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	69ba      	ldr	r2, [r7, #24]
 80112b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	f000 80ae 	beq.w	8011422 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80112c6:	2300      	movs	r3, #0
 80112c8:	60fb      	str	r3, [r7, #12]
 80112ca:	4b5d      	ldr	r3, [pc, #372]	@ (8011440 <HAL_GPIO_Init+0x300>)
 80112cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80112ce:	4a5c      	ldr	r2, [pc, #368]	@ (8011440 <HAL_GPIO_Init+0x300>)
 80112d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80112d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80112d6:	4b5a      	ldr	r3, [pc, #360]	@ (8011440 <HAL_GPIO_Init+0x300>)
 80112d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80112da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80112de:	60fb      	str	r3, [r7, #12]
 80112e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80112e2:	4a58      	ldr	r2, [pc, #352]	@ (8011444 <HAL_GPIO_Init+0x304>)
 80112e4:	69fb      	ldr	r3, [r7, #28]
 80112e6:	089b      	lsrs	r3, r3, #2
 80112e8:	3302      	adds	r3, #2
 80112ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80112f0:	69fb      	ldr	r3, [r7, #28]
 80112f2:	f003 0303 	and.w	r3, r3, #3
 80112f6:	009b      	lsls	r3, r3, #2
 80112f8:	220f      	movs	r2, #15
 80112fa:	fa02 f303 	lsl.w	r3, r2, r3
 80112fe:	43db      	mvns	r3, r3
 8011300:	69ba      	ldr	r2, [r7, #24]
 8011302:	4013      	ands	r3, r2
 8011304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	4a4f      	ldr	r2, [pc, #316]	@ (8011448 <HAL_GPIO_Init+0x308>)
 801130a:	4293      	cmp	r3, r2
 801130c:	d025      	beq.n	801135a <HAL_GPIO_Init+0x21a>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	4a4e      	ldr	r2, [pc, #312]	@ (801144c <HAL_GPIO_Init+0x30c>)
 8011312:	4293      	cmp	r3, r2
 8011314:	d01f      	beq.n	8011356 <HAL_GPIO_Init+0x216>
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	4a4d      	ldr	r2, [pc, #308]	@ (8011450 <HAL_GPIO_Init+0x310>)
 801131a:	4293      	cmp	r3, r2
 801131c:	d019      	beq.n	8011352 <HAL_GPIO_Init+0x212>
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	4a4c      	ldr	r2, [pc, #304]	@ (8011454 <HAL_GPIO_Init+0x314>)
 8011322:	4293      	cmp	r3, r2
 8011324:	d013      	beq.n	801134e <HAL_GPIO_Init+0x20e>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	4a4b      	ldr	r2, [pc, #300]	@ (8011458 <HAL_GPIO_Init+0x318>)
 801132a:	4293      	cmp	r3, r2
 801132c:	d00d      	beq.n	801134a <HAL_GPIO_Init+0x20a>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	4a4a      	ldr	r2, [pc, #296]	@ (801145c <HAL_GPIO_Init+0x31c>)
 8011332:	4293      	cmp	r3, r2
 8011334:	d007      	beq.n	8011346 <HAL_GPIO_Init+0x206>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	4a49      	ldr	r2, [pc, #292]	@ (8011460 <HAL_GPIO_Init+0x320>)
 801133a:	4293      	cmp	r3, r2
 801133c:	d101      	bne.n	8011342 <HAL_GPIO_Init+0x202>
 801133e:	2306      	movs	r3, #6
 8011340:	e00c      	b.n	801135c <HAL_GPIO_Init+0x21c>
 8011342:	2307      	movs	r3, #7
 8011344:	e00a      	b.n	801135c <HAL_GPIO_Init+0x21c>
 8011346:	2305      	movs	r3, #5
 8011348:	e008      	b.n	801135c <HAL_GPIO_Init+0x21c>
 801134a:	2304      	movs	r3, #4
 801134c:	e006      	b.n	801135c <HAL_GPIO_Init+0x21c>
 801134e:	2303      	movs	r3, #3
 8011350:	e004      	b.n	801135c <HAL_GPIO_Init+0x21c>
 8011352:	2302      	movs	r3, #2
 8011354:	e002      	b.n	801135c <HAL_GPIO_Init+0x21c>
 8011356:	2301      	movs	r3, #1
 8011358:	e000      	b.n	801135c <HAL_GPIO_Init+0x21c>
 801135a:	2300      	movs	r3, #0
 801135c:	69fa      	ldr	r2, [r7, #28]
 801135e:	f002 0203 	and.w	r2, r2, #3
 8011362:	0092      	lsls	r2, r2, #2
 8011364:	4093      	lsls	r3, r2
 8011366:	69ba      	ldr	r2, [r7, #24]
 8011368:	4313      	orrs	r3, r2
 801136a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801136c:	4935      	ldr	r1, [pc, #212]	@ (8011444 <HAL_GPIO_Init+0x304>)
 801136e:	69fb      	ldr	r3, [r7, #28]
 8011370:	089b      	lsrs	r3, r3, #2
 8011372:	3302      	adds	r3, #2
 8011374:	69ba      	ldr	r2, [r7, #24]
 8011376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801137a:	4b3a      	ldr	r3, [pc, #232]	@ (8011464 <HAL_GPIO_Init+0x324>)
 801137c:	689b      	ldr	r3, [r3, #8]
 801137e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	43db      	mvns	r3, r3
 8011384:	69ba      	ldr	r2, [r7, #24]
 8011386:	4013      	ands	r3, r2
 8011388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	685b      	ldr	r3, [r3, #4]
 801138e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011392:	2b00      	cmp	r3, #0
 8011394:	d003      	beq.n	801139e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8011396:	69ba      	ldr	r2, [r7, #24]
 8011398:	693b      	ldr	r3, [r7, #16]
 801139a:	4313      	orrs	r3, r2
 801139c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801139e:	4a31      	ldr	r2, [pc, #196]	@ (8011464 <HAL_GPIO_Init+0x324>)
 80113a0:	69bb      	ldr	r3, [r7, #24]
 80113a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80113a4:	4b2f      	ldr	r3, [pc, #188]	@ (8011464 <HAL_GPIO_Init+0x324>)
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	43db      	mvns	r3, r3
 80113ae:	69ba      	ldr	r2, [r7, #24]
 80113b0:	4013      	ands	r3, r2
 80113b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d003      	beq.n	80113c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80113c0:	69ba      	ldr	r2, [r7, #24]
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	4313      	orrs	r3, r2
 80113c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80113c8:	4a26      	ldr	r2, [pc, #152]	@ (8011464 <HAL_GPIO_Init+0x324>)
 80113ca:	69bb      	ldr	r3, [r7, #24]
 80113cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80113ce:	4b25      	ldr	r3, [pc, #148]	@ (8011464 <HAL_GPIO_Init+0x324>)
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	43db      	mvns	r3, r3
 80113d8:	69ba      	ldr	r2, [r7, #24]
 80113da:	4013      	ands	r3, r2
 80113dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d003      	beq.n	80113f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80113ea:	69ba      	ldr	r2, [r7, #24]
 80113ec:	693b      	ldr	r3, [r7, #16]
 80113ee:	4313      	orrs	r3, r2
 80113f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80113f2:	4a1c      	ldr	r2, [pc, #112]	@ (8011464 <HAL_GPIO_Init+0x324>)
 80113f4:	69bb      	ldr	r3, [r7, #24]
 80113f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80113f8:	4b1a      	ldr	r3, [pc, #104]	@ (8011464 <HAL_GPIO_Init+0x324>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	43db      	mvns	r3, r3
 8011402:	69ba      	ldr	r2, [r7, #24]
 8011404:	4013      	ands	r3, r2
 8011406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011410:	2b00      	cmp	r3, #0
 8011412:	d003      	beq.n	801141c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8011414:	69ba      	ldr	r2, [r7, #24]
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	4313      	orrs	r3, r2
 801141a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801141c:	4a11      	ldr	r2, [pc, #68]	@ (8011464 <HAL_GPIO_Init+0x324>)
 801141e:	69bb      	ldr	r3, [r7, #24]
 8011420:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011422:	69fb      	ldr	r3, [r7, #28]
 8011424:	3301      	adds	r3, #1
 8011426:	61fb      	str	r3, [r7, #28]
 8011428:	69fb      	ldr	r3, [r7, #28]
 801142a:	2b0f      	cmp	r3, #15
 801142c:	f67f ae96 	bls.w	801115c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011430:	bf00      	nop
 8011432:	bf00      	nop
 8011434:	3724      	adds	r7, #36	@ 0x24
 8011436:	46bd      	mov	sp, r7
 8011438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143c:	4770      	bx	lr
 801143e:	bf00      	nop
 8011440:	40023800 	.word	0x40023800
 8011444:	40013800 	.word	0x40013800
 8011448:	40020000 	.word	0x40020000
 801144c:	40020400 	.word	0x40020400
 8011450:	40020800 	.word	0x40020800
 8011454:	40020c00 	.word	0x40020c00
 8011458:	40021000 	.word	0x40021000
 801145c:	40021400 	.word	0x40021400
 8011460:	40021800 	.word	0x40021800
 8011464:	40013c00 	.word	0x40013c00

08011468 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011468:	b480      	push	{r7}
 801146a:	b087      	sub	sp, #28
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011472:	2300      	movs	r3, #0
 8011474:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8011476:	2300      	movs	r3, #0
 8011478:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801147a:	2300      	movs	r3, #0
 801147c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801147e:	2300      	movs	r3, #0
 8011480:	617b      	str	r3, [r7, #20]
 8011482:	e0c7      	b.n	8011614 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011484:	2201      	movs	r2, #1
 8011486:	697b      	ldr	r3, [r7, #20]
 8011488:	fa02 f303 	lsl.w	r3, r2, r3
 801148c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801148e:	683a      	ldr	r2, [r7, #0]
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	4013      	ands	r3, r2
 8011494:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8011496:	68fa      	ldr	r2, [r7, #12]
 8011498:	693b      	ldr	r3, [r7, #16]
 801149a:	429a      	cmp	r2, r3
 801149c:	f040 80b7 	bne.w	801160e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80114a0:	4a62      	ldr	r2, [pc, #392]	@ (801162c <HAL_GPIO_DeInit+0x1c4>)
 80114a2:	697b      	ldr	r3, [r7, #20]
 80114a4:	089b      	lsrs	r3, r3, #2
 80114a6:	3302      	adds	r3, #2
 80114a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114ac:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	f003 0303 	and.w	r3, r3, #3
 80114b4:	009b      	lsls	r3, r3, #2
 80114b6:	220f      	movs	r2, #15
 80114b8:	fa02 f303 	lsl.w	r3, r2, r3
 80114bc:	68ba      	ldr	r2, [r7, #8]
 80114be:	4013      	ands	r3, r2
 80114c0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	4a5a      	ldr	r2, [pc, #360]	@ (8011630 <HAL_GPIO_DeInit+0x1c8>)
 80114c6:	4293      	cmp	r3, r2
 80114c8:	d025      	beq.n	8011516 <HAL_GPIO_DeInit+0xae>
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	4a59      	ldr	r2, [pc, #356]	@ (8011634 <HAL_GPIO_DeInit+0x1cc>)
 80114ce:	4293      	cmp	r3, r2
 80114d0:	d01f      	beq.n	8011512 <HAL_GPIO_DeInit+0xaa>
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	4a58      	ldr	r2, [pc, #352]	@ (8011638 <HAL_GPIO_DeInit+0x1d0>)
 80114d6:	4293      	cmp	r3, r2
 80114d8:	d019      	beq.n	801150e <HAL_GPIO_DeInit+0xa6>
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	4a57      	ldr	r2, [pc, #348]	@ (801163c <HAL_GPIO_DeInit+0x1d4>)
 80114de:	4293      	cmp	r3, r2
 80114e0:	d013      	beq.n	801150a <HAL_GPIO_DeInit+0xa2>
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	4a56      	ldr	r2, [pc, #344]	@ (8011640 <HAL_GPIO_DeInit+0x1d8>)
 80114e6:	4293      	cmp	r3, r2
 80114e8:	d00d      	beq.n	8011506 <HAL_GPIO_DeInit+0x9e>
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	4a55      	ldr	r2, [pc, #340]	@ (8011644 <HAL_GPIO_DeInit+0x1dc>)
 80114ee:	4293      	cmp	r3, r2
 80114f0:	d007      	beq.n	8011502 <HAL_GPIO_DeInit+0x9a>
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	4a54      	ldr	r2, [pc, #336]	@ (8011648 <HAL_GPIO_DeInit+0x1e0>)
 80114f6:	4293      	cmp	r3, r2
 80114f8:	d101      	bne.n	80114fe <HAL_GPIO_DeInit+0x96>
 80114fa:	2306      	movs	r3, #6
 80114fc:	e00c      	b.n	8011518 <HAL_GPIO_DeInit+0xb0>
 80114fe:	2307      	movs	r3, #7
 8011500:	e00a      	b.n	8011518 <HAL_GPIO_DeInit+0xb0>
 8011502:	2305      	movs	r3, #5
 8011504:	e008      	b.n	8011518 <HAL_GPIO_DeInit+0xb0>
 8011506:	2304      	movs	r3, #4
 8011508:	e006      	b.n	8011518 <HAL_GPIO_DeInit+0xb0>
 801150a:	2303      	movs	r3, #3
 801150c:	e004      	b.n	8011518 <HAL_GPIO_DeInit+0xb0>
 801150e:	2302      	movs	r3, #2
 8011510:	e002      	b.n	8011518 <HAL_GPIO_DeInit+0xb0>
 8011512:	2301      	movs	r3, #1
 8011514:	e000      	b.n	8011518 <HAL_GPIO_DeInit+0xb0>
 8011516:	2300      	movs	r3, #0
 8011518:	697a      	ldr	r2, [r7, #20]
 801151a:	f002 0203 	and.w	r2, r2, #3
 801151e:	0092      	lsls	r2, r2, #2
 8011520:	4093      	lsls	r3, r2
 8011522:	68ba      	ldr	r2, [r7, #8]
 8011524:	429a      	cmp	r2, r3
 8011526:	d132      	bne.n	801158e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8011528:	4b48      	ldr	r3, [pc, #288]	@ (801164c <HAL_GPIO_DeInit+0x1e4>)
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	43db      	mvns	r3, r3
 8011530:	4946      	ldr	r1, [pc, #280]	@ (801164c <HAL_GPIO_DeInit+0x1e4>)
 8011532:	4013      	ands	r3, r2
 8011534:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8011536:	4b45      	ldr	r3, [pc, #276]	@ (801164c <HAL_GPIO_DeInit+0x1e4>)
 8011538:	685a      	ldr	r2, [r3, #4]
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	43db      	mvns	r3, r3
 801153e:	4943      	ldr	r1, [pc, #268]	@ (801164c <HAL_GPIO_DeInit+0x1e4>)
 8011540:	4013      	ands	r3, r2
 8011542:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8011544:	4b41      	ldr	r3, [pc, #260]	@ (801164c <HAL_GPIO_DeInit+0x1e4>)
 8011546:	68da      	ldr	r2, [r3, #12]
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	43db      	mvns	r3, r3
 801154c:	493f      	ldr	r1, [pc, #252]	@ (801164c <HAL_GPIO_DeInit+0x1e4>)
 801154e:	4013      	ands	r3, r2
 8011550:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8011552:	4b3e      	ldr	r3, [pc, #248]	@ (801164c <HAL_GPIO_DeInit+0x1e4>)
 8011554:	689a      	ldr	r2, [r3, #8]
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	43db      	mvns	r3, r3
 801155a:	493c      	ldr	r1, [pc, #240]	@ (801164c <HAL_GPIO_DeInit+0x1e4>)
 801155c:	4013      	ands	r3, r2
 801155e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	f003 0303 	and.w	r3, r3, #3
 8011566:	009b      	lsls	r3, r3, #2
 8011568:	220f      	movs	r2, #15
 801156a:	fa02 f303 	lsl.w	r3, r2, r3
 801156e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8011570:	4a2e      	ldr	r2, [pc, #184]	@ (801162c <HAL_GPIO_DeInit+0x1c4>)
 8011572:	697b      	ldr	r3, [r7, #20]
 8011574:	089b      	lsrs	r3, r3, #2
 8011576:	3302      	adds	r3, #2
 8011578:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801157c:	68bb      	ldr	r3, [r7, #8]
 801157e:	43da      	mvns	r2, r3
 8011580:	482a      	ldr	r0, [pc, #168]	@ (801162c <HAL_GPIO_DeInit+0x1c4>)
 8011582:	697b      	ldr	r3, [r7, #20]
 8011584:	089b      	lsrs	r3, r3, #2
 8011586:	400a      	ands	r2, r1
 8011588:	3302      	adds	r3, #2
 801158a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681a      	ldr	r2, [r3, #0]
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	005b      	lsls	r3, r3, #1
 8011596:	2103      	movs	r1, #3
 8011598:	fa01 f303 	lsl.w	r3, r1, r3
 801159c:	43db      	mvns	r3, r3
 801159e:	401a      	ands	r2, r3
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	08da      	lsrs	r2, r3, #3
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	3208      	adds	r2, #8
 80115ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	f003 0307 	and.w	r3, r3, #7
 80115b6:	009b      	lsls	r3, r3, #2
 80115b8:	220f      	movs	r2, #15
 80115ba:	fa02 f303 	lsl.w	r3, r2, r3
 80115be:	43db      	mvns	r3, r3
 80115c0:	697a      	ldr	r2, [r7, #20]
 80115c2:	08d2      	lsrs	r2, r2, #3
 80115c4:	4019      	ands	r1, r3
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	3208      	adds	r2, #8
 80115ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	68da      	ldr	r2, [r3, #12]
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	005b      	lsls	r3, r3, #1
 80115d6:	2103      	movs	r1, #3
 80115d8:	fa01 f303 	lsl.w	r3, r1, r3
 80115dc:	43db      	mvns	r3, r3
 80115de:	401a      	ands	r2, r3
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	685a      	ldr	r2, [r3, #4]
 80115e8:	2101      	movs	r1, #1
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	fa01 f303 	lsl.w	r3, r1, r3
 80115f0:	43db      	mvns	r3, r3
 80115f2:	401a      	ands	r2, r3
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	689a      	ldr	r2, [r3, #8]
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	005b      	lsls	r3, r3, #1
 8011600:	2103      	movs	r1, #3
 8011602:	fa01 f303 	lsl.w	r3, r1, r3
 8011606:	43db      	mvns	r3, r3
 8011608:	401a      	ands	r2, r3
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	3301      	adds	r3, #1
 8011612:	617b      	str	r3, [r7, #20]
 8011614:	697b      	ldr	r3, [r7, #20]
 8011616:	2b0f      	cmp	r3, #15
 8011618:	f67f af34 	bls.w	8011484 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 801161c:	bf00      	nop
 801161e:	bf00      	nop
 8011620:	371c      	adds	r7, #28
 8011622:	46bd      	mov	sp, r7
 8011624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011628:	4770      	bx	lr
 801162a:	bf00      	nop
 801162c:	40013800 	.word	0x40013800
 8011630:	40020000 	.word	0x40020000
 8011634:	40020400 	.word	0x40020400
 8011638:	40020800 	.word	0x40020800
 801163c:	40020c00 	.word	0x40020c00
 8011640:	40021000 	.word	0x40021000
 8011644:	40021400 	.word	0x40021400
 8011648:	40021800 	.word	0x40021800
 801164c:	40013c00 	.word	0x40013c00

08011650 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8011650:	b480      	push	{r7}
 8011652:	b085      	sub	sp, #20
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
 8011658:	460b      	mov	r3, r1
 801165a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	691a      	ldr	r2, [r3, #16]
 8011660:	887b      	ldrh	r3, [r7, #2]
 8011662:	4013      	ands	r3, r2
 8011664:	2b00      	cmp	r3, #0
 8011666:	d002      	beq.n	801166e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8011668:	2301      	movs	r3, #1
 801166a:	73fb      	strb	r3, [r7, #15]
 801166c:	e001      	b.n	8011672 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801166e:	2300      	movs	r3, #0
 8011670:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011672:	7bfb      	ldrb	r3, [r7, #15]
}
 8011674:	4618      	mov	r0, r3
 8011676:	3714      	adds	r7, #20
 8011678:	46bd      	mov	sp, r7
 801167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167e:	4770      	bx	lr

08011680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011680:	b480      	push	{r7}
 8011682:	b083      	sub	sp, #12
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	460b      	mov	r3, r1
 801168a:	807b      	strh	r3, [r7, #2]
 801168c:	4613      	mov	r3, r2
 801168e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011690:	787b      	ldrb	r3, [r7, #1]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d003      	beq.n	801169e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011696:	887a      	ldrh	r2, [r7, #2]
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801169c:	e003      	b.n	80116a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801169e:	887b      	ldrh	r3, [r7, #2]
 80116a0:	041a      	lsls	r2, r3, #16
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	619a      	str	r2, [r3, #24]
}
 80116a6:	bf00      	nop
 80116a8:	370c      	adds	r7, #12
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr

080116b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80116b2:	b480      	push	{r7}
 80116b4:	b085      	sub	sp, #20
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6078      	str	r0, [r7, #4]
 80116ba:	460b      	mov	r3, r1
 80116bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	695b      	ldr	r3, [r3, #20]
 80116c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80116c4:	887a      	ldrh	r2, [r7, #2]
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	4013      	ands	r3, r2
 80116ca:	041a      	lsls	r2, r3, #16
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	43d9      	mvns	r1, r3
 80116d0:	887b      	ldrh	r3, [r7, #2]
 80116d2:	400b      	ands	r3, r1
 80116d4:	431a      	orrs	r2, r3
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	619a      	str	r2, [r3, #24]
}
 80116da:	bf00      	nop
 80116dc:	3714      	adds	r7, #20
 80116de:	46bd      	mov	sp, r7
 80116e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e4:	4770      	bx	lr
	...

080116e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b082      	sub	sp, #8
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	4603      	mov	r3, r0
 80116f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80116f2:	4b08      	ldr	r3, [pc, #32]	@ (8011714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80116f4:	695a      	ldr	r2, [r3, #20]
 80116f6:	88fb      	ldrh	r3, [r7, #6]
 80116f8:	4013      	ands	r3, r2
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d006      	beq.n	801170c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80116fe:	4a05      	ldr	r2, [pc, #20]	@ (8011714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011700:	88fb      	ldrh	r3, [r7, #6]
 8011702:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8011704:	88fb      	ldrh	r3, [r7, #6]
 8011706:	4618      	mov	r0, r3
 8011708:	f7f8 fbc8 	bl	8009e9c <HAL_GPIO_EXTI_Callback>
  }
}
 801170c:	bf00      	nop
 801170e:	3708      	adds	r7, #8
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}
 8011714:	40013c00 	.word	0x40013c00

08011718 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8011718:	b480      	push	{r7}
 801171a:	b083      	sub	sp, #12
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
 8011720:	460b      	mov	r3, r1
 8011722:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011724:	4b0b      	ldr	r3, [pc, #44]	@ (8011754 <HAL_PWR_EnterSLEEPMode+0x3c>)
 8011726:	691b      	ldr	r3, [r3, #16]
 8011728:	4a0a      	ldr	r2, [pc, #40]	@ (8011754 <HAL_PWR_EnterSLEEPMode+0x3c>)
 801172a:	f023 0304 	bic.w	r3, r3, #4
 801172e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8011730:	78fb      	ldrb	r3, [r7, #3]
 8011732:	2b01      	cmp	r3, #1
 8011734:	d101      	bne.n	801173a <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8011736:	bf30      	wfi
    }

    /* Request Wait For Event */
    __WFE();
  }
}
 8011738:	e005      	b.n	8011746 <HAL_PWR_EnterSLEEPMode+0x2e>
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 801173a:	78fb      	ldrb	r3, [r7, #3]
 801173c:	2b03      	cmp	r3, #3
 801173e:	d001      	beq.n	8011744 <HAL_PWR_EnterSLEEPMode+0x2c>
      __SEV();
 8011740:	bf40      	sev
      __WFE();
 8011742:	bf20      	wfe
    __WFE();
 8011744:	bf20      	wfe
}
 8011746:	bf00      	nop
 8011748:	370c      	adds	r7, #12
 801174a:	46bd      	mov	sp, r7
 801174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011750:	4770      	bx	lr
 8011752:	bf00      	nop
 8011754:	e000ed00 	.word	0xe000ed00

08011758 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801175e:	2300      	movs	r3, #0
 8011760:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8011762:	2300      	movs	r3, #0
 8011764:	603b      	str	r3, [r7, #0]
 8011766:	4b20      	ldr	r3, [pc, #128]	@ (80117e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8011768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801176a:	4a1f      	ldr	r2, [pc, #124]	@ (80117e8 <HAL_PWREx_EnableOverDrive+0x90>)
 801176c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011770:	6413      	str	r3, [r2, #64]	@ 0x40
 8011772:	4b1d      	ldr	r3, [pc, #116]	@ (80117e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8011774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801177a:	603b      	str	r3, [r7, #0]
 801177c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801177e:	4b1b      	ldr	r3, [pc, #108]	@ (80117ec <HAL_PWREx_EnableOverDrive+0x94>)
 8011780:	2201      	movs	r2, #1
 8011782:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011784:	f7ff fb06 	bl	8010d94 <HAL_GetTick>
 8011788:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801178a:	e009      	b.n	80117a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801178c:	f7ff fb02 	bl	8010d94 <HAL_GetTick>
 8011790:	4602      	mov	r2, r0
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	1ad3      	subs	r3, r2, r3
 8011796:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801179a:	d901      	bls.n	80117a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 801179c:	2303      	movs	r3, #3
 801179e:	e01f      	b.n	80117e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80117a0:	4b13      	ldr	r3, [pc, #76]	@ (80117f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80117a2:	685b      	ldr	r3, [r3, #4]
 80117a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80117a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80117ac:	d1ee      	bne.n	801178c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80117ae:	4b11      	ldr	r3, [pc, #68]	@ (80117f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80117b0:	2201      	movs	r2, #1
 80117b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80117b4:	f7ff faee 	bl	8010d94 <HAL_GetTick>
 80117b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80117ba:	e009      	b.n	80117d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80117bc:	f7ff faea 	bl	8010d94 <HAL_GetTick>
 80117c0:	4602      	mov	r2, r0
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	1ad3      	subs	r3, r2, r3
 80117c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80117ca:	d901      	bls.n	80117d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80117cc:	2303      	movs	r3, #3
 80117ce:	e007      	b.n	80117e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80117d0:	4b07      	ldr	r3, [pc, #28]	@ (80117f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80117d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80117dc:	d1ee      	bne.n	80117bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80117de:	2300      	movs	r3, #0
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3708      	adds	r7, #8
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}
 80117e8:	40023800 	.word	0x40023800
 80117ec:	420e0040 	.word	0x420e0040
 80117f0:	40007000 	.word	0x40007000
 80117f4:	420e0044 	.word	0x420e0044

080117f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b084      	sub	sp, #16
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
 8011800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d101      	bne.n	801180c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011808:	2301      	movs	r3, #1
 801180a:	e0cc      	b.n	80119a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801180c:	4b68      	ldr	r3, [pc, #416]	@ (80119b0 <HAL_RCC_ClockConfig+0x1b8>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	f003 030f 	and.w	r3, r3, #15
 8011814:	683a      	ldr	r2, [r7, #0]
 8011816:	429a      	cmp	r2, r3
 8011818:	d90c      	bls.n	8011834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801181a:	4b65      	ldr	r3, [pc, #404]	@ (80119b0 <HAL_RCC_ClockConfig+0x1b8>)
 801181c:	683a      	ldr	r2, [r7, #0]
 801181e:	b2d2      	uxtb	r2, r2
 8011820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011822:	4b63      	ldr	r3, [pc, #396]	@ (80119b0 <HAL_RCC_ClockConfig+0x1b8>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	f003 030f 	and.w	r3, r3, #15
 801182a:	683a      	ldr	r2, [r7, #0]
 801182c:	429a      	cmp	r2, r3
 801182e:	d001      	beq.n	8011834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8011830:	2301      	movs	r3, #1
 8011832:	e0b8      	b.n	80119a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	f003 0302 	and.w	r3, r3, #2
 801183c:	2b00      	cmp	r3, #0
 801183e:	d020      	beq.n	8011882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	f003 0304 	and.w	r3, r3, #4
 8011848:	2b00      	cmp	r3, #0
 801184a:	d005      	beq.n	8011858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801184c:	4b59      	ldr	r3, [pc, #356]	@ (80119b4 <HAL_RCC_ClockConfig+0x1bc>)
 801184e:	689b      	ldr	r3, [r3, #8]
 8011850:	4a58      	ldr	r2, [pc, #352]	@ (80119b4 <HAL_RCC_ClockConfig+0x1bc>)
 8011852:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8011856:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	f003 0308 	and.w	r3, r3, #8
 8011860:	2b00      	cmp	r3, #0
 8011862:	d005      	beq.n	8011870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011864:	4b53      	ldr	r3, [pc, #332]	@ (80119b4 <HAL_RCC_ClockConfig+0x1bc>)
 8011866:	689b      	ldr	r3, [r3, #8]
 8011868:	4a52      	ldr	r2, [pc, #328]	@ (80119b4 <HAL_RCC_ClockConfig+0x1bc>)
 801186a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 801186e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011870:	4b50      	ldr	r3, [pc, #320]	@ (80119b4 <HAL_RCC_ClockConfig+0x1bc>)
 8011872:	689b      	ldr	r3, [r3, #8]
 8011874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	689b      	ldr	r3, [r3, #8]
 801187c:	494d      	ldr	r1, [pc, #308]	@ (80119b4 <HAL_RCC_ClockConfig+0x1bc>)
 801187e:	4313      	orrs	r3, r2
 8011880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	f003 0301 	and.w	r3, r3, #1
 801188a:	2b00      	cmp	r3, #0
 801188c:	d044      	beq.n	8011918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	685b      	ldr	r3, [r3, #4]
 8011892:	2b01      	cmp	r3, #1
 8011894:	d107      	bne.n	80118a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011896:	4b47      	ldr	r3, [pc, #284]	@ (80119b4 <HAL_RCC_ClockConfig+0x1bc>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d119      	bne.n	80118d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80118a2:	2301      	movs	r3, #1
 80118a4:	e07f      	b.n	80119a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	685b      	ldr	r3, [r3, #4]
 80118aa:	2b02      	cmp	r3, #2
 80118ac:	d003      	beq.n	80118b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80118b2:	2b03      	cmp	r3, #3
 80118b4:	d107      	bne.n	80118c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80118b6:	4b3f      	ldr	r3, [pc, #252]	@ (80119b4 <HAL_RCC_ClockConfig+0x1bc>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d109      	bne.n	80118d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80118c2:	2301      	movs	r3, #1
 80118c4:	e06f      	b.n	80119a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80118c6:	4b3b      	ldr	r3, [pc, #236]	@ (80119b4 <HAL_RCC_ClockConfig+0x1bc>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	f003 0302 	and.w	r3, r3, #2
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d101      	bne.n	80118d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80118d2:	2301      	movs	r3, #1
 80118d4:	e067      	b.n	80119a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80118d6:	4b37      	ldr	r3, [pc, #220]	@ (80119b4 <HAL_RCC_ClockConfig+0x1bc>)
 80118d8:	689b      	ldr	r3, [r3, #8]
 80118da:	f023 0203 	bic.w	r2, r3, #3
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	685b      	ldr	r3, [r3, #4]
 80118e2:	4934      	ldr	r1, [pc, #208]	@ (80119b4 <HAL_RCC_ClockConfig+0x1bc>)
 80118e4:	4313      	orrs	r3, r2
 80118e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80118e8:	f7ff fa54 	bl	8010d94 <HAL_GetTick>
 80118ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80118ee:	e00a      	b.n	8011906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80118f0:	f7ff fa50 	bl	8010d94 <HAL_GetTick>
 80118f4:	4602      	mov	r2, r0
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	1ad3      	subs	r3, r2, r3
 80118fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80118fe:	4293      	cmp	r3, r2
 8011900:	d901      	bls.n	8011906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8011902:	2303      	movs	r3, #3
 8011904:	e04f      	b.n	80119a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011906:	4b2b      	ldr	r3, [pc, #172]	@ (80119b4 <HAL_RCC_ClockConfig+0x1bc>)
 8011908:	689b      	ldr	r3, [r3, #8]
 801190a:	f003 020c 	and.w	r2, r3, #12
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	009b      	lsls	r3, r3, #2
 8011914:	429a      	cmp	r2, r3
 8011916:	d1eb      	bne.n	80118f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011918:	4b25      	ldr	r3, [pc, #148]	@ (80119b0 <HAL_RCC_ClockConfig+0x1b8>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	f003 030f 	and.w	r3, r3, #15
 8011920:	683a      	ldr	r2, [r7, #0]
 8011922:	429a      	cmp	r2, r3
 8011924:	d20c      	bcs.n	8011940 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011926:	4b22      	ldr	r3, [pc, #136]	@ (80119b0 <HAL_RCC_ClockConfig+0x1b8>)
 8011928:	683a      	ldr	r2, [r7, #0]
 801192a:	b2d2      	uxtb	r2, r2
 801192c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801192e:	4b20      	ldr	r3, [pc, #128]	@ (80119b0 <HAL_RCC_ClockConfig+0x1b8>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	f003 030f 	and.w	r3, r3, #15
 8011936:	683a      	ldr	r2, [r7, #0]
 8011938:	429a      	cmp	r2, r3
 801193a:	d001      	beq.n	8011940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801193c:	2301      	movs	r3, #1
 801193e:	e032      	b.n	80119a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	f003 0304 	and.w	r3, r3, #4
 8011948:	2b00      	cmp	r3, #0
 801194a:	d008      	beq.n	801195e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801194c:	4b19      	ldr	r3, [pc, #100]	@ (80119b4 <HAL_RCC_ClockConfig+0x1bc>)
 801194e:	689b      	ldr	r3, [r3, #8]
 8011950:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	68db      	ldr	r3, [r3, #12]
 8011958:	4916      	ldr	r1, [pc, #88]	@ (80119b4 <HAL_RCC_ClockConfig+0x1bc>)
 801195a:	4313      	orrs	r3, r2
 801195c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	f003 0308 	and.w	r3, r3, #8
 8011966:	2b00      	cmp	r3, #0
 8011968:	d009      	beq.n	801197e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801196a:	4b12      	ldr	r3, [pc, #72]	@ (80119b4 <HAL_RCC_ClockConfig+0x1bc>)
 801196c:	689b      	ldr	r3, [r3, #8]
 801196e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	691b      	ldr	r3, [r3, #16]
 8011976:	00db      	lsls	r3, r3, #3
 8011978:	490e      	ldr	r1, [pc, #56]	@ (80119b4 <HAL_RCC_ClockConfig+0x1bc>)
 801197a:	4313      	orrs	r3, r2
 801197c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801197e:	f000 f887 	bl	8011a90 <HAL_RCC_GetSysClockFreq>
 8011982:	4602      	mov	r2, r0
 8011984:	4b0b      	ldr	r3, [pc, #44]	@ (80119b4 <HAL_RCC_ClockConfig+0x1bc>)
 8011986:	689b      	ldr	r3, [r3, #8]
 8011988:	091b      	lsrs	r3, r3, #4
 801198a:	f003 030f 	and.w	r3, r3, #15
 801198e:	490a      	ldr	r1, [pc, #40]	@ (80119b8 <HAL_RCC_ClockConfig+0x1c0>)
 8011990:	5ccb      	ldrb	r3, [r1, r3]
 8011992:	fa22 f303 	lsr.w	r3, r2, r3
 8011996:	4a09      	ldr	r2, [pc, #36]	@ (80119bc <HAL_RCC_ClockConfig+0x1c4>)
 8011998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 801199a:	4b09      	ldr	r3, [pc, #36]	@ (80119c0 <HAL_RCC_ClockConfig+0x1c8>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	4618      	mov	r0, r3
 80119a0:	f7ff f814 	bl	80109cc <HAL_InitTick>

  return HAL_OK;
 80119a4:	2300      	movs	r3, #0
}
 80119a6:	4618      	mov	r0, r3
 80119a8:	3710      	adds	r7, #16
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}
 80119ae:	bf00      	nop
 80119b0:	40023c00 	.word	0x40023c00
 80119b4:	40023800 	.word	0x40023800
 80119b8:	0801f264 	.word	0x0801f264
 80119bc:	2000008c 	.word	0x2000008c
 80119c0:	20000090 	.word	0x20000090

080119c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80119c4:	b480      	push	{r7}
 80119c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80119c8:	4b03      	ldr	r3, [pc, #12]	@ (80119d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80119ca:	681b      	ldr	r3, [r3, #0]
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	46bd      	mov	sp, r7
 80119d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d4:	4770      	bx	lr
 80119d6:	bf00      	nop
 80119d8:	2000008c 	.word	0x2000008c

080119dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80119e0:	f7ff fff0 	bl	80119c4 <HAL_RCC_GetHCLKFreq>
 80119e4:	4602      	mov	r2, r0
 80119e6:	4b05      	ldr	r3, [pc, #20]	@ (80119fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80119e8:	689b      	ldr	r3, [r3, #8]
 80119ea:	0a9b      	lsrs	r3, r3, #10
 80119ec:	f003 0307 	and.w	r3, r3, #7
 80119f0:	4903      	ldr	r1, [pc, #12]	@ (8011a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80119f2:	5ccb      	ldrb	r3, [r1, r3]
 80119f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80119f8:	4618      	mov	r0, r3
 80119fa:	bd80      	pop	{r7, pc}
 80119fc:	40023800 	.word	0x40023800
 8011a00:	0801f274 	.word	0x0801f274

08011a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8011a08:	f7ff ffdc 	bl	80119c4 <HAL_RCC_GetHCLKFreq>
 8011a0c:	4602      	mov	r2, r0
 8011a0e:	4b05      	ldr	r3, [pc, #20]	@ (8011a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8011a10:	689b      	ldr	r3, [r3, #8]
 8011a12:	0b5b      	lsrs	r3, r3, #13
 8011a14:	f003 0307 	and.w	r3, r3, #7
 8011a18:	4903      	ldr	r1, [pc, #12]	@ (8011a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011a1a:	5ccb      	ldrb	r3, [r1, r3]
 8011a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011a20:	4618      	mov	r0, r3
 8011a22:	bd80      	pop	{r7, pc}
 8011a24:	40023800 	.word	0x40023800
 8011a28:	0801f274 	.word	0x0801f274

08011a2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8011a2c:	b480      	push	{r7}
 8011a2e:	b083      	sub	sp, #12
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
 8011a34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	220f      	movs	r2, #15
 8011a3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8011a3c:	4b12      	ldr	r3, [pc, #72]	@ (8011a88 <HAL_RCC_GetClockConfig+0x5c>)
 8011a3e:	689b      	ldr	r3, [r3, #8]
 8011a40:	f003 0203 	and.w	r2, r3, #3
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8011a48:	4b0f      	ldr	r3, [pc, #60]	@ (8011a88 <HAL_RCC_GetClockConfig+0x5c>)
 8011a4a:	689b      	ldr	r3, [r3, #8]
 8011a4c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8011a54:	4b0c      	ldr	r3, [pc, #48]	@ (8011a88 <HAL_RCC_GetClockConfig+0x5c>)
 8011a56:	689b      	ldr	r3, [r3, #8]
 8011a58:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8011a60:	4b09      	ldr	r3, [pc, #36]	@ (8011a88 <HAL_RCC_GetClockConfig+0x5c>)
 8011a62:	689b      	ldr	r3, [r3, #8]
 8011a64:	08db      	lsrs	r3, r3, #3
 8011a66:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8011a6e:	4b07      	ldr	r3, [pc, #28]	@ (8011a8c <HAL_RCC_GetClockConfig+0x60>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	f003 020f 	and.w	r2, r3, #15
 8011a76:	683b      	ldr	r3, [r7, #0]
 8011a78:	601a      	str	r2, [r3, #0]
}
 8011a7a:	bf00      	nop
 8011a7c:	370c      	adds	r7, #12
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a84:	4770      	bx	lr
 8011a86:	bf00      	nop
 8011a88:	40023800 	.word	0x40023800
 8011a8c:	40023c00 	.word	0x40023c00

08011a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011a94:	b0a6      	sub	sp, #152	@ 0x98
 8011a96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8011a98:	2300      	movs	r3, #0
 8011a9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011ab6:	4bc8      	ldr	r3, [pc, #800]	@ (8011dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011ab8:	689b      	ldr	r3, [r3, #8]
 8011aba:	f003 030c 	and.w	r3, r3, #12
 8011abe:	2b0c      	cmp	r3, #12
 8011ac0:	f200 817e 	bhi.w	8011dc0 <HAL_RCC_GetSysClockFreq+0x330>
 8011ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8011acc <HAL_RCC_GetSysClockFreq+0x3c>)
 8011ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aca:	bf00      	nop
 8011acc:	08011b01 	.word	0x08011b01
 8011ad0:	08011dc1 	.word	0x08011dc1
 8011ad4:	08011dc1 	.word	0x08011dc1
 8011ad8:	08011dc1 	.word	0x08011dc1
 8011adc:	08011b09 	.word	0x08011b09
 8011ae0:	08011dc1 	.word	0x08011dc1
 8011ae4:	08011dc1 	.word	0x08011dc1
 8011ae8:	08011dc1 	.word	0x08011dc1
 8011aec:	08011b11 	.word	0x08011b11
 8011af0:	08011dc1 	.word	0x08011dc1
 8011af4:	08011dc1 	.word	0x08011dc1
 8011af8:	08011dc1 	.word	0x08011dc1
 8011afc:	08011c7b 	.word	0x08011c7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011b00:	4bb6      	ldr	r3, [pc, #728]	@ (8011ddc <HAL_RCC_GetSysClockFreq+0x34c>)
 8011b02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8011b06:	e15f      	b.n	8011dc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8011b08:	4bb5      	ldr	r3, [pc, #724]	@ (8011de0 <HAL_RCC_GetSysClockFreq+0x350>)
 8011b0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8011b0e:	e15b      	b.n	8011dc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011b10:	4bb1      	ldr	r3, [pc, #708]	@ (8011dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011b12:	685b      	ldr	r3, [r3, #4]
 8011b14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011b18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011b1c:	4bae      	ldr	r3, [pc, #696]	@ (8011dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d031      	beq.n	8011b8c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011b28:	4bab      	ldr	r3, [pc, #684]	@ (8011dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	099b      	lsrs	r3, r3, #6
 8011b2e:	2200      	movs	r2, #0
 8011b30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011b32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011b34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8011b40:	4ba7      	ldr	r3, [pc, #668]	@ (8011de0 <HAL_RCC_GetSysClockFreq+0x350>)
 8011b42:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8011b46:	462a      	mov	r2, r5
 8011b48:	fb03 f202 	mul.w	r2, r3, r2
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	4621      	mov	r1, r4
 8011b50:	fb01 f303 	mul.w	r3, r1, r3
 8011b54:	4413      	add	r3, r2
 8011b56:	4aa2      	ldr	r2, [pc, #648]	@ (8011de0 <HAL_RCC_GetSysClockFreq+0x350>)
 8011b58:	4621      	mov	r1, r4
 8011b5a:	fba1 1202 	umull	r1, r2, r1, r2
 8011b5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011b60:	460a      	mov	r2, r1
 8011b62:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011b64:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011b66:	4413      	add	r3, r2
 8011b68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011b6e:	2200      	movs	r2, #0
 8011b70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011b72:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8011b74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011b78:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8011b7c:	f7f7 f864 	bl	8008c48 <__aeabi_uldivmod>
 8011b80:	4602      	mov	r2, r0
 8011b82:	460b      	mov	r3, r1
 8011b84:	4613      	mov	r3, r2
 8011b86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011b8a:	e064      	b.n	8011c56 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011b8c:	4b92      	ldr	r3, [pc, #584]	@ (8011dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011b8e:	685b      	ldr	r3, [r3, #4]
 8011b90:	099b      	lsrs	r3, r3, #6
 8011b92:	2200      	movs	r2, #0
 8011b94:	653b      	str	r3, [r7, #80]	@ 0x50
 8011b96:	657a      	str	r2, [r7, #84]	@ 0x54
 8011b98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011ba4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8011ba8:	4622      	mov	r2, r4
 8011baa:	462b      	mov	r3, r5
 8011bac:	f04f 0000 	mov.w	r0, #0
 8011bb0:	f04f 0100 	mov.w	r1, #0
 8011bb4:	0159      	lsls	r1, r3, #5
 8011bb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011bba:	0150      	lsls	r0, r2, #5
 8011bbc:	4602      	mov	r2, r0
 8011bbe:	460b      	mov	r3, r1
 8011bc0:	4621      	mov	r1, r4
 8011bc2:	1a51      	subs	r1, r2, r1
 8011bc4:	6139      	str	r1, [r7, #16]
 8011bc6:	4629      	mov	r1, r5
 8011bc8:	eb63 0301 	sbc.w	r3, r3, r1
 8011bcc:	617b      	str	r3, [r7, #20]
 8011bce:	f04f 0200 	mov.w	r2, #0
 8011bd2:	f04f 0300 	mov.w	r3, #0
 8011bd6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011bda:	4659      	mov	r1, fp
 8011bdc:	018b      	lsls	r3, r1, #6
 8011bde:	4651      	mov	r1, sl
 8011be0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8011be4:	4651      	mov	r1, sl
 8011be6:	018a      	lsls	r2, r1, #6
 8011be8:	4651      	mov	r1, sl
 8011bea:	ebb2 0801 	subs.w	r8, r2, r1
 8011bee:	4659      	mov	r1, fp
 8011bf0:	eb63 0901 	sbc.w	r9, r3, r1
 8011bf4:	f04f 0200 	mov.w	r2, #0
 8011bf8:	f04f 0300 	mov.w	r3, #0
 8011bfc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011c00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011c04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011c08:	4690      	mov	r8, r2
 8011c0a:	4699      	mov	r9, r3
 8011c0c:	4623      	mov	r3, r4
 8011c0e:	eb18 0303 	adds.w	r3, r8, r3
 8011c12:	60bb      	str	r3, [r7, #8]
 8011c14:	462b      	mov	r3, r5
 8011c16:	eb49 0303 	adc.w	r3, r9, r3
 8011c1a:	60fb      	str	r3, [r7, #12]
 8011c1c:	f04f 0200 	mov.w	r2, #0
 8011c20:	f04f 0300 	mov.w	r3, #0
 8011c24:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011c28:	4629      	mov	r1, r5
 8011c2a:	028b      	lsls	r3, r1, #10
 8011c2c:	4621      	mov	r1, r4
 8011c2e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8011c32:	4621      	mov	r1, r4
 8011c34:	028a      	lsls	r2, r1, #10
 8011c36:	4610      	mov	r0, r2
 8011c38:	4619      	mov	r1, r3
 8011c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011c3e:	2200      	movs	r2, #0
 8011c40:	643b      	str	r3, [r7, #64]	@ 0x40
 8011c42:	647a      	str	r2, [r7, #68]	@ 0x44
 8011c44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8011c48:	f7f6 fffe 	bl	8008c48 <__aeabi_uldivmod>
 8011c4c:	4602      	mov	r2, r0
 8011c4e:	460b      	mov	r3, r1
 8011c50:	4613      	mov	r3, r2
 8011c52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8011c56:	4b60      	ldr	r3, [pc, #384]	@ (8011dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011c58:	685b      	ldr	r3, [r3, #4]
 8011c5a:	0c1b      	lsrs	r3, r3, #16
 8011c5c:	f003 0303 	and.w	r3, r3, #3
 8011c60:	3301      	adds	r3, #1
 8011c62:	005b      	lsls	r3, r3, #1
 8011c64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8011c68:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8011c78:	e0a6      	b.n	8011dc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011c7a:	4b57      	ldr	r3, [pc, #348]	@ (8011dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011c7c:	685b      	ldr	r3, [r3, #4]
 8011c7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011c82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011c86:	4b54      	ldr	r3, [pc, #336]	@ (8011dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011c88:	685b      	ldr	r3, [r3, #4]
 8011c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d02a      	beq.n	8011ce8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011c92:	4b51      	ldr	r3, [pc, #324]	@ (8011dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011c94:	685b      	ldr	r3, [r3, #4]
 8011c96:	099b      	lsrs	r3, r3, #6
 8011c98:	2200      	movs	r2, #0
 8011c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011c9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ca0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8011ca4:	2100      	movs	r1, #0
 8011ca6:	4b4e      	ldr	r3, [pc, #312]	@ (8011de0 <HAL_RCC_GetSysClockFreq+0x350>)
 8011ca8:	fb03 f201 	mul.w	r2, r3, r1
 8011cac:	2300      	movs	r3, #0
 8011cae:	fb00 f303 	mul.w	r3, r0, r3
 8011cb2:	4413      	add	r3, r2
 8011cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8011de0 <HAL_RCC_GetSysClockFreq+0x350>)
 8011cb6:	fba0 1202 	umull	r1, r2, r0, r2
 8011cba:	677a      	str	r2, [r7, #116]	@ 0x74
 8011cbc:	460a      	mov	r2, r1
 8011cbe:	673a      	str	r2, [r7, #112]	@ 0x70
 8011cc0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8011cc2:	4413      	add	r3, r2
 8011cc4:	677b      	str	r3, [r7, #116]	@ 0x74
 8011cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011cca:	2200      	movs	r2, #0
 8011ccc:	633b      	str	r3, [r7, #48]	@ 0x30
 8011cce:	637a      	str	r2, [r7, #52]	@ 0x34
 8011cd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8011cd4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8011cd8:	f7f6 ffb6 	bl	8008c48 <__aeabi_uldivmod>
 8011cdc:	4602      	mov	r2, r0
 8011cde:	460b      	mov	r3, r1
 8011ce0:	4613      	mov	r3, r2
 8011ce2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011ce6:	e05b      	b.n	8011da0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8011dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011cea:	685b      	ldr	r3, [r3, #4]
 8011cec:	099b      	lsrs	r3, r3, #6
 8011cee:	2200      	movs	r2, #0
 8011cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011cf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011cfa:	623b      	str	r3, [r7, #32]
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8011d04:	4642      	mov	r2, r8
 8011d06:	464b      	mov	r3, r9
 8011d08:	f04f 0000 	mov.w	r0, #0
 8011d0c:	f04f 0100 	mov.w	r1, #0
 8011d10:	0159      	lsls	r1, r3, #5
 8011d12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011d16:	0150      	lsls	r0, r2, #5
 8011d18:	4602      	mov	r2, r0
 8011d1a:	460b      	mov	r3, r1
 8011d1c:	4641      	mov	r1, r8
 8011d1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8011d22:	4649      	mov	r1, r9
 8011d24:	eb63 0b01 	sbc.w	fp, r3, r1
 8011d28:	f04f 0200 	mov.w	r2, #0
 8011d2c:	f04f 0300 	mov.w	r3, #0
 8011d30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8011d34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8011d38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8011d3c:	ebb2 040a 	subs.w	r4, r2, sl
 8011d40:	eb63 050b 	sbc.w	r5, r3, fp
 8011d44:	f04f 0200 	mov.w	r2, #0
 8011d48:	f04f 0300 	mov.w	r3, #0
 8011d4c:	00eb      	lsls	r3, r5, #3
 8011d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011d52:	00e2      	lsls	r2, r4, #3
 8011d54:	4614      	mov	r4, r2
 8011d56:	461d      	mov	r5, r3
 8011d58:	4643      	mov	r3, r8
 8011d5a:	18e3      	adds	r3, r4, r3
 8011d5c:	603b      	str	r3, [r7, #0]
 8011d5e:	464b      	mov	r3, r9
 8011d60:	eb45 0303 	adc.w	r3, r5, r3
 8011d64:	607b      	str	r3, [r7, #4]
 8011d66:	f04f 0200 	mov.w	r2, #0
 8011d6a:	f04f 0300 	mov.w	r3, #0
 8011d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011d72:	4629      	mov	r1, r5
 8011d74:	028b      	lsls	r3, r1, #10
 8011d76:	4621      	mov	r1, r4
 8011d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8011d7c:	4621      	mov	r1, r4
 8011d7e:	028a      	lsls	r2, r1, #10
 8011d80:	4610      	mov	r0, r2
 8011d82:	4619      	mov	r1, r3
 8011d84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011d88:	2200      	movs	r2, #0
 8011d8a:	61bb      	str	r3, [r7, #24]
 8011d8c:	61fa      	str	r2, [r7, #28]
 8011d8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011d92:	f7f6 ff59 	bl	8008c48 <__aeabi_uldivmod>
 8011d96:	4602      	mov	r2, r0
 8011d98:	460b      	mov	r3, r1
 8011d9a:	4613      	mov	r3, r2
 8011d9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8011da0:	4b0d      	ldr	r3, [pc, #52]	@ (8011dd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8011da2:	685b      	ldr	r3, [r3, #4]
 8011da4:	0f1b      	lsrs	r3, r3, #28
 8011da6:	f003 0307 	and.w	r3, r3, #7
 8011daa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8011dae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011dba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8011dbe:	e003      	b.n	8011dc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8011dc0:	4b06      	ldr	r3, [pc, #24]	@ (8011ddc <HAL_RCC_GetSysClockFreq+0x34c>)
 8011dc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8011dc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8011dc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8011dcc:	4618      	mov	r0, r3
 8011dce:	3798      	adds	r7, #152	@ 0x98
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011dd6:	bf00      	nop
 8011dd8:	40023800 	.word	0x40023800
 8011ddc:	00f42400 	.word	0x00f42400
 8011de0:	017d7840 	.word	0x017d7840

08011de4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b086      	sub	sp, #24
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d101      	bne.n	8011df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011df2:	2301      	movs	r3, #1
 8011df4:	e28d      	b.n	8012312 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	f003 0301 	and.w	r3, r3, #1
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	f000 8083 	beq.w	8011f0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8011e04:	4b94      	ldr	r3, [pc, #592]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011e06:	689b      	ldr	r3, [r3, #8]
 8011e08:	f003 030c 	and.w	r3, r3, #12
 8011e0c:	2b04      	cmp	r3, #4
 8011e0e:	d019      	beq.n	8011e44 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8011e10:	4b91      	ldr	r3, [pc, #580]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011e12:	689b      	ldr	r3, [r3, #8]
 8011e14:	f003 030c 	and.w	r3, r3, #12
        || \
 8011e18:	2b08      	cmp	r3, #8
 8011e1a:	d106      	bne.n	8011e2a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8011e1c:	4b8e      	ldr	r3, [pc, #568]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011e1e:	685b      	ldr	r3, [r3, #4]
 8011e20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011e24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011e28:	d00c      	beq.n	8011e44 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011e2a:	4b8b      	ldr	r3, [pc, #556]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011e2c:	689b      	ldr	r3, [r3, #8]
 8011e2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8011e32:	2b0c      	cmp	r3, #12
 8011e34:	d112      	bne.n	8011e5c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011e36:	4b88      	ldr	r3, [pc, #544]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011e38:	685b      	ldr	r3, [r3, #4]
 8011e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011e3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011e42:	d10b      	bne.n	8011e5c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011e44:	4b84      	ldr	r3, [pc, #528]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d05b      	beq.n	8011f08 <HAL_RCC_OscConfig+0x124>
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	685b      	ldr	r3, [r3, #4]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d157      	bne.n	8011f08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8011e58:	2301      	movs	r3, #1
 8011e5a:	e25a      	b.n	8012312 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	685b      	ldr	r3, [r3, #4]
 8011e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011e64:	d106      	bne.n	8011e74 <HAL_RCC_OscConfig+0x90>
 8011e66:	4b7c      	ldr	r3, [pc, #496]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	4a7b      	ldr	r2, [pc, #492]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011e70:	6013      	str	r3, [r2, #0]
 8011e72:	e01d      	b.n	8011eb0 <HAL_RCC_OscConfig+0xcc>
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	685b      	ldr	r3, [r3, #4]
 8011e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011e7c:	d10c      	bne.n	8011e98 <HAL_RCC_OscConfig+0xb4>
 8011e7e:	4b76      	ldr	r3, [pc, #472]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	4a75      	ldr	r2, [pc, #468]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011e88:	6013      	str	r3, [r2, #0]
 8011e8a:	4b73      	ldr	r3, [pc, #460]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	4a72      	ldr	r2, [pc, #456]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011e94:	6013      	str	r3, [r2, #0]
 8011e96:	e00b      	b.n	8011eb0 <HAL_RCC_OscConfig+0xcc>
 8011e98:	4b6f      	ldr	r3, [pc, #444]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	4a6e      	ldr	r2, [pc, #440]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011ea2:	6013      	str	r3, [r2, #0]
 8011ea4:	4b6c      	ldr	r3, [pc, #432]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	4a6b      	ldr	r2, [pc, #428]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	685b      	ldr	r3, [r3, #4]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d013      	beq.n	8011ee0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011eb8:	f7fe ff6c 	bl	8010d94 <HAL_GetTick>
 8011ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011ebe:	e008      	b.n	8011ed2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011ec0:	f7fe ff68 	bl	8010d94 <HAL_GetTick>
 8011ec4:	4602      	mov	r2, r0
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	1ad3      	subs	r3, r2, r3
 8011eca:	2b64      	cmp	r3, #100	@ 0x64
 8011ecc:	d901      	bls.n	8011ed2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8011ece:	2303      	movs	r3, #3
 8011ed0:	e21f      	b.n	8012312 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011ed2:	4b61      	ldr	r3, [pc, #388]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d0f0      	beq.n	8011ec0 <HAL_RCC_OscConfig+0xdc>
 8011ede:	e014      	b.n	8011f0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011ee0:	f7fe ff58 	bl	8010d94 <HAL_GetTick>
 8011ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011ee6:	e008      	b.n	8011efa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011ee8:	f7fe ff54 	bl	8010d94 <HAL_GetTick>
 8011eec:	4602      	mov	r2, r0
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	1ad3      	subs	r3, r2, r3
 8011ef2:	2b64      	cmp	r3, #100	@ 0x64
 8011ef4:	d901      	bls.n	8011efa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8011ef6:	2303      	movs	r3, #3
 8011ef8:	e20b      	b.n	8012312 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011efa:	4b57      	ldr	r3, [pc, #348]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d1f0      	bne.n	8011ee8 <HAL_RCC_OscConfig+0x104>
 8011f06:	e000      	b.n	8011f0a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	f003 0302 	and.w	r3, r3, #2
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d06f      	beq.n	8011ff6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8011f16:	4b50      	ldr	r3, [pc, #320]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011f18:	689b      	ldr	r3, [r3, #8]
 8011f1a:	f003 030c 	and.w	r3, r3, #12
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d017      	beq.n	8011f52 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8011f22:	4b4d      	ldr	r3, [pc, #308]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011f24:	689b      	ldr	r3, [r3, #8]
 8011f26:	f003 030c 	and.w	r3, r3, #12
        || \
 8011f2a:	2b08      	cmp	r3, #8
 8011f2c:	d105      	bne.n	8011f3a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8011f2e:	4b4a      	ldr	r3, [pc, #296]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011f30:	685b      	ldr	r3, [r3, #4]
 8011f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d00b      	beq.n	8011f52 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011f3a:	4b47      	ldr	r3, [pc, #284]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011f3c:	689b      	ldr	r3, [r3, #8]
 8011f3e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8011f42:	2b0c      	cmp	r3, #12
 8011f44:	d11c      	bne.n	8011f80 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011f46:	4b44      	ldr	r3, [pc, #272]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011f48:	685b      	ldr	r3, [r3, #4]
 8011f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d116      	bne.n	8011f80 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011f52:	4b41      	ldr	r3, [pc, #260]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	f003 0302 	and.w	r3, r3, #2
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d005      	beq.n	8011f6a <HAL_RCC_OscConfig+0x186>
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	68db      	ldr	r3, [r3, #12]
 8011f62:	2b01      	cmp	r3, #1
 8011f64:	d001      	beq.n	8011f6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8011f66:	2301      	movs	r3, #1
 8011f68:	e1d3      	b.n	8012312 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011f6a:	4b3b      	ldr	r3, [pc, #236]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	691b      	ldr	r3, [r3, #16]
 8011f76:	00db      	lsls	r3, r3, #3
 8011f78:	4937      	ldr	r1, [pc, #220]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011f7a:	4313      	orrs	r3, r2
 8011f7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011f7e:	e03a      	b.n	8011ff6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	68db      	ldr	r3, [r3, #12]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d020      	beq.n	8011fca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011f88:	4b34      	ldr	r3, [pc, #208]	@ (801205c <HAL_RCC_OscConfig+0x278>)
 8011f8a:	2201      	movs	r2, #1
 8011f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011f8e:	f7fe ff01 	bl	8010d94 <HAL_GetTick>
 8011f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011f94:	e008      	b.n	8011fa8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011f96:	f7fe fefd 	bl	8010d94 <HAL_GetTick>
 8011f9a:	4602      	mov	r2, r0
 8011f9c:	693b      	ldr	r3, [r7, #16]
 8011f9e:	1ad3      	subs	r3, r2, r3
 8011fa0:	2b02      	cmp	r3, #2
 8011fa2:	d901      	bls.n	8011fa8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8011fa4:	2303      	movs	r3, #3
 8011fa6:	e1b4      	b.n	8012312 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	f003 0302 	and.w	r3, r3, #2
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d0f0      	beq.n	8011f96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011fb4:	4b28      	ldr	r3, [pc, #160]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	691b      	ldr	r3, [r3, #16]
 8011fc0:	00db      	lsls	r3, r3, #3
 8011fc2:	4925      	ldr	r1, [pc, #148]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011fc4:	4313      	orrs	r3, r2
 8011fc6:	600b      	str	r3, [r1, #0]
 8011fc8:	e015      	b.n	8011ff6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011fca:	4b24      	ldr	r3, [pc, #144]	@ (801205c <HAL_RCC_OscConfig+0x278>)
 8011fcc:	2200      	movs	r2, #0
 8011fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011fd0:	f7fe fee0 	bl	8010d94 <HAL_GetTick>
 8011fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011fd6:	e008      	b.n	8011fea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011fd8:	f7fe fedc 	bl	8010d94 <HAL_GetTick>
 8011fdc:	4602      	mov	r2, r0
 8011fde:	693b      	ldr	r3, [r7, #16]
 8011fe0:	1ad3      	subs	r3, r2, r3
 8011fe2:	2b02      	cmp	r3, #2
 8011fe4:	d901      	bls.n	8011fea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8011fe6:	2303      	movs	r3, #3
 8011fe8:	e193      	b.n	8012312 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011fea:	4b1b      	ldr	r3, [pc, #108]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	f003 0302 	and.w	r3, r3, #2
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d1f0      	bne.n	8011fd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	f003 0308 	and.w	r3, r3, #8
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d036      	beq.n	8012070 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	695b      	ldr	r3, [r3, #20]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d016      	beq.n	8012038 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801200a:	4b15      	ldr	r3, [pc, #84]	@ (8012060 <HAL_RCC_OscConfig+0x27c>)
 801200c:	2201      	movs	r2, #1
 801200e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012010:	f7fe fec0 	bl	8010d94 <HAL_GetTick>
 8012014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012016:	e008      	b.n	801202a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012018:	f7fe febc 	bl	8010d94 <HAL_GetTick>
 801201c:	4602      	mov	r2, r0
 801201e:	693b      	ldr	r3, [r7, #16]
 8012020:	1ad3      	subs	r3, r2, r3
 8012022:	2b02      	cmp	r3, #2
 8012024:	d901      	bls.n	801202a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8012026:	2303      	movs	r3, #3
 8012028:	e173      	b.n	8012312 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801202a:	4b0b      	ldr	r3, [pc, #44]	@ (8012058 <HAL_RCC_OscConfig+0x274>)
 801202c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801202e:	f003 0302 	and.w	r3, r3, #2
 8012032:	2b00      	cmp	r3, #0
 8012034:	d0f0      	beq.n	8012018 <HAL_RCC_OscConfig+0x234>
 8012036:	e01b      	b.n	8012070 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012038:	4b09      	ldr	r3, [pc, #36]	@ (8012060 <HAL_RCC_OscConfig+0x27c>)
 801203a:	2200      	movs	r2, #0
 801203c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801203e:	f7fe fea9 	bl	8010d94 <HAL_GetTick>
 8012042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012044:	e00e      	b.n	8012064 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012046:	f7fe fea5 	bl	8010d94 <HAL_GetTick>
 801204a:	4602      	mov	r2, r0
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	1ad3      	subs	r3, r2, r3
 8012050:	2b02      	cmp	r3, #2
 8012052:	d907      	bls.n	8012064 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8012054:	2303      	movs	r3, #3
 8012056:	e15c      	b.n	8012312 <HAL_RCC_OscConfig+0x52e>
 8012058:	40023800 	.word	0x40023800
 801205c:	42470000 	.word	0x42470000
 8012060:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012064:	4b8a      	ldr	r3, [pc, #552]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 8012066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012068:	f003 0302 	and.w	r3, r3, #2
 801206c:	2b00      	cmp	r3, #0
 801206e:	d1ea      	bne.n	8012046 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	f003 0304 	and.w	r3, r3, #4
 8012078:	2b00      	cmp	r3, #0
 801207a:	f000 8097 	beq.w	80121ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801207e:	2300      	movs	r3, #0
 8012080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012082:	4b83      	ldr	r3, [pc, #524]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 8012084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801208a:	2b00      	cmp	r3, #0
 801208c:	d10f      	bne.n	80120ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801208e:	2300      	movs	r3, #0
 8012090:	60bb      	str	r3, [r7, #8]
 8012092:	4b7f      	ldr	r3, [pc, #508]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 8012094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012096:	4a7e      	ldr	r2, [pc, #504]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 8012098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801209c:	6413      	str	r3, [r2, #64]	@ 0x40
 801209e:	4b7c      	ldr	r3, [pc, #496]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 80120a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80120a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80120a6:	60bb      	str	r3, [r7, #8]
 80120a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80120aa:	2301      	movs	r3, #1
 80120ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80120ae:	4b79      	ldr	r3, [pc, #484]	@ (8012294 <HAL_RCC_OscConfig+0x4b0>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d118      	bne.n	80120ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80120ba:	4b76      	ldr	r3, [pc, #472]	@ (8012294 <HAL_RCC_OscConfig+0x4b0>)
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	4a75      	ldr	r2, [pc, #468]	@ (8012294 <HAL_RCC_OscConfig+0x4b0>)
 80120c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80120c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80120c6:	f7fe fe65 	bl	8010d94 <HAL_GetTick>
 80120ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80120cc:	e008      	b.n	80120e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80120ce:	f7fe fe61 	bl	8010d94 <HAL_GetTick>
 80120d2:	4602      	mov	r2, r0
 80120d4:	693b      	ldr	r3, [r7, #16]
 80120d6:	1ad3      	subs	r3, r2, r3
 80120d8:	2b02      	cmp	r3, #2
 80120da:	d901      	bls.n	80120e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80120dc:	2303      	movs	r3, #3
 80120de:	e118      	b.n	8012312 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80120e0:	4b6c      	ldr	r3, [pc, #432]	@ (8012294 <HAL_RCC_OscConfig+0x4b0>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d0f0      	beq.n	80120ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	689b      	ldr	r3, [r3, #8]
 80120f0:	2b01      	cmp	r3, #1
 80120f2:	d106      	bne.n	8012102 <HAL_RCC_OscConfig+0x31e>
 80120f4:	4b66      	ldr	r3, [pc, #408]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 80120f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80120f8:	4a65      	ldr	r2, [pc, #404]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 80120fa:	f043 0301 	orr.w	r3, r3, #1
 80120fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8012100:	e01c      	b.n	801213c <HAL_RCC_OscConfig+0x358>
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	689b      	ldr	r3, [r3, #8]
 8012106:	2b05      	cmp	r3, #5
 8012108:	d10c      	bne.n	8012124 <HAL_RCC_OscConfig+0x340>
 801210a:	4b61      	ldr	r3, [pc, #388]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 801210c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801210e:	4a60      	ldr	r2, [pc, #384]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 8012110:	f043 0304 	orr.w	r3, r3, #4
 8012114:	6713      	str	r3, [r2, #112]	@ 0x70
 8012116:	4b5e      	ldr	r3, [pc, #376]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 8012118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801211a:	4a5d      	ldr	r2, [pc, #372]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 801211c:	f043 0301 	orr.w	r3, r3, #1
 8012120:	6713      	str	r3, [r2, #112]	@ 0x70
 8012122:	e00b      	b.n	801213c <HAL_RCC_OscConfig+0x358>
 8012124:	4b5a      	ldr	r3, [pc, #360]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 8012126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012128:	4a59      	ldr	r2, [pc, #356]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 801212a:	f023 0301 	bic.w	r3, r3, #1
 801212e:	6713      	str	r3, [r2, #112]	@ 0x70
 8012130:	4b57      	ldr	r3, [pc, #348]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 8012132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012134:	4a56      	ldr	r2, [pc, #344]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 8012136:	f023 0304 	bic.w	r3, r3, #4
 801213a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	689b      	ldr	r3, [r3, #8]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d015      	beq.n	8012170 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012144:	f7fe fe26 	bl	8010d94 <HAL_GetTick>
 8012148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801214a:	e00a      	b.n	8012162 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801214c:	f7fe fe22 	bl	8010d94 <HAL_GetTick>
 8012150:	4602      	mov	r2, r0
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	1ad3      	subs	r3, r2, r3
 8012156:	f241 3288 	movw	r2, #5000	@ 0x1388
 801215a:	4293      	cmp	r3, r2
 801215c:	d901      	bls.n	8012162 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 801215e:	2303      	movs	r3, #3
 8012160:	e0d7      	b.n	8012312 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012162:	4b4b      	ldr	r3, [pc, #300]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 8012164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012166:	f003 0302 	and.w	r3, r3, #2
 801216a:	2b00      	cmp	r3, #0
 801216c:	d0ee      	beq.n	801214c <HAL_RCC_OscConfig+0x368>
 801216e:	e014      	b.n	801219a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012170:	f7fe fe10 	bl	8010d94 <HAL_GetTick>
 8012174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012176:	e00a      	b.n	801218e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012178:	f7fe fe0c 	bl	8010d94 <HAL_GetTick>
 801217c:	4602      	mov	r2, r0
 801217e:	693b      	ldr	r3, [r7, #16]
 8012180:	1ad3      	subs	r3, r2, r3
 8012182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012186:	4293      	cmp	r3, r2
 8012188:	d901      	bls.n	801218e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801218a:	2303      	movs	r3, #3
 801218c:	e0c1      	b.n	8012312 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801218e:	4b40      	ldr	r3, [pc, #256]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 8012190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012192:	f003 0302 	and.w	r3, r3, #2
 8012196:	2b00      	cmp	r3, #0
 8012198:	d1ee      	bne.n	8012178 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801219a:	7dfb      	ldrb	r3, [r7, #23]
 801219c:	2b01      	cmp	r3, #1
 801219e:	d105      	bne.n	80121ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80121a0:	4b3b      	ldr	r3, [pc, #236]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 80121a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80121a4:	4a3a      	ldr	r2, [pc, #232]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 80121a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80121aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	699b      	ldr	r3, [r3, #24]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	f000 80ad 	beq.w	8012310 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80121b6:	4b36      	ldr	r3, [pc, #216]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 80121b8:	689b      	ldr	r3, [r3, #8]
 80121ba:	f003 030c 	and.w	r3, r3, #12
 80121be:	2b08      	cmp	r3, #8
 80121c0:	d060      	beq.n	8012284 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	699b      	ldr	r3, [r3, #24]
 80121c6:	2b02      	cmp	r3, #2
 80121c8:	d145      	bne.n	8012256 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80121ca:	4b33      	ldr	r3, [pc, #204]	@ (8012298 <HAL_RCC_OscConfig+0x4b4>)
 80121cc:	2200      	movs	r2, #0
 80121ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80121d0:	f7fe fde0 	bl	8010d94 <HAL_GetTick>
 80121d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80121d6:	e008      	b.n	80121ea <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80121d8:	f7fe fddc 	bl	8010d94 <HAL_GetTick>
 80121dc:	4602      	mov	r2, r0
 80121de:	693b      	ldr	r3, [r7, #16]
 80121e0:	1ad3      	subs	r3, r2, r3
 80121e2:	2b02      	cmp	r3, #2
 80121e4:	d901      	bls.n	80121ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80121e6:	2303      	movs	r3, #3
 80121e8:	e093      	b.n	8012312 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80121ea:	4b29      	ldr	r3, [pc, #164]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d1f0      	bne.n	80121d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	69da      	ldr	r2, [r3, #28]
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	6a1b      	ldr	r3, [r3, #32]
 80121fe:	431a      	orrs	r2, r3
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012204:	019b      	lsls	r3, r3, #6
 8012206:	431a      	orrs	r2, r3
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801220c:	085b      	lsrs	r3, r3, #1
 801220e:	3b01      	subs	r3, #1
 8012210:	041b      	lsls	r3, r3, #16
 8012212:	431a      	orrs	r2, r3
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012218:	061b      	lsls	r3, r3, #24
 801221a:	431a      	orrs	r2, r3
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012220:	071b      	lsls	r3, r3, #28
 8012222:	491b      	ldr	r1, [pc, #108]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 8012224:	4313      	orrs	r3, r2
 8012226:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012228:	4b1b      	ldr	r3, [pc, #108]	@ (8012298 <HAL_RCC_OscConfig+0x4b4>)
 801222a:	2201      	movs	r2, #1
 801222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801222e:	f7fe fdb1 	bl	8010d94 <HAL_GetTick>
 8012232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012234:	e008      	b.n	8012248 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012236:	f7fe fdad 	bl	8010d94 <HAL_GetTick>
 801223a:	4602      	mov	r2, r0
 801223c:	693b      	ldr	r3, [r7, #16]
 801223e:	1ad3      	subs	r3, r2, r3
 8012240:	2b02      	cmp	r3, #2
 8012242:	d901      	bls.n	8012248 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8012244:	2303      	movs	r3, #3
 8012246:	e064      	b.n	8012312 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012248:	4b11      	ldr	r3, [pc, #68]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012250:	2b00      	cmp	r3, #0
 8012252:	d0f0      	beq.n	8012236 <HAL_RCC_OscConfig+0x452>
 8012254:	e05c      	b.n	8012310 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012256:	4b10      	ldr	r3, [pc, #64]	@ (8012298 <HAL_RCC_OscConfig+0x4b4>)
 8012258:	2200      	movs	r2, #0
 801225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801225c:	f7fe fd9a 	bl	8010d94 <HAL_GetTick>
 8012260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012262:	e008      	b.n	8012276 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012264:	f7fe fd96 	bl	8010d94 <HAL_GetTick>
 8012268:	4602      	mov	r2, r0
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	1ad3      	subs	r3, r2, r3
 801226e:	2b02      	cmp	r3, #2
 8012270:	d901      	bls.n	8012276 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8012272:	2303      	movs	r3, #3
 8012274:	e04d      	b.n	8012312 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012276:	4b06      	ldr	r3, [pc, #24]	@ (8012290 <HAL_RCC_OscConfig+0x4ac>)
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801227e:	2b00      	cmp	r3, #0
 8012280:	d1f0      	bne.n	8012264 <HAL_RCC_OscConfig+0x480>
 8012282:	e045      	b.n	8012310 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	699b      	ldr	r3, [r3, #24]
 8012288:	2b01      	cmp	r3, #1
 801228a:	d107      	bne.n	801229c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 801228c:	2301      	movs	r3, #1
 801228e:	e040      	b.n	8012312 <HAL_RCC_OscConfig+0x52e>
 8012290:	40023800 	.word	0x40023800
 8012294:	40007000 	.word	0x40007000
 8012298:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801229c:	4b1f      	ldr	r3, [pc, #124]	@ (801231c <HAL_RCC_OscConfig+0x538>)
 801229e:	685b      	ldr	r3, [r3, #4]
 80122a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	699b      	ldr	r3, [r3, #24]
 80122a6:	2b01      	cmp	r3, #1
 80122a8:	d030      	beq.n	801230c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80122b4:	429a      	cmp	r2, r3
 80122b6:	d129      	bne.n	801230c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80122c2:	429a      	cmp	r2, r3
 80122c4:	d122      	bne.n	801230c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80122c6:	68fa      	ldr	r2, [r7, #12]
 80122c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80122cc:	4013      	ands	r3, r2
 80122ce:	687a      	ldr	r2, [r7, #4]
 80122d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80122d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80122d4:	4293      	cmp	r3, r2
 80122d6:	d119      	bne.n	801230c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122e2:	085b      	lsrs	r3, r3, #1
 80122e4:	3b01      	subs	r3, #1
 80122e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80122e8:	429a      	cmp	r2, r3
 80122ea:	d10f      	bne.n	801230c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80122f8:	429a      	cmp	r2, r3
 80122fa:	d107      	bne.n	801230c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012306:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8012308:	429a      	cmp	r2, r3
 801230a:	d001      	beq.n	8012310 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 801230c:	2301      	movs	r3, #1
 801230e:	e000      	b.n	8012312 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8012310:	2300      	movs	r3, #0
}
 8012312:	4618      	mov	r0, r3
 8012314:	3718      	adds	r7, #24
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}
 801231a:	bf00      	nop
 801231c:	40023800 	.word	0x40023800

08012320 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b082      	sub	sp, #8
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d101      	bne.n	8012332 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801232e:	2301      	movs	r3, #1
 8012330:	e07b      	b.n	801242a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012336:	2b00      	cmp	r3, #0
 8012338:	d108      	bne.n	801234c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	685b      	ldr	r3, [r3, #4]
 801233e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012342:	d009      	beq.n	8012358 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2200      	movs	r2, #0
 8012348:	61da      	str	r2, [r3, #28]
 801234a:	e005      	b.n	8012358 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2200      	movs	r2, #0
 8012350:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	2200      	movs	r2, #0
 8012356:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	2200      	movs	r2, #0
 801235c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012364:	b2db      	uxtb	r3, r3
 8012366:	2b00      	cmp	r3, #0
 8012368:	d106      	bne.n	8012378 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2200      	movs	r2, #0
 801236e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f7fe f8bc 	bl	80104f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2202      	movs	r2, #2
 801237c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	681a      	ldr	r2, [r3, #0]
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801238e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	685b      	ldr	r3, [r3, #4]
 8012394:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	689b      	ldr	r3, [r3, #8]
 801239c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80123a0:	431a      	orrs	r2, r3
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	68db      	ldr	r3, [r3, #12]
 80123a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80123aa:	431a      	orrs	r2, r3
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	691b      	ldr	r3, [r3, #16]
 80123b0:	f003 0302 	and.w	r3, r3, #2
 80123b4:	431a      	orrs	r2, r3
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	695b      	ldr	r3, [r3, #20]
 80123ba:	f003 0301 	and.w	r3, r3, #1
 80123be:	431a      	orrs	r2, r3
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	699b      	ldr	r3, [r3, #24]
 80123c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80123c8:	431a      	orrs	r2, r3
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	69db      	ldr	r3, [r3, #28]
 80123ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80123d2:	431a      	orrs	r2, r3
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	6a1b      	ldr	r3, [r3, #32]
 80123d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80123dc:	ea42 0103 	orr.w	r1, r2, r3
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	430a      	orrs	r2, r1
 80123ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	699b      	ldr	r3, [r3, #24]
 80123f4:	0c1b      	lsrs	r3, r3, #16
 80123f6:	f003 0104 	and.w	r1, r3, #4
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123fe:	f003 0210 	and.w	r2, r3, #16
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	430a      	orrs	r2, r1
 8012408:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	69da      	ldr	r2, [r3, #28]
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8012418:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2200      	movs	r2, #0
 801241e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	2201      	movs	r2, #1
 8012424:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8012428:	2300      	movs	r3, #0
}
 801242a:	4618      	mov	r0, r3
 801242c:	3708      	adds	r7, #8
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}

08012432 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8012432:	b580      	push	{r7, lr}
 8012434:	b082      	sub	sp, #8
 8012436:	af00      	add	r7, sp, #0
 8012438:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d101      	bne.n	8012444 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8012440:	2301      	movs	r3, #1
 8012442:	e01a      	b.n	801247a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2202      	movs	r2, #2
 8012448:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	681a      	ldr	r2, [r3, #0]
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801245a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f7fe f931 	bl	80106c4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2200      	movs	r2, #0
 8012466:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2200      	movs	r2, #0
 801246c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2200      	movs	r2, #0
 8012474:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8012478:	2300      	movs	r3, #0
}
 801247a:	4618      	mov	r0, r3
 801247c:	3708      	adds	r7, #8
 801247e:	46bd      	mov	sp, r7
 8012480:	bd80      	pop	{r7, pc}

08012482 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012482:	b580      	push	{r7, lr}
 8012484:	b088      	sub	sp, #32
 8012486:	af00      	add	r7, sp, #0
 8012488:	60f8      	str	r0, [r7, #12]
 801248a:	60b9      	str	r1, [r7, #8]
 801248c:	603b      	str	r3, [r7, #0]
 801248e:	4613      	mov	r3, r2
 8012490:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012492:	f7fe fc7f 	bl	8010d94 <HAL_GetTick>
 8012496:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8012498:	88fb      	ldrh	r3, [r7, #6]
 801249a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80124a2:	b2db      	uxtb	r3, r3
 80124a4:	2b01      	cmp	r3, #1
 80124a6:	d001      	beq.n	80124ac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80124a8:	2302      	movs	r3, #2
 80124aa:	e12a      	b.n	8012702 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80124ac:	68bb      	ldr	r3, [r7, #8]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d002      	beq.n	80124b8 <HAL_SPI_Transmit+0x36>
 80124b2:	88fb      	ldrh	r3, [r7, #6]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d101      	bne.n	80124bc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80124b8:	2301      	movs	r3, #1
 80124ba:	e122      	b.n	8012702 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80124c2:	2b01      	cmp	r3, #1
 80124c4:	d101      	bne.n	80124ca <HAL_SPI_Transmit+0x48>
 80124c6:	2302      	movs	r3, #2
 80124c8:	e11b      	b.n	8012702 <HAL_SPI_Transmit+0x280>
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	2201      	movs	r2, #1
 80124ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	2203      	movs	r2, #3
 80124d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	2200      	movs	r2, #0
 80124de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	68ba      	ldr	r2, [r7, #8]
 80124e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	88fa      	ldrh	r2, [r7, #6]
 80124ea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	88fa      	ldrh	r2, [r7, #6]
 80124f0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	2200      	movs	r2, #0
 80124f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	2200      	movs	r2, #0
 80124fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	2200      	movs	r2, #0
 8012502:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	2200      	movs	r2, #0
 8012508:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	2200      	movs	r2, #0
 801250e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	689b      	ldr	r3, [r3, #8]
 8012514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012518:	d10f      	bne.n	801253a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	681a      	ldr	r2, [r3, #0]
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012528:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	681a      	ldr	r2, [r3, #0]
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012538:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012544:	2b40      	cmp	r3, #64	@ 0x40
 8012546:	d007      	beq.n	8012558 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	681a      	ldr	r2, [r3, #0]
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012556:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	68db      	ldr	r3, [r3, #12]
 801255c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012560:	d152      	bne.n	8012608 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	685b      	ldr	r3, [r3, #4]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d002      	beq.n	8012570 <HAL_SPI_Transmit+0xee>
 801256a:	8b7b      	ldrh	r3, [r7, #26]
 801256c:	2b01      	cmp	r3, #1
 801256e:	d145      	bne.n	80125fc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012574:	881a      	ldrh	r2, [r3, #0]
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012580:	1c9a      	adds	r2, r3, #2
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801258a:	b29b      	uxth	r3, r3
 801258c:	3b01      	subs	r3, #1
 801258e:	b29a      	uxth	r2, r3
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8012594:	e032      	b.n	80125fc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	689b      	ldr	r3, [r3, #8]
 801259c:	f003 0302 	and.w	r3, r3, #2
 80125a0:	2b02      	cmp	r3, #2
 80125a2:	d112      	bne.n	80125ca <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125a8:	881a      	ldrh	r2, [r3, #0]
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125b4:	1c9a      	adds	r2, r3, #2
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80125be:	b29b      	uxth	r3, r3
 80125c0:	3b01      	subs	r3, #1
 80125c2:	b29a      	uxth	r2, r3
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80125c8:	e018      	b.n	80125fc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80125ca:	f7fe fbe3 	bl	8010d94 <HAL_GetTick>
 80125ce:	4602      	mov	r2, r0
 80125d0:	69fb      	ldr	r3, [r7, #28]
 80125d2:	1ad3      	subs	r3, r2, r3
 80125d4:	683a      	ldr	r2, [r7, #0]
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d803      	bhi.n	80125e2 <HAL_SPI_Transmit+0x160>
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125e0:	d102      	bne.n	80125e8 <HAL_SPI_Transmit+0x166>
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d109      	bne.n	80125fc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	2201      	movs	r2, #1
 80125ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	2200      	movs	r2, #0
 80125f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80125f8:	2303      	movs	r3, #3
 80125fa:	e082      	b.n	8012702 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012600:	b29b      	uxth	r3, r3
 8012602:	2b00      	cmp	r3, #0
 8012604:	d1c7      	bne.n	8012596 <HAL_SPI_Transmit+0x114>
 8012606:	e053      	b.n	80126b0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	685b      	ldr	r3, [r3, #4]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d002      	beq.n	8012616 <HAL_SPI_Transmit+0x194>
 8012610:	8b7b      	ldrh	r3, [r7, #26]
 8012612:	2b01      	cmp	r3, #1
 8012614:	d147      	bne.n	80126a6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	330c      	adds	r3, #12
 8012620:	7812      	ldrb	r2, [r2, #0]
 8012622:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012628:	1c5a      	adds	r2, r3, #1
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012632:	b29b      	uxth	r3, r3
 8012634:	3b01      	subs	r3, #1
 8012636:	b29a      	uxth	r2, r3
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 801263c:	e033      	b.n	80126a6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	689b      	ldr	r3, [r3, #8]
 8012644:	f003 0302 	and.w	r3, r3, #2
 8012648:	2b02      	cmp	r3, #2
 801264a:	d113      	bne.n	8012674 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	330c      	adds	r3, #12
 8012656:	7812      	ldrb	r2, [r2, #0]
 8012658:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801265e:	1c5a      	adds	r2, r3, #1
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012668:	b29b      	uxth	r3, r3
 801266a:	3b01      	subs	r3, #1
 801266c:	b29a      	uxth	r2, r3
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	86da      	strh	r2, [r3, #54]	@ 0x36
 8012672:	e018      	b.n	80126a6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012674:	f7fe fb8e 	bl	8010d94 <HAL_GetTick>
 8012678:	4602      	mov	r2, r0
 801267a:	69fb      	ldr	r3, [r7, #28]
 801267c:	1ad3      	subs	r3, r2, r3
 801267e:	683a      	ldr	r2, [r7, #0]
 8012680:	429a      	cmp	r2, r3
 8012682:	d803      	bhi.n	801268c <HAL_SPI_Transmit+0x20a>
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	f1b3 3fff 	cmp.w	r3, #4294967295
 801268a:	d102      	bne.n	8012692 <HAL_SPI_Transmit+0x210>
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d109      	bne.n	80126a6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	2201      	movs	r2, #1
 8012696:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	2200      	movs	r2, #0
 801269e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80126a2:	2303      	movs	r3, #3
 80126a4:	e02d      	b.n	8012702 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80126aa:	b29b      	uxth	r3, r3
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d1c6      	bne.n	801263e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80126b0:	69fa      	ldr	r2, [r7, #28]
 80126b2:	6839      	ldr	r1, [r7, #0]
 80126b4:	68f8      	ldr	r0, [r7, #12]
 80126b6:	f000 ff31 	bl	801351c <SPI_EndRxTxTransaction>
 80126ba:	4603      	mov	r3, r0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d002      	beq.n	80126c6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	2220      	movs	r2, #32
 80126c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	689b      	ldr	r3, [r3, #8]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d10a      	bne.n	80126e4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80126ce:	2300      	movs	r3, #0
 80126d0:	617b      	str	r3, [r7, #20]
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	68db      	ldr	r3, [r3, #12]
 80126d8:	617b      	str	r3, [r7, #20]
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	689b      	ldr	r3, [r3, #8]
 80126e0:	617b      	str	r3, [r7, #20]
 80126e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	2201      	movs	r2, #1
 80126e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	2200      	movs	r2, #0
 80126f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d001      	beq.n	8012700 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80126fc:	2301      	movs	r3, #1
 80126fe:	e000      	b.n	8012702 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8012700:	2300      	movs	r3, #0
  }
}
 8012702:	4618      	mov	r0, r3
 8012704:	3720      	adds	r7, #32
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}

0801270a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801270a:	b580      	push	{r7, lr}
 801270c:	b088      	sub	sp, #32
 801270e:	af02      	add	r7, sp, #8
 8012710:	60f8      	str	r0, [r7, #12]
 8012712:	60b9      	str	r1, [r7, #8]
 8012714:	603b      	str	r3, [r7, #0]
 8012716:	4613      	mov	r3, r2
 8012718:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012720:	b2db      	uxtb	r3, r3
 8012722:	2b01      	cmp	r3, #1
 8012724:	d001      	beq.n	801272a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8012726:	2302      	movs	r3, #2
 8012728:	e104      	b.n	8012934 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d002      	beq.n	8012736 <HAL_SPI_Receive+0x2c>
 8012730:	88fb      	ldrh	r3, [r7, #6]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d101      	bne.n	801273a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8012736:	2301      	movs	r3, #1
 8012738:	e0fc      	b.n	8012934 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	685b      	ldr	r3, [r3, #4]
 801273e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012742:	d112      	bne.n	801276a <HAL_SPI_Receive+0x60>
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	689b      	ldr	r3, [r3, #8]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d10e      	bne.n	801276a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	2204      	movs	r2, #4
 8012750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8012754:	88fa      	ldrh	r2, [r7, #6]
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	9300      	str	r3, [sp, #0]
 801275a:	4613      	mov	r3, r2
 801275c:	68ba      	ldr	r2, [r7, #8]
 801275e:	68b9      	ldr	r1, [r7, #8]
 8012760:	68f8      	ldr	r0, [r7, #12]
 8012762:	f000 f8eb 	bl	801293c <HAL_SPI_TransmitReceive>
 8012766:	4603      	mov	r3, r0
 8012768:	e0e4      	b.n	8012934 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801276a:	f7fe fb13 	bl	8010d94 <HAL_GetTick>
 801276e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8012776:	2b01      	cmp	r3, #1
 8012778:	d101      	bne.n	801277e <HAL_SPI_Receive+0x74>
 801277a:	2302      	movs	r3, #2
 801277c:	e0da      	b.n	8012934 <HAL_SPI_Receive+0x22a>
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	2201      	movs	r2, #1
 8012782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	2204      	movs	r2, #4
 801278a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	2200      	movs	r2, #0
 8012792:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	68ba      	ldr	r2, [r7, #8]
 8012798:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	88fa      	ldrh	r2, [r7, #6]
 801279e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	88fa      	ldrh	r2, [r7, #6]
 80127a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	2200      	movs	r2, #0
 80127aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	2200      	movs	r2, #0
 80127b0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	2200      	movs	r2, #0
 80127b6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	2200      	movs	r2, #0
 80127bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	2200      	movs	r2, #0
 80127c2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	689b      	ldr	r3, [r3, #8]
 80127c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80127cc:	d10f      	bne.n	80127ee <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	681a      	ldr	r2, [r3, #0]
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80127dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	681a      	ldr	r2, [r3, #0]
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80127ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80127f8:	2b40      	cmp	r3, #64	@ 0x40
 80127fa:	d007      	beq.n	801280c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	681a      	ldr	r2, [r3, #0]
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801280a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	68db      	ldr	r3, [r3, #12]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d170      	bne.n	80128f6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8012814:	e035      	b.n	8012882 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	689b      	ldr	r3, [r3, #8]
 801281c:	f003 0301 	and.w	r3, r3, #1
 8012820:	2b01      	cmp	r3, #1
 8012822:	d115      	bne.n	8012850 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	f103 020c 	add.w	r2, r3, #12
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012830:	7812      	ldrb	r2, [r2, #0]
 8012832:	b2d2      	uxtb	r2, r2
 8012834:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801283a:	1c5a      	adds	r2, r3, #1
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012844:	b29b      	uxth	r3, r3
 8012846:	3b01      	subs	r3, #1
 8012848:	b29a      	uxth	r2, r3
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801284e:	e018      	b.n	8012882 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012850:	f7fe faa0 	bl	8010d94 <HAL_GetTick>
 8012854:	4602      	mov	r2, r0
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	1ad3      	subs	r3, r2, r3
 801285a:	683a      	ldr	r2, [r7, #0]
 801285c:	429a      	cmp	r2, r3
 801285e:	d803      	bhi.n	8012868 <HAL_SPI_Receive+0x15e>
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012866:	d102      	bne.n	801286e <HAL_SPI_Receive+0x164>
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d109      	bne.n	8012882 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	2201      	movs	r2, #1
 8012872:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	2200      	movs	r2, #0
 801287a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 801287e:	2303      	movs	r3, #3
 8012880:	e058      	b.n	8012934 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012886:	b29b      	uxth	r3, r3
 8012888:	2b00      	cmp	r3, #0
 801288a:	d1c4      	bne.n	8012816 <HAL_SPI_Receive+0x10c>
 801288c:	e038      	b.n	8012900 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	689b      	ldr	r3, [r3, #8]
 8012894:	f003 0301 	and.w	r3, r3, #1
 8012898:	2b01      	cmp	r3, #1
 801289a:	d113      	bne.n	80128c4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	68da      	ldr	r2, [r3, #12]
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80128a6:	b292      	uxth	r2, r2
 80128a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80128ae:	1c9a      	adds	r2, r3, #2
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80128b8:	b29b      	uxth	r3, r3
 80128ba:	3b01      	subs	r3, #1
 80128bc:	b29a      	uxth	r2, r3
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80128c2:	e018      	b.n	80128f6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80128c4:	f7fe fa66 	bl	8010d94 <HAL_GetTick>
 80128c8:	4602      	mov	r2, r0
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	1ad3      	subs	r3, r2, r3
 80128ce:	683a      	ldr	r2, [r7, #0]
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d803      	bhi.n	80128dc <HAL_SPI_Receive+0x1d2>
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128da:	d102      	bne.n	80128e2 <HAL_SPI_Receive+0x1d8>
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d109      	bne.n	80128f6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	2201      	movs	r2, #1
 80128e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	2200      	movs	r2, #0
 80128ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80128f2:	2303      	movs	r3, #3
 80128f4:	e01e      	b.n	8012934 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d1c6      	bne.n	801288e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012900:	697a      	ldr	r2, [r7, #20]
 8012902:	6839      	ldr	r1, [r7, #0]
 8012904:	68f8      	ldr	r0, [r7, #12]
 8012906:	f000 fda3 	bl	8013450 <SPI_EndRxTransaction>
 801290a:	4603      	mov	r3, r0
 801290c:	2b00      	cmp	r3, #0
 801290e:	d002      	beq.n	8012916 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	2220      	movs	r2, #32
 8012914:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	2201      	movs	r2, #1
 801291a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	2200      	movs	r2, #0
 8012922:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801292a:	2b00      	cmp	r3, #0
 801292c:	d001      	beq.n	8012932 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 801292e:	2301      	movs	r3, #1
 8012930:	e000      	b.n	8012934 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8012932:	2300      	movs	r3, #0
  }
}
 8012934:	4618      	mov	r0, r3
 8012936:	3718      	adds	r7, #24
 8012938:	46bd      	mov	sp, r7
 801293a:	bd80      	pop	{r7, pc}

0801293c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b08a      	sub	sp, #40	@ 0x28
 8012940:	af00      	add	r7, sp, #0
 8012942:	60f8      	str	r0, [r7, #12]
 8012944:	60b9      	str	r1, [r7, #8]
 8012946:	607a      	str	r2, [r7, #4]
 8012948:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801294a:	2301      	movs	r3, #1
 801294c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801294e:	f7fe fa21 	bl	8010d94 <HAL_GetTick>
 8012952:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801295a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	685b      	ldr	r3, [r3, #4]
 8012960:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8012962:	887b      	ldrh	r3, [r7, #2]
 8012964:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8012966:	7ffb      	ldrb	r3, [r7, #31]
 8012968:	2b01      	cmp	r3, #1
 801296a:	d00c      	beq.n	8012986 <HAL_SPI_TransmitReceive+0x4a>
 801296c:	69bb      	ldr	r3, [r7, #24]
 801296e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012972:	d106      	bne.n	8012982 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	689b      	ldr	r3, [r3, #8]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d102      	bne.n	8012982 <HAL_SPI_TransmitReceive+0x46>
 801297c:	7ffb      	ldrb	r3, [r7, #31]
 801297e:	2b04      	cmp	r3, #4
 8012980:	d001      	beq.n	8012986 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8012982:	2302      	movs	r3, #2
 8012984:	e17f      	b.n	8012c86 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d005      	beq.n	8012998 <HAL_SPI_TransmitReceive+0x5c>
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d002      	beq.n	8012998 <HAL_SPI_TransmitReceive+0x5c>
 8012992:	887b      	ldrh	r3, [r7, #2]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d101      	bne.n	801299c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8012998:	2301      	movs	r3, #1
 801299a:	e174      	b.n	8012c86 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80129a2:	2b01      	cmp	r3, #1
 80129a4:	d101      	bne.n	80129aa <HAL_SPI_TransmitReceive+0x6e>
 80129a6:	2302      	movs	r3, #2
 80129a8:	e16d      	b.n	8012c86 <HAL_SPI_TransmitReceive+0x34a>
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	2201      	movs	r2, #1
 80129ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80129b8:	b2db      	uxtb	r3, r3
 80129ba:	2b04      	cmp	r3, #4
 80129bc:	d003      	beq.n	80129c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	2205      	movs	r2, #5
 80129c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	2200      	movs	r2, #0
 80129ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	687a      	ldr	r2, [r7, #4]
 80129d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	887a      	ldrh	r2, [r7, #2]
 80129d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	887a      	ldrh	r2, [r7, #2]
 80129dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	68ba      	ldr	r2, [r7, #8]
 80129e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	887a      	ldrh	r2, [r7, #2]
 80129e8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	887a      	ldrh	r2, [r7, #2]
 80129ee:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	2200      	movs	r2, #0
 80129f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	2200      	movs	r2, #0
 80129fa:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012a06:	2b40      	cmp	r3, #64	@ 0x40
 8012a08:	d007      	beq.n	8012a1a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	681a      	ldr	r2, [r3, #0]
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012a18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	68db      	ldr	r3, [r3, #12]
 8012a1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012a22:	d17e      	bne.n	8012b22 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	685b      	ldr	r3, [r3, #4]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d002      	beq.n	8012a32 <HAL_SPI_TransmitReceive+0xf6>
 8012a2c:	8afb      	ldrh	r3, [r7, #22]
 8012a2e:	2b01      	cmp	r3, #1
 8012a30:	d16c      	bne.n	8012b0c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a36:	881a      	ldrh	r2, [r3, #0]
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a42:	1c9a      	adds	r2, r3, #2
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012a4c:	b29b      	uxth	r3, r3
 8012a4e:	3b01      	subs	r3, #1
 8012a50:	b29a      	uxth	r2, r3
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012a56:	e059      	b.n	8012b0c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	689b      	ldr	r3, [r3, #8]
 8012a5e:	f003 0302 	and.w	r3, r3, #2
 8012a62:	2b02      	cmp	r3, #2
 8012a64:	d11b      	bne.n	8012a9e <HAL_SPI_TransmitReceive+0x162>
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012a6a:	b29b      	uxth	r3, r3
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d016      	beq.n	8012a9e <HAL_SPI_TransmitReceive+0x162>
 8012a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a72:	2b01      	cmp	r3, #1
 8012a74:	d113      	bne.n	8012a9e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a7a:	881a      	ldrh	r2, [r3, #0]
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a86:	1c9a      	adds	r2, r3, #2
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012a90:	b29b      	uxth	r3, r3
 8012a92:	3b01      	subs	r3, #1
 8012a94:	b29a      	uxth	r2, r3
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	689b      	ldr	r3, [r3, #8]
 8012aa4:	f003 0301 	and.w	r3, r3, #1
 8012aa8:	2b01      	cmp	r3, #1
 8012aaa:	d119      	bne.n	8012ae0 <HAL_SPI_TransmitReceive+0x1a4>
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012ab0:	b29b      	uxth	r3, r3
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d014      	beq.n	8012ae0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	68da      	ldr	r2, [r3, #12]
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ac0:	b292      	uxth	r2, r2
 8012ac2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ac8:	1c9a      	adds	r2, r3, #2
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012ad2:	b29b      	uxth	r3, r3
 8012ad4:	3b01      	subs	r3, #1
 8012ad6:	b29a      	uxth	r2, r3
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012adc:	2301      	movs	r3, #1
 8012ade:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8012ae0:	f7fe f958 	bl	8010d94 <HAL_GetTick>
 8012ae4:	4602      	mov	r2, r0
 8012ae6:	6a3b      	ldr	r3, [r7, #32]
 8012ae8:	1ad3      	subs	r3, r2, r3
 8012aea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012aec:	429a      	cmp	r2, r3
 8012aee:	d80d      	bhi.n	8012b0c <HAL_SPI_TransmitReceive+0x1d0>
 8012af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012af6:	d009      	beq.n	8012b0c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	2201      	movs	r2, #1
 8012afc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	2200      	movs	r2, #0
 8012b04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8012b08:	2303      	movs	r3, #3
 8012b0a:	e0bc      	b.n	8012c86 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012b10:	b29b      	uxth	r3, r3
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d1a0      	bne.n	8012a58 <HAL_SPI_TransmitReceive+0x11c>
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012b1a:	b29b      	uxth	r3, r3
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d19b      	bne.n	8012a58 <HAL_SPI_TransmitReceive+0x11c>
 8012b20:	e082      	b.n	8012c28 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	685b      	ldr	r3, [r3, #4]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d002      	beq.n	8012b30 <HAL_SPI_TransmitReceive+0x1f4>
 8012b2a:	8afb      	ldrh	r3, [r7, #22]
 8012b2c:	2b01      	cmp	r3, #1
 8012b2e:	d171      	bne.n	8012c14 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	330c      	adds	r3, #12
 8012b3a:	7812      	ldrb	r2, [r2, #0]
 8012b3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b42:	1c5a      	adds	r2, r3, #1
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012b4c:	b29b      	uxth	r3, r3
 8012b4e:	3b01      	subs	r3, #1
 8012b50:	b29a      	uxth	r2, r3
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012b56:	e05d      	b.n	8012c14 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	689b      	ldr	r3, [r3, #8]
 8012b5e:	f003 0302 	and.w	r3, r3, #2
 8012b62:	2b02      	cmp	r3, #2
 8012b64:	d11c      	bne.n	8012ba0 <HAL_SPI_TransmitReceive+0x264>
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012b6a:	b29b      	uxth	r3, r3
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d017      	beq.n	8012ba0 <HAL_SPI_TransmitReceive+0x264>
 8012b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b72:	2b01      	cmp	r3, #1
 8012b74:	d114      	bne.n	8012ba0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	330c      	adds	r3, #12
 8012b80:	7812      	ldrb	r2, [r2, #0]
 8012b82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b88:	1c5a      	adds	r2, r3, #1
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012b92:	b29b      	uxth	r3, r3
 8012b94:	3b01      	subs	r3, #1
 8012b96:	b29a      	uxth	r2, r3
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	689b      	ldr	r3, [r3, #8]
 8012ba6:	f003 0301 	and.w	r3, r3, #1
 8012baa:	2b01      	cmp	r3, #1
 8012bac:	d119      	bne.n	8012be2 <HAL_SPI_TransmitReceive+0x2a6>
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012bb2:	b29b      	uxth	r3, r3
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d014      	beq.n	8012be2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	68da      	ldr	r2, [r3, #12]
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012bc2:	b2d2      	uxtb	r2, r2
 8012bc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012bca:	1c5a      	adds	r2, r3, #1
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012bd4:	b29b      	uxth	r3, r3
 8012bd6:	3b01      	subs	r3, #1
 8012bd8:	b29a      	uxth	r2, r3
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012bde:	2301      	movs	r3, #1
 8012be0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8012be2:	f7fe f8d7 	bl	8010d94 <HAL_GetTick>
 8012be6:	4602      	mov	r2, r0
 8012be8:	6a3b      	ldr	r3, [r7, #32]
 8012bea:	1ad3      	subs	r3, r2, r3
 8012bec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	d803      	bhi.n	8012bfa <HAL_SPI_TransmitReceive+0x2be>
 8012bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bf8:	d102      	bne.n	8012c00 <HAL_SPI_TransmitReceive+0x2c4>
 8012bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d109      	bne.n	8012c14 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	2201      	movs	r2, #1
 8012c04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8012c10:	2303      	movs	r3, #3
 8012c12:	e038      	b.n	8012c86 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012c18:	b29b      	uxth	r3, r3
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d19c      	bne.n	8012b58 <HAL_SPI_TransmitReceive+0x21c>
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012c22:	b29b      	uxth	r3, r3
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d197      	bne.n	8012b58 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012c28:	6a3a      	ldr	r2, [r7, #32]
 8012c2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012c2c:	68f8      	ldr	r0, [r7, #12]
 8012c2e:	f000 fc75 	bl	801351c <SPI_EndRxTxTransaction>
 8012c32:	4603      	mov	r3, r0
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d008      	beq.n	8012c4a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	2220      	movs	r2, #32
 8012c3c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	2200      	movs	r2, #0
 8012c42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8012c46:	2301      	movs	r3, #1
 8012c48:	e01d      	b.n	8012c86 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	689b      	ldr	r3, [r3, #8]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d10a      	bne.n	8012c68 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012c52:	2300      	movs	r3, #0
 8012c54:	613b      	str	r3, [r7, #16]
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	68db      	ldr	r3, [r3, #12]
 8012c5c:	613b      	str	r3, [r7, #16]
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	689b      	ldr	r3, [r3, #8]
 8012c64:	613b      	str	r3, [r7, #16]
 8012c66:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	2201      	movs	r2, #1
 8012c6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	2200      	movs	r2, #0
 8012c74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d001      	beq.n	8012c84 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8012c80:	2301      	movs	r3, #1
 8012c82:	e000      	b.n	8012c86 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8012c84:	2300      	movs	r3, #0
  }
}
 8012c86:	4618      	mov	r0, r3
 8012c88:	3728      	adds	r7, #40	@ 0x28
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}
	...

08012c90 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b084      	sub	sp, #16
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	60f8      	str	r0, [r7, #12]
 8012c98:	60b9      	str	r1, [r7, #8]
 8012c9a:	4613      	mov	r3, r2
 8012c9c:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012ca4:	b2db      	uxtb	r3, r3
 8012ca6:	2b01      	cmp	r3, #1
 8012ca8:	d001      	beq.n	8012cae <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8012caa:	2302      	movs	r3, #2
 8012cac:	e07f      	b.n	8012dae <HAL_SPI_Receive_IT+0x11e>
  }

  if ((pData == NULL) || (Size == 0U))
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d002      	beq.n	8012cba <HAL_SPI_Receive_IT+0x2a>
 8012cb4:	88fb      	ldrh	r3, [r7, #6]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d101      	bne.n	8012cbe <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 8012cba:	2301      	movs	r3, #1
 8012cbc:	e077      	b.n	8012dae <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	689b      	ldr	r3, [r3, #8]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d110      	bne.n	8012ce8 <HAL_SPI_Receive_IT+0x58>
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	685b      	ldr	r3, [r3, #4]
 8012cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012cce:	d10b      	bne.n	8012ce8 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	2204      	movs	r2, #4
 8012cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8012cd8:	88fb      	ldrh	r3, [r7, #6]
 8012cda:	68ba      	ldr	r2, [r7, #8]
 8012cdc:	68b9      	ldr	r1, [r7, #8]
 8012cde:	68f8      	ldr	r0, [r7, #12]
 8012ce0:	f000 f86e 	bl	8012dc0 <HAL_SPI_TransmitReceive_IT>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	e062      	b.n	8012dae <HAL_SPI_Receive_IT+0x11e>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8012cee:	2b01      	cmp	r3, #1
 8012cf0:	d101      	bne.n	8012cf6 <HAL_SPI_Receive_IT+0x66>
 8012cf2:	2302      	movs	r3, #2
 8012cf4:	e05b      	b.n	8012dae <HAL_SPI_Receive_IT+0x11e>
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	2201      	movs	r2, #1
 8012cfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	2204      	movs	r2, #4
 8012d02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	2200      	movs	r2, #0
 8012d0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	68ba      	ldr	r2, [r7, #8]
 8012d10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	88fa      	ldrh	r2, [r7, #6]
 8012d16:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	88fa      	ldrh	r2, [r7, #6]
 8012d1c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	2200      	movs	r2, #0
 8012d22:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	2200      	movs	r2, #0
 8012d28:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	2200      	movs	r2, #0
 8012d34:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	68db      	ldr	r3, [r3, #12]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d003      	beq.n	8012d46 <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	4a1d      	ldr	r2, [pc, #116]	@ (8012db8 <HAL_SPI_Receive_IT+0x128>)
 8012d42:	641a      	str	r2, [r3, #64]	@ 0x40
 8012d44:	e002      	b.n	8012d4c <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	4a1c      	ldr	r2, [pc, #112]	@ (8012dbc <HAL_SPI_Receive_IT+0x12c>)
 8012d4a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	689b      	ldr	r3, [r3, #8]
 8012d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012d54:	d10f      	bne.n	8012d76 <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	681a      	ldr	r2, [r3, #0]
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012d64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	681a      	ldr	r2, [r3, #0]
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8012d74:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012d80:	2b40      	cmp	r3, #64	@ 0x40
 8012d82:	d007      	beq.n	8012d94 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	681a      	ldr	r2, [r3, #0]
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012d92:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	2200      	movs	r2, #0
 8012d98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	685a      	ldr	r2, [r3, #4]
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8012daa:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012dac:	2300      	movs	r3, #0
}
 8012dae:	4618      	mov	r0, r3
 8012db0:	3710      	adds	r7, #16
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}
 8012db6:	bf00      	nop
 8012db8:	080132f9 	.word	0x080132f9
 8012dbc:	080132af 	.word	0x080132af

08012dc0 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8012dc0:	b480      	push	{r7}
 8012dc2:	b087      	sub	sp, #28
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	60f8      	str	r0, [r7, #12]
 8012dc8:	60b9      	str	r1, [r7, #8]
 8012dca:	607a      	str	r2, [r7, #4]
 8012dcc:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012dd4:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	685b      	ldr	r3, [r3, #4]
 8012dda:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8012ddc:	7dfb      	ldrb	r3, [r7, #23]
 8012dde:	2b01      	cmp	r3, #1
 8012de0:	d00c      	beq.n	8012dfc <HAL_SPI_TransmitReceive_IT+0x3c>
 8012de2:	693b      	ldr	r3, [r7, #16]
 8012de4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012de8:	d106      	bne.n	8012df8 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	689b      	ldr	r3, [r3, #8]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d102      	bne.n	8012df8 <HAL_SPI_TransmitReceive_IT+0x38>
 8012df2:	7dfb      	ldrb	r3, [r7, #23]
 8012df4:	2b04      	cmp	r3, #4
 8012df6:	d001      	beq.n	8012dfc <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8012df8:	2302      	movs	r3, #2
 8012dfa:	e061      	b.n	8012ec0 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d005      	beq.n	8012e0e <HAL_SPI_TransmitReceive_IT+0x4e>
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d002      	beq.n	8012e0e <HAL_SPI_TransmitReceive_IT+0x4e>
 8012e08:	887b      	ldrh	r3, [r7, #2]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d101      	bne.n	8012e12 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8012e0e:	2301      	movs	r3, #1
 8012e10:	e056      	b.n	8012ec0 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8012e18:	2b01      	cmp	r3, #1
 8012e1a:	d101      	bne.n	8012e20 <HAL_SPI_TransmitReceive_IT+0x60>
 8012e1c:	2302      	movs	r3, #2
 8012e1e:	e04f      	b.n	8012ec0 <HAL_SPI_TransmitReceive_IT+0x100>
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	2201      	movs	r2, #1
 8012e24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012e2e:	b2db      	uxtb	r3, r3
 8012e30:	2b04      	cmp	r3, #4
 8012e32:	d003      	beq.n	8012e3c <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	2205      	movs	r2, #5
 8012e38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	2200      	movs	r2, #0
 8012e40:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	68ba      	ldr	r2, [r7, #8]
 8012e46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	887a      	ldrh	r2, [r7, #2]
 8012e4c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	887a      	ldrh	r2, [r7, #2]
 8012e52:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	687a      	ldr	r2, [r7, #4]
 8012e58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	887a      	ldrh	r2, [r7, #2]
 8012e5e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	887a      	ldrh	r2, [r7, #2]
 8012e64:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	68db      	ldr	r3, [r3, #12]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d006      	beq.n	8012e7c <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	4a16      	ldr	r2, [pc, #88]	@ (8012ecc <HAL_SPI_TransmitReceive_IT+0x10c>)
 8012e72:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	4a16      	ldr	r2, [pc, #88]	@ (8012ed0 <HAL_SPI_TransmitReceive_IT+0x110>)
 8012e78:	645a      	str	r2, [r3, #68]	@ 0x44
 8012e7a:	e005      	b.n	8012e88 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	4a15      	ldr	r2, [pc, #84]	@ (8012ed4 <HAL_SPI_TransmitReceive_IT+0x114>)
 8012e80:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	4a14      	ldr	r2, [pc, #80]	@ (8012ed8 <HAL_SPI_TransmitReceive_IT+0x118>)
 8012e86:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e92:	2b40      	cmp	r3, #64	@ 0x40
 8012e94:	d007      	beq.n	8012ea6 <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	681a      	ldr	r2, [r3, #0]
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012ea4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	685a      	ldr	r2, [r3, #4]
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8012ebc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012ebe:	2300      	movs	r3, #0
}
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	371c      	adds	r7, #28
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eca:	4770      	bx	lr
 8012ecc:	080131f1 	.word	0x080131f1
 8012ed0:	08013251 	.word	0x08013251
 8012ed4:	0801312d 	.word	0x0801312d
 8012ed8:	08013191 	.word	0x08013191

08012edc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b088      	sub	sp, #32
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	685b      	ldr	r3, [r3, #4]
 8012eea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	689b      	ldr	r3, [r3, #8]
 8012ef2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8012ef4:	69bb      	ldr	r3, [r7, #24]
 8012ef6:	099b      	lsrs	r3, r3, #6
 8012ef8:	f003 0301 	and.w	r3, r3, #1
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d10f      	bne.n	8012f20 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8012f00:	69bb      	ldr	r3, [r7, #24]
 8012f02:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d00a      	beq.n	8012f20 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8012f0a:	69fb      	ldr	r3, [r7, #28]
 8012f0c:	099b      	lsrs	r3, r3, #6
 8012f0e:	f003 0301 	and.w	r3, r3, #1
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d004      	beq.n	8012f20 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f1a:	6878      	ldr	r0, [r7, #4]
 8012f1c:	4798      	blx	r3
    return;
 8012f1e:	e0d7      	b.n	80130d0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8012f20:	69bb      	ldr	r3, [r7, #24]
 8012f22:	085b      	lsrs	r3, r3, #1
 8012f24:	f003 0301 	and.w	r3, r3, #1
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d00a      	beq.n	8012f42 <HAL_SPI_IRQHandler+0x66>
 8012f2c:	69fb      	ldr	r3, [r7, #28]
 8012f2e:	09db      	lsrs	r3, r3, #7
 8012f30:	f003 0301 	and.w	r3, r3, #1
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d004      	beq.n	8012f42 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012f3c:	6878      	ldr	r0, [r7, #4]
 8012f3e:	4798      	blx	r3
    return;
 8012f40:	e0c6      	b.n	80130d0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8012f42:	69bb      	ldr	r3, [r7, #24]
 8012f44:	095b      	lsrs	r3, r3, #5
 8012f46:	f003 0301 	and.w	r3, r3, #1
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d10c      	bne.n	8012f68 <HAL_SPI_IRQHandler+0x8c>
 8012f4e:	69bb      	ldr	r3, [r7, #24]
 8012f50:	099b      	lsrs	r3, r3, #6
 8012f52:	f003 0301 	and.w	r3, r3, #1
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d106      	bne.n	8012f68 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8012f5a:	69bb      	ldr	r3, [r7, #24]
 8012f5c:	0a1b      	lsrs	r3, r3, #8
 8012f5e:	f003 0301 	and.w	r3, r3, #1
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	f000 80b4 	beq.w	80130d0 <HAL_SPI_IRQHandler+0x1f4>
 8012f68:	69fb      	ldr	r3, [r7, #28]
 8012f6a:	095b      	lsrs	r3, r3, #5
 8012f6c:	f003 0301 	and.w	r3, r3, #1
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	f000 80ad 	beq.w	80130d0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8012f76:	69bb      	ldr	r3, [r7, #24]
 8012f78:	099b      	lsrs	r3, r3, #6
 8012f7a:	f003 0301 	and.w	r3, r3, #1
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d023      	beq.n	8012fca <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012f88:	b2db      	uxtb	r3, r3
 8012f8a:	2b03      	cmp	r3, #3
 8012f8c:	d011      	beq.n	8012fb2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f92:	f043 0204 	orr.w	r2, r3, #4
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	617b      	str	r3, [r7, #20]
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	68db      	ldr	r3, [r3, #12]
 8012fa4:	617b      	str	r3, [r7, #20]
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	689b      	ldr	r3, [r3, #8]
 8012fac:	617b      	str	r3, [r7, #20]
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	e00b      	b.n	8012fca <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	613b      	str	r3, [r7, #16]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	68db      	ldr	r3, [r3, #12]
 8012fbc:	613b      	str	r3, [r7, #16]
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	689b      	ldr	r3, [r3, #8]
 8012fc4:	613b      	str	r3, [r7, #16]
 8012fc6:	693b      	ldr	r3, [r7, #16]
        return;
 8012fc8:	e082      	b.n	80130d0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8012fca:	69bb      	ldr	r3, [r7, #24]
 8012fcc:	095b      	lsrs	r3, r3, #5
 8012fce:	f003 0301 	and.w	r3, r3, #1
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d014      	beq.n	8013000 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012fda:	f043 0201 	orr.w	r2, r3, #1
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	60fb      	str	r3, [r7, #12]
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	689b      	ldr	r3, [r3, #8]
 8012fec:	60fb      	str	r3, [r7, #12]
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	681a      	ldr	r2, [r3, #0]
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012ffc:	601a      	str	r2, [r3, #0]
 8012ffe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8013000:	69bb      	ldr	r3, [r7, #24]
 8013002:	0a1b      	lsrs	r3, r3, #8
 8013004:	f003 0301 	and.w	r3, r3, #1
 8013008:	2b00      	cmp	r3, #0
 801300a:	d00c      	beq.n	8013026 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013010:	f043 0208 	orr.w	r2, r3, #8
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013018:	2300      	movs	r3, #0
 801301a:	60bb      	str	r3, [r7, #8]
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	689b      	ldr	r3, [r3, #8]
 8013022:	60bb      	str	r3, [r7, #8]
 8013024:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801302a:	2b00      	cmp	r3, #0
 801302c:	d04f      	beq.n	80130ce <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	685a      	ldr	r2, [r3, #4]
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801303c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2201      	movs	r2, #1
 8013042:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8013046:	69fb      	ldr	r3, [r7, #28]
 8013048:	f003 0302 	and.w	r3, r3, #2
 801304c:	2b00      	cmp	r3, #0
 801304e:	d104      	bne.n	801305a <HAL_SPI_IRQHandler+0x17e>
 8013050:	69fb      	ldr	r3, [r7, #28]
 8013052:	f003 0301 	and.w	r3, r3, #1
 8013056:	2b00      	cmp	r3, #0
 8013058:	d034      	beq.n	80130c4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	685a      	ldr	r2, [r3, #4]
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	f022 0203 	bic.w	r2, r2, #3
 8013068:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801306e:	2b00      	cmp	r3, #0
 8013070:	d011      	beq.n	8013096 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013076:	4a18      	ldr	r2, [pc, #96]	@ (80130d8 <HAL_SPI_IRQHandler+0x1fc>)
 8013078:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801307e:	4618      	mov	r0, r3
 8013080:	f7fe f83c 	bl	80110fc <HAL_DMA_Abort_IT>
 8013084:	4603      	mov	r3, r0
 8013086:	2b00      	cmp	r3, #0
 8013088:	d005      	beq.n	8013096 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801308e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801309a:	2b00      	cmp	r3, #0
 801309c:	d016      	beq.n	80130cc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80130a2:	4a0d      	ldr	r2, [pc, #52]	@ (80130d8 <HAL_SPI_IRQHandler+0x1fc>)
 80130a4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80130aa:	4618      	mov	r0, r3
 80130ac:	f7fe f826 	bl	80110fc <HAL_DMA_Abort_IT>
 80130b0:	4603      	mov	r3, r0
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d00a      	beq.n	80130cc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80130ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80130c2:	e003      	b.n	80130cc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80130c4:	6878      	ldr	r0, [r7, #4]
 80130c6:	f000 f813 	bl	80130f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80130ca:	e000      	b.n	80130ce <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80130cc:	bf00      	nop
    return;
 80130ce:	bf00      	nop
  }
}
 80130d0:	3720      	adds	r7, #32
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}
 80130d6:	bf00      	nop
 80130d8:	08013105 	.word	0x08013105

080130dc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80130dc:	b480      	push	{r7}
 80130de:	b083      	sub	sp, #12
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80130e4:	bf00      	nop
 80130e6:	370c      	adds	r7, #12
 80130e8:	46bd      	mov	sp, r7
 80130ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ee:	4770      	bx	lr

080130f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80130f0:	b480      	push	{r7}
 80130f2:	b083      	sub	sp, #12
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80130f8:	bf00      	nop
 80130fa:	370c      	adds	r7, #12
 80130fc:	46bd      	mov	sp, r7
 80130fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013102:	4770      	bx	lr

08013104 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b084      	sub	sp, #16
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013110:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	2200      	movs	r2, #0
 8013116:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	2200      	movs	r2, #0
 801311c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801311e:	68f8      	ldr	r0, [r7, #12]
 8013120:	f7ff ffe6 	bl	80130f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013124:	bf00      	nop
 8013126:	3710      	adds	r7, #16
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}

0801312c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b082      	sub	sp, #8
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	f103 020c 	add.w	r2, r3, #12
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013140:	7812      	ldrb	r2, [r2, #0]
 8013142:	b2d2      	uxtb	r2, r2
 8013144:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801314a:	1c5a      	adds	r2, r3, #1
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013154:	b29b      	uxth	r3, r3
 8013156:	3b01      	subs	r3, #1
 8013158:	b29a      	uxth	r2, r3
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013162:	b29b      	uxth	r3, r3
 8013164:	2b00      	cmp	r3, #0
 8013166:	d10f      	bne.n	8013188 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	685a      	ldr	r2, [r3, #4]
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8013176:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801317c:	b29b      	uxth	r3, r3
 801317e:	2b00      	cmp	r3, #0
 8013180:	d102      	bne.n	8013188 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8013182:	6878      	ldr	r0, [r7, #4]
 8013184:	f000 fa1e 	bl	80135c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8013188:	bf00      	nop
 801318a:	3708      	adds	r7, #8
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}

08013190 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b082      	sub	sp, #8
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	330c      	adds	r3, #12
 80131a2:	7812      	ldrb	r2, [r2, #0]
 80131a4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80131aa:	1c5a      	adds	r2, r3, #1
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80131b4:	b29b      	uxth	r3, r3
 80131b6:	3b01      	subs	r3, #1
 80131b8:	b29a      	uxth	r2, r3
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d10f      	bne.n	80131e8 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	685a      	ldr	r2, [r3, #4]
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80131d6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80131dc:	b29b      	uxth	r3, r3
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d102      	bne.n	80131e8 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80131e2:	6878      	ldr	r0, [r7, #4]
 80131e4:	f000 f9ee 	bl	80135c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80131e8:	bf00      	nop
 80131ea:	3708      	adds	r7, #8
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bd80      	pop	{r7, pc}

080131f0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b082      	sub	sp, #8
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	68da      	ldr	r2, [r3, #12]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013202:	b292      	uxth	r2, r2
 8013204:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801320a:	1c9a      	adds	r2, r3, #2
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013214:	b29b      	uxth	r3, r3
 8013216:	3b01      	subs	r3, #1
 8013218:	b29a      	uxth	r2, r3
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013222:	b29b      	uxth	r3, r3
 8013224:	2b00      	cmp	r3, #0
 8013226:	d10f      	bne.n	8013248 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	685a      	ldr	r2, [r3, #4]
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8013236:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801323c:	b29b      	uxth	r3, r3
 801323e:	2b00      	cmp	r3, #0
 8013240:	d102      	bne.n	8013248 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	f000 f9be 	bl	80135c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8013248:	bf00      	nop
 801324a:	3708      	adds	r7, #8
 801324c:	46bd      	mov	sp, r7
 801324e:	bd80      	pop	{r7, pc}

08013250 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801325c:	881a      	ldrh	r2, [r3, #0]
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013268:	1c9a      	adds	r2, r3, #2
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8013272:	b29b      	uxth	r3, r3
 8013274:	3b01      	subs	r3, #1
 8013276:	b29a      	uxth	r2, r3
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8013280:	b29b      	uxth	r3, r3
 8013282:	2b00      	cmp	r3, #0
 8013284:	d10f      	bne.n	80132a6 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	685a      	ldr	r2, [r3, #4]
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8013294:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801329a:	b29b      	uxth	r3, r3
 801329c:	2b00      	cmp	r3, #0
 801329e:	d102      	bne.n	80132a6 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80132a0:	6878      	ldr	r0, [r7, #4]
 80132a2:	f000 f98f 	bl	80135c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80132a6:	bf00      	nop
 80132a8:	3708      	adds	r7, #8
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}

080132ae <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80132ae:	b580      	push	{r7, lr}
 80132b0:	b082      	sub	sp, #8
 80132b2:	af00      	add	r7, sp, #0
 80132b4:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	f103 020c 	add.w	r2, r3, #12
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132c2:	7812      	ldrb	r2, [r2, #0]
 80132c4:	b2d2      	uxtb	r2, r2
 80132c6:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132cc:	1c5a      	adds	r2, r3, #1
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80132d6:	b29b      	uxth	r3, r3
 80132d8:	3b01      	subs	r3, #1
 80132da:	b29a      	uxth	r2, r3
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80132e4:	b29b      	uxth	r3, r3
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d102      	bne.n	80132f0 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80132ea:	6878      	ldr	r0, [r7, #4]
 80132ec:	f000 f9de 	bl	80136ac <SPI_CloseRx_ISR>
  }
}
 80132f0:	bf00      	nop
 80132f2:	3708      	adds	r7, #8
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}

080132f8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b082      	sub	sp, #8
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	68da      	ldr	r2, [r3, #12]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801330a:	b292      	uxth	r2, r2
 801330c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013312:	1c9a      	adds	r2, r3, #2
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801331c:	b29b      	uxth	r3, r3
 801331e:	3b01      	subs	r3, #1
 8013320:	b29a      	uxth	r2, r3
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801332a:	b29b      	uxth	r3, r3
 801332c:	2b00      	cmp	r3, #0
 801332e:	d102      	bne.n	8013336 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	f000 f9bb 	bl	80136ac <SPI_CloseRx_ISR>
  }
}
 8013336:	bf00      	nop
 8013338:	3708      	adds	r7, #8
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}
	...

08013340 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b088      	sub	sp, #32
 8013344:	af00      	add	r7, sp, #0
 8013346:	60f8      	str	r0, [r7, #12]
 8013348:	60b9      	str	r1, [r7, #8]
 801334a:	603b      	str	r3, [r7, #0]
 801334c:	4613      	mov	r3, r2
 801334e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8013350:	f7fd fd20 	bl	8010d94 <HAL_GetTick>
 8013354:	4602      	mov	r2, r0
 8013356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013358:	1a9b      	subs	r3, r3, r2
 801335a:	683a      	ldr	r2, [r7, #0]
 801335c:	4413      	add	r3, r2
 801335e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8013360:	f7fd fd18 	bl	8010d94 <HAL_GetTick>
 8013364:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8013366:	4b39      	ldr	r3, [pc, #228]	@ (801344c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	015b      	lsls	r3, r3, #5
 801336c:	0d1b      	lsrs	r3, r3, #20
 801336e:	69fa      	ldr	r2, [r7, #28]
 8013370:	fb02 f303 	mul.w	r3, r2, r3
 8013374:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013376:	e055      	b.n	8013424 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801337e:	d051      	beq.n	8013424 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8013380:	f7fd fd08 	bl	8010d94 <HAL_GetTick>
 8013384:	4602      	mov	r2, r0
 8013386:	69bb      	ldr	r3, [r7, #24]
 8013388:	1ad3      	subs	r3, r2, r3
 801338a:	69fa      	ldr	r2, [r7, #28]
 801338c:	429a      	cmp	r2, r3
 801338e:	d902      	bls.n	8013396 <SPI_WaitFlagStateUntilTimeout+0x56>
 8013390:	69fb      	ldr	r3, [r7, #28]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d13d      	bne.n	8013412 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	685a      	ldr	r2, [r3, #4]
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80133a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	685b      	ldr	r3, [r3, #4]
 80133aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80133ae:	d111      	bne.n	80133d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	689b      	ldr	r3, [r3, #8]
 80133b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80133b8:	d004      	beq.n	80133c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	689b      	ldr	r3, [r3, #8]
 80133be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80133c2:	d107      	bne.n	80133d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	681a      	ldr	r2, [r3, #0]
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80133d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80133dc:	d10f      	bne.n	80133fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	681a      	ldr	r2, [r3, #0]
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80133ec:	601a      	str	r2, [r3, #0]
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	681a      	ldr	r2, [r3, #0]
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80133fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	2201      	movs	r2, #1
 8013402:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	2200      	movs	r2, #0
 801340a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 801340e:	2303      	movs	r3, #3
 8013410:	e018      	b.n	8013444 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8013412:	697b      	ldr	r3, [r7, #20]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d102      	bne.n	801341e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8013418:	2300      	movs	r3, #0
 801341a:	61fb      	str	r3, [r7, #28]
 801341c:	e002      	b.n	8013424 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 801341e:	697b      	ldr	r3, [r7, #20]
 8013420:	3b01      	subs	r3, #1
 8013422:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	689a      	ldr	r2, [r3, #8]
 801342a:	68bb      	ldr	r3, [r7, #8]
 801342c:	4013      	ands	r3, r2
 801342e:	68ba      	ldr	r2, [r7, #8]
 8013430:	429a      	cmp	r2, r3
 8013432:	bf0c      	ite	eq
 8013434:	2301      	moveq	r3, #1
 8013436:	2300      	movne	r3, #0
 8013438:	b2db      	uxtb	r3, r3
 801343a:	461a      	mov	r2, r3
 801343c:	79fb      	ldrb	r3, [r7, #7]
 801343e:	429a      	cmp	r2, r3
 8013440:	d19a      	bne.n	8013378 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8013442:	2300      	movs	r3, #0
}
 8013444:	4618      	mov	r0, r3
 8013446:	3720      	adds	r7, #32
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}
 801344c:	2000008c 	.word	0x2000008c

08013450 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b086      	sub	sp, #24
 8013454:	af02      	add	r7, sp, #8
 8013456:	60f8      	str	r0, [r7, #12]
 8013458:	60b9      	str	r1, [r7, #8]
 801345a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	685b      	ldr	r3, [r3, #4]
 8013460:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8013464:	d111      	bne.n	801348a <SPI_EndRxTransaction+0x3a>
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	689b      	ldr	r3, [r3, #8]
 801346a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801346e:	d004      	beq.n	801347a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	689b      	ldr	r3, [r3, #8]
 8013474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013478:	d107      	bne.n	801348a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	681a      	ldr	r2, [r3, #0]
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8013488:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	685b      	ldr	r3, [r3, #4]
 801348e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8013492:	d12a      	bne.n	80134ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	689b      	ldr	r3, [r3, #8]
 8013498:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801349c:	d012      	beq.n	80134c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	9300      	str	r3, [sp, #0]
 80134a2:	68bb      	ldr	r3, [r7, #8]
 80134a4:	2200      	movs	r2, #0
 80134a6:	2180      	movs	r1, #128	@ 0x80
 80134a8:	68f8      	ldr	r0, [r7, #12]
 80134aa:	f7ff ff49 	bl	8013340 <SPI_WaitFlagStateUntilTimeout>
 80134ae:	4603      	mov	r3, r0
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d02d      	beq.n	8013510 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80134b8:	f043 0220 	orr.w	r2, r3, #32
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80134c0:	2303      	movs	r3, #3
 80134c2:	e026      	b.n	8013512 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	9300      	str	r3, [sp, #0]
 80134c8:	68bb      	ldr	r3, [r7, #8]
 80134ca:	2200      	movs	r2, #0
 80134cc:	2101      	movs	r1, #1
 80134ce:	68f8      	ldr	r0, [r7, #12]
 80134d0:	f7ff ff36 	bl	8013340 <SPI_WaitFlagStateUntilTimeout>
 80134d4:	4603      	mov	r3, r0
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d01a      	beq.n	8013510 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80134de:	f043 0220 	orr.w	r2, r3, #32
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80134e6:	2303      	movs	r3, #3
 80134e8:	e013      	b.n	8013512 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	9300      	str	r3, [sp, #0]
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	2200      	movs	r2, #0
 80134f2:	2101      	movs	r1, #1
 80134f4:	68f8      	ldr	r0, [r7, #12]
 80134f6:	f7ff ff23 	bl	8013340 <SPI_WaitFlagStateUntilTimeout>
 80134fa:	4603      	mov	r3, r0
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d007      	beq.n	8013510 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013504:	f043 0220 	orr.w	r2, r3, #32
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 801350c:	2303      	movs	r3, #3
 801350e:	e000      	b.n	8013512 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8013510:	2300      	movs	r3, #0
}
 8013512:	4618      	mov	r0, r3
 8013514:	3710      	adds	r7, #16
 8013516:	46bd      	mov	sp, r7
 8013518:	bd80      	pop	{r7, pc}
	...

0801351c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b088      	sub	sp, #32
 8013520:	af02      	add	r7, sp, #8
 8013522:	60f8      	str	r0, [r7, #12]
 8013524:	60b9      	str	r1, [r7, #8]
 8013526:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	9300      	str	r3, [sp, #0]
 801352c:	68bb      	ldr	r3, [r7, #8]
 801352e:	2201      	movs	r2, #1
 8013530:	2102      	movs	r1, #2
 8013532:	68f8      	ldr	r0, [r7, #12]
 8013534:	f7ff ff04 	bl	8013340 <SPI_WaitFlagStateUntilTimeout>
 8013538:	4603      	mov	r3, r0
 801353a:	2b00      	cmp	r3, #0
 801353c:	d007      	beq.n	801354e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013542:	f043 0220 	orr.w	r2, r3, #32
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 801354a:	2303      	movs	r3, #3
 801354c:	e032      	b.n	80135b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801354e:	4b1b      	ldr	r3, [pc, #108]	@ (80135bc <SPI_EndRxTxTransaction+0xa0>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	4a1b      	ldr	r2, [pc, #108]	@ (80135c0 <SPI_EndRxTxTransaction+0xa4>)
 8013554:	fba2 2303 	umull	r2, r3, r2, r3
 8013558:	0d5b      	lsrs	r3, r3, #21
 801355a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801355e:	fb02 f303 	mul.w	r3, r2, r3
 8013562:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	685b      	ldr	r3, [r3, #4]
 8013568:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801356c:	d112      	bne.n	8013594 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	9300      	str	r3, [sp, #0]
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	2200      	movs	r2, #0
 8013576:	2180      	movs	r1, #128	@ 0x80
 8013578:	68f8      	ldr	r0, [r7, #12]
 801357a:	f7ff fee1 	bl	8013340 <SPI_WaitFlagStateUntilTimeout>
 801357e:	4603      	mov	r3, r0
 8013580:	2b00      	cmp	r3, #0
 8013582:	d016      	beq.n	80135b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013588:	f043 0220 	orr.w	r2, r3, #32
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8013590:	2303      	movs	r3, #3
 8013592:	e00f      	b.n	80135b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d00a      	beq.n	80135b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 801359a:	697b      	ldr	r3, [r7, #20]
 801359c:	3b01      	subs	r3, #1
 801359e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	689b      	ldr	r3, [r3, #8]
 80135a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80135aa:	2b80      	cmp	r3, #128	@ 0x80
 80135ac:	d0f2      	beq.n	8013594 <SPI_EndRxTxTransaction+0x78>
 80135ae:	e000      	b.n	80135b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80135b0:	bf00      	nop
  }

  return HAL_OK;
 80135b2:	2300      	movs	r3, #0
}
 80135b4:	4618      	mov	r0, r3
 80135b6:	3718      	adds	r7, #24
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}
 80135bc:	2000008c 	.word	0x2000008c
 80135c0:	165e9f81 	.word	0x165e9f81

080135c4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b086      	sub	sp, #24
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80135cc:	4b35      	ldr	r3, [pc, #212]	@ (80136a4 <SPI_CloseRxTx_ISR+0xe0>)
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	4a35      	ldr	r2, [pc, #212]	@ (80136a8 <SPI_CloseRxTx_ISR+0xe4>)
 80135d2:	fba2 2303 	umull	r2, r3, r2, r3
 80135d6:	0a5b      	lsrs	r3, r3, #9
 80135d8:	2264      	movs	r2, #100	@ 0x64
 80135da:	fb02 f303 	mul.w	r3, r2, r3
 80135de:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80135e0:	f7fd fbd8 	bl	8010d94 <HAL_GetTick>
 80135e4:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	685a      	ldr	r2, [r3, #4]
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	f022 0220 	bic.w	r2, r2, #32
 80135f4:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80135f6:	693b      	ldr	r3, [r7, #16]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d106      	bne.n	801360a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013600:	f043 0220 	orr.w	r2, r3, #32
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8013608:	e009      	b.n	801361e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 801360a:	693b      	ldr	r3, [r7, #16]
 801360c:	3b01      	subs	r3, #1
 801360e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	689b      	ldr	r3, [r3, #8]
 8013616:	f003 0302 	and.w	r3, r3, #2
 801361a:	2b00      	cmp	r3, #0
 801361c:	d0eb      	beq.n	80135f6 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801361e:	697a      	ldr	r2, [r7, #20]
 8013620:	2164      	movs	r1, #100	@ 0x64
 8013622:	6878      	ldr	r0, [r7, #4]
 8013624:	f7ff ff7a 	bl	801351c <SPI_EndRxTxTransaction>
 8013628:	4603      	mov	r3, r0
 801362a:	2b00      	cmp	r3, #0
 801362c:	d005      	beq.n	801363a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013632:	f043 0220 	orr.w	r2, r3, #32
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	689b      	ldr	r3, [r3, #8]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d10a      	bne.n	8013658 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013642:	2300      	movs	r3, #0
 8013644:	60fb      	str	r3, [r7, #12]
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	68db      	ldr	r3, [r3, #12]
 801364c:	60fb      	str	r3, [r7, #12]
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	689b      	ldr	r3, [r3, #8]
 8013654:	60fb      	str	r3, [r7, #12]
 8013656:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801365c:	2b00      	cmp	r3, #0
 801365e:	d115      	bne.n	801368c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8013666:	b2db      	uxtb	r3, r3
 8013668:	2b04      	cmp	r3, #4
 801366a:	d107      	bne.n	801367c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2201      	movs	r2, #1
 8013670:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8013674:	6878      	ldr	r0, [r7, #4]
 8013676:	f7f7 fb25 	bl	800acc4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 801367a:	e00e      	b.n	801369a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2201      	movs	r2, #1
 8013680:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f7ff fd29 	bl	80130dc <HAL_SPI_TxRxCpltCallback>
}
 801368a:	e006      	b.n	801369a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2201      	movs	r2, #1
 8013690:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f7ff fd2b 	bl	80130f0 <HAL_SPI_ErrorCallback>
}
 801369a:	bf00      	nop
 801369c:	3718      	adds	r7, #24
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}
 80136a2:	bf00      	nop
 80136a4:	2000008c 	.word	0x2000008c
 80136a8:	057619f1 	.word	0x057619f1

080136ac <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b084      	sub	sp, #16
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	685a      	ldr	r2, [r3, #4]
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80136c2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80136c4:	f7fd fb66 	bl	8010d94 <HAL_GetTick>
 80136c8:	4603      	mov	r3, r0
 80136ca:	461a      	mov	r2, r3
 80136cc:	2164      	movs	r1, #100	@ 0x64
 80136ce:	6878      	ldr	r0, [r7, #4]
 80136d0:	f7ff febe 	bl	8013450 <SPI_EndRxTransaction>
 80136d4:	4603      	mov	r3, r0
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d005      	beq.n	80136e6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80136de:	f043 0220 	orr.w	r2, r3, #32
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	689b      	ldr	r3, [r3, #8]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d10a      	bne.n	8013704 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80136ee:	2300      	movs	r3, #0
 80136f0:	60fb      	str	r3, [r7, #12]
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	68db      	ldr	r3, [r3, #12]
 80136f8:	60fb      	str	r3, [r7, #12]
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	689b      	ldr	r3, [r3, #8]
 8013700:	60fb      	str	r3, [r7, #12]
 8013702:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	2201      	movs	r2, #1
 8013708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013710:	2b00      	cmp	r3, #0
 8013712:	d103      	bne.n	801371c <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f7f7 fad5 	bl	800acc4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 801371a:	e002      	b.n	8013722 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f7ff fce7 	bl	80130f0 <HAL_SPI_ErrorCallback>
}
 8013722:	bf00      	nop
 8013724:	3710      	adds	r7, #16
 8013726:	46bd      	mov	sp, r7
 8013728:	bd80      	pop	{r7, pc}

0801372a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801372a:	b580      	push	{r7, lr}
 801372c:	b082      	sub	sp, #8
 801372e:	af00      	add	r7, sp, #0
 8013730:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d101      	bne.n	801373c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013738:	2301      	movs	r3, #1
 801373a:	e041      	b.n	80137c0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013742:	b2db      	uxtb	r3, r3
 8013744:	2b00      	cmp	r3, #0
 8013746:	d106      	bne.n	8013756 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	2200      	movs	r2, #0
 801374c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f000 f839 	bl	80137c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	2202      	movs	r2, #2
 801375a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	681a      	ldr	r2, [r3, #0]
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	3304      	adds	r3, #4
 8013766:	4619      	mov	r1, r3
 8013768:	4610      	mov	r0, r2
 801376a:	f000 f9bf 	bl	8013aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	2201      	movs	r2, #1
 8013772:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	2201      	movs	r2, #1
 801377a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2201      	movs	r2, #1
 8013782:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	2201      	movs	r2, #1
 801378a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	2201      	movs	r2, #1
 8013792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2201      	movs	r2, #1
 801379a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	2201      	movs	r2, #1
 80137a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2201      	movs	r2, #1
 80137aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	2201      	movs	r2, #1
 80137b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	2201      	movs	r2, #1
 80137ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80137be:	2300      	movs	r3, #0
}
 80137c0:	4618      	mov	r0, r3
 80137c2:	3708      	adds	r7, #8
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}

080137c8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80137c8:	b480      	push	{r7}
 80137ca:	b083      	sub	sp, #12
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80137d0:	bf00      	nop
 80137d2:	370c      	adds	r7, #12
 80137d4:	46bd      	mov	sp, r7
 80137d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137da:	4770      	bx	lr

080137dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80137dc:	b480      	push	{r7}
 80137de:	b085      	sub	sp, #20
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80137ea:	b2db      	uxtb	r3, r3
 80137ec:	2b01      	cmp	r3, #1
 80137ee:	d001      	beq.n	80137f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80137f0:	2301      	movs	r3, #1
 80137f2:	e04e      	b.n	8013892 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	2202      	movs	r2, #2
 80137f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	68da      	ldr	r2, [r3, #12]
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	f042 0201 	orr.w	r2, r2, #1
 801380a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	4a23      	ldr	r2, [pc, #140]	@ (80138a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8013812:	4293      	cmp	r3, r2
 8013814:	d022      	beq.n	801385c <HAL_TIM_Base_Start_IT+0x80>
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801381e:	d01d      	beq.n	801385c <HAL_TIM_Base_Start_IT+0x80>
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	4a1f      	ldr	r2, [pc, #124]	@ (80138a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8013826:	4293      	cmp	r3, r2
 8013828:	d018      	beq.n	801385c <HAL_TIM_Base_Start_IT+0x80>
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	4a1e      	ldr	r2, [pc, #120]	@ (80138a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8013830:	4293      	cmp	r3, r2
 8013832:	d013      	beq.n	801385c <HAL_TIM_Base_Start_IT+0x80>
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	4a1c      	ldr	r2, [pc, #112]	@ (80138ac <HAL_TIM_Base_Start_IT+0xd0>)
 801383a:	4293      	cmp	r3, r2
 801383c:	d00e      	beq.n	801385c <HAL_TIM_Base_Start_IT+0x80>
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	4a1b      	ldr	r2, [pc, #108]	@ (80138b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8013844:	4293      	cmp	r3, r2
 8013846:	d009      	beq.n	801385c <HAL_TIM_Base_Start_IT+0x80>
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	4a19      	ldr	r2, [pc, #100]	@ (80138b4 <HAL_TIM_Base_Start_IT+0xd8>)
 801384e:	4293      	cmp	r3, r2
 8013850:	d004      	beq.n	801385c <HAL_TIM_Base_Start_IT+0x80>
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	4a18      	ldr	r2, [pc, #96]	@ (80138b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8013858:	4293      	cmp	r3, r2
 801385a:	d111      	bne.n	8013880 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	689b      	ldr	r3, [r3, #8]
 8013862:	f003 0307 	and.w	r3, r3, #7
 8013866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	2b06      	cmp	r3, #6
 801386c:	d010      	beq.n	8013890 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	681a      	ldr	r2, [r3, #0]
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	f042 0201 	orr.w	r2, r2, #1
 801387c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801387e:	e007      	b.n	8013890 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	681a      	ldr	r2, [r3, #0]
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	f042 0201 	orr.w	r2, r2, #1
 801388e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013890:	2300      	movs	r3, #0
}
 8013892:	4618      	mov	r0, r3
 8013894:	3714      	adds	r7, #20
 8013896:	46bd      	mov	sp, r7
 8013898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801389c:	4770      	bx	lr
 801389e:	bf00      	nop
 80138a0:	40010000 	.word	0x40010000
 80138a4:	40000400 	.word	0x40000400
 80138a8:	40000800 	.word	0x40000800
 80138ac:	40000c00 	.word	0x40000c00
 80138b0:	40010400 	.word	0x40010400
 80138b4:	40014000 	.word	0x40014000
 80138b8:	40001800 	.word	0x40001800

080138bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b084      	sub	sp, #16
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	68db      	ldr	r3, [r3, #12]
 80138ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	691b      	ldr	r3, [r3, #16]
 80138d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80138d4:	68bb      	ldr	r3, [r7, #8]
 80138d6:	f003 0302 	and.w	r3, r3, #2
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d020      	beq.n	8013920 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	f003 0302 	and.w	r3, r3, #2
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d01b      	beq.n	8013920 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	f06f 0202 	mvn.w	r2, #2
 80138f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	2201      	movs	r2, #1
 80138f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	699b      	ldr	r3, [r3, #24]
 80138fe:	f003 0303 	and.w	r3, r3, #3
 8013902:	2b00      	cmp	r3, #0
 8013904:	d003      	beq.n	801390e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013906:	6878      	ldr	r0, [r7, #4]
 8013908:	f000 f8d2 	bl	8013ab0 <HAL_TIM_IC_CaptureCallback>
 801390c:	e005      	b.n	801391a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	f000 f8c4 	bl	8013a9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	f000 f8d5 	bl	8013ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	2200      	movs	r2, #0
 801391e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	f003 0304 	and.w	r3, r3, #4
 8013926:	2b00      	cmp	r3, #0
 8013928:	d020      	beq.n	801396c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	f003 0304 	and.w	r3, r3, #4
 8013930:	2b00      	cmp	r3, #0
 8013932:	d01b      	beq.n	801396c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	f06f 0204 	mvn.w	r2, #4
 801393c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	2202      	movs	r2, #2
 8013942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	699b      	ldr	r3, [r3, #24]
 801394a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801394e:	2b00      	cmp	r3, #0
 8013950:	d003      	beq.n	801395a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013952:	6878      	ldr	r0, [r7, #4]
 8013954:	f000 f8ac 	bl	8013ab0 <HAL_TIM_IC_CaptureCallback>
 8013958:	e005      	b.n	8013966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801395a:	6878      	ldr	r0, [r7, #4]
 801395c:	f000 f89e 	bl	8013a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013960:	6878      	ldr	r0, [r7, #4]
 8013962:	f000 f8af 	bl	8013ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	2200      	movs	r2, #0
 801396a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	f003 0308 	and.w	r3, r3, #8
 8013972:	2b00      	cmp	r3, #0
 8013974:	d020      	beq.n	80139b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	f003 0308 	and.w	r3, r3, #8
 801397c:	2b00      	cmp	r3, #0
 801397e:	d01b      	beq.n	80139b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	f06f 0208 	mvn.w	r2, #8
 8013988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	2204      	movs	r2, #4
 801398e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	69db      	ldr	r3, [r3, #28]
 8013996:	f003 0303 	and.w	r3, r3, #3
 801399a:	2b00      	cmp	r3, #0
 801399c:	d003      	beq.n	80139a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801399e:	6878      	ldr	r0, [r7, #4]
 80139a0:	f000 f886 	bl	8013ab0 <HAL_TIM_IC_CaptureCallback>
 80139a4:	e005      	b.n	80139b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	f000 f878 	bl	8013a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80139ac:	6878      	ldr	r0, [r7, #4]
 80139ae:	f000 f889 	bl	8013ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	2200      	movs	r2, #0
 80139b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80139b8:	68bb      	ldr	r3, [r7, #8]
 80139ba:	f003 0310 	and.w	r3, r3, #16
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d020      	beq.n	8013a04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	f003 0310 	and.w	r3, r3, #16
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d01b      	beq.n	8013a04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	f06f 0210 	mvn.w	r2, #16
 80139d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	2208      	movs	r2, #8
 80139da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	69db      	ldr	r3, [r3, #28]
 80139e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d003      	beq.n	80139f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80139ea:	6878      	ldr	r0, [r7, #4]
 80139ec:	f000 f860 	bl	8013ab0 <HAL_TIM_IC_CaptureCallback>
 80139f0:	e005      	b.n	80139fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80139f2:	6878      	ldr	r0, [r7, #4]
 80139f4:	f000 f852 	bl	8013a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f000 f863 	bl	8013ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2200      	movs	r2, #0
 8013a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	f003 0301 	and.w	r3, r3, #1
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d00c      	beq.n	8013a28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	f003 0301 	and.w	r3, r3, #1
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d007      	beq.n	8013a28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	f06f 0201 	mvn.w	r2, #1
 8013a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013a22:	6878      	ldr	r0, [r7, #4]
 8013a24:	f7fc fd24 	bl	8010470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d00c      	beq.n	8013a4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d007      	beq.n	8013a4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8013a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f000 f900 	bl	8013c4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8013a4c:	68bb      	ldr	r3, [r7, #8]
 8013a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d00c      	beq.n	8013a70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d007      	beq.n	8013a70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8013a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013a6a:	6878      	ldr	r0, [r7, #4]
 8013a6c:	f000 f834 	bl	8013ad8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8013a70:	68bb      	ldr	r3, [r7, #8]
 8013a72:	f003 0320 	and.w	r3, r3, #32
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d00c      	beq.n	8013a94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	f003 0320 	and.w	r3, r3, #32
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d007      	beq.n	8013a94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	f06f 0220 	mvn.w	r2, #32
 8013a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	f000 f8d2 	bl	8013c38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013a94:	bf00      	nop
 8013a96:	3710      	adds	r7, #16
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd80      	pop	{r7, pc}

08013a9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013a9c:	b480      	push	{r7}
 8013a9e:	b083      	sub	sp, #12
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013aa4:	bf00      	nop
 8013aa6:	370c      	adds	r7, #12
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aae:	4770      	bx	lr

08013ab0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013ab0:	b480      	push	{r7}
 8013ab2:	b083      	sub	sp, #12
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013ab8:	bf00      	nop
 8013aba:	370c      	adds	r7, #12
 8013abc:	46bd      	mov	sp, r7
 8013abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac2:	4770      	bx	lr

08013ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013ac4:	b480      	push	{r7}
 8013ac6:	b083      	sub	sp, #12
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013acc:	bf00      	nop
 8013ace:	370c      	adds	r7, #12
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad6:	4770      	bx	lr

08013ad8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013ad8:	b480      	push	{r7}
 8013ada:	b083      	sub	sp, #12
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013ae0:	bf00      	nop
 8013ae2:	370c      	adds	r7, #12
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aea:	4770      	bx	lr

08013aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013aec:	b480      	push	{r7}
 8013aee:	b085      	sub	sp, #20
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
 8013af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	4a43      	ldr	r2, [pc, #268]	@ (8013c0c <TIM_Base_SetConfig+0x120>)
 8013b00:	4293      	cmp	r3, r2
 8013b02:	d013      	beq.n	8013b2c <TIM_Base_SetConfig+0x40>
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b0a:	d00f      	beq.n	8013b2c <TIM_Base_SetConfig+0x40>
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	4a40      	ldr	r2, [pc, #256]	@ (8013c10 <TIM_Base_SetConfig+0x124>)
 8013b10:	4293      	cmp	r3, r2
 8013b12:	d00b      	beq.n	8013b2c <TIM_Base_SetConfig+0x40>
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	4a3f      	ldr	r2, [pc, #252]	@ (8013c14 <TIM_Base_SetConfig+0x128>)
 8013b18:	4293      	cmp	r3, r2
 8013b1a:	d007      	beq.n	8013b2c <TIM_Base_SetConfig+0x40>
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	4a3e      	ldr	r2, [pc, #248]	@ (8013c18 <TIM_Base_SetConfig+0x12c>)
 8013b20:	4293      	cmp	r3, r2
 8013b22:	d003      	beq.n	8013b2c <TIM_Base_SetConfig+0x40>
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	4a3d      	ldr	r2, [pc, #244]	@ (8013c1c <TIM_Base_SetConfig+0x130>)
 8013b28:	4293      	cmp	r3, r2
 8013b2a:	d108      	bne.n	8013b3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	685b      	ldr	r3, [r3, #4]
 8013b38:	68fa      	ldr	r2, [r7, #12]
 8013b3a:	4313      	orrs	r3, r2
 8013b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	4a32      	ldr	r2, [pc, #200]	@ (8013c0c <TIM_Base_SetConfig+0x120>)
 8013b42:	4293      	cmp	r3, r2
 8013b44:	d02b      	beq.n	8013b9e <TIM_Base_SetConfig+0xb2>
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b4c:	d027      	beq.n	8013b9e <TIM_Base_SetConfig+0xb2>
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	4a2f      	ldr	r2, [pc, #188]	@ (8013c10 <TIM_Base_SetConfig+0x124>)
 8013b52:	4293      	cmp	r3, r2
 8013b54:	d023      	beq.n	8013b9e <TIM_Base_SetConfig+0xb2>
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	4a2e      	ldr	r2, [pc, #184]	@ (8013c14 <TIM_Base_SetConfig+0x128>)
 8013b5a:	4293      	cmp	r3, r2
 8013b5c:	d01f      	beq.n	8013b9e <TIM_Base_SetConfig+0xb2>
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	4a2d      	ldr	r2, [pc, #180]	@ (8013c18 <TIM_Base_SetConfig+0x12c>)
 8013b62:	4293      	cmp	r3, r2
 8013b64:	d01b      	beq.n	8013b9e <TIM_Base_SetConfig+0xb2>
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	4a2c      	ldr	r2, [pc, #176]	@ (8013c1c <TIM_Base_SetConfig+0x130>)
 8013b6a:	4293      	cmp	r3, r2
 8013b6c:	d017      	beq.n	8013b9e <TIM_Base_SetConfig+0xb2>
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	4a2b      	ldr	r2, [pc, #172]	@ (8013c20 <TIM_Base_SetConfig+0x134>)
 8013b72:	4293      	cmp	r3, r2
 8013b74:	d013      	beq.n	8013b9e <TIM_Base_SetConfig+0xb2>
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	4a2a      	ldr	r2, [pc, #168]	@ (8013c24 <TIM_Base_SetConfig+0x138>)
 8013b7a:	4293      	cmp	r3, r2
 8013b7c:	d00f      	beq.n	8013b9e <TIM_Base_SetConfig+0xb2>
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	4a29      	ldr	r2, [pc, #164]	@ (8013c28 <TIM_Base_SetConfig+0x13c>)
 8013b82:	4293      	cmp	r3, r2
 8013b84:	d00b      	beq.n	8013b9e <TIM_Base_SetConfig+0xb2>
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	4a28      	ldr	r2, [pc, #160]	@ (8013c2c <TIM_Base_SetConfig+0x140>)
 8013b8a:	4293      	cmp	r3, r2
 8013b8c:	d007      	beq.n	8013b9e <TIM_Base_SetConfig+0xb2>
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	4a27      	ldr	r2, [pc, #156]	@ (8013c30 <TIM_Base_SetConfig+0x144>)
 8013b92:	4293      	cmp	r3, r2
 8013b94:	d003      	beq.n	8013b9e <TIM_Base_SetConfig+0xb2>
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	4a26      	ldr	r2, [pc, #152]	@ (8013c34 <TIM_Base_SetConfig+0x148>)
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	d108      	bne.n	8013bb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	68db      	ldr	r3, [r3, #12]
 8013baa:	68fa      	ldr	r2, [r7, #12]
 8013bac:	4313      	orrs	r3, r2
 8013bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8013bb6:	683b      	ldr	r3, [r7, #0]
 8013bb8:	695b      	ldr	r3, [r3, #20]
 8013bba:	4313      	orrs	r3, r2
 8013bbc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	689a      	ldr	r2, [r3, #8]
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	681a      	ldr	r2, [r3, #0]
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	4a0e      	ldr	r2, [pc, #56]	@ (8013c0c <TIM_Base_SetConfig+0x120>)
 8013bd2:	4293      	cmp	r3, r2
 8013bd4:	d003      	beq.n	8013bde <TIM_Base_SetConfig+0xf2>
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	4a10      	ldr	r2, [pc, #64]	@ (8013c1c <TIM_Base_SetConfig+0x130>)
 8013bda:	4293      	cmp	r3, r2
 8013bdc:	d103      	bne.n	8013be6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013bde:	683b      	ldr	r3, [r7, #0]
 8013be0:	691a      	ldr	r2, [r3, #16]
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	f043 0204 	orr.w	r2, r3, #4
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	2201      	movs	r2, #1
 8013bf6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	68fa      	ldr	r2, [r7, #12]
 8013bfc:	601a      	str	r2, [r3, #0]
}
 8013bfe:	bf00      	nop
 8013c00:	3714      	adds	r7, #20
 8013c02:	46bd      	mov	sp, r7
 8013c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c08:	4770      	bx	lr
 8013c0a:	bf00      	nop
 8013c0c:	40010000 	.word	0x40010000
 8013c10:	40000400 	.word	0x40000400
 8013c14:	40000800 	.word	0x40000800
 8013c18:	40000c00 	.word	0x40000c00
 8013c1c:	40010400 	.word	0x40010400
 8013c20:	40014000 	.word	0x40014000
 8013c24:	40014400 	.word	0x40014400
 8013c28:	40014800 	.word	0x40014800
 8013c2c:	40001800 	.word	0x40001800
 8013c30:	40001c00 	.word	0x40001c00
 8013c34:	40002000 	.word	0x40002000

08013c38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013c38:	b480      	push	{r7}
 8013c3a:	b083      	sub	sp, #12
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013c40:	bf00      	nop
 8013c42:	370c      	adds	r7, #12
 8013c44:	46bd      	mov	sp, r7
 8013c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4a:	4770      	bx	lr

08013c4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013c4c:	b480      	push	{r7}
 8013c4e:	b083      	sub	sp, #12
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013c54:	bf00      	nop
 8013c56:	370c      	adds	r7, #12
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5e:	4770      	bx	lr

08013c60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b082      	sub	sp, #8
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d101      	bne.n	8013c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013c6e:	2301      	movs	r3, #1
 8013c70:	e042      	b.n	8013cf8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013c78:	b2db      	uxtb	r3, r3
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d106      	bne.n	8013c8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2200      	movs	r2, #0
 8013c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013c86:	6878      	ldr	r0, [r7, #4]
 8013c88:	f7fc fd6a 	bl	8010760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2224      	movs	r2, #36	@ 0x24
 8013c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	68da      	ldr	r2, [r3, #12]
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8013ca2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8013ca4:	6878      	ldr	r0, [r7, #4]
 8013ca6:	f000 fe3b 	bl	8014920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	691a      	ldr	r2, [r3, #16]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8013cb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	695a      	ldr	r2, [r3, #20]
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8013cc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	68da      	ldr	r2, [r3, #12]
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8013cd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	2200      	movs	r2, #0
 8013cde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	2220      	movs	r2, #32
 8013ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2220      	movs	r2, #32
 8013cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8013cf6:	2300      	movs	r3, #0
}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	3708      	adds	r7, #8
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bd80      	pop	{r7, pc}

08013d00 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b082      	sub	sp, #8
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d101      	bne.n	8013d12 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8013d0e:	2301      	movs	r3, #1
 8013d10:	e024      	b.n	8013d5c <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2224      	movs	r2, #36	@ 0x24
 8013d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	68da      	ldr	r2, [r3, #12]
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8013d28:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8013d2a:	6878      	ldr	r0, [r7, #4]
 8013d2c:	f7fc fdfc 	bl	8010928 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2200      	movs	r2, #0
 8013d34:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2200      	movs	r2, #0
 8013d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2200      	movs	r2, #0
 8013d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	2200      	movs	r2, #0
 8013d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	2200      	movs	r2, #0
 8013d50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	2200      	movs	r2, #0
 8013d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8013d5a:	2300      	movs	r3, #0
}
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	3708      	adds	r7, #8
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bd80      	pop	{r7, pc}

08013d64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b08a      	sub	sp, #40	@ 0x28
 8013d68:	af02      	add	r7, sp, #8
 8013d6a:	60f8      	str	r0, [r7, #12]
 8013d6c:	60b9      	str	r1, [r7, #8]
 8013d6e:	603b      	str	r3, [r7, #0]
 8013d70:	4613      	mov	r3, r2
 8013d72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8013d74:	2300      	movs	r3, #0
 8013d76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013d7e:	b2db      	uxtb	r3, r3
 8013d80:	2b20      	cmp	r3, #32
 8013d82:	d175      	bne.n	8013e70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d002      	beq.n	8013d90 <HAL_UART_Transmit+0x2c>
 8013d8a:	88fb      	ldrh	r3, [r7, #6]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d101      	bne.n	8013d94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8013d90:	2301      	movs	r3, #1
 8013d92:	e06e      	b.n	8013e72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	2200      	movs	r2, #0
 8013d98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	2221      	movs	r2, #33	@ 0x21
 8013d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013da2:	f7fc fff7 	bl	8010d94 <HAL_GetTick>
 8013da6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	88fa      	ldrh	r2, [r7, #6]
 8013dac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	88fa      	ldrh	r2, [r7, #6]
 8013db2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	689b      	ldr	r3, [r3, #8]
 8013db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013dbc:	d108      	bne.n	8013dd0 <HAL_UART_Transmit+0x6c>
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	691b      	ldr	r3, [r3, #16]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d104      	bne.n	8013dd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	61bb      	str	r3, [r7, #24]
 8013dce:	e003      	b.n	8013dd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8013dd0:	68bb      	ldr	r3, [r7, #8]
 8013dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013dd8:	e02e      	b.n	8013e38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013dda:	683b      	ldr	r3, [r7, #0]
 8013ddc:	9300      	str	r3, [sp, #0]
 8013dde:	697b      	ldr	r3, [r7, #20]
 8013de0:	2200      	movs	r2, #0
 8013de2:	2180      	movs	r1, #128	@ 0x80
 8013de4:	68f8      	ldr	r0, [r7, #12]
 8013de6:	f000 fb6d 	bl	80144c4 <UART_WaitOnFlagUntilTimeout>
 8013dea:	4603      	mov	r3, r0
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d005      	beq.n	8013dfc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	2220      	movs	r2, #32
 8013df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8013df8:	2303      	movs	r3, #3
 8013dfa:	e03a      	b.n	8013e72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8013dfc:	69fb      	ldr	r3, [r7, #28]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d10b      	bne.n	8013e1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013e02:	69bb      	ldr	r3, [r7, #24]
 8013e04:	881b      	ldrh	r3, [r3, #0]
 8013e06:	461a      	mov	r2, r3
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013e10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8013e12:	69bb      	ldr	r3, [r7, #24]
 8013e14:	3302      	adds	r3, #2
 8013e16:	61bb      	str	r3, [r7, #24]
 8013e18:	e007      	b.n	8013e2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8013e1a:	69fb      	ldr	r3, [r7, #28]
 8013e1c:	781a      	ldrb	r2, [r3, #0]
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8013e24:	69fb      	ldr	r3, [r7, #28]
 8013e26:	3301      	adds	r3, #1
 8013e28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8013e2e:	b29b      	uxth	r3, r3
 8013e30:	3b01      	subs	r3, #1
 8013e32:	b29a      	uxth	r2, r3
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8013e3c:	b29b      	uxth	r3, r3
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d1cb      	bne.n	8013dda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	9300      	str	r3, [sp, #0]
 8013e46:	697b      	ldr	r3, [r7, #20]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	2140      	movs	r1, #64	@ 0x40
 8013e4c:	68f8      	ldr	r0, [r7, #12]
 8013e4e:	f000 fb39 	bl	80144c4 <UART_WaitOnFlagUntilTimeout>
 8013e52:	4603      	mov	r3, r0
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d005      	beq.n	8013e64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	2220      	movs	r2, #32
 8013e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8013e60:	2303      	movs	r3, #3
 8013e62:	e006      	b.n	8013e72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	2220      	movs	r2, #32
 8013e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	e000      	b.n	8013e72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8013e70:	2302      	movs	r3, #2
  }
}
 8013e72:	4618      	mov	r0, r3
 8013e74:	3720      	adds	r7, #32
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bd80      	pop	{r7, pc}

08013e7a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8013e7a:	b480      	push	{r7}
 8013e7c:	b085      	sub	sp, #20
 8013e7e:	af00      	add	r7, sp, #0
 8013e80:	60f8      	str	r0, [r7, #12]
 8013e82:	60b9      	str	r1, [r7, #8]
 8013e84:	4613      	mov	r3, r2
 8013e86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013e8e:	b2db      	uxtb	r3, r3
 8013e90:	2b20      	cmp	r3, #32
 8013e92:	d121      	bne.n	8013ed8 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8013e94:	68bb      	ldr	r3, [r7, #8]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d002      	beq.n	8013ea0 <HAL_UART_Transmit_IT+0x26>
 8013e9a:	88fb      	ldrh	r3, [r7, #6]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d101      	bne.n	8013ea4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8013ea0:	2301      	movs	r3, #1
 8013ea2:	e01a      	b.n	8013eda <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	68ba      	ldr	r2, [r7, #8]
 8013ea8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	88fa      	ldrh	r2, [r7, #6]
 8013eae:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	88fa      	ldrh	r2, [r7, #6]
 8013eb4:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	2200      	movs	r2, #0
 8013eba:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	2221      	movs	r2, #33	@ 0x21
 8013ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	68da      	ldr	r2, [r3, #12]
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8013ed2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8013ed4:	2300      	movs	r3, #0
 8013ed6:	e000      	b.n	8013eda <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8013ed8:	2302      	movs	r3, #2
  }
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	3714      	adds	r7, #20
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee4:	4770      	bx	lr

08013ee6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013ee6:	b580      	push	{r7, lr}
 8013ee8:	b084      	sub	sp, #16
 8013eea:	af00      	add	r7, sp, #0
 8013eec:	60f8      	str	r0, [r7, #12]
 8013eee:	60b9      	str	r1, [r7, #8]
 8013ef0:	4613      	mov	r3, r2
 8013ef2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013efa:	b2db      	uxtb	r3, r3
 8013efc:	2b20      	cmp	r3, #32
 8013efe:	d112      	bne.n	8013f26 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8013f00:	68bb      	ldr	r3, [r7, #8]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d002      	beq.n	8013f0c <HAL_UART_Receive_IT+0x26>
 8013f06:	88fb      	ldrh	r3, [r7, #6]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d101      	bne.n	8013f10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	e00b      	b.n	8013f28 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	2200      	movs	r2, #0
 8013f14:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8013f16:	88fb      	ldrh	r3, [r7, #6]
 8013f18:	461a      	mov	r2, r3
 8013f1a:	68b9      	ldr	r1, [r7, #8]
 8013f1c:	68f8      	ldr	r0, [r7, #12]
 8013f1e:	f000 fb2a 	bl	8014576 <UART_Start_Receive_IT>
 8013f22:	4603      	mov	r3, r0
 8013f24:	e000      	b.n	8013f28 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8013f26:	2302      	movs	r3, #2
  }
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3710      	adds	r7, #16
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}

08013f30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b0ba      	sub	sp, #232	@ 0xe8
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	68db      	ldr	r3, [r3, #12]
 8013f48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	695b      	ldr	r3, [r3, #20]
 8013f52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8013f56:	2300      	movs	r3, #0
 8013f58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8013f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013f66:	f003 030f 	and.w	r3, r3, #15
 8013f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8013f6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d10f      	bne.n	8013f96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8013f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013f7a:	f003 0320 	and.w	r3, r3, #32
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d009      	beq.n	8013f96 <HAL_UART_IRQHandler+0x66>
 8013f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013f86:	f003 0320 	and.w	r3, r3, #32
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d003      	beq.n	8013f96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8013f8e:	6878      	ldr	r0, [r7, #4]
 8013f90:	f000 fc07 	bl	80147a2 <UART_Receive_IT>
      return;
 8013f94:	e273      	b.n	801447e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8013f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	f000 80de 	beq.w	801415c <HAL_UART_IRQHandler+0x22c>
 8013fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013fa4:	f003 0301 	and.w	r3, r3, #1
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d106      	bne.n	8013fba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8013fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013fb0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	f000 80d1 	beq.w	801415c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8013fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013fbe:	f003 0301 	and.w	r3, r3, #1
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d00b      	beq.n	8013fde <HAL_UART_IRQHandler+0xae>
 8013fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d005      	beq.n	8013fde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013fd6:	f043 0201 	orr.w	r2, r3, #1
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013fe2:	f003 0304 	and.w	r3, r3, #4
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d00b      	beq.n	8014002 <HAL_UART_IRQHandler+0xd2>
 8013fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013fee:	f003 0301 	and.w	r3, r3, #1
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d005      	beq.n	8014002 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013ffa:	f043 0202 	orr.w	r2, r3, #2
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8014002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014006:	f003 0302 	and.w	r3, r3, #2
 801400a:	2b00      	cmp	r3, #0
 801400c:	d00b      	beq.n	8014026 <HAL_UART_IRQHandler+0xf6>
 801400e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014012:	f003 0301 	and.w	r3, r3, #1
 8014016:	2b00      	cmp	r3, #0
 8014018:	d005      	beq.n	8014026 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801401e:	f043 0204 	orr.w	r2, r3, #4
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8014026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801402a:	f003 0308 	and.w	r3, r3, #8
 801402e:	2b00      	cmp	r3, #0
 8014030:	d011      	beq.n	8014056 <HAL_UART_IRQHandler+0x126>
 8014032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014036:	f003 0320 	and.w	r3, r3, #32
 801403a:	2b00      	cmp	r3, #0
 801403c:	d105      	bne.n	801404a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801403e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014042:	f003 0301 	and.w	r3, r3, #1
 8014046:	2b00      	cmp	r3, #0
 8014048:	d005      	beq.n	8014056 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801404e:	f043 0208 	orr.w	r2, r3, #8
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801405a:	2b00      	cmp	r3, #0
 801405c:	f000 820a 	beq.w	8014474 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8014060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014064:	f003 0320 	and.w	r3, r3, #32
 8014068:	2b00      	cmp	r3, #0
 801406a:	d008      	beq.n	801407e <HAL_UART_IRQHandler+0x14e>
 801406c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014070:	f003 0320 	and.w	r3, r3, #32
 8014074:	2b00      	cmp	r3, #0
 8014076:	d002      	beq.n	801407e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f000 fb92 	bl	80147a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	695b      	ldr	r3, [r3, #20]
 8014084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014088:	2b40      	cmp	r3, #64	@ 0x40
 801408a:	bf0c      	ite	eq
 801408c:	2301      	moveq	r3, #1
 801408e:	2300      	movne	r3, #0
 8014090:	b2db      	uxtb	r3, r3
 8014092:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801409a:	f003 0308 	and.w	r3, r3, #8
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d103      	bne.n	80140aa <HAL_UART_IRQHandler+0x17a>
 80140a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d04f      	beq.n	801414a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80140aa:	6878      	ldr	r0, [r7, #4]
 80140ac:	f000 fa9d 	bl	80145ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	695b      	ldr	r3, [r3, #20]
 80140b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80140ba:	2b40      	cmp	r3, #64	@ 0x40
 80140bc:	d141      	bne.n	8014142 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	3314      	adds	r3, #20
 80140c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80140cc:	e853 3f00 	ldrex	r3, [r3]
 80140d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80140d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80140d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80140dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	3314      	adds	r3, #20
 80140e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80140ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80140ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80140f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80140fa:	e841 2300 	strex	r3, r2, [r1]
 80140fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8014102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014106:	2b00      	cmp	r3, #0
 8014108:	d1d9      	bne.n	80140be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801410e:	2b00      	cmp	r3, #0
 8014110:	d013      	beq.n	801413a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014116:	4a8a      	ldr	r2, [pc, #552]	@ (8014340 <HAL_UART_IRQHandler+0x410>)
 8014118:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801411e:	4618      	mov	r0, r3
 8014120:	f7fc ffec 	bl	80110fc <HAL_DMA_Abort_IT>
 8014124:	4603      	mov	r3, r0
 8014126:	2b00      	cmp	r3, #0
 8014128:	d016      	beq.n	8014158 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801412e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014130:	687a      	ldr	r2, [r7, #4]
 8014132:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8014134:	4610      	mov	r0, r2
 8014136:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014138:	e00e      	b.n	8014158 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801413a:	6878      	ldr	r0, [r7, #4]
 801413c:	f000 f9ac 	bl	8014498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014140:	e00a      	b.n	8014158 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f000 f9a8 	bl	8014498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014148:	e006      	b.n	8014158 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f000 f9a4 	bl	8014498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	2200      	movs	r2, #0
 8014154:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8014156:	e18d      	b.n	8014474 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014158:	bf00      	nop
    return;
 801415a:	e18b      	b.n	8014474 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014160:	2b01      	cmp	r3, #1
 8014162:	f040 8167 	bne.w	8014434 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8014166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801416a:	f003 0310 	and.w	r3, r3, #16
 801416e:	2b00      	cmp	r3, #0
 8014170:	f000 8160 	beq.w	8014434 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8014174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014178:	f003 0310 	and.w	r3, r3, #16
 801417c:	2b00      	cmp	r3, #0
 801417e:	f000 8159 	beq.w	8014434 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8014182:	2300      	movs	r3, #0
 8014184:	60bb      	str	r3, [r7, #8]
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	60bb      	str	r3, [r7, #8]
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	685b      	ldr	r3, [r3, #4]
 8014194:	60bb      	str	r3, [r7, #8]
 8014196:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	695b      	ldr	r3, [r3, #20]
 801419e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80141a2:	2b40      	cmp	r3, #64	@ 0x40
 80141a4:	f040 80ce 	bne.w	8014344 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	685b      	ldr	r3, [r3, #4]
 80141b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80141b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	f000 80a9 	beq.w	8014310 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80141c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80141c6:	429a      	cmp	r2, r3
 80141c8:	f080 80a2 	bcs.w	8014310 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80141d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80141d8:	69db      	ldr	r3, [r3, #28]
 80141da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80141de:	f000 8088 	beq.w	80142f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	330c      	adds	r3, #12
 80141e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80141f0:	e853 3f00 	ldrex	r3, [r3]
 80141f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80141f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80141fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014200:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	330c      	adds	r3, #12
 801420a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801420e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8014212:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014216:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801421a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801421e:	e841 2300 	strex	r3, r2, [r1]
 8014222:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8014226:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801422a:	2b00      	cmp	r3, #0
 801422c:	d1d9      	bne.n	80141e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	3314      	adds	r3, #20
 8014234:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014236:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014238:	e853 3f00 	ldrex	r3, [r3]
 801423c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801423e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014240:	f023 0301 	bic.w	r3, r3, #1
 8014244:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	3314      	adds	r3, #20
 801424e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8014252:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8014256:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014258:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801425a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801425e:	e841 2300 	strex	r3, r2, [r1]
 8014262:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8014264:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014266:	2b00      	cmp	r3, #0
 8014268:	d1e1      	bne.n	801422e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	3314      	adds	r3, #20
 8014270:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014272:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014274:	e853 3f00 	ldrex	r3, [r3]
 8014278:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801427a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801427c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014280:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	3314      	adds	r3, #20
 801428a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801428e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8014290:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014292:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014294:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014296:	e841 2300 	strex	r3, r2, [r1]
 801429a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801429c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d1e3      	bne.n	801426a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	2220      	movs	r2, #32
 80142a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	2200      	movs	r2, #0
 80142ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	330c      	adds	r3, #12
 80142b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80142ba:	e853 3f00 	ldrex	r3, [r3]
 80142be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80142c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80142c2:	f023 0310 	bic.w	r3, r3, #16
 80142c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	330c      	adds	r3, #12
 80142d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80142d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80142d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80142da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80142dc:	e841 2300 	strex	r3, r2, [r1]
 80142e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80142e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d1e3      	bne.n	80142b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80142ec:	4618      	mov	r0, r3
 80142ee:	f7fc fe95 	bl	801101c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	2202      	movs	r2, #2
 80142f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8014300:	b29b      	uxth	r3, r3
 8014302:	1ad3      	subs	r3, r2, r3
 8014304:	b29b      	uxth	r3, r3
 8014306:	4619      	mov	r1, r3
 8014308:	6878      	ldr	r0, [r7, #4]
 801430a:	f000 f8cf 	bl	80144ac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801430e:	e0b3      	b.n	8014478 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014314:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8014318:	429a      	cmp	r2, r3
 801431a:	f040 80ad 	bne.w	8014478 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014322:	69db      	ldr	r3, [r3, #28]
 8014324:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014328:	f040 80a6 	bne.w	8014478 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	2202      	movs	r2, #2
 8014330:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014336:	4619      	mov	r1, r3
 8014338:	6878      	ldr	r0, [r7, #4]
 801433a:	f000 f8b7 	bl	80144ac <HAL_UARTEx_RxEventCallback>
      return;
 801433e:	e09b      	b.n	8014478 <HAL_UART_IRQHandler+0x548>
 8014340:	080146b1 	.word	0x080146b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801434c:	b29b      	uxth	r3, r3
 801434e:	1ad3      	subs	r3, r2, r3
 8014350:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8014358:	b29b      	uxth	r3, r3
 801435a:	2b00      	cmp	r3, #0
 801435c:	f000 808e 	beq.w	801447c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8014360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8014364:	2b00      	cmp	r3, #0
 8014366:	f000 8089 	beq.w	801447c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	330c      	adds	r3, #12
 8014370:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014374:	e853 3f00 	ldrex	r3, [r3]
 8014378:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801437a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801437c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014380:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	330c      	adds	r3, #12
 801438a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 801438e:	647a      	str	r2, [r7, #68]	@ 0x44
 8014390:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014392:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014394:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014396:	e841 2300 	strex	r3, r2, [r1]
 801439a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801439c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d1e3      	bne.n	801436a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	3314      	adds	r3, #20
 80143a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143ac:	e853 3f00 	ldrex	r3, [r3]
 80143b0:	623b      	str	r3, [r7, #32]
   return(result);
 80143b2:	6a3b      	ldr	r3, [r7, #32]
 80143b4:	f023 0301 	bic.w	r3, r3, #1
 80143b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	3314      	adds	r3, #20
 80143c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80143c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80143c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80143cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80143ce:	e841 2300 	strex	r3, r2, [r1]
 80143d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80143d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d1e3      	bne.n	80143a2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	2220      	movs	r2, #32
 80143de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	2200      	movs	r2, #0
 80143e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	330c      	adds	r3, #12
 80143ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143f0:	693b      	ldr	r3, [r7, #16]
 80143f2:	e853 3f00 	ldrex	r3, [r3]
 80143f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	f023 0310 	bic.w	r3, r3, #16
 80143fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	330c      	adds	r3, #12
 8014408:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 801440c:	61fa      	str	r2, [r7, #28]
 801440e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014410:	69b9      	ldr	r1, [r7, #24]
 8014412:	69fa      	ldr	r2, [r7, #28]
 8014414:	e841 2300 	strex	r3, r2, [r1]
 8014418:	617b      	str	r3, [r7, #20]
   return(result);
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d1e3      	bne.n	80143e8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	2202      	movs	r2, #2
 8014424:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014426:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801442a:	4619      	mov	r1, r3
 801442c:	6878      	ldr	r0, [r7, #4]
 801442e:	f000 f83d 	bl	80144ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8014432:	e023      	b.n	801447c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8014434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801443c:	2b00      	cmp	r3, #0
 801443e:	d009      	beq.n	8014454 <HAL_UART_IRQHandler+0x524>
 8014440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014448:	2b00      	cmp	r3, #0
 801444a:	d003      	beq.n	8014454 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 801444c:	6878      	ldr	r0, [r7, #4]
 801444e:	f000 f940 	bl	80146d2 <UART_Transmit_IT>
    return;
 8014452:	e014      	b.n	801447e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8014454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801445c:	2b00      	cmp	r3, #0
 801445e:	d00e      	beq.n	801447e <HAL_UART_IRQHandler+0x54e>
 8014460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014468:	2b00      	cmp	r3, #0
 801446a:	d008      	beq.n	801447e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 801446c:	6878      	ldr	r0, [r7, #4]
 801446e:	f000 f980 	bl	8014772 <UART_EndTransmit_IT>
    return;
 8014472:	e004      	b.n	801447e <HAL_UART_IRQHandler+0x54e>
    return;
 8014474:	bf00      	nop
 8014476:	e002      	b.n	801447e <HAL_UART_IRQHandler+0x54e>
      return;
 8014478:	bf00      	nop
 801447a:	e000      	b.n	801447e <HAL_UART_IRQHandler+0x54e>
      return;
 801447c:	bf00      	nop
  }
}
 801447e:	37e8      	adds	r7, #232	@ 0xe8
 8014480:	46bd      	mov	sp, r7
 8014482:	bd80      	pop	{r7, pc}

08014484 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014484:	b480      	push	{r7}
 8014486:	b083      	sub	sp, #12
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801448c:	bf00      	nop
 801448e:	370c      	adds	r7, #12
 8014490:	46bd      	mov	sp, r7
 8014492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014496:	4770      	bx	lr

08014498 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014498:	b480      	push	{r7}
 801449a:	b083      	sub	sp, #12
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80144a0:	bf00      	nop
 80144a2:	370c      	adds	r7, #12
 80144a4:	46bd      	mov	sp, r7
 80144a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144aa:	4770      	bx	lr

080144ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80144ac:	b480      	push	{r7}
 80144ae:	b083      	sub	sp, #12
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
 80144b4:	460b      	mov	r3, r1
 80144b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80144b8:	bf00      	nop
 80144ba:	370c      	adds	r7, #12
 80144bc:	46bd      	mov	sp, r7
 80144be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c2:	4770      	bx	lr

080144c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b086      	sub	sp, #24
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	60f8      	str	r0, [r7, #12]
 80144cc:	60b9      	str	r1, [r7, #8]
 80144ce:	603b      	str	r3, [r7, #0]
 80144d0:	4613      	mov	r3, r2
 80144d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80144d4:	e03b      	b.n	801454e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80144d6:	6a3b      	ldr	r3, [r7, #32]
 80144d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144dc:	d037      	beq.n	801454e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80144de:	f7fc fc59 	bl	8010d94 <HAL_GetTick>
 80144e2:	4602      	mov	r2, r0
 80144e4:	683b      	ldr	r3, [r7, #0]
 80144e6:	1ad3      	subs	r3, r2, r3
 80144e8:	6a3a      	ldr	r2, [r7, #32]
 80144ea:	429a      	cmp	r2, r3
 80144ec:	d302      	bcc.n	80144f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80144ee:	6a3b      	ldr	r3, [r7, #32]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d101      	bne.n	80144f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80144f4:	2303      	movs	r3, #3
 80144f6:	e03a      	b.n	801456e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	68db      	ldr	r3, [r3, #12]
 80144fe:	f003 0304 	and.w	r3, r3, #4
 8014502:	2b00      	cmp	r3, #0
 8014504:	d023      	beq.n	801454e <UART_WaitOnFlagUntilTimeout+0x8a>
 8014506:	68bb      	ldr	r3, [r7, #8]
 8014508:	2b80      	cmp	r3, #128	@ 0x80
 801450a:	d020      	beq.n	801454e <UART_WaitOnFlagUntilTimeout+0x8a>
 801450c:	68bb      	ldr	r3, [r7, #8]
 801450e:	2b40      	cmp	r3, #64	@ 0x40
 8014510:	d01d      	beq.n	801454e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	f003 0308 	and.w	r3, r3, #8
 801451c:	2b08      	cmp	r3, #8
 801451e:	d116      	bne.n	801454e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8014520:	2300      	movs	r3, #0
 8014522:	617b      	str	r3, [r7, #20]
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	617b      	str	r3, [r7, #20]
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	685b      	ldr	r3, [r3, #4]
 8014532:	617b      	str	r3, [r7, #20]
 8014534:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014536:	68f8      	ldr	r0, [r7, #12]
 8014538:	f000 f857 	bl	80145ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	2208      	movs	r2, #8
 8014540:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	2200      	movs	r2, #0
 8014546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 801454a:	2301      	movs	r3, #1
 801454c:	e00f      	b.n	801456e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	681a      	ldr	r2, [r3, #0]
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	4013      	ands	r3, r2
 8014558:	68ba      	ldr	r2, [r7, #8]
 801455a:	429a      	cmp	r2, r3
 801455c:	bf0c      	ite	eq
 801455e:	2301      	moveq	r3, #1
 8014560:	2300      	movne	r3, #0
 8014562:	b2db      	uxtb	r3, r3
 8014564:	461a      	mov	r2, r3
 8014566:	79fb      	ldrb	r3, [r7, #7]
 8014568:	429a      	cmp	r2, r3
 801456a:	d0b4      	beq.n	80144d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801456c:	2300      	movs	r3, #0
}
 801456e:	4618      	mov	r0, r3
 8014570:	3718      	adds	r7, #24
 8014572:	46bd      	mov	sp, r7
 8014574:	bd80      	pop	{r7, pc}

08014576 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014576:	b480      	push	{r7}
 8014578:	b085      	sub	sp, #20
 801457a:	af00      	add	r7, sp, #0
 801457c:	60f8      	str	r0, [r7, #12]
 801457e:	60b9      	str	r1, [r7, #8]
 8014580:	4613      	mov	r3, r2
 8014582:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	68ba      	ldr	r2, [r7, #8]
 8014588:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	88fa      	ldrh	r2, [r7, #6]
 801458e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	88fa      	ldrh	r2, [r7, #6]
 8014594:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	2200      	movs	r2, #0
 801459a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	2222      	movs	r2, #34	@ 0x22
 80145a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	691b      	ldr	r3, [r3, #16]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d007      	beq.n	80145bc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	68da      	ldr	r2, [r3, #12]
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80145ba:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	695a      	ldr	r2, [r3, #20]
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	f042 0201 	orr.w	r2, r2, #1
 80145ca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	68da      	ldr	r2, [r3, #12]
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	f042 0220 	orr.w	r2, r2, #32
 80145da:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80145dc:	2300      	movs	r3, #0
}
 80145de:	4618      	mov	r0, r3
 80145e0:	3714      	adds	r7, #20
 80145e2:	46bd      	mov	sp, r7
 80145e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e8:	4770      	bx	lr

080145ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80145ea:	b480      	push	{r7}
 80145ec:	b095      	sub	sp, #84	@ 0x54
 80145ee:	af00      	add	r7, sp, #0
 80145f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	330c      	adds	r3, #12
 80145f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145fc:	e853 3f00 	ldrex	r3, [r3]
 8014600:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8014602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014604:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014608:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	330c      	adds	r3, #12
 8014610:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014612:	643a      	str	r2, [r7, #64]	@ 0x40
 8014614:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014616:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014618:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801461a:	e841 2300 	strex	r3, r2, [r1]
 801461e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8014620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014622:	2b00      	cmp	r3, #0
 8014624:	d1e5      	bne.n	80145f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	3314      	adds	r3, #20
 801462c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801462e:	6a3b      	ldr	r3, [r7, #32]
 8014630:	e853 3f00 	ldrex	r3, [r3]
 8014634:	61fb      	str	r3, [r7, #28]
   return(result);
 8014636:	69fb      	ldr	r3, [r7, #28]
 8014638:	f023 0301 	bic.w	r3, r3, #1
 801463c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	3314      	adds	r3, #20
 8014644:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014646:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014648:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801464a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801464c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801464e:	e841 2300 	strex	r3, r2, [r1]
 8014652:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014656:	2b00      	cmp	r3, #0
 8014658:	d1e5      	bne.n	8014626 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801465e:	2b01      	cmp	r3, #1
 8014660:	d119      	bne.n	8014696 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	330c      	adds	r3, #12
 8014668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	e853 3f00 	ldrex	r3, [r3]
 8014670:	60bb      	str	r3, [r7, #8]
   return(result);
 8014672:	68bb      	ldr	r3, [r7, #8]
 8014674:	f023 0310 	bic.w	r3, r3, #16
 8014678:	647b      	str	r3, [r7, #68]	@ 0x44
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	330c      	adds	r3, #12
 8014680:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014682:	61ba      	str	r2, [r7, #24]
 8014684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014686:	6979      	ldr	r1, [r7, #20]
 8014688:	69ba      	ldr	r2, [r7, #24]
 801468a:	e841 2300 	strex	r3, r2, [r1]
 801468e:	613b      	str	r3, [r7, #16]
   return(result);
 8014690:	693b      	ldr	r3, [r7, #16]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d1e5      	bne.n	8014662 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	2220      	movs	r2, #32
 801469a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	2200      	movs	r2, #0
 80146a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80146a4:	bf00      	nop
 80146a6:	3754      	adds	r7, #84	@ 0x54
 80146a8:	46bd      	mov	sp, r7
 80146aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ae:	4770      	bx	lr

080146b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b084      	sub	sp, #16
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80146bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	2200      	movs	r2, #0
 80146c2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80146c4:	68f8      	ldr	r0, [r7, #12]
 80146c6:	f7ff fee7 	bl	8014498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80146ca:	bf00      	nop
 80146cc:	3710      	adds	r7, #16
 80146ce:	46bd      	mov	sp, r7
 80146d0:	bd80      	pop	{r7, pc}

080146d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80146d2:	b480      	push	{r7}
 80146d4:	b085      	sub	sp, #20
 80146d6:	af00      	add	r7, sp, #0
 80146d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80146e0:	b2db      	uxtb	r3, r3
 80146e2:	2b21      	cmp	r3, #33	@ 0x21
 80146e4:	d13e      	bne.n	8014764 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	689b      	ldr	r3, [r3, #8]
 80146ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80146ee:	d114      	bne.n	801471a <UART_Transmit_IT+0x48>
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	691b      	ldr	r3, [r3, #16]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d110      	bne.n	801471a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	6a1b      	ldr	r3, [r3, #32]
 80146fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	881b      	ldrh	r3, [r3, #0]
 8014702:	461a      	mov	r2, r3
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801470c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	6a1b      	ldr	r3, [r3, #32]
 8014712:	1c9a      	adds	r2, r3, #2
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	621a      	str	r2, [r3, #32]
 8014718:	e008      	b.n	801472c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	6a1b      	ldr	r3, [r3, #32]
 801471e:	1c59      	adds	r1, r3, #1
 8014720:	687a      	ldr	r2, [r7, #4]
 8014722:	6211      	str	r1, [r2, #32]
 8014724:	781a      	ldrb	r2, [r3, #0]
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8014730:	b29b      	uxth	r3, r3
 8014732:	3b01      	subs	r3, #1
 8014734:	b29b      	uxth	r3, r3
 8014736:	687a      	ldr	r2, [r7, #4]
 8014738:	4619      	mov	r1, r3
 801473a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 801473c:	2b00      	cmp	r3, #0
 801473e:	d10f      	bne.n	8014760 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	68da      	ldr	r2, [r3, #12]
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801474e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	68da      	ldr	r2, [r3, #12]
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801475e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8014760:	2300      	movs	r3, #0
 8014762:	e000      	b.n	8014766 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8014764:	2302      	movs	r3, #2
  }
}
 8014766:	4618      	mov	r0, r3
 8014768:	3714      	adds	r7, #20
 801476a:	46bd      	mov	sp, r7
 801476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014770:	4770      	bx	lr

08014772 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014772:	b580      	push	{r7, lr}
 8014774:	b082      	sub	sp, #8
 8014776:	af00      	add	r7, sp, #0
 8014778:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	68da      	ldr	r2, [r3, #12]
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8014788:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	2220      	movs	r2, #32
 801478e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8014792:	6878      	ldr	r0, [r7, #4]
 8014794:	f7ff fe76 	bl	8014484 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8014798:	2300      	movs	r3, #0
}
 801479a:	4618      	mov	r0, r3
 801479c:	3708      	adds	r7, #8
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}

080147a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80147a2:	b580      	push	{r7, lr}
 80147a4:	b08c      	sub	sp, #48	@ 0x30
 80147a6:	af00      	add	r7, sp, #0
 80147a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80147aa:	2300      	movs	r3, #0
 80147ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80147ae:	2300      	movs	r3, #0
 80147b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80147b8:	b2db      	uxtb	r3, r3
 80147ba:	2b22      	cmp	r3, #34	@ 0x22
 80147bc:	f040 80aa 	bne.w	8014914 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	689b      	ldr	r3, [r3, #8]
 80147c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80147c8:	d115      	bne.n	80147f6 <UART_Receive_IT+0x54>
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	691b      	ldr	r3, [r3, #16]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d111      	bne.n	80147f6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	685b      	ldr	r3, [r3, #4]
 80147de:	b29b      	uxth	r3, r3
 80147e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80147e4:	b29a      	uxth	r2, r3
 80147e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147ee:	1c9a      	adds	r2, r3, #2
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80147f4:	e024      	b.n	8014840 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	689b      	ldr	r3, [r3, #8]
 8014800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014804:	d007      	beq.n	8014816 <UART_Receive_IT+0x74>
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	689b      	ldr	r3, [r3, #8]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d10a      	bne.n	8014824 <UART_Receive_IT+0x82>
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	691b      	ldr	r3, [r3, #16]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d106      	bne.n	8014824 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	685b      	ldr	r3, [r3, #4]
 801481c:	b2da      	uxtb	r2, r3
 801481e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014820:	701a      	strb	r2, [r3, #0]
 8014822:	e008      	b.n	8014836 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	685b      	ldr	r3, [r3, #4]
 801482a:	b2db      	uxtb	r3, r3
 801482c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014830:	b2da      	uxtb	r2, r3
 8014832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014834:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801483a:	1c5a      	adds	r2, r3, #1
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8014844:	b29b      	uxth	r3, r3
 8014846:	3b01      	subs	r3, #1
 8014848:	b29b      	uxth	r3, r3
 801484a:	687a      	ldr	r2, [r7, #4]
 801484c:	4619      	mov	r1, r3
 801484e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8014850:	2b00      	cmp	r3, #0
 8014852:	d15d      	bne.n	8014910 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	68da      	ldr	r2, [r3, #12]
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	f022 0220 	bic.w	r2, r2, #32
 8014862:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	68da      	ldr	r2, [r3, #12]
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8014872:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	695a      	ldr	r2, [r3, #20]
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	f022 0201 	bic.w	r2, r2, #1
 8014882:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	2220      	movs	r2, #32
 8014888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	2200      	movs	r2, #0
 8014890:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014896:	2b01      	cmp	r3, #1
 8014898:	d135      	bne.n	8014906 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	2200      	movs	r2, #0
 801489e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	330c      	adds	r3, #12
 80148a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80148a8:	697b      	ldr	r3, [r7, #20]
 80148aa:	e853 3f00 	ldrex	r3, [r3]
 80148ae:	613b      	str	r3, [r7, #16]
   return(result);
 80148b0:	693b      	ldr	r3, [r7, #16]
 80148b2:	f023 0310 	bic.w	r3, r3, #16
 80148b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	330c      	adds	r3, #12
 80148be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80148c0:	623a      	str	r2, [r7, #32]
 80148c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148c4:	69f9      	ldr	r1, [r7, #28]
 80148c6:	6a3a      	ldr	r2, [r7, #32]
 80148c8:	e841 2300 	strex	r3, r2, [r1]
 80148cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80148ce:	69bb      	ldr	r3, [r7, #24]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d1e5      	bne.n	80148a0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	f003 0310 	and.w	r3, r3, #16
 80148de:	2b10      	cmp	r3, #16
 80148e0:	d10a      	bne.n	80148f8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80148e2:	2300      	movs	r3, #0
 80148e4:	60fb      	str	r3, [r7, #12]
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	60fb      	str	r3, [r7, #12]
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	685b      	ldr	r3, [r3, #4]
 80148f4:	60fb      	str	r3, [r7, #12]
 80148f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80148fc:	4619      	mov	r1, r3
 80148fe:	6878      	ldr	r0, [r7, #4]
 8014900:	f7ff fdd4 	bl	80144ac <HAL_UARTEx_RxEventCallback>
 8014904:	e002      	b.n	801490c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8014906:	6878      	ldr	r0, [r7, #4]
 8014908:	f7f6 fc46 	bl	800b198 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801490c:	2300      	movs	r3, #0
 801490e:	e002      	b.n	8014916 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8014910:	2300      	movs	r3, #0
 8014912:	e000      	b.n	8014916 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8014914:	2302      	movs	r3, #2
  }
}
 8014916:	4618      	mov	r0, r3
 8014918:	3730      	adds	r7, #48	@ 0x30
 801491a:	46bd      	mov	sp, r7
 801491c:	bd80      	pop	{r7, pc}
	...

08014920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014924:	b0c0      	sub	sp, #256	@ 0x100
 8014926:	af00      	add	r7, sp, #0
 8014928:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	691b      	ldr	r3, [r3, #16]
 8014934:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8014938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801493c:	68d9      	ldr	r1, [r3, #12]
 801493e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014942:	681a      	ldr	r2, [r3, #0]
 8014944:	ea40 0301 	orr.w	r3, r0, r1
 8014948:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801494a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801494e:	689a      	ldr	r2, [r3, #8]
 8014950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014954:	691b      	ldr	r3, [r3, #16]
 8014956:	431a      	orrs	r2, r3
 8014958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801495c:	695b      	ldr	r3, [r3, #20]
 801495e:	431a      	orrs	r2, r3
 8014960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014964:	69db      	ldr	r3, [r3, #28]
 8014966:	4313      	orrs	r3, r2
 8014968:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	68db      	ldr	r3, [r3, #12]
 8014974:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8014978:	f021 010c 	bic.w	r1, r1, #12
 801497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014980:	681a      	ldr	r2, [r3, #0]
 8014982:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8014986:	430b      	orrs	r3, r1
 8014988:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801498a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	695b      	ldr	r3, [r3, #20]
 8014992:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8014996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801499a:	6999      	ldr	r1, [r3, #24]
 801499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80149a0:	681a      	ldr	r2, [r3, #0]
 80149a2:	ea40 0301 	orr.w	r3, r0, r1
 80149a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80149a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80149ac:	681a      	ldr	r2, [r3, #0]
 80149ae:	4b8f      	ldr	r3, [pc, #572]	@ (8014bec <UART_SetConfig+0x2cc>)
 80149b0:	429a      	cmp	r2, r3
 80149b2:	d005      	beq.n	80149c0 <UART_SetConfig+0xa0>
 80149b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80149b8:	681a      	ldr	r2, [r3, #0]
 80149ba:	4b8d      	ldr	r3, [pc, #564]	@ (8014bf0 <UART_SetConfig+0x2d0>)
 80149bc:	429a      	cmp	r2, r3
 80149be:	d104      	bne.n	80149ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80149c0:	f7fd f820 	bl	8011a04 <HAL_RCC_GetPCLK2Freq>
 80149c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80149c8:	e003      	b.n	80149d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80149ca:	f7fd f807 	bl	80119dc <HAL_RCC_GetPCLK1Freq>
 80149ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80149d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80149d6:	69db      	ldr	r3, [r3, #28]
 80149d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80149dc:	f040 810c 	bne.w	8014bf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80149e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80149e4:	2200      	movs	r2, #0
 80149e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80149ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80149ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80149f2:	4622      	mov	r2, r4
 80149f4:	462b      	mov	r3, r5
 80149f6:	1891      	adds	r1, r2, r2
 80149f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80149fa:	415b      	adcs	r3, r3
 80149fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80149fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8014a02:	4621      	mov	r1, r4
 8014a04:	eb12 0801 	adds.w	r8, r2, r1
 8014a08:	4629      	mov	r1, r5
 8014a0a:	eb43 0901 	adc.w	r9, r3, r1
 8014a0e:	f04f 0200 	mov.w	r2, #0
 8014a12:	f04f 0300 	mov.w	r3, #0
 8014a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8014a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8014a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8014a22:	4690      	mov	r8, r2
 8014a24:	4699      	mov	r9, r3
 8014a26:	4623      	mov	r3, r4
 8014a28:	eb18 0303 	adds.w	r3, r8, r3
 8014a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8014a30:	462b      	mov	r3, r5
 8014a32:	eb49 0303 	adc.w	r3, r9, r3
 8014a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8014a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014a3e:	685b      	ldr	r3, [r3, #4]
 8014a40:	2200      	movs	r2, #0
 8014a42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8014a46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8014a4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8014a4e:	460b      	mov	r3, r1
 8014a50:	18db      	adds	r3, r3, r3
 8014a52:	653b      	str	r3, [r7, #80]	@ 0x50
 8014a54:	4613      	mov	r3, r2
 8014a56:	eb42 0303 	adc.w	r3, r2, r3
 8014a5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8014a5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8014a60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8014a64:	f7f4 f8f0 	bl	8008c48 <__aeabi_uldivmod>
 8014a68:	4602      	mov	r2, r0
 8014a6a:	460b      	mov	r3, r1
 8014a6c:	4b61      	ldr	r3, [pc, #388]	@ (8014bf4 <UART_SetConfig+0x2d4>)
 8014a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8014a72:	095b      	lsrs	r3, r3, #5
 8014a74:	011c      	lsls	r4, r3, #4
 8014a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8014a80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8014a84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8014a88:	4642      	mov	r2, r8
 8014a8a:	464b      	mov	r3, r9
 8014a8c:	1891      	adds	r1, r2, r2
 8014a8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8014a90:	415b      	adcs	r3, r3
 8014a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014a94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8014a98:	4641      	mov	r1, r8
 8014a9a:	eb12 0a01 	adds.w	sl, r2, r1
 8014a9e:	4649      	mov	r1, r9
 8014aa0:	eb43 0b01 	adc.w	fp, r3, r1
 8014aa4:	f04f 0200 	mov.w	r2, #0
 8014aa8:	f04f 0300 	mov.w	r3, #0
 8014aac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8014ab0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8014ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014ab8:	4692      	mov	sl, r2
 8014aba:	469b      	mov	fp, r3
 8014abc:	4643      	mov	r3, r8
 8014abe:	eb1a 0303 	adds.w	r3, sl, r3
 8014ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8014ac6:	464b      	mov	r3, r9
 8014ac8:	eb4b 0303 	adc.w	r3, fp, r3
 8014acc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8014ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014ad4:	685b      	ldr	r3, [r3, #4]
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8014adc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8014ae0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8014ae4:	460b      	mov	r3, r1
 8014ae6:	18db      	adds	r3, r3, r3
 8014ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8014aea:	4613      	mov	r3, r2
 8014aec:	eb42 0303 	adc.w	r3, r2, r3
 8014af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8014af2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8014af6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8014afa:	f7f4 f8a5 	bl	8008c48 <__aeabi_uldivmod>
 8014afe:	4602      	mov	r2, r0
 8014b00:	460b      	mov	r3, r1
 8014b02:	4611      	mov	r1, r2
 8014b04:	4b3b      	ldr	r3, [pc, #236]	@ (8014bf4 <UART_SetConfig+0x2d4>)
 8014b06:	fba3 2301 	umull	r2, r3, r3, r1
 8014b0a:	095b      	lsrs	r3, r3, #5
 8014b0c:	2264      	movs	r2, #100	@ 0x64
 8014b0e:	fb02 f303 	mul.w	r3, r2, r3
 8014b12:	1acb      	subs	r3, r1, r3
 8014b14:	00db      	lsls	r3, r3, #3
 8014b16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8014b1a:	4b36      	ldr	r3, [pc, #216]	@ (8014bf4 <UART_SetConfig+0x2d4>)
 8014b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8014b20:	095b      	lsrs	r3, r3, #5
 8014b22:	005b      	lsls	r3, r3, #1
 8014b24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8014b28:	441c      	add	r4, r3
 8014b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014b2e:	2200      	movs	r2, #0
 8014b30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8014b34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8014b38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8014b3c:	4642      	mov	r2, r8
 8014b3e:	464b      	mov	r3, r9
 8014b40:	1891      	adds	r1, r2, r2
 8014b42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8014b44:	415b      	adcs	r3, r3
 8014b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8014b4c:	4641      	mov	r1, r8
 8014b4e:	1851      	adds	r1, r2, r1
 8014b50:	6339      	str	r1, [r7, #48]	@ 0x30
 8014b52:	4649      	mov	r1, r9
 8014b54:	414b      	adcs	r3, r1
 8014b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8014b58:	f04f 0200 	mov.w	r2, #0
 8014b5c:	f04f 0300 	mov.w	r3, #0
 8014b60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8014b64:	4659      	mov	r1, fp
 8014b66:	00cb      	lsls	r3, r1, #3
 8014b68:	4651      	mov	r1, sl
 8014b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014b6e:	4651      	mov	r1, sl
 8014b70:	00ca      	lsls	r2, r1, #3
 8014b72:	4610      	mov	r0, r2
 8014b74:	4619      	mov	r1, r3
 8014b76:	4603      	mov	r3, r0
 8014b78:	4642      	mov	r2, r8
 8014b7a:	189b      	adds	r3, r3, r2
 8014b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014b80:	464b      	mov	r3, r9
 8014b82:	460a      	mov	r2, r1
 8014b84:	eb42 0303 	adc.w	r3, r2, r3
 8014b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8014b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014b90:	685b      	ldr	r3, [r3, #4]
 8014b92:	2200      	movs	r2, #0
 8014b94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8014b98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8014b9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8014ba0:	460b      	mov	r3, r1
 8014ba2:	18db      	adds	r3, r3, r3
 8014ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014ba6:	4613      	mov	r3, r2
 8014ba8:	eb42 0303 	adc.w	r3, r2, r3
 8014bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8014bb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8014bb6:	f7f4 f847 	bl	8008c48 <__aeabi_uldivmod>
 8014bba:	4602      	mov	r2, r0
 8014bbc:	460b      	mov	r3, r1
 8014bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8014bf4 <UART_SetConfig+0x2d4>)
 8014bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8014bc4:	095b      	lsrs	r3, r3, #5
 8014bc6:	2164      	movs	r1, #100	@ 0x64
 8014bc8:	fb01 f303 	mul.w	r3, r1, r3
 8014bcc:	1ad3      	subs	r3, r2, r3
 8014bce:	00db      	lsls	r3, r3, #3
 8014bd0:	3332      	adds	r3, #50	@ 0x32
 8014bd2:	4a08      	ldr	r2, [pc, #32]	@ (8014bf4 <UART_SetConfig+0x2d4>)
 8014bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8014bd8:	095b      	lsrs	r3, r3, #5
 8014bda:	f003 0207 	and.w	r2, r3, #7
 8014bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	4422      	add	r2, r4
 8014be6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8014be8:	e106      	b.n	8014df8 <UART_SetConfig+0x4d8>
 8014bea:	bf00      	nop
 8014bec:	40011000 	.word	0x40011000
 8014bf0:	40011400 	.word	0x40011400
 8014bf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8014c02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8014c06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8014c0a:	4642      	mov	r2, r8
 8014c0c:	464b      	mov	r3, r9
 8014c0e:	1891      	adds	r1, r2, r2
 8014c10:	6239      	str	r1, [r7, #32]
 8014c12:	415b      	adcs	r3, r3
 8014c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8014c16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014c1a:	4641      	mov	r1, r8
 8014c1c:	1854      	adds	r4, r2, r1
 8014c1e:	4649      	mov	r1, r9
 8014c20:	eb43 0501 	adc.w	r5, r3, r1
 8014c24:	f04f 0200 	mov.w	r2, #0
 8014c28:	f04f 0300 	mov.w	r3, #0
 8014c2c:	00eb      	lsls	r3, r5, #3
 8014c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8014c32:	00e2      	lsls	r2, r4, #3
 8014c34:	4614      	mov	r4, r2
 8014c36:	461d      	mov	r5, r3
 8014c38:	4643      	mov	r3, r8
 8014c3a:	18e3      	adds	r3, r4, r3
 8014c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8014c40:	464b      	mov	r3, r9
 8014c42:	eb45 0303 	adc.w	r3, r5, r3
 8014c46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014c4e:	685b      	ldr	r3, [r3, #4]
 8014c50:	2200      	movs	r2, #0
 8014c52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8014c56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8014c5a:	f04f 0200 	mov.w	r2, #0
 8014c5e:	f04f 0300 	mov.w	r3, #0
 8014c62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8014c66:	4629      	mov	r1, r5
 8014c68:	008b      	lsls	r3, r1, #2
 8014c6a:	4621      	mov	r1, r4
 8014c6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014c70:	4621      	mov	r1, r4
 8014c72:	008a      	lsls	r2, r1, #2
 8014c74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8014c78:	f7f3 ffe6 	bl	8008c48 <__aeabi_uldivmod>
 8014c7c:	4602      	mov	r2, r0
 8014c7e:	460b      	mov	r3, r1
 8014c80:	4b60      	ldr	r3, [pc, #384]	@ (8014e04 <UART_SetConfig+0x4e4>)
 8014c82:	fba3 2302 	umull	r2, r3, r3, r2
 8014c86:	095b      	lsrs	r3, r3, #5
 8014c88:	011c      	lsls	r4, r3, #4
 8014c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014c8e:	2200      	movs	r2, #0
 8014c90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014c94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8014c98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8014c9c:	4642      	mov	r2, r8
 8014c9e:	464b      	mov	r3, r9
 8014ca0:	1891      	adds	r1, r2, r2
 8014ca2:	61b9      	str	r1, [r7, #24]
 8014ca4:	415b      	adcs	r3, r3
 8014ca6:	61fb      	str	r3, [r7, #28]
 8014ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014cac:	4641      	mov	r1, r8
 8014cae:	1851      	adds	r1, r2, r1
 8014cb0:	6139      	str	r1, [r7, #16]
 8014cb2:	4649      	mov	r1, r9
 8014cb4:	414b      	adcs	r3, r1
 8014cb6:	617b      	str	r3, [r7, #20]
 8014cb8:	f04f 0200 	mov.w	r2, #0
 8014cbc:	f04f 0300 	mov.w	r3, #0
 8014cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8014cc4:	4659      	mov	r1, fp
 8014cc6:	00cb      	lsls	r3, r1, #3
 8014cc8:	4651      	mov	r1, sl
 8014cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014cce:	4651      	mov	r1, sl
 8014cd0:	00ca      	lsls	r2, r1, #3
 8014cd2:	4610      	mov	r0, r2
 8014cd4:	4619      	mov	r1, r3
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	4642      	mov	r2, r8
 8014cda:	189b      	adds	r3, r3, r2
 8014cdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8014ce0:	464b      	mov	r3, r9
 8014ce2:	460a      	mov	r2, r1
 8014ce4:	eb42 0303 	adc.w	r3, r2, r3
 8014ce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014cf0:	685b      	ldr	r3, [r3, #4]
 8014cf2:	2200      	movs	r2, #0
 8014cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014cf6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8014cf8:	f04f 0200 	mov.w	r2, #0
 8014cfc:	f04f 0300 	mov.w	r3, #0
 8014d00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8014d04:	4649      	mov	r1, r9
 8014d06:	008b      	lsls	r3, r1, #2
 8014d08:	4641      	mov	r1, r8
 8014d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014d0e:	4641      	mov	r1, r8
 8014d10:	008a      	lsls	r2, r1, #2
 8014d12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8014d16:	f7f3 ff97 	bl	8008c48 <__aeabi_uldivmod>
 8014d1a:	4602      	mov	r2, r0
 8014d1c:	460b      	mov	r3, r1
 8014d1e:	4611      	mov	r1, r2
 8014d20:	4b38      	ldr	r3, [pc, #224]	@ (8014e04 <UART_SetConfig+0x4e4>)
 8014d22:	fba3 2301 	umull	r2, r3, r3, r1
 8014d26:	095b      	lsrs	r3, r3, #5
 8014d28:	2264      	movs	r2, #100	@ 0x64
 8014d2a:	fb02 f303 	mul.w	r3, r2, r3
 8014d2e:	1acb      	subs	r3, r1, r3
 8014d30:	011b      	lsls	r3, r3, #4
 8014d32:	3332      	adds	r3, #50	@ 0x32
 8014d34:	4a33      	ldr	r2, [pc, #204]	@ (8014e04 <UART_SetConfig+0x4e4>)
 8014d36:	fba2 2303 	umull	r2, r3, r2, r3
 8014d3a:	095b      	lsrs	r3, r3, #5
 8014d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014d40:	441c      	add	r4, r3
 8014d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014d46:	2200      	movs	r2, #0
 8014d48:	673b      	str	r3, [r7, #112]	@ 0x70
 8014d4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8014d4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8014d50:	4642      	mov	r2, r8
 8014d52:	464b      	mov	r3, r9
 8014d54:	1891      	adds	r1, r2, r2
 8014d56:	60b9      	str	r1, [r7, #8]
 8014d58:	415b      	adcs	r3, r3
 8014d5a:	60fb      	str	r3, [r7, #12]
 8014d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014d60:	4641      	mov	r1, r8
 8014d62:	1851      	adds	r1, r2, r1
 8014d64:	6039      	str	r1, [r7, #0]
 8014d66:	4649      	mov	r1, r9
 8014d68:	414b      	adcs	r3, r1
 8014d6a:	607b      	str	r3, [r7, #4]
 8014d6c:	f04f 0200 	mov.w	r2, #0
 8014d70:	f04f 0300 	mov.w	r3, #0
 8014d74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8014d78:	4659      	mov	r1, fp
 8014d7a:	00cb      	lsls	r3, r1, #3
 8014d7c:	4651      	mov	r1, sl
 8014d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014d82:	4651      	mov	r1, sl
 8014d84:	00ca      	lsls	r2, r1, #3
 8014d86:	4610      	mov	r0, r2
 8014d88:	4619      	mov	r1, r3
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	4642      	mov	r2, r8
 8014d8e:	189b      	adds	r3, r3, r2
 8014d90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014d92:	464b      	mov	r3, r9
 8014d94:	460a      	mov	r2, r1
 8014d96:	eb42 0303 	adc.w	r3, r2, r3
 8014d9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014da0:	685b      	ldr	r3, [r3, #4]
 8014da2:	2200      	movs	r2, #0
 8014da4:	663b      	str	r3, [r7, #96]	@ 0x60
 8014da6:	667a      	str	r2, [r7, #100]	@ 0x64
 8014da8:	f04f 0200 	mov.w	r2, #0
 8014dac:	f04f 0300 	mov.w	r3, #0
 8014db0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8014db4:	4649      	mov	r1, r9
 8014db6:	008b      	lsls	r3, r1, #2
 8014db8:	4641      	mov	r1, r8
 8014dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014dbe:	4641      	mov	r1, r8
 8014dc0:	008a      	lsls	r2, r1, #2
 8014dc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8014dc6:	f7f3 ff3f 	bl	8008c48 <__aeabi_uldivmod>
 8014dca:	4602      	mov	r2, r0
 8014dcc:	460b      	mov	r3, r1
 8014dce:	4b0d      	ldr	r3, [pc, #52]	@ (8014e04 <UART_SetConfig+0x4e4>)
 8014dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8014dd4:	095b      	lsrs	r3, r3, #5
 8014dd6:	2164      	movs	r1, #100	@ 0x64
 8014dd8:	fb01 f303 	mul.w	r3, r1, r3
 8014ddc:	1ad3      	subs	r3, r2, r3
 8014dde:	011b      	lsls	r3, r3, #4
 8014de0:	3332      	adds	r3, #50	@ 0x32
 8014de2:	4a08      	ldr	r2, [pc, #32]	@ (8014e04 <UART_SetConfig+0x4e4>)
 8014de4:	fba2 2303 	umull	r2, r3, r2, r3
 8014de8:	095b      	lsrs	r3, r3, #5
 8014dea:	f003 020f 	and.w	r2, r3, #15
 8014dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	4422      	add	r2, r4
 8014df6:	609a      	str	r2, [r3, #8]
}
 8014df8:	bf00      	nop
 8014dfa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014e04:	51eb851f 	.word	0x51eb851f

08014e08 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014e08:	b480      	push	{r7}
 8014e0a:	b083      	sub	sp, #12
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	f103 0208 	add.w	r2, r3, #8
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8014e20:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	f103 0208 	add.w	r2, r3, #8
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	f103 0208 	add.w	r2, r3, #8
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	2200      	movs	r2, #0
 8014e3a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014e3c:	bf00      	nop
 8014e3e:	370c      	adds	r7, #12
 8014e40:	46bd      	mov	sp, r7
 8014e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e46:	4770      	bx	lr

08014e48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014e48:	b480      	push	{r7}
 8014e4a:	b083      	sub	sp, #12
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	2200      	movs	r2, #0
 8014e54:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014e56:	bf00      	nop
 8014e58:	370c      	adds	r7, #12
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e60:	4770      	bx	lr

08014e62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8014e62:	b480      	push	{r7}
 8014e64:	b085      	sub	sp, #20
 8014e66:	af00      	add	r7, sp, #0
 8014e68:	6078      	str	r0, [r7, #4]
 8014e6a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	685b      	ldr	r3, [r3, #4]
 8014e70:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	68fa      	ldr	r2, [r7, #12]
 8014e76:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	689a      	ldr	r2, [r3, #8]
 8014e7c:	683b      	ldr	r3, [r7, #0]
 8014e7e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	689b      	ldr	r3, [r3, #8]
 8014e84:	683a      	ldr	r2, [r7, #0]
 8014e86:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	683a      	ldr	r2, [r7, #0]
 8014e8c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	687a      	ldr	r2, [r7, #4]
 8014e92:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	1c5a      	adds	r2, r3, #1
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	601a      	str	r2, [r3, #0]
}
 8014e9e:	bf00      	nop
 8014ea0:	3714      	adds	r7, #20
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea8:	4770      	bx	lr

08014eaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8014eaa:	b480      	push	{r7}
 8014eac:	b085      	sub	sp, #20
 8014eae:	af00      	add	r7, sp, #0
 8014eb0:	6078      	str	r0, [r7, #4]
 8014eb2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014eb4:	683b      	ldr	r3, [r7, #0]
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8014eba:	68bb      	ldr	r3, [r7, #8]
 8014ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ec0:	d103      	bne.n	8014eca <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	691b      	ldr	r3, [r3, #16]
 8014ec6:	60fb      	str	r3, [r7, #12]
 8014ec8:	e00c      	b.n	8014ee4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	3308      	adds	r3, #8
 8014ece:	60fb      	str	r3, [r7, #12]
 8014ed0:	e002      	b.n	8014ed8 <vListInsert+0x2e>
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	685b      	ldr	r3, [r3, #4]
 8014ed6:	60fb      	str	r3, [r7, #12]
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	685b      	ldr	r3, [r3, #4]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	68ba      	ldr	r2, [r7, #8]
 8014ee0:	429a      	cmp	r2, r3
 8014ee2:	d2f6      	bcs.n	8014ed2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	685a      	ldr	r2, [r3, #4]
 8014ee8:	683b      	ldr	r3, [r7, #0]
 8014eea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	685b      	ldr	r3, [r3, #4]
 8014ef0:	683a      	ldr	r2, [r7, #0]
 8014ef2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	68fa      	ldr	r2, [r7, #12]
 8014ef8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	683a      	ldr	r2, [r7, #0]
 8014efe:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	687a      	ldr	r2, [r7, #4]
 8014f04:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	1c5a      	adds	r2, r3, #1
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	601a      	str	r2, [r3, #0]
}
 8014f10:	bf00      	nop
 8014f12:	3714      	adds	r7, #20
 8014f14:	46bd      	mov	sp, r7
 8014f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f1a:	4770      	bx	lr

08014f1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014f1c:	b480      	push	{r7}
 8014f1e:	b085      	sub	sp, #20
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	691b      	ldr	r3, [r3, #16]
 8014f28:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	685b      	ldr	r3, [r3, #4]
 8014f2e:	687a      	ldr	r2, [r7, #4]
 8014f30:	6892      	ldr	r2, [r2, #8]
 8014f32:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	689b      	ldr	r3, [r3, #8]
 8014f38:	687a      	ldr	r2, [r7, #4]
 8014f3a:	6852      	ldr	r2, [r2, #4]
 8014f3c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	685b      	ldr	r3, [r3, #4]
 8014f42:	687a      	ldr	r2, [r7, #4]
 8014f44:	429a      	cmp	r2, r3
 8014f46:	d103      	bne.n	8014f50 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	689a      	ldr	r2, [r3, #8]
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2200      	movs	r2, #0
 8014f54:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	1e5a      	subs	r2, r3, #1
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	681b      	ldr	r3, [r3, #0]
}
 8014f64:	4618      	mov	r0, r3
 8014f66:	3714      	adds	r7, #20
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6e:	4770      	bx	lr

08014f70 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b084      	sub	sp, #16
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
 8014f78:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d10b      	bne.n	8014f9c <xQueueGenericReset+0x2c>
        __asm volatile
 8014f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f88:	f383 8811 	msr	BASEPRI, r3
 8014f8c:	f3bf 8f6f 	isb	sy
 8014f90:	f3bf 8f4f 	dsb	sy
 8014f94:	60bb      	str	r3, [r7, #8]
    }
 8014f96:	bf00      	nop
 8014f98:	bf00      	nop
 8014f9a:	e7fd      	b.n	8014f98 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8014f9c:	f002 fcee 	bl	801797c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	681a      	ldr	r2, [r3, #0]
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014fa8:	68f9      	ldr	r1, [r7, #12]
 8014faa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014fac:	fb01 f303 	mul.w	r3, r1, r3
 8014fb0:	441a      	add	r2, r3
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	2200      	movs	r2, #0
 8014fba:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	681a      	ldr	r2, [r3, #0]
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	681a      	ldr	r2, [r3, #0]
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014fcc:	3b01      	subs	r3, #1
 8014fce:	68f9      	ldr	r1, [r7, #12]
 8014fd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014fd2:	fb01 f303 	mul.w	r3, r1, r3
 8014fd6:	441a      	add	r2, r3
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	22ff      	movs	r2, #255	@ 0xff
 8014fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	22ff      	movs	r2, #255	@ 0xff
 8014fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8014fec:	683b      	ldr	r3, [r7, #0]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d114      	bne.n	801501c <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	691b      	ldr	r3, [r3, #16]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d01a      	beq.n	8015030 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	3310      	adds	r3, #16
 8014ffe:	4618      	mov	r0, r3
 8015000:	f001 fb20 	bl	8016644 <xTaskRemoveFromEventList>
 8015004:	4603      	mov	r3, r0
 8015006:	2b00      	cmp	r3, #0
 8015008:	d012      	beq.n	8015030 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 801500a:	4b0d      	ldr	r3, [pc, #52]	@ (8015040 <xQueueGenericReset+0xd0>)
 801500c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015010:	601a      	str	r2, [r3, #0]
 8015012:	f3bf 8f4f 	dsb	sy
 8015016:	f3bf 8f6f 	isb	sy
 801501a:	e009      	b.n	8015030 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	3310      	adds	r3, #16
 8015020:	4618      	mov	r0, r3
 8015022:	f7ff fef1 	bl	8014e08 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	3324      	adds	r3, #36	@ 0x24
 801502a:	4618      	mov	r0, r3
 801502c:	f7ff feec 	bl	8014e08 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8015030:	f002 fcd6 	bl	80179e0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8015034:	2301      	movs	r3, #1
}
 8015036:	4618      	mov	r0, r3
 8015038:	3710      	adds	r7, #16
 801503a:	46bd      	mov	sp, r7
 801503c:	bd80      	pop	{r7, pc}
 801503e:	bf00      	nop
 8015040:	e000ed04 	.word	0xe000ed04

08015044 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8015044:	b580      	push	{r7, lr}
 8015046:	b08c      	sub	sp, #48	@ 0x30
 8015048:	af02      	add	r7, sp, #8
 801504a:	60f8      	str	r0, [r7, #12]
 801504c:	60b9      	str	r1, [r7, #8]
 801504e:	4613      	mov	r3, r2
 8015050:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d10b      	bne.n	8015070 <xQueueGenericCreate+0x2c>
        __asm volatile
 8015058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801505c:	f383 8811 	msr	BASEPRI, r3
 8015060:	f3bf 8f6f 	isb	sy
 8015064:	f3bf 8f4f 	dsb	sy
 8015068:	61bb      	str	r3, [r7, #24]
    }
 801506a:	bf00      	nop
 801506c:	bf00      	nop
 801506e:	e7fd      	b.n	801506c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	68ba      	ldr	r2, [r7, #8]
 8015074:	fb02 f303 	mul.w	r3, r2, r3
 8015078:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 801507a:	68bb      	ldr	r3, [r7, #8]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d006      	beq.n	801508e <xQueueGenericCreate+0x4a>
 8015080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015082:	68bb      	ldr	r3, [r7, #8]
 8015084:	fbb2 f3f3 	udiv	r3, r2, r3
 8015088:	68fa      	ldr	r2, [r7, #12]
 801508a:	429a      	cmp	r2, r3
 801508c:	d101      	bne.n	8015092 <xQueueGenericCreate+0x4e>
 801508e:	2301      	movs	r3, #1
 8015090:	e000      	b.n	8015094 <xQueueGenericCreate+0x50>
 8015092:	2300      	movs	r3, #0
 8015094:	2b00      	cmp	r3, #0
 8015096:	d10b      	bne.n	80150b0 <xQueueGenericCreate+0x6c>
        __asm volatile
 8015098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801509c:	f383 8811 	msr	BASEPRI, r3
 80150a0:	f3bf 8f6f 	isb	sy
 80150a4:	f3bf 8f4f 	dsb	sy
 80150a8:	617b      	str	r3, [r7, #20]
    }
 80150aa:	bf00      	nop
 80150ac:	bf00      	nop
 80150ae:	e7fd      	b.n	80150ac <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80150b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150b2:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80150b6:	d90b      	bls.n	80150d0 <xQueueGenericCreate+0x8c>
        __asm volatile
 80150b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150bc:	f383 8811 	msr	BASEPRI, r3
 80150c0:	f3bf 8f6f 	isb	sy
 80150c4:	f3bf 8f4f 	dsb	sy
 80150c8:	613b      	str	r3, [r7, #16]
    }
 80150ca:	bf00      	nop
 80150cc:	bf00      	nop
 80150ce:	e7fd      	b.n	80150cc <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80150d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150d2:	3350      	adds	r3, #80	@ 0x50
 80150d4:	4618      	mov	r0, r3
 80150d6:	f002 fd7b 	bl	8017bd0 <pvPortMalloc>
 80150da:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80150dc:	6a3b      	ldr	r3, [r7, #32]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d00d      	beq.n	80150fe <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80150e2:	6a3b      	ldr	r3, [r7, #32]
 80150e4:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80150e6:	69fb      	ldr	r3, [r7, #28]
 80150e8:	3350      	adds	r3, #80	@ 0x50
 80150ea:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80150ec:	79fa      	ldrb	r2, [r7, #7]
 80150ee:	6a3b      	ldr	r3, [r7, #32]
 80150f0:	9300      	str	r3, [sp, #0]
 80150f2:	4613      	mov	r3, r2
 80150f4:	69fa      	ldr	r2, [r7, #28]
 80150f6:	68b9      	ldr	r1, [r7, #8]
 80150f8:	68f8      	ldr	r0, [r7, #12]
 80150fa:	f000 f805 	bl	8015108 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80150fe:	6a3b      	ldr	r3, [r7, #32]
    }
 8015100:	4618      	mov	r0, r3
 8015102:	3728      	adds	r7, #40	@ 0x28
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}

08015108 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b084      	sub	sp, #16
 801510c:	af00      	add	r7, sp, #0
 801510e:	60f8      	str	r0, [r7, #12]
 8015110:	60b9      	str	r1, [r7, #8]
 8015112:	607a      	str	r2, [r7, #4]
 8015114:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8015116:	68bb      	ldr	r3, [r7, #8]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d103      	bne.n	8015124 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801511c:	69bb      	ldr	r3, [r7, #24]
 801511e:	69ba      	ldr	r2, [r7, #24]
 8015120:	601a      	str	r2, [r3, #0]
 8015122:	e002      	b.n	801512a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015124:	69bb      	ldr	r3, [r7, #24]
 8015126:	687a      	ldr	r2, [r7, #4]
 8015128:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 801512a:	69bb      	ldr	r3, [r7, #24]
 801512c:	68fa      	ldr	r2, [r7, #12]
 801512e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8015130:	69bb      	ldr	r3, [r7, #24]
 8015132:	68ba      	ldr	r2, [r7, #8]
 8015134:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015136:	2101      	movs	r1, #1
 8015138:	69b8      	ldr	r0, [r7, #24]
 801513a:	f7ff ff19 	bl	8014f70 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 801513e:	69bb      	ldr	r3, [r7, #24]
 8015140:	78fa      	ldrb	r2, [r7, #3]
 8015142:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8015146:	bf00      	nop
 8015148:	3710      	adds	r7, #16
 801514a:	46bd      	mov	sp, r7
 801514c:	bd80      	pop	{r7, pc}

0801514e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 801514e:	b580      	push	{r7, lr}
 8015150:	b082      	sub	sp, #8
 8015152:	af00      	add	r7, sp, #0
 8015154:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d00e      	beq.n	801517a <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	2200      	movs	r2, #0
 8015160:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	2200      	movs	r2, #0
 8015166:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	2200      	movs	r2, #0
 801516c:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801516e:	2300      	movs	r3, #0
 8015170:	2200      	movs	r2, #0
 8015172:	2100      	movs	r1, #0
 8015174:	6878      	ldr	r0, [r7, #4]
 8015176:	f000 f81d 	bl	80151b4 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 801517a:	bf00      	nop
 801517c:	3708      	adds	r7, #8
 801517e:	46bd      	mov	sp, r7
 8015180:	bd80      	pop	{r7, pc}

08015182 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8015182:	b580      	push	{r7, lr}
 8015184:	b086      	sub	sp, #24
 8015186:	af00      	add	r7, sp, #0
 8015188:	4603      	mov	r3, r0
 801518a:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801518c:	2301      	movs	r3, #1
 801518e:	617b      	str	r3, [r7, #20]
 8015190:	2300      	movs	r3, #0
 8015192:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8015194:	79fb      	ldrb	r3, [r7, #7]
 8015196:	461a      	mov	r2, r3
 8015198:	6939      	ldr	r1, [r7, #16]
 801519a:	6978      	ldr	r0, [r7, #20]
 801519c:	f7ff ff52 	bl	8015044 <xQueueGenericCreate>
 80151a0:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80151a2:	68f8      	ldr	r0, [r7, #12]
 80151a4:	f7ff ffd3 	bl	801514e <prvInitialiseMutex>

        return xNewQueue;
 80151a8:	68fb      	ldr	r3, [r7, #12]
    }
 80151aa:	4618      	mov	r0, r3
 80151ac:	3718      	adds	r7, #24
 80151ae:	46bd      	mov	sp, r7
 80151b0:	bd80      	pop	{r7, pc}
	...

080151b4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b08e      	sub	sp, #56	@ 0x38
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	60f8      	str	r0, [r7, #12]
 80151bc:	60b9      	str	r1, [r7, #8]
 80151be:	607a      	str	r2, [r7, #4]
 80151c0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80151c2:	2300      	movs	r3, #0
 80151c4:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80151ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d10b      	bne.n	80151e8 <xQueueGenericSend+0x34>
        __asm volatile
 80151d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151d4:	f383 8811 	msr	BASEPRI, r3
 80151d8:	f3bf 8f6f 	isb	sy
 80151dc:	f3bf 8f4f 	dsb	sy
 80151e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80151e2:	bf00      	nop
 80151e4:	bf00      	nop
 80151e6:	e7fd      	b.n	80151e4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80151e8:	68bb      	ldr	r3, [r7, #8]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d103      	bne.n	80151f6 <xQueueGenericSend+0x42>
 80151ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d101      	bne.n	80151fa <xQueueGenericSend+0x46>
 80151f6:	2301      	movs	r3, #1
 80151f8:	e000      	b.n	80151fc <xQueueGenericSend+0x48>
 80151fa:	2300      	movs	r3, #0
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d10b      	bne.n	8015218 <xQueueGenericSend+0x64>
        __asm volatile
 8015200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015204:	f383 8811 	msr	BASEPRI, r3
 8015208:	f3bf 8f6f 	isb	sy
 801520c:	f3bf 8f4f 	dsb	sy
 8015210:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8015212:	bf00      	nop
 8015214:	bf00      	nop
 8015216:	e7fd      	b.n	8015214 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015218:	683b      	ldr	r3, [r7, #0]
 801521a:	2b02      	cmp	r3, #2
 801521c:	d103      	bne.n	8015226 <xQueueGenericSend+0x72>
 801521e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015222:	2b01      	cmp	r3, #1
 8015224:	d101      	bne.n	801522a <xQueueGenericSend+0x76>
 8015226:	2301      	movs	r3, #1
 8015228:	e000      	b.n	801522c <xQueueGenericSend+0x78>
 801522a:	2300      	movs	r3, #0
 801522c:	2b00      	cmp	r3, #0
 801522e:	d10b      	bne.n	8015248 <xQueueGenericSend+0x94>
        __asm volatile
 8015230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015234:	f383 8811 	msr	BASEPRI, r3
 8015238:	f3bf 8f6f 	isb	sy
 801523c:	f3bf 8f4f 	dsb	sy
 8015240:	623b      	str	r3, [r7, #32]
    }
 8015242:	bf00      	nop
 8015244:	bf00      	nop
 8015246:	e7fd      	b.n	8015244 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015248:	f001 fc70 	bl	8016b2c <xTaskGetSchedulerState>
 801524c:	4603      	mov	r3, r0
 801524e:	2b00      	cmp	r3, #0
 8015250:	d102      	bne.n	8015258 <xQueueGenericSend+0xa4>
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d101      	bne.n	801525c <xQueueGenericSend+0xa8>
 8015258:	2301      	movs	r3, #1
 801525a:	e000      	b.n	801525e <xQueueGenericSend+0xaa>
 801525c:	2300      	movs	r3, #0
 801525e:	2b00      	cmp	r3, #0
 8015260:	d10b      	bne.n	801527a <xQueueGenericSend+0xc6>
        __asm volatile
 8015262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015266:	f383 8811 	msr	BASEPRI, r3
 801526a:	f3bf 8f6f 	isb	sy
 801526e:	f3bf 8f4f 	dsb	sy
 8015272:	61fb      	str	r3, [r7, #28]
    }
 8015274:	bf00      	nop
 8015276:	bf00      	nop
 8015278:	e7fd      	b.n	8015276 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 801527a:	f002 fb7f 	bl	801797c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801527e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015280:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015286:	429a      	cmp	r2, r3
 8015288:	d302      	bcc.n	8015290 <xQueueGenericSend+0xdc>
 801528a:	683b      	ldr	r3, [r7, #0]
 801528c:	2b02      	cmp	r3, #2
 801528e:	d129      	bne.n	80152e4 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015290:	683a      	ldr	r2, [r7, #0]
 8015292:	68b9      	ldr	r1, [r7, #8]
 8015294:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015296:	f000 fb47 	bl	8015928 <prvCopyDataToQueue>
 801529a:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801529e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d010      	beq.n	80152c6 <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80152a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152a6:	3324      	adds	r3, #36	@ 0x24
 80152a8:	4618      	mov	r0, r3
 80152aa:	f001 f9cb 	bl	8016644 <xTaskRemoveFromEventList>
 80152ae:	4603      	mov	r3, r0
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d013      	beq.n	80152dc <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80152b4:	4b3f      	ldr	r3, [pc, #252]	@ (80153b4 <xQueueGenericSend+0x200>)
 80152b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80152ba:	601a      	str	r2, [r3, #0]
 80152bc:	f3bf 8f4f 	dsb	sy
 80152c0:	f3bf 8f6f 	isb	sy
 80152c4:	e00a      	b.n	80152dc <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80152c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d007      	beq.n	80152dc <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80152cc:	4b39      	ldr	r3, [pc, #228]	@ (80153b4 <xQueueGenericSend+0x200>)
 80152ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80152d2:	601a      	str	r2, [r3, #0]
 80152d4:	f3bf 8f4f 	dsb	sy
 80152d8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80152dc:	f002 fb80 	bl	80179e0 <vPortExitCritical>
                return pdPASS;
 80152e0:	2301      	movs	r3, #1
 80152e2:	e063      	b.n	80153ac <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d103      	bne.n	80152f2 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80152ea:	f002 fb79 	bl	80179e0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80152ee:	2300      	movs	r3, #0
 80152f0:	e05c      	b.n	80153ac <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80152f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d106      	bne.n	8015306 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80152f8:	f107 0314 	add.w	r3, r7, #20
 80152fc:	4618      	mov	r0, r3
 80152fe:	f001 fa05 	bl	801670c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8015302:	2301      	movs	r3, #1
 8015304:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8015306:	f002 fb6b 	bl	80179e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 801530a:	f000 fec3 	bl	8016094 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 801530e:	f002 fb35 	bl	801797c <vPortEnterCritical>
 8015312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015314:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015318:	b25b      	sxtb	r3, r3
 801531a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801531e:	d103      	bne.n	8015328 <xQueueGenericSend+0x174>
 8015320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015322:	2200      	movs	r2, #0
 8015324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801532a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801532e:	b25b      	sxtb	r3, r3
 8015330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015334:	d103      	bne.n	801533e <xQueueGenericSend+0x18a>
 8015336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015338:	2200      	movs	r2, #0
 801533a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801533e:	f002 fb4f 	bl	80179e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015342:	1d3a      	adds	r2, r7, #4
 8015344:	f107 0314 	add.w	r3, r7, #20
 8015348:	4611      	mov	r1, r2
 801534a:	4618      	mov	r0, r3
 801534c:	f001 f9f4 	bl	8016738 <xTaskCheckForTimeOut>
 8015350:	4603      	mov	r3, r0
 8015352:	2b00      	cmp	r3, #0
 8015354:	d124      	bne.n	80153a0 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015356:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015358:	f000 fbde 	bl	8015b18 <prvIsQueueFull>
 801535c:	4603      	mov	r3, r0
 801535e:	2b00      	cmp	r3, #0
 8015360:	d018      	beq.n	8015394 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015364:	3310      	adds	r3, #16
 8015366:	687a      	ldr	r2, [r7, #4]
 8015368:	4611      	mov	r1, r2
 801536a:	4618      	mov	r0, r3
 801536c:	f001 f918 	bl	80165a0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8015370:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015372:	f000 fb69 	bl	8015a48 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8015376:	f000 fe9b 	bl	80160b0 <xTaskResumeAll>
 801537a:	4603      	mov	r3, r0
 801537c:	2b00      	cmp	r3, #0
 801537e:	f47f af7c 	bne.w	801527a <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8015382:	4b0c      	ldr	r3, [pc, #48]	@ (80153b4 <xQueueGenericSend+0x200>)
 8015384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015388:	601a      	str	r2, [r3, #0]
 801538a:	f3bf 8f4f 	dsb	sy
 801538e:	f3bf 8f6f 	isb	sy
 8015392:	e772      	b.n	801527a <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8015394:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015396:	f000 fb57 	bl	8015a48 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 801539a:	f000 fe89 	bl	80160b0 <xTaskResumeAll>
 801539e:	e76c      	b.n	801527a <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80153a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80153a2:	f000 fb51 	bl	8015a48 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80153a6:	f000 fe83 	bl	80160b0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80153aa:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80153ac:	4618      	mov	r0, r3
 80153ae:	3738      	adds	r7, #56	@ 0x38
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd80      	pop	{r7, pc}
 80153b4:	e000ed04 	.word	0xe000ed04

080153b8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b090      	sub	sp, #64	@ 0x40
 80153bc:	af00      	add	r7, sp, #0
 80153be:	60f8      	str	r0, [r7, #12]
 80153c0:	60b9      	str	r1, [r7, #8]
 80153c2:	607a      	str	r2, [r7, #4]
 80153c4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80153ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d10b      	bne.n	80153e8 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 80153d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153d4:	f383 8811 	msr	BASEPRI, r3
 80153d8:	f3bf 8f6f 	isb	sy
 80153dc:	f3bf 8f4f 	dsb	sy
 80153e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80153e2:	bf00      	nop
 80153e4:	bf00      	nop
 80153e6:	e7fd      	b.n	80153e4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d103      	bne.n	80153f6 <xQueueGenericSendFromISR+0x3e>
 80153ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d101      	bne.n	80153fa <xQueueGenericSendFromISR+0x42>
 80153f6:	2301      	movs	r3, #1
 80153f8:	e000      	b.n	80153fc <xQueueGenericSendFromISR+0x44>
 80153fa:	2300      	movs	r3, #0
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d10b      	bne.n	8015418 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8015400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015404:	f383 8811 	msr	BASEPRI, r3
 8015408:	f3bf 8f6f 	isb	sy
 801540c:	f3bf 8f4f 	dsb	sy
 8015410:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8015412:	bf00      	nop
 8015414:	bf00      	nop
 8015416:	e7fd      	b.n	8015414 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015418:	683b      	ldr	r3, [r7, #0]
 801541a:	2b02      	cmp	r3, #2
 801541c:	d103      	bne.n	8015426 <xQueueGenericSendFromISR+0x6e>
 801541e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015422:	2b01      	cmp	r3, #1
 8015424:	d101      	bne.n	801542a <xQueueGenericSendFromISR+0x72>
 8015426:	2301      	movs	r3, #1
 8015428:	e000      	b.n	801542c <xQueueGenericSendFromISR+0x74>
 801542a:	2300      	movs	r3, #0
 801542c:	2b00      	cmp	r3, #0
 801542e:	d10b      	bne.n	8015448 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8015430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015434:	f383 8811 	msr	BASEPRI, r3
 8015438:	f3bf 8f6f 	isb	sy
 801543c:	f3bf 8f4f 	dsb	sy
 8015440:	623b      	str	r3, [r7, #32]
    }
 8015442:	bf00      	nop
 8015444:	bf00      	nop
 8015446:	e7fd      	b.n	8015444 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015448:	f002 fb80 	bl	8017b4c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 801544c:	f3ef 8211 	mrs	r2, BASEPRI
 8015450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015454:	f383 8811 	msr	BASEPRI, r3
 8015458:	f3bf 8f6f 	isb	sy
 801545c:	f3bf 8f4f 	dsb	sy
 8015460:	61fa      	str	r2, [r7, #28]
 8015462:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8015464:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015466:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801546a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801546c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801546e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015470:	429a      	cmp	r2, r3
 8015472:	d302      	bcc.n	801547a <xQueueGenericSendFromISR+0xc2>
 8015474:	683b      	ldr	r3, [r7, #0]
 8015476:	2b02      	cmp	r3, #2
 8015478:	d13f      	bne.n	80154fa <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 801547a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801547c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015480:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015488:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801548a:	683a      	ldr	r2, [r7, #0]
 801548c:	68b9      	ldr	r1, [r7, #8]
 801548e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015490:	f000 fa4a 	bl	8015928 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8015494:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8015498:	f1b3 3fff 	cmp.w	r3, #4294967295
 801549c:	d112      	bne.n	80154c4 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801549e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d026      	beq.n	80154f4 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80154a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154a8:	3324      	adds	r3, #36	@ 0x24
 80154aa:	4618      	mov	r0, r3
 80154ac:	f001 f8ca 	bl	8016644 <xTaskRemoveFromEventList>
 80154b0:	4603      	mov	r3, r0
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d01e      	beq.n	80154f4 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d01b      	beq.n	80154f4 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	2201      	movs	r2, #1
 80154c0:	601a      	str	r2, [r3, #0]
 80154c2:	e017      	b.n	80154f4 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80154c4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80154c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80154ca:	d10b      	bne.n	80154e4 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 80154cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154d0:	f383 8811 	msr	BASEPRI, r3
 80154d4:	f3bf 8f6f 	isb	sy
 80154d8:	f3bf 8f4f 	dsb	sy
 80154dc:	617b      	str	r3, [r7, #20]
    }
 80154de:	bf00      	nop
 80154e0:	bf00      	nop
 80154e2:	e7fd      	b.n	80154e0 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80154e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80154e8:	3301      	adds	r3, #1
 80154ea:	b2db      	uxtb	r3, r3
 80154ec:	b25a      	sxtb	r2, r3
 80154ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80154f4:	2301      	movs	r3, #1
 80154f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 80154f8:	e001      	b.n	80154fe <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80154fa:	2300      	movs	r3, #0
 80154fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80154fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015500:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8015502:	693b      	ldr	r3, [r7, #16]
 8015504:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8015508:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 801550a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801550c:	4618      	mov	r0, r3
 801550e:	3740      	adds	r7, #64	@ 0x40
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}

08015514 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8015514:	b580      	push	{r7, lr}
 8015516:	b08c      	sub	sp, #48	@ 0x30
 8015518:	af00      	add	r7, sp, #0
 801551a:	60f8      	str	r0, [r7, #12]
 801551c:	60b9      	str	r1, [r7, #8]
 801551e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8015520:	2300      	movs	r3, #0
 8015522:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8015528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801552a:	2b00      	cmp	r3, #0
 801552c:	d10b      	bne.n	8015546 <xQueueReceive+0x32>
        __asm volatile
 801552e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015532:	f383 8811 	msr	BASEPRI, r3
 8015536:	f3bf 8f6f 	isb	sy
 801553a:	f3bf 8f4f 	dsb	sy
 801553e:	623b      	str	r3, [r7, #32]
    }
 8015540:	bf00      	nop
 8015542:	bf00      	nop
 8015544:	e7fd      	b.n	8015542 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015546:	68bb      	ldr	r3, [r7, #8]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d103      	bne.n	8015554 <xQueueReceive+0x40>
 801554c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801554e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015550:	2b00      	cmp	r3, #0
 8015552:	d101      	bne.n	8015558 <xQueueReceive+0x44>
 8015554:	2301      	movs	r3, #1
 8015556:	e000      	b.n	801555a <xQueueReceive+0x46>
 8015558:	2300      	movs	r3, #0
 801555a:	2b00      	cmp	r3, #0
 801555c:	d10b      	bne.n	8015576 <xQueueReceive+0x62>
        __asm volatile
 801555e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015562:	f383 8811 	msr	BASEPRI, r3
 8015566:	f3bf 8f6f 	isb	sy
 801556a:	f3bf 8f4f 	dsb	sy
 801556e:	61fb      	str	r3, [r7, #28]
    }
 8015570:	bf00      	nop
 8015572:	bf00      	nop
 8015574:	e7fd      	b.n	8015572 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015576:	f001 fad9 	bl	8016b2c <xTaskGetSchedulerState>
 801557a:	4603      	mov	r3, r0
 801557c:	2b00      	cmp	r3, #0
 801557e:	d102      	bne.n	8015586 <xQueueReceive+0x72>
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d101      	bne.n	801558a <xQueueReceive+0x76>
 8015586:	2301      	movs	r3, #1
 8015588:	e000      	b.n	801558c <xQueueReceive+0x78>
 801558a:	2300      	movs	r3, #0
 801558c:	2b00      	cmp	r3, #0
 801558e:	d10b      	bne.n	80155a8 <xQueueReceive+0x94>
        __asm volatile
 8015590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015594:	f383 8811 	msr	BASEPRI, r3
 8015598:	f3bf 8f6f 	isb	sy
 801559c:	f3bf 8f4f 	dsb	sy
 80155a0:	61bb      	str	r3, [r7, #24]
    }
 80155a2:	bf00      	nop
 80155a4:	bf00      	nop
 80155a6:	e7fd      	b.n	80155a4 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80155a8:	f002 f9e8 	bl	801797c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80155ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155b0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80155b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d01f      	beq.n	80155f8 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80155b8:	68b9      	ldr	r1, [r7, #8]
 80155ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80155bc:	f000 fa1e 	bl	80159fc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80155c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155c2:	1e5a      	subs	r2, r3, #1
 80155c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155c6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80155c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155ca:	691b      	ldr	r3, [r3, #16]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d00f      	beq.n	80155f0 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80155d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155d2:	3310      	adds	r3, #16
 80155d4:	4618      	mov	r0, r3
 80155d6:	f001 f835 	bl	8016644 <xTaskRemoveFromEventList>
 80155da:	4603      	mov	r3, r0
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d007      	beq.n	80155f0 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80155e0:	4b3c      	ldr	r3, [pc, #240]	@ (80156d4 <xQueueReceive+0x1c0>)
 80155e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80155e6:	601a      	str	r2, [r3, #0]
 80155e8:	f3bf 8f4f 	dsb	sy
 80155ec:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80155f0:	f002 f9f6 	bl	80179e0 <vPortExitCritical>
                return pdPASS;
 80155f4:	2301      	movs	r3, #1
 80155f6:	e069      	b.n	80156cc <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d103      	bne.n	8015606 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80155fe:	f002 f9ef 	bl	80179e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8015602:	2300      	movs	r3, #0
 8015604:	e062      	b.n	80156cc <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8015606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015608:	2b00      	cmp	r3, #0
 801560a:	d106      	bne.n	801561a <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 801560c:	f107 0310 	add.w	r3, r7, #16
 8015610:	4618      	mov	r0, r3
 8015612:	f001 f87b 	bl	801670c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8015616:	2301      	movs	r3, #1
 8015618:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 801561a:	f002 f9e1 	bl	80179e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 801561e:	f000 fd39 	bl	8016094 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8015622:	f002 f9ab 	bl	801797c <vPortEnterCritical>
 8015626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015628:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801562c:	b25b      	sxtb	r3, r3
 801562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015632:	d103      	bne.n	801563c <xQueueReceive+0x128>
 8015634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015636:	2200      	movs	r2, #0
 8015638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801563c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801563e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015642:	b25b      	sxtb	r3, r3
 8015644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015648:	d103      	bne.n	8015652 <xQueueReceive+0x13e>
 801564a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801564c:	2200      	movs	r2, #0
 801564e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015652:	f002 f9c5 	bl	80179e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015656:	1d3a      	adds	r2, r7, #4
 8015658:	f107 0310 	add.w	r3, r7, #16
 801565c:	4611      	mov	r1, r2
 801565e:	4618      	mov	r0, r3
 8015660:	f001 f86a 	bl	8016738 <xTaskCheckForTimeOut>
 8015664:	4603      	mov	r3, r0
 8015666:	2b00      	cmp	r3, #0
 8015668:	d123      	bne.n	80156b2 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801566a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801566c:	f000 fa3e 	bl	8015aec <prvIsQueueEmpty>
 8015670:	4603      	mov	r3, r0
 8015672:	2b00      	cmp	r3, #0
 8015674:	d017      	beq.n	80156a6 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015678:	3324      	adds	r3, #36	@ 0x24
 801567a:	687a      	ldr	r2, [r7, #4]
 801567c:	4611      	mov	r1, r2
 801567e:	4618      	mov	r0, r3
 8015680:	f000 ff8e 	bl	80165a0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8015684:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015686:	f000 f9df 	bl	8015a48 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 801568a:	f000 fd11 	bl	80160b0 <xTaskResumeAll>
 801568e:	4603      	mov	r3, r0
 8015690:	2b00      	cmp	r3, #0
 8015692:	d189      	bne.n	80155a8 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8015694:	4b0f      	ldr	r3, [pc, #60]	@ (80156d4 <xQueueReceive+0x1c0>)
 8015696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801569a:	601a      	str	r2, [r3, #0]
 801569c:	f3bf 8f4f 	dsb	sy
 80156a0:	f3bf 8f6f 	isb	sy
 80156a4:	e780      	b.n	80155a8 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80156a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80156a8:	f000 f9ce 	bl	8015a48 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80156ac:	f000 fd00 	bl	80160b0 <xTaskResumeAll>
 80156b0:	e77a      	b.n	80155a8 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80156b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80156b4:	f000 f9c8 	bl	8015a48 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80156b8:	f000 fcfa 	bl	80160b0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80156bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80156be:	f000 fa15 	bl	8015aec <prvIsQueueEmpty>
 80156c2:	4603      	mov	r3, r0
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	f43f af6f 	beq.w	80155a8 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80156ca:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80156cc:	4618      	mov	r0, r3
 80156ce:	3730      	adds	r7, #48	@ 0x30
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd80      	pop	{r7, pc}
 80156d4:	e000ed04 	.word	0xe000ed04

080156d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b08e      	sub	sp, #56	@ 0x38
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
 80156e0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80156e2:	2300      	movs	r3, #0
 80156e4:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80156ea:	2300      	movs	r3, #0
 80156ec:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80156ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d10b      	bne.n	801570c <xQueueSemaphoreTake+0x34>
        __asm volatile
 80156f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156f8:	f383 8811 	msr	BASEPRI, r3
 80156fc:	f3bf 8f6f 	isb	sy
 8015700:	f3bf 8f4f 	dsb	sy
 8015704:	623b      	str	r3, [r7, #32]
    }
 8015706:	bf00      	nop
 8015708:	bf00      	nop
 801570a:	e7fd      	b.n	8015708 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 801570c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801570e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015710:	2b00      	cmp	r3, #0
 8015712:	d00b      	beq.n	801572c <xQueueSemaphoreTake+0x54>
        __asm volatile
 8015714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015718:	f383 8811 	msr	BASEPRI, r3
 801571c:	f3bf 8f6f 	isb	sy
 8015720:	f3bf 8f4f 	dsb	sy
 8015724:	61fb      	str	r3, [r7, #28]
    }
 8015726:	bf00      	nop
 8015728:	bf00      	nop
 801572a:	e7fd      	b.n	8015728 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801572c:	f001 f9fe 	bl	8016b2c <xTaskGetSchedulerState>
 8015730:	4603      	mov	r3, r0
 8015732:	2b00      	cmp	r3, #0
 8015734:	d102      	bne.n	801573c <xQueueSemaphoreTake+0x64>
 8015736:	683b      	ldr	r3, [r7, #0]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d101      	bne.n	8015740 <xQueueSemaphoreTake+0x68>
 801573c:	2301      	movs	r3, #1
 801573e:	e000      	b.n	8015742 <xQueueSemaphoreTake+0x6a>
 8015740:	2300      	movs	r3, #0
 8015742:	2b00      	cmp	r3, #0
 8015744:	d10b      	bne.n	801575e <xQueueSemaphoreTake+0x86>
        __asm volatile
 8015746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801574a:	f383 8811 	msr	BASEPRI, r3
 801574e:	f3bf 8f6f 	isb	sy
 8015752:	f3bf 8f4f 	dsb	sy
 8015756:	61bb      	str	r3, [r7, #24]
    }
 8015758:	bf00      	nop
 801575a:	bf00      	nop
 801575c:	e7fd      	b.n	801575a <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 801575e:	f002 f90d 	bl	801797c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015766:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801576a:	2b00      	cmp	r3, #0
 801576c:	d024      	beq.n	80157b8 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801576e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015770:	1e5a      	subs	r2, r3, #1
 8015772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015774:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d104      	bne.n	8015788 <xQueueSemaphoreTake+0xb0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801577e:	f001 fc31 	bl	8016fe4 <pvTaskIncrementMutexHeldCount>
 8015782:	4602      	mov	r2, r0
 8015784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015786:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801578a:	691b      	ldr	r3, [r3, #16]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d00f      	beq.n	80157b0 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015792:	3310      	adds	r3, #16
 8015794:	4618      	mov	r0, r3
 8015796:	f000 ff55 	bl	8016644 <xTaskRemoveFromEventList>
 801579a:	4603      	mov	r3, r0
 801579c:	2b00      	cmp	r3, #0
 801579e:	d007      	beq.n	80157b0 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80157a0:	4b54      	ldr	r3, [pc, #336]	@ (80158f4 <xQueueSemaphoreTake+0x21c>)
 80157a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80157a6:	601a      	str	r2, [r3, #0]
 80157a8:	f3bf 8f4f 	dsb	sy
 80157ac:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80157b0:	f002 f916 	bl	80179e0 <vPortExitCritical>
                return pdPASS;
 80157b4:	2301      	movs	r3, #1
 80157b6:	e098      	b.n	80158ea <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80157b8:	683b      	ldr	r3, [r7, #0]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d112      	bne.n	80157e4 <xQueueSemaphoreTake+0x10c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80157be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d00b      	beq.n	80157dc <xQueueSemaphoreTake+0x104>
        __asm volatile
 80157c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157c8:	f383 8811 	msr	BASEPRI, r3
 80157cc:	f3bf 8f6f 	isb	sy
 80157d0:	f3bf 8f4f 	dsb	sy
 80157d4:	617b      	str	r3, [r7, #20]
    }
 80157d6:	bf00      	nop
 80157d8:	bf00      	nop
 80157da:	e7fd      	b.n	80157d8 <xQueueSemaphoreTake+0x100>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80157dc:	f002 f900 	bl	80179e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80157e0:	2300      	movs	r3, #0
 80157e2:	e082      	b.n	80158ea <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 80157e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d106      	bne.n	80157f8 <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80157ea:	f107 030c 	add.w	r3, r7, #12
 80157ee:	4618      	mov	r0, r3
 80157f0:	f000 ff8c 	bl	801670c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80157f4:	2301      	movs	r3, #1
 80157f6:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80157f8:	f002 f8f2 	bl	80179e0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80157fc:	f000 fc4a 	bl	8016094 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8015800:	f002 f8bc 	bl	801797c <vPortEnterCritical>
 8015804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015806:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801580a:	b25b      	sxtb	r3, r3
 801580c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015810:	d103      	bne.n	801581a <xQueueSemaphoreTake+0x142>
 8015812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015814:	2200      	movs	r2, #0
 8015816:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801581a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801581c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015820:	b25b      	sxtb	r3, r3
 8015822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015826:	d103      	bne.n	8015830 <xQueueSemaphoreTake+0x158>
 8015828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801582a:	2200      	movs	r2, #0
 801582c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015830:	f002 f8d6 	bl	80179e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015834:	463a      	mov	r2, r7
 8015836:	f107 030c 	add.w	r3, r7, #12
 801583a:	4611      	mov	r1, r2
 801583c:	4618      	mov	r0, r3
 801583e:	f000 ff7b 	bl	8016738 <xTaskCheckForTimeOut>
 8015842:	4603      	mov	r3, r0
 8015844:	2b00      	cmp	r3, #0
 8015846:	d132      	bne.n	80158ae <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015848:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801584a:	f000 f94f 	bl	8015aec <prvIsQueueEmpty>
 801584e:	4603      	mov	r3, r0
 8015850:	2b00      	cmp	r3, #0
 8015852:	d026      	beq.n	80158a2 <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d109      	bne.n	8015870 <xQueueSemaphoreTake+0x198>
                        {
                            taskENTER_CRITICAL();
 801585c:	f002 f88e 	bl	801797c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015862:	689b      	ldr	r3, [r3, #8]
 8015864:	4618      	mov	r0, r3
 8015866:	f001 f97f 	bl	8016b68 <xTaskPriorityInherit>
 801586a:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 801586c:	f002 f8b8 	bl	80179e0 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015872:	3324      	adds	r3, #36	@ 0x24
 8015874:	683a      	ldr	r2, [r7, #0]
 8015876:	4611      	mov	r1, r2
 8015878:	4618      	mov	r0, r3
 801587a:	f000 fe91 	bl	80165a0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 801587e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015880:	f000 f8e2 	bl	8015a48 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8015884:	f000 fc14 	bl	80160b0 <xTaskResumeAll>
 8015888:	4603      	mov	r3, r0
 801588a:	2b00      	cmp	r3, #0
 801588c:	f47f af67 	bne.w	801575e <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 8015890:	4b18      	ldr	r3, [pc, #96]	@ (80158f4 <xQueueSemaphoreTake+0x21c>)
 8015892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015896:	601a      	str	r2, [r3, #0]
 8015898:	f3bf 8f4f 	dsb	sy
 801589c:	f3bf 8f6f 	isb	sy
 80158a0:	e75d      	b.n	801575e <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80158a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80158a4:	f000 f8d0 	bl	8015a48 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80158a8:	f000 fc02 	bl	80160b0 <xTaskResumeAll>
 80158ac:	e757      	b.n	801575e <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80158ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80158b0:	f000 f8ca 	bl	8015a48 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80158b4:	f000 fbfc 	bl	80160b0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80158b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80158ba:	f000 f917 	bl	8015aec <prvIsQueueEmpty>
 80158be:	4603      	mov	r3, r0
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	f43f af4c 	beq.w	801575e <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80158c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d00d      	beq.n	80158e8 <xQueueSemaphoreTake+0x210>
                        {
                            taskENTER_CRITICAL();
 80158cc:	f002 f856 	bl	801797c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80158d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80158d2:	f000 f811 	bl	80158f8 <prvGetDisinheritPriorityAfterTimeout>
 80158d6:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80158d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158da:	689b      	ldr	r3, [r3, #8]
 80158dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80158de:	4618      	mov	r0, r3
 80158e0:	f001 fa34 	bl	8016d4c <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80158e4:	f002 f87c 	bl	80179e0 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80158e8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	3738      	adds	r7, #56	@ 0x38
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bd80      	pop	{r7, pc}
 80158f2:	bf00      	nop
 80158f4:	e000ed04 	.word	0xe000ed04

080158f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80158f8:	b480      	push	{r7}
 80158fa:	b085      	sub	sp, #20
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015904:	2b00      	cmp	r3, #0
 8015906:	d006      	beq.n	8015916 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	f1c3 0305 	rsb	r3, r3, #5
 8015912:	60fb      	str	r3, [r7, #12]
 8015914:	e001      	b.n	801591a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015916:	2300      	movs	r3, #0
 8015918:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 801591a:	68fb      	ldr	r3, [r7, #12]
    }
 801591c:	4618      	mov	r0, r3
 801591e:	3714      	adds	r7, #20
 8015920:	46bd      	mov	sp, r7
 8015922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015926:	4770      	bx	lr

08015928 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8015928:	b580      	push	{r7, lr}
 801592a:	b086      	sub	sp, #24
 801592c:	af00      	add	r7, sp, #0
 801592e:	60f8      	str	r0, [r7, #12]
 8015930:	60b9      	str	r1, [r7, #8]
 8015932:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8015934:	2300      	movs	r3, #0
 8015936:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801593c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015942:	2b00      	cmp	r3, #0
 8015944:	d10d      	bne.n	8015962 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d14d      	bne.n	80159ea <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	689b      	ldr	r3, [r3, #8]
 8015952:	4618      	mov	r0, r3
 8015954:	f001 f97e 	bl	8016c54 <xTaskPriorityDisinherit>
 8015958:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	2200      	movs	r2, #0
 801595e:	609a      	str	r2, [r3, #8]
 8015960:	e043      	b.n	80159ea <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d119      	bne.n	801599c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	6858      	ldr	r0, [r3, #4]
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015970:	461a      	mov	r2, r3
 8015972:	68b9      	ldr	r1, [r7, #8]
 8015974:	f004 f9c7 	bl	8019d06 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	685a      	ldr	r2, [r3, #4]
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015980:	441a      	add	r2, r3
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	685a      	ldr	r2, [r3, #4]
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	689b      	ldr	r3, [r3, #8]
 801598e:	429a      	cmp	r2, r3
 8015990:	d32b      	bcc.n	80159ea <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	681a      	ldr	r2, [r3, #0]
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	605a      	str	r2, [r3, #4]
 801599a:	e026      	b.n	80159ea <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	68d8      	ldr	r0, [r3, #12]
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80159a4:	461a      	mov	r2, r3
 80159a6:	68b9      	ldr	r1, [r7, #8]
 80159a8:	f004 f9ad 	bl	8019d06 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	68da      	ldr	r2, [r3, #12]
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80159b4:	425b      	negs	r3, r3
 80159b6:	441a      	add	r2, r3
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	68da      	ldr	r2, [r3, #12]
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	429a      	cmp	r2, r3
 80159c6:	d207      	bcs.n	80159d8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	689a      	ldr	r2, [r3, #8]
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80159d0:	425b      	negs	r3, r3
 80159d2:	441a      	add	r2, r3
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	2b02      	cmp	r3, #2
 80159dc:	d105      	bne.n	80159ea <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80159de:	693b      	ldr	r3, [r7, #16]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d002      	beq.n	80159ea <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80159e4:	693b      	ldr	r3, [r7, #16]
 80159e6:	3b01      	subs	r3, #1
 80159e8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80159ea:	693b      	ldr	r3, [r7, #16]
 80159ec:	1c5a      	adds	r2, r3, #1
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80159f2:	697b      	ldr	r3, [r7, #20]
}
 80159f4:	4618      	mov	r0, r3
 80159f6:	3718      	adds	r7, #24
 80159f8:	46bd      	mov	sp, r7
 80159fa:	bd80      	pop	{r7, pc}

080159fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b082      	sub	sp, #8
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
 8015a04:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d018      	beq.n	8015a40 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	68da      	ldr	r2, [r3, #12]
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a16:	441a      	add	r2, r3
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	68da      	ldr	r2, [r3, #12]
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	689b      	ldr	r3, [r3, #8]
 8015a24:	429a      	cmp	r2, r3
 8015a26:	d303      	bcc.n	8015a30 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	681a      	ldr	r2, [r3, #0]
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	68d9      	ldr	r1, [r3, #12]
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a38:	461a      	mov	r2, r3
 8015a3a:	6838      	ldr	r0, [r7, #0]
 8015a3c:	f004 f963 	bl	8019d06 <memcpy>
    }
}
 8015a40:	bf00      	nop
 8015a42:	3708      	adds	r7, #8
 8015a44:	46bd      	mov	sp, r7
 8015a46:	bd80      	pop	{r7, pc}

08015a48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b084      	sub	sp, #16
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8015a50:	f001 ff94 	bl	801797c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015a5a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8015a5c:	e011      	b.n	8015a82 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d012      	beq.n	8015a8c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	3324      	adds	r3, #36	@ 0x24
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f000 fdea 	bl	8016644 <xTaskRemoveFromEventList>
 8015a70:	4603      	mov	r3, r0
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d001      	beq.n	8015a7a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8015a76:	f000 fec7 	bl	8016808 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8015a7a:	7bfb      	ldrb	r3, [r7, #15]
 8015a7c:	3b01      	subs	r3, #1
 8015a7e:	b2db      	uxtb	r3, r3
 8015a80:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8015a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	dce9      	bgt.n	8015a5e <prvUnlockQueue+0x16>
 8015a8a:	e000      	b.n	8015a8e <prvUnlockQueue+0x46>
                        break;
 8015a8c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	22ff      	movs	r2, #255	@ 0xff
 8015a92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8015a96:	f001 ffa3 	bl	80179e0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8015a9a:	f001 ff6f 	bl	801797c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015aa4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8015aa6:	e011      	b.n	8015acc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	691b      	ldr	r3, [r3, #16]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d012      	beq.n	8015ad6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	3310      	adds	r3, #16
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f000 fdc5 	bl	8016644 <xTaskRemoveFromEventList>
 8015aba:	4603      	mov	r3, r0
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d001      	beq.n	8015ac4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8015ac0:	f000 fea2 	bl	8016808 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8015ac4:	7bbb      	ldrb	r3, [r7, #14]
 8015ac6:	3b01      	subs	r3, #1
 8015ac8:	b2db      	uxtb	r3, r3
 8015aca:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8015acc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	dce9      	bgt.n	8015aa8 <prvUnlockQueue+0x60>
 8015ad4:	e000      	b.n	8015ad8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8015ad6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	22ff      	movs	r2, #255	@ 0xff
 8015adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8015ae0:	f001 ff7e 	bl	80179e0 <vPortExitCritical>
}
 8015ae4:	bf00      	nop
 8015ae6:	3710      	adds	r7, #16
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	bd80      	pop	{r7, pc}

08015aec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b084      	sub	sp, #16
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8015af4:	f001 ff42 	bl	801797c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d102      	bne.n	8015b06 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8015b00:	2301      	movs	r3, #1
 8015b02:	60fb      	str	r3, [r7, #12]
 8015b04:	e001      	b.n	8015b0a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8015b06:	2300      	movs	r3, #0
 8015b08:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8015b0a:	f001 ff69 	bl	80179e0 <vPortExitCritical>

    return xReturn;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
}
 8015b10:	4618      	mov	r0, r3
 8015b12:	3710      	adds	r7, #16
 8015b14:	46bd      	mov	sp, r7
 8015b16:	bd80      	pop	{r7, pc}

08015b18 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b084      	sub	sp, #16
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8015b20:	f001 ff2c 	bl	801797c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015b2c:	429a      	cmp	r2, r3
 8015b2e:	d102      	bne.n	8015b36 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8015b30:	2301      	movs	r3, #1
 8015b32:	60fb      	str	r3, [r7, #12]
 8015b34:	e001      	b.n	8015b3a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8015b36:	2300      	movs	r3, #0
 8015b38:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8015b3a:	f001 ff51 	bl	80179e0 <vPortExitCritical>

    return xReturn;
 8015b3e:	68fb      	ldr	r3, [r7, #12]
}
 8015b40:	4618      	mov	r0, r3
 8015b42:	3710      	adds	r7, #16
 8015b44:	46bd      	mov	sp, r7
 8015b46:	bd80      	pop	{r7, pc}

08015b48 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8015b48:	b480      	push	{r7}
 8015b4a:	b085      	sub	sp, #20
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
 8015b50:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015b52:	2300      	movs	r3, #0
 8015b54:	60fb      	str	r3, [r7, #12]
 8015b56:	e014      	b.n	8015b82 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015b58:	4a0f      	ldr	r2, [pc, #60]	@ (8015b98 <vQueueAddToRegistry+0x50>)
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d10b      	bne.n	8015b7c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015b64:	490c      	ldr	r1, [pc, #48]	@ (8015b98 <vQueueAddToRegistry+0x50>)
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	683a      	ldr	r2, [r7, #0]
 8015b6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8015b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8015b98 <vQueueAddToRegistry+0x50>)
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	00db      	lsls	r3, r3, #3
 8015b74:	4413      	add	r3, r2
 8015b76:	687a      	ldr	r2, [r7, #4]
 8015b78:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8015b7a:	e006      	b.n	8015b8a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	3301      	adds	r3, #1
 8015b80:	60fb      	str	r3, [r7, #12]
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	2b07      	cmp	r3, #7
 8015b86:	d9e7      	bls.n	8015b58 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8015b88:	bf00      	nop
 8015b8a:	bf00      	nop
 8015b8c:	3714      	adds	r7, #20
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b94:	4770      	bx	lr
 8015b96:	bf00      	nop
 8015b98:	20001558 	.word	0x20001558

08015b9c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b086      	sub	sp, #24
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	60f8      	str	r0, [r7, #12]
 8015ba4:	60b9      	str	r1, [r7, #8]
 8015ba6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8015bac:	f001 fee6 	bl	801797c <vPortEnterCritical>
 8015bb0:	697b      	ldr	r3, [r7, #20]
 8015bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015bb6:	b25b      	sxtb	r3, r3
 8015bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bbc:	d103      	bne.n	8015bc6 <vQueueWaitForMessageRestricted+0x2a>
 8015bbe:	697b      	ldr	r3, [r7, #20]
 8015bc0:	2200      	movs	r2, #0
 8015bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015bc6:	697b      	ldr	r3, [r7, #20]
 8015bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015bcc:	b25b      	sxtb	r3, r3
 8015bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bd2:	d103      	bne.n	8015bdc <vQueueWaitForMessageRestricted+0x40>
 8015bd4:	697b      	ldr	r3, [r7, #20]
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015bdc:	f001 ff00 	bl	80179e0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015be0:	697b      	ldr	r3, [r7, #20]
 8015be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d106      	bne.n	8015bf6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015be8:	697b      	ldr	r3, [r7, #20]
 8015bea:	3324      	adds	r3, #36	@ 0x24
 8015bec:	687a      	ldr	r2, [r7, #4]
 8015bee:	68b9      	ldr	r1, [r7, #8]
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	f000 fcfb 	bl	80165ec <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8015bf6:	6978      	ldr	r0, [r7, #20]
 8015bf8:	f7ff ff26 	bl	8015a48 <prvUnlockQueue>
    }
 8015bfc:	bf00      	nop
 8015bfe:	3718      	adds	r7, #24
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd80      	pop	{r7, pc}

08015c04 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b08c      	sub	sp, #48	@ 0x30
 8015c08:	af04      	add	r7, sp, #16
 8015c0a:	60f8      	str	r0, [r7, #12]
 8015c0c:	60b9      	str	r1, [r7, #8]
 8015c0e:	603b      	str	r3, [r7, #0]
 8015c10:	4613      	mov	r3, r2
 8015c12:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015c14:	88fb      	ldrh	r3, [r7, #6]
 8015c16:	009b      	lsls	r3, r3, #2
 8015c18:	4618      	mov	r0, r3
 8015c1a:	f001 ffd9 	bl	8017bd0 <pvPortMalloc>
 8015c1e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8015c20:	697b      	ldr	r3, [r7, #20]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d00e      	beq.n	8015c44 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015c26:	2058      	movs	r0, #88	@ 0x58
 8015c28:	f001 ffd2 	bl	8017bd0 <pvPortMalloc>
 8015c2c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8015c2e:	69fb      	ldr	r3, [r7, #28]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d003      	beq.n	8015c3c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8015c34:	69fb      	ldr	r3, [r7, #28]
 8015c36:	697a      	ldr	r2, [r7, #20]
 8015c38:	631a      	str	r2, [r3, #48]	@ 0x30
 8015c3a:	e005      	b.n	8015c48 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8015c3c:	6978      	ldr	r0, [r7, #20]
 8015c3e:	f002 f8a9 	bl	8017d94 <vPortFree>
 8015c42:	e001      	b.n	8015c48 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8015c44:	2300      	movs	r3, #0
 8015c46:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8015c48:	69fb      	ldr	r3, [r7, #28]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d013      	beq.n	8015c76 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015c4e:	88fa      	ldrh	r2, [r7, #6]
 8015c50:	2300      	movs	r3, #0
 8015c52:	9303      	str	r3, [sp, #12]
 8015c54:	69fb      	ldr	r3, [r7, #28]
 8015c56:	9302      	str	r3, [sp, #8]
 8015c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c5a:	9301      	str	r3, [sp, #4]
 8015c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c5e:	9300      	str	r3, [sp, #0]
 8015c60:	683b      	ldr	r3, [r7, #0]
 8015c62:	68b9      	ldr	r1, [r7, #8]
 8015c64:	68f8      	ldr	r0, [r7, #12]
 8015c66:	f000 f80e 	bl	8015c86 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8015c6a:	69f8      	ldr	r0, [r7, #28]
 8015c6c:	f000 f8a2 	bl	8015db4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8015c70:	2301      	movs	r3, #1
 8015c72:	61bb      	str	r3, [r7, #24]
 8015c74:	e002      	b.n	8015c7c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015c76:	f04f 33ff 	mov.w	r3, #4294967295
 8015c7a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8015c7c:	69bb      	ldr	r3, [r7, #24]
    }
 8015c7e:	4618      	mov	r0, r3
 8015c80:	3720      	adds	r7, #32
 8015c82:	46bd      	mov	sp, r7
 8015c84:	bd80      	pop	{r7, pc}

08015c86 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8015c86:	b580      	push	{r7, lr}
 8015c88:	b088      	sub	sp, #32
 8015c8a:	af00      	add	r7, sp, #0
 8015c8c:	60f8      	str	r0, [r7, #12]
 8015c8e:	60b9      	str	r1, [r7, #8]
 8015c90:	607a      	str	r2, [r7, #4]
 8015c92:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c96:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	009b      	lsls	r3, r3, #2
 8015c9c:	461a      	mov	r2, r3
 8015c9e:	21a5      	movs	r1, #165	@ 0xa5
 8015ca0:	f003 ff5e 	bl	8019b60 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ca6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8015cae:	3b01      	subs	r3, #1
 8015cb0:	009b      	lsls	r3, r3, #2
 8015cb2:	4413      	add	r3, r2
 8015cb4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015cb6:	69bb      	ldr	r3, [r7, #24]
 8015cb8:	f023 0307 	bic.w	r3, r3, #7
 8015cbc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015cbe:	69bb      	ldr	r3, [r7, #24]
 8015cc0:	f003 0307 	and.w	r3, r3, #7
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d00b      	beq.n	8015ce0 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8015cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ccc:	f383 8811 	msr	BASEPRI, r3
 8015cd0:	f3bf 8f6f 	isb	sy
 8015cd4:	f3bf 8f4f 	dsb	sy
 8015cd8:	617b      	str	r3, [r7, #20]
    }
 8015cda:	bf00      	nop
 8015cdc:	bf00      	nop
 8015cde:	e7fd      	b.n	8015cdc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8015ce0:	68bb      	ldr	r3, [r7, #8]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d01f      	beq.n	8015d26 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	61fb      	str	r3, [r7, #28]
 8015cea:	e012      	b.n	8015d12 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015cec:	68ba      	ldr	r2, [r7, #8]
 8015cee:	69fb      	ldr	r3, [r7, #28]
 8015cf0:	4413      	add	r3, r2
 8015cf2:	7819      	ldrb	r1, [r3, #0]
 8015cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015cf6:	69fb      	ldr	r3, [r7, #28]
 8015cf8:	4413      	add	r3, r2
 8015cfa:	3334      	adds	r3, #52	@ 0x34
 8015cfc:	460a      	mov	r2, r1
 8015cfe:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8015d00:	68ba      	ldr	r2, [r7, #8]
 8015d02:	69fb      	ldr	r3, [r7, #28]
 8015d04:	4413      	add	r3, r2
 8015d06:	781b      	ldrb	r3, [r3, #0]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d006      	beq.n	8015d1a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015d0c:	69fb      	ldr	r3, [r7, #28]
 8015d0e:	3301      	adds	r3, #1
 8015d10:	61fb      	str	r3, [r7, #28]
 8015d12:	69fb      	ldr	r3, [r7, #28]
 8015d14:	2b09      	cmp	r3, #9
 8015d16:	d9e9      	bls.n	8015cec <prvInitialiseNewTask+0x66>
 8015d18:	e000      	b.n	8015d1c <prvInitialiseNewTask+0x96>
            {
                break;
 8015d1a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d1e:	2200      	movs	r2, #0
 8015d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8015d24:	e003      	b.n	8015d2e <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d28:	2200      	movs	r2, #0
 8015d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d30:	2b04      	cmp	r3, #4
 8015d32:	d901      	bls.n	8015d38 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015d34:	2304      	movs	r3, #4
 8015d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8015d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8015d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d42:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8015d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d46:	2200      	movs	r2, #0
 8015d48:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d4c:	3304      	adds	r3, #4
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f7ff f87a 	bl	8014e48 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d56:	3318      	adds	r3, #24
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f7ff f875 	bl	8014e48 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015d62:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d66:	f1c3 0205 	rsb	r2, r3, #5
 8015d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d6c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015d72:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8015d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d76:	3350      	adds	r3, #80	@ 0x50
 8015d78:	2204      	movs	r2, #4
 8015d7a:	2100      	movs	r1, #0
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f003 feef 	bl	8019b60 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8015d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d84:	3354      	adds	r3, #84	@ 0x54
 8015d86:	2201      	movs	r2, #1
 8015d88:	2100      	movs	r1, #0
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f003 fee8 	bl	8019b60 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015d90:	683a      	ldr	r2, [r7, #0]
 8015d92:	68f9      	ldr	r1, [r7, #12]
 8015d94:	69b8      	ldr	r0, [r7, #24]
 8015d96:	f001 fcbd 	bl	8017714 <pxPortInitialiseStack>
 8015d9a:	4602      	mov	r2, r0
 8015d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d9e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8015da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d002      	beq.n	8015dac <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015daa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8015dac:	bf00      	nop
 8015dae:	3720      	adds	r7, #32
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bd80      	pop	{r7, pc}

08015db4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b082      	sub	sp, #8
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8015dbc:	f001 fdde 	bl	801797c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8015dc0:	4b2c      	ldr	r3, [pc, #176]	@ (8015e74 <prvAddNewTaskToReadyList+0xc0>)
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	3301      	adds	r3, #1
 8015dc6:	4a2b      	ldr	r2, [pc, #172]	@ (8015e74 <prvAddNewTaskToReadyList+0xc0>)
 8015dc8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8015dca:	4b2b      	ldr	r3, [pc, #172]	@ (8015e78 <prvAddNewTaskToReadyList+0xc4>)
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d109      	bne.n	8015de6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8015dd2:	4a29      	ldr	r2, [pc, #164]	@ (8015e78 <prvAddNewTaskToReadyList+0xc4>)
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015dd8:	4b26      	ldr	r3, [pc, #152]	@ (8015e74 <prvAddNewTaskToReadyList+0xc0>)
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	2b01      	cmp	r3, #1
 8015dde:	d110      	bne.n	8015e02 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8015de0:	f000 fd36 	bl	8016850 <prvInitialiseTaskLists>
 8015de4:	e00d      	b.n	8015e02 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8015de6:	4b25      	ldr	r3, [pc, #148]	@ (8015e7c <prvAddNewTaskToReadyList+0xc8>)
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d109      	bne.n	8015e02 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015dee:	4b22      	ldr	r3, [pc, #136]	@ (8015e78 <prvAddNewTaskToReadyList+0xc4>)
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015df8:	429a      	cmp	r2, r3
 8015dfa:	d802      	bhi.n	8015e02 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8015dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8015e78 <prvAddNewTaskToReadyList+0xc4>)
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8015e02:	4b1f      	ldr	r3, [pc, #124]	@ (8015e80 <prvAddNewTaskToReadyList+0xcc>)
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	3301      	adds	r3, #1
 8015e08:	4a1d      	ldr	r2, [pc, #116]	@ (8015e80 <prvAddNewTaskToReadyList+0xcc>)
 8015e0a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8015e80 <prvAddNewTaskToReadyList+0xcc>)
 8015e0e:	681a      	ldr	r2, [r3, #0]
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e18:	2201      	movs	r2, #1
 8015e1a:	409a      	lsls	r2, r3
 8015e1c:	4b19      	ldr	r3, [pc, #100]	@ (8015e84 <prvAddNewTaskToReadyList+0xd0>)
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	4313      	orrs	r3, r2
 8015e22:	4a18      	ldr	r2, [pc, #96]	@ (8015e84 <prvAddNewTaskToReadyList+0xd0>)
 8015e24:	6013      	str	r3, [r2, #0]
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e2a:	4613      	mov	r3, r2
 8015e2c:	009b      	lsls	r3, r3, #2
 8015e2e:	4413      	add	r3, r2
 8015e30:	009b      	lsls	r3, r3, #2
 8015e32:	4a15      	ldr	r2, [pc, #84]	@ (8015e88 <prvAddNewTaskToReadyList+0xd4>)
 8015e34:	441a      	add	r2, r3
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	3304      	adds	r3, #4
 8015e3a:	4619      	mov	r1, r3
 8015e3c:	4610      	mov	r0, r2
 8015e3e:	f7ff f810 	bl	8014e62 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8015e42:	f001 fdcd 	bl	80179e0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8015e46:	4b0d      	ldr	r3, [pc, #52]	@ (8015e7c <prvAddNewTaskToReadyList+0xc8>)
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d00e      	beq.n	8015e6c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8015e78 <prvAddNewTaskToReadyList+0xc4>)
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e58:	429a      	cmp	r2, r3
 8015e5a:	d207      	bcs.n	8015e6c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8015e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8015e8c <prvAddNewTaskToReadyList+0xd8>)
 8015e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015e62:	601a      	str	r2, [r3, #0]
 8015e64:	f3bf 8f4f 	dsb	sy
 8015e68:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8015e6c:	bf00      	nop
 8015e6e:	3708      	adds	r7, #8
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}
 8015e74:	20001670 	.word	0x20001670
 8015e78:	20001598 	.word	0x20001598
 8015e7c:	2000167c 	.word	0x2000167c
 8015e80:	2000168c 	.word	0x2000168c
 8015e84:	20001678 	.word	0x20001678
 8015e88:	2000159c 	.word	0x2000159c
 8015e8c:	e000ed04 	.word	0xe000ed04

08015e90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b084      	sub	sp, #16
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8015e98:	2300      	movs	r3, #0
 8015e9a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d018      	beq.n	8015ed4 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8015ea2:	4b14      	ldr	r3, [pc, #80]	@ (8015ef4 <vTaskDelay+0x64>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d00b      	beq.n	8015ec2 <vTaskDelay+0x32>
        __asm volatile
 8015eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015eae:	f383 8811 	msr	BASEPRI, r3
 8015eb2:	f3bf 8f6f 	isb	sy
 8015eb6:	f3bf 8f4f 	dsb	sy
 8015eba:	60bb      	str	r3, [r7, #8]
    }
 8015ebc:	bf00      	nop
 8015ebe:	bf00      	nop
 8015ec0:	e7fd      	b.n	8015ebe <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8015ec2:	f000 f8e7 	bl	8016094 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015ec6:	2100      	movs	r1, #0
 8015ec8:	6878      	ldr	r0, [r7, #4]
 8015eca:	f001 f89f 	bl	801700c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8015ece:	f000 f8ef 	bl	80160b0 <xTaskResumeAll>
 8015ed2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d107      	bne.n	8015eea <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8015eda:	4b07      	ldr	r3, [pc, #28]	@ (8015ef8 <vTaskDelay+0x68>)
 8015edc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015ee0:	601a      	str	r2, [r3, #0]
 8015ee2:	f3bf 8f4f 	dsb	sy
 8015ee6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8015eea:	bf00      	nop
 8015eec:	3710      	adds	r7, #16
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	bd80      	pop	{r7, pc}
 8015ef2:	bf00      	nop
 8015ef4:	20001698 	.word	0x20001698
 8015ef8:	e000ed04 	.word	0xe000ed04

08015efc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b08a      	sub	sp, #40	@ 0x28
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	61fb      	str	r3, [r7, #28]

        configASSERT( pxTCB );
 8015f08:	69fb      	ldr	r3, [r7, #28]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d10b      	bne.n	8015f26 <eTaskGetState+0x2a>
        __asm volatile
 8015f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f12:	f383 8811 	msr	BASEPRI, r3
 8015f16:	f3bf 8f6f 	isb	sy
 8015f1a:	f3bf 8f4f 	dsb	sy
 8015f1e:	60fb      	str	r3, [r7, #12]
    }
 8015f20:	bf00      	nop
 8015f22:	bf00      	nop
 8015f24:	e7fd      	b.n	8015f22 <eTaskGetState+0x26>

        if( pxTCB == pxCurrentTCB )
 8015f26:	4b2d      	ldr	r3, [pc, #180]	@ (8015fdc <eTaskGetState+0xe0>)
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	69fa      	ldr	r2, [r7, #28]
 8015f2c:	429a      	cmp	r2, r3
 8015f2e:	d103      	bne.n	8015f38 <eTaskGetState+0x3c>
        {
            /* The task calling this function is querying its own state. */
            eReturn = eRunning;
 8015f30:	2300      	movs	r3, #0
 8015f32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015f36:	e04b      	b.n	8015fd0 <eTaskGetState+0xd4>
        }
        else
        {
            taskENTER_CRITICAL();
 8015f38:	f001 fd20 	bl	801797c <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8015f3c:	69fb      	ldr	r3, [r7, #28]
 8015f3e:	695b      	ldr	r3, [r3, #20]
 8015f40:	61bb      	str	r3, [r7, #24]
                pxDelayedList = pxDelayedTaskList;
 8015f42:	4b27      	ldr	r3, [pc, #156]	@ (8015fe0 <eTaskGetState+0xe4>)
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	617b      	str	r3, [r7, #20]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8015f48:	4b26      	ldr	r3, [pc, #152]	@ (8015fe4 <eTaskGetState+0xe8>)
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	613b      	str	r3, [r7, #16]
            }
            taskEXIT_CRITICAL();
 8015f4e:	f001 fd47 	bl	80179e0 <vPortExitCritical>

            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8015f52:	69ba      	ldr	r2, [r7, #24]
 8015f54:	697b      	ldr	r3, [r7, #20]
 8015f56:	429a      	cmp	r2, r3
 8015f58:	d003      	beq.n	8015f62 <eTaskGetState+0x66>
 8015f5a:	69ba      	ldr	r2, [r7, #24]
 8015f5c:	693b      	ldr	r3, [r7, #16]
 8015f5e:	429a      	cmp	r2, r3
 8015f60:	d103      	bne.n	8015f6a <eTaskGetState+0x6e>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 8015f62:	2302      	movs	r3, #2
 8015f64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015f68:	e032      	b.n	8015fd0 <eTaskGetState+0xd4>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
 8015f6a:	69bb      	ldr	r3, [r7, #24]
 8015f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8015fe8 <eTaskGetState+0xec>)
 8015f6e:	4293      	cmp	r3, r2
 8015f70:	d120      	bne.n	8015fb4 <eTaskGetState+0xb8>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8015f72:	69fb      	ldr	r3, [r7, #28]
 8015f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d118      	bne.n	8015fac <eTaskGetState+0xb0>
                                /* The task does not appear on the event list item of
                                 * and of the RTOS objects, but could still be in the
                                 * blocked state if it is waiting on its notification
                                 * rather than waiting on an object.  If not, is
                                 * suspended. */
                                eReturn = eSuspended;
 8015f7a:	2303      	movs	r3, #3
 8015f7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8015f80:	2300      	movs	r3, #0
 8015f82:	623b      	str	r3, [r7, #32]
 8015f84:	e00e      	b.n	8015fa4 <eTaskGetState+0xa8>
                                {
                                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8015f86:	69fa      	ldr	r2, [r7, #28]
 8015f88:	6a3b      	ldr	r3, [r7, #32]
 8015f8a:	4413      	add	r3, r2
 8015f8c:	3354      	adds	r3, #84	@ 0x54
 8015f8e:	781b      	ldrb	r3, [r3, #0]
 8015f90:	b2db      	uxtb	r3, r3
 8015f92:	2b01      	cmp	r3, #1
 8015f94:	d103      	bne.n	8015f9e <eTaskGetState+0xa2>
                                    {
                                        eReturn = eBlocked;
 8015f96:	2302      	movs	r3, #2
 8015f98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                        break;
 8015f9c:	e018      	b.n	8015fd0 <eTaskGetState+0xd4>
                                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8015f9e:	6a3b      	ldr	r3, [r7, #32]
 8015fa0:	3301      	adds	r3, #1
 8015fa2:	623b      	str	r3, [r7, #32]
 8015fa4:	6a3b      	ldr	r3, [r7, #32]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	dded      	ble.n	8015f86 <eTaskGetState+0x8a>
 8015faa:	e011      	b.n	8015fd0 <eTaskGetState+0xd4>
                            }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
 8015fac:	2302      	movs	r3, #2
 8015fae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015fb2:	e00d      	b.n	8015fd0 <eTaskGetState+0xd4>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8015fb4:	69bb      	ldr	r3, [r7, #24]
 8015fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8015fec <eTaskGetState+0xf0>)
 8015fb8:	4293      	cmp	r3, r2
 8015fba:	d002      	beq.n	8015fc2 <eTaskGetState+0xc6>
 8015fbc:	69bb      	ldr	r3, [r7, #24]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d103      	bne.n	8015fca <eTaskGetState+0xce>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 8015fc2:	2304      	movs	r3, #4
 8015fc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015fc8:	e002      	b.n	8015fd0 <eTaskGetState+0xd4>

            else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
            {
                /* If the task is not in any other state, it must be in the
                 * Ready (including pending ready) state. */
                eReturn = eReady;
 8015fca:	2301      	movs	r3, #1
 8015fcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }

        return eReturn;
 8015fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	3728      	adds	r7, #40	@ 0x28
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}
 8015fdc:	20001598 	.word	0x20001598
 8015fe0:	20001628 	.word	0x20001628
 8015fe4:	2000162c 	.word	0x2000162c
 8015fe8:	2000165c 	.word	0x2000165c
 8015fec:	20001644 	.word	0x20001644

08015ff0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b086      	sub	sp, #24
 8015ff4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8015ff6:	4b20      	ldr	r3, [pc, #128]	@ (8016078 <vTaskStartScheduler+0x88>)
 8015ff8:	9301      	str	r3, [sp, #4]
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	9300      	str	r3, [sp, #0]
 8015ffe:	2300      	movs	r3, #0
 8016000:	2282      	movs	r2, #130	@ 0x82
 8016002:	491e      	ldr	r1, [pc, #120]	@ (801607c <vTaskStartScheduler+0x8c>)
 8016004:	481e      	ldr	r0, [pc, #120]	@ (8016080 <vTaskStartScheduler+0x90>)
 8016006:	f7ff fdfd 	bl	8015c04 <xTaskCreate>
 801600a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	2b01      	cmp	r3, #1
 8016010:	d102      	bne.n	8016018 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8016012:	f001 f861 	bl	80170d8 <xTimerCreateTimerTask>
 8016016:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	2b01      	cmp	r3, #1
 801601c:	d116      	bne.n	801604c <vTaskStartScheduler+0x5c>
        __asm volatile
 801601e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016022:	f383 8811 	msr	BASEPRI, r3
 8016026:	f3bf 8f6f 	isb	sy
 801602a:	f3bf 8f4f 	dsb	sy
 801602e:	60bb      	str	r3, [r7, #8]
    }
 8016030:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8016032:	4b14      	ldr	r3, [pc, #80]	@ (8016084 <vTaskStartScheduler+0x94>)
 8016034:	f04f 32ff 	mov.w	r2, #4294967295
 8016038:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 801603a:	4b13      	ldr	r3, [pc, #76]	@ (8016088 <vTaskStartScheduler+0x98>)
 801603c:	2201      	movs	r2, #1
 801603e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016040:	4b12      	ldr	r3, [pc, #72]	@ (801608c <vTaskStartScheduler+0x9c>)
 8016042:	2200      	movs	r2, #0
 8016044:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8016046:	f001 fbf5 	bl	8017834 <xPortStartScheduler>
 801604a:	e00f      	b.n	801606c <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016052:	d10b      	bne.n	801606c <vTaskStartScheduler+0x7c>
        __asm volatile
 8016054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016058:	f383 8811 	msr	BASEPRI, r3
 801605c:	f3bf 8f6f 	isb	sy
 8016060:	f3bf 8f4f 	dsb	sy
 8016064:	607b      	str	r3, [r7, #4]
    }
 8016066:	bf00      	nop
 8016068:	bf00      	nop
 801606a:	e7fd      	b.n	8016068 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 801606c:	4b08      	ldr	r3, [pc, #32]	@ (8016090 <vTaskStartScheduler+0xa0>)
 801606e:	681b      	ldr	r3, [r3, #0]
}
 8016070:	bf00      	nop
 8016072:	3710      	adds	r7, #16
 8016074:	46bd      	mov	sp, r7
 8016076:	bd80      	pop	{r7, pc}
 8016078:	20001694 	.word	0x20001694
 801607c:	0801d628 	.word	0x0801d628
 8016080:	08016821 	.word	0x08016821
 8016084:	20001690 	.word	0x20001690
 8016088:	2000167c 	.word	0x2000167c
 801608c:	20001674 	.word	0x20001674
 8016090:	0801f27c 	.word	0x0801f27c

08016094 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016094:	b480      	push	{r7}
 8016096:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8016098:	4b04      	ldr	r3, [pc, #16]	@ (80160ac <vTaskSuspendAll+0x18>)
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	3301      	adds	r3, #1
 801609e:	4a03      	ldr	r2, [pc, #12]	@ (80160ac <vTaskSuspendAll+0x18>)
 80160a0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80160a2:	bf00      	nop
 80160a4:	46bd      	mov	sp, r7
 80160a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160aa:	4770      	bx	lr
 80160ac:	20001698 	.word	0x20001698

080160b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b084      	sub	sp, #16
 80160b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80160b6:	2300      	movs	r3, #0
 80160b8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80160ba:	2300      	movs	r3, #0
 80160bc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80160be:	4b42      	ldr	r3, [pc, #264]	@ (80161c8 <xTaskResumeAll+0x118>)
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d10b      	bne.n	80160de <xTaskResumeAll+0x2e>
        __asm volatile
 80160c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160ca:	f383 8811 	msr	BASEPRI, r3
 80160ce:	f3bf 8f6f 	isb	sy
 80160d2:	f3bf 8f4f 	dsb	sy
 80160d6:	603b      	str	r3, [r7, #0]
    }
 80160d8:	bf00      	nop
 80160da:	bf00      	nop
 80160dc:	e7fd      	b.n	80160da <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80160de:	f001 fc4d 	bl	801797c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80160e2:	4b39      	ldr	r3, [pc, #228]	@ (80161c8 <xTaskResumeAll+0x118>)
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	3b01      	subs	r3, #1
 80160e8:	4a37      	ldr	r2, [pc, #220]	@ (80161c8 <xTaskResumeAll+0x118>)
 80160ea:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80160ec:	4b36      	ldr	r3, [pc, #216]	@ (80161c8 <xTaskResumeAll+0x118>)
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d161      	bne.n	80161b8 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80160f4:	4b35      	ldr	r3, [pc, #212]	@ (80161cc <xTaskResumeAll+0x11c>)
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d05d      	beq.n	80161b8 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80160fc:	e02e      	b.n	801615c <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80160fe:	4b34      	ldr	r3, [pc, #208]	@ (80161d0 <xTaskResumeAll+0x120>)
 8016100:	68db      	ldr	r3, [r3, #12]
 8016102:	68db      	ldr	r3, [r3, #12]
 8016104:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	3318      	adds	r3, #24
 801610a:	4618      	mov	r0, r3
 801610c:	f7fe ff06 	bl	8014f1c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	3304      	adds	r3, #4
 8016114:	4618      	mov	r0, r3
 8016116:	f7fe ff01 	bl	8014f1c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801611e:	2201      	movs	r2, #1
 8016120:	409a      	lsls	r2, r3
 8016122:	4b2c      	ldr	r3, [pc, #176]	@ (80161d4 <xTaskResumeAll+0x124>)
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	4313      	orrs	r3, r2
 8016128:	4a2a      	ldr	r2, [pc, #168]	@ (80161d4 <xTaskResumeAll+0x124>)
 801612a:	6013      	str	r3, [r2, #0]
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016130:	4613      	mov	r3, r2
 8016132:	009b      	lsls	r3, r3, #2
 8016134:	4413      	add	r3, r2
 8016136:	009b      	lsls	r3, r3, #2
 8016138:	4a27      	ldr	r2, [pc, #156]	@ (80161d8 <xTaskResumeAll+0x128>)
 801613a:	441a      	add	r2, r3
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	3304      	adds	r3, #4
 8016140:	4619      	mov	r1, r3
 8016142:	4610      	mov	r0, r2
 8016144:	f7fe fe8d 	bl	8014e62 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801614c:	4b23      	ldr	r3, [pc, #140]	@ (80161dc <xTaskResumeAll+0x12c>)
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016152:	429a      	cmp	r2, r3
 8016154:	d302      	bcc.n	801615c <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8016156:	4b22      	ldr	r3, [pc, #136]	@ (80161e0 <xTaskResumeAll+0x130>)
 8016158:	2201      	movs	r2, #1
 801615a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801615c:	4b1c      	ldr	r3, [pc, #112]	@ (80161d0 <xTaskResumeAll+0x120>)
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d1cc      	bne.n	80160fe <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d001      	beq.n	801616e <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 801616a:	f000 fcc3 	bl	8016af4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801616e:	4b1d      	ldr	r3, [pc, #116]	@ (80161e4 <xTaskResumeAll+0x134>)
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d010      	beq.n	801619c <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 801617a:	f000 f8d5 	bl	8016328 <xTaskIncrementTick>
 801617e:	4603      	mov	r3, r0
 8016180:	2b00      	cmp	r3, #0
 8016182:	d002      	beq.n	801618a <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8016184:	4b16      	ldr	r3, [pc, #88]	@ (80161e0 <xTaskResumeAll+0x130>)
 8016186:	2201      	movs	r2, #1
 8016188:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	3b01      	subs	r3, #1
 801618e:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d1f1      	bne.n	801617a <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8016196:	4b13      	ldr	r3, [pc, #76]	@ (80161e4 <xTaskResumeAll+0x134>)
 8016198:	2200      	movs	r2, #0
 801619a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 801619c:	4b10      	ldr	r3, [pc, #64]	@ (80161e0 <xTaskResumeAll+0x130>)
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d009      	beq.n	80161b8 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80161a4:	2301      	movs	r3, #1
 80161a6:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80161a8:	4b0f      	ldr	r3, [pc, #60]	@ (80161e8 <xTaskResumeAll+0x138>)
 80161aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80161ae:	601a      	str	r2, [r3, #0]
 80161b0:	f3bf 8f4f 	dsb	sy
 80161b4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80161b8:	f001 fc12 	bl	80179e0 <vPortExitCritical>

    return xAlreadyYielded;
 80161bc:	68bb      	ldr	r3, [r7, #8]
}
 80161be:	4618      	mov	r0, r3
 80161c0:	3710      	adds	r7, #16
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}
 80161c6:	bf00      	nop
 80161c8:	20001698 	.word	0x20001698
 80161cc:	20001670 	.word	0x20001670
 80161d0:	20001630 	.word	0x20001630
 80161d4:	20001678 	.word	0x20001678
 80161d8:	2000159c 	.word	0x2000159c
 80161dc:	20001598 	.word	0x20001598
 80161e0:	20001684 	.word	0x20001684
 80161e4:	20001680 	.word	0x20001680
 80161e8:	e000ed04 	.word	0xe000ed04

080161ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80161ec:	b480      	push	{r7}
 80161ee:	b083      	sub	sp, #12
 80161f0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80161f2:	4b05      	ldr	r3, [pc, #20]	@ (8016208 <xTaskGetTickCount+0x1c>)
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80161f8:	687b      	ldr	r3, [r7, #4]
}
 80161fa:	4618      	mov	r0, r3
 80161fc:	370c      	adds	r7, #12
 80161fe:	46bd      	mov	sp, r7
 8016200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016204:	4770      	bx	lr
 8016206:	bf00      	nop
 8016208:	20001674 	.word	0x20001674

0801620c <uxTaskGetSystemState>:
#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                      const UBaseType_t uxArraySize,
                                      uint32_t * const pulTotalRunTime )
    {
 801620c:	b580      	push	{r7, lr}
 801620e:	b086      	sub	sp, #24
 8016210:	af00      	add	r7, sp, #0
 8016212:	60f8      	str	r0, [r7, #12]
 8016214:	60b9      	str	r1, [r7, #8]
 8016216:	607a      	str	r2, [r7, #4]
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8016218:	2300      	movs	r3, #0
 801621a:	617b      	str	r3, [r7, #20]
 801621c:	2305      	movs	r3, #5
 801621e:	613b      	str	r3, [r7, #16]

        vTaskSuspendAll();
 8016220:	f7ff ff38 	bl	8016094 <vTaskSuspendAll>
        {
            /* Is there a space in the array for each task in the system? */
            if( uxArraySize >= uxCurrentNumberOfTasks )
 8016224:	4b3a      	ldr	r3, [pc, #232]	@ (8016310 <uxTaskGetSystemState+0x104>)
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	68ba      	ldr	r2, [r7, #8]
 801622a:	429a      	cmp	r2, r3
 801622c:	d368      	bcc.n	8016300 <uxTaskGetSystemState+0xf4>
            {
                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Ready state. */
                do
                {
                    uxQueue--;
 801622e:	693b      	ldr	r3, [r7, #16]
 8016230:	3b01      	subs	r3, #1
 8016232:	613b      	str	r3, [r7, #16]
                    uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8016234:	697a      	ldr	r2, [r7, #20]
 8016236:	4613      	mov	r3, r2
 8016238:	00db      	lsls	r3, r3, #3
 801623a:	4413      	add	r3, r2
 801623c:	009b      	lsls	r3, r3, #2
 801623e:	461a      	mov	r2, r3
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	1898      	adds	r0, r3, r2
 8016244:	693a      	ldr	r2, [r7, #16]
 8016246:	4613      	mov	r3, r2
 8016248:	009b      	lsls	r3, r3, #2
 801624a:	4413      	add	r3, r2
 801624c:	009b      	lsls	r3, r3, #2
 801624e:	4a31      	ldr	r2, [pc, #196]	@ (8016314 <uxTaskGetSystemState+0x108>)
 8016250:	4413      	add	r3, r2
 8016252:	2201      	movs	r2, #1
 8016254:	4619      	mov	r1, r3
 8016256:	f000 fbcf 	bl	80169f8 <prvListTasksWithinSingleList>
 801625a:	4602      	mov	r2, r0
 801625c:	697b      	ldr	r3, [r7, #20]
 801625e:	4413      	add	r3, r2
 8016260:	617b      	str	r3, [r7, #20]
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016262:	693b      	ldr	r3, [r7, #16]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d1e2      	bne.n	801622e <uxTaskGetSystemState+0x22>

                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Blocked state. */
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8016268:	697a      	ldr	r2, [r7, #20]
 801626a:	4613      	mov	r3, r2
 801626c:	00db      	lsls	r3, r3, #3
 801626e:	4413      	add	r3, r2
 8016270:	009b      	lsls	r3, r3, #2
 8016272:	461a      	mov	r2, r3
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	4413      	add	r3, r2
 8016278:	4a27      	ldr	r2, [pc, #156]	@ (8016318 <uxTaskGetSystemState+0x10c>)
 801627a:	6811      	ldr	r1, [r2, #0]
 801627c:	2202      	movs	r2, #2
 801627e:	4618      	mov	r0, r3
 8016280:	f000 fbba 	bl	80169f8 <prvListTasksWithinSingleList>
 8016284:	4602      	mov	r2, r0
 8016286:	697b      	ldr	r3, [r7, #20]
 8016288:	4413      	add	r3, r2
 801628a:	617b      	str	r3, [r7, #20]
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 801628c:	697a      	ldr	r2, [r7, #20]
 801628e:	4613      	mov	r3, r2
 8016290:	00db      	lsls	r3, r3, #3
 8016292:	4413      	add	r3, r2
 8016294:	009b      	lsls	r3, r3, #2
 8016296:	461a      	mov	r2, r3
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	4413      	add	r3, r2
 801629c:	4a1f      	ldr	r2, [pc, #124]	@ (801631c <uxTaskGetSystemState+0x110>)
 801629e:	6811      	ldr	r1, [r2, #0]
 80162a0:	2202      	movs	r2, #2
 80162a2:	4618      	mov	r0, r3
 80162a4:	f000 fba8 	bl	80169f8 <prvListTasksWithinSingleList>
 80162a8:	4602      	mov	r2, r0
 80162aa:	697b      	ldr	r3, [r7, #20]
 80162ac:	4413      	add	r3, r2
 80162ae:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskDelete == 1 )
                    {
                        /* Fill in an TaskStatus_t structure with information on
                         * each task that has been deleted but not yet cleaned up. */
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80162b0:	697a      	ldr	r2, [r7, #20]
 80162b2:	4613      	mov	r3, r2
 80162b4:	00db      	lsls	r3, r3, #3
 80162b6:	4413      	add	r3, r2
 80162b8:	009b      	lsls	r3, r3, #2
 80162ba:	461a      	mov	r2, r3
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	4413      	add	r3, r2
 80162c0:	2204      	movs	r2, #4
 80162c2:	4917      	ldr	r1, [pc, #92]	@ (8016320 <uxTaskGetSystemState+0x114>)
 80162c4:	4618      	mov	r0, r3
 80162c6:	f000 fb97 	bl	80169f8 <prvListTasksWithinSingleList>
 80162ca:	4602      	mov	r2, r0
 80162cc:	697b      	ldr	r3, [r7, #20]
 80162ce:	4413      	add	r3, r2
 80162d0:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskSuspend == 1 )
                    {
                        /* Fill in an TaskStatus_t structure with information on
                         * each task in the Suspended state. */
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80162d2:	697a      	ldr	r2, [r7, #20]
 80162d4:	4613      	mov	r3, r2
 80162d6:	00db      	lsls	r3, r3, #3
 80162d8:	4413      	add	r3, r2
 80162da:	009b      	lsls	r3, r3, #2
 80162dc:	461a      	mov	r2, r3
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	4413      	add	r3, r2
 80162e2:	2203      	movs	r2, #3
 80162e4:	490f      	ldr	r1, [pc, #60]	@ (8016324 <uxTaskGetSystemState+0x118>)
 80162e6:	4618      	mov	r0, r3
 80162e8:	f000 fb86 	bl	80169f8 <prvListTasksWithinSingleList>
 80162ec:	4602      	mov	r2, r0
 80162ee:	697b      	ldr	r3, [r7, #20]
 80162f0:	4413      	add	r3, r2
 80162f2:	617b      	str	r3, [r7, #20]
                            #endif
                        }
                    }
                #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
                    {
                        if( pulTotalRunTime != NULL )
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d002      	beq.n	8016300 <uxTaskGetSystemState+0xf4>
                        {
                            *pulTotalRunTime = 0;
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	2200      	movs	r2, #0
 80162fe:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        ( void ) xTaskResumeAll();
 8016300:	f7ff fed6 	bl	80160b0 <xTaskResumeAll>

        return uxTask;
 8016304:	697b      	ldr	r3, [r7, #20]
    }
 8016306:	4618      	mov	r0, r3
 8016308:	3718      	adds	r7, #24
 801630a:	46bd      	mov	sp, r7
 801630c:	bd80      	pop	{r7, pc}
 801630e:	bf00      	nop
 8016310:	20001670 	.word	0x20001670
 8016314:	2000159c 	.word	0x2000159c
 8016318:	20001628 	.word	0x20001628
 801631c:	2000162c 	.word	0x2000162c
 8016320:	20001644 	.word	0x20001644
 8016324:	2000165c 	.word	0x2000165c

08016328 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b086      	sub	sp, #24
 801632c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 801632e:	2300      	movs	r3, #0
 8016330:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016332:	4b4f      	ldr	r3, [pc, #316]	@ (8016470 <xTaskIncrementTick+0x148>)
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	2b00      	cmp	r3, #0
 8016338:	f040 808f 	bne.w	801645a <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801633c:	4b4d      	ldr	r3, [pc, #308]	@ (8016474 <xTaskIncrementTick+0x14c>)
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	3301      	adds	r3, #1
 8016342:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8016344:	4a4b      	ldr	r2, [pc, #300]	@ (8016474 <xTaskIncrementTick+0x14c>)
 8016346:	693b      	ldr	r3, [r7, #16]
 8016348:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801634a:	693b      	ldr	r3, [r7, #16]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d121      	bne.n	8016394 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8016350:	4b49      	ldr	r3, [pc, #292]	@ (8016478 <xTaskIncrementTick+0x150>)
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d00b      	beq.n	8016372 <xTaskIncrementTick+0x4a>
        __asm volatile
 801635a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801635e:	f383 8811 	msr	BASEPRI, r3
 8016362:	f3bf 8f6f 	isb	sy
 8016366:	f3bf 8f4f 	dsb	sy
 801636a:	603b      	str	r3, [r7, #0]
    }
 801636c:	bf00      	nop
 801636e:	bf00      	nop
 8016370:	e7fd      	b.n	801636e <xTaskIncrementTick+0x46>
 8016372:	4b41      	ldr	r3, [pc, #260]	@ (8016478 <xTaskIncrementTick+0x150>)
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	60fb      	str	r3, [r7, #12]
 8016378:	4b40      	ldr	r3, [pc, #256]	@ (801647c <xTaskIncrementTick+0x154>)
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	4a3e      	ldr	r2, [pc, #248]	@ (8016478 <xTaskIncrementTick+0x150>)
 801637e:	6013      	str	r3, [r2, #0]
 8016380:	4a3e      	ldr	r2, [pc, #248]	@ (801647c <xTaskIncrementTick+0x154>)
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	6013      	str	r3, [r2, #0]
 8016386:	4b3e      	ldr	r3, [pc, #248]	@ (8016480 <xTaskIncrementTick+0x158>)
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	3301      	adds	r3, #1
 801638c:	4a3c      	ldr	r2, [pc, #240]	@ (8016480 <xTaskIncrementTick+0x158>)
 801638e:	6013      	str	r3, [r2, #0]
 8016390:	f000 fbb0 	bl	8016af4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8016394:	4b3b      	ldr	r3, [pc, #236]	@ (8016484 <xTaskIncrementTick+0x15c>)
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	693a      	ldr	r2, [r7, #16]
 801639a:	429a      	cmp	r2, r3
 801639c:	d348      	bcc.n	8016430 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801639e:	4b36      	ldr	r3, [pc, #216]	@ (8016478 <xTaskIncrementTick+0x150>)
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d104      	bne.n	80163b2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80163a8:	4b36      	ldr	r3, [pc, #216]	@ (8016484 <xTaskIncrementTick+0x15c>)
 80163aa:	f04f 32ff 	mov.w	r2, #4294967295
 80163ae:	601a      	str	r2, [r3, #0]
                    break;
 80163b0:	e03e      	b.n	8016430 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80163b2:	4b31      	ldr	r3, [pc, #196]	@ (8016478 <xTaskIncrementTick+0x150>)
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	68db      	ldr	r3, [r3, #12]
 80163b8:	68db      	ldr	r3, [r3, #12]
 80163ba:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80163bc:	68bb      	ldr	r3, [r7, #8]
 80163be:	685b      	ldr	r3, [r3, #4]
 80163c0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80163c2:	693a      	ldr	r2, [r7, #16]
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	429a      	cmp	r2, r3
 80163c8:	d203      	bcs.n	80163d2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80163ca:	4a2e      	ldr	r2, [pc, #184]	@ (8016484 <xTaskIncrementTick+0x15c>)
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80163d0:	e02e      	b.n	8016430 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80163d2:	68bb      	ldr	r3, [r7, #8]
 80163d4:	3304      	adds	r3, #4
 80163d6:	4618      	mov	r0, r3
 80163d8:	f7fe fda0 	bl	8014f1c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80163dc:	68bb      	ldr	r3, [r7, #8]
 80163de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d004      	beq.n	80163ee <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80163e4:	68bb      	ldr	r3, [r7, #8]
 80163e6:	3318      	adds	r3, #24
 80163e8:	4618      	mov	r0, r3
 80163ea:	f7fe fd97 	bl	8014f1c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80163ee:	68bb      	ldr	r3, [r7, #8]
 80163f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163f2:	2201      	movs	r2, #1
 80163f4:	409a      	lsls	r2, r3
 80163f6:	4b24      	ldr	r3, [pc, #144]	@ (8016488 <xTaskIncrementTick+0x160>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	4313      	orrs	r3, r2
 80163fc:	4a22      	ldr	r2, [pc, #136]	@ (8016488 <xTaskIncrementTick+0x160>)
 80163fe:	6013      	str	r3, [r2, #0]
 8016400:	68bb      	ldr	r3, [r7, #8]
 8016402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016404:	4613      	mov	r3, r2
 8016406:	009b      	lsls	r3, r3, #2
 8016408:	4413      	add	r3, r2
 801640a:	009b      	lsls	r3, r3, #2
 801640c:	4a1f      	ldr	r2, [pc, #124]	@ (801648c <xTaskIncrementTick+0x164>)
 801640e:	441a      	add	r2, r3
 8016410:	68bb      	ldr	r3, [r7, #8]
 8016412:	3304      	adds	r3, #4
 8016414:	4619      	mov	r1, r3
 8016416:	4610      	mov	r0, r2
 8016418:	f7fe fd23 	bl	8014e62 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801641c:	68bb      	ldr	r3, [r7, #8]
 801641e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016420:	4b1b      	ldr	r3, [pc, #108]	@ (8016490 <xTaskIncrementTick+0x168>)
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016426:	429a      	cmp	r2, r3
 8016428:	d3b9      	bcc.n	801639e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 801642a:	2301      	movs	r3, #1
 801642c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801642e:	e7b6      	b.n	801639e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016430:	4b17      	ldr	r3, [pc, #92]	@ (8016490 <xTaskIncrementTick+0x168>)
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016436:	4915      	ldr	r1, [pc, #84]	@ (801648c <xTaskIncrementTick+0x164>)
 8016438:	4613      	mov	r3, r2
 801643a:	009b      	lsls	r3, r3, #2
 801643c:	4413      	add	r3, r2
 801643e:	009b      	lsls	r3, r3, #2
 8016440:	440b      	add	r3, r1
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	2b01      	cmp	r3, #1
 8016446:	d901      	bls.n	801644c <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8016448:	2301      	movs	r3, #1
 801644a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 801644c:	4b11      	ldr	r3, [pc, #68]	@ (8016494 <xTaskIncrementTick+0x16c>)
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d007      	beq.n	8016464 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8016454:	2301      	movs	r3, #1
 8016456:	617b      	str	r3, [r7, #20]
 8016458:	e004      	b.n	8016464 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 801645a:	4b0f      	ldr	r3, [pc, #60]	@ (8016498 <xTaskIncrementTick+0x170>)
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	3301      	adds	r3, #1
 8016460:	4a0d      	ldr	r2, [pc, #52]	@ (8016498 <xTaskIncrementTick+0x170>)
 8016462:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8016464:	697b      	ldr	r3, [r7, #20]
}
 8016466:	4618      	mov	r0, r3
 8016468:	3718      	adds	r7, #24
 801646a:	46bd      	mov	sp, r7
 801646c:	bd80      	pop	{r7, pc}
 801646e:	bf00      	nop
 8016470:	20001698 	.word	0x20001698
 8016474:	20001674 	.word	0x20001674
 8016478:	20001628 	.word	0x20001628
 801647c:	2000162c 	.word	0x2000162c
 8016480:	20001688 	.word	0x20001688
 8016484:	20001690 	.word	0x20001690
 8016488:	20001678 	.word	0x20001678
 801648c:	2000159c 	.word	0x2000159c
 8016490:	20001598 	.word	0x20001598
 8016494:	20001684 	.word	0x20001684
 8016498:	20001680 	.word	0x20001680

0801649c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801649c:	b580      	push	{r7, lr}
 801649e:	b088      	sub	sp, #32
 80164a0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80164a2:	4b3a      	ldr	r3, [pc, #232]	@ (801658c <vTaskSwitchContext+0xf0>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d003      	beq.n	80164b2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80164aa:	4b39      	ldr	r3, [pc, #228]	@ (8016590 <vTaskSwitchContext+0xf4>)
 80164ac:	2201      	movs	r2, #1
 80164ae:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80164b0:	e067      	b.n	8016582 <vTaskSwitchContext+0xe6>
        xYieldPending = pdFALSE;
 80164b2:	4b37      	ldr	r3, [pc, #220]	@ (8016590 <vTaskSwitchContext+0xf4>)
 80164b4:	2200      	movs	r2, #0
 80164b6:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 80164b8:	4b36      	ldr	r3, [pc, #216]	@ (8016594 <vTaskSwitchContext+0xf8>)
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80164be:	61fb      	str	r3, [r7, #28]
 80164c0:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80164c4:	61bb      	str	r3, [r7, #24]
 80164c6:	69fb      	ldr	r3, [r7, #28]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	69ba      	ldr	r2, [r7, #24]
 80164cc:	429a      	cmp	r2, r3
 80164ce:	d111      	bne.n	80164f4 <vTaskSwitchContext+0x58>
 80164d0:	69fb      	ldr	r3, [r7, #28]
 80164d2:	3304      	adds	r3, #4
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	69ba      	ldr	r2, [r7, #24]
 80164d8:	429a      	cmp	r2, r3
 80164da:	d10b      	bne.n	80164f4 <vTaskSwitchContext+0x58>
 80164dc:	69fb      	ldr	r3, [r7, #28]
 80164de:	3308      	adds	r3, #8
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	69ba      	ldr	r2, [r7, #24]
 80164e4:	429a      	cmp	r2, r3
 80164e6:	d105      	bne.n	80164f4 <vTaskSwitchContext+0x58>
 80164e8:	69fb      	ldr	r3, [r7, #28]
 80164ea:	330c      	adds	r3, #12
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	69ba      	ldr	r2, [r7, #24]
 80164f0:	429a      	cmp	r2, r3
 80164f2:	d008      	beq.n	8016506 <vTaskSwitchContext+0x6a>
 80164f4:	4b27      	ldr	r3, [pc, #156]	@ (8016594 <vTaskSwitchContext+0xf8>)
 80164f6:	681a      	ldr	r2, [r3, #0]
 80164f8:	4b26      	ldr	r3, [pc, #152]	@ (8016594 <vTaskSwitchContext+0xf8>)
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	3334      	adds	r3, #52	@ 0x34
 80164fe:	4619      	mov	r1, r3
 8016500:	4610      	mov	r0, r2
 8016502:	f7f4 ffb1 	bl	800b468 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016506:	4b24      	ldr	r3, [pc, #144]	@ (8016598 <vTaskSwitchContext+0xfc>)
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	fab3 f383 	clz	r3, r3
 8016512:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8016514:	7afb      	ldrb	r3, [r7, #11]
 8016516:	f1c3 031f 	rsb	r3, r3, #31
 801651a:	617b      	str	r3, [r7, #20]
 801651c:	491f      	ldr	r1, [pc, #124]	@ (801659c <vTaskSwitchContext+0x100>)
 801651e:	697a      	ldr	r2, [r7, #20]
 8016520:	4613      	mov	r3, r2
 8016522:	009b      	lsls	r3, r3, #2
 8016524:	4413      	add	r3, r2
 8016526:	009b      	lsls	r3, r3, #2
 8016528:	440b      	add	r3, r1
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d10b      	bne.n	8016548 <vTaskSwitchContext+0xac>
        __asm volatile
 8016530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016534:	f383 8811 	msr	BASEPRI, r3
 8016538:	f3bf 8f6f 	isb	sy
 801653c:	f3bf 8f4f 	dsb	sy
 8016540:	607b      	str	r3, [r7, #4]
    }
 8016542:	bf00      	nop
 8016544:	bf00      	nop
 8016546:	e7fd      	b.n	8016544 <vTaskSwitchContext+0xa8>
 8016548:	697a      	ldr	r2, [r7, #20]
 801654a:	4613      	mov	r3, r2
 801654c:	009b      	lsls	r3, r3, #2
 801654e:	4413      	add	r3, r2
 8016550:	009b      	lsls	r3, r3, #2
 8016552:	4a12      	ldr	r2, [pc, #72]	@ (801659c <vTaskSwitchContext+0x100>)
 8016554:	4413      	add	r3, r2
 8016556:	613b      	str	r3, [r7, #16]
 8016558:	693b      	ldr	r3, [r7, #16]
 801655a:	685b      	ldr	r3, [r3, #4]
 801655c:	685a      	ldr	r2, [r3, #4]
 801655e:	693b      	ldr	r3, [r7, #16]
 8016560:	605a      	str	r2, [r3, #4]
 8016562:	693b      	ldr	r3, [r7, #16]
 8016564:	685a      	ldr	r2, [r3, #4]
 8016566:	693b      	ldr	r3, [r7, #16]
 8016568:	3308      	adds	r3, #8
 801656a:	429a      	cmp	r2, r3
 801656c:	d104      	bne.n	8016578 <vTaskSwitchContext+0xdc>
 801656e:	693b      	ldr	r3, [r7, #16]
 8016570:	685b      	ldr	r3, [r3, #4]
 8016572:	685a      	ldr	r2, [r3, #4]
 8016574:	693b      	ldr	r3, [r7, #16]
 8016576:	605a      	str	r2, [r3, #4]
 8016578:	693b      	ldr	r3, [r7, #16]
 801657a:	685b      	ldr	r3, [r3, #4]
 801657c:	68db      	ldr	r3, [r3, #12]
 801657e:	4a05      	ldr	r2, [pc, #20]	@ (8016594 <vTaskSwitchContext+0xf8>)
 8016580:	6013      	str	r3, [r2, #0]
}
 8016582:	bf00      	nop
 8016584:	3720      	adds	r7, #32
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}
 801658a:	bf00      	nop
 801658c:	20001698 	.word	0x20001698
 8016590:	20001684 	.word	0x20001684
 8016594:	20001598 	.word	0x20001598
 8016598:	20001678 	.word	0x20001678
 801659c:	2000159c 	.word	0x2000159c

080165a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b084      	sub	sp, #16
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
 80165a8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d10b      	bne.n	80165c8 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80165b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165b4:	f383 8811 	msr	BASEPRI, r3
 80165b8:	f3bf 8f6f 	isb	sy
 80165bc:	f3bf 8f4f 	dsb	sy
 80165c0:	60fb      	str	r3, [r7, #12]
    }
 80165c2:	bf00      	nop
 80165c4:	bf00      	nop
 80165c6:	e7fd      	b.n	80165c4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80165c8:	4b07      	ldr	r3, [pc, #28]	@ (80165e8 <vTaskPlaceOnEventList+0x48>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	3318      	adds	r3, #24
 80165ce:	4619      	mov	r1, r3
 80165d0:	6878      	ldr	r0, [r7, #4]
 80165d2:	f7fe fc6a 	bl	8014eaa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80165d6:	2101      	movs	r1, #1
 80165d8:	6838      	ldr	r0, [r7, #0]
 80165da:	f000 fd17 	bl	801700c <prvAddCurrentTaskToDelayedList>
}
 80165de:	bf00      	nop
 80165e0:	3710      	adds	r7, #16
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bd80      	pop	{r7, pc}
 80165e6:	bf00      	nop
 80165e8:	20001598 	.word	0x20001598

080165ec <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b086      	sub	sp, #24
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	60f8      	str	r0, [r7, #12]
 80165f4:	60b9      	str	r1, [r7, #8]
 80165f6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d10b      	bne.n	8016616 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80165fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016602:	f383 8811 	msr	BASEPRI, r3
 8016606:	f3bf 8f6f 	isb	sy
 801660a:	f3bf 8f4f 	dsb	sy
 801660e:	617b      	str	r3, [r7, #20]
    }
 8016610:	bf00      	nop
 8016612:	bf00      	nop
 8016614:	e7fd      	b.n	8016612 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016616:	4b0a      	ldr	r3, [pc, #40]	@ (8016640 <vTaskPlaceOnEventListRestricted+0x54>)
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	3318      	adds	r3, #24
 801661c:	4619      	mov	r1, r3
 801661e:	68f8      	ldr	r0, [r7, #12]
 8016620:	f7fe fc1f 	bl	8014e62 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d002      	beq.n	8016630 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 801662a:	f04f 33ff 	mov.w	r3, #4294967295
 801662e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016630:	6879      	ldr	r1, [r7, #4]
 8016632:	68b8      	ldr	r0, [r7, #8]
 8016634:	f000 fcea 	bl	801700c <prvAddCurrentTaskToDelayedList>
    }
 8016638:	bf00      	nop
 801663a:	3718      	adds	r7, #24
 801663c:	46bd      	mov	sp, r7
 801663e:	bd80      	pop	{r7, pc}
 8016640:	20001598 	.word	0x20001598

08016644 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b086      	sub	sp, #24
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	68db      	ldr	r3, [r3, #12]
 8016650:	68db      	ldr	r3, [r3, #12]
 8016652:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8016654:	693b      	ldr	r3, [r7, #16]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d10b      	bne.n	8016672 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 801665a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801665e:	f383 8811 	msr	BASEPRI, r3
 8016662:	f3bf 8f6f 	isb	sy
 8016666:	f3bf 8f4f 	dsb	sy
 801666a:	60fb      	str	r3, [r7, #12]
    }
 801666c:	bf00      	nop
 801666e:	bf00      	nop
 8016670:	e7fd      	b.n	801666e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016672:	693b      	ldr	r3, [r7, #16]
 8016674:	3318      	adds	r3, #24
 8016676:	4618      	mov	r0, r3
 8016678:	f7fe fc50 	bl	8014f1c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801667c:	4b1d      	ldr	r3, [pc, #116]	@ (80166f4 <xTaskRemoveFromEventList+0xb0>)
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	2b00      	cmp	r3, #0
 8016682:	d11c      	bne.n	80166be <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016684:	693b      	ldr	r3, [r7, #16]
 8016686:	3304      	adds	r3, #4
 8016688:	4618      	mov	r0, r3
 801668a:	f7fe fc47 	bl	8014f1c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 801668e:	693b      	ldr	r3, [r7, #16]
 8016690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016692:	2201      	movs	r2, #1
 8016694:	409a      	lsls	r2, r3
 8016696:	4b18      	ldr	r3, [pc, #96]	@ (80166f8 <xTaskRemoveFromEventList+0xb4>)
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	4313      	orrs	r3, r2
 801669c:	4a16      	ldr	r2, [pc, #88]	@ (80166f8 <xTaskRemoveFromEventList+0xb4>)
 801669e:	6013      	str	r3, [r2, #0]
 80166a0:	693b      	ldr	r3, [r7, #16]
 80166a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80166a4:	4613      	mov	r3, r2
 80166a6:	009b      	lsls	r3, r3, #2
 80166a8:	4413      	add	r3, r2
 80166aa:	009b      	lsls	r3, r3, #2
 80166ac:	4a13      	ldr	r2, [pc, #76]	@ (80166fc <xTaskRemoveFromEventList+0xb8>)
 80166ae:	441a      	add	r2, r3
 80166b0:	693b      	ldr	r3, [r7, #16]
 80166b2:	3304      	adds	r3, #4
 80166b4:	4619      	mov	r1, r3
 80166b6:	4610      	mov	r0, r2
 80166b8:	f7fe fbd3 	bl	8014e62 <vListInsertEnd>
 80166bc:	e005      	b.n	80166ca <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80166be:	693b      	ldr	r3, [r7, #16]
 80166c0:	3318      	adds	r3, #24
 80166c2:	4619      	mov	r1, r3
 80166c4:	480e      	ldr	r0, [pc, #56]	@ (8016700 <xTaskRemoveFromEventList+0xbc>)
 80166c6:	f7fe fbcc 	bl	8014e62 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80166ca:	693b      	ldr	r3, [r7, #16]
 80166cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80166ce:	4b0d      	ldr	r3, [pc, #52]	@ (8016704 <xTaskRemoveFromEventList+0xc0>)
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166d4:	429a      	cmp	r2, r3
 80166d6:	d905      	bls.n	80166e4 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80166d8:	2301      	movs	r3, #1
 80166da:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80166dc:	4b0a      	ldr	r3, [pc, #40]	@ (8016708 <xTaskRemoveFromEventList+0xc4>)
 80166de:	2201      	movs	r2, #1
 80166e0:	601a      	str	r2, [r3, #0]
 80166e2:	e001      	b.n	80166e8 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 80166e4:	2300      	movs	r3, #0
 80166e6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80166e8:	697b      	ldr	r3, [r7, #20]
}
 80166ea:	4618      	mov	r0, r3
 80166ec:	3718      	adds	r7, #24
 80166ee:	46bd      	mov	sp, r7
 80166f0:	bd80      	pop	{r7, pc}
 80166f2:	bf00      	nop
 80166f4:	20001698 	.word	0x20001698
 80166f8:	20001678 	.word	0x20001678
 80166fc:	2000159c 	.word	0x2000159c
 8016700:	20001630 	.word	0x20001630
 8016704:	20001598 	.word	0x20001598
 8016708:	20001684 	.word	0x20001684

0801670c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801670c:	b480      	push	{r7}
 801670e:	b083      	sub	sp, #12
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016714:	4b06      	ldr	r3, [pc, #24]	@ (8016730 <vTaskInternalSetTimeOutState+0x24>)
 8016716:	681a      	ldr	r2, [r3, #0]
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 801671c:	4b05      	ldr	r3, [pc, #20]	@ (8016734 <vTaskInternalSetTimeOutState+0x28>)
 801671e:	681a      	ldr	r2, [r3, #0]
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	605a      	str	r2, [r3, #4]
}
 8016724:	bf00      	nop
 8016726:	370c      	adds	r7, #12
 8016728:	46bd      	mov	sp, r7
 801672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672e:	4770      	bx	lr
 8016730:	20001688 	.word	0x20001688
 8016734:	20001674 	.word	0x20001674

08016738 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b088      	sub	sp, #32
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
 8016740:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d10b      	bne.n	8016760 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8016748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801674c:	f383 8811 	msr	BASEPRI, r3
 8016750:	f3bf 8f6f 	isb	sy
 8016754:	f3bf 8f4f 	dsb	sy
 8016758:	613b      	str	r3, [r7, #16]
    }
 801675a:	bf00      	nop
 801675c:	bf00      	nop
 801675e:	e7fd      	b.n	801675c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8016760:	683b      	ldr	r3, [r7, #0]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d10b      	bne.n	801677e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8016766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801676a:	f383 8811 	msr	BASEPRI, r3
 801676e:	f3bf 8f6f 	isb	sy
 8016772:	f3bf 8f4f 	dsb	sy
 8016776:	60fb      	str	r3, [r7, #12]
    }
 8016778:	bf00      	nop
 801677a:	bf00      	nop
 801677c:	e7fd      	b.n	801677a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 801677e:	f001 f8fd 	bl	801797c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8016782:	4b1f      	ldr	r3, [pc, #124]	@ (8016800 <xTaskCheckForTimeOut+0xc8>)
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	685b      	ldr	r3, [r3, #4]
 801678c:	69ba      	ldr	r2, [r7, #24]
 801678e:	1ad3      	subs	r3, r2, r3
 8016790:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8016792:	683b      	ldr	r3, [r7, #0]
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	f1b3 3fff 	cmp.w	r3, #4294967295
 801679a:	d102      	bne.n	80167a2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 801679c:	2300      	movs	r3, #0
 801679e:	61fb      	str	r3, [r7, #28]
 80167a0:	e026      	b.n	80167f0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	681a      	ldr	r2, [r3, #0]
 80167a6:	4b17      	ldr	r3, [pc, #92]	@ (8016804 <xTaskCheckForTimeOut+0xcc>)
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	429a      	cmp	r2, r3
 80167ac:	d00a      	beq.n	80167c4 <xTaskCheckForTimeOut+0x8c>
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	685b      	ldr	r3, [r3, #4]
 80167b2:	69ba      	ldr	r2, [r7, #24]
 80167b4:	429a      	cmp	r2, r3
 80167b6:	d305      	bcc.n	80167c4 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80167b8:	2301      	movs	r3, #1
 80167ba:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80167bc:	683b      	ldr	r3, [r7, #0]
 80167be:	2200      	movs	r2, #0
 80167c0:	601a      	str	r2, [r3, #0]
 80167c2:	e015      	b.n	80167f0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80167c4:	683b      	ldr	r3, [r7, #0]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	697a      	ldr	r2, [r7, #20]
 80167ca:	429a      	cmp	r2, r3
 80167cc:	d20b      	bcs.n	80167e6 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80167ce:	683b      	ldr	r3, [r7, #0]
 80167d0:	681a      	ldr	r2, [r3, #0]
 80167d2:	697b      	ldr	r3, [r7, #20]
 80167d4:	1ad2      	subs	r2, r2, r3
 80167d6:	683b      	ldr	r3, [r7, #0]
 80167d8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80167da:	6878      	ldr	r0, [r7, #4]
 80167dc:	f7ff ff96 	bl	801670c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80167e0:	2300      	movs	r3, #0
 80167e2:	61fb      	str	r3, [r7, #28]
 80167e4:	e004      	b.n	80167f0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80167e6:	683b      	ldr	r3, [r7, #0]
 80167e8:	2200      	movs	r2, #0
 80167ea:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80167ec:	2301      	movs	r3, #1
 80167ee:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80167f0:	f001 f8f6 	bl	80179e0 <vPortExitCritical>

    return xReturn;
 80167f4:	69fb      	ldr	r3, [r7, #28]
}
 80167f6:	4618      	mov	r0, r3
 80167f8:	3720      	adds	r7, #32
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}
 80167fe:	bf00      	nop
 8016800:	20001674 	.word	0x20001674
 8016804:	20001688 	.word	0x20001688

08016808 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016808:	b480      	push	{r7}
 801680a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 801680c:	4b03      	ldr	r3, [pc, #12]	@ (801681c <vTaskMissedYield+0x14>)
 801680e:	2201      	movs	r2, #1
 8016810:	601a      	str	r2, [r3, #0]
}
 8016812:	bf00      	nop
 8016814:	46bd      	mov	sp, r7
 8016816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681a:	4770      	bx	lr
 801681c:	20001684 	.word	0x20001684

08016820 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016820:	b580      	push	{r7, lr}
 8016822:	b082      	sub	sp, #8
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8016828:	f000 f852 	bl	80168d0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801682c:	4b06      	ldr	r3, [pc, #24]	@ (8016848 <prvIdleTask+0x28>)
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	2b01      	cmp	r3, #1
 8016832:	d9f9      	bls.n	8016828 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8016834:	4b05      	ldr	r3, [pc, #20]	@ (801684c <prvIdleTask+0x2c>)
 8016836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801683a:	601a      	str	r2, [r3, #0]
 801683c:	f3bf 8f4f 	dsb	sy
 8016840:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8016844:	e7f0      	b.n	8016828 <prvIdleTask+0x8>
 8016846:	bf00      	nop
 8016848:	2000159c 	.word	0x2000159c
 801684c:	e000ed04 	.word	0xe000ed04

08016850 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b082      	sub	sp, #8
 8016854:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016856:	2300      	movs	r3, #0
 8016858:	607b      	str	r3, [r7, #4]
 801685a:	e00c      	b.n	8016876 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801685c:	687a      	ldr	r2, [r7, #4]
 801685e:	4613      	mov	r3, r2
 8016860:	009b      	lsls	r3, r3, #2
 8016862:	4413      	add	r3, r2
 8016864:	009b      	lsls	r3, r3, #2
 8016866:	4a12      	ldr	r2, [pc, #72]	@ (80168b0 <prvInitialiseTaskLists+0x60>)
 8016868:	4413      	add	r3, r2
 801686a:	4618      	mov	r0, r3
 801686c:	f7fe facc 	bl	8014e08 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	3301      	adds	r3, #1
 8016874:	607b      	str	r3, [r7, #4]
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	2b04      	cmp	r3, #4
 801687a:	d9ef      	bls.n	801685c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 801687c:	480d      	ldr	r0, [pc, #52]	@ (80168b4 <prvInitialiseTaskLists+0x64>)
 801687e:	f7fe fac3 	bl	8014e08 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8016882:	480d      	ldr	r0, [pc, #52]	@ (80168b8 <prvInitialiseTaskLists+0x68>)
 8016884:	f7fe fac0 	bl	8014e08 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8016888:	480c      	ldr	r0, [pc, #48]	@ (80168bc <prvInitialiseTaskLists+0x6c>)
 801688a:	f7fe fabd 	bl	8014e08 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 801688e:	480c      	ldr	r0, [pc, #48]	@ (80168c0 <prvInitialiseTaskLists+0x70>)
 8016890:	f7fe faba 	bl	8014e08 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8016894:	480b      	ldr	r0, [pc, #44]	@ (80168c4 <prvInitialiseTaskLists+0x74>)
 8016896:	f7fe fab7 	bl	8014e08 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 801689a:	4b0b      	ldr	r3, [pc, #44]	@ (80168c8 <prvInitialiseTaskLists+0x78>)
 801689c:	4a05      	ldr	r2, [pc, #20]	@ (80168b4 <prvInitialiseTaskLists+0x64>)
 801689e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80168a0:	4b0a      	ldr	r3, [pc, #40]	@ (80168cc <prvInitialiseTaskLists+0x7c>)
 80168a2:	4a05      	ldr	r2, [pc, #20]	@ (80168b8 <prvInitialiseTaskLists+0x68>)
 80168a4:	601a      	str	r2, [r3, #0]
}
 80168a6:	bf00      	nop
 80168a8:	3708      	adds	r7, #8
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd80      	pop	{r7, pc}
 80168ae:	bf00      	nop
 80168b0:	2000159c 	.word	0x2000159c
 80168b4:	20001600 	.word	0x20001600
 80168b8:	20001614 	.word	0x20001614
 80168bc:	20001630 	.word	0x20001630
 80168c0:	20001644 	.word	0x20001644
 80168c4:	2000165c 	.word	0x2000165c
 80168c8:	20001628 	.word	0x20001628
 80168cc:	2000162c 	.word	0x2000162c

080168d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b082      	sub	sp, #8
 80168d4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80168d6:	e019      	b.n	801690c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80168d8:	f001 f850 	bl	801797c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80168dc:	4b10      	ldr	r3, [pc, #64]	@ (8016920 <prvCheckTasksWaitingTermination+0x50>)
 80168de:	68db      	ldr	r3, [r3, #12]
 80168e0:	68db      	ldr	r3, [r3, #12]
 80168e2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	3304      	adds	r3, #4
 80168e8:	4618      	mov	r0, r3
 80168ea:	f7fe fb17 	bl	8014f1c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80168ee:	4b0d      	ldr	r3, [pc, #52]	@ (8016924 <prvCheckTasksWaitingTermination+0x54>)
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	3b01      	subs	r3, #1
 80168f4:	4a0b      	ldr	r2, [pc, #44]	@ (8016924 <prvCheckTasksWaitingTermination+0x54>)
 80168f6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80168f8:	4b0b      	ldr	r3, [pc, #44]	@ (8016928 <prvCheckTasksWaitingTermination+0x58>)
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	3b01      	subs	r3, #1
 80168fe:	4a0a      	ldr	r2, [pc, #40]	@ (8016928 <prvCheckTasksWaitingTermination+0x58>)
 8016900:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8016902:	f001 f86d 	bl	80179e0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8016906:	6878      	ldr	r0, [r7, #4]
 8016908:	f000 f8e4 	bl	8016ad4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801690c:	4b06      	ldr	r3, [pc, #24]	@ (8016928 <prvCheckTasksWaitingTermination+0x58>)
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d1e1      	bne.n	80168d8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8016914:	bf00      	nop
 8016916:	bf00      	nop
 8016918:	3708      	adds	r7, #8
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
 801691e:	bf00      	nop
 8016920:	20001644 	.word	0x20001644
 8016924:	20001670 	.word	0x20001670
 8016928:	20001658 	.word	0x20001658

0801692c <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 801692c:	b580      	push	{r7, lr}
 801692e:	b086      	sub	sp, #24
 8016930:	af00      	add	r7, sp, #0
 8016932:	60f8      	str	r0, [r7, #12]
 8016934:	60b9      	str	r1, [r7, #8]
 8016936:	607a      	str	r2, [r7, #4]
 8016938:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d102      	bne.n	8016946 <vTaskGetInfo+0x1a>
 8016940:	4b2c      	ldr	r3, [pc, #176]	@ (80169f4 <vTaskGetInfo+0xc8>)
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	e000      	b.n	8016948 <vTaskGetInfo+0x1c>
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	617b      	str	r3, [r7, #20]

        pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 801694a:	68bb      	ldr	r3, [r7, #8]
 801694c:	697a      	ldr	r2, [r7, #20]
 801694e:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 8016950:	697b      	ldr	r3, [r7, #20]
 8016952:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8016956:	68bb      	ldr	r3, [r7, #8]
 8016958:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 801695a:	697b      	ldr	r3, [r7, #20]
 801695c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801695e:	68bb      	ldr	r3, [r7, #8]
 8016960:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8016962:	697b      	ldr	r3, [r7, #20]
 8016964:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016966:	68bb      	ldr	r3, [r7, #8]
 8016968:	61da      	str	r2, [r3, #28]
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 801696a:	697b      	ldr	r3, [r7, #20]
 801696c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801696e:	68bb      	ldr	r3, [r7, #8]
 8016970:	609a      	str	r2, [r3, #8]

        #if ( configUSE_MUTEXES == 1 )
            {
                pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8016972:	697b      	ldr	r3, [r7, #20]
 8016974:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8016976:	68bb      	ldr	r3, [r7, #8]
 8016978:	615a      	str	r2, [r3, #20]
            {
                pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
            }
        #else
            {
                pxTaskStatus->ulRunTimeCounter = 0;
 801697a:	68bb      	ldr	r3, [r7, #8]
 801697c:	2200      	movs	r2, #0
 801697e:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 8016980:	78fb      	ldrb	r3, [r7, #3]
 8016982:	2b05      	cmp	r3, #5
 8016984:	d01a      	beq.n	80169bc <vTaskGetInfo+0x90>
        {
            if( pxTCB == pxCurrentTCB )
 8016986:	4b1b      	ldr	r3, [pc, #108]	@ (80169f4 <vTaskGetInfo+0xc8>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	697a      	ldr	r2, [r7, #20]
 801698c:	429a      	cmp	r2, r3
 801698e:	d103      	bne.n	8016998 <vTaskGetInfo+0x6c>
            {
                pxTaskStatus->eCurrentState = eRunning;
 8016990:	68bb      	ldr	r3, [r7, #8]
 8016992:	2200      	movs	r2, #0
 8016994:	731a      	strb	r2, [r3, #12]
 8016996:	e018      	b.n	80169ca <vTaskGetInfo+0x9e>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 8016998:	68bb      	ldr	r3, [r7, #8]
 801699a:	78fa      	ldrb	r2, [r7, #3]
 801699c:	731a      	strb	r2, [r3, #12]
                #if ( INCLUDE_vTaskSuspend == 1 )
                    {
                        /* If the task is in the suspended list then there is a
                         *  chance it is actually just blocked indefinitely - so really
                         *  it should be reported as being in the Blocked state. */
                        if( eState == eSuspended )
 801699e:	78fb      	ldrb	r3, [r7, #3]
 80169a0:	2b03      	cmp	r3, #3
 80169a2:	d112      	bne.n	80169ca <vTaskGetInfo+0x9e>
                        {
                            vTaskSuspendAll();
 80169a4:	f7ff fb76 	bl	8016094 <vTaskSuspendAll>
                            {
                                if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80169a8:	697b      	ldr	r3, [r7, #20]
 80169aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d002      	beq.n	80169b6 <vTaskGetInfo+0x8a>
                                {
                                    pxTaskStatus->eCurrentState = eBlocked;
 80169b0:	68bb      	ldr	r3, [r7, #8]
 80169b2:	2202      	movs	r2, #2
 80169b4:	731a      	strb	r2, [r3, #12]
                                }
                            }
                            ( void ) xTaskResumeAll();
 80169b6:	f7ff fb7b 	bl	80160b0 <xTaskResumeAll>
 80169ba:	e006      	b.n	80169ca <vTaskGetInfo+0x9e>
                #endif /* INCLUDE_vTaskSuspend */
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80169bc:	6978      	ldr	r0, [r7, #20]
 80169be:	f7ff fa9d 	bl	8015efc <eTaskGetState>
 80169c2:	4603      	mov	r3, r0
 80169c4:	461a      	mov	r2, r3
 80169c6:	68bb      	ldr	r3, [r7, #8]
 80169c8:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d009      	beq.n	80169e4 <vTaskGetInfo+0xb8>
                {
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
                }
            #else
                {
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80169d0:	697b      	ldr	r3, [r7, #20]
 80169d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80169d4:	4618      	mov	r0, r3
 80169d6:	f000 f861 	bl	8016a9c <prvTaskCheckFreeStackSpace>
 80169da:	4603      	mov	r3, r0
 80169dc:	461a      	mov	r2, r3
 80169de:	68bb      	ldr	r3, [r7, #8]
 80169e0:	841a      	strh	r2, [r3, #32]
        }
        else
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }
    }
 80169e2:	e002      	b.n	80169ea <vTaskGetInfo+0xbe>
            pxTaskStatus->usStackHighWaterMark = 0;
 80169e4:	68bb      	ldr	r3, [r7, #8]
 80169e6:	2200      	movs	r2, #0
 80169e8:	841a      	strh	r2, [r3, #32]
    }
 80169ea:	bf00      	nop
 80169ec:	3718      	adds	r7, #24
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bd80      	pop	{r7, pc}
 80169f2:	bf00      	nop
 80169f4:	20001598 	.word	0x20001598

080169f8 <prvListTasksWithinSingleList>:
#if ( configUSE_TRACE_FACILITY == 1 )

    static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
                                                     List_t * pxList,
                                                     eTaskState eState )
    {
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b08a      	sub	sp, #40	@ 0x28
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	60f8      	str	r0, [r7, #12]
 8016a00:	60b9      	str	r1, [r7, #8]
 8016a02:	4613      	mov	r3, r2
 8016a04:	71fb      	strb	r3, [r7, #7]
        configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
        UBaseType_t uxTask = 0;
 8016a06:	2300      	movs	r3, #0
 8016a08:	627b      	str	r3, [r7, #36]	@ 0x24

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8016a0a:	68bb      	ldr	r3, [r7, #8]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d03f      	beq.n	8016a92 <prvListTasksWithinSingleList+0x9a>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a12:	68bb      	ldr	r3, [r7, #8]
 8016a14:	623b      	str	r3, [r7, #32]
 8016a16:	6a3b      	ldr	r3, [r7, #32]
 8016a18:	685b      	ldr	r3, [r3, #4]
 8016a1a:	685a      	ldr	r2, [r3, #4]
 8016a1c:	6a3b      	ldr	r3, [r7, #32]
 8016a1e:	605a      	str	r2, [r3, #4]
 8016a20:	6a3b      	ldr	r3, [r7, #32]
 8016a22:	685a      	ldr	r2, [r3, #4]
 8016a24:	6a3b      	ldr	r3, [r7, #32]
 8016a26:	3308      	adds	r3, #8
 8016a28:	429a      	cmp	r2, r3
 8016a2a:	d104      	bne.n	8016a36 <prvListTasksWithinSingleList+0x3e>
 8016a2c:	6a3b      	ldr	r3, [r7, #32]
 8016a2e:	685b      	ldr	r3, [r3, #4]
 8016a30:	685a      	ldr	r2, [r3, #4]
 8016a32:	6a3b      	ldr	r3, [r7, #32]
 8016a34:	605a      	str	r2, [r3, #4]
 8016a36:	6a3b      	ldr	r3, [r7, #32]
 8016a38:	685b      	ldr	r3, [r3, #4]
 8016a3a:	68db      	ldr	r3, [r3, #12]
 8016a3c:	61fb      	str	r3, [r7, #28]
             * pxTaskStatusArray array for each task that is referenced from
             * pxList.  See the definition of TaskStatus_t in task.h for the
             * meaning of each TaskStatus_t structure member. */
            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a3e:	68bb      	ldr	r3, [r7, #8]
 8016a40:	61bb      	str	r3, [r7, #24]
 8016a42:	69bb      	ldr	r3, [r7, #24]
 8016a44:	685b      	ldr	r3, [r3, #4]
 8016a46:	685a      	ldr	r2, [r3, #4]
 8016a48:	69bb      	ldr	r3, [r7, #24]
 8016a4a:	605a      	str	r2, [r3, #4]
 8016a4c:	69bb      	ldr	r3, [r7, #24]
 8016a4e:	685a      	ldr	r2, [r3, #4]
 8016a50:	69bb      	ldr	r3, [r7, #24]
 8016a52:	3308      	adds	r3, #8
 8016a54:	429a      	cmp	r2, r3
 8016a56:	d104      	bne.n	8016a62 <prvListTasksWithinSingleList+0x6a>
 8016a58:	69bb      	ldr	r3, [r7, #24]
 8016a5a:	685b      	ldr	r3, [r3, #4]
 8016a5c:	685a      	ldr	r2, [r3, #4]
 8016a5e:	69bb      	ldr	r3, [r7, #24]
 8016a60:	605a      	str	r2, [r3, #4]
 8016a62:	69bb      	ldr	r3, [r7, #24]
 8016a64:	685b      	ldr	r3, [r3, #4]
 8016a66:	68db      	ldr	r3, [r3, #12]
 8016a68:	617b      	str	r3, [r7, #20]
                vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8016a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a6c:	4613      	mov	r3, r2
 8016a6e:	00db      	lsls	r3, r3, #3
 8016a70:	4413      	add	r3, r2
 8016a72:	009b      	lsls	r3, r3, #2
 8016a74:	461a      	mov	r2, r3
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	1899      	adds	r1, r3, r2
 8016a7a:	79fb      	ldrb	r3, [r7, #7]
 8016a7c:	2201      	movs	r2, #1
 8016a7e:	6978      	ldr	r0, [r7, #20]
 8016a80:	f7ff ff54 	bl	801692c <vTaskGetInfo>
                uxTask++;
 8016a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a86:	3301      	adds	r3, #1
 8016a88:	627b      	str	r3, [r7, #36]	@ 0x24
            } while( pxNextTCB != pxFirstTCB );
 8016a8a:	697a      	ldr	r2, [r7, #20]
 8016a8c:	69fb      	ldr	r3, [r7, #28]
 8016a8e:	429a      	cmp	r2, r3
 8016a90:	d1d5      	bne.n	8016a3e <prvListTasksWithinSingleList+0x46>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return uxTask;
 8016a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8016a94:	4618      	mov	r0, r3
 8016a96:	3728      	adds	r7, #40	@ 0x28
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd80      	pop	{r7, pc}

08016a9c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8016a9c:	b480      	push	{r7}
 8016a9e:	b085      	sub	sp, #20
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8016aa8:	e005      	b.n	8016ab6 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	3301      	adds	r3, #1
 8016aae:	607b      	str	r3, [r7, #4]
            ulCount++;
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	3301      	adds	r3, #1
 8016ab4:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	781b      	ldrb	r3, [r3, #0]
 8016aba:	2ba5      	cmp	r3, #165	@ 0xa5
 8016abc:	d0f5      	beq.n	8016aaa <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	089b      	lsrs	r3, r3, #2
 8016ac2:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	b29b      	uxth	r3, r3
    }
 8016ac8:	4618      	mov	r0, r3
 8016aca:	3714      	adds	r7, #20
 8016acc:	46bd      	mov	sp, r7
 8016ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad2:	4770      	bx	lr

08016ad4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b082      	sub	sp, #8
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	f001 f957 	bl	8017d94 <vPortFree>
                vPortFree( pxTCB );
 8016ae6:	6878      	ldr	r0, [r7, #4]
 8016ae8:	f001 f954 	bl	8017d94 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8016aec:	bf00      	nop
 8016aee:	3708      	adds	r7, #8
 8016af0:	46bd      	mov	sp, r7
 8016af2:	bd80      	pop	{r7, pc}

08016af4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016af4:	b480      	push	{r7}
 8016af6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016af8:	4b0a      	ldr	r3, [pc, #40]	@ (8016b24 <prvResetNextTaskUnblockTime+0x30>)
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d104      	bne.n	8016b0c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8016b02:	4b09      	ldr	r3, [pc, #36]	@ (8016b28 <prvResetNextTaskUnblockTime+0x34>)
 8016b04:	f04f 32ff 	mov.w	r2, #4294967295
 8016b08:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8016b0a:	e005      	b.n	8016b18 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8016b0c:	4b05      	ldr	r3, [pc, #20]	@ (8016b24 <prvResetNextTaskUnblockTime+0x30>)
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	68db      	ldr	r3, [r3, #12]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	4a04      	ldr	r2, [pc, #16]	@ (8016b28 <prvResetNextTaskUnblockTime+0x34>)
 8016b16:	6013      	str	r3, [r2, #0]
}
 8016b18:	bf00      	nop
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b20:	4770      	bx	lr
 8016b22:	bf00      	nop
 8016b24:	20001628 	.word	0x20001628
 8016b28:	20001690 	.word	0x20001690

08016b2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8016b2c:	b480      	push	{r7}
 8016b2e:	b083      	sub	sp, #12
 8016b30:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8016b32:	4b0b      	ldr	r3, [pc, #44]	@ (8016b60 <xTaskGetSchedulerState+0x34>)
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d102      	bne.n	8016b40 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8016b3a:	2301      	movs	r3, #1
 8016b3c:	607b      	str	r3, [r7, #4]
 8016b3e:	e008      	b.n	8016b52 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016b40:	4b08      	ldr	r3, [pc, #32]	@ (8016b64 <xTaskGetSchedulerState+0x38>)
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d102      	bne.n	8016b4e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8016b48:	2302      	movs	r3, #2
 8016b4a:	607b      	str	r3, [r7, #4]
 8016b4c:	e001      	b.n	8016b52 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8016b4e:	2300      	movs	r3, #0
 8016b50:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8016b52:	687b      	ldr	r3, [r7, #4]
    }
 8016b54:	4618      	mov	r0, r3
 8016b56:	370c      	adds	r7, #12
 8016b58:	46bd      	mov	sp, r7
 8016b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b5e:	4770      	bx	lr
 8016b60:	2000167c 	.word	0x2000167c
 8016b64:	20001698 	.word	0x20001698

08016b68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b084      	sub	sp, #16
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8016b74:	2300      	movs	r3, #0
 8016b76:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d05e      	beq.n	8016c3c <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016b7e:	68bb      	ldr	r3, [r7, #8]
 8016b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016b82:	4b31      	ldr	r3, [pc, #196]	@ (8016c48 <xTaskPriorityInherit+0xe0>)
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b88:	429a      	cmp	r2, r3
 8016b8a:	d24e      	bcs.n	8016c2a <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016b8c:	68bb      	ldr	r3, [r7, #8]
 8016b8e:	699b      	ldr	r3, [r3, #24]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	db06      	blt.n	8016ba2 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b94:	4b2c      	ldr	r3, [pc, #176]	@ (8016c48 <xTaskPriorityInherit+0xe0>)
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b9a:	f1c3 0205 	rsb	r2, r3, #5
 8016b9e:	68bb      	ldr	r3, [r7, #8]
 8016ba0:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016ba2:	68bb      	ldr	r3, [r7, #8]
 8016ba4:	6959      	ldr	r1, [r3, #20]
 8016ba6:	68bb      	ldr	r3, [r7, #8]
 8016ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016baa:	4613      	mov	r3, r2
 8016bac:	009b      	lsls	r3, r3, #2
 8016bae:	4413      	add	r3, r2
 8016bb0:	009b      	lsls	r3, r3, #2
 8016bb2:	4a26      	ldr	r2, [pc, #152]	@ (8016c4c <xTaskPriorityInherit+0xe4>)
 8016bb4:	4413      	add	r3, r2
 8016bb6:	4299      	cmp	r1, r3
 8016bb8:	d12f      	bne.n	8016c1a <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016bba:	68bb      	ldr	r3, [r7, #8]
 8016bbc:	3304      	adds	r3, #4
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	f7fe f9ac 	bl	8014f1c <uxListRemove>
 8016bc4:	4603      	mov	r3, r0
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d10a      	bne.n	8016be0 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8016bca:	68bb      	ldr	r3, [r7, #8]
 8016bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016bce:	2201      	movs	r2, #1
 8016bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8016bd4:	43da      	mvns	r2, r3
 8016bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8016c50 <xTaskPriorityInherit+0xe8>)
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	4013      	ands	r3, r2
 8016bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8016c50 <xTaskPriorityInherit+0xe8>)
 8016bde:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016be0:	4b19      	ldr	r3, [pc, #100]	@ (8016c48 <xTaskPriorityInherit+0xe0>)
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016be6:	68bb      	ldr	r3, [r7, #8]
 8016be8:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8016bea:	68bb      	ldr	r3, [r7, #8]
 8016bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016bee:	2201      	movs	r2, #1
 8016bf0:	409a      	lsls	r2, r3
 8016bf2:	4b17      	ldr	r3, [pc, #92]	@ (8016c50 <xTaskPriorityInherit+0xe8>)
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	4313      	orrs	r3, r2
 8016bf8:	4a15      	ldr	r2, [pc, #84]	@ (8016c50 <xTaskPriorityInherit+0xe8>)
 8016bfa:	6013      	str	r3, [r2, #0]
 8016bfc:	68bb      	ldr	r3, [r7, #8]
 8016bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016c00:	4613      	mov	r3, r2
 8016c02:	009b      	lsls	r3, r3, #2
 8016c04:	4413      	add	r3, r2
 8016c06:	009b      	lsls	r3, r3, #2
 8016c08:	4a10      	ldr	r2, [pc, #64]	@ (8016c4c <xTaskPriorityInherit+0xe4>)
 8016c0a:	441a      	add	r2, r3
 8016c0c:	68bb      	ldr	r3, [r7, #8]
 8016c0e:	3304      	adds	r3, #4
 8016c10:	4619      	mov	r1, r3
 8016c12:	4610      	mov	r0, r2
 8016c14:	f7fe f925 	bl	8014e62 <vListInsertEnd>
 8016c18:	e004      	b.n	8016c24 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8016c48 <xTaskPriorityInherit+0xe0>)
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016c20:	68bb      	ldr	r3, [r7, #8]
 8016c22:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8016c24:	2301      	movs	r3, #1
 8016c26:	60fb      	str	r3, [r7, #12]
 8016c28:	e008      	b.n	8016c3c <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016c2a:	68bb      	ldr	r3, [r7, #8]
 8016c2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8016c2e:	4b06      	ldr	r3, [pc, #24]	@ (8016c48 <xTaskPriorityInherit+0xe0>)
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c34:	429a      	cmp	r2, r3
 8016c36:	d201      	bcs.n	8016c3c <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8016c38:	2301      	movs	r3, #1
 8016c3a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8016c3c:	68fb      	ldr	r3, [r7, #12]
    }
 8016c3e:	4618      	mov	r0, r3
 8016c40:	3710      	adds	r7, #16
 8016c42:	46bd      	mov	sp, r7
 8016c44:	bd80      	pop	{r7, pc}
 8016c46:	bf00      	nop
 8016c48:	20001598 	.word	0x20001598
 8016c4c:	2000159c 	.word	0x2000159c
 8016c50:	20001678 	.word	0x20001678

08016c54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b086      	sub	sp, #24
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8016c60:	2300      	movs	r3, #0
 8016c62:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d065      	beq.n	8016d36 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8016c6a:	4b35      	ldr	r3, [pc, #212]	@ (8016d40 <xTaskPriorityDisinherit+0xec>)
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	693a      	ldr	r2, [r7, #16]
 8016c70:	429a      	cmp	r2, r3
 8016c72:	d00b      	beq.n	8016c8c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8016c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c78:	f383 8811 	msr	BASEPRI, r3
 8016c7c:	f3bf 8f6f 	isb	sy
 8016c80:	f3bf 8f4f 	dsb	sy
 8016c84:	60fb      	str	r3, [r7, #12]
    }
 8016c86:	bf00      	nop
 8016c88:	bf00      	nop
 8016c8a:	e7fd      	b.n	8016c88 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8016c8c:	693b      	ldr	r3, [r7, #16]
 8016c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d10b      	bne.n	8016cac <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8016c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c98:	f383 8811 	msr	BASEPRI, r3
 8016c9c:	f3bf 8f6f 	isb	sy
 8016ca0:	f3bf 8f4f 	dsb	sy
 8016ca4:	60bb      	str	r3, [r7, #8]
    }
 8016ca6:	bf00      	nop
 8016ca8:	bf00      	nop
 8016caa:	e7fd      	b.n	8016ca8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8016cac:	693b      	ldr	r3, [r7, #16]
 8016cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016cb0:	1e5a      	subs	r2, r3, #1
 8016cb2:	693b      	ldr	r3, [r7, #16]
 8016cb4:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016cb6:	693b      	ldr	r3, [r7, #16]
 8016cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016cba:	693b      	ldr	r3, [r7, #16]
 8016cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016cbe:	429a      	cmp	r2, r3
 8016cc0:	d039      	beq.n	8016d36 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016cc2:	693b      	ldr	r3, [r7, #16]
 8016cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d135      	bne.n	8016d36 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016cca:	693b      	ldr	r3, [r7, #16]
 8016ccc:	3304      	adds	r3, #4
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f7fe f924 	bl	8014f1c <uxListRemove>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d10a      	bne.n	8016cf0 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8016cda:	693b      	ldr	r3, [r7, #16]
 8016cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016cde:	2201      	movs	r2, #1
 8016ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8016ce4:	43da      	mvns	r2, r3
 8016ce6:	4b17      	ldr	r3, [pc, #92]	@ (8016d44 <xTaskPriorityDisinherit+0xf0>)
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	4013      	ands	r3, r2
 8016cec:	4a15      	ldr	r2, [pc, #84]	@ (8016d44 <xTaskPriorityDisinherit+0xf0>)
 8016cee:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016cf0:	693b      	ldr	r3, [r7, #16]
 8016cf2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8016cf4:	693b      	ldr	r3, [r7, #16]
 8016cf6:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016cf8:	693b      	ldr	r3, [r7, #16]
 8016cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016cfc:	f1c3 0205 	rsb	r2, r3, #5
 8016d00:	693b      	ldr	r3, [r7, #16]
 8016d02:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8016d04:	693b      	ldr	r3, [r7, #16]
 8016d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d08:	2201      	movs	r2, #1
 8016d0a:	409a      	lsls	r2, r3
 8016d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8016d44 <xTaskPriorityDisinherit+0xf0>)
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	4313      	orrs	r3, r2
 8016d12:	4a0c      	ldr	r2, [pc, #48]	@ (8016d44 <xTaskPriorityDisinherit+0xf0>)
 8016d14:	6013      	str	r3, [r2, #0]
 8016d16:	693b      	ldr	r3, [r7, #16]
 8016d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016d1a:	4613      	mov	r3, r2
 8016d1c:	009b      	lsls	r3, r3, #2
 8016d1e:	4413      	add	r3, r2
 8016d20:	009b      	lsls	r3, r3, #2
 8016d22:	4a09      	ldr	r2, [pc, #36]	@ (8016d48 <xTaskPriorityDisinherit+0xf4>)
 8016d24:	441a      	add	r2, r3
 8016d26:	693b      	ldr	r3, [r7, #16]
 8016d28:	3304      	adds	r3, #4
 8016d2a:	4619      	mov	r1, r3
 8016d2c:	4610      	mov	r0, r2
 8016d2e:	f7fe f898 	bl	8014e62 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8016d32:	2301      	movs	r3, #1
 8016d34:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8016d36:	697b      	ldr	r3, [r7, #20]
    }
 8016d38:	4618      	mov	r0, r3
 8016d3a:	3718      	adds	r7, #24
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	bd80      	pop	{r7, pc}
 8016d40:	20001598 	.word	0x20001598
 8016d44:	20001678 	.word	0x20001678
 8016d48:	2000159c 	.word	0x2000159c

08016d4c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	b088      	sub	sp, #32
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	6078      	str	r0, [r7, #4]
 8016d54:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8016d5a:	2301      	movs	r3, #1
 8016d5c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d079      	beq.n	8016e58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8016d64:	69bb      	ldr	r3, [r7, #24]
 8016d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d10b      	bne.n	8016d84 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8016d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d70:	f383 8811 	msr	BASEPRI, r3
 8016d74:	f3bf 8f6f 	isb	sy
 8016d78:	f3bf 8f4f 	dsb	sy
 8016d7c:	60fb      	str	r3, [r7, #12]
    }
 8016d7e:	bf00      	nop
 8016d80:	bf00      	nop
 8016d82:	e7fd      	b.n	8016d80 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016d84:	69bb      	ldr	r3, [r7, #24]
 8016d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016d88:	683a      	ldr	r2, [r7, #0]
 8016d8a:	429a      	cmp	r2, r3
 8016d8c:	d902      	bls.n	8016d94 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016d8e:	683b      	ldr	r3, [r7, #0]
 8016d90:	61fb      	str	r3, [r7, #28]
 8016d92:	e002      	b.n	8016d9a <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8016d94:	69bb      	ldr	r3, [r7, #24]
 8016d96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016d98:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8016d9a:	69bb      	ldr	r3, [r7, #24]
 8016d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d9e:	69fa      	ldr	r2, [r7, #28]
 8016da0:	429a      	cmp	r2, r3
 8016da2:	d059      	beq.n	8016e58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016da4:	69bb      	ldr	r3, [r7, #24]
 8016da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016da8:	697a      	ldr	r2, [r7, #20]
 8016daa:	429a      	cmp	r2, r3
 8016dac:	d154      	bne.n	8016e58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8016dae:	4b2c      	ldr	r3, [pc, #176]	@ (8016e60 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	69ba      	ldr	r2, [r7, #24]
 8016db4:	429a      	cmp	r2, r3
 8016db6:	d10b      	bne.n	8016dd0 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8016db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016dbc:	f383 8811 	msr	BASEPRI, r3
 8016dc0:	f3bf 8f6f 	isb	sy
 8016dc4:	f3bf 8f4f 	dsb	sy
 8016dc8:	60bb      	str	r3, [r7, #8]
    }
 8016dca:	bf00      	nop
 8016dcc:	bf00      	nop
 8016dce:	e7fd      	b.n	8016dcc <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016dd0:	69bb      	ldr	r3, [r7, #24]
 8016dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016dd4:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8016dd6:	69bb      	ldr	r3, [r7, #24]
 8016dd8:	69fa      	ldr	r2, [r7, #28]
 8016dda:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016ddc:	69bb      	ldr	r3, [r7, #24]
 8016dde:	699b      	ldr	r3, [r3, #24]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	db04      	blt.n	8016dee <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016de4:	69fb      	ldr	r3, [r7, #28]
 8016de6:	f1c3 0205 	rsb	r2, r3, #5
 8016dea:	69bb      	ldr	r3, [r7, #24]
 8016dec:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016dee:	69bb      	ldr	r3, [r7, #24]
 8016df0:	6959      	ldr	r1, [r3, #20]
 8016df2:	693a      	ldr	r2, [r7, #16]
 8016df4:	4613      	mov	r3, r2
 8016df6:	009b      	lsls	r3, r3, #2
 8016df8:	4413      	add	r3, r2
 8016dfa:	009b      	lsls	r3, r3, #2
 8016dfc:	4a19      	ldr	r2, [pc, #100]	@ (8016e64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016dfe:	4413      	add	r3, r2
 8016e00:	4299      	cmp	r1, r3
 8016e02:	d129      	bne.n	8016e58 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016e04:	69bb      	ldr	r3, [r7, #24]
 8016e06:	3304      	adds	r3, #4
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f7fe f887 	bl	8014f1c <uxListRemove>
 8016e0e:	4603      	mov	r3, r0
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d10a      	bne.n	8016e2a <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8016e14:	69bb      	ldr	r3, [r7, #24]
 8016e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016e18:	2201      	movs	r2, #1
 8016e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8016e1e:	43da      	mvns	r2, r3
 8016e20:	4b11      	ldr	r3, [pc, #68]	@ (8016e68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	4013      	ands	r3, r2
 8016e26:	4a10      	ldr	r2, [pc, #64]	@ (8016e68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016e28:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8016e2a:	69bb      	ldr	r3, [r7, #24]
 8016e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016e2e:	2201      	movs	r2, #1
 8016e30:	409a      	lsls	r2, r3
 8016e32:	4b0d      	ldr	r3, [pc, #52]	@ (8016e68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	4313      	orrs	r3, r2
 8016e38:	4a0b      	ldr	r2, [pc, #44]	@ (8016e68 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016e3a:	6013      	str	r3, [r2, #0]
 8016e3c:	69bb      	ldr	r3, [r7, #24]
 8016e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016e40:	4613      	mov	r3, r2
 8016e42:	009b      	lsls	r3, r3, #2
 8016e44:	4413      	add	r3, r2
 8016e46:	009b      	lsls	r3, r3, #2
 8016e48:	4a06      	ldr	r2, [pc, #24]	@ (8016e64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016e4a:	441a      	add	r2, r3
 8016e4c:	69bb      	ldr	r3, [r7, #24]
 8016e4e:	3304      	adds	r3, #4
 8016e50:	4619      	mov	r1, r3
 8016e52:	4610      	mov	r0, r2
 8016e54:	f7fe f805 	bl	8014e62 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8016e58:	bf00      	nop
 8016e5a:	3720      	adds	r7, #32
 8016e5c:	46bd      	mov	sp, r7
 8016e5e:	bd80      	pop	{r7, pc}
 8016e60:	20001598 	.word	0x20001598
 8016e64:	2000159c 	.word	0x2000159c
 8016e68:	20001678 	.word	0x20001678

08016e6c <prvWriteNameToBuffer>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

    static char * prvWriteNameToBuffer( char * pcBuffer,
                                        const char * pcTaskName )
    {
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b084      	sub	sp, #16
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
 8016e74:	6039      	str	r1, [r7, #0]
        size_t x;

        /* Start by copying the entire string. */
        strcpy( pcBuffer, pcTaskName );
 8016e76:	6839      	ldr	r1, [r7, #0]
 8016e78:	6878      	ldr	r0, [r7, #4]
 8016e7a:	f002 ff3c 	bl	8019cf6 <strcpy>

        /* Pad the end of the string with spaces to ensure columns line up when
         * printed out. */
        for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8016e7e:	6878      	ldr	r0, [r7, #4]
 8016e80:	f7f1 fa26 	bl	80082d0 <strlen>
 8016e84:	60f8      	str	r0, [r7, #12]
 8016e86:	e007      	b.n	8016e98 <prvWriteNameToBuffer+0x2c>
        {
            pcBuffer[ x ] = ' ';
 8016e88:	687a      	ldr	r2, [r7, #4]
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	4413      	add	r3, r2
 8016e8e:	2220      	movs	r2, #32
 8016e90:	701a      	strb	r2, [r3, #0]
        for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	3301      	adds	r3, #1
 8016e96:	60fb      	str	r3, [r7, #12]
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	2b08      	cmp	r3, #8
 8016e9c:	d9f4      	bls.n	8016e88 <prvWriteNameToBuffer+0x1c>
        }

        /* Terminate. */
        pcBuffer[ x ] = ( char ) 0x00;
 8016e9e:	687a      	ldr	r2, [r7, #4]
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	4413      	add	r3, r2
 8016ea4:	2200      	movs	r2, #0
 8016ea6:	701a      	strb	r2, [r3, #0]

        /* Return the new end of string. */
        return &( pcBuffer[ x ] );
 8016ea8:	687a      	ldr	r2, [r7, #4]
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	4413      	add	r3, r2
    }
 8016eae:	4618      	mov	r0, r3
 8016eb0:	3710      	adds	r7, #16
 8016eb2:	46bd      	mov	sp, r7
 8016eb4:	bd80      	pop	{r7, pc}
	...

08016eb8 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    void vTaskList( char * pcWriteBuffer )
    {
 8016eb8:	b590      	push	{r4, r7, lr}
 8016eba:	b089      	sub	sp, #36	@ 0x24
 8016ebc:	af02      	add	r7, sp, #8
 8016ebe:	6078      	str	r0, [r7, #4]
         * through a call to vTaskList().
         */


        /* Make sure the write buffer does not contain a string. */
        *pcWriteBuffer = ( char ) 0x00;
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	701a      	strb	r2, [r3, #0]

        /* Take a snapshot of the number of tasks in case it changes while this
         * function is executing. */
        uxArraySize = uxCurrentNumberOfTasks;
 8016ec6:	4b45      	ldr	r3, [pc, #276]	@ (8016fdc <vTaskList+0x124>)
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	60fb      	str	r3, [r7, #12]

        /* Allocate an array index for each task.  NOTE!  if
         * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
         * equate to NULL. */
        pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8016ecc:	4b43      	ldr	r3, [pc, #268]	@ (8016fdc <vTaskList+0x124>)
 8016ece:	681a      	ldr	r2, [r3, #0]
 8016ed0:	4613      	mov	r3, r2
 8016ed2:	00db      	lsls	r3, r3, #3
 8016ed4:	4413      	add	r3, r2
 8016ed6:	009b      	lsls	r3, r3, #2
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f000 fe79 	bl	8017bd0 <pvPortMalloc>
 8016ede:	60b8      	str	r0, [r7, #8]

        if( pxTaskStatusArray != NULL )
 8016ee0:	68bb      	ldr	r3, [r7, #8]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d076      	beq.n	8016fd4 <vTaskList+0x11c>
        {
            /* Generate the (binary) data. */
            uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	68f9      	ldr	r1, [r7, #12]
 8016eea:	68b8      	ldr	r0, [r7, #8]
 8016eec:	f7ff f98e 	bl	801620c <uxTaskGetSystemState>
 8016ef0:	60f8      	str	r0, [r7, #12]

            /* Create a human readable table from the binary data. */
            for( x = 0; x < uxArraySize; x++ )
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	617b      	str	r3, [r7, #20]
 8016ef6:	e066      	b.n	8016fc6 <vTaskList+0x10e>
            {
                switch( pxTaskStatusArray[ x ].eCurrentState )
 8016ef8:	697a      	ldr	r2, [r7, #20]
 8016efa:	4613      	mov	r3, r2
 8016efc:	00db      	lsls	r3, r3, #3
 8016efe:	4413      	add	r3, r2
 8016f00:	009b      	lsls	r3, r3, #2
 8016f02:	461a      	mov	r2, r3
 8016f04:	68bb      	ldr	r3, [r7, #8]
 8016f06:	4413      	add	r3, r2
 8016f08:	7b1b      	ldrb	r3, [r3, #12]
 8016f0a:	2b04      	cmp	r3, #4
 8016f0c:	d81b      	bhi.n	8016f46 <vTaskList+0x8e>
 8016f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8016f14 <vTaskList+0x5c>)
 8016f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f14:	08016f29 	.word	0x08016f29
 8016f18:	08016f2f 	.word	0x08016f2f
 8016f1c:	08016f35 	.word	0x08016f35
 8016f20:	08016f3b 	.word	0x08016f3b
 8016f24:	08016f41 	.word	0x08016f41
                {
                    case eRunning:
                        cStatus = tskRUNNING_CHAR;
 8016f28:	2358      	movs	r3, #88	@ 0x58
 8016f2a:	74fb      	strb	r3, [r7, #19]
                        break;
 8016f2c:	e00e      	b.n	8016f4c <vTaskList+0x94>

                    case eReady:
                        cStatus = tskREADY_CHAR;
 8016f2e:	2352      	movs	r3, #82	@ 0x52
 8016f30:	74fb      	strb	r3, [r7, #19]
                        break;
 8016f32:	e00b      	b.n	8016f4c <vTaskList+0x94>

                    case eBlocked:
                        cStatus = tskBLOCKED_CHAR;
 8016f34:	2342      	movs	r3, #66	@ 0x42
 8016f36:	74fb      	strb	r3, [r7, #19]
                        break;
 8016f38:	e008      	b.n	8016f4c <vTaskList+0x94>

                    case eSuspended:
                        cStatus = tskSUSPENDED_CHAR;
 8016f3a:	2353      	movs	r3, #83	@ 0x53
 8016f3c:	74fb      	strb	r3, [r7, #19]
                        break;
 8016f3e:	e005      	b.n	8016f4c <vTaskList+0x94>

                    case eDeleted:
                        cStatus = tskDELETED_CHAR;
 8016f40:	2344      	movs	r3, #68	@ 0x44
 8016f42:	74fb      	strb	r3, [r7, #19]
                        break;
 8016f44:	e002      	b.n	8016f4c <vTaskList+0x94>

                    case eInvalid: /* Fall through. */
                    default:       /* Should not get here, but it is included
                                    * to prevent static checking errors. */
                        cStatus = ( char ) 0x00;
 8016f46:	2300      	movs	r3, #0
 8016f48:	74fb      	strb	r3, [r7, #19]
                        break;
 8016f4a:	bf00      	nop
                }

                /* Write the task name to the string, padding with spaces so it
                 * can be printed in tabular form more easily. */
                pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8016f4c:	697a      	ldr	r2, [r7, #20]
 8016f4e:	4613      	mov	r3, r2
 8016f50:	00db      	lsls	r3, r3, #3
 8016f52:	4413      	add	r3, r2
 8016f54:	009b      	lsls	r3, r3, #2
 8016f56:	461a      	mov	r2, r3
 8016f58:	68bb      	ldr	r3, [r7, #8]
 8016f5a:	4413      	add	r3, r2
 8016f5c:	685b      	ldr	r3, [r3, #4]
 8016f5e:	4619      	mov	r1, r3
 8016f60:	6878      	ldr	r0, [r7, #4]
 8016f62:	f7ff ff83 	bl	8016e6c <prvWriteNameToBuffer>
 8016f66:	6078      	str	r0, [r7, #4]

                /* Write the rest of the string. */
                sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8016f68:	7cf9      	ldrb	r1, [r7, #19]
 8016f6a:	697a      	ldr	r2, [r7, #20]
 8016f6c:	4613      	mov	r3, r2
 8016f6e:	00db      	lsls	r3, r3, #3
 8016f70:	4413      	add	r3, r2
 8016f72:	009b      	lsls	r3, r3, #2
 8016f74:	461a      	mov	r2, r3
 8016f76:	68bb      	ldr	r3, [r7, #8]
 8016f78:	4413      	add	r3, r2
 8016f7a:	6918      	ldr	r0, [r3, #16]
 8016f7c:	697a      	ldr	r2, [r7, #20]
 8016f7e:	4613      	mov	r3, r2
 8016f80:	00db      	lsls	r3, r3, #3
 8016f82:	4413      	add	r3, r2
 8016f84:	009b      	lsls	r3, r3, #2
 8016f86:	461a      	mov	r2, r3
 8016f88:	68bb      	ldr	r3, [r7, #8]
 8016f8a:	4413      	add	r3, r2
 8016f8c:	8c1b      	ldrh	r3, [r3, #32]
 8016f8e:	461c      	mov	r4, r3
 8016f90:	697a      	ldr	r2, [r7, #20]
 8016f92:	4613      	mov	r3, r2
 8016f94:	00db      	lsls	r3, r3, #3
 8016f96:	4413      	add	r3, r2
 8016f98:	009b      	lsls	r3, r3, #2
 8016f9a:	461a      	mov	r2, r3
 8016f9c:	68bb      	ldr	r3, [r7, #8]
 8016f9e:	4413      	add	r3, r2
 8016fa0:	689b      	ldr	r3, [r3, #8]
 8016fa2:	9301      	str	r3, [sp, #4]
 8016fa4:	9400      	str	r4, [sp, #0]
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	460a      	mov	r2, r1
 8016faa:	490d      	ldr	r1, [pc, #52]	@ (8016fe0 <vTaskList+0x128>)
 8016fac:	6878      	ldr	r0, [r7, #4]
 8016fae:	f002 fc73 	bl	8019898 <siprintf>
                pcWriteBuffer += strlen( pcWriteBuffer );                                                                                                                                                                                                /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8016fb2:	6878      	ldr	r0, [r7, #4]
 8016fb4:	f7f1 f98c 	bl	80082d0 <strlen>
 8016fb8:	4602      	mov	r2, r0
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	4413      	add	r3, r2
 8016fbe:	607b      	str	r3, [r7, #4]
            for( x = 0; x < uxArraySize; x++ )
 8016fc0:	697b      	ldr	r3, [r7, #20]
 8016fc2:	3301      	adds	r3, #1
 8016fc4:	617b      	str	r3, [r7, #20]
 8016fc6:	697a      	ldr	r2, [r7, #20]
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	429a      	cmp	r2, r3
 8016fcc:	d394      	bcc.n	8016ef8 <vTaskList+0x40>
            }

            /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
             * is 0 then vPortFree() will be #defined to nothing. */
            vPortFree( pxTaskStatusArray );
 8016fce:	68b8      	ldr	r0, [r7, #8]
 8016fd0:	f000 fee0 	bl	8017d94 <vPortFree>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8016fd4:	bf00      	nop
 8016fd6:	371c      	adds	r7, #28
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bd90      	pop	{r4, r7, pc}
 8016fdc:	20001670 	.word	0x20001670
 8016fe0:	0801d630 	.word	0x0801d630

08016fe4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8016fe4:	b480      	push	{r7}
 8016fe6:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8016fe8:	4b07      	ldr	r3, [pc, #28]	@ (8017008 <pvTaskIncrementMutexHeldCount+0x24>)
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d004      	beq.n	8016ffa <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8016ff0:	4b05      	ldr	r3, [pc, #20]	@ (8017008 <pvTaskIncrementMutexHeldCount+0x24>)
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016ff6:	3201      	adds	r2, #1
 8016ff8:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 8016ffa:	4b03      	ldr	r3, [pc, #12]	@ (8017008 <pvTaskIncrementMutexHeldCount+0x24>)
 8016ffc:	681b      	ldr	r3, [r3, #0]
    }
 8016ffe:	4618      	mov	r0, r3
 8017000:	46bd      	mov	sp, r7
 8017002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017006:	4770      	bx	lr
 8017008:	20001598 	.word	0x20001598

0801700c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 801700c:	b580      	push	{r7, lr}
 801700e:	b084      	sub	sp, #16
 8017010:	af00      	add	r7, sp, #0
 8017012:	6078      	str	r0, [r7, #4]
 8017014:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8017016:	4b29      	ldr	r3, [pc, #164]	@ (80170bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801701c:	4b28      	ldr	r3, [pc, #160]	@ (80170c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	3304      	adds	r3, #4
 8017022:	4618      	mov	r0, r3
 8017024:	f7fd ff7a 	bl	8014f1c <uxListRemove>
 8017028:	4603      	mov	r3, r0
 801702a:	2b00      	cmp	r3, #0
 801702c:	d10b      	bne.n	8017046 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801702e:	4b24      	ldr	r3, [pc, #144]	@ (80170c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017034:	2201      	movs	r2, #1
 8017036:	fa02 f303 	lsl.w	r3, r2, r3
 801703a:	43da      	mvns	r2, r3
 801703c:	4b21      	ldr	r3, [pc, #132]	@ (80170c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	4013      	ands	r3, r2
 8017042:	4a20      	ldr	r2, [pc, #128]	@ (80170c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8017044:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	f1b3 3fff 	cmp.w	r3, #4294967295
 801704c:	d10a      	bne.n	8017064 <prvAddCurrentTaskToDelayedList+0x58>
 801704e:	683b      	ldr	r3, [r7, #0]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d007      	beq.n	8017064 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017054:	4b1a      	ldr	r3, [pc, #104]	@ (80170c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	3304      	adds	r3, #4
 801705a:	4619      	mov	r1, r3
 801705c:	481a      	ldr	r0, [pc, #104]	@ (80170c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801705e:	f7fd ff00 	bl	8014e62 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8017062:	e026      	b.n	80170b2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8017064:	68fa      	ldr	r2, [r7, #12]
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	4413      	add	r3, r2
 801706a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801706c:	4b14      	ldr	r3, [pc, #80]	@ (80170c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	68ba      	ldr	r2, [r7, #8]
 8017072:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8017074:	68ba      	ldr	r2, [r7, #8]
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	429a      	cmp	r2, r3
 801707a:	d209      	bcs.n	8017090 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801707c:	4b13      	ldr	r3, [pc, #76]	@ (80170cc <prvAddCurrentTaskToDelayedList+0xc0>)
 801707e:	681a      	ldr	r2, [r3, #0]
 8017080:	4b0f      	ldr	r3, [pc, #60]	@ (80170c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	3304      	adds	r3, #4
 8017086:	4619      	mov	r1, r3
 8017088:	4610      	mov	r0, r2
 801708a:	f7fd ff0e 	bl	8014eaa <vListInsert>
}
 801708e:	e010      	b.n	80170b2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017090:	4b0f      	ldr	r3, [pc, #60]	@ (80170d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8017092:	681a      	ldr	r2, [r3, #0]
 8017094:	4b0a      	ldr	r3, [pc, #40]	@ (80170c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	3304      	adds	r3, #4
 801709a:	4619      	mov	r1, r3
 801709c:	4610      	mov	r0, r2
 801709e:	f7fd ff04 	bl	8014eaa <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80170a2:	4b0c      	ldr	r3, [pc, #48]	@ (80170d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	68ba      	ldr	r2, [r7, #8]
 80170a8:	429a      	cmp	r2, r3
 80170aa:	d202      	bcs.n	80170b2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80170ac:	4a09      	ldr	r2, [pc, #36]	@ (80170d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80170ae:	68bb      	ldr	r3, [r7, #8]
 80170b0:	6013      	str	r3, [r2, #0]
}
 80170b2:	bf00      	nop
 80170b4:	3710      	adds	r7, #16
 80170b6:	46bd      	mov	sp, r7
 80170b8:	bd80      	pop	{r7, pc}
 80170ba:	bf00      	nop
 80170bc:	20001674 	.word	0x20001674
 80170c0:	20001598 	.word	0x20001598
 80170c4:	20001678 	.word	0x20001678
 80170c8:	2000165c 	.word	0x2000165c
 80170cc:	2000162c 	.word	0x2000162c
 80170d0:	20001628 	.word	0x20001628
 80170d4:	20001690 	.word	0x20001690

080170d8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80170d8:	b580      	push	{r7, lr}
 80170da:	b084      	sub	sp, #16
 80170dc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80170de:	2300      	movs	r3, #0
 80170e0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80170e2:	f000 fae1 	bl	80176a8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80170e6:	4b12      	ldr	r3, [pc, #72]	@ (8017130 <xTimerCreateTimerTask+0x58>)
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d00b      	beq.n	8017106 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80170ee:	4b11      	ldr	r3, [pc, #68]	@ (8017134 <xTimerCreateTimerTask+0x5c>)
 80170f0:	9301      	str	r3, [sp, #4]
 80170f2:	2302      	movs	r3, #2
 80170f4:	9300      	str	r3, [sp, #0]
 80170f6:	2300      	movs	r3, #0
 80170f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80170fc:	490e      	ldr	r1, [pc, #56]	@ (8017138 <xTimerCreateTimerTask+0x60>)
 80170fe:	480f      	ldr	r0, [pc, #60]	@ (801713c <xTimerCreateTimerTask+0x64>)
 8017100:	f7fe fd80 	bl	8015c04 <xTaskCreate>
 8017104:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d10b      	bne.n	8017124 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 801710c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017110:	f383 8811 	msr	BASEPRI, r3
 8017114:	f3bf 8f6f 	isb	sy
 8017118:	f3bf 8f4f 	dsb	sy
 801711c:	603b      	str	r3, [r7, #0]
    }
 801711e:	bf00      	nop
 8017120:	bf00      	nop
 8017122:	e7fd      	b.n	8017120 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8017124:	687b      	ldr	r3, [r7, #4]
    }
 8017126:	4618      	mov	r0, r3
 8017128:	3708      	adds	r7, #8
 801712a:	46bd      	mov	sp, r7
 801712c:	bd80      	pop	{r7, pc}
 801712e:	bf00      	nop
 8017130:	200016cc 	.word	0x200016cc
 8017134:	200016d0 	.word	0x200016d0
 8017138:	0801d640 	.word	0x0801d640
 801713c:	08017279 	.word	0x08017279

08017140 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8017140:	b580      	push	{r7, lr}
 8017142:	b08a      	sub	sp, #40	@ 0x28
 8017144:	af00      	add	r7, sp, #0
 8017146:	60f8      	str	r0, [r7, #12]
 8017148:	60b9      	str	r1, [r7, #8]
 801714a:	607a      	str	r2, [r7, #4]
 801714c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 801714e:	2300      	movs	r3, #0
 8017150:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d10b      	bne.n	8017170 <xTimerGenericCommand+0x30>
        __asm volatile
 8017158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801715c:	f383 8811 	msr	BASEPRI, r3
 8017160:	f3bf 8f6f 	isb	sy
 8017164:	f3bf 8f4f 	dsb	sy
 8017168:	623b      	str	r3, [r7, #32]
    }
 801716a:	bf00      	nop
 801716c:	bf00      	nop
 801716e:	e7fd      	b.n	801716c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8017170:	4b19      	ldr	r3, [pc, #100]	@ (80171d8 <xTimerGenericCommand+0x98>)
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d02a      	beq.n	80171ce <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017184:	68bb      	ldr	r3, [r7, #8]
 8017186:	2b05      	cmp	r3, #5
 8017188:	dc18      	bgt.n	80171bc <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801718a:	f7ff fccf 	bl	8016b2c <xTaskGetSchedulerState>
 801718e:	4603      	mov	r3, r0
 8017190:	2b02      	cmp	r3, #2
 8017192:	d109      	bne.n	80171a8 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017194:	4b10      	ldr	r3, [pc, #64]	@ (80171d8 <xTimerGenericCommand+0x98>)
 8017196:	6818      	ldr	r0, [r3, #0]
 8017198:	f107 0114 	add.w	r1, r7, #20
 801719c:	2300      	movs	r3, #0
 801719e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80171a0:	f7fe f808 	bl	80151b4 <xQueueGenericSend>
 80171a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80171a6:	e012      	b.n	80171ce <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80171a8:	4b0b      	ldr	r3, [pc, #44]	@ (80171d8 <xTimerGenericCommand+0x98>)
 80171aa:	6818      	ldr	r0, [r3, #0]
 80171ac:	f107 0114 	add.w	r1, r7, #20
 80171b0:	2300      	movs	r3, #0
 80171b2:	2200      	movs	r2, #0
 80171b4:	f7fd fffe 	bl	80151b4 <xQueueGenericSend>
 80171b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80171ba:	e008      	b.n	80171ce <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80171bc:	4b06      	ldr	r3, [pc, #24]	@ (80171d8 <xTimerGenericCommand+0x98>)
 80171be:	6818      	ldr	r0, [r3, #0]
 80171c0:	f107 0114 	add.w	r1, r7, #20
 80171c4:	2300      	movs	r3, #0
 80171c6:	683a      	ldr	r2, [r7, #0]
 80171c8:	f7fe f8f6 	bl	80153b8 <xQueueGenericSendFromISR>
 80171cc:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80171ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80171d0:	4618      	mov	r0, r3
 80171d2:	3728      	adds	r7, #40	@ 0x28
 80171d4:	46bd      	mov	sp, r7
 80171d6:	bd80      	pop	{r7, pc}
 80171d8:	200016cc 	.word	0x200016cc

080171dc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80171dc:	b580      	push	{r7, lr}
 80171de:	b088      	sub	sp, #32
 80171e0:	af02      	add	r7, sp, #8
 80171e2:	6078      	str	r0, [r7, #4]
 80171e4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80171e6:	4b23      	ldr	r3, [pc, #140]	@ (8017274 <prvProcessExpiredTimer+0x98>)
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	68db      	ldr	r3, [r3, #12]
 80171ec:	68db      	ldr	r3, [r3, #12]
 80171ee:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80171f0:	697b      	ldr	r3, [r7, #20]
 80171f2:	3304      	adds	r3, #4
 80171f4:	4618      	mov	r0, r3
 80171f6:	f7fd fe91 	bl	8014f1c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80171fa:	697b      	ldr	r3, [r7, #20]
 80171fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017200:	f003 0304 	and.w	r3, r3, #4
 8017204:	2b00      	cmp	r3, #0
 8017206:	d023      	beq.n	8017250 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017208:	697b      	ldr	r3, [r7, #20]
 801720a:	699a      	ldr	r2, [r3, #24]
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	18d1      	adds	r1, r2, r3
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	683a      	ldr	r2, [r7, #0]
 8017214:	6978      	ldr	r0, [r7, #20]
 8017216:	f000 f8d5 	bl	80173c4 <prvInsertTimerInActiveList>
 801721a:	4603      	mov	r3, r0
 801721c:	2b00      	cmp	r3, #0
 801721e:	d020      	beq.n	8017262 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017220:	2300      	movs	r3, #0
 8017222:	9300      	str	r3, [sp, #0]
 8017224:	2300      	movs	r3, #0
 8017226:	687a      	ldr	r2, [r7, #4]
 8017228:	2100      	movs	r1, #0
 801722a:	6978      	ldr	r0, [r7, #20]
 801722c:	f7ff ff88 	bl	8017140 <xTimerGenericCommand>
 8017230:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8017232:	693b      	ldr	r3, [r7, #16]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d114      	bne.n	8017262 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8017238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801723c:	f383 8811 	msr	BASEPRI, r3
 8017240:	f3bf 8f6f 	isb	sy
 8017244:	f3bf 8f4f 	dsb	sy
 8017248:	60fb      	str	r3, [r7, #12]
    }
 801724a:	bf00      	nop
 801724c:	bf00      	nop
 801724e:	e7fd      	b.n	801724c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017250:	697b      	ldr	r3, [r7, #20]
 8017252:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017256:	f023 0301 	bic.w	r3, r3, #1
 801725a:	b2da      	uxtb	r2, r3
 801725c:	697b      	ldr	r3, [r7, #20]
 801725e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017262:	697b      	ldr	r3, [r7, #20]
 8017264:	6a1b      	ldr	r3, [r3, #32]
 8017266:	6978      	ldr	r0, [r7, #20]
 8017268:	4798      	blx	r3
    }
 801726a:	bf00      	nop
 801726c:	3718      	adds	r7, #24
 801726e:	46bd      	mov	sp, r7
 8017270:	bd80      	pop	{r7, pc}
 8017272:	bf00      	nop
 8017274:	200016c4 	.word	0x200016c4

08017278 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8017278:	b580      	push	{r7, lr}
 801727a:	b084      	sub	sp, #16
 801727c:	af00      	add	r7, sp, #0
 801727e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017280:	f107 0308 	add.w	r3, r7, #8
 8017284:	4618      	mov	r0, r3
 8017286:	f000 f859 	bl	801733c <prvGetNextExpireTime>
 801728a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801728c:	68bb      	ldr	r3, [r7, #8]
 801728e:	4619      	mov	r1, r3
 8017290:	68f8      	ldr	r0, [r7, #12]
 8017292:	f000 f805 	bl	80172a0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8017296:	f000 f8d7 	bl	8017448 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801729a:	bf00      	nop
 801729c:	e7f0      	b.n	8017280 <prvTimerTask+0x8>
	...

080172a0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b084      	sub	sp, #16
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	6078      	str	r0, [r7, #4]
 80172a8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80172aa:	f7fe fef3 	bl	8016094 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80172ae:	f107 0308 	add.w	r3, r7, #8
 80172b2:	4618      	mov	r0, r3
 80172b4:	f000 f866 	bl	8017384 <prvSampleTimeNow>
 80172b8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80172ba:	68bb      	ldr	r3, [r7, #8]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d130      	bne.n	8017322 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80172c0:	683b      	ldr	r3, [r7, #0]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d10a      	bne.n	80172dc <prvProcessTimerOrBlockTask+0x3c>
 80172c6:	687a      	ldr	r2, [r7, #4]
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	429a      	cmp	r2, r3
 80172cc:	d806      	bhi.n	80172dc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80172ce:	f7fe feef 	bl	80160b0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80172d2:	68f9      	ldr	r1, [r7, #12]
 80172d4:	6878      	ldr	r0, [r7, #4]
 80172d6:	f7ff ff81 	bl	80171dc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80172da:	e024      	b.n	8017326 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80172dc:	683b      	ldr	r3, [r7, #0]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d008      	beq.n	80172f4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80172e2:	4b13      	ldr	r3, [pc, #76]	@ (8017330 <prvProcessTimerOrBlockTask+0x90>)
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d101      	bne.n	80172f0 <prvProcessTimerOrBlockTask+0x50>
 80172ec:	2301      	movs	r3, #1
 80172ee:	e000      	b.n	80172f2 <prvProcessTimerOrBlockTask+0x52>
 80172f0:	2300      	movs	r3, #0
 80172f2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80172f4:	4b0f      	ldr	r3, [pc, #60]	@ (8017334 <prvProcessTimerOrBlockTask+0x94>)
 80172f6:	6818      	ldr	r0, [r3, #0]
 80172f8:	687a      	ldr	r2, [r7, #4]
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	1ad3      	subs	r3, r2, r3
 80172fe:	683a      	ldr	r2, [r7, #0]
 8017300:	4619      	mov	r1, r3
 8017302:	f7fe fc4b 	bl	8015b9c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8017306:	f7fe fed3 	bl	80160b0 <xTaskResumeAll>
 801730a:	4603      	mov	r3, r0
 801730c:	2b00      	cmp	r3, #0
 801730e:	d10a      	bne.n	8017326 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8017310:	4b09      	ldr	r3, [pc, #36]	@ (8017338 <prvProcessTimerOrBlockTask+0x98>)
 8017312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017316:	601a      	str	r2, [r3, #0]
 8017318:	f3bf 8f4f 	dsb	sy
 801731c:	f3bf 8f6f 	isb	sy
    }
 8017320:	e001      	b.n	8017326 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8017322:	f7fe fec5 	bl	80160b0 <xTaskResumeAll>
    }
 8017326:	bf00      	nop
 8017328:	3710      	adds	r7, #16
 801732a:	46bd      	mov	sp, r7
 801732c:	bd80      	pop	{r7, pc}
 801732e:	bf00      	nop
 8017330:	200016c8 	.word	0x200016c8
 8017334:	200016cc 	.word	0x200016cc
 8017338:	e000ed04 	.word	0xe000ed04

0801733c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 801733c:	b480      	push	{r7}
 801733e:	b085      	sub	sp, #20
 8017340:	af00      	add	r7, sp, #0
 8017342:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017344:	4b0e      	ldr	r3, [pc, #56]	@ (8017380 <prvGetNextExpireTime+0x44>)
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d101      	bne.n	8017352 <prvGetNextExpireTime+0x16>
 801734e:	2201      	movs	r2, #1
 8017350:	e000      	b.n	8017354 <prvGetNextExpireTime+0x18>
 8017352:	2200      	movs	r2, #0
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d105      	bne.n	801736c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017360:	4b07      	ldr	r3, [pc, #28]	@ (8017380 <prvGetNextExpireTime+0x44>)
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	68db      	ldr	r3, [r3, #12]
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	60fb      	str	r3, [r7, #12]
 801736a:	e001      	b.n	8017370 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 801736c:	2300      	movs	r3, #0
 801736e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8017370:	68fb      	ldr	r3, [r7, #12]
    }
 8017372:	4618      	mov	r0, r3
 8017374:	3714      	adds	r7, #20
 8017376:	46bd      	mov	sp, r7
 8017378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801737c:	4770      	bx	lr
 801737e:	bf00      	nop
 8017380:	200016c4 	.word	0x200016c4

08017384 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8017384:	b580      	push	{r7, lr}
 8017386:	b084      	sub	sp, #16
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 801738c:	f7fe ff2e 	bl	80161ec <xTaskGetTickCount>
 8017390:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8017392:	4b0b      	ldr	r3, [pc, #44]	@ (80173c0 <prvSampleTimeNow+0x3c>)
 8017394:	681b      	ldr	r3, [r3, #0]
 8017396:	68fa      	ldr	r2, [r7, #12]
 8017398:	429a      	cmp	r2, r3
 801739a:	d205      	bcs.n	80173a8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 801739c:	f000 f91e 	bl	80175dc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	2201      	movs	r2, #1
 80173a4:	601a      	str	r2, [r3, #0]
 80173a6:	e002      	b.n	80173ae <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	2200      	movs	r2, #0
 80173ac:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80173ae:	4a04      	ldr	r2, [pc, #16]	@ (80173c0 <prvSampleTimeNow+0x3c>)
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80173b4:	68fb      	ldr	r3, [r7, #12]
    }
 80173b6:	4618      	mov	r0, r3
 80173b8:	3710      	adds	r7, #16
 80173ba:	46bd      	mov	sp, r7
 80173bc:	bd80      	pop	{r7, pc}
 80173be:	bf00      	nop
 80173c0:	200016d4 	.word	0x200016d4

080173c4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80173c4:	b580      	push	{r7, lr}
 80173c6:	b086      	sub	sp, #24
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	60f8      	str	r0, [r7, #12]
 80173cc:	60b9      	str	r1, [r7, #8]
 80173ce:	607a      	str	r2, [r7, #4]
 80173d0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80173d2:	2300      	movs	r3, #0
 80173d4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	68ba      	ldr	r2, [r7, #8]
 80173da:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	68fa      	ldr	r2, [r7, #12]
 80173e0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80173e2:	68ba      	ldr	r2, [r7, #8]
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	429a      	cmp	r2, r3
 80173e8:	d812      	bhi.n	8017410 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80173ea:	687a      	ldr	r2, [r7, #4]
 80173ec:	683b      	ldr	r3, [r7, #0]
 80173ee:	1ad2      	subs	r2, r2, r3
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	699b      	ldr	r3, [r3, #24]
 80173f4:	429a      	cmp	r2, r3
 80173f6:	d302      	bcc.n	80173fe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80173f8:	2301      	movs	r3, #1
 80173fa:	617b      	str	r3, [r7, #20]
 80173fc:	e01b      	b.n	8017436 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80173fe:	4b10      	ldr	r3, [pc, #64]	@ (8017440 <prvInsertTimerInActiveList+0x7c>)
 8017400:	681a      	ldr	r2, [r3, #0]
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	3304      	adds	r3, #4
 8017406:	4619      	mov	r1, r3
 8017408:	4610      	mov	r0, r2
 801740a:	f7fd fd4e 	bl	8014eaa <vListInsert>
 801740e:	e012      	b.n	8017436 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017410:	687a      	ldr	r2, [r7, #4]
 8017412:	683b      	ldr	r3, [r7, #0]
 8017414:	429a      	cmp	r2, r3
 8017416:	d206      	bcs.n	8017426 <prvInsertTimerInActiveList+0x62>
 8017418:	68ba      	ldr	r2, [r7, #8]
 801741a:	683b      	ldr	r3, [r7, #0]
 801741c:	429a      	cmp	r2, r3
 801741e:	d302      	bcc.n	8017426 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8017420:	2301      	movs	r3, #1
 8017422:	617b      	str	r3, [r7, #20]
 8017424:	e007      	b.n	8017436 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017426:	4b07      	ldr	r3, [pc, #28]	@ (8017444 <prvInsertTimerInActiveList+0x80>)
 8017428:	681a      	ldr	r2, [r3, #0]
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	3304      	adds	r3, #4
 801742e:	4619      	mov	r1, r3
 8017430:	4610      	mov	r0, r2
 8017432:	f7fd fd3a 	bl	8014eaa <vListInsert>
            }
        }

        return xProcessTimerNow;
 8017436:	697b      	ldr	r3, [r7, #20]
    }
 8017438:	4618      	mov	r0, r3
 801743a:	3718      	adds	r7, #24
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}
 8017440:	200016c8 	.word	0x200016c8
 8017444:	200016c4 	.word	0x200016c4

08017448 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8017448:	b580      	push	{r7, lr}
 801744a:	b08c      	sub	sp, #48	@ 0x30
 801744c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801744e:	e0b2      	b.n	80175b6 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017450:	68bb      	ldr	r3, [r7, #8]
 8017452:	2b00      	cmp	r3, #0
 8017454:	f2c0 80af 	blt.w	80175b6 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017458:	693b      	ldr	r3, [r7, #16]
 801745a:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801745e:	695b      	ldr	r3, [r3, #20]
 8017460:	2b00      	cmp	r3, #0
 8017462:	d004      	beq.n	801746e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017466:	3304      	adds	r3, #4
 8017468:	4618      	mov	r0, r3
 801746a:	f7fd fd57 	bl	8014f1c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801746e:	1d3b      	adds	r3, r7, #4
 8017470:	4618      	mov	r0, r3
 8017472:	f7ff ff87 	bl	8017384 <prvSampleTimeNow>
 8017476:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8017478:	68bb      	ldr	r3, [r7, #8]
 801747a:	2b09      	cmp	r3, #9
 801747c:	f200 8098 	bhi.w	80175b0 <prvProcessReceivedCommands+0x168>
 8017480:	a201      	add	r2, pc, #4	@ (adr r2, 8017488 <prvProcessReceivedCommands+0x40>)
 8017482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017486:	bf00      	nop
 8017488:	080174b1 	.word	0x080174b1
 801748c:	080174b1 	.word	0x080174b1
 8017490:	080174b1 	.word	0x080174b1
 8017494:	08017527 	.word	0x08017527
 8017498:	0801753b 	.word	0x0801753b
 801749c:	08017587 	.word	0x08017587
 80174a0:	080174b1 	.word	0x080174b1
 80174a4:	080174b1 	.word	0x080174b1
 80174a8:	08017527 	.word	0x08017527
 80174ac:	0801753b 	.word	0x0801753b
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80174b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80174b6:	f043 0301 	orr.w	r3, r3, #1
 80174ba:	b2da      	uxtb	r2, r3
 80174bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80174c2:	68fa      	ldr	r2, [r7, #12]
 80174c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174c6:	699b      	ldr	r3, [r3, #24]
 80174c8:	18d1      	adds	r1, r2, r3
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	6a3a      	ldr	r2, [r7, #32]
 80174ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80174d0:	f7ff ff78 	bl	80173c4 <prvInsertTimerInActiveList>
 80174d4:	4603      	mov	r3, r0
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d06c      	beq.n	80175b4 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80174da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174dc:	6a1b      	ldr	r3, [r3, #32]
 80174de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80174e0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80174e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80174e8:	f003 0304 	and.w	r3, r3, #4
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d061      	beq.n	80175b4 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80174f0:	68fa      	ldr	r2, [r7, #12]
 80174f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174f4:	699b      	ldr	r3, [r3, #24]
 80174f6:	441a      	add	r2, r3
 80174f8:	2300      	movs	r3, #0
 80174fa:	9300      	str	r3, [sp, #0]
 80174fc:	2300      	movs	r3, #0
 80174fe:	2100      	movs	r1, #0
 8017500:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017502:	f7ff fe1d 	bl	8017140 <xTimerGenericCommand>
 8017506:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8017508:	69fb      	ldr	r3, [r7, #28]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d152      	bne.n	80175b4 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 801750e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017512:	f383 8811 	msr	BASEPRI, r3
 8017516:	f3bf 8f6f 	isb	sy
 801751a:	f3bf 8f4f 	dsb	sy
 801751e:	61bb      	str	r3, [r7, #24]
    }
 8017520:	bf00      	nop
 8017522:	bf00      	nop
 8017524:	e7fd      	b.n	8017522 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017528:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801752c:	f023 0301 	bic.w	r3, r3, #1
 8017530:	b2da      	uxtb	r2, r3
 8017532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017534:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8017538:	e03d      	b.n	80175b6 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801753a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801753c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017540:	f043 0301 	orr.w	r3, r3, #1
 8017544:	b2da      	uxtb	r2, r3
 8017546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017548:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801754c:	68fa      	ldr	r2, [r7, #12]
 801754e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017550:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017554:	699b      	ldr	r3, [r3, #24]
 8017556:	2b00      	cmp	r3, #0
 8017558:	d10b      	bne.n	8017572 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 801755a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801755e:	f383 8811 	msr	BASEPRI, r3
 8017562:	f3bf 8f6f 	isb	sy
 8017566:	f3bf 8f4f 	dsb	sy
 801756a:	617b      	str	r3, [r7, #20]
    }
 801756c:	bf00      	nop
 801756e:	bf00      	nop
 8017570:	e7fd      	b.n	801756e <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017574:	699a      	ldr	r2, [r3, #24]
 8017576:	6a3b      	ldr	r3, [r7, #32]
 8017578:	18d1      	adds	r1, r2, r3
 801757a:	6a3b      	ldr	r3, [r7, #32]
 801757c:	6a3a      	ldr	r2, [r7, #32]
 801757e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017580:	f7ff ff20 	bl	80173c4 <prvInsertTimerInActiveList>
                        break;
 8017584:	e017      	b.n	80175b6 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017588:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801758c:	f003 0302 	and.w	r3, r3, #2
 8017590:	2b00      	cmp	r3, #0
 8017592:	d103      	bne.n	801759c <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8017594:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017596:	f000 fbfd 	bl	8017d94 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 801759a:	e00c      	b.n	80175b6 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801759c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801759e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80175a2:	f023 0301 	bic.w	r3, r3, #1
 80175a6:	b2da      	uxtb	r2, r3
 80175a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80175ae:	e002      	b.n	80175b6 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 80175b0:	bf00      	nop
 80175b2:	e000      	b.n	80175b6 <prvProcessReceivedCommands+0x16e>
                        break;
 80175b4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80175b6:	4b08      	ldr	r3, [pc, #32]	@ (80175d8 <prvProcessReceivedCommands+0x190>)
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	f107 0108 	add.w	r1, r7, #8
 80175be:	2200      	movs	r2, #0
 80175c0:	4618      	mov	r0, r3
 80175c2:	f7fd ffa7 	bl	8015514 <xQueueReceive>
 80175c6:	4603      	mov	r3, r0
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	f47f af41 	bne.w	8017450 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80175ce:	bf00      	nop
 80175d0:	bf00      	nop
 80175d2:	3728      	adds	r7, #40	@ 0x28
 80175d4:	46bd      	mov	sp, r7
 80175d6:	bd80      	pop	{r7, pc}
 80175d8:	200016cc 	.word	0x200016cc

080175dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80175dc:	b580      	push	{r7, lr}
 80175de:	b088      	sub	sp, #32
 80175e0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80175e2:	e049      	b.n	8017678 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80175e4:	4b2e      	ldr	r3, [pc, #184]	@ (80176a0 <prvSwitchTimerLists+0xc4>)
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	68db      	ldr	r3, [r3, #12]
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80175ee:	4b2c      	ldr	r3, [pc, #176]	@ (80176a0 <prvSwitchTimerLists+0xc4>)
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	68db      	ldr	r3, [r3, #12]
 80175f4:	68db      	ldr	r3, [r3, #12]
 80175f6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	3304      	adds	r3, #4
 80175fc:	4618      	mov	r0, r3
 80175fe:	f7fd fc8d 	bl	8014f1c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	6a1b      	ldr	r3, [r3, #32]
 8017606:	68f8      	ldr	r0, [r7, #12]
 8017608:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017610:	f003 0304 	and.w	r3, r3, #4
 8017614:	2b00      	cmp	r3, #0
 8017616:	d02f      	beq.n	8017678 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	699b      	ldr	r3, [r3, #24]
 801761c:	693a      	ldr	r2, [r7, #16]
 801761e:	4413      	add	r3, r2
 8017620:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8017622:	68ba      	ldr	r2, [r7, #8]
 8017624:	693b      	ldr	r3, [r7, #16]
 8017626:	429a      	cmp	r2, r3
 8017628:	d90e      	bls.n	8017648 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	68ba      	ldr	r2, [r7, #8]
 801762e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	68fa      	ldr	r2, [r7, #12]
 8017634:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017636:	4b1a      	ldr	r3, [pc, #104]	@ (80176a0 <prvSwitchTimerLists+0xc4>)
 8017638:	681a      	ldr	r2, [r3, #0]
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	3304      	adds	r3, #4
 801763e:	4619      	mov	r1, r3
 8017640:	4610      	mov	r0, r2
 8017642:	f7fd fc32 	bl	8014eaa <vListInsert>
 8017646:	e017      	b.n	8017678 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017648:	2300      	movs	r3, #0
 801764a:	9300      	str	r3, [sp, #0]
 801764c:	2300      	movs	r3, #0
 801764e:	693a      	ldr	r2, [r7, #16]
 8017650:	2100      	movs	r1, #0
 8017652:	68f8      	ldr	r0, [r7, #12]
 8017654:	f7ff fd74 	bl	8017140 <xTimerGenericCommand>
 8017658:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d10b      	bne.n	8017678 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8017660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017664:	f383 8811 	msr	BASEPRI, r3
 8017668:	f3bf 8f6f 	isb	sy
 801766c:	f3bf 8f4f 	dsb	sy
 8017670:	603b      	str	r3, [r7, #0]
    }
 8017672:	bf00      	nop
 8017674:	bf00      	nop
 8017676:	e7fd      	b.n	8017674 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017678:	4b09      	ldr	r3, [pc, #36]	@ (80176a0 <prvSwitchTimerLists+0xc4>)
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d1b0      	bne.n	80175e4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8017682:	4b07      	ldr	r3, [pc, #28]	@ (80176a0 <prvSwitchTimerLists+0xc4>)
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8017688:	4b06      	ldr	r3, [pc, #24]	@ (80176a4 <prvSwitchTimerLists+0xc8>)
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	4a04      	ldr	r2, [pc, #16]	@ (80176a0 <prvSwitchTimerLists+0xc4>)
 801768e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8017690:	4a04      	ldr	r2, [pc, #16]	@ (80176a4 <prvSwitchTimerLists+0xc8>)
 8017692:	697b      	ldr	r3, [r7, #20]
 8017694:	6013      	str	r3, [r2, #0]
    }
 8017696:	bf00      	nop
 8017698:	3718      	adds	r7, #24
 801769a:	46bd      	mov	sp, r7
 801769c:	bd80      	pop	{r7, pc}
 801769e:	bf00      	nop
 80176a0:	200016c4 	.word	0x200016c4
 80176a4:	200016c8 	.word	0x200016c8

080176a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80176a8:	b580      	push	{r7, lr}
 80176aa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80176ac:	f000 f966 	bl	801797c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80176b0:	4b12      	ldr	r3, [pc, #72]	@ (80176fc <prvCheckForValidListAndQueue+0x54>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d11d      	bne.n	80176f4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80176b8:	4811      	ldr	r0, [pc, #68]	@ (8017700 <prvCheckForValidListAndQueue+0x58>)
 80176ba:	f7fd fba5 	bl	8014e08 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80176be:	4811      	ldr	r0, [pc, #68]	@ (8017704 <prvCheckForValidListAndQueue+0x5c>)
 80176c0:	f7fd fba2 	bl	8014e08 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80176c4:	4b10      	ldr	r3, [pc, #64]	@ (8017708 <prvCheckForValidListAndQueue+0x60>)
 80176c6:	4a0e      	ldr	r2, [pc, #56]	@ (8017700 <prvCheckForValidListAndQueue+0x58>)
 80176c8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80176ca:	4b10      	ldr	r3, [pc, #64]	@ (801770c <prvCheckForValidListAndQueue+0x64>)
 80176cc:	4a0d      	ldr	r2, [pc, #52]	@ (8017704 <prvCheckForValidListAndQueue+0x5c>)
 80176ce:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80176d0:	2200      	movs	r2, #0
 80176d2:	210c      	movs	r1, #12
 80176d4:	200a      	movs	r0, #10
 80176d6:	f7fd fcb5 	bl	8015044 <xQueueGenericCreate>
 80176da:	4603      	mov	r3, r0
 80176dc:	4a07      	ldr	r2, [pc, #28]	@ (80176fc <prvCheckForValidListAndQueue+0x54>)
 80176de:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80176e0:	4b06      	ldr	r3, [pc, #24]	@ (80176fc <prvCheckForValidListAndQueue+0x54>)
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d005      	beq.n	80176f4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80176e8:	4b04      	ldr	r3, [pc, #16]	@ (80176fc <prvCheckForValidListAndQueue+0x54>)
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	4908      	ldr	r1, [pc, #32]	@ (8017710 <prvCheckForValidListAndQueue+0x68>)
 80176ee:	4618      	mov	r0, r3
 80176f0:	f7fe fa2a 	bl	8015b48 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80176f4:	f000 f974 	bl	80179e0 <vPortExitCritical>
    }
 80176f8:	bf00      	nop
 80176fa:	bd80      	pop	{r7, pc}
 80176fc:	200016cc 	.word	0x200016cc
 8017700:	2000169c 	.word	0x2000169c
 8017704:	200016b0 	.word	0x200016b0
 8017708:	200016c4 	.word	0x200016c4
 801770c:	200016c8 	.word	0x200016c8
 8017710:	0801d648 	.word	0x0801d648

08017714 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8017714:	b480      	push	{r7}
 8017716:	b085      	sub	sp, #20
 8017718:	af00      	add	r7, sp, #0
 801771a:	60f8      	str	r0, [r7, #12]
 801771c:	60b9      	str	r1, [r7, #8]
 801771e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	3b04      	subs	r3, #4
 8017724:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801772c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	3b04      	subs	r3, #4
 8017732:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8017734:	68bb      	ldr	r3, [r7, #8]
 8017736:	f023 0201 	bic.w	r2, r3, #1
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	3b04      	subs	r3, #4
 8017742:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8017744:	4a0c      	ldr	r2, [pc, #48]	@ (8017778 <pxPortInitialiseStack+0x64>)
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	3b14      	subs	r3, #20
 801774e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8017750:	687a      	ldr	r2, [r7, #4]
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	3b04      	subs	r3, #4
 801775a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	f06f 0202 	mvn.w	r2, #2
 8017762:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	3b20      	subs	r3, #32
 8017768:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 801776a:	68fb      	ldr	r3, [r7, #12]
}
 801776c:	4618      	mov	r0, r3
 801776e:	3714      	adds	r7, #20
 8017770:	46bd      	mov	sp, r7
 8017772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017776:	4770      	bx	lr
 8017778:	0801777d 	.word	0x0801777d

0801777c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801777c:	b480      	push	{r7}
 801777e:	b085      	sub	sp, #20
 8017780:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8017782:	2300      	movs	r3, #0
 8017784:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8017786:	4b13      	ldr	r3, [pc, #76]	@ (80177d4 <prvTaskExitError+0x58>)
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801778e:	d00b      	beq.n	80177a8 <prvTaskExitError+0x2c>
        __asm volatile
 8017790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017794:	f383 8811 	msr	BASEPRI, r3
 8017798:	f3bf 8f6f 	isb	sy
 801779c:	f3bf 8f4f 	dsb	sy
 80177a0:	60fb      	str	r3, [r7, #12]
    }
 80177a2:	bf00      	nop
 80177a4:	bf00      	nop
 80177a6:	e7fd      	b.n	80177a4 <prvTaskExitError+0x28>
        __asm volatile
 80177a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80177ac:	f383 8811 	msr	BASEPRI, r3
 80177b0:	f3bf 8f6f 	isb	sy
 80177b4:	f3bf 8f4f 	dsb	sy
 80177b8:	60bb      	str	r3, [r7, #8]
    }
 80177ba:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80177bc:	bf00      	nop
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d0fc      	beq.n	80177be <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80177c4:	bf00      	nop
 80177c6:	bf00      	nop
 80177c8:	3714      	adds	r7, #20
 80177ca:	46bd      	mov	sp, r7
 80177cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d0:	4770      	bx	lr
 80177d2:	bf00      	nop
 80177d4:	20000098 	.word	0x20000098
	...

080177e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80177e0:	4b07      	ldr	r3, [pc, #28]	@ (8017800 <pxCurrentTCBConst2>)
 80177e2:	6819      	ldr	r1, [r3, #0]
 80177e4:	6808      	ldr	r0, [r1, #0]
 80177e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177ea:	f380 8809 	msr	PSP, r0
 80177ee:	f3bf 8f6f 	isb	sy
 80177f2:	f04f 0000 	mov.w	r0, #0
 80177f6:	f380 8811 	msr	BASEPRI, r0
 80177fa:	4770      	bx	lr
 80177fc:	f3af 8000 	nop.w

08017800 <pxCurrentTCBConst2>:
 8017800:	20001598 	.word	0x20001598
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8017804:	bf00      	nop
 8017806:	bf00      	nop

08017808 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8017808:	4808      	ldr	r0, [pc, #32]	@ (801782c <prvPortStartFirstTask+0x24>)
 801780a:	6800      	ldr	r0, [r0, #0]
 801780c:	6800      	ldr	r0, [r0, #0]
 801780e:	f380 8808 	msr	MSP, r0
 8017812:	f04f 0000 	mov.w	r0, #0
 8017816:	f380 8814 	msr	CONTROL, r0
 801781a:	b662      	cpsie	i
 801781c:	b661      	cpsie	f
 801781e:	f3bf 8f4f 	dsb	sy
 8017822:	f3bf 8f6f 	isb	sy
 8017826:	df00      	svc	0
 8017828:	bf00      	nop
 801782a:	0000      	.short	0x0000
 801782c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8017830:	bf00      	nop
 8017832:	bf00      	nop

08017834 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017834:	b580      	push	{r7, lr}
 8017836:	b086      	sub	sp, #24
 8017838:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801783a:	4b47      	ldr	r3, [pc, #284]	@ (8017958 <xPortStartScheduler+0x124>)
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	4a47      	ldr	r2, [pc, #284]	@ (801795c <xPortStartScheduler+0x128>)
 8017840:	4293      	cmp	r3, r2
 8017842:	d10b      	bne.n	801785c <xPortStartScheduler+0x28>
        __asm volatile
 8017844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017848:	f383 8811 	msr	BASEPRI, r3
 801784c:	f3bf 8f6f 	isb	sy
 8017850:	f3bf 8f4f 	dsb	sy
 8017854:	60fb      	str	r3, [r7, #12]
    }
 8017856:	bf00      	nop
 8017858:	bf00      	nop
 801785a:	e7fd      	b.n	8017858 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801785c:	4b3e      	ldr	r3, [pc, #248]	@ (8017958 <xPortStartScheduler+0x124>)
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	4a3f      	ldr	r2, [pc, #252]	@ (8017960 <xPortStartScheduler+0x12c>)
 8017862:	4293      	cmp	r3, r2
 8017864:	d10b      	bne.n	801787e <xPortStartScheduler+0x4a>
        __asm volatile
 8017866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801786a:	f383 8811 	msr	BASEPRI, r3
 801786e:	f3bf 8f6f 	isb	sy
 8017872:	f3bf 8f4f 	dsb	sy
 8017876:	613b      	str	r3, [r7, #16]
    }
 8017878:	bf00      	nop
 801787a:	bf00      	nop
 801787c:	e7fd      	b.n	801787a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801787e:	4b39      	ldr	r3, [pc, #228]	@ (8017964 <xPortStartScheduler+0x130>)
 8017880:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017882:	697b      	ldr	r3, [r7, #20]
 8017884:	781b      	ldrb	r3, [r3, #0]
 8017886:	b2db      	uxtb	r3, r3
 8017888:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801788a:	697b      	ldr	r3, [r7, #20]
 801788c:	22ff      	movs	r2, #255	@ 0xff
 801788e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017890:	697b      	ldr	r3, [r7, #20]
 8017892:	781b      	ldrb	r3, [r3, #0]
 8017894:	b2db      	uxtb	r3, r3
 8017896:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017898:	78fb      	ldrb	r3, [r7, #3]
 801789a:	b2db      	uxtb	r3, r3
 801789c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80178a0:	b2da      	uxtb	r2, r3
 80178a2:	4b31      	ldr	r3, [pc, #196]	@ (8017968 <xPortStartScheduler+0x134>)
 80178a4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80178a6:	4b31      	ldr	r3, [pc, #196]	@ (801796c <xPortStartScheduler+0x138>)
 80178a8:	2207      	movs	r2, #7
 80178aa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80178ac:	e009      	b.n	80178c2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80178ae:	4b2f      	ldr	r3, [pc, #188]	@ (801796c <xPortStartScheduler+0x138>)
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	3b01      	subs	r3, #1
 80178b4:	4a2d      	ldr	r2, [pc, #180]	@ (801796c <xPortStartScheduler+0x138>)
 80178b6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80178b8:	78fb      	ldrb	r3, [r7, #3]
 80178ba:	b2db      	uxtb	r3, r3
 80178bc:	005b      	lsls	r3, r3, #1
 80178be:	b2db      	uxtb	r3, r3
 80178c0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80178c2:	78fb      	ldrb	r3, [r7, #3]
 80178c4:	b2db      	uxtb	r3, r3
 80178c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80178ca:	2b80      	cmp	r3, #128	@ 0x80
 80178cc:	d0ef      	beq.n	80178ae <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80178ce:	4b27      	ldr	r3, [pc, #156]	@ (801796c <xPortStartScheduler+0x138>)
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	f1c3 0307 	rsb	r3, r3, #7
 80178d6:	2b04      	cmp	r3, #4
 80178d8:	d00b      	beq.n	80178f2 <xPortStartScheduler+0xbe>
        __asm volatile
 80178da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80178de:	f383 8811 	msr	BASEPRI, r3
 80178e2:	f3bf 8f6f 	isb	sy
 80178e6:	f3bf 8f4f 	dsb	sy
 80178ea:	60bb      	str	r3, [r7, #8]
    }
 80178ec:	bf00      	nop
 80178ee:	bf00      	nop
 80178f0:	e7fd      	b.n	80178ee <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80178f2:	4b1e      	ldr	r3, [pc, #120]	@ (801796c <xPortStartScheduler+0x138>)
 80178f4:	681b      	ldr	r3, [r3, #0]
 80178f6:	021b      	lsls	r3, r3, #8
 80178f8:	4a1c      	ldr	r2, [pc, #112]	@ (801796c <xPortStartScheduler+0x138>)
 80178fa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80178fc:	4b1b      	ldr	r3, [pc, #108]	@ (801796c <xPortStartScheduler+0x138>)
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8017904:	4a19      	ldr	r2, [pc, #100]	@ (801796c <xPortStartScheduler+0x138>)
 8017906:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	b2da      	uxtb	r2, r3
 801790c:	697b      	ldr	r3, [r7, #20]
 801790e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8017910:	4b17      	ldr	r3, [pc, #92]	@ (8017970 <xPortStartScheduler+0x13c>)
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	4a16      	ldr	r2, [pc, #88]	@ (8017970 <xPortStartScheduler+0x13c>)
 8017916:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801791a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 801791c:	4b14      	ldr	r3, [pc, #80]	@ (8017970 <xPortStartScheduler+0x13c>)
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	4a13      	ldr	r2, [pc, #76]	@ (8017970 <xPortStartScheduler+0x13c>)
 8017922:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8017926:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8017928:	f000 f8e0 	bl	8017aec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 801792c:	4b11      	ldr	r3, [pc, #68]	@ (8017974 <xPortStartScheduler+0x140>)
 801792e:	2200      	movs	r2, #0
 8017930:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8017932:	f000 f8ff 	bl	8017b34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017936:	4b10      	ldr	r3, [pc, #64]	@ (8017978 <xPortStartScheduler+0x144>)
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	4a0f      	ldr	r2, [pc, #60]	@ (8017978 <xPortStartScheduler+0x144>)
 801793c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8017940:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8017942:	f7ff ff61 	bl	8017808 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8017946:	f7fe fda9 	bl	801649c <vTaskSwitchContext>
    prvTaskExitError();
 801794a:	f7ff ff17 	bl	801777c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 801794e:	2300      	movs	r3, #0
}
 8017950:	4618      	mov	r0, r3
 8017952:	3718      	adds	r7, #24
 8017954:	46bd      	mov	sp, r7
 8017956:	bd80      	pop	{r7, pc}
 8017958:	e000ed00 	.word	0xe000ed00
 801795c:	410fc271 	.word	0x410fc271
 8017960:	410fc270 	.word	0x410fc270
 8017964:	e000e400 	.word	0xe000e400
 8017968:	200016d8 	.word	0x200016d8
 801796c:	200016dc 	.word	0x200016dc
 8017970:	e000ed20 	.word	0xe000ed20
 8017974:	20000098 	.word	0x20000098
 8017978:	e000ef34 	.word	0xe000ef34

0801797c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801797c:	b480      	push	{r7}
 801797e:	b083      	sub	sp, #12
 8017980:	af00      	add	r7, sp, #0
        __asm volatile
 8017982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017986:	f383 8811 	msr	BASEPRI, r3
 801798a:	f3bf 8f6f 	isb	sy
 801798e:	f3bf 8f4f 	dsb	sy
 8017992:	607b      	str	r3, [r7, #4]
    }
 8017994:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8017996:	4b10      	ldr	r3, [pc, #64]	@ (80179d8 <vPortEnterCritical+0x5c>)
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	3301      	adds	r3, #1
 801799c:	4a0e      	ldr	r2, [pc, #56]	@ (80179d8 <vPortEnterCritical+0x5c>)
 801799e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80179a0:	4b0d      	ldr	r3, [pc, #52]	@ (80179d8 <vPortEnterCritical+0x5c>)
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	2b01      	cmp	r3, #1
 80179a6:	d110      	bne.n	80179ca <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80179a8:	4b0c      	ldr	r3, [pc, #48]	@ (80179dc <vPortEnterCritical+0x60>)
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	b2db      	uxtb	r3, r3
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d00b      	beq.n	80179ca <vPortEnterCritical+0x4e>
        __asm volatile
 80179b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80179b6:	f383 8811 	msr	BASEPRI, r3
 80179ba:	f3bf 8f6f 	isb	sy
 80179be:	f3bf 8f4f 	dsb	sy
 80179c2:	603b      	str	r3, [r7, #0]
    }
 80179c4:	bf00      	nop
 80179c6:	bf00      	nop
 80179c8:	e7fd      	b.n	80179c6 <vPortEnterCritical+0x4a>
    }
}
 80179ca:	bf00      	nop
 80179cc:	370c      	adds	r7, #12
 80179ce:	46bd      	mov	sp, r7
 80179d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179d4:	4770      	bx	lr
 80179d6:	bf00      	nop
 80179d8:	20000098 	.word	0x20000098
 80179dc:	e000ed04 	.word	0xe000ed04

080179e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80179e0:	b480      	push	{r7}
 80179e2:	b083      	sub	sp, #12
 80179e4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80179e6:	4b12      	ldr	r3, [pc, #72]	@ (8017a30 <vPortExitCritical+0x50>)
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d10b      	bne.n	8017a06 <vPortExitCritical+0x26>
        __asm volatile
 80179ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80179f2:	f383 8811 	msr	BASEPRI, r3
 80179f6:	f3bf 8f6f 	isb	sy
 80179fa:	f3bf 8f4f 	dsb	sy
 80179fe:	607b      	str	r3, [r7, #4]
    }
 8017a00:	bf00      	nop
 8017a02:	bf00      	nop
 8017a04:	e7fd      	b.n	8017a02 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8017a06:	4b0a      	ldr	r3, [pc, #40]	@ (8017a30 <vPortExitCritical+0x50>)
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	3b01      	subs	r3, #1
 8017a0c:	4a08      	ldr	r2, [pc, #32]	@ (8017a30 <vPortExitCritical+0x50>)
 8017a0e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8017a10:	4b07      	ldr	r3, [pc, #28]	@ (8017a30 <vPortExitCritical+0x50>)
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d105      	bne.n	8017a24 <vPortExitCritical+0x44>
 8017a18:	2300      	movs	r3, #0
 8017a1a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8017a1c:	683b      	ldr	r3, [r7, #0]
 8017a1e:	f383 8811 	msr	BASEPRI, r3
    }
 8017a22:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8017a24:	bf00      	nop
 8017a26:	370c      	adds	r7, #12
 8017a28:	46bd      	mov	sp, r7
 8017a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a2e:	4770      	bx	lr
 8017a30:	20000098 	.word	0x20000098
	...

08017a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8017a40:	f3ef 8009 	mrs	r0, PSP
 8017a44:	f3bf 8f6f 	isb	sy
 8017a48:	4b15      	ldr	r3, [pc, #84]	@ (8017aa0 <pxCurrentTCBConst>)
 8017a4a:	681a      	ldr	r2, [r3, #0]
 8017a4c:	f01e 0f10 	tst.w	lr, #16
 8017a50:	bf08      	it	eq
 8017a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a5a:	6010      	str	r0, [r2, #0]
 8017a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017a60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8017a64:	f380 8811 	msr	BASEPRI, r0
 8017a68:	f3bf 8f4f 	dsb	sy
 8017a6c:	f3bf 8f6f 	isb	sy
 8017a70:	f7fe fd14 	bl	801649c <vTaskSwitchContext>
 8017a74:	f04f 0000 	mov.w	r0, #0
 8017a78:	f380 8811 	msr	BASEPRI, r0
 8017a7c:	bc09      	pop	{r0, r3}
 8017a7e:	6819      	ldr	r1, [r3, #0]
 8017a80:	6808      	ldr	r0, [r1, #0]
 8017a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a86:	f01e 0f10 	tst.w	lr, #16
 8017a8a:	bf08      	it	eq
 8017a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017a90:	f380 8809 	msr	PSP, r0
 8017a94:	f3bf 8f6f 	isb	sy
 8017a98:	4770      	bx	lr
 8017a9a:	bf00      	nop
 8017a9c:	f3af 8000 	nop.w

08017aa0 <pxCurrentTCBConst>:
 8017aa0:	20001598 	.word	0x20001598
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8017aa4:	bf00      	nop
 8017aa6:	bf00      	nop

08017aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b082      	sub	sp, #8
 8017aac:	af00      	add	r7, sp, #0
        __asm volatile
 8017aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017ab2:	f383 8811 	msr	BASEPRI, r3
 8017ab6:	f3bf 8f6f 	isb	sy
 8017aba:	f3bf 8f4f 	dsb	sy
 8017abe:	607b      	str	r3, [r7, #4]
    }
 8017ac0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8017ac2:	f7fe fc31 	bl	8016328 <xTaskIncrementTick>
 8017ac6:	4603      	mov	r3, r0
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d003      	beq.n	8017ad4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017acc:	4b06      	ldr	r3, [pc, #24]	@ (8017ae8 <SysTick_Handler+0x40>)
 8017ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017ad2:	601a      	str	r2, [r3, #0]
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8017ad8:	683b      	ldr	r3, [r7, #0]
 8017ada:	f383 8811 	msr	BASEPRI, r3
    }
 8017ade:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8017ae0:	bf00      	nop
 8017ae2:	3708      	adds	r7, #8
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	bd80      	pop	{r7, pc}
 8017ae8:	e000ed04 	.word	0xe000ed04

08017aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8017aec:	b480      	push	{r7}
 8017aee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017af0:	4b0b      	ldr	r3, [pc, #44]	@ (8017b20 <vPortSetupTimerInterrupt+0x34>)
 8017af2:	2200      	movs	r2, #0
 8017af4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017af6:	4b0b      	ldr	r3, [pc, #44]	@ (8017b24 <vPortSetupTimerInterrupt+0x38>)
 8017af8:	2200      	movs	r2, #0
 8017afa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017afc:	4b0a      	ldr	r3, [pc, #40]	@ (8017b28 <vPortSetupTimerInterrupt+0x3c>)
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	4a0a      	ldr	r2, [pc, #40]	@ (8017b2c <vPortSetupTimerInterrupt+0x40>)
 8017b02:	fba2 2303 	umull	r2, r3, r2, r3
 8017b06:	099b      	lsrs	r3, r3, #6
 8017b08:	4a09      	ldr	r2, [pc, #36]	@ (8017b30 <vPortSetupTimerInterrupt+0x44>)
 8017b0a:	3b01      	subs	r3, #1
 8017b0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017b0e:	4b04      	ldr	r3, [pc, #16]	@ (8017b20 <vPortSetupTimerInterrupt+0x34>)
 8017b10:	2207      	movs	r2, #7
 8017b12:	601a      	str	r2, [r3, #0]
}
 8017b14:	bf00      	nop
 8017b16:	46bd      	mov	sp, r7
 8017b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b1c:	4770      	bx	lr
 8017b1e:	bf00      	nop
 8017b20:	e000e010 	.word	0xe000e010
 8017b24:	e000e018 	.word	0xe000e018
 8017b28:	2000008c 	.word	0x2000008c
 8017b2c:	10624dd3 	.word	0x10624dd3
 8017b30:	e000e014 	.word	0xe000e014

08017b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8017b34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8017b44 <vPortEnableVFP+0x10>
 8017b38:	6801      	ldr	r1, [r0, #0]
 8017b3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8017b3e:	6001      	str	r1, [r0, #0]
 8017b40:	4770      	bx	lr
 8017b42:	0000      	.short	0x0000
 8017b44:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8017b48:	bf00      	nop
 8017b4a:	bf00      	nop

08017b4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8017b4c:	b480      	push	{r7}
 8017b4e:	b085      	sub	sp, #20
 8017b50:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8017b52:	f3ef 8305 	mrs	r3, IPSR
 8017b56:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	2b0f      	cmp	r3, #15
 8017b5c:	d915      	bls.n	8017b8a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017b5e:	4a18      	ldr	r2, [pc, #96]	@ (8017bc0 <vPortValidateInterruptPriority+0x74>)
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	4413      	add	r3, r2
 8017b64:	781b      	ldrb	r3, [r3, #0]
 8017b66:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017b68:	4b16      	ldr	r3, [pc, #88]	@ (8017bc4 <vPortValidateInterruptPriority+0x78>)
 8017b6a:	781b      	ldrb	r3, [r3, #0]
 8017b6c:	7afa      	ldrb	r2, [r7, #11]
 8017b6e:	429a      	cmp	r2, r3
 8017b70:	d20b      	bcs.n	8017b8a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8017b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b76:	f383 8811 	msr	BASEPRI, r3
 8017b7a:	f3bf 8f6f 	isb	sy
 8017b7e:	f3bf 8f4f 	dsb	sy
 8017b82:	607b      	str	r3, [r7, #4]
    }
 8017b84:	bf00      	nop
 8017b86:	bf00      	nop
 8017b88:	e7fd      	b.n	8017b86 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8017bc8 <vPortValidateInterruptPriority+0x7c>)
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8017b92:	4b0e      	ldr	r3, [pc, #56]	@ (8017bcc <vPortValidateInterruptPriority+0x80>)
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	429a      	cmp	r2, r3
 8017b98:	d90b      	bls.n	8017bb2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8017b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017b9e:	f383 8811 	msr	BASEPRI, r3
 8017ba2:	f3bf 8f6f 	isb	sy
 8017ba6:	f3bf 8f4f 	dsb	sy
 8017baa:	603b      	str	r3, [r7, #0]
    }
 8017bac:	bf00      	nop
 8017bae:	bf00      	nop
 8017bb0:	e7fd      	b.n	8017bae <vPortValidateInterruptPriority+0x62>
    }
 8017bb2:	bf00      	nop
 8017bb4:	3714      	adds	r7, #20
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bbc:	4770      	bx	lr
 8017bbe:	bf00      	nop
 8017bc0:	e000e3f0 	.word	0xe000e3f0
 8017bc4:	200016d8 	.word	0x200016d8
 8017bc8:	e000ed0c 	.word	0xe000ed0c
 8017bcc:	200016dc 	.word	0x200016dc

08017bd0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8017bd0:	b580      	push	{r7, lr}
 8017bd2:	b08a      	sub	sp, #40	@ 0x28
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8017bd8:	2300      	movs	r3, #0
 8017bda:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8017bdc:	f7fe fa5a 	bl	8016094 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8017be0:	4b66      	ldr	r3, [pc, #408]	@ (8017d7c <pvPortMalloc+0x1ac>)
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d101      	bne.n	8017bec <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8017be8:	f000 f938 	bl	8017e5c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017bec:	4b64      	ldr	r3, [pc, #400]	@ (8017d80 <pvPortMalloc+0x1b0>)
 8017bee:	681a      	ldr	r2, [r3, #0]
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	4013      	ands	r3, r2
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	f040 80a9 	bne.w	8017d4c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d02e      	beq.n	8017c5e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8017c00:	2208      	movs	r2, #8
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8017c06:	687a      	ldr	r2, [r7, #4]
 8017c08:	429a      	cmp	r2, r3
 8017c0a:	d228      	bcs.n	8017c5e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8017c0c:	2208      	movs	r2, #8
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	4413      	add	r3, r2
 8017c12:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	f003 0307 	and.w	r3, r3, #7
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d022      	beq.n	8017c64 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	f023 0307 	bic.w	r3, r3, #7
 8017c24:	3308      	adds	r3, #8
 8017c26:	687a      	ldr	r2, [r7, #4]
 8017c28:	429a      	cmp	r2, r3
 8017c2a:	d215      	bcs.n	8017c58 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	f023 0307 	bic.w	r3, r3, #7
 8017c32:	3308      	adds	r3, #8
 8017c34:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	f003 0307 	and.w	r3, r3, #7
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d011      	beq.n	8017c64 <pvPortMalloc+0x94>
        __asm volatile
 8017c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017c44:	f383 8811 	msr	BASEPRI, r3
 8017c48:	f3bf 8f6f 	isb	sy
 8017c4c:	f3bf 8f4f 	dsb	sy
 8017c50:	617b      	str	r3, [r7, #20]
    }
 8017c52:	bf00      	nop
 8017c54:	bf00      	nop
 8017c56:	e7fd      	b.n	8017c54 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8017c58:	2300      	movs	r3, #0
 8017c5a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017c5c:	e002      	b.n	8017c64 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8017c5e:	2300      	movs	r3, #0
 8017c60:	607b      	str	r3, [r7, #4]
 8017c62:	e000      	b.n	8017c66 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017c64:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d06f      	beq.n	8017d4c <pvPortMalloc+0x17c>
 8017c6c:	4b45      	ldr	r3, [pc, #276]	@ (8017d84 <pvPortMalloc+0x1b4>)
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	687a      	ldr	r2, [r7, #4]
 8017c72:	429a      	cmp	r2, r3
 8017c74:	d86a      	bhi.n	8017d4c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8017c76:	4b44      	ldr	r3, [pc, #272]	@ (8017d88 <pvPortMalloc+0x1b8>)
 8017c78:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8017c7a:	4b43      	ldr	r3, [pc, #268]	@ (8017d88 <pvPortMalloc+0x1b8>)
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017c80:	e004      	b.n	8017c8c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8017c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c84:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8017c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c8e:	685b      	ldr	r3, [r3, #4]
 8017c90:	687a      	ldr	r2, [r7, #4]
 8017c92:	429a      	cmp	r2, r3
 8017c94:	d903      	bls.n	8017c9e <pvPortMalloc+0xce>
 8017c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d1f1      	bne.n	8017c82 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8017c9e:	4b37      	ldr	r3, [pc, #220]	@ (8017d7c <pvPortMalloc+0x1ac>)
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017ca4:	429a      	cmp	r2, r3
 8017ca6:	d051      	beq.n	8017d4c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017ca8:	6a3b      	ldr	r3, [r7, #32]
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	2208      	movs	r2, #8
 8017cae:	4413      	add	r3, r2
 8017cb0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cb4:	681a      	ldr	r2, [r3, #0]
 8017cb6:	6a3b      	ldr	r3, [r7, #32]
 8017cb8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cbc:	685a      	ldr	r2, [r3, #4]
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	1ad2      	subs	r2, r2, r3
 8017cc2:	2308      	movs	r3, #8
 8017cc4:	005b      	lsls	r3, r3, #1
 8017cc6:	429a      	cmp	r2, r3
 8017cc8:	d920      	bls.n	8017d0c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	4413      	add	r3, r2
 8017cd0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017cd2:	69bb      	ldr	r3, [r7, #24]
 8017cd4:	f003 0307 	and.w	r3, r3, #7
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d00b      	beq.n	8017cf4 <pvPortMalloc+0x124>
        __asm volatile
 8017cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017ce0:	f383 8811 	msr	BASEPRI, r3
 8017ce4:	f3bf 8f6f 	isb	sy
 8017ce8:	f3bf 8f4f 	dsb	sy
 8017cec:	613b      	str	r3, [r7, #16]
    }
 8017cee:	bf00      	nop
 8017cf0:	bf00      	nop
 8017cf2:	e7fd      	b.n	8017cf0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cf6:	685a      	ldr	r2, [r3, #4]
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	1ad2      	subs	r2, r2, r3
 8017cfc:	69bb      	ldr	r3, [r7, #24]
 8017cfe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8017d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d02:	687a      	ldr	r2, [r7, #4]
 8017d04:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017d06:	69b8      	ldr	r0, [r7, #24]
 8017d08:	f000 f90a 	bl	8017f20 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8017d84 <pvPortMalloc+0x1b4>)
 8017d0e:	681a      	ldr	r2, [r3, #0]
 8017d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d12:	685b      	ldr	r3, [r3, #4]
 8017d14:	1ad3      	subs	r3, r2, r3
 8017d16:	4a1b      	ldr	r2, [pc, #108]	@ (8017d84 <pvPortMalloc+0x1b4>)
 8017d18:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8017d84 <pvPortMalloc+0x1b4>)
 8017d1c:	681a      	ldr	r2, [r3, #0]
 8017d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8017d8c <pvPortMalloc+0x1bc>)
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	429a      	cmp	r2, r3
 8017d24:	d203      	bcs.n	8017d2e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017d26:	4b17      	ldr	r3, [pc, #92]	@ (8017d84 <pvPortMalloc+0x1b4>)
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	4a18      	ldr	r2, [pc, #96]	@ (8017d8c <pvPortMalloc+0x1bc>)
 8017d2c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d30:	685a      	ldr	r2, [r3, #4]
 8017d32:	4b13      	ldr	r3, [pc, #76]	@ (8017d80 <pvPortMalloc+0x1b0>)
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	431a      	orrs	r2, r3
 8017d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d3a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8017d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d3e:	2200      	movs	r2, #0
 8017d40:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8017d42:	4b13      	ldr	r3, [pc, #76]	@ (8017d90 <pvPortMalloc+0x1c0>)
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	3301      	adds	r3, #1
 8017d48:	4a11      	ldr	r2, [pc, #68]	@ (8017d90 <pvPortMalloc+0x1c0>)
 8017d4a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8017d4c:	f7fe f9b0 	bl	80160b0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017d50:	69fb      	ldr	r3, [r7, #28]
 8017d52:	f003 0307 	and.w	r3, r3, #7
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d00b      	beq.n	8017d72 <pvPortMalloc+0x1a2>
        __asm volatile
 8017d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d5e:	f383 8811 	msr	BASEPRI, r3
 8017d62:	f3bf 8f6f 	isb	sy
 8017d66:	f3bf 8f4f 	dsb	sy
 8017d6a:	60fb      	str	r3, [r7, #12]
    }
 8017d6c:	bf00      	nop
 8017d6e:	bf00      	nop
 8017d70:	e7fd      	b.n	8017d6e <pvPortMalloc+0x19e>
    return pvReturn;
 8017d72:	69fb      	ldr	r3, [r7, #28]
}
 8017d74:	4618      	mov	r0, r3
 8017d76:	3728      	adds	r7, #40	@ 0x28
 8017d78:	46bd      	mov	sp, r7
 8017d7a:	bd80      	pop	{r7, pc}
 8017d7c:	200142e8 	.word	0x200142e8
 8017d80:	200142fc 	.word	0x200142fc
 8017d84:	200142ec 	.word	0x200142ec
 8017d88:	200142e0 	.word	0x200142e0
 8017d8c:	200142f0 	.word	0x200142f0
 8017d90:	200142f4 	.word	0x200142f4

08017d94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8017d94:	b580      	push	{r7, lr}
 8017d96:	b086      	sub	sp, #24
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d04f      	beq.n	8017e46 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8017da6:	2308      	movs	r3, #8
 8017da8:	425b      	negs	r3, r3
 8017daa:	697a      	ldr	r2, [r7, #20]
 8017dac:	4413      	add	r3, r2
 8017dae:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8017db0:	697b      	ldr	r3, [r7, #20]
 8017db2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017db4:	693b      	ldr	r3, [r7, #16]
 8017db6:	685a      	ldr	r2, [r3, #4]
 8017db8:	4b25      	ldr	r3, [pc, #148]	@ (8017e50 <vPortFree+0xbc>)
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	4013      	ands	r3, r2
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d10b      	bne.n	8017dda <vPortFree+0x46>
        __asm volatile
 8017dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017dc6:	f383 8811 	msr	BASEPRI, r3
 8017dca:	f3bf 8f6f 	isb	sy
 8017dce:	f3bf 8f4f 	dsb	sy
 8017dd2:	60fb      	str	r3, [r7, #12]
    }
 8017dd4:	bf00      	nop
 8017dd6:	bf00      	nop
 8017dd8:	e7fd      	b.n	8017dd6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017dda:	693b      	ldr	r3, [r7, #16]
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d00b      	beq.n	8017dfa <vPortFree+0x66>
        __asm volatile
 8017de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017de6:	f383 8811 	msr	BASEPRI, r3
 8017dea:	f3bf 8f6f 	isb	sy
 8017dee:	f3bf 8f4f 	dsb	sy
 8017df2:	60bb      	str	r3, [r7, #8]
    }
 8017df4:	bf00      	nop
 8017df6:	bf00      	nop
 8017df8:	e7fd      	b.n	8017df6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017dfa:	693b      	ldr	r3, [r7, #16]
 8017dfc:	685a      	ldr	r2, [r3, #4]
 8017dfe:	4b14      	ldr	r3, [pc, #80]	@ (8017e50 <vPortFree+0xbc>)
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	4013      	ands	r3, r2
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d01e      	beq.n	8017e46 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8017e08:	693b      	ldr	r3, [r7, #16]
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d11a      	bne.n	8017e46 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017e10:	693b      	ldr	r3, [r7, #16]
 8017e12:	685a      	ldr	r2, [r3, #4]
 8017e14:	4b0e      	ldr	r3, [pc, #56]	@ (8017e50 <vPortFree+0xbc>)
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	43db      	mvns	r3, r3
 8017e1a:	401a      	ands	r2, r3
 8017e1c:	693b      	ldr	r3, [r7, #16]
 8017e1e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8017e20:	f7fe f938 	bl	8016094 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8017e24:	693b      	ldr	r3, [r7, #16]
 8017e26:	685a      	ldr	r2, [r3, #4]
 8017e28:	4b0a      	ldr	r3, [pc, #40]	@ (8017e54 <vPortFree+0xc0>)
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	4413      	add	r3, r2
 8017e2e:	4a09      	ldr	r2, [pc, #36]	@ (8017e54 <vPortFree+0xc0>)
 8017e30:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017e32:	6938      	ldr	r0, [r7, #16]
 8017e34:	f000 f874 	bl	8017f20 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8017e38:	4b07      	ldr	r3, [pc, #28]	@ (8017e58 <vPortFree+0xc4>)
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	3301      	adds	r3, #1
 8017e3e:	4a06      	ldr	r2, [pc, #24]	@ (8017e58 <vPortFree+0xc4>)
 8017e40:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8017e42:	f7fe f935 	bl	80160b0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8017e46:	bf00      	nop
 8017e48:	3718      	adds	r7, #24
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	bd80      	pop	{r7, pc}
 8017e4e:	bf00      	nop
 8017e50:	200142fc 	.word	0x200142fc
 8017e54:	200142ec 	.word	0x200142ec
 8017e58:	200142f8 	.word	0x200142f8

08017e5c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8017e5c:	b480      	push	{r7}
 8017e5e:	b085      	sub	sp, #20
 8017e60:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017e62:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8017e66:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8017e68:	4b27      	ldr	r3, [pc, #156]	@ (8017f08 <prvHeapInit+0xac>)
 8017e6a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	f003 0307 	and.w	r3, r3, #7
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d00c      	beq.n	8017e90 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	3307      	adds	r3, #7
 8017e7a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	f023 0307 	bic.w	r3, r3, #7
 8017e82:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017e84:	68ba      	ldr	r2, [r7, #8]
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	1ad3      	subs	r3, r2, r3
 8017e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8017f08 <prvHeapInit+0xac>)
 8017e8c:	4413      	add	r3, r2
 8017e8e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017e94:	4a1d      	ldr	r2, [pc, #116]	@ (8017f0c <prvHeapInit+0xb0>)
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8017e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8017f0c <prvHeapInit+0xb0>)
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	68ba      	ldr	r2, [r7, #8]
 8017ea4:	4413      	add	r3, r2
 8017ea6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8017ea8:	2208      	movs	r2, #8
 8017eaa:	68fb      	ldr	r3, [r7, #12]
 8017eac:	1a9b      	subs	r3, r3, r2
 8017eae:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	f023 0307 	bic.w	r3, r3, #7
 8017eb6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	4a15      	ldr	r2, [pc, #84]	@ (8017f10 <prvHeapInit+0xb4>)
 8017ebc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8017ebe:	4b14      	ldr	r3, [pc, #80]	@ (8017f10 <prvHeapInit+0xb4>)
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8017ec6:	4b12      	ldr	r3, [pc, #72]	@ (8017f10 <prvHeapInit+0xb4>)
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	2200      	movs	r2, #0
 8017ecc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017ed2:	683b      	ldr	r3, [r7, #0]
 8017ed4:	68fa      	ldr	r2, [r7, #12]
 8017ed6:	1ad2      	subs	r2, r2, r3
 8017ed8:	683b      	ldr	r3, [r7, #0]
 8017eda:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017edc:	4b0c      	ldr	r3, [pc, #48]	@ (8017f10 <prvHeapInit+0xb4>)
 8017ede:	681a      	ldr	r2, [r3, #0]
 8017ee0:	683b      	ldr	r3, [r7, #0]
 8017ee2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017ee4:	683b      	ldr	r3, [r7, #0]
 8017ee6:	685b      	ldr	r3, [r3, #4]
 8017ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8017f14 <prvHeapInit+0xb8>)
 8017eea:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017eec:	683b      	ldr	r3, [r7, #0]
 8017eee:	685b      	ldr	r3, [r3, #4]
 8017ef0:	4a09      	ldr	r2, [pc, #36]	@ (8017f18 <prvHeapInit+0xbc>)
 8017ef2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017ef4:	4b09      	ldr	r3, [pc, #36]	@ (8017f1c <prvHeapInit+0xc0>)
 8017ef6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8017efa:	601a      	str	r2, [r3, #0]
}
 8017efc:	bf00      	nop
 8017efe:	3714      	adds	r7, #20
 8017f00:	46bd      	mov	sp, r7
 8017f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f06:	4770      	bx	lr
 8017f08:	200016e0 	.word	0x200016e0
 8017f0c:	200142e0 	.word	0x200142e0
 8017f10:	200142e8 	.word	0x200142e8
 8017f14:	200142f0 	.word	0x200142f0
 8017f18:	200142ec 	.word	0x200142ec
 8017f1c:	200142fc 	.word	0x200142fc

08017f20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8017f20:	b480      	push	{r7}
 8017f22:	b085      	sub	sp, #20
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017f28:	4b28      	ldr	r3, [pc, #160]	@ (8017fcc <prvInsertBlockIntoFreeList+0xac>)
 8017f2a:	60fb      	str	r3, [r7, #12]
 8017f2c:	e002      	b.n	8017f34 <prvInsertBlockIntoFreeList+0x14>
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	60fb      	str	r3, [r7, #12]
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	687a      	ldr	r2, [r7, #4]
 8017f3a:	429a      	cmp	r2, r3
 8017f3c:	d8f7      	bhi.n	8017f2e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	685b      	ldr	r3, [r3, #4]
 8017f46:	68ba      	ldr	r2, [r7, #8]
 8017f48:	4413      	add	r3, r2
 8017f4a:	687a      	ldr	r2, [r7, #4]
 8017f4c:	429a      	cmp	r2, r3
 8017f4e:	d108      	bne.n	8017f62 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	685a      	ldr	r2, [r3, #4]
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	685b      	ldr	r3, [r3, #4]
 8017f58:	441a      	add	r2, r3
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	685b      	ldr	r3, [r3, #4]
 8017f6a:	68ba      	ldr	r2, [r7, #8]
 8017f6c:	441a      	add	r2, r3
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	429a      	cmp	r2, r3
 8017f74:	d118      	bne.n	8017fa8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	681a      	ldr	r2, [r3, #0]
 8017f7a:	4b15      	ldr	r3, [pc, #84]	@ (8017fd0 <prvInsertBlockIntoFreeList+0xb0>)
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	429a      	cmp	r2, r3
 8017f80:	d00d      	beq.n	8017f9e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	685a      	ldr	r2, [r3, #4]
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	685b      	ldr	r3, [r3, #4]
 8017f8c:	441a      	add	r2, r3
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	681a      	ldr	r2, [r3, #0]
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	601a      	str	r2, [r3, #0]
 8017f9c:	e008      	b.n	8017fb0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8017fd0 <prvInsertBlockIntoFreeList+0xb0>)
 8017fa0:	681a      	ldr	r2, [r3, #0]
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	601a      	str	r2, [r3, #0]
 8017fa6:	e003      	b.n	8017fb0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	681a      	ldr	r2, [r3, #0]
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8017fb0:	68fa      	ldr	r2, [r7, #12]
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	429a      	cmp	r2, r3
 8017fb6:	d002      	beq.n	8017fbe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	687a      	ldr	r2, [r7, #4]
 8017fbc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8017fbe:	bf00      	nop
 8017fc0:	3714      	adds	r7, #20
 8017fc2:	46bd      	mov	sp, r7
 8017fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fc8:	4770      	bx	lr
 8017fca:	bf00      	nop
 8017fcc:	200142e0 	.word	0x200142e0
 8017fd0:	200142e8 	.word	0x200142e8

08017fd4 <malloc>:
 8017fd4:	4b02      	ldr	r3, [pc, #8]	@ (8017fe0 <malloc+0xc>)
 8017fd6:	4601      	mov	r1, r0
 8017fd8:	6818      	ldr	r0, [r3, #0]
 8017fda:	f000 b82d 	b.w	8018038 <_malloc_r>
 8017fde:	bf00      	nop
 8017fe0:	20000214 	.word	0x20000214

08017fe4 <free>:
 8017fe4:	4b02      	ldr	r3, [pc, #8]	@ (8017ff0 <free+0xc>)
 8017fe6:	4601      	mov	r1, r0
 8017fe8:	6818      	ldr	r0, [r3, #0]
 8017fea:	f002 bcfd 	b.w	801a9e8 <_free_r>
 8017fee:	bf00      	nop
 8017ff0:	20000214 	.word	0x20000214

08017ff4 <sbrk_aligned>:
 8017ff4:	b570      	push	{r4, r5, r6, lr}
 8017ff6:	4e0f      	ldr	r6, [pc, #60]	@ (8018034 <sbrk_aligned+0x40>)
 8017ff8:	460c      	mov	r4, r1
 8017ffa:	6831      	ldr	r1, [r6, #0]
 8017ffc:	4605      	mov	r5, r0
 8017ffe:	b911      	cbnz	r1, 8018006 <sbrk_aligned+0x12>
 8018000:	f001 fe2a 	bl	8019c58 <_sbrk_r>
 8018004:	6030      	str	r0, [r6, #0]
 8018006:	4621      	mov	r1, r4
 8018008:	4628      	mov	r0, r5
 801800a:	f001 fe25 	bl	8019c58 <_sbrk_r>
 801800e:	1c43      	adds	r3, r0, #1
 8018010:	d103      	bne.n	801801a <sbrk_aligned+0x26>
 8018012:	f04f 34ff 	mov.w	r4, #4294967295
 8018016:	4620      	mov	r0, r4
 8018018:	bd70      	pop	{r4, r5, r6, pc}
 801801a:	1cc4      	adds	r4, r0, #3
 801801c:	f024 0403 	bic.w	r4, r4, #3
 8018020:	42a0      	cmp	r0, r4
 8018022:	d0f8      	beq.n	8018016 <sbrk_aligned+0x22>
 8018024:	1a21      	subs	r1, r4, r0
 8018026:	4628      	mov	r0, r5
 8018028:	f001 fe16 	bl	8019c58 <_sbrk_r>
 801802c:	3001      	adds	r0, #1
 801802e:	d1f2      	bne.n	8018016 <sbrk_aligned+0x22>
 8018030:	e7ef      	b.n	8018012 <sbrk_aligned+0x1e>
 8018032:	bf00      	nop
 8018034:	20014300 	.word	0x20014300

08018038 <_malloc_r>:
 8018038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801803c:	1ccd      	adds	r5, r1, #3
 801803e:	f025 0503 	bic.w	r5, r5, #3
 8018042:	3508      	adds	r5, #8
 8018044:	2d0c      	cmp	r5, #12
 8018046:	bf38      	it	cc
 8018048:	250c      	movcc	r5, #12
 801804a:	2d00      	cmp	r5, #0
 801804c:	4606      	mov	r6, r0
 801804e:	db01      	blt.n	8018054 <_malloc_r+0x1c>
 8018050:	42a9      	cmp	r1, r5
 8018052:	d904      	bls.n	801805e <_malloc_r+0x26>
 8018054:	230c      	movs	r3, #12
 8018056:	6033      	str	r3, [r6, #0]
 8018058:	2000      	movs	r0, #0
 801805a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801805e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018134 <_malloc_r+0xfc>
 8018062:	f000 f869 	bl	8018138 <__malloc_lock>
 8018066:	f8d8 3000 	ldr.w	r3, [r8]
 801806a:	461c      	mov	r4, r3
 801806c:	bb44      	cbnz	r4, 80180c0 <_malloc_r+0x88>
 801806e:	4629      	mov	r1, r5
 8018070:	4630      	mov	r0, r6
 8018072:	f7ff ffbf 	bl	8017ff4 <sbrk_aligned>
 8018076:	1c43      	adds	r3, r0, #1
 8018078:	4604      	mov	r4, r0
 801807a:	d158      	bne.n	801812e <_malloc_r+0xf6>
 801807c:	f8d8 4000 	ldr.w	r4, [r8]
 8018080:	4627      	mov	r7, r4
 8018082:	2f00      	cmp	r7, #0
 8018084:	d143      	bne.n	801810e <_malloc_r+0xd6>
 8018086:	2c00      	cmp	r4, #0
 8018088:	d04b      	beq.n	8018122 <_malloc_r+0xea>
 801808a:	6823      	ldr	r3, [r4, #0]
 801808c:	4639      	mov	r1, r7
 801808e:	4630      	mov	r0, r6
 8018090:	eb04 0903 	add.w	r9, r4, r3
 8018094:	f001 fde0 	bl	8019c58 <_sbrk_r>
 8018098:	4581      	cmp	r9, r0
 801809a:	d142      	bne.n	8018122 <_malloc_r+0xea>
 801809c:	6821      	ldr	r1, [r4, #0]
 801809e:	1a6d      	subs	r5, r5, r1
 80180a0:	4629      	mov	r1, r5
 80180a2:	4630      	mov	r0, r6
 80180a4:	f7ff ffa6 	bl	8017ff4 <sbrk_aligned>
 80180a8:	3001      	adds	r0, #1
 80180aa:	d03a      	beq.n	8018122 <_malloc_r+0xea>
 80180ac:	6823      	ldr	r3, [r4, #0]
 80180ae:	442b      	add	r3, r5
 80180b0:	6023      	str	r3, [r4, #0]
 80180b2:	f8d8 3000 	ldr.w	r3, [r8]
 80180b6:	685a      	ldr	r2, [r3, #4]
 80180b8:	bb62      	cbnz	r2, 8018114 <_malloc_r+0xdc>
 80180ba:	f8c8 7000 	str.w	r7, [r8]
 80180be:	e00f      	b.n	80180e0 <_malloc_r+0xa8>
 80180c0:	6822      	ldr	r2, [r4, #0]
 80180c2:	1b52      	subs	r2, r2, r5
 80180c4:	d420      	bmi.n	8018108 <_malloc_r+0xd0>
 80180c6:	2a0b      	cmp	r2, #11
 80180c8:	d917      	bls.n	80180fa <_malloc_r+0xc2>
 80180ca:	1961      	adds	r1, r4, r5
 80180cc:	42a3      	cmp	r3, r4
 80180ce:	6025      	str	r5, [r4, #0]
 80180d0:	bf18      	it	ne
 80180d2:	6059      	strne	r1, [r3, #4]
 80180d4:	6863      	ldr	r3, [r4, #4]
 80180d6:	bf08      	it	eq
 80180d8:	f8c8 1000 	streq.w	r1, [r8]
 80180dc:	5162      	str	r2, [r4, r5]
 80180de:	604b      	str	r3, [r1, #4]
 80180e0:	4630      	mov	r0, r6
 80180e2:	f000 f82f 	bl	8018144 <__malloc_unlock>
 80180e6:	f104 000b 	add.w	r0, r4, #11
 80180ea:	1d23      	adds	r3, r4, #4
 80180ec:	f020 0007 	bic.w	r0, r0, #7
 80180f0:	1ac2      	subs	r2, r0, r3
 80180f2:	bf1c      	itt	ne
 80180f4:	1a1b      	subne	r3, r3, r0
 80180f6:	50a3      	strne	r3, [r4, r2]
 80180f8:	e7af      	b.n	801805a <_malloc_r+0x22>
 80180fa:	6862      	ldr	r2, [r4, #4]
 80180fc:	42a3      	cmp	r3, r4
 80180fe:	bf0c      	ite	eq
 8018100:	f8c8 2000 	streq.w	r2, [r8]
 8018104:	605a      	strne	r2, [r3, #4]
 8018106:	e7eb      	b.n	80180e0 <_malloc_r+0xa8>
 8018108:	4623      	mov	r3, r4
 801810a:	6864      	ldr	r4, [r4, #4]
 801810c:	e7ae      	b.n	801806c <_malloc_r+0x34>
 801810e:	463c      	mov	r4, r7
 8018110:	687f      	ldr	r7, [r7, #4]
 8018112:	e7b6      	b.n	8018082 <_malloc_r+0x4a>
 8018114:	461a      	mov	r2, r3
 8018116:	685b      	ldr	r3, [r3, #4]
 8018118:	42a3      	cmp	r3, r4
 801811a:	d1fb      	bne.n	8018114 <_malloc_r+0xdc>
 801811c:	2300      	movs	r3, #0
 801811e:	6053      	str	r3, [r2, #4]
 8018120:	e7de      	b.n	80180e0 <_malloc_r+0xa8>
 8018122:	230c      	movs	r3, #12
 8018124:	6033      	str	r3, [r6, #0]
 8018126:	4630      	mov	r0, r6
 8018128:	f000 f80c 	bl	8018144 <__malloc_unlock>
 801812c:	e794      	b.n	8018058 <_malloc_r+0x20>
 801812e:	6005      	str	r5, [r0, #0]
 8018130:	e7d6      	b.n	80180e0 <_malloc_r+0xa8>
 8018132:	bf00      	nop
 8018134:	20014304 	.word	0x20014304

08018138 <__malloc_lock>:
 8018138:	4801      	ldr	r0, [pc, #4]	@ (8018140 <__malloc_lock+0x8>)
 801813a:	f001 bdda 	b.w	8019cf2 <__retarget_lock_acquire_recursive>
 801813e:	bf00      	nop
 8018140:	20014448 	.word	0x20014448

08018144 <__malloc_unlock>:
 8018144:	4801      	ldr	r0, [pc, #4]	@ (801814c <__malloc_unlock+0x8>)
 8018146:	f001 bdd5 	b.w	8019cf4 <__retarget_lock_release_recursive>
 801814a:	bf00      	nop
 801814c:	20014448 	.word	0x20014448

08018150 <realloc>:
 8018150:	4b02      	ldr	r3, [pc, #8]	@ (801815c <realloc+0xc>)
 8018152:	460a      	mov	r2, r1
 8018154:	4601      	mov	r1, r0
 8018156:	6818      	ldr	r0, [r3, #0]
 8018158:	f000 b802 	b.w	8018160 <_realloc_r>
 801815c:	20000214 	.word	0x20000214

08018160 <_realloc_r>:
 8018160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018164:	4607      	mov	r7, r0
 8018166:	4614      	mov	r4, r2
 8018168:	460d      	mov	r5, r1
 801816a:	b921      	cbnz	r1, 8018176 <_realloc_r+0x16>
 801816c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018170:	4611      	mov	r1, r2
 8018172:	f7ff bf61 	b.w	8018038 <_malloc_r>
 8018176:	b92a      	cbnz	r2, 8018184 <_realloc_r+0x24>
 8018178:	f002 fc36 	bl	801a9e8 <_free_r>
 801817c:	4625      	mov	r5, r4
 801817e:	4628      	mov	r0, r5
 8018180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018184:	f003 fc70 	bl	801ba68 <_malloc_usable_size_r>
 8018188:	4284      	cmp	r4, r0
 801818a:	4606      	mov	r6, r0
 801818c:	d802      	bhi.n	8018194 <_realloc_r+0x34>
 801818e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018192:	d8f4      	bhi.n	801817e <_realloc_r+0x1e>
 8018194:	4621      	mov	r1, r4
 8018196:	4638      	mov	r0, r7
 8018198:	f7ff ff4e 	bl	8018038 <_malloc_r>
 801819c:	4680      	mov	r8, r0
 801819e:	b908      	cbnz	r0, 80181a4 <_realloc_r+0x44>
 80181a0:	4645      	mov	r5, r8
 80181a2:	e7ec      	b.n	801817e <_realloc_r+0x1e>
 80181a4:	42b4      	cmp	r4, r6
 80181a6:	4622      	mov	r2, r4
 80181a8:	4629      	mov	r1, r5
 80181aa:	bf28      	it	cs
 80181ac:	4632      	movcs	r2, r6
 80181ae:	f001 fdaa 	bl	8019d06 <memcpy>
 80181b2:	4629      	mov	r1, r5
 80181b4:	4638      	mov	r0, r7
 80181b6:	f002 fc17 	bl	801a9e8 <_free_r>
 80181ba:	e7f1      	b.n	80181a0 <_realloc_r+0x40>

080181bc <sulp>:
 80181bc:	b570      	push	{r4, r5, r6, lr}
 80181be:	4604      	mov	r4, r0
 80181c0:	460d      	mov	r5, r1
 80181c2:	ec45 4b10 	vmov	d0, r4, r5
 80181c6:	4616      	mov	r6, r2
 80181c8:	f003 fb10 	bl	801b7ec <__ulp>
 80181cc:	ec51 0b10 	vmov	r0, r1, d0
 80181d0:	b17e      	cbz	r6, 80181f2 <sulp+0x36>
 80181d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80181d6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80181da:	2b00      	cmp	r3, #0
 80181dc:	dd09      	ble.n	80181f2 <sulp+0x36>
 80181de:	051b      	lsls	r3, r3, #20
 80181e0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80181e4:	2400      	movs	r4, #0
 80181e6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80181ea:	4622      	mov	r2, r4
 80181ec:	462b      	mov	r3, r5
 80181ee:	f7f0 fa33 	bl	8008658 <__aeabi_dmul>
 80181f2:	ec41 0b10 	vmov	d0, r0, r1
 80181f6:	bd70      	pop	{r4, r5, r6, pc}

080181f8 <_strtod_l>:
 80181f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181fc:	b09f      	sub	sp, #124	@ 0x7c
 80181fe:	460c      	mov	r4, r1
 8018200:	9217      	str	r2, [sp, #92]	@ 0x5c
 8018202:	2200      	movs	r2, #0
 8018204:	921a      	str	r2, [sp, #104]	@ 0x68
 8018206:	9005      	str	r0, [sp, #20]
 8018208:	f04f 0a00 	mov.w	sl, #0
 801820c:	f04f 0b00 	mov.w	fp, #0
 8018210:	460a      	mov	r2, r1
 8018212:	9219      	str	r2, [sp, #100]	@ 0x64
 8018214:	7811      	ldrb	r1, [r2, #0]
 8018216:	292b      	cmp	r1, #43	@ 0x2b
 8018218:	d04a      	beq.n	80182b0 <_strtod_l+0xb8>
 801821a:	d838      	bhi.n	801828e <_strtod_l+0x96>
 801821c:	290d      	cmp	r1, #13
 801821e:	d832      	bhi.n	8018286 <_strtod_l+0x8e>
 8018220:	2908      	cmp	r1, #8
 8018222:	d832      	bhi.n	801828a <_strtod_l+0x92>
 8018224:	2900      	cmp	r1, #0
 8018226:	d03b      	beq.n	80182a0 <_strtod_l+0xa8>
 8018228:	2200      	movs	r2, #0
 801822a:	920e      	str	r2, [sp, #56]	@ 0x38
 801822c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801822e:	782a      	ldrb	r2, [r5, #0]
 8018230:	2a30      	cmp	r2, #48	@ 0x30
 8018232:	f040 80b2 	bne.w	801839a <_strtod_l+0x1a2>
 8018236:	786a      	ldrb	r2, [r5, #1]
 8018238:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801823c:	2a58      	cmp	r2, #88	@ 0x58
 801823e:	d16e      	bne.n	801831e <_strtod_l+0x126>
 8018240:	9302      	str	r3, [sp, #8]
 8018242:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018244:	9301      	str	r3, [sp, #4]
 8018246:	ab1a      	add	r3, sp, #104	@ 0x68
 8018248:	9300      	str	r3, [sp, #0]
 801824a:	4a8f      	ldr	r2, [pc, #572]	@ (8018488 <_strtod_l+0x290>)
 801824c:	9805      	ldr	r0, [sp, #20]
 801824e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8018250:	a919      	add	r1, sp, #100	@ 0x64
 8018252:	f002 fc7b 	bl	801ab4c <__gethex>
 8018256:	f010 060f 	ands.w	r6, r0, #15
 801825a:	4604      	mov	r4, r0
 801825c:	d005      	beq.n	801826a <_strtod_l+0x72>
 801825e:	2e06      	cmp	r6, #6
 8018260:	d128      	bne.n	80182b4 <_strtod_l+0xbc>
 8018262:	3501      	adds	r5, #1
 8018264:	2300      	movs	r3, #0
 8018266:	9519      	str	r5, [sp, #100]	@ 0x64
 8018268:	930e      	str	r3, [sp, #56]	@ 0x38
 801826a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801826c:	2b00      	cmp	r3, #0
 801826e:	f040 858e 	bne.w	8018d8e <_strtod_l+0xb96>
 8018272:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018274:	b1cb      	cbz	r3, 80182aa <_strtod_l+0xb2>
 8018276:	4652      	mov	r2, sl
 8018278:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801827c:	ec43 2b10 	vmov	d0, r2, r3
 8018280:	b01f      	add	sp, #124	@ 0x7c
 8018282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018286:	2920      	cmp	r1, #32
 8018288:	d1ce      	bne.n	8018228 <_strtod_l+0x30>
 801828a:	3201      	adds	r2, #1
 801828c:	e7c1      	b.n	8018212 <_strtod_l+0x1a>
 801828e:	292d      	cmp	r1, #45	@ 0x2d
 8018290:	d1ca      	bne.n	8018228 <_strtod_l+0x30>
 8018292:	2101      	movs	r1, #1
 8018294:	910e      	str	r1, [sp, #56]	@ 0x38
 8018296:	1c51      	adds	r1, r2, #1
 8018298:	9119      	str	r1, [sp, #100]	@ 0x64
 801829a:	7852      	ldrb	r2, [r2, #1]
 801829c:	2a00      	cmp	r2, #0
 801829e:	d1c5      	bne.n	801822c <_strtod_l+0x34>
 80182a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80182a2:	9419      	str	r4, [sp, #100]	@ 0x64
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	f040 8570 	bne.w	8018d8a <_strtod_l+0xb92>
 80182aa:	4652      	mov	r2, sl
 80182ac:	465b      	mov	r3, fp
 80182ae:	e7e5      	b.n	801827c <_strtod_l+0x84>
 80182b0:	2100      	movs	r1, #0
 80182b2:	e7ef      	b.n	8018294 <_strtod_l+0x9c>
 80182b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80182b6:	b13a      	cbz	r2, 80182c8 <_strtod_l+0xd0>
 80182b8:	2135      	movs	r1, #53	@ 0x35
 80182ba:	a81c      	add	r0, sp, #112	@ 0x70
 80182bc:	f003 fb90 	bl	801b9e0 <__copybits>
 80182c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80182c2:	9805      	ldr	r0, [sp, #20]
 80182c4:	f002 ff66 	bl	801b194 <_Bfree>
 80182c8:	3e01      	subs	r6, #1
 80182ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80182cc:	2e04      	cmp	r6, #4
 80182ce:	d806      	bhi.n	80182de <_strtod_l+0xe6>
 80182d0:	e8df f006 	tbb	[pc, r6]
 80182d4:	201d0314 	.word	0x201d0314
 80182d8:	14          	.byte	0x14
 80182d9:	00          	.byte	0x00
 80182da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80182de:	05e1      	lsls	r1, r4, #23
 80182e0:	bf48      	it	mi
 80182e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80182e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80182ea:	0d1b      	lsrs	r3, r3, #20
 80182ec:	051b      	lsls	r3, r3, #20
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d1bb      	bne.n	801826a <_strtod_l+0x72>
 80182f2:	f001 fcd3 	bl	8019c9c <__errno>
 80182f6:	2322      	movs	r3, #34	@ 0x22
 80182f8:	6003      	str	r3, [r0, #0]
 80182fa:	e7b6      	b.n	801826a <_strtod_l+0x72>
 80182fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8018300:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8018304:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8018308:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801830c:	e7e7      	b.n	80182de <_strtod_l+0xe6>
 801830e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8018490 <_strtod_l+0x298>
 8018312:	e7e4      	b.n	80182de <_strtod_l+0xe6>
 8018314:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8018318:	f04f 3aff 	mov.w	sl, #4294967295
 801831c:	e7df      	b.n	80182de <_strtod_l+0xe6>
 801831e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018320:	1c5a      	adds	r2, r3, #1
 8018322:	9219      	str	r2, [sp, #100]	@ 0x64
 8018324:	785b      	ldrb	r3, [r3, #1]
 8018326:	2b30      	cmp	r3, #48	@ 0x30
 8018328:	d0f9      	beq.n	801831e <_strtod_l+0x126>
 801832a:	2b00      	cmp	r3, #0
 801832c:	d09d      	beq.n	801826a <_strtod_l+0x72>
 801832e:	2301      	movs	r3, #1
 8018330:	2700      	movs	r7, #0
 8018332:	9308      	str	r3, [sp, #32]
 8018334:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018336:	930c      	str	r3, [sp, #48]	@ 0x30
 8018338:	970b      	str	r7, [sp, #44]	@ 0x2c
 801833a:	46b9      	mov	r9, r7
 801833c:	220a      	movs	r2, #10
 801833e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8018340:	7805      	ldrb	r5, [r0, #0]
 8018342:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8018346:	b2d9      	uxtb	r1, r3
 8018348:	2909      	cmp	r1, #9
 801834a:	d928      	bls.n	801839e <_strtod_l+0x1a6>
 801834c:	494f      	ldr	r1, [pc, #316]	@ (801848c <_strtod_l+0x294>)
 801834e:	2201      	movs	r2, #1
 8018350:	f001 fc0e 	bl	8019b70 <strncmp>
 8018354:	2800      	cmp	r0, #0
 8018356:	d032      	beq.n	80183be <_strtod_l+0x1c6>
 8018358:	2000      	movs	r0, #0
 801835a:	462a      	mov	r2, r5
 801835c:	900a      	str	r0, [sp, #40]	@ 0x28
 801835e:	464d      	mov	r5, r9
 8018360:	4603      	mov	r3, r0
 8018362:	2a65      	cmp	r2, #101	@ 0x65
 8018364:	d001      	beq.n	801836a <_strtod_l+0x172>
 8018366:	2a45      	cmp	r2, #69	@ 0x45
 8018368:	d114      	bne.n	8018394 <_strtod_l+0x19c>
 801836a:	b91d      	cbnz	r5, 8018374 <_strtod_l+0x17c>
 801836c:	9a08      	ldr	r2, [sp, #32]
 801836e:	4302      	orrs	r2, r0
 8018370:	d096      	beq.n	80182a0 <_strtod_l+0xa8>
 8018372:	2500      	movs	r5, #0
 8018374:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8018376:	1c62      	adds	r2, r4, #1
 8018378:	9219      	str	r2, [sp, #100]	@ 0x64
 801837a:	7862      	ldrb	r2, [r4, #1]
 801837c:	2a2b      	cmp	r2, #43	@ 0x2b
 801837e:	d07a      	beq.n	8018476 <_strtod_l+0x27e>
 8018380:	2a2d      	cmp	r2, #45	@ 0x2d
 8018382:	d07e      	beq.n	8018482 <_strtod_l+0x28a>
 8018384:	f04f 0c00 	mov.w	ip, #0
 8018388:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801838c:	2909      	cmp	r1, #9
 801838e:	f240 8085 	bls.w	801849c <_strtod_l+0x2a4>
 8018392:	9419      	str	r4, [sp, #100]	@ 0x64
 8018394:	f04f 0800 	mov.w	r8, #0
 8018398:	e0a5      	b.n	80184e6 <_strtod_l+0x2ee>
 801839a:	2300      	movs	r3, #0
 801839c:	e7c8      	b.n	8018330 <_strtod_l+0x138>
 801839e:	f1b9 0f08 	cmp.w	r9, #8
 80183a2:	bfd8      	it	le
 80183a4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80183a6:	f100 0001 	add.w	r0, r0, #1
 80183aa:	bfda      	itte	le
 80183ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80183b0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80183b2:	fb02 3707 	mlagt	r7, r2, r7, r3
 80183b6:	f109 0901 	add.w	r9, r9, #1
 80183ba:	9019      	str	r0, [sp, #100]	@ 0x64
 80183bc:	e7bf      	b.n	801833e <_strtod_l+0x146>
 80183be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80183c0:	1c5a      	adds	r2, r3, #1
 80183c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80183c4:	785a      	ldrb	r2, [r3, #1]
 80183c6:	f1b9 0f00 	cmp.w	r9, #0
 80183ca:	d03b      	beq.n	8018444 <_strtod_l+0x24c>
 80183cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80183ce:	464d      	mov	r5, r9
 80183d0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80183d4:	2b09      	cmp	r3, #9
 80183d6:	d912      	bls.n	80183fe <_strtod_l+0x206>
 80183d8:	2301      	movs	r3, #1
 80183da:	e7c2      	b.n	8018362 <_strtod_l+0x16a>
 80183dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80183de:	1c5a      	adds	r2, r3, #1
 80183e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80183e2:	785a      	ldrb	r2, [r3, #1]
 80183e4:	3001      	adds	r0, #1
 80183e6:	2a30      	cmp	r2, #48	@ 0x30
 80183e8:	d0f8      	beq.n	80183dc <_strtod_l+0x1e4>
 80183ea:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80183ee:	2b08      	cmp	r3, #8
 80183f0:	f200 84d2 	bhi.w	8018d98 <_strtod_l+0xba0>
 80183f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80183f6:	900a      	str	r0, [sp, #40]	@ 0x28
 80183f8:	2000      	movs	r0, #0
 80183fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80183fc:	4605      	mov	r5, r0
 80183fe:	3a30      	subs	r2, #48	@ 0x30
 8018400:	f100 0301 	add.w	r3, r0, #1
 8018404:	d018      	beq.n	8018438 <_strtod_l+0x240>
 8018406:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018408:	4419      	add	r1, r3
 801840a:	910a      	str	r1, [sp, #40]	@ 0x28
 801840c:	462e      	mov	r6, r5
 801840e:	f04f 0e0a 	mov.w	lr, #10
 8018412:	1c71      	adds	r1, r6, #1
 8018414:	eba1 0c05 	sub.w	ip, r1, r5
 8018418:	4563      	cmp	r3, ip
 801841a:	dc15      	bgt.n	8018448 <_strtod_l+0x250>
 801841c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8018420:	182b      	adds	r3, r5, r0
 8018422:	2b08      	cmp	r3, #8
 8018424:	f105 0501 	add.w	r5, r5, #1
 8018428:	4405      	add	r5, r0
 801842a:	dc1a      	bgt.n	8018462 <_strtod_l+0x26a>
 801842c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801842e:	230a      	movs	r3, #10
 8018430:	fb03 2301 	mla	r3, r3, r1, r2
 8018434:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018436:	2300      	movs	r3, #0
 8018438:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801843a:	1c51      	adds	r1, r2, #1
 801843c:	9119      	str	r1, [sp, #100]	@ 0x64
 801843e:	7852      	ldrb	r2, [r2, #1]
 8018440:	4618      	mov	r0, r3
 8018442:	e7c5      	b.n	80183d0 <_strtod_l+0x1d8>
 8018444:	4648      	mov	r0, r9
 8018446:	e7ce      	b.n	80183e6 <_strtod_l+0x1ee>
 8018448:	2e08      	cmp	r6, #8
 801844a:	dc05      	bgt.n	8018458 <_strtod_l+0x260>
 801844c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801844e:	fb0e f606 	mul.w	r6, lr, r6
 8018452:	960b      	str	r6, [sp, #44]	@ 0x2c
 8018454:	460e      	mov	r6, r1
 8018456:	e7dc      	b.n	8018412 <_strtod_l+0x21a>
 8018458:	2910      	cmp	r1, #16
 801845a:	bfd8      	it	le
 801845c:	fb0e f707 	mulle.w	r7, lr, r7
 8018460:	e7f8      	b.n	8018454 <_strtod_l+0x25c>
 8018462:	2b0f      	cmp	r3, #15
 8018464:	bfdc      	itt	le
 8018466:	230a      	movle	r3, #10
 8018468:	fb03 2707 	mlale	r7, r3, r7, r2
 801846c:	e7e3      	b.n	8018436 <_strtod_l+0x23e>
 801846e:	2300      	movs	r3, #0
 8018470:	930a      	str	r3, [sp, #40]	@ 0x28
 8018472:	2301      	movs	r3, #1
 8018474:	e77a      	b.n	801836c <_strtod_l+0x174>
 8018476:	f04f 0c00 	mov.w	ip, #0
 801847a:	1ca2      	adds	r2, r4, #2
 801847c:	9219      	str	r2, [sp, #100]	@ 0x64
 801847e:	78a2      	ldrb	r2, [r4, #2]
 8018480:	e782      	b.n	8018388 <_strtod_l+0x190>
 8018482:	f04f 0c01 	mov.w	ip, #1
 8018486:	e7f8      	b.n	801847a <_strtod_l+0x282>
 8018488:	0801f480 	.word	0x0801f480
 801848c:	0801f280 	.word	0x0801f280
 8018490:	7ff00000 	.word	0x7ff00000
 8018494:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018496:	1c51      	adds	r1, r2, #1
 8018498:	9119      	str	r1, [sp, #100]	@ 0x64
 801849a:	7852      	ldrb	r2, [r2, #1]
 801849c:	2a30      	cmp	r2, #48	@ 0x30
 801849e:	d0f9      	beq.n	8018494 <_strtod_l+0x29c>
 80184a0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80184a4:	2908      	cmp	r1, #8
 80184a6:	f63f af75 	bhi.w	8018394 <_strtod_l+0x19c>
 80184aa:	3a30      	subs	r2, #48	@ 0x30
 80184ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80184ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80184b0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80184b2:	f04f 080a 	mov.w	r8, #10
 80184b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80184b8:	1c56      	adds	r6, r2, #1
 80184ba:	9619      	str	r6, [sp, #100]	@ 0x64
 80184bc:	7852      	ldrb	r2, [r2, #1]
 80184be:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80184c2:	f1be 0f09 	cmp.w	lr, #9
 80184c6:	d939      	bls.n	801853c <_strtod_l+0x344>
 80184c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80184ca:	1a76      	subs	r6, r6, r1
 80184cc:	2e08      	cmp	r6, #8
 80184ce:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80184d2:	dc03      	bgt.n	80184dc <_strtod_l+0x2e4>
 80184d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80184d6:	4588      	cmp	r8, r1
 80184d8:	bfa8      	it	ge
 80184da:	4688      	movge	r8, r1
 80184dc:	f1bc 0f00 	cmp.w	ip, #0
 80184e0:	d001      	beq.n	80184e6 <_strtod_l+0x2ee>
 80184e2:	f1c8 0800 	rsb	r8, r8, #0
 80184e6:	2d00      	cmp	r5, #0
 80184e8:	d14e      	bne.n	8018588 <_strtod_l+0x390>
 80184ea:	9908      	ldr	r1, [sp, #32]
 80184ec:	4308      	orrs	r0, r1
 80184ee:	f47f aebc 	bne.w	801826a <_strtod_l+0x72>
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	f47f aed4 	bne.w	80182a0 <_strtod_l+0xa8>
 80184f8:	2a69      	cmp	r2, #105	@ 0x69
 80184fa:	d028      	beq.n	801854e <_strtod_l+0x356>
 80184fc:	dc25      	bgt.n	801854a <_strtod_l+0x352>
 80184fe:	2a49      	cmp	r2, #73	@ 0x49
 8018500:	d025      	beq.n	801854e <_strtod_l+0x356>
 8018502:	2a4e      	cmp	r2, #78	@ 0x4e
 8018504:	f47f aecc 	bne.w	80182a0 <_strtod_l+0xa8>
 8018508:	499a      	ldr	r1, [pc, #616]	@ (8018774 <_strtod_l+0x57c>)
 801850a:	a819      	add	r0, sp, #100	@ 0x64
 801850c:	f002 fd40 	bl	801af90 <__match>
 8018510:	2800      	cmp	r0, #0
 8018512:	f43f aec5 	beq.w	80182a0 <_strtod_l+0xa8>
 8018516:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018518:	781b      	ldrb	r3, [r3, #0]
 801851a:	2b28      	cmp	r3, #40	@ 0x28
 801851c:	d12e      	bne.n	801857c <_strtod_l+0x384>
 801851e:	4996      	ldr	r1, [pc, #600]	@ (8018778 <_strtod_l+0x580>)
 8018520:	aa1c      	add	r2, sp, #112	@ 0x70
 8018522:	a819      	add	r0, sp, #100	@ 0x64
 8018524:	f002 fd48 	bl	801afb8 <__hexnan>
 8018528:	2805      	cmp	r0, #5
 801852a:	d127      	bne.n	801857c <_strtod_l+0x384>
 801852c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801852e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8018532:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8018536:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801853a:	e696      	b.n	801826a <_strtod_l+0x72>
 801853c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801853e:	fb08 2101 	mla	r1, r8, r1, r2
 8018542:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8018546:	9209      	str	r2, [sp, #36]	@ 0x24
 8018548:	e7b5      	b.n	80184b6 <_strtod_l+0x2be>
 801854a:	2a6e      	cmp	r2, #110	@ 0x6e
 801854c:	e7da      	b.n	8018504 <_strtod_l+0x30c>
 801854e:	498b      	ldr	r1, [pc, #556]	@ (801877c <_strtod_l+0x584>)
 8018550:	a819      	add	r0, sp, #100	@ 0x64
 8018552:	f002 fd1d 	bl	801af90 <__match>
 8018556:	2800      	cmp	r0, #0
 8018558:	f43f aea2 	beq.w	80182a0 <_strtod_l+0xa8>
 801855c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801855e:	4988      	ldr	r1, [pc, #544]	@ (8018780 <_strtod_l+0x588>)
 8018560:	3b01      	subs	r3, #1
 8018562:	a819      	add	r0, sp, #100	@ 0x64
 8018564:	9319      	str	r3, [sp, #100]	@ 0x64
 8018566:	f002 fd13 	bl	801af90 <__match>
 801856a:	b910      	cbnz	r0, 8018572 <_strtod_l+0x37a>
 801856c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801856e:	3301      	adds	r3, #1
 8018570:	9319      	str	r3, [sp, #100]	@ 0x64
 8018572:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8018790 <_strtod_l+0x598>
 8018576:	f04f 0a00 	mov.w	sl, #0
 801857a:	e676      	b.n	801826a <_strtod_l+0x72>
 801857c:	4881      	ldr	r0, [pc, #516]	@ (8018784 <_strtod_l+0x58c>)
 801857e:	f001 fbd3 	bl	8019d28 <nan>
 8018582:	ec5b ab10 	vmov	sl, fp, d0
 8018586:	e670      	b.n	801826a <_strtod_l+0x72>
 8018588:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801858a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801858c:	eba8 0303 	sub.w	r3, r8, r3
 8018590:	f1b9 0f00 	cmp.w	r9, #0
 8018594:	bf08      	it	eq
 8018596:	46a9      	moveq	r9, r5
 8018598:	2d10      	cmp	r5, #16
 801859a:	9309      	str	r3, [sp, #36]	@ 0x24
 801859c:	462c      	mov	r4, r5
 801859e:	bfa8      	it	ge
 80185a0:	2410      	movge	r4, #16
 80185a2:	f7ef ffdf 	bl	8008564 <__aeabi_ui2d>
 80185a6:	2d09      	cmp	r5, #9
 80185a8:	4682      	mov	sl, r0
 80185aa:	468b      	mov	fp, r1
 80185ac:	dc13      	bgt.n	80185d6 <_strtod_l+0x3de>
 80185ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	f43f ae5a 	beq.w	801826a <_strtod_l+0x72>
 80185b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80185b8:	dd78      	ble.n	80186ac <_strtod_l+0x4b4>
 80185ba:	2b16      	cmp	r3, #22
 80185bc:	dc5f      	bgt.n	801867e <_strtod_l+0x486>
 80185be:	4972      	ldr	r1, [pc, #456]	@ (8018788 <_strtod_l+0x590>)
 80185c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80185c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80185c8:	4652      	mov	r2, sl
 80185ca:	465b      	mov	r3, fp
 80185cc:	f7f0 f844 	bl	8008658 <__aeabi_dmul>
 80185d0:	4682      	mov	sl, r0
 80185d2:	468b      	mov	fp, r1
 80185d4:	e649      	b.n	801826a <_strtod_l+0x72>
 80185d6:	4b6c      	ldr	r3, [pc, #432]	@ (8018788 <_strtod_l+0x590>)
 80185d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80185dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80185e0:	f7f0 f83a 	bl	8008658 <__aeabi_dmul>
 80185e4:	4682      	mov	sl, r0
 80185e6:	4638      	mov	r0, r7
 80185e8:	468b      	mov	fp, r1
 80185ea:	f7ef ffbb 	bl	8008564 <__aeabi_ui2d>
 80185ee:	4602      	mov	r2, r0
 80185f0:	460b      	mov	r3, r1
 80185f2:	4650      	mov	r0, sl
 80185f4:	4659      	mov	r1, fp
 80185f6:	f7ef fe79 	bl	80082ec <__adddf3>
 80185fa:	2d0f      	cmp	r5, #15
 80185fc:	4682      	mov	sl, r0
 80185fe:	468b      	mov	fp, r1
 8018600:	ddd5      	ble.n	80185ae <_strtod_l+0x3b6>
 8018602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018604:	1b2c      	subs	r4, r5, r4
 8018606:	441c      	add	r4, r3
 8018608:	2c00      	cmp	r4, #0
 801860a:	f340 8093 	ble.w	8018734 <_strtod_l+0x53c>
 801860e:	f014 030f 	ands.w	r3, r4, #15
 8018612:	d00a      	beq.n	801862a <_strtod_l+0x432>
 8018614:	495c      	ldr	r1, [pc, #368]	@ (8018788 <_strtod_l+0x590>)
 8018616:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801861a:	4652      	mov	r2, sl
 801861c:	465b      	mov	r3, fp
 801861e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018622:	f7f0 f819 	bl	8008658 <__aeabi_dmul>
 8018626:	4682      	mov	sl, r0
 8018628:	468b      	mov	fp, r1
 801862a:	f034 040f 	bics.w	r4, r4, #15
 801862e:	d073      	beq.n	8018718 <_strtod_l+0x520>
 8018630:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8018634:	dd49      	ble.n	80186ca <_strtod_l+0x4d2>
 8018636:	2400      	movs	r4, #0
 8018638:	46a0      	mov	r8, r4
 801863a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801863c:	46a1      	mov	r9, r4
 801863e:	9a05      	ldr	r2, [sp, #20]
 8018640:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8018790 <_strtod_l+0x598>
 8018644:	2322      	movs	r3, #34	@ 0x22
 8018646:	6013      	str	r3, [r2, #0]
 8018648:	f04f 0a00 	mov.w	sl, #0
 801864c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801864e:	2b00      	cmp	r3, #0
 8018650:	f43f ae0b 	beq.w	801826a <_strtod_l+0x72>
 8018654:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018656:	9805      	ldr	r0, [sp, #20]
 8018658:	f002 fd9c 	bl	801b194 <_Bfree>
 801865c:	9805      	ldr	r0, [sp, #20]
 801865e:	4649      	mov	r1, r9
 8018660:	f002 fd98 	bl	801b194 <_Bfree>
 8018664:	9805      	ldr	r0, [sp, #20]
 8018666:	4641      	mov	r1, r8
 8018668:	f002 fd94 	bl	801b194 <_Bfree>
 801866c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801866e:	9805      	ldr	r0, [sp, #20]
 8018670:	f002 fd90 	bl	801b194 <_Bfree>
 8018674:	9805      	ldr	r0, [sp, #20]
 8018676:	4621      	mov	r1, r4
 8018678:	f002 fd8c 	bl	801b194 <_Bfree>
 801867c:	e5f5      	b.n	801826a <_strtod_l+0x72>
 801867e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018680:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8018684:	4293      	cmp	r3, r2
 8018686:	dbbc      	blt.n	8018602 <_strtod_l+0x40a>
 8018688:	4c3f      	ldr	r4, [pc, #252]	@ (8018788 <_strtod_l+0x590>)
 801868a:	f1c5 050f 	rsb	r5, r5, #15
 801868e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8018692:	4652      	mov	r2, sl
 8018694:	465b      	mov	r3, fp
 8018696:	e9d1 0100 	ldrd	r0, r1, [r1]
 801869a:	f7ef ffdd 	bl	8008658 <__aeabi_dmul>
 801869e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80186a0:	1b5d      	subs	r5, r3, r5
 80186a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80186a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80186aa:	e78f      	b.n	80185cc <_strtod_l+0x3d4>
 80186ac:	3316      	adds	r3, #22
 80186ae:	dba8      	blt.n	8018602 <_strtod_l+0x40a>
 80186b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80186b2:	eba3 0808 	sub.w	r8, r3, r8
 80186b6:	4b34      	ldr	r3, [pc, #208]	@ (8018788 <_strtod_l+0x590>)
 80186b8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80186bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80186c0:	4650      	mov	r0, sl
 80186c2:	4659      	mov	r1, fp
 80186c4:	f7f0 f8f2 	bl	80088ac <__aeabi_ddiv>
 80186c8:	e782      	b.n	80185d0 <_strtod_l+0x3d8>
 80186ca:	2300      	movs	r3, #0
 80186cc:	4f2f      	ldr	r7, [pc, #188]	@ (801878c <_strtod_l+0x594>)
 80186ce:	1124      	asrs	r4, r4, #4
 80186d0:	4650      	mov	r0, sl
 80186d2:	4659      	mov	r1, fp
 80186d4:	461e      	mov	r6, r3
 80186d6:	2c01      	cmp	r4, #1
 80186d8:	dc21      	bgt.n	801871e <_strtod_l+0x526>
 80186da:	b10b      	cbz	r3, 80186e0 <_strtod_l+0x4e8>
 80186dc:	4682      	mov	sl, r0
 80186de:	468b      	mov	fp, r1
 80186e0:	492a      	ldr	r1, [pc, #168]	@ (801878c <_strtod_l+0x594>)
 80186e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80186e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80186ea:	4652      	mov	r2, sl
 80186ec:	465b      	mov	r3, fp
 80186ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80186f2:	f7ef ffb1 	bl	8008658 <__aeabi_dmul>
 80186f6:	4b26      	ldr	r3, [pc, #152]	@ (8018790 <_strtod_l+0x598>)
 80186f8:	460a      	mov	r2, r1
 80186fa:	400b      	ands	r3, r1
 80186fc:	4925      	ldr	r1, [pc, #148]	@ (8018794 <_strtod_l+0x59c>)
 80186fe:	428b      	cmp	r3, r1
 8018700:	4682      	mov	sl, r0
 8018702:	d898      	bhi.n	8018636 <_strtod_l+0x43e>
 8018704:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8018708:	428b      	cmp	r3, r1
 801870a:	bf86      	itte	hi
 801870c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8018798 <_strtod_l+0x5a0>
 8018710:	f04f 3aff 	movhi.w	sl, #4294967295
 8018714:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8018718:	2300      	movs	r3, #0
 801871a:	9308      	str	r3, [sp, #32]
 801871c:	e076      	b.n	801880c <_strtod_l+0x614>
 801871e:	07e2      	lsls	r2, r4, #31
 8018720:	d504      	bpl.n	801872c <_strtod_l+0x534>
 8018722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018726:	f7ef ff97 	bl	8008658 <__aeabi_dmul>
 801872a:	2301      	movs	r3, #1
 801872c:	3601      	adds	r6, #1
 801872e:	1064      	asrs	r4, r4, #1
 8018730:	3708      	adds	r7, #8
 8018732:	e7d0      	b.n	80186d6 <_strtod_l+0x4de>
 8018734:	d0f0      	beq.n	8018718 <_strtod_l+0x520>
 8018736:	4264      	negs	r4, r4
 8018738:	f014 020f 	ands.w	r2, r4, #15
 801873c:	d00a      	beq.n	8018754 <_strtod_l+0x55c>
 801873e:	4b12      	ldr	r3, [pc, #72]	@ (8018788 <_strtod_l+0x590>)
 8018740:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018744:	4650      	mov	r0, sl
 8018746:	4659      	mov	r1, fp
 8018748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801874c:	f7f0 f8ae 	bl	80088ac <__aeabi_ddiv>
 8018750:	4682      	mov	sl, r0
 8018752:	468b      	mov	fp, r1
 8018754:	1124      	asrs	r4, r4, #4
 8018756:	d0df      	beq.n	8018718 <_strtod_l+0x520>
 8018758:	2c1f      	cmp	r4, #31
 801875a:	dd1f      	ble.n	801879c <_strtod_l+0x5a4>
 801875c:	2400      	movs	r4, #0
 801875e:	46a0      	mov	r8, r4
 8018760:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018762:	46a1      	mov	r9, r4
 8018764:	9a05      	ldr	r2, [sp, #20]
 8018766:	2322      	movs	r3, #34	@ 0x22
 8018768:	f04f 0a00 	mov.w	sl, #0
 801876c:	f04f 0b00 	mov.w	fp, #0
 8018770:	6013      	str	r3, [r2, #0]
 8018772:	e76b      	b.n	801864c <_strtod_l+0x454>
 8018774:	0801f28f 	.word	0x0801f28f
 8018778:	0801f46c 	.word	0x0801f46c
 801877c:	0801f287 	.word	0x0801f287
 8018780:	0801f2bf 	.word	0x0801f2bf
 8018784:	0801f469 	.word	0x0801f469
 8018788:	0801f5f8 	.word	0x0801f5f8
 801878c:	0801f5d0 	.word	0x0801f5d0
 8018790:	7ff00000 	.word	0x7ff00000
 8018794:	7ca00000 	.word	0x7ca00000
 8018798:	7fefffff 	.word	0x7fefffff
 801879c:	f014 0310 	ands.w	r3, r4, #16
 80187a0:	bf18      	it	ne
 80187a2:	236a      	movne	r3, #106	@ 0x6a
 80187a4:	4ea9      	ldr	r6, [pc, #676]	@ (8018a4c <_strtod_l+0x854>)
 80187a6:	9308      	str	r3, [sp, #32]
 80187a8:	4650      	mov	r0, sl
 80187aa:	4659      	mov	r1, fp
 80187ac:	2300      	movs	r3, #0
 80187ae:	07e7      	lsls	r7, r4, #31
 80187b0:	d504      	bpl.n	80187bc <_strtod_l+0x5c4>
 80187b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80187b6:	f7ef ff4f 	bl	8008658 <__aeabi_dmul>
 80187ba:	2301      	movs	r3, #1
 80187bc:	1064      	asrs	r4, r4, #1
 80187be:	f106 0608 	add.w	r6, r6, #8
 80187c2:	d1f4      	bne.n	80187ae <_strtod_l+0x5b6>
 80187c4:	b10b      	cbz	r3, 80187ca <_strtod_l+0x5d2>
 80187c6:	4682      	mov	sl, r0
 80187c8:	468b      	mov	fp, r1
 80187ca:	9b08      	ldr	r3, [sp, #32]
 80187cc:	b1b3      	cbz	r3, 80187fc <_strtod_l+0x604>
 80187ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80187d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	4659      	mov	r1, fp
 80187da:	dd0f      	ble.n	80187fc <_strtod_l+0x604>
 80187dc:	2b1f      	cmp	r3, #31
 80187de:	dd56      	ble.n	801888e <_strtod_l+0x696>
 80187e0:	2b34      	cmp	r3, #52	@ 0x34
 80187e2:	bfde      	ittt	le
 80187e4:	f04f 33ff 	movle.w	r3, #4294967295
 80187e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80187ec:	4093      	lslle	r3, r2
 80187ee:	f04f 0a00 	mov.w	sl, #0
 80187f2:	bfcc      	ite	gt
 80187f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80187f8:	ea03 0b01 	andle.w	fp, r3, r1
 80187fc:	2200      	movs	r2, #0
 80187fe:	2300      	movs	r3, #0
 8018800:	4650      	mov	r0, sl
 8018802:	4659      	mov	r1, fp
 8018804:	f7f0 f990 	bl	8008b28 <__aeabi_dcmpeq>
 8018808:	2800      	cmp	r0, #0
 801880a:	d1a7      	bne.n	801875c <_strtod_l+0x564>
 801880c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801880e:	9300      	str	r3, [sp, #0]
 8018810:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018812:	9805      	ldr	r0, [sp, #20]
 8018814:	462b      	mov	r3, r5
 8018816:	464a      	mov	r2, r9
 8018818:	f002 fd24 	bl	801b264 <__s2b>
 801881c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801881e:	2800      	cmp	r0, #0
 8018820:	f43f af09 	beq.w	8018636 <_strtod_l+0x43e>
 8018824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018826:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018828:	2a00      	cmp	r2, #0
 801882a:	eba3 0308 	sub.w	r3, r3, r8
 801882e:	bfa8      	it	ge
 8018830:	2300      	movge	r3, #0
 8018832:	9312      	str	r3, [sp, #72]	@ 0x48
 8018834:	2400      	movs	r4, #0
 8018836:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801883a:	9316      	str	r3, [sp, #88]	@ 0x58
 801883c:	46a0      	mov	r8, r4
 801883e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018840:	9805      	ldr	r0, [sp, #20]
 8018842:	6859      	ldr	r1, [r3, #4]
 8018844:	f002 fc66 	bl	801b114 <_Balloc>
 8018848:	4681      	mov	r9, r0
 801884a:	2800      	cmp	r0, #0
 801884c:	f43f aef7 	beq.w	801863e <_strtod_l+0x446>
 8018850:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018852:	691a      	ldr	r2, [r3, #16]
 8018854:	3202      	adds	r2, #2
 8018856:	f103 010c 	add.w	r1, r3, #12
 801885a:	0092      	lsls	r2, r2, #2
 801885c:	300c      	adds	r0, #12
 801885e:	f001 fa52 	bl	8019d06 <memcpy>
 8018862:	ec4b ab10 	vmov	d0, sl, fp
 8018866:	9805      	ldr	r0, [sp, #20]
 8018868:	aa1c      	add	r2, sp, #112	@ 0x70
 801886a:	a91b      	add	r1, sp, #108	@ 0x6c
 801886c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8018870:	f003 f82c 	bl	801b8cc <__d2b>
 8018874:	901a      	str	r0, [sp, #104]	@ 0x68
 8018876:	2800      	cmp	r0, #0
 8018878:	f43f aee1 	beq.w	801863e <_strtod_l+0x446>
 801887c:	9805      	ldr	r0, [sp, #20]
 801887e:	2101      	movs	r1, #1
 8018880:	f002 fd86 	bl	801b390 <__i2b>
 8018884:	4680      	mov	r8, r0
 8018886:	b948      	cbnz	r0, 801889c <_strtod_l+0x6a4>
 8018888:	f04f 0800 	mov.w	r8, #0
 801888c:	e6d7      	b.n	801863e <_strtod_l+0x446>
 801888e:	f04f 32ff 	mov.w	r2, #4294967295
 8018892:	fa02 f303 	lsl.w	r3, r2, r3
 8018896:	ea03 0a0a 	and.w	sl, r3, sl
 801889a:	e7af      	b.n	80187fc <_strtod_l+0x604>
 801889c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801889e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80188a0:	2d00      	cmp	r5, #0
 80188a2:	bfab      	itete	ge
 80188a4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80188a6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80188a8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80188aa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80188ac:	bfac      	ite	ge
 80188ae:	18ef      	addge	r7, r5, r3
 80188b0:	1b5e      	sublt	r6, r3, r5
 80188b2:	9b08      	ldr	r3, [sp, #32]
 80188b4:	1aed      	subs	r5, r5, r3
 80188b6:	4415      	add	r5, r2
 80188b8:	4b65      	ldr	r3, [pc, #404]	@ (8018a50 <_strtod_l+0x858>)
 80188ba:	3d01      	subs	r5, #1
 80188bc:	429d      	cmp	r5, r3
 80188be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80188c2:	da50      	bge.n	8018966 <_strtod_l+0x76e>
 80188c4:	1b5b      	subs	r3, r3, r5
 80188c6:	2b1f      	cmp	r3, #31
 80188c8:	eba2 0203 	sub.w	r2, r2, r3
 80188cc:	f04f 0101 	mov.w	r1, #1
 80188d0:	dc3d      	bgt.n	801894e <_strtod_l+0x756>
 80188d2:	fa01 f303 	lsl.w	r3, r1, r3
 80188d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80188d8:	2300      	movs	r3, #0
 80188da:	9310      	str	r3, [sp, #64]	@ 0x40
 80188dc:	18bd      	adds	r5, r7, r2
 80188de:	9b08      	ldr	r3, [sp, #32]
 80188e0:	42af      	cmp	r7, r5
 80188e2:	4416      	add	r6, r2
 80188e4:	441e      	add	r6, r3
 80188e6:	463b      	mov	r3, r7
 80188e8:	bfa8      	it	ge
 80188ea:	462b      	movge	r3, r5
 80188ec:	42b3      	cmp	r3, r6
 80188ee:	bfa8      	it	ge
 80188f0:	4633      	movge	r3, r6
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	bfc2      	ittt	gt
 80188f6:	1aed      	subgt	r5, r5, r3
 80188f8:	1af6      	subgt	r6, r6, r3
 80188fa:	1aff      	subgt	r7, r7, r3
 80188fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80188fe:	2b00      	cmp	r3, #0
 8018900:	dd16      	ble.n	8018930 <_strtod_l+0x738>
 8018902:	4641      	mov	r1, r8
 8018904:	9805      	ldr	r0, [sp, #20]
 8018906:	461a      	mov	r2, r3
 8018908:	f002 fdfa 	bl	801b500 <__pow5mult>
 801890c:	4680      	mov	r8, r0
 801890e:	2800      	cmp	r0, #0
 8018910:	d0ba      	beq.n	8018888 <_strtod_l+0x690>
 8018912:	4601      	mov	r1, r0
 8018914:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8018916:	9805      	ldr	r0, [sp, #20]
 8018918:	f002 fd50 	bl	801b3bc <__multiply>
 801891c:	900a      	str	r0, [sp, #40]	@ 0x28
 801891e:	2800      	cmp	r0, #0
 8018920:	f43f ae8d 	beq.w	801863e <_strtod_l+0x446>
 8018924:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018926:	9805      	ldr	r0, [sp, #20]
 8018928:	f002 fc34 	bl	801b194 <_Bfree>
 801892c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801892e:	931a      	str	r3, [sp, #104]	@ 0x68
 8018930:	2d00      	cmp	r5, #0
 8018932:	dc1d      	bgt.n	8018970 <_strtod_l+0x778>
 8018934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018936:	2b00      	cmp	r3, #0
 8018938:	dd23      	ble.n	8018982 <_strtod_l+0x78a>
 801893a:	4649      	mov	r1, r9
 801893c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801893e:	9805      	ldr	r0, [sp, #20]
 8018940:	f002 fdde 	bl	801b500 <__pow5mult>
 8018944:	4681      	mov	r9, r0
 8018946:	b9e0      	cbnz	r0, 8018982 <_strtod_l+0x78a>
 8018948:	f04f 0900 	mov.w	r9, #0
 801894c:	e677      	b.n	801863e <_strtod_l+0x446>
 801894e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8018952:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8018956:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801895a:	35e2      	adds	r5, #226	@ 0xe2
 801895c:	fa01 f305 	lsl.w	r3, r1, r5
 8018960:	9310      	str	r3, [sp, #64]	@ 0x40
 8018962:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018964:	e7ba      	b.n	80188dc <_strtod_l+0x6e4>
 8018966:	2300      	movs	r3, #0
 8018968:	9310      	str	r3, [sp, #64]	@ 0x40
 801896a:	2301      	movs	r3, #1
 801896c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801896e:	e7b5      	b.n	80188dc <_strtod_l+0x6e4>
 8018970:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018972:	9805      	ldr	r0, [sp, #20]
 8018974:	462a      	mov	r2, r5
 8018976:	f002 fe1d 	bl	801b5b4 <__lshift>
 801897a:	901a      	str	r0, [sp, #104]	@ 0x68
 801897c:	2800      	cmp	r0, #0
 801897e:	d1d9      	bne.n	8018934 <_strtod_l+0x73c>
 8018980:	e65d      	b.n	801863e <_strtod_l+0x446>
 8018982:	2e00      	cmp	r6, #0
 8018984:	dd07      	ble.n	8018996 <_strtod_l+0x79e>
 8018986:	4649      	mov	r1, r9
 8018988:	9805      	ldr	r0, [sp, #20]
 801898a:	4632      	mov	r2, r6
 801898c:	f002 fe12 	bl	801b5b4 <__lshift>
 8018990:	4681      	mov	r9, r0
 8018992:	2800      	cmp	r0, #0
 8018994:	d0d8      	beq.n	8018948 <_strtod_l+0x750>
 8018996:	2f00      	cmp	r7, #0
 8018998:	dd08      	ble.n	80189ac <_strtod_l+0x7b4>
 801899a:	4641      	mov	r1, r8
 801899c:	9805      	ldr	r0, [sp, #20]
 801899e:	463a      	mov	r2, r7
 80189a0:	f002 fe08 	bl	801b5b4 <__lshift>
 80189a4:	4680      	mov	r8, r0
 80189a6:	2800      	cmp	r0, #0
 80189a8:	f43f ae49 	beq.w	801863e <_strtod_l+0x446>
 80189ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80189ae:	9805      	ldr	r0, [sp, #20]
 80189b0:	464a      	mov	r2, r9
 80189b2:	f002 fe87 	bl	801b6c4 <__mdiff>
 80189b6:	4604      	mov	r4, r0
 80189b8:	2800      	cmp	r0, #0
 80189ba:	f43f ae40 	beq.w	801863e <_strtod_l+0x446>
 80189be:	68c3      	ldr	r3, [r0, #12]
 80189c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80189c2:	2300      	movs	r3, #0
 80189c4:	60c3      	str	r3, [r0, #12]
 80189c6:	4641      	mov	r1, r8
 80189c8:	f002 fe60 	bl	801b68c <__mcmp>
 80189cc:	2800      	cmp	r0, #0
 80189ce:	da45      	bge.n	8018a5c <_strtod_l+0x864>
 80189d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80189d2:	ea53 030a 	orrs.w	r3, r3, sl
 80189d6:	d16b      	bne.n	8018ab0 <_strtod_l+0x8b8>
 80189d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d167      	bne.n	8018ab0 <_strtod_l+0x8b8>
 80189e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80189e4:	0d1b      	lsrs	r3, r3, #20
 80189e6:	051b      	lsls	r3, r3, #20
 80189e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80189ec:	d960      	bls.n	8018ab0 <_strtod_l+0x8b8>
 80189ee:	6963      	ldr	r3, [r4, #20]
 80189f0:	b913      	cbnz	r3, 80189f8 <_strtod_l+0x800>
 80189f2:	6923      	ldr	r3, [r4, #16]
 80189f4:	2b01      	cmp	r3, #1
 80189f6:	dd5b      	ble.n	8018ab0 <_strtod_l+0x8b8>
 80189f8:	4621      	mov	r1, r4
 80189fa:	2201      	movs	r2, #1
 80189fc:	9805      	ldr	r0, [sp, #20]
 80189fe:	f002 fdd9 	bl	801b5b4 <__lshift>
 8018a02:	4641      	mov	r1, r8
 8018a04:	4604      	mov	r4, r0
 8018a06:	f002 fe41 	bl	801b68c <__mcmp>
 8018a0a:	2800      	cmp	r0, #0
 8018a0c:	dd50      	ble.n	8018ab0 <_strtod_l+0x8b8>
 8018a0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018a12:	9a08      	ldr	r2, [sp, #32]
 8018a14:	0d1b      	lsrs	r3, r3, #20
 8018a16:	051b      	lsls	r3, r3, #20
 8018a18:	2a00      	cmp	r2, #0
 8018a1a:	d06a      	beq.n	8018af2 <_strtod_l+0x8fa>
 8018a1c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018a20:	d867      	bhi.n	8018af2 <_strtod_l+0x8fa>
 8018a22:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8018a26:	f67f ae9d 	bls.w	8018764 <_strtod_l+0x56c>
 8018a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8018a54 <_strtod_l+0x85c>)
 8018a2c:	4650      	mov	r0, sl
 8018a2e:	4659      	mov	r1, fp
 8018a30:	2200      	movs	r2, #0
 8018a32:	f7ef fe11 	bl	8008658 <__aeabi_dmul>
 8018a36:	4b08      	ldr	r3, [pc, #32]	@ (8018a58 <_strtod_l+0x860>)
 8018a38:	400b      	ands	r3, r1
 8018a3a:	4682      	mov	sl, r0
 8018a3c:	468b      	mov	fp, r1
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	f47f ae08 	bne.w	8018654 <_strtod_l+0x45c>
 8018a44:	9a05      	ldr	r2, [sp, #20]
 8018a46:	2322      	movs	r3, #34	@ 0x22
 8018a48:	6013      	str	r3, [r2, #0]
 8018a4a:	e603      	b.n	8018654 <_strtod_l+0x45c>
 8018a4c:	0801f498 	.word	0x0801f498
 8018a50:	fffffc02 	.word	0xfffffc02
 8018a54:	39500000 	.word	0x39500000
 8018a58:	7ff00000 	.word	0x7ff00000
 8018a5c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8018a60:	d165      	bne.n	8018b2e <_strtod_l+0x936>
 8018a62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018a64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018a68:	b35a      	cbz	r2, 8018ac2 <_strtod_l+0x8ca>
 8018a6a:	4a9f      	ldr	r2, [pc, #636]	@ (8018ce8 <_strtod_l+0xaf0>)
 8018a6c:	4293      	cmp	r3, r2
 8018a6e:	d12b      	bne.n	8018ac8 <_strtod_l+0x8d0>
 8018a70:	9b08      	ldr	r3, [sp, #32]
 8018a72:	4651      	mov	r1, sl
 8018a74:	b303      	cbz	r3, 8018ab8 <_strtod_l+0x8c0>
 8018a76:	4b9d      	ldr	r3, [pc, #628]	@ (8018cec <_strtod_l+0xaf4>)
 8018a78:	465a      	mov	r2, fp
 8018a7a:	4013      	ands	r3, r2
 8018a7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8018a80:	f04f 32ff 	mov.w	r2, #4294967295
 8018a84:	d81b      	bhi.n	8018abe <_strtod_l+0x8c6>
 8018a86:	0d1b      	lsrs	r3, r3, #20
 8018a88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8018a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8018a90:	4299      	cmp	r1, r3
 8018a92:	d119      	bne.n	8018ac8 <_strtod_l+0x8d0>
 8018a94:	4b96      	ldr	r3, [pc, #600]	@ (8018cf0 <_strtod_l+0xaf8>)
 8018a96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018a98:	429a      	cmp	r2, r3
 8018a9a:	d102      	bne.n	8018aa2 <_strtod_l+0x8aa>
 8018a9c:	3101      	adds	r1, #1
 8018a9e:	f43f adce 	beq.w	801863e <_strtod_l+0x446>
 8018aa2:	4b92      	ldr	r3, [pc, #584]	@ (8018cec <_strtod_l+0xaf4>)
 8018aa4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018aa6:	401a      	ands	r2, r3
 8018aa8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8018aac:	f04f 0a00 	mov.w	sl, #0
 8018ab0:	9b08      	ldr	r3, [sp, #32]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d1b9      	bne.n	8018a2a <_strtod_l+0x832>
 8018ab6:	e5cd      	b.n	8018654 <_strtod_l+0x45c>
 8018ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8018abc:	e7e8      	b.n	8018a90 <_strtod_l+0x898>
 8018abe:	4613      	mov	r3, r2
 8018ac0:	e7e6      	b.n	8018a90 <_strtod_l+0x898>
 8018ac2:	ea53 030a 	orrs.w	r3, r3, sl
 8018ac6:	d0a2      	beq.n	8018a0e <_strtod_l+0x816>
 8018ac8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018aca:	b1db      	cbz	r3, 8018b04 <_strtod_l+0x90c>
 8018acc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018ace:	4213      	tst	r3, r2
 8018ad0:	d0ee      	beq.n	8018ab0 <_strtod_l+0x8b8>
 8018ad2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018ad4:	9a08      	ldr	r2, [sp, #32]
 8018ad6:	4650      	mov	r0, sl
 8018ad8:	4659      	mov	r1, fp
 8018ada:	b1bb      	cbz	r3, 8018b0c <_strtod_l+0x914>
 8018adc:	f7ff fb6e 	bl	80181bc <sulp>
 8018ae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018ae4:	ec53 2b10 	vmov	r2, r3, d0
 8018ae8:	f7ef fc00 	bl	80082ec <__adddf3>
 8018aec:	4682      	mov	sl, r0
 8018aee:	468b      	mov	fp, r1
 8018af0:	e7de      	b.n	8018ab0 <_strtod_l+0x8b8>
 8018af2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8018af6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018afa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018afe:	f04f 3aff 	mov.w	sl, #4294967295
 8018b02:	e7d5      	b.n	8018ab0 <_strtod_l+0x8b8>
 8018b04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018b06:	ea13 0f0a 	tst.w	r3, sl
 8018b0a:	e7e1      	b.n	8018ad0 <_strtod_l+0x8d8>
 8018b0c:	f7ff fb56 	bl	80181bc <sulp>
 8018b10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018b14:	ec53 2b10 	vmov	r2, r3, d0
 8018b18:	f7ef fbe6 	bl	80082e8 <__aeabi_dsub>
 8018b1c:	2200      	movs	r2, #0
 8018b1e:	2300      	movs	r3, #0
 8018b20:	4682      	mov	sl, r0
 8018b22:	468b      	mov	fp, r1
 8018b24:	f7f0 f800 	bl	8008b28 <__aeabi_dcmpeq>
 8018b28:	2800      	cmp	r0, #0
 8018b2a:	d0c1      	beq.n	8018ab0 <_strtod_l+0x8b8>
 8018b2c:	e61a      	b.n	8018764 <_strtod_l+0x56c>
 8018b2e:	4641      	mov	r1, r8
 8018b30:	4620      	mov	r0, r4
 8018b32:	f002 ff23 	bl	801b97c <__ratio>
 8018b36:	ec57 6b10 	vmov	r6, r7, d0
 8018b3a:	2200      	movs	r2, #0
 8018b3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8018b40:	4630      	mov	r0, r6
 8018b42:	4639      	mov	r1, r7
 8018b44:	f7f0 f804 	bl	8008b50 <__aeabi_dcmple>
 8018b48:	2800      	cmp	r0, #0
 8018b4a:	d06f      	beq.n	8018c2c <_strtod_l+0xa34>
 8018b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d17a      	bne.n	8018c48 <_strtod_l+0xa50>
 8018b52:	f1ba 0f00 	cmp.w	sl, #0
 8018b56:	d158      	bne.n	8018c0a <_strtod_l+0xa12>
 8018b58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018b5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d15a      	bne.n	8018c18 <_strtod_l+0xa20>
 8018b62:	4b64      	ldr	r3, [pc, #400]	@ (8018cf4 <_strtod_l+0xafc>)
 8018b64:	2200      	movs	r2, #0
 8018b66:	4630      	mov	r0, r6
 8018b68:	4639      	mov	r1, r7
 8018b6a:	f7ef ffe7 	bl	8008b3c <__aeabi_dcmplt>
 8018b6e:	2800      	cmp	r0, #0
 8018b70:	d159      	bne.n	8018c26 <_strtod_l+0xa2e>
 8018b72:	4630      	mov	r0, r6
 8018b74:	4639      	mov	r1, r7
 8018b76:	4b60      	ldr	r3, [pc, #384]	@ (8018cf8 <_strtod_l+0xb00>)
 8018b78:	2200      	movs	r2, #0
 8018b7a:	f7ef fd6d 	bl	8008658 <__aeabi_dmul>
 8018b7e:	4606      	mov	r6, r0
 8018b80:	460f      	mov	r7, r1
 8018b82:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8018b86:	9606      	str	r6, [sp, #24]
 8018b88:	9307      	str	r3, [sp, #28]
 8018b8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018b8e:	4d57      	ldr	r5, [pc, #348]	@ (8018cec <_strtod_l+0xaf4>)
 8018b90:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8018b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018b96:	401d      	ands	r5, r3
 8018b98:	4b58      	ldr	r3, [pc, #352]	@ (8018cfc <_strtod_l+0xb04>)
 8018b9a:	429d      	cmp	r5, r3
 8018b9c:	f040 80b2 	bne.w	8018d04 <_strtod_l+0xb0c>
 8018ba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018ba2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8018ba6:	ec4b ab10 	vmov	d0, sl, fp
 8018baa:	f002 fe1f 	bl	801b7ec <__ulp>
 8018bae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018bb2:	ec51 0b10 	vmov	r0, r1, d0
 8018bb6:	f7ef fd4f 	bl	8008658 <__aeabi_dmul>
 8018bba:	4652      	mov	r2, sl
 8018bbc:	465b      	mov	r3, fp
 8018bbe:	f7ef fb95 	bl	80082ec <__adddf3>
 8018bc2:	460b      	mov	r3, r1
 8018bc4:	4949      	ldr	r1, [pc, #292]	@ (8018cec <_strtod_l+0xaf4>)
 8018bc6:	4a4e      	ldr	r2, [pc, #312]	@ (8018d00 <_strtod_l+0xb08>)
 8018bc8:	4019      	ands	r1, r3
 8018bca:	4291      	cmp	r1, r2
 8018bcc:	4682      	mov	sl, r0
 8018bce:	d942      	bls.n	8018c56 <_strtod_l+0xa5e>
 8018bd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018bd2:	4b47      	ldr	r3, [pc, #284]	@ (8018cf0 <_strtod_l+0xaf8>)
 8018bd4:	429a      	cmp	r2, r3
 8018bd6:	d103      	bne.n	8018be0 <_strtod_l+0x9e8>
 8018bd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018bda:	3301      	adds	r3, #1
 8018bdc:	f43f ad2f 	beq.w	801863e <_strtod_l+0x446>
 8018be0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8018cf0 <_strtod_l+0xaf8>
 8018be4:	f04f 3aff 	mov.w	sl, #4294967295
 8018be8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018bea:	9805      	ldr	r0, [sp, #20]
 8018bec:	f002 fad2 	bl	801b194 <_Bfree>
 8018bf0:	9805      	ldr	r0, [sp, #20]
 8018bf2:	4649      	mov	r1, r9
 8018bf4:	f002 face 	bl	801b194 <_Bfree>
 8018bf8:	9805      	ldr	r0, [sp, #20]
 8018bfa:	4641      	mov	r1, r8
 8018bfc:	f002 faca 	bl	801b194 <_Bfree>
 8018c00:	9805      	ldr	r0, [sp, #20]
 8018c02:	4621      	mov	r1, r4
 8018c04:	f002 fac6 	bl	801b194 <_Bfree>
 8018c08:	e619      	b.n	801883e <_strtod_l+0x646>
 8018c0a:	f1ba 0f01 	cmp.w	sl, #1
 8018c0e:	d103      	bne.n	8018c18 <_strtod_l+0xa20>
 8018c10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	f43f ada6 	beq.w	8018764 <_strtod_l+0x56c>
 8018c18:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8018cc8 <_strtod_l+0xad0>
 8018c1c:	4f35      	ldr	r7, [pc, #212]	@ (8018cf4 <_strtod_l+0xafc>)
 8018c1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018c22:	2600      	movs	r6, #0
 8018c24:	e7b1      	b.n	8018b8a <_strtod_l+0x992>
 8018c26:	4f34      	ldr	r7, [pc, #208]	@ (8018cf8 <_strtod_l+0xb00>)
 8018c28:	2600      	movs	r6, #0
 8018c2a:	e7aa      	b.n	8018b82 <_strtod_l+0x98a>
 8018c2c:	4b32      	ldr	r3, [pc, #200]	@ (8018cf8 <_strtod_l+0xb00>)
 8018c2e:	4630      	mov	r0, r6
 8018c30:	4639      	mov	r1, r7
 8018c32:	2200      	movs	r2, #0
 8018c34:	f7ef fd10 	bl	8008658 <__aeabi_dmul>
 8018c38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018c3a:	4606      	mov	r6, r0
 8018c3c:	460f      	mov	r7, r1
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d09f      	beq.n	8018b82 <_strtod_l+0x98a>
 8018c42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8018c46:	e7a0      	b.n	8018b8a <_strtod_l+0x992>
 8018c48:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8018cd0 <_strtod_l+0xad8>
 8018c4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018c50:	ec57 6b17 	vmov	r6, r7, d7
 8018c54:	e799      	b.n	8018b8a <_strtod_l+0x992>
 8018c56:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8018c5a:	9b08      	ldr	r3, [sp, #32]
 8018c5c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d1c1      	bne.n	8018be8 <_strtod_l+0x9f0>
 8018c64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018c68:	0d1b      	lsrs	r3, r3, #20
 8018c6a:	051b      	lsls	r3, r3, #20
 8018c6c:	429d      	cmp	r5, r3
 8018c6e:	d1bb      	bne.n	8018be8 <_strtod_l+0x9f0>
 8018c70:	4630      	mov	r0, r6
 8018c72:	4639      	mov	r1, r7
 8018c74:	f7f0 f800 	bl	8008c78 <__aeabi_d2lz>
 8018c78:	f7ef fcc0 	bl	80085fc <__aeabi_l2d>
 8018c7c:	4602      	mov	r2, r0
 8018c7e:	460b      	mov	r3, r1
 8018c80:	4630      	mov	r0, r6
 8018c82:	4639      	mov	r1, r7
 8018c84:	f7ef fb30 	bl	80082e8 <__aeabi_dsub>
 8018c88:	460b      	mov	r3, r1
 8018c8a:	4602      	mov	r2, r0
 8018c8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8018c90:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8018c94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018c96:	ea46 060a 	orr.w	r6, r6, sl
 8018c9a:	431e      	orrs	r6, r3
 8018c9c:	d06f      	beq.n	8018d7e <_strtod_l+0xb86>
 8018c9e:	a30e      	add	r3, pc, #56	@ (adr r3, 8018cd8 <_strtod_l+0xae0>)
 8018ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ca4:	f7ef ff4a 	bl	8008b3c <__aeabi_dcmplt>
 8018ca8:	2800      	cmp	r0, #0
 8018caa:	f47f acd3 	bne.w	8018654 <_strtod_l+0x45c>
 8018cae:	a30c      	add	r3, pc, #48	@ (adr r3, 8018ce0 <_strtod_l+0xae8>)
 8018cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018cb8:	f7ef ff5e 	bl	8008b78 <__aeabi_dcmpgt>
 8018cbc:	2800      	cmp	r0, #0
 8018cbe:	d093      	beq.n	8018be8 <_strtod_l+0x9f0>
 8018cc0:	e4c8      	b.n	8018654 <_strtod_l+0x45c>
 8018cc2:	bf00      	nop
 8018cc4:	f3af 8000 	nop.w
 8018cc8:	00000000 	.word	0x00000000
 8018ccc:	bff00000 	.word	0xbff00000
 8018cd0:	00000000 	.word	0x00000000
 8018cd4:	3ff00000 	.word	0x3ff00000
 8018cd8:	94a03595 	.word	0x94a03595
 8018cdc:	3fdfffff 	.word	0x3fdfffff
 8018ce0:	35afe535 	.word	0x35afe535
 8018ce4:	3fe00000 	.word	0x3fe00000
 8018ce8:	000fffff 	.word	0x000fffff
 8018cec:	7ff00000 	.word	0x7ff00000
 8018cf0:	7fefffff 	.word	0x7fefffff
 8018cf4:	3ff00000 	.word	0x3ff00000
 8018cf8:	3fe00000 	.word	0x3fe00000
 8018cfc:	7fe00000 	.word	0x7fe00000
 8018d00:	7c9fffff 	.word	0x7c9fffff
 8018d04:	9b08      	ldr	r3, [sp, #32]
 8018d06:	b323      	cbz	r3, 8018d52 <_strtod_l+0xb5a>
 8018d08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8018d0c:	d821      	bhi.n	8018d52 <_strtod_l+0xb5a>
 8018d0e:	a328      	add	r3, pc, #160	@ (adr r3, 8018db0 <_strtod_l+0xbb8>)
 8018d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d14:	4630      	mov	r0, r6
 8018d16:	4639      	mov	r1, r7
 8018d18:	f7ef ff1a 	bl	8008b50 <__aeabi_dcmple>
 8018d1c:	b1a0      	cbz	r0, 8018d48 <_strtod_l+0xb50>
 8018d1e:	4639      	mov	r1, r7
 8018d20:	4630      	mov	r0, r6
 8018d22:	f7ef ff71 	bl	8008c08 <__aeabi_d2uiz>
 8018d26:	2801      	cmp	r0, #1
 8018d28:	bf38      	it	cc
 8018d2a:	2001      	movcc	r0, #1
 8018d2c:	f7ef fc1a 	bl	8008564 <__aeabi_ui2d>
 8018d30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018d32:	4606      	mov	r6, r0
 8018d34:	460f      	mov	r7, r1
 8018d36:	b9fb      	cbnz	r3, 8018d78 <_strtod_l+0xb80>
 8018d38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8018d3c:	9014      	str	r0, [sp, #80]	@ 0x50
 8018d3e:	9315      	str	r3, [sp, #84]	@ 0x54
 8018d40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8018d44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8018d48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018d4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8018d4e:	1b5b      	subs	r3, r3, r5
 8018d50:	9311      	str	r3, [sp, #68]	@ 0x44
 8018d52:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8018d56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8018d5a:	f002 fd47 	bl	801b7ec <__ulp>
 8018d5e:	4650      	mov	r0, sl
 8018d60:	ec53 2b10 	vmov	r2, r3, d0
 8018d64:	4659      	mov	r1, fp
 8018d66:	f7ef fc77 	bl	8008658 <__aeabi_dmul>
 8018d6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8018d6e:	f7ef fabd 	bl	80082ec <__adddf3>
 8018d72:	4682      	mov	sl, r0
 8018d74:	468b      	mov	fp, r1
 8018d76:	e770      	b.n	8018c5a <_strtod_l+0xa62>
 8018d78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8018d7c:	e7e0      	b.n	8018d40 <_strtod_l+0xb48>
 8018d7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8018db8 <_strtod_l+0xbc0>)
 8018d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d84:	f7ef feda 	bl	8008b3c <__aeabi_dcmplt>
 8018d88:	e798      	b.n	8018cbc <_strtod_l+0xac4>
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	930e      	str	r3, [sp, #56]	@ 0x38
 8018d8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8018d90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018d92:	6013      	str	r3, [r2, #0]
 8018d94:	f7ff ba6d 	b.w	8018272 <_strtod_l+0x7a>
 8018d98:	2a65      	cmp	r2, #101	@ 0x65
 8018d9a:	f43f ab68 	beq.w	801846e <_strtod_l+0x276>
 8018d9e:	2a45      	cmp	r2, #69	@ 0x45
 8018da0:	f43f ab65 	beq.w	801846e <_strtod_l+0x276>
 8018da4:	2301      	movs	r3, #1
 8018da6:	f7ff bba0 	b.w	80184ea <_strtod_l+0x2f2>
 8018daa:	bf00      	nop
 8018dac:	f3af 8000 	nop.w
 8018db0:	ffc00000 	.word	0xffc00000
 8018db4:	41dfffff 	.word	0x41dfffff
 8018db8:	94a03595 	.word	0x94a03595
 8018dbc:	3fcfffff 	.word	0x3fcfffff

08018dc0 <strtod>:
 8018dc0:	460a      	mov	r2, r1
 8018dc2:	4601      	mov	r1, r0
 8018dc4:	4802      	ldr	r0, [pc, #8]	@ (8018dd0 <strtod+0x10>)
 8018dc6:	4b03      	ldr	r3, [pc, #12]	@ (8018dd4 <strtod+0x14>)
 8018dc8:	6800      	ldr	r0, [r0, #0]
 8018dca:	f7ff ba15 	b.w	80181f8 <_strtod_l>
 8018dce:	bf00      	nop
 8018dd0:	20000214 	.word	0x20000214
 8018dd4:	200000a8 	.word	0x200000a8

08018dd8 <__cvt>:
 8018dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018ddc:	ec57 6b10 	vmov	r6, r7, d0
 8018de0:	2f00      	cmp	r7, #0
 8018de2:	460c      	mov	r4, r1
 8018de4:	4619      	mov	r1, r3
 8018de6:	463b      	mov	r3, r7
 8018de8:	bfbb      	ittet	lt
 8018dea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8018dee:	461f      	movlt	r7, r3
 8018df0:	2300      	movge	r3, #0
 8018df2:	232d      	movlt	r3, #45	@ 0x2d
 8018df4:	700b      	strb	r3, [r1, #0]
 8018df6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018df8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8018dfc:	4691      	mov	r9, r2
 8018dfe:	f023 0820 	bic.w	r8, r3, #32
 8018e02:	bfbc      	itt	lt
 8018e04:	4632      	movlt	r2, r6
 8018e06:	4616      	movlt	r6, r2
 8018e08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8018e0c:	d005      	beq.n	8018e1a <__cvt+0x42>
 8018e0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8018e12:	d100      	bne.n	8018e16 <__cvt+0x3e>
 8018e14:	3401      	adds	r4, #1
 8018e16:	2102      	movs	r1, #2
 8018e18:	e000      	b.n	8018e1c <__cvt+0x44>
 8018e1a:	2103      	movs	r1, #3
 8018e1c:	ab03      	add	r3, sp, #12
 8018e1e:	9301      	str	r3, [sp, #4]
 8018e20:	ab02      	add	r3, sp, #8
 8018e22:	9300      	str	r3, [sp, #0]
 8018e24:	ec47 6b10 	vmov	d0, r6, r7
 8018e28:	4653      	mov	r3, sl
 8018e2a:	4622      	mov	r2, r4
 8018e2c:	f001 f80c 	bl	8019e48 <_dtoa_r>
 8018e30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8018e34:	4605      	mov	r5, r0
 8018e36:	d119      	bne.n	8018e6c <__cvt+0x94>
 8018e38:	f019 0f01 	tst.w	r9, #1
 8018e3c:	d00e      	beq.n	8018e5c <__cvt+0x84>
 8018e3e:	eb00 0904 	add.w	r9, r0, r4
 8018e42:	2200      	movs	r2, #0
 8018e44:	2300      	movs	r3, #0
 8018e46:	4630      	mov	r0, r6
 8018e48:	4639      	mov	r1, r7
 8018e4a:	f7ef fe6d 	bl	8008b28 <__aeabi_dcmpeq>
 8018e4e:	b108      	cbz	r0, 8018e54 <__cvt+0x7c>
 8018e50:	f8cd 900c 	str.w	r9, [sp, #12]
 8018e54:	2230      	movs	r2, #48	@ 0x30
 8018e56:	9b03      	ldr	r3, [sp, #12]
 8018e58:	454b      	cmp	r3, r9
 8018e5a:	d31e      	bcc.n	8018e9a <__cvt+0xc2>
 8018e5c:	9b03      	ldr	r3, [sp, #12]
 8018e5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018e60:	1b5b      	subs	r3, r3, r5
 8018e62:	4628      	mov	r0, r5
 8018e64:	6013      	str	r3, [r2, #0]
 8018e66:	b004      	add	sp, #16
 8018e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8018e70:	eb00 0904 	add.w	r9, r0, r4
 8018e74:	d1e5      	bne.n	8018e42 <__cvt+0x6a>
 8018e76:	7803      	ldrb	r3, [r0, #0]
 8018e78:	2b30      	cmp	r3, #48	@ 0x30
 8018e7a:	d10a      	bne.n	8018e92 <__cvt+0xba>
 8018e7c:	2200      	movs	r2, #0
 8018e7e:	2300      	movs	r3, #0
 8018e80:	4630      	mov	r0, r6
 8018e82:	4639      	mov	r1, r7
 8018e84:	f7ef fe50 	bl	8008b28 <__aeabi_dcmpeq>
 8018e88:	b918      	cbnz	r0, 8018e92 <__cvt+0xba>
 8018e8a:	f1c4 0401 	rsb	r4, r4, #1
 8018e8e:	f8ca 4000 	str.w	r4, [sl]
 8018e92:	f8da 3000 	ldr.w	r3, [sl]
 8018e96:	4499      	add	r9, r3
 8018e98:	e7d3      	b.n	8018e42 <__cvt+0x6a>
 8018e9a:	1c59      	adds	r1, r3, #1
 8018e9c:	9103      	str	r1, [sp, #12]
 8018e9e:	701a      	strb	r2, [r3, #0]
 8018ea0:	e7d9      	b.n	8018e56 <__cvt+0x7e>

08018ea2 <__exponent>:
 8018ea2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018ea4:	2900      	cmp	r1, #0
 8018ea6:	bfba      	itte	lt
 8018ea8:	4249      	neglt	r1, r1
 8018eaa:	232d      	movlt	r3, #45	@ 0x2d
 8018eac:	232b      	movge	r3, #43	@ 0x2b
 8018eae:	2909      	cmp	r1, #9
 8018eb0:	7002      	strb	r2, [r0, #0]
 8018eb2:	7043      	strb	r3, [r0, #1]
 8018eb4:	dd29      	ble.n	8018f0a <__exponent+0x68>
 8018eb6:	f10d 0307 	add.w	r3, sp, #7
 8018eba:	461d      	mov	r5, r3
 8018ebc:	270a      	movs	r7, #10
 8018ebe:	461a      	mov	r2, r3
 8018ec0:	fbb1 f6f7 	udiv	r6, r1, r7
 8018ec4:	fb07 1416 	mls	r4, r7, r6, r1
 8018ec8:	3430      	adds	r4, #48	@ 0x30
 8018eca:	f802 4c01 	strb.w	r4, [r2, #-1]
 8018ece:	460c      	mov	r4, r1
 8018ed0:	2c63      	cmp	r4, #99	@ 0x63
 8018ed2:	f103 33ff 	add.w	r3, r3, #4294967295
 8018ed6:	4631      	mov	r1, r6
 8018ed8:	dcf1      	bgt.n	8018ebe <__exponent+0x1c>
 8018eda:	3130      	adds	r1, #48	@ 0x30
 8018edc:	1e94      	subs	r4, r2, #2
 8018ede:	f803 1c01 	strb.w	r1, [r3, #-1]
 8018ee2:	1c41      	adds	r1, r0, #1
 8018ee4:	4623      	mov	r3, r4
 8018ee6:	42ab      	cmp	r3, r5
 8018ee8:	d30a      	bcc.n	8018f00 <__exponent+0x5e>
 8018eea:	f10d 0309 	add.w	r3, sp, #9
 8018eee:	1a9b      	subs	r3, r3, r2
 8018ef0:	42ac      	cmp	r4, r5
 8018ef2:	bf88      	it	hi
 8018ef4:	2300      	movhi	r3, #0
 8018ef6:	3302      	adds	r3, #2
 8018ef8:	4403      	add	r3, r0
 8018efa:	1a18      	subs	r0, r3, r0
 8018efc:	b003      	add	sp, #12
 8018efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f00:	f813 6b01 	ldrb.w	r6, [r3], #1
 8018f04:	f801 6f01 	strb.w	r6, [r1, #1]!
 8018f08:	e7ed      	b.n	8018ee6 <__exponent+0x44>
 8018f0a:	2330      	movs	r3, #48	@ 0x30
 8018f0c:	3130      	adds	r1, #48	@ 0x30
 8018f0e:	7083      	strb	r3, [r0, #2]
 8018f10:	70c1      	strb	r1, [r0, #3]
 8018f12:	1d03      	adds	r3, r0, #4
 8018f14:	e7f1      	b.n	8018efa <__exponent+0x58>
	...

08018f18 <_printf_float>:
 8018f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f1c:	b08d      	sub	sp, #52	@ 0x34
 8018f1e:	460c      	mov	r4, r1
 8018f20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8018f24:	4616      	mov	r6, r2
 8018f26:	461f      	mov	r7, r3
 8018f28:	4605      	mov	r5, r0
 8018f2a:	f000 fe5d 	bl	8019be8 <_localeconv_r>
 8018f2e:	6803      	ldr	r3, [r0, #0]
 8018f30:	9304      	str	r3, [sp, #16]
 8018f32:	4618      	mov	r0, r3
 8018f34:	f7ef f9cc 	bl	80082d0 <strlen>
 8018f38:	2300      	movs	r3, #0
 8018f3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8018f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8018f40:	9005      	str	r0, [sp, #20]
 8018f42:	3307      	adds	r3, #7
 8018f44:	f023 0307 	bic.w	r3, r3, #7
 8018f48:	f103 0208 	add.w	r2, r3, #8
 8018f4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8018f50:	f8d4 b000 	ldr.w	fp, [r4]
 8018f54:	f8c8 2000 	str.w	r2, [r8]
 8018f58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018f5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8018f60:	9307      	str	r3, [sp, #28]
 8018f62:	f8cd 8018 	str.w	r8, [sp, #24]
 8018f66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8018f6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018f6e:	4b9c      	ldr	r3, [pc, #624]	@ (80191e0 <_printf_float+0x2c8>)
 8018f70:	f04f 32ff 	mov.w	r2, #4294967295
 8018f74:	f7ef fe0a 	bl	8008b8c <__aeabi_dcmpun>
 8018f78:	bb70      	cbnz	r0, 8018fd8 <_printf_float+0xc0>
 8018f7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018f7e:	4b98      	ldr	r3, [pc, #608]	@ (80191e0 <_printf_float+0x2c8>)
 8018f80:	f04f 32ff 	mov.w	r2, #4294967295
 8018f84:	f7ef fde4 	bl	8008b50 <__aeabi_dcmple>
 8018f88:	bb30      	cbnz	r0, 8018fd8 <_printf_float+0xc0>
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	4640      	mov	r0, r8
 8018f90:	4649      	mov	r1, r9
 8018f92:	f7ef fdd3 	bl	8008b3c <__aeabi_dcmplt>
 8018f96:	b110      	cbz	r0, 8018f9e <_printf_float+0x86>
 8018f98:	232d      	movs	r3, #45	@ 0x2d
 8018f9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018f9e:	4a91      	ldr	r2, [pc, #580]	@ (80191e4 <_printf_float+0x2cc>)
 8018fa0:	4b91      	ldr	r3, [pc, #580]	@ (80191e8 <_printf_float+0x2d0>)
 8018fa2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8018fa6:	bf8c      	ite	hi
 8018fa8:	4690      	movhi	r8, r2
 8018faa:	4698      	movls	r8, r3
 8018fac:	2303      	movs	r3, #3
 8018fae:	6123      	str	r3, [r4, #16]
 8018fb0:	f02b 0304 	bic.w	r3, fp, #4
 8018fb4:	6023      	str	r3, [r4, #0]
 8018fb6:	f04f 0900 	mov.w	r9, #0
 8018fba:	9700      	str	r7, [sp, #0]
 8018fbc:	4633      	mov	r3, r6
 8018fbe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8018fc0:	4621      	mov	r1, r4
 8018fc2:	4628      	mov	r0, r5
 8018fc4:	f000 f9d2 	bl	801936c <_printf_common>
 8018fc8:	3001      	adds	r0, #1
 8018fca:	f040 808d 	bne.w	80190e8 <_printf_float+0x1d0>
 8018fce:	f04f 30ff 	mov.w	r0, #4294967295
 8018fd2:	b00d      	add	sp, #52	@ 0x34
 8018fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fd8:	4642      	mov	r2, r8
 8018fda:	464b      	mov	r3, r9
 8018fdc:	4640      	mov	r0, r8
 8018fde:	4649      	mov	r1, r9
 8018fe0:	f7ef fdd4 	bl	8008b8c <__aeabi_dcmpun>
 8018fe4:	b140      	cbz	r0, 8018ff8 <_printf_float+0xe0>
 8018fe6:	464b      	mov	r3, r9
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	bfbc      	itt	lt
 8018fec:	232d      	movlt	r3, #45	@ 0x2d
 8018fee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8018ff2:	4a7e      	ldr	r2, [pc, #504]	@ (80191ec <_printf_float+0x2d4>)
 8018ff4:	4b7e      	ldr	r3, [pc, #504]	@ (80191f0 <_printf_float+0x2d8>)
 8018ff6:	e7d4      	b.n	8018fa2 <_printf_float+0x8a>
 8018ff8:	6863      	ldr	r3, [r4, #4]
 8018ffa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8018ffe:	9206      	str	r2, [sp, #24]
 8019000:	1c5a      	adds	r2, r3, #1
 8019002:	d13b      	bne.n	801907c <_printf_float+0x164>
 8019004:	2306      	movs	r3, #6
 8019006:	6063      	str	r3, [r4, #4]
 8019008:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801900c:	2300      	movs	r3, #0
 801900e:	6022      	str	r2, [r4, #0]
 8019010:	9303      	str	r3, [sp, #12]
 8019012:	ab0a      	add	r3, sp, #40	@ 0x28
 8019014:	e9cd a301 	strd	sl, r3, [sp, #4]
 8019018:	ab09      	add	r3, sp, #36	@ 0x24
 801901a:	9300      	str	r3, [sp, #0]
 801901c:	6861      	ldr	r1, [r4, #4]
 801901e:	ec49 8b10 	vmov	d0, r8, r9
 8019022:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8019026:	4628      	mov	r0, r5
 8019028:	f7ff fed6 	bl	8018dd8 <__cvt>
 801902c:	9b06      	ldr	r3, [sp, #24]
 801902e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019030:	2b47      	cmp	r3, #71	@ 0x47
 8019032:	4680      	mov	r8, r0
 8019034:	d129      	bne.n	801908a <_printf_float+0x172>
 8019036:	1cc8      	adds	r0, r1, #3
 8019038:	db02      	blt.n	8019040 <_printf_float+0x128>
 801903a:	6863      	ldr	r3, [r4, #4]
 801903c:	4299      	cmp	r1, r3
 801903e:	dd41      	ble.n	80190c4 <_printf_float+0x1ac>
 8019040:	f1aa 0a02 	sub.w	sl, sl, #2
 8019044:	fa5f fa8a 	uxtb.w	sl, sl
 8019048:	3901      	subs	r1, #1
 801904a:	4652      	mov	r2, sl
 801904c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8019050:	9109      	str	r1, [sp, #36]	@ 0x24
 8019052:	f7ff ff26 	bl	8018ea2 <__exponent>
 8019056:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019058:	1813      	adds	r3, r2, r0
 801905a:	2a01      	cmp	r2, #1
 801905c:	4681      	mov	r9, r0
 801905e:	6123      	str	r3, [r4, #16]
 8019060:	dc02      	bgt.n	8019068 <_printf_float+0x150>
 8019062:	6822      	ldr	r2, [r4, #0]
 8019064:	07d2      	lsls	r2, r2, #31
 8019066:	d501      	bpl.n	801906c <_printf_float+0x154>
 8019068:	3301      	adds	r3, #1
 801906a:	6123      	str	r3, [r4, #16]
 801906c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8019070:	2b00      	cmp	r3, #0
 8019072:	d0a2      	beq.n	8018fba <_printf_float+0xa2>
 8019074:	232d      	movs	r3, #45	@ 0x2d
 8019076:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801907a:	e79e      	b.n	8018fba <_printf_float+0xa2>
 801907c:	9a06      	ldr	r2, [sp, #24]
 801907e:	2a47      	cmp	r2, #71	@ 0x47
 8019080:	d1c2      	bne.n	8019008 <_printf_float+0xf0>
 8019082:	2b00      	cmp	r3, #0
 8019084:	d1c0      	bne.n	8019008 <_printf_float+0xf0>
 8019086:	2301      	movs	r3, #1
 8019088:	e7bd      	b.n	8019006 <_printf_float+0xee>
 801908a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801908e:	d9db      	bls.n	8019048 <_printf_float+0x130>
 8019090:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8019094:	d118      	bne.n	80190c8 <_printf_float+0x1b0>
 8019096:	2900      	cmp	r1, #0
 8019098:	6863      	ldr	r3, [r4, #4]
 801909a:	dd0b      	ble.n	80190b4 <_printf_float+0x19c>
 801909c:	6121      	str	r1, [r4, #16]
 801909e:	b913      	cbnz	r3, 80190a6 <_printf_float+0x18e>
 80190a0:	6822      	ldr	r2, [r4, #0]
 80190a2:	07d0      	lsls	r0, r2, #31
 80190a4:	d502      	bpl.n	80190ac <_printf_float+0x194>
 80190a6:	3301      	adds	r3, #1
 80190a8:	440b      	add	r3, r1
 80190aa:	6123      	str	r3, [r4, #16]
 80190ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80190ae:	f04f 0900 	mov.w	r9, #0
 80190b2:	e7db      	b.n	801906c <_printf_float+0x154>
 80190b4:	b913      	cbnz	r3, 80190bc <_printf_float+0x1a4>
 80190b6:	6822      	ldr	r2, [r4, #0]
 80190b8:	07d2      	lsls	r2, r2, #31
 80190ba:	d501      	bpl.n	80190c0 <_printf_float+0x1a8>
 80190bc:	3302      	adds	r3, #2
 80190be:	e7f4      	b.n	80190aa <_printf_float+0x192>
 80190c0:	2301      	movs	r3, #1
 80190c2:	e7f2      	b.n	80190aa <_printf_float+0x192>
 80190c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80190c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80190ca:	4299      	cmp	r1, r3
 80190cc:	db05      	blt.n	80190da <_printf_float+0x1c2>
 80190ce:	6823      	ldr	r3, [r4, #0]
 80190d0:	6121      	str	r1, [r4, #16]
 80190d2:	07d8      	lsls	r0, r3, #31
 80190d4:	d5ea      	bpl.n	80190ac <_printf_float+0x194>
 80190d6:	1c4b      	adds	r3, r1, #1
 80190d8:	e7e7      	b.n	80190aa <_printf_float+0x192>
 80190da:	2900      	cmp	r1, #0
 80190dc:	bfd4      	ite	le
 80190de:	f1c1 0202 	rsble	r2, r1, #2
 80190e2:	2201      	movgt	r2, #1
 80190e4:	4413      	add	r3, r2
 80190e6:	e7e0      	b.n	80190aa <_printf_float+0x192>
 80190e8:	6823      	ldr	r3, [r4, #0]
 80190ea:	055a      	lsls	r2, r3, #21
 80190ec:	d407      	bmi.n	80190fe <_printf_float+0x1e6>
 80190ee:	6923      	ldr	r3, [r4, #16]
 80190f0:	4642      	mov	r2, r8
 80190f2:	4631      	mov	r1, r6
 80190f4:	4628      	mov	r0, r5
 80190f6:	47b8      	blx	r7
 80190f8:	3001      	adds	r0, #1
 80190fa:	d12b      	bne.n	8019154 <_printf_float+0x23c>
 80190fc:	e767      	b.n	8018fce <_printf_float+0xb6>
 80190fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8019102:	f240 80dd 	bls.w	80192c0 <_printf_float+0x3a8>
 8019106:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801910a:	2200      	movs	r2, #0
 801910c:	2300      	movs	r3, #0
 801910e:	f7ef fd0b 	bl	8008b28 <__aeabi_dcmpeq>
 8019112:	2800      	cmp	r0, #0
 8019114:	d033      	beq.n	801917e <_printf_float+0x266>
 8019116:	4a37      	ldr	r2, [pc, #220]	@ (80191f4 <_printf_float+0x2dc>)
 8019118:	2301      	movs	r3, #1
 801911a:	4631      	mov	r1, r6
 801911c:	4628      	mov	r0, r5
 801911e:	47b8      	blx	r7
 8019120:	3001      	adds	r0, #1
 8019122:	f43f af54 	beq.w	8018fce <_printf_float+0xb6>
 8019126:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801912a:	4543      	cmp	r3, r8
 801912c:	db02      	blt.n	8019134 <_printf_float+0x21c>
 801912e:	6823      	ldr	r3, [r4, #0]
 8019130:	07d8      	lsls	r0, r3, #31
 8019132:	d50f      	bpl.n	8019154 <_printf_float+0x23c>
 8019134:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019138:	4631      	mov	r1, r6
 801913a:	4628      	mov	r0, r5
 801913c:	47b8      	blx	r7
 801913e:	3001      	adds	r0, #1
 8019140:	f43f af45 	beq.w	8018fce <_printf_float+0xb6>
 8019144:	f04f 0900 	mov.w	r9, #0
 8019148:	f108 38ff 	add.w	r8, r8, #4294967295
 801914c:	f104 0a1a 	add.w	sl, r4, #26
 8019150:	45c8      	cmp	r8, r9
 8019152:	dc09      	bgt.n	8019168 <_printf_float+0x250>
 8019154:	6823      	ldr	r3, [r4, #0]
 8019156:	079b      	lsls	r3, r3, #30
 8019158:	f100 8103 	bmi.w	8019362 <_printf_float+0x44a>
 801915c:	68e0      	ldr	r0, [r4, #12]
 801915e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019160:	4298      	cmp	r0, r3
 8019162:	bfb8      	it	lt
 8019164:	4618      	movlt	r0, r3
 8019166:	e734      	b.n	8018fd2 <_printf_float+0xba>
 8019168:	2301      	movs	r3, #1
 801916a:	4652      	mov	r2, sl
 801916c:	4631      	mov	r1, r6
 801916e:	4628      	mov	r0, r5
 8019170:	47b8      	blx	r7
 8019172:	3001      	adds	r0, #1
 8019174:	f43f af2b 	beq.w	8018fce <_printf_float+0xb6>
 8019178:	f109 0901 	add.w	r9, r9, #1
 801917c:	e7e8      	b.n	8019150 <_printf_float+0x238>
 801917e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019180:	2b00      	cmp	r3, #0
 8019182:	dc39      	bgt.n	80191f8 <_printf_float+0x2e0>
 8019184:	4a1b      	ldr	r2, [pc, #108]	@ (80191f4 <_printf_float+0x2dc>)
 8019186:	2301      	movs	r3, #1
 8019188:	4631      	mov	r1, r6
 801918a:	4628      	mov	r0, r5
 801918c:	47b8      	blx	r7
 801918e:	3001      	adds	r0, #1
 8019190:	f43f af1d 	beq.w	8018fce <_printf_float+0xb6>
 8019194:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8019198:	ea59 0303 	orrs.w	r3, r9, r3
 801919c:	d102      	bne.n	80191a4 <_printf_float+0x28c>
 801919e:	6823      	ldr	r3, [r4, #0]
 80191a0:	07d9      	lsls	r1, r3, #31
 80191a2:	d5d7      	bpl.n	8019154 <_printf_float+0x23c>
 80191a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80191a8:	4631      	mov	r1, r6
 80191aa:	4628      	mov	r0, r5
 80191ac:	47b8      	blx	r7
 80191ae:	3001      	adds	r0, #1
 80191b0:	f43f af0d 	beq.w	8018fce <_printf_float+0xb6>
 80191b4:	f04f 0a00 	mov.w	sl, #0
 80191b8:	f104 0b1a 	add.w	fp, r4, #26
 80191bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80191be:	425b      	negs	r3, r3
 80191c0:	4553      	cmp	r3, sl
 80191c2:	dc01      	bgt.n	80191c8 <_printf_float+0x2b0>
 80191c4:	464b      	mov	r3, r9
 80191c6:	e793      	b.n	80190f0 <_printf_float+0x1d8>
 80191c8:	2301      	movs	r3, #1
 80191ca:	465a      	mov	r2, fp
 80191cc:	4631      	mov	r1, r6
 80191ce:	4628      	mov	r0, r5
 80191d0:	47b8      	blx	r7
 80191d2:	3001      	adds	r0, #1
 80191d4:	f43f aefb 	beq.w	8018fce <_printf_float+0xb6>
 80191d8:	f10a 0a01 	add.w	sl, sl, #1
 80191dc:	e7ee      	b.n	80191bc <_printf_float+0x2a4>
 80191de:	bf00      	nop
 80191e0:	7fefffff 	.word	0x7fefffff
 80191e4:	0801f286 	.word	0x0801f286
 80191e8:	0801f282 	.word	0x0801f282
 80191ec:	0801f28e 	.word	0x0801f28e
 80191f0:	0801f28a 	.word	0x0801f28a
 80191f4:	0801f429 	.word	0x0801f429
 80191f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80191fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80191fe:	4553      	cmp	r3, sl
 8019200:	bfa8      	it	ge
 8019202:	4653      	movge	r3, sl
 8019204:	2b00      	cmp	r3, #0
 8019206:	4699      	mov	r9, r3
 8019208:	dc36      	bgt.n	8019278 <_printf_float+0x360>
 801920a:	f04f 0b00 	mov.w	fp, #0
 801920e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019212:	f104 021a 	add.w	r2, r4, #26
 8019216:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019218:	9306      	str	r3, [sp, #24]
 801921a:	eba3 0309 	sub.w	r3, r3, r9
 801921e:	455b      	cmp	r3, fp
 8019220:	dc31      	bgt.n	8019286 <_printf_float+0x36e>
 8019222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019224:	459a      	cmp	sl, r3
 8019226:	dc3a      	bgt.n	801929e <_printf_float+0x386>
 8019228:	6823      	ldr	r3, [r4, #0]
 801922a:	07da      	lsls	r2, r3, #31
 801922c:	d437      	bmi.n	801929e <_printf_float+0x386>
 801922e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019230:	ebaa 0903 	sub.w	r9, sl, r3
 8019234:	9b06      	ldr	r3, [sp, #24]
 8019236:	ebaa 0303 	sub.w	r3, sl, r3
 801923a:	4599      	cmp	r9, r3
 801923c:	bfa8      	it	ge
 801923e:	4699      	movge	r9, r3
 8019240:	f1b9 0f00 	cmp.w	r9, #0
 8019244:	dc33      	bgt.n	80192ae <_printf_float+0x396>
 8019246:	f04f 0800 	mov.w	r8, #0
 801924a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801924e:	f104 0b1a 	add.w	fp, r4, #26
 8019252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019254:	ebaa 0303 	sub.w	r3, sl, r3
 8019258:	eba3 0309 	sub.w	r3, r3, r9
 801925c:	4543      	cmp	r3, r8
 801925e:	f77f af79 	ble.w	8019154 <_printf_float+0x23c>
 8019262:	2301      	movs	r3, #1
 8019264:	465a      	mov	r2, fp
 8019266:	4631      	mov	r1, r6
 8019268:	4628      	mov	r0, r5
 801926a:	47b8      	blx	r7
 801926c:	3001      	adds	r0, #1
 801926e:	f43f aeae 	beq.w	8018fce <_printf_float+0xb6>
 8019272:	f108 0801 	add.w	r8, r8, #1
 8019276:	e7ec      	b.n	8019252 <_printf_float+0x33a>
 8019278:	4642      	mov	r2, r8
 801927a:	4631      	mov	r1, r6
 801927c:	4628      	mov	r0, r5
 801927e:	47b8      	blx	r7
 8019280:	3001      	adds	r0, #1
 8019282:	d1c2      	bne.n	801920a <_printf_float+0x2f2>
 8019284:	e6a3      	b.n	8018fce <_printf_float+0xb6>
 8019286:	2301      	movs	r3, #1
 8019288:	4631      	mov	r1, r6
 801928a:	4628      	mov	r0, r5
 801928c:	9206      	str	r2, [sp, #24]
 801928e:	47b8      	blx	r7
 8019290:	3001      	adds	r0, #1
 8019292:	f43f ae9c 	beq.w	8018fce <_printf_float+0xb6>
 8019296:	9a06      	ldr	r2, [sp, #24]
 8019298:	f10b 0b01 	add.w	fp, fp, #1
 801929c:	e7bb      	b.n	8019216 <_printf_float+0x2fe>
 801929e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80192a2:	4631      	mov	r1, r6
 80192a4:	4628      	mov	r0, r5
 80192a6:	47b8      	blx	r7
 80192a8:	3001      	adds	r0, #1
 80192aa:	d1c0      	bne.n	801922e <_printf_float+0x316>
 80192ac:	e68f      	b.n	8018fce <_printf_float+0xb6>
 80192ae:	9a06      	ldr	r2, [sp, #24]
 80192b0:	464b      	mov	r3, r9
 80192b2:	4442      	add	r2, r8
 80192b4:	4631      	mov	r1, r6
 80192b6:	4628      	mov	r0, r5
 80192b8:	47b8      	blx	r7
 80192ba:	3001      	adds	r0, #1
 80192bc:	d1c3      	bne.n	8019246 <_printf_float+0x32e>
 80192be:	e686      	b.n	8018fce <_printf_float+0xb6>
 80192c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80192c4:	f1ba 0f01 	cmp.w	sl, #1
 80192c8:	dc01      	bgt.n	80192ce <_printf_float+0x3b6>
 80192ca:	07db      	lsls	r3, r3, #31
 80192cc:	d536      	bpl.n	801933c <_printf_float+0x424>
 80192ce:	2301      	movs	r3, #1
 80192d0:	4642      	mov	r2, r8
 80192d2:	4631      	mov	r1, r6
 80192d4:	4628      	mov	r0, r5
 80192d6:	47b8      	blx	r7
 80192d8:	3001      	adds	r0, #1
 80192da:	f43f ae78 	beq.w	8018fce <_printf_float+0xb6>
 80192de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80192e2:	4631      	mov	r1, r6
 80192e4:	4628      	mov	r0, r5
 80192e6:	47b8      	blx	r7
 80192e8:	3001      	adds	r0, #1
 80192ea:	f43f ae70 	beq.w	8018fce <_printf_float+0xb6>
 80192ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80192f2:	2200      	movs	r2, #0
 80192f4:	2300      	movs	r3, #0
 80192f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80192fa:	f7ef fc15 	bl	8008b28 <__aeabi_dcmpeq>
 80192fe:	b9c0      	cbnz	r0, 8019332 <_printf_float+0x41a>
 8019300:	4653      	mov	r3, sl
 8019302:	f108 0201 	add.w	r2, r8, #1
 8019306:	4631      	mov	r1, r6
 8019308:	4628      	mov	r0, r5
 801930a:	47b8      	blx	r7
 801930c:	3001      	adds	r0, #1
 801930e:	d10c      	bne.n	801932a <_printf_float+0x412>
 8019310:	e65d      	b.n	8018fce <_printf_float+0xb6>
 8019312:	2301      	movs	r3, #1
 8019314:	465a      	mov	r2, fp
 8019316:	4631      	mov	r1, r6
 8019318:	4628      	mov	r0, r5
 801931a:	47b8      	blx	r7
 801931c:	3001      	adds	r0, #1
 801931e:	f43f ae56 	beq.w	8018fce <_printf_float+0xb6>
 8019322:	f108 0801 	add.w	r8, r8, #1
 8019326:	45d0      	cmp	r8, sl
 8019328:	dbf3      	blt.n	8019312 <_printf_float+0x3fa>
 801932a:	464b      	mov	r3, r9
 801932c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019330:	e6df      	b.n	80190f2 <_printf_float+0x1da>
 8019332:	f04f 0800 	mov.w	r8, #0
 8019336:	f104 0b1a 	add.w	fp, r4, #26
 801933a:	e7f4      	b.n	8019326 <_printf_float+0x40e>
 801933c:	2301      	movs	r3, #1
 801933e:	4642      	mov	r2, r8
 8019340:	e7e1      	b.n	8019306 <_printf_float+0x3ee>
 8019342:	2301      	movs	r3, #1
 8019344:	464a      	mov	r2, r9
 8019346:	4631      	mov	r1, r6
 8019348:	4628      	mov	r0, r5
 801934a:	47b8      	blx	r7
 801934c:	3001      	adds	r0, #1
 801934e:	f43f ae3e 	beq.w	8018fce <_printf_float+0xb6>
 8019352:	f108 0801 	add.w	r8, r8, #1
 8019356:	68e3      	ldr	r3, [r4, #12]
 8019358:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801935a:	1a5b      	subs	r3, r3, r1
 801935c:	4543      	cmp	r3, r8
 801935e:	dcf0      	bgt.n	8019342 <_printf_float+0x42a>
 8019360:	e6fc      	b.n	801915c <_printf_float+0x244>
 8019362:	f04f 0800 	mov.w	r8, #0
 8019366:	f104 0919 	add.w	r9, r4, #25
 801936a:	e7f4      	b.n	8019356 <_printf_float+0x43e>

0801936c <_printf_common>:
 801936c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019370:	4616      	mov	r6, r2
 8019372:	4698      	mov	r8, r3
 8019374:	688a      	ldr	r2, [r1, #8]
 8019376:	690b      	ldr	r3, [r1, #16]
 8019378:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801937c:	4293      	cmp	r3, r2
 801937e:	bfb8      	it	lt
 8019380:	4613      	movlt	r3, r2
 8019382:	6033      	str	r3, [r6, #0]
 8019384:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019388:	4607      	mov	r7, r0
 801938a:	460c      	mov	r4, r1
 801938c:	b10a      	cbz	r2, 8019392 <_printf_common+0x26>
 801938e:	3301      	adds	r3, #1
 8019390:	6033      	str	r3, [r6, #0]
 8019392:	6823      	ldr	r3, [r4, #0]
 8019394:	0699      	lsls	r1, r3, #26
 8019396:	bf42      	ittt	mi
 8019398:	6833      	ldrmi	r3, [r6, #0]
 801939a:	3302      	addmi	r3, #2
 801939c:	6033      	strmi	r3, [r6, #0]
 801939e:	6825      	ldr	r5, [r4, #0]
 80193a0:	f015 0506 	ands.w	r5, r5, #6
 80193a4:	d106      	bne.n	80193b4 <_printf_common+0x48>
 80193a6:	f104 0a19 	add.w	sl, r4, #25
 80193aa:	68e3      	ldr	r3, [r4, #12]
 80193ac:	6832      	ldr	r2, [r6, #0]
 80193ae:	1a9b      	subs	r3, r3, r2
 80193b0:	42ab      	cmp	r3, r5
 80193b2:	dc26      	bgt.n	8019402 <_printf_common+0x96>
 80193b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80193b8:	6822      	ldr	r2, [r4, #0]
 80193ba:	3b00      	subs	r3, #0
 80193bc:	bf18      	it	ne
 80193be:	2301      	movne	r3, #1
 80193c0:	0692      	lsls	r2, r2, #26
 80193c2:	d42b      	bmi.n	801941c <_printf_common+0xb0>
 80193c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80193c8:	4641      	mov	r1, r8
 80193ca:	4638      	mov	r0, r7
 80193cc:	47c8      	blx	r9
 80193ce:	3001      	adds	r0, #1
 80193d0:	d01e      	beq.n	8019410 <_printf_common+0xa4>
 80193d2:	6823      	ldr	r3, [r4, #0]
 80193d4:	6922      	ldr	r2, [r4, #16]
 80193d6:	f003 0306 	and.w	r3, r3, #6
 80193da:	2b04      	cmp	r3, #4
 80193dc:	bf02      	ittt	eq
 80193de:	68e5      	ldreq	r5, [r4, #12]
 80193e0:	6833      	ldreq	r3, [r6, #0]
 80193e2:	1aed      	subeq	r5, r5, r3
 80193e4:	68a3      	ldr	r3, [r4, #8]
 80193e6:	bf0c      	ite	eq
 80193e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80193ec:	2500      	movne	r5, #0
 80193ee:	4293      	cmp	r3, r2
 80193f0:	bfc4      	itt	gt
 80193f2:	1a9b      	subgt	r3, r3, r2
 80193f4:	18ed      	addgt	r5, r5, r3
 80193f6:	2600      	movs	r6, #0
 80193f8:	341a      	adds	r4, #26
 80193fa:	42b5      	cmp	r5, r6
 80193fc:	d11a      	bne.n	8019434 <_printf_common+0xc8>
 80193fe:	2000      	movs	r0, #0
 8019400:	e008      	b.n	8019414 <_printf_common+0xa8>
 8019402:	2301      	movs	r3, #1
 8019404:	4652      	mov	r2, sl
 8019406:	4641      	mov	r1, r8
 8019408:	4638      	mov	r0, r7
 801940a:	47c8      	blx	r9
 801940c:	3001      	adds	r0, #1
 801940e:	d103      	bne.n	8019418 <_printf_common+0xac>
 8019410:	f04f 30ff 	mov.w	r0, #4294967295
 8019414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019418:	3501      	adds	r5, #1
 801941a:	e7c6      	b.n	80193aa <_printf_common+0x3e>
 801941c:	18e1      	adds	r1, r4, r3
 801941e:	1c5a      	adds	r2, r3, #1
 8019420:	2030      	movs	r0, #48	@ 0x30
 8019422:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019426:	4422      	add	r2, r4
 8019428:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801942c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019430:	3302      	adds	r3, #2
 8019432:	e7c7      	b.n	80193c4 <_printf_common+0x58>
 8019434:	2301      	movs	r3, #1
 8019436:	4622      	mov	r2, r4
 8019438:	4641      	mov	r1, r8
 801943a:	4638      	mov	r0, r7
 801943c:	47c8      	blx	r9
 801943e:	3001      	adds	r0, #1
 8019440:	d0e6      	beq.n	8019410 <_printf_common+0xa4>
 8019442:	3601      	adds	r6, #1
 8019444:	e7d9      	b.n	80193fa <_printf_common+0x8e>
	...

08019448 <_printf_i>:
 8019448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801944c:	7e0f      	ldrb	r7, [r1, #24]
 801944e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019450:	2f78      	cmp	r7, #120	@ 0x78
 8019452:	4691      	mov	r9, r2
 8019454:	4680      	mov	r8, r0
 8019456:	460c      	mov	r4, r1
 8019458:	469a      	mov	sl, r3
 801945a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801945e:	d807      	bhi.n	8019470 <_printf_i+0x28>
 8019460:	2f62      	cmp	r7, #98	@ 0x62
 8019462:	d80a      	bhi.n	801947a <_printf_i+0x32>
 8019464:	2f00      	cmp	r7, #0
 8019466:	f000 80d1 	beq.w	801960c <_printf_i+0x1c4>
 801946a:	2f58      	cmp	r7, #88	@ 0x58
 801946c:	f000 80b8 	beq.w	80195e0 <_printf_i+0x198>
 8019470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019474:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019478:	e03a      	b.n	80194f0 <_printf_i+0xa8>
 801947a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801947e:	2b15      	cmp	r3, #21
 8019480:	d8f6      	bhi.n	8019470 <_printf_i+0x28>
 8019482:	a101      	add	r1, pc, #4	@ (adr r1, 8019488 <_printf_i+0x40>)
 8019484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019488:	080194e1 	.word	0x080194e1
 801948c:	080194f5 	.word	0x080194f5
 8019490:	08019471 	.word	0x08019471
 8019494:	08019471 	.word	0x08019471
 8019498:	08019471 	.word	0x08019471
 801949c:	08019471 	.word	0x08019471
 80194a0:	080194f5 	.word	0x080194f5
 80194a4:	08019471 	.word	0x08019471
 80194a8:	08019471 	.word	0x08019471
 80194ac:	08019471 	.word	0x08019471
 80194b0:	08019471 	.word	0x08019471
 80194b4:	080195f3 	.word	0x080195f3
 80194b8:	0801951f 	.word	0x0801951f
 80194bc:	080195ad 	.word	0x080195ad
 80194c0:	08019471 	.word	0x08019471
 80194c4:	08019471 	.word	0x08019471
 80194c8:	08019615 	.word	0x08019615
 80194cc:	08019471 	.word	0x08019471
 80194d0:	0801951f 	.word	0x0801951f
 80194d4:	08019471 	.word	0x08019471
 80194d8:	08019471 	.word	0x08019471
 80194dc:	080195b5 	.word	0x080195b5
 80194e0:	6833      	ldr	r3, [r6, #0]
 80194e2:	1d1a      	adds	r2, r3, #4
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	6032      	str	r2, [r6, #0]
 80194e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80194ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80194f0:	2301      	movs	r3, #1
 80194f2:	e09c      	b.n	801962e <_printf_i+0x1e6>
 80194f4:	6833      	ldr	r3, [r6, #0]
 80194f6:	6820      	ldr	r0, [r4, #0]
 80194f8:	1d19      	adds	r1, r3, #4
 80194fa:	6031      	str	r1, [r6, #0]
 80194fc:	0606      	lsls	r6, r0, #24
 80194fe:	d501      	bpl.n	8019504 <_printf_i+0xbc>
 8019500:	681d      	ldr	r5, [r3, #0]
 8019502:	e003      	b.n	801950c <_printf_i+0xc4>
 8019504:	0645      	lsls	r5, r0, #25
 8019506:	d5fb      	bpl.n	8019500 <_printf_i+0xb8>
 8019508:	f9b3 5000 	ldrsh.w	r5, [r3]
 801950c:	2d00      	cmp	r5, #0
 801950e:	da03      	bge.n	8019518 <_printf_i+0xd0>
 8019510:	232d      	movs	r3, #45	@ 0x2d
 8019512:	426d      	negs	r5, r5
 8019514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019518:	4858      	ldr	r0, [pc, #352]	@ (801967c <_printf_i+0x234>)
 801951a:	230a      	movs	r3, #10
 801951c:	e011      	b.n	8019542 <_printf_i+0xfa>
 801951e:	6821      	ldr	r1, [r4, #0]
 8019520:	6833      	ldr	r3, [r6, #0]
 8019522:	0608      	lsls	r0, r1, #24
 8019524:	f853 5b04 	ldr.w	r5, [r3], #4
 8019528:	d402      	bmi.n	8019530 <_printf_i+0xe8>
 801952a:	0649      	lsls	r1, r1, #25
 801952c:	bf48      	it	mi
 801952e:	b2ad      	uxthmi	r5, r5
 8019530:	2f6f      	cmp	r7, #111	@ 0x6f
 8019532:	4852      	ldr	r0, [pc, #328]	@ (801967c <_printf_i+0x234>)
 8019534:	6033      	str	r3, [r6, #0]
 8019536:	bf14      	ite	ne
 8019538:	230a      	movne	r3, #10
 801953a:	2308      	moveq	r3, #8
 801953c:	2100      	movs	r1, #0
 801953e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019542:	6866      	ldr	r6, [r4, #4]
 8019544:	60a6      	str	r6, [r4, #8]
 8019546:	2e00      	cmp	r6, #0
 8019548:	db05      	blt.n	8019556 <_printf_i+0x10e>
 801954a:	6821      	ldr	r1, [r4, #0]
 801954c:	432e      	orrs	r6, r5
 801954e:	f021 0104 	bic.w	r1, r1, #4
 8019552:	6021      	str	r1, [r4, #0]
 8019554:	d04b      	beq.n	80195ee <_printf_i+0x1a6>
 8019556:	4616      	mov	r6, r2
 8019558:	fbb5 f1f3 	udiv	r1, r5, r3
 801955c:	fb03 5711 	mls	r7, r3, r1, r5
 8019560:	5dc7      	ldrb	r7, [r0, r7]
 8019562:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019566:	462f      	mov	r7, r5
 8019568:	42bb      	cmp	r3, r7
 801956a:	460d      	mov	r5, r1
 801956c:	d9f4      	bls.n	8019558 <_printf_i+0x110>
 801956e:	2b08      	cmp	r3, #8
 8019570:	d10b      	bne.n	801958a <_printf_i+0x142>
 8019572:	6823      	ldr	r3, [r4, #0]
 8019574:	07df      	lsls	r7, r3, #31
 8019576:	d508      	bpl.n	801958a <_printf_i+0x142>
 8019578:	6923      	ldr	r3, [r4, #16]
 801957a:	6861      	ldr	r1, [r4, #4]
 801957c:	4299      	cmp	r1, r3
 801957e:	bfde      	ittt	le
 8019580:	2330      	movle	r3, #48	@ 0x30
 8019582:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019586:	f106 36ff 	addle.w	r6, r6, #4294967295
 801958a:	1b92      	subs	r2, r2, r6
 801958c:	6122      	str	r2, [r4, #16]
 801958e:	f8cd a000 	str.w	sl, [sp]
 8019592:	464b      	mov	r3, r9
 8019594:	aa03      	add	r2, sp, #12
 8019596:	4621      	mov	r1, r4
 8019598:	4640      	mov	r0, r8
 801959a:	f7ff fee7 	bl	801936c <_printf_common>
 801959e:	3001      	adds	r0, #1
 80195a0:	d14a      	bne.n	8019638 <_printf_i+0x1f0>
 80195a2:	f04f 30ff 	mov.w	r0, #4294967295
 80195a6:	b004      	add	sp, #16
 80195a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195ac:	6823      	ldr	r3, [r4, #0]
 80195ae:	f043 0320 	orr.w	r3, r3, #32
 80195b2:	6023      	str	r3, [r4, #0]
 80195b4:	4832      	ldr	r0, [pc, #200]	@ (8019680 <_printf_i+0x238>)
 80195b6:	2778      	movs	r7, #120	@ 0x78
 80195b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80195bc:	6823      	ldr	r3, [r4, #0]
 80195be:	6831      	ldr	r1, [r6, #0]
 80195c0:	061f      	lsls	r7, r3, #24
 80195c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80195c6:	d402      	bmi.n	80195ce <_printf_i+0x186>
 80195c8:	065f      	lsls	r7, r3, #25
 80195ca:	bf48      	it	mi
 80195cc:	b2ad      	uxthmi	r5, r5
 80195ce:	6031      	str	r1, [r6, #0]
 80195d0:	07d9      	lsls	r1, r3, #31
 80195d2:	bf44      	itt	mi
 80195d4:	f043 0320 	orrmi.w	r3, r3, #32
 80195d8:	6023      	strmi	r3, [r4, #0]
 80195da:	b11d      	cbz	r5, 80195e4 <_printf_i+0x19c>
 80195dc:	2310      	movs	r3, #16
 80195de:	e7ad      	b.n	801953c <_printf_i+0xf4>
 80195e0:	4826      	ldr	r0, [pc, #152]	@ (801967c <_printf_i+0x234>)
 80195e2:	e7e9      	b.n	80195b8 <_printf_i+0x170>
 80195e4:	6823      	ldr	r3, [r4, #0]
 80195e6:	f023 0320 	bic.w	r3, r3, #32
 80195ea:	6023      	str	r3, [r4, #0]
 80195ec:	e7f6      	b.n	80195dc <_printf_i+0x194>
 80195ee:	4616      	mov	r6, r2
 80195f0:	e7bd      	b.n	801956e <_printf_i+0x126>
 80195f2:	6833      	ldr	r3, [r6, #0]
 80195f4:	6825      	ldr	r5, [r4, #0]
 80195f6:	6961      	ldr	r1, [r4, #20]
 80195f8:	1d18      	adds	r0, r3, #4
 80195fa:	6030      	str	r0, [r6, #0]
 80195fc:	062e      	lsls	r6, r5, #24
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	d501      	bpl.n	8019606 <_printf_i+0x1be>
 8019602:	6019      	str	r1, [r3, #0]
 8019604:	e002      	b.n	801960c <_printf_i+0x1c4>
 8019606:	0668      	lsls	r0, r5, #25
 8019608:	d5fb      	bpl.n	8019602 <_printf_i+0x1ba>
 801960a:	8019      	strh	r1, [r3, #0]
 801960c:	2300      	movs	r3, #0
 801960e:	6123      	str	r3, [r4, #16]
 8019610:	4616      	mov	r6, r2
 8019612:	e7bc      	b.n	801958e <_printf_i+0x146>
 8019614:	6833      	ldr	r3, [r6, #0]
 8019616:	1d1a      	adds	r2, r3, #4
 8019618:	6032      	str	r2, [r6, #0]
 801961a:	681e      	ldr	r6, [r3, #0]
 801961c:	6862      	ldr	r2, [r4, #4]
 801961e:	2100      	movs	r1, #0
 8019620:	4630      	mov	r0, r6
 8019622:	f7ee fe05 	bl	8008230 <memchr>
 8019626:	b108      	cbz	r0, 801962c <_printf_i+0x1e4>
 8019628:	1b80      	subs	r0, r0, r6
 801962a:	6060      	str	r0, [r4, #4]
 801962c:	6863      	ldr	r3, [r4, #4]
 801962e:	6123      	str	r3, [r4, #16]
 8019630:	2300      	movs	r3, #0
 8019632:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019636:	e7aa      	b.n	801958e <_printf_i+0x146>
 8019638:	6923      	ldr	r3, [r4, #16]
 801963a:	4632      	mov	r2, r6
 801963c:	4649      	mov	r1, r9
 801963e:	4640      	mov	r0, r8
 8019640:	47d0      	blx	sl
 8019642:	3001      	adds	r0, #1
 8019644:	d0ad      	beq.n	80195a2 <_printf_i+0x15a>
 8019646:	6823      	ldr	r3, [r4, #0]
 8019648:	079b      	lsls	r3, r3, #30
 801964a:	d413      	bmi.n	8019674 <_printf_i+0x22c>
 801964c:	68e0      	ldr	r0, [r4, #12]
 801964e:	9b03      	ldr	r3, [sp, #12]
 8019650:	4298      	cmp	r0, r3
 8019652:	bfb8      	it	lt
 8019654:	4618      	movlt	r0, r3
 8019656:	e7a6      	b.n	80195a6 <_printf_i+0x15e>
 8019658:	2301      	movs	r3, #1
 801965a:	4632      	mov	r2, r6
 801965c:	4649      	mov	r1, r9
 801965e:	4640      	mov	r0, r8
 8019660:	47d0      	blx	sl
 8019662:	3001      	adds	r0, #1
 8019664:	d09d      	beq.n	80195a2 <_printf_i+0x15a>
 8019666:	3501      	adds	r5, #1
 8019668:	68e3      	ldr	r3, [r4, #12]
 801966a:	9903      	ldr	r1, [sp, #12]
 801966c:	1a5b      	subs	r3, r3, r1
 801966e:	42ab      	cmp	r3, r5
 8019670:	dcf2      	bgt.n	8019658 <_printf_i+0x210>
 8019672:	e7eb      	b.n	801964c <_printf_i+0x204>
 8019674:	2500      	movs	r5, #0
 8019676:	f104 0619 	add.w	r6, r4, #25
 801967a:	e7f5      	b.n	8019668 <_printf_i+0x220>
 801967c:	0801f292 	.word	0x0801f292
 8019680:	0801f2a3 	.word	0x0801f2a3

08019684 <std>:
 8019684:	2300      	movs	r3, #0
 8019686:	b510      	push	{r4, lr}
 8019688:	4604      	mov	r4, r0
 801968a:	e9c0 3300 	strd	r3, r3, [r0]
 801968e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019692:	6083      	str	r3, [r0, #8]
 8019694:	8181      	strh	r1, [r0, #12]
 8019696:	6643      	str	r3, [r0, #100]	@ 0x64
 8019698:	81c2      	strh	r2, [r0, #14]
 801969a:	6183      	str	r3, [r0, #24]
 801969c:	4619      	mov	r1, r3
 801969e:	2208      	movs	r2, #8
 80196a0:	305c      	adds	r0, #92	@ 0x5c
 80196a2:	f000 fa5d 	bl	8019b60 <memset>
 80196a6:	4b0d      	ldr	r3, [pc, #52]	@ (80196dc <std+0x58>)
 80196a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80196aa:	4b0d      	ldr	r3, [pc, #52]	@ (80196e0 <std+0x5c>)
 80196ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80196ae:	4b0d      	ldr	r3, [pc, #52]	@ (80196e4 <std+0x60>)
 80196b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80196b2:	4b0d      	ldr	r3, [pc, #52]	@ (80196e8 <std+0x64>)
 80196b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80196b6:	4b0d      	ldr	r3, [pc, #52]	@ (80196ec <std+0x68>)
 80196b8:	6224      	str	r4, [r4, #32]
 80196ba:	429c      	cmp	r4, r3
 80196bc:	d006      	beq.n	80196cc <std+0x48>
 80196be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80196c2:	4294      	cmp	r4, r2
 80196c4:	d002      	beq.n	80196cc <std+0x48>
 80196c6:	33d0      	adds	r3, #208	@ 0xd0
 80196c8:	429c      	cmp	r4, r3
 80196ca:	d105      	bne.n	80196d8 <std+0x54>
 80196cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80196d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80196d4:	f000 bb0c 	b.w	8019cf0 <__retarget_lock_init_recursive>
 80196d8:	bd10      	pop	{r4, pc}
 80196da:	bf00      	nop
 80196dc:	08019935 	.word	0x08019935
 80196e0:	0801995b 	.word	0x0801995b
 80196e4:	08019993 	.word	0x08019993
 80196e8:	080199b7 	.word	0x080199b7
 80196ec:	20014308 	.word	0x20014308

080196f0 <stdio_exit_handler>:
 80196f0:	4a02      	ldr	r2, [pc, #8]	@ (80196fc <stdio_exit_handler+0xc>)
 80196f2:	4903      	ldr	r1, [pc, #12]	@ (8019700 <stdio_exit_handler+0x10>)
 80196f4:	4803      	ldr	r0, [pc, #12]	@ (8019704 <stdio_exit_handler+0x14>)
 80196f6:	f000 b869 	b.w	80197cc <_fwalk_sglue>
 80196fa:	bf00      	nop
 80196fc:	2000009c 	.word	0x2000009c
 8019700:	0801c709 	.word	0x0801c709
 8019704:	20000218 	.word	0x20000218

08019708 <cleanup_stdio>:
 8019708:	6841      	ldr	r1, [r0, #4]
 801970a:	4b0c      	ldr	r3, [pc, #48]	@ (801973c <cleanup_stdio+0x34>)
 801970c:	4299      	cmp	r1, r3
 801970e:	b510      	push	{r4, lr}
 8019710:	4604      	mov	r4, r0
 8019712:	d001      	beq.n	8019718 <cleanup_stdio+0x10>
 8019714:	f002 fff8 	bl	801c708 <_fflush_r>
 8019718:	68a1      	ldr	r1, [r4, #8]
 801971a:	4b09      	ldr	r3, [pc, #36]	@ (8019740 <cleanup_stdio+0x38>)
 801971c:	4299      	cmp	r1, r3
 801971e:	d002      	beq.n	8019726 <cleanup_stdio+0x1e>
 8019720:	4620      	mov	r0, r4
 8019722:	f002 fff1 	bl	801c708 <_fflush_r>
 8019726:	68e1      	ldr	r1, [r4, #12]
 8019728:	4b06      	ldr	r3, [pc, #24]	@ (8019744 <cleanup_stdio+0x3c>)
 801972a:	4299      	cmp	r1, r3
 801972c:	d004      	beq.n	8019738 <cleanup_stdio+0x30>
 801972e:	4620      	mov	r0, r4
 8019730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019734:	f002 bfe8 	b.w	801c708 <_fflush_r>
 8019738:	bd10      	pop	{r4, pc}
 801973a:	bf00      	nop
 801973c:	20014308 	.word	0x20014308
 8019740:	20014370 	.word	0x20014370
 8019744:	200143d8 	.word	0x200143d8

08019748 <global_stdio_init.part.0>:
 8019748:	b510      	push	{r4, lr}
 801974a:	4b0b      	ldr	r3, [pc, #44]	@ (8019778 <global_stdio_init.part.0+0x30>)
 801974c:	4c0b      	ldr	r4, [pc, #44]	@ (801977c <global_stdio_init.part.0+0x34>)
 801974e:	4a0c      	ldr	r2, [pc, #48]	@ (8019780 <global_stdio_init.part.0+0x38>)
 8019750:	601a      	str	r2, [r3, #0]
 8019752:	4620      	mov	r0, r4
 8019754:	2200      	movs	r2, #0
 8019756:	2104      	movs	r1, #4
 8019758:	f7ff ff94 	bl	8019684 <std>
 801975c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019760:	2201      	movs	r2, #1
 8019762:	2109      	movs	r1, #9
 8019764:	f7ff ff8e 	bl	8019684 <std>
 8019768:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801976c:	2202      	movs	r2, #2
 801976e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019772:	2112      	movs	r1, #18
 8019774:	f7ff bf86 	b.w	8019684 <std>
 8019778:	20014440 	.word	0x20014440
 801977c:	20014308 	.word	0x20014308
 8019780:	080196f1 	.word	0x080196f1

08019784 <__sfp_lock_acquire>:
 8019784:	4801      	ldr	r0, [pc, #4]	@ (801978c <__sfp_lock_acquire+0x8>)
 8019786:	f000 bab4 	b.w	8019cf2 <__retarget_lock_acquire_recursive>
 801978a:	bf00      	nop
 801978c:	20014449 	.word	0x20014449

08019790 <__sfp_lock_release>:
 8019790:	4801      	ldr	r0, [pc, #4]	@ (8019798 <__sfp_lock_release+0x8>)
 8019792:	f000 baaf 	b.w	8019cf4 <__retarget_lock_release_recursive>
 8019796:	bf00      	nop
 8019798:	20014449 	.word	0x20014449

0801979c <__sinit>:
 801979c:	b510      	push	{r4, lr}
 801979e:	4604      	mov	r4, r0
 80197a0:	f7ff fff0 	bl	8019784 <__sfp_lock_acquire>
 80197a4:	6a23      	ldr	r3, [r4, #32]
 80197a6:	b11b      	cbz	r3, 80197b0 <__sinit+0x14>
 80197a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197ac:	f7ff bff0 	b.w	8019790 <__sfp_lock_release>
 80197b0:	4b04      	ldr	r3, [pc, #16]	@ (80197c4 <__sinit+0x28>)
 80197b2:	6223      	str	r3, [r4, #32]
 80197b4:	4b04      	ldr	r3, [pc, #16]	@ (80197c8 <__sinit+0x2c>)
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d1f5      	bne.n	80197a8 <__sinit+0xc>
 80197bc:	f7ff ffc4 	bl	8019748 <global_stdio_init.part.0>
 80197c0:	e7f2      	b.n	80197a8 <__sinit+0xc>
 80197c2:	bf00      	nop
 80197c4:	08019709 	.word	0x08019709
 80197c8:	20014440 	.word	0x20014440

080197cc <_fwalk_sglue>:
 80197cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80197d0:	4607      	mov	r7, r0
 80197d2:	4688      	mov	r8, r1
 80197d4:	4614      	mov	r4, r2
 80197d6:	2600      	movs	r6, #0
 80197d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80197dc:	f1b9 0901 	subs.w	r9, r9, #1
 80197e0:	d505      	bpl.n	80197ee <_fwalk_sglue+0x22>
 80197e2:	6824      	ldr	r4, [r4, #0]
 80197e4:	2c00      	cmp	r4, #0
 80197e6:	d1f7      	bne.n	80197d8 <_fwalk_sglue+0xc>
 80197e8:	4630      	mov	r0, r6
 80197ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197ee:	89ab      	ldrh	r3, [r5, #12]
 80197f0:	2b01      	cmp	r3, #1
 80197f2:	d907      	bls.n	8019804 <_fwalk_sglue+0x38>
 80197f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80197f8:	3301      	adds	r3, #1
 80197fa:	d003      	beq.n	8019804 <_fwalk_sglue+0x38>
 80197fc:	4629      	mov	r1, r5
 80197fe:	4638      	mov	r0, r7
 8019800:	47c0      	blx	r8
 8019802:	4306      	orrs	r6, r0
 8019804:	3568      	adds	r5, #104	@ 0x68
 8019806:	e7e9      	b.n	80197dc <_fwalk_sglue+0x10>

08019808 <iprintf>:
 8019808:	b40f      	push	{r0, r1, r2, r3}
 801980a:	b507      	push	{r0, r1, r2, lr}
 801980c:	4906      	ldr	r1, [pc, #24]	@ (8019828 <iprintf+0x20>)
 801980e:	ab04      	add	r3, sp, #16
 8019810:	6808      	ldr	r0, [r1, #0]
 8019812:	f853 2b04 	ldr.w	r2, [r3], #4
 8019816:	6881      	ldr	r1, [r0, #8]
 8019818:	9301      	str	r3, [sp, #4]
 801981a:	f002 fc8b 	bl	801c134 <_vfiprintf_r>
 801981e:	b003      	add	sp, #12
 8019820:	f85d eb04 	ldr.w	lr, [sp], #4
 8019824:	b004      	add	sp, #16
 8019826:	4770      	bx	lr
 8019828:	20000214 	.word	0x20000214

0801982c <sniprintf>:
 801982c:	b40c      	push	{r2, r3}
 801982e:	b530      	push	{r4, r5, lr}
 8019830:	4b18      	ldr	r3, [pc, #96]	@ (8019894 <sniprintf+0x68>)
 8019832:	1e0c      	subs	r4, r1, #0
 8019834:	681d      	ldr	r5, [r3, #0]
 8019836:	b09d      	sub	sp, #116	@ 0x74
 8019838:	da08      	bge.n	801984c <sniprintf+0x20>
 801983a:	238b      	movs	r3, #139	@ 0x8b
 801983c:	602b      	str	r3, [r5, #0]
 801983e:	f04f 30ff 	mov.w	r0, #4294967295
 8019842:	b01d      	add	sp, #116	@ 0x74
 8019844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019848:	b002      	add	sp, #8
 801984a:	4770      	bx	lr
 801984c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019850:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019854:	f04f 0300 	mov.w	r3, #0
 8019858:	931b      	str	r3, [sp, #108]	@ 0x6c
 801985a:	bf14      	ite	ne
 801985c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019860:	4623      	moveq	r3, r4
 8019862:	9304      	str	r3, [sp, #16]
 8019864:	9307      	str	r3, [sp, #28]
 8019866:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801986a:	9002      	str	r0, [sp, #8]
 801986c:	9006      	str	r0, [sp, #24]
 801986e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019872:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019874:	ab21      	add	r3, sp, #132	@ 0x84
 8019876:	a902      	add	r1, sp, #8
 8019878:	4628      	mov	r0, r5
 801987a:	9301      	str	r3, [sp, #4]
 801987c:	f002 f964 	bl	801bb48 <_svfiprintf_r>
 8019880:	1c43      	adds	r3, r0, #1
 8019882:	bfbc      	itt	lt
 8019884:	238b      	movlt	r3, #139	@ 0x8b
 8019886:	602b      	strlt	r3, [r5, #0]
 8019888:	2c00      	cmp	r4, #0
 801988a:	d0da      	beq.n	8019842 <sniprintf+0x16>
 801988c:	9b02      	ldr	r3, [sp, #8]
 801988e:	2200      	movs	r2, #0
 8019890:	701a      	strb	r2, [r3, #0]
 8019892:	e7d6      	b.n	8019842 <sniprintf+0x16>
 8019894:	20000214 	.word	0x20000214

08019898 <siprintf>:
 8019898:	b40e      	push	{r1, r2, r3}
 801989a:	b510      	push	{r4, lr}
 801989c:	b09d      	sub	sp, #116	@ 0x74
 801989e:	ab1f      	add	r3, sp, #124	@ 0x7c
 80198a0:	9002      	str	r0, [sp, #8]
 80198a2:	9006      	str	r0, [sp, #24]
 80198a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80198a8:	480a      	ldr	r0, [pc, #40]	@ (80198d4 <siprintf+0x3c>)
 80198aa:	9107      	str	r1, [sp, #28]
 80198ac:	9104      	str	r1, [sp, #16]
 80198ae:	490a      	ldr	r1, [pc, #40]	@ (80198d8 <siprintf+0x40>)
 80198b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80198b4:	9105      	str	r1, [sp, #20]
 80198b6:	2400      	movs	r4, #0
 80198b8:	a902      	add	r1, sp, #8
 80198ba:	6800      	ldr	r0, [r0, #0]
 80198bc:	9301      	str	r3, [sp, #4]
 80198be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80198c0:	f002 f942 	bl	801bb48 <_svfiprintf_r>
 80198c4:	9b02      	ldr	r3, [sp, #8]
 80198c6:	701c      	strb	r4, [r3, #0]
 80198c8:	b01d      	add	sp, #116	@ 0x74
 80198ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80198ce:	b003      	add	sp, #12
 80198d0:	4770      	bx	lr
 80198d2:	bf00      	nop
 80198d4:	20000214 	.word	0x20000214
 80198d8:	ffff0208 	.word	0xffff0208

080198dc <siscanf>:
 80198dc:	b40e      	push	{r1, r2, r3}
 80198de:	b570      	push	{r4, r5, r6, lr}
 80198e0:	b09d      	sub	sp, #116	@ 0x74
 80198e2:	ac21      	add	r4, sp, #132	@ 0x84
 80198e4:	2500      	movs	r5, #0
 80198e6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80198ea:	f854 6b04 	ldr.w	r6, [r4], #4
 80198ee:	f8ad 2014 	strh.w	r2, [sp, #20]
 80198f2:	951b      	str	r5, [sp, #108]	@ 0x6c
 80198f4:	9002      	str	r0, [sp, #8]
 80198f6:	9006      	str	r0, [sp, #24]
 80198f8:	f7ee fcea 	bl	80082d0 <strlen>
 80198fc:	4b0b      	ldr	r3, [pc, #44]	@ (801992c <siscanf+0x50>)
 80198fe:	9003      	str	r0, [sp, #12]
 8019900:	9007      	str	r0, [sp, #28]
 8019902:	480b      	ldr	r0, [pc, #44]	@ (8019930 <siscanf+0x54>)
 8019904:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019906:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801990a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801990e:	4632      	mov	r2, r6
 8019910:	4623      	mov	r3, r4
 8019912:	a902      	add	r1, sp, #8
 8019914:	6800      	ldr	r0, [r0, #0]
 8019916:	950f      	str	r5, [sp, #60]	@ 0x3c
 8019918:	9514      	str	r5, [sp, #80]	@ 0x50
 801991a:	9401      	str	r4, [sp, #4]
 801991c:	f002 fa6a 	bl	801bdf4 <__ssvfiscanf_r>
 8019920:	b01d      	add	sp, #116	@ 0x74
 8019922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019926:	b003      	add	sp, #12
 8019928:	4770      	bx	lr
 801992a:	bf00      	nop
 801992c:	08019957 	.word	0x08019957
 8019930:	20000214 	.word	0x20000214

08019934 <__sread>:
 8019934:	b510      	push	{r4, lr}
 8019936:	460c      	mov	r4, r1
 8019938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801993c:	f000 f97a 	bl	8019c34 <_read_r>
 8019940:	2800      	cmp	r0, #0
 8019942:	bfab      	itete	ge
 8019944:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019946:	89a3      	ldrhlt	r3, [r4, #12]
 8019948:	181b      	addge	r3, r3, r0
 801994a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801994e:	bfac      	ite	ge
 8019950:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019952:	81a3      	strhlt	r3, [r4, #12]
 8019954:	bd10      	pop	{r4, pc}

08019956 <__seofread>:
 8019956:	2000      	movs	r0, #0
 8019958:	4770      	bx	lr

0801995a <__swrite>:
 801995a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801995e:	461f      	mov	r7, r3
 8019960:	898b      	ldrh	r3, [r1, #12]
 8019962:	05db      	lsls	r3, r3, #23
 8019964:	4605      	mov	r5, r0
 8019966:	460c      	mov	r4, r1
 8019968:	4616      	mov	r6, r2
 801996a:	d505      	bpl.n	8019978 <__swrite+0x1e>
 801996c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019970:	2302      	movs	r3, #2
 8019972:	2200      	movs	r2, #0
 8019974:	f000 f94c 	bl	8019c10 <_lseek_r>
 8019978:	89a3      	ldrh	r3, [r4, #12]
 801997a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801997e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019982:	81a3      	strh	r3, [r4, #12]
 8019984:	4632      	mov	r2, r6
 8019986:	463b      	mov	r3, r7
 8019988:	4628      	mov	r0, r5
 801998a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801998e:	f000 b973 	b.w	8019c78 <_write_r>

08019992 <__sseek>:
 8019992:	b510      	push	{r4, lr}
 8019994:	460c      	mov	r4, r1
 8019996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801999a:	f000 f939 	bl	8019c10 <_lseek_r>
 801999e:	1c43      	adds	r3, r0, #1
 80199a0:	89a3      	ldrh	r3, [r4, #12]
 80199a2:	bf15      	itete	ne
 80199a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80199a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80199aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80199ae:	81a3      	strheq	r3, [r4, #12]
 80199b0:	bf18      	it	ne
 80199b2:	81a3      	strhne	r3, [r4, #12]
 80199b4:	bd10      	pop	{r4, pc}

080199b6 <__sclose>:
 80199b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199ba:	f000 b919 	b.w	8019bf0 <_close_r>

080199be <_vsniprintf_r>:
 80199be:	b530      	push	{r4, r5, lr}
 80199c0:	4614      	mov	r4, r2
 80199c2:	2c00      	cmp	r4, #0
 80199c4:	b09b      	sub	sp, #108	@ 0x6c
 80199c6:	4605      	mov	r5, r0
 80199c8:	461a      	mov	r2, r3
 80199ca:	da05      	bge.n	80199d8 <_vsniprintf_r+0x1a>
 80199cc:	238b      	movs	r3, #139	@ 0x8b
 80199ce:	6003      	str	r3, [r0, #0]
 80199d0:	f04f 30ff 	mov.w	r0, #4294967295
 80199d4:	b01b      	add	sp, #108	@ 0x6c
 80199d6:	bd30      	pop	{r4, r5, pc}
 80199d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80199dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80199e0:	f04f 0300 	mov.w	r3, #0
 80199e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80199e6:	bf14      	ite	ne
 80199e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80199ec:	4623      	moveq	r3, r4
 80199ee:	9302      	str	r3, [sp, #8]
 80199f0:	9305      	str	r3, [sp, #20]
 80199f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80199f6:	9100      	str	r1, [sp, #0]
 80199f8:	9104      	str	r1, [sp, #16]
 80199fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80199fe:	4669      	mov	r1, sp
 8019a00:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019a02:	f002 f8a1 	bl	801bb48 <_svfiprintf_r>
 8019a06:	1c43      	adds	r3, r0, #1
 8019a08:	bfbc      	itt	lt
 8019a0a:	238b      	movlt	r3, #139	@ 0x8b
 8019a0c:	602b      	strlt	r3, [r5, #0]
 8019a0e:	2c00      	cmp	r4, #0
 8019a10:	d0e0      	beq.n	80199d4 <_vsniprintf_r+0x16>
 8019a12:	9b00      	ldr	r3, [sp, #0]
 8019a14:	2200      	movs	r2, #0
 8019a16:	701a      	strb	r2, [r3, #0]
 8019a18:	e7dc      	b.n	80199d4 <_vsniprintf_r+0x16>
	...

08019a1c <vsniprintf>:
 8019a1c:	b507      	push	{r0, r1, r2, lr}
 8019a1e:	9300      	str	r3, [sp, #0]
 8019a20:	4613      	mov	r3, r2
 8019a22:	460a      	mov	r2, r1
 8019a24:	4601      	mov	r1, r0
 8019a26:	4803      	ldr	r0, [pc, #12]	@ (8019a34 <vsniprintf+0x18>)
 8019a28:	6800      	ldr	r0, [r0, #0]
 8019a2a:	f7ff ffc8 	bl	80199be <_vsniprintf_r>
 8019a2e:	b003      	add	sp, #12
 8019a30:	f85d fb04 	ldr.w	pc, [sp], #4
 8019a34:	20000214 	.word	0x20000214

08019a38 <__swbuf_r>:
 8019a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a3a:	460e      	mov	r6, r1
 8019a3c:	4614      	mov	r4, r2
 8019a3e:	4605      	mov	r5, r0
 8019a40:	b118      	cbz	r0, 8019a4a <__swbuf_r+0x12>
 8019a42:	6a03      	ldr	r3, [r0, #32]
 8019a44:	b90b      	cbnz	r3, 8019a4a <__swbuf_r+0x12>
 8019a46:	f7ff fea9 	bl	801979c <__sinit>
 8019a4a:	69a3      	ldr	r3, [r4, #24]
 8019a4c:	60a3      	str	r3, [r4, #8]
 8019a4e:	89a3      	ldrh	r3, [r4, #12]
 8019a50:	071a      	lsls	r2, r3, #28
 8019a52:	d501      	bpl.n	8019a58 <__swbuf_r+0x20>
 8019a54:	6923      	ldr	r3, [r4, #16]
 8019a56:	b943      	cbnz	r3, 8019a6a <__swbuf_r+0x32>
 8019a58:	4621      	mov	r1, r4
 8019a5a:	4628      	mov	r0, r5
 8019a5c:	f000 f82a 	bl	8019ab4 <__swsetup_r>
 8019a60:	b118      	cbz	r0, 8019a6a <__swbuf_r+0x32>
 8019a62:	f04f 37ff 	mov.w	r7, #4294967295
 8019a66:	4638      	mov	r0, r7
 8019a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a6a:	6823      	ldr	r3, [r4, #0]
 8019a6c:	6922      	ldr	r2, [r4, #16]
 8019a6e:	1a98      	subs	r0, r3, r2
 8019a70:	6963      	ldr	r3, [r4, #20]
 8019a72:	b2f6      	uxtb	r6, r6
 8019a74:	4283      	cmp	r3, r0
 8019a76:	4637      	mov	r7, r6
 8019a78:	dc05      	bgt.n	8019a86 <__swbuf_r+0x4e>
 8019a7a:	4621      	mov	r1, r4
 8019a7c:	4628      	mov	r0, r5
 8019a7e:	f002 fe43 	bl	801c708 <_fflush_r>
 8019a82:	2800      	cmp	r0, #0
 8019a84:	d1ed      	bne.n	8019a62 <__swbuf_r+0x2a>
 8019a86:	68a3      	ldr	r3, [r4, #8]
 8019a88:	3b01      	subs	r3, #1
 8019a8a:	60a3      	str	r3, [r4, #8]
 8019a8c:	6823      	ldr	r3, [r4, #0]
 8019a8e:	1c5a      	adds	r2, r3, #1
 8019a90:	6022      	str	r2, [r4, #0]
 8019a92:	701e      	strb	r6, [r3, #0]
 8019a94:	6962      	ldr	r2, [r4, #20]
 8019a96:	1c43      	adds	r3, r0, #1
 8019a98:	429a      	cmp	r2, r3
 8019a9a:	d004      	beq.n	8019aa6 <__swbuf_r+0x6e>
 8019a9c:	89a3      	ldrh	r3, [r4, #12]
 8019a9e:	07db      	lsls	r3, r3, #31
 8019aa0:	d5e1      	bpl.n	8019a66 <__swbuf_r+0x2e>
 8019aa2:	2e0a      	cmp	r6, #10
 8019aa4:	d1df      	bne.n	8019a66 <__swbuf_r+0x2e>
 8019aa6:	4621      	mov	r1, r4
 8019aa8:	4628      	mov	r0, r5
 8019aaa:	f002 fe2d 	bl	801c708 <_fflush_r>
 8019aae:	2800      	cmp	r0, #0
 8019ab0:	d0d9      	beq.n	8019a66 <__swbuf_r+0x2e>
 8019ab2:	e7d6      	b.n	8019a62 <__swbuf_r+0x2a>

08019ab4 <__swsetup_r>:
 8019ab4:	b538      	push	{r3, r4, r5, lr}
 8019ab6:	4b29      	ldr	r3, [pc, #164]	@ (8019b5c <__swsetup_r+0xa8>)
 8019ab8:	4605      	mov	r5, r0
 8019aba:	6818      	ldr	r0, [r3, #0]
 8019abc:	460c      	mov	r4, r1
 8019abe:	b118      	cbz	r0, 8019ac8 <__swsetup_r+0x14>
 8019ac0:	6a03      	ldr	r3, [r0, #32]
 8019ac2:	b90b      	cbnz	r3, 8019ac8 <__swsetup_r+0x14>
 8019ac4:	f7ff fe6a 	bl	801979c <__sinit>
 8019ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019acc:	0719      	lsls	r1, r3, #28
 8019ace:	d422      	bmi.n	8019b16 <__swsetup_r+0x62>
 8019ad0:	06da      	lsls	r2, r3, #27
 8019ad2:	d407      	bmi.n	8019ae4 <__swsetup_r+0x30>
 8019ad4:	2209      	movs	r2, #9
 8019ad6:	602a      	str	r2, [r5, #0]
 8019ad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019adc:	81a3      	strh	r3, [r4, #12]
 8019ade:	f04f 30ff 	mov.w	r0, #4294967295
 8019ae2:	e033      	b.n	8019b4c <__swsetup_r+0x98>
 8019ae4:	0758      	lsls	r0, r3, #29
 8019ae6:	d512      	bpl.n	8019b0e <__swsetup_r+0x5a>
 8019ae8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019aea:	b141      	cbz	r1, 8019afe <__swsetup_r+0x4a>
 8019aec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019af0:	4299      	cmp	r1, r3
 8019af2:	d002      	beq.n	8019afa <__swsetup_r+0x46>
 8019af4:	4628      	mov	r0, r5
 8019af6:	f000 ff77 	bl	801a9e8 <_free_r>
 8019afa:	2300      	movs	r3, #0
 8019afc:	6363      	str	r3, [r4, #52]	@ 0x34
 8019afe:	89a3      	ldrh	r3, [r4, #12]
 8019b00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019b04:	81a3      	strh	r3, [r4, #12]
 8019b06:	2300      	movs	r3, #0
 8019b08:	6063      	str	r3, [r4, #4]
 8019b0a:	6923      	ldr	r3, [r4, #16]
 8019b0c:	6023      	str	r3, [r4, #0]
 8019b0e:	89a3      	ldrh	r3, [r4, #12]
 8019b10:	f043 0308 	orr.w	r3, r3, #8
 8019b14:	81a3      	strh	r3, [r4, #12]
 8019b16:	6923      	ldr	r3, [r4, #16]
 8019b18:	b94b      	cbnz	r3, 8019b2e <__swsetup_r+0x7a>
 8019b1a:	89a3      	ldrh	r3, [r4, #12]
 8019b1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019b24:	d003      	beq.n	8019b2e <__swsetup_r+0x7a>
 8019b26:	4621      	mov	r1, r4
 8019b28:	4628      	mov	r0, r5
 8019b2a:	f002 fe3b 	bl	801c7a4 <__smakebuf_r>
 8019b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b32:	f013 0201 	ands.w	r2, r3, #1
 8019b36:	d00a      	beq.n	8019b4e <__swsetup_r+0x9a>
 8019b38:	2200      	movs	r2, #0
 8019b3a:	60a2      	str	r2, [r4, #8]
 8019b3c:	6962      	ldr	r2, [r4, #20]
 8019b3e:	4252      	negs	r2, r2
 8019b40:	61a2      	str	r2, [r4, #24]
 8019b42:	6922      	ldr	r2, [r4, #16]
 8019b44:	b942      	cbnz	r2, 8019b58 <__swsetup_r+0xa4>
 8019b46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019b4a:	d1c5      	bne.n	8019ad8 <__swsetup_r+0x24>
 8019b4c:	bd38      	pop	{r3, r4, r5, pc}
 8019b4e:	0799      	lsls	r1, r3, #30
 8019b50:	bf58      	it	pl
 8019b52:	6962      	ldrpl	r2, [r4, #20]
 8019b54:	60a2      	str	r2, [r4, #8]
 8019b56:	e7f4      	b.n	8019b42 <__swsetup_r+0x8e>
 8019b58:	2000      	movs	r0, #0
 8019b5a:	e7f7      	b.n	8019b4c <__swsetup_r+0x98>
 8019b5c:	20000214 	.word	0x20000214

08019b60 <memset>:
 8019b60:	4402      	add	r2, r0
 8019b62:	4603      	mov	r3, r0
 8019b64:	4293      	cmp	r3, r2
 8019b66:	d100      	bne.n	8019b6a <memset+0xa>
 8019b68:	4770      	bx	lr
 8019b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8019b6e:	e7f9      	b.n	8019b64 <memset+0x4>

08019b70 <strncmp>:
 8019b70:	b510      	push	{r4, lr}
 8019b72:	b16a      	cbz	r2, 8019b90 <strncmp+0x20>
 8019b74:	3901      	subs	r1, #1
 8019b76:	1884      	adds	r4, r0, r2
 8019b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019b7c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019b80:	429a      	cmp	r2, r3
 8019b82:	d103      	bne.n	8019b8c <strncmp+0x1c>
 8019b84:	42a0      	cmp	r0, r4
 8019b86:	d001      	beq.n	8019b8c <strncmp+0x1c>
 8019b88:	2a00      	cmp	r2, #0
 8019b8a:	d1f5      	bne.n	8019b78 <strncmp+0x8>
 8019b8c:	1ad0      	subs	r0, r2, r3
 8019b8e:	bd10      	pop	{r4, pc}
 8019b90:	4610      	mov	r0, r2
 8019b92:	e7fc      	b.n	8019b8e <strncmp+0x1e>

08019b94 <strncpy>:
 8019b94:	b510      	push	{r4, lr}
 8019b96:	3901      	subs	r1, #1
 8019b98:	4603      	mov	r3, r0
 8019b9a:	b132      	cbz	r2, 8019baa <strncpy+0x16>
 8019b9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019ba0:	f803 4b01 	strb.w	r4, [r3], #1
 8019ba4:	3a01      	subs	r2, #1
 8019ba6:	2c00      	cmp	r4, #0
 8019ba8:	d1f7      	bne.n	8019b9a <strncpy+0x6>
 8019baa:	441a      	add	r2, r3
 8019bac:	2100      	movs	r1, #0
 8019bae:	4293      	cmp	r3, r2
 8019bb0:	d100      	bne.n	8019bb4 <strncpy+0x20>
 8019bb2:	bd10      	pop	{r4, pc}
 8019bb4:	f803 1b01 	strb.w	r1, [r3], #1
 8019bb8:	e7f9      	b.n	8019bae <strncpy+0x1a>

08019bba <strstr>:
 8019bba:	780a      	ldrb	r2, [r1, #0]
 8019bbc:	b570      	push	{r4, r5, r6, lr}
 8019bbe:	b96a      	cbnz	r2, 8019bdc <strstr+0x22>
 8019bc0:	bd70      	pop	{r4, r5, r6, pc}
 8019bc2:	429a      	cmp	r2, r3
 8019bc4:	d109      	bne.n	8019bda <strstr+0x20>
 8019bc6:	460c      	mov	r4, r1
 8019bc8:	4605      	mov	r5, r0
 8019bca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d0f6      	beq.n	8019bc0 <strstr+0x6>
 8019bd2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019bd6:	429e      	cmp	r6, r3
 8019bd8:	d0f7      	beq.n	8019bca <strstr+0x10>
 8019bda:	3001      	adds	r0, #1
 8019bdc:	7803      	ldrb	r3, [r0, #0]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d1ef      	bne.n	8019bc2 <strstr+0x8>
 8019be2:	4618      	mov	r0, r3
 8019be4:	e7ec      	b.n	8019bc0 <strstr+0x6>
	...

08019be8 <_localeconv_r>:
 8019be8:	4800      	ldr	r0, [pc, #0]	@ (8019bec <_localeconv_r+0x4>)
 8019bea:	4770      	bx	lr
 8019bec:	20000198 	.word	0x20000198

08019bf0 <_close_r>:
 8019bf0:	b538      	push	{r3, r4, r5, lr}
 8019bf2:	4d06      	ldr	r5, [pc, #24]	@ (8019c0c <_close_r+0x1c>)
 8019bf4:	2300      	movs	r3, #0
 8019bf6:	4604      	mov	r4, r0
 8019bf8:	4608      	mov	r0, r1
 8019bfa:	602b      	str	r3, [r5, #0]
 8019bfc:	f7f7 f820 	bl	8010c40 <_close>
 8019c00:	1c43      	adds	r3, r0, #1
 8019c02:	d102      	bne.n	8019c0a <_close_r+0x1a>
 8019c04:	682b      	ldr	r3, [r5, #0]
 8019c06:	b103      	cbz	r3, 8019c0a <_close_r+0x1a>
 8019c08:	6023      	str	r3, [r4, #0]
 8019c0a:	bd38      	pop	{r3, r4, r5, pc}
 8019c0c:	20014444 	.word	0x20014444

08019c10 <_lseek_r>:
 8019c10:	b538      	push	{r3, r4, r5, lr}
 8019c12:	4d07      	ldr	r5, [pc, #28]	@ (8019c30 <_lseek_r+0x20>)
 8019c14:	4604      	mov	r4, r0
 8019c16:	4608      	mov	r0, r1
 8019c18:	4611      	mov	r1, r2
 8019c1a:	2200      	movs	r2, #0
 8019c1c:	602a      	str	r2, [r5, #0]
 8019c1e:	461a      	mov	r2, r3
 8019c20:	f7f7 f835 	bl	8010c8e <_lseek>
 8019c24:	1c43      	adds	r3, r0, #1
 8019c26:	d102      	bne.n	8019c2e <_lseek_r+0x1e>
 8019c28:	682b      	ldr	r3, [r5, #0]
 8019c2a:	b103      	cbz	r3, 8019c2e <_lseek_r+0x1e>
 8019c2c:	6023      	str	r3, [r4, #0]
 8019c2e:	bd38      	pop	{r3, r4, r5, pc}
 8019c30:	20014444 	.word	0x20014444

08019c34 <_read_r>:
 8019c34:	b538      	push	{r3, r4, r5, lr}
 8019c36:	4d07      	ldr	r5, [pc, #28]	@ (8019c54 <_read_r+0x20>)
 8019c38:	4604      	mov	r4, r0
 8019c3a:	4608      	mov	r0, r1
 8019c3c:	4611      	mov	r1, r2
 8019c3e:	2200      	movs	r2, #0
 8019c40:	602a      	str	r2, [r5, #0]
 8019c42:	461a      	mov	r2, r3
 8019c44:	f7f6 ffc3 	bl	8010bce <_read>
 8019c48:	1c43      	adds	r3, r0, #1
 8019c4a:	d102      	bne.n	8019c52 <_read_r+0x1e>
 8019c4c:	682b      	ldr	r3, [r5, #0]
 8019c4e:	b103      	cbz	r3, 8019c52 <_read_r+0x1e>
 8019c50:	6023      	str	r3, [r4, #0]
 8019c52:	bd38      	pop	{r3, r4, r5, pc}
 8019c54:	20014444 	.word	0x20014444

08019c58 <_sbrk_r>:
 8019c58:	b538      	push	{r3, r4, r5, lr}
 8019c5a:	4d06      	ldr	r5, [pc, #24]	@ (8019c74 <_sbrk_r+0x1c>)
 8019c5c:	2300      	movs	r3, #0
 8019c5e:	4604      	mov	r4, r0
 8019c60:	4608      	mov	r0, r1
 8019c62:	602b      	str	r3, [r5, #0]
 8019c64:	f003 f806 	bl	801cc74 <_sbrk>
 8019c68:	1c43      	adds	r3, r0, #1
 8019c6a:	d102      	bne.n	8019c72 <_sbrk_r+0x1a>
 8019c6c:	682b      	ldr	r3, [r5, #0]
 8019c6e:	b103      	cbz	r3, 8019c72 <_sbrk_r+0x1a>
 8019c70:	6023      	str	r3, [r4, #0]
 8019c72:	bd38      	pop	{r3, r4, r5, pc}
 8019c74:	20014444 	.word	0x20014444

08019c78 <_write_r>:
 8019c78:	b538      	push	{r3, r4, r5, lr}
 8019c7a:	4d07      	ldr	r5, [pc, #28]	@ (8019c98 <_write_r+0x20>)
 8019c7c:	4604      	mov	r4, r0
 8019c7e:	4608      	mov	r0, r1
 8019c80:	4611      	mov	r1, r2
 8019c82:	2200      	movs	r2, #0
 8019c84:	602a      	str	r2, [r5, #0]
 8019c86:	461a      	mov	r2, r3
 8019c88:	f7f6 ffbe 	bl	8010c08 <_write>
 8019c8c:	1c43      	adds	r3, r0, #1
 8019c8e:	d102      	bne.n	8019c96 <_write_r+0x1e>
 8019c90:	682b      	ldr	r3, [r5, #0]
 8019c92:	b103      	cbz	r3, 8019c96 <_write_r+0x1e>
 8019c94:	6023      	str	r3, [r4, #0]
 8019c96:	bd38      	pop	{r3, r4, r5, pc}
 8019c98:	20014444 	.word	0x20014444

08019c9c <__errno>:
 8019c9c:	4b01      	ldr	r3, [pc, #4]	@ (8019ca4 <__errno+0x8>)
 8019c9e:	6818      	ldr	r0, [r3, #0]
 8019ca0:	4770      	bx	lr
 8019ca2:	bf00      	nop
 8019ca4:	20000214 	.word	0x20000214

08019ca8 <__libc_init_array>:
 8019ca8:	b570      	push	{r4, r5, r6, lr}
 8019caa:	4d0d      	ldr	r5, [pc, #52]	@ (8019ce0 <__libc_init_array+0x38>)
 8019cac:	4c0d      	ldr	r4, [pc, #52]	@ (8019ce4 <__libc_init_array+0x3c>)
 8019cae:	1b64      	subs	r4, r4, r5
 8019cb0:	10a4      	asrs	r4, r4, #2
 8019cb2:	2600      	movs	r6, #0
 8019cb4:	42a6      	cmp	r6, r4
 8019cb6:	d109      	bne.n	8019ccc <__libc_init_array+0x24>
 8019cb8:	4d0b      	ldr	r5, [pc, #44]	@ (8019ce8 <__libc_init_array+0x40>)
 8019cba:	4c0c      	ldr	r4, [pc, #48]	@ (8019cec <__libc_init_array+0x44>)
 8019cbc:	f002 ffe8 	bl	801cc90 <_init>
 8019cc0:	1b64      	subs	r4, r4, r5
 8019cc2:	10a4      	asrs	r4, r4, #2
 8019cc4:	2600      	movs	r6, #0
 8019cc6:	42a6      	cmp	r6, r4
 8019cc8:	d105      	bne.n	8019cd6 <__libc_init_array+0x2e>
 8019cca:	bd70      	pop	{r4, r5, r6, pc}
 8019ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8019cd0:	4798      	blx	r3
 8019cd2:	3601      	adds	r6, #1
 8019cd4:	e7ee      	b.n	8019cb4 <__libc_init_array+0xc>
 8019cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8019cda:	4798      	blx	r3
 8019cdc:	3601      	adds	r6, #1
 8019cde:	e7f2      	b.n	8019cc6 <__libc_init_array+0x1e>
 8019ce0:	0801f6c8 	.word	0x0801f6c8
 8019ce4:	0801f6c8 	.word	0x0801f6c8
 8019ce8:	0801f6c8 	.word	0x0801f6c8
 8019cec:	0801f6cc 	.word	0x0801f6cc

08019cf0 <__retarget_lock_init_recursive>:
 8019cf0:	4770      	bx	lr

08019cf2 <__retarget_lock_acquire_recursive>:
 8019cf2:	4770      	bx	lr

08019cf4 <__retarget_lock_release_recursive>:
 8019cf4:	4770      	bx	lr

08019cf6 <strcpy>:
 8019cf6:	4603      	mov	r3, r0
 8019cf8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019cfc:	f803 2b01 	strb.w	r2, [r3], #1
 8019d00:	2a00      	cmp	r2, #0
 8019d02:	d1f9      	bne.n	8019cf8 <strcpy+0x2>
 8019d04:	4770      	bx	lr

08019d06 <memcpy>:
 8019d06:	440a      	add	r2, r1
 8019d08:	4291      	cmp	r1, r2
 8019d0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8019d0e:	d100      	bne.n	8019d12 <memcpy+0xc>
 8019d10:	4770      	bx	lr
 8019d12:	b510      	push	{r4, lr}
 8019d14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019d18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019d1c:	4291      	cmp	r1, r2
 8019d1e:	d1f9      	bne.n	8019d14 <memcpy+0xe>
 8019d20:	bd10      	pop	{r4, pc}
 8019d22:	0000      	movs	r0, r0
 8019d24:	0000      	movs	r0, r0
	...

08019d28 <nan>:
 8019d28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8019d30 <nan+0x8>
 8019d2c:	4770      	bx	lr
 8019d2e:	bf00      	nop
 8019d30:	00000000 	.word	0x00000000
 8019d34:	7ff80000 	.word	0x7ff80000

08019d38 <quorem>:
 8019d38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d3c:	6903      	ldr	r3, [r0, #16]
 8019d3e:	690c      	ldr	r4, [r1, #16]
 8019d40:	42a3      	cmp	r3, r4
 8019d42:	4607      	mov	r7, r0
 8019d44:	db7e      	blt.n	8019e44 <quorem+0x10c>
 8019d46:	3c01      	subs	r4, #1
 8019d48:	f101 0814 	add.w	r8, r1, #20
 8019d4c:	00a3      	lsls	r3, r4, #2
 8019d4e:	f100 0514 	add.w	r5, r0, #20
 8019d52:	9300      	str	r3, [sp, #0]
 8019d54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019d58:	9301      	str	r3, [sp, #4]
 8019d5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019d5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019d62:	3301      	adds	r3, #1
 8019d64:	429a      	cmp	r2, r3
 8019d66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019d6a:	fbb2 f6f3 	udiv	r6, r2, r3
 8019d6e:	d32e      	bcc.n	8019dce <quorem+0x96>
 8019d70:	f04f 0a00 	mov.w	sl, #0
 8019d74:	46c4      	mov	ip, r8
 8019d76:	46ae      	mov	lr, r5
 8019d78:	46d3      	mov	fp, sl
 8019d7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8019d7e:	b298      	uxth	r0, r3
 8019d80:	fb06 a000 	mla	r0, r6, r0, sl
 8019d84:	0c02      	lsrs	r2, r0, #16
 8019d86:	0c1b      	lsrs	r3, r3, #16
 8019d88:	fb06 2303 	mla	r3, r6, r3, r2
 8019d8c:	f8de 2000 	ldr.w	r2, [lr]
 8019d90:	b280      	uxth	r0, r0
 8019d92:	b292      	uxth	r2, r2
 8019d94:	1a12      	subs	r2, r2, r0
 8019d96:	445a      	add	r2, fp
 8019d98:	f8de 0000 	ldr.w	r0, [lr]
 8019d9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019da0:	b29b      	uxth	r3, r3
 8019da2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8019da6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8019daa:	b292      	uxth	r2, r2
 8019dac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8019db0:	45e1      	cmp	r9, ip
 8019db2:	f84e 2b04 	str.w	r2, [lr], #4
 8019db6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8019dba:	d2de      	bcs.n	8019d7a <quorem+0x42>
 8019dbc:	9b00      	ldr	r3, [sp, #0]
 8019dbe:	58eb      	ldr	r3, [r5, r3]
 8019dc0:	b92b      	cbnz	r3, 8019dce <quorem+0x96>
 8019dc2:	9b01      	ldr	r3, [sp, #4]
 8019dc4:	3b04      	subs	r3, #4
 8019dc6:	429d      	cmp	r5, r3
 8019dc8:	461a      	mov	r2, r3
 8019dca:	d32f      	bcc.n	8019e2c <quorem+0xf4>
 8019dcc:	613c      	str	r4, [r7, #16]
 8019dce:	4638      	mov	r0, r7
 8019dd0:	f001 fc5c 	bl	801b68c <__mcmp>
 8019dd4:	2800      	cmp	r0, #0
 8019dd6:	db25      	blt.n	8019e24 <quorem+0xec>
 8019dd8:	4629      	mov	r1, r5
 8019dda:	2000      	movs	r0, #0
 8019ddc:	f858 2b04 	ldr.w	r2, [r8], #4
 8019de0:	f8d1 c000 	ldr.w	ip, [r1]
 8019de4:	fa1f fe82 	uxth.w	lr, r2
 8019de8:	fa1f f38c 	uxth.w	r3, ip
 8019dec:	eba3 030e 	sub.w	r3, r3, lr
 8019df0:	4403      	add	r3, r0
 8019df2:	0c12      	lsrs	r2, r2, #16
 8019df4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8019df8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8019dfc:	b29b      	uxth	r3, r3
 8019dfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019e02:	45c1      	cmp	r9, r8
 8019e04:	f841 3b04 	str.w	r3, [r1], #4
 8019e08:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019e0c:	d2e6      	bcs.n	8019ddc <quorem+0xa4>
 8019e0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019e12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019e16:	b922      	cbnz	r2, 8019e22 <quorem+0xea>
 8019e18:	3b04      	subs	r3, #4
 8019e1a:	429d      	cmp	r5, r3
 8019e1c:	461a      	mov	r2, r3
 8019e1e:	d30b      	bcc.n	8019e38 <quorem+0x100>
 8019e20:	613c      	str	r4, [r7, #16]
 8019e22:	3601      	adds	r6, #1
 8019e24:	4630      	mov	r0, r6
 8019e26:	b003      	add	sp, #12
 8019e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e2c:	6812      	ldr	r2, [r2, #0]
 8019e2e:	3b04      	subs	r3, #4
 8019e30:	2a00      	cmp	r2, #0
 8019e32:	d1cb      	bne.n	8019dcc <quorem+0x94>
 8019e34:	3c01      	subs	r4, #1
 8019e36:	e7c6      	b.n	8019dc6 <quorem+0x8e>
 8019e38:	6812      	ldr	r2, [r2, #0]
 8019e3a:	3b04      	subs	r3, #4
 8019e3c:	2a00      	cmp	r2, #0
 8019e3e:	d1ef      	bne.n	8019e20 <quorem+0xe8>
 8019e40:	3c01      	subs	r4, #1
 8019e42:	e7ea      	b.n	8019e1a <quorem+0xe2>
 8019e44:	2000      	movs	r0, #0
 8019e46:	e7ee      	b.n	8019e26 <quorem+0xee>

08019e48 <_dtoa_r>:
 8019e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e4c:	69c7      	ldr	r7, [r0, #28]
 8019e4e:	b097      	sub	sp, #92	@ 0x5c
 8019e50:	ed8d 0b04 	vstr	d0, [sp, #16]
 8019e54:	ec55 4b10 	vmov	r4, r5, d0
 8019e58:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8019e5a:	9107      	str	r1, [sp, #28]
 8019e5c:	4681      	mov	r9, r0
 8019e5e:	920c      	str	r2, [sp, #48]	@ 0x30
 8019e60:	9311      	str	r3, [sp, #68]	@ 0x44
 8019e62:	b97f      	cbnz	r7, 8019e84 <_dtoa_r+0x3c>
 8019e64:	2010      	movs	r0, #16
 8019e66:	f7fe f8b5 	bl	8017fd4 <malloc>
 8019e6a:	4602      	mov	r2, r0
 8019e6c:	f8c9 001c 	str.w	r0, [r9, #28]
 8019e70:	b920      	cbnz	r0, 8019e7c <_dtoa_r+0x34>
 8019e72:	4ba9      	ldr	r3, [pc, #676]	@ (801a118 <_dtoa_r+0x2d0>)
 8019e74:	21ef      	movs	r1, #239	@ 0xef
 8019e76:	48a9      	ldr	r0, [pc, #676]	@ (801a11c <_dtoa_r+0x2d4>)
 8019e78:	f002 fd80 	bl	801c97c <__assert_func>
 8019e7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8019e80:	6007      	str	r7, [r0, #0]
 8019e82:	60c7      	str	r7, [r0, #12]
 8019e84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019e88:	6819      	ldr	r1, [r3, #0]
 8019e8a:	b159      	cbz	r1, 8019ea4 <_dtoa_r+0x5c>
 8019e8c:	685a      	ldr	r2, [r3, #4]
 8019e8e:	604a      	str	r2, [r1, #4]
 8019e90:	2301      	movs	r3, #1
 8019e92:	4093      	lsls	r3, r2
 8019e94:	608b      	str	r3, [r1, #8]
 8019e96:	4648      	mov	r0, r9
 8019e98:	f001 f97c 	bl	801b194 <_Bfree>
 8019e9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019ea0:	2200      	movs	r2, #0
 8019ea2:	601a      	str	r2, [r3, #0]
 8019ea4:	1e2b      	subs	r3, r5, #0
 8019ea6:	bfb9      	ittee	lt
 8019ea8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8019eac:	9305      	strlt	r3, [sp, #20]
 8019eae:	2300      	movge	r3, #0
 8019eb0:	6033      	strge	r3, [r6, #0]
 8019eb2:	9f05      	ldr	r7, [sp, #20]
 8019eb4:	4b9a      	ldr	r3, [pc, #616]	@ (801a120 <_dtoa_r+0x2d8>)
 8019eb6:	bfbc      	itt	lt
 8019eb8:	2201      	movlt	r2, #1
 8019eba:	6032      	strlt	r2, [r6, #0]
 8019ebc:	43bb      	bics	r3, r7
 8019ebe:	d112      	bne.n	8019ee6 <_dtoa_r+0x9e>
 8019ec0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019ec2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8019ec6:	6013      	str	r3, [r2, #0]
 8019ec8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019ecc:	4323      	orrs	r3, r4
 8019ece:	f000 855a 	beq.w	801a986 <_dtoa_r+0xb3e>
 8019ed2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8019ed4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801a134 <_dtoa_r+0x2ec>
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	f000 855c 	beq.w	801a996 <_dtoa_r+0xb4e>
 8019ede:	f10a 0303 	add.w	r3, sl, #3
 8019ee2:	f000 bd56 	b.w	801a992 <_dtoa_r+0xb4a>
 8019ee6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8019eea:	2200      	movs	r2, #0
 8019eec:	ec51 0b17 	vmov	r0, r1, d7
 8019ef0:	2300      	movs	r3, #0
 8019ef2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8019ef6:	f7ee fe17 	bl	8008b28 <__aeabi_dcmpeq>
 8019efa:	4680      	mov	r8, r0
 8019efc:	b158      	cbz	r0, 8019f16 <_dtoa_r+0xce>
 8019efe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019f00:	2301      	movs	r3, #1
 8019f02:	6013      	str	r3, [r2, #0]
 8019f04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8019f06:	b113      	cbz	r3, 8019f0e <_dtoa_r+0xc6>
 8019f08:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019f0a:	4b86      	ldr	r3, [pc, #536]	@ (801a124 <_dtoa_r+0x2dc>)
 8019f0c:	6013      	str	r3, [r2, #0]
 8019f0e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801a138 <_dtoa_r+0x2f0>
 8019f12:	f000 bd40 	b.w	801a996 <_dtoa_r+0xb4e>
 8019f16:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8019f1a:	aa14      	add	r2, sp, #80	@ 0x50
 8019f1c:	a915      	add	r1, sp, #84	@ 0x54
 8019f1e:	4648      	mov	r0, r9
 8019f20:	f001 fcd4 	bl	801b8cc <__d2b>
 8019f24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8019f28:	9002      	str	r0, [sp, #8]
 8019f2a:	2e00      	cmp	r6, #0
 8019f2c:	d078      	beq.n	801a020 <_dtoa_r+0x1d8>
 8019f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019f30:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8019f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019f38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8019f3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8019f40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8019f44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8019f48:	4619      	mov	r1, r3
 8019f4a:	2200      	movs	r2, #0
 8019f4c:	4b76      	ldr	r3, [pc, #472]	@ (801a128 <_dtoa_r+0x2e0>)
 8019f4e:	f7ee f9cb 	bl	80082e8 <__aeabi_dsub>
 8019f52:	a36b      	add	r3, pc, #428	@ (adr r3, 801a100 <_dtoa_r+0x2b8>)
 8019f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f58:	f7ee fb7e 	bl	8008658 <__aeabi_dmul>
 8019f5c:	a36a      	add	r3, pc, #424	@ (adr r3, 801a108 <_dtoa_r+0x2c0>)
 8019f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f62:	f7ee f9c3 	bl	80082ec <__adddf3>
 8019f66:	4604      	mov	r4, r0
 8019f68:	4630      	mov	r0, r6
 8019f6a:	460d      	mov	r5, r1
 8019f6c:	f7ee fb0a 	bl	8008584 <__aeabi_i2d>
 8019f70:	a367      	add	r3, pc, #412	@ (adr r3, 801a110 <_dtoa_r+0x2c8>)
 8019f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f76:	f7ee fb6f 	bl	8008658 <__aeabi_dmul>
 8019f7a:	4602      	mov	r2, r0
 8019f7c:	460b      	mov	r3, r1
 8019f7e:	4620      	mov	r0, r4
 8019f80:	4629      	mov	r1, r5
 8019f82:	f7ee f9b3 	bl	80082ec <__adddf3>
 8019f86:	4604      	mov	r4, r0
 8019f88:	460d      	mov	r5, r1
 8019f8a:	f7ee fe15 	bl	8008bb8 <__aeabi_d2iz>
 8019f8e:	2200      	movs	r2, #0
 8019f90:	4607      	mov	r7, r0
 8019f92:	2300      	movs	r3, #0
 8019f94:	4620      	mov	r0, r4
 8019f96:	4629      	mov	r1, r5
 8019f98:	f7ee fdd0 	bl	8008b3c <__aeabi_dcmplt>
 8019f9c:	b140      	cbz	r0, 8019fb0 <_dtoa_r+0x168>
 8019f9e:	4638      	mov	r0, r7
 8019fa0:	f7ee faf0 	bl	8008584 <__aeabi_i2d>
 8019fa4:	4622      	mov	r2, r4
 8019fa6:	462b      	mov	r3, r5
 8019fa8:	f7ee fdbe 	bl	8008b28 <__aeabi_dcmpeq>
 8019fac:	b900      	cbnz	r0, 8019fb0 <_dtoa_r+0x168>
 8019fae:	3f01      	subs	r7, #1
 8019fb0:	2f16      	cmp	r7, #22
 8019fb2:	d852      	bhi.n	801a05a <_dtoa_r+0x212>
 8019fb4:	4b5d      	ldr	r3, [pc, #372]	@ (801a12c <_dtoa_r+0x2e4>)
 8019fb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8019fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8019fc2:	f7ee fdbb 	bl	8008b3c <__aeabi_dcmplt>
 8019fc6:	2800      	cmp	r0, #0
 8019fc8:	d049      	beq.n	801a05e <_dtoa_r+0x216>
 8019fca:	3f01      	subs	r7, #1
 8019fcc:	2300      	movs	r3, #0
 8019fce:	9310      	str	r3, [sp, #64]	@ 0x40
 8019fd0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019fd2:	1b9b      	subs	r3, r3, r6
 8019fd4:	1e5a      	subs	r2, r3, #1
 8019fd6:	bf45      	ittet	mi
 8019fd8:	f1c3 0301 	rsbmi	r3, r3, #1
 8019fdc:	9300      	strmi	r3, [sp, #0]
 8019fde:	2300      	movpl	r3, #0
 8019fe0:	2300      	movmi	r3, #0
 8019fe2:	9206      	str	r2, [sp, #24]
 8019fe4:	bf54      	ite	pl
 8019fe6:	9300      	strpl	r3, [sp, #0]
 8019fe8:	9306      	strmi	r3, [sp, #24]
 8019fea:	2f00      	cmp	r7, #0
 8019fec:	db39      	blt.n	801a062 <_dtoa_r+0x21a>
 8019fee:	9b06      	ldr	r3, [sp, #24]
 8019ff0:	970d      	str	r7, [sp, #52]	@ 0x34
 8019ff2:	443b      	add	r3, r7
 8019ff4:	9306      	str	r3, [sp, #24]
 8019ff6:	2300      	movs	r3, #0
 8019ff8:	9308      	str	r3, [sp, #32]
 8019ffa:	9b07      	ldr	r3, [sp, #28]
 8019ffc:	2b09      	cmp	r3, #9
 8019ffe:	d863      	bhi.n	801a0c8 <_dtoa_r+0x280>
 801a000:	2b05      	cmp	r3, #5
 801a002:	bfc4      	itt	gt
 801a004:	3b04      	subgt	r3, #4
 801a006:	9307      	strgt	r3, [sp, #28]
 801a008:	9b07      	ldr	r3, [sp, #28]
 801a00a:	f1a3 0302 	sub.w	r3, r3, #2
 801a00e:	bfcc      	ite	gt
 801a010:	2400      	movgt	r4, #0
 801a012:	2401      	movle	r4, #1
 801a014:	2b03      	cmp	r3, #3
 801a016:	d863      	bhi.n	801a0e0 <_dtoa_r+0x298>
 801a018:	e8df f003 	tbb	[pc, r3]
 801a01c:	2b375452 	.word	0x2b375452
 801a020:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801a024:	441e      	add	r6, r3
 801a026:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801a02a:	2b20      	cmp	r3, #32
 801a02c:	bfc1      	itttt	gt
 801a02e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801a032:	409f      	lslgt	r7, r3
 801a034:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801a038:	fa24 f303 	lsrgt.w	r3, r4, r3
 801a03c:	bfd6      	itet	le
 801a03e:	f1c3 0320 	rsble	r3, r3, #32
 801a042:	ea47 0003 	orrgt.w	r0, r7, r3
 801a046:	fa04 f003 	lslle.w	r0, r4, r3
 801a04a:	f7ee fa8b 	bl	8008564 <__aeabi_ui2d>
 801a04e:	2201      	movs	r2, #1
 801a050:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801a054:	3e01      	subs	r6, #1
 801a056:	9212      	str	r2, [sp, #72]	@ 0x48
 801a058:	e776      	b.n	8019f48 <_dtoa_r+0x100>
 801a05a:	2301      	movs	r3, #1
 801a05c:	e7b7      	b.n	8019fce <_dtoa_r+0x186>
 801a05e:	9010      	str	r0, [sp, #64]	@ 0x40
 801a060:	e7b6      	b.n	8019fd0 <_dtoa_r+0x188>
 801a062:	9b00      	ldr	r3, [sp, #0]
 801a064:	1bdb      	subs	r3, r3, r7
 801a066:	9300      	str	r3, [sp, #0]
 801a068:	427b      	negs	r3, r7
 801a06a:	9308      	str	r3, [sp, #32]
 801a06c:	2300      	movs	r3, #0
 801a06e:	930d      	str	r3, [sp, #52]	@ 0x34
 801a070:	e7c3      	b.n	8019ffa <_dtoa_r+0x1b2>
 801a072:	2301      	movs	r3, #1
 801a074:	9309      	str	r3, [sp, #36]	@ 0x24
 801a076:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a078:	eb07 0b03 	add.w	fp, r7, r3
 801a07c:	f10b 0301 	add.w	r3, fp, #1
 801a080:	2b01      	cmp	r3, #1
 801a082:	9303      	str	r3, [sp, #12]
 801a084:	bfb8      	it	lt
 801a086:	2301      	movlt	r3, #1
 801a088:	e006      	b.n	801a098 <_dtoa_r+0x250>
 801a08a:	2301      	movs	r3, #1
 801a08c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a08e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a090:	2b00      	cmp	r3, #0
 801a092:	dd28      	ble.n	801a0e6 <_dtoa_r+0x29e>
 801a094:	469b      	mov	fp, r3
 801a096:	9303      	str	r3, [sp, #12]
 801a098:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801a09c:	2100      	movs	r1, #0
 801a09e:	2204      	movs	r2, #4
 801a0a0:	f102 0514 	add.w	r5, r2, #20
 801a0a4:	429d      	cmp	r5, r3
 801a0a6:	d926      	bls.n	801a0f6 <_dtoa_r+0x2ae>
 801a0a8:	6041      	str	r1, [r0, #4]
 801a0aa:	4648      	mov	r0, r9
 801a0ac:	f001 f832 	bl	801b114 <_Balloc>
 801a0b0:	4682      	mov	sl, r0
 801a0b2:	2800      	cmp	r0, #0
 801a0b4:	d142      	bne.n	801a13c <_dtoa_r+0x2f4>
 801a0b6:	4b1e      	ldr	r3, [pc, #120]	@ (801a130 <_dtoa_r+0x2e8>)
 801a0b8:	4602      	mov	r2, r0
 801a0ba:	f240 11af 	movw	r1, #431	@ 0x1af
 801a0be:	e6da      	b.n	8019e76 <_dtoa_r+0x2e>
 801a0c0:	2300      	movs	r3, #0
 801a0c2:	e7e3      	b.n	801a08c <_dtoa_r+0x244>
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	e7d5      	b.n	801a074 <_dtoa_r+0x22c>
 801a0c8:	2401      	movs	r4, #1
 801a0ca:	2300      	movs	r3, #0
 801a0cc:	9307      	str	r3, [sp, #28]
 801a0ce:	9409      	str	r4, [sp, #36]	@ 0x24
 801a0d0:	f04f 3bff 	mov.w	fp, #4294967295
 801a0d4:	2200      	movs	r2, #0
 801a0d6:	f8cd b00c 	str.w	fp, [sp, #12]
 801a0da:	2312      	movs	r3, #18
 801a0dc:	920c      	str	r2, [sp, #48]	@ 0x30
 801a0de:	e7db      	b.n	801a098 <_dtoa_r+0x250>
 801a0e0:	2301      	movs	r3, #1
 801a0e2:	9309      	str	r3, [sp, #36]	@ 0x24
 801a0e4:	e7f4      	b.n	801a0d0 <_dtoa_r+0x288>
 801a0e6:	f04f 0b01 	mov.w	fp, #1
 801a0ea:	f8cd b00c 	str.w	fp, [sp, #12]
 801a0ee:	465b      	mov	r3, fp
 801a0f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801a0f4:	e7d0      	b.n	801a098 <_dtoa_r+0x250>
 801a0f6:	3101      	adds	r1, #1
 801a0f8:	0052      	lsls	r2, r2, #1
 801a0fa:	e7d1      	b.n	801a0a0 <_dtoa_r+0x258>
 801a0fc:	f3af 8000 	nop.w
 801a100:	636f4361 	.word	0x636f4361
 801a104:	3fd287a7 	.word	0x3fd287a7
 801a108:	8b60c8b3 	.word	0x8b60c8b3
 801a10c:	3fc68a28 	.word	0x3fc68a28
 801a110:	509f79fb 	.word	0x509f79fb
 801a114:	3fd34413 	.word	0x3fd34413
 801a118:	0801f2c9 	.word	0x0801f2c9
 801a11c:	0801f2e0 	.word	0x0801f2e0
 801a120:	7ff00000 	.word	0x7ff00000
 801a124:	0801f42a 	.word	0x0801f42a
 801a128:	3ff80000 	.word	0x3ff80000
 801a12c:	0801f5f8 	.word	0x0801f5f8
 801a130:	0801f338 	.word	0x0801f338
 801a134:	0801f2c5 	.word	0x0801f2c5
 801a138:	0801f429 	.word	0x0801f429
 801a13c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a140:	6018      	str	r0, [r3, #0]
 801a142:	9b03      	ldr	r3, [sp, #12]
 801a144:	2b0e      	cmp	r3, #14
 801a146:	f200 80a1 	bhi.w	801a28c <_dtoa_r+0x444>
 801a14a:	2c00      	cmp	r4, #0
 801a14c:	f000 809e 	beq.w	801a28c <_dtoa_r+0x444>
 801a150:	2f00      	cmp	r7, #0
 801a152:	dd33      	ble.n	801a1bc <_dtoa_r+0x374>
 801a154:	4b9c      	ldr	r3, [pc, #624]	@ (801a3c8 <_dtoa_r+0x580>)
 801a156:	f007 020f 	and.w	r2, r7, #15
 801a15a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a15e:	ed93 7b00 	vldr	d7, [r3]
 801a162:	05f8      	lsls	r0, r7, #23
 801a164:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801a168:	ea4f 1427 	mov.w	r4, r7, asr #4
 801a16c:	d516      	bpl.n	801a19c <_dtoa_r+0x354>
 801a16e:	4b97      	ldr	r3, [pc, #604]	@ (801a3cc <_dtoa_r+0x584>)
 801a170:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801a174:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a178:	f7ee fb98 	bl	80088ac <__aeabi_ddiv>
 801a17c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a180:	f004 040f 	and.w	r4, r4, #15
 801a184:	2603      	movs	r6, #3
 801a186:	4d91      	ldr	r5, [pc, #580]	@ (801a3cc <_dtoa_r+0x584>)
 801a188:	b954      	cbnz	r4, 801a1a0 <_dtoa_r+0x358>
 801a18a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801a18e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a192:	f7ee fb8b 	bl	80088ac <__aeabi_ddiv>
 801a196:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a19a:	e028      	b.n	801a1ee <_dtoa_r+0x3a6>
 801a19c:	2602      	movs	r6, #2
 801a19e:	e7f2      	b.n	801a186 <_dtoa_r+0x33e>
 801a1a0:	07e1      	lsls	r1, r4, #31
 801a1a2:	d508      	bpl.n	801a1b6 <_dtoa_r+0x36e>
 801a1a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801a1a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a1ac:	f7ee fa54 	bl	8008658 <__aeabi_dmul>
 801a1b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801a1b4:	3601      	adds	r6, #1
 801a1b6:	1064      	asrs	r4, r4, #1
 801a1b8:	3508      	adds	r5, #8
 801a1ba:	e7e5      	b.n	801a188 <_dtoa_r+0x340>
 801a1bc:	f000 80af 	beq.w	801a31e <_dtoa_r+0x4d6>
 801a1c0:	427c      	negs	r4, r7
 801a1c2:	4b81      	ldr	r3, [pc, #516]	@ (801a3c8 <_dtoa_r+0x580>)
 801a1c4:	4d81      	ldr	r5, [pc, #516]	@ (801a3cc <_dtoa_r+0x584>)
 801a1c6:	f004 020f 	and.w	r2, r4, #15
 801a1ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801a1d6:	f7ee fa3f 	bl	8008658 <__aeabi_dmul>
 801a1da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a1de:	1124      	asrs	r4, r4, #4
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	2602      	movs	r6, #2
 801a1e4:	2c00      	cmp	r4, #0
 801a1e6:	f040 808f 	bne.w	801a308 <_dtoa_r+0x4c0>
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d1d3      	bne.n	801a196 <_dtoa_r+0x34e>
 801a1ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a1f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	f000 8094 	beq.w	801a322 <_dtoa_r+0x4da>
 801a1fa:	4b75      	ldr	r3, [pc, #468]	@ (801a3d0 <_dtoa_r+0x588>)
 801a1fc:	2200      	movs	r2, #0
 801a1fe:	4620      	mov	r0, r4
 801a200:	4629      	mov	r1, r5
 801a202:	f7ee fc9b 	bl	8008b3c <__aeabi_dcmplt>
 801a206:	2800      	cmp	r0, #0
 801a208:	f000 808b 	beq.w	801a322 <_dtoa_r+0x4da>
 801a20c:	9b03      	ldr	r3, [sp, #12]
 801a20e:	2b00      	cmp	r3, #0
 801a210:	f000 8087 	beq.w	801a322 <_dtoa_r+0x4da>
 801a214:	f1bb 0f00 	cmp.w	fp, #0
 801a218:	dd34      	ble.n	801a284 <_dtoa_r+0x43c>
 801a21a:	4620      	mov	r0, r4
 801a21c:	4b6d      	ldr	r3, [pc, #436]	@ (801a3d4 <_dtoa_r+0x58c>)
 801a21e:	2200      	movs	r2, #0
 801a220:	4629      	mov	r1, r5
 801a222:	f7ee fa19 	bl	8008658 <__aeabi_dmul>
 801a226:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a22a:	f107 38ff 	add.w	r8, r7, #4294967295
 801a22e:	3601      	adds	r6, #1
 801a230:	465c      	mov	r4, fp
 801a232:	4630      	mov	r0, r6
 801a234:	f7ee f9a6 	bl	8008584 <__aeabi_i2d>
 801a238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a23c:	f7ee fa0c 	bl	8008658 <__aeabi_dmul>
 801a240:	4b65      	ldr	r3, [pc, #404]	@ (801a3d8 <_dtoa_r+0x590>)
 801a242:	2200      	movs	r2, #0
 801a244:	f7ee f852 	bl	80082ec <__adddf3>
 801a248:	4605      	mov	r5, r0
 801a24a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801a24e:	2c00      	cmp	r4, #0
 801a250:	d16a      	bne.n	801a328 <_dtoa_r+0x4e0>
 801a252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a256:	4b61      	ldr	r3, [pc, #388]	@ (801a3dc <_dtoa_r+0x594>)
 801a258:	2200      	movs	r2, #0
 801a25a:	f7ee f845 	bl	80082e8 <__aeabi_dsub>
 801a25e:	4602      	mov	r2, r0
 801a260:	460b      	mov	r3, r1
 801a262:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a266:	462a      	mov	r2, r5
 801a268:	4633      	mov	r3, r6
 801a26a:	f7ee fc85 	bl	8008b78 <__aeabi_dcmpgt>
 801a26e:	2800      	cmp	r0, #0
 801a270:	f040 8298 	bne.w	801a7a4 <_dtoa_r+0x95c>
 801a274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a278:	462a      	mov	r2, r5
 801a27a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801a27e:	f7ee fc5d 	bl	8008b3c <__aeabi_dcmplt>
 801a282:	bb38      	cbnz	r0, 801a2d4 <_dtoa_r+0x48c>
 801a284:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801a288:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801a28c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a28e:	2b00      	cmp	r3, #0
 801a290:	f2c0 8157 	blt.w	801a542 <_dtoa_r+0x6fa>
 801a294:	2f0e      	cmp	r7, #14
 801a296:	f300 8154 	bgt.w	801a542 <_dtoa_r+0x6fa>
 801a29a:	4b4b      	ldr	r3, [pc, #300]	@ (801a3c8 <_dtoa_r+0x580>)
 801a29c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801a2a0:	ed93 7b00 	vldr	d7, [r3]
 801a2a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	ed8d 7b00 	vstr	d7, [sp]
 801a2ac:	f280 80e5 	bge.w	801a47a <_dtoa_r+0x632>
 801a2b0:	9b03      	ldr	r3, [sp, #12]
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	f300 80e1 	bgt.w	801a47a <_dtoa_r+0x632>
 801a2b8:	d10c      	bne.n	801a2d4 <_dtoa_r+0x48c>
 801a2ba:	4b48      	ldr	r3, [pc, #288]	@ (801a3dc <_dtoa_r+0x594>)
 801a2bc:	2200      	movs	r2, #0
 801a2be:	ec51 0b17 	vmov	r0, r1, d7
 801a2c2:	f7ee f9c9 	bl	8008658 <__aeabi_dmul>
 801a2c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a2ca:	f7ee fc4b 	bl	8008b64 <__aeabi_dcmpge>
 801a2ce:	2800      	cmp	r0, #0
 801a2d0:	f000 8266 	beq.w	801a7a0 <_dtoa_r+0x958>
 801a2d4:	2400      	movs	r4, #0
 801a2d6:	4625      	mov	r5, r4
 801a2d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a2da:	4656      	mov	r6, sl
 801a2dc:	ea6f 0803 	mvn.w	r8, r3
 801a2e0:	2700      	movs	r7, #0
 801a2e2:	4621      	mov	r1, r4
 801a2e4:	4648      	mov	r0, r9
 801a2e6:	f000 ff55 	bl	801b194 <_Bfree>
 801a2ea:	2d00      	cmp	r5, #0
 801a2ec:	f000 80bd 	beq.w	801a46a <_dtoa_r+0x622>
 801a2f0:	b12f      	cbz	r7, 801a2fe <_dtoa_r+0x4b6>
 801a2f2:	42af      	cmp	r7, r5
 801a2f4:	d003      	beq.n	801a2fe <_dtoa_r+0x4b6>
 801a2f6:	4639      	mov	r1, r7
 801a2f8:	4648      	mov	r0, r9
 801a2fa:	f000 ff4b 	bl	801b194 <_Bfree>
 801a2fe:	4629      	mov	r1, r5
 801a300:	4648      	mov	r0, r9
 801a302:	f000 ff47 	bl	801b194 <_Bfree>
 801a306:	e0b0      	b.n	801a46a <_dtoa_r+0x622>
 801a308:	07e2      	lsls	r2, r4, #31
 801a30a:	d505      	bpl.n	801a318 <_dtoa_r+0x4d0>
 801a30c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a310:	f7ee f9a2 	bl	8008658 <__aeabi_dmul>
 801a314:	3601      	adds	r6, #1
 801a316:	2301      	movs	r3, #1
 801a318:	1064      	asrs	r4, r4, #1
 801a31a:	3508      	adds	r5, #8
 801a31c:	e762      	b.n	801a1e4 <_dtoa_r+0x39c>
 801a31e:	2602      	movs	r6, #2
 801a320:	e765      	b.n	801a1ee <_dtoa_r+0x3a6>
 801a322:	9c03      	ldr	r4, [sp, #12]
 801a324:	46b8      	mov	r8, r7
 801a326:	e784      	b.n	801a232 <_dtoa_r+0x3ea>
 801a328:	4b27      	ldr	r3, [pc, #156]	@ (801a3c8 <_dtoa_r+0x580>)
 801a32a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a32c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a330:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801a334:	4454      	add	r4, sl
 801a336:	2900      	cmp	r1, #0
 801a338:	d054      	beq.n	801a3e4 <_dtoa_r+0x59c>
 801a33a:	4929      	ldr	r1, [pc, #164]	@ (801a3e0 <_dtoa_r+0x598>)
 801a33c:	2000      	movs	r0, #0
 801a33e:	f7ee fab5 	bl	80088ac <__aeabi_ddiv>
 801a342:	4633      	mov	r3, r6
 801a344:	462a      	mov	r2, r5
 801a346:	f7ed ffcf 	bl	80082e8 <__aeabi_dsub>
 801a34a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801a34e:	4656      	mov	r6, sl
 801a350:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a354:	f7ee fc30 	bl	8008bb8 <__aeabi_d2iz>
 801a358:	4605      	mov	r5, r0
 801a35a:	f7ee f913 	bl	8008584 <__aeabi_i2d>
 801a35e:	4602      	mov	r2, r0
 801a360:	460b      	mov	r3, r1
 801a362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a366:	f7ed ffbf 	bl	80082e8 <__aeabi_dsub>
 801a36a:	3530      	adds	r5, #48	@ 0x30
 801a36c:	4602      	mov	r2, r0
 801a36e:	460b      	mov	r3, r1
 801a370:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a374:	f806 5b01 	strb.w	r5, [r6], #1
 801a378:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801a37c:	f7ee fbde 	bl	8008b3c <__aeabi_dcmplt>
 801a380:	2800      	cmp	r0, #0
 801a382:	d172      	bne.n	801a46a <_dtoa_r+0x622>
 801a384:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a388:	4911      	ldr	r1, [pc, #68]	@ (801a3d0 <_dtoa_r+0x588>)
 801a38a:	2000      	movs	r0, #0
 801a38c:	f7ed ffac 	bl	80082e8 <__aeabi_dsub>
 801a390:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801a394:	f7ee fbd2 	bl	8008b3c <__aeabi_dcmplt>
 801a398:	2800      	cmp	r0, #0
 801a39a:	f040 80b4 	bne.w	801a506 <_dtoa_r+0x6be>
 801a39e:	42a6      	cmp	r6, r4
 801a3a0:	f43f af70 	beq.w	801a284 <_dtoa_r+0x43c>
 801a3a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801a3a8:	4b0a      	ldr	r3, [pc, #40]	@ (801a3d4 <_dtoa_r+0x58c>)
 801a3aa:	2200      	movs	r2, #0
 801a3ac:	f7ee f954 	bl	8008658 <__aeabi_dmul>
 801a3b0:	4b08      	ldr	r3, [pc, #32]	@ (801a3d4 <_dtoa_r+0x58c>)
 801a3b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801a3b6:	2200      	movs	r2, #0
 801a3b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a3bc:	f7ee f94c 	bl	8008658 <__aeabi_dmul>
 801a3c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a3c4:	e7c4      	b.n	801a350 <_dtoa_r+0x508>
 801a3c6:	bf00      	nop
 801a3c8:	0801f5f8 	.word	0x0801f5f8
 801a3cc:	0801f5d0 	.word	0x0801f5d0
 801a3d0:	3ff00000 	.word	0x3ff00000
 801a3d4:	40240000 	.word	0x40240000
 801a3d8:	401c0000 	.word	0x401c0000
 801a3dc:	40140000 	.word	0x40140000
 801a3e0:	3fe00000 	.word	0x3fe00000
 801a3e4:	4631      	mov	r1, r6
 801a3e6:	4628      	mov	r0, r5
 801a3e8:	f7ee f936 	bl	8008658 <__aeabi_dmul>
 801a3ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801a3f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 801a3f2:	4656      	mov	r6, sl
 801a3f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a3f8:	f7ee fbde 	bl	8008bb8 <__aeabi_d2iz>
 801a3fc:	4605      	mov	r5, r0
 801a3fe:	f7ee f8c1 	bl	8008584 <__aeabi_i2d>
 801a402:	4602      	mov	r2, r0
 801a404:	460b      	mov	r3, r1
 801a406:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a40a:	f7ed ff6d 	bl	80082e8 <__aeabi_dsub>
 801a40e:	3530      	adds	r5, #48	@ 0x30
 801a410:	f806 5b01 	strb.w	r5, [r6], #1
 801a414:	4602      	mov	r2, r0
 801a416:	460b      	mov	r3, r1
 801a418:	42a6      	cmp	r6, r4
 801a41a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a41e:	f04f 0200 	mov.w	r2, #0
 801a422:	d124      	bne.n	801a46e <_dtoa_r+0x626>
 801a424:	4baf      	ldr	r3, [pc, #700]	@ (801a6e4 <_dtoa_r+0x89c>)
 801a426:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801a42a:	f7ed ff5f 	bl	80082ec <__adddf3>
 801a42e:	4602      	mov	r2, r0
 801a430:	460b      	mov	r3, r1
 801a432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a436:	f7ee fb9f 	bl	8008b78 <__aeabi_dcmpgt>
 801a43a:	2800      	cmp	r0, #0
 801a43c:	d163      	bne.n	801a506 <_dtoa_r+0x6be>
 801a43e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801a442:	49a8      	ldr	r1, [pc, #672]	@ (801a6e4 <_dtoa_r+0x89c>)
 801a444:	2000      	movs	r0, #0
 801a446:	f7ed ff4f 	bl	80082e8 <__aeabi_dsub>
 801a44a:	4602      	mov	r2, r0
 801a44c:	460b      	mov	r3, r1
 801a44e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a452:	f7ee fb73 	bl	8008b3c <__aeabi_dcmplt>
 801a456:	2800      	cmp	r0, #0
 801a458:	f43f af14 	beq.w	801a284 <_dtoa_r+0x43c>
 801a45c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801a45e:	1e73      	subs	r3, r6, #1
 801a460:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a462:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a466:	2b30      	cmp	r3, #48	@ 0x30
 801a468:	d0f8      	beq.n	801a45c <_dtoa_r+0x614>
 801a46a:	4647      	mov	r7, r8
 801a46c:	e03b      	b.n	801a4e6 <_dtoa_r+0x69e>
 801a46e:	4b9e      	ldr	r3, [pc, #632]	@ (801a6e8 <_dtoa_r+0x8a0>)
 801a470:	f7ee f8f2 	bl	8008658 <__aeabi_dmul>
 801a474:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a478:	e7bc      	b.n	801a3f4 <_dtoa_r+0x5ac>
 801a47a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801a47e:	4656      	mov	r6, sl
 801a480:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a484:	4620      	mov	r0, r4
 801a486:	4629      	mov	r1, r5
 801a488:	f7ee fa10 	bl	80088ac <__aeabi_ddiv>
 801a48c:	f7ee fb94 	bl	8008bb8 <__aeabi_d2iz>
 801a490:	4680      	mov	r8, r0
 801a492:	f7ee f877 	bl	8008584 <__aeabi_i2d>
 801a496:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a49a:	f7ee f8dd 	bl	8008658 <__aeabi_dmul>
 801a49e:	4602      	mov	r2, r0
 801a4a0:	460b      	mov	r3, r1
 801a4a2:	4620      	mov	r0, r4
 801a4a4:	4629      	mov	r1, r5
 801a4a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801a4aa:	f7ed ff1d 	bl	80082e8 <__aeabi_dsub>
 801a4ae:	f806 4b01 	strb.w	r4, [r6], #1
 801a4b2:	9d03      	ldr	r5, [sp, #12]
 801a4b4:	eba6 040a 	sub.w	r4, r6, sl
 801a4b8:	42a5      	cmp	r5, r4
 801a4ba:	4602      	mov	r2, r0
 801a4bc:	460b      	mov	r3, r1
 801a4be:	d133      	bne.n	801a528 <_dtoa_r+0x6e0>
 801a4c0:	f7ed ff14 	bl	80082ec <__adddf3>
 801a4c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a4c8:	4604      	mov	r4, r0
 801a4ca:	460d      	mov	r5, r1
 801a4cc:	f7ee fb54 	bl	8008b78 <__aeabi_dcmpgt>
 801a4d0:	b9c0      	cbnz	r0, 801a504 <_dtoa_r+0x6bc>
 801a4d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a4d6:	4620      	mov	r0, r4
 801a4d8:	4629      	mov	r1, r5
 801a4da:	f7ee fb25 	bl	8008b28 <__aeabi_dcmpeq>
 801a4de:	b110      	cbz	r0, 801a4e6 <_dtoa_r+0x69e>
 801a4e0:	f018 0f01 	tst.w	r8, #1
 801a4e4:	d10e      	bne.n	801a504 <_dtoa_r+0x6bc>
 801a4e6:	9902      	ldr	r1, [sp, #8]
 801a4e8:	4648      	mov	r0, r9
 801a4ea:	f000 fe53 	bl	801b194 <_Bfree>
 801a4ee:	2300      	movs	r3, #0
 801a4f0:	7033      	strb	r3, [r6, #0]
 801a4f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a4f4:	3701      	adds	r7, #1
 801a4f6:	601f      	str	r7, [r3, #0]
 801a4f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	f000 824b 	beq.w	801a996 <_dtoa_r+0xb4e>
 801a500:	601e      	str	r6, [r3, #0]
 801a502:	e248      	b.n	801a996 <_dtoa_r+0xb4e>
 801a504:	46b8      	mov	r8, r7
 801a506:	4633      	mov	r3, r6
 801a508:	461e      	mov	r6, r3
 801a50a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a50e:	2a39      	cmp	r2, #57	@ 0x39
 801a510:	d106      	bne.n	801a520 <_dtoa_r+0x6d8>
 801a512:	459a      	cmp	sl, r3
 801a514:	d1f8      	bne.n	801a508 <_dtoa_r+0x6c0>
 801a516:	2230      	movs	r2, #48	@ 0x30
 801a518:	f108 0801 	add.w	r8, r8, #1
 801a51c:	f88a 2000 	strb.w	r2, [sl]
 801a520:	781a      	ldrb	r2, [r3, #0]
 801a522:	3201      	adds	r2, #1
 801a524:	701a      	strb	r2, [r3, #0]
 801a526:	e7a0      	b.n	801a46a <_dtoa_r+0x622>
 801a528:	4b6f      	ldr	r3, [pc, #444]	@ (801a6e8 <_dtoa_r+0x8a0>)
 801a52a:	2200      	movs	r2, #0
 801a52c:	f7ee f894 	bl	8008658 <__aeabi_dmul>
 801a530:	2200      	movs	r2, #0
 801a532:	2300      	movs	r3, #0
 801a534:	4604      	mov	r4, r0
 801a536:	460d      	mov	r5, r1
 801a538:	f7ee faf6 	bl	8008b28 <__aeabi_dcmpeq>
 801a53c:	2800      	cmp	r0, #0
 801a53e:	d09f      	beq.n	801a480 <_dtoa_r+0x638>
 801a540:	e7d1      	b.n	801a4e6 <_dtoa_r+0x69e>
 801a542:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a544:	2a00      	cmp	r2, #0
 801a546:	f000 80ea 	beq.w	801a71e <_dtoa_r+0x8d6>
 801a54a:	9a07      	ldr	r2, [sp, #28]
 801a54c:	2a01      	cmp	r2, #1
 801a54e:	f300 80cd 	bgt.w	801a6ec <_dtoa_r+0x8a4>
 801a552:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a554:	2a00      	cmp	r2, #0
 801a556:	f000 80c1 	beq.w	801a6dc <_dtoa_r+0x894>
 801a55a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801a55e:	9c08      	ldr	r4, [sp, #32]
 801a560:	9e00      	ldr	r6, [sp, #0]
 801a562:	9a00      	ldr	r2, [sp, #0]
 801a564:	441a      	add	r2, r3
 801a566:	9200      	str	r2, [sp, #0]
 801a568:	9a06      	ldr	r2, [sp, #24]
 801a56a:	2101      	movs	r1, #1
 801a56c:	441a      	add	r2, r3
 801a56e:	4648      	mov	r0, r9
 801a570:	9206      	str	r2, [sp, #24]
 801a572:	f000 ff0d 	bl	801b390 <__i2b>
 801a576:	4605      	mov	r5, r0
 801a578:	b166      	cbz	r6, 801a594 <_dtoa_r+0x74c>
 801a57a:	9b06      	ldr	r3, [sp, #24]
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	dd09      	ble.n	801a594 <_dtoa_r+0x74c>
 801a580:	42b3      	cmp	r3, r6
 801a582:	9a00      	ldr	r2, [sp, #0]
 801a584:	bfa8      	it	ge
 801a586:	4633      	movge	r3, r6
 801a588:	1ad2      	subs	r2, r2, r3
 801a58a:	9200      	str	r2, [sp, #0]
 801a58c:	9a06      	ldr	r2, [sp, #24]
 801a58e:	1af6      	subs	r6, r6, r3
 801a590:	1ad3      	subs	r3, r2, r3
 801a592:	9306      	str	r3, [sp, #24]
 801a594:	9b08      	ldr	r3, [sp, #32]
 801a596:	b30b      	cbz	r3, 801a5dc <_dtoa_r+0x794>
 801a598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	f000 80c6 	beq.w	801a72c <_dtoa_r+0x8e4>
 801a5a0:	2c00      	cmp	r4, #0
 801a5a2:	f000 80c0 	beq.w	801a726 <_dtoa_r+0x8de>
 801a5a6:	4629      	mov	r1, r5
 801a5a8:	4622      	mov	r2, r4
 801a5aa:	4648      	mov	r0, r9
 801a5ac:	f000 ffa8 	bl	801b500 <__pow5mult>
 801a5b0:	9a02      	ldr	r2, [sp, #8]
 801a5b2:	4601      	mov	r1, r0
 801a5b4:	4605      	mov	r5, r0
 801a5b6:	4648      	mov	r0, r9
 801a5b8:	f000 ff00 	bl	801b3bc <__multiply>
 801a5bc:	9902      	ldr	r1, [sp, #8]
 801a5be:	4680      	mov	r8, r0
 801a5c0:	4648      	mov	r0, r9
 801a5c2:	f000 fde7 	bl	801b194 <_Bfree>
 801a5c6:	9b08      	ldr	r3, [sp, #32]
 801a5c8:	1b1b      	subs	r3, r3, r4
 801a5ca:	9308      	str	r3, [sp, #32]
 801a5cc:	f000 80b1 	beq.w	801a732 <_dtoa_r+0x8ea>
 801a5d0:	9a08      	ldr	r2, [sp, #32]
 801a5d2:	4641      	mov	r1, r8
 801a5d4:	4648      	mov	r0, r9
 801a5d6:	f000 ff93 	bl	801b500 <__pow5mult>
 801a5da:	9002      	str	r0, [sp, #8]
 801a5dc:	2101      	movs	r1, #1
 801a5de:	4648      	mov	r0, r9
 801a5e0:	f000 fed6 	bl	801b390 <__i2b>
 801a5e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a5e6:	4604      	mov	r4, r0
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	f000 81d8 	beq.w	801a99e <_dtoa_r+0xb56>
 801a5ee:	461a      	mov	r2, r3
 801a5f0:	4601      	mov	r1, r0
 801a5f2:	4648      	mov	r0, r9
 801a5f4:	f000 ff84 	bl	801b500 <__pow5mult>
 801a5f8:	9b07      	ldr	r3, [sp, #28]
 801a5fa:	2b01      	cmp	r3, #1
 801a5fc:	4604      	mov	r4, r0
 801a5fe:	f300 809f 	bgt.w	801a740 <_dtoa_r+0x8f8>
 801a602:	9b04      	ldr	r3, [sp, #16]
 801a604:	2b00      	cmp	r3, #0
 801a606:	f040 8097 	bne.w	801a738 <_dtoa_r+0x8f0>
 801a60a:	9b05      	ldr	r3, [sp, #20]
 801a60c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a610:	2b00      	cmp	r3, #0
 801a612:	f040 8093 	bne.w	801a73c <_dtoa_r+0x8f4>
 801a616:	9b05      	ldr	r3, [sp, #20]
 801a618:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a61c:	0d1b      	lsrs	r3, r3, #20
 801a61e:	051b      	lsls	r3, r3, #20
 801a620:	b133      	cbz	r3, 801a630 <_dtoa_r+0x7e8>
 801a622:	9b00      	ldr	r3, [sp, #0]
 801a624:	3301      	adds	r3, #1
 801a626:	9300      	str	r3, [sp, #0]
 801a628:	9b06      	ldr	r3, [sp, #24]
 801a62a:	3301      	adds	r3, #1
 801a62c:	9306      	str	r3, [sp, #24]
 801a62e:	2301      	movs	r3, #1
 801a630:	9308      	str	r3, [sp, #32]
 801a632:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a634:	2b00      	cmp	r3, #0
 801a636:	f000 81b8 	beq.w	801a9aa <_dtoa_r+0xb62>
 801a63a:	6923      	ldr	r3, [r4, #16]
 801a63c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a640:	6918      	ldr	r0, [r3, #16]
 801a642:	f000 fe59 	bl	801b2f8 <__hi0bits>
 801a646:	f1c0 0020 	rsb	r0, r0, #32
 801a64a:	9b06      	ldr	r3, [sp, #24]
 801a64c:	4418      	add	r0, r3
 801a64e:	f010 001f 	ands.w	r0, r0, #31
 801a652:	f000 8082 	beq.w	801a75a <_dtoa_r+0x912>
 801a656:	f1c0 0320 	rsb	r3, r0, #32
 801a65a:	2b04      	cmp	r3, #4
 801a65c:	dd73      	ble.n	801a746 <_dtoa_r+0x8fe>
 801a65e:	9b00      	ldr	r3, [sp, #0]
 801a660:	f1c0 001c 	rsb	r0, r0, #28
 801a664:	4403      	add	r3, r0
 801a666:	9300      	str	r3, [sp, #0]
 801a668:	9b06      	ldr	r3, [sp, #24]
 801a66a:	4403      	add	r3, r0
 801a66c:	4406      	add	r6, r0
 801a66e:	9306      	str	r3, [sp, #24]
 801a670:	9b00      	ldr	r3, [sp, #0]
 801a672:	2b00      	cmp	r3, #0
 801a674:	dd05      	ble.n	801a682 <_dtoa_r+0x83a>
 801a676:	9902      	ldr	r1, [sp, #8]
 801a678:	461a      	mov	r2, r3
 801a67a:	4648      	mov	r0, r9
 801a67c:	f000 ff9a 	bl	801b5b4 <__lshift>
 801a680:	9002      	str	r0, [sp, #8]
 801a682:	9b06      	ldr	r3, [sp, #24]
 801a684:	2b00      	cmp	r3, #0
 801a686:	dd05      	ble.n	801a694 <_dtoa_r+0x84c>
 801a688:	4621      	mov	r1, r4
 801a68a:	461a      	mov	r2, r3
 801a68c:	4648      	mov	r0, r9
 801a68e:	f000 ff91 	bl	801b5b4 <__lshift>
 801a692:	4604      	mov	r4, r0
 801a694:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a696:	2b00      	cmp	r3, #0
 801a698:	d061      	beq.n	801a75e <_dtoa_r+0x916>
 801a69a:	9802      	ldr	r0, [sp, #8]
 801a69c:	4621      	mov	r1, r4
 801a69e:	f000 fff5 	bl	801b68c <__mcmp>
 801a6a2:	2800      	cmp	r0, #0
 801a6a4:	da5b      	bge.n	801a75e <_dtoa_r+0x916>
 801a6a6:	2300      	movs	r3, #0
 801a6a8:	9902      	ldr	r1, [sp, #8]
 801a6aa:	220a      	movs	r2, #10
 801a6ac:	4648      	mov	r0, r9
 801a6ae:	f000 fd93 	bl	801b1d8 <__multadd>
 801a6b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a6b4:	9002      	str	r0, [sp, #8]
 801a6b6:	f107 38ff 	add.w	r8, r7, #4294967295
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	f000 8177 	beq.w	801a9ae <_dtoa_r+0xb66>
 801a6c0:	4629      	mov	r1, r5
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	220a      	movs	r2, #10
 801a6c6:	4648      	mov	r0, r9
 801a6c8:	f000 fd86 	bl	801b1d8 <__multadd>
 801a6cc:	f1bb 0f00 	cmp.w	fp, #0
 801a6d0:	4605      	mov	r5, r0
 801a6d2:	dc6f      	bgt.n	801a7b4 <_dtoa_r+0x96c>
 801a6d4:	9b07      	ldr	r3, [sp, #28]
 801a6d6:	2b02      	cmp	r3, #2
 801a6d8:	dc49      	bgt.n	801a76e <_dtoa_r+0x926>
 801a6da:	e06b      	b.n	801a7b4 <_dtoa_r+0x96c>
 801a6dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a6de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801a6e2:	e73c      	b.n	801a55e <_dtoa_r+0x716>
 801a6e4:	3fe00000 	.word	0x3fe00000
 801a6e8:	40240000 	.word	0x40240000
 801a6ec:	9b03      	ldr	r3, [sp, #12]
 801a6ee:	1e5c      	subs	r4, r3, #1
 801a6f0:	9b08      	ldr	r3, [sp, #32]
 801a6f2:	42a3      	cmp	r3, r4
 801a6f4:	db09      	blt.n	801a70a <_dtoa_r+0x8c2>
 801a6f6:	1b1c      	subs	r4, r3, r4
 801a6f8:	9b03      	ldr	r3, [sp, #12]
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	f6bf af30 	bge.w	801a560 <_dtoa_r+0x718>
 801a700:	9b00      	ldr	r3, [sp, #0]
 801a702:	9a03      	ldr	r2, [sp, #12]
 801a704:	1a9e      	subs	r6, r3, r2
 801a706:	2300      	movs	r3, #0
 801a708:	e72b      	b.n	801a562 <_dtoa_r+0x71a>
 801a70a:	9b08      	ldr	r3, [sp, #32]
 801a70c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a70e:	9408      	str	r4, [sp, #32]
 801a710:	1ae3      	subs	r3, r4, r3
 801a712:	441a      	add	r2, r3
 801a714:	9e00      	ldr	r6, [sp, #0]
 801a716:	9b03      	ldr	r3, [sp, #12]
 801a718:	920d      	str	r2, [sp, #52]	@ 0x34
 801a71a:	2400      	movs	r4, #0
 801a71c:	e721      	b.n	801a562 <_dtoa_r+0x71a>
 801a71e:	9c08      	ldr	r4, [sp, #32]
 801a720:	9e00      	ldr	r6, [sp, #0]
 801a722:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801a724:	e728      	b.n	801a578 <_dtoa_r+0x730>
 801a726:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801a72a:	e751      	b.n	801a5d0 <_dtoa_r+0x788>
 801a72c:	9a08      	ldr	r2, [sp, #32]
 801a72e:	9902      	ldr	r1, [sp, #8]
 801a730:	e750      	b.n	801a5d4 <_dtoa_r+0x78c>
 801a732:	f8cd 8008 	str.w	r8, [sp, #8]
 801a736:	e751      	b.n	801a5dc <_dtoa_r+0x794>
 801a738:	2300      	movs	r3, #0
 801a73a:	e779      	b.n	801a630 <_dtoa_r+0x7e8>
 801a73c:	9b04      	ldr	r3, [sp, #16]
 801a73e:	e777      	b.n	801a630 <_dtoa_r+0x7e8>
 801a740:	2300      	movs	r3, #0
 801a742:	9308      	str	r3, [sp, #32]
 801a744:	e779      	b.n	801a63a <_dtoa_r+0x7f2>
 801a746:	d093      	beq.n	801a670 <_dtoa_r+0x828>
 801a748:	9a00      	ldr	r2, [sp, #0]
 801a74a:	331c      	adds	r3, #28
 801a74c:	441a      	add	r2, r3
 801a74e:	9200      	str	r2, [sp, #0]
 801a750:	9a06      	ldr	r2, [sp, #24]
 801a752:	441a      	add	r2, r3
 801a754:	441e      	add	r6, r3
 801a756:	9206      	str	r2, [sp, #24]
 801a758:	e78a      	b.n	801a670 <_dtoa_r+0x828>
 801a75a:	4603      	mov	r3, r0
 801a75c:	e7f4      	b.n	801a748 <_dtoa_r+0x900>
 801a75e:	9b03      	ldr	r3, [sp, #12]
 801a760:	2b00      	cmp	r3, #0
 801a762:	46b8      	mov	r8, r7
 801a764:	dc20      	bgt.n	801a7a8 <_dtoa_r+0x960>
 801a766:	469b      	mov	fp, r3
 801a768:	9b07      	ldr	r3, [sp, #28]
 801a76a:	2b02      	cmp	r3, #2
 801a76c:	dd1e      	ble.n	801a7ac <_dtoa_r+0x964>
 801a76e:	f1bb 0f00 	cmp.w	fp, #0
 801a772:	f47f adb1 	bne.w	801a2d8 <_dtoa_r+0x490>
 801a776:	4621      	mov	r1, r4
 801a778:	465b      	mov	r3, fp
 801a77a:	2205      	movs	r2, #5
 801a77c:	4648      	mov	r0, r9
 801a77e:	f000 fd2b 	bl	801b1d8 <__multadd>
 801a782:	4601      	mov	r1, r0
 801a784:	4604      	mov	r4, r0
 801a786:	9802      	ldr	r0, [sp, #8]
 801a788:	f000 ff80 	bl	801b68c <__mcmp>
 801a78c:	2800      	cmp	r0, #0
 801a78e:	f77f ada3 	ble.w	801a2d8 <_dtoa_r+0x490>
 801a792:	4656      	mov	r6, sl
 801a794:	2331      	movs	r3, #49	@ 0x31
 801a796:	f806 3b01 	strb.w	r3, [r6], #1
 801a79a:	f108 0801 	add.w	r8, r8, #1
 801a79e:	e59f      	b.n	801a2e0 <_dtoa_r+0x498>
 801a7a0:	9c03      	ldr	r4, [sp, #12]
 801a7a2:	46b8      	mov	r8, r7
 801a7a4:	4625      	mov	r5, r4
 801a7a6:	e7f4      	b.n	801a792 <_dtoa_r+0x94a>
 801a7a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801a7ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	f000 8101 	beq.w	801a9b6 <_dtoa_r+0xb6e>
 801a7b4:	2e00      	cmp	r6, #0
 801a7b6:	dd05      	ble.n	801a7c4 <_dtoa_r+0x97c>
 801a7b8:	4629      	mov	r1, r5
 801a7ba:	4632      	mov	r2, r6
 801a7bc:	4648      	mov	r0, r9
 801a7be:	f000 fef9 	bl	801b5b4 <__lshift>
 801a7c2:	4605      	mov	r5, r0
 801a7c4:	9b08      	ldr	r3, [sp, #32]
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d05c      	beq.n	801a884 <_dtoa_r+0xa3c>
 801a7ca:	6869      	ldr	r1, [r5, #4]
 801a7cc:	4648      	mov	r0, r9
 801a7ce:	f000 fca1 	bl	801b114 <_Balloc>
 801a7d2:	4606      	mov	r6, r0
 801a7d4:	b928      	cbnz	r0, 801a7e2 <_dtoa_r+0x99a>
 801a7d6:	4b82      	ldr	r3, [pc, #520]	@ (801a9e0 <_dtoa_r+0xb98>)
 801a7d8:	4602      	mov	r2, r0
 801a7da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801a7de:	f7ff bb4a 	b.w	8019e76 <_dtoa_r+0x2e>
 801a7e2:	692a      	ldr	r2, [r5, #16]
 801a7e4:	3202      	adds	r2, #2
 801a7e6:	0092      	lsls	r2, r2, #2
 801a7e8:	f105 010c 	add.w	r1, r5, #12
 801a7ec:	300c      	adds	r0, #12
 801a7ee:	f7ff fa8a 	bl	8019d06 <memcpy>
 801a7f2:	2201      	movs	r2, #1
 801a7f4:	4631      	mov	r1, r6
 801a7f6:	4648      	mov	r0, r9
 801a7f8:	f000 fedc 	bl	801b5b4 <__lshift>
 801a7fc:	f10a 0301 	add.w	r3, sl, #1
 801a800:	9300      	str	r3, [sp, #0]
 801a802:	eb0a 030b 	add.w	r3, sl, fp
 801a806:	9308      	str	r3, [sp, #32]
 801a808:	9b04      	ldr	r3, [sp, #16]
 801a80a:	f003 0301 	and.w	r3, r3, #1
 801a80e:	462f      	mov	r7, r5
 801a810:	9306      	str	r3, [sp, #24]
 801a812:	4605      	mov	r5, r0
 801a814:	9b00      	ldr	r3, [sp, #0]
 801a816:	9802      	ldr	r0, [sp, #8]
 801a818:	4621      	mov	r1, r4
 801a81a:	f103 3bff 	add.w	fp, r3, #4294967295
 801a81e:	f7ff fa8b 	bl	8019d38 <quorem>
 801a822:	4603      	mov	r3, r0
 801a824:	3330      	adds	r3, #48	@ 0x30
 801a826:	9003      	str	r0, [sp, #12]
 801a828:	4639      	mov	r1, r7
 801a82a:	9802      	ldr	r0, [sp, #8]
 801a82c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a82e:	f000 ff2d 	bl	801b68c <__mcmp>
 801a832:	462a      	mov	r2, r5
 801a834:	9004      	str	r0, [sp, #16]
 801a836:	4621      	mov	r1, r4
 801a838:	4648      	mov	r0, r9
 801a83a:	f000 ff43 	bl	801b6c4 <__mdiff>
 801a83e:	68c2      	ldr	r2, [r0, #12]
 801a840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a842:	4606      	mov	r6, r0
 801a844:	bb02      	cbnz	r2, 801a888 <_dtoa_r+0xa40>
 801a846:	4601      	mov	r1, r0
 801a848:	9802      	ldr	r0, [sp, #8]
 801a84a:	f000 ff1f 	bl	801b68c <__mcmp>
 801a84e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a850:	4602      	mov	r2, r0
 801a852:	4631      	mov	r1, r6
 801a854:	4648      	mov	r0, r9
 801a856:	920c      	str	r2, [sp, #48]	@ 0x30
 801a858:	9309      	str	r3, [sp, #36]	@ 0x24
 801a85a:	f000 fc9b 	bl	801b194 <_Bfree>
 801a85e:	9b07      	ldr	r3, [sp, #28]
 801a860:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a862:	9e00      	ldr	r6, [sp, #0]
 801a864:	ea42 0103 	orr.w	r1, r2, r3
 801a868:	9b06      	ldr	r3, [sp, #24]
 801a86a:	4319      	orrs	r1, r3
 801a86c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a86e:	d10d      	bne.n	801a88c <_dtoa_r+0xa44>
 801a870:	2b39      	cmp	r3, #57	@ 0x39
 801a872:	d027      	beq.n	801a8c4 <_dtoa_r+0xa7c>
 801a874:	9a04      	ldr	r2, [sp, #16]
 801a876:	2a00      	cmp	r2, #0
 801a878:	dd01      	ble.n	801a87e <_dtoa_r+0xa36>
 801a87a:	9b03      	ldr	r3, [sp, #12]
 801a87c:	3331      	adds	r3, #49	@ 0x31
 801a87e:	f88b 3000 	strb.w	r3, [fp]
 801a882:	e52e      	b.n	801a2e2 <_dtoa_r+0x49a>
 801a884:	4628      	mov	r0, r5
 801a886:	e7b9      	b.n	801a7fc <_dtoa_r+0x9b4>
 801a888:	2201      	movs	r2, #1
 801a88a:	e7e2      	b.n	801a852 <_dtoa_r+0xa0a>
 801a88c:	9904      	ldr	r1, [sp, #16]
 801a88e:	2900      	cmp	r1, #0
 801a890:	db04      	blt.n	801a89c <_dtoa_r+0xa54>
 801a892:	9807      	ldr	r0, [sp, #28]
 801a894:	4301      	orrs	r1, r0
 801a896:	9806      	ldr	r0, [sp, #24]
 801a898:	4301      	orrs	r1, r0
 801a89a:	d120      	bne.n	801a8de <_dtoa_r+0xa96>
 801a89c:	2a00      	cmp	r2, #0
 801a89e:	ddee      	ble.n	801a87e <_dtoa_r+0xa36>
 801a8a0:	9902      	ldr	r1, [sp, #8]
 801a8a2:	9300      	str	r3, [sp, #0]
 801a8a4:	2201      	movs	r2, #1
 801a8a6:	4648      	mov	r0, r9
 801a8a8:	f000 fe84 	bl	801b5b4 <__lshift>
 801a8ac:	4621      	mov	r1, r4
 801a8ae:	9002      	str	r0, [sp, #8]
 801a8b0:	f000 feec 	bl	801b68c <__mcmp>
 801a8b4:	2800      	cmp	r0, #0
 801a8b6:	9b00      	ldr	r3, [sp, #0]
 801a8b8:	dc02      	bgt.n	801a8c0 <_dtoa_r+0xa78>
 801a8ba:	d1e0      	bne.n	801a87e <_dtoa_r+0xa36>
 801a8bc:	07da      	lsls	r2, r3, #31
 801a8be:	d5de      	bpl.n	801a87e <_dtoa_r+0xa36>
 801a8c0:	2b39      	cmp	r3, #57	@ 0x39
 801a8c2:	d1da      	bne.n	801a87a <_dtoa_r+0xa32>
 801a8c4:	2339      	movs	r3, #57	@ 0x39
 801a8c6:	f88b 3000 	strb.w	r3, [fp]
 801a8ca:	4633      	mov	r3, r6
 801a8cc:	461e      	mov	r6, r3
 801a8ce:	3b01      	subs	r3, #1
 801a8d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801a8d4:	2a39      	cmp	r2, #57	@ 0x39
 801a8d6:	d04e      	beq.n	801a976 <_dtoa_r+0xb2e>
 801a8d8:	3201      	adds	r2, #1
 801a8da:	701a      	strb	r2, [r3, #0]
 801a8dc:	e501      	b.n	801a2e2 <_dtoa_r+0x49a>
 801a8de:	2a00      	cmp	r2, #0
 801a8e0:	dd03      	ble.n	801a8ea <_dtoa_r+0xaa2>
 801a8e2:	2b39      	cmp	r3, #57	@ 0x39
 801a8e4:	d0ee      	beq.n	801a8c4 <_dtoa_r+0xa7c>
 801a8e6:	3301      	adds	r3, #1
 801a8e8:	e7c9      	b.n	801a87e <_dtoa_r+0xa36>
 801a8ea:	9a00      	ldr	r2, [sp, #0]
 801a8ec:	9908      	ldr	r1, [sp, #32]
 801a8ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a8f2:	428a      	cmp	r2, r1
 801a8f4:	d028      	beq.n	801a948 <_dtoa_r+0xb00>
 801a8f6:	9902      	ldr	r1, [sp, #8]
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	220a      	movs	r2, #10
 801a8fc:	4648      	mov	r0, r9
 801a8fe:	f000 fc6b 	bl	801b1d8 <__multadd>
 801a902:	42af      	cmp	r7, r5
 801a904:	9002      	str	r0, [sp, #8]
 801a906:	f04f 0300 	mov.w	r3, #0
 801a90a:	f04f 020a 	mov.w	r2, #10
 801a90e:	4639      	mov	r1, r7
 801a910:	4648      	mov	r0, r9
 801a912:	d107      	bne.n	801a924 <_dtoa_r+0xadc>
 801a914:	f000 fc60 	bl	801b1d8 <__multadd>
 801a918:	4607      	mov	r7, r0
 801a91a:	4605      	mov	r5, r0
 801a91c:	9b00      	ldr	r3, [sp, #0]
 801a91e:	3301      	adds	r3, #1
 801a920:	9300      	str	r3, [sp, #0]
 801a922:	e777      	b.n	801a814 <_dtoa_r+0x9cc>
 801a924:	f000 fc58 	bl	801b1d8 <__multadd>
 801a928:	4629      	mov	r1, r5
 801a92a:	4607      	mov	r7, r0
 801a92c:	2300      	movs	r3, #0
 801a92e:	220a      	movs	r2, #10
 801a930:	4648      	mov	r0, r9
 801a932:	f000 fc51 	bl	801b1d8 <__multadd>
 801a936:	4605      	mov	r5, r0
 801a938:	e7f0      	b.n	801a91c <_dtoa_r+0xad4>
 801a93a:	f1bb 0f00 	cmp.w	fp, #0
 801a93e:	bfcc      	ite	gt
 801a940:	465e      	movgt	r6, fp
 801a942:	2601      	movle	r6, #1
 801a944:	4456      	add	r6, sl
 801a946:	2700      	movs	r7, #0
 801a948:	9902      	ldr	r1, [sp, #8]
 801a94a:	9300      	str	r3, [sp, #0]
 801a94c:	2201      	movs	r2, #1
 801a94e:	4648      	mov	r0, r9
 801a950:	f000 fe30 	bl	801b5b4 <__lshift>
 801a954:	4621      	mov	r1, r4
 801a956:	9002      	str	r0, [sp, #8]
 801a958:	f000 fe98 	bl	801b68c <__mcmp>
 801a95c:	2800      	cmp	r0, #0
 801a95e:	dcb4      	bgt.n	801a8ca <_dtoa_r+0xa82>
 801a960:	d102      	bne.n	801a968 <_dtoa_r+0xb20>
 801a962:	9b00      	ldr	r3, [sp, #0]
 801a964:	07db      	lsls	r3, r3, #31
 801a966:	d4b0      	bmi.n	801a8ca <_dtoa_r+0xa82>
 801a968:	4633      	mov	r3, r6
 801a96a:	461e      	mov	r6, r3
 801a96c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a970:	2a30      	cmp	r2, #48	@ 0x30
 801a972:	d0fa      	beq.n	801a96a <_dtoa_r+0xb22>
 801a974:	e4b5      	b.n	801a2e2 <_dtoa_r+0x49a>
 801a976:	459a      	cmp	sl, r3
 801a978:	d1a8      	bne.n	801a8cc <_dtoa_r+0xa84>
 801a97a:	2331      	movs	r3, #49	@ 0x31
 801a97c:	f108 0801 	add.w	r8, r8, #1
 801a980:	f88a 3000 	strb.w	r3, [sl]
 801a984:	e4ad      	b.n	801a2e2 <_dtoa_r+0x49a>
 801a986:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801a988:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801a9e4 <_dtoa_r+0xb9c>
 801a98c:	b11b      	cbz	r3, 801a996 <_dtoa_r+0xb4e>
 801a98e:	f10a 0308 	add.w	r3, sl, #8
 801a992:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a994:	6013      	str	r3, [r2, #0]
 801a996:	4650      	mov	r0, sl
 801a998:	b017      	add	sp, #92	@ 0x5c
 801a99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a99e:	9b07      	ldr	r3, [sp, #28]
 801a9a0:	2b01      	cmp	r3, #1
 801a9a2:	f77f ae2e 	ble.w	801a602 <_dtoa_r+0x7ba>
 801a9a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a9a8:	9308      	str	r3, [sp, #32]
 801a9aa:	2001      	movs	r0, #1
 801a9ac:	e64d      	b.n	801a64a <_dtoa_r+0x802>
 801a9ae:	f1bb 0f00 	cmp.w	fp, #0
 801a9b2:	f77f aed9 	ble.w	801a768 <_dtoa_r+0x920>
 801a9b6:	4656      	mov	r6, sl
 801a9b8:	9802      	ldr	r0, [sp, #8]
 801a9ba:	4621      	mov	r1, r4
 801a9bc:	f7ff f9bc 	bl	8019d38 <quorem>
 801a9c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801a9c4:	f806 3b01 	strb.w	r3, [r6], #1
 801a9c8:	eba6 020a 	sub.w	r2, r6, sl
 801a9cc:	4593      	cmp	fp, r2
 801a9ce:	ddb4      	ble.n	801a93a <_dtoa_r+0xaf2>
 801a9d0:	9902      	ldr	r1, [sp, #8]
 801a9d2:	2300      	movs	r3, #0
 801a9d4:	220a      	movs	r2, #10
 801a9d6:	4648      	mov	r0, r9
 801a9d8:	f000 fbfe 	bl	801b1d8 <__multadd>
 801a9dc:	9002      	str	r0, [sp, #8]
 801a9de:	e7eb      	b.n	801a9b8 <_dtoa_r+0xb70>
 801a9e0:	0801f338 	.word	0x0801f338
 801a9e4:	0801f2bc 	.word	0x0801f2bc

0801a9e8 <_free_r>:
 801a9e8:	b538      	push	{r3, r4, r5, lr}
 801a9ea:	4605      	mov	r5, r0
 801a9ec:	2900      	cmp	r1, #0
 801a9ee:	d041      	beq.n	801aa74 <_free_r+0x8c>
 801a9f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a9f4:	1f0c      	subs	r4, r1, #4
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	bfb8      	it	lt
 801a9fa:	18e4      	addlt	r4, r4, r3
 801a9fc:	f7fd fb9c 	bl	8018138 <__malloc_lock>
 801aa00:	4a1d      	ldr	r2, [pc, #116]	@ (801aa78 <_free_r+0x90>)
 801aa02:	6813      	ldr	r3, [r2, #0]
 801aa04:	b933      	cbnz	r3, 801aa14 <_free_r+0x2c>
 801aa06:	6063      	str	r3, [r4, #4]
 801aa08:	6014      	str	r4, [r2, #0]
 801aa0a:	4628      	mov	r0, r5
 801aa0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aa10:	f7fd bb98 	b.w	8018144 <__malloc_unlock>
 801aa14:	42a3      	cmp	r3, r4
 801aa16:	d908      	bls.n	801aa2a <_free_r+0x42>
 801aa18:	6820      	ldr	r0, [r4, #0]
 801aa1a:	1821      	adds	r1, r4, r0
 801aa1c:	428b      	cmp	r3, r1
 801aa1e:	bf01      	itttt	eq
 801aa20:	6819      	ldreq	r1, [r3, #0]
 801aa22:	685b      	ldreq	r3, [r3, #4]
 801aa24:	1809      	addeq	r1, r1, r0
 801aa26:	6021      	streq	r1, [r4, #0]
 801aa28:	e7ed      	b.n	801aa06 <_free_r+0x1e>
 801aa2a:	461a      	mov	r2, r3
 801aa2c:	685b      	ldr	r3, [r3, #4]
 801aa2e:	b10b      	cbz	r3, 801aa34 <_free_r+0x4c>
 801aa30:	42a3      	cmp	r3, r4
 801aa32:	d9fa      	bls.n	801aa2a <_free_r+0x42>
 801aa34:	6811      	ldr	r1, [r2, #0]
 801aa36:	1850      	adds	r0, r2, r1
 801aa38:	42a0      	cmp	r0, r4
 801aa3a:	d10b      	bne.n	801aa54 <_free_r+0x6c>
 801aa3c:	6820      	ldr	r0, [r4, #0]
 801aa3e:	4401      	add	r1, r0
 801aa40:	1850      	adds	r0, r2, r1
 801aa42:	4283      	cmp	r3, r0
 801aa44:	6011      	str	r1, [r2, #0]
 801aa46:	d1e0      	bne.n	801aa0a <_free_r+0x22>
 801aa48:	6818      	ldr	r0, [r3, #0]
 801aa4a:	685b      	ldr	r3, [r3, #4]
 801aa4c:	6053      	str	r3, [r2, #4]
 801aa4e:	4408      	add	r0, r1
 801aa50:	6010      	str	r0, [r2, #0]
 801aa52:	e7da      	b.n	801aa0a <_free_r+0x22>
 801aa54:	d902      	bls.n	801aa5c <_free_r+0x74>
 801aa56:	230c      	movs	r3, #12
 801aa58:	602b      	str	r3, [r5, #0]
 801aa5a:	e7d6      	b.n	801aa0a <_free_r+0x22>
 801aa5c:	6820      	ldr	r0, [r4, #0]
 801aa5e:	1821      	adds	r1, r4, r0
 801aa60:	428b      	cmp	r3, r1
 801aa62:	bf04      	itt	eq
 801aa64:	6819      	ldreq	r1, [r3, #0]
 801aa66:	685b      	ldreq	r3, [r3, #4]
 801aa68:	6063      	str	r3, [r4, #4]
 801aa6a:	bf04      	itt	eq
 801aa6c:	1809      	addeq	r1, r1, r0
 801aa6e:	6021      	streq	r1, [r4, #0]
 801aa70:	6054      	str	r4, [r2, #4]
 801aa72:	e7ca      	b.n	801aa0a <_free_r+0x22>
 801aa74:	bd38      	pop	{r3, r4, r5, pc}
 801aa76:	bf00      	nop
 801aa78:	20014304 	.word	0x20014304

0801aa7c <rshift>:
 801aa7c:	6903      	ldr	r3, [r0, #16]
 801aa7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801aa82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aa86:	ea4f 1261 	mov.w	r2, r1, asr #5
 801aa8a:	f100 0414 	add.w	r4, r0, #20
 801aa8e:	dd45      	ble.n	801ab1c <rshift+0xa0>
 801aa90:	f011 011f 	ands.w	r1, r1, #31
 801aa94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801aa98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801aa9c:	d10c      	bne.n	801aab8 <rshift+0x3c>
 801aa9e:	f100 0710 	add.w	r7, r0, #16
 801aaa2:	4629      	mov	r1, r5
 801aaa4:	42b1      	cmp	r1, r6
 801aaa6:	d334      	bcc.n	801ab12 <rshift+0x96>
 801aaa8:	1a9b      	subs	r3, r3, r2
 801aaaa:	009b      	lsls	r3, r3, #2
 801aaac:	1eea      	subs	r2, r5, #3
 801aaae:	4296      	cmp	r6, r2
 801aab0:	bf38      	it	cc
 801aab2:	2300      	movcc	r3, #0
 801aab4:	4423      	add	r3, r4
 801aab6:	e015      	b.n	801aae4 <rshift+0x68>
 801aab8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801aabc:	f1c1 0820 	rsb	r8, r1, #32
 801aac0:	40cf      	lsrs	r7, r1
 801aac2:	f105 0e04 	add.w	lr, r5, #4
 801aac6:	46a1      	mov	r9, r4
 801aac8:	4576      	cmp	r6, lr
 801aaca:	46f4      	mov	ip, lr
 801aacc:	d815      	bhi.n	801aafa <rshift+0x7e>
 801aace:	1a9a      	subs	r2, r3, r2
 801aad0:	0092      	lsls	r2, r2, #2
 801aad2:	3a04      	subs	r2, #4
 801aad4:	3501      	adds	r5, #1
 801aad6:	42ae      	cmp	r6, r5
 801aad8:	bf38      	it	cc
 801aada:	2200      	movcc	r2, #0
 801aadc:	18a3      	adds	r3, r4, r2
 801aade:	50a7      	str	r7, [r4, r2]
 801aae0:	b107      	cbz	r7, 801aae4 <rshift+0x68>
 801aae2:	3304      	adds	r3, #4
 801aae4:	1b1a      	subs	r2, r3, r4
 801aae6:	42a3      	cmp	r3, r4
 801aae8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801aaec:	bf08      	it	eq
 801aaee:	2300      	moveq	r3, #0
 801aaf0:	6102      	str	r2, [r0, #16]
 801aaf2:	bf08      	it	eq
 801aaf4:	6143      	streq	r3, [r0, #20]
 801aaf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aafa:	f8dc c000 	ldr.w	ip, [ip]
 801aafe:	fa0c fc08 	lsl.w	ip, ip, r8
 801ab02:	ea4c 0707 	orr.w	r7, ip, r7
 801ab06:	f849 7b04 	str.w	r7, [r9], #4
 801ab0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ab0e:	40cf      	lsrs	r7, r1
 801ab10:	e7da      	b.n	801aac8 <rshift+0x4c>
 801ab12:	f851 cb04 	ldr.w	ip, [r1], #4
 801ab16:	f847 cf04 	str.w	ip, [r7, #4]!
 801ab1a:	e7c3      	b.n	801aaa4 <rshift+0x28>
 801ab1c:	4623      	mov	r3, r4
 801ab1e:	e7e1      	b.n	801aae4 <rshift+0x68>

0801ab20 <__hexdig_fun>:
 801ab20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801ab24:	2b09      	cmp	r3, #9
 801ab26:	d802      	bhi.n	801ab2e <__hexdig_fun+0xe>
 801ab28:	3820      	subs	r0, #32
 801ab2a:	b2c0      	uxtb	r0, r0
 801ab2c:	4770      	bx	lr
 801ab2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801ab32:	2b05      	cmp	r3, #5
 801ab34:	d801      	bhi.n	801ab3a <__hexdig_fun+0x1a>
 801ab36:	3847      	subs	r0, #71	@ 0x47
 801ab38:	e7f7      	b.n	801ab2a <__hexdig_fun+0xa>
 801ab3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801ab3e:	2b05      	cmp	r3, #5
 801ab40:	d801      	bhi.n	801ab46 <__hexdig_fun+0x26>
 801ab42:	3827      	subs	r0, #39	@ 0x27
 801ab44:	e7f1      	b.n	801ab2a <__hexdig_fun+0xa>
 801ab46:	2000      	movs	r0, #0
 801ab48:	4770      	bx	lr
	...

0801ab4c <__gethex>:
 801ab4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab50:	b085      	sub	sp, #20
 801ab52:	468a      	mov	sl, r1
 801ab54:	9302      	str	r3, [sp, #8]
 801ab56:	680b      	ldr	r3, [r1, #0]
 801ab58:	9001      	str	r0, [sp, #4]
 801ab5a:	4690      	mov	r8, r2
 801ab5c:	1c9c      	adds	r4, r3, #2
 801ab5e:	46a1      	mov	r9, r4
 801ab60:	f814 0b01 	ldrb.w	r0, [r4], #1
 801ab64:	2830      	cmp	r0, #48	@ 0x30
 801ab66:	d0fa      	beq.n	801ab5e <__gethex+0x12>
 801ab68:	eba9 0303 	sub.w	r3, r9, r3
 801ab6c:	f1a3 0b02 	sub.w	fp, r3, #2
 801ab70:	f7ff ffd6 	bl	801ab20 <__hexdig_fun>
 801ab74:	4605      	mov	r5, r0
 801ab76:	2800      	cmp	r0, #0
 801ab78:	d168      	bne.n	801ac4c <__gethex+0x100>
 801ab7a:	49a0      	ldr	r1, [pc, #640]	@ (801adfc <__gethex+0x2b0>)
 801ab7c:	2201      	movs	r2, #1
 801ab7e:	4648      	mov	r0, r9
 801ab80:	f7fe fff6 	bl	8019b70 <strncmp>
 801ab84:	4607      	mov	r7, r0
 801ab86:	2800      	cmp	r0, #0
 801ab88:	d167      	bne.n	801ac5a <__gethex+0x10e>
 801ab8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801ab8e:	4626      	mov	r6, r4
 801ab90:	f7ff ffc6 	bl	801ab20 <__hexdig_fun>
 801ab94:	2800      	cmp	r0, #0
 801ab96:	d062      	beq.n	801ac5e <__gethex+0x112>
 801ab98:	4623      	mov	r3, r4
 801ab9a:	7818      	ldrb	r0, [r3, #0]
 801ab9c:	2830      	cmp	r0, #48	@ 0x30
 801ab9e:	4699      	mov	r9, r3
 801aba0:	f103 0301 	add.w	r3, r3, #1
 801aba4:	d0f9      	beq.n	801ab9a <__gethex+0x4e>
 801aba6:	f7ff ffbb 	bl	801ab20 <__hexdig_fun>
 801abaa:	fab0 f580 	clz	r5, r0
 801abae:	096d      	lsrs	r5, r5, #5
 801abb0:	f04f 0b01 	mov.w	fp, #1
 801abb4:	464a      	mov	r2, r9
 801abb6:	4616      	mov	r6, r2
 801abb8:	3201      	adds	r2, #1
 801abba:	7830      	ldrb	r0, [r6, #0]
 801abbc:	f7ff ffb0 	bl	801ab20 <__hexdig_fun>
 801abc0:	2800      	cmp	r0, #0
 801abc2:	d1f8      	bne.n	801abb6 <__gethex+0x6a>
 801abc4:	498d      	ldr	r1, [pc, #564]	@ (801adfc <__gethex+0x2b0>)
 801abc6:	2201      	movs	r2, #1
 801abc8:	4630      	mov	r0, r6
 801abca:	f7fe ffd1 	bl	8019b70 <strncmp>
 801abce:	2800      	cmp	r0, #0
 801abd0:	d13f      	bne.n	801ac52 <__gethex+0x106>
 801abd2:	b944      	cbnz	r4, 801abe6 <__gethex+0x9a>
 801abd4:	1c74      	adds	r4, r6, #1
 801abd6:	4622      	mov	r2, r4
 801abd8:	4616      	mov	r6, r2
 801abda:	3201      	adds	r2, #1
 801abdc:	7830      	ldrb	r0, [r6, #0]
 801abde:	f7ff ff9f 	bl	801ab20 <__hexdig_fun>
 801abe2:	2800      	cmp	r0, #0
 801abe4:	d1f8      	bne.n	801abd8 <__gethex+0x8c>
 801abe6:	1ba4      	subs	r4, r4, r6
 801abe8:	00a7      	lsls	r7, r4, #2
 801abea:	7833      	ldrb	r3, [r6, #0]
 801abec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801abf0:	2b50      	cmp	r3, #80	@ 0x50
 801abf2:	d13e      	bne.n	801ac72 <__gethex+0x126>
 801abf4:	7873      	ldrb	r3, [r6, #1]
 801abf6:	2b2b      	cmp	r3, #43	@ 0x2b
 801abf8:	d033      	beq.n	801ac62 <__gethex+0x116>
 801abfa:	2b2d      	cmp	r3, #45	@ 0x2d
 801abfc:	d034      	beq.n	801ac68 <__gethex+0x11c>
 801abfe:	1c71      	adds	r1, r6, #1
 801ac00:	2400      	movs	r4, #0
 801ac02:	7808      	ldrb	r0, [r1, #0]
 801ac04:	f7ff ff8c 	bl	801ab20 <__hexdig_fun>
 801ac08:	1e43      	subs	r3, r0, #1
 801ac0a:	b2db      	uxtb	r3, r3
 801ac0c:	2b18      	cmp	r3, #24
 801ac0e:	d830      	bhi.n	801ac72 <__gethex+0x126>
 801ac10:	f1a0 0210 	sub.w	r2, r0, #16
 801ac14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801ac18:	f7ff ff82 	bl	801ab20 <__hexdig_fun>
 801ac1c:	f100 3cff 	add.w	ip, r0, #4294967295
 801ac20:	fa5f fc8c 	uxtb.w	ip, ip
 801ac24:	f1bc 0f18 	cmp.w	ip, #24
 801ac28:	f04f 030a 	mov.w	r3, #10
 801ac2c:	d91e      	bls.n	801ac6c <__gethex+0x120>
 801ac2e:	b104      	cbz	r4, 801ac32 <__gethex+0xe6>
 801ac30:	4252      	negs	r2, r2
 801ac32:	4417      	add	r7, r2
 801ac34:	f8ca 1000 	str.w	r1, [sl]
 801ac38:	b1ed      	cbz	r5, 801ac76 <__gethex+0x12a>
 801ac3a:	f1bb 0f00 	cmp.w	fp, #0
 801ac3e:	bf0c      	ite	eq
 801ac40:	2506      	moveq	r5, #6
 801ac42:	2500      	movne	r5, #0
 801ac44:	4628      	mov	r0, r5
 801ac46:	b005      	add	sp, #20
 801ac48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac4c:	2500      	movs	r5, #0
 801ac4e:	462c      	mov	r4, r5
 801ac50:	e7b0      	b.n	801abb4 <__gethex+0x68>
 801ac52:	2c00      	cmp	r4, #0
 801ac54:	d1c7      	bne.n	801abe6 <__gethex+0x9a>
 801ac56:	4627      	mov	r7, r4
 801ac58:	e7c7      	b.n	801abea <__gethex+0x9e>
 801ac5a:	464e      	mov	r6, r9
 801ac5c:	462f      	mov	r7, r5
 801ac5e:	2501      	movs	r5, #1
 801ac60:	e7c3      	b.n	801abea <__gethex+0x9e>
 801ac62:	2400      	movs	r4, #0
 801ac64:	1cb1      	adds	r1, r6, #2
 801ac66:	e7cc      	b.n	801ac02 <__gethex+0xb6>
 801ac68:	2401      	movs	r4, #1
 801ac6a:	e7fb      	b.n	801ac64 <__gethex+0x118>
 801ac6c:	fb03 0002 	mla	r0, r3, r2, r0
 801ac70:	e7ce      	b.n	801ac10 <__gethex+0xc4>
 801ac72:	4631      	mov	r1, r6
 801ac74:	e7de      	b.n	801ac34 <__gethex+0xe8>
 801ac76:	eba6 0309 	sub.w	r3, r6, r9
 801ac7a:	3b01      	subs	r3, #1
 801ac7c:	4629      	mov	r1, r5
 801ac7e:	2b07      	cmp	r3, #7
 801ac80:	dc0a      	bgt.n	801ac98 <__gethex+0x14c>
 801ac82:	9801      	ldr	r0, [sp, #4]
 801ac84:	f000 fa46 	bl	801b114 <_Balloc>
 801ac88:	4604      	mov	r4, r0
 801ac8a:	b940      	cbnz	r0, 801ac9e <__gethex+0x152>
 801ac8c:	4b5c      	ldr	r3, [pc, #368]	@ (801ae00 <__gethex+0x2b4>)
 801ac8e:	4602      	mov	r2, r0
 801ac90:	21e4      	movs	r1, #228	@ 0xe4
 801ac92:	485c      	ldr	r0, [pc, #368]	@ (801ae04 <__gethex+0x2b8>)
 801ac94:	f001 fe72 	bl	801c97c <__assert_func>
 801ac98:	3101      	adds	r1, #1
 801ac9a:	105b      	asrs	r3, r3, #1
 801ac9c:	e7ef      	b.n	801ac7e <__gethex+0x132>
 801ac9e:	f100 0a14 	add.w	sl, r0, #20
 801aca2:	2300      	movs	r3, #0
 801aca4:	4655      	mov	r5, sl
 801aca6:	469b      	mov	fp, r3
 801aca8:	45b1      	cmp	r9, r6
 801acaa:	d337      	bcc.n	801ad1c <__gethex+0x1d0>
 801acac:	f845 bb04 	str.w	fp, [r5], #4
 801acb0:	eba5 050a 	sub.w	r5, r5, sl
 801acb4:	10ad      	asrs	r5, r5, #2
 801acb6:	6125      	str	r5, [r4, #16]
 801acb8:	4658      	mov	r0, fp
 801acba:	f000 fb1d 	bl	801b2f8 <__hi0bits>
 801acbe:	016d      	lsls	r5, r5, #5
 801acc0:	f8d8 6000 	ldr.w	r6, [r8]
 801acc4:	1a2d      	subs	r5, r5, r0
 801acc6:	42b5      	cmp	r5, r6
 801acc8:	dd54      	ble.n	801ad74 <__gethex+0x228>
 801acca:	1bad      	subs	r5, r5, r6
 801accc:	4629      	mov	r1, r5
 801acce:	4620      	mov	r0, r4
 801acd0:	f000 fea9 	bl	801ba26 <__any_on>
 801acd4:	4681      	mov	r9, r0
 801acd6:	b178      	cbz	r0, 801acf8 <__gethex+0x1ac>
 801acd8:	1e6b      	subs	r3, r5, #1
 801acda:	1159      	asrs	r1, r3, #5
 801acdc:	f003 021f 	and.w	r2, r3, #31
 801ace0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801ace4:	f04f 0901 	mov.w	r9, #1
 801ace8:	fa09 f202 	lsl.w	r2, r9, r2
 801acec:	420a      	tst	r2, r1
 801acee:	d003      	beq.n	801acf8 <__gethex+0x1ac>
 801acf0:	454b      	cmp	r3, r9
 801acf2:	dc36      	bgt.n	801ad62 <__gethex+0x216>
 801acf4:	f04f 0902 	mov.w	r9, #2
 801acf8:	4629      	mov	r1, r5
 801acfa:	4620      	mov	r0, r4
 801acfc:	f7ff febe 	bl	801aa7c <rshift>
 801ad00:	442f      	add	r7, r5
 801ad02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ad06:	42bb      	cmp	r3, r7
 801ad08:	da42      	bge.n	801ad90 <__gethex+0x244>
 801ad0a:	9801      	ldr	r0, [sp, #4]
 801ad0c:	4621      	mov	r1, r4
 801ad0e:	f000 fa41 	bl	801b194 <_Bfree>
 801ad12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ad14:	2300      	movs	r3, #0
 801ad16:	6013      	str	r3, [r2, #0]
 801ad18:	25a3      	movs	r5, #163	@ 0xa3
 801ad1a:	e793      	b.n	801ac44 <__gethex+0xf8>
 801ad1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801ad20:	2a2e      	cmp	r2, #46	@ 0x2e
 801ad22:	d012      	beq.n	801ad4a <__gethex+0x1fe>
 801ad24:	2b20      	cmp	r3, #32
 801ad26:	d104      	bne.n	801ad32 <__gethex+0x1e6>
 801ad28:	f845 bb04 	str.w	fp, [r5], #4
 801ad2c:	f04f 0b00 	mov.w	fp, #0
 801ad30:	465b      	mov	r3, fp
 801ad32:	7830      	ldrb	r0, [r6, #0]
 801ad34:	9303      	str	r3, [sp, #12]
 801ad36:	f7ff fef3 	bl	801ab20 <__hexdig_fun>
 801ad3a:	9b03      	ldr	r3, [sp, #12]
 801ad3c:	f000 000f 	and.w	r0, r0, #15
 801ad40:	4098      	lsls	r0, r3
 801ad42:	ea4b 0b00 	orr.w	fp, fp, r0
 801ad46:	3304      	adds	r3, #4
 801ad48:	e7ae      	b.n	801aca8 <__gethex+0x15c>
 801ad4a:	45b1      	cmp	r9, r6
 801ad4c:	d8ea      	bhi.n	801ad24 <__gethex+0x1d8>
 801ad4e:	492b      	ldr	r1, [pc, #172]	@ (801adfc <__gethex+0x2b0>)
 801ad50:	9303      	str	r3, [sp, #12]
 801ad52:	2201      	movs	r2, #1
 801ad54:	4630      	mov	r0, r6
 801ad56:	f7fe ff0b 	bl	8019b70 <strncmp>
 801ad5a:	9b03      	ldr	r3, [sp, #12]
 801ad5c:	2800      	cmp	r0, #0
 801ad5e:	d1e1      	bne.n	801ad24 <__gethex+0x1d8>
 801ad60:	e7a2      	b.n	801aca8 <__gethex+0x15c>
 801ad62:	1ea9      	subs	r1, r5, #2
 801ad64:	4620      	mov	r0, r4
 801ad66:	f000 fe5e 	bl	801ba26 <__any_on>
 801ad6a:	2800      	cmp	r0, #0
 801ad6c:	d0c2      	beq.n	801acf4 <__gethex+0x1a8>
 801ad6e:	f04f 0903 	mov.w	r9, #3
 801ad72:	e7c1      	b.n	801acf8 <__gethex+0x1ac>
 801ad74:	da09      	bge.n	801ad8a <__gethex+0x23e>
 801ad76:	1b75      	subs	r5, r6, r5
 801ad78:	4621      	mov	r1, r4
 801ad7a:	9801      	ldr	r0, [sp, #4]
 801ad7c:	462a      	mov	r2, r5
 801ad7e:	f000 fc19 	bl	801b5b4 <__lshift>
 801ad82:	1b7f      	subs	r7, r7, r5
 801ad84:	4604      	mov	r4, r0
 801ad86:	f100 0a14 	add.w	sl, r0, #20
 801ad8a:	f04f 0900 	mov.w	r9, #0
 801ad8e:	e7b8      	b.n	801ad02 <__gethex+0x1b6>
 801ad90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ad94:	42bd      	cmp	r5, r7
 801ad96:	dd6f      	ble.n	801ae78 <__gethex+0x32c>
 801ad98:	1bed      	subs	r5, r5, r7
 801ad9a:	42ae      	cmp	r6, r5
 801ad9c:	dc34      	bgt.n	801ae08 <__gethex+0x2bc>
 801ad9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ada2:	2b02      	cmp	r3, #2
 801ada4:	d022      	beq.n	801adec <__gethex+0x2a0>
 801ada6:	2b03      	cmp	r3, #3
 801ada8:	d024      	beq.n	801adf4 <__gethex+0x2a8>
 801adaa:	2b01      	cmp	r3, #1
 801adac:	d115      	bne.n	801adda <__gethex+0x28e>
 801adae:	42ae      	cmp	r6, r5
 801adb0:	d113      	bne.n	801adda <__gethex+0x28e>
 801adb2:	2e01      	cmp	r6, #1
 801adb4:	d10b      	bne.n	801adce <__gethex+0x282>
 801adb6:	9a02      	ldr	r2, [sp, #8]
 801adb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801adbc:	6013      	str	r3, [r2, #0]
 801adbe:	2301      	movs	r3, #1
 801adc0:	6123      	str	r3, [r4, #16]
 801adc2:	f8ca 3000 	str.w	r3, [sl]
 801adc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801adc8:	2562      	movs	r5, #98	@ 0x62
 801adca:	601c      	str	r4, [r3, #0]
 801adcc:	e73a      	b.n	801ac44 <__gethex+0xf8>
 801adce:	1e71      	subs	r1, r6, #1
 801add0:	4620      	mov	r0, r4
 801add2:	f000 fe28 	bl	801ba26 <__any_on>
 801add6:	2800      	cmp	r0, #0
 801add8:	d1ed      	bne.n	801adb6 <__gethex+0x26a>
 801adda:	9801      	ldr	r0, [sp, #4]
 801addc:	4621      	mov	r1, r4
 801adde:	f000 f9d9 	bl	801b194 <_Bfree>
 801ade2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ade4:	2300      	movs	r3, #0
 801ade6:	6013      	str	r3, [r2, #0]
 801ade8:	2550      	movs	r5, #80	@ 0x50
 801adea:	e72b      	b.n	801ac44 <__gethex+0xf8>
 801adec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d1f3      	bne.n	801adda <__gethex+0x28e>
 801adf2:	e7e0      	b.n	801adb6 <__gethex+0x26a>
 801adf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d1dd      	bne.n	801adb6 <__gethex+0x26a>
 801adfa:	e7ee      	b.n	801adda <__gethex+0x28e>
 801adfc:	0801f280 	.word	0x0801f280
 801ae00:	0801f338 	.word	0x0801f338
 801ae04:	0801f349 	.word	0x0801f349
 801ae08:	1e6f      	subs	r7, r5, #1
 801ae0a:	f1b9 0f00 	cmp.w	r9, #0
 801ae0e:	d130      	bne.n	801ae72 <__gethex+0x326>
 801ae10:	b127      	cbz	r7, 801ae1c <__gethex+0x2d0>
 801ae12:	4639      	mov	r1, r7
 801ae14:	4620      	mov	r0, r4
 801ae16:	f000 fe06 	bl	801ba26 <__any_on>
 801ae1a:	4681      	mov	r9, r0
 801ae1c:	117a      	asrs	r2, r7, #5
 801ae1e:	2301      	movs	r3, #1
 801ae20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801ae24:	f007 071f 	and.w	r7, r7, #31
 801ae28:	40bb      	lsls	r3, r7
 801ae2a:	4213      	tst	r3, r2
 801ae2c:	4629      	mov	r1, r5
 801ae2e:	4620      	mov	r0, r4
 801ae30:	bf18      	it	ne
 801ae32:	f049 0902 	orrne.w	r9, r9, #2
 801ae36:	f7ff fe21 	bl	801aa7c <rshift>
 801ae3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801ae3e:	1b76      	subs	r6, r6, r5
 801ae40:	2502      	movs	r5, #2
 801ae42:	f1b9 0f00 	cmp.w	r9, #0
 801ae46:	d047      	beq.n	801aed8 <__gethex+0x38c>
 801ae48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ae4c:	2b02      	cmp	r3, #2
 801ae4e:	d015      	beq.n	801ae7c <__gethex+0x330>
 801ae50:	2b03      	cmp	r3, #3
 801ae52:	d017      	beq.n	801ae84 <__gethex+0x338>
 801ae54:	2b01      	cmp	r3, #1
 801ae56:	d109      	bne.n	801ae6c <__gethex+0x320>
 801ae58:	f019 0f02 	tst.w	r9, #2
 801ae5c:	d006      	beq.n	801ae6c <__gethex+0x320>
 801ae5e:	f8da 3000 	ldr.w	r3, [sl]
 801ae62:	ea49 0903 	orr.w	r9, r9, r3
 801ae66:	f019 0f01 	tst.w	r9, #1
 801ae6a:	d10e      	bne.n	801ae8a <__gethex+0x33e>
 801ae6c:	f045 0510 	orr.w	r5, r5, #16
 801ae70:	e032      	b.n	801aed8 <__gethex+0x38c>
 801ae72:	f04f 0901 	mov.w	r9, #1
 801ae76:	e7d1      	b.n	801ae1c <__gethex+0x2d0>
 801ae78:	2501      	movs	r5, #1
 801ae7a:	e7e2      	b.n	801ae42 <__gethex+0x2f6>
 801ae7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ae7e:	f1c3 0301 	rsb	r3, r3, #1
 801ae82:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ae84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d0f0      	beq.n	801ae6c <__gethex+0x320>
 801ae8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ae8e:	f104 0314 	add.w	r3, r4, #20
 801ae92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ae96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ae9a:	f04f 0c00 	mov.w	ip, #0
 801ae9e:	4618      	mov	r0, r3
 801aea0:	f853 2b04 	ldr.w	r2, [r3], #4
 801aea4:	f1b2 3fff 	cmp.w	r2, #4294967295
 801aea8:	d01b      	beq.n	801aee2 <__gethex+0x396>
 801aeaa:	3201      	adds	r2, #1
 801aeac:	6002      	str	r2, [r0, #0]
 801aeae:	2d02      	cmp	r5, #2
 801aeb0:	f104 0314 	add.w	r3, r4, #20
 801aeb4:	d13c      	bne.n	801af30 <__gethex+0x3e4>
 801aeb6:	f8d8 2000 	ldr.w	r2, [r8]
 801aeba:	3a01      	subs	r2, #1
 801aebc:	42b2      	cmp	r2, r6
 801aebe:	d109      	bne.n	801aed4 <__gethex+0x388>
 801aec0:	1171      	asrs	r1, r6, #5
 801aec2:	2201      	movs	r2, #1
 801aec4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801aec8:	f006 061f 	and.w	r6, r6, #31
 801aecc:	fa02 f606 	lsl.w	r6, r2, r6
 801aed0:	421e      	tst	r6, r3
 801aed2:	d13a      	bne.n	801af4a <__gethex+0x3fe>
 801aed4:	f045 0520 	orr.w	r5, r5, #32
 801aed8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aeda:	601c      	str	r4, [r3, #0]
 801aedc:	9b02      	ldr	r3, [sp, #8]
 801aede:	601f      	str	r7, [r3, #0]
 801aee0:	e6b0      	b.n	801ac44 <__gethex+0xf8>
 801aee2:	4299      	cmp	r1, r3
 801aee4:	f843 cc04 	str.w	ip, [r3, #-4]
 801aee8:	d8d9      	bhi.n	801ae9e <__gethex+0x352>
 801aeea:	68a3      	ldr	r3, [r4, #8]
 801aeec:	459b      	cmp	fp, r3
 801aeee:	db17      	blt.n	801af20 <__gethex+0x3d4>
 801aef0:	6861      	ldr	r1, [r4, #4]
 801aef2:	9801      	ldr	r0, [sp, #4]
 801aef4:	3101      	adds	r1, #1
 801aef6:	f000 f90d 	bl	801b114 <_Balloc>
 801aefa:	4681      	mov	r9, r0
 801aefc:	b918      	cbnz	r0, 801af06 <__gethex+0x3ba>
 801aefe:	4b1a      	ldr	r3, [pc, #104]	@ (801af68 <__gethex+0x41c>)
 801af00:	4602      	mov	r2, r0
 801af02:	2184      	movs	r1, #132	@ 0x84
 801af04:	e6c5      	b.n	801ac92 <__gethex+0x146>
 801af06:	6922      	ldr	r2, [r4, #16]
 801af08:	3202      	adds	r2, #2
 801af0a:	f104 010c 	add.w	r1, r4, #12
 801af0e:	0092      	lsls	r2, r2, #2
 801af10:	300c      	adds	r0, #12
 801af12:	f7fe fef8 	bl	8019d06 <memcpy>
 801af16:	4621      	mov	r1, r4
 801af18:	9801      	ldr	r0, [sp, #4]
 801af1a:	f000 f93b 	bl	801b194 <_Bfree>
 801af1e:	464c      	mov	r4, r9
 801af20:	6923      	ldr	r3, [r4, #16]
 801af22:	1c5a      	adds	r2, r3, #1
 801af24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801af28:	6122      	str	r2, [r4, #16]
 801af2a:	2201      	movs	r2, #1
 801af2c:	615a      	str	r2, [r3, #20]
 801af2e:	e7be      	b.n	801aeae <__gethex+0x362>
 801af30:	6922      	ldr	r2, [r4, #16]
 801af32:	455a      	cmp	r2, fp
 801af34:	dd0b      	ble.n	801af4e <__gethex+0x402>
 801af36:	2101      	movs	r1, #1
 801af38:	4620      	mov	r0, r4
 801af3a:	f7ff fd9f 	bl	801aa7c <rshift>
 801af3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801af42:	3701      	adds	r7, #1
 801af44:	42bb      	cmp	r3, r7
 801af46:	f6ff aee0 	blt.w	801ad0a <__gethex+0x1be>
 801af4a:	2501      	movs	r5, #1
 801af4c:	e7c2      	b.n	801aed4 <__gethex+0x388>
 801af4e:	f016 061f 	ands.w	r6, r6, #31
 801af52:	d0fa      	beq.n	801af4a <__gethex+0x3fe>
 801af54:	4453      	add	r3, sl
 801af56:	f1c6 0620 	rsb	r6, r6, #32
 801af5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801af5e:	f000 f9cb 	bl	801b2f8 <__hi0bits>
 801af62:	42b0      	cmp	r0, r6
 801af64:	dbe7      	blt.n	801af36 <__gethex+0x3ea>
 801af66:	e7f0      	b.n	801af4a <__gethex+0x3fe>
 801af68:	0801f338 	.word	0x0801f338

0801af6c <L_shift>:
 801af6c:	f1c2 0208 	rsb	r2, r2, #8
 801af70:	0092      	lsls	r2, r2, #2
 801af72:	b570      	push	{r4, r5, r6, lr}
 801af74:	f1c2 0620 	rsb	r6, r2, #32
 801af78:	6843      	ldr	r3, [r0, #4]
 801af7a:	6804      	ldr	r4, [r0, #0]
 801af7c:	fa03 f506 	lsl.w	r5, r3, r6
 801af80:	432c      	orrs	r4, r5
 801af82:	40d3      	lsrs	r3, r2
 801af84:	6004      	str	r4, [r0, #0]
 801af86:	f840 3f04 	str.w	r3, [r0, #4]!
 801af8a:	4288      	cmp	r0, r1
 801af8c:	d3f4      	bcc.n	801af78 <L_shift+0xc>
 801af8e:	bd70      	pop	{r4, r5, r6, pc}

0801af90 <__match>:
 801af90:	b530      	push	{r4, r5, lr}
 801af92:	6803      	ldr	r3, [r0, #0]
 801af94:	3301      	adds	r3, #1
 801af96:	f811 4b01 	ldrb.w	r4, [r1], #1
 801af9a:	b914      	cbnz	r4, 801afa2 <__match+0x12>
 801af9c:	6003      	str	r3, [r0, #0]
 801af9e:	2001      	movs	r0, #1
 801afa0:	bd30      	pop	{r4, r5, pc}
 801afa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801afa6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801afaa:	2d19      	cmp	r5, #25
 801afac:	bf98      	it	ls
 801afae:	3220      	addls	r2, #32
 801afb0:	42a2      	cmp	r2, r4
 801afb2:	d0f0      	beq.n	801af96 <__match+0x6>
 801afb4:	2000      	movs	r0, #0
 801afb6:	e7f3      	b.n	801afa0 <__match+0x10>

0801afb8 <__hexnan>:
 801afb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afbc:	680b      	ldr	r3, [r1, #0]
 801afbe:	6801      	ldr	r1, [r0, #0]
 801afc0:	115e      	asrs	r6, r3, #5
 801afc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801afc6:	f013 031f 	ands.w	r3, r3, #31
 801afca:	b087      	sub	sp, #28
 801afcc:	bf18      	it	ne
 801afce:	3604      	addne	r6, #4
 801afd0:	2500      	movs	r5, #0
 801afd2:	1f37      	subs	r7, r6, #4
 801afd4:	4682      	mov	sl, r0
 801afd6:	4690      	mov	r8, r2
 801afd8:	9301      	str	r3, [sp, #4]
 801afda:	f846 5c04 	str.w	r5, [r6, #-4]
 801afde:	46b9      	mov	r9, r7
 801afe0:	463c      	mov	r4, r7
 801afe2:	9502      	str	r5, [sp, #8]
 801afe4:	46ab      	mov	fp, r5
 801afe6:	784a      	ldrb	r2, [r1, #1]
 801afe8:	1c4b      	adds	r3, r1, #1
 801afea:	9303      	str	r3, [sp, #12]
 801afec:	b342      	cbz	r2, 801b040 <__hexnan+0x88>
 801afee:	4610      	mov	r0, r2
 801aff0:	9105      	str	r1, [sp, #20]
 801aff2:	9204      	str	r2, [sp, #16]
 801aff4:	f7ff fd94 	bl	801ab20 <__hexdig_fun>
 801aff8:	2800      	cmp	r0, #0
 801affa:	d151      	bne.n	801b0a0 <__hexnan+0xe8>
 801affc:	9a04      	ldr	r2, [sp, #16]
 801affe:	9905      	ldr	r1, [sp, #20]
 801b000:	2a20      	cmp	r2, #32
 801b002:	d818      	bhi.n	801b036 <__hexnan+0x7e>
 801b004:	9b02      	ldr	r3, [sp, #8]
 801b006:	459b      	cmp	fp, r3
 801b008:	dd13      	ble.n	801b032 <__hexnan+0x7a>
 801b00a:	454c      	cmp	r4, r9
 801b00c:	d206      	bcs.n	801b01c <__hexnan+0x64>
 801b00e:	2d07      	cmp	r5, #7
 801b010:	dc04      	bgt.n	801b01c <__hexnan+0x64>
 801b012:	462a      	mov	r2, r5
 801b014:	4649      	mov	r1, r9
 801b016:	4620      	mov	r0, r4
 801b018:	f7ff ffa8 	bl	801af6c <L_shift>
 801b01c:	4544      	cmp	r4, r8
 801b01e:	d952      	bls.n	801b0c6 <__hexnan+0x10e>
 801b020:	2300      	movs	r3, #0
 801b022:	f1a4 0904 	sub.w	r9, r4, #4
 801b026:	f844 3c04 	str.w	r3, [r4, #-4]
 801b02a:	f8cd b008 	str.w	fp, [sp, #8]
 801b02e:	464c      	mov	r4, r9
 801b030:	461d      	mov	r5, r3
 801b032:	9903      	ldr	r1, [sp, #12]
 801b034:	e7d7      	b.n	801afe6 <__hexnan+0x2e>
 801b036:	2a29      	cmp	r2, #41	@ 0x29
 801b038:	d157      	bne.n	801b0ea <__hexnan+0x132>
 801b03a:	3102      	adds	r1, #2
 801b03c:	f8ca 1000 	str.w	r1, [sl]
 801b040:	f1bb 0f00 	cmp.w	fp, #0
 801b044:	d051      	beq.n	801b0ea <__hexnan+0x132>
 801b046:	454c      	cmp	r4, r9
 801b048:	d206      	bcs.n	801b058 <__hexnan+0xa0>
 801b04a:	2d07      	cmp	r5, #7
 801b04c:	dc04      	bgt.n	801b058 <__hexnan+0xa0>
 801b04e:	462a      	mov	r2, r5
 801b050:	4649      	mov	r1, r9
 801b052:	4620      	mov	r0, r4
 801b054:	f7ff ff8a 	bl	801af6c <L_shift>
 801b058:	4544      	cmp	r4, r8
 801b05a:	d936      	bls.n	801b0ca <__hexnan+0x112>
 801b05c:	f1a8 0204 	sub.w	r2, r8, #4
 801b060:	4623      	mov	r3, r4
 801b062:	f853 1b04 	ldr.w	r1, [r3], #4
 801b066:	f842 1f04 	str.w	r1, [r2, #4]!
 801b06a:	429f      	cmp	r7, r3
 801b06c:	d2f9      	bcs.n	801b062 <__hexnan+0xaa>
 801b06e:	1b3b      	subs	r3, r7, r4
 801b070:	f023 0303 	bic.w	r3, r3, #3
 801b074:	3304      	adds	r3, #4
 801b076:	3401      	adds	r4, #1
 801b078:	3e03      	subs	r6, #3
 801b07a:	42b4      	cmp	r4, r6
 801b07c:	bf88      	it	hi
 801b07e:	2304      	movhi	r3, #4
 801b080:	4443      	add	r3, r8
 801b082:	2200      	movs	r2, #0
 801b084:	f843 2b04 	str.w	r2, [r3], #4
 801b088:	429f      	cmp	r7, r3
 801b08a:	d2fb      	bcs.n	801b084 <__hexnan+0xcc>
 801b08c:	683b      	ldr	r3, [r7, #0]
 801b08e:	b91b      	cbnz	r3, 801b098 <__hexnan+0xe0>
 801b090:	4547      	cmp	r7, r8
 801b092:	d128      	bne.n	801b0e6 <__hexnan+0x12e>
 801b094:	2301      	movs	r3, #1
 801b096:	603b      	str	r3, [r7, #0]
 801b098:	2005      	movs	r0, #5
 801b09a:	b007      	add	sp, #28
 801b09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0a0:	3501      	adds	r5, #1
 801b0a2:	2d08      	cmp	r5, #8
 801b0a4:	f10b 0b01 	add.w	fp, fp, #1
 801b0a8:	dd06      	ble.n	801b0b8 <__hexnan+0x100>
 801b0aa:	4544      	cmp	r4, r8
 801b0ac:	d9c1      	bls.n	801b032 <__hexnan+0x7a>
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	f844 3c04 	str.w	r3, [r4, #-4]
 801b0b4:	2501      	movs	r5, #1
 801b0b6:	3c04      	subs	r4, #4
 801b0b8:	6822      	ldr	r2, [r4, #0]
 801b0ba:	f000 000f 	and.w	r0, r0, #15
 801b0be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801b0c2:	6020      	str	r0, [r4, #0]
 801b0c4:	e7b5      	b.n	801b032 <__hexnan+0x7a>
 801b0c6:	2508      	movs	r5, #8
 801b0c8:	e7b3      	b.n	801b032 <__hexnan+0x7a>
 801b0ca:	9b01      	ldr	r3, [sp, #4]
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d0dd      	beq.n	801b08c <__hexnan+0xd4>
 801b0d0:	f1c3 0320 	rsb	r3, r3, #32
 801b0d4:	f04f 32ff 	mov.w	r2, #4294967295
 801b0d8:	40da      	lsrs	r2, r3
 801b0da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801b0de:	4013      	ands	r3, r2
 801b0e0:	f846 3c04 	str.w	r3, [r6, #-4]
 801b0e4:	e7d2      	b.n	801b08c <__hexnan+0xd4>
 801b0e6:	3f04      	subs	r7, #4
 801b0e8:	e7d0      	b.n	801b08c <__hexnan+0xd4>
 801b0ea:	2004      	movs	r0, #4
 801b0ec:	e7d5      	b.n	801b09a <__hexnan+0xe2>

0801b0ee <__ascii_mbtowc>:
 801b0ee:	b082      	sub	sp, #8
 801b0f0:	b901      	cbnz	r1, 801b0f4 <__ascii_mbtowc+0x6>
 801b0f2:	a901      	add	r1, sp, #4
 801b0f4:	b142      	cbz	r2, 801b108 <__ascii_mbtowc+0x1a>
 801b0f6:	b14b      	cbz	r3, 801b10c <__ascii_mbtowc+0x1e>
 801b0f8:	7813      	ldrb	r3, [r2, #0]
 801b0fa:	600b      	str	r3, [r1, #0]
 801b0fc:	7812      	ldrb	r2, [r2, #0]
 801b0fe:	1e10      	subs	r0, r2, #0
 801b100:	bf18      	it	ne
 801b102:	2001      	movne	r0, #1
 801b104:	b002      	add	sp, #8
 801b106:	4770      	bx	lr
 801b108:	4610      	mov	r0, r2
 801b10a:	e7fb      	b.n	801b104 <__ascii_mbtowc+0x16>
 801b10c:	f06f 0001 	mvn.w	r0, #1
 801b110:	e7f8      	b.n	801b104 <__ascii_mbtowc+0x16>
	...

0801b114 <_Balloc>:
 801b114:	b570      	push	{r4, r5, r6, lr}
 801b116:	69c6      	ldr	r6, [r0, #28]
 801b118:	4604      	mov	r4, r0
 801b11a:	460d      	mov	r5, r1
 801b11c:	b976      	cbnz	r6, 801b13c <_Balloc+0x28>
 801b11e:	2010      	movs	r0, #16
 801b120:	f7fc ff58 	bl	8017fd4 <malloc>
 801b124:	4602      	mov	r2, r0
 801b126:	61e0      	str	r0, [r4, #28]
 801b128:	b920      	cbnz	r0, 801b134 <_Balloc+0x20>
 801b12a:	4b18      	ldr	r3, [pc, #96]	@ (801b18c <_Balloc+0x78>)
 801b12c:	4818      	ldr	r0, [pc, #96]	@ (801b190 <_Balloc+0x7c>)
 801b12e:	216b      	movs	r1, #107	@ 0x6b
 801b130:	f001 fc24 	bl	801c97c <__assert_func>
 801b134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b138:	6006      	str	r6, [r0, #0]
 801b13a:	60c6      	str	r6, [r0, #12]
 801b13c:	69e6      	ldr	r6, [r4, #28]
 801b13e:	68f3      	ldr	r3, [r6, #12]
 801b140:	b183      	cbz	r3, 801b164 <_Balloc+0x50>
 801b142:	69e3      	ldr	r3, [r4, #28]
 801b144:	68db      	ldr	r3, [r3, #12]
 801b146:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b14a:	b9b8      	cbnz	r0, 801b17c <_Balloc+0x68>
 801b14c:	2101      	movs	r1, #1
 801b14e:	fa01 f605 	lsl.w	r6, r1, r5
 801b152:	1d72      	adds	r2, r6, #5
 801b154:	0092      	lsls	r2, r2, #2
 801b156:	4620      	mov	r0, r4
 801b158:	f001 fc2e 	bl	801c9b8 <_calloc_r>
 801b15c:	b160      	cbz	r0, 801b178 <_Balloc+0x64>
 801b15e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b162:	e00e      	b.n	801b182 <_Balloc+0x6e>
 801b164:	2221      	movs	r2, #33	@ 0x21
 801b166:	2104      	movs	r1, #4
 801b168:	4620      	mov	r0, r4
 801b16a:	f001 fc25 	bl	801c9b8 <_calloc_r>
 801b16e:	69e3      	ldr	r3, [r4, #28]
 801b170:	60f0      	str	r0, [r6, #12]
 801b172:	68db      	ldr	r3, [r3, #12]
 801b174:	2b00      	cmp	r3, #0
 801b176:	d1e4      	bne.n	801b142 <_Balloc+0x2e>
 801b178:	2000      	movs	r0, #0
 801b17a:	bd70      	pop	{r4, r5, r6, pc}
 801b17c:	6802      	ldr	r2, [r0, #0]
 801b17e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b182:	2300      	movs	r3, #0
 801b184:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b188:	e7f7      	b.n	801b17a <_Balloc+0x66>
 801b18a:	bf00      	nop
 801b18c:	0801f2c9 	.word	0x0801f2c9
 801b190:	0801f3a9 	.word	0x0801f3a9

0801b194 <_Bfree>:
 801b194:	b570      	push	{r4, r5, r6, lr}
 801b196:	69c6      	ldr	r6, [r0, #28]
 801b198:	4605      	mov	r5, r0
 801b19a:	460c      	mov	r4, r1
 801b19c:	b976      	cbnz	r6, 801b1bc <_Bfree+0x28>
 801b19e:	2010      	movs	r0, #16
 801b1a0:	f7fc ff18 	bl	8017fd4 <malloc>
 801b1a4:	4602      	mov	r2, r0
 801b1a6:	61e8      	str	r0, [r5, #28]
 801b1a8:	b920      	cbnz	r0, 801b1b4 <_Bfree+0x20>
 801b1aa:	4b09      	ldr	r3, [pc, #36]	@ (801b1d0 <_Bfree+0x3c>)
 801b1ac:	4809      	ldr	r0, [pc, #36]	@ (801b1d4 <_Bfree+0x40>)
 801b1ae:	218f      	movs	r1, #143	@ 0x8f
 801b1b0:	f001 fbe4 	bl	801c97c <__assert_func>
 801b1b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b1b8:	6006      	str	r6, [r0, #0]
 801b1ba:	60c6      	str	r6, [r0, #12]
 801b1bc:	b13c      	cbz	r4, 801b1ce <_Bfree+0x3a>
 801b1be:	69eb      	ldr	r3, [r5, #28]
 801b1c0:	6862      	ldr	r2, [r4, #4]
 801b1c2:	68db      	ldr	r3, [r3, #12]
 801b1c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b1c8:	6021      	str	r1, [r4, #0]
 801b1ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b1ce:	bd70      	pop	{r4, r5, r6, pc}
 801b1d0:	0801f2c9 	.word	0x0801f2c9
 801b1d4:	0801f3a9 	.word	0x0801f3a9

0801b1d8 <__multadd>:
 801b1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1dc:	690d      	ldr	r5, [r1, #16]
 801b1de:	4607      	mov	r7, r0
 801b1e0:	460c      	mov	r4, r1
 801b1e2:	461e      	mov	r6, r3
 801b1e4:	f101 0c14 	add.w	ip, r1, #20
 801b1e8:	2000      	movs	r0, #0
 801b1ea:	f8dc 3000 	ldr.w	r3, [ip]
 801b1ee:	b299      	uxth	r1, r3
 801b1f0:	fb02 6101 	mla	r1, r2, r1, r6
 801b1f4:	0c1e      	lsrs	r6, r3, #16
 801b1f6:	0c0b      	lsrs	r3, r1, #16
 801b1f8:	fb02 3306 	mla	r3, r2, r6, r3
 801b1fc:	b289      	uxth	r1, r1
 801b1fe:	3001      	adds	r0, #1
 801b200:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b204:	4285      	cmp	r5, r0
 801b206:	f84c 1b04 	str.w	r1, [ip], #4
 801b20a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b20e:	dcec      	bgt.n	801b1ea <__multadd+0x12>
 801b210:	b30e      	cbz	r6, 801b256 <__multadd+0x7e>
 801b212:	68a3      	ldr	r3, [r4, #8]
 801b214:	42ab      	cmp	r3, r5
 801b216:	dc19      	bgt.n	801b24c <__multadd+0x74>
 801b218:	6861      	ldr	r1, [r4, #4]
 801b21a:	4638      	mov	r0, r7
 801b21c:	3101      	adds	r1, #1
 801b21e:	f7ff ff79 	bl	801b114 <_Balloc>
 801b222:	4680      	mov	r8, r0
 801b224:	b928      	cbnz	r0, 801b232 <__multadd+0x5a>
 801b226:	4602      	mov	r2, r0
 801b228:	4b0c      	ldr	r3, [pc, #48]	@ (801b25c <__multadd+0x84>)
 801b22a:	480d      	ldr	r0, [pc, #52]	@ (801b260 <__multadd+0x88>)
 801b22c:	21ba      	movs	r1, #186	@ 0xba
 801b22e:	f001 fba5 	bl	801c97c <__assert_func>
 801b232:	6922      	ldr	r2, [r4, #16]
 801b234:	3202      	adds	r2, #2
 801b236:	f104 010c 	add.w	r1, r4, #12
 801b23a:	0092      	lsls	r2, r2, #2
 801b23c:	300c      	adds	r0, #12
 801b23e:	f7fe fd62 	bl	8019d06 <memcpy>
 801b242:	4621      	mov	r1, r4
 801b244:	4638      	mov	r0, r7
 801b246:	f7ff ffa5 	bl	801b194 <_Bfree>
 801b24a:	4644      	mov	r4, r8
 801b24c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b250:	3501      	adds	r5, #1
 801b252:	615e      	str	r6, [r3, #20]
 801b254:	6125      	str	r5, [r4, #16]
 801b256:	4620      	mov	r0, r4
 801b258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b25c:	0801f338 	.word	0x0801f338
 801b260:	0801f3a9 	.word	0x0801f3a9

0801b264 <__s2b>:
 801b264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b268:	460c      	mov	r4, r1
 801b26a:	4615      	mov	r5, r2
 801b26c:	461f      	mov	r7, r3
 801b26e:	2209      	movs	r2, #9
 801b270:	3308      	adds	r3, #8
 801b272:	4606      	mov	r6, r0
 801b274:	fb93 f3f2 	sdiv	r3, r3, r2
 801b278:	2100      	movs	r1, #0
 801b27a:	2201      	movs	r2, #1
 801b27c:	429a      	cmp	r2, r3
 801b27e:	db09      	blt.n	801b294 <__s2b+0x30>
 801b280:	4630      	mov	r0, r6
 801b282:	f7ff ff47 	bl	801b114 <_Balloc>
 801b286:	b940      	cbnz	r0, 801b29a <__s2b+0x36>
 801b288:	4602      	mov	r2, r0
 801b28a:	4b19      	ldr	r3, [pc, #100]	@ (801b2f0 <__s2b+0x8c>)
 801b28c:	4819      	ldr	r0, [pc, #100]	@ (801b2f4 <__s2b+0x90>)
 801b28e:	21d3      	movs	r1, #211	@ 0xd3
 801b290:	f001 fb74 	bl	801c97c <__assert_func>
 801b294:	0052      	lsls	r2, r2, #1
 801b296:	3101      	adds	r1, #1
 801b298:	e7f0      	b.n	801b27c <__s2b+0x18>
 801b29a:	9b08      	ldr	r3, [sp, #32]
 801b29c:	6143      	str	r3, [r0, #20]
 801b29e:	2d09      	cmp	r5, #9
 801b2a0:	f04f 0301 	mov.w	r3, #1
 801b2a4:	6103      	str	r3, [r0, #16]
 801b2a6:	dd16      	ble.n	801b2d6 <__s2b+0x72>
 801b2a8:	f104 0909 	add.w	r9, r4, #9
 801b2ac:	46c8      	mov	r8, r9
 801b2ae:	442c      	add	r4, r5
 801b2b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b2b4:	4601      	mov	r1, r0
 801b2b6:	3b30      	subs	r3, #48	@ 0x30
 801b2b8:	220a      	movs	r2, #10
 801b2ba:	4630      	mov	r0, r6
 801b2bc:	f7ff ff8c 	bl	801b1d8 <__multadd>
 801b2c0:	45a0      	cmp	r8, r4
 801b2c2:	d1f5      	bne.n	801b2b0 <__s2b+0x4c>
 801b2c4:	f1a5 0408 	sub.w	r4, r5, #8
 801b2c8:	444c      	add	r4, r9
 801b2ca:	1b2d      	subs	r5, r5, r4
 801b2cc:	1963      	adds	r3, r4, r5
 801b2ce:	42bb      	cmp	r3, r7
 801b2d0:	db04      	blt.n	801b2dc <__s2b+0x78>
 801b2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b2d6:	340a      	adds	r4, #10
 801b2d8:	2509      	movs	r5, #9
 801b2da:	e7f6      	b.n	801b2ca <__s2b+0x66>
 801b2dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b2e0:	4601      	mov	r1, r0
 801b2e2:	3b30      	subs	r3, #48	@ 0x30
 801b2e4:	220a      	movs	r2, #10
 801b2e6:	4630      	mov	r0, r6
 801b2e8:	f7ff ff76 	bl	801b1d8 <__multadd>
 801b2ec:	e7ee      	b.n	801b2cc <__s2b+0x68>
 801b2ee:	bf00      	nop
 801b2f0:	0801f338 	.word	0x0801f338
 801b2f4:	0801f3a9 	.word	0x0801f3a9

0801b2f8 <__hi0bits>:
 801b2f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b2fc:	4603      	mov	r3, r0
 801b2fe:	bf36      	itet	cc
 801b300:	0403      	lslcc	r3, r0, #16
 801b302:	2000      	movcs	r0, #0
 801b304:	2010      	movcc	r0, #16
 801b306:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b30a:	bf3c      	itt	cc
 801b30c:	021b      	lslcc	r3, r3, #8
 801b30e:	3008      	addcc	r0, #8
 801b310:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b314:	bf3c      	itt	cc
 801b316:	011b      	lslcc	r3, r3, #4
 801b318:	3004      	addcc	r0, #4
 801b31a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b31e:	bf3c      	itt	cc
 801b320:	009b      	lslcc	r3, r3, #2
 801b322:	3002      	addcc	r0, #2
 801b324:	2b00      	cmp	r3, #0
 801b326:	db05      	blt.n	801b334 <__hi0bits+0x3c>
 801b328:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b32c:	f100 0001 	add.w	r0, r0, #1
 801b330:	bf08      	it	eq
 801b332:	2020      	moveq	r0, #32
 801b334:	4770      	bx	lr

0801b336 <__lo0bits>:
 801b336:	6803      	ldr	r3, [r0, #0]
 801b338:	4602      	mov	r2, r0
 801b33a:	f013 0007 	ands.w	r0, r3, #7
 801b33e:	d00b      	beq.n	801b358 <__lo0bits+0x22>
 801b340:	07d9      	lsls	r1, r3, #31
 801b342:	d421      	bmi.n	801b388 <__lo0bits+0x52>
 801b344:	0798      	lsls	r0, r3, #30
 801b346:	bf49      	itett	mi
 801b348:	085b      	lsrmi	r3, r3, #1
 801b34a:	089b      	lsrpl	r3, r3, #2
 801b34c:	2001      	movmi	r0, #1
 801b34e:	6013      	strmi	r3, [r2, #0]
 801b350:	bf5c      	itt	pl
 801b352:	6013      	strpl	r3, [r2, #0]
 801b354:	2002      	movpl	r0, #2
 801b356:	4770      	bx	lr
 801b358:	b299      	uxth	r1, r3
 801b35a:	b909      	cbnz	r1, 801b360 <__lo0bits+0x2a>
 801b35c:	0c1b      	lsrs	r3, r3, #16
 801b35e:	2010      	movs	r0, #16
 801b360:	b2d9      	uxtb	r1, r3
 801b362:	b909      	cbnz	r1, 801b368 <__lo0bits+0x32>
 801b364:	3008      	adds	r0, #8
 801b366:	0a1b      	lsrs	r3, r3, #8
 801b368:	0719      	lsls	r1, r3, #28
 801b36a:	bf04      	itt	eq
 801b36c:	091b      	lsreq	r3, r3, #4
 801b36e:	3004      	addeq	r0, #4
 801b370:	0799      	lsls	r1, r3, #30
 801b372:	bf04      	itt	eq
 801b374:	089b      	lsreq	r3, r3, #2
 801b376:	3002      	addeq	r0, #2
 801b378:	07d9      	lsls	r1, r3, #31
 801b37a:	d403      	bmi.n	801b384 <__lo0bits+0x4e>
 801b37c:	085b      	lsrs	r3, r3, #1
 801b37e:	f100 0001 	add.w	r0, r0, #1
 801b382:	d003      	beq.n	801b38c <__lo0bits+0x56>
 801b384:	6013      	str	r3, [r2, #0]
 801b386:	4770      	bx	lr
 801b388:	2000      	movs	r0, #0
 801b38a:	4770      	bx	lr
 801b38c:	2020      	movs	r0, #32
 801b38e:	4770      	bx	lr

0801b390 <__i2b>:
 801b390:	b510      	push	{r4, lr}
 801b392:	460c      	mov	r4, r1
 801b394:	2101      	movs	r1, #1
 801b396:	f7ff febd 	bl	801b114 <_Balloc>
 801b39a:	4602      	mov	r2, r0
 801b39c:	b928      	cbnz	r0, 801b3aa <__i2b+0x1a>
 801b39e:	4b05      	ldr	r3, [pc, #20]	@ (801b3b4 <__i2b+0x24>)
 801b3a0:	4805      	ldr	r0, [pc, #20]	@ (801b3b8 <__i2b+0x28>)
 801b3a2:	f240 1145 	movw	r1, #325	@ 0x145
 801b3a6:	f001 fae9 	bl	801c97c <__assert_func>
 801b3aa:	2301      	movs	r3, #1
 801b3ac:	6144      	str	r4, [r0, #20]
 801b3ae:	6103      	str	r3, [r0, #16]
 801b3b0:	bd10      	pop	{r4, pc}
 801b3b2:	bf00      	nop
 801b3b4:	0801f338 	.word	0x0801f338
 801b3b8:	0801f3a9 	.word	0x0801f3a9

0801b3bc <__multiply>:
 801b3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3c0:	4617      	mov	r7, r2
 801b3c2:	690a      	ldr	r2, [r1, #16]
 801b3c4:	693b      	ldr	r3, [r7, #16]
 801b3c6:	429a      	cmp	r2, r3
 801b3c8:	bfa8      	it	ge
 801b3ca:	463b      	movge	r3, r7
 801b3cc:	4689      	mov	r9, r1
 801b3ce:	bfa4      	itt	ge
 801b3d0:	460f      	movge	r7, r1
 801b3d2:	4699      	movge	r9, r3
 801b3d4:	693d      	ldr	r5, [r7, #16]
 801b3d6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b3da:	68bb      	ldr	r3, [r7, #8]
 801b3dc:	6879      	ldr	r1, [r7, #4]
 801b3de:	eb05 060a 	add.w	r6, r5, sl
 801b3e2:	42b3      	cmp	r3, r6
 801b3e4:	b085      	sub	sp, #20
 801b3e6:	bfb8      	it	lt
 801b3e8:	3101      	addlt	r1, #1
 801b3ea:	f7ff fe93 	bl	801b114 <_Balloc>
 801b3ee:	b930      	cbnz	r0, 801b3fe <__multiply+0x42>
 801b3f0:	4602      	mov	r2, r0
 801b3f2:	4b41      	ldr	r3, [pc, #260]	@ (801b4f8 <__multiply+0x13c>)
 801b3f4:	4841      	ldr	r0, [pc, #260]	@ (801b4fc <__multiply+0x140>)
 801b3f6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801b3fa:	f001 fabf 	bl	801c97c <__assert_func>
 801b3fe:	f100 0414 	add.w	r4, r0, #20
 801b402:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801b406:	4623      	mov	r3, r4
 801b408:	2200      	movs	r2, #0
 801b40a:	4573      	cmp	r3, lr
 801b40c:	d320      	bcc.n	801b450 <__multiply+0x94>
 801b40e:	f107 0814 	add.w	r8, r7, #20
 801b412:	f109 0114 	add.w	r1, r9, #20
 801b416:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801b41a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801b41e:	9302      	str	r3, [sp, #8]
 801b420:	1beb      	subs	r3, r5, r7
 801b422:	3b15      	subs	r3, #21
 801b424:	f023 0303 	bic.w	r3, r3, #3
 801b428:	3304      	adds	r3, #4
 801b42a:	3715      	adds	r7, #21
 801b42c:	42bd      	cmp	r5, r7
 801b42e:	bf38      	it	cc
 801b430:	2304      	movcc	r3, #4
 801b432:	9301      	str	r3, [sp, #4]
 801b434:	9b02      	ldr	r3, [sp, #8]
 801b436:	9103      	str	r1, [sp, #12]
 801b438:	428b      	cmp	r3, r1
 801b43a:	d80c      	bhi.n	801b456 <__multiply+0x9a>
 801b43c:	2e00      	cmp	r6, #0
 801b43e:	dd03      	ble.n	801b448 <__multiply+0x8c>
 801b440:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801b444:	2b00      	cmp	r3, #0
 801b446:	d055      	beq.n	801b4f4 <__multiply+0x138>
 801b448:	6106      	str	r6, [r0, #16]
 801b44a:	b005      	add	sp, #20
 801b44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b450:	f843 2b04 	str.w	r2, [r3], #4
 801b454:	e7d9      	b.n	801b40a <__multiply+0x4e>
 801b456:	f8b1 a000 	ldrh.w	sl, [r1]
 801b45a:	f1ba 0f00 	cmp.w	sl, #0
 801b45e:	d01f      	beq.n	801b4a0 <__multiply+0xe4>
 801b460:	46c4      	mov	ip, r8
 801b462:	46a1      	mov	r9, r4
 801b464:	2700      	movs	r7, #0
 801b466:	f85c 2b04 	ldr.w	r2, [ip], #4
 801b46a:	f8d9 3000 	ldr.w	r3, [r9]
 801b46e:	fa1f fb82 	uxth.w	fp, r2
 801b472:	b29b      	uxth	r3, r3
 801b474:	fb0a 330b 	mla	r3, sl, fp, r3
 801b478:	443b      	add	r3, r7
 801b47a:	f8d9 7000 	ldr.w	r7, [r9]
 801b47e:	0c12      	lsrs	r2, r2, #16
 801b480:	0c3f      	lsrs	r7, r7, #16
 801b482:	fb0a 7202 	mla	r2, sl, r2, r7
 801b486:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801b48a:	b29b      	uxth	r3, r3
 801b48c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b490:	4565      	cmp	r5, ip
 801b492:	f849 3b04 	str.w	r3, [r9], #4
 801b496:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801b49a:	d8e4      	bhi.n	801b466 <__multiply+0xaa>
 801b49c:	9b01      	ldr	r3, [sp, #4]
 801b49e:	50e7      	str	r7, [r4, r3]
 801b4a0:	9b03      	ldr	r3, [sp, #12]
 801b4a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801b4a6:	3104      	adds	r1, #4
 801b4a8:	f1b9 0f00 	cmp.w	r9, #0
 801b4ac:	d020      	beq.n	801b4f0 <__multiply+0x134>
 801b4ae:	6823      	ldr	r3, [r4, #0]
 801b4b0:	4647      	mov	r7, r8
 801b4b2:	46a4      	mov	ip, r4
 801b4b4:	f04f 0a00 	mov.w	sl, #0
 801b4b8:	f8b7 b000 	ldrh.w	fp, [r7]
 801b4bc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801b4c0:	fb09 220b 	mla	r2, r9, fp, r2
 801b4c4:	4452      	add	r2, sl
 801b4c6:	b29b      	uxth	r3, r3
 801b4c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b4cc:	f84c 3b04 	str.w	r3, [ip], #4
 801b4d0:	f857 3b04 	ldr.w	r3, [r7], #4
 801b4d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b4d8:	f8bc 3000 	ldrh.w	r3, [ip]
 801b4dc:	fb09 330a 	mla	r3, r9, sl, r3
 801b4e0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801b4e4:	42bd      	cmp	r5, r7
 801b4e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b4ea:	d8e5      	bhi.n	801b4b8 <__multiply+0xfc>
 801b4ec:	9a01      	ldr	r2, [sp, #4]
 801b4ee:	50a3      	str	r3, [r4, r2]
 801b4f0:	3404      	adds	r4, #4
 801b4f2:	e79f      	b.n	801b434 <__multiply+0x78>
 801b4f4:	3e01      	subs	r6, #1
 801b4f6:	e7a1      	b.n	801b43c <__multiply+0x80>
 801b4f8:	0801f338 	.word	0x0801f338
 801b4fc:	0801f3a9 	.word	0x0801f3a9

0801b500 <__pow5mult>:
 801b500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b504:	4615      	mov	r5, r2
 801b506:	f012 0203 	ands.w	r2, r2, #3
 801b50a:	4607      	mov	r7, r0
 801b50c:	460e      	mov	r6, r1
 801b50e:	d007      	beq.n	801b520 <__pow5mult+0x20>
 801b510:	4c25      	ldr	r4, [pc, #148]	@ (801b5a8 <__pow5mult+0xa8>)
 801b512:	3a01      	subs	r2, #1
 801b514:	2300      	movs	r3, #0
 801b516:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b51a:	f7ff fe5d 	bl	801b1d8 <__multadd>
 801b51e:	4606      	mov	r6, r0
 801b520:	10ad      	asrs	r5, r5, #2
 801b522:	d03d      	beq.n	801b5a0 <__pow5mult+0xa0>
 801b524:	69fc      	ldr	r4, [r7, #28]
 801b526:	b97c      	cbnz	r4, 801b548 <__pow5mult+0x48>
 801b528:	2010      	movs	r0, #16
 801b52a:	f7fc fd53 	bl	8017fd4 <malloc>
 801b52e:	4602      	mov	r2, r0
 801b530:	61f8      	str	r0, [r7, #28]
 801b532:	b928      	cbnz	r0, 801b540 <__pow5mult+0x40>
 801b534:	4b1d      	ldr	r3, [pc, #116]	@ (801b5ac <__pow5mult+0xac>)
 801b536:	481e      	ldr	r0, [pc, #120]	@ (801b5b0 <__pow5mult+0xb0>)
 801b538:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801b53c:	f001 fa1e 	bl	801c97c <__assert_func>
 801b540:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b544:	6004      	str	r4, [r0, #0]
 801b546:	60c4      	str	r4, [r0, #12]
 801b548:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801b54c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b550:	b94c      	cbnz	r4, 801b566 <__pow5mult+0x66>
 801b552:	f240 2171 	movw	r1, #625	@ 0x271
 801b556:	4638      	mov	r0, r7
 801b558:	f7ff ff1a 	bl	801b390 <__i2b>
 801b55c:	2300      	movs	r3, #0
 801b55e:	f8c8 0008 	str.w	r0, [r8, #8]
 801b562:	4604      	mov	r4, r0
 801b564:	6003      	str	r3, [r0, #0]
 801b566:	f04f 0900 	mov.w	r9, #0
 801b56a:	07eb      	lsls	r3, r5, #31
 801b56c:	d50a      	bpl.n	801b584 <__pow5mult+0x84>
 801b56e:	4631      	mov	r1, r6
 801b570:	4622      	mov	r2, r4
 801b572:	4638      	mov	r0, r7
 801b574:	f7ff ff22 	bl	801b3bc <__multiply>
 801b578:	4631      	mov	r1, r6
 801b57a:	4680      	mov	r8, r0
 801b57c:	4638      	mov	r0, r7
 801b57e:	f7ff fe09 	bl	801b194 <_Bfree>
 801b582:	4646      	mov	r6, r8
 801b584:	106d      	asrs	r5, r5, #1
 801b586:	d00b      	beq.n	801b5a0 <__pow5mult+0xa0>
 801b588:	6820      	ldr	r0, [r4, #0]
 801b58a:	b938      	cbnz	r0, 801b59c <__pow5mult+0x9c>
 801b58c:	4622      	mov	r2, r4
 801b58e:	4621      	mov	r1, r4
 801b590:	4638      	mov	r0, r7
 801b592:	f7ff ff13 	bl	801b3bc <__multiply>
 801b596:	6020      	str	r0, [r4, #0]
 801b598:	f8c0 9000 	str.w	r9, [r0]
 801b59c:	4604      	mov	r4, r0
 801b59e:	e7e4      	b.n	801b56a <__pow5mult+0x6a>
 801b5a0:	4630      	mov	r0, r6
 801b5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b5a6:	bf00      	nop
 801b5a8:	0801f5c4 	.word	0x0801f5c4
 801b5ac:	0801f2c9 	.word	0x0801f2c9
 801b5b0:	0801f3a9 	.word	0x0801f3a9

0801b5b4 <__lshift>:
 801b5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b5b8:	460c      	mov	r4, r1
 801b5ba:	6849      	ldr	r1, [r1, #4]
 801b5bc:	6923      	ldr	r3, [r4, #16]
 801b5be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b5c2:	68a3      	ldr	r3, [r4, #8]
 801b5c4:	4607      	mov	r7, r0
 801b5c6:	4691      	mov	r9, r2
 801b5c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b5cc:	f108 0601 	add.w	r6, r8, #1
 801b5d0:	42b3      	cmp	r3, r6
 801b5d2:	db0b      	blt.n	801b5ec <__lshift+0x38>
 801b5d4:	4638      	mov	r0, r7
 801b5d6:	f7ff fd9d 	bl	801b114 <_Balloc>
 801b5da:	4605      	mov	r5, r0
 801b5dc:	b948      	cbnz	r0, 801b5f2 <__lshift+0x3e>
 801b5de:	4602      	mov	r2, r0
 801b5e0:	4b28      	ldr	r3, [pc, #160]	@ (801b684 <__lshift+0xd0>)
 801b5e2:	4829      	ldr	r0, [pc, #164]	@ (801b688 <__lshift+0xd4>)
 801b5e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801b5e8:	f001 f9c8 	bl	801c97c <__assert_func>
 801b5ec:	3101      	adds	r1, #1
 801b5ee:	005b      	lsls	r3, r3, #1
 801b5f0:	e7ee      	b.n	801b5d0 <__lshift+0x1c>
 801b5f2:	2300      	movs	r3, #0
 801b5f4:	f100 0114 	add.w	r1, r0, #20
 801b5f8:	f100 0210 	add.w	r2, r0, #16
 801b5fc:	4618      	mov	r0, r3
 801b5fe:	4553      	cmp	r3, sl
 801b600:	db33      	blt.n	801b66a <__lshift+0xb6>
 801b602:	6920      	ldr	r0, [r4, #16]
 801b604:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b608:	f104 0314 	add.w	r3, r4, #20
 801b60c:	f019 091f 	ands.w	r9, r9, #31
 801b610:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b614:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b618:	d02b      	beq.n	801b672 <__lshift+0xbe>
 801b61a:	f1c9 0e20 	rsb	lr, r9, #32
 801b61e:	468a      	mov	sl, r1
 801b620:	2200      	movs	r2, #0
 801b622:	6818      	ldr	r0, [r3, #0]
 801b624:	fa00 f009 	lsl.w	r0, r0, r9
 801b628:	4310      	orrs	r0, r2
 801b62a:	f84a 0b04 	str.w	r0, [sl], #4
 801b62e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b632:	459c      	cmp	ip, r3
 801b634:	fa22 f20e 	lsr.w	r2, r2, lr
 801b638:	d8f3      	bhi.n	801b622 <__lshift+0x6e>
 801b63a:	ebac 0304 	sub.w	r3, ip, r4
 801b63e:	3b15      	subs	r3, #21
 801b640:	f023 0303 	bic.w	r3, r3, #3
 801b644:	3304      	adds	r3, #4
 801b646:	f104 0015 	add.w	r0, r4, #21
 801b64a:	4560      	cmp	r0, ip
 801b64c:	bf88      	it	hi
 801b64e:	2304      	movhi	r3, #4
 801b650:	50ca      	str	r2, [r1, r3]
 801b652:	b10a      	cbz	r2, 801b658 <__lshift+0xa4>
 801b654:	f108 0602 	add.w	r6, r8, #2
 801b658:	3e01      	subs	r6, #1
 801b65a:	4638      	mov	r0, r7
 801b65c:	612e      	str	r6, [r5, #16]
 801b65e:	4621      	mov	r1, r4
 801b660:	f7ff fd98 	bl	801b194 <_Bfree>
 801b664:	4628      	mov	r0, r5
 801b666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b66a:	f842 0f04 	str.w	r0, [r2, #4]!
 801b66e:	3301      	adds	r3, #1
 801b670:	e7c5      	b.n	801b5fe <__lshift+0x4a>
 801b672:	3904      	subs	r1, #4
 801b674:	f853 2b04 	ldr.w	r2, [r3], #4
 801b678:	f841 2f04 	str.w	r2, [r1, #4]!
 801b67c:	459c      	cmp	ip, r3
 801b67e:	d8f9      	bhi.n	801b674 <__lshift+0xc0>
 801b680:	e7ea      	b.n	801b658 <__lshift+0xa4>
 801b682:	bf00      	nop
 801b684:	0801f338 	.word	0x0801f338
 801b688:	0801f3a9 	.word	0x0801f3a9

0801b68c <__mcmp>:
 801b68c:	690a      	ldr	r2, [r1, #16]
 801b68e:	4603      	mov	r3, r0
 801b690:	6900      	ldr	r0, [r0, #16]
 801b692:	1a80      	subs	r0, r0, r2
 801b694:	b530      	push	{r4, r5, lr}
 801b696:	d10e      	bne.n	801b6b6 <__mcmp+0x2a>
 801b698:	3314      	adds	r3, #20
 801b69a:	3114      	adds	r1, #20
 801b69c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801b6a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801b6a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801b6a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801b6ac:	4295      	cmp	r5, r2
 801b6ae:	d003      	beq.n	801b6b8 <__mcmp+0x2c>
 801b6b0:	d205      	bcs.n	801b6be <__mcmp+0x32>
 801b6b2:	f04f 30ff 	mov.w	r0, #4294967295
 801b6b6:	bd30      	pop	{r4, r5, pc}
 801b6b8:	42a3      	cmp	r3, r4
 801b6ba:	d3f3      	bcc.n	801b6a4 <__mcmp+0x18>
 801b6bc:	e7fb      	b.n	801b6b6 <__mcmp+0x2a>
 801b6be:	2001      	movs	r0, #1
 801b6c0:	e7f9      	b.n	801b6b6 <__mcmp+0x2a>
	...

0801b6c4 <__mdiff>:
 801b6c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6c8:	4689      	mov	r9, r1
 801b6ca:	4606      	mov	r6, r0
 801b6cc:	4611      	mov	r1, r2
 801b6ce:	4648      	mov	r0, r9
 801b6d0:	4614      	mov	r4, r2
 801b6d2:	f7ff ffdb 	bl	801b68c <__mcmp>
 801b6d6:	1e05      	subs	r5, r0, #0
 801b6d8:	d112      	bne.n	801b700 <__mdiff+0x3c>
 801b6da:	4629      	mov	r1, r5
 801b6dc:	4630      	mov	r0, r6
 801b6de:	f7ff fd19 	bl	801b114 <_Balloc>
 801b6e2:	4602      	mov	r2, r0
 801b6e4:	b928      	cbnz	r0, 801b6f2 <__mdiff+0x2e>
 801b6e6:	4b3f      	ldr	r3, [pc, #252]	@ (801b7e4 <__mdiff+0x120>)
 801b6e8:	f240 2137 	movw	r1, #567	@ 0x237
 801b6ec:	483e      	ldr	r0, [pc, #248]	@ (801b7e8 <__mdiff+0x124>)
 801b6ee:	f001 f945 	bl	801c97c <__assert_func>
 801b6f2:	2301      	movs	r3, #1
 801b6f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b6f8:	4610      	mov	r0, r2
 801b6fa:	b003      	add	sp, #12
 801b6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b700:	bfbc      	itt	lt
 801b702:	464b      	movlt	r3, r9
 801b704:	46a1      	movlt	r9, r4
 801b706:	4630      	mov	r0, r6
 801b708:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801b70c:	bfba      	itte	lt
 801b70e:	461c      	movlt	r4, r3
 801b710:	2501      	movlt	r5, #1
 801b712:	2500      	movge	r5, #0
 801b714:	f7ff fcfe 	bl	801b114 <_Balloc>
 801b718:	4602      	mov	r2, r0
 801b71a:	b918      	cbnz	r0, 801b724 <__mdiff+0x60>
 801b71c:	4b31      	ldr	r3, [pc, #196]	@ (801b7e4 <__mdiff+0x120>)
 801b71e:	f240 2145 	movw	r1, #581	@ 0x245
 801b722:	e7e3      	b.n	801b6ec <__mdiff+0x28>
 801b724:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801b728:	6926      	ldr	r6, [r4, #16]
 801b72a:	60c5      	str	r5, [r0, #12]
 801b72c:	f109 0310 	add.w	r3, r9, #16
 801b730:	f109 0514 	add.w	r5, r9, #20
 801b734:	f104 0e14 	add.w	lr, r4, #20
 801b738:	f100 0b14 	add.w	fp, r0, #20
 801b73c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801b740:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801b744:	9301      	str	r3, [sp, #4]
 801b746:	46d9      	mov	r9, fp
 801b748:	f04f 0c00 	mov.w	ip, #0
 801b74c:	9b01      	ldr	r3, [sp, #4]
 801b74e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801b752:	f853 af04 	ldr.w	sl, [r3, #4]!
 801b756:	9301      	str	r3, [sp, #4]
 801b758:	fa1f f38a 	uxth.w	r3, sl
 801b75c:	4619      	mov	r1, r3
 801b75e:	b283      	uxth	r3, r0
 801b760:	1acb      	subs	r3, r1, r3
 801b762:	0c00      	lsrs	r0, r0, #16
 801b764:	4463      	add	r3, ip
 801b766:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801b76a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801b76e:	b29b      	uxth	r3, r3
 801b770:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801b774:	4576      	cmp	r6, lr
 801b776:	f849 3b04 	str.w	r3, [r9], #4
 801b77a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b77e:	d8e5      	bhi.n	801b74c <__mdiff+0x88>
 801b780:	1b33      	subs	r3, r6, r4
 801b782:	3b15      	subs	r3, #21
 801b784:	f023 0303 	bic.w	r3, r3, #3
 801b788:	3415      	adds	r4, #21
 801b78a:	3304      	adds	r3, #4
 801b78c:	42a6      	cmp	r6, r4
 801b78e:	bf38      	it	cc
 801b790:	2304      	movcc	r3, #4
 801b792:	441d      	add	r5, r3
 801b794:	445b      	add	r3, fp
 801b796:	461e      	mov	r6, r3
 801b798:	462c      	mov	r4, r5
 801b79a:	4544      	cmp	r4, r8
 801b79c:	d30e      	bcc.n	801b7bc <__mdiff+0xf8>
 801b79e:	f108 0103 	add.w	r1, r8, #3
 801b7a2:	1b49      	subs	r1, r1, r5
 801b7a4:	f021 0103 	bic.w	r1, r1, #3
 801b7a8:	3d03      	subs	r5, #3
 801b7aa:	45a8      	cmp	r8, r5
 801b7ac:	bf38      	it	cc
 801b7ae:	2100      	movcc	r1, #0
 801b7b0:	440b      	add	r3, r1
 801b7b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b7b6:	b191      	cbz	r1, 801b7de <__mdiff+0x11a>
 801b7b8:	6117      	str	r7, [r2, #16]
 801b7ba:	e79d      	b.n	801b6f8 <__mdiff+0x34>
 801b7bc:	f854 1b04 	ldr.w	r1, [r4], #4
 801b7c0:	46e6      	mov	lr, ip
 801b7c2:	0c08      	lsrs	r0, r1, #16
 801b7c4:	fa1c fc81 	uxtah	ip, ip, r1
 801b7c8:	4471      	add	r1, lr
 801b7ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801b7ce:	b289      	uxth	r1, r1
 801b7d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801b7d4:	f846 1b04 	str.w	r1, [r6], #4
 801b7d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b7dc:	e7dd      	b.n	801b79a <__mdiff+0xd6>
 801b7de:	3f01      	subs	r7, #1
 801b7e0:	e7e7      	b.n	801b7b2 <__mdiff+0xee>
 801b7e2:	bf00      	nop
 801b7e4:	0801f338 	.word	0x0801f338
 801b7e8:	0801f3a9 	.word	0x0801f3a9

0801b7ec <__ulp>:
 801b7ec:	b082      	sub	sp, #8
 801b7ee:	ed8d 0b00 	vstr	d0, [sp]
 801b7f2:	9a01      	ldr	r2, [sp, #4]
 801b7f4:	4b0f      	ldr	r3, [pc, #60]	@ (801b834 <__ulp+0x48>)
 801b7f6:	4013      	ands	r3, r2
 801b7f8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	dc08      	bgt.n	801b812 <__ulp+0x26>
 801b800:	425b      	negs	r3, r3
 801b802:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801b806:	ea4f 5223 	mov.w	r2, r3, asr #20
 801b80a:	da04      	bge.n	801b816 <__ulp+0x2a>
 801b80c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801b810:	4113      	asrs	r3, r2
 801b812:	2200      	movs	r2, #0
 801b814:	e008      	b.n	801b828 <__ulp+0x3c>
 801b816:	f1a2 0314 	sub.w	r3, r2, #20
 801b81a:	2b1e      	cmp	r3, #30
 801b81c:	bfda      	itte	le
 801b81e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801b822:	40da      	lsrle	r2, r3
 801b824:	2201      	movgt	r2, #1
 801b826:	2300      	movs	r3, #0
 801b828:	4619      	mov	r1, r3
 801b82a:	4610      	mov	r0, r2
 801b82c:	ec41 0b10 	vmov	d0, r0, r1
 801b830:	b002      	add	sp, #8
 801b832:	4770      	bx	lr
 801b834:	7ff00000 	.word	0x7ff00000

0801b838 <__b2d>:
 801b838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b83c:	6906      	ldr	r6, [r0, #16]
 801b83e:	f100 0814 	add.w	r8, r0, #20
 801b842:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801b846:	1f37      	subs	r7, r6, #4
 801b848:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801b84c:	4610      	mov	r0, r2
 801b84e:	f7ff fd53 	bl	801b2f8 <__hi0bits>
 801b852:	f1c0 0320 	rsb	r3, r0, #32
 801b856:	280a      	cmp	r0, #10
 801b858:	600b      	str	r3, [r1, #0]
 801b85a:	491b      	ldr	r1, [pc, #108]	@ (801b8c8 <__b2d+0x90>)
 801b85c:	dc15      	bgt.n	801b88a <__b2d+0x52>
 801b85e:	f1c0 0c0b 	rsb	ip, r0, #11
 801b862:	fa22 f30c 	lsr.w	r3, r2, ip
 801b866:	45b8      	cmp	r8, r7
 801b868:	ea43 0501 	orr.w	r5, r3, r1
 801b86c:	bf34      	ite	cc
 801b86e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801b872:	2300      	movcs	r3, #0
 801b874:	3015      	adds	r0, #21
 801b876:	fa02 f000 	lsl.w	r0, r2, r0
 801b87a:	fa23 f30c 	lsr.w	r3, r3, ip
 801b87e:	4303      	orrs	r3, r0
 801b880:	461c      	mov	r4, r3
 801b882:	ec45 4b10 	vmov	d0, r4, r5
 801b886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b88a:	45b8      	cmp	r8, r7
 801b88c:	bf3a      	itte	cc
 801b88e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801b892:	f1a6 0708 	subcc.w	r7, r6, #8
 801b896:	2300      	movcs	r3, #0
 801b898:	380b      	subs	r0, #11
 801b89a:	d012      	beq.n	801b8c2 <__b2d+0x8a>
 801b89c:	f1c0 0120 	rsb	r1, r0, #32
 801b8a0:	fa23 f401 	lsr.w	r4, r3, r1
 801b8a4:	4082      	lsls	r2, r0
 801b8a6:	4322      	orrs	r2, r4
 801b8a8:	4547      	cmp	r7, r8
 801b8aa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801b8ae:	bf8c      	ite	hi
 801b8b0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801b8b4:	2200      	movls	r2, #0
 801b8b6:	4083      	lsls	r3, r0
 801b8b8:	40ca      	lsrs	r2, r1
 801b8ba:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801b8be:	4313      	orrs	r3, r2
 801b8c0:	e7de      	b.n	801b880 <__b2d+0x48>
 801b8c2:	ea42 0501 	orr.w	r5, r2, r1
 801b8c6:	e7db      	b.n	801b880 <__b2d+0x48>
 801b8c8:	3ff00000 	.word	0x3ff00000

0801b8cc <__d2b>:
 801b8cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b8d0:	460f      	mov	r7, r1
 801b8d2:	2101      	movs	r1, #1
 801b8d4:	ec59 8b10 	vmov	r8, r9, d0
 801b8d8:	4616      	mov	r6, r2
 801b8da:	f7ff fc1b 	bl	801b114 <_Balloc>
 801b8de:	4604      	mov	r4, r0
 801b8e0:	b930      	cbnz	r0, 801b8f0 <__d2b+0x24>
 801b8e2:	4602      	mov	r2, r0
 801b8e4:	4b23      	ldr	r3, [pc, #140]	@ (801b974 <__d2b+0xa8>)
 801b8e6:	4824      	ldr	r0, [pc, #144]	@ (801b978 <__d2b+0xac>)
 801b8e8:	f240 310f 	movw	r1, #783	@ 0x30f
 801b8ec:	f001 f846 	bl	801c97c <__assert_func>
 801b8f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b8f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b8f8:	b10d      	cbz	r5, 801b8fe <__d2b+0x32>
 801b8fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801b8fe:	9301      	str	r3, [sp, #4]
 801b900:	f1b8 0300 	subs.w	r3, r8, #0
 801b904:	d023      	beq.n	801b94e <__d2b+0x82>
 801b906:	4668      	mov	r0, sp
 801b908:	9300      	str	r3, [sp, #0]
 801b90a:	f7ff fd14 	bl	801b336 <__lo0bits>
 801b90e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b912:	b1d0      	cbz	r0, 801b94a <__d2b+0x7e>
 801b914:	f1c0 0320 	rsb	r3, r0, #32
 801b918:	fa02 f303 	lsl.w	r3, r2, r3
 801b91c:	430b      	orrs	r3, r1
 801b91e:	40c2      	lsrs	r2, r0
 801b920:	6163      	str	r3, [r4, #20]
 801b922:	9201      	str	r2, [sp, #4]
 801b924:	9b01      	ldr	r3, [sp, #4]
 801b926:	61a3      	str	r3, [r4, #24]
 801b928:	2b00      	cmp	r3, #0
 801b92a:	bf0c      	ite	eq
 801b92c:	2201      	moveq	r2, #1
 801b92e:	2202      	movne	r2, #2
 801b930:	6122      	str	r2, [r4, #16]
 801b932:	b1a5      	cbz	r5, 801b95e <__d2b+0x92>
 801b934:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801b938:	4405      	add	r5, r0
 801b93a:	603d      	str	r5, [r7, #0]
 801b93c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801b940:	6030      	str	r0, [r6, #0]
 801b942:	4620      	mov	r0, r4
 801b944:	b003      	add	sp, #12
 801b946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b94a:	6161      	str	r1, [r4, #20]
 801b94c:	e7ea      	b.n	801b924 <__d2b+0x58>
 801b94e:	a801      	add	r0, sp, #4
 801b950:	f7ff fcf1 	bl	801b336 <__lo0bits>
 801b954:	9b01      	ldr	r3, [sp, #4]
 801b956:	6163      	str	r3, [r4, #20]
 801b958:	3020      	adds	r0, #32
 801b95a:	2201      	movs	r2, #1
 801b95c:	e7e8      	b.n	801b930 <__d2b+0x64>
 801b95e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b962:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801b966:	6038      	str	r0, [r7, #0]
 801b968:	6918      	ldr	r0, [r3, #16]
 801b96a:	f7ff fcc5 	bl	801b2f8 <__hi0bits>
 801b96e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b972:	e7e5      	b.n	801b940 <__d2b+0x74>
 801b974:	0801f338 	.word	0x0801f338
 801b978:	0801f3a9 	.word	0x0801f3a9

0801b97c <__ratio>:
 801b97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b980:	b085      	sub	sp, #20
 801b982:	e9cd 1000 	strd	r1, r0, [sp]
 801b986:	a902      	add	r1, sp, #8
 801b988:	f7ff ff56 	bl	801b838 <__b2d>
 801b98c:	9800      	ldr	r0, [sp, #0]
 801b98e:	a903      	add	r1, sp, #12
 801b990:	ec55 4b10 	vmov	r4, r5, d0
 801b994:	f7ff ff50 	bl	801b838 <__b2d>
 801b998:	9b01      	ldr	r3, [sp, #4]
 801b99a:	6919      	ldr	r1, [r3, #16]
 801b99c:	9b00      	ldr	r3, [sp, #0]
 801b99e:	691b      	ldr	r3, [r3, #16]
 801b9a0:	1ac9      	subs	r1, r1, r3
 801b9a2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801b9a6:	1a9b      	subs	r3, r3, r2
 801b9a8:	ec5b ab10 	vmov	sl, fp, d0
 801b9ac:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	bfce      	itee	gt
 801b9b4:	462a      	movgt	r2, r5
 801b9b6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801b9ba:	465a      	movle	r2, fp
 801b9bc:	462f      	mov	r7, r5
 801b9be:	46d9      	mov	r9, fp
 801b9c0:	bfcc      	ite	gt
 801b9c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801b9c6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801b9ca:	464b      	mov	r3, r9
 801b9cc:	4652      	mov	r2, sl
 801b9ce:	4620      	mov	r0, r4
 801b9d0:	4639      	mov	r1, r7
 801b9d2:	f7ec ff6b 	bl	80088ac <__aeabi_ddiv>
 801b9d6:	ec41 0b10 	vmov	d0, r0, r1
 801b9da:	b005      	add	sp, #20
 801b9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b9e0 <__copybits>:
 801b9e0:	3901      	subs	r1, #1
 801b9e2:	b570      	push	{r4, r5, r6, lr}
 801b9e4:	1149      	asrs	r1, r1, #5
 801b9e6:	6914      	ldr	r4, [r2, #16]
 801b9e8:	3101      	adds	r1, #1
 801b9ea:	f102 0314 	add.w	r3, r2, #20
 801b9ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b9f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b9f6:	1f05      	subs	r5, r0, #4
 801b9f8:	42a3      	cmp	r3, r4
 801b9fa:	d30c      	bcc.n	801ba16 <__copybits+0x36>
 801b9fc:	1aa3      	subs	r3, r4, r2
 801b9fe:	3b11      	subs	r3, #17
 801ba00:	f023 0303 	bic.w	r3, r3, #3
 801ba04:	3211      	adds	r2, #17
 801ba06:	42a2      	cmp	r2, r4
 801ba08:	bf88      	it	hi
 801ba0a:	2300      	movhi	r3, #0
 801ba0c:	4418      	add	r0, r3
 801ba0e:	2300      	movs	r3, #0
 801ba10:	4288      	cmp	r0, r1
 801ba12:	d305      	bcc.n	801ba20 <__copybits+0x40>
 801ba14:	bd70      	pop	{r4, r5, r6, pc}
 801ba16:	f853 6b04 	ldr.w	r6, [r3], #4
 801ba1a:	f845 6f04 	str.w	r6, [r5, #4]!
 801ba1e:	e7eb      	b.n	801b9f8 <__copybits+0x18>
 801ba20:	f840 3b04 	str.w	r3, [r0], #4
 801ba24:	e7f4      	b.n	801ba10 <__copybits+0x30>

0801ba26 <__any_on>:
 801ba26:	f100 0214 	add.w	r2, r0, #20
 801ba2a:	6900      	ldr	r0, [r0, #16]
 801ba2c:	114b      	asrs	r3, r1, #5
 801ba2e:	4298      	cmp	r0, r3
 801ba30:	b510      	push	{r4, lr}
 801ba32:	db11      	blt.n	801ba58 <__any_on+0x32>
 801ba34:	dd0a      	ble.n	801ba4c <__any_on+0x26>
 801ba36:	f011 011f 	ands.w	r1, r1, #31
 801ba3a:	d007      	beq.n	801ba4c <__any_on+0x26>
 801ba3c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ba40:	fa24 f001 	lsr.w	r0, r4, r1
 801ba44:	fa00 f101 	lsl.w	r1, r0, r1
 801ba48:	428c      	cmp	r4, r1
 801ba4a:	d10b      	bne.n	801ba64 <__any_on+0x3e>
 801ba4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ba50:	4293      	cmp	r3, r2
 801ba52:	d803      	bhi.n	801ba5c <__any_on+0x36>
 801ba54:	2000      	movs	r0, #0
 801ba56:	bd10      	pop	{r4, pc}
 801ba58:	4603      	mov	r3, r0
 801ba5a:	e7f7      	b.n	801ba4c <__any_on+0x26>
 801ba5c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ba60:	2900      	cmp	r1, #0
 801ba62:	d0f5      	beq.n	801ba50 <__any_on+0x2a>
 801ba64:	2001      	movs	r0, #1
 801ba66:	e7f6      	b.n	801ba56 <__any_on+0x30>

0801ba68 <_malloc_usable_size_r>:
 801ba68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ba6c:	1f18      	subs	r0, r3, #4
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	bfbc      	itt	lt
 801ba72:	580b      	ldrlt	r3, [r1, r0]
 801ba74:	18c0      	addlt	r0, r0, r3
 801ba76:	4770      	bx	lr

0801ba78 <__ascii_wctomb>:
 801ba78:	4603      	mov	r3, r0
 801ba7a:	4608      	mov	r0, r1
 801ba7c:	b141      	cbz	r1, 801ba90 <__ascii_wctomb+0x18>
 801ba7e:	2aff      	cmp	r2, #255	@ 0xff
 801ba80:	d904      	bls.n	801ba8c <__ascii_wctomb+0x14>
 801ba82:	228a      	movs	r2, #138	@ 0x8a
 801ba84:	601a      	str	r2, [r3, #0]
 801ba86:	f04f 30ff 	mov.w	r0, #4294967295
 801ba8a:	4770      	bx	lr
 801ba8c:	700a      	strb	r2, [r1, #0]
 801ba8e:	2001      	movs	r0, #1
 801ba90:	4770      	bx	lr

0801ba92 <__ssputs_r>:
 801ba92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba96:	688e      	ldr	r6, [r1, #8]
 801ba98:	461f      	mov	r7, r3
 801ba9a:	42be      	cmp	r6, r7
 801ba9c:	680b      	ldr	r3, [r1, #0]
 801ba9e:	4682      	mov	sl, r0
 801baa0:	460c      	mov	r4, r1
 801baa2:	4690      	mov	r8, r2
 801baa4:	d82d      	bhi.n	801bb02 <__ssputs_r+0x70>
 801baa6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801baaa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801baae:	d026      	beq.n	801bafe <__ssputs_r+0x6c>
 801bab0:	6965      	ldr	r5, [r4, #20]
 801bab2:	6909      	ldr	r1, [r1, #16]
 801bab4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bab8:	eba3 0901 	sub.w	r9, r3, r1
 801babc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bac0:	1c7b      	adds	r3, r7, #1
 801bac2:	444b      	add	r3, r9
 801bac4:	106d      	asrs	r5, r5, #1
 801bac6:	429d      	cmp	r5, r3
 801bac8:	bf38      	it	cc
 801baca:	461d      	movcc	r5, r3
 801bacc:	0553      	lsls	r3, r2, #21
 801bace:	d527      	bpl.n	801bb20 <__ssputs_r+0x8e>
 801bad0:	4629      	mov	r1, r5
 801bad2:	f7fc fab1 	bl	8018038 <_malloc_r>
 801bad6:	4606      	mov	r6, r0
 801bad8:	b360      	cbz	r0, 801bb34 <__ssputs_r+0xa2>
 801bada:	6921      	ldr	r1, [r4, #16]
 801badc:	464a      	mov	r2, r9
 801bade:	f7fe f912 	bl	8019d06 <memcpy>
 801bae2:	89a3      	ldrh	r3, [r4, #12]
 801bae4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801bae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801baec:	81a3      	strh	r3, [r4, #12]
 801baee:	6126      	str	r6, [r4, #16]
 801baf0:	6165      	str	r5, [r4, #20]
 801baf2:	444e      	add	r6, r9
 801baf4:	eba5 0509 	sub.w	r5, r5, r9
 801baf8:	6026      	str	r6, [r4, #0]
 801bafa:	60a5      	str	r5, [r4, #8]
 801bafc:	463e      	mov	r6, r7
 801bafe:	42be      	cmp	r6, r7
 801bb00:	d900      	bls.n	801bb04 <__ssputs_r+0x72>
 801bb02:	463e      	mov	r6, r7
 801bb04:	6820      	ldr	r0, [r4, #0]
 801bb06:	4632      	mov	r2, r6
 801bb08:	4641      	mov	r1, r8
 801bb0a:	f000 fefa 	bl	801c902 <memmove>
 801bb0e:	68a3      	ldr	r3, [r4, #8]
 801bb10:	1b9b      	subs	r3, r3, r6
 801bb12:	60a3      	str	r3, [r4, #8]
 801bb14:	6823      	ldr	r3, [r4, #0]
 801bb16:	4433      	add	r3, r6
 801bb18:	6023      	str	r3, [r4, #0]
 801bb1a:	2000      	movs	r0, #0
 801bb1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb20:	462a      	mov	r2, r5
 801bb22:	f7fc fb1d 	bl	8018160 <_realloc_r>
 801bb26:	4606      	mov	r6, r0
 801bb28:	2800      	cmp	r0, #0
 801bb2a:	d1e0      	bne.n	801baee <__ssputs_r+0x5c>
 801bb2c:	6921      	ldr	r1, [r4, #16]
 801bb2e:	4650      	mov	r0, sl
 801bb30:	f7fe ff5a 	bl	801a9e8 <_free_r>
 801bb34:	230c      	movs	r3, #12
 801bb36:	f8ca 3000 	str.w	r3, [sl]
 801bb3a:	89a3      	ldrh	r3, [r4, #12]
 801bb3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bb40:	81a3      	strh	r3, [r4, #12]
 801bb42:	f04f 30ff 	mov.w	r0, #4294967295
 801bb46:	e7e9      	b.n	801bb1c <__ssputs_r+0x8a>

0801bb48 <_svfiprintf_r>:
 801bb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb4c:	4698      	mov	r8, r3
 801bb4e:	898b      	ldrh	r3, [r1, #12]
 801bb50:	061b      	lsls	r3, r3, #24
 801bb52:	b09d      	sub	sp, #116	@ 0x74
 801bb54:	4607      	mov	r7, r0
 801bb56:	460d      	mov	r5, r1
 801bb58:	4614      	mov	r4, r2
 801bb5a:	d510      	bpl.n	801bb7e <_svfiprintf_r+0x36>
 801bb5c:	690b      	ldr	r3, [r1, #16]
 801bb5e:	b973      	cbnz	r3, 801bb7e <_svfiprintf_r+0x36>
 801bb60:	2140      	movs	r1, #64	@ 0x40
 801bb62:	f7fc fa69 	bl	8018038 <_malloc_r>
 801bb66:	6028      	str	r0, [r5, #0]
 801bb68:	6128      	str	r0, [r5, #16]
 801bb6a:	b930      	cbnz	r0, 801bb7a <_svfiprintf_r+0x32>
 801bb6c:	230c      	movs	r3, #12
 801bb6e:	603b      	str	r3, [r7, #0]
 801bb70:	f04f 30ff 	mov.w	r0, #4294967295
 801bb74:	b01d      	add	sp, #116	@ 0x74
 801bb76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb7a:	2340      	movs	r3, #64	@ 0x40
 801bb7c:	616b      	str	r3, [r5, #20]
 801bb7e:	2300      	movs	r3, #0
 801bb80:	9309      	str	r3, [sp, #36]	@ 0x24
 801bb82:	2320      	movs	r3, #32
 801bb84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bb88:	f8cd 800c 	str.w	r8, [sp, #12]
 801bb8c:	2330      	movs	r3, #48	@ 0x30
 801bb8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801bd2c <_svfiprintf_r+0x1e4>
 801bb92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bb96:	f04f 0901 	mov.w	r9, #1
 801bb9a:	4623      	mov	r3, r4
 801bb9c:	469a      	mov	sl, r3
 801bb9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bba2:	b10a      	cbz	r2, 801bba8 <_svfiprintf_r+0x60>
 801bba4:	2a25      	cmp	r2, #37	@ 0x25
 801bba6:	d1f9      	bne.n	801bb9c <_svfiprintf_r+0x54>
 801bba8:	ebba 0b04 	subs.w	fp, sl, r4
 801bbac:	d00b      	beq.n	801bbc6 <_svfiprintf_r+0x7e>
 801bbae:	465b      	mov	r3, fp
 801bbb0:	4622      	mov	r2, r4
 801bbb2:	4629      	mov	r1, r5
 801bbb4:	4638      	mov	r0, r7
 801bbb6:	f7ff ff6c 	bl	801ba92 <__ssputs_r>
 801bbba:	3001      	adds	r0, #1
 801bbbc:	f000 80a7 	beq.w	801bd0e <_svfiprintf_r+0x1c6>
 801bbc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bbc2:	445a      	add	r2, fp
 801bbc4:	9209      	str	r2, [sp, #36]	@ 0x24
 801bbc6:	f89a 3000 	ldrb.w	r3, [sl]
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	f000 809f 	beq.w	801bd0e <_svfiprintf_r+0x1c6>
 801bbd0:	2300      	movs	r3, #0
 801bbd2:	f04f 32ff 	mov.w	r2, #4294967295
 801bbd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bbda:	f10a 0a01 	add.w	sl, sl, #1
 801bbde:	9304      	str	r3, [sp, #16]
 801bbe0:	9307      	str	r3, [sp, #28]
 801bbe2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bbe6:	931a      	str	r3, [sp, #104]	@ 0x68
 801bbe8:	4654      	mov	r4, sl
 801bbea:	2205      	movs	r2, #5
 801bbec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bbf0:	484e      	ldr	r0, [pc, #312]	@ (801bd2c <_svfiprintf_r+0x1e4>)
 801bbf2:	f7ec fb1d 	bl	8008230 <memchr>
 801bbf6:	9a04      	ldr	r2, [sp, #16]
 801bbf8:	b9d8      	cbnz	r0, 801bc32 <_svfiprintf_r+0xea>
 801bbfa:	06d0      	lsls	r0, r2, #27
 801bbfc:	bf44      	itt	mi
 801bbfe:	2320      	movmi	r3, #32
 801bc00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bc04:	0711      	lsls	r1, r2, #28
 801bc06:	bf44      	itt	mi
 801bc08:	232b      	movmi	r3, #43	@ 0x2b
 801bc0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bc0e:	f89a 3000 	ldrb.w	r3, [sl]
 801bc12:	2b2a      	cmp	r3, #42	@ 0x2a
 801bc14:	d015      	beq.n	801bc42 <_svfiprintf_r+0xfa>
 801bc16:	9a07      	ldr	r2, [sp, #28]
 801bc18:	4654      	mov	r4, sl
 801bc1a:	2000      	movs	r0, #0
 801bc1c:	f04f 0c0a 	mov.w	ip, #10
 801bc20:	4621      	mov	r1, r4
 801bc22:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bc26:	3b30      	subs	r3, #48	@ 0x30
 801bc28:	2b09      	cmp	r3, #9
 801bc2a:	d94b      	bls.n	801bcc4 <_svfiprintf_r+0x17c>
 801bc2c:	b1b0      	cbz	r0, 801bc5c <_svfiprintf_r+0x114>
 801bc2e:	9207      	str	r2, [sp, #28]
 801bc30:	e014      	b.n	801bc5c <_svfiprintf_r+0x114>
 801bc32:	eba0 0308 	sub.w	r3, r0, r8
 801bc36:	fa09 f303 	lsl.w	r3, r9, r3
 801bc3a:	4313      	orrs	r3, r2
 801bc3c:	9304      	str	r3, [sp, #16]
 801bc3e:	46a2      	mov	sl, r4
 801bc40:	e7d2      	b.n	801bbe8 <_svfiprintf_r+0xa0>
 801bc42:	9b03      	ldr	r3, [sp, #12]
 801bc44:	1d19      	adds	r1, r3, #4
 801bc46:	681b      	ldr	r3, [r3, #0]
 801bc48:	9103      	str	r1, [sp, #12]
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	bfbb      	ittet	lt
 801bc4e:	425b      	neglt	r3, r3
 801bc50:	f042 0202 	orrlt.w	r2, r2, #2
 801bc54:	9307      	strge	r3, [sp, #28]
 801bc56:	9307      	strlt	r3, [sp, #28]
 801bc58:	bfb8      	it	lt
 801bc5a:	9204      	strlt	r2, [sp, #16]
 801bc5c:	7823      	ldrb	r3, [r4, #0]
 801bc5e:	2b2e      	cmp	r3, #46	@ 0x2e
 801bc60:	d10a      	bne.n	801bc78 <_svfiprintf_r+0x130>
 801bc62:	7863      	ldrb	r3, [r4, #1]
 801bc64:	2b2a      	cmp	r3, #42	@ 0x2a
 801bc66:	d132      	bne.n	801bcce <_svfiprintf_r+0x186>
 801bc68:	9b03      	ldr	r3, [sp, #12]
 801bc6a:	1d1a      	adds	r2, r3, #4
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	9203      	str	r2, [sp, #12]
 801bc70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bc74:	3402      	adds	r4, #2
 801bc76:	9305      	str	r3, [sp, #20]
 801bc78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801bd3c <_svfiprintf_r+0x1f4>
 801bc7c:	7821      	ldrb	r1, [r4, #0]
 801bc7e:	2203      	movs	r2, #3
 801bc80:	4650      	mov	r0, sl
 801bc82:	f7ec fad5 	bl	8008230 <memchr>
 801bc86:	b138      	cbz	r0, 801bc98 <_svfiprintf_r+0x150>
 801bc88:	9b04      	ldr	r3, [sp, #16]
 801bc8a:	eba0 000a 	sub.w	r0, r0, sl
 801bc8e:	2240      	movs	r2, #64	@ 0x40
 801bc90:	4082      	lsls	r2, r0
 801bc92:	4313      	orrs	r3, r2
 801bc94:	3401      	adds	r4, #1
 801bc96:	9304      	str	r3, [sp, #16]
 801bc98:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc9c:	4824      	ldr	r0, [pc, #144]	@ (801bd30 <_svfiprintf_r+0x1e8>)
 801bc9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bca2:	2206      	movs	r2, #6
 801bca4:	f7ec fac4 	bl	8008230 <memchr>
 801bca8:	2800      	cmp	r0, #0
 801bcaa:	d036      	beq.n	801bd1a <_svfiprintf_r+0x1d2>
 801bcac:	4b21      	ldr	r3, [pc, #132]	@ (801bd34 <_svfiprintf_r+0x1ec>)
 801bcae:	bb1b      	cbnz	r3, 801bcf8 <_svfiprintf_r+0x1b0>
 801bcb0:	9b03      	ldr	r3, [sp, #12]
 801bcb2:	3307      	adds	r3, #7
 801bcb4:	f023 0307 	bic.w	r3, r3, #7
 801bcb8:	3308      	adds	r3, #8
 801bcba:	9303      	str	r3, [sp, #12]
 801bcbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bcbe:	4433      	add	r3, r6
 801bcc0:	9309      	str	r3, [sp, #36]	@ 0x24
 801bcc2:	e76a      	b.n	801bb9a <_svfiprintf_r+0x52>
 801bcc4:	fb0c 3202 	mla	r2, ip, r2, r3
 801bcc8:	460c      	mov	r4, r1
 801bcca:	2001      	movs	r0, #1
 801bccc:	e7a8      	b.n	801bc20 <_svfiprintf_r+0xd8>
 801bcce:	2300      	movs	r3, #0
 801bcd0:	3401      	adds	r4, #1
 801bcd2:	9305      	str	r3, [sp, #20]
 801bcd4:	4619      	mov	r1, r3
 801bcd6:	f04f 0c0a 	mov.w	ip, #10
 801bcda:	4620      	mov	r0, r4
 801bcdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bce0:	3a30      	subs	r2, #48	@ 0x30
 801bce2:	2a09      	cmp	r2, #9
 801bce4:	d903      	bls.n	801bcee <_svfiprintf_r+0x1a6>
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d0c6      	beq.n	801bc78 <_svfiprintf_r+0x130>
 801bcea:	9105      	str	r1, [sp, #20]
 801bcec:	e7c4      	b.n	801bc78 <_svfiprintf_r+0x130>
 801bcee:	fb0c 2101 	mla	r1, ip, r1, r2
 801bcf2:	4604      	mov	r4, r0
 801bcf4:	2301      	movs	r3, #1
 801bcf6:	e7f0      	b.n	801bcda <_svfiprintf_r+0x192>
 801bcf8:	ab03      	add	r3, sp, #12
 801bcfa:	9300      	str	r3, [sp, #0]
 801bcfc:	462a      	mov	r2, r5
 801bcfe:	4b0e      	ldr	r3, [pc, #56]	@ (801bd38 <_svfiprintf_r+0x1f0>)
 801bd00:	a904      	add	r1, sp, #16
 801bd02:	4638      	mov	r0, r7
 801bd04:	f7fd f908 	bl	8018f18 <_printf_float>
 801bd08:	1c42      	adds	r2, r0, #1
 801bd0a:	4606      	mov	r6, r0
 801bd0c:	d1d6      	bne.n	801bcbc <_svfiprintf_r+0x174>
 801bd0e:	89ab      	ldrh	r3, [r5, #12]
 801bd10:	065b      	lsls	r3, r3, #25
 801bd12:	f53f af2d 	bmi.w	801bb70 <_svfiprintf_r+0x28>
 801bd16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bd18:	e72c      	b.n	801bb74 <_svfiprintf_r+0x2c>
 801bd1a:	ab03      	add	r3, sp, #12
 801bd1c:	9300      	str	r3, [sp, #0]
 801bd1e:	462a      	mov	r2, r5
 801bd20:	4b05      	ldr	r3, [pc, #20]	@ (801bd38 <_svfiprintf_r+0x1f0>)
 801bd22:	a904      	add	r1, sp, #16
 801bd24:	4638      	mov	r0, r7
 801bd26:	f7fd fb8f 	bl	8019448 <_printf_i>
 801bd2a:	e7ed      	b.n	801bd08 <_svfiprintf_r+0x1c0>
 801bd2c:	0801f402 	.word	0x0801f402
 801bd30:	0801f40c 	.word	0x0801f40c
 801bd34:	08018f19 	.word	0x08018f19
 801bd38:	0801ba93 	.word	0x0801ba93
 801bd3c:	0801f408 	.word	0x0801f408

0801bd40 <_sungetc_r>:
 801bd40:	b538      	push	{r3, r4, r5, lr}
 801bd42:	1c4b      	adds	r3, r1, #1
 801bd44:	4614      	mov	r4, r2
 801bd46:	d103      	bne.n	801bd50 <_sungetc_r+0x10>
 801bd48:	f04f 35ff 	mov.w	r5, #4294967295
 801bd4c:	4628      	mov	r0, r5
 801bd4e:	bd38      	pop	{r3, r4, r5, pc}
 801bd50:	8993      	ldrh	r3, [r2, #12]
 801bd52:	f023 0320 	bic.w	r3, r3, #32
 801bd56:	8193      	strh	r3, [r2, #12]
 801bd58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bd5a:	6852      	ldr	r2, [r2, #4]
 801bd5c:	b2cd      	uxtb	r5, r1
 801bd5e:	b18b      	cbz	r3, 801bd84 <_sungetc_r+0x44>
 801bd60:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801bd62:	4293      	cmp	r3, r2
 801bd64:	dd08      	ble.n	801bd78 <_sungetc_r+0x38>
 801bd66:	6823      	ldr	r3, [r4, #0]
 801bd68:	1e5a      	subs	r2, r3, #1
 801bd6a:	6022      	str	r2, [r4, #0]
 801bd6c:	f803 5c01 	strb.w	r5, [r3, #-1]
 801bd70:	6863      	ldr	r3, [r4, #4]
 801bd72:	3301      	adds	r3, #1
 801bd74:	6063      	str	r3, [r4, #4]
 801bd76:	e7e9      	b.n	801bd4c <_sungetc_r+0xc>
 801bd78:	4621      	mov	r1, r4
 801bd7a:	f000 fd88 	bl	801c88e <__submore>
 801bd7e:	2800      	cmp	r0, #0
 801bd80:	d0f1      	beq.n	801bd66 <_sungetc_r+0x26>
 801bd82:	e7e1      	b.n	801bd48 <_sungetc_r+0x8>
 801bd84:	6921      	ldr	r1, [r4, #16]
 801bd86:	6823      	ldr	r3, [r4, #0]
 801bd88:	b151      	cbz	r1, 801bda0 <_sungetc_r+0x60>
 801bd8a:	4299      	cmp	r1, r3
 801bd8c:	d208      	bcs.n	801bda0 <_sungetc_r+0x60>
 801bd8e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801bd92:	42a9      	cmp	r1, r5
 801bd94:	d104      	bne.n	801bda0 <_sungetc_r+0x60>
 801bd96:	3b01      	subs	r3, #1
 801bd98:	3201      	adds	r2, #1
 801bd9a:	6023      	str	r3, [r4, #0]
 801bd9c:	6062      	str	r2, [r4, #4]
 801bd9e:	e7d5      	b.n	801bd4c <_sungetc_r+0xc>
 801bda0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801bda4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bda8:	6363      	str	r3, [r4, #52]	@ 0x34
 801bdaa:	2303      	movs	r3, #3
 801bdac:	63a3      	str	r3, [r4, #56]	@ 0x38
 801bdae:	4623      	mov	r3, r4
 801bdb0:	f803 5f46 	strb.w	r5, [r3, #70]!
 801bdb4:	6023      	str	r3, [r4, #0]
 801bdb6:	2301      	movs	r3, #1
 801bdb8:	e7dc      	b.n	801bd74 <_sungetc_r+0x34>

0801bdba <__ssrefill_r>:
 801bdba:	b510      	push	{r4, lr}
 801bdbc:	460c      	mov	r4, r1
 801bdbe:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801bdc0:	b169      	cbz	r1, 801bdde <__ssrefill_r+0x24>
 801bdc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bdc6:	4299      	cmp	r1, r3
 801bdc8:	d001      	beq.n	801bdce <__ssrefill_r+0x14>
 801bdca:	f7fe fe0d 	bl	801a9e8 <_free_r>
 801bdce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801bdd0:	6063      	str	r3, [r4, #4]
 801bdd2:	2000      	movs	r0, #0
 801bdd4:	6360      	str	r0, [r4, #52]	@ 0x34
 801bdd6:	b113      	cbz	r3, 801bdde <__ssrefill_r+0x24>
 801bdd8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801bdda:	6023      	str	r3, [r4, #0]
 801bddc:	bd10      	pop	{r4, pc}
 801bdde:	6923      	ldr	r3, [r4, #16]
 801bde0:	6023      	str	r3, [r4, #0]
 801bde2:	2300      	movs	r3, #0
 801bde4:	6063      	str	r3, [r4, #4]
 801bde6:	89a3      	ldrh	r3, [r4, #12]
 801bde8:	f043 0320 	orr.w	r3, r3, #32
 801bdec:	81a3      	strh	r3, [r4, #12]
 801bdee:	f04f 30ff 	mov.w	r0, #4294967295
 801bdf2:	e7f3      	b.n	801bddc <__ssrefill_r+0x22>

0801bdf4 <__ssvfiscanf_r>:
 801bdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdf8:	460c      	mov	r4, r1
 801bdfa:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801bdfe:	2100      	movs	r1, #0
 801be00:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801be04:	49a6      	ldr	r1, [pc, #664]	@ (801c0a0 <__ssvfiscanf_r+0x2ac>)
 801be06:	91a0      	str	r1, [sp, #640]	@ 0x280
 801be08:	f10d 0804 	add.w	r8, sp, #4
 801be0c:	49a5      	ldr	r1, [pc, #660]	@ (801c0a4 <__ssvfiscanf_r+0x2b0>)
 801be0e:	4fa6      	ldr	r7, [pc, #664]	@ (801c0a8 <__ssvfiscanf_r+0x2b4>)
 801be10:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801be14:	4606      	mov	r6, r0
 801be16:	91a1      	str	r1, [sp, #644]	@ 0x284
 801be18:	9300      	str	r3, [sp, #0]
 801be1a:	f892 9000 	ldrb.w	r9, [r2]
 801be1e:	f1b9 0f00 	cmp.w	r9, #0
 801be22:	f000 8158 	beq.w	801c0d6 <__ssvfiscanf_r+0x2e2>
 801be26:	f817 3009 	ldrb.w	r3, [r7, r9]
 801be2a:	f013 0308 	ands.w	r3, r3, #8
 801be2e:	f102 0501 	add.w	r5, r2, #1
 801be32:	d019      	beq.n	801be68 <__ssvfiscanf_r+0x74>
 801be34:	6863      	ldr	r3, [r4, #4]
 801be36:	2b00      	cmp	r3, #0
 801be38:	dd0f      	ble.n	801be5a <__ssvfiscanf_r+0x66>
 801be3a:	6823      	ldr	r3, [r4, #0]
 801be3c:	781a      	ldrb	r2, [r3, #0]
 801be3e:	5cba      	ldrb	r2, [r7, r2]
 801be40:	0712      	lsls	r2, r2, #28
 801be42:	d401      	bmi.n	801be48 <__ssvfiscanf_r+0x54>
 801be44:	462a      	mov	r2, r5
 801be46:	e7e8      	b.n	801be1a <__ssvfiscanf_r+0x26>
 801be48:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801be4a:	3201      	adds	r2, #1
 801be4c:	9245      	str	r2, [sp, #276]	@ 0x114
 801be4e:	6862      	ldr	r2, [r4, #4]
 801be50:	3301      	adds	r3, #1
 801be52:	3a01      	subs	r2, #1
 801be54:	6062      	str	r2, [r4, #4]
 801be56:	6023      	str	r3, [r4, #0]
 801be58:	e7ec      	b.n	801be34 <__ssvfiscanf_r+0x40>
 801be5a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801be5c:	4621      	mov	r1, r4
 801be5e:	4630      	mov	r0, r6
 801be60:	4798      	blx	r3
 801be62:	2800      	cmp	r0, #0
 801be64:	d0e9      	beq.n	801be3a <__ssvfiscanf_r+0x46>
 801be66:	e7ed      	b.n	801be44 <__ssvfiscanf_r+0x50>
 801be68:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801be6c:	f040 8085 	bne.w	801bf7a <__ssvfiscanf_r+0x186>
 801be70:	9341      	str	r3, [sp, #260]	@ 0x104
 801be72:	9343      	str	r3, [sp, #268]	@ 0x10c
 801be74:	7853      	ldrb	r3, [r2, #1]
 801be76:	2b2a      	cmp	r3, #42	@ 0x2a
 801be78:	bf02      	ittt	eq
 801be7a:	2310      	moveq	r3, #16
 801be7c:	1c95      	addeq	r5, r2, #2
 801be7e:	9341      	streq	r3, [sp, #260]	@ 0x104
 801be80:	220a      	movs	r2, #10
 801be82:	46aa      	mov	sl, r5
 801be84:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801be88:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801be8c:	2b09      	cmp	r3, #9
 801be8e:	d91e      	bls.n	801bece <__ssvfiscanf_r+0xda>
 801be90:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801c0ac <__ssvfiscanf_r+0x2b8>
 801be94:	2203      	movs	r2, #3
 801be96:	4658      	mov	r0, fp
 801be98:	f7ec f9ca 	bl	8008230 <memchr>
 801be9c:	b138      	cbz	r0, 801beae <__ssvfiscanf_r+0xba>
 801be9e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801bea0:	eba0 000b 	sub.w	r0, r0, fp
 801bea4:	2301      	movs	r3, #1
 801bea6:	4083      	lsls	r3, r0
 801bea8:	4313      	orrs	r3, r2
 801beaa:	9341      	str	r3, [sp, #260]	@ 0x104
 801beac:	4655      	mov	r5, sl
 801beae:	f815 3b01 	ldrb.w	r3, [r5], #1
 801beb2:	2b78      	cmp	r3, #120	@ 0x78
 801beb4:	d806      	bhi.n	801bec4 <__ssvfiscanf_r+0xd0>
 801beb6:	2b57      	cmp	r3, #87	@ 0x57
 801beb8:	d810      	bhi.n	801bedc <__ssvfiscanf_r+0xe8>
 801beba:	2b25      	cmp	r3, #37	@ 0x25
 801bebc:	d05d      	beq.n	801bf7a <__ssvfiscanf_r+0x186>
 801bebe:	d857      	bhi.n	801bf70 <__ssvfiscanf_r+0x17c>
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	d075      	beq.n	801bfb0 <__ssvfiscanf_r+0x1bc>
 801bec4:	2303      	movs	r3, #3
 801bec6:	9347      	str	r3, [sp, #284]	@ 0x11c
 801bec8:	230a      	movs	r3, #10
 801beca:	9342      	str	r3, [sp, #264]	@ 0x108
 801becc:	e088      	b.n	801bfe0 <__ssvfiscanf_r+0x1ec>
 801bece:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801bed0:	fb02 1103 	mla	r1, r2, r3, r1
 801bed4:	3930      	subs	r1, #48	@ 0x30
 801bed6:	9143      	str	r1, [sp, #268]	@ 0x10c
 801bed8:	4655      	mov	r5, sl
 801beda:	e7d2      	b.n	801be82 <__ssvfiscanf_r+0x8e>
 801bedc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801bee0:	2a20      	cmp	r2, #32
 801bee2:	d8ef      	bhi.n	801bec4 <__ssvfiscanf_r+0xd0>
 801bee4:	a101      	add	r1, pc, #4	@ (adr r1, 801beec <__ssvfiscanf_r+0xf8>)
 801bee6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801beea:	bf00      	nop
 801beec:	0801bfbf 	.word	0x0801bfbf
 801bef0:	0801bec5 	.word	0x0801bec5
 801bef4:	0801bec5 	.word	0x0801bec5
 801bef8:	0801c019 	.word	0x0801c019
 801befc:	0801bec5 	.word	0x0801bec5
 801bf00:	0801bec5 	.word	0x0801bec5
 801bf04:	0801bec5 	.word	0x0801bec5
 801bf08:	0801bec5 	.word	0x0801bec5
 801bf0c:	0801bec5 	.word	0x0801bec5
 801bf10:	0801bec5 	.word	0x0801bec5
 801bf14:	0801bec5 	.word	0x0801bec5
 801bf18:	0801c02f 	.word	0x0801c02f
 801bf1c:	0801c015 	.word	0x0801c015
 801bf20:	0801bf77 	.word	0x0801bf77
 801bf24:	0801bf77 	.word	0x0801bf77
 801bf28:	0801bf77 	.word	0x0801bf77
 801bf2c:	0801bec5 	.word	0x0801bec5
 801bf30:	0801bfd1 	.word	0x0801bfd1
 801bf34:	0801bec5 	.word	0x0801bec5
 801bf38:	0801bec5 	.word	0x0801bec5
 801bf3c:	0801bec5 	.word	0x0801bec5
 801bf40:	0801bec5 	.word	0x0801bec5
 801bf44:	0801c03f 	.word	0x0801c03f
 801bf48:	0801bfd9 	.word	0x0801bfd9
 801bf4c:	0801bfb7 	.word	0x0801bfb7
 801bf50:	0801bec5 	.word	0x0801bec5
 801bf54:	0801bec5 	.word	0x0801bec5
 801bf58:	0801c03b 	.word	0x0801c03b
 801bf5c:	0801bec5 	.word	0x0801bec5
 801bf60:	0801c015 	.word	0x0801c015
 801bf64:	0801bec5 	.word	0x0801bec5
 801bf68:	0801bec5 	.word	0x0801bec5
 801bf6c:	0801bfbf 	.word	0x0801bfbf
 801bf70:	3b45      	subs	r3, #69	@ 0x45
 801bf72:	2b02      	cmp	r3, #2
 801bf74:	d8a6      	bhi.n	801bec4 <__ssvfiscanf_r+0xd0>
 801bf76:	2305      	movs	r3, #5
 801bf78:	e031      	b.n	801bfde <__ssvfiscanf_r+0x1ea>
 801bf7a:	6863      	ldr	r3, [r4, #4]
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	dd0d      	ble.n	801bf9c <__ssvfiscanf_r+0x1a8>
 801bf80:	6823      	ldr	r3, [r4, #0]
 801bf82:	781a      	ldrb	r2, [r3, #0]
 801bf84:	454a      	cmp	r2, r9
 801bf86:	f040 80a6 	bne.w	801c0d6 <__ssvfiscanf_r+0x2e2>
 801bf8a:	3301      	adds	r3, #1
 801bf8c:	6862      	ldr	r2, [r4, #4]
 801bf8e:	6023      	str	r3, [r4, #0]
 801bf90:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801bf92:	3a01      	subs	r2, #1
 801bf94:	3301      	adds	r3, #1
 801bf96:	6062      	str	r2, [r4, #4]
 801bf98:	9345      	str	r3, [sp, #276]	@ 0x114
 801bf9a:	e753      	b.n	801be44 <__ssvfiscanf_r+0x50>
 801bf9c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801bf9e:	4621      	mov	r1, r4
 801bfa0:	4630      	mov	r0, r6
 801bfa2:	4798      	blx	r3
 801bfa4:	2800      	cmp	r0, #0
 801bfa6:	d0eb      	beq.n	801bf80 <__ssvfiscanf_r+0x18c>
 801bfa8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801bfaa:	2800      	cmp	r0, #0
 801bfac:	f040 808b 	bne.w	801c0c6 <__ssvfiscanf_r+0x2d2>
 801bfb0:	f04f 30ff 	mov.w	r0, #4294967295
 801bfb4:	e08b      	b.n	801c0ce <__ssvfiscanf_r+0x2da>
 801bfb6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801bfb8:	f042 0220 	orr.w	r2, r2, #32
 801bfbc:	9241      	str	r2, [sp, #260]	@ 0x104
 801bfbe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801bfc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801bfc4:	9241      	str	r2, [sp, #260]	@ 0x104
 801bfc6:	2210      	movs	r2, #16
 801bfc8:	2b6e      	cmp	r3, #110	@ 0x6e
 801bfca:	9242      	str	r2, [sp, #264]	@ 0x108
 801bfcc:	d902      	bls.n	801bfd4 <__ssvfiscanf_r+0x1e0>
 801bfce:	e005      	b.n	801bfdc <__ssvfiscanf_r+0x1e8>
 801bfd0:	2300      	movs	r3, #0
 801bfd2:	9342      	str	r3, [sp, #264]	@ 0x108
 801bfd4:	2303      	movs	r3, #3
 801bfd6:	e002      	b.n	801bfde <__ssvfiscanf_r+0x1ea>
 801bfd8:	2308      	movs	r3, #8
 801bfda:	9342      	str	r3, [sp, #264]	@ 0x108
 801bfdc:	2304      	movs	r3, #4
 801bfde:	9347      	str	r3, [sp, #284]	@ 0x11c
 801bfe0:	6863      	ldr	r3, [r4, #4]
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	dd39      	ble.n	801c05a <__ssvfiscanf_r+0x266>
 801bfe6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801bfe8:	0659      	lsls	r1, r3, #25
 801bfea:	d404      	bmi.n	801bff6 <__ssvfiscanf_r+0x202>
 801bfec:	6823      	ldr	r3, [r4, #0]
 801bfee:	781a      	ldrb	r2, [r3, #0]
 801bff0:	5cba      	ldrb	r2, [r7, r2]
 801bff2:	0712      	lsls	r2, r2, #28
 801bff4:	d438      	bmi.n	801c068 <__ssvfiscanf_r+0x274>
 801bff6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801bff8:	2b02      	cmp	r3, #2
 801bffa:	dc47      	bgt.n	801c08c <__ssvfiscanf_r+0x298>
 801bffc:	466b      	mov	r3, sp
 801bffe:	4622      	mov	r2, r4
 801c000:	a941      	add	r1, sp, #260	@ 0x104
 801c002:	4630      	mov	r0, r6
 801c004:	f000 f9ae 	bl	801c364 <_scanf_chars>
 801c008:	2801      	cmp	r0, #1
 801c00a:	d064      	beq.n	801c0d6 <__ssvfiscanf_r+0x2e2>
 801c00c:	2802      	cmp	r0, #2
 801c00e:	f47f af19 	bne.w	801be44 <__ssvfiscanf_r+0x50>
 801c012:	e7c9      	b.n	801bfa8 <__ssvfiscanf_r+0x1b4>
 801c014:	220a      	movs	r2, #10
 801c016:	e7d7      	b.n	801bfc8 <__ssvfiscanf_r+0x1d4>
 801c018:	4629      	mov	r1, r5
 801c01a:	4640      	mov	r0, r8
 801c01c:	f000 fbfe 	bl	801c81c <__sccl>
 801c020:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801c022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c026:	9341      	str	r3, [sp, #260]	@ 0x104
 801c028:	4605      	mov	r5, r0
 801c02a:	2301      	movs	r3, #1
 801c02c:	e7d7      	b.n	801bfde <__ssvfiscanf_r+0x1ea>
 801c02e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801c030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c034:	9341      	str	r3, [sp, #260]	@ 0x104
 801c036:	2300      	movs	r3, #0
 801c038:	e7d1      	b.n	801bfde <__ssvfiscanf_r+0x1ea>
 801c03a:	2302      	movs	r3, #2
 801c03c:	e7cf      	b.n	801bfde <__ssvfiscanf_r+0x1ea>
 801c03e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801c040:	06c3      	lsls	r3, r0, #27
 801c042:	f53f aeff 	bmi.w	801be44 <__ssvfiscanf_r+0x50>
 801c046:	9b00      	ldr	r3, [sp, #0]
 801c048:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801c04a:	1d19      	adds	r1, r3, #4
 801c04c:	9100      	str	r1, [sp, #0]
 801c04e:	681b      	ldr	r3, [r3, #0]
 801c050:	07c0      	lsls	r0, r0, #31
 801c052:	bf4c      	ite	mi
 801c054:	801a      	strhmi	r2, [r3, #0]
 801c056:	601a      	strpl	r2, [r3, #0]
 801c058:	e6f4      	b.n	801be44 <__ssvfiscanf_r+0x50>
 801c05a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801c05c:	4621      	mov	r1, r4
 801c05e:	4630      	mov	r0, r6
 801c060:	4798      	blx	r3
 801c062:	2800      	cmp	r0, #0
 801c064:	d0bf      	beq.n	801bfe6 <__ssvfiscanf_r+0x1f2>
 801c066:	e79f      	b.n	801bfa8 <__ssvfiscanf_r+0x1b4>
 801c068:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801c06a:	3201      	adds	r2, #1
 801c06c:	9245      	str	r2, [sp, #276]	@ 0x114
 801c06e:	6862      	ldr	r2, [r4, #4]
 801c070:	3a01      	subs	r2, #1
 801c072:	2a00      	cmp	r2, #0
 801c074:	6062      	str	r2, [r4, #4]
 801c076:	dd02      	ble.n	801c07e <__ssvfiscanf_r+0x28a>
 801c078:	3301      	adds	r3, #1
 801c07a:	6023      	str	r3, [r4, #0]
 801c07c:	e7b6      	b.n	801bfec <__ssvfiscanf_r+0x1f8>
 801c07e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801c080:	4621      	mov	r1, r4
 801c082:	4630      	mov	r0, r6
 801c084:	4798      	blx	r3
 801c086:	2800      	cmp	r0, #0
 801c088:	d0b0      	beq.n	801bfec <__ssvfiscanf_r+0x1f8>
 801c08a:	e78d      	b.n	801bfa8 <__ssvfiscanf_r+0x1b4>
 801c08c:	2b04      	cmp	r3, #4
 801c08e:	dc0f      	bgt.n	801c0b0 <__ssvfiscanf_r+0x2bc>
 801c090:	466b      	mov	r3, sp
 801c092:	4622      	mov	r2, r4
 801c094:	a941      	add	r1, sp, #260	@ 0x104
 801c096:	4630      	mov	r0, r6
 801c098:	f000 f9be 	bl	801c418 <_scanf_i>
 801c09c:	e7b4      	b.n	801c008 <__ssvfiscanf_r+0x214>
 801c09e:	bf00      	nop
 801c0a0:	0801bd41 	.word	0x0801bd41
 801c0a4:	0801bdbb 	.word	0x0801bdbb
 801c0a8:	0801f4c1 	.word	0x0801f4c1
 801c0ac:	0801f408 	.word	0x0801f408
 801c0b0:	4b0a      	ldr	r3, [pc, #40]	@ (801c0dc <__ssvfiscanf_r+0x2e8>)
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	f43f aec6 	beq.w	801be44 <__ssvfiscanf_r+0x50>
 801c0b8:	466b      	mov	r3, sp
 801c0ba:	4622      	mov	r2, r4
 801c0bc:	a941      	add	r1, sp, #260	@ 0x104
 801c0be:	4630      	mov	r0, r6
 801c0c0:	f3af 8000 	nop.w
 801c0c4:	e7a0      	b.n	801c008 <__ssvfiscanf_r+0x214>
 801c0c6:	89a3      	ldrh	r3, [r4, #12]
 801c0c8:	065b      	lsls	r3, r3, #25
 801c0ca:	f53f af71 	bmi.w	801bfb0 <__ssvfiscanf_r+0x1bc>
 801c0ce:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801c0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0d6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801c0d8:	e7f9      	b.n	801c0ce <__ssvfiscanf_r+0x2da>
 801c0da:	bf00      	nop
 801c0dc:	00000000 	.word	0x00000000

0801c0e0 <__sfputc_r>:
 801c0e0:	6893      	ldr	r3, [r2, #8]
 801c0e2:	3b01      	subs	r3, #1
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	b410      	push	{r4}
 801c0e8:	6093      	str	r3, [r2, #8]
 801c0ea:	da08      	bge.n	801c0fe <__sfputc_r+0x1e>
 801c0ec:	6994      	ldr	r4, [r2, #24]
 801c0ee:	42a3      	cmp	r3, r4
 801c0f0:	db01      	blt.n	801c0f6 <__sfputc_r+0x16>
 801c0f2:	290a      	cmp	r1, #10
 801c0f4:	d103      	bne.n	801c0fe <__sfputc_r+0x1e>
 801c0f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c0fa:	f7fd bc9d 	b.w	8019a38 <__swbuf_r>
 801c0fe:	6813      	ldr	r3, [r2, #0]
 801c100:	1c58      	adds	r0, r3, #1
 801c102:	6010      	str	r0, [r2, #0]
 801c104:	7019      	strb	r1, [r3, #0]
 801c106:	4608      	mov	r0, r1
 801c108:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c10c:	4770      	bx	lr

0801c10e <__sfputs_r>:
 801c10e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c110:	4606      	mov	r6, r0
 801c112:	460f      	mov	r7, r1
 801c114:	4614      	mov	r4, r2
 801c116:	18d5      	adds	r5, r2, r3
 801c118:	42ac      	cmp	r4, r5
 801c11a:	d101      	bne.n	801c120 <__sfputs_r+0x12>
 801c11c:	2000      	movs	r0, #0
 801c11e:	e007      	b.n	801c130 <__sfputs_r+0x22>
 801c120:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c124:	463a      	mov	r2, r7
 801c126:	4630      	mov	r0, r6
 801c128:	f7ff ffda 	bl	801c0e0 <__sfputc_r>
 801c12c:	1c43      	adds	r3, r0, #1
 801c12e:	d1f3      	bne.n	801c118 <__sfputs_r+0xa>
 801c130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c134 <_vfiprintf_r>:
 801c134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c138:	460d      	mov	r5, r1
 801c13a:	b09d      	sub	sp, #116	@ 0x74
 801c13c:	4614      	mov	r4, r2
 801c13e:	4698      	mov	r8, r3
 801c140:	4606      	mov	r6, r0
 801c142:	b118      	cbz	r0, 801c14c <_vfiprintf_r+0x18>
 801c144:	6a03      	ldr	r3, [r0, #32]
 801c146:	b90b      	cbnz	r3, 801c14c <_vfiprintf_r+0x18>
 801c148:	f7fd fb28 	bl	801979c <__sinit>
 801c14c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c14e:	07d9      	lsls	r1, r3, #31
 801c150:	d405      	bmi.n	801c15e <_vfiprintf_r+0x2a>
 801c152:	89ab      	ldrh	r3, [r5, #12]
 801c154:	059a      	lsls	r2, r3, #22
 801c156:	d402      	bmi.n	801c15e <_vfiprintf_r+0x2a>
 801c158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c15a:	f7fd fdca 	bl	8019cf2 <__retarget_lock_acquire_recursive>
 801c15e:	89ab      	ldrh	r3, [r5, #12]
 801c160:	071b      	lsls	r3, r3, #28
 801c162:	d501      	bpl.n	801c168 <_vfiprintf_r+0x34>
 801c164:	692b      	ldr	r3, [r5, #16]
 801c166:	b99b      	cbnz	r3, 801c190 <_vfiprintf_r+0x5c>
 801c168:	4629      	mov	r1, r5
 801c16a:	4630      	mov	r0, r6
 801c16c:	f7fd fca2 	bl	8019ab4 <__swsetup_r>
 801c170:	b170      	cbz	r0, 801c190 <_vfiprintf_r+0x5c>
 801c172:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c174:	07dc      	lsls	r4, r3, #31
 801c176:	d504      	bpl.n	801c182 <_vfiprintf_r+0x4e>
 801c178:	f04f 30ff 	mov.w	r0, #4294967295
 801c17c:	b01d      	add	sp, #116	@ 0x74
 801c17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c182:	89ab      	ldrh	r3, [r5, #12]
 801c184:	0598      	lsls	r0, r3, #22
 801c186:	d4f7      	bmi.n	801c178 <_vfiprintf_r+0x44>
 801c188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c18a:	f7fd fdb3 	bl	8019cf4 <__retarget_lock_release_recursive>
 801c18e:	e7f3      	b.n	801c178 <_vfiprintf_r+0x44>
 801c190:	2300      	movs	r3, #0
 801c192:	9309      	str	r3, [sp, #36]	@ 0x24
 801c194:	2320      	movs	r3, #32
 801c196:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c19a:	f8cd 800c 	str.w	r8, [sp, #12]
 801c19e:	2330      	movs	r3, #48	@ 0x30
 801c1a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c350 <_vfiprintf_r+0x21c>
 801c1a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c1a8:	f04f 0901 	mov.w	r9, #1
 801c1ac:	4623      	mov	r3, r4
 801c1ae:	469a      	mov	sl, r3
 801c1b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c1b4:	b10a      	cbz	r2, 801c1ba <_vfiprintf_r+0x86>
 801c1b6:	2a25      	cmp	r2, #37	@ 0x25
 801c1b8:	d1f9      	bne.n	801c1ae <_vfiprintf_r+0x7a>
 801c1ba:	ebba 0b04 	subs.w	fp, sl, r4
 801c1be:	d00b      	beq.n	801c1d8 <_vfiprintf_r+0xa4>
 801c1c0:	465b      	mov	r3, fp
 801c1c2:	4622      	mov	r2, r4
 801c1c4:	4629      	mov	r1, r5
 801c1c6:	4630      	mov	r0, r6
 801c1c8:	f7ff ffa1 	bl	801c10e <__sfputs_r>
 801c1cc:	3001      	adds	r0, #1
 801c1ce:	f000 80a7 	beq.w	801c320 <_vfiprintf_r+0x1ec>
 801c1d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c1d4:	445a      	add	r2, fp
 801c1d6:	9209      	str	r2, [sp, #36]	@ 0x24
 801c1d8:	f89a 3000 	ldrb.w	r3, [sl]
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	f000 809f 	beq.w	801c320 <_vfiprintf_r+0x1ec>
 801c1e2:	2300      	movs	r3, #0
 801c1e4:	f04f 32ff 	mov.w	r2, #4294967295
 801c1e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c1ec:	f10a 0a01 	add.w	sl, sl, #1
 801c1f0:	9304      	str	r3, [sp, #16]
 801c1f2:	9307      	str	r3, [sp, #28]
 801c1f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c1f8:	931a      	str	r3, [sp, #104]	@ 0x68
 801c1fa:	4654      	mov	r4, sl
 801c1fc:	2205      	movs	r2, #5
 801c1fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c202:	4853      	ldr	r0, [pc, #332]	@ (801c350 <_vfiprintf_r+0x21c>)
 801c204:	f7ec f814 	bl	8008230 <memchr>
 801c208:	9a04      	ldr	r2, [sp, #16]
 801c20a:	b9d8      	cbnz	r0, 801c244 <_vfiprintf_r+0x110>
 801c20c:	06d1      	lsls	r1, r2, #27
 801c20e:	bf44      	itt	mi
 801c210:	2320      	movmi	r3, #32
 801c212:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c216:	0713      	lsls	r3, r2, #28
 801c218:	bf44      	itt	mi
 801c21a:	232b      	movmi	r3, #43	@ 0x2b
 801c21c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c220:	f89a 3000 	ldrb.w	r3, [sl]
 801c224:	2b2a      	cmp	r3, #42	@ 0x2a
 801c226:	d015      	beq.n	801c254 <_vfiprintf_r+0x120>
 801c228:	9a07      	ldr	r2, [sp, #28]
 801c22a:	4654      	mov	r4, sl
 801c22c:	2000      	movs	r0, #0
 801c22e:	f04f 0c0a 	mov.w	ip, #10
 801c232:	4621      	mov	r1, r4
 801c234:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c238:	3b30      	subs	r3, #48	@ 0x30
 801c23a:	2b09      	cmp	r3, #9
 801c23c:	d94b      	bls.n	801c2d6 <_vfiprintf_r+0x1a2>
 801c23e:	b1b0      	cbz	r0, 801c26e <_vfiprintf_r+0x13a>
 801c240:	9207      	str	r2, [sp, #28]
 801c242:	e014      	b.n	801c26e <_vfiprintf_r+0x13a>
 801c244:	eba0 0308 	sub.w	r3, r0, r8
 801c248:	fa09 f303 	lsl.w	r3, r9, r3
 801c24c:	4313      	orrs	r3, r2
 801c24e:	9304      	str	r3, [sp, #16]
 801c250:	46a2      	mov	sl, r4
 801c252:	e7d2      	b.n	801c1fa <_vfiprintf_r+0xc6>
 801c254:	9b03      	ldr	r3, [sp, #12]
 801c256:	1d19      	adds	r1, r3, #4
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	9103      	str	r1, [sp, #12]
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	bfbb      	ittet	lt
 801c260:	425b      	neglt	r3, r3
 801c262:	f042 0202 	orrlt.w	r2, r2, #2
 801c266:	9307      	strge	r3, [sp, #28]
 801c268:	9307      	strlt	r3, [sp, #28]
 801c26a:	bfb8      	it	lt
 801c26c:	9204      	strlt	r2, [sp, #16]
 801c26e:	7823      	ldrb	r3, [r4, #0]
 801c270:	2b2e      	cmp	r3, #46	@ 0x2e
 801c272:	d10a      	bne.n	801c28a <_vfiprintf_r+0x156>
 801c274:	7863      	ldrb	r3, [r4, #1]
 801c276:	2b2a      	cmp	r3, #42	@ 0x2a
 801c278:	d132      	bne.n	801c2e0 <_vfiprintf_r+0x1ac>
 801c27a:	9b03      	ldr	r3, [sp, #12]
 801c27c:	1d1a      	adds	r2, r3, #4
 801c27e:	681b      	ldr	r3, [r3, #0]
 801c280:	9203      	str	r2, [sp, #12]
 801c282:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c286:	3402      	adds	r4, #2
 801c288:	9305      	str	r3, [sp, #20]
 801c28a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c360 <_vfiprintf_r+0x22c>
 801c28e:	7821      	ldrb	r1, [r4, #0]
 801c290:	2203      	movs	r2, #3
 801c292:	4650      	mov	r0, sl
 801c294:	f7eb ffcc 	bl	8008230 <memchr>
 801c298:	b138      	cbz	r0, 801c2aa <_vfiprintf_r+0x176>
 801c29a:	9b04      	ldr	r3, [sp, #16]
 801c29c:	eba0 000a 	sub.w	r0, r0, sl
 801c2a0:	2240      	movs	r2, #64	@ 0x40
 801c2a2:	4082      	lsls	r2, r0
 801c2a4:	4313      	orrs	r3, r2
 801c2a6:	3401      	adds	r4, #1
 801c2a8:	9304      	str	r3, [sp, #16]
 801c2aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c2ae:	4829      	ldr	r0, [pc, #164]	@ (801c354 <_vfiprintf_r+0x220>)
 801c2b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c2b4:	2206      	movs	r2, #6
 801c2b6:	f7eb ffbb 	bl	8008230 <memchr>
 801c2ba:	2800      	cmp	r0, #0
 801c2bc:	d03f      	beq.n	801c33e <_vfiprintf_r+0x20a>
 801c2be:	4b26      	ldr	r3, [pc, #152]	@ (801c358 <_vfiprintf_r+0x224>)
 801c2c0:	bb1b      	cbnz	r3, 801c30a <_vfiprintf_r+0x1d6>
 801c2c2:	9b03      	ldr	r3, [sp, #12]
 801c2c4:	3307      	adds	r3, #7
 801c2c6:	f023 0307 	bic.w	r3, r3, #7
 801c2ca:	3308      	adds	r3, #8
 801c2cc:	9303      	str	r3, [sp, #12]
 801c2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c2d0:	443b      	add	r3, r7
 801c2d2:	9309      	str	r3, [sp, #36]	@ 0x24
 801c2d4:	e76a      	b.n	801c1ac <_vfiprintf_r+0x78>
 801c2d6:	fb0c 3202 	mla	r2, ip, r2, r3
 801c2da:	460c      	mov	r4, r1
 801c2dc:	2001      	movs	r0, #1
 801c2de:	e7a8      	b.n	801c232 <_vfiprintf_r+0xfe>
 801c2e0:	2300      	movs	r3, #0
 801c2e2:	3401      	adds	r4, #1
 801c2e4:	9305      	str	r3, [sp, #20]
 801c2e6:	4619      	mov	r1, r3
 801c2e8:	f04f 0c0a 	mov.w	ip, #10
 801c2ec:	4620      	mov	r0, r4
 801c2ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c2f2:	3a30      	subs	r2, #48	@ 0x30
 801c2f4:	2a09      	cmp	r2, #9
 801c2f6:	d903      	bls.n	801c300 <_vfiprintf_r+0x1cc>
 801c2f8:	2b00      	cmp	r3, #0
 801c2fa:	d0c6      	beq.n	801c28a <_vfiprintf_r+0x156>
 801c2fc:	9105      	str	r1, [sp, #20]
 801c2fe:	e7c4      	b.n	801c28a <_vfiprintf_r+0x156>
 801c300:	fb0c 2101 	mla	r1, ip, r1, r2
 801c304:	4604      	mov	r4, r0
 801c306:	2301      	movs	r3, #1
 801c308:	e7f0      	b.n	801c2ec <_vfiprintf_r+0x1b8>
 801c30a:	ab03      	add	r3, sp, #12
 801c30c:	9300      	str	r3, [sp, #0]
 801c30e:	462a      	mov	r2, r5
 801c310:	4b12      	ldr	r3, [pc, #72]	@ (801c35c <_vfiprintf_r+0x228>)
 801c312:	a904      	add	r1, sp, #16
 801c314:	4630      	mov	r0, r6
 801c316:	f7fc fdff 	bl	8018f18 <_printf_float>
 801c31a:	4607      	mov	r7, r0
 801c31c:	1c78      	adds	r0, r7, #1
 801c31e:	d1d6      	bne.n	801c2ce <_vfiprintf_r+0x19a>
 801c320:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c322:	07d9      	lsls	r1, r3, #31
 801c324:	d405      	bmi.n	801c332 <_vfiprintf_r+0x1fe>
 801c326:	89ab      	ldrh	r3, [r5, #12]
 801c328:	059a      	lsls	r2, r3, #22
 801c32a:	d402      	bmi.n	801c332 <_vfiprintf_r+0x1fe>
 801c32c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c32e:	f7fd fce1 	bl	8019cf4 <__retarget_lock_release_recursive>
 801c332:	89ab      	ldrh	r3, [r5, #12]
 801c334:	065b      	lsls	r3, r3, #25
 801c336:	f53f af1f 	bmi.w	801c178 <_vfiprintf_r+0x44>
 801c33a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c33c:	e71e      	b.n	801c17c <_vfiprintf_r+0x48>
 801c33e:	ab03      	add	r3, sp, #12
 801c340:	9300      	str	r3, [sp, #0]
 801c342:	462a      	mov	r2, r5
 801c344:	4b05      	ldr	r3, [pc, #20]	@ (801c35c <_vfiprintf_r+0x228>)
 801c346:	a904      	add	r1, sp, #16
 801c348:	4630      	mov	r0, r6
 801c34a:	f7fd f87d 	bl	8019448 <_printf_i>
 801c34e:	e7e4      	b.n	801c31a <_vfiprintf_r+0x1e6>
 801c350:	0801f402 	.word	0x0801f402
 801c354:	0801f40c 	.word	0x0801f40c
 801c358:	08018f19 	.word	0x08018f19
 801c35c:	0801c10f 	.word	0x0801c10f
 801c360:	0801f408 	.word	0x0801f408

0801c364 <_scanf_chars>:
 801c364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c368:	4615      	mov	r5, r2
 801c36a:	688a      	ldr	r2, [r1, #8]
 801c36c:	4680      	mov	r8, r0
 801c36e:	460c      	mov	r4, r1
 801c370:	b932      	cbnz	r2, 801c380 <_scanf_chars+0x1c>
 801c372:	698a      	ldr	r2, [r1, #24]
 801c374:	2a00      	cmp	r2, #0
 801c376:	bf14      	ite	ne
 801c378:	f04f 32ff 	movne.w	r2, #4294967295
 801c37c:	2201      	moveq	r2, #1
 801c37e:	608a      	str	r2, [r1, #8]
 801c380:	6822      	ldr	r2, [r4, #0]
 801c382:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801c414 <_scanf_chars+0xb0>
 801c386:	06d1      	lsls	r1, r2, #27
 801c388:	bf5f      	itttt	pl
 801c38a:	681a      	ldrpl	r2, [r3, #0]
 801c38c:	1d11      	addpl	r1, r2, #4
 801c38e:	6019      	strpl	r1, [r3, #0]
 801c390:	6816      	ldrpl	r6, [r2, #0]
 801c392:	2700      	movs	r7, #0
 801c394:	69a0      	ldr	r0, [r4, #24]
 801c396:	b188      	cbz	r0, 801c3bc <_scanf_chars+0x58>
 801c398:	2801      	cmp	r0, #1
 801c39a:	d107      	bne.n	801c3ac <_scanf_chars+0x48>
 801c39c:	682b      	ldr	r3, [r5, #0]
 801c39e:	781a      	ldrb	r2, [r3, #0]
 801c3a0:	6963      	ldr	r3, [r4, #20]
 801c3a2:	5c9b      	ldrb	r3, [r3, r2]
 801c3a4:	b953      	cbnz	r3, 801c3bc <_scanf_chars+0x58>
 801c3a6:	2f00      	cmp	r7, #0
 801c3a8:	d031      	beq.n	801c40e <_scanf_chars+0xaa>
 801c3aa:	e022      	b.n	801c3f2 <_scanf_chars+0x8e>
 801c3ac:	2802      	cmp	r0, #2
 801c3ae:	d120      	bne.n	801c3f2 <_scanf_chars+0x8e>
 801c3b0:	682b      	ldr	r3, [r5, #0]
 801c3b2:	781b      	ldrb	r3, [r3, #0]
 801c3b4:	f819 3003 	ldrb.w	r3, [r9, r3]
 801c3b8:	071b      	lsls	r3, r3, #28
 801c3ba:	d41a      	bmi.n	801c3f2 <_scanf_chars+0x8e>
 801c3bc:	6823      	ldr	r3, [r4, #0]
 801c3be:	06da      	lsls	r2, r3, #27
 801c3c0:	bf5e      	ittt	pl
 801c3c2:	682b      	ldrpl	r3, [r5, #0]
 801c3c4:	781b      	ldrbpl	r3, [r3, #0]
 801c3c6:	f806 3b01 	strbpl.w	r3, [r6], #1
 801c3ca:	682a      	ldr	r2, [r5, #0]
 801c3cc:	686b      	ldr	r3, [r5, #4]
 801c3ce:	3201      	adds	r2, #1
 801c3d0:	602a      	str	r2, [r5, #0]
 801c3d2:	68a2      	ldr	r2, [r4, #8]
 801c3d4:	3b01      	subs	r3, #1
 801c3d6:	3a01      	subs	r2, #1
 801c3d8:	606b      	str	r3, [r5, #4]
 801c3da:	3701      	adds	r7, #1
 801c3dc:	60a2      	str	r2, [r4, #8]
 801c3de:	b142      	cbz	r2, 801c3f2 <_scanf_chars+0x8e>
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	dcd7      	bgt.n	801c394 <_scanf_chars+0x30>
 801c3e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801c3e8:	4629      	mov	r1, r5
 801c3ea:	4640      	mov	r0, r8
 801c3ec:	4798      	blx	r3
 801c3ee:	2800      	cmp	r0, #0
 801c3f0:	d0d0      	beq.n	801c394 <_scanf_chars+0x30>
 801c3f2:	6823      	ldr	r3, [r4, #0]
 801c3f4:	f013 0310 	ands.w	r3, r3, #16
 801c3f8:	d105      	bne.n	801c406 <_scanf_chars+0xa2>
 801c3fa:	68e2      	ldr	r2, [r4, #12]
 801c3fc:	3201      	adds	r2, #1
 801c3fe:	60e2      	str	r2, [r4, #12]
 801c400:	69a2      	ldr	r2, [r4, #24]
 801c402:	b102      	cbz	r2, 801c406 <_scanf_chars+0xa2>
 801c404:	7033      	strb	r3, [r6, #0]
 801c406:	6923      	ldr	r3, [r4, #16]
 801c408:	443b      	add	r3, r7
 801c40a:	6123      	str	r3, [r4, #16]
 801c40c:	2000      	movs	r0, #0
 801c40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c412:	bf00      	nop
 801c414:	0801f4c1 	.word	0x0801f4c1

0801c418 <_scanf_i>:
 801c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c41c:	4698      	mov	r8, r3
 801c41e:	4b74      	ldr	r3, [pc, #464]	@ (801c5f0 <_scanf_i+0x1d8>)
 801c420:	460c      	mov	r4, r1
 801c422:	4682      	mov	sl, r0
 801c424:	4616      	mov	r6, r2
 801c426:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c42a:	b087      	sub	sp, #28
 801c42c:	ab03      	add	r3, sp, #12
 801c42e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801c432:	4b70      	ldr	r3, [pc, #448]	@ (801c5f4 <_scanf_i+0x1dc>)
 801c434:	69a1      	ldr	r1, [r4, #24]
 801c436:	4a70      	ldr	r2, [pc, #448]	@ (801c5f8 <_scanf_i+0x1e0>)
 801c438:	2903      	cmp	r1, #3
 801c43a:	bf08      	it	eq
 801c43c:	461a      	moveq	r2, r3
 801c43e:	68a3      	ldr	r3, [r4, #8]
 801c440:	9201      	str	r2, [sp, #4]
 801c442:	1e5a      	subs	r2, r3, #1
 801c444:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801c448:	bf88      	it	hi
 801c44a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801c44e:	4627      	mov	r7, r4
 801c450:	bf82      	ittt	hi
 801c452:	eb03 0905 	addhi.w	r9, r3, r5
 801c456:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801c45a:	60a3      	strhi	r3, [r4, #8]
 801c45c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801c460:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801c464:	bf98      	it	ls
 801c466:	f04f 0900 	movls.w	r9, #0
 801c46a:	6023      	str	r3, [r4, #0]
 801c46c:	463d      	mov	r5, r7
 801c46e:	f04f 0b00 	mov.w	fp, #0
 801c472:	6831      	ldr	r1, [r6, #0]
 801c474:	ab03      	add	r3, sp, #12
 801c476:	7809      	ldrb	r1, [r1, #0]
 801c478:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801c47c:	2202      	movs	r2, #2
 801c47e:	f7eb fed7 	bl	8008230 <memchr>
 801c482:	b328      	cbz	r0, 801c4d0 <_scanf_i+0xb8>
 801c484:	f1bb 0f01 	cmp.w	fp, #1
 801c488:	d159      	bne.n	801c53e <_scanf_i+0x126>
 801c48a:	6862      	ldr	r2, [r4, #4]
 801c48c:	b92a      	cbnz	r2, 801c49a <_scanf_i+0x82>
 801c48e:	6822      	ldr	r2, [r4, #0]
 801c490:	2108      	movs	r1, #8
 801c492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801c496:	6061      	str	r1, [r4, #4]
 801c498:	6022      	str	r2, [r4, #0]
 801c49a:	6822      	ldr	r2, [r4, #0]
 801c49c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801c4a0:	6022      	str	r2, [r4, #0]
 801c4a2:	68a2      	ldr	r2, [r4, #8]
 801c4a4:	1e51      	subs	r1, r2, #1
 801c4a6:	60a1      	str	r1, [r4, #8]
 801c4a8:	b192      	cbz	r2, 801c4d0 <_scanf_i+0xb8>
 801c4aa:	6832      	ldr	r2, [r6, #0]
 801c4ac:	1c51      	adds	r1, r2, #1
 801c4ae:	6031      	str	r1, [r6, #0]
 801c4b0:	7812      	ldrb	r2, [r2, #0]
 801c4b2:	f805 2b01 	strb.w	r2, [r5], #1
 801c4b6:	6872      	ldr	r2, [r6, #4]
 801c4b8:	3a01      	subs	r2, #1
 801c4ba:	2a00      	cmp	r2, #0
 801c4bc:	6072      	str	r2, [r6, #4]
 801c4be:	dc07      	bgt.n	801c4d0 <_scanf_i+0xb8>
 801c4c0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801c4c4:	4631      	mov	r1, r6
 801c4c6:	4650      	mov	r0, sl
 801c4c8:	4790      	blx	r2
 801c4ca:	2800      	cmp	r0, #0
 801c4cc:	f040 8085 	bne.w	801c5da <_scanf_i+0x1c2>
 801c4d0:	f10b 0b01 	add.w	fp, fp, #1
 801c4d4:	f1bb 0f03 	cmp.w	fp, #3
 801c4d8:	d1cb      	bne.n	801c472 <_scanf_i+0x5a>
 801c4da:	6863      	ldr	r3, [r4, #4]
 801c4dc:	b90b      	cbnz	r3, 801c4e2 <_scanf_i+0xca>
 801c4de:	230a      	movs	r3, #10
 801c4e0:	6063      	str	r3, [r4, #4]
 801c4e2:	6863      	ldr	r3, [r4, #4]
 801c4e4:	4945      	ldr	r1, [pc, #276]	@ (801c5fc <_scanf_i+0x1e4>)
 801c4e6:	6960      	ldr	r0, [r4, #20]
 801c4e8:	1ac9      	subs	r1, r1, r3
 801c4ea:	f000 f997 	bl	801c81c <__sccl>
 801c4ee:	f04f 0b00 	mov.w	fp, #0
 801c4f2:	68a3      	ldr	r3, [r4, #8]
 801c4f4:	6822      	ldr	r2, [r4, #0]
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	d03d      	beq.n	801c576 <_scanf_i+0x15e>
 801c4fa:	6831      	ldr	r1, [r6, #0]
 801c4fc:	6960      	ldr	r0, [r4, #20]
 801c4fe:	f891 c000 	ldrb.w	ip, [r1]
 801c502:	f810 000c 	ldrb.w	r0, [r0, ip]
 801c506:	2800      	cmp	r0, #0
 801c508:	d035      	beq.n	801c576 <_scanf_i+0x15e>
 801c50a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801c50e:	d124      	bne.n	801c55a <_scanf_i+0x142>
 801c510:	0510      	lsls	r0, r2, #20
 801c512:	d522      	bpl.n	801c55a <_scanf_i+0x142>
 801c514:	f10b 0b01 	add.w	fp, fp, #1
 801c518:	f1b9 0f00 	cmp.w	r9, #0
 801c51c:	d003      	beq.n	801c526 <_scanf_i+0x10e>
 801c51e:	3301      	adds	r3, #1
 801c520:	f109 39ff 	add.w	r9, r9, #4294967295
 801c524:	60a3      	str	r3, [r4, #8]
 801c526:	6873      	ldr	r3, [r6, #4]
 801c528:	3b01      	subs	r3, #1
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	6073      	str	r3, [r6, #4]
 801c52e:	dd1b      	ble.n	801c568 <_scanf_i+0x150>
 801c530:	6833      	ldr	r3, [r6, #0]
 801c532:	3301      	adds	r3, #1
 801c534:	6033      	str	r3, [r6, #0]
 801c536:	68a3      	ldr	r3, [r4, #8]
 801c538:	3b01      	subs	r3, #1
 801c53a:	60a3      	str	r3, [r4, #8]
 801c53c:	e7d9      	b.n	801c4f2 <_scanf_i+0xda>
 801c53e:	f1bb 0f02 	cmp.w	fp, #2
 801c542:	d1ae      	bne.n	801c4a2 <_scanf_i+0x8a>
 801c544:	6822      	ldr	r2, [r4, #0]
 801c546:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801c54a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801c54e:	d1c4      	bne.n	801c4da <_scanf_i+0xc2>
 801c550:	2110      	movs	r1, #16
 801c552:	6061      	str	r1, [r4, #4]
 801c554:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801c558:	e7a2      	b.n	801c4a0 <_scanf_i+0x88>
 801c55a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801c55e:	6022      	str	r2, [r4, #0]
 801c560:	780b      	ldrb	r3, [r1, #0]
 801c562:	f805 3b01 	strb.w	r3, [r5], #1
 801c566:	e7de      	b.n	801c526 <_scanf_i+0x10e>
 801c568:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801c56c:	4631      	mov	r1, r6
 801c56e:	4650      	mov	r0, sl
 801c570:	4798      	blx	r3
 801c572:	2800      	cmp	r0, #0
 801c574:	d0df      	beq.n	801c536 <_scanf_i+0x11e>
 801c576:	6823      	ldr	r3, [r4, #0]
 801c578:	05d9      	lsls	r1, r3, #23
 801c57a:	d50d      	bpl.n	801c598 <_scanf_i+0x180>
 801c57c:	42bd      	cmp	r5, r7
 801c57e:	d909      	bls.n	801c594 <_scanf_i+0x17c>
 801c580:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801c584:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801c588:	4632      	mov	r2, r6
 801c58a:	4650      	mov	r0, sl
 801c58c:	4798      	blx	r3
 801c58e:	f105 39ff 	add.w	r9, r5, #4294967295
 801c592:	464d      	mov	r5, r9
 801c594:	42bd      	cmp	r5, r7
 801c596:	d028      	beq.n	801c5ea <_scanf_i+0x1d2>
 801c598:	6822      	ldr	r2, [r4, #0]
 801c59a:	f012 0210 	ands.w	r2, r2, #16
 801c59e:	d113      	bne.n	801c5c8 <_scanf_i+0x1b0>
 801c5a0:	702a      	strb	r2, [r5, #0]
 801c5a2:	6863      	ldr	r3, [r4, #4]
 801c5a4:	9e01      	ldr	r6, [sp, #4]
 801c5a6:	4639      	mov	r1, r7
 801c5a8:	4650      	mov	r0, sl
 801c5aa:	47b0      	blx	r6
 801c5ac:	f8d8 3000 	ldr.w	r3, [r8]
 801c5b0:	6821      	ldr	r1, [r4, #0]
 801c5b2:	1d1a      	adds	r2, r3, #4
 801c5b4:	f8c8 2000 	str.w	r2, [r8]
 801c5b8:	f011 0f20 	tst.w	r1, #32
 801c5bc:	681b      	ldr	r3, [r3, #0]
 801c5be:	d00f      	beq.n	801c5e0 <_scanf_i+0x1c8>
 801c5c0:	6018      	str	r0, [r3, #0]
 801c5c2:	68e3      	ldr	r3, [r4, #12]
 801c5c4:	3301      	adds	r3, #1
 801c5c6:	60e3      	str	r3, [r4, #12]
 801c5c8:	6923      	ldr	r3, [r4, #16]
 801c5ca:	1bed      	subs	r5, r5, r7
 801c5cc:	445d      	add	r5, fp
 801c5ce:	442b      	add	r3, r5
 801c5d0:	6123      	str	r3, [r4, #16]
 801c5d2:	2000      	movs	r0, #0
 801c5d4:	b007      	add	sp, #28
 801c5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5da:	f04f 0b00 	mov.w	fp, #0
 801c5de:	e7ca      	b.n	801c576 <_scanf_i+0x15e>
 801c5e0:	07ca      	lsls	r2, r1, #31
 801c5e2:	bf4c      	ite	mi
 801c5e4:	8018      	strhmi	r0, [r3, #0]
 801c5e6:	6018      	strpl	r0, [r3, #0]
 801c5e8:	e7eb      	b.n	801c5c2 <_scanf_i+0x1aa>
 801c5ea:	2001      	movs	r0, #1
 801c5ec:	e7f2      	b.n	801c5d4 <_scanf_i+0x1bc>
 801c5ee:	bf00      	nop
 801c5f0:	0801d650 	.word	0x0801d650
 801c5f4:	0801cad5 	.word	0x0801cad5
 801c5f8:	0801cbb5 	.word	0x0801cbb5
 801c5fc:	0801f423 	.word	0x0801f423

0801c600 <__sflush_r>:
 801c600:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c608:	0716      	lsls	r6, r2, #28
 801c60a:	4605      	mov	r5, r0
 801c60c:	460c      	mov	r4, r1
 801c60e:	d454      	bmi.n	801c6ba <__sflush_r+0xba>
 801c610:	684b      	ldr	r3, [r1, #4]
 801c612:	2b00      	cmp	r3, #0
 801c614:	dc02      	bgt.n	801c61c <__sflush_r+0x1c>
 801c616:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c618:	2b00      	cmp	r3, #0
 801c61a:	dd48      	ble.n	801c6ae <__sflush_r+0xae>
 801c61c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c61e:	2e00      	cmp	r6, #0
 801c620:	d045      	beq.n	801c6ae <__sflush_r+0xae>
 801c622:	2300      	movs	r3, #0
 801c624:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c628:	682f      	ldr	r7, [r5, #0]
 801c62a:	6a21      	ldr	r1, [r4, #32]
 801c62c:	602b      	str	r3, [r5, #0]
 801c62e:	d030      	beq.n	801c692 <__sflush_r+0x92>
 801c630:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c632:	89a3      	ldrh	r3, [r4, #12]
 801c634:	0759      	lsls	r1, r3, #29
 801c636:	d505      	bpl.n	801c644 <__sflush_r+0x44>
 801c638:	6863      	ldr	r3, [r4, #4]
 801c63a:	1ad2      	subs	r2, r2, r3
 801c63c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c63e:	b10b      	cbz	r3, 801c644 <__sflush_r+0x44>
 801c640:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c642:	1ad2      	subs	r2, r2, r3
 801c644:	2300      	movs	r3, #0
 801c646:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c648:	6a21      	ldr	r1, [r4, #32]
 801c64a:	4628      	mov	r0, r5
 801c64c:	47b0      	blx	r6
 801c64e:	1c43      	adds	r3, r0, #1
 801c650:	89a3      	ldrh	r3, [r4, #12]
 801c652:	d106      	bne.n	801c662 <__sflush_r+0x62>
 801c654:	6829      	ldr	r1, [r5, #0]
 801c656:	291d      	cmp	r1, #29
 801c658:	d82b      	bhi.n	801c6b2 <__sflush_r+0xb2>
 801c65a:	4a2a      	ldr	r2, [pc, #168]	@ (801c704 <__sflush_r+0x104>)
 801c65c:	40ca      	lsrs	r2, r1
 801c65e:	07d6      	lsls	r6, r2, #31
 801c660:	d527      	bpl.n	801c6b2 <__sflush_r+0xb2>
 801c662:	2200      	movs	r2, #0
 801c664:	6062      	str	r2, [r4, #4]
 801c666:	04d9      	lsls	r1, r3, #19
 801c668:	6922      	ldr	r2, [r4, #16]
 801c66a:	6022      	str	r2, [r4, #0]
 801c66c:	d504      	bpl.n	801c678 <__sflush_r+0x78>
 801c66e:	1c42      	adds	r2, r0, #1
 801c670:	d101      	bne.n	801c676 <__sflush_r+0x76>
 801c672:	682b      	ldr	r3, [r5, #0]
 801c674:	b903      	cbnz	r3, 801c678 <__sflush_r+0x78>
 801c676:	6560      	str	r0, [r4, #84]	@ 0x54
 801c678:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c67a:	602f      	str	r7, [r5, #0]
 801c67c:	b1b9      	cbz	r1, 801c6ae <__sflush_r+0xae>
 801c67e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c682:	4299      	cmp	r1, r3
 801c684:	d002      	beq.n	801c68c <__sflush_r+0x8c>
 801c686:	4628      	mov	r0, r5
 801c688:	f7fe f9ae 	bl	801a9e8 <_free_r>
 801c68c:	2300      	movs	r3, #0
 801c68e:	6363      	str	r3, [r4, #52]	@ 0x34
 801c690:	e00d      	b.n	801c6ae <__sflush_r+0xae>
 801c692:	2301      	movs	r3, #1
 801c694:	4628      	mov	r0, r5
 801c696:	47b0      	blx	r6
 801c698:	4602      	mov	r2, r0
 801c69a:	1c50      	adds	r0, r2, #1
 801c69c:	d1c9      	bne.n	801c632 <__sflush_r+0x32>
 801c69e:	682b      	ldr	r3, [r5, #0]
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d0c6      	beq.n	801c632 <__sflush_r+0x32>
 801c6a4:	2b1d      	cmp	r3, #29
 801c6a6:	d001      	beq.n	801c6ac <__sflush_r+0xac>
 801c6a8:	2b16      	cmp	r3, #22
 801c6aa:	d11e      	bne.n	801c6ea <__sflush_r+0xea>
 801c6ac:	602f      	str	r7, [r5, #0]
 801c6ae:	2000      	movs	r0, #0
 801c6b0:	e022      	b.n	801c6f8 <__sflush_r+0xf8>
 801c6b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c6b6:	b21b      	sxth	r3, r3
 801c6b8:	e01b      	b.n	801c6f2 <__sflush_r+0xf2>
 801c6ba:	690f      	ldr	r7, [r1, #16]
 801c6bc:	2f00      	cmp	r7, #0
 801c6be:	d0f6      	beq.n	801c6ae <__sflush_r+0xae>
 801c6c0:	0793      	lsls	r3, r2, #30
 801c6c2:	680e      	ldr	r6, [r1, #0]
 801c6c4:	bf08      	it	eq
 801c6c6:	694b      	ldreq	r3, [r1, #20]
 801c6c8:	600f      	str	r7, [r1, #0]
 801c6ca:	bf18      	it	ne
 801c6cc:	2300      	movne	r3, #0
 801c6ce:	eba6 0807 	sub.w	r8, r6, r7
 801c6d2:	608b      	str	r3, [r1, #8]
 801c6d4:	f1b8 0f00 	cmp.w	r8, #0
 801c6d8:	dde9      	ble.n	801c6ae <__sflush_r+0xae>
 801c6da:	6a21      	ldr	r1, [r4, #32]
 801c6dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c6de:	4643      	mov	r3, r8
 801c6e0:	463a      	mov	r2, r7
 801c6e2:	4628      	mov	r0, r5
 801c6e4:	47b0      	blx	r6
 801c6e6:	2800      	cmp	r0, #0
 801c6e8:	dc08      	bgt.n	801c6fc <__sflush_r+0xfc>
 801c6ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c6ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c6f2:	81a3      	strh	r3, [r4, #12]
 801c6f4:	f04f 30ff 	mov.w	r0, #4294967295
 801c6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6fc:	4407      	add	r7, r0
 801c6fe:	eba8 0800 	sub.w	r8, r8, r0
 801c702:	e7e7      	b.n	801c6d4 <__sflush_r+0xd4>
 801c704:	20400001 	.word	0x20400001

0801c708 <_fflush_r>:
 801c708:	b538      	push	{r3, r4, r5, lr}
 801c70a:	690b      	ldr	r3, [r1, #16]
 801c70c:	4605      	mov	r5, r0
 801c70e:	460c      	mov	r4, r1
 801c710:	b913      	cbnz	r3, 801c718 <_fflush_r+0x10>
 801c712:	2500      	movs	r5, #0
 801c714:	4628      	mov	r0, r5
 801c716:	bd38      	pop	{r3, r4, r5, pc}
 801c718:	b118      	cbz	r0, 801c722 <_fflush_r+0x1a>
 801c71a:	6a03      	ldr	r3, [r0, #32]
 801c71c:	b90b      	cbnz	r3, 801c722 <_fflush_r+0x1a>
 801c71e:	f7fd f83d 	bl	801979c <__sinit>
 801c722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c726:	2b00      	cmp	r3, #0
 801c728:	d0f3      	beq.n	801c712 <_fflush_r+0xa>
 801c72a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c72c:	07d0      	lsls	r0, r2, #31
 801c72e:	d404      	bmi.n	801c73a <_fflush_r+0x32>
 801c730:	0599      	lsls	r1, r3, #22
 801c732:	d402      	bmi.n	801c73a <_fflush_r+0x32>
 801c734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c736:	f7fd fadc 	bl	8019cf2 <__retarget_lock_acquire_recursive>
 801c73a:	4628      	mov	r0, r5
 801c73c:	4621      	mov	r1, r4
 801c73e:	f7ff ff5f 	bl	801c600 <__sflush_r>
 801c742:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c744:	07da      	lsls	r2, r3, #31
 801c746:	4605      	mov	r5, r0
 801c748:	d4e4      	bmi.n	801c714 <_fflush_r+0xc>
 801c74a:	89a3      	ldrh	r3, [r4, #12]
 801c74c:	059b      	lsls	r3, r3, #22
 801c74e:	d4e1      	bmi.n	801c714 <_fflush_r+0xc>
 801c750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c752:	f7fd facf 	bl	8019cf4 <__retarget_lock_release_recursive>
 801c756:	e7dd      	b.n	801c714 <_fflush_r+0xc>

0801c758 <__swhatbuf_r>:
 801c758:	b570      	push	{r4, r5, r6, lr}
 801c75a:	460c      	mov	r4, r1
 801c75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c760:	2900      	cmp	r1, #0
 801c762:	b096      	sub	sp, #88	@ 0x58
 801c764:	4615      	mov	r5, r2
 801c766:	461e      	mov	r6, r3
 801c768:	da0d      	bge.n	801c786 <__swhatbuf_r+0x2e>
 801c76a:	89a3      	ldrh	r3, [r4, #12]
 801c76c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c770:	f04f 0100 	mov.w	r1, #0
 801c774:	bf14      	ite	ne
 801c776:	2340      	movne	r3, #64	@ 0x40
 801c778:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c77c:	2000      	movs	r0, #0
 801c77e:	6031      	str	r1, [r6, #0]
 801c780:	602b      	str	r3, [r5, #0]
 801c782:	b016      	add	sp, #88	@ 0x58
 801c784:	bd70      	pop	{r4, r5, r6, pc}
 801c786:	466a      	mov	r2, sp
 801c788:	f000 f8d6 	bl	801c938 <_fstat_r>
 801c78c:	2800      	cmp	r0, #0
 801c78e:	dbec      	blt.n	801c76a <__swhatbuf_r+0x12>
 801c790:	9901      	ldr	r1, [sp, #4]
 801c792:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c796:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c79a:	4259      	negs	r1, r3
 801c79c:	4159      	adcs	r1, r3
 801c79e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c7a2:	e7eb      	b.n	801c77c <__swhatbuf_r+0x24>

0801c7a4 <__smakebuf_r>:
 801c7a4:	898b      	ldrh	r3, [r1, #12]
 801c7a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c7a8:	079d      	lsls	r5, r3, #30
 801c7aa:	4606      	mov	r6, r0
 801c7ac:	460c      	mov	r4, r1
 801c7ae:	d507      	bpl.n	801c7c0 <__smakebuf_r+0x1c>
 801c7b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c7b4:	6023      	str	r3, [r4, #0]
 801c7b6:	6123      	str	r3, [r4, #16]
 801c7b8:	2301      	movs	r3, #1
 801c7ba:	6163      	str	r3, [r4, #20]
 801c7bc:	b003      	add	sp, #12
 801c7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c7c0:	ab01      	add	r3, sp, #4
 801c7c2:	466a      	mov	r2, sp
 801c7c4:	f7ff ffc8 	bl	801c758 <__swhatbuf_r>
 801c7c8:	9f00      	ldr	r7, [sp, #0]
 801c7ca:	4605      	mov	r5, r0
 801c7cc:	4639      	mov	r1, r7
 801c7ce:	4630      	mov	r0, r6
 801c7d0:	f7fb fc32 	bl	8018038 <_malloc_r>
 801c7d4:	b948      	cbnz	r0, 801c7ea <__smakebuf_r+0x46>
 801c7d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c7da:	059a      	lsls	r2, r3, #22
 801c7dc:	d4ee      	bmi.n	801c7bc <__smakebuf_r+0x18>
 801c7de:	f023 0303 	bic.w	r3, r3, #3
 801c7e2:	f043 0302 	orr.w	r3, r3, #2
 801c7e6:	81a3      	strh	r3, [r4, #12]
 801c7e8:	e7e2      	b.n	801c7b0 <__smakebuf_r+0xc>
 801c7ea:	89a3      	ldrh	r3, [r4, #12]
 801c7ec:	6020      	str	r0, [r4, #0]
 801c7ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c7f2:	81a3      	strh	r3, [r4, #12]
 801c7f4:	9b01      	ldr	r3, [sp, #4]
 801c7f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c7fa:	b15b      	cbz	r3, 801c814 <__smakebuf_r+0x70>
 801c7fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c800:	4630      	mov	r0, r6
 801c802:	f000 f8ab 	bl	801c95c <_isatty_r>
 801c806:	b128      	cbz	r0, 801c814 <__smakebuf_r+0x70>
 801c808:	89a3      	ldrh	r3, [r4, #12]
 801c80a:	f023 0303 	bic.w	r3, r3, #3
 801c80e:	f043 0301 	orr.w	r3, r3, #1
 801c812:	81a3      	strh	r3, [r4, #12]
 801c814:	89a3      	ldrh	r3, [r4, #12]
 801c816:	431d      	orrs	r5, r3
 801c818:	81a5      	strh	r5, [r4, #12]
 801c81a:	e7cf      	b.n	801c7bc <__smakebuf_r+0x18>

0801c81c <__sccl>:
 801c81c:	b570      	push	{r4, r5, r6, lr}
 801c81e:	780b      	ldrb	r3, [r1, #0]
 801c820:	4604      	mov	r4, r0
 801c822:	2b5e      	cmp	r3, #94	@ 0x5e
 801c824:	bf0b      	itete	eq
 801c826:	784b      	ldrbeq	r3, [r1, #1]
 801c828:	1c4a      	addne	r2, r1, #1
 801c82a:	1c8a      	addeq	r2, r1, #2
 801c82c:	2100      	movne	r1, #0
 801c82e:	bf08      	it	eq
 801c830:	2101      	moveq	r1, #1
 801c832:	3801      	subs	r0, #1
 801c834:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801c838:	f800 1f01 	strb.w	r1, [r0, #1]!
 801c83c:	42a8      	cmp	r0, r5
 801c83e:	d1fb      	bne.n	801c838 <__sccl+0x1c>
 801c840:	b90b      	cbnz	r3, 801c846 <__sccl+0x2a>
 801c842:	1e50      	subs	r0, r2, #1
 801c844:	bd70      	pop	{r4, r5, r6, pc}
 801c846:	f081 0101 	eor.w	r1, r1, #1
 801c84a:	54e1      	strb	r1, [r4, r3]
 801c84c:	4610      	mov	r0, r2
 801c84e:	4602      	mov	r2, r0
 801c850:	f812 5b01 	ldrb.w	r5, [r2], #1
 801c854:	2d2d      	cmp	r5, #45	@ 0x2d
 801c856:	d005      	beq.n	801c864 <__sccl+0x48>
 801c858:	2d5d      	cmp	r5, #93	@ 0x5d
 801c85a:	d016      	beq.n	801c88a <__sccl+0x6e>
 801c85c:	2d00      	cmp	r5, #0
 801c85e:	d0f1      	beq.n	801c844 <__sccl+0x28>
 801c860:	462b      	mov	r3, r5
 801c862:	e7f2      	b.n	801c84a <__sccl+0x2e>
 801c864:	7846      	ldrb	r6, [r0, #1]
 801c866:	2e5d      	cmp	r6, #93	@ 0x5d
 801c868:	d0fa      	beq.n	801c860 <__sccl+0x44>
 801c86a:	42b3      	cmp	r3, r6
 801c86c:	dcf8      	bgt.n	801c860 <__sccl+0x44>
 801c86e:	3002      	adds	r0, #2
 801c870:	461a      	mov	r2, r3
 801c872:	3201      	adds	r2, #1
 801c874:	4296      	cmp	r6, r2
 801c876:	54a1      	strb	r1, [r4, r2]
 801c878:	dcfb      	bgt.n	801c872 <__sccl+0x56>
 801c87a:	1af2      	subs	r2, r6, r3
 801c87c:	3a01      	subs	r2, #1
 801c87e:	1c5d      	adds	r5, r3, #1
 801c880:	42b3      	cmp	r3, r6
 801c882:	bfa8      	it	ge
 801c884:	2200      	movge	r2, #0
 801c886:	18ab      	adds	r3, r5, r2
 801c888:	e7e1      	b.n	801c84e <__sccl+0x32>
 801c88a:	4610      	mov	r0, r2
 801c88c:	e7da      	b.n	801c844 <__sccl+0x28>

0801c88e <__submore>:
 801c88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c892:	460c      	mov	r4, r1
 801c894:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801c896:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c89a:	4299      	cmp	r1, r3
 801c89c:	d11d      	bne.n	801c8da <__submore+0x4c>
 801c89e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801c8a2:	f7fb fbc9 	bl	8018038 <_malloc_r>
 801c8a6:	b918      	cbnz	r0, 801c8b0 <__submore+0x22>
 801c8a8:	f04f 30ff 	mov.w	r0, #4294967295
 801c8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c8b4:	63a3      	str	r3, [r4, #56]	@ 0x38
 801c8b6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801c8ba:	6360      	str	r0, [r4, #52]	@ 0x34
 801c8bc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801c8c0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801c8c4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801c8c8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801c8cc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801c8d0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801c8d4:	6020      	str	r0, [r4, #0]
 801c8d6:	2000      	movs	r0, #0
 801c8d8:	e7e8      	b.n	801c8ac <__submore+0x1e>
 801c8da:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801c8dc:	0077      	lsls	r7, r6, #1
 801c8de:	463a      	mov	r2, r7
 801c8e0:	f7fb fc3e 	bl	8018160 <_realloc_r>
 801c8e4:	4605      	mov	r5, r0
 801c8e6:	2800      	cmp	r0, #0
 801c8e8:	d0de      	beq.n	801c8a8 <__submore+0x1a>
 801c8ea:	eb00 0806 	add.w	r8, r0, r6
 801c8ee:	4601      	mov	r1, r0
 801c8f0:	4632      	mov	r2, r6
 801c8f2:	4640      	mov	r0, r8
 801c8f4:	f7fd fa07 	bl	8019d06 <memcpy>
 801c8f8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801c8fc:	f8c4 8000 	str.w	r8, [r4]
 801c900:	e7e9      	b.n	801c8d6 <__submore+0x48>

0801c902 <memmove>:
 801c902:	4288      	cmp	r0, r1
 801c904:	b510      	push	{r4, lr}
 801c906:	eb01 0402 	add.w	r4, r1, r2
 801c90a:	d902      	bls.n	801c912 <memmove+0x10>
 801c90c:	4284      	cmp	r4, r0
 801c90e:	4623      	mov	r3, r4
 801c910:	d807      	bhi.n	801c922 <memmove+0x20>
 801c912:	1e43      	subs	r3, r0, #1
 801c914:	42a1      	cmp	r1, r4
 801c916:	d008      	beq.n	801c92a <memmove+0x28>
 801c918:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c91c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c920:	e7f8      	b.n	801c914 <memmove+0x12>
 801c922:	4402      	add	r2, r0
 801c924:	4601      	mov	r1, r0
 801c926:	428a      	cmp	r2, r1
 801c928:	d100      	bne.n	801c92c <memmove+0x2a>
 801c92a:	bd10      	pop	{r4, pc}
 801c92c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c930:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c934:	e7f7      	b.n	801c926 <memmove+0x24>
	...

0801c938 <_fstat_r>:
 801c938:	b538      	push	{r3, r4, r5, lr}
 801c93a:	4d07      	ldr	r5, [pc, #28]	@ (801c958 <_fstat_r+0x20>)
 801c93c:	2300      	movs	r3, #0
 801c93e:	4604      	mov	r4, r0
 801c940:	4608      	mov	r0, r1
 801c942:	4611      	mov	r1, r2
 801c944:	602b      	str	r3, [r5, #0]
 801c946:	f7f4 f987 	bl	8010c58 <_fstat>
 801c94a:	1c43      	adds	r3, r0, #1
 801c94c:	d102      	bne.n	801c954 <_fstat_r+0x1c>
 801c94e:	682b      	ldr	r3, [r5, #0]
 801c950:	b103      	cbz	r3, 801c954 <_fstat_r+0x1c>
 801c952:	6023      	str	r3, [r4, #0]
 801c954:	bd38      	pop	{r3, r4, r5, pc}
 801c956:	bf00      	nop
 801c958:	20014444 	.word	0x20014444

0801c95c <_isatty_r>:
 801c95c:	b538      	push	{r3, r4, r5, lr}
 801c95e:	4d06      	ldr	r5, [pc, #24]	@ (801c978 <_isatty_r+0x1c>)
 801c960:	2300      	movs	r3, #0
 801c962:	4604      	mov	r4, r0
 801c964:	4608      	mov	r0, r1
 801c966:	602b      	str	r3, [r5, #0]
 801c968:	f7f4 f986 	bl	8010c78 <_isatty>
 801c96c:	1c43      	adds	r3, r0, #1
 801c96e:	d102      	bne.n	801c976 <_isatty_r+0x1a>
 801c970:	682b      	ldr	r3, [r5, #0]
 801c972:	b103      	cbz	r3, 801c976 <_isatty_r+0x1a>
 801c974:	6023      	str	r3, [r4, #0]
 801c976:	bd38      	pop	{r3, r4, r5, pc}
 801c978:	20014444 	.word	0x20014444

0801c97c <__assert_func>:
 801c97c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c97e:	4614      	mov	r4, r2
 801c980:	461a      	mov	r2, r3
 801c982:	4b09      	ldr	r3, [pc, #36]	@ (801c9a8 <__assert_func+0x2c>)
 801c984:	681b      	ldr	r3, [r3, #0]
 801c986:	4605      	mov	r5, r0
 801c988:	68d8      	ldr	r0, [r3, #12]
 801c98a:	b14c      	cbz	r4, 801c9a0 <__assert_func+0x24>
 801c98c:	4b07      	ldr	r3, [pc, #28]	@ (801c9ac <__assert_func+0x30>)
 801c98e:	9100      	str	r1, [sp, #0]
 801c990:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c994:	4906      	ldr	r1, [pc, #24]	@ (801c9b0 <__assert_func+0x34>)
 801c996:	462b      	mov	r3, r5
 801c998:	f000 f90e 	bl	801cbb8 <fiprintf>
 801c99c:	f000 f91e 	bl	801cbdc <abort>
 801c9a0:	4b04      	ldr	r3, [pc, #16]	@ (801c9b4 <__assert_func+0x38>)
 801c9a2:	461c      	mov	r4, r3
 801c9a4:	e7f3      	b.n	801c98e <__assert_func+0x12>
 801c9a6:	bf00      	nop
 801c9a8:	20000214 	.word	0x20000214
 801c9ac:	0801f42e 	.word	0x0801f42e
 801c9b0:	0801f43b 	.word	0x0801f43b
 801c9b4:	0801f469 	.word	0x0801f469

0801c9b8 <_calloc_r>:
 801c9b8:	b570      	push	{r4, r5, r6, lr}
 801c9ba:	fba1 5402 	umull	r5, r4, r1, r2
 801c9be:	b934      	cbnz	r4, 801c9ce <_calloc_r+0x16>
 801c9c0:	4629      	mov	r1, r5
 801c9c2:	f7fb fb39 	bl	8018038 <_malloc_r>
 801c9c6:	4606      	mov	r6, r0
 801c9c8:	b928      	cbnz	r0, 801c9d6 <_calloc_r+0x1e>
 801c9ca:	4630      	mov	r0, r6
 801c9cc:	bd70      	pop	{r4, r5, r6, pc}
 801c9ce:	220c      	movs	r2, #12
 801c9d0:	6002      	str	r2, [r0, #0]
 801c9d2:	2600      	movs	r6, #0
 801c9d4:	e7f9      	b.n	801c9ca <_calloc_r+0x12>
 801c9d6:	462a      	mov	r2, r5
 801c9d8:	4621      	mov	r1, r4
 801c9da:	f7fd f8c1 	bl	8019b60 <memset>
 801c9de:	e7f4      	b.n	801c9ca <_calloc_r+0x12>

0801c9e0 <_strtol_l.isra.0>:
 801c9e0:	2b24      	cmp	r3, #36	@ 0x24
 801c9e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c9e6:	4686      	mov	lr, r0
 801c9e8:	4690      	mov	r8, r2
 801c9ea:	d801      	bhi.n	801c9f0 <_strtol_l.isra.0+0x10>
 801c9ec:	2b01      	cmp	r3, #1
 801c9ee:	d106      	bne.n	801c9fe <_strtol_l.isra.0+0x1e>
 801c9f0:	f7fd f954 	bl	8019c9c <__errno>
 801c9f4:	2316      	movs	r3, #22
 801c9f6:	6003      	str	r3, [r0, #0]
 801c9f8:	2000      	movs	r0, #0
 801c9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c9fe:	4834      	ldr	r0, [pc, #208]	@ (801cad0 <_strtol_l.isra.0+0xf0>)
 801ca00:	460d      	mov	r5, r1
 801ca02:	462a      	mov	r2, r5
 801ca04:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ca08:	5d06      	ldrb	r6, [r0, r4]
 801ca0a:	f016 0608 	ands.w	r6, r6, #8
 801ca0e:	d1f8      	bne.n	801ca02 <_strtol_l.isra.0+0x22>
 801ca10:	2c2d      	cmp	r4, #45	@ 0x2d
 801ca12:	d110      	bne.n	801ca36 <_strtol_l.isra.0+0x56>
 801ca14:	782c      	ldrb	r4, [r5, #0]
 801ca16:	2601      	movs	r6, #1
 801ca18:	1c95      	adds	r5, r2, #2
 801ca1a:	f033 0210 	bics.w	r2, r3, #16
 801ca1e:	d115      	bne.n	801ca4c <_strtol_l.isra.0+0x6c>
 801ca20:	2c30      	cmp	r4, #48	@ 0x30
 801ca22:	d10d      	bne.n	801ca40 <_strtol_l.isra.0+0x60>
 801ca24:	782a      	ldrb	r2, [r5, #0]
 801ca26:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801ca2a:	2a58      	cmp	r2, #88	@ 0x58
 801ca2c:	d108      	bne.n	801ca40 <_strtol_l.isra.0+0x60>
 801ca2e:	786c      	ldrb	r4, [r5, #1]
 801ca30:	3502      	adds	r5, #2
 801ca32:	2310      	movs	r3, #16
 801ca34:	e00a      	b.n	801ca4c <_strtol_l.isra.0+0x6c>
 801ca36:	2c2b      	cmp	r4, #43	@ 0x2b
 801ca38:	bf04      	itt	eq
 801ca3a:	782c      	ldrbeq	r4, [r5, #0]
 801ca3c:	1c95      	addeq	r5, r2, #2
 801ca3e:	e7ec      	b.n	801ca1a <_strtol_l.isra.0+0x3a>
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d1f6      	bne.n	801ca32 <_strtol_l.isra.0+0x52>
 801ca44:	2c30      	cmp	r4, #48	@ 0x30
 801ca46:	bf14      	ite	ne
 801ca48:	230a      	movne	r3, #10
 801ca4a:	2308      	moveq	r3, #8
 801ca4c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801ca50:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ca54:	2200      	movs	r2, #0
 801ca56:	fbbc f9f3 	udiv	r9, ip, r3
 801ca5a:	4610      	mov	r0, r2
 801ca5c:	fb03 ca19 	mls	sl, r3, r9, ip
 801ca60:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801ca64:	2f09      	cmp	r7, #9
 801ca66:	d80f      	bhi.n	801ca88 <_strtol_l.isra.0+0xa8>
 801ca68:	463c      	mov	r4, r7
 801ca6a:	42a3      	cmp	r3, r4
 801ca6c:	dd1b      	ble.n	801caa6 <_strtol_l.isra.0+0xc6>
 801ca6e:	1c57      	adds	r7, r2, #1
 801ca70:	d007      	beq.n	801ca82 <_strtol_l.isra.0+0xa2>
 801ca72:	4581      	cmp	r9, r0
 801ca74:	d314      	bcc.n	801caa0 <_strtol_l.isra.0+0xc0>
 801ca76:	d101      	bne.n	801ca7c <_strtol_l.isra.0+0x9c>
 801ca78:	45a2      	cmp	sl, r4
 801ca7a:	db11      	blt.n	801caa0 <_strtol_l.isra.0+0xc0>
 801ca7c:	fb00 4003 	mla	r0, r0, r3, r4
 801ca80:	2201      	movs	r2, #1
 801ca82:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ca86:	e7eb      	b.n	801ca60 <_strtol_l.isra.0+0x80>
 801ca88:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801ca8c:	2f19      	cmp	r7, #25
 801ca8e:	d801      	bhi.n	801ca94 <_strtol_l.isra.0+0xb4>
 801ca90:	3c37      	subs	r4, #55	@ 0x37
 801ca92:	e7ea      	b.n	801ca6a <_strtol_l.isra.0+0x8a>
 801ca94:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801ca98:	2f19      	cmp	r7, #25
 801ca9a:	d804      	bhi.n	801caa6 <_strtol_l.isra.0+0xc6>
 801ca9c:	3c57      	subs	r4, #87	@ 0x57
 801ca9e:	e7e4      	b.n	801ca6a <_strtol_l.isra.0+0x8a>
 801caa0:	f04f 32ff 	mov.w	r2, #4294967295
 801caa4:	e7ed      	b.n	801ca82 <_strtol_l.isra.0+0xa2>
 801caa6:	1c53      	adds	r3, r2, #1
 801caa8:	d108      	bne.n	801cabc <_strtol_l.isra.0+0xdc>
 801caaa:	2322      	movs	r3, #34	@ 0x22
 801caac:	f8ce 3000 	str.w	r3, [lr]
 801cab0:	4660      	mov	r0, ip
 801cab2:	f1b8 0f00 	cmp.w	r8, #0
 801cab6:	d0a0      	beq.n	801c9fa <_strtol_l.isra.0+0x1a>
 801cab8:	1e69      	subs	r1, r5, #1
 801caba:	e006      	b.n	801caca <_strtol_l.isra.0+0xea>
 801cabc:	b106      	cbz	r6, 801cac0 <_strtol_l.isra.0+0xe0>
 801cabe:	4240      	negs	r0, r0
 801cac0:	f1b8 0f00 	cmp.w	r8, #0
 801cac4:	d099      	beq.n	801c9fa <_strtol_l.isra.0+0x1a>
 801cac6:	2a00      	cmp	r2, #0
 801cac8:	d1f6      	bne.n	801cab8 <_strtol_l.isra.0+0xd8>
 801caca:	f8c8 1000 	str.w	r1, [r8]
 801cace:	e794      	b.n	801c9fa <_strtol_l.isra.0+0x1a>
 801cad0:	0801f4c1 	.word	0x0801f4c1

0801cad4 <_strtol_r>:
 801cad4:	f7ff bf84 	b.w	801c9e0 <_strtol_l.isra.0>

0801cad8 <_strtoul_l.isra.0>:
 801cad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cadc:	4e34      	ldr	r6, [pc, #208]	@ (801cbb0 <_strtoul_l.isra.0+0xd8>)
 801cade:	4686      	mov	lr, r0
 801cae0:	460d      	mov	r5, r1
 801cae2:	4628      	mov	r0, r5
 801cae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cae8:	5d37      	ldrb	r7, [r6, r4]
 801caea:	f017 0708 	ands.w	r7, r7, #8
 801caee:	d1f8      	bne.n	801cae2 <_strtoul_l.isra.0+0xa>
 801caf0:	2c2d      	cmp	r4, #45	@ 0x2d
 801caf2:	d110      	bne.n	801cb16 <_strtoul_l.isra.0+0x3e>
 801caf4:	782c      	ldrb	r4, [r5, #0]
 801caf6:	2701      	movs	r7, #1
 801caf8:	1c85      	adds	r5, r0, #2
 801cafa:	f033 0010 	bics.w	r0, r3, #16
 801cafe:	d115      	bne.n	801cb2c <_strtoul_l.isra.0+0x54>
 801cb00:	2c30      	cmp	r4, #48	@ 0x30
 801cb02:	d10d      	bne.n	801cb20 <_strtoul_l.isra.0+0x48>
 801cb04:	7828      	ldrb	r0, [r5, #0]
 801cb06:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801cb0a:	2858      	cmp	r0, #88	@ 0x58
 801cb0c:	d108      	bne.n	801cb20 <_strtoul_l.isra.0+0x48>
 801cb0e:	786c      	ldrb	r4, [r5, #1]
 801cb10:	3502      	adds	r5, #2
 801cb12:	2310      	movs	r3, #16
 801cb14:	e00a      	b.n	801cb2c <_strtoul_l.isra.0+0x54>
 801cb16:	2c2b      	cmp	r4, #43	@ 0x2b
 801cb18:	bf04      	itt	eq
 801cb1a:	782c      	ldrbeq	r4, [r5, #0]
 801cb1c:	1c85      	addeq	r5, r0, #2
 801cb1e:	e7ec      	b.n	801cafa <_strtoul_l.isra.0+0x22>
 801cb20:	2b00      	cmp	r3, #0
 801cb22:	d1f6      	bne.n	801cb12 <_strtoul_l.isra.0+0x3a>
 801cb24:	2c30      	cmp	r4, #48	@ 0x30
 801cb26:	bf14      	ite	ne
 801cb28:	230a      	movne	r3, #10
 801cb2a:	2308      	moveq	r3, #8
 801cb2c:	f04f 38ff 	mov.w	r8, #4294967295
 801cb30:	2600      	movs	r6, #0
 801cb32:	fbb8 f8f3 	udiv	r8, r8, r3
 801cb36:	fb03 f908 	mul.w	r9, r3, r8
 801cb3a:	ea6f 0909 	mvn.w	r9, r9
 801cb3e:	4630      	mov	r0, r6
 801cb40:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801cb44:	f1bc 0f09 	cmp.w	ip, #9
 801cb48:	d810      	bhi.n	801cb6c <_strtoul_l.isra.0+0x94>
 801cb4a:	4664      	mov	r4, ip
 801cb4c:	42a3      	cmp	r3, r4
 801cb4e:	dd1e      	ble.n	801cb8e <_strtoul_l.isra.0+0xb6>
 801cb50:	f1b6 3fff 	cmp.w	r6, #4294967295
 801cb54:	d007      	beq.n	801cb66 <_strtoul_l.isra.0+0x8e>
 801cb56:	4580      	cmp	r8, r0
 801cb58:	d316      	bcc.n	801cb88 <_strtoul_l.isra.0+0xb0>
 801cb5a:	d101      	bne.n	801cb60 <_strtoul_l.isra.0+0x88>
 801cb5c:	45a1      	cmp	r9, r4
 801cb5e:	db13      	blt.n	801cb88 <_strtoul_l.isra.0+0xb0>
 801cb60:	fb00 4003 	mla	r0, r0, r3, r4
 801cb64:	2601      	movs	r6, #1
 801cb66:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cb6a:	e7e9      	b.n	801cb40 <_strtoul_l.isra.0+0x68>
 801cb6c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801cb70:	f1bc 0f19 	cmp.w	ip, #25
 801cb74:	d801      	bhi.n	801cb7a <_strtoul_l.isra.0+0xa2>
 801cb76:	3c37      	subs	r4, #55	@ 0x37
 801cb78:	e7e8      	b.n	801cb4c <_strtoul_l.isra.0+0x74>
 801cb7a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801cb7e:	f1bc 0f19 	cmp.w	ip, #25
 801cb82:	d804      	bhi.n	801cb8e <_strtoul_l.isra.0+0xb6>
 801cb84:	3c57      	subs	r4, #87	@ 0x57
 801cb86:	e7e1      	b.n	801cb4c <_strtoul_l.isra.0+0x74>
 801cb88:	f04f 36ff 	mov.w	r6, #4294967295
 801cb8c:	e7eb      	b.n	801cb66 <_strtoul_l.isra.0+0x8e>
 801cb8e:	1c73      	adds	r3, r6, #1
 801cb90:	d106      	bne.n	801cba0 <_strtoul_l.isra.0+0xc8>
 801cb92:	2322      	movs	r3, #34	@ 0x22
 801cb94:	f8ce 3000 	str.w	r3, [lr]
 801cb98:	4630      	mov	r0, r6
 801cb9a:	b932      	cbnz	r2, 801cbaa <_strtoul_l.isra.0+0xd2>
 801cb9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cba0:	b107      	cbz	r7, 801cba4 <_strtoul_l.isra.0+0xcc>
 801cba2:	4240      	negs	r0, r0
 801cba4:	2a00      	cmp	r2, #0
 801cba6:	d0f9      	beq.n	801cb9c <_strtoul_l.isra.0+0xc4>
 801cba8:	b106      	cbz	r6, 801cbac <_strtoul_l.isra.0+0xd4>
 801cbaa:	1e69      	subs	r1, r5, #1
 801cbac:	6011      	str	r1, [r2, #0]
 801cbae:	e7f5      	b.n	801cb9c <_strtoul_l.isra.0+0xc4>
 801cbb0:	0801f4c1 	.word	0x0801f4c1

0801cbb4 <_strtoul_r>:
 801cbb4:	f7ff bf90 	b.w	801cad8 <_strtoul_l.isra.0>

0801cbb8 <fiprintf>:
 801cbb8:	b40e      	push	{r1, r2, r3}
 801cbba:	b503      	push	{r0, r1, lr}
 801cbbc:	4601      	mov	r1, r0
 801cbbe:	ab03      	add	r3, sp, #12
 801cbc0:	4805      	ldr	r0, [pc, #20]	@ (801cbd8 <fiprintf+0x20>)
 801cbc2:	f853 2b04 	ldr.w	r2, [r3], #4
 801cbc6:	6800      	ldr	r0, [r0, #0]
 801cbc8:	9301      	str	r3, [sp, #4]
 801cbca:	f7ff fab3 	bl	801c134 <_vfiprintf_r>
 801cbce:	b002      	add	sp, #8
 801cbd0:	f85d eb04 	ldr.w	lr, [sp], #4
 801cbd4:	b003      	add	sp, #12
 801cbd6:	4770      	bx	lr
 801cbd8:	20000214 	.word	0x20000214

0801cbdc <abort>:
 801cbdc:	b508      	push	{r3, lr}
 801cbde:	2006      	movs	r0, #6
 801cbe0:	f000 f82c 	bl	801cc3c <raise>
 801cbe4:	2001      	movs	r0, #1
 801cbe6:	f7f3 ffe7 	bl	8010bb8 <_exit>

0801cbea <_raise_r>:
 801cbea:	291f      	cmp	r1, #31
 801cbec:	b538      	push	{r3, r4, r5, lr}
 801cbee:	4605      	mov	r5, r0
 801cbf0:	460c      	mov	r4, r1
 801cbf2:	d904      	bls.n	801cbfe <_raise_r+0x14>
 801cbf4:	2316      	movs	r3, #22
 801cbf6:	6003      	str	r3, [r0, #0]
 801cbf8:	f04f 30ff 	mov.w	r0, #4294967295
 801cbfc:	bd38      	pop	{r3, r4, r5, pc}
 801cbfe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801cc00:	b112      	cbz	r2, 801cc08 <_raise_r+0x1e>
 801cc02:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cc06:	b94b      	cbnz	r3, 801cc1c <_raise_r+0x32>
 801cc08:	4628      	mov	r0, r5
 801cc0a:	f000 f831 	bl	801cc70 <_getpid_r>
 801cc0e:	4622      	mov	r2, r4
 801cc10:	4601      	mov	r1, r0
 801cc12:	4628      	mov	r0, r5
 801cc14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cc18:	f000 b818 	b.w	801cc4c <_kill_r>
 801cc1c:	2b01      	cmp	r3, #1
 801cc1e:	d00a      	beq.n	801cc36 <_raise_r+0x4c>
 801cc20:	1c59      	adds	r1, r3, #1
 801cc22:	d103      	bne.n	801cc2c <_raise_r+0x42>
 801cc24:	2316      	movs	r3, #22
 801cc26:	6003      	str	r3, [r0, #0]
 801cc28:	2001      	movs	r0, #1
 801cc2a:	e7e7      	b.n	801cbfc <_raise_r+0x12>
 801cc2c:	2100      	movs	r1, #0
 801cc2e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801cc32:	4620      	mov	r0, r4
 801cc34:	4798      	blx	r3
 801cc36:	2000      	movs	r0, #0
 801cc38:	e7e0      	b.n	801cbfc <_raise_r+0x12>
	...

0801cc3c <raise>:
 801cc3c:	4b02      	ldr	r3, [pc, #8]	@ (801cc48 <raise+0xc>)
 801cc3e:	4601      	mov	r1, r0
 801cc40:	6818      	ldr	r0, [r3, #0]
 801cc42:	f7ff bfd2 	b.w	801cbea <_raise_r>
 801cc46:	bf00      	nop
 801cc48:	20000214 	.word	0x20000214

0801cc4c <_kill_r>:
 801cc4c:	b538      	push	{r3, r4, r5, lr}
 801cc4e:	4d07      	ldr	r5, [pc, #28]	@ (801cc6c <_kill_r+0x20>)
 801cc50:	2300      	movs	r3, #0
 801cc52:	4604      	mov	r4, r0
 801cc54:	4608      	mov	r0, r1
 801cc56:	4611      	mov	r1, r2
 801cc58:	602b      	str	r3, [r5, #0]
 801cc5a:	f7f3 ff9d 	bl	8010b98 <_kill>
 801cc5e:	1c43      	adds	r3, r0, #1
 801cc60:	d102      	bne.n	801cc68 <_kill_r+0x1c>
 801cc62:	682b      	ldr	r3, [r5, #0]
 801cc64:	b103      	cbz	r3, 801cc68 <_kill_r+0x1c>
 801cc66:	6023      	str	r3, [r4, #0]
 801cc68:	bd38      	pop	{r3, r4, r5, pc}
 801cc6a:	bf00      	nop
 801cc6c:	20014444 	.word	0x20014444

0801cc70 <_getpid_r>:
 801cc70:	f7f3 bf8a 	b.w	8010b88 <_getpid>

0801cc74 <_sbrk>:
 801cc74:	4a04      	ldr	r2, [pc, #16]	@ (801cc88 <_sbrk+0x14>)
 801cc76:	6811      	ldr	r1, [r2, #0]
 801cc78:	4603      	mov	r3, r0
 801cc7a:	b909      	cbnz	r1, 801cc80 <_sbrk+0xc>
 801cc7c:	4903      	ldr	r1, [pc, #12]	@ (801cc8c <_sbrk+0x18>)
 801cc7e:	6011      	str	r1, [r2, #0]
 801cc80:	6810      	ldr	r0, [r2, #0]
 801cc82:	4403      	add	r3, r0
 801cc84:	6013      	str	r3, [r2, #0]
 801cc86:	4770      	bx	lr
 801cc88:	2001444c 	.word	0x2001444c
 801cc8c:	20014450 	.word	0x20014450

0801cc90 <_init>:
 801cc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc92:	bf00      	nop
 801cc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cc96:	bc08      	pop	{r3}
 801cc98:	469e      	mov	lr, r3
 801cc9a:	4770      	bx	lr

0801cc9c <_fini>:
 801cc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc9e:	bf00      	nop
 801cca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cca2:	bc08      	pop	{r3}
 801cca4:	469e      	mov	lr, r3
 801cca6:	4770      	bx	lr
