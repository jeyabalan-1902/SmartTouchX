
STM32_DISPLAY_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000134bc  080081d0  080081d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028c8  0801b690  0801b690  00014690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801df58  0801df58  0001724c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801df58  0801df58  00016f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801df60  0801df60  0001724c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801df60  0801df60  00016f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801df64  0801df64  00016f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000024c  20000000  0801df68  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014180  2000024c  0801e1b4  0001724c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200143cc  0801e1b4  000173cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001724c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021c85  00000000  00000000  0001727c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000582d  00000000  00000000  00038f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ea0  00000000  00000000  0003e730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001810  00000000  00000000  000405d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002837b  00000000  00000000  00041de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025f27  00000000  00000000  0006a15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e297e  00000000  00000000  00090082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172a00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009710  00000000  00000000  00172a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0017c154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d0 <__do_global_dtors_aux>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	4c05      	ldr	r4, [pc, #20]	@ (80081e8 <__do_global_dtors_aux+0x18>)
 80081d4:	7823      	ldrb	r3, [r4, #0]
 80081d6:	b933      	cbnz	r3, 80081e6 <__do_global_dtors_aux+0x16>
 80081d8:	4b04      	ldr	r3, [pc, #16]	@ (80081ec <__do_global_dtors_aux+0x1c>)
 80081da:	b113      	cbz	r3, 80081e2 <__do_global_dtors_aux+0x12>
 80081dc:	4804      	ldr	r0, [pc, #16]	@ (80081f0 <__do_global_dtors_aux+0x20>)
 80081de:	f3af 8000 	nop.w
 80081e2:	2301      	movs	r3, #1
 80081e4:	7023      	strb	r3, [r4, #0]
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	2000024c 	.word	0x2000024c
 80081ec:	00000000 	.word	0x00000000
 80081f0:	0801b674 	.word	0x0801b674

080081f4 <frame_dummy>:
 80081f4:	b508      	push	{r3, lr}
 80081f6:	4b03      	ldr	r3, [pc, #12]	@ (8008204 <frame_dummy+0x10>)
 80081f8:	b11b      	cbz	r3, 8008202 <frame_dummy+0xe>
 80081fa:	4903      	ldr	r1, [pc, #12]	@ (8008208 <frame_dummy+0x14>)
 80081fc:	4803      	ldr	r0, [pc, #12]	@ (800820c <frame_dummy+0x18>)
 80081fe:	f3af 8000 	nop.w
 8008202:	bd08      	pop	{r3, pc}
 8008204:	00000000 	.word	0x00000000
 8008208:	20000250 	.word	0x20000250
 800820c:	0801b674 	.word	0x0801b674

08008210 <strcmp>:
 8008210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008218:	2a01      	cmp	r2, #1
 800821a:	bf28      	it	cs
 800821c:	429a      	cmpcs	r2, r3
 800821e:	d0f7      	beq.n	8008210 <strcmp>
 8008220:	1ad0      	subs	r0, r2, r3
 8008222:	4770      	bx	lr
	...

08008230 <memchr>:
 8008230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008234:	2a10      	cmp	r2, #16
 8008236:	db2b      	blt.n	8008290 <memchr+0x60>
 8008238:	f010 0f07 	tst.w	r0, #7
 800823c:	d008      	beq.n	8008250 <memchr+0x20>
 800823e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008242:	3a01      	subs	r2, #1
 8008244:	428b      	cmp	r3, r1
 8008246:	d02d      	beq.n	80082a4 <memchr+0x74>
 8008248:	f010 0f07 	tst.w	r0, #7
 800824c:	b342      	cbz	r2, 80082a0 <memchr+0x70>
 800824e:	d1f6      	bne.n	800823e <memchr+0xe>
 8008250:	b4f0      	push	{r4, r5, r6, r7}
 8008252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800825a:	f022 0407 	bic.w	r4, r2, #7
 800825e:	f07f 0700 	mvns.w	r7, #0
 8008262:	2300      	movs	r3, #0
 8008264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008268:	3c08      	subs	r4, #8
 800826a:	ea85 0501 	eor.w	r5, r5, r1
 800826e:	ea86 0601 	eor.w	r6, r6, r1
 8008272:	fa85 f547 	uadd8	r5, r5, r7
 8008276:	faa3 f587 	sel	r5, r3, r7
 800827a:	fa86 f647 	uadd8	r6, r6, r7
 800827e:	faa5 f687 	sel	r6, r5, r7
 8008282:	b98e      	cbnz	r6, 80082a8 <memchr+0x78>
 8008284:	d1ee      	bne.n	8008264 <memchr+0x34>
 8008286:	bcf0      	pop	{r4, r5, r6, r7}
 8008288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800828c:	f002 0207 	and.w	r2, r2, #7
 8008290:	b132      	cbz	r2, 80082a0 <memchr+0x70>
 8008292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008296:	3a01      	subs	r2, #1
 8008298:	ea83 0301 	eor.w	r3, r3, r1
 800829c:	b113      	cbz	r3, 80082a4 <memchr+0x74>
 800829e:	d1f8      	bne.n	8008292 <memchr+0x62>
 80082a0:	2000      	movs	r0, #0
 80082a2:	4770      	bx	lr
 80082a4:	3801      	subs	r0, #1
 80082a6:	4770      	bx	lr
 80082a8:	2d00      	cmp	r5, #0
 80082aa:	bf06      	itte	eq
 80082ac:	4635      	moveq	r5, r6
 80082ae:	3803      	subeq	r0, #3
 80082b0:	3807      	subne	r0, #7
 80082b2:	f015 0f01 	tst.w	r5, #1
 80082b6:	d107      	bne.n	80082c8 <memchr+0x98>
 80082b8:	3001      	adds	r0, #1
 80082ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80082be:	bf02      	ittt	eq
 80082c0:	3001      	addeq	r0, #1
 80082c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80082c6:	3001      	addeq	r0, #1
 80082c8:	bcf0      	pop	{r4, r5, r6, r7}
 80082ca:	3801      	subs	r0, #1
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop

080082d0 <strlen>:
 80082d0:	4603      	mov	r3, r0
 80082d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	d1fb      	bne.n	80082d2 <strlen+0x2>
 80082da:	1a18      	subs	r0, r3, r0
 80082dc:	3801      	subs	r0, #1
 80082de:	4770      	bx	lr

080082e0 <__aeabi_drsub>:
 80082e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80082e4:	e002      	b.n	80082ec <__adddf3>
 80082e6:	bf00      	nop

080082e8 <__aeabi_dsub>:
 80082e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080082ec <__adddf3>:
 80082ec:	b530      	push	{r4, r5, lr}
 80082ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80082f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	bf1f      	itttt	ne
 8008302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800830a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800830e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008312:	f000 80e2 	beq.w	80084da <__adddf3+0x1ee>
 8008316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800831a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800831e:	bfb8      	it	lt
 8008320:	426d      	neglt	r5, r5
 8008322:	dd0c      	ble.n	800833e <__adddf3+0x52>
 8008324:	442c      	add	r4, r5
 8008326:	ea80 0202 	eor.w	r2, r0, r2
 800832a:	ea81 0303 	eor.w	r3, r1, r3
 800832e:	ea82 0000 	eor.w	r0, r2, r0
 8008332:	ea83 0101 	eor.w	r1, r3, r1
 8008336:	ea80 0202 	eor.w	r2, r0, r2
 800833a:	ea81 0303 	eor.w	r3, r1, r3
 800833e:	2d36      	cmp	r5, #54	@ 0x36
 8008340:	bf88      	it	hi
 8008342:	bd30      	pophi	{r4, r5, pc}
 8008344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800834c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008354:	d002      	beq.n	800835c <__adddf3+0x70>
 8008356:	4240      	negs	r0, r0
 8008358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800835c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008368:	d002      	beq.n	8008370 <__adddf3+0x84>
 800836a:	4252      	negs	r2, r2
 800836c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008370:	ea94 0f05 	teq	r4, r5
 8008374:	f000 80a7 	beq.w	80084c6 <__adddf3+0x1da>
 8008378:	f1a4 0401 	sub.w	r4, r4, #1
 800837c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008380:	db0d      	blt.n	800839e <__adddf3+0xb2>
 8008382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008386:	fa22 f205 	lsr.w	r2, r2, r5
 800838a:	1880      	adds	r0, r0, r2
 800838c:	f141 0100 	adc.w	r1, r1, #0
 8008390:	fa03 f20e 	lsl.w	r2, r3, lr
 8008394:	1880      	adds	r0, r0, r2
 8008396:	fa43 f305 	asr.w	r3, r3, r5
 800839a:	4159      	adcs	r1, r3
 800839c:	e00e      	b.n	80083bc <__adddf3+0xd0>
 800839e:	f1a5 0520 	sub.w	r5, r5, #32
 80083a2:	f10e 0e20 	add.w	lr, lr, #32
 80083a6:	2a01      	cmp	r2, #1
 80083a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80083ac:	bf28      	it	cs
 80083ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80083b2:	fa43 f305 	asr.w	r3, r3, r5
 80083b6:	18c0      	adds	r0, r0, r3
 80083b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80083bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80083c0:	d507      	bpl.n	80083d2 <__adddf3+0xe6>
 80083c2:	f04f 0e00 	mov.w	lr, #0
 80083c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80083ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80083ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80083d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80083d6:	d31b      	bcc.n	8008410 <__adddf3+0x124>
 80083d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80083dc:	d30c      	bcc.n	80083f8 <__adddf3+0x10c>
 80083de:	0849      	lsrs	r1, r1, #1
 80083e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80083e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80083e8:	f104 0401 	add.w	r4, r4, #1
 80083ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80083f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80083f4:	f080 809a 	bcs.w	800852c <__adddf3+0x240>
 80083f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80083fc:	bf08      	it	eq
 80083fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008402:	f150 0000 	adcs.w	r0, r0, #0
 8008406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800840a:	ea41 0105 	orr.w	r1, r1, r5
 800840e:	bd30      	pop	{r4, r5, pc}
 8008410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008414:	4140      	adcs	r0, r0
 8008416:	eb41 0101 	adc.w	r1, r1, r1
 800841a:	3c01      	subs	r4, #1
 800841c:	bf28      	it	cs
 800841e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8008422:	d2e9      	bcs.n	80083f8 <__adddf3+0x10c>
 8008424:	f091 0f00 	teq	r1, #0
 8008428:	bf04      	itt	eq
 800842a:	4601      	moveq	r1, r0
 800842c:	2000      	moveq	r0, #0
 800842e:	fab1 f381 	clz	r3, r1
 8008432:	bf08      	it	eq
 8008434:	3320      	addeq	r3, #32
 8008436:	f1a3 030b 	sub.w	r3, r3, #11
 800843a:	f1b3 0220 	subs.w	r2, r3, #32
 800843e:	da0c      	bge.n	800845a <__adddf3+0x16e>
 8008440:	320c      	adds	r2, #12
 8008442:	dd08      	ble.n	8008456 <__adddf3+0x16a>
 8008444:	f102 0c14 	add.w	ip, r2, #20
 8008448:	f1c2 020c 	rsb	r2, r2, #12
 800844c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008450:	fa21 f102 	lsr.w	r1, r1, r2
 8008454:	e00c      	b.n	8008470 <__adddf3+0x184>
 8008456:	f102 0214 	add.w	r2, r2, #20
 800845a:	bfd8      	it	le
 800845c:	f1c2 0c20 	rsble	ip, r2, #32
 8008460:	fa01 f102 	lsl.w	r1, r1, r2
 8008464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008468:	bfdc      	itt	le
 800846a:	ea41 010c 	orrle.w	r1, r1, ip
 800846e:	4090      	lslle	r0, r2
 8008470:	1ae4      	subs	r4, r4, r3
 8008472:	bfa2      	ittt	ge
 8008474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008478:	4329      	orrge	r1, r5
 800847a:	bd30      	popge	{r4, r5, pc}
 800847c:	ea6f 0404 	mvn.w	r4, r4
 8008480:	3c1f      	subs	r4, #31
 8008482:	da1c      	bge.n	80084be <__adddf3+0x1d2>
 8008484:	340c      	adds	r4, #12
 8008486:	dc0e      	bgt.n	80084a6 <__adddf3+0x1ba>
 8008488:	f104 0414 	add.w	r4, r4, #20
 800848c:	f1c4 0220 	rsb	r2, r4, #32
 8008490:	fa20 f004 	lsr.w	r0, r0, r4
 8008494:	fa01 f302 	lsl.w	r3, r1, r2
 8008498:	ea40 0003 	orr.w	r0, r0, r3
 800849c:	fa21 f304 	lsr.w	r3, r1, r4
 80084a0:	ea45 0103 	orr.w	r1, r5, r3
 80084a4:	bd30      	pop	{r4, r5, pc}
 80084a6:	f1c4 040c 	rsb	r4, r4, #12
 80084aa:	f1c4 0220 	rsb	r2, r4, #32
 80084ae:	fa20 f002 	lsr.w	r0, r0, r2
 80084b2:	fa01 f304 	lsl.w	r3, r1, r4
 80084b6:	ea40 0003 	orr.w	r0, r0, r3
 80084ba:	4629      	mov	r1, r5
 80084bc:	bd30      	pop	{r4, r5, pc}
 80084be:	fa21 f004 	lsr.w	r0, r1, r4
 80084c2:	4629      	mov	r1, r5
 80084c4:	bd30      	pop	{r4, r5, pc}
 80084c6:	f094 0f00 	teq	r4, #0
 80084ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80084ce:	bf06      	itte	eq
 80084d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80084d4:	3401      	addeq	r4, #1
 80084d6:	3d01      	subne	r5, #1
 80084d8:	e74e      	b.n	8008378 <__adddf3+0x8c>
 80084da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80084de:	bf18      	it	ne
 80084e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80084e4:	d029      	beq.n	800853a <__adddf3+0x24e>
 80084e6:	ea94 0f05 	teq	r4, r5
 80084ea:	bf08      	it	eq
 80084ec:	ea90 0f02 	teqeq	r0, r2
 80084f0:	d005      	beq.n	80084fe <__adddf3+0x212>
 80084f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80084f6:	bf04      	itt	eq
 80084f8:	4619      	moveq	r1, r3
 80084fa:	4610      	moveq	r0, r2
 80084fc:	bd30      	pop	{r4, r5, pc}
 80084fe:	ea91 0f03 	teq	r1, r3
 8008502:	bf1e      	ittt	ne
 8008504:	2100      	movne	r1, #0
 8008506:	2000      	movne	r0, #0
 8008508:	bd30      	popne	{r4, r5, pc}
 800850a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800850e:	d105      	bne.n	800851c <__adddf3+0x230>
 8008510:	0040      	lsls	r0, r0, #1
 8008512:	4149      	adcs	r1, r1
 8008514:	bf28      	it	cs
 8008516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800851a:	bd30      	pop	{r4, r5, pc}
 800851c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8008520:	bf3c      	itt	cc
 8008522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8008526:	bd30      	popcc	{r4, r5, pc}
 8008528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800852c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8008530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008534:	f04f 0000 	mov.w	r0, #0
 8008538:	bd30      	pop	{r4, r5, pc}
 800853a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800853e:	bf1a      	itte	ne
 8008540:	4619      	movne	r1, r3
 8008542:	4610      	movne	r0, r2
 8008544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008548:	bf1c      	itt	ne
 800854a:	460b      	movne	r3, r1
 800854c:	4602      	movne	r2, r0
 800854e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008552:	bf06      	itte	eq
 8008554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008558:	ea91 0f03 	teqeq	r1, r3
 800855c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008560:	bd30      	pop	{r4, r5, pc}
 8008562:	bf00      	nop

08008564 <__aeabi_ui2d>:
 8008564:	f090 0f00 	teq	r0, #0
 8008568:	bf04      	itt	eq
 800856a:	2100      	moveq	r1, #0
 800856c:	4770      	bxeq	lr
 800856e:	b530      	push	{r4, r5, lr}
 8008570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008578:	f04f 0500 	mov.w	r5, #0
 800857c:	f04f 0100 	mov.w	r1, #0
 8008580:	e750      	b.n	8008424 <__adddf3+0x138>
 8008582:	bf00      	nop

08008584 <__aeabi_i2d>:
 8008584:	f090 0f00 	teq	r0, #0
 8008588:	bf04      	itt	eq
 800858a:	2100      	moveq	r1, #0
 800858c:	4770      	bxeq	lr
 800858e:	b530      	push	{r4, r5, lr}
 8008590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800859c:	bf48      	it	mi
 800859e:	4240      	negmi	r0, r0
 80085a0:	f04f 0100 	mov.w	r1, #0
 80085a4:	e73e      	b.n	8008424 <__adddf3+0x138>
 80085a6:	bf00      	nop

080085a8 <__aeabi_f2d>:
 80085a8:	0042      	lsls	r2, r0, #1
 80085aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80085ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80085b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80085b6:	bf1f      	itttt	ne
 80085b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80085bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80085c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80085c4:	4770      	bxne	lr
 80085c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80085ca:	bf08      	it	eq
 80085cc:	4770      	bxeq	lr
 80085ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80085d2:	bf04      	itt	eq
 80085d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80085d8:	4770      	bxeq	lr
 80085da:	b530      	push	{r4, r5, lr}
 80085dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80085e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80085e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80085e8:	e71c      	b.n	8008424 <__adddf3+0x138>
 80085ea:	bf00      	nop

080085ec <__aeabi_ul2d>:
 80085ec:	ea50 0201 	orrs.w	r2, r0, r1
 80085f0:	bf08      	it	eq
 80085f2:	4770      	bxeq	lr
 80085f4:	b530      	push	{r4, r5, lr}
 80085f6:	f04f 0500 	mov.w	r5, #0
 80085fa:	e00a      	b.n	8008612 <__aeabi_l2d+0x16>

080085fc <__aeabi_l2d>:
 80085fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008600:	bf08      	it	eq
 8008602:	4770      	bxeq	lr
 8008604:	b530      	push	{r4, r5, lr}
 8008606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800860a:	d502      	bpl.n	8008612 <__aeabi_l2d+0x16>
 800860c:	4240      	negs	r0, r0
 800860e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800861a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800861e:	f43f aed8 	beq.w	80083d2 <__adddf3+0xe6>
 8008622:	f04f 0203 	mov.w	r2, #3
 8008626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800862a:	bf18      	it	ne
 800862c:	3203      	addne	r2, #3
 800862e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008632:	bf18      	it	ne
 8008634:	3203      	addne	r2, #3
 8008636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800863a:	f1c2 0320 	rsb	r3, r2, #32
 800863e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008642:	fa20 f002 	lsr.w	r0, r0, r2
 8008646:	fa01 fe03 	lsl.w	lr, r1, r3
 800864a:	ea40 000e 	orr.w	r0, r0, lr
 800864e:	fa21 f102 	lsr.w	r1, r1, r2
 8008652:	4414      	add	r4, r2
 8008654:	e6bd      	b.n	80083d2 <__adddf3+0xe6>
 8008656:	bf00      	nop

08008658 <__aeabi_dmul>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800865e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008666:	bf1d      	ittte	ne
 8008668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800866c:	ea94 0f0c 	teqne	r4, ip
 8008670:	ea95 0f0c 	teqne	r5, ip
 8008674:	f000 f8de 	bleq	8008834 <__aeabi_dmul+0x1dc>
 8008678:	442c      	add	r4, r5
 800867a:	ea81 0603 	eor.w	r6, r1, r3
 800867e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800868a:	bf18      	it	ne
 800868c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008698:	d038      	beq.n	800870c <__aeabi_dmul+0xb4>
 800869a:	fba0 ce02 	umull	ip, lr, r0, r2
 800869e:	f04f 0500 	mov.w	r5, #0
 80086a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80086a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80086aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80086ae:	f04f 0600 	mov.w	r6, #0
 80086b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80086b6:	f09c 0f00 	teq	ip, #0
 80086ba:	bf18      	it	ne
 80086bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80086c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80086c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80086c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80086cc:	d204      	bcs.n	80086d8 <__aeabi_dmul+0x80>
 80086ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80086d2:	416d      	adcs	r5, r5
 80086d4:	eb46 0606 	adc.w	r6, r6, r6
 80086d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80086dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80086e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80086e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80086e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80086ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80086f0:	bf88      	it	hi
 80086f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80086f6:	d81e      	bhi.n	8008736 <__aeabi_dmul+0xde>
 80086f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80086fc:	bf08      	it	eq
 80086fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008702:	f150 0000 	adcs.w	r0, r0, #0
 8008706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8008710:	ea46 0101 	orr.w	r1, r6, r1
 8008714:	ea40 0002 	orr.w	r0, r0, r2
 8008718:	ea81 0103 	eor.w	r1, r1, r3
 800871c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008720:	bfc2      	ittt	gt
 8008722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800872a:	bd70      	popgt	{r4, r5, r6, pc}
 800872c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008730:	f04f 0e00 	mov.w	lr, #0
 8008734:	3c01      	subs	r4, #1
 8008736:	f300 80ab 	bgt.w	8008890 <__aeabi_dmul+0x238>
 800873a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800873e:	bfde      	ittt	le
 8008740:	2000      	movle	r0, #0
 8008742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8008746:	bd70      	pople	{r4, r5, r6, pc}
 8008748:	f1c4 0400 	rsb	r4, r4, #0
 800874c:	3c20      	subs	r4, #32
 800874e:	da35      	bge.n	80087bc <__aeabi_dmul+0x164>
 8008750:	340c      	adds	r4, #12
 8008752:	dc1b      	bgt.n	800878c <__aeabi_dmul+0x134>
 8008754:	f104 0414 	add.w	r4, r4, #20
 8008758:	f1c4 0520 	rsb	r5, r4, #32
 800875c:	fa00 f305 	lsl.w	r3, r0, r5
 8008760:	fa20 f004 	lsr.w	r0, r0, r4
 8008764:	fa01 f205 	lsl.w	r2, r1, r5
 8008768:	ea40 0002 	orr.w	r0, r0, r2
 800876c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8008770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008778:	fa21 f604 	lsr.w	r6, r1, r4
 800877c:	eb42 0106 	adc.w	r1, r2, r6
 8008780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008784:	bf08      	it	eq
 8008786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	f1c4 040c 	rsb	r4, r4, #12
 8008790:	f1c4 0520 	rsb	r5, r4, #32
 8008794:	fa00 f304 	lsl.w	r3, r0, r4
 8008798:	fa20 f005 	lsr.w	r0, r0, r5
 800879c:	fa01 f204 	lsl.w	r2, r1, r4
 80087a0:	ea40 0002 	orr.w	r0, r0, r2
 80087a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80087ac:	f141 0100 	adc.w	r1, r1, #0
 80087b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087b4:	bf08      	it	eq
 80087b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	f1c4 0520 	rsb	r5, r4, #32
 80087c0:	fa00 f205 	lsl.w	r2, r0, r5
 80087c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80087c8:	fa20 f304 	lsr.w	r3, r0, r4
 80087cc:	fa01 f205 	lsl.w	r2, r1, r5
 80087d0:	ea43 0302 	orr.w	r3, r3, r2
 80087d4:	fa21 f004 	lsr.w	r0, r1, r4
 80087d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80087dc:	fa21 f204 	lsr.w	r2, r1, r4
 80087e0:	ea20 0002 	bic.w	r0, r0, r2
 80087e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80087e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087ec:	bf08      	it	eq
 80087ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087f2:	bd70      	pop	{r4, r5, r6, pc}
 80087f4:	f094 0f00 	teq	r4, #0
 80087f8:	d10f      	bne.n	800881a <__aeabi_dmul+0x1c2>
 80087fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80087fe:	0040      	lsls	r0, r0, #1
 8008800:	eb41 0101 	adc.w	r1, r1, r1
 8008804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008808:	bf08      	it	eq
 800880a:	3c01      	subeq	r4, #1
 800880c:	d0f7      	beq.n	80087fe <__aeabi_dmul+0x1a6>
 800880e:	ea41 0106 	orr.w	r1, r1, r6
 8008812:	f095 0f00 	teq	r5, #0
 8008816:	bf18      	it	ne
 8008818:	4770      	bxne	lr
 800881a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800881e:	0052      	lsls	r2, r2, #1
 8008820:	eb43 0303 	adc.w	r3, r3, r3
 8008824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008828:	bf08      	it	eq
 800882a:	3d01      	subeq	r5, #1
 800882c:	d0f7      	beq.n	800881e <__aeabi_dmul+0x1c6>
 800882e:	ea43 0306 	orr.w	r3, r3, r6
 8008832:	4770      	bx	lr
 8008834:	ea94 0f0c 	teq	r4, ip
 8008838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800883c:	bf18      	it	ne
 800883e:	ea95 0f0c 	teqne	r5, ip
 8008842:	d00c      	beq.n	800885e <__aeabi_dmul+0x206>
 8008844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008848:	bf18      	it	ne
 800884a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800884e:	d1d1      	bne.n	80087f4 <__aeabi_dmul+0x19c>
 8008850:	ea81 0103 	eor.w	r1, r1, r3
 8008854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008858:	f04f 0000 	mov.w	r0, #0
 800885c:	bd70      	pop	{r4, r5, r6, pc}
 800885e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008862:	bf06      	itte	eq
 8008864:	4610      	moveq	r0, r2
 8008866:	4619      	moveq	r1, r3
 8008868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800886c:	d019      	beq.n	80088a2 <__aeabi_dmul+0x24a>
 800886e:	ea94 0f0c 	teq	r4, ip
 8008872:	d102      	bne.n	800887a <__aeabi_dmul+0x222>
 8008874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008878:	d113      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800887a:	ea95 0f0c 	teq	r5, ip
 800887e:	d105      	bne.n	800888c <__aeabi_dmul+0x234>
 8008880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008884:	bf1c      	itt	ne
 8008886:	4610      	movne	r0, r2
 8008888:	4619      	movne	r1, r3
 800888a:	d10a      	bne.n	80088a2 <__aeabi_dmul+0x24a>
 800888c:	ea81 0103 	eor.w	r1, r1, r3
 8008890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8008898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800889c:	f04f 0000 	mov.w	r0, #0
 80088a0:	bd70      	pop	{r4, r5, r6, pc}
 80088a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80088a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80088aa:	bd70      	pop	{r4, r5, r6, pc}

080088ac <__aeabi_ddiv>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80088b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80088b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80088ba:	bf1d      	ittte	ne
 80088bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80088c0:	ea94 0f0c 	teqne	r4, ip
 80088c4:	ea95 0f0c 	teqne	r5, ip
 80088c8:	f000 f8a7 	bleq	8008a1a <__aeabi_ddiv+0x16e>
 80088cc:	eba4 0405 	sub.w	r4, r4, r5
 80088d0:	ea81 0e03 	eor.w	lr, r1, r3
 80088d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80088d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80088dc:	f000 8088 	beq.w	80089f0 <__aeabi_ddiv+0x144>
 80088e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80088e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80088e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80088ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80088f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80088f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80088f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80088fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8008904:	429d      	cmp	r5, r3
 8008906:	bf08      	it	eq
 8008908:	4296      	cmpeq	r6, r2
 800890a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800890e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8008912:	d202      	bcs.n	800891a <__aeabi_ddiv+0x6e>
 8008914:	085b      	lsrs	r3, r3, #1
 8008916:	ea4f 0232 	mov.w	r2, r2, rrx
 800891a:	1ab6      	subs	r6, r6, r2
 800891c:	eb65 0503 	sbc.w	r5, r5, r3
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	ea4f 0232 	mov.w	r2, r2, rrx
 8008926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800892a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800892e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008936:	bf22      	ittt	cs
 8008938:	1ab6      	subcs	r6, r6, r2
 800893a:	4675      	movcs	r5, lr
 800893c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008940:	085b      	lsrs	r3, r3, #1
 8008942:	ea4f 0232 	mov.w	r2, r2, rrx
 8008946:	ebb6 0e02 	subs.w	lr, r6, r2
 800894a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800894e:	bf22      	ittt	cs
 8008950:	1ab6      	subcs	r6, r6, r2
 8008952:	4675      	movcs	r5, lr
 8008954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008958:	085b      	lsrs	r3, r3, #1
 800895a:	ea4f 0232 	mov.w	r2, r2, rrx
 800895e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008966:	bf22      	ittt	cs
 8008968:	1ab6      	subcs	r6, r6, r2
 800896a:	4675      	movcs	r5, lr
 800896c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008970:	085b      	lsrs	r3, r3, #1
 8008972:	ea4f 0232 	mov.w	r2, r2, rrx
 8008976:	ebb6 0e02 	subs.w	lr, r6, r2
 800897a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800897e:	bf22      	ittt	cs
 8008980:	1ab6      	subcs	r6, r6, r2
 8008982:	4675      	movcs	r5, lr
 8008984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008988:	ea55 0e06 	orrs.w	lr, r5, r6
 800898c:	d018      	beq.n	80089c0 <__aeabi_ddiv+0x114>
 800898e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800899a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800899e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80089a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80089a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80089aa:	d1c0      	bne.n	800892e <__aeabi_ddiv+0x82>
 80089ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089b0:	d10b      	bne.n	80089ca <__aeabi_ddiv+0x11e>
 80089b2:	ea41 0100 	orr.w	r1, r1, r0
 80089b6:	f04f 0000 	mov.w	r0, #0
 80089ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80089be:	e7b6      	b.n	800892e <__aeabi_ddiv+0x82>
 80089c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80089c4:	bf04      	itt	eq
 80089c6:	4301      	orreq	r1, r0
 80089c8:	2000      	moveq	r0, #0
 80089ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80089ce:	bf88      	it	hi
 80089d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80089d4:	f63f aeaf 	bhi.w	8008736 <__aeabi_dmul+0xde>
 80089d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80089dc:	bf04      	itt	eq
 80089de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80089e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80089e6:	f150 0000 	adcs.w	r0, r0, #0
 80089ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80089f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80089f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80089fc:	bfc2      	ittt	gt
 80089fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008a06:	bd70      	popgt	{r4, r5, r6, pc}
 8008a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008a0c:	f04f 0e00 	mov.w	lr, #0
 8008a10:	3c01      	subs	r4, #1
 8008a12:	e690      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a14:	ea45 0e06 	orr.w	lr, r5, r6
 8008a18:	e68d      	b.n	8008736 <__aeabi_dmul+0xde>
 8008a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008a1e:	ea94 0f0c 	teq	r4, ip
 8008a22:	bf08      	it	eq
 8008a24:	ea95 0f0c 	teqeq	r5, ip
 8008a28:	f43f af3b 	beq.w	80088a2 <__aeabi_dmul+0x24a>
 8008a2c:	ea94 0f0c 	teq	r4, ip
 8008a30:	d10a      	bne.n	8008a48 <__aeabi_ddiv+0x19c>
 8008a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008a36:	f47f af34 	bne.w	80088a2 <__aeabi_dmul+0x24a>
 8008a3a:	ea95 0f0c 	teq	r5, ip
 8008a3e:	f47f af25 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a42:	4610      	mov	r0, r2
 8008a44:	4619      	mov	r1, r3
 8008a46:	e72c      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a48:	ea95 0f0c 	teq	r5, ip
 8008a4c:	d106      	bne.n	8008a5c <__aeabi_ddiv+0x1b0>
 8008a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008a52:	f43f aefd 	beq.w	8008850 <__aeabi_dmul+0x1f8>
 8008a56:	4610      	mov	r0, r2
 8008a58:	4619      	mov	r1, r3
 8008a5a:	e722      	b.n	80088a2 <__aeabi_dmul+0x24a>
 8008a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008a60:	bf18      	it	ne
 8008a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008a66:	f47f aec5 	bne.w	80087f4 <__aeabi_dmul+0x19c>
 8008a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008a6e:	f47f af0d 	bne.w	800888c <__aeabi_dmul+0x234>
 8008a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008a76:	f47f aeeb 	bne.w	8008850 <__aeabi_dmul+0x1f8>
 8008a7a:	e712      	b.n	80088a2 <__aeabi_dmul+0x24a>

08008a7c <__gedf2>:
 8008a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8008a80:	e006      	b.n	8008a90 <__cmpdf2+0x4>
 8008a82:	bf00      	nop

08008a84 <__ledf2>:
 8008a84:	f04f 0c01 	mov.w	ip, #1
 8008a88:	e002      	b.n	8008a90 <__cmpdf2+0x4>
 8008a8a:	bf00      	nop

08008a8c <__cmpdf2>:
 8008a8c:	f04f 0c01 	mov.w	ip, #1
 8008a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008aa0:	bf18      	it	ne
 8008aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008aa6:	d01b      	beq.n	8008ae0 <__cmpdf2+0x54>
 8008aa8:	b001      	add	sp, #4
 8008aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008aae:	bf0c      	ite	eq
 8008ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008ab4:	ea91 0f03 	teqne	r1, r3
 8008ab8:	bf02      	ittt	eq
 8008aba:	ea90 0f02 	teqeq	r0, r2
 8008abe:	2000      	moveq	r0, #0
 8008ac0:	4770      	bxeq	lr
 8008ac2:	f110 0f00 	cmn.w	r0, #0
 8008ac6:	ea91 0f03 	teq	r1, r3
 8008aca:	bf58      	it	pl
 8008acc:	4299      	cmppl	r1, r3
 8008ace:	bf08      	it	eq
 8008ad0:	4290      	cmpeq	r0, r2
 8008ad2:	bf2c      	ite	cs
 8008ad4:	17d8      	asrcs	r0, r3, #31
 8008ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008ada:	f040 0001 	orr.w	r0, r0, #1
 8008ade:	4770      	bx	lr
 8008ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ae8:	d102      	bne.n	8008af0 <__cmpdf2+0x64>
 8008aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008aee:	d107      	bne.n	8008b00 <__cmpdf2+0x74>
 8008af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008af8:	d1d6      	bne.n	8008aa8 <__cmpdf2+0x1c>
 8008afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008afe:	d0d3      	beq.n	8008aa8 <__cmpdf2+0x1c>
 8008b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop

08008b08 <__aeabi_cdrcmple>:
 8008b08:	4684      	mov	ip, r0
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	4662      	mov	r2, ip
 8008b0e:	468c      	mov	ip, r1
 8008b10:	4619      	mov	r1, r3
 8008b12:	4663      	mov	r3, ip
 8008b14:	e000      	b.n	8008b18 <__aeabi_cdcmpeq>
 8008b16:	bf00      	nop

08008b18 <__aeabi_cdcmpeq>:
 8008b18:	b501      	push	{r0, lr}
 8008b1a:	f7ff ffb7 	bl	8008a8c <__cmpdf2>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	bf48      	it	mi
 8008b22:	f110 0f00 	cmnmi.w	r0, #0
 8008b26:	bd01      	pop	{r0, pc}

08008b28 <__aeabi_dcmpeq>:
 8008b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b2c:	f7ff fff4 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b30:	bf0c      	ite	eq
 8008b32:	2001      	moveq	r0, #1
 8008b34:	2000      	movne	r0, #0
 8008b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b3a:	bf00      	nop

08008b3c <__aeabi_dcmplt>:
 8008b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b40:	f7ff ffea 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b44:	bf34      	ite	cc
 8008b46:	2001      	movcc	r0, #1
 8008b48:	2000      	movcs	r0, #0
 8008b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b4e:	bf00      	nop

08008b50 <__aeabi_dcmple>:
 8008b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b54:	f7ff ffe0 	bl	8008b18 <__aeabi_cdcmpeq>
 8008b58:	bf94      	ite	ls
 8008b5a:	2001      	movls	r0, #1
 8008b5c:	2000      	movhi	r0, #0
 8008b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b62:	bf00      	nop

08008b64 <__aeabi_dcmpge>:
 8008b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b68:	f7ff ffce 	bl	8008b08 <__aeabi_cdrcmple>
 8008b6c:	bf94      	ite	ls
 8008b6e:	2001      	movls	r0, #1
 8008b70:	2000      	movhi	r0, #0
 8008b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b76:	bf00      	nop

08008b78 <__aeabi_dcmpgt>:
 8008b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b7c:	f7ff ffc4 	bl	8008b08 <__aeabi_cdrcmple>
 8008b80:	bf34      	ite	cc
 8008b82:	2001      	movcc	r0, #1
 8008b84:	2000      	movcs	r0, #0
 8008b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b8a:	bf00      	nop

08008b8c <__aeabi_dcmpun>:
 8008b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b94:	d102      	bne.n	8008b9c <__aeabi_dcmpun+0x10>
 8008b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008b9a:	d10a      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ba4:	d102      	bne.n	8008bac <__aeabi_dcmpun+0x20>
 8008ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008baa:	d102      	bne.n	8008bb2 <__aeabi_dcmpun+0x26>
 8008bac:	f04f 0000 	mov.w	r0, #0
 8008bb0:	4770      	bx	lr
 8008bb2:	f04f 0001 	mov.w	r0, #1
 8008bb6:	4770      	bx	lr

08008bb8 <__aeabi_d2iz>:
 8008bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008bc0:	d215      	bcs.n	8008bee <__aeabi_d2iz+0x36>
 8008bc2:	d511      	bpl.n	8008be8 <__aeabi_d2iz+0x30>
 8008bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008bcc:	d912      	bls.n	8008bf4 <__aeabi_d2iz+0x3c>
 8008bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008bde:	fa23 f002 	lsr.w	r0, r3, r2
 8008be2:	bf18      	it	ne
 8008be4:	4240      	negne	r0, r0
 8008be6:	4770      	bx	lr
 8008be8:	f04f 0000 	mov.w	r0, #0
 8008bec:	4770      	bx	lr
 8008bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008bf2:	d105      	bne.n	8008c00 <__aeabi_d2iz+0x48>
 8008bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008bf8:	bf08      	it	eq
 8008bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008bfe:	4770      	bx	lr
 8008c00:	f04f 0000 	mov.w	r0, #0
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop

08008c08 <__aeabi_d2uiz>:
 8008c08:	004a      	lsls	r2, r1, #1
 8008c0a:	d211      	bcs.n	8008c30 <__aeabi_d2uiz+0x28>
 8008c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008c10:	d211      	bcs.n	8008c36 <__aeabi_d2uiz+0x2e>
 8008c12:	d50d      	bpl.n	8008c30 <__aeabi_d2uiz+0x28>
 8008c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008c1c:	d40e      	bmi.n	8008c3c <__aeabi_d2uiz+0x34>
 8008c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8008c2e:	4770      	bx	lr
 8008c30:	f04f 0000 	mov.w	r0, #0
 8008c34:	4770      	bx	lr
 8008c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008c3a:	d102      	bne.n	8008c42 <__aeabi_d2uiz+0x3a>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	4770      	bx	lr
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	4770      	bx	lr

08008c48 <__aeabi_uldivmod>:
 8008c48:	b953      	cbnz	r3, 8008c60 <__aeabi_uldivmod+0x18>
 8008c4a:	b94a      	cbnz	r2, 8008c60 <__aeabi_uldivmod+0x18>
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	bf08      	it	eq
 8008c50:	2800      	cmpeq	r0, #0
 8008c52:	bf1c      	itt	ne
 8008c54:	f04f 31ff 	movne.w	r1, #4294967295
 8008c58:	f04f 30ff 	movne.w	r0, #4294967295
 8008c5c:	f000 b9be 	b.w	8008fdc <__aeabi_idiv0>
 8008c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8008c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008c68:	f000 f83c 	bl	8008ce4 <__udivmoddi4>
 8008c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c74:	b004      	add	sp, #16
 8008c76:	4770      	bx	lr

08008c78 <__aeabi_d2lz>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	460d      	mov	r5, r1
 8008c82:	f7ff ff5b 	bl	8008b3c <__aeabi_dcmplt>
 8008c86:	b928      	cbnz	r0, 8008c94 <__aeabi_d2lz+0x1c>
 8008c88:	4620      	mov	r0, r4
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c90:	f000 b80a 	b.w	8008ca8 <__aeabi_d2ulz>
 8008c94:	4620      	mov	r0, r4
 8008c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8008c9a:	f000 f805 	bl	8008ca8 <__aeabi_d2ulz>
 8008c9e:	4240      	negs	r0, r0
 8008ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008ca4:	bd38      	pop	{r3, r4, r5, pc}
 8008ca6:	bf00      	nop

08008ca8 <__aeabi_d2ulz>:
 8008ca8:	b5d0      	push	{r4, r6, r7, lr}
 8008caa:	4b0c      	ldr	r3, [pc, #48]	@ (8008cdc <__aeabi_d2ulz+0x34>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460f      	mov	r7, r1
 8008cb2:	f7ff fcd1 	bl	8008658 <__aeabi_dmul>
 8008cb6:	f7ff ffa7 	bl	8008c08 <__aeabi_d2uiz>
 8008cba:	4604      	mov	r4, r0
 8008cbc:	f7ff fc52 	bl	8008564 <__aeabi_ui2d>
 8008cc0:	4b07      	ldr	r3, [pc, #28]	@ (8008ce0 <__aeabi_d2ulz+0x38>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f7ff fcc8 	bl	8008658 <__aeabi_dmul>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4630      	mov	r0, r6
 8008cce:	4639      	mov	r1, r7
 8008cd0:	f7ff fb0a 	bl	80082e8 <__aeabi_dsub>
 8008cd4:	f7ff ff98 	bl	8008c08 <__aeabi_d2uiz>
 8008cd8:	4621      	mov	r1, r4
 8008cda:	bdd0      	pop	{r4, r6, r7, pc}
 8008cdc:	3df00000 	.word	0x3df00000
 8008ce0:	41f00000 	.word	0x41f00000

08008ce4 <__udivmoddi4>:
 8008ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce8:	9d08      	ldr	r5, [sp, #32]
 8008cea:	468e      	mov	lr, r1
 8008cec:	4604      	mov	r4, r0
 8008cee:	4688      	mov	r8, r1
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d14a      	bne.n	8008d8a <__udivmoddi4+0xa6>
 8008cf4:	428a      	cmp	r2, r1
 8008cf6:	4617      	mov	r7, r2
 8008cf8:	d962      	bls.n	8008dc0 <__udivmoddi4+0xdc>
 8008cfa:	fab2 f682 	clz	r6, r2
 8008cfe:	b14e      	cbz	r6, 8008d14 <__udivmoddi4+0x30>
 8008d00:	f1c6 0320 	rsb	r3, r6, #32
 8008d04:	fa01 f806 	lsl.w	r8, r1, r6
 8008d08:	fa20 f303 	lsr.w	r3, r0, r3
 8008d0c:	40b7      	lsls	r7, r6
 8008d0e:	ea43 0808 	orr.w	r8, r3, r8
 8008d12:	40b4      	lsls	r4, r6
 8008d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008d18:	fa1f fc87 	uxth.w	ip, r7
 8008d1c:	fbb8 f1fe 	udiv	r1, r8, lr
 8008d20:	0c23      	lsrs	r3, r4, #16
 8008d22:	fb0e 8811 	mls	r8, lr, r1, r8
 8008d26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008d2a:	fb01 f20c 	mul.w	r2, r1, ip
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d909      	bls.n	8008d46 <__udivmoddi4+0x62>
 8008d32:	18fb      	adds	r3, r7, r3
 8008d34:	f101 30ff 	add.w	r0, r1, #4294967295
 8008d38:	f080 80ea 	bcs.w	8008f10 <__udivmoddi4+0x22c>
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	f240 80e7 	bls.w	8008f10 <__udivmoddi4+0x22c>
 8008d42:	3902      	subs	r1, #2
 8008d44:	443b      	add	r3, r7
 8008d46:	1a9a      	subs	r2, r3, r2
 8008d48:	b2a3      	uxth	r3, r4
 8008d4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8008d4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8008d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d56:	fb00 fc0c 	mul.w	ip, r0, ip
 8008d5a:	459c      	cmp	ip, r3
 8008d5c:	d909      	bls.n	8008d72 <__udivmoddi4+0x8e>
 8008d5e:	18fb      	adds	r3, r7, r3
 8008d60:	f100 32ff 	add.w	r2, r0, #4294967295
 8008d64:	f080 80d6 	bcs.w	8008f14 <__udivmoddi4+0x230>
 8008d68:	459c      	cmp	ip, r3
 8008d6a:	f240 80d3 	bls.w	8008f14 <__udivmoddi4+0x230>
 8008d6e:	443b      	add	r3, r7
 8008d70:	3802      	subs	r0, #2
 8008d72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008d76:	eba3 030c 	sub.w	r3, r3, ip
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	b11d      	cbz	r5, 8008d86 <__udivmoddi4+0xa2>
 8008d7e:	40f3      	lsrs	r3, r6
 8008d80:	2200      	movs	r2, #0
 8008d82:	e9c5 3200 	strd	r3, r2, [r5]
 8008d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8a:	428b      	cmp	r3, r1
 8008d8c:	d905      	bls.n	8008d9a <__udivmoddi4+0xb6>
 8008d8e:	b10d      	cbz	r5, 8008d94 <__udivmoddi4+0xb0>
 8008d90:	e9c5 0100 	strd	r0, r1, [r5]
 8008d94:	2100      	movs	r1, #0
 8008d96:	4608      	mov	r0, r1
 8008d98:	e7f5      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008d9a:	fab3 f183 	clz	r1, r3
 8008d9e:	2900      	cmp	r1, #0
 8008da0:	d146      	bne.n	8008e30 <__udivmoddi4+0x14c>
 8008da2:	4573      	cmp	r3, lr
 8008da4:	d302      	bcc.n	8008dac <__udivmoddi4+0xc8>
 8008da6:	4282      	cmp	r2, r0
 8008da8:	f200 8105 	bhi.w	8008fb6 <__udivmoddi4+0x2d2>
 8008dac:	1a84      	subs	r4, r0, r2
 8008dae:	eb6e 0203 	sbc.w	r2, lr, r3
 8008db2:	2001      	movs	r0, #1
 8008db4:	4690      	mov	r8, r2
 8008db6:	2d00      	cmp	r5, #0
 8008db8:	d0e5      	beq.n	8008d86 <__udivmoddi4+0xa2>
 8008dba:	e9c5 4800 	strd	r4, r8, [r5]
 8008dbe:	e7e2      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008dc0:	2a00      	cmp	r2, #0
 8008dc2:	f000 8090 	beq.w	8008ee6 <__udivmoddi4+0x202>
 8008dc6:	fab2 f682 	clz	r6, r2
 8008dca:	2e00      	cmp	r6, #0
 8008dcc:	f040 80a4 	bne.w	8008f18 <__udivmoddi4+0x234>
 8008dd0:	1a8a      	subs	r2, r1, r2
 8008dd2:	0c03      	lsrs	r3, r0, #16
 8008dd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008dd8:	b280      	uxth	r0, r0
 8008dda:	b2bc      	uxth	r4, r7
 8008ddc:	2101      	movs	r1, #1
 8008dde:	fbb2 fcfe 	udiv	ip, r2, lr
 8008de2:	fb0e 221c 	mls	r2, lr, ip, r2
 8008de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dea:	fb04 f20c 	mul.w	r2, r4, ip
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d907      	bls.n	8008e02 <__udivmoddi4+0x11e>
 8008df2:	18fb      	adds	r3, r7, r3
 8008df4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008df8:	d202      	bcs.n	8008e00 <__udivmoddi4+0x11c>
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	f200 80e0 	bhi.w	8008fc0 <__udivmoddi4+0x2dc>
 8008e00:	46c4      	mov	ip, r8
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	fbb3 f2fe 	udiv	r2, r3, lr
 8008e08:	fb0e 3312 	mls	r3, lr, r2, r3
 8008e0c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8008e10:	fb02 f404 	mul.w	r4, r2, r4
 8008e14:	429c      	cmp	r4, r3
 8008e16:	d907      	bls.n	8008e28 <__udivmoddi4+0x144>
 8008e18:	18fb      	adds	r3, r7, r3
 8008e1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8008e1e:	d202      	bcs.n	8008e26 <__udivmoddi4+0x142>
 8008e20:	429c      	cmp	r4, r3
 8008e22:	f200 80ca 	bhi.w	8008fba <__udivmoddi4+0x2d6>
 8008e26:	4602      	mov	r2, r0
 8008e28:	1b1b      	subs	r3, r3, r4
 8008e2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8008e2e:	e7a5      	b.n	8008d7c <__udivmoddi4+0x98>
 8008e30:	f1c1 0620 	rsb	r6, r1, #32
 8008e34:	408b      	lsls	r3, r1
 8008e36:	fa22 f706 	lsr.w	r7, r2, r6
 8008e3a:	431f      	orrs	r7, r3
 8008e3c:	fa0e f401 	lsl.w	r4, lr, r1
 8008e40:	fa20 f306 	lsr.w	r3, r0, r6
 8008e44:	fa2e fe06 	lsr.w	lr, lr, r6
 8008e48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008e4c:	4323      	orrs	r3, r4
 8008e4e:	fa00 f801 	lsl.w	r8, r0, r1
 8008e52:	fa1f fc87 	uxth.w	ip, r7
 8008e56:	fbbe f0f9 	udiv	r0, lr, r9
 8008e5a:	0c1c      	lsrs	r4, r3, #16
 8008e5c:	fb09 ee10 	mls	lr, r9, r0, lr
 8008e60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008e64:	fb00 fe0c 	mul.w	lr, r0, ip
 8008e68:	45a6      	cmp	lr, r4
 8008e6a:	fa02 f201 	lsl.w	r2, r2, r1
 8008e6e:	d909      	bls.n	8008e84 <__udivmoddi4+0x1a0>
 8008e70:	193c      	adds	r4, r7, r4
 8008e72:	f100 3aff 	add.w	sl, r0, #4294967295
 8008e76:	f080 809c 	bcs.w	8008fb2 <__udivmoddi4+0x2ce>
 8008e7a:	45a6      	cmp	lr, r4
 8008e7c:	f240 8099 	bls.w	8008fb2 <__udivmoddi4+0x2ce>
 8008e80:	3802      	subs	r0, #2
 8008e82:	443c      	add	r4, r7
 8008e84:	eba4 040e 	sub.w	r4, r4, lr
 8008e88:	fa1f fe83 	uxth.w	lr, r3
 8008e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8008e90:	fb09 4413 	mls	r4, r9, r3, r4
 8008e94:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8008e98:	fb03 fc0c 	mul.w	ip, r3, ip
 8008e9c:	45a4      	cmp	ip, r4
 8008e9e:	d908      	bls.n	8008eb2 <__udivmoddi4+0x1ce>
 8008ea0:	193c      	adds	r4, r7, r4
 8008ea2:	f103 3eff 	add.w	lr, r3, #4294967295
 8008ea6:	f080 8082 	bcs.w	8008fae <__udivmoddi4+0x2ca>
 8008eaa:	45a4      	cmp	ip, r4
 8008eac:	d97f      	bls.n	8008fae <__udivmoddi4+0x2ca>
 8008eae:	3b02      	subs	r3, #2
 8008eb0:	443c      	add	r4, r7
 8008eb2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008eb6:	eba4 040c 	sub.w	r4, r4, ip
 8008eba:	fba0 ec02 	umull	lr, ip, r0, r2
 8008ebe:	4564      	cmp	r4, ip
 8008ec0:	4673      	mov	r3, lr
 8008ec2:	46e1      	mov	r9, ip
 8008ec4:	d362      	bcc.n	8008f8c <__udivmoddi4+0x2a8>
 8008ec6:	d05f      	beq.n	8008f88 <__udivmoddi4+0x2a4>
 8008ec8:	b15d      	cbz	r5, 8008ee2 <__udivmoddi4+0x1fe>
 8008eca:	ebb8 0203 	subs.w	r2, r8, r3
 8008ece:	eb64 0409 	sbc.w	r4, r4, r9
 8008ed2:	fa04 f606 	lsl.w	r6, r4, r6
 8008ed6:	fa22 f301 	lsr.w	r3, r2, r1
 8008eda:	431e      	orrs	r6, r3
 8008edc:	40cc      	lsrs	r4, r1
 8008ede:	e9c5 6400 	strd	r6, r4, [r5]
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	e74f      	b.n	8008d86 <__udivmoddi4+0xa2>
 8008ee6:	fbb1 fcf2 	udiv	ip, r1, r2
 8008eea:	0c01      	lsrs	r1, r0, #16
 8008eec:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8008ef0:	b280      	uxth	r0, r0
 8008ef2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8008ef6:	463b      	mov	r3, r7
 8008ef8:	4638      	mov	r0, r7
 8008efa:	463c      	mov	r4, r7
 8008efc:	46b8      	mov	r8, r7
 8008efe:	46be      	mov	lr, r7
 8008f00:	2620      	movs	r6, #32
 8008f02:	fbb1 f1f7 	udiv	r1, r1, r7
 8008f06:	eba2 0208 	sub.w	r2, r2, r8
 8008f0a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8008f0e:	e766      	b.n	8008dde <__udivmoddi4+0xfa>
 8008f10:	4601      	mov	r1, r0
 8008f12:	e718      	b.n	8008d46 <__udivmoddi4+0x62>
 8008f14:	4610      	mov	r0, r2
 8008f16:	e72c      	b.n	8008d72 <__udivmoddi4+0x8e>
 8008f18:	f1c6 0220 	rsb	r2, r6, #32
 8008f1c:	fa2e f302 	lsr.w	r3, lr, r2
 8008f20:	40b7      	lsls	r7, r6
 8008f22:	40b1      	lsls	r1, r6
 8008f24:	fa20 f202 	lsr.w	r2, r0, r2
 8008f28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	fbb3 f8fe 	udiv	r8, r3, lr
 8008f32:	b2bc      	uxth	r4, r7
 8008f34:	fb0e 3318 	mls	r3, lr, r8, r3
 8008f38:	0c11      	lsrs	r1, r2, #16
 8008f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008f3e:	fb08 f904 	mul.w	r9, r8, r4
 8008f42:	40b0      	lsls	r0, r6
 8008f44:	4589      	cmp	r9, r1
 8008f46:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8008f4a:	b280      	uxth	r0, r0
 8008f4c:	d93e      	bls.n	8008fcc <__udivmoddi4+0x2e8>
 8008f4e:	1879      	adds	r1, r7, r1
 8008f50:	f108 3cff 	add.w	ip, r8, #4294967295
 8008f54:	d201      	bcs.n	8008f5a <__udivmoddi4+0x276>
 8008f56:	4589      	cmp	r9, r1
 8008f58:	d81f      	bhi.n	8008f9a <__udivmoddi4+0x2b6>
 8008f5a:	eba1 0109 	sub.w	r1, r1, r9
 8008f5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8008f62:	fb09 f804 	mul.w	r8, r9, r4
 8008f66:	fb0e 1119 	mls	r1, lr, r9, r1
 8008f6a:	b292      	uxth	r2, r2
 8008f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008f70:	4542      	cmp	r2, r8
 8008f72:	d229      	bcs.n	8008fc8 <__udivmoddi4+0x2e4>
 8008f74:	18ba      	adds	r2, r7, r2
 8008f76:	f109 31ff 	add.w	r1, r9, #4294967295
 8008f7a:	d2c4      	bcs.n	8008f06 <__udivmoddi4+0x222>
 8008f7c:	4542      	cmp	r2, r8
 8008f7e:	d2c2      	bcs.n	8008f06 <__udivmoddi4+0x222>
 8008f80:	f1a9 0102 	sub.w	r1, r9, #2
 8008f84:	443a      	add	r2, r7
 8008f86:	e7be      	b.n	8008f06 <__udivmoddi4+0x222>
 8008f88:	45f0      	cmp	r8, lr
 8008f8a:	d29d      	bcs.n	8008ec8 <__udivmoddi4+0x1e4>
 8008f8c:	ebbe 0302 	subs.w	r3, lr, r2
 8008f90:	eb6c 0c07 	sbc.w	ip, ip, r7
 8008f94:	3801      	subs	r0, #1
 8008f96:	46e1      	mov	r9, ip
 8008f98:	e796      	b.n	8008ec8 <__udivmoddi4+0x1e4>
 8008f9a:	eba7 0909 	sub.w	r9, r7, r9
 8008f9e:	4449      	add	r1, r9
 8008fa0:	f1a8 0c02 	sub.w	ip, r8, #2
 8008fa4:	fbb1 f9fe 	udiv	r9, r1, lr
 8008fa8:	fb09 f804 	mul.w	r8, r9, r4
 8008fac:	e7db      	b.n	8008f66 <__udivmoddi4+0x282>
 8008fae:	4673      	mov	r3, lr
 8008fb0:	e77f      	b.n	8008eb2 <__udivmoddi4+0x1ce>
 8008fb2:	4650      	mov	r0, sl
 8008fb4:	e766      	b.n	8008e84 <__udivmoddi4+0x1a0>
 8008fb6:	4608      	mov	r0, r1
 8008fb8:	e6fd      	b.n	8008db6 <__udivmoddi4+0xd2>
 8008fba:	443b      	add	r3, r7
 8008fbc:	3a02      	subs	r2, #2
 8008fbe:	e733      	b.n	8008e28 <__udivmoddi4+0x144>
 8008fc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8008fc4:	443b      	add	r3, r7
 8008fc6:	e71c      	b.n	8008e02 <__udivmoddi4+0x11e>
 8008fc8:	4649      	mov	r1, r9
 8008fca:	e79c      	b.n	8008f06 <__udivmoddi4+0x222>
 8008fcc:	eba1 0109 	sub.w	r1, r1, r9
 8008fd0:	46c4      	mov	ip, r8
 8008fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8008fd6:	fb09 f804 	mul.w	r8, r9, r4
 8008fda:	e7c4      	b.n	8008f66 <__udivmoddi4+0x282>

08008fdc <__aeabi_idiv0>:
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop

08008fe0 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	80fb      	strh	r3, [r7, #6]
 8008fea:	460b      	mov	r3, r1
 8008fec:	80bb      	strh	r3, [r7, #4]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 8008ff2:	88fb      	ldrh	r3, [r7, #6]
 8008ff4:	88b9      	ldrh	r1, [r7, #4]
 8008ff6:	887a      	ldrh	r2, [r7, #2]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f001 fee5 	bl	800adc8 <ST7735_DrawPixel>
}
 8008ffe:	bf00      	nop
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8009006:	b590      	push	{r4, r7, lr}
 8009008:	b085      	sub	sp, #20
 800900a:	af02      	add	r7, sp, #8
 800900c:	4604      	mov	r4, r0
 800900e:	4608      	mov	r0, r1
 8009010:	4611      	mov	r1, r2
 8009012:	461a      	mov	r2, r3
 8009014:	4623      	mov	r3, r4
 8009016:	80fb      	strh	r3, [r7, #6]
 8009018:	4603      	mov	r3, r0
 800901a:	80bb      	strh	r3, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	807b      	strh	r3, [r7, #2]
 8009020:	4613      	mov	r3, r2
 8009022:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8009024:	88f8      	ldrh	r0, [r7, #6]
 8009026:	88b9      	ldrh	r1, [r7, #4]
 8009028:	887a      	ldrh	r2, [r7, #2]
 800902a:	883c      	ldrh	r4, [r7, #0]
 800902c:	8b3b      	ldrh	r3, [r7, #24]
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	4623      	mov	r3, r4
 8009032:	f001 ffd3 	bl	800afdc <ST7735_FillRectangle>
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	bd90      	pop	{r4, r7, pc}

0800903e <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b082      	sub	sp, #8
 8009042:	af00      	add	r7, sp, #0
 8009044:	4603      	mov	r3, r0
 8009046:	80fb      	strh	r3, [r7, #6]
 8009048:	460b      	mov	r3, r1
 800904a:	80bb      	strh	r3, [r7, #4]
 800904c:	4613      	mov	r3, r2
 800904e:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8009050:	887a      	ldrh	r2, [r7, #2]
 8009052:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800905a:	4618      	mov	r0, r3
 800905c:	f7ff ffc0 	bl	8008fe0 <drawPixel>
}
 8009060:	bf00      	nop
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8009068:	b590      	push	{r4, r7, lr}
 800906a:	b089      	sub	sp, #36	@ 0x24
 800906c:	af00      	add	r7, sp, #0
 800906e:	4604      	mov	r4, r0
 8009070:	4608      	mov	r0, r1
 8009072:	4611      	mov	r1, r2
 8009074:	461a      	mov	r2, r3
 8009076:	4623      	mov	r3, r4
 8009078:	80fb      	strh	r3, [r7, #6]
 800907a:	4603      	mov	r3, r0
 800907c:	80bb      	strh	r3, [r7, #4]
 800907e:	460b      	mov	r3, r1
 8009080:	807b      	strh	r3, [r7, #2]
 8009082:	4613      	mov	r3, r2
 8009084:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8009086:	f9b7 2000 	ldrsh.w	r2, [r7]
 800908a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8009094:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8009098:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800909c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090a0:	1acb      	subs	r3, r1, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	bfb8      	it	lt
 80090a6:	425b      	neglt	r3, r3
 80090a8:	429a      	cmp	r2, r3
 80090aa:	bfcc      	ite	gt
 80090ac:	2301      	movgt	r3, #1
 80090ae:	2300      	movle	r3, #0
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	837b      	strh	r3, [r7, #26]
    if (steep) {
 80090b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00b      	beq.n	80090d4 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 80090bc:	88fb      	ldrh	r3, [r7, #6]
 80090be:	833b      	strh	r3, [r7, #24]
 80090c0:	88bb      	ldrh	r3, [r7, #4]
 80090c2:	80fb      	strh	r3, [r7, #6]
 80090c4:	8b3b      	ldrh	r3, [r7, #24]
 80090c6:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80090c8:	887b      	ldrh	r3, [r7, #2]
 80090ca:	82fb      	strh	r3, [r7, #22]
 80090cc:	883b      	ldrh	r3, [r7, #0]
 80090ce:	807b      	strh	r3, [r7, #2]
 80090d0:	8afb      	ldrh	r3, [r7, #22]
 80090d2:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80090d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80090d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80090dc:	429a      	cmp	r2, r3
 80090de:	dd0b      	ble.n	80090f8 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 80090e0:	88fb      	ldrh	r3, [r7, #6]
 80090e2:	82bb      	strh	r3, [r7, #20]
 80090e4:	887b      	ldrh	r3, [r7, #2]
 80090e6:	80fb      	strh	r3, [r7, #6]
 80090e8:	8abb      	ldrh	r3, [r7, #20]
 80090ea:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80090ec:	88bb      	ldrh	r3, [r7, #4]
 80090ee:	827b      	strh	r3, [r7, #18]
 80090f0:	883b      	ldrh	r3, [r7, #0]
 80090f2:	80bb      	strh	r3, [r7, #4]
 80090f4:	8a7b      	ldrh	r3, [r7, #18]
 80090f6:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80090f8:	887a      	ldrh	r2, [r7, #2]
 80090fa:	88fb      	ldrh	r3, [r7, #6]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	b29b      	uxth	r3, r3
 8009100:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 8009102:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009106:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	2b00      	cmp	r3, #0
 800910e:	bfb8      	it	lt
 8009110:	425b      	neglt	r3, r3
 8009112:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8009114:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009118:	0fda      	lsrs	r2, r3, #31
 800911a:	4413      	add	r3, r2
 800911c:	105b      	asrs	r3, r3, #1
 800911e:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 8009120:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009124:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009128:	429a      	cmp	r2, r3
 800912a:	da02      	bge.n	8009132 <writeLine+0xca>
        ystep = 1;
 800912c:	2301      	movs	r3, #1
 800912e:	83bb      	strh	r3, [r7, #28]
 8009130:	e031      	b.n	8009196 <writeLine+0x12e>
    } else {
        ystep = -1;
 8009132:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009136:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8009138:	e02d      	b.n	8009196 <writeLine+0x12e>
        if (steep) {
 800913a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d008      	beq.n	8009154 <writeLine+0xec>
            writePixel(y0, x0, color);
 8009142:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009144:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8009148:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800914c:	4618      	mov	r0, r3
 800914e:	f7ff ff76 	bl	800903e <writePixel>
 8009152:	e007      	b.n	8009164 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 8009154:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8009156:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800915a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff ff6d 	bl	800903e <writePixel>
        }
        err -= dy;
 8009164:	8bfa      	ldrh	r2, [r7, #30]
 8009166:	89fb      	ldrh	r3, [r7, #14]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	b29b      	uxth	r3, r3
 800916c:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 800916e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009172:	2b00      	cmp	r3, #0
 8009174:	da09      	bge.n	800918a <writeLine+0x122>
            y0 += ystep;
 8009176:	88ba      	ldrh	r2, [r7, #4]
 8009178:	8bbb      	ldrh	r3, [r7, #28]
 800917a:	4413      	add	r3, r2
 800917c:	b29b      	uxth	r3, r3
 800917e:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8009180:	8bfa      	ldrh	r2, [r7, #30]
 8009182:	8a3b      	ldrh	r3, [r7, #16]
 8009184:	4413      	add	r3, r2
 8009186:	b29b      	uxth	r3, r3
 8009188:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 800918a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800918e:	b29b      	uxth	r3, r3
 8009190:	3301      	adds	r3, #1
 8009192:	b29b      	uxth	r3, r3
 8009194:	80fb      	strh	r3, [r7, #6]
 8009196:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800919a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800919e:	429a      	cmp	r2, r3
 80091a0:	ddcb      	ble.n	800913a <writeLine+0xd2>
        }
    }
}
 80091a2:	bf00      	nop
 80091a4:	bf00      	nop
 80091a6:	3724      	adds	r7, #36	@ 0x24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd90      	pop	{r4, r7, pc}

080091ac <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80091ac:	b590      	push	{r4, r7, lr}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af02      	add	r7, sp, #8
 80091b2:	4604      	mov	r4, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	4611      	mov	r1, r2
 80091b8:	461a      	mov	r2, r3
 80091ba:	4623      	mov	r3, r4
 80091bc:	80fb      	strh	r3, [r7, #6]
 80091be:	4603      	mov	r3, r0
 80091c0:	80bb      	strh	r3, [r7, #4]
 80091c2:	460b      	mov	r3, r1
 80091c4:	807b      	strh	r3, [r7, #2]
 80091c6:	4613      	mov	r3, r2
 80091c8:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 80091ca:	88ba      	ldrh	r2, [r7, #4]
 80091cc:	887b      	ldrh	r3, [r7, #2]
 80091ce:	4413      	add	r3, r2
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	3b01      	subs	r3, #1
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	b21c      	sxth	r4, r3
 80091d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80091dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80091e0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80091e4:	883b      	ldrh	r3, [r7, #0]
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	4623      	mov	r3, r4
 80091ea:	f7ff ff3d 	bl	8009068 <writeLine>
}
 80091ee:	bf00      	nop
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd90      	pop	{r4, r7, pc}

080091f6 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80091f6:	b590      	push	{r4, r7, lr}
 80091f8:	b085      	sub	sp, #20
 80091fa:	af02      	add	r7, sp, #8
 80091fc:	4604      	mov	r4, r0
 80091fe:	4608      	mov	r0, r1
 8009200:	4611      	mov	r1, r2
 8009202:	461a      	mov	r2, r3
 8009204:	4623      	mov	r3, r4
 8009206:	80fb      	strh	r3, [r7, #6]
 8009208:	4603      	mov	r3, r0
 800920a:	80bb      	strh	r3, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	807b      	strh	r3, [r7, #2]
 8009210:	4613      	mov	r3, r2
 8009212:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 8009214:	88fa      	ldrh	r2, [r7, #6]
 8009216:	887b      	ldrh	r3, [r7, #2]
 8009218:	4413      	add	r3, r2
 800921a:	b29b      	uxth	r3, r3
 800921c:	3b01      	subs	r3, #1
 800921e:	b29b      	uxth	r3, r3
 8009220:	b21a      	sxth	r2, r3
 8009222:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8009226:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800922a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800922e:	883b      	ldrh	r3, [r7, #0]
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	4623      	mov	r3, r4
 8009234:	f7ff ff18 	bl	8009068 <writeLine>
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	bd90      	pop	{r4, r7, pc}

08009240 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8009240:	b590      	push	{r4, r7, lr}
 8009242:	b087      	sub	sp, #28
 8009244:	af02      	add	r7, sp, #8
 8009246:	4604      	mov	r4, r0
 8009248:	4608      	mov	r0, r1
 800924a:	4611      	mov	r1, r2
 800924c:	461a      	mov	r2, r3
 800924e:	4623      	mov	r3, r4
 8009250:	80fb      	strh	r3, [r7, #6]
 8009252:	4603      	mov	r3, r0
 8009254:	80bb      	strh	r3, [r7, #4]
 8009256:	460b      	mov	r3, r1
 8009258:	807b      	strh	r3, [r7, #2]
 800925a:	4613      	mov	r3, r2
 800925c:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 800925e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009262:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009266:	429a      	cmp	r2, r3
 8009268:	d11a      	bne.n	80092a0 <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 800926a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800926e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009272:	429a      	cmp	r2, r3
 8009274:	dd05      	ble.n	8009282 <drawLine+0x42>
 8009276:	88bb      	ldrh	r3, [r7, #4]
 8009278:	81bb      	strh	r3, [r7, #12]
 800927a:	883b      	ldrh	r3, [r7, #0]
 800927c:	80bb      	strh	r3, [r7, #4]
 800927e:	89bb      	ldrh	r3, [r7, #12]
 8009280:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8009282:	883a      	ldrh	r2, [r7, #0]
 8009284:	88bb      	ldrh	r3, [r7, #4]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	b29b      	uxth	r3, r3
 800928a:	3301      	adds	r3, #1
 800928c:	b29b      	uxth	r3, r3
 800928e:	b21a      	sxth	r2, r3
 8009290:	8c3b      	ldrh	r3, [r7, #32]
 8009292:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009296:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800929a:	f7ff ff87 	bl	80091ac <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 800929e:	e02d      	b.n	80092fc <drawLine+0xbc>
    } else if(y0 == y1){
 80092a0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80092a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d11a      	bne.n	80092e2 <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80092ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80092b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	dd05      	ble.n	80092c4 <drawLine+0x84>
 80092b8:	88fb      	ldrh	r3, [r7, #6]
 80092ba:	81fb      	strh	r3, [r7, #14]
 80092bc:	887b      	ldrh	r3, [r7, #2]
 80092be:	80fb      	strh	r3, [r7, #6]
 80092c0:	89fb      	ldrh	r3, [r7, #14]
 80092c2:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80092c4:	887a      	ldrh	r2, [r7, #2]
 80092c6:	88fb      	ldrh	r3, [r7, #6]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	3301      	adds	r3, #1
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	b21a      	sxth	r2, r3
 80092d2:	8c3b      	ldrh	r3, [r7, #32]
 80092d4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80092d8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80092dc:	f7ff ff8b 	bl	80091f6 <drawFastHLine>
}
 80092e0:	e00c      	b.n	80092fc <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 80092e2:	f9b7 4000 	ldrsh.w	r4, [r7]
 80092e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80092ea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80092ee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80092f2:	8c3b      	ldrh	r3, [r7, #32]
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	4623      	mov	r3, r4
 80092f8:	f7ff feb6 	bl	8009068 <writeLine>
}
 80092fc:	bf00      	nop
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	bd90      	pop	{r4, r7, pc}

08009304 <drawCircleHelper>:
        writePixel(x0 - y, y0 - x, color);
    }
}

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8009304:	b590      	push	{r4, r7, lr}
 8009306:	b087      	sub	sp, #28
 8009308:	af00      	add	r7, sp, #0
 800930a:	4604      	mov	r4, r0
 800930c:	4608      	mov	r0, r1
 800930e:	4611      	mov	r1, r2
 8009310:	461a      	mov	r2, r3
 8009312:	4623      	mov	r3, r4
 8009314:	80fb      	strh	r3, [r7, #6]
 8009316:	4603      	mov	r3, r0
 8009318:	80bb      	strh	r3, [r7, #4]
 800931a:	460b      	mov	r3, r1
 800931c:	807b      	strh	r3, [r7, #2]
 800931e:	4613      	mov	r3, r2
 8009320:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8009322:	887b      	ldrh	r3, [r7, #2]
 8009324:	f1c3 0301 	rsb	r3, r3, #1
 8009328:	b29b      	uxth	r3, r3
 800932a:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 800932c:	2301      	movs	r3, #1
 800932e:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8009330:	887b      	ldrh	r3, [r7, #2]
 8009332:	461a      	mov	r2, r3
 8009334:	03d2      	lsls	r2, r2, #15
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	b29b      	uxth	r3, r3
 800933c:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8009342:	887b      	ldrh	r3, [r7, #2]
 8009344:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8009346:	e0a5      	b.n	8009494 <drawCircleHelper+0x190>
        if (f >= 0) {
 8009348:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800934c:	2b00      	cmp	r3, #0
 800934e:	db0e      	blt.n	800936e <drawCircleHelper+0x6a>
            y--;
 8009350:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009354:	b29b      	uxth	r3, r3
 8009356:	3b01      	subs	r3, #1
 8009358:	b29b      	uxth	r3, r3
 800935a:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800935c:	8a7b      	ldrh	r3, [r7, #18]
 800935e:	3302      	adds	r3, #2
 8009360:	b29b      	uxth	r3, r3
 8009362:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8009364:	8afa      	ldrh	r2, [r7, #22]
 8009366:	8a7b      	ldrh	r3, [r7, #18]
 8009368:	4413      	add	r3, r2
 800936a:	b29b      	uxth	r3, r3
 800936c:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800936e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009372:	b29b      	uxth	r3, r3
 8009374:	3301      	adds	r3, #1
 8009376:	b29b      	uxth	r3, r3
 8009378:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800937a:	8abb      	ldrh	r3, [r7, #20]
 800937c:	3302      	adds	r3, #2
 800937e:	b29b      	uxth	r3, r3
 8009380:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8009382:	8afa      	ldrh	r2, [r7, #22]
 8009384:	8abb      	ldrh	r3, [r7, #20]
 8009386:	4413      	add	r3, r2
 8009388:	b29b      	uxth	r3, r3
 800938a:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 800938c:	787b      	ldrb	r3, [r7, #1]
 800938e:	f003 0304 	and.w	r3, r3, #4
 8009392:	2b00      	cmp	r3, #0
 8009394:	d01b      	beq.n	80093ce <drawCircleHelper+0xca>
            writePixel(x0 + x, y0 + y, color);
 8009396:	88fa      	ldrh	r2, [r7, #6]
 8009398:	8a3b      	ldrh	r3, [r7, #16]
 800939a:	4413      	add	r3, r2
 800939c:	b29b      	uxth	r3, r3
 800939e:	b218      	sxth	r0, r3
 80093a0:	88ba      	ldrh	r2, [r7, #4]
 80093a2:	89fb      	ldrh	r3, [r7, #14]
 80093a4:	4413      	add	r3, r2
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	b21b      	sxth	r3, r3
 80093aa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80093ac:	4619      	mov	r1, r3
 80093ae:	f7ff fe46 	bl	800903e <writePixel>
            writePixel(x0 + y, y0 + x, color);
 80093b2:	88fa      	ldrh	r2, [r7, #6]
 80093b4:	89fb      	ldrh	r3, [r7, #14]
 80093b6:	4413      	add	r3, r2
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	b218      	sxth	r0, r3
 80093bc:	88ba      	ldrh	r2, [r7, #4]
 80093be:	8a3b      	ldrh	r3, [r7, #16]
 80093c0:	4413      	add	r3, r2
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	b21b      	sxth	r3, r3
 80093c6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80093c8:	4619      	mov	r1, r3
 80093ca:	f7ff fe38 	bl	800903e <writePixel>
        }
        if (cornername & 0x2) {
 80093ce:	787b      	ldrb	r3, [r7, #1]
 80093d0:	f003 0302 	and.w	r3, r3, #2
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d01b      	beq.n	8009410 <drawCircleHelper+0x10c>
            writePixel(x0 + x, y0 - y, color);
 80093d8:	88fa      	ldrh	r2, [r7, #6]
 80093da:	8a3b      	ldrh	r3, [r7, #16]
 80093dc:	4413      	add	r3, r2
 80093de:	b29b      	uxth	r3, r3
 80093e0:	b218      	sxth	r0, r3
 80093e2:	88ba      	ldrh	r2, [r7, #4]
 80093e4:	89fb      	ldrh	r3, [r7, #14]
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	b21b      	sxth	r3, r3
 80093ec:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80093ee:	4619      	mov	r1, r3
 80093f0:	f7ff fe25 	bl	800903e <writePixel>
            writePixel(x0 + y, y0 - x, color);
 80093f4:	88fa      	ldrh	r2, [r7, #6]
 80093f6:	89fb      	ldrh	r3, [r7, #14]
 80093f8:	4413      	add	r3, r2
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	b218      	sxth	r0, r3
 80093fe:	88ba      	ldrh	r2, [r7, #4]
 8009400:	8a3b      	ldrh	r3, [r7, #16]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	b29b      	uxth	r3, r3
 8009406:	b21b      	sxth	r3, r3
 8009408:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800940a:	4619      	mov	r1, r3
 800940c:	f7ff fe17 	bl	800903e <writePixel>
        }
        if (cornername & 0x8) {
 8009410:	787b      	ldrb	r3, [r7, #1]
 8009412:	f003 0308 	and.w	r3, r3, #8
 8009416:	2b00      	cmp	r3, #0
 8009418:	d01b      	beq.n	8009452 <drawCircleHelper+0x14e>
            writePixel(x0 - y, y0 + x, color);
 800941a:	88fa      	ldrh	r2, [r7, #6]
 800941c:	89fb      	ldrh	r3, [r7, #14]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	b29b      	uxth	r3, r3
 8009422:	b218      	sxth	r0, r3
 8009424:	88ba      	ldrh	r2, [r7, #4]
 8009426:	8a3b      	ldrh	r3, [r7, #16]
 8009428:	4413      	add	r3, r2
 800942a:	b29b      	uxth	r3, r3
 800942c:	b21b      	sxth	r3, r3
 800942e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009430:	4619      	mov	r1, r3
 8009432:	f7ff fe04 	bl	800903e <writePixel>
            writePixel(x0 - x, y0 + y, color);
 8009436:	88fa      	ldrh	r2, [r7, #6]
 8009438:	8a3b      	ldrh	r3, [r7, #16]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	b29b      	uxth	r3, r3
 800943e:	b218      	sxth	r0, r3
 8009440:	88ba      	ldrh	r2, [r7, #4]
 8009442:	89fb      	ldrh	r3, [r7, #14]
 8009444:	4413      	add	r3, r2
 8009446:	b29b      	uxth	r3, r3
 8009448:	b21b      	sxth	r3, r3
 800944a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800944c:	4619      	mov	r1, r3
 800944e:	f7ff fdf6 	bl	800903e <writePixel>
        }
        if (cornername & 0x1) {
 8009452:	787b      	ldrb	r3, [r7, #1]
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	2b00      	cmp	r3, #0
 800945a:	d01b      	beq.n	8009494 <drawCircleHelper+0x190>
            writePixel(x0 - y, y0 - x, color);
 800945c:	88fa      	ldrh	r2, [r7, #6]
 800945e:	89fb      	ldrh	r3, [r7, #14]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	b29b      	uxth	r3, r3
 8009464:	b218      	sxth	r0, r3
 8009466:	88ba      	ldrh	r2, [r7, #4]
 8009468:	8a3b      	ldrh	r3, [r7, #16]
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	b29b      	uxth	r3, r3
 800946e:	b21b      	sxth	r3, r3
 8009470:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009472:	4619      	mov	r1, r3
 8009474:	f7ff fde3 	bl	800903e <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8009478:	88fa      	ldrh	r2, [r7, #6]
 800947a:	8a3b      	ldrh	r3, [r7, #16]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	b29b      	uxth	r3, r3
 8009480:	b218      	sxth	r0, r3
 8009482:	88ba      	ldrh	r2, [r7, #4]
 8009484:	89fb      	ldrh	r3, [r7, #14]
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	b29b      	uxth	r3, r3
 800948a:	b21b      	sxth	r3, r3
 800948c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800948e:	4619      	mov	r1, r3
 8009490:	f7ff fdd5 	bl	800903e <writePixel>
    while (x<y) {
 8009494:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009498:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800949c:	429a      	cmp	r2, r3
 800949e:	f6ff af53 	blt.w	8009348 <drawCircleHelper+0x44>
        }
    }
}
 80094a2:	bf00      	nop
 80094a4:	bf00      	nop
 80094a6:	371c      	adds	r7, #28
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd90      	pop	{r4, r7, pc}

080094ac <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 80094ac:	b590      	push	{r4, r7, lr}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	4611      	mov	r1, r2
 80094b8:	461a      	mov	r2, r3
 80094ba:	4623      	mov	r3, r4
 80094bc:	80fb      	strh	r3, [r7, #6]
 80094be:	4603      	mov	r3, r0
 80094c0:	80bb      	strh	r3, [r7, #4]
 80094c2:	460b      	mov	r3, r1
 80094c4:	807b      	strh	r3, [r7, #2]
 80094c6:	4613      	mov	r3, r2
 80094c8:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 80094ca:	887b      	ldrh	r3, [r7, #2]
 80094cc:	f1c3 0301 	rsb	r3, r3, #1
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80094d4:	2301      	movs	r3, #1
 80094d6:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80094d8:	887b      	ldrh	r3, [r7, #2]
 80094da:	461a      	mov	r2, r3
 80094dc:	03d2      	lsls	r2, r2, #15
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	005b      	lsls	r3, r3, #1
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 80094e6:	2300      	movs	r3, #0
 80094e8:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 80094ea:	887b      	ldrh	r3, [r7, #2]
 80094ec:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 80094ee:	8a3b      	ldrh	r3, [r7, #16]
 80094f0:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 80094f2:	89fb      	ldrh	r3, [r7, #14]
 80094f4:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 80094f6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	3301      	adds	r3, #1
 80094fe:	b29b      	uxth	r3, r3
 8009500:	853b      	strh	r3, [r7, #40]	@ 0x28

    while(x < y) {
 8009502:	e095      	b.n	8009630 <fillCircleHelper+0x184>
        if (f >= 0) {
 8009504:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009508:	2b00      	cmp	r3, #0
 800950a:	db0e      	blt.n	800952a <fillCircleHelper+0x7e>
            y--;
 800950c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009510:	b29b      	uxth	r3, r3
 8009512:	3b01      	subs	r3, #1
 8009514:	b29b      	uxth	r3, r3
 8009516:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8009518:	8a7b      	ldrh	r3, [r7, #18]
 800951a:	3302      	adds	r3, #2
 800951c:	b29b      	uxth	r3, r3
 800951e:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8009520:	8afa      	ldrh	r2, [r7, #22]
 8009522:	8a7b      	ldrh	r3, [r7, #18]
 8009524:	4413      	add	r3, r2
 8009526:	b29b      	uxth	r3, r3
 8009528:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800952a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800952e:	b29b      	uxth	r3, r3
 8009530:	3301      	adds	r3, #1
 8009532:	b29b      	uxth	r3, r3
 8009534:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8009536:	8abb      	ldrh	r3, [r7, #20]
 8009538:	3302      	adds	r3, #2
 800953a:	b29b      	uxth	r3, r3
 800953c:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800953e:	8afa      	ldrh	r2, [r7, #22]
 8009540:	8abb      	ldrh	r3, [r7, #20]
 8009542:	4413      	add	r3, r2
 8009544:	b29b      	uxth	r3, r3
 8009546:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8009548:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800954c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009550:	429a      	cmp	r2, r3
 8009552:	db31      	blt.n	80095b8 <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8009554:	787b      	ldrb	r3, [r7, #1]
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	2b00      	cmp	r3, #0
 800955c:	d013      	beq.n	8009586 <fillCircleHelper+0xda>
 800955e:	88fa      	ldrh	r2, [r7, #6]
 8009560:	8a3b      	ldrh	r3, [r7, #16]
 8009562:	4413      	add	r3, r2
 8009564:	b29b      	uxth	r3, r3
 8009566:	b218      	sxth	r0, r3
 8009568:	88ba      	ldrh	r2, [r7, #4]
 800956a:	89fb      	ldrh	r3, [r7, #14]
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	b29b      	uxth	r3, r3
 8009570:	b219      	sxth	r1, r3
 8009572:	89fb      	ldrh	r3, [r7, #14]
 8009574:	005b      	lsls	r3, r3, #1
 8009576:	b29a      	uxth	r2, r3
 8009578:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800957a:	4413      	add	r3, r2
 800957c:	b29b      	uxth	r3, r3
 800957e:	b21a      	sxth	r2, r3
 8009580:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009582:	f7ff fe13 	bl	80091ac <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8009586:	787b      	ldrb	r3, [r7, #1]
 8009588:	f003 0302 	and.w	r3, r3, #2
 800958c:	2b00      	cmp	r3, #0
 800958e:	d013      	beq.n	80095b8 <fillCircleHelper+0x10c>
 8009590:	88fa      	ldrh	r2, [r7, #6]
 8009592:	8a3b      	ldrh	r3, [r7, #16]
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	b29b      	uxth	r3, r3
 8009598:	b218      	sxth	r0, r3
 800959a:	88ba      	ldrh	r2, [r7, #4]
 800959c:	89fb      	ldrh	r3, [r7, #14]
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	b219      	sxth	r1, r3
 80095a4:	89fb      	ldrh	r3, [r7, #14]
 80095a6:	005b      	lsls	r3, r3, #1
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80095ac:	4413      	add	r3, r2
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	b21a      	sxth	r2, r3
 80095b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80095b4:	f7ff fdfa 	bl	80091ac <drawFastVLine>
        }
        if(y != py) {
 80095b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80095bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d033      	beq.n	800962c <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 80095c4:	787b      	ldrb	r3, [r7, #1]
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d013      	beq.n	80095f6 <fillCircleHelper+0x14a>
 80095ce:	88fa      	ldrh	r2, [r7, #6]
 80095d0:	897b      	ldrh	r3, [r7, #10]
 80095d2:	4413      	add	r3, r2
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	b218      	sxth	r0, r3
 80095d8:	88ba      	ldrh	r2, [r7, #4]
 80095da:	89bb      	ldrh	r3, [r7, #12]
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	b29b      	uxth	r3, r3
 80095e0:	b219      	sxth	r1, r3
 80095e2:	89bb      	ldrh	r3, [r7, #12]
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80095ea:	4413      	add	r3, r2
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	b21a      	sxth	r2, r3
 80095f0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80095f2:	f7ff fddb 	bl	80091ac <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 80095f6:	787b      	ldrb	r3, [r7, #1]
 80095f8:	f003 0302 	and.w	r3, r3, #2
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d013      	beq.n	8009628 <fillCircleHelper+0x17c>
 8009600:	88fa      	ldrh	r2, [r7, #6]
 8009602:	897b      	ldrh	r3, [r7, #10]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	b29b      	uxth	r3, r3
 8009608:	b218      	sxth	r0, r3
 800960a:	88ba      	ldrh	r2, [r7, #4]
 800960c:	89bb      	ldrh	r3, [r7, #12]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	b29b      	uxth	r3, r3
 8009612:	b219      	sxth	r1, r3
 8009614:	89bb      	ldrh	r3, [r7, #12]
 8009616:	005b      	lsls	r3, r3, #1
 8009618:	b29a      	uxth	r2, r3
 800961a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800961c:	4413      	add	r3, r2
 800961e:	b29b      	uxth	r3, r3
 8009620:	b21a      	sxth	r2, r3
 8009622:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009624:	f7ff fdc2 	bl	80091ac <drawFastVLine>
            py = y;
 8009628:	89fb      	ldrh	r3, [r7, #14]
 800962a:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 800962c:	8a3b      	ldrh	r3, [r7, #16]
 800962e:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8009630:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009634:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009638:	429a      	cmp	r2, r3
 800963a:	f6ff af63 	blt.w	8009504 <fillCircleHelper+0x58>
    }
}
 800963e:	bf00      	nop
 8009640:	bf00      	nop
 8009642:	371c      	adds	r7, #28
 8009644:	46bd      	mov	sp, r7
 8009646:	bd90      	pop	{r4, r7, pc}

08009648 <drawRoundRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8009648:	b590      	push	{r4, r7, lr}
 800964a:	b087      	sub	sp, #28
 800964c:	af02      	add	r7, sp, #8
 800964e:	4604      	mov	r4, r0
 8009650:	4608      	mov	r0, r1
 8009652:	4611      	mov	r1, r2
 8009654:	461a      	mov	r2, r3
 8009656:	4623      	mov	r3, r4
 8009658:	80fb      	strh	r3, [r7, #6]
 800965a:	4603      	mov	r3, r0
 800965c:	80bb      	strh	r3, [r7, #4]
 800965e:	460b      	mov	r3, r1
 8009660:	807b      	strh	r3, [r7, #2]
 8009662:	4613      	mov	r3, r2
 8009664:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8009666:	f9b7 2000 	ldrsh.w	r2, [r7]
 800966a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800966e:	4293      	cmp	r3, r2
 8009670:	bfa8      	it	ge
 8009672:	4613      	movge	r3, r2
 8009674:	b21b      	sxth	r3, r3
 8009676:	0fda      	lsrs	r2, r3, #31
 8009678:	4413      	add	r3, r2
 800967a:	105b      	asrs	r3, r3, #1
 800967c:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 800967e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009682:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009686:	429a      	cmp	r2, r3
 8009688:	dd01      	ble.n	800968e <drawRoundRect+0x46>
 800968a:	89fb      	ldrh	r3, [r7, #14]
 800968c:	843b      	strh	r3, [r7, #32]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 800968e:	88fa      	ldrh	r2, [r7, #6]
 8009690:	8c3b      	ldrh	r3, [r7, #32]
 8009692:	4413      	add	r3, r2
 8009694:	b29b      	uxth	r3, r3
 8009696:	b218      	sxth	r0, r3
 8009698:	887a      	ldrh	r2, [r7, #2]
 800969a:	8c3b      	ldrh	r3, [r7, #32]
 800969c:	005b      	lsls	r3, r3, #1
 800969e:	b29b      	uxth	r3, r3
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	b21a      	sxth	r2, r3
 80096a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096a8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80096ac:	f7ff fda3 	bl	80091f6 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 80096b0:	88fa      	ldrh	r2, [r7, #6]
 80096b2:	8c3b      	ldrh	r3, [r7, #32]
 80096b4:	4413      	add	r3, r2
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	b218      	sxth	r0, r3
 80096ba:	88ba      	ldrh	r2, [r7, #4]
 80096bc:	883b      	ldrh	r3, [r7, #0]
 80096be:	4413      	add	r3, r2
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	3b01      	subs	r3, #1
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	b219      	sxth	r1, r3
 80096c8:	887a      	ldrh	r2, [r7, #2]
 80096ca:	8c3b      	ldrh	r3, [r7, #32]
 80096cc:	005b      	lsls	r3, r3, #1
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	b21a      	sxth	r2, r3
 80096d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096d8:	f7ff fd8d 	bl	80091f6 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 80096dc:	88ba      	ldrh	r2, [r7, #4]
 80096de:	8c3b      	ldrh	r3, [r7, #32]
 80096e0:	4413      	add	r3, r2
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	b219      	sxth	r1, r3
 80096e6:	883a      	ldrh	r2, [r7, #0]
 80096e8:	8c3b      	ldrh	r3, [r7, #32]
 80096ea:	005b      	lsls	r3, r3, #1
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	b21a      	sxth	r2, r3
 80096f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096f6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80096fa:	f7ff fd57 	bl	80091ac <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80096fe:	88fa      	ldrh	r2, [r7, #6]
 8009700:	887b      	ldrh	r3, [r7, #2]
 8009702:	4413      	add	r3, r2
 8009704:	b29b      	uxth	r3, r3
 8009706:	3b01      	subs	r3, #1
 8009708:	b29b      	uxth	r3, r3
 800970a:	b218      	sxth	r0, r3
 800970c:	88ba      	ldrh	r2, [r7, #4]
 800970e:	8c3b      	ldrh	r3, [r7, #32]
 8009710:	4413      	add	r3, r2
 8009712:	b29b      	uxth	r3, r3
 8009714:	b219      	sxth	r1, r3
 8009716:	883a      	ldrh	r2, [r7, #0]
 8009718:	8c3b      	ldrh	r3, [r7, #32]
 800971a:	005b      	lsls	r3, r3, #1
 800971c:	b29b      	uxth	r3, r3
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	b29b      	uxth	r3, r3
 8009722:	b21a      	sxth	r2, r3
 8009724:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009726:	f7ff fd41 	bl	80091ac <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 800972a:	88fa      	ldrh	r2, [r7, #6]
 800972c:	8c3b      	ldrh	r3, [r7, #32]
 800972e:	4413      	add	r3, r2
 8009730:	b29b      	uxth	r3, r3
 8009732:	b218      	sxth	r0, r3
 8009734:	88ba      	ldrh	r2, [r7, #4]
 8009736:	8c3b      	ldrh	r3, [r7, #32]
 8009738:	4413      	add	r3, r2
 800973a:	b29b      	uxth	r3, r3
 800973c:	b219      	sxth	r1, r3
 800973e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009742:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	2301      	movs	r3, #1
 8009748:	f7ff fddc 	bl	8009304 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 800974c:	88fa      	ldrh	r2, [r7, #6]
 800974e:	887b      	ldrh	r3, [r7, #2]
 8009750:	4413      	add	r3, r2
 8009752:	b29a      	uxth	r2, r3
 8009754:	8c3b      	ldrh	r3, [r7, #32]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	b29b      	uxth	r3, r3
 800975a:	3b01      	subs	r3, #1
 800975c:	b29b      	uxth	r3, r3
 800975e:	b218      	sxth	r0, r3
 8009760:	88ba      	ldrh	r2, [r7, #4]
 8009762:	8c3b      	ldrh	r3, [r7, #32]
 8009764:	4413      	add	r3, r2
 8009766:	b29b      	uxth	r3, r3
 8009768:	b219      	sxth	r1, r3
 800976a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800976e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	2302      	movs	r3, #2
 8009774:	f7ff fdc6 	bl	8009304 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8009778:	88fa      	ldrh	r2, [r7, #6]
 800977a:	887b      	ldrh	r3, [r7, #2]
 800977c:	4413      	add	r3, r2
 800977e:	b29a      	uxth	r2, r3
 8009780:	8c3b      	ldrh	r3, [r7, #32]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	b29b      	uxth	r3, r3
 8009786:	3b01      	subs	r3, #1
 8009788:	b29b      	uxth	r3, r3
 800978a:	b218      	sxth	r0, r3
 800978c:	88ba      	ldrh	r2, [r7, #4]
 800978e:	883b      	ldrh	r3, [r7, #0]
 8009790:	4413      	add	r3, r2
 8009792:	b29a      	uxth	r2, r3
 8009794:	8c3b      	ldrh	r3, [r7, #32]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	b29b      	uxth	r3, r3
 800979a:	3b01      	subs	r3, #1
 800979c:	b29b      	uxth	r3, r3
 800979e:	b219      	sxth	r1, r3
 80097a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80097a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	2304      	movs	r3, #4
 80097aa:	f7ff fdab 	bl	8009304 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80097ae:	88fa      	ldrh	r2, [r7, #6]
 80097b0:	8c3b      	ldrh	r3, [r7, #32]
 80097b2:	4413      	add	r3, r2
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	b218      	sxth	r0, r3
 80097b8:	88ba      	ldrh	r2, [r7, #4]
 80097ba:	883b      	ldrh	r3, [r7, #0]
 80097bc:	4413      	add	r3, r2
 80097be:	b29a      	uxth	r2, r3
 80097c0:	8c3b      	ldrh	r3, [r7, #32]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	3b01      	subs	r3, #1
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	b219      	sxth	r1, r3
 80097cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80097d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	2308      	movs	r3, #8
 80097d6:	f7ff fd95 	bl	8009304 <drawCircleHelper>
}
 80097da:	bf00      	nop
 80097dc:	3714      	adds	r7, #20
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd90      	pop	{r4, r7, pc}

080097e2 <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80097e2:	b590      	push	{r4, r7, lr}
 80097e4:	b087      	sub	sp, #28
 80097e6:	af02      	add	r7, sp, #8
 80097e8:	4604      	mov	r4, r0
 80097ea:	4608      	mov	r0, r1
 80097ec:	4611      	mov	r1, r2
 80097ee:	461a      	mov	r2, r3
 80097f0:	4623      	mov	r3, r4
 80097f2:	80fb      	strh	r3, [r7, #6]
 80097f4:	4603      	mov	r3, r0
 80097f6:	80bb      	strh	r3, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	807b      	strh	r3, [r7, #2]
 80097fc:	4613      	mov	r3, r2
 80097fe:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8009800:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009804:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009808:	4293      	cmp	r3, r2
 800980a:	bfa8      	it	ge
 800980c:	4613      	movge	r3, r2
 800980e:	b21b      	sxth	r3, r3
 8009810:	0fda      	lsrs	r2, r3, #31
 8009812:	4413      	add	r3, r2
 8009814:	105b      	asrs	r3, r3, #1
 8009816:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8009818:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800981c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009820:	429a      	cmp	r2, r3
 8009822:	dd01      	ble.n	8009828 <fillRoundRect+0x46>
 8009824:	89fb      	ldrh	r3, [r7, #14]
 8009826:	843b      	strh	r3, [r7, #32]
    // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 8009828:	88fa      	ldrh	r2, [r7, #6]
 800982a:	8c3b      	ldrh	r3, [r7, #32]
 800982c:	4413      	add	r3, r2
 800982e:	b29b      	uxth	r3, r3
 8009830:	b218      	sxth	r0, r3
 8009832:	887a      	ldrh	r2, [r7, #2]
 8009834:	8c3b      	ldrh	r3, [r7, #32]
 8009836:	005b      	lsls	r3, r3, #1
 8009838:	b29b      	uxth	r3, r3
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	b29b      	uxth	r3, r3
 800983e:	b21a      	sxth	r2, r3
 8009840:	f9b7 4000 	ldrsh.w	r4, [r7]
 8009844:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009848:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	4623      	mov	r3, r4
 800984e:	f7ff fbda 	bl	8009006 <fillRect>
    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8009852:	88fa      	ldrh	r2, [r7, #6]
 8009854:	887b      	ldrh	r3, [r7, #2]
 8009856:	4413      	add	r3, r2
 8009858:	b29a      	uxth	r2, r3
 800985a:	8c3b      	ldrh	r3, [r7, #32]
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	b29b      	uxth	r3, r3
 8009860:	3b01      	subs	r3, #1
 8009862:	b29b      	uxth	r3, r3
 8009864:	b218      	sxth	r0, r3
 8009866:	88ba      	ldrh	r2, [r7, #4]
 8009868:	8c3b      	ldrh	r3, [r7, #32]
 800986a:	4413      	add	r3, r2
 800986c:	b29b      	uxth	r3, r3
 800986e:	b219      	sxth	r1, r3
 8009870:	883a      	ldrh	r2, [r7, #0]
 8009872:	8c3b      	ldrh	r3, [r7, #32]
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	b29b      	uxth	r3, r3
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	b29b      	uxth	r3, r3
 800987c:	3b01      	subs	r3, #1
 800987e:	b29b      	uxth	r3, r3
 8009880:	b21b      	sxth	r3, r3
 8009882:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8009886:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009888:	9201      	str	r2, [sp, #4]
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	2301      	movs	r3, #1
 800988e:	4622      	mov	r2, r4
 8009890:	f7ff fe0c 	bl	80094ac <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8009894:	88fa      	ldrh	r2, [r7, #6]
 8009896:	8c3b      	ldrh	r3, [r7, #32]
 8009898:	4413      	add	r3, r2
 800989a:	b29b      	uxth	r3, r3
 800989c:	b218      	sxth	r0, r3
 800989e:	88ba      	ldrh	r2, [r7, #4]
 80098a0:	8c3b      	ldrh	r3, [r7, #32]
 80098a2:	4413      	add	r3, r2
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	b219      	sxth	r1, r3
 80098a8:	883a      	ldrh	r2, [r7, #0]
 80098aa:	8c3b      	ldrh	r3, [r7, #32]
 80098ac:	005b      	lsls	r3, r3, #1
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	3b01      	subs	r3, #1
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	b21b      	sxth	r3, r3
 80098ba:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80098be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80098c0:	9201      	str	r2, [sp, #4]
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	2302      	movs	r3, #2
 80098c6:	4622      	mov	r2, r4
 80098c8:	f7ff fdf0 	bl	80094ac <fillCircleHelper>
}
 80098cc:	bf00      	nop
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd90      	pop	{r4, r7, pc}

080098d4 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af02      	add	r7, sp, #8
 80098da:	4603      	mov	r3, r0
 80098dc:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80098de:	4b08      	ldr	r3, [pc, #32]	@ (8009900 <fillScreen+0x2c>)
 80098e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80098e4:	4b07      	ldr	r3, [pc, #28]	@ (8009904 <fillScreen+0x30>)
 80098e6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80098ea:	88fb      	ldrh	r3, [r7, #6]
 80098ec:	9300      	str	r3, [sp, #0]
 80098ee:	460b      	mov	r3, r1
 80098f0:	2100      	movs	r1, #0
 80098f2:	2000      	movs	r0, #0
 80098f4:	f7ff fb87 	bl	8009006 <fillRect>
}
 80098f8:	bf00      	nop
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	20000dde 	.word	0x20000dde
 8009904:	20000de0 	.word	0x20000de0

08009908 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8009908:	b590      	push	{r4, r7, lr}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
	int len = 0;
 8009910:	2300      	movs	r3, #0
 8009912:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	7a1b      	ldrb	r3, [r3, #8]
 8009918:	2b03      	cmp	r3, #3
 800991a:	d102      	bne.n	8009922 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800991c:	230c      	movs	r3, #12
 800991e:	60fb      	str	r3, [r7, #12]
 8009920:	e005      	b.n	800992e <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	7a1b      	ldrb	r3, [r3, #8]
 8009926:	2b04      	cmp	r3, #4
 8009928:	d101      	bne.n	800992e <MQTTSerialize_connectLength+0x26>
		len = 10;
 800992a:	230a      	movs	r3, #10
 800992c:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	330c      	adds	r3, #12
 8009932:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009936:	f000 fb5e 	bl	8009ff6 <MQTTstrlen>
 800993a:	4603      	mov	r3, r0
 800993c:	3302      	adds	r3, #2
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	4413      	add	r3, r2
 8009942:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	7edb      	ldrb	r3, [r3, #27]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d013      	beq.n	8009974 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	3324      	adds	r3, #36	@ 0x24
 8009950:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009954:	f000 fb4f 	bl	8009ff6 <MQTTstrlen>
 8009958:	4603      	mov	r3, r0
 800995a:	1c9c      	adds	r4, r3, #2
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	3330      	adds	r3, #48	@ 0x30
 8009960:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009964:	f000 fb47 	bl	8009ff6 <MQTTstrlen>
 8009968:	4603      	mov	r3, r0
 800996a:	4423      	add	r3, r4
 800996c:	3302      	adds	r3, #2
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	4413      	add	r3, r2
 8009972:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009978:	2b00      	cmp	r3, #0
 800997a:	d103      	bne.n	8009984 <MQTTSerialize_connectLength+0x7c>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00a      	beq.n	800999a <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3340      	adds	r3, #64	@ 0x40
 8009988:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800998c:	f000 fb33 	bl	8009ff6 <MQTTstrlen>
 8009990:	4603      	mov	r3, r0
 8009992:	3302      	adds	r3, #2
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	4413      	add	r3, r2
 8009998:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d103      	bne.n	80099aa <MQTTSerialize_connectLength+0xa2>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00a      	beq.n	80099c0 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	334c      	adds	r3, #76	@ 0x4c
 80099ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80099b2:	f000 fb20 	bl	8009ff6 <MQTTstrlen>
 80099b6:	4603      	mov	r3, r0
 80099b8:	3302      	adds	r3, #2
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	4413      	add	r3, r2
 80099be:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 80099c0:	68fb      	ldr	r3, [r7, #12]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3714      	adds	r7, #20
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd90      	pop	{r4, r7, pc}
	...

080099cc <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b08a      	sub	sp, #40	@ 0x28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 80099dc:	2300      	movs	r3, #0
 80099de:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 80099e0:	2300      	movs	r3, #0
 80099e2:	617b      	str	r3, [r7, #20]
	int len = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	623b      	str	r3, [r7, #32]
	int rc = -1;
 80099e8:	f04f 33ff 	mov.w	r3, #4294967295
 80099ec:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f7ff ff8a 	bl	8009908 <MQTTSerialize_connectLength>
 80099f4:	6238      	str	r0, [r7, #32]
 80099f6:	6a38      	ldr	r0, [r7, #32]
 80099f8:	f000 f9b2 	bl	8009d60 <MQTTPacket_len>
 80099fc:	4602      	mov	r2, r0
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	4293      	cmp	r3, r2
 8009a02:	da03      	bge.n	8009a0c <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8009a04:	f06f 0301 	mvn.w	r3, #1
 8009a08:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 8009a0a:	e0c2      	b.n	8009b92 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8009a10:	7e3b      	ldrb	r3, [r7, #24]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f362 1307 	bfi	r3, r2, #4, #4
 8009a18:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8009a1a:	7e3a      	ldrb	r2, [r7, #24]
 8009a1c:	f107 031c 	add.w	r3, r7, #28
 8009a20:	4611      	mov	r1, r2
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 fa2b 	bl	8009e7e <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	6a39      	ldr	r1, [r7, #32]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f000 f92b 	bl	8009c88 <MQTTPacket_encode>
 8009a32:	4602      	mov	r2, r0
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	4413      	add	r3, r2
 8009a38:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	7a1b      	ldrb	r3, [r3, #8]
 8009a3e:	2b04      	cmp	r3, #4
 8009a40:	d10c      	bne.n	8009a5c <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8009a42:	f107 031c 	add.w	r3, r7, #28
 8009a46:	4955      	ldr	r1, [pc, #340]	@ (8009b9c <MQTTSerialize_connect+0x1d0>)
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f000 fa56 	bl	8009efa <writeCString>
		writeChar(&ptr, (char) 4);
 8009a4e:	f107 031c 	add.w	r3, r7, #28
 8009a52:	2104      	movs	r1, #4
 8009a54:	4618      	mov	r0, r3
 8009a56:	f000 fa12 	bl	8009e7e <writeChar>
 8009a5a:	e00b      	b.n	8009a74 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8009a5c:	f107 031c 	add.w	r3, r7, #28
 8009a60:	494f      	ldr	r1, [pc, #316]	@ (8009ba0 <MQTTSerialize_connect+0x1d4>)
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 fa49 	bl	8009efa <writeCString>
		writeChar(&ptr, (char) 3);
 8009a68:	f107 031c 	add.w	r3, r7, #28
 8009a6c:	2103      	movs	r1, #3
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f000 fa05 	bl	8009e7e <writeChar>
	}

	flags.all = 0;
 8009a74:	2300      	movs	r3, #0
 8009a76:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	7e9b      	ldrb	r3, [r3, #26]
 8009a7c:	f003 0301 	and.w	r3, r3, #1
 8009a80:	b2da      	uxtb	r2, r3
 8009a82:	7d3b      	ldrb	r3, [r7, #20]
 8009a84:	f362 0341 	bfi	r3, r2, #1, #1
 8009a88:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	7edb      	ldrb	r3, [r3, #27]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	bf14      	ite	ne
 8009a92:	2301      	movne	r3, #1
 8009a94:	2300      	moveq	r3, #0
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	7d3b      	ldrb	r3, [r7, #20]
 8009a9a:	f362 0382 	bfi	r3, r2, #2, #1
 8009a9e:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8009aa0:	7d3b      	ldrb	r3, [r7, #20]
 8009aa2:	f003 0304 	and.w	r3, r3, #4
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d013      	beq.n	8009ad4 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ab2:	f003 0303 	and.w	r3, r3, #3
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	7d3b      	ldrb	r3, [r7, #20]
 8009aba:	f362 03c4 	bfi	r3, r2, #3, #2
 8009abe:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	b2da      	uxtb	r2, r3
 8009acc:	7d3b      	ldrb	r3, [r7, #20]
 8009ace:	f362 1345 	bfi	r3, r2, #5, #1
 8009ad2:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d103      	bne.n	8009ae4 <MQTTSerialize_connect+0x118>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d003      	beq.n	8009aec <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8009ae4:	7d3b      	ldrb	r3, [r7, #20]
 8009ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009aea:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d103      	bne.n	8009afc <MQTTSerialize_connect+0x130>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d003      	beq.n	8009b04 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8009afc:	7d3b      	ldrb	r3, [r7, #20]
 8009afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b02:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8009b04:	7d3a      	ldrb	r2, [r7, #20]
 8009b06:	f107 031c 	add.w	r3, r7, #28
 8009b0a:	4611      	mov	r1, r2
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f000 f9b6 	bl	8009e7e <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	8b1b      	ldrh	r3, [r3, #24]
 8009b16:	461a      	mov	r2, r3
 8009b18:	f107 031c 	add.w	r3, r7, #28
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 f9c2 	bl	8009ea8 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f107 001c 	add.w	r0, r7, #28
 8009b2a:	330c      	adds	r3, #12
 8009b2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b2e:	f000 fa03 	bl	8009f38 <writeMQTTString>
	if (options->willFlag)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	7edb      	ldrb	r3, [r3, #27]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00d      	beq.n	8009b56 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f107 001c 	add.w	r0, r7, #28
 8009b40:	3324      	adds	r3, #36	@ 0x24
 8009b42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b44:	f000 f9f8 	bl	8009f38 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f107 001c 	add.w	r0, r7, #28
 8009b4e:	3330      	adds	r3, #48	@ 0x30
 8009b50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b52:	f000 f9f1 	bl	8009f38 <writeMQTTString>
	}
	if (flags.bits.username)
 8009b56:	7d3b      	ldrb	r3, [r7, #20]
 8009b58:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d006      	beq.n	8009b70 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f107 001c 	add.w	r0, r7, #28
 8009b68:	3340      	adds	r3, #64	@ 0x40
 8009b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b6c:	f000 f9e4 	bl	8009f38 <writeMQTTString>
	if (flags.bits.password)
 8009b70:	7d3b      	ldrb	r3, [r7, #20]
 8009b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d006      	beq.n	8009b8a <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f107 001c 	add.w	r0, r7, #28
 8009b82:	334c      	adds	r3, #76	@ 0x4c
 8009b84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b86:	f000 f9d7 	bl	8009f38 <writeMQTTString>

	rc = ptr - buf;
 8009b8a:	69fa      	ldr	r2, [r7, #28]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8009b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3728      	adds	r7, #40	@ 0x28
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	0801b690 	.word	0x0801b690
 8009ba0:	0801b698 	.word	0x0801b698

08009ba4 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b08a      	sub	sp, #40	@ 0x28
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
 8009bb0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8009bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bb8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8009bc6:	f107 0318 	add.w	r3, r7, #24
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 f943 	bl	8009e56 <readChar>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8009bd4:	7f3b      	ldrb	r3, [r7, #28]
 8009bd6:	f023 030f 	bic.w	r3, r3, #15
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	2b30      	cmp	r3, #48	@ 0x30
 8009bde:	d14b      	bne.n	8009c78 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8009be0:	7f3b      	ldrb	r3, [r7, #28]
 8009be2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	461a      	mov	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8009bee:	7f3b      	ldrb	r3, [r7, #28]
 8009bf0:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8009bfc:	7f3b      	ldrb	r3, [r7, #28]
 8009bfe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	461a      	mov	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen));
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	f107 0214 	add.w	r2, r7, #20
 8009c10:	4611      	mov	r1, r2
 8009c12:	4618      	mov	r0, r3
 8009c14:	f000 f8ee 	bl	8009df4 <MQTTPacket_decodeBuf>
 8009c18:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	4413      	add	r3, r2
 8009c20:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	697a      	ldr	r2, [r7, #20]
 8009c26:	4413      	add	r3, r2
 8009c28:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8009c2a:	f107 0318 	add.w	r3, r7, #24
 8009c2e:	6a3a      	ldr	r2, [r7, #32]
 8009c30:	4619      	mov	r1, r3
 8009c32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c34:	f000 f9ae 	bl	8009f94 <readMQTTLenString>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d01e      	beq.n	8009c7c <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0)
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	6a3a      	ldr	r2, [r7, #32]
 8009c42:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	db19      	blt.n	8009c7c <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	dd08      	ble.n	8009c62 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8009c50:	f107 0318 	add.w	r3, r7, #24
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 f8e3 	bl	8009e20 <readInt>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	6a3a      	ldr	r2, [r7, #32]
 8009c66:	1ad2      	subs	r2, r2, r3
 8009c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c6a:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8009c6c:	69ba      	ldr	r2, [r7, #24]
 8009c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c70:	601a      	str	r2, [r3, #0]
	rc = 1;
 8009c72:	2301      	movs	r3, #1
 8009c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c76:	e002      	b.n	8009c7e <MQTTDeserialize_publish+0xda>
		goto exit;
 8009c78:	bf00      	nop
 8009c7a:	e000      	b.n	8009c7e <MQTTDeserialize_publish+0xda>
		goto exit;
 8009c7c:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3728      	adds	r7, #40	@ 0x28
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	425a      	negs	r2, r3
 8009c9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009ca2:	bf58      	it	pl
 8009ca4:	4253      	negpl	r3, r2
 8009ca6:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	da00      	bge.n	8009cb0 <MQTTPacket_encode+0x28>
 8009cae:	337f      	adds	r3, #127	@ 0x7f
 8009cb0:	11db      	asrs	r3, r3, #7
 8009cb2:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	dd03      	ble.n	8009cc2 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8009cba:	7afb      	ldrb	r3, [r7, #11]
 8009cbc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009cc0:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	1c5a      	adds	r2, r3, #1
 8009cc6:	60fa      	str	r2, [r7, #12]
 8009cc8:	461a      	mov	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4413      	add	r3, r2
 8009cce:	7afa      	ldrb	r2, [r7, #11]
 8009cd0:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	dcde      	bgt.n	8009c96 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3714      	adds	r7, #20
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b086      	sub	sp, #24
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	617b      	str	r3, [r7, #20]
	int len = 0;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8009cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8009d02:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	3301      	adds	r3, #1
 8009d08:	613b      	str	r3, [r7, #16]
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	2b04      	cmp	r3, #4
 8009d0e:	dd03      	ble.n	8009d18 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8009d10:	f04f 33ff 	mov.w	r3, #4294967295
 8009d14:	60fb      	str	r3, [r7, #12]
			goto exit;
 8009d16:	e01d      	b.n	8009d54 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8009d18:	f107 020b 	add.w	r2, r7, #11
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2101      	movs	r1, #1
 8009d20:	4610      	mov	r0, r2
 8009d22:	4798      	blx	r3
 8009d24:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d112      	bne.n	8009d52 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	7afb      	ldrb	r3, [r7, #11]
 8009d32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d36:	6979      	ldr	r1, [r7, #20]
 8009d38:	fb01 f303 	mul.w	r3, r1, r3
 8009d3c:	441a      	add	r2, r3
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	01db      	lsls	r3, r3, #7
 8009d46:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8009d48:	7afb      	ldrb	r3, [r7, #11]
 8009d4a:	b25b      	sxtb	r3, r3
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	dbd6      	blt.n	8009cfe <MQTTPacket_decode+0x18>
exit:
 8009d50:	e000      	b.n	8009d54 <MQTTPacket_decode+0x6e>
			goto exit;
 8009d52:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8009d54:	693b      	ldr	r3, [r7, #16]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3718      	adds	r7, #24
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
	...

08009d60 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d72:	dc03      	bgt.n	8009d7c <MQTTPacket_len+0x1c>
		rem_len += 1;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	3301      	adds	r3, #1
 8009d78:	607b      	str	r3, [r7, #4]
 8009d7a:	e012      	b.n	8009da2 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d82:	da03      	bge.n	8009d8c <MQTTPacket_len+0x2c>
		rem_len += 2;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	3302      	adds	r3, #2
 8009d88:	607b      	str	r3, [r7, #4]
 8009d8a:	e00a      	b.n	8009da2 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a08      	ldr	r2, [pc, #32]	@ (8009db0 <MQTTPacket_len+0x50>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	dc03      	bgt.n	8009d9c <MQTTPacket_len+0x3c>
		rem_len += 3;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	3303      	adds	r3, #3
 8009d98:	607b      	str	r3, [r7, #4]
 8009d9a:	e002      	b.n	8009da2 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	3304      	adds	r3, #4
 8009da0:	607b      	str	r3, [r7, #4]
	return rem_len;
 8009da2:	687b      	ldr	r3, [r7, #4]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	001ffffe 	.word	0x001ffffe

08009db4 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	60fb      	str	r3, [r7, #12]
 8009dc2:	e00a      	b.n	8009dda <bufchar+0x26>
		*c = *bufptr++;
 8009dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8009df0 <bufchar+0x3c>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	1c5a      	adds	r2, r3, #1
 8009dca:	4909      	ldr	r1, [pc, #36]	@ (8009df0 <bufchar+0x3c>)
 8009dcc:	600a      	str	r2, [r1, #0]
 8009dce:	781a      	ldrb	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	60fb      	str	r3, [r7, #12]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	dbf0      	blt.n	8009dc4 <bufchar+0x10>
	return count;
 8009de2:	683b      	ldr	r3, [r7, #0]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	20000268 	.word	0x20000268

08009df4 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8009dfe:	4a06      	ldr	r2, [pc, #24]	@ (8009e18 <MQTTPacket_decodeBuf+0x24>)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8009e04:	6839      	ldr	r1, [r7, #0]
 8009e06:	4805      	ldr	r0, [pc, #20]	@ (8009e1c <MQTTPacket_decodeBuf+0x28>)
 8009e08:	f7ff ff6d 	bl	8009ce6 <MQTTPacket_decode>
 8009e0c:	4603      	mov	r3, r0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	20000268 	.word	0x20000268
 8009e1c:	08009db5 	.word	0x08009db5

08009e20 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	021b      	lsls	r3, r3, #8
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	3201      	adds	r2, #1
 8009e38:	7812      	ldrb	r2, [r2, #0]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	1c9a      	adds	r2, r3, #2
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	601a      	str	r2, [r3, #0]
	return len;
 8009e48:	68bb      	ldr	r3, [r7, #8]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3714      	adds	r7, #20
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr

08009e56 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b085      	sub	sp, #20
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	1c5a      	adds	r2, r3, #1
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	601a      	str	r2, [r3, #0]
	return c;
 8009e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b083      	sub	sp, #12
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	460b      	mov	r3, r1
 8009e88:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	78fa      	ldrb	r2, [r7, #3]
 8009e90:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	1c5a      	adds	r2, r3, #1
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	601a      	str	r2, [r3, #0]
}
 8009e9c:	bf00      	nop
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	da00      	bge.n	8009eba <writeInt+0x12>
 8009eb8:	33ff      	adds	r3, #255	@ 0xff
 8009eba:	121b      	asrs	r3, r3, #8
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	b2d2      	uxtb	r2, r2
 8009ec4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	1c5a      	adds	r2, r3, #1
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	425a      	negs	r2, r3
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	b2d2      	uxtb	r2, r2
 8009ed8:	bf58      	it	pl
 8009eda:	4253      	negpl	r3, r2
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	6812      	ldr	r2, [r2, #0]
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	1c5a      	adds	r2, r3, #1
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	601a      	str	r2, [r3, #0]
}
 8009eee:	bf00      	nop
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b084      	sub	sp, #16
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8009f04:	6838      	ldr	r0, [r7, #0]
 8009f06:	f7fe f9e3 	bl	80082d0 <strlen>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8009f0e:	68f9      	ldr	r1, [r7, #12]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7ff ffc9 	bl	8009ea8 <writeInt>
	memcpy(*pptr, string, len);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	6839      	ldr	r1, [r7, #0]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f00e fbe7 	bl	80186f2 <memcpy>
	*pptr += len;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	441a      	add	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	601a      	str	r2, [r3, #0]
}
 8009f30:	bf00      	nop
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	4638      	mov	r0, r7
 8009f42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	dd12      	ble.n	8009f72 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4619      	mov	r1, r3
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f7ff ffa9 	bl	8009ea8 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68b9      	ldr	r1, [r7, #8]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f00e fbc7 	bl	80186f2 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	441a      	add	r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8009f70:	e00c      	b.n	8009f8c <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d005      	beq.n	8009f84 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f7ff ffbc 	bl	8009efa <writeCString>
}
 8009f82:	e003      	b.n	8009f8c <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8009f84:	2100      	movs	r1, #0
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f7ff ff8e 	bl	8009ea8 <writeInt>
}
 8009f8c:	bf00      	nop
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	dd1a      	ble.n	8009fe6 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8009fb0:	68b8      	ldr	r0, [r7, #8]
 8009fb2:	f7ff ff35 	bl	8009e20 <readInt>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	6852      	ldr	r2, [r2, #4]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d30c      	bcc.n	8009fe6 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	6852      	ldr	r2, [r2, #4]
 8009fdc:	441a      	add	r2, r3
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	601a      	str	r2, [r3, #0]
			rc = 1;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8009fec:	697b      	ldr	r3, [r7, #20]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3718      	adds	r7, #24
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b086      	sub	sp, #24
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	1d3b      	adds	r3, r7, #4
 8009ffe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800a002:	2300      	movs	r3, #0
 800a004:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d006      	beq.n	800a01a <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fe f95e 	bl	80082d0 <strlen>
 800a014:	4603      	mov	r3, r0
 800a016:	617b      	str	r3, [r7, #20]
 800a018:	e001      	b.n	800a01e <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	617b      	str	r3, [r7, #20]
	return rc;
 800a01e:	697b      	ldr	r3, [r7, #20]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3718      	adds	r7, #24
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	4638      	mov	r0, r7
 800a032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800a03a:	463b      	mov	r3, r7
 800a03c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a040:	f7ff ffd9 	bl	8009ff6 <MQTTstrlen>
 800a044:	4603      	mov	r3, r0
 800a046:	1c9a      	adds	r2, r3, #2
 800a048:	6a3b      	ldr	r3, [r7, #32]
 800a04a:	4413      	add	r3, r2
 800a04c:	697a      	ldr	r2, [r7, #20]
 800a04e:	4413      	add	r3, r2
 800a050:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2b00      	cmp	r3, #0
 800a056:	dd02      	ble.n	800a05e <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	3302      	adds	r3, #2
 800a05c:	617b      	str	r3, [r7, #20]
	return len;
 800a05e:	697b      	ldr	r3, [r7, #20]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3718      	adds	r7, #24
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b08a      	sub	sp, #40	@ 0x28
 800a06c:	af02      	add	r7, sp, #8
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	603b      	str	r3, [r7, #0]
 800a074:	4613      	mov	r3, r2
 800a076:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 800a07c:	2300      	movs	r3, #0
 800a07e:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800a080:	2300      	movs	r3, #0
 800a082:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800a084:	2300      	movs	r3, #0
 800a086:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800a088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a08a:	9300      	str	r3, [sp, #0]
 800a08c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a090:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a092:	6838      	ldr	r0, [r7, #0]
 800a094:	f7ff ffc8 	bl	800a028 <MQTTSerialize_publishLength>
 800a098:	61b8      	str	r0, [r7, #24]
 800a09a:	69b8      	ldr	r0, [r7, #24]
 800a09c:	f7ff fe60 	bl	8009d60 <MQTTPacket_len>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	da03      	bge.n	800a0b0 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800a0a8:	f06f 0301 	mvn.w	r3, #1
 800a0ac:	61fb      	str	r3, [r7, #28]
		goto exit;
 800a0ae:	e04c      	b.n	800a14a <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800a0b0:	7c3b      	ldrb	r3, [r7, #16]
 800a0b2:	2203      	movs	r2, #3
 800a0b4:	f362 1307 	bfi	r3, r2, #4, #4
 800a0b8:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 800a0ba:	79fb      	ldrb	r3, [r7, #7]
 800a0bc:	f003 0301 	and.w	r3, r3, #1
 800a0c0:	b2da      	uxtb	r2, r3
 800a0c2:	7c3b      	ldrb	r3, [r7, #16]
 800a0c4:	f362 03c3 	bfi	r3, r2, #3, #1
 800a0c8:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	f003 0303 	and.w	r3, r3, #3
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	7c3b      	ldrb	r3, [r7, #16]
 800a0d4:	f362 0342 	bfi	r3, r2, #1, #2
 800a0d8:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 800a0da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a0de:	f003 0301 	and.w	r3, r3, #1
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	7c3b      	ldrb	r3, [r7, #16]
 800a0e6:	f362 0300 	bfi	r3, r2, #0, #1
 800a0ea:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800a0ec:	7c3a      	ldrb	r2, [r7, #16]
 800a0ee:	f107 0314 	add.w	r3, r7, #20
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7ff fec2 	bl	8009e7e <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	69b9      	ldr	r1, [r7, #24]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7ff fdc2 	bl	8009c88 <MQTTPacket_encode>
 800a104:	4602      	mov	r2, r0
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	4413      	add	r3, r2
 800a10a:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800a10c:	f107 0014 	add.w	r0, r7, #20
 800a110:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a114:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a116:	f7ff ff0f 	bl	8009f38 <writeMQTTString>

	if (qos > 0)
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	dd06      	ble.n	800a12e <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800a120:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a122:	f107 0314 	add.w	r3, r7, #20
 800a126:	4611      	mov	r1, r2
 800a128:	4618      	mov	r0, r3
 800a12a:	f7ff febd 	bl	8009ea8 <writeInt>

	memcpy(ptr, payload, payloadlen);
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a132:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a134:	4618      	mov	r0, r3
 800a136:	f00e fadc 	bl	80186f2 <memcpy>
	ptr += payloadlen;
 800a13a:	697a      	ldr	r2, [r7, #20]
 800a13c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a13e:	4413      	add	r3, r2
 800a140:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800a14a:	69fb      	ldr	r3, [r7, #28]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3720      	adds	r7, #32
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <Sim800_RxCallBack>:
 * Call back function for release read SIM800 UART buffer.
 * @param NONE
 * @return NONE
 */
void Sim800_RxCallBack(void)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	af00      	add	r7, sp, #0
    rx_buffer[rx_index++] = rx_data;
 800a158:	4b50      	ldr	r3, [pc, #320]	@ (800a29c <Sim800_RxCallBack+0x148>)
 800a15a:	881b      	ldrh	r3, [r3, #0]
 800a15c:	1c5a      	adds	r2, r3, #1
 800a15e:	b291      	uxth	r1, r2
 800a160:	4a4e      	ldr	r2, [pc, #312]	@ (800a29c <Sim800_RxCallBack+0x148>)
 800a162:	8011      	strh	r1, [r2, #0]
 800a164:	461a      	mov	r2, r3
 800a166:	4b4e      	ldr	r3, [pc, #312]	@ (800a2a0 <Sim800_RxCallBack+0x14c>)
 800a168:	7819      	ldrb	r1, [r3, #0]
 800a16a:	4b4e      	ldr	r3, [pc, #312]	@ (800a2a4 <Sim800_RxCallBack+0x150>)
 800a16c:	5499      	strb	r1, [r3, r2]

    if (SIM800.mqttServer.connect == 0)
 800a16e:	4b4e      	ldr	r3, [pc, #312]	@ (800a2a8 <Sim800_RxCallBack+0x154>)
 800a170:	7c9b      	ldrb	r3, [r3, #18]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d135      	bne.n	800a1e2 <Sim800_RxCallBack+0x8e>
    {
        if (strstr((char *)rx_buffer, "\r\n") != NULL && rx_index == 2)
 800a176:	494d      	ldr	r1, [pc, #308]	@ (800a2ac <Sim800_RxCallBack+0x158>)
 800a178:	484a      	ldr	r0, [pc, #296]	@ (800a2a4 <Sim800_RxCallBack+0x150>)
 800a17a:	f00e fa14 	bl	80185a6 <strstr>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d007      	beq.n	800a194 <Sim800_RxCallBack+0x40>
 800a184:	4b45      	ldr	r3, [pc, #276]	@ (800a29c <Sim800_RxCallBack+0x148>)
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	2b02      	cmp	r3, #2
 800a18a:	d103      	bne.n	800a194 <Sim800_RxCallBack+0x40>
        {
            rx_index = 0;
 800a18c:	4b43      	ldr	r3, [pc, #268]	@ (800a29c <Sim800_RxCallBack+0x148>)
 800a18e:	2200      	movs	r2, #0
 800a190:	801a      	strh	r2, [r3, #0]
 800a192:	e026      	b.n	800a1e2 <Sim800_RxCallBack+0x8e>
        }
        else if (strstr((char *)rx_buffer, "\r\n") != NULL)
 800a194:	4945      	ldr	r1, [pc, #276]	@ (800a2ac <Sim800_RxCallBack+0x158>)
 800a196:	4843      	ldr	r0, [pc, #268]	@ (800a2a4 <Sim800_RxCallBack+0x150>)
 800a198:	f00e fa05 	bl	80185a6 <strstr>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d01f      	beq.n	800a1e2 <Sim800_RxCallBack+0x8e>
        {
            memcpy(mqtt_buffer, rx_buffer, sizeof(rx_buffer));
 800a1a2:	4a43      	ldr	r2, [pc, #268]	@ (800a2b0 <Sim800_RxCallBack+0x15c>)
 800a1a4:	4b3f      	ldr	r3, [pc, #252]	@ (800a2a4 <Sim800_RxCallBack+0x150>)
 800a1a6:	4610      	mov	r0, r2
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	f00e fa9f 	bl	80186f2 <memcpy>
            clearRxBuffer();
 800a1b4:	f000 f88e 	bl	800a2d4 <clearRxBuffer>
            if (strstr(mqtt_buffer, "DY CONNECT\r\n"))
 800a1b8:	493e      	ldr	r1, [pc, #248]	@ (800a2b4 <Sim800_RxCallBack+0x160>)
 800a1ba:	483d      	ldr	r0, [pc, #244]	@ (800a2b0 <Sim800_RxCallBack+0x15c>)
 800a1bc:	f00e f9f3 	bl	80185a6 <strstr>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <Sim800_RxCallBack+0x7a>
            {
                SIM800.mqttServer.connect = 0;
 800a1c6:	4b38      	ldr	r3, [pc, #224]	@ (800a2a8 <Sim800_RxCallBack+0x154>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	749a      	strb	r2, [r3, #18]
 800a1cc:	e009      	b.n	800a1e2 <Sim800_RxCallBack+0x8e>
            }
            else if (strstr(mqtt_buffer, "CONNECT\r\n"))
 800a1ce:	493a      	ldr	r1, [pc, #232]	@ (800a2b8 <Sim800_RxCallBack+0x164>)
 800a1d0:	4837      	ldr	r0, [pc, #220]	@ (800a2b0 <Sim800_RxCallBack+0x15c>)
 800a1d2:	f00e f9e8 	bl	80185a6 <strstr>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d002      	beq.n	800a1e2 <Sim800_RxCallBack+0x8e>
            {
                SIM800.mqttServer.connect = 1;
 800a1dc:	4b32      	ldr	r3, [pc, #200]	@ (800a2a8 <Sim800_RxCallBack+0x154>)
 800a1de:	2201      	movs	r2, #1
 800a1e0:	749a      	strb	r2, [r3, #18]
            }
        }
    }
    if (strstr((char *)rx_buffer, "CLOSED\r\n") || strstr((char *)rx_buffer, "ERROR\r\n") || strstr((char *)rx_buffer, "DEACT\r\n"))
 800a1e2:	4936      	ldr	r1, [pc, #216]	@ (800a2bc <Sim800_RxCallBack+0x168>)
 800a1e4:	482f      	ldr	r0, [pc, #188]	@ (800a2a4 <Sim800_RxCallBack+0x150>)
 800a1e6:	f00e f9de 	bl	80185a6 <strstr>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10d      	bne.n	800a20c <Sim800_RxCallBack+0xb8>
 800a1f0:	4933      	ldr	r1, [pc, #204]	@ (800a2c0 <Sim800_RxCallBack+0x16c>)
 800a1f2:	482c      	ldr	r0, [pc, #176]	@ (800a2a4 <Sim800_RxCallBack+0x150>)
 800a1f4:	f00e f9d7 	bl	80185a6 <strstr>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d106      	bne.n	800a20c <Sim800_RxCallBack+0xb8>
 800a1fe:	4931      	ldr	r1, [pc, #196]	@ (800a2c4 <Sim800_RxCallBack+0x170>)
 800a200:	4828      	ldr	r0, [pc, #160]	@ (800a2a4 <Sim800_RxCallBack+0x150>)
 800a202:	f00e f9d0 	bl	80185a6 <strstr>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d002      	beq.n	800a212 <Sim800_RxCallBack+0xbe>
    {
        SIM800.mqttServer.connect = 0;
 800a20c:	4b26      	ldr	r3, [pc, #152]	@ (800a2a8 <Sim800_RxCallBack+0x154>)
 800a20e:	2200      	movs	r2, #0
 800a210:	749a      	strb	r2, [r3, #18]
    }
    if (SIM800.mqttServer.connect == 1 && rx_data == 48)
 800a212:	4b25      	ldr	r3, [pc, #148]	@ (800a2a8 <Sim800_RxCallBack+0x154>)
 800a214:	7c9b      	ldrb	r3, [r3, #18]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d106      	bne.n	800a228 <Sim800_RxCallBack+0xd4>
 800a21a:	4b21      	ldr	r3, [pc, #132]	@ (800a2a0 <Sim800_RxCallBack+0x14c>)
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	2b30      	cmp	r3, #48	@ 0x30
 800a220:	d102      	bne.n	800a228 <Sim800_RxCallBack+0xd4>
    {
        mqtt_receive = 1;
 800a222:	4b29      	ldr	r3, [pc, #164]	@ (800a2c8 <Sim800_RxCallBack+0x174>)
 800a224:	2201      	movs	r2, #1
 800a226:	701a      	strb	r2, [r3, #0]
    }
    if (mqtt_receive == 1)
 800a228:	4b27      	ldr	r3, [pc, #156]	@ (800a2c8 <Sim800_RxCallBack+0x174>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d124      	bne.n	800a27a <Sim800_RxCallBack+0x126>
    {
        mqtt_buffer[mqtt_index++] = rx_data;
 800a230:	4b26      	ldr	r3, [pc, #152]	@ (800a2cc <Sim800_RxCallBack+0x178>)
 800a232:	881b      	ldrh	r3, [r3, #0]
 800a234:	1c5a      	adds	r2, r3, #1
 800a236:	b291      	uxth	r1, r2
 800a238:	4a24      	ldr	r2, [pc, #144]	@ (800a2cc <Sim800_RxCallBack+0x178>)
 800a23a:	8011      	strh	r1, [r2, #0]
 800a23c:	461a      	mov	r2, r3
 800a23e:	4b18      	ldr	r3, [pc, #96]	@ (800a2a0 <Sim800_RxCallBack+0x14c>)
 800a240:	7819      	ldrb	r1, [r3, #0]
 800a242:	4b1b      	ldr	r3, [pc, #108]	@ (800a2b0 <Sim800_RxCallBack+0x15c>)
 800a244:	5499      	strb	r1, [r3, r2]
        if (mqtt_index > 1 && mqtt_index - 1 > mqtt_buffer[1])
 800a246:	4b21      	ldr	r3, [pc, #132]	@ (800a2cc <Sim800_RxCallBack+0x178>)
 800a248:	881b      	ldrh	r3, [r3, #0]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d90d      	bls.n	800a26a <Sim800_RxCallBack+0x116>
 800a24e:	4b1f      	ldr	r3, [pc, #124]	@ (800a2cc <Sim800_RxCallBack+0x178>)
 800a250:	881b      	ldrh	r3, [r3, #0]
 800a252:	3b01      	subs	r3, #1
 800a254:	4a16      	ldr	r2, [pc, #88]	@ (800a2b0 <Sim800_RxCallBack+0x15c>)
 800a256:	7852      	ldrb	r2, [r2, #1]
 800a258:	4293      	cmp	r3, r2
 800a25a:	dd06      	ble.n	800a26a <Sim800_RxCallBack+0x116>
        {
            MQTT_Receive((unsigned char *)mqtt_buffer);
 800a25c:	4814      	ldr	r0, [pc, #80]	@ (800a2b0 <Sim800_RxCallBack+0x15c>)
 800a25e:	f000 fb25 	bl	800a8ac <MQTT_Receive>
            clearRxBuffer();
 800a262:	f000 f837 	bl	800a2d4 <clearRxBuffer>
            clearMqttBuffer();
 800a266:	f000 f847 	bl	800a2f8 <clearMqttBuffer>
        }
        if (mqtt_index >= sizeof(mqtt_buffer))
 800a26a:	4b18      	ldr	r3, [pc, #96]	@ (800a2cc <Sim800_RxCallBack+0x178>)
 800a26c:	881b      	ldrh	r3, [r3, #0]
 800a26e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800a272:	4293      	cmp	r3, r2
 800a274:	d901      	bls.n	800a27a <Sim800_RxCallBack+0x126>
        {
            clearMqttBuffer();
 800a276:	f000 f83f 	bl	800a2f8 <clearMqttBuffer>
        }
    }
    if (rx_index >= sizeof(mqtt_buffer))
 800a27a:	4b08      	ldr	r3, [pc, #32]	@ (800a29c <Sim800_RxCallBack+0x148>)
 800a27c:	881b      	ldrh	r3, [r3, #0]
 800a27e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800a282:	4293      	cmp	r3, r2
 800a284:	d903      	bls.n	800a28e <Sim800_RxCallBack+0x13a>
    {
        clearRxBuffer();
 800a286:	f000 f825 	bl	800a2d4 <clearRxBuffer>
        clearMqttBuffer();
 800a28a:	f000 f835 	bl	800a2f8 <clearMqttBuffer>
    }
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 800a28e:	2201      	movs	r2, #1
 800a290:	4903      	ldr	r1, [pc, #12]	@ (800a2a0 <Sim800_RxCallBack+0x14c>)
 800a292:	480f      	ldr	r0, [pc, #60]	@ (800a2d0 <Sim800_RxCallBack+0x17c>)
 800a294:	f008 fb33 	bl	80128fe <HAL_UART_Receive_IT>
}
 800a298:	bf00      	nop
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	20000824 	.word	0x20000824
 800a2a0:	2000026c 	.word	0x2000026c
 800a2a4:	20000270 	.word	0x20000270
 800a2a8:	20001304 	.word	0x20001304
 800a2ac:	0801b6a0 	.word	0x0801b6a0
 800a2b0:	20000828 	.word	0x20000828
 800a2b4:	0801b6a4 	.word	0x0801b6a4
 800a2b8:	0801b6b4 	.word	0x0801b6b4
 800a2bc:	0801b6c0 	.word	0x0801b6c0
 800a2c0:	0801b6cc 	.word	0x0801b6cc
 800a2c4:	0801b6d4 	.word	0x0801b6d4
 800a2c8:	20000826 	.word	0x20000826
 800a2cc:	20000ddc 	.word	0x20000ddc
 800a2d0:	20001048 	.word	0x20001048

0800a2d4 <clearRxBuffer>:
 * Clear SIM800 UART RX buffer.
 * @param NONE
 * @return NONE
 */
void clearRxBuffer(void)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	af00      	add	r7, sp, #0
    rx_index = 0;
 800a2d8:	4b05      	ldr	r3, [pc, #20]	@ (800a2f0 <clearRxBuffer+0x1c>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	801a      	strh	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 800a2de:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	4803      	ldr	r0, [pc, #12]	@ (800a2f4 <clearRxBuffer+0x20>)
 800a2e6:	f00e f931 	bl	801854c <memset>
}
 800a2ea:	bf00      	nop
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20000824 	.word	0x20000824
 800a2f4:	20000270 	.word	0x20000270

0800a2f8 <clearMqttBuffer>:
 * Clear MQTT buffer.
 * @param NONE
 * @return NONE
 */
void clearMqttBuffer(void)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	af00      	add	r7, sp, #0
    mqtt_receive = 0;
 800a2fc:	4b06      	ldr	r3, [pc, #24]	@ (800a318 <clearMqttBuffer+0x20>)
 800a2fe:	2200      	movs	r2, #0
 800a300:	701a      	strb	r2, [r3, #0]
    mqtt_index = 0;
 800a302:	4b06      	ldr	r3, [pc, #24]	@ (800a31c <clearMqttBuffer+0x24>)
 800a304:	2200      	movs	r2, #0
 800a306:	801a      	strh	r2, [r3, #0]
    memset(mqtt_buffer, 0, sizeof(mqtt_buffer));
 800a308:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800a30c:	2100      	movs	r1, #0
 800a30e:	4804      	ldr	r0, [pc, #16]	@ (800a320 <clearMqttBuffer+0x28>)
 800a310:	f00e f91c 	bl	801854c <memset>
}
 800a314:	bf00      	nop
 800a316:	bd80      	pop	{r7, pc}
 800a318:	20000826 	.word	0x20000826
 800a31c:	20000ddc 	.word	0x20000ddc
 800a320:	20000828 	.word	0x20000828

0800a324 <SIM800_SendCommand>:
 * @param reply to be used to set the correct answer to the command
 * @param delay to be used to the set pause to the reply
 * @return error, 0 is OK
 */
int SIM800_SendCommand(char *command, char *reply, uint16_t delay)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	4613      	mov	r3, r2
 800a330:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
                         (uint16_t)strlen(command));
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f7fd ffcc 	bl	80082d0 <strlen>
 800a338:	4603      	mov	r3, r0
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	461a      	mov	r2, r3
 800a33e:	68f9      	ldr	r1, [r7, #12]
 800a340:	4810      	ldr	r0, [pc, #64]	@ (800a384 <SIM800_SendCommand+0x60>)
 800a342:	f008 faa6 	bl	8012892 <HAL_UART_Transmit_IT>

#if FREERTOS == 1
    vTaskDelay(pdMS_TO_TICKS(delay));
 800a346:	88fb      	ldrh	r3, [r7, #6]
 800a348:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a34c:	fb02 f303 	mul.w	r3, r2, r3
 800a350:	4a0d      	ldr	r2, [pc, #52]	@ (800a388 <SIM800_SendCommand+0x64>)
 800a352:	fba2 2303 	umull	r2, r3, r2, r3
 800a356:	099b      	lsrs	r3, r3, #6
 800a358:	4618      	mov	r0, r3
 800a35a:	f00a faa5 	bl	80148a8 <vTaskDelay>
#else
    HAL_Delay(delay);
#endif

    if (strstr(mqtt_buffer, reply) != NULL)
 800a35e:	68b9      	ldr	r1, [r7, #8]
 800a360:	480a      	ldr	r0, [pc, #40]	@ (800a38c <SIM800_SendCommand+0x68>)
 800a362:	f00e f920 	bl	80185a6 <strstr>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d003      	beq.n	800a374 <SIM800_SendCommand+0x50>
    {
        clearRxBuffer();
 800a36c:	f7ff ffb2 	bl	800a2d4 <clearRxBuffer>
        return 0;
 800a370:	2300      	movs	r3, #0
 800a372:	e002      	b.n	800a37a <SIM800_SendCommand+0x56>
    }
    clearRxBuffer();
 800a374:	f7ff ffae 	bl	800a2d4 <clearRxBuffer>
    return 1;
 800a378:	2301      	movs	r3, #1
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	20001048 	.word	0x20001048
 800a388:	10624dd3 	.word	0x10624dd3
 800a38c:	20000828 	.word	0x20000828

0800a390 <MQTT_Init>:
 * initialization SIM800.
 * @param NONE
 * @return error status, 0 - OK
 */
int MQTT_Init(void)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b08c      	sub	sp, #48	@ 0x30
 800a394:	af02      	add	r7, sp, #8
    SIM800.mqttServer.connect = 0;
 800a396:	4b5b      	ldr	r3, [pc, #364]	@ (800a504 <MQTT_Init+0x174>)
 800a398:	2200      	movs	r2, #0
 800a39a:	749a      	strb	r2, [r3, #18]
    int error = 0;
 800a39c:	2300      	movs	r3, #0
 800a39e:	627b      	str	r3, [r7, #36]	@ 0x24
    char str[32] = {0};
 800a3a0:	1d3b      	adds	r3, r7, #4
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f00e f8d0 	bl	801854c <memset>
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	4956      	ldr	r1, [pc, #344]	@ (800a508 <MQTT_Init+0x178>)
 800a3b0:	4856      	ldr	r0, [pc, #344]	@ (800a50c <MQTT_Init+0x17c>)
 800a3b2:	f008 faa4 	bl	80128fe <HAL_UART_Receive_IT>
    safe_printf("Initializing MQTT...\r\n");
 800a3b6:	4856      	ldr	r0, [pc, #344]	@ (800a510 <MQTT_Init+0x180>)
 800a3b8:	f005 fdbc 	bl	800ff34 <safe_printf>
    SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY);
 800a3bc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800a3c0:	4954      	ldr	r1, [pc, #336]	@ (800a514 <MQTT_Init+0x184>)
 800a3c2:	4855      	ldr	r0, [pc, #340]	@ (800a518 <MQTT_Init+0x188>)
 800a3c4:	f7ff ffae 	bl	800a324 <SIM800_SendCommand>
    safe_printf("AT Command Sent: Checking Module Response\r\n");
 800a3c8:	4854      	ldr	r0, [pc, #336]	@ (800a51c <MQTT_Init+0x18c>)
 800a3ca:	f005 fdb3 	bl	800ff34 <safe_printf>
    SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY);
 800a3ce:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800a3d2:	4950      	ldr	r1, [pc, #320]	@ (800a514 <MQTT_Init+0x184>)
 800a3d4:	4852      	ldr	r0, [pc, #328]	@ (800a520 <MQTT_Init+0x190>)
 800a3d6:	f7ff ffa5 	bl	800a324 <SIM800_SendCommand>
    safe_printf("Echo Disabled\r\n");
 800a3da:	4852      	ldr	r0, [pc, #328]	@ (800a524 <MQTT_Init+0x194>)
 800a3dc:	f005 fdaa 	bl	800ff34 <safe_printf>
    error += SIM800_SendCommand("AT+CIPSHUT\r\n", "SHUT OK\r\n", CMD_DELAY);
 800a3e0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800a3e4:	4950      	ldr	r1, [pc, #320]	@ (800a528 <MQTT_Init+0x198>)
 800a3e6:	4851      	ldr	r0, [pc, #324]	@ (800a52c <MQTT_Init+0x19c>)
 800a3e8:	f7ff ff9c 	bl	800a324 <SIM800_SendCommand>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f0:	4413      	add	r3, r2
 800a3f2:	627b      	str	r3, [r7, #36]	@ 0x24
    safe_printf("Shutting Down Previous Connections... %s\r\n", (error == 0) ? "Success" : "Failed");
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d101      	bne.n	800a3fe <MQTT_Init+0x6e>
 800a3fa:	4b4d      	ldr	r3, [pc, #308]	@ (800a530 <MQTT_Init+0x1a0>)
 800a3fc:	e000      	b.n	800a400 <MQTT_Init+0x70>
 800a3fe:	4b4d      	ldr	r3, [pc, #308]	@ (800a534 <MQTT_Init+0x1a4>)
 800a400:	4619      	mov	r1, r3
 800a402:	484d      	ldr	r0, [pc, #308]	@ (800a538 <MQTT_Init+0x1a8>)
 800a404:	f005 fd96 	bl	800ff34 <safe_printf>
    error += SIM800_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
 800a408:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800a40c:	4941      	ldr	r1, [pc, #260]	@ (800a514 <MQTT_Init+0x184>)
 800a40e:	484b      	ldr	r0, [pc, #300]	@ (800a53c <MQTT_Init+0x1ac>)
 800a410:	f7ff ff88 	bl	800a324 <SIM800_SendCommand>
 800a414:	4602      	mov	r2, r0
 800a416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a418:	4413      	add	r3, r2
 800a41a:	627b      	str	r3, [r7, #36]	@ 0x24
    safe_printf("GPRS Attach... %s\r\n", (error == 0) ? "Success" : "Failed");
 800a41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d101      	bne.n	800a426 <MQTT_Init+0x96>
 800a422:	4b43      	ldr	r3, [pc, #268]	@ (800a530 <MQTT_Init+0x1a0>)
 800a424:	e000      	b.n	800a428 <MQTT_Init+0x98>
 800a426:	4b43      	ldr	r3, [pc, #268]	@ (800a534 <MQTT_Init+0x1a4>)
 800a428:	4619      	mov	r1, r3
 800a42a:	4845      	ldr	r0, [pc, #276]	@ (800a540 <MQTT_Init+0x1b0>)
 800a42c:	f005 fd82 	bl	800ff34 <safe_printf>
    error += SIM800_SendCommand("AT+CIPMODE=1\r\n", "OK\r\n", CMD_DELAY);
 800a430:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800a434:	4937      	ldr	r1, [pc, #220]	@ (800a514 <MQTT_Init+0x184>)
 800a436:	4843      	ldr	r0, [pc, #268]	@ (800a544 <MQTT_Init+0x1b4>)
 800a438:	f7ff ff74 	bl	800a324 <SIM800_SendCommand>
 800a43c:	4602      	mov	r2, r0
 800a43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a440:	4413      	add	r3, r2
 800a442:	627b      	str	r3, [r7, #36]	@ 0x24
    safe_printf("Setting TCP/IP Mode... %s\r\n", (error == 0) ? "Success" : "Failed");
 800a444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a446:	2b00      	cmp	r3, #0
 800a448:	d101      	bne.n	800a44e <MQTT_Init+0xbe>
 800a44a:	4b39      	ldr	r3, [pc, #228]	@ (800a530 <MQTT_Init+0x1a0>)
 800a44c:	e000      	b.n	800a450 <MQTT_Init+0xc0>
 800a44e:	4b39      	ldr	r3, [pc, #228]	@ (800a534 <MQTT_Init+0x1a4>)
 800a450:	4619      	mov	r1, r3
 800a452:	483d      	ldr	r0, [pc, #244]	@ (800a548 <MQTT_Init+0x1b8>)
 800a454:	f005 fd6e 	bl	800ff34 <safe_printf>
    snprintf(str, sizeof(str), "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n", SIM800.sim.apn, SIM800.sim.apn_user,
 800a458:	4b2a      	ldr	r3, [pc, #168]	@ (800a504 <MQTT_Init+0x174>)
 800a45a:	6819      	ldr	r1, [r3, #0]
 800a45c:	4b29      	ldr	r3, [pc, #164]	@ (800a504 <MQTT_Init+0x174>)
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	4a28      	ldr	r2, [pc, #160]	@ (800a504 <MQTT_Init+0x174>)
 800a462:	6892      	ldr	r2, [r2, #8]
 800a464:	1d38      	adds	r0, r7, #4
 800a466:	9201      	str	r2, [sp, #4]
 800a468:	9300      	str	r3, [sp, #0]
 800a46a:	460b      	mov	r3, r1
 800a46c:	4a37      	ldr	r2, [pc, #220]	@ (800a54c <MQTT_Init+0x1bc>)
 800a46e:	2120      	movs	r1, #32
 800a470:	f00d fed2 	bl	8018218 <sniprintf>
             SIM800.sim.apn_pass);
    error += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 800a474:	1d3b      	adds	r3, r7, #4
 800a476:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800a47a:	4926      	ldr	r1, [pc, #152]	@ (800a514 <MQTT_Init+0x184>)
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7ff ff51 	bl	800a324 <SIM800_SendCommand>
 800a482:	4602      	mov	r2, r0
 800a484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a486:	4413      	add	r3, r2
 800a488:	627b      	str	r3, [r7, #36]	@ 0x24
    safe_printf("Setting APN: %s... %s\r\n", SIM800.sim.apn, (error == 0) ? "Success" : "Failed");
 800a48a:	4b1e      	ldr	r3, [pc, #120]	@ (800a504 <MQTT_Init+0x174>)
 800a48c:	6819      	ldr	r1, [r3, #0]
 800a48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a490:	2b00      	cmp	r3, #0
 800a492:	d101      	bne.n	800a498 <MQTT_Init+0x108>
 800a494:	4b26      	ldr	r3, [pc, #152]	@ (800a530 <MQTT_Init+0x1a0>)
 800a496:	e000      	b.n	800a49a <MQTT_Init+0x10a>
 800a498:	4b26      	ldr	r3, [pc, #152]	@ (800a534 <MQTT_Init+0x1a4>)
 800a49a:	461a      	mov	r2, r3
 800a49c:	482c      	ldr	r0, [pc, #176]	@ (800a550 <MQTT_Init+0x1c0>)
 800a49e:	f005 fd49 	bl	800ff34 <safe_printf>
    error += SIM800_SendCommand("AT+CIICR\r\n", "OK\r\n", CMD_DELAY);
 800a4a2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800a4a6:	491b      	ldr	r1, [pc, #108]	@ (800a514 <MQTT_Init+0x184>)
 800a4a8:	482a      	ldr	r0, [pc, #168]	@ (800a554 <MQTT_Init+0x1c4>)
 800a4aa:	f7ff ff3b 	bl	800a324 <SIM800_SendCommand>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b2:	4413      	add	r3, r2
 800a4b4:	627b      	str	r3, [r7, #36]	@ 0x24
    safe_printf("Bringing Up Wireless Connection... %s\r\n", (error == 0) ? "Success" : "Failed");
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d101      	bne.n	800a4c0 <MQTT_Init+0x130>
 800a4bc:	4b1c      	ldr	r3, [pc, #112]	@ (800a530 <MQTT_Init+0x1a0>)
 800a4be:	e000      	b.n	800a4c2 <MQTT_Init+0x132>
 800a4c0:	4b1c      	ldr	r3, [pc, #112]	@ (800a534 <MQTT_Init+0x1a4>)
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	4824      	ldr	r0, [pc, #144]	@ (800a558 <MQTT_Init+0x1c8>)
 800a4c6:	f005 fd35 	bl	800ff34 <safe_printf>
    SIM800_SendCommand("AT+CIFSR\r\n", "", CMD_DELAY);
 800a4ca:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800a4ce:	4923      	ldr	r1, [pc, #140]	@ (800a55c <MQTT_Init+0x1cc>)
 800a4d0:	4823      	ldr	r0, [pc, #140]	@ (800a560 <MQTT_Init+0x1d0>)
 800a4d2:	f7ff ff27 	bl	800a324 <SIM800_SendCommand>
    safe_printf("Retrieving IP Address...\r\n");
 800a4d6:	4823      	ldr	r0, [pc, #140]	@ (800a564 <MQTT_Init+0x1d4>)
 800a4d8:	f005 fd2c 	bl	800ff34 <safe_printf>
    if (error == 0)
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d106      	bne.n	800a4f0 <MQTT_Init+0x160>
    {
    	safe_printf("MQTT Initialization Successful. Connecting to Broker...\r\n");
 800a4e2:	4821      	ldr	r0, [pc, #132]	@ (800a568 <MQTT_Init+0x1d8>)
 800a4e4:	f005 fd26 	bl	800ff34 <safe_printf>
        MQTT_Connect();
 800a4e8:	f000 f842 	bl	800a570 <MQTT_Connect>
        return error;
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ee:	e004      	b.n	800a4fa <MQTT_Init+0x16a>
    }
    else
    {
    	safe_printf("MQTT Initialization Failed! Error Code: %d\r\n", error);
 800a4f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a4f2:	481e      	ldr	r0, [pc, #120]	@ (800a56c <MQTT_Init+0x1dc>)
 800a4f4:	f005 fd1e 	bl	800ff34 <safe_printf>
        return error;
 800a4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3728      	adds	r7, #40	@ 0x28
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	20001304 	.word	0x20001304
 800a508:	2000026c 	.word	0x2000026c
 800a50c:	20001048 	.word	0x20001048
 800a510:	0801b6dc 	.word	0x0801b6dc
 800a514:	0801b6f4 	.word	0x0801b6f4
 800a518:	0801b6fc 	.word	0x0801b6fc
 800a51c:	0801b704 	.word	0x0801b704
 800a520:	0801b730 	.word	0x0801b730
 800a524:	0801b738 	.word	0x0801b738
 800a528:	0801b748 	.word	0x0801b748
 800a52c:	0801b754 	.word	0x0801b754
 800a530:	0801b764 	.word	0x0801b764
 800a534:	0801b76c 	.word	0x0801b76c
 800a538:	0801b774 	.word	0x0801b774
 800a53c:	0801b7a0 	.word	0x0801b7a0
 800a540:	0801b7b0 	.word	0x0801b7b0
 800a544:	0801b7c4 	.word	0x0801b7c4
 800a548:	0801b7d4 	.word	0x0801b7d4
 800a54c:	0801b7f0 	.word	0x0801b7f0
 800a550:	0801b80c 	.word	0x0801b80c
 800a554:	0801b824 	.word	0x0801b824
 800a558:	0801b830 	.word	0x0801b830
 800a55c:	0801b858 	.word	0x0801b858
 800a560:	0801b85c 	.word	0x0801b85c
 800a564:	0801b868 	.word	0x0801b868
 800a568:	0801b884 	.word	0x0801b884
 800a56c:	0801b8c0 	.word	0x0801b8c0

0800a570 <MQTT_Connect>:
 * Connect to MQTT server in Internet over TCP.
 * @param NONE
 * @return NONE
 */
void MQTT_Connect(void)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b0d8      	sub	sp, #352	@ 0x160
 800a574:	af00      	add	r7, sp, #0
    SIM800.mqttReceive.newEvent = 0;
 800a576:	4b5c      	ldr	r3, [pc, #368]	@ (800a6e8 <MQTT_Connect+0x178>)
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    SIM800.mqttServer.connect = 0;
 800a57e:	4b5a      	ldr	r3, [pc, #360]	@ (800a6e8 <MQTT_Connect+0x178>)
 800a580:	2200      	movs	r2, #0
 800a582:	749a      	strb	r2, [r3, #18]
    char str[128] = {0};
 800a584:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a588:	2280      	movs	r2, #128	@ 0x80
 800a58a:	2100      	movs	r1, #0
 800a58c:	4618      	mov	r0, r3
 800a58e:	f00d ffdd 	bl	801854c <memset>
    unsigned char buf[128] = {0};
 800a592:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800a596:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a59a:	4618      	mov	r0, r3
 800a59c:	2380      	movs	r3, #128	@ 0x80
 800a59e:	461a      	mov	r2, r3
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	f00d ffd3 	bl	801854c <memset>
    safe_printf("MQTT Connection Starting...\r\n");
 800a5a6:	4851      	ldr	r0, [pc, #324]	@ (800a6ec <MQTT_Connect+0x17c>)
 800a5a8:	f005 fcc4 	bl	800ff34 <safe_printf>
    sprintf(str, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", SIM800.mqttServer.host, SIM800.mqttServer.port);
 800a5ac:	4b4e      	ldr	r3, [pc, #312]	@ (800a6e8 <MQTT_Connect+0x178>)
 800a5ae:	68da      	ldr	r2, [r3, #12]
 800a5b0:	4b4d      	ldr	r3, [pc, #308]	@ (800a6e8 <MQTT_Connect+0x178>)
 800a5b2:	8a1b      	ldrh	r3, [r3, #16]
 800a5b4:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 800a5b8:	494d      	ldr	r1, [pc, #308]	@ (800a6f0 <MQTT_Connect+0x180>)
 800a5ba:	f00d fe63 	bl	8018284 <siprintf>
    safe_printf("Sending: %s\r\n", str);
 800a5be:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	484b      	ldr	r0, [pc, #300]	@ (800a6f4 <MQTT_Connect+0x184>)
 800a5c6:	f005 fcb5 	bl	800ff34 <safe_printf>
    if (SIM800_SendCommand(str, "OK\r\n", CMD_DELAY) != 0)
 800a5ca:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a5ce:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800a5d2:	4949      	ldr	r1, [pc, #292]	@ (800a6f8 <MQTT_Connect+0x188>)
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7ff fea5 	bl	800a324 <SIM800_SendCommand>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d003      	beq.n	800a5e8 <MQTT_Connect+0x78>
	{
		safe_printf("ERROR: TCP Connection Failed!\r\n");
 800a5e0:	4846      	ldr	r0, [pc, #280]	@ (800a6fc <MQTT_Connect+0x18c>)
 800a5e2:	f005 fca7 	bl	800ff34 <safe_printf>
 800a5e6:	e07a      	b.n	800a6de <MQTT_Connect+0x16e>
		return;
	}

	safe_printf("TCP Connection Established!\r\n");
 800a5e8:	4845      	ldr	r0, [pc, #276]	@ (800a700 <MQTT_Connect+0x190>)
 800a5ea:	f005 fca3 	bl	800ff34 <safe_printf>
#if FREERTOS == 1
	vTaskDelay(pdMS_TO_TICKS(5000));
 800a5ee:	f241 3088 	movw	r0, #5000	@ 0x1388
 800a5f2:	f00a f959 	bl	80148a8 <vTaskDelay>
#else
    HAL_Delay(5000);
#endif
    if (SIM800.mqttServer.connect == 1)
 800a5f6:	4b3c      	ldr	r3, [pc, #240]	@ (800a6e8 <MQTT_Connect+0x178>)
 800a5f8:	7c9b      	ldrb	r3, [r3, #18]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d16f      	bne.n	800a6de <MQTT_Connect+0x16e>
    {
    	safe_printf("SIM800 Connected to MQTT Broker!\r\n");
 800a5fe:	4841      	ldr	r0, [pc, #260]	@ (800a704 <MQTT_Connect+0x194>)
 800a600:	f005 fc98 	bl	800ff34 <safe_printf>
        MQTTPacket_connectData datas = MQTTPacket_connectData_initializer;
 800a604:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800a608:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800a60c:	4a3e      	ldr	r2, [pc, #248]	@ (800a708 <MQTT_Connect+0x198>)
 800a60e:	4618      	mov	r0, r3
 800a610:	4611      	mov	r1, r2
 800a612:	2358      	movs	r3, #88	@ 0x58
 800a614:	461a      	mov	r2, r3
 800a616:	f00e f86c 	bl	80186f2 <memcpy>
        datas.username.cstring = SIM800.mqttClient.username;
 800a61a:	4b33      	ldr	r3, [pc, #204]	@ (800a6e8 <MQTT_Connect+0x178>)
 800a61c:	695a      	ldr	r2, [r3, #20]
 800a61e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800a622:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800a626:	641a      	str	r2, [r3, #64]	@ 0x40
        datas.password.cstring = SIM800.mqttClient.pass;
 800a628:	4b2f      	ldr	r3, [pc, #188]	@ (800a6e8 <MQTT_Connect+0x178>)
 800a62a:	699a      	ldr	r2, [r3, #24]
 800a62c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800a630:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800a634:	64da      	str	r2, [r3, #76]	@ 0x4c
        datas.clientID.cstring = SIM800.mqttClient.clientID;
 800a636:	4b2c      	ldr	r3, [pc, #176]	@ (800a6e8 <MQTT_Connect+0x178>)
 800a638:	69da      	ldr	r2, [r3, #28]
 800a63a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800a63e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800a642:	60da      	str	r2, [r3, #12]
        datas.keepAliveInterval = SIM800.mqttClient.keepAliveInterval;
 800a644:	4b28      	ldr	r3, [pc, #160]	@ (800a6e8 <MQTT_Connect+0x178>)
 800a646:	8c1a      	ldrh	r2, [r3, #32]
 800a648:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800a64c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800a650:	831a      	strh	r2, [r3, #24]
        datas.cleansession = 1;
 800a652:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800a656:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800a65a:	2201      	movs	r2, #1
 800a65c:	769a      	strb	r2, [r3, #26]

        safe_printf("MQTT Client ID: %s\r\n", datas.clientID.cstring);
 800a65e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800a662:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	4619      	mov	r1, r3
 800a66a:	4828      	ldr	r0, [pc, #160]	@ (800a70c <MQTT_Connect+0x19c>)
 800a66c:	f005 fc62 	bl	800ff34 <safe_printf>
		safe_printf("MQTT Username: %s\r\n", datas.username.cstring);
 800a670:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800a674:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800a678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a67a:	4619      	mov	r1, r3
 800a67c:	4824      	ldr	r0, [pc, #144]	@ (800a710 <MQTT_Connect+0x1a0>)
 800a67e:	f005 fc59 	bl	800ff34 <safe_printf>
		safe_printf("MQTT Password: %s\r\n", datas.password.cstring);
 800a682:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800a686:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800a68a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a68c:	4619      	mov	r1, r3
 800a68e:	4821      	ldr	r0, [pc, #132]	@ (800a714 <MQTT_Connect+0x1a4>)
 800a690:	f005 fc50 	bl	800ff34 <safe_printf>
		safe_printf("MQTT KeepAlive Interval: %d seconds\r\n", datas.keepAliveInterval);
 800a694:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800a698:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800a69c:	8b1b      	ldrh	r3, [r3, #24]
 800a69e:	4619      	mov	r1, r3
 800a6a0:	481d      	ldr	r0, [pc, #116]	@ (800a718 <MQTT_Connect+0x1a8>)
 800a6a2:	f005 fc47 	bl	800ff34 <safe_printf>

        int mqtt_len = MQTTSerialize_connect(buf, sizeof(buf), &datas);
 800a6a6:	1d3a      	adds	r2, r7, #4
 800a6a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800a6ac:	2180      	movs	r1, #128	@ 0x80
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7ff f98c 	bl	80099cc <MQTTSerialize_connect>
 800a6b4:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c
        HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 800a6b8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	4815      	ldr	r0, [pc, #84]	@ (800a71c <MQTT_Connect+0x1ac>)
 800a6c6:	f008 f8e4 	bl	8012892 <HAL_UART_Transmit_IT>
        safe_printf("==============================================================================\n\r");
 800a6ca:	4815      	ldr	r0, [pc, #84]	@ (800a720 <MQTT_Connect+0x1b0>)
 800a6cc:	f005 fc32 	bl	800ff34 <safe_printf>
        safe_printf("MQTT connection Established and ready to Transmit and Receive data!..\n\r");
 800a6d0:	4814      	ldr	r0, [pc, #80]	@ (800a724 <MQTT_Connect+0x1b4>)
 800a6d2:	f005 fc2f 	bl	800ff34 <safe_printf>

#if FREERTOS == 1
        vTaskDelay(pdMS_TO_TICKS(5000));
 800a6d6:	f241 3088 	movw	r0, #5000	@ 0x1388
 800a6da:	f00a f8e5 	bl	80148a8 <vTaskDelay>
#else
        HAL_Delay(5000);
#endif
    }
}
 800a6de:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	20001304 	.word	0x20001304
 800a6ec:	0801b8f0 	.word	0x0801b8f0
 800a6f0:	0801b910 	.word	0x0801b910
 800a6f4:	0801b92c 	.word	0x0801b92c
 800a6f8:	0801b6f4 	.word	0x0801b6f4
 800a6fc:	0801b93c 	.word	0x0801b93c
 800a700:	0801b95c 	.word	0x0801b95c
 800a704:	0801b97c 	.word	0x0801b97c
 800a708:	0801baa4 	.word	0x0801baa4
 800a70c:	0801b9a0 	.word	0x0801b9a0
 800a710:	0801b9b8 	.word	0x0801b9b8
 800a714:	0801b9cc 	.word	0x0801b9cc
 800a718:	0801b9e0 	.word	0x0801b9e0
 800a71c:	20001048 	.word	0x20001048
 800a720:	0801ba08 	.word	0x0801ba08
 800a724:	0801ba5c 	.word	0x0801ba5c

0800a728 <MQTT_Pub>:
 * @param topic to be used to the set topic
 * @param payload to be used to the set message for topic
 * @return NONE
 */
void MQTT_Pub(char *topic, char *payload)
{
 800a728:	b590      	push	{r4, r7, lr}
 800a72a:	b0cf      	sub	sp, #316	@ 0x13c
 800a72c:	af08      	add	r7, sp, #32
 800a72e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a732:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800a736:	6018      	str	r0, [r3, #0]
 800a738:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a73c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800a740:	6019      	str	r1, [r3, #0]
    unsigned char buf[256] = {0};
 800a742:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a746:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a74a:	4618      	mov	r0, r3
 800a74c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a750:	461a      	mov	r2, r3
 800a752:	2100      	movs	r1, #0
 800a754:	f00d fefa 	bl	801854c <memset>

    MQTTString topicString = MQTTString_initializer;
 800a758:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a75c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a760:	2200      	movs	r2, #0
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a768:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a76c:	2200      	movs	r2, #0
 800a76e:	605a      	str	r2, [r3, #4]
 800a770:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a774:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a778:	2200      	movs	r2, #0
 800a77a:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 800a77c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a780:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a784:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800a788:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800a78c:	6812      	ldr	r2, [r2, #0]
 800a78e:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
                                         topicString, (unsigned char *)payload, (int)strlen(payload));
 800a790:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a794:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800a798:	6818      	ldr	r0, [r3, #0]
 800a79a:	f7fd fd99 	bl	80082d0 <strlen>
 800a79e:	4603      	mov	r3, r0
    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
 800a7a0:	f107 0414 	add.w	r4, r7, #20
 800a7a4:	9306      	str	r3, [sp, #24]
 800a7a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a7aa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	9305      	str	r3, [sp, #20]
 800a7b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a7b6:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 800a7ba:	ab02      	add	r3, sp, #8
 800a7bc:	ca07      	ldmia	r2, {r0, r1, r2}
 800a7be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	9301      	str	r3, [sp, #4]
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f7ff fc48 	bl	800a068 <MQTTSerialize_publish>
 800a7d8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 800a7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7e0:	b29a      	uxth	r2, r3
 800a7e2:	f107 0314 	add.w	r3, r7, #20
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	4805      	ldr	r0, [pc, #20]	@ (800a800 <MQTT_Pub+0xd8>)
 800a7ea:	f008 f852 	bl	8012892 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    vTaskDelay(pdMS_TO_TICKS(100));
 800a7ee:	2064      	movs	r0, #100	@ 0x64
 800a7f0:	f00a f85a 	bl	80148a8 <vTaskDelay>
#else
    HAL_Delay(100);
#endif
}
 800a7f4:	bf00      	nop
 800a7f6:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd90      	pop	{r4, r7, pc}
 800a7fe:	bf00      	nop
 800a800:	20001048 	.word	0x20001048

0800a804 <MQTT_Sub>:
 * Subscribe on the MQTT broker of the message in a topic
 * @param topic to be used to the set topic
 * @return NONE
 */
void MQTT_Sub(char *topic)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b0ca      	sub	sp, #296	@ 0x128
 800a808:	af04      	add	r7, sp, #16
 800a80a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a80e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800a812:	6018      	str	r0, [r3, #0]
    unsigned char buf[256] = {0};
 800a814:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a818:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a81c:	4618      	mov	r0, r3
 800a81e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a822:	461a      	mov	r2, r3
 800a824:	2100      	movs	r1, #0
 800a826:	f00d fe91 	bl	801854c <memset>

    MQTTString topicString = MQTTString_initializer;
 800a82a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a82e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a832:	2200      	movs	r2, #0
 800a834:	601a      	str	r2, [r3, #0]
 800a836:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a83a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a83e:	2200      	movs	r2, #0
 800a840:	605a      	str	r2, [r3, #4]
 800a842:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a846:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a84a:	2200      	movs	r2, #0
 800a84c:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 800a84e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a852:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a856:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800a85a:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800a85e:	6812      	ldr	r2, [r2, #0]
 800a860:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_subscribe(buf, sizeof(buf), 0, 1, 1,
 800a862:	f107 0014 	add.w	r0, r7, #20
 800a866:	2300      	movs	r3, #0
 800a868:	9302      	str	r3, [sp, #8]
 800a86a:	f107 0308 	add.w	r3, r7, #8
 800a86e:	9301      	str	r3, [sp, #4]
 800a870:	2301      	movs	r3, #1
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	2301      	movs	r3, #1
 800a876:	2200      	movs	r2, #0
 800a878:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a87c:	f000 f889 	bl	800a992 <MQTTSerialize_subscribe>
 800a880:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
                                           &topicString, 0);
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 800a884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a888:	b29a      	uxth	r2, r3
 800a88a:	f107 0314 	add.w	r3, r7, #20
 800a88e:	4619      	mov	r1, r3
 800a890:	4805      	ldr	r0, [pc, #20]	@ (800a8a8 <MQTT_Sub+0xa4>)
 800a892:	f007 fffe 	bl	8012892 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    vTaskDelay(pdMS_TO_TICKS(100));
 800a896:	2064      	movs	r0, #100	@ 0x64
 800a898:	f00a f806 	bl	80148a8 <vTaskDelay>
#else
    HAL_Delay(100);
#endif
}
 800a89c:	bf00      	nop
 800a89e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20001048 	.word	0x20001048

0800a8ac <MQTT_Receive>:
 * Receive message from MQTT broker
 * @param receive mqtt bufer
 * @return NONE
 */
void MQTT_Receive(unsigned char *buf)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b08c      	sub	sp, #48	@ 0x30
 800a8b0:	af06      	add	r7, sp, #24
 800a8b2:	6078      	str	r0, [r7, #4]
    memset(SIM800.mqttReceive.topic, 0, sizeof(SIM800.mqttReceive.topic));
 800a8b4:	2280      	movs	r2, #128	@ 0x80
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	481a      	ldr	r0, [pc, #104]	@ (800a924 <MQTT_Receive+0x78>)
 800a8ba:	f00d fe47 	bl	801854c <memset>
    memset(SIM800.mqttReceive.payload, 0, sizeof(SIM800.mqttReceive.payload));
 800a8be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	4818      	ldr	r0, [pc, #96]	@ (800a928 <MQTT_Receive+0x7c>)
 800a8c6:	f00d fe41 	bl	801854c <memset>
    MQTTString receivedTopic;
    unsigned char *payload;
    MQTTDeserialize_publish(&SIM800.mqttReceive.dup, &SIM800.mqttReceive.qos, &SIM800.mqttReceive.retained,
 800a8ca:	2304      	movs	r3, #4
 800a8cc:	9304      	str	r3, [sp, #16]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	9303      	str	r3, [sp, #12]
 800a8d2:	4b16      	ldr	r3, [pc, #88]	@ (800a92c <MQTT_Receive+0x80>)
 800a8d4:	9302      	str	r3, [sp, #8]
 800a8d6:	f107 0308 	add.w	r3, r7, #8
 800a8da:	9301      	str	r3, [sp, #4]
 800a8dc:	f107 030c 	add.w	r3, r7, #12
 800a8e0:	9300      	str	r3, [sp, #0]
 800a8e2:	4b13      	ldr	r3, [pc, #76]	@ (800a930 <MQTT_Receive+0x84>)
 800a8e4:	4a13      	ldr	r2, [pc, #76]	@ (800a934 <MQTT_Receive+0x88>)
 800a8e6:	4914      	ldr	r1, [pc, #80]	@ (800a938 <MQTT_Receive+0x8c>)
 800a8e8:	4814      	ldr	r0, [pc, #80]	@ (800a93c <MQTT_Receive+0x90>)
 800a8ea:	f7ff f95b 	bl	8009ba4 <MQTTDeserialize_publish>
                            &SIM800.mqttReceive.msgId,
                            &receivedTopic, &payload, &SIM800.mqttReceive.payloadLen, buf,
                            sizeof(buf));
    memcpy(SIM800.mqttReceive.topic, receivedTopic.lenstring.data, receivedTopic.lenstring.len);
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	693a      	ldr	r2, [r7, #16]
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	480b      	ldr	r0, [pc, #44]	@ (800a924 <MQTT_Receive+0x78>)
 800a8f6:	f00d fefc 	bl	80186f2 <memcpy>
    SIM800.mqttReceive.topicLen = receivedTopic.lenstring.len;
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	4a10      	ldr	r2, [pc, #64]	@ (800a940 <MQTT_Receive+0x94>)
 800a8fe:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
    memcpy(SIM800.mqttReceive.payload, payload, SIM800.mqttReceive.payloadLen);
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	4a0e      	ldr	r2, [pc, #56]	@ (800a940 <MQTT_Receive+0x94>)
 800a906:	f8d2 2130 	ldr.w	r2, [r2, #304]	@ 0x130
 800a90a:	4619      	mov	r1, r3
 800a90c:	4806      	ldr	r0, [pc, #24]	@ (800a928 <MQTT_Receive+0x7c>)
 800a90e:	f00d fef0 	bl	80186f2 <memcpy>
    SIM800.mqttReceive.newEvent = 1;
 800a912:	4b0b      	ldr	r3, [pc, #44]	@ (800a940 <MQTT_Receive+0x94>)
 800a914:	2201      	movs	r2, #1
 800a916:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800a91a:	bf00      	nop
 800a91c:	3718      	adds	r7, #24
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	20001438 	.word	0x20001438
 800a928:	20001334 	.word	0x20001334
 800a92c:	20001434 	.word	0x20001434
 800a930:	20001332 	.word	0x20001332
 800a934:	20001330 	.word	0x20001330
 800a938:	2000132c 	.word	0x2000132c
 800a93c:	20001329 	.word	0x20001329
 800a940:	20001304 	.word	0x20001304

0800a944 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 800a94e:	2302      	movs	r3, #2
 800a950:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 800a952:	2300      	movs	r3, #0
 800a954:	60fb      	str	r3, [r7, #12]
 800a956:	e013      	b.n	800a980 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	4613      	mov	r3, r2
 800a95c:	005b      	lsls	r3, r3, #1
 800a95e:	4413      	add	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	461a      	mov	r2, r3
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	4413      	add	r3, r2
 800a968:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a96c:	f7ff fb43 	bl	8009ff6 <MQTTstrlen>
 800a970:	4603      	mov	r3, r0
 800a972:	3303      	adds	r3, #3
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	4413      	add	r3, r2
 800a978:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	3301      	adds	r3, #1
 800a97e:	60fb      	str	r3, [r7, #12]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	429a      	cmp	r2, r3
 800a986:	dbe7      	blt.n	800a958 <MQTTSerialize_subscribeLength+0x14>
	return len;
 800a988:	68bb      	ldr	r3, [r7, #8]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b08a      	sub	sp, #40	@ 0x28
 800a996:	af00      	add	r7, sp, #0
 800a998:	60f8      	str	r0, [r7, #12]
 800a99a:	60b9      	str	r1, [r7, #8]
 800a99c:	4611      	mov	r1, r2
 800a99e:	461a      	mov	r2, r3
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	71fb      	strb	r3, [r7, #7]
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	627b      	str	r3, [r7, #36]	@ 0x24
	int i = 0;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 800a9bc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a9be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9c0:	f7ff ffc0 	bl	800a944 <MQTTSerialize_subscribeLength>
 800a9c4:	61f8      	str	r0, [r7, #28]
 800a9c6:	69f8      	ldr	r0, [r7, #28]
 800a9c8:	f7ff f9ca 	bl	8009d60 <MQTTPacket_len>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	da03      	bge.n	800a9dc <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800a9d4:	f06f 0301 	mvn.w	r3, #1
 800a9d8:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 800a9da:	e051      	b.n	800aa80 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 800a9e0:	7d3b      	ldrb	r3, [r7, #20]
 800a9e2:	2208      	movs	r2, #8
 800a9e4:	f362 1307 	bfi	r3, r2, #4, #4
 800a9e8:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 800a9ea:	79fb      	ldrb	r3, [r7, #7]
 800a9ec:	f003 0301 	and.w	r3, r3, #1
 800a9f0:	b2da      	uxtb	r2, r3
 800a9f2:	7d3b      	ldrb	r3, [r7, #20]
 800a9f4:	f362 03c3 	bfi	r3, r2, #3, #1
 800a9f8:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 800a9fa:	7d3b      	ldrb	r3, [r7, #20]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f362 0342 	bfi	r3, r2, #1, #2
 800aa02:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 800aa04:	7d3a      	ldrb	r2, [r7, #20]
 800aa06:	f107 0318 	add.w	r3, r7, #24
 800aa0a:	4611      	mov	r1, r2
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7ff fa36 	bl	8009e7e <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	69f9      	ldr	r1, [r7, #28]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7ff f936 	bl	8009c88 <MQTTPacket_encode>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	4413      	add	r3, r2
 800aa22:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 800aa24:	88ba      	ldrh	r2, [r7, #4]
 800aa26:	f107 0318 	add.w	r3, r7, #24
 800aa2a:	4611      	mov	r1, r2
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7ff fa3b 	bl	8009ea8 <writeInt>

	for (i = 0; i < count; ++i)
 800aa32:	2300      	movs	r3, #0
 800aa34:	623b      	str	r3, [r7, #32]
 800aa36:	e01b      	b.n	800aa70 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 800aa38:	6a3a      	ldr	r2, [r7, #32]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	005b      	lsls	r3, r3, #1
 800aa3e:	4413      	add	r3, r2
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	461a      	mov	r2, r3
 800aa44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa46:	4413      	add	r3, r2
 800aa48:	f107 0018 	add.w	r0, r7, #24
 800aa4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aa4e:	f7ff fa73 	bl	8009f38 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800aa52:	6a3b      	ldr	r3, [r7, #32]
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa58:	4413      	add	r3, r2
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	b2da      	uxtb	r2, r3
 800aa5e:	f107 0318 	add.w	r3, r7, #24
 800aa62:	4611      	mov	r1, r2
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7ff fa0a 	bl	8009e7e <writeChar>
	for (i = 0; i < count; ++i)
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	623b      	str	r3, [r7, #32]
 800aa70:	6a3a      	ldr	r2, [r7, #32]
 800aa72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa74:	429a      	cmp	r2, r3
 800aa76:	dbdf      	blt.n	800aa38 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 800aa78:	69ba      	ldr	r2, [r7, #24]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	627b      	str	r3, [r7, #36]	@ 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800aa80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3728      	adds	r7, #40	@ 0x28
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
	...

0800aa8c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800aa90:	2200      	movs	r2, #0
 800aa92:	2102      	movs	r1, #2
 800aa94:	4802      	ldr	r0, [pc, #8]	@ (800aaa0 <ST7735_Select+0x14>)
 800aa96:	f005 fe3b 	bl	8010710 <HAL_GPIO_WritePin>
}
 800aa9a:	bf00      	nop
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	40020000 	.word	0x40020000

0800aaa4 <ST7735_Unselect>:

void ST7735_Unselect()
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	2102      	movs	r1, #2
 800aaac:	4802      	ldr	r0, [pc, #8]	@ (800aab8 <ST7735_Unselect+0x14>)
 800aaae:	f005 fe2f 	bl	8010710 <HAL_GPIO_WritePin>
}
 800aab2:	bf00      	nop
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	40020000 	.word	0x40020000

0800aabc <ST7735_Reset>:

void ST7735_Reset()
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800aac0:	2200      	movs	r2, #0
 800aac2:	2110      	movs	r1, #16
 800aac4:	4806      	ldr	r0, [pc, #24]	@ (800aae0 <ST7735_Reset+0x24>)
 800aac6:	f005 fe23 	bl	8010710 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800aaca:	2005      	movs	r0, #5
 800aacc:	f005 fadc 	bl	8010088 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800aad0:	2201      	movs	r2, #1
 800aad2:	2110      	movs	r1, #16
 800aad4:	4802      	ldr	r0, [pc, #8]	@ (800aae0 <ST7735_Reset+0x24>)
 800aad6:	f005 fe1b 	bl	8010710 <HAL_GPIO_WritePin>
}
 800aada:	bf00      	nop
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	40020000 	.word	0x40020000

0800aae4 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800aaee:	2200      	movs	r2, #0
 800aaf0:	2110      	movs	r1, #16
 800aaf2:	4807      	ldr	r0, [pc, #28]	@ (800ab10 <ST7735_WriteCommand+0x2c>)
 800aaf4:	f005 fe0c 	bl	8010710 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800aaf8:	1df9      	adds	r1, r7, #7
 800aafa:	f04f 33ff 	mov.w	r3, #4294967295
 800aafe:	2201      	movs	r2, #1
 800ab00:	4804      	ldr	r0, [pc, #16]	@ (800ab14 <ST7735_WriteCommand+0x30>)
 800ab02:	f006 fcbe 	bl	8011482 <HAL_SPI_Transmit>
}
 800ab06:	bf00      	nop
 800ab08:	3708      	adds	r7, #8
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	40020800 	.word	0x40020800
 800ab14:	20000f40 	.word	0x20000f40

0800ab18 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800ab22:	2201      	movs	r2, #1
 800ab24:	2110      	movs	r1, #16
 800ab26:	4807      	ldr	r0, [pc, #28]	@ (800ab44 <ST7735_WriteData+0x2c>)
 800ab28:	f005 fdf2 	bl	8010710 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	f04f 33ff 	mov.w	r3, #4294967295
 800ab34:	6879      	ldr	r1, [r7, #4]
 800ab36:	4804      	ldr	r0, [pc, #16]	@ (800ab48 <ST7735_WriteData+0x30>)
 800ab38:	f006 fca3 	bl	8011482 <HAL_SPI_Transmit>
}
 800ab3c:	bf00      	nop
 800ab3e:	3708      	adds	r7, #8
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	40020800 	.word	0x40020800
 800ab48:	20000f40 	.word	0x20000f40

0800ab4c <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	1c5a      	adds	r2, r3, #1
 800ab58:	607a      	str	r2, [r7, #4]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800ab5e:	e034      	b.n	800abca <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	1c5a      	adds	r2, r3, #1
 800ab64:	607a      	str	r2, [r7, #4]
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800ab6a:	7afb      	ldrb	r3, [r7, #11]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7ff ffb9 	bl	800aae4 <ST7735_WriteCommand>

        numArgs = *addr++;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	1c5a      	adds	r2, r3, #1
 800ab76:	607a      	str	r2, [r7, #4]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800ab7c:	7abb      	ldrb	r3, [r7, #10]
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab84:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800ab86:	7abb      	ldrb	r3, [r7, #10]
 800ab88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab8c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800ab8e:	7abb      	ldrb	r3, [r7, #10]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d008      	beq.n	800aba6 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800ab94:	7abb      	ldrb	r3, [r7, #10]
 800ab96:	4619      	mov	r1, r3
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f7ff ffbd 	bl	800ab18 <ST7735_WriteData>
            addr += numArgs;
 800ab9e:	7abb      	ldrb	r3, [r7, #10]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	4413      	add	r3, r2
 800aba4:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800aba6:	89bb      	ldrh	r3, [r7, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00e      	beq.n	800abca <DisplayInit+0x7e>
            ms = *addr++;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	1c5a      	adds	r2, r3, #1
 800abb0:	607a      	str	r2, [r7, #4]
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800abb6:	89bb      	ldrh	r3, [r7, #12]
 800abb8:	2bff      	cmp	r3, #255	@ 0xff
 800abba:	d102      	bne.n	800abc2 <DisplayInit+0x76>
 800abbc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800abc0:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800abc2:	89bb      	ldrh	r3, [r7, #12]
 800abc4:	4618      	mov	r0, r3
 800abc6:	f005 fa5f 	bl	8010088 <HAL_Delay>
    while(numCommands--) {
 800abca:	7bfb      	ldrb	r3, [r7, #15]
 800abcc:	1e5a      	subs	r2, r3, #1
 800abce:	73fa      	strb	r2, [r7, #15]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1c5      	bne.n	800ab60 <DisplayInit+0x14>
        }
    }
}
 800abd4:	bf00      	nop
 800abd6:	bf00      	nop
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
	...

0800abe0 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800abe0:	b590      	push	{r4, r7, lr}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	4604      	mov	r4, r0
 800abe8:	4608      	mov	r0, r1
 800abea:	4611      	mov	r1, r2
 800abec:	461a      	mov	r2, r3
 800abee:	4623      	mov	r3, r4
 800abf0:	71fb      	strb	r3, [r7, #7]
 800abf2:	4603      	mov	r3, r0
 800abf4:	71bb      	strb	r3, [r7, #6]
 800abf6:	460b      	mov	r3, r1
 800abf8:	717b      	strb	r3, [r7, #5]
 800abfa:	4613      	mov	r3, r2
 800abfc:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800abfe:	202a      	movs	r0, #42	@ 0x2a
 800ac00:	f7ff ff70 	bl	800aae4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800ac04:	2300      	movs	r3, #0
 800ac06:	733b      	strb	r3, [r7, #12]
 800ac08:	4b17      	ldr	r3, [pc, #92]	@ (800ac68 <ST7735_SetAddressWindow+0x88>)
 800ac0a:	781a      	ldrb	r2, [r3, #0]
 800ac0c:	79fb      	ldrb	r3, [r7, #7]
 800ac0e:	4413      	add	r3, r2
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	737b      	strb	r3, [r7, #13]
 800ac14:	2300      	movs	r3, #0
 800ac16:	73bb      	strb	r3, [r7, #14]
 800ac18:	4b13      	ldr	r3, [pc, #76]	@ (800ac68 <ST7735_SetAddressWindow+0x88>)
 800ac1a:	781a      	ldrb	r2, [r3, #0]
 800ac1c:	797b      	ldrb	r3, [r7, #5]
 800ac1e:	4413      	add	r3, r2
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800ac24:	f107 030c 	add.w	r3, r7, #12
 800ac28:	2104      	movs	r1, #4
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7ff ff74 	bl	800ab18 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800ac30:	202b      	movs	r0, #43	@ 0x2b
 800ac32:	f7ff ff57 	bl	800aae4 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800ac36:	4b0d      	ldr	r3, [pc, #52]	@ (800ac6c <ST7735_SetAddressWindow+0x8c>)
 800ac38:	781a      	ldrb	r2, [r3, #0]
 800ac3a:	79bb      	ldrb	r3, [r7, #6]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800ac42:	4b0a      	ldr	r3, [pc, #40]	@ (800ac6c <ST7735_SetAddressWindow+0x8c>)
 800ac44:	781a      	ldrb	r2, [r3, #0]
 800ac46:	793b      	ldrb	r3, [r7, #4]
 800ac48:	4413      	add	r3, r2
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800ac4e:	f107 030c 	add.w	r3, r7, #12
 800ac52:	2104      	movs	r1, #4
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7ff ff5f 	bl	800ab18 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800ac5a:	202c      	movs	r0, #44	@ 0x2c
 800ac5c:	f7ff ff42 	bl	800aae4 <ST7735_WriteCommand>
}
 800ac60:	bf00      	nop
 800ac62:	3714      	adds	r7, #20
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd90      	pop	{r4, r7, pc}
 800ac68:	20000de5 	.word	0x20000de5
 800ac6c:	20000de6 	.word	0x20000de6

0800ac70 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	4603      	mov	r3, r0
 800ac78:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800ac7a:	f7ff ff07 	bl	800aa8c <ST7735_Select>
    ST7735_Reset();
 800ac7e:	f7ff ff1d 	bl	800aabc <ST7735_Reset>
    DisplayInit(init_cmds1);
 800ac82:	480c      	ldr	r0, [pc, #48]	@ (800acb4 <ST7735_Init+0x44>)
 800ac84:	f7ff ff62 	bl	800ab4c <DisplayInit>
    DisplayInit(init_cmds2);
 800ac88:	480b      	ldr	r0, [pc, #44]	@ (800acb8 <ST7735_Init+0x48>)
 800ac8a:	f7ff ff5f 	bl	800ab4c <DisplayInit>
    DisplayInit(init_cmds3);
 800ac8e:	480b      	ldr	r0, [pc, #44]	@ (800acbc <ST7735_Init+0x4c>)
 800ac90:	f7ff ff5c 	bl	800ab4c <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 800ac94:	4b0a      	ldr	r3, [pc, #40]	@ (800acc0 <ST7735_Init+0x50>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800ac9a:	4b0a      	ldr	r3, [pc, #40]	@ (800acc4 <ST7735_Init+0x54>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 800aca0:	79fb      	ldrb	r3, [r7, #7]
 800aca2:	4618      	mov	r0, r3
 800aca4:	f000 f810 	bl	800acc8 <ST7735_SetRotation>
    ST7735_Unselect();
 800aca8:	f7ff fefc 	bl	800aaa4 <ST7735_Unselect>

}
 800acac:	bf00      	nop
 800acae:	3708      	adds	r7, #8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	0801bfcc 	.word	0x0801bfcc
 800acb8:	0801c004 	.word	0x0801c004
 800acbc:	0801c014 	.word	0x0801c014
 800acc0:	20000de3 	.word	0x20000de3
 800acc4:	20000de4 	.word	0x20000de4

0800acc8 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	4603      	mov	r3, r0
 800acd0:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800acd2:	2300      	movs	r3, #0
 800acd4:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800acd6:	79fb      	ldrb	r3, [r7, #7]
 800acd8:	f003 0303 	and.w	r3, r3, #3
 800acdc:	b2da      	uxtb	r2, r3
 800acde:	4b33      	ldr	r3, [pc, #204]	@ (800adac <ST7735_SetRotation+0xe4>)
 800ace0:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800ace2:	4b32      	ldr	r3, [pc, #200]	@ (800adac <ST7735_SetRotation+0xe4>)
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	2b03      	cmp	r3, #3
 800ace8:	d84e      	bhi.n	800ad88 <ST7735_SetRotation+0xc0>
 800acea:	a201      	add	r2, pc, #4	@ (adr r2, 800acf0 <ST7735_SetRotation+0x28>)
 800acec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf0:	0800ad01 	.word	0x0800ad01
 800acf4:	0800ad23 	.word	0x0800ad23
 800acf8:	0800ad45 	.word	0x0800ad45
 800acfc:	0800ad67 	.word	0x0800ad67
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 800ad00:	23c0      	movs	r3, #192	@ 0xc0
 800ad02:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800ad04:	4b2a      	ldr	r3, [pc, #168]	@ (800adb0 <ST7735_SetRotation+0xe8>)
 800ad06:	22a0      	movs	r2, #160	@ 0xa0
 800ad08:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800ad0a:	4b2a      	ldr	r3, [pc, #168]	@ (800adb4 <ST7735_SetRotation+0xec>)
 800ad0c:	2280      	movs	r2, #128	@ 0x80
 800ad0e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 800ad10:	4b29      	ldr	r3, [pc, #164]	@ (800adb8 <ST7735_SetRotation+0xf0>)
 800ad12:	781a      	ldrb	r2, [r3, #0]
 800ad14:	4b29      	ldr	r3, [pc, #164]	@ (800adbc <ST7735_SetRotation+0xf4>)
 800ad16:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 800ad18:	4b29      	ldr	r3, [pc, #164]	@ (800adc0 <ST7735_SetRotation+0xf8>)
 800ad1a:	781a      	ldrb	r2, [r3, #0]
 800ad1c:	4b29      	ldr	r3, [pc, #164]	@ (800adc4 <ST7735_SetRotation+0xfc>)
 800ad1e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800ad20:	e032      	b.n	800ad88 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800ad22:	23a0      	movs	r3, #160	@ 0xa0
 800ad24:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800ad26:	4b23      	ldr	r3, [pc, #140]	@ (800adb4 <ST7735_SetRotation+0xec>)
 800ad28:	22a0      	movs	r2, #160	@ 0xa0
 800ad2a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800ad2c:	4b20      	ldr	r3, [pc, #128]	@ (800adb0 <ST7735_SetRotation+0xe8>)
 800ad2e:	2280      	movs	r2, #128	@ 0x80
 800ad30:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800ad32:	4b21      	ldr	r3, [pc, #132]	@ (800adb8 <ST7735_SetRotation+0xf0>)
 800ad34:	781a      	ldrb	r2, [r3, #0]
 800ad36:	4b23      	ldr	r3, [pc, #140]	@ (800adc4 <ST7735_SetRotation+0xfc>)
 800ad38:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800ad3a:	4b21      	ldr	r3, [pc, #132]	@ (800adc0 <ST7735_SetRotation+0xf8>)
 800ad3c:	781a      	ldrb	r2, [r3, #0]
 800ad3e:	4b1f      	ldr	r3, [pc, #124]	@ (800adbc <ST7735_SetRotation+0xf4>)
 800ad40:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800ad42:	e021      	b.n	800ad88 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800ad44:	2300      	movs	r3, #0
 800ad46:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800ad48:	4b19      	ldr	r3, [pc, #100]	@ (800adb0 <ST7735_SetRotation+0xe8>)
 800ad4a:	22a0      	movs	r2, #160	@ 0xa0
 800ad4c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800ad4e:	4b19      	ldr	r3, [pc, #100]	@ (800adb4 <ST7735_SetRotation+0xec>)
 800ad50:	2280      	movs	r2, #128	@ 0x80
 800ad52:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 800ad54:	4b18      	ldr	r3, [pc, #96]	@ (800adb8 <ST7735_SetRotation+0xf0>)
 800ad56:	781a      	ldrb	r2, [r3, #0]
 800ad58:	4b18      	ldr	r3, [pc, #96]	@ (800adbc <ST7735_SetRotation+0xf4>)
 800ad5a:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 800ad5c:	4b18      	ldr	r3, [pc, #96]	@ (800adc0 <ST7735_SetRotation+0xf8>)
 800ad5e:	781a      	ldrb	r2, [r3, #0]
 800ad60:	4b18      	ldr	r3, [pc, #96]	@ (800adc4 <ST7735_SetRotation+0xfc>)
 800ad62:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800ad64:	e010      	b.n	800ad88 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800ad66:	2360      	movs	r3, #96	@ 0x60
 800ad68:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800ad6a:	4b12      	ldr	r3, [pc, #72]	@ (800adb4 <ST7735_SetRotation+0xec>)
 800ad6c:	22a0      	movs	r2, #160	@ 0xa0
 800ad6e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800ad70:	4b0f      	ldr	r3, [pc, #60]	@ (800adb0 <ST7735_SetRotation+0xe8>)
 800ad72:	2280      	movs	r2, #128	@ 0x80
 800ad74:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800ad76:	4b10      	ldr	r3, [pc, #64]	@ (800adb8 <ST7735_SetRotation+0xf0>)
 800ad78:	781a      	ldrb	r2, [r3, #0]
 800ad7a:	4b12      	ldr	r3, [pc, #72]	@ (800adc4 <ST7735_SetRotation+0xfc>)
 800ad7c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800ad7e:	4b10      	ldr	r3, [pc, #64]	@ (800adc0 <ST7735_SetRotation+0xf8>)
 800ad80:	781a      	ldrb	r2, [r3, #0]
 800ad82:	4b0e      	ldr	r3, [pc, #56]	@ (800adbc <ST7735_SetRotation+0xf4>)
 800ad84:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800ad86:	bf00      	nop
  }
  ST7735_Select();
 800ad88:	f7ff fe80 	bl	800aa8c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800ad8c:	2036      	movs	r0, #54	@ 0x36
 800ad8e:	f7ff fea9 	bl	800aae4 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800ad92:	f107 030f 	add.w	r3, r7, #15
 800ad96:	2101      	movs	r1, #1
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7ff febd 	bl	800ab18 <ST7735_WriteData>
  ST7735_Unselect();
 800ad9e:	f7ff fe81 	bl	800aaa4 <ST7735_Unselect>
}
 800ada2:	bf00      	nop
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	20000de2 	.word	0x20000de2
 800adb0:	20000de0 	.word	0x20000de0
 800adb4:	20000dde 	.word	0x20000dde
 800adb8:	20000de3 	.word	0x20000de3
 800adbc:	20000de5 	.word	0x20000de5
 800adc0:	20000de4 	.word	0x20000de4
 800adc4:	20000de6 	.word	0x20000de6

0800adc8 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	4603      	mov	r3, r0
 800add0:	80fb      	strh	r3, [r7, #6]
 800add2:	460b      	mov	r3, r1
 800add4:	80bb      	strh	r3, [r7, #4]
 800add6:	4613      	mov	r3, r2
 800add8:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800adda:	88fb      	ldrh	r3, [r7, #6]
 800addc:	4a17      	ldr	r2, [pc, #92]	@ (800ae3c <ST7735_DrawPixel+0x74>)
 800adde:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ade2:	4293      	cmp	r3, r2
 800ade4:	da26      	bge.n	800ae34 <ST7735_DrawPixel+0x6c>
 800ade6:	88bb      	ldrh	r3, [r7, #4]
 800ade8:	4a15      	ldr	r2, [pc, #84]	@ (800ae40 <ST7735_DrawPixel+0x78>)
 800adea:	f9b2 2000 	ldrsh.w	r2, [r2]
 800adee:	4293      	cmp	r3, r2
 800adf0:	da20      	bge.n	800ae34 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 800adf2:	f7ff fe4b 	bl	800aa8c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800adf6:	88fb      	ldrh	r3, [r7, #6]
 800adf8:	b2d8      	uxtb	r0, r3
 800adfa:	88bb      	ldrh	r3, [r7, #4]
 800adfc:	b2d9      	uxtb	r1, r3
 800adfe:	88fb      	ldrh	r3, [r7, #6]
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	3301      	adds	r3, #1
 800ae04:	b2da      	uxtb	r2, r3
 800ae06:	88bb      	ldrh	r3, [r7, #4]
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	f7ff fee7 	bl	800abe0 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800ae12:	887b      	ldrh	r3, [r7, #2]
 800ae14:	0a1b      	lsrs	r3, r3, #8
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	733b      	strb	r3, [r7, #12]
 800ae1c:	887b      	ldrh	r3, [r7, #2]
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800ae22:	f107 030c 	add.w	r3, r7, #12
 800ae26:	2102      	movs	r1, #2
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7ff fe75 	bl	800ab18 <ST7735_WriteData>

    ST7735_Unselect();
 800ae2e:	f7ff fe39 	bl	800aaa4 <ST7735_Unselect>
 800ae32:	e000      	b.n	800ae36 <ST7735_DrawPixel+0x6e>
        return;
 800ae34:	bf00      	nop
}
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	20000dde 	.word	0x20000dde
 800ae40:	20000de0 	.word	0x20000de0

0800ae44 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800ae44:	b082      	sub	sp, #8
 800ae46:	b590      	push	{r4, r7, lr}
 800ae48:	b089      	sub	sp, #36	@ 0x24
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae4e:	4603      	mov	r3, r0
 800ae50:	80fb      	strh	r3, [r7, #6]
 800ae52:	460b      	mov	r3, r1
 800ae54:	80bb      	strh	r3, [r7, #4]
 800ae56:	4613      	mov	r3, r2
 800ae58:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800ae5a:	88fb      	ldrh	r3, [r7, #6]
 800ae5c:	b2d8      	uxtb	r0, r3
 800ae5e:	88bb      	ldrh	r3, [r7, #4]
 800ae60:	b2d9      	uxtb	r1, r3
 800ae62:	88fb      	ldrh	r3, [r7, #6]
 800ae64:	b2da      	uxtb	r2, r3
 800ae66:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800ae6a:	4413      	add	r3, r2
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	b2dc      	uxtb	r4, r3
 800ae72:	88bb      	ldrh	r3, [r7, #4]
 800ae74:	b2da      	uxtb	r2, r3
 800ae76:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800ae7a:	4413      	add	r3, r2
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	4622      	mov	r2, r4
 800ae84:	f7ff feac 	bl	800abe0 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800ae88:	2300      	movs	r3, #0
 800ae8a:	61fb      	str	r3, [r7, #28]
 800ae8c:	e043      	b.n	800af16 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800ae8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ae90:	78fb      	ldrb	r3, [r7, #3]
 800ae92:	3b20      	subs	r3, #32
 800ae94:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800ae98:	fb01 f303 	mul.w	r3, r1, r3
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	440b      	add	r3, r1
 800aea2:	005b      	lsls	r3, r3, #1
 800aea4:	4413      	add	r3, r2
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800aeaa:	2300      	movs	r3, #0
 800aeac:	61bb      	str	r3, [r7, #24]
 800aeae:	e029      	b.n	800af04 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800aeb0:	697a      	ldr	r2, [r7, #20]
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	fa02 f303 	lsl.w	r3, r2, r3
 800aeb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00e      	beq.n	800aede <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800aec0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800aec2:	0a1b      	lsrs	r3, r3, #8
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	743b      	strb	r3, [r7, #16]
 800aeca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800aed0:	f107 0310 	add.w	r3, r7, #16
 800aed4:	2102      	movs	r1, #2
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7ff fe1e 	bl	800ab18 <ST7735_WriteData>
 800aedc:	e00f      	b.n	800aefe <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800aede:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800aee2:	0a1b      	lsrs	r3, r3, #8
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	733b      	strb	r3, [r7, #12]
 800aeea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800aef2:	f107 030c 	add.w	r3, r7, #12
 800aef6:	2102      	movs	r1, #2
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7ff fe0d 	bl	800ab18 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	3301      	adds	r3, #1
 800af02:	61bb      	str	r3, [r7, #24]
 800af04:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800af08:	461a      	mov	r2, r3
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d3cf      	bcc.n	800aeb0 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	3301      	adds	r3, #1
 800af14:	61fb      	str	r3, [r7, #28]
 800af16:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800af1a:	461a      	mov	r2, r3
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	4293      	cmp	r3, r2
 800af20:	d3b5      	bcc.n	800ae8e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800af22:	bf00      	nop
 800af24:	bf00      	nop
 800af26:	3724      	adds	r7, #36	@ 0x24
 800af28:	46bd      	mov	sp, r7
 800af2a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800af2e:	b002      	add	sp, #8
 800af30:	4770      	bx	lr
	...

0800af34 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800af34:	b082      	sub	sp, #8
 800af36:	b580      	push	{r7, lr}
 800af38:	b086      	sub	sp, #24
 800af3a:	af04      	add	r7, sp, #16
 800af3c:	603a      	str	r2, [r7, #0]
 800af3e:	617b      	str	r3, [r7, #20]
 800af40:	4603      	mov	r3, r0
 800af42:	80fb      	strh	r3, [r7, #6]
 800af44:	460b      	mov	r3, r1
 800af46:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800af48:	f7ff fda0 	bl	800aa8c <ST7735_Select>

    while(*str) {
 800af4c:	e033      	b.n	800afb6 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 800af4e:	88fb      	ldrh	r3, [r7, #6]
 800af50:	7d3a      	ldrb	r2, [r7, #20]
 800af52:	4413      	add	r3, r2
 800af54:	4a1f      	ldr	r2, [pc, #124]	@ (800afd4 <ST7735_WriteString+0xa0>)
 800af56:	f9b2 2000 	ldrsh.w	r2, [r2]
 800af5a:	4293      	cmp	r3, r2
 800af5c:	db16      	blt.n	800af8c <ST7735_WriteString+0x58>
            x = 0;
 800af5e:	2300      	movs	r3, #0
 800af60:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800af62:	7d7b      	ldrb	r3, [r7, #21]
 800af64:	461a      	mov	r2, r3
 800af66:	88bb      	ldrh	r3, [r7, #4]
 800af68:	4413      	add	r3, r2
 800af6a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 800af6c:	88bb      	ldrh	r3, [r7, #4]
 800af6e:	7d7a      	ldrb	r2, [r7, #21]
 800af70:	4413      	add	r3, r2
 800af72:	4a19      	ldr	r2, [pc, #100]	@ (800afd8 <ST7735_WriteString+0xa4>)
 800af74:	f9b2 2000 	ldrsh.w	r2, [r2]
 800af78:	4293      	cmp	r3, r2
 800af7a:	da21      	bge.n	800afc0 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	2b20      	cmp	r3, #32
 800af82:	d103      	bne.n	800af8c <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	3301      	adds	r3, #1
 800af88:	603b      	str	r3, [r7, #0]
                continue;
 800af8a:	e014      	b.n	800afb6 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	781a      	ldrb	r2, [r3, #0]
 800af90:	88b9      	ldrh	r1, [r7, #4]
 800af92:	88f8      	ldrh	r0, [r7, #6]
 800af94:	8c3b      	ldrh	r3, [r7, #32]
 800af96:	9302      	str	r3, [sp, #8]
 800af98:	8bbb      	ldrh	r3, [r7, #28]
 800af9a:	9301      	str	r3, [sp, #4]
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	f7ff ff4f 	bl	800ae44 <ST7735_WriteChar>
        x += font.width;
 800afa6:	7d3b      	ldrb	r3, [r7, #20]
 800afa8:	461a      	mov	r2, r3
 800afaa:	88fb      	ldrh	r3, [r7, #6]
 800afac:	4413      	add	r3, r2
 800afae:	80fb      	strh	r3, [r7, #6]
        str++;
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	3301      	adds	r3, #1
 800afb4:	603b      	str	r3, [r7, #0]
    while(*str) {
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1c7      	bne.n	800af4e <ST7735_WriteString+0x1a>
 800afbe:	e000      	b.n	800afc2 <ST7735_WriteString+0x8e>
                break;
 800afc0:	bf00      	nop
    }

    ST7735_Unselect();
 800afc2:	f7ff fd6f 	bl	800aaa4 <ST7735_Unselect>
}
 800afc6:	bf00      	nop
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800afd0:	b002      	add	sp, #8
 800afd2:	4770      	bx	lr
 800afd4:	20000dde 	.word	0x20000dde
 800afd8:	20000de0 	.word	0x20000de0

0800afdc <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800afdc:	b590      	push	{r4, r7, lr}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4604      	mov	r4, r0
 800afe4:	4608      	mov	r0, r1
 800afe6:	4611      	mov	r1, r2
 800afe8:	461a      	mov	r2, r3
 800afea:	4623      	mov	r3, r4
 800afec:	80fb      	strh	r3, [r7, #6]
 800afee:	4603      	mov	r3, r0
 800aff0:	80bb      	strh	r3, [r7, #4]
 800aff2:	460b      	mov	r3, r1
 800aff4:	807b      	strh	r3, [r7, #2]
 800aff6:	4613      	mov	r3, r2
 800aff8:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 800affa:	88fb      	ldrh	r3, [r7, #6]
 800affc:	4a37      	ldr	r2, [pc, #220]	@ (800b0dc <ST7735_FillRectangle+0x100>)
 800affe:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b002:	4293      	cmp	r3, r2
 800b004:	da66      	bge.n	800b0d4 <ST7735_FillRectangle+0xf8>
 800b006:	88bb      	ldrh	r3, [r7, #4]
 800b008:	4a35      	ldr	r2, [pc, #212]	@ (800b0e0 <ST7735_FillRectangle+0x104>)
 800b00a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b00e:	4293      	cmp	r3, r2
 800b010:	da60      	bge.n	800b0d4 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 800b012:	88fa      	ldrh	r2, [r7, #6]
 800b014:	887b      	ldrh	r3, [r7, #2]
 800b016:	4413      	add	r3, r2
 800b018:	4a30      	ldr	r2, [pc, #192]	@ (800b0dc <ST7735_FillRectangle+0x100>)
 800b01a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b01e:	4293      	cmp	r3, r2
 800b020:	dd06      	ble.n	800b030 <ST7735_FillRectangle+0x54>
 800b022:	4b2e      	ldr	r3, [pc, #184]	@ (800b0dc <ST7735_FillRectangle+0x100>)
 800b024:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b028:	b29a      	uxth	r2, r3
 800b02a:	88fb      	ldrh	r3, [r7, #6]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 800b030:	88ba      	ldrh	r2, [r7, #4]
 800b032:	883b      	ldrh	r3, [r7, #0]
 800b034:	4413      	add	r3, r2
 800b036:	4a2a      	ldr	r2, [pc, #168]	@ (800b0e0 <ST7735_FillRectangle+0x104>)
 800b038:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b03c:	4293      	cmp	r3, r2
 800b03e:	dd06      	ble.n	800b04e <ST7735_FillRectangle+0x72>
 800b040:	4b27      	ldr	r3, [pc, #156]	@ (800b0e0 <ST7735_FillRectangle+0x104>)
 800b042:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b046:	b29a      	uxth	r2, r3
 800b048:	88bb      	ldrh	r3, [r7, #4]
 800b04a:	1ad3      	subs	r3, r2, r3
 800b04c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800b04e:	f7ff fd1d 	bl	800aa8c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800b052:	88fb      	ldrh	r3, [r7, #6]
 800b054:	b2d8      	uxtb	r0, r3
 800b056:	88bb      	ldrh	r3, [r7, #4]
 800b058:	b2d9      	uxtb	r1, r3
 800b05a:	88fb      	ldrh	r3, [r7, #6]
 800b05c:	b2da      	uxtb	r2, r3
 800b05e:	887b      	ldrh	r3, [r7, #2]
 800b060:	b2db      	uxtb	r3, r3
 800b062:	4413      	add	r3, r2
 800b064:	b2db      	uxtb	r3, r3
 800b066:	3b01      	subs	r3, #1
 800b068:	b2dc      	uxtb	r4, r3
 800b06a:	88bb      	ldrh	r3, [r7, #4]
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	883b      	ldrh	r3, [r7, #0]
 800b070:	b2db      	uxtb	r3, r3
 800b072:	4413      	add	r3, r2
 800b074:	b2db      	uxtb	r3, r3
 800b076:	3b01      	subs	r3, #1
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	4622      	mov	r2, r4
 800b07c:	f7ff fdb0 	bl	800abe0 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800b080:	8c3b      	ldrh	r3, [r7, #32]
 800b082:	0a1b      	lsrs	r3, r3, #8
 800b084:	b29b      	uxth	r3, r3
 800b086:	b2db      	uxtb	r3, r3
 800b088:	733b      	strb	r3, [r7, #12]
 800b08a:	8c3b      	ldrh	r3, [r7, #32]
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800b090:	2201      	movs	r2, #1
 800b092:	2110      	movs	r1, #16
 800b094:	4813      	ldr	r0, [pc, #76]	@ (800b0e4 <ST7735_FillRectangle+0x108>)
 800b096:	f005 fb3b 	bl	8010710 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800b09a:	883b      	ldrh	r3, [r7, #0]
 800b09c:	80bb      	strh	r3, [r7, #4]
 800b09e:	e013      	b.n	800b0c8 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 800b0a0:	887b      	ldrh	r3, [r7, #2]
 800b0a2:	80fb      	strh	r3, [r7, #6]
 800b0a4:	e00a      	b.n	800b0bc <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800b0a6:	f107 010c 	add.w	r1, r7, #12
 800b0aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ae:	2202      	movs	r2, #2
 800b0b0:	480d      	ldr	r0, [pc, #52]	@ (800b0e8 <ST7735_FillRectangle+0x10c>)
 800b0b2:	f006 f9e6 	bl	8011482 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800b0b6:	88fb      	ldrh	r3, [r7, #6]
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	80fb      	strh	r3, [r7, #6]
 800b0bc:	88fb      	ldrh	r3, [r7, #6]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d1f1      	bne.n	800b0a6 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 800b0c2:	88bb      	ldrh	r3, [r7, #4]
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	80bb      	strh	r3, [r7, #4]
 800b0c8:	88bb      	ldrh	r3, [r7, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e8      	bne.n	800b0a0 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 800b0ce:	f7ff fce9 	bl	800aaa4 <ST7735_Unselect>
 800b0d2:	e000      	b.n	800b0d6 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 800b0d4:	bf00      	nop
}
 800b0d6:	3714      	adds	r7, #20
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd90      	pop	{r4, r7, pc}
 800b0dc:	20000dde 	.word	0x20000dde
 800b0e0:	20000de0 	.word	0x20000de0
 800b0e4:	40020800 	.word	0x40020800
 800b0e8:	20000f40 	.word	0x20000f40

0800b0ec <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d002      	beq.n	800b102 <case_insensitive_strcmp+0x16>
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d101      	bne.n	800b106 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800b102:	2301      	movs	r3, #1
 800b104:	e056      	b.n	800b1b4 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d10d      	bne.n	800b12a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	e050      	b.n	800b1b4 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d101      	bne.n	800b11e <case_insensitive_strcmp+0x32>
        {
            return 0;
 800b11a:	2300      	movs	r3, #0
 800b11c:	e04a      	b.n	800b1b4 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	3301      	adds	r3, #1
 800b122:	607b      	str	r3, [r7, #4]
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	3301      	adds	r3, #1
 800b128:	603b      	str	r3, [r7, #0]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	73fb      	strb	r3, [r7, #15]
 800b130:	7bfb      	ldrb	r3, [r7, #15]
 800b132:	3301      	adds	r3, #1
 800b134:	4a22      	ldr	r2, [pc, #136]	@ (800b1c0 <case_insensitive_strcmp+0xd4>)
 800b136:	4413      	add	r3, r2
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	f003 0303 	and.w	r3, r3, #3
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d103      	bne.n	800b14a <case_insensitive_strcmp+0x5e>
 800b142:	7bfb      	ldrb	r3, [r7, #15]
 800b144:	f103 0220 	add.w	r2, r3, #32
 800b148:	e000      	b.n	800b14c <case_insensitive_strcmp+0x60>
 800b14a:	7bfa      	ldrb	r2, [r7, #15]
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	73bb      	strb	r3, [r7, #14]
 800b152:	7bbb      	ldrb	r3, [r7, #14]
 800b154:	3301      	adds	r3, #1
 800b156:	491a      	ldr	r1, [pc, #104]	@ (800b1c0 <case_insensitive_strcmp+0xd4>)
 800b158:	440b      	add	r3, r1
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	f003 0303 	and.w	r3, r3, #3
 800b160:	2b01      	cmp	r3, #1
 800b162:	d102      	bne.n	800b16a <case_insensitive_strcmp+0x7e>
 800b164:	7bbb      	ldrb	r3, [r7, #14]
 800b166:	3320      	adds	r3, #32
 800b168:	e000      	b.n	800b16c <case_insensitive_strcmp+0x80>
 800b16a:	7bbb      	ldrb	r3, [r7, #14]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d0d0      	beq.n	800b112 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	737b      	strb	r3, [r7, #13]
 800b176:	7b7b      	ldrb	r3, [r7, #13]
 800b178:	3301      	adds	r3, #1
 800b17a:	4a11      	ldr	r2, [pc, #68]	@ (800b1c0 <case_insensitive_strcmp+0xd4>)
 800b17c:	4413      	add	r3, r2
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	f003 0303 	and.w	r3, r3, #3
 800b184:	2b01      	cmp	r3, #1
 800b186:	d103      	bne.n	800b190 <case_insensitive_strcmp+0xa4>
 800b188:	7b7b      	ldrb	r3, [r7, #13]
 800b18a:	f103 0220 	add.w	r2, r3, #32
 800b18e:	e000      	b.n	800b192 <case_insensitive_strcmp+0xa6>
 800b190:	7b7a      	ldrb	r2, [r7, #13]
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	733b      	strb	r3, [r7, #12]
 800b198:	7b3b      	ldrb	r3, [r7, #12]
 800b19a:	3301      	adds	r3, #1
 800b19c:	4908      	ldr	r1, [pc, #32]	@ (800b1c0 <case_insensitive_strcmp+0xd4>)
 800b19e:	440b      	add	r3, r1
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	f003 0303 	and.w	r3, r3, #3
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d102      	bne.n	800b1b0 <case_insensitive_strcmp+0xc4>
 800b1aa:	7b3b      	ldrb	r3, [r7, #12]
 800b1ac:	3320      	adds	r3, #32
 800b1ae:	e000      	b.n	800b1b2 <case_insensitive_strcmp+0xc6>
 800b1b0:	7b3b      	ldrb	r3, [r7, #12]
 800b1b2:	1ad3      	subs	r3, r2, r3
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3714      	adds	r7, #20
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	0801dd58 	.word	0x0801dd58

0800b1c4 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d101      	bne.n	800b1e0 <cJSON_strdup+0x1c>
    {
        return NULL;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	e015      	b.n	800b20c <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7fd f875 	bl	80082d0 <strlen>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	4798      	blx	r3
 800b1f4:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d101      	bne.n	800b200 <cJSON_strdup+0x3c>
    {
        return NULL;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	e005      	b.n	800b20c <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	6879      	ldr	r1, [r7, #4]
 800b204:	68b8      	ldr	r0, [r7, #8]
 800b206:	f00d fa74 	bl	80186f2 <memcpy>

    return copy;
 800b20a:	68bb      	ldr	r3, [r7, #8]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2028      	movs	r0, #40	@ 0x28
 800b222:	4798      	blx	r3
 800b224:	60f8      	str	r0, [r7, #12]
    if (node)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d004      	beq.n	800b236 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800b22c:	2228      	movs	r2, #40	@ 0x28
 800b22e:	2100      	movs	r1, #0
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f00d f98b 	bl	801854c <memset>
    }

    return node;
 800b236:	68fb      	ldr	r3, [r7, #12]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3710      	adds	r7, #16
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800b248:	2300      	movs	r3, #0
 800b24a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800b24c:	e03d      	b.n	800b2ca <cJSON_Delete+0x8a>
    {
        next = item->next;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d108      	bne.n	800b272 <cJSON_Delete+0x32>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d004      	beq.n	800b272 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7ff ffe7 	bl	800b240 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d10c      	bne.n	800b298 <cJSON_Delete+0x58>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	691b      	ldr	r3, [r3, #16]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d008      	beq.n	800b298 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 800b286:	4b15      	ldr	r3, [pc, #84]	@ (800b2dc <cJSON_Delete+0x9c>)
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	6912      	ldr	r2, [r2, #16]
 800b28e:	4610      	mov	r0, r2
 800b290:	4798      	blx	r3
            item->valuestring = NULL;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d10c      	bne.n	800b2be <cJSON_Delete+0x7e>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6a1b      	ldr	r3, [r3, #32]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d008      	beq.n	800b2be <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 800b2ac:	4b0b      	ldr	r3, [pc, #44]	@ (800b2dc <cJSON_Delete+0x9c>)
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	6a12      	ldr	r2, [r2, #32]
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	4798      	blx	r3
            item->string = NULL;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 800b2be:	4b07      	ldr	r3, [pc, #28]	@ (800b2dc <cJSON_Delete+0x9c>)
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	4798      	blx	r3
        item = next;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d1be      	bne.n	800b24e <cJSON_Delete+0xe>
    }
}
 800b2d0:	bf00      	nop
 800b2d2:	bf00      	nop
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	20000000 	.word	0x20000000

0800b2e0 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800b2e4:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b098      	sub	sp, #96	@ 0x60
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
    double number = 0;
 800b2fa:	f04f 0200 	mov.w	r2, #0
 800b2fe:	f04f 0300 	mov.w	r3, #0
 800b302:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 800b306:	2300      	movs	r3, #0
 800b308:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800b30a:	f7ff ffe9 	bl	800b2e0 <get_decimal_point>
 800b30e:	4603      	mov	r3, r0
 800b310:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800b314:	2300      	movs	r3, #0
 800b316:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d003      	beq.n	800b326 <parse_number+0x36>
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d101      	bne.n	800b32a <parse_number+0x3a>
    {
        return false;
 800b326:	2300      	movs	r3, #0
 800b328:	e0a0      	b.n	800b46c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800b32a:	2300      	movs	r3, #0
 800b32c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b32e:	e03d      	b.n	800b3ac <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	6899      	ldr	r1, [r3, #8]
 800b338:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b33a:	440b      	add	r3, r1
 800b33c:	4413      	add	r3, r2
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	2b45      	cmp	r3, #69	@ 0x45
 800b342:	dc17      	bgt.n	800b374 <parse_number+0x84>
 800b344:	2b2b      	cmp	r3, #43	@ 0x2b
 800b346:	db40      	blt.n	800b3ca <parse_number+0xda>
 800b348:	3b2b      	subs	r3, #43	@ 0x2b
 800b34a:	2201      	movs	r2, #1
 800b34c:	409a      	lsls	r2, r3
 800b34e:	4b4c      	ldr	r3, [pc, #304]	@ (800b480 <parse_number+0x190>)
 800b350:	4013      	ands	r3, r2
 800b352:	2b00      	cmp	r3, #0
 800b354:	bf14      	ite	ne
 800b356:	2301      	movne	r3, #1
 800b358:	2300      	moveq	r3, #0
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10b      	bne.n	800b378 <parse_number+0x88>
 800b360:	f002 0308 	and.w	r3, r2, #8
 800b364:	2b00      	cmp	r3, #0
 800b366:	bf14      	ite	ne
 800b368:	2301      	movne	r3, #1
 800b36a:	2300      	moveq	r3, #0
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d111      	bne.n	800b396 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800b372:	e02a      	b.n	800b3ca <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800b374:	2b65      	cmp	r3, #101	@ 0x65
 800b376:	d128      	bne.n	800b3ca <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	6899      	ldr	r1, [r3, #8]
 800b380:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b382:	440b      	add	r3, r1
 800b384:	4413      	add	r3, r2
 800b386:	7819      	ldrb	r1, [r3, #0]
 800b388:	f107 0208 	add.w	r2, r7, #8
 800b38c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b38e:	4413      	add	r3, r2
 800b390:	460a      	mov	r2, r1
 800b392:	701a      	strb	r2, [r3, #0]
                break;
 800b394:	e007      	b.n	800b3a6 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800b396:	f107 0208 	add.w	r2, r7, #8
 800b39a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b39c:	4413      	add	r3, r2
 800b39e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800b3a2:	701a      	strb	r2, [r3, #0]
                break;
 800b3a4:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800b3a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b3ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3ae:	2b3e      	cmp	r3, #62	@ 0x3e
 800b3b0:	d80d      	bhi.n	800b3ce <parse_number+0xde>
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00a      	beq.n	800b3ce <parse_number+0xde>
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	689a      	ldr	r2, [r3, #8]
 800b3bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3be:	441a      	add	r2, r3
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d3b3      	bcc.n	800b330 <parse_number+0x40>
        }
    }
loop_end:
 800b3c8:	e001      	b.n	800b3ce <parse_number+0xde>
                goto loop_end;
 800b3ca:	bf00      	nop
 800b3cc:	e000      	b.n	800b3d0 <parse_number+0xe0>
loop_end:
 800b3ce:	bf00      	nop
    number_c_string[i] = '\0';
 800b3d0:	f107 0208 	add.w	r2, r7, #8
 800b3d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3d6:	4413      	add	r3, r2
 800b3d8:	2200      	movs	r2, #0
 800b3da:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800b3dc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800b3e0:	f107 0308 	add.w	r3, r7, #8
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f00c f9f2 	bl	80177d0 <strtod>
 800b3ec:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 800b3f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3f2:	f107 0308 	add.w	r3, r7, #8
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d101      	bne.n	800b3fe <parse_number+0x10e>
    {
        return false; /* parse_error */
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	e036      	b.n	800b46c <parse_number+0x17c>
    }

    item->valuedouble = number;
 800b3fe:	6879      	ldr	r1, [r7, #4]
 800b400:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b404:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800b408:	a31b      	add	r3, pc, #108	@ (adr r3, 800b478 <parse_number+0x188>)
 800b40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800b412:	f7fd fba7 	bl	8008b64 <__aeabi_dcmpge>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d004      	beq.n	800b426 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800b422:	615a      	str	r2, [r3, #20]
 800b424:	e015      	b.n	800b452 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800b426:	f04f 0200 	mov.w	r2, #0
 800b42a:	4b16      	ldr	r3, [pc, #88]	@ (800b484 <parse_number+0x194>)
 800b42c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800b430:	f7fd fb8e 	bl	8008b50 <__aeabi_dcmple>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d004      	beq.n	800b444 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b440:	615a      	str	r2, [r3, #20]
 800b442:	e006      	b.n	800b452 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800b444:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800b448:	f7fd fbb6 	bl	8008bb8 <__aeabi_d2iz>
 800b44c:	4602      	mov	r2, r0
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2208      	movs	r2, #8
 800b456:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b45e:	f107 0208 	add.w	r2, r7, #8
 800b462:	1a8a      	subs	r2, r1, r2
 800b464:	441a      	add	r2, r3
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	609a      	str	r2, [r3, #8]
    return true;
 800b46a:	2301      	movs	r3, #1
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3760      	adds	r7, #96	@ 0x60
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	f3af 8000 	nop.w
 800b478:	ffc00000 	.word	0xffc00000
 800b47c:	41dfffff 	.word	0x41dfffff
 800b480:	04007fe5 	.word	0x04007fe5
 800b484:	c1e00000 	.word	0xc1e00000

0800b488 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800b492:	2300      	movs	r3, #0
 800b494:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800b496:	2300      	movs	r3, #0
 800b498:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d003      	beq.n	800b4a8 <ensure+0x20>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d101      	bne.n	800b4ac <ensure+0x24>
    {
        return NULL;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	e083      	b.n	800b5b4 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d007      	beq.n	800b4c4 <ensure+0x3c>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	689a      	ldr	r2, [r3, #8]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d301      	bcc.n	800b4c4 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	e077      	b.n	800b5b4 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	da01      	bge.n	800b4ce <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	e072      	b.n	800b5b4 <ensure+0x12c>
    }

    needed += p->offset + 1;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	689a      	ldr	r2, [r3, #8]
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	683a      	ldr	r2, [r7, #0]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d805      	bhi.n	800b4f0 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	e061      	b.n	800b5b4 <ensure+0x12c>
    }

    if (p->noalloc) {
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d001      	beq.n	800b4fc <ensure+0x74>
        return NULL;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	e05b      	b.n	800b5b4 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b502:	d308      	bcc.n	800b516 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	db03      	blt.n	800b512 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800b50a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b50e:	60bb      	str	r3, [r7, #8]
 800b510:	e004      	b.n	800b51c <ensure+0x94>
        }
        else
        {
            return NULL;
 800b512:	2300      	movs	r3, #0
 800b514:	e04e      	b.n	800b5b4 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	005b      	lsls	r3, r3, #1
 800b51a:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6a1b      	ldr	r3, [r3, #32]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d018      	beq.n	800b556 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6a1b      	ldr	r3, [r3, #32]
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	6812      	ldr	r2, [r2, #0]
 800b52c:	68b9      	ldr	r1, [r7, #8]
 800b52e:	4610      	mov	r0, r2
 800b530:	4798      	blx	r3
 800b532:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d132      	bne.n	800b5a0 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	69db      	ldr	r3, [r3, #28]
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	6812      	ldr	r2, [r2, #0]
 800b542:	4610      	mov	r0, r2
 800b544:	4798      	blx	r3
            p->length = 0;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2200      	movs	r2, #0
 800b550:	601a      	str	r2, [r3, #0]

            return NULL;
 800b552:	2300      	movs	r3, #0
 800b554:	e02e      	b.n	800b5b4 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	699b      	ldr	r3, [r3, #24]
 800b55a:	68b8      	ldr	r0, [r7, #8]
 800b55c:	4798      	blx	r3
 800b55e:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d10d      	bne.n	800b582 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	69db      	ldr	r3, [r3, #28]
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	6812      	ldr	r2, [r2, #0]
 800b56e:	4610      	mov	r0, r2
 800b570:	4798      	blx	r3
            p->length = 0;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	601a      	str	r2, [r3, #0]

            return NULL;
 800b57e:	2300      	movs	r3, #0
 800b580:	e018      	b.n	800b5b4 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6819      	ldr	r1, [r3, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	3301      	adds	r3, #1
 800b58c:	461a      	mov	r2, r3
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f00d f8af 	bl	80186f2 <memcpy>
        p->hooks.deallocate(p->buffer);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	69db      	ldr	r3, [r3, #28]
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	6812      	ldr	r2, [r2, #0]
 800b59c:	4610      	mov	r0, r2
 800b59e:	4798      	blx	r3
    }
    p->length = newsize;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	68ba      	ldr	r2, [r7, #8]
 800b5a4:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	4413      	add	r3, r2
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800b5bc:	b590      	push	{r4, r7, lr}
 800b5be:	b085      	sub	sp, #20
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d013      	beq.n	800b5f6 <update_offset+0x3a>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00f      	beq.n	800b5f6 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	4413      	add	r3, r2
 800b5e0:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	689c      	ldr	r4, [r3, #8]
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f7fc fe72 	bl	80082d0 <strlen>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	18e2      	adds	r2, r4, r3
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	609a      	str	r2, [r3, #8]
 800b5f4:	e000      	b.n	800b5f8 <update_offset+0x3c>
        return;
 800b5f6:	bf00      	nop
}
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd90      	pop	{r4, r7, pc}
	...

0800b600 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 800b600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b604:	b087      	sub	sp, #28
 800b606:	af00      	add	r7, sp, #0
 800b608:	ed87 0b02 	vstr	d0, [r7, #8]
 800b60c:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 800b610:	68b8      	ldr	r0, [r7, #8]
 800b612:	68fe      	ldr	r6, [r7, #12]
 800b614:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 800b618:	683a      	ldr	r2, [r7, #0]
 800b61a:	687e      	ldr	r6, [r7, #4]
 800b61c:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b620:	f7fd faaa 	bl	8008b78 <__aeabi_dcmpgt>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d004      	beq.n	800b634 <compare_double+0x34>
 800b62a:	68bc      	ldr	r4, [r7, #8]
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800b632:	e003      	b.n	800b63c <compare_double+0x3c>
 800b634:	683c      	ldr	r4, [r7, #0]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800b63c:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 800b640:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b644:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b648:	f7fc fe4e 	bl	80082e8 <__aeabi_dsub>
 800b64c:	4602      	mov	r2, r0
 800b64e:	460b      	mov	r3, r1
 800b650:	4690      	mov	r8, r2
 800b652:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800b656:	f04f 0200 	mov.w	r2, #0
 800b65a:	4b0c      	ldr	r3, [pc, #48]	@ (800b68c <compare_double+0x8c>)
 800b65c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b660:	f7fc fffa 	bl	8008658 <__aeabi_dmul>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	2101      	movs	r1, #1
 800b66a:	460c      	mov	r4, r1
 800b66c:	4640      	mov	r0, r8
 800b66e:	4649      	mov	r1, r9
 800b670:	f7fd fa6e 	bl	8008b50 <__aeabi_dcmple>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d101      	bne.n	800b67e <compare_double+0x7e>
 800b67a:	2300      	movs	r3, #0
 800b67c:	461c      	mov	r4, r3
 800b67e:	b2e3      	uxtb	r3, r4
}
 800b680:	4618      	mov	r0, r3
 800b682:	371c      	adds	r7, #28
 800b684:	46bd      	mov	sp, r7
 800b686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b68a:	bf00      	nop
 800b68c:	3cb00000 	.word	0x3cb00000

0800b690 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 800b690:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b692:	b093      	sub	sp, #76	@ 0x4c
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800b69a:	2300      	movs	r3, #0
 800b69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b6a4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 800b6b0:	f107 0314 	add.w	r3, r7, #20
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	601a      	str	r2, [r3, #0]
 800b6b8:	605a      	str	r2, [r3, #4]
 800b6ba:	609a      	str	r2, [r3, #8]
 800b6bc:	60da      	str	r2, [r3, #12]
 800b6be:	611a      	str	r2, [r3, #16]
 800b6c0:	615a      	str	r2, [r3, #20]
 800b6c2:	831a      	strh	r2, [r3, #24]
    unsigned char decimal_point = get_decimal_point();
 800b6c4:	f7ff fe0c 	bl	800b2e0 <get_decimal_point>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 800b6ce:	f04f 0200 	mov.w	r2, #0
 800b6d2:	f04f 0300 	mov.w	r3, #0
 800b6d6:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d101      	bne.n	800b6e4 <print_number+0x54>
    {
        return false;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	e0b4      	b.n	800b84e <print_number+0x1be>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800b6e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800b6e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800b6ec:	f7fd fa4e 	bl	8008b8c <__aeabi_dcmpun>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d121      	bne.n	800b73a <print_number+0xaa>
 800b6f6:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 800b6f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6fa:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800b6fe:	2301      	movs	r3, #1
 800b700:	461e      	mov	r6, r3
 800b702:	f04f 32ff 	mov.w	r2, #4294967295
 800b706:	4b54      	ldr	r3, [pc, #336]	@ (800b858 <print_number+0x1c8>)
 800b708:	4620      	mov	r0, r4
 800b70a:	4629      	mov	r1, r5
 800b70c:	f7fd fa3e 	bl	8008b8c <__aeabi_dcmpun>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10b      	bne.n	800b72e <print_number+0x9e>
 800b716:	f04f 32ff 	mov.w	r2, #4294967295
 800b71a:	4b4f      	ldr	r3, [pc, #316]	@ (800b858 <print_number+0x1c8>)
 800b71c:	4620      	mov	r0, r4
 800b71e:	4629      	mov	r1, r5
 800b720:	f7fd fa16 	bl	8008b50 <__aeabi_dcmple>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d101      	bne.n	800b72e <print_number+0x9e>
 800b72a:	2300      	movs	r3, #0
 800b72c:	461e      	mov	r6, r3
 800b72e:	b2f3      	uxtb	r3, r6
 800b730:	f083 0301 	eor.w	r3, r3, #1
 800b734:	b2db      	uxtb	r3, r3
 800b736:	2b00      	cmp	r3, #0
 800b738:	d007      	beq.n	800b74a <print_number+0xba>
    {
        length = sprintf((char*)number_buffer, "null");
 800b73a:	f107 0314 	add.w	r3, r7, #20
 800b73e:	4947      	ldr	r1, [pc, #284]	@ (800b85c <print_number+0x1cc>)
 800b740:	4618      	mov	r0, r3
 800b742:	f00c fd9f 	bl	8018284 <siprintf>
 800b746:	6478      	str	r0, [r7, #68]	@ 0x44
 800b748:	e03f      	b.n	800b7ca <print_number+0x13a>
    }
    else if(d == (double)item->valueint)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	695b      	ldr	r3, [r3, #20]
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fc ff18 	bl	8008584 <__aeabi_i2d>
 800b754:	4602      	mov	r2, r0
 800b756:	460b      	mov	r3, r1
 800b758:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800b75c:	f7fd f9e4 	bl	8008b28 <__aeabi_dcmpeq>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d009      	beq.n	800b77a <print_number+0xea>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	695a      	ldr	r2, [r3, #20]
 800b76a:	f107 0314 	add.w	r3, r7, #20
 800b76e:	493c      	ldr	r1, [pc, #240]	@ (800b860 <print_number+0x1d0>)
 800b770:	4618      	mov	r0, r3
 800b772:	f00c fd87 	bl	8018284 <siprintf>
 800b776:	6478      	str	r0, [r7, #68]	@ 0x44
 800b778:	e027      	b.n	800b7ca <print_number+0x13a>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 800b77a:	f107 0014 	add.w	r0, r7, #20
 800b77e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800b782:	4938      	ldr	r1, [pc, #224]	@ (800b864 <print_number+0x1d4>)
 800b784:	f00c fd7e 	bl	8018284 <siprintf>
 800b788:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 800b78a:	f107 0208 	add.w	r2, r7, #8
 800b78e:	f107 0314 	add.w	r3, r7, #20
 800b792:	4935      	ldr	r1, [pc, #212]	@ (800b868 <print_number+0x1d8>)
 800b794:	4618      	mov	r0, r3
 800b796:	f00c fd97 	bl	80182c8 <siscanf>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d10c      	bne.n	800b7ba <print_number+0x12a>
 800b7a0:	ed97 7b02 	vldr	d7, [r7, #8]
 800b7a4:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 800b7a8:	eeb0 0a47 	vmov.f32	s0, s14
 800b7ac:	eef0 0a67 	vmov.f32	s1, s15
 800b7b0:	f7ff ff26 	bl	800b600 <compare_double>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d107      	bne.n	800b7ca <print_number+0x13a>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 800b7ba:	f107 0014 	add.w	r0, r7, #20
 800b7be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800b7c2:	492a      	ldr	r1, [pc, #168]	@ (800b86c <print_number+0x1dc>)
 800b7c4:	f00c fd5e 	bl	8018284 <siprintf>
 800b7c8:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800b7ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	db02      	blt.n	800b7d6 <print_number+0x146>
 800b7d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7d2:	2b19      	cmp	r3, #25
 800b7d4:	dd01      	ble.n	800b7da <print_number+0x14a>
    {
        return false;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	e039      	b.n	800b84e <print_number+0x1be>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800b7da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7dc:	3301      	adds	r3, #1
 800b7de:	4619      	mov	r1, r3
 800b7e0:	6838      	ldr	r0, [r7, #0]
 800b7e2:	f7ff fe51 	bl	800b488 <ensure>
 800b7e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 800b7e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d101      	bne.n	800b7f2 <print_number+0x162>
    {
        return false;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	e02d      	b.n	800b84e <print_number+0x1be>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7f6:	e01a      	b.n	800b82e <print_number+0x19e>
    {
        if (number_buffer[i] == decimal_point)
 800b7f8:	f107 0214 	add.w	r2, r7, #20
 800b7fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7fe:	4413      	add	r3, r2
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b806:	429a      	cmp	r2, r3
 800b808:	d105      	bne.n	800b816 <print_number+0x186>
        {
            output_pointer[i] = '.';
 800b80a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b80c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b80e:	4413      	add	r3, r2
 800b810:	222e      	movs	r2, #46	@ 0x2e
 800b812:	701a      	strb	r2, [r3, #0]
            continue;
 800b814:	e008      	b.n	800b828 <print_number+0x198>
        }

        output_pointer[i] = number_buffer[i];
 800b816:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b81a:	4413      	add	r3, r2
 800b81c:	f107 0114 	add.w	r1, r7, #20
 800b820:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b822:	440a      	add	r2, r1
 800b824:	7812      	ldrb	r2, [r2, #0]
 800b826:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800b828:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b82a:	3301      	adds	r3, #1
 800b82c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b82e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b830:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b832:	429a      	cmp	r2, r3
 800b834:	d3e0      	bcc.n	800b7f8 <print_number+0x168>
    }
    output_pointer[i] = '\0';
 800b836:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b83a:	4413      	add	r3, r2
 800b83c:	2200      	movs	r2, #0
 800b83e:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	689a      	ldr	r2, [r3, #8]
 800b844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b846:	441a      	add	r2, r3
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	609a      	str	r2, [r3, #8]

    return true;
 800b84c:	2301      	movs	r3, #1
}
 800b84e:	4618      	mov	r0, r3
 800b850:	374c      	adds	r7, #76	@ 0x4c
 800b852:	46bd      	mov	sp, r7
 800b854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b856:	bf00      	nop
 800b858:	7fefffff 	.word	0x7fefffff
 800b85c:	0801bb14 	.word	0x0801bb14
 800b860:	0801bb1c 	.word	0x0801bb1c
 800b864:	0801bb20 	.word	0x0801bb20
 800b868:	0801bb28 	.word	0x0801bb28
 800b86c:	0801bb2c 	.word	0x0801bb2c

0800b870 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800b870:	b480      	push	{r7}
 800b872:	b085      	sub	sp, #20
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800b878:	2300      	movs	r3, #0
 800b87a:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800b87c:	2300      	movs	r3, #0
 800b87e:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800b880:	2300      	movs	r3, #0
 800b882:	60bb      	str	r3, [r7, #8]
 800b884:	e04c      	b.n	800b920 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	4413      	add	r3, r2
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	2b2f      	cmp	r3, #47	@ 0x2f
 800b890:	d90f      	bls.n	800b8b2 <parse_hex4+0x42>
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	4413      	add	r3, r2
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	2b39      	cmp	r3, #57	@ 0x39
 800b89c:	d809      	bhi.n	800b8b2 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	3b30      	subs	r3, #48	@ 0x30
 800b8ae:	60fb      	str	r3, [r7, #12]
 800b8b0:	e02d      	b.n	800b90e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	2b40      	cmp	r3, #64	@ 0x40
 800b8bc:	d90f      	bls.n	800b8de <parse_hex4+0x6e>
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	2b46      	cmp	r3, #70	@ 0x46
 800b8c8:	d809      	bhi.n	800b8de <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	3b37      	subs	r3, #55	@ 0x37
 800b8da:	60fb      	str	r3, [r7, #12]
 800b8dc:	e017      	b.n	800b90e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	2b60      	cmp	r3, #96	@ 0x60
 800b8e8:	d90f      	bls.n	800b90a <parse_hex4+0x9a>
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	2b66      	cmp	r3, #102	@ 0x66
 800b8f4:	d809      	bhi.n	800b90a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	461a      	mov	r2, r3
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	4413      	add	r3, r2
 800b904:	3b57      	subs	r3, #87	@ 0x57
 800b906:	60fb      	str	r3, [r7, #12]
 800b908:	e001      	b.n	800b90e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800b90a:	2300      	movs	r3, #0
 800b90c:	e00c      	b.n	800b928 <parse_hex4+0xb8>
        }

        if (i < 3)
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	2b02      	cmp	r3, #2
 800b912:	d802      	bhi.n	800b91a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	011b      	lsls	r3, r3, #4
 800b918:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	3301      	adds	r3, #1
 800b91e:	60bb      	str	r3, [r7, #8]
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	2b03      	cmp	r3, #3
 800b924:	d9af      	bls.n	800b886 <parse_hex4+0x16>
        }
    }

    return h;
 800b926:	68fb      	ldr	r3, [r7, #12]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3714      	adds	r7, #20
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b08a      	sub	sp, #40	@ 0x28
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800b940:	2300      	movs	r3, #0
 800b942:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800b944:	2300      	movs	r3, #0
 800b946:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800b94c:	2300      	movs	r3, #0
 800b94e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 800b952:	2300      	movs	r3, #0
 800b954:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 800b958:	2300      	movs	r3, #0
 800b95a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 800b95e:	2300      	movs	r3, #0
 800b960:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800b964:	68ba      	ldr	r2, [r7, #8]
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	2b05      	cmp	r3, #5
 800b96c:	f340 80b7 	ble.w	800bade <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	3302      	adds	r3, #2
 800b974:	4618      	mov	r0, r3
 800b976:	f7ff ff7b 	bl	800b870 <parse_hex4>
 800b97a:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800b982:	d304      	bcc.n	800b98e <utf16_literal_to_utf8+0x5a>
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800b98a:	f0c0 80aa 	bcc.w	800bae2 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800b98e:	69fb      	ldr	r3, [r7, #28]
 800b990:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800b994:	d337      	bcc.n	800ba06 <utf16_literal_to_utf8+0xd2>
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800b99c:	d233      	bcs.n	800ba06 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	3306      	adds	r3, #6
 800b9a2:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800b9a8:	230c      	movs	r3, #12
 800b9aa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 800b9ae:	68ba      	ldr	r2, [r7, #8]
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	1ad3      	subs	r3, r2, r3
 800b9b4:	2b05      	cmp	r3, #5
 800b9b6:	f340 8096 	ble.w	800bae6 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	2b5c      	cmp	r3, #92	@ 0x5c
 800b9c0:	f040 8093 	bne.w	800baea <utf16_literal_to_utf8+0x1b6>
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	2b75      	cmp	r3, #117	@ 0x75
 800b9cc:	f040 808d 	bne.w	800baea <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	3302      	adds	r3, #2
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7ff ff4b 	bl	800b870 <parse_hex4>
 800b9da:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800b9e2:	f0c0 8084 	bcc.w	800baee <utf16_literal_to_utf8+0x1ba>
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800b9ec:	d27f      	bcs.n	800baee <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800b9ee:	69fb      	ldr	r3, [r7, #28]
 800b9f0:	029a      	lsls	r2, r3, #10
 800b9f2:	4b43      	ldr	r3, [pc, #268]	@ (800bb00 <utf16_literal_to_utf8+0x1cc>)
 800b9f4:	4013      	ands	r3, r2
 800b9f6:	693a      	ldr	r2, [r7, #16]
 800b9f8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800ba02:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 800ba04:	e004      	b.n	800ba10 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800ba06:	2306      	movs	r3, #6
 800ba08:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800ba10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba12:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba14:	d803      	bhi.n	800ba1e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800ba16:	2301      	movs	r3, #1
 800ba18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ba1c:	e01f      	b.n	800ba5e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800ba1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba24:	d206      	bcs.n	800ba34 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800ba26:	2302      	movs	r3, #2
 800ba28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800ba2c:	23c0      	movs	r3, #192	@ 0xc0
 800ba2e:	f887 3020 	strb.w	r3, [r7, #32]
 800ba32:	e014      	b.n	800ba5e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800ba34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba3a:	d206      	bcs.n	800ba4a <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800ba3c:	2303      	movs	r3, #3
 800ba3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800ba42:	23e0      	movs	r3, #224	@ 0xe0
 800ba44:	f887 3020 	strb.w	r3, [r7, #32]
 800ba48:	e009      	b.n	800ba5e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800ba50:	d24f      	bcs.n	800baf2 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800ba52:	2304      	movs	r3, #4
 800ba54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800ba58:	23f0      	movs	r3, #240	@ 0xf0
 800ba5a:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800ba5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ba62:	3b01      	subs	r3, #1
 800ba64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800ba68:	e015      	b.n	800ba96 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800ba6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba72:	b2da      	uxtb	r2, r3
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6819      	ldr	r1, [r3, #0]
 800ba78:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ba7c:	440b      	add	r3, r1
 800ba7e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ba82:	b2d2      	uxtb	r2, r2
 800ba84:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800ba86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba88:	099b      	lsrs	r3, r3, #6
 800ba8a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800ba8c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ba90:	3b01      	subs	r3, #1
 800ba92:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800ba96:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d1e5      	bne.n	800ba6a <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800ba9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d909      	bls.n	800baba <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800baa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa8:	b2d9      	uxtb	r1, r3
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f897 2020 	ldrb.w	r2, [r7, #32]
 800bab2:	430a      	orrs	r2, r1
 800bab4:	b2d2      	uxtb	r2, r2
 800bab6:	701a      	strb	r2, [r3, #0]
 800bab8:	e007      	b.n	800baca <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800baba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800babc:	b2da      	uxtb	r2, r3
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bac6:	b2d2      	uxtb	r2, r2
 800bac8:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681a      	ldr	r2, [r3, #0]
 800bace:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bad2:	441a      	add	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800bad8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800badc:	e00b      	b.n	800baf6 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800bade:	bf00      	nop
 800bae0:	e008      	b.n	800baf4 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800bae2:	bf00      	nop
 800bae4:	e006      	b.n	800baf4 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800bae6:	bf00      	nop
 800bae8:	e004      	b.n	800baf4 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800baea:	bf00      	nop
 800baec:	e002      	b.n	800baf4 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800baee:	bf00      	nop
 800baf0:	e000      	b.n	800baf4 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800baf2:	bf00      	nop

fail:
    return 0;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3728      	adds	r7, #40	@ 0x28
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	000ffc00 	.word	0x000ffc00

0800bb04 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b08a      	sub	sp, #40	@ 0x28
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	3301      	adds	r3, #1
 800bb18:	4413      	add	r3, r2
 800bb1a:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	3301      	adds	r3, #1
 800bb26:	4413      	add	r3, r2
 800bb28:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	2b22      	cmp	r3, #34	@ 0x22
 800bb40:	f040 8103 	bne.w	800bd4a <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800bb44:	2300      	movs	r3, #0
 800bb46:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800bb4c:	e017      	b.n	800bb7e <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800bb4e:	6a3b      	ldr	r3, [r7, #32]
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	2b5c      	cmp	r3, #92	@ 0x5c
 800bb54:	d110      	bne.n	800bb78 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800bb56:	6a3b      	ldr	r3, [r7, #32]
 800bb58:	1c5a      	adds	r2, r3, #1
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	461a      	mov	r2, r3
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	f080 80f1 	bcs.w	800bd4e <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	61bb      	str	r3, [r7, #24]
                input_end++;
 800bb72:	6a3b      	ldr	r3, [r7, #32]
 800bb74:	3301      	adds	r3, #1
 800bb76:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800bb78:	6a3b      	ldr	r3, [r7, #32]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	6a3a      	ldr	r2, [r7, #32]
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	461a      	mov	r2, r3
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d203      	bcs.n	800bb98 <parse_string+0x94>
 800bb90:	6a3b      	ldr	r3, [r7, #32]
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	2b22      	cmp	r3, #34	@ 0x22
 800bb96:	d1da      	bne.n	800bb4e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	6a3a      	ldr	r2, [r7, #32]
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	461a      	mov	r2, r3
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	f080 80d3 	bcs.w	800bd52 <parse_string+0x24e>
 800bbac:	6a3b      	ldr	r3, [r7, #32]
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	2b22      	cmp	r3, #34	@ 0x22
 800bbb2:	f040 80ce 	bne.w	800bd52 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	6a3a      	ldr	r2, [r7, #32]
 800bbc2:	1ad3      	subs	r3, r2, r3
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	1ad3      	subs	r3, r2, r3
 800bbca:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	691b      	ldr	r3, [r3, #16]
 800bbd0:	693a      	ldr	r2, [r7, #16]
 800bbd2:	3201      	adds	r2, #1
 800bbd4:	4610      	mov	r0, r2
 800bbd6:	4798      	blx	r3
 800bbd8:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f000 80ba 	beq.w	800bd56 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800bbe6:	e094      	b.n	800bd12 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	2b5c      	cmp	r3, #92	@ 0x5c
 800bbee:	d008      	beq.n	800bc02 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800bbf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbf2:	1c53      	adds	r3, r2, #1
 800bbf4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	1c59      	adds	r1, r3, #1
 800bbfa:	60f9      	str	r1, [r7, #12]
 800bbfc:	7812      	ldrb	r2, [r2, #0]
 800bbfe:	701a      	strb	r2, [r3, #0]
 800bc00:	e087      	b.n	800bd12 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800bc02:	2302      	movs	r3, #2
 800bc04:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800bc06:	6a3a      	ldr	r2, [r7, #32]
 800bc08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc0a:	1ad3      	subs	r3, r2, r3
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f340 80a4 	ble.w	800bd5a <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800bc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc14:	3301      	adds	r3, #1
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	2b75      	cmp	r3, #117	@ 0x75
 800bc1a:	f300 80a0 	bgt.w	800bd5e <parse_string+0x25a>
 800bc1e:	2b5c      	cmp	r3, #92	@ 0x5c
 800bc20:	da04      	bge.n	800bc2c <parse_string+0x128>
 800bc22:	2b22      	cmp	r3, #34	@ 0x22
 800bc24:	d05c      	beq.n	800bce0 <parse_string+0x1dc>
 800bc26:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc28:	d05a      	beq.n	800bce0 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800bc2a:	e098      	b.n	800bd5e <parse_string+0x25a>
            switch (input_pointer[1])
 800bc2c:	3b5c      	subs	r3, #92	@ 0x5c
 800bc2e:	2b19      	cmp	r3, #25
 800bc30:	f200 8095 	bhi.w	800bd5e <parse_string+0x25a>
 800bc34:	a201      	add	r2, pc, #4	@ (adr r2, 800bc3c <parse_string+0x138>)
 800bc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3a:	bf00      	nop
 800bc3c:	0800bce1 	.word	0x0800bce1
 800bc40:	0800bd5f 	.word	0x0800bd5f
 800bc44:	0800bd5f 	.word	0x0800bd5f
 800bc48:	0800bd5f 	.word	0x0800bd5f
 800bc4c:	0800bd5f 	.word	0x0800bd5f
 800bc50:	0800bd5f 	.word	0x0800bd5f
 800bc54:	0800bca5 	.word	0x0800bca5
 800bc58:	0800bd5f 	.word	0x0800bd5f
 800bc5c:	0800bd5f 	.word	0x0800bd5f
 800bc60:	0800bd5f 	.word	0x0800bd5f
 800bc64:	0800bcb1 	.word	0x0800bcb1
 800bc68:	0800bd5f 	.word	0x0800bd5f
 800bc6c:	0800bd5f 	.word	0x0800bd5f
 800bc70:	0800bd5f 	.word	0x0800bd5f
 800bc74:	0800bd5f 	.word	0x0800bd5f
 800bc78:	0800bd5f 	.word	0x0800bd5f
 800bc7c:	0800bd5f 	.word	0x0800bd5f
 800bc80:	0800bd5f 	.word	0x0800bd5f
 800bc84:	0800bcbd 	.word	0x0800bcbd
 800bc88:	0800bd5f 	.word	0x0800bd5f
 800bc8c:	0800bd5f 	.word	0x0800bd5f
 800bc90:	0800bd5f 	.word	0x0800bd5f
 800bc94:	0800bcc9 	.word	0x0800bcc9
 800bc98:	0800bd5f 	.word	0x0800bd5f
 800bc9c:	0800bcd5 	.word	0x0800bcd5
 800bca0:	0800bcf1 	.word	0x0800bcf1
                    *output_pointer++ = '\b';
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	1c5a      	adds	r2, r3, #1
 800bca8:	60fa      	str	r2, [r7, #12]
 800bcaa:	2208      	movs	r2, #8
 800bcac:	701a      	strb	r2, [r3, #0]
                    break;
 800bcae:	e02c      	b.n	800bd0a <parse_string+0x206>
                    *output_pointer++ = '\f';
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	1c5a      	adds	r2, r3, #1
 800bcb4:	60fa      	str	r2, [r7, #12]
 800bcb6:	220c      	movs	r2, #12
 800bcb8:	701a      	strb	r2, [r3, #0]
                    break;
 800bcba:	e026      	b.n	800bd0a <parse_string+0x206>
                    *output_pointer++ = '\n';
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	1c5a      	adds	r2, r3, #1
 800bcc0:	60fa      	str	r2, [r7, #12]
 800bcc2:	220a      	movs	r2, #10
 800bcc4:	701a      	strb	r2, [r3, #0]
                    break;
 800bcc6:	e020      	b.n	800bd0a <parse_string+0x206>
                    *output_pointer++ = '\r';
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	1c5a      	adds	r2, r3, #1
 800bccc:	60fa      	str	r2, [r7, #12]
 800bcce:	220d      	movs	r2, #13
 800bcd0:	701a      	strb	r2, [r3, #0]
                    break;
 800bcd2:	e01a      	b.n	800bd0a <parse_string+0x206>
                    *output_pointer++ = '\t';
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	1c5a      	adds	r2, r3, #1
 800bcd8:	60fa      	str	r2, [r7, #12]
 800bcda:	2209      	movs	r2, #9
 800bcdc:	701a      	strb	r2, [r3, #0]
                    break;
 800bcde:	e014      	b.n	800bd0a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 800bce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce2:	1c5a      	adds	r2, r3, #1
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	1c59      	adds	r1, r3, #1
 800bce8:	60f9      	str	r1, [r7, #12]
 800bcea:	7812      	ldrb	r2, [r2, #0]
 800bcec:	701a      	strb	r2, [r3, #0]
                    break;
 800bcee:	e00c      	b.n	800bd0a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800bcf0:	f107 030c 	add.w	r3, r7, #12
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	6a39      	ldr	r1, [r7, #32]
 800bcf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bcfa:	f7ff fe1b 	bl	800b934 <utf16_literal_to_utf8>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800bd02:	7dfb      	ldrb	r3, [r7, #23]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d02c      	beq.n	800bd62 <parse_string+0x25e>
                    break;
 800bd08:	bf00      	nop
            }
            input_pointer += sequence_length;
 800bd0a:	7dfb      	ldrb	r3, [r7, #23]
 800bd0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd0e:	4413      	add	r3, r2
 800bd10:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800bd12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd14:	6a3b      	ldr	r3, [r7, #32]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	f4ff af66 	bcc.w	800bbe8 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2210      	movs	r2, #16
 800bd26:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	69fa      	ldr	r2, [r7, #28]
 800bd2c:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	6a3a      	ldr	r2, [r7, #32]
 800bd34:	1ad3      	subs	r3, r2, r3
 800bd36:	461a      	mov	r2, r3
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	1c5a      	adds	r2, r3, #1
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	609a      	str	r2, [r3, #8]

    return true;
 800bd46:	2301      	movs	r3, #1
 800bd48:	e020      	b.n	800bd8c <parse_string+0x288>
        goto fail;
 800bd4a:	bf00      	nop
 800bd4c:	e00a      	b.n	800bd64 <parse_string+0x260>
                    goto fail;
 800bd4e:	bf00      	nop
 800bd50:	e008      	b.n	800bd64 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800bd52:	bf00      	nop
 800bd54:	e006      	b.n	800bd64 <parse_string+0x260>
            goto fail; /* allocation failure */
 800bd56:	bf00      	nop
 800bd58:	e004      	b.n	800bd64 <parse_string+0x260>
                goto fail;
 800bd5a:	bf00      	nop
 800bd5c:	e002      	b.n	800bd64 <parse_string+0x260>
                    goto fail;
 800bd5e:	bf00      	nop
 800bd60:	e000      	b.n	800bd64 <parse_string+0x260>
                        goto fail;
 800bd62:	bf00      	nop

fail:
    if (output != NULL)
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d005      	beq.n	800bd76 <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	695b      	ldr	r3, [r3, #20]
 800bd6e:	69f8      	ldr	r0, [r7, #28]
 800bd70:	4798      	blx	r3
        output = NULL;
 800bd72:	2300      	movs	r3, #0
 800bd74:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 800bd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d006      	beq.n	800bd8a <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd82:	1ad3      	subs	r3, r2, r3
 800bd84:	461a      	mov	r2, r3
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	609a      	str	r2, [r3, #8]
    }

    return false;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3728      	adds	r7, #40	@ 0x28
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b088      	sub	sp, #32
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 800bda2:	2300      	movs	r3, #0
 800bda4:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800bda6:	2300      	movs	r3, #0
 800bda8:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d101      	bne.n	800bdbc <print_string_ptr+0x28>
    {
        return false;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	e110      	b.n	800bfde <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d111      	bne.n	800bde6 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 800bdc2:	2103      	movs	r1, #3
 800bdc4:	6838      	ldr	r0, [r7, #0]
 800bdc6:	f7ff fb5f 	bl	800b488 <ensure>
 800bdca:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d101      	bne.n	800bdd6 <print_string_ptr+0x42>
        {
            return false;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	e103      	b.n	800bfde <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	4a83      	ldr	r2, [pc, #524]	@ (800bfe8 <print_string_ptr+0x254>)
 800bdda:	8811      	ldrh	r1, [r2, #0]
 800bddc:	7892      	ldrb	r2, [r2, #2]
 800bdde:	8019      	strh	r1, [r3, #0]
 800bde0:	709a      	strb	r2, [r3, #2]

        return true;
 800bde2:	2301      	movs	r3, #1
 800bde4:	e0fb      	b.n	800bfde <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	61fb      	str	r3, [r7, #28]
 800bdea:	e024      	b.n	800be36 <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	2b22      	cmp	r3, #34	@ 0x22
 800bdf2:	dc0f      	bgt.n	800be14 <print_string_ptr+0x80>
 800bdf4:	2b08      	cmp	r3, #8
 800bdf6:	db13      	blt.n	800be20 <print_string_ptr+0x8c>
 800bdf8:	3b08      	subs	r3, #8
 800bdfa:	4a7c      	ldr	r2, [pc, #496]	@ (800bfec <print_string_ptr+0x258>)
 800bdfc:	fa22 f303 	lsr.w	r3, r2, r3
 800be00:	f003 0301 	and.w	r3, r3, #1
 800be04:	2b00      	cmp	r3, #0
 800be06:	bf14      	ite	ne
 800be08:	2301      	movne	r3, #1
 800be0a:	2300      	moveq	r3, #0
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d102      	bne.n	800be18 <print_string_ptr+0x84>
 800be12:	e005      	b.n	800be20 <print_string_ptr+0x8c>
 800be14:	2b5c      	cmp	r3, #92	@ 0x5c
 800be16:	d103      	bne.n	800be20 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	3301      	adds	r3, #1
 800be1c:	617b      	str	r3, [r7, #20]
                break;
 800be1e:	e007      	b.n	800be30 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 800be20:	69fb      	ldr	r3, [r7, #28]
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	2b1f      	cmp	r3, #31
 800be26:	d802      	bhi.n	800be2e <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	3305      	adds	r3, #5
 800be2c:	617b      	str	r3, [r7, #20]
                }
                break;
 800be2e:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	3301      	adds	r3, #1
 800be34:	61fb      	str	r3, [r7, #28]
 800be36:	69fb      	ldr	r3, [r7, #28]
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1d6      	bne.n	800bdec <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800be3e:	69fa      	ldr	r2, [r7, #28]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	461a      	mov	r2, r3
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	4413      	add	r3, r2
 800be4a:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	3303      	adds	r3, #3
 800be50:	4619      	mov	r1, r3
 800be52:	6838      	ldr	r0, [r7, #0]
 800be54:	f7ff fb18 	bl	800b488 <ensure>
 800be58:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d101      	bne.n	800be64 <print_string_ptr+0xd0>
    {
        return false;
 800be60:	2300      	movs	r3, #0
 800be62:	e0bc      	b.n	800bfde <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d117      	bne.n	800be9a <print_string_ptr+0x106>
    {
        output[0] = '\"';
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	2222      	movs	r2, #34	@ 0x22
 800be6e:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	3301      	adds	r3, #1
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	6879      	ldr	r1, [r7, #4]
 800be78:	4618      	mov	r0, r3
 800be7a:	f00c fc3a 	bl	80186f2 <memcpy>
        output[output_length + 1] = '\"';
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	3301      	adds	r3, #1
 800be82:	693a      	ldr	r2, [r7, #16]
 800be84:	4413      	add	r3, r2
 800be86:	2222      	movs	r2, #34	@ 0x22
 800be88:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	3302      	adds	r3, #2
 800be8e:	693a      	ldr	r2, [r7, #16]
 800be90:	4413      	add	r3, r2
 800be92:	2200      	movs	r2, #0
 800be94:	701a      	strb	r2, [r3, #0]

        return true;
 800be96:	2301      	movs	r3, #1
 800be98:	e0a1      	b.n	800bfde <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	2222      	movs	r2, #34	@ 0x22
 800be9e:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	3301      	adds	r3, #1
 800bea4:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	61fb      	str	r3, [r7, #28]
 800beaa:	e086      	b.n	800bfba <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 800beac:	69fb      	ldr	r3, [r7, #28]
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	2b1f      	cmp	r3, #31
 800beb2:	d90c      	bls.n	800bece <print_string_ptr+0x13a>
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	2b22      	cmp	r3, #34	@ 0x22
 800beba:	d008      	beq.n	800bece <print_string_ptr+0x13a>
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	2b5c      	cmp	r3, #92	@ 0x5c
 800bec2:	d004      	beq.n	800bece <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	781a      	ldrb	r2, [r3, #0]
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	701a      	strb	r2, [r3, #0]
 800becc:	e06f      	b.n	800bfae <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	1c5a      	adds	r2, r3, #1
 800bed2:	61ba      	str	r2, [r7, #24]
 800bed4:	225c      	movs	r2, #92	@ 0x5c
 800bed6:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	2b22      	cmp	r3, #34	@ 0x22
 800bede:	dc3d      	bgt.n	800bf5c <print_string_ptr+0x1c8>
 800bee0:	2b08      	cmp	r3, #8
 800bee2:	db59      	blt.n	800bf98 <print_string_ptr+0x204>
 800bee4:	3b08      	subs	r3, #8
 800bee6:	2b1a      	cmp	r3, #26
 800bee8:	d856      	bhi.n	800bf98 <print_string_ptr+0x204>
 800beea:	a201      	add	r2, pc, #4	@ (adr r2, 800bef0 <print_string_ptr+0x15c>)
 800beec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef0:	0800bf71 	.word	0x0800bf71
 800bef4:	0800bf91 	.word	0x0800bf91
 800bef8:	0800bf81 	.word	0x0800bf81
 800befc:	0800bf99 	.word	0x0800bf99
 800bf00:	0800bf79 	.word	0x0800bf79
 800bf04:	0800bf89 	.word	0x0800bf89
 800bf08:	0800bf99 	.word	0x0800bf99
 800bf0c:	0800bf99 	.word	0x0800bf99
 800bf10:	0800bf99 	.word	0x0800bf99
 800bf14:	0800bf99 	.word	0x0800bf99
 800bf18:	0800bf99 	.word	0x0800bf99
 800bf1c:	0800bf99 	.word	0x0800bf99
 800bf20:	0800bf99 	.word	0x0800bf99
 800bf24:	0800bf99 	.word	0x0800bf99
 800bf28:	0800bf99 	.word	0x0800bf99
 800bf2c:	0800bf99 	.word	0x0800bf99
 800bf30:	0800bf99 	.word	0x0800bf99
 800bf34:	0800bf99 	.word	0x0800bf99
 800bf38:	0800bf99 	.word	0x0800bf99
 800bf3c:	0800bf99 	.word	0x0800bf99
 800bf40:	0800bf99 	.word	0x0800bf99
 800bf44:	0800bf99 	.word	0x0800bf99
 800bf48:	0800bf99 	.word	0x0800bf99
 800bf4c:	0800bf99 	.word	0x0800bf99
 800bf50:	0800bf99 	.word	0x0800bf99
 800bf54:	0800bf99 	.word	0x0800bf99
 800bf58:	0800bf69 	.word	0x0800bf69
 800bf5c:	2b5c      	cmp	r3, #92	@ 0x5c
 800bf5e:	d11b      	bne.n	800bf98 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	225c      	movs	r2, #92	@ 0x5c
 800bf64:	701a      	strb	r2, [r3, #0]
                    break;
 800bf66:	e022      	b.n	800bfae <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	2222      	movs	r2, #34	@ 0x22
 800bf6c:	701a      	strb	r2, [r3, #0]
                    break;
 800bf6e:	e01e      	b.n	800bfae <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	2262      	movs	r2, #98	@ 0x62
 800bf74:	701a      	strb	r2, [r3, #0]
                    break;
 800bf76:	e01a      	b.n	800bfae <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	2266      	movs	r2, #102	@ 0x66
 800bf7c:	701a      	strb	r2, [r3, #0]
                    break;
 800bf7e:	e016      	b.n	800bfae <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	226e      	movs	r2, #110	@ 0x6e
 800bf84:	701a      	strb	r2, [r3, #0]
                    break;
 800bf86:	e012      	b.n	800bfae <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	2272      	movs	r2, #114	@ 0x72
 800bf8c:	701a      	strb	r2, [r3, #0]
                    break;
 800bf8e:	e00e      	b.n	800bfae <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	2274      	movs	r2, #116	@ 0x74
 800bf94:	701a      	strb	r2, [r3, #0]
                    break;
 800bf96:	e00a      	b.n	800bfae <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	4914      	ldr	r1, [pc, #80]	@ (800bff0 <print_string_ptr+0x25c>)
 800bfa0:	69b8      	ldr	r0, [r7, #24]
 800bfa2:	f00c f96f 	bl	8018284 <siprintf>
                    output_pointer += 4;
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	61bb      	str	r3, [r7, #24]
                    break;
 800bfac:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	61fb      	str	r3, [r7, #28]
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	61bb      	str	r3, [r7, #24]
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	f47f af74 	bne.w	800beac <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	693a      	ldr	r2, [r7, #16]
 800bfca:	4413      	add	r3, r2
 800bfcc:	2222      	movs	r2, #34	@ 0x22
 800bfce:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	3302      	adds	r3, #2
 800bfd4:	693a      	ldr	r2, [r7, #16]
 800bfd6:	4413      	add	r3, r2
 800bfd8:	2200      	movs	r2, #0
 800bfda:	701a      	strb	r2, [r3, #0]

    return true;
 800bfdc:	2301      	movs	r3, #1
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3720      	adds	r7, #32
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	0801bb34 	.word	0x0801bb34
 800bfec:	04000037 	.word	0x04000037
 800bff0:	0801bb38 	.word	0x0801bb38

0800bff4 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	4618      	mov	r0, r3
 800c006:	f7ff fec5 	bl	800bd94 <print_string_ptr>
 800c00a:	4603      	mov	r3, r0
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3708      	adds	r7, #8
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d003      	beq.n	800c02a <buffer_skip_whitespace+0x16>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d101      	bne.n	800c02e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800c02a:	2300      	movs	r3, #0
 800c02c:	e02c      	b.n	800c088 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d005      	beq.n	800c040 <buffer_skip_whitespace+0x2c>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	689a      	ldr	r2, [r3, #8]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d306      	bcc.n	800c04e <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	e021      	b.n	800c088 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	1c5a      	adds	r2, r3, #1
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d00d      	beq.n	800c070 <buffer_skip_whitespace+0x5c>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	689a      	ldr	r2, [r3, #8]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d207      	bcs.n	800c070 <buffer_skip_whitespace+0x5c>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	4413      	add	r3, r2
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	2b20      	cmp	r3, #32
 800c06e:	d9e9      	bls.n	800c044 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	689a      	ldr	r2, [r3, #8]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	429a      	cmp	r2, r3
 800c07a:	d104      	bne.n	800c086 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	1e5a      	subs	r2, r3, #1
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800c086:	687b      	ldr	r3, [r7, #4]
}
 800c088:	4618      	mov	r0, r3
 800c08a:	370c      	adds	r7, #12
 800c08c:	46bd      	mov	sp, r7
 800c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c092:	4770      	bx	lr

0800c094 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d007      	beq.n	800c0b2 <skip_utf8_bom+0x1e>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d003      	beq.n	800c0b2 <skip_utf8_bom+0x1e>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d001      	beq.n	800c0b6 <skip_utf8_bom+0x22>
    {
        return NULL;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	e01c      	b.n	800c0f0 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d018      	beq.n	800c0ee <skip_utf8_bom+0x5a>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	1d1a      	adds	r2, r3, #4
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d211      	bcs.n	800c0ee <skip_utf8_bom+0x5a>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	2203      	movs	r2, #3
 800c0d6:	4908      	ldr	r1, [pc, #32]	@ (800c0f8 <skip_utf8_bom+0x64>)
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f00c fa3f 	bl	801855c <strncmp>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d104      	bne.n	800c0ee <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	1cda      	adds	r2, r3, #3
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800c0ee:	687b      	ldr	r3, [r7, #4]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	0801bb40 	.word	0x0801bb40

0800c0fc <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d101      	bne.n	800c112 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800c10e:	2300      	movs	r3, #0
 800c110:	e00c      	b.n	800c12c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800c112:	68f8      	ldr	r0, [r7, #12]
 800c114:	f7fc f8dc 	bl	80082d0 <strlen>
 800c118:	4603      	mov	r3, r0
 800c11a:	3301      	adds	r3, #1
 800c11c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	6979      	ldr	r1, [r7, #20]
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f000 f805 	bl	800c134 <cJSON_ParseWithLengthOpts>
 800c12a:	4603      	mov	r3, r0
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3718      	adds	r7, #24
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b08e      	sub	sp, #56	@ 0x38
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
 800c140:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800c142:	f107 0318 	add.w	r3, r7, #24
 800c146:	2200      	movs	r2, #0
 800c148:	601a      	str	r2, [r3, #0]
 800c14a:	605a      	str	r2, [r3, #4]
 800c14c:	609a      	str	r2, [r3, #8]
 800c14e:	60da      	str	r2, [r3, #12]
 800c150:	611a      	str	r2, [r3, #16]
 800c152:	615a      	str	r2, [r3, #20]
 800c154:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800c156:	2300      	movs	r3, #0
 800c158:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 800c15a:	4b41      	ldr	r3, [pc, #260]	@ (800c260 <cJSON_ParseWithLengthOpts+0x12c>)
 800c15c:	2200      	movs	r2, #0
 800c15e:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800c160:	4b3f      	ldr	r3, [pc, #252]	@ (800c260 <cJSON_ParseWithLengthOpts+0x12c>)
 800c162:	2200      	movs	r2, #0
 800c164:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d042      	beq.n	800c1f2 <cJSON_ParseWithLengthOpts+0xbe>
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d03f      	beq.n	800c1f2 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800c17e:	4a39      	ldr	r2, [pc, #228]	@ (800c264 <cJSON_ParseWithLengthOpts+0x130>)
 800c180:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c184:	ca07      	ldmia	r2, {r0, r1, r2}
 800c186:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800c18a:	4836      	ldr	r0, [pc, #216]	@ (800c264 <cJSON_ParseWithLengthOpts+0x130>)
 800c18c:	f7ff f842 	bl	800b214 <cJSON_New_Item>
 800c190:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 800c192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c194:	2b00      	cmp	r3, #0
 800c196:	d02e      	beq.n	800c1f6 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800c198:	f107 0318 	add.w	r3, r7, #24
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7ff ff79 	bl	800c094 <skip_utf8_bom>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7ff ff35 	bl	800c014 <buffer_skip_whitespace>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c1b0:	f000 f902 	bl	800c3b8 <parse_value>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d01f      	beq.n	800c1fa <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d00e      	beq.n	800c1de <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800c1c0:	f107 0318 	add.w	r3, r7, #24
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7ff ff25 	bl	800c014 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800c1ca:	6a3a      	ldr	r2, [r7, #32]
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d215      	bcs.n	800c1fe <cJSON_ParseWithLengthOpts+0xca>
 800c1d2:	69ba      	ldr	r2, [r7, #24]
 800c1d4:	6a3b      	ldr	r3, [r7, #32]
 800c1d6:	4413      	add	r3, r2
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d10f      	bne.n	800c1fe <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d004      	beq.n	800c1ee <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800c1e4:	69ba      	ldr	r2, [r7, #24]
 800c1e6:	6a3b      	ldr	r3, [r7, #32]
 800c1e8:	441a      	add	r2, r3
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	601a      	str	r2, [r3, #0]
    }

    return item;
 800c1ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1f0:	e031      	b.n	800c256 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800c1f2:	bf00      	nop
 800c1f4:	e004      	b.n	800c200 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800c1f6:	bf00      	nop
 800c1f8:	e002      	b.n	800c200 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800c1fa:	bf00      	nop
 800c1fc:	e000      	b.n	800c200 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800c1fe:	bf00      	nop

fail:
    if (item != NULL)
 800c200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c202:	2b00      	cmp	r3, #0
 800c204:	d002      	beq.n	800c20c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800c206:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c208:	f7ff f81a 	bl	800b240 <cJSON_Delete>
    }

    if (value != NULL)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d020      	beq.n	800c254 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800c216:	2300      	movs	r3, #0
 800c218:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800c21a:	6a3a      	ldr	r2, [r7, #32]
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d202      	bcs.n	800c228 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800c222:	6a3b      	ldr	r3, [r7, #32]
 800c224:	617b      	str	r3, [r7, #20]
 800c226:	e005      	b.n	800c234 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d002      	beq.n	800c234 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	3b01      	subs	r3, #1
 800c232:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d004      	beq.n	800c244 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800c23a:	693a      	ldr	r2, [r7, #16]
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	441a      	add	r2, r3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800c244:	4b06      	ldr	r3, [pc, #24]	@ (800c260 <cJSON_ParseWithLengthOpts+0x12c>)
 800c246:	461a      	mov	r2, r3
 800c248:	f107 0310 	add.w	r3, r7, #16
 800c24c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c250:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3738      	adds	r7, #56	@ 0x38
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	20000de8 	.word	0x20000de8
 800c264:	20000000 	.word	0x20000000

0800c268 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800c270:	2200      	movs	r2, #0
 800c272:	2100      	movs	r1, #0
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f7ff ff41 	bl	800c0fc <cJSON_ParseWithOpts>
 800c27a:	4603      	mov	r3, r0
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3708      	adds	r7, #8
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b08e      	sub	sp, #56	@ 0x38
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 800c290:	2300      	movs	r3, #0
 800c292:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 800c294:	f107 0310 	add.w	r3, r7, #16
 800c298:	2224      	movs	r2, #36	@ 0x24
 800c29a:	2100      	movs	r1, #0
 800c29c:	4618      	mov	r0, r3
 800c29e:	f00c f955 	bl	801854c <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a3b      	ldr	r2, [pc, #236]	@ (800c394 <print+0x110>)
 800c2a8:	6812      	ldr	r2, [r2, #0]
 800c2aa:	4610      	mov	r0, r2
 800c2ac:	4798      	blx	r3
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800c2b2:	4b38      	ldr	r3, [pc, #224]	@ (800c394 <print+0x110>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c2c2:	ca07      	ldmia	r2, {r0, r1, r2}
 800c2c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d042      	beq.n	800c354 <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800c2ce:	f107 0310 	add.w	r3, r7, #16
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f000 f95b 	bl	800c590 <print_value>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d03b      	beq.n	800c358 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 800c2e0:	f107 0310 	add.w	r3, r7, #16
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7ff f969 	bl	800b5bc <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d00d      	beq.n	800c30e <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	689b      	ldr	r3, [r3, #8]
 800c2f6:	6938      	ldr	r0, [r7, #16]
 800c2f8:	69ba      	ldr	r2, [r7, #24]
 800c2fa:	3201      	adds	r2, #1
 800c2fc:	4611      	mov	r1, r2
 800c2fe:	4798      	blx	r3
 800c300:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 800c302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c304:	2b00      	cmp	r3, #0
 800c306:	d029      	beq.n	800c35c <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 800c308:	2300      	movs	r3, #0
 800c30a:	613b      	str	r3, [r7, #16]
 800c30c:	e020      	b.n	800c350 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	69ba      	ldr	r2, [r7, #24]
 800c314:	3201      	adds	r2, #1
 800c316:	4610      	mov	r0, r2
 800c318:	4798      	blx	r3
 800c31a:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 800c31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d01e      	beq.n	800c360 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800c322:	6939      	ldr	r1, [r7, #16]
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	1c5a      	adds	r2, r3, #1
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	4293      	cmp	r3, r2
 800c32c:	bf28      	it	cs
 800c32e:	4613      	movcs	r3, r2
 800c330:	461a      	mov	r2, r3
 800c332:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c334:	f00c f9dd 	bl	80186f2 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c33c:	4413      	add	r3, r2
 800c33e:	2200      	movs	r2, #0
 800c340:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	693a      	ldr	r2, [r7, #16]
 800c348:	4610      	mov	r0, r2
 800c34a:	4798      	blx	r3
        buffer->buffer = NULL;
 800c34c:	2300      	movs	r3, #0
 800c34e:	613b      	str	r3, [r7, #16]
    }

    return printed;
 800c350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c352:	e01a      	b.n	800c38a <print+0x106>
        goto fail;
 800c354:	bf00      	nop
 800c356:	e004      	b.n	800c362 <print+0xde>
        goto fail;
 800c358:	bf00      	nop
 800c35a:	e002      	b.n	800c362 <print+0xde>
            goto fail;
 800c35c:	bf00      	nop
 800c35e:	e000      	b.n	800c362 <print+0xde>
            goto fail;
 800c360:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d006      	beq.n	800c376 <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	693a      	ldr	r2, [r7, #16]
 800c36e:	4610      	mov	r0, r2
 800c370:	4798      	blx	r3
        buffer->buffer = NULL;
 800c372:	2300      	movs	r3, #0
 800c374:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 800c376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d005      	beq.n	800c388 <print+0x104>
    {
        hooks->deallocate(printed);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c382:	4798      	blx	r3
        printed = NULL;
 800c384:	2300      	movs	r3, #0
 800c386:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3738      	adds	r7, #56	@ 0x38
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	0801c040 	.word	0x0801c040

0800c398 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 800c3a0:	4a04      	ldr	r2, [pc, #16]	@ (800c3b4 <cJSON_PrintUnformatted+0x1c>)
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f7ff ff6d 	bl	800c284 <print>
 800c3aa:	4603      	mov	r3, r0
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3708      	adds	r7, #8
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	20000000 	.word	0x20000000

0800c3b8 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d003      	beq.n	800c3d0 <parse_value+0x18>
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d101      	bne.n	800c3d4 <parse_value+0x1c>
    {
        return false; /* no input */
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	e0d2      	b.n	800c57a <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d01d      	beq.n	800c416 <parse_value+0x5e>
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	1d1a      	adds	r2, r3, #4
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d816      	bhi.n	800c416 <parse_value+0x5e>
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	2204      	movs	r2, #4
 800c3f4:	4963      	ldr	r1, [pc, #396]	@ (800c584 <parse_value+0x1cc>)
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f00c f8b0 	bl	801855c <strncmp>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d109      	bne.n	800c416 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2204      	movs	r2, #4
 800c406:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	1d1a      	adds	r2, r3, #4
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	609a      	str	r2, [r3, #8]
        return true;
 800c412:	2301      	movs	r3, #1
 800c414:	e0b1      	b.n	800c57a <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d01d      	beq.n	800c458 <parse_value+0xa0>
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	1d5a      	adds	r2, r3, #5
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	429a      	cmp	r2, r3
 800c428:	d816      	bhi.n	800c458 <parse_value+0xa0>
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	689b      	ldr	r3, [r3, #8]
 800c432:	4413      	add	r3, r2
 800c434:	2205      	movs	r2, #5
 800c436:	4954      	ldr	r1, [pc, #336]	@ (800c588 <parse_value+0x1d0>)
 800c438:	4618      	mov	r0, r3
 800c43a:	f00c f88f 	bl	801855c <strncmp>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d109      	bne.n	800c458 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2201      	movs	r2, #1
 800c448:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	689b      	ldr	r3, [r3, #8]
 800c44e:	1d5a      	adds	r2, r3, #5
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	609a      	str	r2, [r3, #8]
        return true;
 800c454:	2301      	movs	r3, #1
 800c456:	e090      	b.n	800c57a <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d020      	beq.n	800c4a0 <parse_value+0xe8>
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	1d1a      	adds	r2, r3, #4
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d819      	bhi.n	800c4a0 <parse_value+0xe8>
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	689b      	ldr	r3, [r3, #8]
 800c474:	4413      	add	r3, r2
 800c476:	2204      	movs	r2, #4
 800c478:	4944      	ldr	r1, [pc, #272]	@ (800c58c <parse_value+0x1d4>)
 800c47a:	4618      	mov	r0, r3
 800c47c:	f00c f86e 	bl	801855c <strncmp>
 800c480:	4603      	mov	r3, r0
 800c482:	2b00      	cmp	r3, #0
 800c484:	d10c      	bne.n	800c4a0 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2202      	movs	r2, #2
 800c48a:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	1d1a      	adds	r2, r3, #4
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	609a      	str	r2, [r3, #8]
        return true;
 800c49c:	2301      	movs	r3, #1
 800c49e:	e06c      	b.n	800c57a <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d013      	beq.n	800c4ce <parse_value+0x116>
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	689a      	ldr	r2, [r3, #8]
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d20d      	bcs.n	800c4ce <parse_value+0x116>
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	689b      	ldr	r3, [r3, #8]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	2b22      	cmp	r3, #34	@ 0x22
 800c4c0:	d105      	bne.n	800c4ce <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800c4c2:	6839      	ldr	r1, [r7, #0]
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f7ff fb1d 	bl	800bb04 <parse_string>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	e055      	b.n	800c57a <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d023      	beq.n	800c51c <parse_value+0x164>
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	689a      	ldr	r2, [r3, #8]
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d21d      	bcs.n	800c51c <parse_value+0x164>
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	2b2d      	cmp	r3, #45	@ 0x2d
 800c4ee:	d00f      	beq.n	800c510 <parse_value+0x158>
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	2b2f      	cmp	r3, #47	@ 0x2f
 800c4fe:	d90d      	bls.n	800c51c <parse_value+0x164>
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	4413      	add	r3, r2
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	2b39      	cmp	r3, #57	@ 0x39
 800c50e:	d805      	bhi.n	800c51c <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800c510:	6839      	ldr	r1, [r7, #0]
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f7fe feec 	bl	800b2f0 <parse_number>
 800c518:	4603      	mov	r3, r0
 800c51a:	e02e      	b.n	800c57a <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d013      	beq.n	800c54a <parse_value+0x192>
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	689a      	ldr	r2, [r3, #8]
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d20d      	bcs.n	800c54a <parse_value+0x192>
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	689b      	ldr	r3, [r3, #8]
 800c536:	4413      	add	r3, r2
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	2b5b      	cmp	r3, #91	@ 0x5b
 800c53c:	d105      	bne.n	800c54a <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800c53e:	6839      	ldr	r1, [r7, #0]
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f000 f909 	bl	800c758 <parse_array>
 800c546:	4603      	mov	r3, r0
 800c548:	e017      	b.n	800c57a <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d013      	beq.n	800c578 <parse_value+0x1c0>
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	689a      	ldr	r2, [r3, #8]
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d20d      	bcs.n	800c578 <parse_value+0x1c0>
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	689b      	ldr	r3, [r3, #8]
 800c564:	4413      	add	r3, r2
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	2b7b      	cmp	r3, #123	@ 0x7b
 800c56a:	d105      	bne.n	800c578 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800c56c:	6839      	ldr	r1, [r7, #0]
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 fa3c 	bl	800c9ec <parse_object>
 800c574:	4603      	mov	r3, r0
 800c576:	e000      	b.n	800c57a <parse_value+0x1c2>
    }

    return false;
 800c578:	2300      	movs	r3, #0
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3708      	adds	r7, #8
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	0801bb14 	.word	0x0801bb14
 800c588:	0801bb44 	.word	0x0801bb44
 800c58c:	0801bb4c 	.word	0x0801bb4c

0800c590 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800c59a:	2300      	movs	r3, #0
 800c59c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d002      	beq.n	800c5aa <print_value+0x1a>
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d101      	bne.n	800c5ae <print_value+0x1e>
    {
        return false;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	e0c9      	b.n	800c742 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	b2db      	uxtb	r3, r3
 800c5b4:	2b80      	cmp	r3, #128	@ 0x80
 800c5b6:	f000 808e 	beq.w	800c6d6 <print_value+0x146>
 800c5ba:	2b80      	cmp	r3, #128	@ 0x80
 800c5bc:	f300 80c0 	bgt.w	800c740 <print_value+0x1b0>
 800c5c0:	2b20      	cmp	r3, #32
 800c5c2:	dc49      	bgt.n	800c658 <print_value+0xc8>
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	f340 80bb 	ble.w	800c740 <print_value+0x1b0>
 800c5ca:	3b01      	subs	r3, #1
 800c5cc:	2b1f      	cmp	r3, #31
 800c5ce:	f200 80b7 	bhi.w	800c740 <print_value+0x1b0>
 800c5d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c5d8 <print_value+0x48>)
 800c5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d8:	0800c683 	.word	0x0800c683
 800c5dc:	0800c6a7 	.word	0x0800c6a7
 800c5e0:	0800c741 	.word	0x0800c741
 800c5e4:	0800c65f 	.word	0x0800c65f
 800c5e8:	0800c741 	.word	0x0800c741
 800c5ec:	0800c741 	.word	0x0800c741
 800c5f0:	0800c741 	.word	0x0800c741
 800c5f4:	0800c6cb 	.word	0x0800c6cb
 800c5f8:	0800c741 	.word	0x0800c741
 800c5fc:	0800c741 	.word	0x0800c741
 800c600:	0800c741 	.word	0x0800c741
 800c604:	0800c741 	.word	0x0800c741
 800c608:	0800c741 	.word	0x0800c741
 800c60c:	0800c741 	.word	0x0800c741
 800c610:	0800c741 	.word	0x0800c741
 800c614:	0800c71d 	.word	0x0800c71d
 800c618:	0800c741 	.word	0x0800c741
 800c61c:	0800c741 	.word	0x0800c741
 800c620:	0800c741 	.word	0x0800c741
 800c624:	0800c741 	.word	0x0800c741
 800c628:	0800c741 	.word	0x0800c741
 800c62c:	0800c741 	.word	0x0800c741
 800c630:	0800c741 	.word	0x0800c741
 800c634:	0800c741 	.word	0x0800c741
 800c638:	0800c741 	.word	0x0800c741
 800c63c:	0800c741 	.word	0x0800c741
 800c640:	0800c741 	.word	0x0800c741
 800c644:	0800c741 	.word	0x0800c741
 800c648:	0800c741 	.word	0x0800c741
 800c64c:	0800c741 	.word	0x0800c741
 800c650:	0800c741 	.word	0x0800c741
 800c654:	0800c729 	.word	0x0800c729
 800c658:	2b40      	cmp	r3, #64	@ 0x40
 800c65a:	d06b      	beq.n	800c734 <print_value+0x1a4>
 800c65c:	e070      	b.n	800c740 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800c65e:	2105      	movs	r1, #5
 800c660:	6838      	ldr	r0, [r7, #0]
 800c662:	f7fe ff11 	bl	800b488 <ensure>
 800c666:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d101      	bne.n	800c672 <print_value+0xe2>
            {
                return false;
 800c66e:	2300      	movs	r3, #0
 800c670:	e067      	b.n	800c742 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	4a35      	ldr	r2, [pc, #212]	@ (800c74c <print_value+0x1bc>)
 800c676:	6810      	ldr	r0, [r2, #0]
 800c678:	6018      	str	r0, [r3, #0]
 800c67a:	7912      	ldrb	r2, [r2, #4]
 800c67c:	711a      	strb	r2, [r3, #4]
            return true;
 800c67e:	2301      	movs	r3, #1
 800c680:	e05f      	b.n	800c742 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 800c682:	2106      	movs	r1, #6
 800c684:	6838      	ldr	r0, [r7, #0]
 800c686:	f7fe feff 	bl	800b488 <ensure>
 800c68a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d101      	bne.n	800c696 <print_value+0x106>
            {
                return false;
 800c692:	2300      	movs	r3, #0
 800c694:	e055      	b.n	800c742 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	4a2d      	ldr	r2, [pc, #180]	@ (800c750 <print_value+0x1c0>)
 800c69a:	6810      	ldr	r0, [r2, #0]
 800c69c:	6018      	str	r0, [r3, #0]
 800c69e:	8892      	ldrh	r2, [r2, #4]
 800c6a0:	809a      	strh	r2, [r3, #4]
            return true;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e04d      	b.n	800c742 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800c6a6:	2105      	movs	r1, #5
 800c6a8:	6838      	ldr	r0, [r7, #0]
 800c6aa:	f7fe feed 	bl	800b488 <ensure>
 800c6ae:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d101      	bne.n	800c6ba <print_value+0x12a>
            {
                return false;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	e043      	b.n	800c742 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	4a25      	ldr	r2, [pc, #148]	@ (800c754 <print_value+0x1c4>)
 800c6be:	6810      	ldr	r0, [r2, #0]
 800c6c0:	6018      	str	r0, [r3, #0]
 800c6c2:	7912      	ldrb	r2, [r2, #4]
 800c6c4:	711a      	strb	r2, [r3, #4]
            return true;
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	e03b      	b.n	800c742 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800c6ca:	6839      	ldr	r1, [r7, #0]
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f7fe ffdf 	bl	800b690 <print_number>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	e035      	b.n	800c742 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	691b      	ldr	r3, [r3, #16]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d101      	bne.n	800c6e6 <print_value+0x156>
            {
                return false;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	e02d      	b.n	800c742 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	691b      	ldr	r3, [r3, #16]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7fb fdf0 	bl	80082d0 <strlen>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800c6f6:	68b9      	ldr	r1, [r7, #8]
 800c6f8:	6838      	ldr	r0, [r7, #0]
 800c6fa:	f7fe fec5 	bl	800b488 <ensure>
 800c6fe:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d101      	bne.n	800c70a <print_value+0x17a>
            {
                return false;
 800c706:	2300      	movs	r3, #0
 800c708:	e01b      	b.n	800c742 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	691b      	ldr	r3, [r3, #16]
 800c70e:	68ba      	ldr	r2, [r7, #8]
 800c710:	4619      	mov	r1, r3
 800c712:	68f8      	ldr	r0, [r7, #12]
 800c714:	f00b ffed 	bl	80186f2 <memcpy>
            return true;
 800c718:	2301      	movs	r3, #1
 800c71a:	e012      	b.n	800c742 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 800c71c:	6839      	ldr	r1, [r7, #0]
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f7ff fc68 	bl	800bff4 <print_string>
 800c724:	4603      	mov	r3, r0
 800c726:	e00c      	b.n	800c742 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 800c728:	6839      	ldr	r1, [r7, #0]
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 f8d8 	bl	800c8e0 <print_array>
 800c730:	4603      	mov	r3, r0
 800c732:	e006      	b.n	800c742 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 800c734:	6839      	ldr	r1, [r7, #0]
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 fa64 	bl	800cc04 <print_object>
 800c73c:	4603      	mov	r3, r0
 800c73e:	e000      	b.n	800c742 <print_value+0x1b2>

        default:
            return false;
 800c740:	2300      	movs	r3, #0
    }
}
 800c742:	4618      	mov	r0, r3
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	0801bb14 	.word	0x0801bb14
 800c750:	0801bb44 	.word	0x0801bb44
 800c754:	0801bb4c 	.word	0x0801bb4c

0800c758 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b086      	sub	sp, #24
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800c762:	2300      	movs	r3, #0
 800c764:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800c766:	2300      	movs	r3, #0
 800c768:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	68db      	ldr	r3, [r3, #12]
 800c76e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c772:	d301      	bcc.n	800c778 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800c774:	2300      	movs	r3, #0
 800c776:	e0af      	b.n	800c8d8 <parse_array+0x180>
    }
    input_buffer->depth++;
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	1c5a      	adds	r2, r3, #1
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	689b      	ldr	r3, [r3, #8]
 800c78a:	4413      	add	r3, r2
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	2b5b      	cmp	r3, #91	@ 0x5b
 800c790:	f040 8094 	bne.w	800c8bc <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	1c5a      	adds	r2, r3, #1
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800c79e:	6838      	ldr	r0, [r7, #0]
 800c7a0:	f7ff fc38 	bl	800c014 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d00d      	beq.n	800c7c6 <parse_array+0x6e>
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	689a      	ldr	r2, [r3, #8]
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d207      	bcs.n	800c7c6 <parse_array+0x6e>
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	681a      	ldr	r2, [r3, #0]
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	4413      	add	r3, r2
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	2b5d      	cmp	r3, #93	@ 0x5d
 800c7c4:	d061      	beq.n	800c88a <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d005      	beq.n	800c7d8 <parse_array+0x80>
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	689a      	ldr	r2, [r3, #8]
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d305      	bcc.n	800c7e4 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	1e5a      	subs	r2, r3, #1
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	609a      	str	r2, [r3, #8]
        goto fail;
 800c7e2:	e072      	b.n	800c8ca <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	1e5a      	subs	r2, r3, #1
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	3310      	adds	r3, #16
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7fe fd0e 	bl	800b214 <cJSON_New_Item>
 800c7f8:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d05f      	beq.n	800c8c0 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d104      	bne.n	800c810 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	617b      	str	r3, [r7, #20]
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	613b      	str	r3, [r7, #16]
 800c80e:	e007      	b.n	800c820 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	68fa      	ldr	r2, [r7, #12]
 800c814:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	693a      	ldr	r2, [r7, #16]
 800c81a:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	1c5a      	adds	r2, r3, #1
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800c82a:	6838      	ldr	r0, [r7, #0]
 800c82c:	f7ff fbf2 	bl	800c014 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800c830:	6839      	ldr	r1, [r7, #0]
 800c832:	6938      	ldr	r0, [r7, #16]
 800c834:	f7ff fdc0 	bl	800c3b8 <parse_value>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d042      	beq.n	800c8c4 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800c83e:	6838      	ldr	r0, [r7, #0]
 800c840:	f7ff fbe8 	bl	800c014 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d00d      	beq.n	800c866 <parse_array+0x10e>
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	689a      	ldr	r2, [r3, #8]
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	429a      	cmp	r2, r3
 800c854:	d207      	bcs.n	800c866 <parse_array+0x10e>
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	4413      	add	r3, r2
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	2b2c      	cmp	r3, #44	@ 0x2c
 800c864:	d0c3      	beq.n	800c7ee <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d02d      	beq.n	800c8c8 <parse_array+0x170>
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	689a      	ldr	r2, [r3, #8]
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	429a      	cmp	r2, r3
 800c876:	d227      	bcs.n	800c8c8 <parse_array+0x170>
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	4413      	add	r3, r2
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	2b5d      	cmp	r3, #93	@ 0x5d
 800c886:	d11f      	bne.n	800c8c8 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800c888:	e000      	b.n	800c88c <parse_array+0x134>
        goto success;
 800c88a:	bf00      	nop
    input_buffer->depth--;
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	1e5a      	subs	r2, r3, #1
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d002      	beq.n	800c8a2 <parse_array+0x14a>
        head->prev = current_item;
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	693a      	ldr	r2, [r7, #16]
 800c8a0:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2220      	movs	r2, #32
 800c8a6:	60da      	str	r2, [r3, #12]
    item->child = head;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	697a      	ldr	r2, [r7, #20]
 800c8ac:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	689b      	ldr	r3, [r3, #8]
 800c8b2:	1c5a      	adds	r2, r3, #1
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	609a      	str	r2, [r3, #8]

    return true;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	e00d      	b.n	800c8d8 <parse_array+0x180>
        goto fail;
 800c8bc:	bf00      	nop
 800c8be:	e004      	b.n	800c8ca <parse_array+0x172>
            goto fail; /* allocation failure */
 800c8c0:	bf00      	nop
 800c8c2:	e002      	b.n	800c8ca <parse_array+0x172>
            goto fail; /* failed to parse value */
 800c8c4:	bf00      	nop
 800c8c6:	e000      	b.n	800c8ca <parse_array+0x172>
        goto fail; /* expected end of array */
 800c8c8:	bf00      	nop

fail:
    if (head != NULL)
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d002      	beq.n	800c8d6 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800c8d0:	6978      	ldr	r0, [r7, #20]
 800c8d2:	f7fe fcb5 	bl	800b240 <cJSON_Delete>
    }

    return false;
 800c8d6:	2300      	movs	r3, #0
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3718      	adds	r7, #24
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b086      	sub	sp, #24
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	689b      	ldr	r3, [r3, #8]
 800c8f6:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d101      	bne.n	800c902 <print_array+0x22>
    {
        return false;
 800c8fe:	2300      	movs	r3, #0
 800c900:	e070      	b.n	800c9e4 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800c902:	2101      	movs	r1, #1
 800c904:	6838      	ldr	r0, [r7, #0]
 800c906:	f7fe fdbf 	bl	800b488 <ensure>
 800c90a:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d101      	bne.n	800c916 <print_array+0x36>
    {
        return false;
 800c912:	2300      	movs	r3, #0
 800c914:	e066      	b.n	800c9e4 <print_array+0x104>
    }

    *output_pointer = '[';
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	225b      	movs	r2, #91	@ 0x5b
 800c91a:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	1c5a      	adds	r2, r3, #1
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	1c5a      	adds	r2, r3, #1
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800c930:	e03d      	b.n	800c9ae <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800c932:	6839      	ldr	r1, [r7, #0]
 800c934:	6938      	ldr	r0, [r7, #16]
 800c936:	f7ff fe2b 	bl	800c590 <print_value>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d101      	bne.n	800c944 <print_array+0x64>
        {
            return false;
 800c940:	2300      	movs	r3, #0
 800c942:	e04f      	b.n	800c9e4 <print_array+0x104>
        }
        update_offset(output_buffer);
 800c944:	6838      	ldr	r0, [r7, #0]
 800c946:	f7fe fe39 	bl	800b5bc <update_offset>
        if (current_element->next)
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d02a      	beq.n	800c9a8 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	695b      	ldr	r3, [r3, #20]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d001      	beq.n	800c95e <print_array+0x7e>
 800c95a:	2302      	movs	r3, #2
 800c95c:	e000      	b.n	800c960 <print_array+0x80>
 800c95e:	2301      	movs	r3, #1
 800c960:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	3301      	adds	r3, #1
 800c966:	4619      	mov	r1, r3
 800c968:	6838      	ldr	r0, [r7, #0]
 800c96a:	f7fe fd8d 	bl	800b488 <ensure>
 800c96e:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d101      	bne.n	800c97a <print_array+0x9a>
            {
                return false;
 800c976:	2300      	movs	r3, #0
 800c978:	e034      	b.n	800c9e4 <print_array+0x104>
            }
            *output_pointer++ = ',';
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	1c5a      	adds	r2, r3, #1
 800c97e:	617a      	str	r2, [r7, #20]
 800c980:	222c      	movs	r2, #44	@ 0x2c
 800c982:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	695b      	ldr	r3, [r3, #20]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d004      	beq.n	800c996 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	1c5a      	adds	r2, r3, #1
 800c990:	617a      	str	r2, [r7, #20]
 800c992:	2220      	movs	r2, #32
 800c994:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	2200      	movs	r2, #0
 800c99a:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	689a      	ldr	r2, [r3, #8]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	441a      	add	r2, r3
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1be      	bne.n	800c932 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 800c9b4:	2102      	movs	r1, #2
 800c9b6:	6838      	ldr	r0, [r7, #0]
 800c9b8:	f7fe fd66 	bl	800b488 <ensure>
 800c9bc:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d101      	bne.n	800c9c8 <print_array+0xe8>
    {
        return false;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	e00d      	b.n	800c9e4 <print_array+0x104>
    }
    *output_pointer++ = ']';
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	1c5a      	adds	r2, r3, #1
 800c9cc:	617a      	str	r2, [r7, #20]
 800c9ce:	225d      	movs	r2, #93	@ 0x5d
 800c9d0:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	1e5a      	subs	r2, r3, #1
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	60da      	str	r2, [r3, #12]

    return true;
 800c9e2:	2301      	movs	r3, #1
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3718      	adds	r7, #24
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b086      	sub	sp, #24
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ca06:	d301      	bcc.n	800ca0c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800ca08:	2300      	movs	r3, #0
 800ca0a:	e0f7      	b.n	800cbfc <parse_object+0x210>
    }
    input_buffer->depth++;
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	68db      	ldr	r3, [r3, #12]
 800ca10:	1c5a      	adds	r2, r3, #1
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	f000 80db 	beq.w	800cbd4 <parse_object+0x1e8>
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	689a      	ldr	r2, [r3, #8]
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	f080 80d4 	bcs.w	800cbd4 <parse_object+0x1e8>
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	4413      	add	r3, r2
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	2b7b      	cmp	r3, #123	@ 0x7b
 800ca3a:	f040 80cb 	bne.w	800cbd4 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	689b      	ldr	r3, [r3, #8]
 800ca42:	1c5a      	adds	r2, r3, #1
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800ca48:	6838      	ldr	r0, [r7, #0]
 800ca4a:	f7ff fae3 	bl	800c014 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d00e      	beq.n	800ca72 <parse_object+0x86>
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	689a      	ldr	r2, [r3, #8]
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d208      	bcs.n	800ca72 <parse_object+0x86>
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	689b      	ldr	r3, [r3, #8]
 800ca68:	4413      	add	r3, r2
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	2b7d      	cmp	r3, #125	@ 0x7d
 800ca6e:	f000 8098 	beq.w	800cba2 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d005      	beq.n	800ca84 <parse_object+0x98>
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	689a      	ldr	r2, [r3, #8]
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d305      	bcc.n	800ca90 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	1e5a      	subs	r2, r3, #1
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	609a      	str	r2, [r3, #8]
        goto fail;
 800ca8e:	e0ae      	b.n	800cbee <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	1e5a      	subs	r2, r3, #1
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	3310      	adds	r3, #16
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7fe fbb8 	bl	800b214 <cJSON_New_Item>
 800caa4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f000 8095 	beq.w	800cbd8 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d104      	bne.n	800cabe <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	617b      	str	r3, [r7, #20]
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	613b      	str	r3, [r7, #16]
 800cabc:	e007      	b.n	800cace <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	68fa      	ldr	r2, [r7, #12]
 800cac2:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	693a      	ldr	r2, [r7, #16]
 800cac8:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f000 8083 	beq.w	800cbdc <parse_object+0x1f0>
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	689b      	ldr	r3, [r3, #8]
 800cada:	1c5a      	adds	r2, r3, #1
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d27b      	bcs.n	800cbdc <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	1c5a      	adds	r2, r3, #1
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800caee:	6838      	ldr	r0, [r7, #0]
 800caf0:	f7ff fa90 	bl	800c014 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800caf4:	6839      	ldr	r1, [r7, #0]
 800caf6:	6938      	ldr	r0, [r7, #16]
 800caf8:	f7ff f804 	bl	800bb04 <parse_string>
 800cafc:	4603      	mov	r3, r0
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d06e      	beq.n	800cbe0 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800cb02:	6838      	ldr	r0, [r7, #0]
 800cb04:	f7ff fa86 	bl	800c014 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	691a      	ldr	r2, [r3, #16]
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	2200      	movs	r2, #0
 800cb14:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d063      	beq.n	800cbe4 <parse_object+0x1f8>
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	689a      	ldr	r2, [r3, #8]
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d25d      	bcs.n	800cbe4 <parse_object+0x1f8>
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	4413      	add	r3, r2
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	2b3a      	cmp	r3, #58	@ 0x3a
 800cb36:	d155      	bne.n	800cbe4 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	1c5a      	adds	r2, r3, #1
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800cb42:	6838      	ldr	r0, [r7, #0]
 800cb44:	f7ff fa66 	bl	800c014 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800cb48:	6839      	ldr	r1, [r7, #0]
 800cb4a:	6938      	ldr	r0, [r7, #16]
 800cb4c:	f7ff fc34 	bl	800c3b8 <parse_value>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d048      	beq.n	800cbe8 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800cb56:	6838      	ldr	r0, [r7, #0]
 800cb58:	f7ff fa5c 	bl	800c014 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d00d      	beq.n	800cb7e <parse_object+0x192>
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	689a      	ldr	r2, [r3, #8]
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d207      	bcs.n	800cb7e <parse_object+0x192>
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	4413      	add	r3, r2
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	2b2c      	cmp	r3, #44	@ 0x2c
 800cb7c:	d08d      	beq.n	800ca9a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d033      	beq.n	800cbec <parse_object+0x200>
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	689a      	ldr	r2, [r3, #8]
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d22d      	bcs.n	800cbec <parse_object+0x200>
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	689b      	ldr	r3, [r3, #8]
 800cb98:	4413      	add	r3, r2
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	2b7d      	cmp	r3, #125	@ 0x7d
 800cb9e:	d125      	bne.n	800cbec <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 800cba0:	e000      	b.n	800cba4 <parse_object+0x1b8>
        goto success; /* empty object */
 800cba2:	bf00      	nop
    input_buffer->depth--;
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	1e5a      	subs	r2, r3, #1
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d002      	beq.n	800cbba <parse_object+0x1ce>
        head->prev = current_item;
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	693a      	ldr	r2, [r7, #16]
 800cbb8:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2240      	movs	r2, #64	@ 0x40
 800cbbe:	60da      	str	r2, [r3, #12]
    item->child = head;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	697a      	ldr	r2, [r7, #20]
 800cbc4:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	1c5a      	adds	r2, r3, #1
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	609a      	str	r2, [r3, #8]
    return true;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	e013      	b.n	800cbfc <parse_object+0x210>
        goto fail; /* not an object */
 800cbd4:	bf00      	nop
 800cbd6:	e00a      	b.n	800cbee <parse_object+0x202>
            goto fail; /* allocation failure */
 800cbd8:	bf00      	nop
 800cbda:	e008      	b.n	800cbee <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 800cbdc:	bf00      	nop
 800cbde:	e006      	b.n	800cbee <parse_object+0x202>
            goto fail; /* failed to parse name */
 800cbe0:	bf00      	nop
 800cbe2:	e004      	b.n	800cbee <parse_object+0x202>
            goto fail; /* invalid object */
 800cbe4:	bf00      	nop
 800cbe6:	e002      	b.n	800cbee <parse_object+0x202>
            goto fail; /* failed to parse value */
 800cbe8:	bf00      	nop
 800cbea:	e000      	b.n	800cbee <parse_object+0x202>
        goto fail; /* expected end of object */
 800cbec:	bf00      	nop

fail:
    if (head != NULL)
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d002      	beq.n	800cbfa <parse_object+0x20e>
    {
        cJSON_Delete(head);
 800cbf4:	6978      	ldr	r0, [r7, #20]
 800cbf6:	f7fe fb23 	bl	800b240 <cJSON_Delete>
    }

    return false;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3718      	adds	r7, #24
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b088      	sub	sp, #32
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 800cc12:	2300      	movs	r3, #0
 800cc14:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	689b      	ldr	r3, [r3, #8]
 800cc1a:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d101      	bne.n	800cc26 <print_object+0x22>
    {
        return false;
 800cc22:	2300      	movs	r3, #0
 800cc24:	e108      	b.n	800ce38 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	695b      	ldr	r3, [r3, #20]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d001      	beq.n	800cc32 <print_object+0x2e>
 800cc2e:	2302      	movs	r3, #2
 800cc30:	e000      	b.n	800cc34 <print_object+0x30>
 800cc32:	2301      	movs	r3, #1
 800cc34:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	6838      	ldr	r0, [r7, #0]
 800cc3e:	f7fe fc23 	bl	800b488 <ensure>
 800cc42:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d101      	bne.n	800cc4e <print_object+0x4a>
    {
        return false;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	e0f4      	b.n	800ce38 <print_object+0x234>
    }

    *output_pointer++ = '{';
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	1c5a      	adds	r2, r3, #1
 800cc52:	61fa      	str	r2, [r7, #28]
 800cc54:	227b      	movs	r2, #123	@ 0x7b
 800cc56:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	1c5a      	adds	r2, r3, #1
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	695b      	ldr	r3, [r3, #20]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d004      	beq.n	800cc74 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 800cc6a:	69fb      	ldr	r3, [r7, #28]
 800cc6c:	1c5a      	adds	r2, r3, #1
 800cc6e:	61fa      	str	r2, [r7, #28]
 800cc70:	220a      	movs	r2, #10
 800cc72:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	689a      	ldr	r2, [r3, #8]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	441a      	add	r2, r3
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	609a      	str	r2, [r3, #8]

    while (current_item)
 800cc80:	e0a0      	b.n	800cdc4 <print_object+0x1c0>
    {
        if (output_buffer->format)
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	695b      	ldr	r3, [r3, #20]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d022      	beq.n	800ccd0 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	68db      	ldr	r3, [r3, #12]
 800cc8e:	4619      	mov	r1, r3
 800cc90:	6838      	ldr	r0, [r7, #0]
 800cc92:	f7fe fbf9 	bl	800b488 <ensure>
 800cc96:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d101      	bne.n	800cca2 <print_object+0x9e>
            {
                return false;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	e0ca      	b.n	800ce38 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 800cca2:	2300      	movs	r3, #0
 800cca4:	617b      	str	r3, [r7, #20]
 800cca6:	e007      	b.n	800ccb8 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	1c5a      	adds	r2, r3, #1
 800ccac:	61fa      	str	r2, [r7, #28]
 800ccae:	2209      	movs	r2, #9
 800ccb0:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	617b      	str	r3, [r7, #20]
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	697a      	ldr	r2, [r7, #20]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d3f2      	bcc.n	800cca8 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	689a      	ldr	r2, [r3, #8]
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	68db      	ldr	r3, [r3, #12]
 800ccca:	441a      	add	r2, r3
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800ccd0:	69bb      	ldr	r3, [r7, #24]
 800ccd2:	6a1b      	ldr	r3, [r3, #32]
 800ccd4:	6839      	ldr	r1, [r7, #0]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7ff f85c 	bl	800bd94 <print_string_ptr>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d101      	bne.n	800cce6 <print_object+0xe2>
        {
            return false;
 800cce2:	2300      	movs	r3, #0
 800cce4:	e0a8      	b.n	800ce38 <print_object+0x234>
        }
        update_offset(output_buffer);
 800cce6:	6838      	ldr	r0, [r7, #0]
 800cce8:	f7fe fc68 	bl	800b5bc <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	695b      	ldr	r3, [r3, #20]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d001      	beq.n	800ccf8 <print_object+0xf4>
 800ccf4:	2302      	movs	r3, #2
 800ccf6:	e000      	b.n	800ccfa <print_object+0xf6>
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800ccfc:	68f9      	ldr	r1, [r7, #12]
 800ccfe:	6838      	ldr	r0, [r7, #0]
 800cd00:	f7fe fbc2 	bl	800b488 <ensure>
 800cd04:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800cd06:	69fb      	ldr	r3, [r7, #28]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d101      	bne.n	800cd10 <print_object+0x10c>
        {
            return false;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	e093      	b.n	800ce38 <print_object+0x234>
        }
        *output_pointer++ = ':';
 800cd10:	69fb      	ldr	r3, [r7, #28]
 800cd12:	1c5a      	adds	r2, r3, #1
 800cd14:	61fa      	str	r2, [r7, #28]
 800cd16:	223a      	movs	r2, #58	@ 0x3a
 800cd18:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	695b      	ldr	r3, [r3, #20]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d004      	beq.n	800cd2c <print_object+0x128>
        {
            *output_pointer++ = '\t';
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	1c5a      	adds	r2, r3, #1
 800cd26:	61fa      	str	r2, [r7, #28]
 800cd28:	2209      	movs	r2, #9
 800cd2a:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	689a      	ldr	r2, [r3, #8]
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	441a      	add	r2, r3
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800cd38:	6839      	ldr	r1, [r7, #0]
 800cd3a:	69b8      	ldr	r0, [r7, #24]
 800cd3c:	f7ff fc28 	bl	800c590 <print_value>
 800cd40:	4603      	mov	r3, r0
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d101      	bne.n	800cd4a <print_object+0x146>
        {
            return false;
 800cd46:	2300      	movs	r3, #0
 800cd48:	e076      	b.n	800ce38 <print_object+0x234>
        }
        update_offset(output_buffer);
 800cd4a:	6838      	ldr	r0, [r7, #0]
 800cd4c:	f7fe fc36 	bl	800b5bc <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	695b      	ldr	r3, [r3, #20]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d001      	beq.n	800cd5c <print_object+0x158>
 800cd58:	2201      	movs	r2, #1
 800cd5a:	e000      	b.n	800cd5e <print_object+0x15a>
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d001      	beq.n	800cd6a <print_object+0x166>
 800cd66:	2301      	movs	r3, #1
 800cd68:	e000      	b.n	800cd6c <print_object+0x168>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	4413      	add	r3, r2
 800cd6e:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	3301      	adds	r3, #1
 800cd74:	4619      	mov	r1, r3
 800cd76:	6838      	ldr	r0, [r7, #0]
 800cd78:	f7fe fb86 	bl	800b488 <ensure>
 800cd7c:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d101      	bne.n	800cd88 <print_object+0x184>
        {
            return false;
 800cd84:	2300      	movs	r3, #0
 800cd86:	e057      	b.n	800ce38 <print_object+0x234>
        }
        if (current_item->next)
 800cd88:	69bb      	ldr	r3, [r7, #24]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d004      	beq.n	800cd9a <print_object+0x196>
        {
            *output_pointer++ = ',';
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	1c5a      	adds	r2, r3, #1
 800cd94:	61fa      	str	r2, [r7, #28]
 800cd96:	222c      	movs	r2, #44	@ 0x2c
 800cd98:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	695b      	ldr	r3, [r3, #20]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d004      	beq.n	800cdac <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	1c5a      	adds	r2, r3, #1
 800cda6:	61fa      	str	r2, [r7, #28]
 800cda8:	220a      	movs	r2, #10
 800cdaa:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	689a      	ldr	r2, [r3, #8]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	441a      	add	r2, r3
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	61bb      	str	r3, [r7, #24]
    while (current_item)
 800cdc4:	69bb      	ldr	r3, [r7, #24]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f47f af5b 	bne.w	800cc82 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	695b      	ldr	r3, [r3, #20]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d003      	beq.n	800cddc <print_object+0x1d8>
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	68db      	ldr	r3, [r3, #12]
 800cdd8:	3301      	adds	r3, #1
 800cdda:	e000      	b.n	800cdde <print_object+0x1da>
 800cddc:	2302      	movs	r3, #2
 800cdde:	4619      	mov	r1, r3
 800cde0:	6838      	ldr	r0, [r7, #0]
 800cde2:	f7fe fb51 	bl	800b488 <ensure>
 800cde6:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d101      	bne.n	800cdf2 <print_object+0x1ee>
    {
        return false;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	e022      	b.n	800ce38 <print_object+0x234>
    }
    if (output_buffer->format)
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	695b      	ldr	r3, [r3, #20]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d010      	beq.n	800ce1c <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	613b      	str	r3, [r7, #16]
 800cdfe:	e007      	b.n	800ce10 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	1c5a      	adds	r2, r3, #1
 800ce04:	61fa      	str	r2, [r7, #28]
 800ce06:	2209      	movs	r2, #9
 800ce08:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	613b      	str	r3, [r7, #16]
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	3b01      	subs	r3, #1
 800ce16:	693a      	ldr	r2, [r7, #16]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d3f1      	bcc.n	800ce00 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	1c5a      	adds	r2, r3, #1
 800ce20:	61fa      	str	r2, [r7, #28]
 800ce22:	227d      	movs	r2, #125	@ 0x7d
 800ce24:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800ce26:	69fb      	ldr	r3, [r7, #28]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	1e5a      	subs	r2, r3, #1
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	60da      	str	r2, [r3, #12]

    return true;
 800ce36:	2301      	movs	r3, #1
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3720      	adds	r7, #32
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b086      	sub	sp, #24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d002      	beq.n	800ce5c <get_object_item+0x1c>
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d101      	bne.n	800ce60 <get_object_item+0x20>
    {
        return NULL;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	e033      	b.n	800cec8 <get_object_item+0x88>
    }

    current_element = object->child;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	689b      	ldr	r3, [r3, #8]
 800ce64:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d017      	beq.n	800ce9c <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800ce6c:	e002      	b.n	800ce74 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d01c      	beq.n	800ceb4 <get_object_item+0x74>
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	6a1b      	ldr	r3, [r3, #32]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d018      	beq.n	800ceb4 <get_object_item+0x74>
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	6a1b      	ldr	r3, [r3, #32]
 800ce86:	4619      	mov	r1, r3
 800ce88:	68b8      	ldr	r0, [r7, #8]
 800ce8a:	f7fb f9c1 	bl	8008210 <strcmp>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1ec      	bne.n	800ce6e <get_object_item+0x2e>
 800ce94:	e00e      	b.n	800ceb4 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d008      	beq.n	800ceb4 <get_object_item+0x74>
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	6a1b      	ldr	r3, [r3, #32]
 800cea6:	4619      	mov	r1, r3
 800cea8:	68b8      	ldr	r0, [r7, #8]
 800ceaa:	f7fe f91f 	bl	800b0ec <case_insensitive_strcmp>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d1f0      	bne.n	800ce96 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d003      	beq.n	800cec2 <get_object_item+0x82>
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	6a1b      	ldr	r3, [r3, #32]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d101      	bne.n	800cec6 <get_object_item+0x86>
        return NULL;
 800cec2:	2300      	movs	r3, #0
 800cec4:	e000      	b.n	800cec8 <get_object_item+0x88>
    }

    return current_element;
 800cec6:	697b      	ldr	r3, [r7, #20]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3718      	adds	r7, #24
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800ceda:	2200      	movs	r2, #0
 800cedc:	6839      	ldr	r1, [r7, #0]
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f7ff ffae 	bl	800ce40 <get_object_item>
 800cee4:	4603      	mov	r3, r0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3708      	adds	r7, #8
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 800ceee:	b480      	push	{r7}
 800cef0:	b083      	sub	sp, #12
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	683a      	ldr	r2, [r7, #0]
 800cefc:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	605a      	str	r2, [r3, #4]
}
 800cf04:	bf00      	nop
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d006      	beq.n	800cf32 <add_item_to_array+0x22>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d003      	beq.n	800cf32 <add_item_to_array+0x22>
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d101      	bne.n	800cf36 <add_item_to_array+0x26>
    {
        return false;
 800cf32:	2300      	movs	r3, #0
 800cf34:	e01e      	b.n	800cf74 <add_item_to_array+0x64>
    }

    child = array->child;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	689b      	ldr	r3, [r3, #8]
 800cf3a:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d109      	bne.n	800cf56 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	683a      	ldr	r2, [r7, #0]
 800cf46:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	683a      	ldr	r2, [r7, #0]
 800cf4c:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	2200      	movs	r2, #0
 800cf52:	601a      	str	r2, [r3, #0]
 800cf54:	e00d      	b.n	800cf72 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d009      	beq.n	800cf72 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	6839      	ldr	r1, [r7, #0]
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7ff ffc2 	bl	800ceee <suffix_object>
            array->child->prev = item;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	689b      	ldr	r3, [r3, #8]
 800cf6e:	683a      	ldr	r2, [r7, #0]
 800cf70:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 800cf72:	2301      	movs	r3, #1
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3710      	adds	r7, #16
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
    return (void*)string;
 800cf84:	687b      	ldr	r3, [r7, #4]
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	370c      	adds	r7, #12
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr

0800cf92 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b086      	sub	sp, #24
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	60f8      	str	r0, [r7, #12]
 800cf9a:	60b9      	str	r1, [r7, #8]
 800cf9c:	607a      	str	r2, [r7, #4]
 800cf9e:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d009      	beq.n	800cfc2 <add_item_to_object+0x30>
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d006      	beq.n	800cfc2 <add_item_to_object+0x30>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d003      	beq.n	800cfc2 <add_item_to_object+0x30>
 800cfba:	68fa      	ldr	r2, [r7, #12]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d101      	bne.n	800cfc6 <add_item_to_object+0x34>
    {
        return false;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	e036      	b.n	800d034 <add_item_to_object+0xa2>
    }

    if (constant_key)
 800cfc6:	6a3b      	ldr	r3, [r7, #32]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d009      	beq.n	800cfe0 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 800cfcc:	68b8      	ldr	r0, [r7, #8]
 800cfce:	f7ff ffd5 	bl	800cf7c <cast_away_const>
 800cfd2:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	68db      	ldr	r3, [r3, #12]
 800cfd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cfdc:	613b      	str	r3, [r7, #16]
 800cfde:	e00e      	b.n	800cffe <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 800cfe0:	6839      	ldr	r1, [r7, #0]
 800cfe2:	68b8      	ldr	r0, [r7, #8]
 800cfe4:	f7fe f8ee 	bl	800b1c4 <cJSON_strdup>
 800cfe8:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d101      	bne.n	800cff4 <add_item_to_object+0x62>
        {
            return false;
 800cff0:	2300      	movs	r3, #0
 800cff2:	e01f      	b.n	800d034 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cffc:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d006:	2b00      	cmp	r3, #0
 800d008:	d109      	bne.n	800d01e <add_item_to_object+0x8c>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6a1b      	ldr	r3, [r3, #32]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d005      	beq.n	800d01e <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	6a12      	ldr	r2, [r2, #32]
 800d01a:	4610      	mov	r0, r2
 800d01c:	4798      	blx	r3
    }

    item->string = new_key;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	697a      	ldr	r2, [r7, #20]
 800d022:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	693a      	ldr	r2, [r7, #16]
 800d028:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800d02a:	6879      	ldr	r1, [r7, #4]
 800d02c:	68f8      	ldr	r0, [r7, #12]
 800d02e:	f7ff ff6f 	bl	800cf10 <add_item_to_array>
 800d032:	4603      	mov	r3, r0
}
 800d034:	4618      	mov	r0, r3
 800d036:	3718      	adds	r7, #24
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b088      	sub	sp, #32
 800d040:	af02      	add	r7, sp, #8
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 800d04a:	ed97 0b00 	vldr	d0, [r7]
 800d04e:	f000 f81b 	bl	800d088 <cJSON_CreateNumber>
 800d052:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 800d054:	2300      	movs	r3, #0
 800d056:	9300      	str	r3, [sp, #0]
 800d058:	4b09      	ldr	r3, [pc, #36]	@ (800d080 <cJSON_AddNumberToObject+0x44>)
 800d05a:	697a      	ldr	r2, [r7, #20]
 800d05c:	68b9      	ldr	r1, [r7, #8]
 800d05e:	68f8      	ldr	r0, [r7, #12]
 800d060:	f7ff ff97 	bl	800cf92 <add_item_to_object>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d001      	beq.n	800d06e <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	e003      	b.n	800d076 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 800d06e:	6978      	ldr	r0, [r7, #20]
 800d070:	f7fe f8e6 	bl	800b240 <cJSON_Delete>
    return NULL;
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	3718      	adds	r7, #24
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	20000000 	.word	0x20000000
 800d084:	00000000 	.word	0x00000000

0800d088 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 800d092:	481f      	ldr	r0, [pc, #124]	@ (800d110 <cJSON_CreateNumber+0x88>)
 800d094:	f7fe f8be 	bl	800b214 <cJSON_New_Item>
 800d098:	60f8      	str	r0, [r7, #12]
    if(item)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d02c      	beq.n	800d0fa <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2208      	movs	r2, #8
 800d0a4:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 800d0a6:	68f9      	ldr	r1, [r7, #12]
 800d0a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0ac:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 800d0b0:	a315      	add	r3, pc, #84	@ (adr r3, 800d108 <cJSON_CreateNumber+0x80>)
 800d0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0ba:	f7fb fd53 	bl	8008b64 <__aeabi_dcmpge>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d004      	beq.n	800d0ce <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800d0ca:	615a      	str	r2, [r3, #20]
 800d0cc:	e015      	b.n	800d0fa <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 800d0ce:	f04f 0200 	mov.w	r2, #0
 800d0d2:	4b10      	ldr	r3, [pc, #64]	@ (800d114 <cJSON_CreateNumber+0x8c>)
 800d0d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0d8:	f7fb fd3a 	bl	8008b50 <__aeabi_dcmple>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d004      	beq.n	800d0ec <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d0e8:	615a      	str	r2, [r3, #20]
 800d0ea:	e006      	b.n	800d0fa <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 800d0ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0f0:	f7fb fd62 	bl	8008bb8 <__aeabi_d2iz>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3710      	adds	r7, #16
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	f3af 8000 	nop.w
 800d108:	ffc00000 	.word	0xffc00000
 800d10c:	41dfffff 	.word	0x41dfffff
 800d110:	20000000 	.word	0x20000000
 800d114:	c1e00000 	.word	0xc1e00000

0800d118 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800d11e:	4807      	ldr	r0, [pc, #28]	@ (800d13c <cJSON_CreateObject+0x24>)
 800d120:	f7fe f878 	bl	800b214 <cJSON_New_Item>
 800d124:	6078      	str	r0, [r7, #4]
    if (item)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d002      	beq.n	800d132 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2240      	movs	r2, #64	@ 0x40
 800d130:	60da      	str	r2, [r3, #12]
    }

    return item;
 800d132:	687b      	ldr	r3, [r7, #4]
}
 800d134:	4618      	mov	r0, r3
 800d136:	3708      	adds	r7, #8
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	20000000 	.word	0x20000000

0800d140 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d101      	bne.n	800d152 <cJSON_IsNumber+0x12>
    {
        return false;
 800d14e:	2300      	movs	r3, #0
 800d150:	e007      	b.n	800d162 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	68db      	ldr	r3, [r3, #12]
 800d156:	b2db      	uxtb	r3, r3
 800d158:	2b08      	cmp	r3, #8
 800d15a:	bf0c      	ite	eq
 800d15c:	2301      	moveq	r3, #1
 800d15e:	2300      	movne	r3, #0
 800d160:	b2db      	uxtb	r3, r3
}
 800d162:	4618      	mov	r0, r3
 800d164:	370c      	adds	r7, #12
 800d166:	46bd      	mov	sp, r7
 800d168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16c:	4770      	bx	lr

0800d16e <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 800d16e:	b480      	push	{r7}
 800d170:	b083      	sub	sp, #12
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d101      	bne.n	800d180 <cJSON_IsString+0x12>
    {
        return false;
 800d17c:	2300      	movs	r3, #0
 800d17e:	e007      	b.n	800d190 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	68db      	ldr	r3, [r3, #12]
 800d184:	b2db      	uxtb	r3, r3
 800d186:	2b10      	cmp	r3, #16
 800d188:	bf0c      	ite	eq
 800d18a:	2301      	moveq	r3, #1
 800d18c:	2300      	movne	r3, #0
 800d18e:	b2db      	uxtb	r3, r3
}
 800d190:	4618      	mov	r0, r3
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <Display_Handler>:

button_position_t current_buttons[6];
int button_count = 0;

void Display_Handler(void *param)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Menu_Handler();
 800d1a4:	f001 f9de 	bl	800e564 <Menu_Handler>
 800d1a8:	e7fc      	b.n	800d1a4 <Display_Handler+0x8>
	...

0800d1ac <updateToDisplayMenu>:
	}
}

void updateToDisplayMenu(void)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	af00      	add	r7, sp, #0
	if(current_menu == MENU_TOTAL_CONTROL)
 800d1b0:	4b10      	ldr	r3, [pc, #64]	@ (800d1f4 <updateToDisplayMenu+0x48>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d106      	bne.n	800d1c6 <updateToDisplayMenu+0x1a>
	{
		last_selection = current_selection;
 800d1b8:	4b0f      	ldr	r3, [pc, #60]	@ (800d1f8 <updateToDisplayMenu+0x4c>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a0f      	ldr	r2, [pc, #60]	@ (800d1fc <updateToDisplayMenu+0x50>)
 800d1be:	6013      	str	r3, [r2, #0]
		displayTotalControlMenu();
 800d1c0:	f000 fb44 	bl	800d84c <displayTotalControlMenu>
	else if(current_menu == MENU_DEVICE_CONTROL)
	{
		last_selection = current_selection;
		displayDeviceControlMenu();
	}
}
 800d1c4:	e014      	b.n	800d1f0 <updateToDisplayMenu+0x44>
	else if(current_menu == MENU_SEPARATE_CONTROL)
 800d1c6:	4b0b      	ldr	r3, [pc, #44]	@ (800d1f4 <updateToDisplayMenu+0x48>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2b02      	cmp	r3, #2
 800d1cc:	d106      	bne.n	800d1dc <updateToDisplayMenu+0x30>
		last_selection = current_selection;
 800d1ce:	4b0a      	ldr	r3, [pc, #40]	@ (800d1f8 <updateToDisplayMenu+0x4c>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	4a0a      	ldr	r2, [pc, #40]	@ (800d1fc <updateToDisplayMenu+0x50>)
 800d1d4:	6013      	str	r3, [r2, #0]
		displaySeparateControlMenu();
 800d1d6:	f000 fc17 	bl	800da08 <displaySeparateControlMenu>
}
 800d1da:	e009      	b.n	800d1f0 <updateToDisplayMenu+0x44>
	else if(current_menu == MENU_DEVICE_CONTROL)
 800d1dc:	4b05      	ldr	r3, [pc, #20]	@ (800d1f4 <updateToDisplayMenu+0x48>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b03      	cmp	r3, #3
 800d1e2:	d105      	bne.n	800d1f0 <updateToDisplayMenu+0x44>
		last_selection = current_selection;
 800d1e4:	4b04      	ldr	r3, [pc, #16]	@ (800d1f8 <updateToDisplayMenu+0x4c>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a04      	ldr	r2, [pc, #16]	@ (800d1fc <updateToDisplayMenu+0x50>)
 800d1ea:	6013      	str	r3, [r2, #0]
		displayDeviceControlMenu();
 800d1ec:	f000 fce6 	bl	800dbbc <displayDeviceControlMenu>
}
 800d1f0:	bf00      	nop
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	20000df0 	.word	0x20000df0
 800d1f8:	20000df4 	.word	0x20000df4
 800d1fc:	2000000c 	.word	0x2000000c

0800d200 <drawSingleButton>:


void drawSingleButton(int x, int y, int width, int height, char* text, int selected, int button_id)
{
 800d200:	b590      	push	{r4, r7, lr}
 800d202:	b089      	sub	sp, #36	@ 0x24
 800d204:	af04      	add	r7, sp, #16
 800d206:	60f8      	str	r0, [r7, #12]
 800d208:	60b9      	str	r1, [r7, #8]
 800d20a:	607a      	str	r2, [r7, #4]
 800d20c:	603b      	str	r3, [r7, #0]
    fillRect(x-1, y-1, width+2, height+2, BLACK);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	b29b      	uxth	r3, r3
 800d212:	3b01      	subs	r3, #1
 800d214:	b29b      	uxth	r3, r3
 800d216:	b218      	sxth	r0, r3
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	3b01      	subs	r3, #1
 800d21e:	b29b      	uxth	r3, r3
 800d220:	b219      	sxth	r1, r3
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	b29b      	uxth	r3, r3
 800d226:	3302      	adds	r3, #2
 800d228:	b29b      	uxth	r3, r3
 800d22a:	b21a      	sxth	r2, r3
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	b29b      	uxth	r3, r3
 800d230:	3302      	adds	r3, #2
 800d232:	b29b      	uxth	r3, r3
 800d234:	b21b      	sxth	r3, r3
 800d236:	2400      	movs	r4, #0
 800d238:	9400      	str	r4, [sp, #0]
 800d23a:	f7fb fee4 	bl	8009006 <fillRect>

    if (selected)
 800d23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d240:	2b00      	cmp	r3, #0
 800d242:	d03e      	beq.n	800d2c2 <drawSingleButton+0xc2>
    {
        drawRoundRect(x-1, y-1, width+2, height+2, 3, WHITE);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	b29b      	uxth	r3, r3
 800d248:	3b01      	subs	r3, #1
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	b218      	sxth	r0, r3
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	b29b      	uxth	r3, r3
 800d252:	3b01      	subs	r3, #1
 800d254:	b29b      	uxth	r3, r3
 800d256:	b219      	sxth	r1, r3
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	3302      	adds	r3, #2
 800d25e:	b29b      	uxth	r3, r3
 800d260:	b21a      	sxth	r2, r3
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	b29b      	uxth	r3, r3
 800d266:	3302      	adds	r3, #2
 800d268:	b29b      	uxth	r3, r3
 800d26a:	b21b      	sxth	r3, r3
 800d26c:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800d270:	9401      	str	r4, [sp, #4]
 800d272:	2403      	movs	r4, #3
 800d274:	9400      	str	r4, [sp, #0]
 800d276:	f7fc f9e7 	bl	8009648 <drawRoundRect>
        fillRoundRect(x, y, width, height, 3, GREEN);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	b218      	sxth	r0, r3
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	b219      	sxth	r1, r3
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	b21a      	sxth	r2, r3
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	b21b      	sxth	r3, r3
 800d28a:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 800d28e:	9401      	str	r4, [sp, #4]
 800d290:	2403      	movs	r4, #3
 800d292:	9400      	str	r4, [sp, #0]
 800d294:	f7fc faa5 	bl	80097e2 <fillRoundRect>
        ST7735_WriteString(x+5, y+4, text, Font_7x10, BLACK, GREEN);
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	3305      	adds	r3, #5
 800d29e:	b298      	uxth	r0, r3
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	3304      	adds	r3, #4
 800d2a6:	b299      	uxth	r1, r3
 800d2a8:	4b4d      	ldr	r3, [pc, #308]	@ (800d3e0 <drawSingleButton+0x1e0>)
 800d2aa:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800d2ae:	9202      	str	r2, [sp, #8]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	9201      	str	r2, [sp, #4]
 800d2b4:	685a      	ldr	r2, [r3, #4]
 800d2b6:	9200      	str	r2, [sp, #0]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	6a3a      	ldr	r2, [r7, #32]
 800d2bc:	f7fd fe3a 	bl	800af34 <ST7735_WriteString>
 800d2c0:	e03e      	b.n	800d340 <drawSingleButton+0x140>
    }
    else
    {
        drawRoundRect(x-1, y-1, width+2, height+2, 3, WHITE);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	3b01      	subs	r3, #1
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	b218      	sxth	r0, r3
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	3b01      	subs	r3, #1
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	b219      	sxth	r1, r3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	3302      	adds	r3, #2
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	b21a      	sxth	r2, r3
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	3302      	adds	r3, #2
 800d2e6:	b29b      	uxth	r3, r3
 800d2e8:	b21b      	sxth	r3, r3
 800d2ea:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800d2ee:	9401      	str	r4, [sp, #4]
 800d2f0:	2403      	movs	r4, #3
 800d2f2:	9400      	str	r4, [sp, #0]
 800d2f4:	f7fc f9a8 	bl	8009648 <drawRoundRect>
        fillRoundRect(x, y, width, height, 3, GRAY);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	b218      	sxth	r0, r3
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	b219      	sxth	r1, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	b21a      	sxth	r2, r3
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	b21b      	sxth	r3, r3
 800d308:	f242 1404 	movw	r4, #8452	@ 0x2104
 800d30c:	9401      	str	r4, [sp, #4]
 800d30e:	2403      	movs	r4, #3
 800d310:	9400      	str	r4, [sp, #0]
 800d312:	f7fc fa66 	bl	80097e2 <fillRoundRect>
        ST7735_WriteString(x+5, y+4, text, Font_7x10, WHITE, GRAY);
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	b29b      	uxth	r3, r3
 800d31a:	3305      	adds	r3, #5
 800d31c:	b298      	uxth	r0, r3
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	b29b      	uxth	r3, r3
 800d322:	3304      	adds	r3, #4
 800d324:	b299      	uxth	r1, r3
 800d326:	4b2e      	ldr	r3, [pc, #184]	@ (800d3e0 <drawSingleButton+0x1e0>)
 800d328:	f242 1204 	movw	r2, #8452	@ 0x2104
 800d32c:	9202      	str	r2, [sp, #8]
 800d32e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d332:	9201      	str	r2, [sp, #4]
 800d334:	685a      	ldr	r2, [r3, #4]
 800d336:	9200      	str	r2, [sp, #0]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	6a3a      	ldr	r2, [r7, #32]
 800d33c:	f7fd fdfa 	bl	800af34 <ST7735_WriteString>
    }

    // Store button position AND TEXT for future updates
    if (button_id < 6)
 800d340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d342:	2b05      	cmp	r3, #5
 800d344:	dc48      	bgt.n	800d3d8 <drawSingleButton+0x1d8>
    {
        current_buttons[button_id].x = x;
 800d346:	4927      	ldr	r1, [pc, #156]	@ (800d3e4 <drawSingleButton+0x1e4>)
 800d348:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d34a:	4613      	mov	r3, r2
 800d34c:	005b      	lsls	r3, r3, #1
 800d34e:	4413      	add	r3, r2
 800d350:	011b      	lsls	r3, r3, #4
 800d352:	440b      	add	r3, r1
 800d354:	68fa      	ldr	r2, [r7, #12]
 800d356:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].y = y;
 800d358:	4922      	ldr	r1, [pc, #136]	@ (800d3e4 <drawSingleButton+0x1e4>)
 800d35a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d35c:	4613      	mov	r3, r2
 800d35e:	005b      	lsls	r3, r3, #1
 800d360:	4413      	add	r3, r2
 800d362:	011b      	lsls	r3, r3, #4
 800d364:	440b      	add	r3, r1
 800d366:	3304      	adds	r3, #4
 800d368:	68ba      	ldr	r2, [r7, #8]
 800d36a:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].width = width;
 800d36c:	491d      	ldr	r1, [pc, #116]	@ (800d3e4 <drawSingleButton+0x1e4>)
 800d36e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d370:	4613      	mov	r3, r2
 800d372:	005b      	lsls	r3, r3, #1
 800d374:	4413      	add	r3, r2
 800d376:	011b      	lsls	r3, r3, #4
 800d378:	440b      	add	r3, r1
 800d37a:	3308      	adds	r3, #8
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].height = height;
 800d380:	4918      	ldr	r1, [pc, #96]	@ (800d3e4 <drawSingleButton+0x1e4>)
 800d382:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d384:	4613      	mov	r3, r2
 800d386:	005b      	lsls	r3, r3, #1
 800d388:	4413      	add	r3, r2
 800d38a:	011b      	lsls	r3, r3, #4
 800d38c:	440b      	add	r3, r1
 800d38e:	330c      	adds	r3, #12
 800d390:	683a      	ldr	r2, [r7, #0]
 800d392:	601a      	str	r2, [r3, #0]
        current_buttons[button_id].button_id = button_id;
 800d394:	4913      	ldr	r1, [pc, #76]	@ (800d3e4 <drawSingleButton+0x1e4>)
 800d396:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d398:	4613      	mov	r3, r2
 800d39a:	005b      	lsls	r3, r3, #1
 800d39c:	4413      	add	r3, r2
 800d39e:	011b      	lsls	r3, r3, #4
 800d3a0:	440b      	add	r3, r1
 800d3a2:	3310      	adds	r3, #16
 800d3a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3a6:	601a      	str	r2, [r3, #0]
        strncpy(current_buttons[button_id].text, text, 24);
 800d3a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3aa:	4613      	mov	r3, r2
 800d3ac:	005b      	lsls	r3, r3, #1
 800d3ae:	4413      	add	r3, r2
 800d3b0:	011b      	lsls	r3, r3, #4
 800d3b2:	3310      	adds	r3, #16
 800d3b4:	4a0b      	ldr	r2, [pc, #44]	@ (800d3e4 <drawSingleButton+0x1e4>)
 800d3b6:	4413      	add	r3, r2
 800d3b8:	3304      	adds	r3, #4
 800d3ba:	2218      	movs	r2, #24
 800d3bc:	6a39      	ldr	r1, [r7, #32]
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f00b f8de 	bl	8018580 <strncpy>
        current_buttons[button_id].text[24] = '\0';
 800d3c4:	4907      	ldr	r1, [pc, #28]	@ (800d3e4 <drawSingleButton+0x1e4>)
 800d3c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3c8:	4613      	mov	r3, r2
 800d3ca:	005b      	lsls	r3, r3, #1
 800d3cc:	4413      	add	r3, r2
 800d3ce:	011b      	lsls	r3, r3, #4
 800d3d0:	440b      	add	r3, r1
 800d3d2:	332c      	adds	r3, #44	@ 0x2c
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	701a      	strb	r2, [r3, #0]
    }
}
 800d3d8:	bf00      	nop
 800d3da:	3714      	adds	r7, #20
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd90      	pop	{r4, r7, pc}
 800d3e0:	20000024 	.word	0x20000024
 800d3e4:	20000e1c 	.word	0x20000e1c

0800d3e8 <updateButtonSelection>:

void updateButtonSelection(int old_selection, int new_selection)

{
 800d3e8:	b590      	push	{r4, r7, lr}
 800d3ea:	b089      	sub	sp, #36	@ 0x24
 800d3ec:	af04      	add	r7, sp, #16
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
    // Update old button (unselect)
    if (old_selection >= 0 && old_selection < button_count)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	db74      	blt.n	800d4e2 <updateButtonSelection+0xfa>
 800d3f8:	4b77      	ldr	r3, [pc, #476]	@ (800d5d8 <updateButtonSelection+0x1f0>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	da6f      	bge.n	800d4e2 <updateButtonSelection+0xfa>
    {
        button_position_t *old_btn = &current_buttons[old_selection];
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	4613      	mov	r3, r2
 800d406:	005b      	lsls	r3, r3, #1
 800d408:	4413      	add	r3, r2
 800d40a:	011b      	lsls	r3, r3, #4
 800d40c:	4a73      	ldr	r2, [pc, #460]	@ (800d5dc <updateButtonSelection+0x1f4>)
 800d40e:	4413      	add	r3, r2
 800d410:	60fb      	str	r3, [r7, #12]

        // Clear and redraw unselected button with text
        fillRect(old_btn->x-1, old_btn->y-1, old_btn->width+2, old_btn->height+2, BLACK);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	b29b      	uxth	r3, r3
 800d418:	3b01      	subs	r3, #1
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	b218      	sxth	r0, r3
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	b29b      	uxth	r3, r3
 800d424:	3b01      	subs	r3, #1
 800d426:	b29b      	uxth	r3, r3
 800d428:	b219      	sxth	r1, r3
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	b29b      	uxth	r3, r3
 800d430:	3302      	adds	r3, #2
 800d432:	b29b      	uxth	r3, r3
 800d434:	b21a      	sxth	r2, r3
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	68db      	ldr	r3, [r3, #12]
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	3302      	adds	r3, #2
 800d43e:	b29b      	uxth	r3, r3
 800d440:	b21b      	sxth	r3, r3
 800d442:	2400      	movs	r4, #0
 800d444:	9400      	str	r4, [sp, #0]
 800d446:	f7fb fdde 	bl	8009006 <fillRect>
        drawRoundRect(old_btn->x-1, old_btn->y-1, old_btn->width+2, old_btn->height+2, 3, WHITE);
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	b29b      	uxth	r3, r3
 800d450:	3b01      	subs	r3, #1
 800d452:	b29b      	uxth	r3, r3
 800d454:	b218      	sxth	r0, r3
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	3b01      	subs	r3, #1
 800d45e:	b29b      	uxth	r3, r3
 800d460:	b219      	sxth	r1, r3
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	689b      	ldr	r3, [r3, #8]
 800d466:	b29b      	uxth	r3, r3
 800d468:	3302      	adds	r3, #2
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	b21a      	sxth	r2, r3
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	b29b      	uxth	r3, r3
 800d474:	3302      	adds	r3, #2
 800d476:	b29b      	uxth	r3, r3
 800d478:	b21b      	sxth	r3, r3
 800d47a:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800d47e:	9401      	str	r4, [sp, #4]
 800d480:	2403      	movs	r4, #3
 800d482:	9400      	str	r4, [sp, #0]
 800d484:	f7fc f8e0 	bl	8009648 <drawRoundRect>
        fillRoundRect(old_btn->x, old_btn->y, old_btn->width, old_btn->height, 3, GRAY);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	b218      	sxth	r0, r3
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	b219      	sxth	r1, r3
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	689b      	ldr	r3, [r3, #8]
 800d498:	b21a      	sxth	r2, r3
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	b21b      	sxth	r3, r3
 800d4a0:	f242 1404 	movw	r4, #8452	@ 0x2104
 800d4a4:	9401      	str	r4, [sp, #4]
 800d4a6:	2403      	movs	r4, #3
 800d4a8:	9400      	str	r4, [sp, #0]
 800d4aa:	f7fc f99a 	bl	80097e2 <fillRoundRect>
        ST7735_WriteString(old_btn->x+5, old_btn->y+4, old_btn->text, Font_7x10, WHITE, GRAY);
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	3305      	adds	r3, #5
 800d4b6:	b298      	uxth	r0, r3
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	3304      	adds	r3, #4
 800d4c0:	b299      	uxth	r1, r3
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	f103 0414 	add.w	r4, r3, #20
 800d4c8:	4b45      	ldr	r3, [pc, #276]	@ (800d5e0 <updateButtonSelection+0x1f8>)
 800d4ca:	f242 1204 	movw	r2, #8452	@ 0x2104
 800d4ce:	9202      	str	r2, [sp, #8]
 800d4d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d4d4:	9201      	str	r2, [sp, #4]
 800d4d6:	685a      	ldr	r2, [r3, #4]
 800d4d8:	9200      	str	r2, [sp, #0]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4622      	mov	r2, r4
 800d4de:	f7fd fd29 	bl	800af34 <ST7735_WriteString>
    }

    // Update new button (select)
    if (new_selection >= 0 && new_selection < button_count)
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	db73      	blt.n	800d5d0 <updateButtonSelection+0x1e8>
 800d4e8:	4b3b      	ldr	r3, [pc, #236]	@ (800d5d8 <updateButtonSelection+0x1f0>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	683a      	ldr	r2, [r7, #0]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	da6e      	bge.n	800d5d0 <updateButtonSelection+0x1e8>
    {
        button_position_t *new_btn = &current_buttons[new_selection];
 800d4f2:	683a      	ldr	r2, [r7, #0]
 800d4f4:	4613      	mov	r3, r2
 800d4f6:	005b      	lsls	r3, r3, #1
 800d4f8:	4413      	add	r3, r2
 800d4fa:	011b      	lsls	r3, r3, #4
 800d4fc:	4a37      	ldr	r2, [pc, #220]	@ (800d5dc <updateButtonSelection+0x1f4>)
 800d4fe:	4413      	add	r3, r2
 800d500:	60bb      	str	r3, [r7, #8]

        // Clear and redraw selected button with text
        fillRect(new_btn->x-1, new_btn->y-1, new_btn->width+2, new_btn->height+2, BLACK);
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	b29b      	uxth	r3, r3
 800d508:	3b01      	subs	r3, #1
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	b218      	sxth	r0, r3
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	b29b      	uxth	r3, r3
 800d514:	3b01      	subs	r3, #1
 800d516:	b29b      	uxth	r3, r3
 800d518:	b219      	sxth	r1, r3
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	689b      	ldr	r3, [r3, #8]
 800d51e:	b29b      	uxth	r3, r3
 800d520:	3302      	adds	r3, #2
 800d522:	b29b      	uxth	r3, r3
 800d524:	b21a      	sxth	r2, r3
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	b29b      	uxth	r3, r3
 800d52c:	3302      	adds	r3, #2
 800d52e:	b29b      	uxth	r3, r3
 800d530:	b21b      	sxth	r3, r3
 800d532:	2400      	movs	r4, #0
 800d534:	9400      	str	r4, [sp, #0]
 800d536:	f7fb fd66 	bl	8009006 <fillRect>
        drawRoundRect(new_btn->x-1, new_btn->y-1, new_btn->width+2, new_btn->height+2, 3, WHITE);
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	b29b      	uxth	r3, r3
 800d540:	3b01      	subs	r3, #1
 800d542:	b29b      	uxth	r3, r3
 800d544:	b218      	sxth	r0, r3
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	3b01      	subs	r3, #1
 800d54e:	b29b      	uxth	r3, r3
 800d550:	b219      	sxth	r1, r3
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	b29b      	uxth	r3, r3
 800d558:	3302      	adds	r3, #2
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	b21a      	sxth	r2, r3
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	b29b      	uxth	r3, r3
 800d564:	3302      	adds	r3, #2
 800d566:	b29b      	uxth	r3, r3
 800d568:	b21b      	sxth	r3, r3
 800d56a:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800d56e:	9401      	str	r4, [sp, #4]
 800d570:	2403      	movs	r4, #3
 800d572:	9400      	str	r4, [sp, #0]
 800d574:	f7fc f868 	bl	8009648 <drawRoundRect>
        fillRoundRect(new_btn->x, new_btn->y, new_btn->width, new_btn->height, 3, GREEN);
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	b218      	sxth	r0, r3
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	b219      	sxth	r1, r3
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	689b      	ldr	r3, [r3, #8]
 800d588:	b21a      	sxth	r2, r3
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	68db      	ldr	r3, [r3, #12]
 800d58e:	b21b      	sxth	r3, r3
 800d590:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 800d594:	9401      	str	r4, [sp, #4]
 800d596:	2403      	movs	r4, #3
 800d598:	9400      	str	r4, [sp, #0]
 800d59a:	f7fc f922 	bl	80097e2 <fillRoundRect>
        ST7735_WriteString(new_btn->x+5, new_btn->y+4, new_btn->text, Font_7x10, BLACK, GREEN);
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	3305      	adds	r3, #5
 800d5a6:	b298      	uxth	r0, r3
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	3304      	adds	r3, #4
 800d5b0:	b299      	uxth	r1, r3
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	f103 0414 	add.w	r4, r3, #20
 800d5b8:	4b09      	ldr	r3, [pc, #36]	@ (800d5e0 <updateButtonSelection+0x1f8>)
 800d5ba:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800d5be:	9202      	str	r2, [sp, #8]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	9201      	str	r2, [sp, #4]
 800d5c4:	685a      	ldr	r2, [r3, #4]
 800d5c6:	9200      	str	r2, [sp, #0]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4622      	mov	r2, r4
 800d5cc:	f7fd fcb2 	bl	800af34 <ST7735_WriteString>
    }
}
 800d5d0:	bf00      	nop
 800d5d2:	3714      	adds	r7, #20
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd90      	pop	{r4, r7, pc}
 800d5d8:	20000f3c 	.word	0x20000f3c
 800d5dc:	20000e1c 	.word	0x20000e1c
 800d5e0:	20000024 	.word	0x20000024

0800d5e4 <updateStatusInfo>:
    snprintf(status, sizeof(status), "[%s]", is_on ? "ON" : "OFF");
    ST7735_WriteString(text_x + 70, text_y, status, Font_7x10, WHITE, GRAY);
}

void updateStatusInfo(char* status, uint16_t color)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b086      	sub	sp, #24
 800d5e8:	af04      	add	r7, sp, #16
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	807b      	strh	r3, [r7, #2]
    fillRect(MARGIN_X, TITLE_HEIGHT + 5, BUTTON_WIDTH, 12, BLACK);
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	9300      	str	r3, [sp, #0]
 800d5f4:	230c      	movs	r3, #12
 800d5f6:	228c      	movs	r2, #140	@ 0x8c
 800d5f8:	2114      	movs	r1, #20
 800d5fa:	200a      	movs	r0, #10
 800d5fc:	f7fb fd03 	bl	8009006 <fillRect>
    ST7735_WriteString(MARGIN_X + 2, TITLE_HEIGHT + 7, status, Font_7x10, color, BLACK);
 800d600:	4b08      	ldr	r3, [pc, #32]	@ (800d624 <updateStatusInfo+0x40>)
 800d602:	2200      	movs	r2, #0
 800d604:	9202      	str	r2, [sp, #8]
 800d606:	887a      	ldrh	r2, [r7, #2]
 800d608:	9201      	str	r2, [sp, #4]
 800d60a:	685a      	ldr	r2, [r3, #4]
 800d60c:	9200      	str	r2, [sp, #0]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	687a      	ldr	r2, [r7, #4]
 800d612:	2116      	movs	r1, #22
 800d614:	200c      	movs	r0, #12
 800d616:	f7fd fc8d 	bl	800af34 <ST7735_WriteString>
}
 800d61a:	bf00      	nop
 800d61c:	3708      	adds	r7, #8
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	20000024 	.word	0x20000024

0800d628 <updateDeviceCount>:

void updateDeviceCount(int total_on)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b08c      	sub	sp, #48	@ 0x30
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
    char status[35];
    if(total_on > 0)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2b00      	cmp	r3, #0
 800d634:	dd0e      	ble.n	800d654 <updateDeviceCount+0x2c>
    {
    	snprintf(status, sizeof(status), "Status: %d/4 devices", total_on);
 800d636:	f107 000c 	add.w	r0, r7, #12
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4a0e      	ldr	r2, [pc, #56]	@ (800d678 <updateDeviceCount+0x50>)
 800d63e:	2123      	movs	r1, #35	@ 0x23
 800d640:	f00a fdea 	bl	8018218 <sniprintf>
    	updateStatusInfo(status, GREEN);
 800d644:	f107 030c 	add.w	r3, r7, #12
 800d648:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7ff ffc9 	bl	800d5e4 <updateStatusInfo>
    else
    {
    	snprintf(status, sizeof(status), "Status: %d/4 devices", total_on);
		updateStatusInfo(status, RED);
    }
}
 800d652:	e00d      	b.n	800d670 <updateDeviceCount+0x48>
    	snprintf(status, sizeof(status), "Status: %d/4 devices", total_on);
 800d654:	f107 000c 	add.w	r0, r7, #12
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	4a07      	ldr	r2, [pc, #28]	@ (800d678 <updateDeviceCount+0x50>)
 800d65c:	2123      	movs	r1, #35	@ 0x23
 800d65e:	f00a fddb 	bl	8018218 <sniprintf>
		updateStatusInfo(status, RED);
 800d662:	f107 030c 	add.w	r3, r7, #12
 800d666:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7ff ffba 	bl	800d5e4 <updateStatusInfo>
}
 800d670:	bf00      	nop
 800d672:	3730      	adds	r7, #48	@ 0x30
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}
 800d678:	0801bb64 	.word	0x0801bb64

0800d67c <updateDeviceControlStatus>:

void updateDeviceControlStatus(int device, bool is_on)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b08a      	sub	sp, #40	@ 0x28
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	460b      	mov	r3, r1
 800d686:	70fb      	strb	r3, [r7, #3]
    char status[25];
    snprintf(status, sizeof(status), "Status: %s", is_on ? "ON" : "OFF");
 800d688:	78fb      	ldrb	r3, [r7, #3]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d001      	beq.n	800d692 <updateDeviceControlStatus+0x16>
 800d68e:	4b0e      	ldr	r3, [pc, #56]	@ (800d6c8 <updateDeviceControlStatus+0x4c>)
 800d690:	e000      	b.n	800d694 <updateDeviceControlStatus+0x18>
 800d692:	4b0e      	ldr	r3, [pc, #56]	@ (800d6cc <updateDeviceControlStatus+0x50>)
 800d694:	f107 000c 	add.w	r0, r7, #12
 800d698:	4a0d      	ldr	r2, [pc, #52]	@ (800d6d0 <updateDeviceControlStatus+0x54>)
 800d69a:	2119      	movs	r1, #25
 800d69c:	f00a fdbc 	bl	8018218 <sniprintf>
    uint16_t status_color = is_on ? GREEN : RED;
 800d6a0:	78fb      	ldrb	r3, [r7, #3]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d002      	beq.n	800d6ac <updateDeviceControlStatus+0x30>
 800d6a6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800d6aa:	e001      	b.n	800d6b0 <updateDeviceControlStatus+0x34>
 800d6ac:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800d6b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    updateStatusInfo(status, status_color);
 800d6b2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d6b4:	f107 030c 	add.w	r3, r7, #12
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7ff ff92 	bl	800d5e4 <updateStatusInfo>
}
 800d6c0:	bf00      	nop
 800d6c2:	3728      	adds	r7, #40	@ 0x28
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	0801bb54 	.word	0x0801bb54
 800d6cc:	0801bb58 	.word	0x0801bb58
 800d6d0:	0801bb7c 	.word	0x0801bb7c

0800d6d4 <drawTitleBar>:
        fillRoundRect(x, y, width, height, 3, GRAY);
        ST7735_WriteString(x+5, y+4, text, Font_7x10, WHITE, GRAY);
    }
}

void drawTitleBar(char* title) {
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b08a      	sub	sp, #40	@ 0x28
 800d6d8:	af04      	add	r7, sp, #16
 800d6da:	6078      	str	r0, [r7, #4]
    fillRect(0, 0, DISPLAY_WIDTH, TITLE_HEIGHT, BLUE);
 800d6dc:	231f      	movs	r3, #31
 800d6de:	9300      	str	r3, [sp, #0]
 800d6e0:	230f      	movs	r3, #15
 800d6e2:	22a0      	movs	r2, #160	@ 0xa0
 800d6e4:	2100      	movs	r1, #0
 800d6e6:	2000      	movs	r0, #0
 800d6e8:	f7fb fc8d 	bl	8009006 <fillRect>
    int title_length = strlen(title);
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f7fa fdef 	bl	80082d0 <strlen>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	613b      	str	r3, [r7, #16]
    int title_width = title_length * 7;
 800d6f6:	693a      	ldr	r2, [r7, #16]
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	00db      	lsls	r3, r3, #3
 800d6fc:	1a9b      	subs	r3, r3, r2
 800d6fe:	60fb      	str	r3, [r7, #12]
    int center_x = (DISPLAY_WIDTH - title_width) / 2;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 800d706:	0fda      	lsrs	r2, r3, #31
 800d708:	4413      	add	r3, r2
 800d70a:	105b      	asrs	r3, r3, #1
 800d70c:	617b      	str	r3, [r7, #20]

    if (center_x < 2) center_x = 2;
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	2b01      	cmp	r3, #1
 800d712:	dc01      	bgt.n	800d718 <drawTitleBar+0x44>
 800d714:	2302      	movs	r3, #2
 800d716:	617b      	str	r3, [r7, #20]

    ST7735_WriteString(center_x, 2, title, Font_7x10, WHITE, BLUE);
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	b298      	uxth	r0, r3
 800d71c:	4b0c      	ldr	r3, [pc, #48]	@ (800d750 <drawTitleBar+0x7c>)
 800d71e:	221f      	movs	r2, #31
 800d720:	9202      	str	r2, [sp, #8]
 800d722:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d726:	9201      	str	r2, [sp, #4]
 800d728:	685a      	ldr	r2, [r3, #4]
 800d72a:	9200      	str	r2, [sp, #0]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	2102      	movs	r1, #2
 800d732:	f7fd fbff 	bl	800af34 <ST7735_WriteString>

    drawLine(0, TITLE_HEIGHT, DISPLAY_WIDTH, TITLE_HEIGHT, WHITE);
 800d736:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d73a:	9300      	str	r3, [sp, #0]
 800d73c:	230f      	movs	r3, #15
 800d73e:	22a0      	movs	r2, #160	@ 0xa0
 800d740:	210f      	movs	r1, #15
 800d742:	2000      	movs	r0, #0
 800d744:	f7fb fd7c 	bl	8009240 <drawLine>
}
 800d748:	bf00      	nop
 800d74a:	3718      	adds	r7, #24
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	20000024 	.word	0x20000024

0800d754 <displayMainMenu>:
    ST7735_WriteString(MARGIN_X + 2, TITLE_HEIGHT + 7, status, Font_7x10, color, BLACK);
}


void displayMainMenu(void)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b086      	sub	sp, #24
 800d758:	af04      	add	r7, sp, #16
	if (current_menu != last_menu || !menu_drawn)
 800d75a:	4b32      	ldr	r3, [pc, #200]	@ (800d824 <displayMainMenu+0xd0>)
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	4b32      	ldr	r3, [pc, #200]	@ (800d828 <displayMainMenu+0xd4>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	429a      	cmp	r2, r3
 800d764:	d106      	bne.n	800d774 <displayMainMenu+0x20>
 800d766:	4b31      	ldr	r3, [pc, #196]	@ (800d82c <displayMainMenu+0xd8>)
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	f083 0301 	eor.w	r3, r3, #1
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	2b00      	cmp	r3, #0
 800d772:	d012      	beq.n	800d79a <displayMainMenu+0x46>
	{
		ST7735_SetRotation(1);
 800d774:	2001      	movs	r0, #1
 800d776:	f7fd faa7 	bl	800acc8 <ST7735_SetRotation>
		fillScreen(BLACK);
 800d77a:	2000      	movs	r0, #0
 800d77c:	f7fc f8aa 	bl	80098d4 <fillScreen>
		drawTitleBar("HOME MENU");
 800d780:	482b      	ldr	r0, [pc, #172]	@ (800d830 <displayMainMenu+0xdc>)
 800d782:	f7ff ffa7 	bl	800d6d4 <drawTitleBar>
		menu_drawn = true;
 800d786:	4b29      	ldr	r3, [pc, #164]	@ (800d82c <displayMainMenu+0xd8>)
 800d788:	2201      	movs	r2, #1
 800d78a:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 800d78c:	4b29      	ldr	r3, [pc, #164]	@ (800d834 <displayMainMenu+0xe0>)
 800d78e:	2200      	movs	r2, #0
 800d790:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 800d792:	4b24      	ldr	r3, [pc, #144]	@ (800d824 <displayMainMenu+0xd0>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4a24      	ldr	r2, [pc, #144]	@ (800d828 <displayMainMenu+0xd4>)
 800d798:	6013      	str	r3, [r2, #0]
	}

	if (!buttons_drawn || last_selection != current_selection)
 800d79a:	4b26      	ldr	r3, [pc, #152]	@ (800d834 <displayMainMenu+0xe0>)
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	f083 0301 	eor.w	r3, r3, #1
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d105      	bne.n	800d7b4 <displayMainMenu+0x60>
 800d7a8:	4b23      	ldr	r3, [pc, #140]	@ (800d838 <displayMainMenu+0xe4>)
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	4b23      	ldr	r3, [pc, #140]	@ (800d83c <displayMainMenu+0xe8>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d02f      	beq.n	800d814 <displayMainMenu+0xc0>
	{
		int start_y = TITLE_HEIGHT + 15;
 800d7b4:	231e      	movs	r3, #30
 800d7b6:	607b      	str	r3, [r7, #4]
		button_count = 2;
 800d7b8:	4b21      	ldr	r3, [pc, #132]	@ (800d840 <displayMainMenu+0xec>)
 800d7ba:	2202      	movs	r2, #2
 800d7bc:	601a      	str	r2, [r3, #0]

		drawSingleButton(MARGIN_X, start_y, BUTTON_WIDTH, BUTTON_HEIGHT,
 800d7be:	4b1f      	ldr	r3, [pc, #124]	@ (800d83c <displayMainMenu+0xe8>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	bf0c      	ite	eq
 800d7c6:	2301      	moveq	r3, #1
 800d7c8:	2300      	movne	r3, #0
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	9302      	str	r3, [sp, #8]
 800d7d2:	9201      	str	r2, [sp, #4]
 800d7d4:	4b1b      	ldr	r3, [pc, #108]	@ (800d844 <displayMainMenu+0xf0>)
 800d7d6:	9300      	str	r3, [sp, #0]
 800d7d8:	2312      	movs	r3, #18
 800d7da:	228c      	movs	r2, #140	@ 0x8c
 800d7dc:	6879      	ldr	r1, [r7, #4]
 800d7de:	200a      	movs	r0, #10
 800d7e0:	f7ff fd0e 	bl	800d200 <drawSingleButton>
						"MASTER CONTROL", (current_selection == 0), 0);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT,
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f103 0116 	add.w	r1, r3, #22
 800d7ea:	4b14      	ldr	r3, [pc, #80]	@ (800d83c <displayMainMenu+0xe8>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	bf0c      	ite	eq
 800d7f2:	2301      	moveq	r3, #1
 800d7f4:	2300      	movne	r3, #0
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	9302      	str	r3, [sp, #8]
 800d7fe:	9201      	str	r2, [sp, #4]
 800d800:	4b11      	ldr	r3, [pc, #68]	@ (800d848 <displayMainMenu+0xf4>)
 800d802:	9300      	str	r3, [sp, #0]
 800d804:	2312      	movs	r3, #18
 800d806:	228c      	movs	r2, #140	@ 0x8c
 800d808:	200a      	movs	r0, #10
 800d80a:	f7ff fcf9 	bl	800d200 <drawSingleButton>
						"DEVICE LIST", (current_selection == 1), 1);

		buttons_drawn = true;
 800d80e:	4b09      	ldr	r3, [pc, #36]	@ (800d834 <displayMainMenu+0xe0>)
 800d810:	2201      	movs	r2, #1
 800d812:	701a      	strb	r2, [r3, #0]
	}

	last_selection = current_selection;
 800d814:	4b09      	ldr	r3, [pc, #36]	@ (800d83c <displayMainMenu+0xe8>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4a07      	ldr	r2, [pc, #28]	@ (800d838 <displayMainMenu+0xe4>)
 800d81a:	6013      	str	r3, [r2, #0]
}
 800d81c:	bf00      	nop
 800d81e:	3708      	adds	r7, #8
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	20000df0 	.word	0x20000df0
 800d828:	20000010 	.word	0x20000010
 800d82c:	20000e18 	.word	0x20000e18
 800d830:	0801bb88 	.word	0x0801bb88
 800d834:	20000e19 	.word	0x20000e19
 800d838:	2000000c 	.word	0x2000000c
 800d83c:	20000df4 	.word	0x20000df4
 800d840:	20000f3c 	.word	0x20000f3c
 800d844:	0801bb94 	.word	0x0801bb94
 800d848:	0801bba4 	.word	0x0801bba4

0800d84c <displayTotalControlMenu>:

void displayTotalControlMenu(void)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b08a      	sub	sp, #40	@ 0x28
 800d850:	af04      	add	r7, sp, #16
	bool states_changed = false;
 800d852:	2300      	movs	r3, #0
 800d854:	75fb      	strb	r3, [r7, #23]
	syncDisplayDeviceStates();
 800d856:	f000 fc9b 	bl	800e190 <syncDisplayDeviceStates>

	for (int i = 0; i < 4; i++)
 800d85a:	2300      	movs	r3, #0
 800d85c:	613b      	str	r3, [r7, #16]
 800d85e:	e016      	b.n	800d88e <displayTotalControlMenu+0x42>
	{
		if (device_states[i] != last_device_states[i])
 800d860:	4a5c      	ldr	r2, [pc, #368]	@ (800d9d4 <displayTotalControlMenu+0x188>)
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d868:	495b      	ldr	r1, [pc, #364]	@ (800d9d8 <displayTotalControlMenu+0x18c>)
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d870:	429a      	cmp	r2, r3
 800d872:	d009      	beq.n	800d888 <displayTotalControlMenu+0x3c>
		{
			states_changed = true;
 800d874:	2301      	movs	r3, #1
 800d876:	75fb      	strb	r3, [r7, #23]
			last_device_states[i] = device_states[i];
 800d878:	4a56      	ldr	r2, [pc, #344]	@ (800d9d4 <displayTotalControlMenu+0x188>)
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d880:	4955      	ldr	r1, [pc, #340]	@ (800d9d8 <displayTotalControlMenu+0x18c>)
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++)
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	3301      	adds	r3, #1
 800d88c:	613b      	str	r3, [r7, #16]
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	2b03      	cmp	r3, #3
 800d892:	dde5      	ble.n	800d860 <displayTotalControlMenu+0x14>
		}
	}

	if (current_menu != last_menu || !menu_drawn)
 800d894:	4b51      	ldr	r3, [pc, #324]	@ (800d9dc <displayTotalControlMenu+0x190>)
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	4b51      	ldr	r3, [pc, #324]	@ (800d9e0 <displayTotalControlMenu+0x194>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d106      	bne.n	800d8ae <displayTotalControlMenu+0x62>
 800d8a0:	4b50      	ldr	r3, [pc, #320]	@ (800d9e4 <displayTotalControlMenu+0x198>)
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	f083 0301 	eor.w	r3, r3, #1
 800d8a8:	b2db      	uxtb	r3, r3
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d014      	beq.n	800d8d8 <displayTotalControlMenu+0x8c>
	{
		ST7735_SetRotation(1);
 800d8ae:	2001      	movs	r0, #1
 800d8b0:	f7fd fa0a 	bl	800acc8 <ST7735_SetRotation>
		fillScreen(BLACK);
 800d8b4:	2000      	movs	r0, #0
 800d8b6:	f7fc f80d 	bl	80098d4 <fillScreen>
		drawTitleBar("MASTER CONTROL");
 800d8ba:	484b      	ldr	r0, [pc, #300]	@ (800d9e8 <displayTotalControlMenu+0x19c>)
 800d8bc:	f7ff ff0a 	bl	800d6d4 <drawTitleBar>
		menu_drawn = true;
 800d8c0:	4b48      	ldr	r3, [pc, #288]	@ (800d9e4 <displayTotalControlMenu+0x198>)
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 800d8c6:	4b49      	ldr	r3, [pc, #292]	@ (800d9ec <displayTotalControlMenu+0x1a0>)
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 800d8cc:	4b43      	ldr	r3, [pc, #268]	@ (800d9dc <displayTotalControlMenu+0x190>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4a43      	ldr	r2, [pc, #268]	@ (800d9e0 <displayTotalControlMenu+0x194>)
 800d8d2:	6013      	str	r3, [r2, #0]
		states_changed = true;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	75fb      	strb	r3, [r7, #23]
	}

	if (states_changed)
 800d8d8:	7dfb      	ldrb	r3, [r7, #23]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d016      	beq.n	800d90c <displayTotalControlMenu+0xc0>
	{
		int total_on = 0;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < 4; i++)
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	60bb      	str	r3, [r7, #8]
 800d8e6:	e00b      	b.n	800d900 <displayTotalControlMenu+0xb4>
		{
			if (device_states[i]) total_on++;
 800d8e8:	4a3a      	ldr	r2, [pc, #232]	@ (800d9d4 <displayTotalControlMenu+0x188>)
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d002      	beq.n	800d8fa <displayTotalControlMenu+0xae>
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < 4; i++)
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	60bb      	str	r3, [r7, #8]
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	2b03      	cmp	r3, #3
 800d904:	ddf0      	ble.n	800d8e8 <displayTotalControlMenu+0x9c>
		}
		updateDeviceCount(total_on);
 800d906:	68f8      	ldr	r0, [r7, #12]
 800d908:	f7ff fe8e 	bl	800d628 <updateDeviceCount>
	}

	if (!buttons_drawn)
 800d90c:	4b37      	ldr	r3, [pc, #220]	@ (800d9ec <displayTotalControlMenu+0x1a0>)
 800d90e:	781b      	ldrb	r3, [r3, #0]
 800d910:	f083 0301 	eor.w	r3, r3, #1
 800d914:	b2db      	uxtb	r3, r3
 800d916:	2b00      	cmp	r3, #0
 800d918:	d045      	beq.n	800d9a6 <displayTotalControlMenu+0x15a>
	{
		int start_y = TITLE_HEIGHT + 25;
 800d91a:	2328      	movs	r3, #40	@ 0x28
 800d91c:	607b      	str	r3, [r7, #4]
		button_count = 3;
 800d91e:	4b34      	ldr	r3, [pc, #208]	@ (800d9f0 <displayTotalControlMenu+0x1a4>)
 800d920:	2203      	movs	r2, #3
 800d922:	601a      	str	r2, [r3, #0]

		drawSingleButton(MARGIN_X, start_y, BUTTON_WIDTH, BUTTON_HEIGHT,
 800d924:	4b33      	ldr	r3, [pc, #204]	@ (800d9f4 <displayTotalControlMenu+0x1a8>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	bf0c      	ite	eq
 800d92c:	2301      	moveq	r3, #1
 800d92e:	2300      	movne	r3, #0
 800d930:	b2db      	uxtb	r3, r3
 800d932:	461a      	mov	r2, r3
 800d934:	2300      	movs	r3, #0
 800d936:	9302      	str	r3, [sp, #8]
 800d938:	9201      	str	r2, [sp, #4]
 800d93a:	4b2f      	ldr	r3, [pc, #188]	@ (800d9f8 <displayTotalControlMenu+0x1ac>)
 800d93c:	9300      	str	r3, [sp, #0]
 800d93e:	2312      	movs	r3, #18
 800d940:	228c      	movs	r2, #140	@ 0x8c
 800d942:	6879      	ldr	r1, [r7, #4]
 800d944:	200a      	movs	r0, #10
 800d946:	f7ff fc5b 	bl	800d200 <drawSingleButton>
						"TOTAL ON", (current_selection == 0), 0);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT,
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f103 0116 	add.w	r1, r3, #22
 800d950:	4b28      	ldr	r3, [pc, #160]	@ (800d9f4 <displayTotalControlMenu+0x1a8>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2b01      	cmp	r3, #1
 800d956:	bf0c      	ite	eq
 800d958:	2301      	moveq	r3, #1
 800d95a:	2300      	movne	r3, #0
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	461a      	mov	r2, r3
 800d960:	2301      	movs	r3, #1
 800d962:	9302      	str	r3, [sp, #8]
 800d964:	9201      	str	r2, [sp, #4]
 800d966:	4b25      	ldr	r3, [pc, #148]	@ (800d9fc <displayTotalControlMenu+0x1b0>)
 800d968:	9300      	str	r3, [sp, #0]
 800d96a:	2312      	movs	r3, #18
 800d96c:	228c      	movs	r2, #140	@ 0x8c
 800d96e:	200a      	movs	r0, #10
 800d970:	f7ff fc46 	bl	800d200 <drawSingleButton>
						"TOTAL OFF", (current_selection == 1), 1);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING*2, BUTTON_WIDTH, BUTTON_HEIGHT,
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 800d97a:	4b1e      	ldr	r3, [pc, #120]	@ (800d9f4 <displayTotalControlMenu+0x1a8>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b02      	cmp	r3, #2
 800d980:	bf0c      	ite	eq
 800d982:	2301      	moveq	r3, #1
 800d984:	2300      	movne	r3, #0
 800d986:	b2db      	uxtb	r3, r3
 800d988:	461a      	mov	r2, r3
 800d98a:	2302      	movs	r3, #2
 800d98c:	9302      	str	r3, [sp, #8]
 800d98e:	9201      	str	r2, [sp, #4]
 800d990:	4b1b      	ldr	r3, [pc, #108]	@ (800da00 <displayTotalControlMenu+0x1b4>)
 800d992:	9300      	str	r3, [sp, #0]
 800d994:	2312      	movs	r3, #18
 800d996:	228c      	movs	r2, #140	@ 0x8c
 800d998:	200a      	movs	r0, #10
 800d99a:	f7ff fc31 	bl	800d200 <drawSingleButton>
						"GO BACK", (current_selection == 2), 2);

		buttons_drawn = true;
 800d99e:	4b13      	ldr	r3, [pc, #76]	@ (800d9ec <displayTotalControlMenu+0x1a0>)
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	701a      	strb	r2, [r3, #0]
 800d9a4:	e00d      	b.n	800d9c2 <displayTotalControlMenu+0x176>
	}
	else if (last_selection != current_selection)
 800d9a6:	4b17      	ldr	r3, [pc, #92]	@ (800da04 <displayTotalControlMenu+0x1b8>)
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	4b12      	ldr	r3, [pc, #72]	@ (800d9f4 <displayTotalControlMenu+0x1a8>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d007      	beq.n	800d9c2 <displayTotalControlMenu+0x176>
	{
		updateButtonSelection(last_selection, current_selection);
 800d9b2:	4b14      	ldr	r3, [pc, #80]	@ (800da04 <displayTotalControlMenu+0x1b8>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	4a0f      	ldr	r2, [pc, #60]	@ (800d9f4 <displayTotalControlMenu+0x1a8>)
 800d9b8:	6812      	ldr	r2, [r2, #0]
 800d9ba:	4611      	mov	r1, r2
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7ff fd13 	bl	800d3e8 <updateButtonSelection>
	}

	last_selection = current_selection;
 800d9c2:	4b0c      	ldr	r3, [pc, #48]	@ (800d9f4 <displayTotalControlMenu+0x1a8>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4a0f      	ldr	r2, [pc, #60]	@ (800da04 <displayTotalControlMenu+0x1b8>)
 800d9c8:	6013      	str	r3, [r2, #0]
}
 800d9ca:	bf00      	nop
 800d9cc:	3718      	adds	r7, #24
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	20000e08 	.word	0x20000e08
 800d9d8:	20000014 	.word	0x20000014
 800d9dc:	20000df0 	.word	0x20000df0
 800d9e0:	20000010 	.word	0x20000010
 800d9e4:	20000e18 	.word	0x20000e18
 800d9e8:	0801bb94 	.word	0x0801bb94
 800d9ec:	20000e19 	.word	0x20000e19
 800d9f0:	20000f3c 	.word	0x20000f3c
 800d9f4:	20000df4 	.word	0x20000df4
 800d9f8:	0801bbb0 	.word	0x0801bbb0
 800d9fc:	0801bbbc 	.word	0x0801bbbc
 800da00:	0801bbc8 	.word	0x0801bbc8
 800da04:	2000000c 	.word	0x2000000c

0800da08 <displaySeparateControlMenu>:

void displaySeparateControlMenu(void)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b08e      	sub	sp, #56	@ 0x38
 800da0c:	af04      	add	r7, sp, #16
	bool states_changed = false;
 800da0e:	2300      	movs	r3, #0
 800da10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	syncDisplayDeviceStates();
 800da14:	f000 fbbc 	bl	800e190 <syncDisplayDeviceStates>

	for (int i = 0; i < 4; i++) {
 800da18:	2300      	movs	r3, #0
 800da1a:	623b      	str	r3, [r7, #32]
 800da1c:	e017      	b.n	800da4e <displaySeparateControlMenu+0x46>
		if (device_states[i] != last_device_states[i]) {
 800da1e:	4a59      	ldr	r2, [pc, #356]	@ (800db84 <displaySeparateControlMenu+0x17c>)
 800da20:	6a3b      	ldr	r3, [r7, #32]
 800da22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800da26:	4958      	ldr	r1, [pc, #352]	@ (800db88 <displaySeparateControlMenu+0x180>)
 800da28:	6a3b      	ldr	r3, [r7, #32]
 800da2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d00a      	beq.n	800da48 <displaySeparateControlMenu+0x40>
			states_changed = true;
 800da32:	2301      	movs	r3, #1
 800da34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			last_device_states[i] = device_states[i];
 800da38:	4a52      	ldr	r2, [pc, #328]	@ (800db84 <displaySeparateControlMenu+0x17c>)
 800da3a:	6a3b      	ldr	r3, [r7, #32]
 800da3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800da40:	4951      	ldr	r1, [pc, #324]	@ (800db88 <displaySeparateControlMenu+0x180>)
 800da42:	6a3b      	ldr	r3, [r7, #32]
 800da44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 800da48:	6a3b      	ldr	r3, [r7, #32]
 800da4a:	3301      	adds	r3, #1
 800da4c:	623b      	str	r3, [r7, #32]
 800da4e:	6a3b      	ldr	r3, [r7, #32]
 800da50:	2b03      	cmp	r3, #3
 800da52:	dde4      	ble.n	800da1e <displaySeparateControlMenu+0x16>
		}
	}

	if (current_menu != last_menu || !menu_drawn) {
 800da54:	4b4d      	ldr	r3, [pc, #308]	@ (800db8c <displaySeparateControlMenu+0x184>)
 800da56:	681a      	ldr	r2, [r3, #0]
 800da58:	4b4d      	ldr	r3, [pc, #308]	@ (800db90 <displaySeparateControlMenu+0x188>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d106      	bne.n	800da6e <displaySeparateControlMenu+0x66>
 800da60:	4b4c      	ldr	r3, [pc, #304]	@ (800db94 <displaySeparateControlMenu+0x18c>)
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	f083 0301 	eor.w	r3, r3, #1
 800da68:	b2db      	uxtb	r3, r3
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d015      	beq.n	800da9a <displaySeparateControlMenu+0x92>
		ST7735_SetRotation(1);
 800da6e:	2001      	movs	r0, #1
 800da70:	f7fd f92a 	bl	800acc8 <ST7735_SetRotation>
		fillScreen(BLACK);
 800da74:	2000      	movs	r0, #0
 800da76:	f7fb ff2d 	bl	80098d4 <fillScreen>
		drawTitleBar("DEVICE LIST");
 800da7a:	4847      	ldr	r0, [pc, #284]	@ (800db98 <displaySeparateControlMenu+0x190>)
 800da7c:	f7ff fe2a 	bl	800d6d4 <drawTitleBar>
		menu_drawn = true;
 800da80:	4b44      	ldr	r3, [pc, #272]	@ (800db94 <displaySeparateControlMenu+0x18c>)
 800da82:	2201      	movs	r2, #1
 800da84:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 800da86:	4b45      	ldr	r3, [pc, #276]	@ (800db9c <displaySeparateControlMenu+0x194>)
 800da88:	2200      	movs	r2, #0
 800da8a:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 800da8c:	4b3f      	ldr	r3, [pc, #252]	@ (800db8c <displaySeparateControlMenu+0x184>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	4a3f      	ldr	r2, [pc, #252]	@ (800db90 <displaySeparateControlMenu+0x188>)
 800da92:	6013      	str	r3, [r2, #0]
		states_changed = true;
 800da94:	2301      	movs	r3, #1
 800da96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	if (!buttons_drawn || states_changed) {
 800da9a:	4b40      	ldr	r3, [pc, #256]	@ (800db9c <displaySeparateControlMenu+0x194>)
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	f083 0301 	eor.w	r3, r3, #1
 800daa2:	b2db      	uxtb	r3, r3
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d103      	bne.n	800dab0 <displaySeparateControlMenu+0xa8>
 800daa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800daac:	2b00      	cmp	r3, #0
 800daae:	d053      	beq.n	800db58 <displaySeparateControlMenu+0x150>
		int start_y = TITLE_HEIGHT + 10;
 800dab0:	2319      	movs	r3, #25
 800dab2:	61bb      	str	r3, [r7, #24]
		button_count = 5;
 800dab4:	4b3a      	ldr	r3, [pc, #232]	@ (800dba0 <displaySeparateControlMenu+0x198>)
 800dab6:	2205      	movs	r2, #5
 800dab8:	601a      	str	r2, [r3, #0]

		for (int i = 0; i < 4; i++)
 800daba:	2300      	movs	r3, #0
 800dabc:	61fb      	str	r3, [r7, #28]
 800dabe:	e02f      	b.n	800db20 <displaySeparateControlMenu+0x118>
		{
			char device_text[20];
			snprintf(device_text, sizeof(device_text), "DEVICE %d [%s]",
 800dac0:	69fb      	ldr	r3, [r7, #28]
 800dac2:	1c5a      	adds	r2, r3, #1
					i + 1, device_states[i] ? "ON" : "OFF");
 800dac4:	492f      	ldr	r1, [pc, #188]	@ (800db84 <displaySeparateControlMenu+0x17c>)
 800dac6:	69fb      	ldr	r3, [r7, #28]
 800dac8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			snprintf(device_text, sizeof(device_text), "DEVICE %d [%s]",
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d001      	beq.n	800dad4 <displaySeparateControlMenu+0xcc>
 800dad0:	4b34      	ldr	r3, [pc, #208]	@ (800dba4 <displaySeparateControlMenu+0x19c>)
 800dad2:	e000      	b.n	800dad6 <displaySeparateControlMenu+0xce>
 800dad4:	4b34      	ldr	r3, [pc, #208]	@ (800dba8 <displaySeparateControlMenu+0x1a0>)
 800dad6:	1d38      	adds	r0, r7, #4
 800dad8:	9300      	str	r3, [sp, #0]
 800dada:	4613      	mov	r3, r2
 800dadc:	4a33      	ldr	r2, [pc, #204]	@ (800dbac <displaySeparateControlMenu+0x1a4>)
 800dade:	2114      	movs	r1, #20
 800dae0:	f00a fb9a 	bl	8018218 <sniprintf>
			drawSingleButton(MARGIN_X, start_y + i * 20, BUTTON_WIDTH, 16,
 800dae4:	69fa      	ldr	r2, [r7, #28]
 800dae6:	4613      	mov	r3, r2
 800dae8:	009b      	lsls	r3, r3, #2
 800daea:	4413      	add	r3, r2
 800daec:	009b      	lsls	r3, r3, #2
 800daee:	461a      	mov	r2, r3
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	18d1      	adds	r1, r2, r3
 800daf4:	4b2e      	ldr	r3, [pc, #184]	@ (800dbb0 <displaySeparateControlMenu+0x1a8>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	69fa      	ldr	r2, [r7, #28]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	bf0c      	ite	eq
 800dafe:	2301      	moveq	r3, #1
 800db00:	2300      	movne	r3, #0
 800db02:	b2db      	uxtb	r3, r3
 800db04:	461a      	mov	r2, r3
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	9302      	str	r3, [sp, #8]
 800db0a:	9201      	str	r2, [sp, #4]
 800db0c:	1d3b      	adds	r3, r7, #4
 800db0e:	9300      	str	r3, [sp, #0]
 800db10:	2310      	movs	r3, #16
 800db12:	228c      	movs	r2, #140	@ 0x8c
 800db14:	200a      	movs	r0, #10
 800db16:	f7ff fb73 	bl	800d200 <drawSingleButton>
		for (int i = 0; i < 4; i++)
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	3301      	adds	r3, #1
 800db1e:	61fb      	str	r3, [r7, #28]
 800db20:	69fb      	ldr	r3, [r7, #28]
 800db22:	2b03      	cmp	r3, #3
 800db24:	ddcc      	ble.n	800dac0 <displaySeparateControlMenu+0xb8>
						   device_text, (current_selection == i), i);
		}

		drawSingleButton(MARGIN_X, start_y + 4 * 20, BUTTON_WIDTH, 16,
 800db26:	69bb      	ldr	r3, [r7, #24]
 800db28:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800db2c:	4b20      	ldr	r3, [pc, #128]	@ (800dbb0 <displaySeparateControlMenu+0x1a8>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	2b04      	cmp	r3, #4
 800db32:	bf0c      	ite	eq
 800db34:	2301      	moveq	r3, #1
 800db36:	2300      	movne	r3, #0
 800db38:	b2db      	uxtb	r3, r3
 800db3a:	461a      	mov	r2, r3
 800db3c:	2304      	movs	r3, #4
 800db3e:	9302      	str	r3, [sp, #8]
 800db40:	9201      	str	r2, [sp, #4]
 800db42:	4b1c      	ldr	r3, [pc, #112]	@ (800dbb4 <displaySeparateControlMenu+0x1ac>)
 800db44:	9300      	str	r3, [sp, #0]
 800db46:	2310      	movs	r3, #16
 800db48:	228c      	movs	r2, #140	@ 0x8c
 800db4a:	200a      	movs	r0, #10
 800db4c:	f7ff fb58 	bl	800d200 <drawSingleButton>
					   "GO BACK", (current_selection == 4), 4);

		buttons_drawn = true;
 800db50:	4b12      	ldr	r3, [pc, #72]	@ (800db9c <displaySeparateControlMenu+0x194>)
 800db52:	2201      	movs	r2, #1
 800db54:	701a      	strb	r2, [r3, #0]
	if (!buttons_drawn || states_changed) {
 800db56:	e00d      	b.n	800db74 <displaySeparateControlMenu+0x16c>
	} else if (last_selection != current_selection) {
 800db58:	4b17      	ldr	r3, [pc, #92]	@ (800dbb8 <displaySeparateControlMenu+0x1b0>)
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	4b14      	ldr	r3, [pc, #80]	@ (800dbb0 <displaySeparateControlMenu+0x1a8>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	429a      	cmp	r2, r3
 800db62:	d007      	beq.n	800db74 <displaySeparateControlMenu+0x16c>
		updateButtonSelection(last_selection, current_selection);
 800db64:	4b14      	ldr	r3, [pc, #80]	@ (800dbb8 <displaySeparateControlMenu+0x1b0>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4a11      	ldr	r2, [pc, #68]	@ (800dbb0 <displaySeparateControlMenu+0x1a8>)
 800db6a:	6812      	ldr	r2, [r2, #0]
 800db6c:	4611      	mov	r1, r2
 800db6e:	4618      	mov	r0, r3
 800db70:	f7ff fc3a 	bl	800d3e8 <updateButtonSelection>
	}

	last_selection = current_selection;
 800db74:	4b0e      	ldr	r3, [pc, #56]	@ (800dbb0 <displaySeparateControlMenu+0x1a8>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a0f      	ldr	r2, [pc, #60]	@ (800dbb8 <displaySeparateControlMenu+0x1b0>)
 800db7a:	6013      	str	r3, [r2, #0]
}
 800db7c:	bf00      	nop
 800db7e:	3728      	adds	r7, #40	@ 0x28
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	20000e08 	.word	0x20000e08
 800db88:	20000014 	.word	0x20000014
 800db8c:	20000df0 	.word	0x20000df0
 800db90:	20000010 	.word	0x20000010
 800db94:	20000e18 	.word	0x20000e18
 800db98:	0801bba4 	.word	0x0801bba4
 800db9c:	20000e19 	.word	0x20000e19
 800dba0:	20000f3c 	.word	0x20000f3c
 800dba4:	0801bb54 	.word	0x0801bb54
 800dba8:	0801bb58 	.word	0x0801bb58
 800dbac:	0801bbd0 	.word	0x0801bbd0
 800dbb0:	20000df4 	.word	0x20000df4
 800dbb4:	0801bbc8 	.word	0x0801bbc8
 800dbb8:	2000000c 	.word	0x2000000c

0800dbbc <displayDeviceControlMenu>:

void displayDeviceControlMenu(void) {
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b08e      	sub	sp, #56	@ 0x38
 800dbc0:	af04      	add	r7, sp, #16
	bool state_changed = false;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	syncDisplayDeviceStates();
 800dbc8:	f000 fae2 	bl	800e190 <syncDisplayDeviceStates>

	if (device_states[current_device] != last_device_states[current_device]) {
 800dbcc:	4b68      	ldr	r3, [pc, #416]	@ (800dd70 <displayDeviceControlMenu+0x1b4>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4a68      	ldr	r2, [pc, #416]	@ (800dd74 <displayDeviceControlMenu+0x1b8>)
 800dbd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dbd6:	4b66      	ldr	r3, [pc, #408]	@ (800dd70 <displayDeviceControlMenu+0x1b4>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4967      	ldr	r1, [pc, #412]	@ (800dd78 <displayDeviceControlMenu+0x1bc>)
 800dbdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d00c      	beq.n	800dbfe <displayDeviceControlMenu+0x42>
		state_changed = true;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		last_device_states[current_device] = device_states[current_device];
 800dbea:	4b61      	ldr	r3, [pc, #388]	@ (800dd70 <displayDeviceControlMenu+0x1b4>)
 800dbec:	681a      	ldr	r2, [r3, #0]
 800dbee:	4b60      	ldr	r3, [pc, #384]	@ (800dd70 <displayDeviceControlMenu+0x1b4>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	4960      	ldr	r1, [pc, #384]	@ (800dd74 <displayDeviceControlMenu+0x1b8>)
 800dbf4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800dbf8:	495f      	ldr	r1, [pc, #380]	@ (800dd78 <displayDeviceControlMenu+0x1bc>)
 800dbfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (current_menu != last_menu || !menu_drawn) {
 800dbfe:	4b5f      	ldr	r3, [pc, #380]	@ (800dd7c <displayDeviceControlMenu+0x1c0>)
 800dc00:	681a      	ldr	r2, [r3, #0]
 800dc02:	4b5f      	ldr	r3, [pc, #380]	@ (800dd80 <displayDeviceControlMenu+0x1c4>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d106      	bne.n	800dc18 <displayDeviceControlMenu+0x5c>
 800dc0a:	4b5e      	ldr	r3, [pc, #376]	@ (800dd84 <displayDeviceControlMenu+0x1c8>)
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	f083 0301 	eor.w	r3, r3, #1
 800dc12:	b2db      	uxtb	r3, r3
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d01e      	beq.n	800dc56 <displayDeviceControlMenu+0x9a>
		ST7735_SetRotation(1);
 800dc18:	2001      	movs	r0, #1
 800dc1a:	f7fd f855 	bl	800acc8 <ST7735_SetRotation>
		fillScreen(BLACK);
 800dc1e:	2000      	movs	r0, #0
 800dc20:	f7fb fe58 	bl	80098d4 <fillScreen>

		char title[30];
		snprintf(title, sizeof(title), "DEVICE %d CONTROL", current_device + 1);
 800dc24:	4b52      	ldr	r3, [pc, #328]	@ (800dd70 <displayDeviceControlMenu+0x1b4>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	4638      	mov	r0, r7
 800dc2c:	4a56      	ldr	r2, [pc, #344]	@ (800dd88 <displayDeviceControlMenu+0x1cc>)
 800dc2e:	211e      	movs	r1, #30
 800dc30:	f00a faf2 	bl	8018218 <sniprintf>
		drawTitleBar(title);
 800dc34:	463b      	mov	r3, r7
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7ff fd4c 	bl	800d6d4 <drawTitleBar>

		menu_drawn = true;
 800dc3c:	4b51      	ldr	r3, [pc, #324]	@ (800dd84 <displayDeviceControlMenu+0x1c8>)
 800dc3e:	2201      	movs	r2, #1
 800dc40:	701a      	strb	r2, [r3, #0]
		buttons_drawn = false;
 800dc42:	4b52      	ldr	r3, [pc, #328]	@ (800dd8c <displayDeviceControlMenu+0x1d0>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	701a      	strb	r2, [r3, #0]
		last_menu = current_menu;
 800dc48:	4b4c      	ldr	r3, [pc, #304]	@ (800dd7c <displayDeviceControlMenu+0x1c0>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a4c      	ldr	r2, [pc, #304]	@ (800dd80 <displayDeviceControlMenu+0x1c4>)
 800dc4e:	6013      	str	r3, [r2, #0]
		state_changed = true;
 800dc50:	2301      	movs	r3, #1
 800dc52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	if (state_changed) {
 800dc56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d00f      	beq.n	800dc7e <displayDeviceControlMenu+0xc2>
		updateDeviceControlStatus(current_device, device_states[current_device]);
 800dc5e:	4b44      	ldr	r3, [pc, #272]	@ (800dd70 <displayDeviceControlMenu+0x1b4>)
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	4b43      	ldr	r3, [pc, #268]	@ (800dd70 <displayDeviceControlMenu+0x1b4>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4943      	ldr	r1, [pc, #268]	@ (800dd74 <displayDeviceControlMenu+0x1b8>)
 800dc68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	bf14      	ite	ne
 800dc70:	2301      	movne	r3, #1
 800dc72:	2300      	moveq	r3, #0
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	4619      	mov	r1, r3
 800dc78:	4610      	mov	r0, r2
 800dc7a:	f7ff fcff 	bl	800d67c <updateDeviceControlStatus>
	}

	if (!buttons_drawn) {
 800dc7e:	4b43      	ldr	r3, [pc, #268]	@ (800dd8c <displayDeviceControlMenu+0x1d0>)
 800dc80:	781b      	ldrb	r3, [r3, #0]
 800dc82:	f083 0301 	eor.w	r3, r3, #1
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d05a      	beq.n	800dd42 <displayDeviceControlMenu+0x186>
		int start_y = TITLE_HEIGHT + 25;
 800dc8c:	2328      	movs	r3, #40	@ 0x28
 800dc8e:	623b      	str	r3, [r7, #32]
		button_count = 4;
 800dc90:	4b3f      	ldr	r3, [pc, #252]	@ (800dd90 <displayDeviceControlMenu+0x1d4>)
 800dc92:	2204      	movs	r2, #4
 800dc94:	601a      	str	r2, [r3, #0]

		drawSingleButton(MARGIN_X, start_y, BUTTON_WIDTH, BUTTON_HEIGHT,
 800dc96:	4b3f      	ldr	r3, [pc, #252]	@ (800dd94 <displayDeviceControlMenu+0x1d8>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	bf0c      	ite	eq
 800dc9e:	2301      	moveq	r3, #1
 800dca0:	2300      	movne	r3, #0
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	461a      	mov	r2, r3
 800dca6:	2300      	movs	r3, #0
 800dca8:	9302      	str	r3, [sp, #8]
 800dcaa:	9201      	str	r2, [sp, #4]
 800dcac:	4b3a      	ldr	r3, [pc, #232]	@ (800dd98 <displayDeviceControlMenu+0x1dc>)
 800dcae:	9300      	str	r3, [sp, #0]
 800dcb0:	2312      	movs	r3, #18
 800dcb2:	228c      	movs	r2, #140	@ 0x8c
 800dcb4:	6a39      	ldr	r1, [r7, #32]
 800dcb6:	200a      	movs	r0, #10
 800dcb8:	f7ff faa2 	bl	800d200 <drawSingleButton>
						"TURN ON", (current_selection == 0), 0);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING, BUTTON_WIDTH, BUTTON_HEIGHT,
 800dcbc:	6a3b      	ldr	r3, [r7, #32]
 800dcbe:	f103 0116 	add.w	r1, r3, #22
 800dcc2:	4b34      	ldr	r3, [pc, #208]	@ (800dd94 <displayDeviceControlMenu+0x1d8>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	bf0c      	ite	eq
 800dcca:	2301      	moveq	r3, #1
 800dccc:	2300      	movne	r3, #0
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	9302      	str	r3, [sp, #8]
 800dcd6:	9201      	str	r2, [sp, #4]
 800dcd8:	4b30      	ldr	r3, [pc, #192]	@ (800dd9c <displayDeviceControlMenu+0x1e0>)
 800dcda:	9300      	str	r3, [sp, #0]
 800dcdc:	2312      	movs	r3, #18
 800dcde:	228c      	movs	r2, #140	@ 0x8c
 800dce0:	200a      	movs	r0, #10
 800dce2:	f7ff fa8d 	bl	800d200 <drawSingleButton>
						"TURN OFF", (current_selection == 1), 1);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING*2, BUTTON_WIDTH, BUTTON_HEIGHT,
 800dce6:	6a3b      	ldr	r3, [r7, #32]
 800dce8:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 800dcec:	4b29      	ldr	r3, [pc, #164]	@ (800dd94 <displayDeviceControlMenu+0x1d8>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	2b02      	cmp	r3, #2
 800dcf2:	bf0c      	ite	eq
 800dcf4:	2301      	moveq	r3, #1
 800dcf6:	2300      	movne	r3, #0
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	2302      	movs	r3, #2
 800dcfe:	9302      	str	r3, [sp, #8]
 800dd00:	9201      	str	r2, [sp, #4]
 800dd02:	4b27      	ldr	r3, [pc, #156]	@ (800dda0 <displayDeviceControlMenu+0x1e4>)
 800dd04:	9300      	str	r3, [sp, #0]
 800dd06:	2312      	movs	r3, #18
 800dd08:	228c      	movs	r2, #140	@ 0x8c
 800dd0a:	200a      	movs	r0, #10
 800dd0c:	f7ff fa78 	bl	800d200 <drawSingleButton>
						"GO BACK", (current_selection == 2), 2);
		drawSingleButton(MARGIN_X, start_y + BUTTON_SPACING*3, BUTTON_WIDTH, BUTTON_HEIGHT,
 800dd10:	6a3b      	ldr	r3, [r7, #32]
 800dd12:	f103 0142 	add.w	r1, r3, #66	@ 0x42
 800dd16:	4b1f      	ldr	r3, [pc, #124]	@ (800dd94 <displayDeviceControlMenu+0x1d8>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2b03      	cmp	r3, #3
 800dd1c:	bf0c      	ite	eq
 800dd1e:	2301      	moveq	r3, #1
 800dd20:	2300      	movne	r3, #0
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	461a      	mov	r2, r3
 800dd26:	2303      	movs	r3, #3
 800dd28:	9302      	str	r3, [sp, #8]
 800dd2a:	9201      	str	r2, [sp, #4]
 800dd2c:	4b1d      	ldr	r3, [pc, #116]	@ (800dda4 <displayDeviceControlMenu+0x1e8>)
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	2312      	movs	r3, #18
 800dd32:	228c      	movs	r2, #140	@ 0x8c
 800dd34:	200a      	movs	r0, #10
 800dd36:	f7ff fa63 	bl	800d200 <drawSingleButton>
						"GO TO HOME", (current_selection == 3), 3);

		buttons_drawn = true;
 800dd3a:	4b14      	ldr	r3, [pc, #80]	@ (800dd8c <displayDeviceControlMenu+0x1d0>)
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	701a      	strb	r2, [r3, #0]
 800dd40:	e00d      	b.n	800dd5e <displayDeviceControlMenu+0x1a2>
	} else if (last_selection != current_selection) {
 800dd42:	4b19      	ldr	r3, [pc, #100]	@ (800dda8 <displayDeviceControlMenu+0x1ec>)
 800dd44:	681a      	ldr	r2, [r3, #0]
 800dd46:	4b13      	ldr	r3, [pc, #76]	@ (800dd94 <displayDeviceControlMenu+0x1d8>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d007      	beq.n	800dd5e <displayDeviceControlMenu+0x1a2>
		updateButtonSelection(last_selection, current_selection);
 800dd4e:	4b16      	ldr	r3, [pc, #88]	@ (800dda8 <displayDeviceControlMenu+0x1ec>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	4a10      	ldr	r2, [pc, #64]	@ (800dd94 <displayDeviceControlMenu+0x1d8>)
 800dd54:	6812      	ldr	r2, [r2, #0]
 800dd56:	4611      	mov	r1, r2
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7ff fb45 	bl	800d3e8 <updateButtonSelection>
	}

	last_selection = current_selection;
 800dd5e:	4b0d      	ldr	r3, [pc, #52]	@ (800dd94 <displayDeviceControlMenu+0x1d8>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	4a11      	ldr	r2, [pc, #68]	@ (800dda8 <displayDeviceControlMenu+0x1ec>)
 800dd64:	6013      	str	r3, [r2, #0]
}
 800dd66:	bf00      	nop
 800dd68:	3728      	adds	r7, #40	@ 0x28
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	20000df8 	.word	0x20000df8
 800dd74:	20000e08 	.word	0x20000e08
 800dd78:	20000014 	.word	0x20000014
 800dd7c:	20000df0 	.word	0x20000df0
 800dd80:	20000010 	.word	0x20000010
 800dd84:	20000e18 	.word	0x20000e18
 800dd88:	0801bbe0 	.word	0x0801bbe0
 800dd8c:	20000e19 	.word	0x20000e19
 800dd90:	20000f3c 	.word	0x20000f3c
 800dd94:	20000df4 	.word	0x20000df4
 800dd98:	0801bbf4 	.word	0x0801bbf4
 800dd9c:	0801bbfc 	.word	0x0801bbfc
 800dda0:	0801bbc8 	.word	0x0801bbc8
 800dda4:	0801bc08 	.word	0x0801bc08
 800dda8:	2000000c 	.word	0x2000000c

0800ddac <setDeviceState>:


void setDeviceState(int device, int state) {
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b08c      	sub	sp, #48	@ 0x30
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
    GPIO_TypeDef* gpio_led_port;
    GPIO_TypeDef *gpio_relay_port;
    uint16_t gpio_led_pin, gpio_relay_pin;
    char deviceItem[15];

    switch(device) {
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2b03      	cmp	r3, #3
 800ddba:	f200 80c9 	bhi.w	800df50 <setDeviceState+0x1a4>
 800ddbe:	a201      	add	r2, pc, #4	@ (adr r2, 800ddc4 <setDeviceState+0x18>)
 800ddc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddc4:	0800ddd5 	.word	0x0800ddd5
 800ddc8:	0800ddf5 	.word	0x0800ddf5
 800ddcc:	0800de15 	.word	0x0800de15
 800ddd0:	0800de35 	.word	0x0800de35
        case 0:
            gpio_led_port = TOUCH_LED1_GPIO_Port;
 800ddd4:	4b60      	ldr	r3, [pc, #384]	@ (800df58 <setDeviceState+0x1ac>)
 800ddd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            gpio_relay_port = L_RELAY_1_GPIO_Port;
 800ddd8:	4b5f      	ldr	r3, [pc, #380]	@ (800df58 <setDeviceState+0x1ac>)
 800ddda:	62bb      	str	r3, [r7, #40]	@ 0x28
            gpio_led_pin = TOUCH_LED1_Pin;
 800dddc:	2308      	movs	r3, #8
 800ddde:	84fb      	strh	r3, [r7, #38]	@ 0x26
            gpio_relay_pin = L_RELAY_1_Pin;
 800dde0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dde4:	84bb      	strh	r3, [r7, #36]	@ 0x24
            sprintf(deviceItem, "device1");
 800dde6:	f107 030c 	add.w	r3, r7, #12
 800ddea:	495c      	ldr	r1, [pc, #368]	@ (800df5c <setDeviceState+0x1b0>)
 800ddec:	4618      	mov	r0, r3
 800ddee:	f00a fa49 	bl	8018284 <siprintf>
            break;
 800ddf2:	e02f      	b.n	800de54 <setDeviceState+0xa8>
        case 1:
            gpio_led_port = TOUCH_LED2_GPIO_Port;
 800ddf4:	4b58      	ldr	r3, [pc, #352]	@ (800df58 <setDeviceState+0x1ac>)
 800ddf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            gpio_relay_port = L_RELAY_2_GPIO_Port;
 800ddf8:	4b57      	ldr	r3, [pc, #348]	@ (800df58 <setDeviceState+0x1ac>)
 800ddfa:	62bb      	str	r3, [r7, #40]	@ 0x28
            gpio_led_pin = TOUCH_LED2_Pin;
 800ddfc:	2304      	movs	r3, #4
 800ddfe:	84fb      	strh	r3, [r7, #38]	@ 0x26
            gpio_relay_pin = L_RELAY_2_Pin;
 800de00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de04:	84bb      	strh	r3, [r7, #36]	@ 0x24
            sprintf(deviceItem, "device2");
 800de06:	f107 030c 	add.w	r3, r7, #12
 800de0a:	4955      	ldr	r1, [pc, #340]	@ (800df60 <setDeviceState+0x1b4>)
 800de0c:	4618      	mov	r0, r3
 800de0e:	f00a fa39 	bl	8018284 <siprintf>
            break;
 800de12:	e01f      	b.n	800de54 <setDeviceState+0xa8>
        case 2:
            gpio_led_port = TOUCH_LED3_GPIO_Port;
 800de14:	4b53      	ldr	r3, [pc, #332]	@ (800df64 <setDeviceState+0x1b8>)
 800de16:	62fb      	str	r3, [r7, #44]	@ 0x2c
            gpio_relay_port = L_RELAY_3_GPIO_Port;
 800de18:	4b53      	ldr	r3, [pc, #332]	@ (800df68 <setDeviceState+0x1bc>)
 800de1a:	62bb      	str	r3, [r7, #40]	@ 0x28
            gpio_led_pin = TOUCH_LED3_Pin;
 800de1c:	2302      	movs	r3, #2
 800de1e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            gpio_relay_pin = L_RELAY_3_Pin;
 800de20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de24:	84bb      	strh	r3, [r7, #36]	@ 0x24
            sprintf(deviceItem, "device3");
 800de26:	f107 030c 	add.w	r3, r7, #12
 800de2a:	4950      	ldr	r1, [pc, #320]	@ (800df6c <setDeviceState+0x1c0>)
 800de2c:	4618      	mov	r0, r3
 800de2e:	f00a fa29 	bl	8018284 <siprintf>
            break;
 800de32:	e00f      	b.n	800de54 <setDeviceState+0xa8>
        case 3:
            gpio_led_port = TOUCH_LED4_GPIO_Port;
 800de34:	4b4c      	ldr	r3, [pc, #304]	@ (800df68 <setDeviceState+0x1bc>)
 800de36:	62fb      	str	r3, [r7, #44]	@ 0x2c
            gpio_relay_port = L_RELAY_4_GPIO_Port;
 800de38:	4b47      	ldr	r3, [pc, #284]	@ (800df58 <setDeviceState+0x1ac>)
 800de3a:	62bb      	str	r3, [r7, #40]	@ 0x28
            gpio_led_pin = TOUCH_LED4_Pin;
 800de3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800de40:	84fb      	strh	r3, [r7, #38]	@ 0x26
            gpio_relay_pin = L_RELAY_4_Pin;
 800de42:	2340      	movs	r3, #64	@ 0x40
 800de44:	84bb      	strh	r3, [r7, #36]	@ 0x24
            sprintf(deviceItem, "device4");
 800de46:	f107 030c 	add.w	r3, r7, #12
 800de4a:	4949      	ldr	r1, [pc, #292]	@ (800df70 <setDeviceState+0x1c4>)
 800de4c:	4618      	mov	r0, r3
 800de4e:	f00a fa19 	bl	8018284 <siprintf>
            break;
 800de52:	bf00      	nop
        default:
            return;
    }

    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 800de54:	4b47      	ldr	r3, [pc, #284]	@ (800df74 <setDeviceState+0x1c8>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	2164      	movs	r1, #100	@ 0x64
 800de5a:	4618      	mov	r0, r3
 800de5c:	f006 f948 	bl	80140f0 <xQueueSemaphoreTake>
 800de60:	4603      	mov	r3, r0
 800de62:	2b01      	cmp	r3, #1
 800de64:	d175      	bne.n	800df52 <setDeviceState+0x1a6>
		if (state) {
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d016      	beq.n	800de9a <setDeviceState+0xee>
			HAL_GPIO_WritePin(gpio_led_port, gpio_led_pin, GPIO_PIN_SET);
 800de6c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de6e:	2201      	movs	r2, #1
 800de70:	4619      	mov	r1, r3
 800de72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de74:	f002 fc4c 	bl	8010710 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gpio_relay_port, gpio_relay_pin, GPIO_PIN_SET);
 800de78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800de7a:	2201      	movs	r2, #1
 800de7c:	4619      	mov	r1, r3
 800de7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de80:	f002 fc46 	bl	8010710 <HAL_GPIO_WritePin>
			global_device_states[device] = 1;
 800de84:	4a3c      	ldr	r2, [pc, #240]	@ (800df78 <setDeviceState+0x1cc>)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2101      	movs	r1, #1
 800de8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			device_states[device] = 1;
 800de8e:	4a3b      	ldr	r2, [pc, #236]	@ (800df7c <setDeviceState+0x1d0>)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2101      	movs	r1, #1
 800de94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800de98:	e015      	b.n	800dec6 <setDeviceState+0x11a>
		} else {
			HAL_GPIO_WritePin(gpio_led_port, gpio_led_pin, GPIO_PIN_RESET);
 800de9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de9c:	2200      	movs	r2, #0
 800de9e:	4619      	mov	r1, r3
 800dea0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dea2:	f002 fc35 	bl	8010710 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(gpio_relay_port, gpio_relay_pin, GPIO_PIN_RESET);
 800dea6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dea8:	2200      	movs	r2, #0
 800deaa:	4619      	mov	r1, r3
 800deac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800deae:	f002 fc2f 	bl	8010710 <HAL_GPIO_WritePin>
			global_device_states[device] = 0;
 800deb2:	4a31      	ldr	r2, [pc, #196]	@ (800df78 <setDeviceState+0x1cc>)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2100      	movs	r1, #0
 800deb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			device_states[device] = 0;
 800debc:	4a2f      	ldr	r2, [pc, #188]	@ (800df7c <setDeviceState+0x1d0>)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2100      	movs	r1, #0
 800dec2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		xSemaphoreGive(deviceStateMutex);
 800dec6:	4b2b      	ldr	r3, [pc, #172]	@ (800df74 <setDeviceState+0x1c8>)
 800dec8:	6818      	ldr	r0, [r3, #0]
 800deca:	2300      	movs	r3, #0
 800decc:	2200      	movs	r2, #0
 800dece:	2100      	movs	r1, #0
 800ded0:	f005 fe7c 	bl	8013bcc <xQueueGenericSend>

		cJSON *resp = cJSON_CreateObject();
 800ded4:	f7ff f920 	bl	800d118 <cJSON_CreateObject>
 800ded8:	6238      	str	r0, [r7, #32]
		cJSON_AddNumberToObject(resp, deviceItem, device_states[device]);
 800deda:	4a28      	ldr	r2, [pc, #160]	@ (800df7c <setDeviceState+0x1d0>)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fa fb4e 	bl	8008584 <__aeabi_i2d>
 800dee8:	f107 030c 	add.w	r3, r7, #12
 800deec:	ec41 0b10 	vmov	d0, r0, r1
 800def0:	4619      	mov	r1, r3
 800def2:	6a38      	ldr	r0, [r7, #32]
 800def4:	f7ff f8a2 	bl	800d03c <cJSON_AddNumberToObject>
		char *respStr = cJSON_PrintUnformatted(resp);
 800def8:	6a38      	ldr	r0, [r7, #32]
 800defa:	f7fe fa4d 	bl	800c398 <cJSON_PrintUnformatted>
 800defe:	61f8      	str	r0, [r7, #28]
		if (respStr)
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d014      	beq.n	800df30 <setDeviceState+0x184>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)respStr, strlen(respStr), HAL_MAX_DELAY);
 800df06:	69f8      	ldr	r0, [r7, #28]
 800df08:	f7fa f9e2 	bl	80082d0 <strlen>
 800df0c:	4603      	mov	r3, r0
 800df0e:	b29a      	uxth	r2, r3
 800df10:	f04f 33ff 	mov.w	r3, #4294967295
 800df14:	69f9      	ldr	r1, [r7, #28]
 800df16:	481a      	ldr	r0, [pc, #104]	@ (800df80 <setDeviceState+0x1d4>)
 800df18:	f004 fc30 	bl	801277c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800df1c:	f04f 33ff 	mov.w	r3, #4294967295
 800df20:	2201      	movs	r2, #1
 800df22:	4918      	ldr	r1, [pc, #96]	@ (800df84 <setDeviceState+0x1d8>)
 800df24:	4816      	ldr	r0, [pc, #88]	@ (800df80 <setDeviceState+0x1d4>)
 800df26:	f004 fc29 	bl	801277c <HAL_UART_Transmit>
			free(respStr);
 800df2a:	69f8      	ldr	r0, [r7, #28]
 800df2c:	f008 fd62 	bl	80169f4 <free>
		}
		cJSON_Delete(resp);
 800df30:	6a38      	ldr	r0, [r7, #32]
 800df32:	f7fd f985 	bl	800b240 <cJSON_Delete>

		safe_printf("DISPLAY: Device %d set to %s\n", device + 1, state ? "ON" : "OFF");
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	1c59      	adds	r1, r3, #1
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d001      	beq.n	800df44 <setDeviceState+0x198>
 800df40:	4b11      	ldr	r3, [pc, #68]	@ (800df88 <setDeviceState+0x1dc>)
 800df42:	e000      	b.n	800df46 <setDeviceState+0x19a>
 800df44:	4b11      	ldr	r3, [pc, #68]	@ (800df8c <setDeviceState+0x1e0>)
 800df46:	461a      	mov	r2, r3
 800df48:	4811      	ldr	r0, [pc, #68]	@ (800df90 <setDeviceState+0x1e4>)
 800df4a:	f001 fff3 	bl	800ff34 <safe_printf>
 800df4e:	e000      	b.n	800df52 <setDeviceState+0x1a6>
            return;
 800df50:	bf00      	nop
	}
}
 800df52:	3730      	adds	r7, #48	@ 0x30
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}
 800df58:	40020800 	.word	0x40020800
 800df5c:	0801bc14 	.word	0x0801bc14
 800df60:	0801bc1c 	.word	0x0801bc1c
 800df64:	40021c00 	.word	0x40021c00
 800df68:	40020400 	.word	0x40020400
 800df6c:	0801bc24 	.word	0x0801bc24
 800df70:	0801bc2c 	.word	0x0801bc2c
 800df74:	200012f8 	.word	0x200012f8
 800df78:	200014bc 	.word	0x200014bc
 800df7c:	20000e08 	.word	0x20000e08
 800df80:	200010d8 	.word	0x200010d8
 800df84:	0801bc34 	.word	0x0801bc34
 800df88:	0801bb54 	.word	0x0801bb54
 800df8c:	0801bb58 	.word	0x0801bb58
 800df90:	0801bc38 	.word	0x0801bc38

0800df94 <setAllDevicesState>:

void setAllDevicesState(int state) {
 800df94:	b590      	push	{r4, r7, lr}
 800df96:	b08d      	sub	sp, #52	@ 0x34
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
	const char *devices[] = {"device1", "device2", "device3", "device4"};
 800df9c:	4b70      	ldr	r3, [pc, #448]	@ (800e160 <setAllDevicesState+0x1cc>)
 800df9e:	f107 0408 	add.w	r4, r7, #8
 800dfa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dfa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	cJSON *resp = cJSON_CreateObject();
 800dfa8:	f7ff f8b6 	bl	800d118 <cJSON_CreateObject>
 800dfac:	61f8      	str	r0, [r7, #28]
    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE) {
 800dfae:	4b6d      	ldr	r3, [pc, #436]	@ (800e164 <setAllDevicesState+0x1d0>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2164      	movs	r1, #100	@ 0x64
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f006 f89b 	bl	80140f0 <xQueueSemaphoreTake>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	f040 80ca 	bne.w	800e156 <setAllDevicesState+0x1c2>
        for (int i = 0; i < 4; i++) {
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dfc6:	e092      	b.n	800e0ee <setAllDevicesState+0x15a>
        	GPIO_TypeDef* gpio_led_port;
        	GPIO_TypeDef *gpio_relay_port;
			uint16_t gpio_led_pin, gpio_relay_pin;

            switch(i) {
 800dfc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfca:	2b03      	cmp	r3, #3
 800dfcc:	d832      	bhi.n	800e034 <setAllDevicesState+0xa0>
 800dfce:	a201      	add	r2, pc, #4	@ (adr r2, 800dfd4 <setAllDevicesState+0x40>)
 800dfd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd4:	0800dfe5 	.word	0x0800dfe5
 800dfd8:	0800dff9 	.word	0x0800dff9
 800dfdc:	0800e00d 	.word	0x0800e00d
 800dfe0:	0800e021 	.word	0x0800e021
                case 0:
                	gpio_led_port = TOUCH_LED1_GPIO_Port;
 800dfe4:	4b60      	ldr	r3, [pc, #384]	@ (800e168 <setAllDevicesState+0x1d4>)
 800dfe6:	62bb      	str	r3, [r7, #40]	@ 0x28
					gpio_relay_port = L_RELAY_1_GPIO_Port;
 800dfe8:	4b5f      	ldr	r3, [pc, #380]	@ (800e168 <setAllDevicesState+0x1d4>)
 800dfea:	627b      	str	r3, [r7, #36]	@ 0x24
					gpio_led_pin = TOUCH_LED1_Pin;
 800dfec:	2308      	movs	r3, #8
 800dfee:	847b      	strh	r3, [r7, #34]	@ 0x22
					gpio_relay_pin = L_RELAY_1_Pin;
 800dff0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dff4:	843b      	strh	r3, [r7, #32]
                    break;
 800dff6:	e01d      	b.n	800e034 <setAllDevicesState+0xa0>
                case 1:
                	gpio_led_port = TOUCH_LED2_GPIO_Port;
 800dff8:	4b5b      	ldr	r3, [pc, #364]	@ (800e168 <setAllDevicesState+0x1d4>)
 800dffa:	62bb      	str	r3, [r7, #40]	@ 0x28
					gpio_relay_port = L_RELAY_2_GPIO_Port;
 800dffc:	4b5a      	ldr	r3, [pc, #360]	@ (800e168 <setAllDevicesState+0x1d4>)
 800dffe:	627b      	str	r3, [r7, #36]	@ 0x24
					gpio_led_pin = TOUCH_LED2_Pin;
 800e000:	2304      	movs	r3, #4
 800e002:	847b      	strh	r3, [r7, #34]	@ 0x22
					gpio_relay_pin = L_RELAY_2_Pin;
 800e004:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e008:	843b      	strh	r3, [r7, #32]
                    break;
 800e00a:	e013      	b.n	800e034 <setAllDevicesState+0xa0>
                case 2:
                	gpio_led_port = TOUCH_LED3_GPIO_Port;
 800e00c:	4b57      	ldr	r3, [pc, #348]	@ (800e16c <setAllDevicesState+0x1d8>)
 800e00e:	62bb      	str	r3, [r7, #40]	@ 0x28
					gpio_relay_port = L_RELAY_3_GPIO_Port;
 800e010:	4b57      	ldr	r3, [pc, #348]	@ (800e170 <setAllDevicesState+0x1dc>)
 800e012:	627b      	str	r3, [r7, #36]	@ 0x24
					gpio_led_pin = TOUCH_LED3_Pin;
 800e014:	2302      	movs	r3, #2
 800e016:	847b      	strh	r3, [r7, #34]	@ 0x22
					gpio_relay_pin = L_RELAY_3_Pin;
 800e018:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e01c:	843b      	strh	r3, [r7, #32]
                    break;
 800e01e:	e009      	b.n	800e034 <setAllDevicesState+0xa0>
                case 3:
                	gpio_led_port = TOUCH_LED4_GPIO_Port;
 800e020:	4b53      	ldr	r3, [pc, #332]	@ (800e170 <setAllDevicesState+0x1dc>)
 800e022:	62bb      	str	r3, [r7, #40]	@ 0x28
					gpio_relay_port = L_RELAY_4_GPIO_Port;
 800e024:	4b50      	ldr	r3, [pc, #320]	@ (800e168 <setAllDevicesState+0x1d4>)
 800e026:	627b      	str	r3, [r7, #36]	@ 0x24
					gpio_led_pin = TOUCH_LED4_Pin;
 800e028:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e02c:	847b      	strh	r3, [r7, #34]	@ 0x22
					gpio_relay_pin = L_RELAY_4_Pin;
 800e02e:	2340      	movs	r3, #64	@ 0x40
 800e030:	843b      	strh	r3, [r7, #32]
                    break;
 800e032:	bf00      	nop
            }

            if (state) {
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d02b      	beq.n	800e092 <setAllDevicesState+0xfe>
            	HAL_GPIO_WritePin(gpio_led_port, gpio_led_pin, GPIO_PIN_SET);
 800e03a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e03c:	2201      	movs	r2, #1
 800e03e:	4619      	mov	r1, r3
 800e040:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e042:	f002 fb65 	bl	8010710 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(gpio_relay_port, gpio_relay_pin, GPIO_PIN_SET);
 800e046:	8c3b      	ldrh	r3, [r7, #32]
 800e048:	2201      	movs	r2, #1
 800e04a:	4619      	mov	r1, r3
 800e04c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e04e:	f002 fb5f 	bl	8010710 <HAL_GPIO_WritePin>
                global_device_states[i] = 1;
 800e052:	4a48      	ldr	r2, [pc, #288]	@ (800e174 <setAllDevicesState+0x1e0>)
 800e054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e056:	2101      	movs	r1, #1
 800e058:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                device_states[i] = 1;
 800e05c:	4a46      	ldr	r2, [pc, #280]	@ (800e178 <setAllDevicesState+0x1e4>)
 800e05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e060:	2101      	movs	r1, #1
 800e062:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                cJSON_AddNumberToObject(resp, devices[i], device_states[i]);
 800e066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	3330      	adds	r3, #48	@ 0x30
 800e06c:	443b      	add	r3, r7
 800e06e:	f853 4c28 	ldr.w	r4, [r3, #-40]
 800e072:	4a41      	ldr	r2, [pc, #260]	@ (800e178 <setAllDevicesState+0x1e4>)
 800e074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fa fa82 	bl	8008584 <__aeabi_i2d>
 800e080:	4602      	mov	r2, r0
 800e082:	460b      	mov	r3, r1
 800e084:	ec43 2b10 	vmov	d0, r2, r3
 800e088:	4621      	mov	r1, r4
 800e08a:	69f8      	ldr	r0, [r7, #28]
 800e08c:	f7fe ffd6 	bl	800d03c <cJSON_AddNumberToObject>
 800e090:	e02a      	b.n	800e0e8 <setAllDevicesState+0x154>
            } else {
            	HAL_GPIO_WritePin(gpio_led_port, gpio_led_pin, GPIO_PIN_RESET);
 800e092:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e094:	2200      	movs	r2, #0
 800e096:	4619      	mov	r1, r3
 800e098:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e09a:	f002 fb39 	bl	8010710 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(gpio_relay_port, gpio_relay_pin, GPIO_PIN_RESET);
 800e09e:	8c3b      	ldrh	r3, [r7, #32]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e0a6:	f002 fb33 	bl	8010710 <HAL_GPIO_WritePin>
                global_device_states[i] = 0;
 800e0aa:	4a32      	ldr	r2, [pc, #200]	@ (800e174 <setAllDevicesState+0x1e0>)
 800e0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ae:	2100      	movs	r1, #0
 800e0b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                device_states[i] = 0;
 800e0b4:	4a30      	ldr	r2, [pc, #192]	@ (800e178 <setAllDevicesState+0x1e4>)
 800e0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0b8:	2100      	movs	r1, #0
 800e0ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                cJSON_AddNumberToObject(resp, devices[i], device_states[i]);
 800e0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	3330      	adds	r3, #48	@ 0x30
 800e0c4:	443b      	add	r3, r7
 800e0c6:	f853 4c28 	ldr.w	r4, [r3, #-40]
 800e0ca:	4a2b      	ldr	r2, [pc, #172]	@ (800e178 <setAllDevicesState+0x1e4>)
 800e0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7fa fa56 	bl	8008584 <__aeabi_i2d>
 800e0d8:	4602      	mov	r2, r0
 800e0da:	460b      	mov	r3, r1
 800e0dc:	ec43 2b10 	vmov	d0, r2, r3
 800e0e0:	4621      	mov	r1, r4
 800e0e2:	69f8      	ldr	r0, [r7, #28]
 800e0e4:	f7fe ffaa 	bl	800d03c <cJSON_AddNumberToObject>
        for (int i = 0; i < 4; i++) {
 800e0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0f0:	2b03      	cmp	r3, #3
 800e0f2:	f77f af69 	ble.w	800dfc8 <setAllDevicesState+0x34>
            }
        }

        xSemaphoreGive(deviceStateMutex);
 800e0f6:	4b1b      	ldr	r3, [pc, #108]	@ (800e164 <setAllDevicesState+0x1d0>)
 800e0f8:	6818      	ldr	r0, [r3, #0]
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	2100      	movs	r1, #0
 800e100:	f005 fd64 	bl	8013bcc <xQueueGenericSend>

        char *respStr = cJSON_PrintUnformatted(resp);
 800e104:	69f8      	ldr	r0, [r7, #28]
 800e106:	f7fe f947 	bl	800c398 <cJSON_PrintUnformatted>
 800e10a:	61b8      	str	r0, [r7, #24]
		if (respStr)
 800e10c:	69bb      	ldr	r3, [r7, #24]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d014      	beq.n	800e13c <setAllDevicesState+0x1a8>
		{
			HAL_UART_Transmit(&huart3, (uint8_t *)respStr, strlen(respStr), HAL_MAX_DELAY);
 800e112:	69b8      	ldr	r0, [r7, #24]
 800e114:	f7fa f8dc 	bl	80082d0 <strlen>
 800e118:	4603      	mov	r3, r0
 800e11a:	b29a      	uxth	r2, r3
 800e11c:	f04f 33ff 	mov.w	r3, #4294967295
 800e120:	69b9      	ldr	r1, [r7, #24]
 800e122:	4816      	ldr	r0, [pc, #88]	@ (800e17c <setAllDevicesState+0x1e8>)
 800e124:	f004 fb2a 	bl	801277c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800e128:	f04f 33ff 	mov.w	r3, #4294967295
 800e12c:	2201      	movs	r2, #1
 800e12e:	4914      	ldr	r1, [pc, #80]	@ (800e180 <setAllDevicesState+0x1ec>)
 800e130:	4812      	ldr	r0, [pc, #72]	@ (800e17c <setAllDevicesState+0x1e8>)
 800e132:	f004 fb23 	bl	801277c <HAL_UART_Transmit>
			free(respStr);
 800e136:	69b8      	ldr	r0, [r7, #24]
 800e138:	f008 fc5c 	bl	80169f4 <free>
		}
		cJSON_Delete(resp);
 800e13c:	69f8      	ldr	r0, [r7, #28]
 800e13e:	f7fd f87f 	bl	800b240 <cJSON_Delete>

        safe_printf("DISPLAY: All devices set to %s\n", state ? "ON" : "OFF");
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d001      	beq.n	800e14c <setAllDevicesState+0x1b8>
 800e148:	4b0e      	ldr	r3, [pc, #56]	@ (800e184 <setAllDevicesState+0x1f0>)
 800e14a:	e000      	b.n	800e14e <setAllDevicesState+0x1ba>
 800e14c:	4b0e      	ldr	r3, [pc, #56]	@ (800e188 <setAllDevicesState+0x1f4>)
 800e14e:	4619      	mov	r1, r3
 800e150:	480e      	ldr	r0, [pc, #56]	@ (800e18c <setAllDevicesState+0x1f8>)
 800e152:	f001 feef 	bl	800ff34 <safe_printf>
    }
}
 800e156:	bf00      	nop
 800e158:	3734      	adds	r7, #52	@ 0x34
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd90      	pop	{r4, r7, pc}
 800e15e:	bf00      	nop
 800e160:	0801bc78 	.word	0x0801bc78
 800e164:	200012f8 	.word	0x200012f8
 800e168:	40020800 	.word	0x40020800
 800e16c:	40021c00 	.word	0x40021c00
 800e170:	40020400 	.word	0x40020400
 800e174:	200014bc 	.word	0x200014bc
 800e178:	20000e08 	.word	0x20000e08
 800e17c:	200010d8 	.word	0x200010d8
 800e180:	0801bc34 	.word	0x0801bc34
 800e184:	0801bb54 	.word	0x0801bb54
 800e188:	0801bb58 	.word	0x0801bb58
 800e18c:	0801bc58 	.word	0x0801bc58

0800e190 <syncDisplayDeviceStates>:

void syncDisplayDeviceStates(void) {
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(10)) == pdTRUE) {
 800e196:	4b12      	ldr	r3, [pc, #72]	@ (800e1e0 <syncDisplayDeviceStates+0x50>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	210a      	movs	r1, #10
 800e19c:	4618      	mov	r0, r3
 800e19e:	f005 ffa7 	bl	80140f0 <xQueueSemaphoreTake>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d117      	bne.n	800e1d8 <syncDisplayDeviceStates+0x48>
        for (int i = 0; i < 4; i++) {
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	607b      	str	r3, [r7, #4]
 800e1ac:	e00a      	b.n	800e1c4 <syncDisplayDeviceStates+0x34>
            device_states[i] = global_device_states[i];
 800e1ae:	4a0d      	ldr	r2, [pc, #52]	@ (800e1e4 <syncDisplayDeviceStates+0x54>)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e1b6:	490c      	ldr	r1, [pc, #48]	@ (800e1e8 <syncDisplayDeviceStates+0x58>)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < 4; i++) {
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	607b      	str	r3, [r7, #4]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2b03      	cmp	r3, #3
 800e1c8:	ddf1      	ble.n	800e1ae <syncDisplayDeviceStates+0x1e>
        }
        xSemaphoreGive(deviceStateMutex);
 800e1ca:	4b05      	ldr	r3, [pc, #20]	@ (800e1e0 <syncDisplayDeviceStates+0x50>)
 800e1cc:	6818      	ldr	r0, [r3, #0]
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	f005 fcfa 	bl	8013bcc <xQueueGenericSend>
    }
}
 800e1d8:	bf00      	nop
 800e1da:	3708      	adds	r7, #8
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	200012f8 	.word	0x200012f8
 800e1e4:	200014bc 	.word	0x200014bc
 800e1e8:	20000e08 	.word	0x20000e08

0800e1ec <handleNavigation>:
    HAL_Delay(800);
    fillRect(MARGIN_X, DISPLAY_HEIGHT - 15, BUTTON_WIDTH, 12, BLACK);
}


void handleNavigation(void) {
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
    int max_options;

    switch(current_menu) {
 800e1f2:	4b96      	ldr	r3, [pc, #600]	@ (800e44c <handleNavigation+0x260>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	2b03      	cmp	r3, #3
 800e1f8:	d816      	bhi.n	800e228 <handleNavigation+0x3c>
 800e1fa:	a201      	add	r2, pc, #4	@ (adr r2, 800e200 <handleNavigation+0x14>)
 800e1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e200:	0800e211 	.word	0x0800e211
 800e204:	0800e217 	.word	0x0800e217
 800e208:	0800e21d 	.word	0x0800e21d
 800e20c:	0800e223 	.word	0x0800e223
        case MENU_MAIN:
            max_options = MAIN_MENU_OPTIONS;
 800e210:	2302      	movs	r3, #2
 800e212:	60fb      	str	r3, [r7, #12]
            break;
 800e214:	e00b      	b.n	800e22e <handleNavigation+0x42>
        case MENU_TOTAL_CONTROL:
            max_options = TOTAL_CONTROL_OPTIONS;
 800e216:	2303      	movs	r3, #3
 800e218:	60fb      	str	r3, [r7, #12]
            break;
 800e21a:	e008      	b.n	800e22e <handleNavigation+0x42>
        case MENU_SEPARATE_CONTROL:
            max_options = SEPARATE_CONTROL_OPTIONS;
 800e21c:	2305      	movs	r3, #5
 800e21e:	60fb      	str	r3, [r7, #12]
            break;
 800e220:	e005      	b.n	800e22e <handleNavigation+0x42>
        case MENU_DEVICE_CONTROL:
            max_options = DEVICE_CONTROL_OPTIONS;
 800e222:	2304      	movs	r3, #4
 800e224:	60fb      	str	r3, [r7, #12]
            break;
 800e226:	e002      	b.n	800e22e <handleNavigation+0x42>
        default:
            max_options = 2;
 800e228:	2302      	movs	r3, #2
 800e22a:	60fb      	str	r3, [r7, #12]
            break;
 800e22c:	bf00      	nop
    }

    if (upbutton) {
 800e22e:	4b88      	ldr	r3, [pc, #544]	@ (800e450 <handleNavigation+0x264>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d052      	beq.n	800e2dc <handleNavigation+0xf0>
        HAL_Delay(200);
 800e236:	20c8      	movs	r0, #200	@ 0xc8
 800e238:	f001 ff26 	bl	8010088 <HAL_Delay>
        int old_selection = current_selection;
 800e23c:	4b85      	ldr	r3, [pc, #532]	@ (800e454 <handleNavigation+0x268>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	60bb      	str	r3, [r7, #8]
        current_selection = (current_selection - 1 + max_options) % max_options;
 800e242:	4b84      	ldr	r3, [pc, #528]	@ (800e454 <handleNavigation+0x268>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	1e5a      	subs	r2, r3, #1
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	4413      	add	r3, r2
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	fb93 f2f2 	sdiv	r2, r3, r2
 800e252:	68f9      	ldr	r1, [r7, #12]
 800e254:	fb01 f202 	mul.w	r2, r1, r2
 800e258:	1a9b      	subs	r3, r3, r2
 800e25a:	4a7e      	ldr	r2, [pc, #504]	@ (800e454 <handleNavigation+0x268>)
 800e25c:	6013      	str	r3, [r2, #0]
        upbutton = 0;
 800e25e:	4b7c      	ldr	r3, [pc, #496]	@ (800e450 <handleNavigation+0x264>)
 800e260:	2200      	movs	r2, #0
 800e262:	601a      	str	r2, [r3, #0]

        // Quick highlight update instead of full redraw
        switch(current_menu) {
 800e264:	4b79      	ldr	r3, [pc, #484]	@ (800e44c <handleNavigation+0x260>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2b03      	cmp	r3, #3
 800e26a:	d837      	bhi.n	800e2dc <handleNavigation+0xf0>
 800e26c:	a201      	add	r2, pc, #4	@ (adr r2, 800e274 <handleNavigation+0x88>)
 800e26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e272:	bf00      	nop
 800e274:	0800e285 	.word	0x0800e285
 800e278:	0800e29b 	.word	0x0800e29b
 800e27c:	0800e2b1 	.word	0x0800e2b1
 800e280:	0800e2c7 	.word	0x0800e2c7
            case MENU_MAIN:
                updateButtonSelection(old_selection, current_selection);
 800e284:	4b73      	ldr	r3, [pc, #460]	@ (800e454 <handleNavigation+0x268>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4619      	mov	r1, r3
 800e28a:	68b8      	ldr	r0, [r7, #8]
 800e28c:	f7ff f8ac 	bl	800d3e8 <updateButtonSelection>
                last_selection = current_selection;
 800e290:	4b70      	ldr	r3, [pc, #448]	@ (800e454 <handleNavigation+0x268>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4a70      	ldr	r2, [pc, #448]	@ (800e458 <handleNavigation+0x26c>)
 800e296:	6013      	str	r3, [r2, #0]
                break;
 800e298:	e020      	b.n	800e2dc <handleNavigation+0xf0>
            case MENU_TOTAL_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 800e29a:	4b6e      	ldr	r3, [pc, #440]	@ (800e454 <handleNavigation+0x268>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	4619      	mov	r1, r3
 800e2a0:	68b8      	ldr	r0, [r7, #8]
 800e2a2:	f7ff f8a1 	bl	800d3e8 <updateButtonSelection>
                last_selection = current_selection;
 800e2a6:	4b6b      	ldr	r3, [pc, #428]	@ (800e454 <handleNavigation+0x268>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4a6b      	ldr	r2, [pc, #428]	@ (800e458 <handleNavigation+0x26c>)
 800e2ac:	6013      	str	r3, [r2, #0]
                break;
 800e2ae:	e015      	b.n	800e2dc <handleNavigation+0xf0>
            case MENU_SEPARATE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 800e2b0:	4b68      	ldr	r3, [pc, #416]	@ (800e454 <handleNavigation+0x268>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	68b8      	ldr	r0, [r7, #8]
 800e2b8:	f7ff f896 	bl	800d3e8 <updateButtonSelection>
                last_selection = current_selection;
 800e2bc:	4b65      	ldr	r3, [pc, #404]	@ (800e454 <handleNavigation+0x268>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4a65      	ldr	r2, [pc, #404]	@ (800e458 <handleNavigation+0x26c>)
 800e2c2:	6013      	str	r3, [r2, #0]
                break;
 800e2c4:	e00a      	b.n	800e2dc <handleNavigation+0xf0>
            case MENU_DEVICE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 800e2c6:	4b63      	ldr	r3, [pc, #396]	@ (800e454 <handleNavigation+0x268>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	68b8      	ldr	r0, [r7, #8]
 800e2ce:	f7ff f88b 	bl	800d3e8 <updateButtonSelection>
                last_selection = current_selection;
 800e2d2:	4b60      	ldr	r3, [pc, #384]	@ (800e454 <handleNavigation+0x268>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4a60      	ldr	r2, [pc, #384]	@ (800e458 <handleNavigation+0x26c>)
 800e2d8:	6013      	str	r3, [r2, #0]
                break;
 800e2da:	bf00      	nop
        }
    }

    if (downbutton) {
 800e2dc:	4b5f      	ldr	r3, [pc, #380]	@ (800e45c <handleNavigation+0x270>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d04f      	beq.n	800e384 <handleNavigation+0x198>
        HAL_Delay(200);
 800e2e4:	20c8      	movs	r0, #200	@ 0xc8
 800e2e6:	f001 fecf 	bl	8010088 <HAL_Delay>
        int old_selection = current_selection;
 800e2ea:	4b5a      	ldr	r3, [pc, #360]	@ (800e454 <handleNavigation+0x268>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	607b      	str	r3, [r7, #4]
        current_selection = (current_selection + 1) % max_options;
 800e2f0:	4b58      	ldr	r3, [pc, #352]	@ (800e454 <handleNavigation+0x268>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	68fa      	ldr	r2, [r7, #12]
 800e2f8:	fb93 f2f2 	sdiv	r2, r3, r2
 800e2fc:	68f9      	ldr	r1, [r7, #12]
 800e2fe:	fb01 f202 	mul.w	r2, r1, r2
 800e302:	1a9b      	subs	r3, r3, r2
 800e304:	4a53      	ldr	r2, [pc, #332]	@ (800e454 <handleNavigation+0x268>)
 800e306:	6013      	str	r3, [r2, #0]
        downbutton = 0;
 800e308:	4b54      	ldr	r3, [pc, #336]	@ (800e45c <handleNavigation+0x270>)
 800e30a:	2200      	movs	r2, #0
 800e30c:	601a      	str	r2, [r3, #0]

        switch(current_menu) {
 800e30e:	4b4f      	ldr	r3, [pc, #316]	@ (800e44c <handleNavigation+0x260>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	2b03      	cmp	r3, #3
 800e314:	d836      	bhi.n	800e384 <handleNavigation+0x198>
 800e316:	a201      	add	r2, pc, #4	@ (adr r2, 800e31c <handleNavigation+0x130>)
 800e318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e31c:	0800e32d 	.word	0x0800e32d
 800e320:	0800e343 	.word	0x0800e343
 800e324:	0800e359 	.word	0x0800e359
 800e328:	0800e36f 	.word	0x0800e36f
            case MENU_MAIN:
                updateButtonSelection(old_selection, current_selection);
 800e32c:	4b49      	ldr	r3, [pc, #292]	@ (800e454 <handleNavigation+0x268>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4619      	mov	r1, r3
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f7ff f858 	bl	800d3e8 <updateButtonSelection>
                last_selection = current_selection;
 800e338:	4b46      	ldr	r3, [pc, #280]	@ (800e454 <handleNavigation+0x268>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4a46      	ldr	r2, [pc, #280]	@ (800e458 <handleNavigation+0x26c>)
 800e33e:	6013      	str	r3, [r2, #0]
                break;
 800e340:	e020      	b.n	800e384 <handleNavigation+0x198>
            case MENU_TOTAL_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 800e342:	4b44      	ldr	r3, [pc, #272]	@ (800e454 <handleNavigation+0x268>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	4619      	mov	r1, r3
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f7ff f84d 	bl	800d3e8 <updateButtonSelection>
                last_selection = current_selection;
 800e34e:	4b41      	ldr	r3, [pc, #260]	@ (800e454 <handleNavigation+0x268>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	4a41      	ldr	r2, [pc, #260]	@ (800e458 <handleNavigation+0x26c>)
 800e354:	6013      	str	r3, [r2, #0]
                break;
 800e356:	e015      	b.n	800e384 <handleNavigation+0x198>
            case MENU_SEPARATE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 800e358:	4b3e      	ldr	r3, [pc, #248]	@ (800e454 <handleNavigation+0x268>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4619      	mov	r1, r3
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f7ff f842 	bl	800d3e8 <updateButtonSelection>
                last_selection = current_selection;
 800e364:	4b3b      	ldr	r3, [pc, #236]	@ (800e454 <handleNavigation+0x268>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a3b      	ldr	r2, [pc, #236]	@ (800e458 <handleNavigation+0x26c>)
 800e36a:	6013      	str	r3, [r2, #0]
                break;
 800e36c:	e00a      	b.n	800e384 <handleNavigation+0x198>
            case MENU_DEVICE_CONTROL:
                updateButtonSelection(old_selection, current_selection);
 800e36e:	4b39      	ldr	r3, [pc, #228]	@ (800e454 <handleNavigation+0x268>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4619      	mov	r1, r3
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f7ff f837 	bl	800d3e8 <updateButtonSelection>
                last_selection = current_selection;
 800e37a:	4b36      	ldr	r3, [pc, #216]	@ (800e454 <handleNavigation+0x268>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4a36      	ldr	r2, [pc, #216]	@ (800e458 <handleNavigation+0x26c>)
 800e380:	6013      	str	r3, [r2, #0]
                break;
 800e382:	bf00      	nop
        }
    }

    if (enter) {
 800e384:	4b36      	ldr	r3, [pc, #216]	@ (800e460 <handleNavigation+0x274>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	f000 80df 	beq.w	800e54c <handleNavigation+0x360>
        HAL_Delay(200);
 800e38e:	20c8      	movs	r0, #200	@ 0xc8
 800e390:	f001 fe7a 	bl	8010088 <HAL_Delay>
        enter = 0;
 800e394:	4b32      	ldr	r3, [pc, #200]	@ (800e460 <handleNavigation+0x274>)
 800e396:	2200      	movs	r2, #0
 800e398:	601a      	str	r2, [r3, #0]

        switch(current_menu) {
 800e39a:	4b2c      	ldr	r3, [pc, #176]	@ (800e44c <handleNavigation+0x260>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	2b03      	cmp	r3, #3
 800e3a0:	f200 80d4 	bhi.w	800e54c <handleNavigation+0x360>
 800e3a4:	a201      	add	r2, pc, #4	@ (adr r2, 800e3ac <handleNavigation+0x1c0>)
 800e3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3aa:	bf00      	nop
 800e3ac:	0800e3bd 	.word	0x0800e3bd
 800e3b0:	0800e3ff 	.word	0x0800e3ff
 800e3b4:	0800e469 	.word	0x0800e469
 800e3b8:	0800e4c5 	.word	0x0800e4c5
            case MENU_MAIN:
                if (current_selection == 0) {
 800e3bc:	4b25      	ldr	r3, [pc, #148]	@ (800e454 <handleNavigation+0x268>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d10b      	bne.n	800e3dc <handleNavigation+0x1f0>
                    current_menu = MENU_TOTAL_CONTROL;
 800e3c4:	4b21      	ldr	r3, [pc, #132]	@ (800e44c <handleNavigation+0x260>)
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800e3ca:	4b22      	ldr	r3, [pc, #136]	@ (800e454 <handleNavigation+0x268>)
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 800e3d0:	4b24      	ldr	r3, [pc, #144]	@ (800e464 <handleNavigation+0x278>)
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	701a      	strb	r2, [r3, #0]
                    displayTotalControlMenu();
 800e3d6:	f7ff fa39 	bl	800d84c <displayTotalControlMenu>
                    current_menu = MENU_SEPARATE_CONTROL;
                    current_selection = 0;
                    menu_drawn = false; // Force menu redraw
                    displaySeparateControlMenu();
                }
                break;
 800e3da:	e0b0      	b.n	800e53e <handleNavigation+0x352>
                } else if (current_selection == 1) {
 800e3dc:	4b1d      	ldr	r3, [pc, #116]	@ (800e454 <handleNavigation+0x268>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2b01      	cmp	r3, #1
 800e3e2:	f040 80ac 	bne.w	800e53e <handleNavigation+0x352>
                    current_menu = MENU_SEPARATE_CONTROL;
 800e3e6:	4b19      	ldr	r3, [pc, #100]	@ (800e44c <handleNavigation+0x260>)
 800e3e8:	2202      	movs	r2, #2
 800e3ea:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800e3ec:	4b19      	ldr	r3, [pc, #100]	@ (800e454 <handleNavigation+0x268>)
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 800e3f2:	4b1c      	ldr	r3, [pc, #112]	@ (800e464 <handleNavigation+0x278>)
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	701a      	strb	r2, [r3, #0]
                    displaySeparateControlMenu();
 800e3f8:	f7ff fb06 	bl	800da08 <displaySeparateControlMenu>
                break;
 800e3fc:	e09f      	b.n	800e53e <handleNavigation+0x352>

            case MENU_TOTAL_CONTROL:
                if (current_selection == 0) {
 800e3fe:	4b15      	ldr	r3, [pc, #84]	@ (800e454 <handleNavigation+0x268>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d103      	bne.n	800e40e <handleNavigation+0x222>
                    setAllDevicesState(1);
 800e406:	2001      	movs	r0, #1
 800e408:	f7ff fdc4 	bl	800df94 <setAllDevicesState>
                    menu_drawn = false; // Force menu redraw
                    displayOnwardsLogoOptimized();
                    HAL_Delay(600);
                    displayMainMenu();
                }
                break;
 800e40c:	e099      	b.n	800e542 <handleNavigation+0x356>
                } else if (current_selection == 1) {
 800e40e:	4b11      	ldr	r3, [pc, #68]	@ (800e454 <handleNavigation+0x268>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	2b01      	cmp	r3, #1
 800e414:	d103      	bne.n	800e41e <handleNavigation+0x232>
                    setAllDevicesState(0);
 800e416:	2000      	movs	r0, #0
 800e418:	f7ff fdbc 	bl	800df94 <setAllDevicesState>
                break;
 800e41c:	e091      	b.n	800e542 <handleNavigation+0x356>
                } else if (current_selection == 2) {
 800e41e:	4b0d      	ldr	r3, [pc, #52]	@ (800e454 <handleNavigation+0x268>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	2b02      	cmp	r3, #2
 800e424:	f040 808d 	bne.w	800e542 <handleNavigation+0x356>
                    current_menu = MENU_MAIN;
 800e428:	4b08      	ldr	r3, [pc, #32]	@ (800e44c <handleNavigation+0x260>)
 800e42a:	2200      	movs	r2, #0
 800e42c:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800e42e:	4b09      	ldr	r3, [pc, #36]	@ (800e454 <handleNavigation+0x268>)
 800e430:	2200      	movs	r2, #0
 800e432:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 800e434:	4b0b      	ldr	r3, [pc, #44]	@ (800e464 <handleNavigation+0x278>)
 800e436:	2200      	movs	r2, #0
 800e438:	701a      	strb	r2, [r3, #0]
                    displayOnwardsLogoOptimized();
 800e43a:	f000 fc81 	bl	800ed40 <displayOnwardsLogoOptimized>
                    HAL_Delay(600);
 800e43e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800e442:	f001 fe21 	bl	8010088 <HAL_Delay>
                    displayMainMenu();
 800e446:	f7ff f985 	bl	800d754 <displayMainMenu>
                break;
 800e44a:	e07a      	b.n	800e542 <handleNavigation+0x356>
 800e44c:	20000df0 	.word	0x20000df0
 800e450:	20000e00 	.word	0x20000e00
 800e454:	20000df4 	.word	0x20000df4
 800e458:	2000000c 	.word	0x2000000c
 800e45c:	20000dfc 	.word	0x20000dfc
 800e460:	20000e04 	.word	0x20000e04
 800e464:	20000e18 	.word	0x20000e18

            case MENU_SEPARATE_CONTROL:
                if (current_selection >= 0 && current_selection <= 3) {
 800e468:	4b3a      	ldr	r3, [pc, #232]	@ (800e554 <handleNavigation+0x368>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	db13      	blt.n	800e498 <handleNavigation+0x2ac>
 800e470:	4b38      	ldr	r3, [pc, #224]	@ (800e554 <handleNavigation+0x368>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	2b03      	cmp	r3, #3
 800e476:	dc0f      	bgt.n	800e498 <handleNavigation+0x2ac>
                    current_device = current_selection;
 800e478:	4b36      	ldr	r3, [pc, #216]	@ (800e554 <handleNavigation+0x368>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	4a36      	ldr	r2, [pc, #216]	@ (800e558 <handleNavigation+0x36c>)
 800e47e:	6013      	str	r3, [r2, #0]
                    current_menu = MENU_DEVICE_CONTROL;
 800e480:	4b36      	ldr	r3, [pc, #216]	@ (800e55c <handleNavigation+0x370>)
 800e482:	2203      	movs	r2, #3
 800e484:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800e486:	4b33      	ldr	r3, [pc, #204]	@ (800e554 <handleNavigation+0x368>)
 800e488:	2200      	movs	r2, #0
 800e48a:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 800e48c:	4b34      	ldr	r3, [pc, #208]	@ (800e560 <handleNavigation+0x374>)
 800e48e:	2200      	movs	r2, #0
 800e490:	701a      	strb	r2, [r3, #0]
                    displayDeviceControlMenu();
 800e492:	f7ff fb93 	bl	800dbbc <displayDeviceControlMenu>
                    menu_drawn = false; // Force menu redraw
                    displayOnwardsLogoOptimized();
                    HAL_Delay(600);
                    displayMainMenu();
                }
                break;
 800e496:	e056      	b.n	800e546 <handleNavigation+0x35a>
                } else if (current_selection == 4) {
 800e498:	4b2e      	ldr	r3, [pc, #184]	@ (800e554 <handleNavigation+0x368>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2b04      	cmp	r3, #4
 800e49e:	d152      	bne.n	800e546 <handleNavigation+0x35a>
                    current_menu = MENU_MAIN;
 800e4a0:	4b2e      	ldr	r3, [pc, #184]	@ (800e55c <handleNavigation+0x370>)
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800e4a6:	4b2b      	ldr	r3, [pc, #172]	@ (800e554 <handleNavigation+0x368>)
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 800e4ac:	4b2c      	ldr	r3, [pc, #176]	@ (800e560 <handleNavigation+0x374>)
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	701a      	strb	r2, [r3, #0]
                    displayOnwardsLogoOptimized();
 800e4b2:	f000 fc45 	bl	800ed40 <displayOnwardsLogoOptimized>
                    HAL_Delay(600);
 800e4b6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800e4ba:	f001 fde5 	bl	8010088 <HAL_Delay>
                    displayMainMenu();
 800e4be:	f7ff f949 	bl	800d754 <displayMainMenu>
                break;
 800e4c2:	e040      	b.n	800e546 <handleNavigation+0x35a>

            case MENU_DEVICE_CONTROL:
                if (current_selection == 0) {
 800e4c4:	4b23      	ldr	r3, [pc, #140]	@ (800e554 <handleNavigation+0x368>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d106      	bne.n	800e4da <handleNavigation+0x2ee>
                    setDeviceState(current_device, 1);
 800e4cc:	4b22      	ldr	r3, [pc, #136]	@ (800e558 <handleNavigation+0x36c>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	2101      	movs	r1, #1
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7ff fc6a 	bl	800ddac <setDeviceState>
                    menu_drawn = false; // Force menu redraw
                    displayOnwardsLogoOptimized();
                    HAL_Delay(600);
                    displayMainMenu();
                }
                break;
 800e4d8:	e037      	b.n	800e54a <handleNavigation+0x35e>
                } else if (current_selection == 1) {
 800e4da:	4b1e      	ldr	r3, [pc, #120]	@ (800e554 <handleNavigation+0x368>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2b01      	cmp	r3, #1
 800e4e0:	d106      	bne.n	800e4f0 <handleNavigation+0x304>
                    setDeviceState(current_device, 0);
 800e4e2:	4b1d      	ldr	r3, [pc, #116]	@ (800e558 <handleNavigation+0x36c>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	2100      	movs	r1, #0
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7ff fc5f 	bl	800ddac <setDeviceState>
                break;
 800e4ee:	e02c      	b.n	800e54a <handleNavigation+0x35e>
                } else if (current_selection == 2) {
 800e4f0:	4b18      	ldr	r3, [pc, #96]	@ (800e554 <handleNavigation+0x368>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	2b02      	cmp	r3, #2
 800e4f6:	d10c      	bne.n	800e512 <handleNavigation+0x326>
                    current_menu = MENU_SEPARATE_CONTROL;
 800e4f8:	4b18      	ldr	r3, [pc, #96]	@ (800e55c <handleNavigation+0x370>)
 800e4fa:	2202      	movs	r2, #2
 800e4fc:	601a      	str	r2, [r3, #0]
                    current_selection = current_device;
 800e4fe:	4b16      	ldr	r3, [pc, #88]	@ (800e558 <handleNavigation+0x36c>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4a14      	ldr	r2, [pc, #80]	@ (800e554 <handleNavigation+0x368>)
 800e504:	6013      	str	r3, [r2, #0]
                    menu_drawn = false; // Force menu redraw
 800e506:	4b16      	ldr	r3, [pc, #88]	@ (800e560 <handleNavigation+0x374>)
 800e508:	2200      	movs	r2, #0
 800e50a:	701a      	strb	r2, [r3, #0]
                    displaySeparateControlMenu();
 800e50c:	f7ff fa7c 	bl	800da08 <displaySeparateControlMenu>
                break;
 800e510:	e01b      	b.n	800e54a <handleNavigation+0x35e>
                }else if (current_selection == 3) {
 800e512:	4b10      	ldr	r3, [pc, #64]	@ (800e554 <handleNavigation+0x368>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	2b03      	cmp	r3, #3
 800e518:	d117      	bne.n	800e54a <handleNavigation+0x35e>
                    current_menu = MENU_MAIN;
 800e51a:	4b10      	ldr	r3, [pc, #64]	@ (800e55c <handleNavigation+0x370>)
 800e51c:	2200      	movs	r2, #0
 800e51e:	601a      	str	r2, [r3, #0]
                    current_selection = 0;
 800e520:	4b0c      	ldr	r3, [pc, #48]	@ (800e554 <handleNavigation+0x368>)
 800e522:	2200      	movs	r2, #0
 800e524:	601a      	str	r2, [r3, #0]
                    menu_drawn = false; // Force menu redraw
 800e526:	4b0e      	ldr	r3, [pc, #56]	@ (800e560 <handleNavigation+0x374>)
 800e528:	2200      	movs	r2, #0
 800e52a:	701a      	strb	r2, [r3, #0]
                    displayOnwardsLogoOptimized();
 800e52c:	f000 fc08 	bl	800ed40 <displayOnwardsLogoOptimized>
                    HAL_Delay(600);
 800e530:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800e534:	f001 fda8 	bl	8010088 <HAL_Delay>
                    displayMainMenu();
 800e538:	f7ff f90c 	bl	800d754 <displayMainMenu>
                break;
 800e53c:	e005      	b.n	800e54a <handleNavigation+0x35e>
                break;
 800e53e:	bf00      	nop
 800e540:	e004      	b.n	800e54c <handleNavigation+0x360>
                break;
 800e542:	bf00      	nop
 800e544:	e002      	b.n	800e54c <handleNavigation+0x360>
                break;
 800e546:	bf00      	nop
 800e548:	e000      	b.n	800e54c <handleNavigation+0x360>
                break;
 800e54a:	bf00      	nop
        }
    }
}
 800e54c:	bf00      	nop
 800e54e:	3710      	adds	r7, #16
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	20000df4 	.word	0x20000df4
 800e558:	20000df8 	.word	0x20000df8
 800e55c:	20000df0 	.word	0x20000df0
 800e560:	20000e18 	.word	0x20000e18

0800e564 <Menu_Handler>:


void Menu_Handler(void) {
 800e564:	b580      	push	{r7, lr}
 800e566:	af00      	add	r7, sp, #0
    switch(current_menu) {
 800e568:	4b0f      	ldr	r3, [pc, #60]	@ (800e5a8 <Menu_Handler+0x44>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	2b03      	cmp	r3, #3
 800e56e:	d817      	bhi.n	800e5a0 <Menu_Handler+0x3c>
 800e570:	a201      	add	r2, pc, #4	@ (adr r2, 800e578 <Menu_Handler+0x14>)
 800e572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e576:	bf00      	nop
 800e578:	0800e589 	.word	0x0800e589
 800e57c:	0800e58f 	.word	0x0800e58f
 800e580:	0800e595 	.word	0x0800e595
 800e584:	0800e59b 	.word	0x0800e59b
        case MENU_MAIN:
            displayMainMenu();
 800e588:	f7ff f8e4 	bl	800d754 <displayMainMenu>
            break;
 800e58c:	e008      	b.n	800e5a0 <Menu_Handler+0x3c>
        case MENU_TOTAL_CONTROL:
            displayTotalControlMenu();
 800e58e:	f7ff f95d 	bl	800d84c <displayTotalControlMenu>
            break;
 800e592:	e005      	b.n	800e5a0 <Menu_Handler+0x3c>
        case MENU_SEPARATE_CONTROL:
            displaySeparateControlMenu();
 800e594:	f7ff fa38 	bl	800da08 <displaySeparateControlMenu>
            break;
 800e598:	e002      	b.n	800e5a0 <Menu_Handler+0x3c>
        case MENU_DEVICE_CONTROL:
            displayDeviceControlMenu();
 800e59a:	f7ff fb0f 	bl	800dbbc <displayDeviceControlMenu>
            break;
 800e59e:	bf00      	nop
    }

    handleNavigation();
 800e5a0:	f7ff fe24 	bl	800e1ec <handleNavigation>
}
 800e5a4:	bf00      	nop
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	20000df0 	.word	0x20000df0

0800e5ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800e5ac:	b480      	push	{r7}
 800e5ae:	b083      	sub	sp, #12
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_10) { // ENTER button
 800e5b6:	88fb      	ldrh	r3, [r7, #6]
 800e5b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e5bc:	d108      	bne.n	800e5d0 <HAL_GPIO_EXTI_Callback+0x24>
        downbutton = 0;
 800e5be:	4b14      	ldr	r3, [pc, #80]	@ (800e610 <HAL_GPIO_EXTI_Callback+0x64>)
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	601a      	str	r2, [r3, #0]
        upbutton = 0;
 800e5c4:	4b13      	ldr	r3, [pc, #76]	@ (800e614 <HAL_GPIO_EXTI_Callback+0x68>)
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	601a      	str	r2, [r3, #0]
        enter = 1;
 800e5ca:	4b13      	ldr	r3, [pc, #76]	@ (800e618 <HAL_GPIO_EXTI_Callback+0x6c>)
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	601a      	str	r2, [r3, #0]
    }

    if (GPIO_Pin == GPIO_PIN_11) { // DOWN button
 800e5d0:	88fb      	ldrh	r3, [r7, #6]
 800e5d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e5d6:	d108      	bne.n	800e5ea <HAL_GPIO_EXTI_Callback+0x3e>
        downbutton = 1;
 800e5d8:	4b0d      	ldr	r3, [pc, #52]	@ (800e610 <HAL_GPIO_EXTI_Callback+0x64>)
 800e5da:	2201      	movs	r2, #1
 800e5dc:	601a      	str	r2, [r3, #0]
        upbutton = 0;
 800e5de:	4b0d      	ldr	r3, [pc, #52]	@ (800e614 <HAL_GPIO_EXTI_Callback+0x68>)
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	601a      	str	r2, [r3, #0]
        enter = 0;
 800e5e4:	4b0c      	ldr	r3, [pc, #48]	@ (800e618 <HAL_GPIO_EXTI_Callback+0x6c>)
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	601a      	str	r2, [r3, #0]
    }

    if (GPIO_Pin == GPIO_PIN_9) { // UP button
 800e5ea:	88fb      	ldrh	r3, [r7, #6]
 800e5ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e5f0:	d108      	bne.n	800e604 <HAL_GPIO_EXTI_Callback+0x58>
        downbutton = 0;
 800e5f2:	4b07      	ldr	r3, [pc, #28]	@ (800e610 <HAL_GPIO_EXTI_Callback+0x64>)
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	601a      	str	r2, [r3, #0]
        upbutton = 1;
 800e5f8:	4b06      	ldr	r3, [pc, #24]	@ (800e614 <HAL_GPIO_EXTI_Callback+0x68>)
 800e5fa:	2201      	movs	r2, #1
 800e5fc:	601a      	str	r2, [r3, #0]
        enter = 0;
 800e5fe:	4b06      	ldr	r3, [pc, #24]	@ (800e618 <HAL_GPIO_EXTI_Callback+0x6c>)
 800e600:	2200      	movs	r2, #0
 800e602:	601a      	str	r2, [r3, #0]
    }
}
 800e604:	bf00      	nop
 800e606:	370c      	adds	r7, #12
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr
 800e610:	20000dfc 	.word	0x20000dfc
 800e614:	20000e00 	.word	0x20000e00
 800e618:	20000e04 	.word	0x20000e04

0800e61c <initializeMenu>:


void initializeMenu(void) {
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
    safe_printf("display_init\n\r");
 800e622:	481c      	ldr	r0, [pc, #112]	@ (800e694 <initializeMenu+0x78>)
 800e624:	f001 fc86 	bl	800ff34 <safe_printf>
    current_menu = MENU_MAIN;
 800e628:	4b1b      	ldr	r3, [pc, #108]	@ (800e698 <initializeMenu+0x7c>)
 800e62a:	2200      	movs	r2, #0
 800e62c:	601a      	str	r2, [r3, #0]
    current_selection = 0;
 800e62e:	4b1b      	ldr	r3, [pc, #108]	@ (800e69c <initializeMenu+0x80>)
 800e630:	2200      	movs	r2, #0
 800e632:	601a      	str	r2, [r3, #0]
    current_device = 0;
 800e634:	4b1a      	ldr	r3, [pc, #104]	@ (800e6a0 <initializeMenu+0x84>)
 800e636:	2200      	movs	r2, #0
 800e638:	601a      	str	r2, [r3, #0]
    last_selection = -1;
 800e63a:	4b1a      	ldr	r3, [pc, #104]	@ (800e6a4 <initializeMenu+0x88>)
 800e63c:	f04f 32ff 	mov.w	r2, #4294967295
 800e640:	601a      	str	r2, [r3, #0]
    last_menu = -1;
 800e642:	4b19      	ldr	r3, [pc, #100]	@ (800e6a8 <initializeMenu+0x8c>)
 800e644:	f04f 32ff 	mov.w	r2, #4294967295
 800e648:	601a      	str	r2, [r3, #0]
    menu_drawn = false;
 800e64a:	4b18      	ldr	r3, [pc, #96]	@ (800e6ac <initializeMenu+0x90>)
 800e64c:	2200      	movs	r2, #0
 800e64e:	701a      	strb	r2, [r3, #0]
    buttons_drawn = false;
 800e650:	4b17      	ldr	r3, [pc, #92]	@ (800e6b0 <initializeMenu+0x94>)
 800e652:	2200      	movs	r2, #0
 800e654:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < 4; i++) {
 800e656:	2300      	movs	r3, #0
 800e658:	607b      	str	r3, [r7, #4]
 800e65a:	e011      	b.n	800e680 <initializeMenu+0x64>
        device_states[i] = 0;
 800e65c:	4a15      	ldr	r2, [pc, #84]	@ (800e6b4 <initializeMenu+0x98>)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2100      	movs	r1, #0
 800e662:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        last_device_states[i] = -1;
 800e666:	4a14      	ldr	r2, [pc, #80]	@ (800e6b8 <initializeMenu+0x9c>)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f04f 31ff 	mov.w	r1, #4294967295
 800e66e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        setDeviceState(i, 0);
 800e672:	2100      	movs	r1, #0
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f7ff fb99 	bl	800ddac <setDeviceState>
    for (int i = 0; i < 4; i++) {
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	3301      	adds	r3, #1
 800e67e:	607b      	str	r3, [r7, #4]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2b03      	cmp	r3, #3
 800e684:	ddea      	ble.n	800e65c <initializeMenu+0x40>
    }
    displayMainMenu();
 800e686:	f7ff f865 	bl	800d754 <displayMainMenu>
}
 800e68a:	bf00      	nop
 800e68c:	3708      	adds	r7, #8
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
 800e692:	bf00      	nop
 800e694:	0801bc88 	.word	0x0801bc88
 800e698:	20000df0 	.word	0x20000df0
 800e69c:	20000df4 	.word	0x20000df4
 800e6a0:	20000df8 	.word	0x20000df8
 800e6a4:	2000000c 	.word	0x2000000c
 800e6a8:	20000010 	.word	0x20000010
 800e6ac:	20000e18 	.word	0x20000e18
 800e6b0:	20000e19 	.word	0x20000e19
 800e6b4:	20000e08 	.word	0x20000e08
 800e6b8:	20000014 	.word	0x20000014

0800e6bc <GSM_init>:
#include "gsm_app.h"

extern SIM800_t SIM800;

void GSM_init(void)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	af00      	add	r7, sp, #0
	SIM800.sim.apn = "internet";
 800e6c0:	4b10      	ldr	r3, [pc, #64]	@ (800e704 <GSM_init+0x48>)
 800e6c2:	4a11      	ldr	r2, [pc, #68]	@ (800e708 <GSM_init+0x4c>)
 800e6c4:	601a      	str	r2, [r3, #0]
	SIM800.sim.apn_user = "";
 800e6c6:	4b0f      	ldr	r3, [pc, #60]	@ (800e704 <GSM_init+0x48>)
 800e6c8:	4a10      	ldr	r2, [pc, #64]	@ (800e70c <GSM_init+0x50>)
 800e6ca:	605a      	str	r2, [r3, #4]
	SIM800.sim.apn_pass = "";
 800e6cc:	4b0d      	ldr	r3, [pc, #52]	@ (800e704 <GSM_init+0x48>)
 800e6ce:	4a0f      	ldr	r2, [pc, #60]	@ (800e70c <GSM_init+0x50>)
 800e6d0:	609a      	str	r2, [r3, #8]
	SIM800.mqttServer.host = "mqtt.onwords.in";
 800e6d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e704 <GSM_init+0x48>)
 800e6d4:	4a0e      	ldr	r2, [pc, #56]	@ (800e710 <GSM_init+0x54>)
 800e6d6:	60da      	str	r2, [r3, #12]
	SIM800.mqttServer.port = 1883;
 800e6d8:	4b0a      	ldr	r3, [pc, #40]	@ (800e704 <GSM_init+0x48>)
 800e6da:	f240 725b 	movw	r2, #1883	@ 0x75b
 800e6de:	821a      	strh	r2, [r3, #16]
	SIM800.mqttClient.username = "Appteam";
 800e6e0:	4b08      	ldr	r3, [pc, #32]	@ (800e704 <GSM_init+0x48>)
 800e6e2:	4a0c      	ldr	r2, [pc, #48]	@ (800e714 <GSM_init+0x58>)
 800e6e4:	615a      	str	r2, [r3, #20]
	SIM800.mqttClient.pass = "Appteam@321";
 800e6e6:	4b07      	ldr	r3, [pc, #28]	@ (800e704 <GSM_init+0x48>)
 800e6e8:	4a0b      	ldr	r2, [pc, #44]	@ (800e718 <GSM_init+0x5c>)
 800e6ea:	619a      	str	r2, [r3, #24]
	SIM800.mqttClient.clientID = "TestSub";
 800e6ec:	4b05      	ldr	r3, [pc, #20]	@ (800e704 <GSM_init+0x48>)
 800e6ee:	4a0b      	ldr	r2, [pc, #44]	@ (800e71c <GSM_init+0x60>)
 800e6f0:	61da      	str	r2, [r3, #28]
	SIM800.mqttClient.keepAliveInterval = 60;
 800e6f2:	4b04      	ldr	r3, [pc, #16]	@ (800e704 <GSM_init+0x48>)
 800e6f4:	223c      	movs	r2, #60	@ 0x3c
 800e6f6:	841a      	strh	r2, [r3, #32]
}
 800e6f8:	bf00      	nop
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr
 800e702:	bf00      	nop
 800e704:	20001304 	.word	0x20001304
 800e708:	0801bcc4 	.word	0x0801bcc4
 800e70c:	0801bcd0 	.word	0x0801bcd0
 800e710:	0801bcd4 	.word	0x0801bcd4
 800e714:	0801bce4 	.word	0x0801bce4
 800e718:	0801bcec 	.word	0x0801bcec
 800e71c:	0801bcf8 	.word	0x0801bcf8

0800e720 <GSM_MQTT_Task>:

void GSM_MQTT_Task(void *pvParameters)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b086      	sub	sp, #24
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
	print_task_info();
 800e728:	f001 fbea 	bl	800ff00 <print_task_info>
	uint8_t sub = 0;
 800e72c:	2300      	movs	r3, #0
 800e72e:	75fb      	strb	r3, [r7, #23]
	while(1)
	{
	   if (SIM800.mqttServer.connect == 0)
 800e730:	4b27      	ldr	r3, [pc, #156]	@ (800e7d0 <GSM_MQTT_Task+0xb0>)
 800e732:	7c9b      	ldrb	r3, [r3, #18]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d103      	bne.n	800e740 <GSM_MQTT_Task+0x20>
	   {
			   MQTT_Init();
 800e738:	f7fb fe2a 	bl	800a390 <MQTT_Init>
			   sub = 0;
 800e73c:	2300      	movs	r3, #0
 800e73e:	75fb      	strb	r3, [r7, #23]
	   }
	   if (SIM800.mqttServer.connect == 1)
 800e740:	4b23      	ldr	r3, [pc, #140]	@ (800e7d0 <GSM_MQTT_Task+0xb0>)
 800e742:	7c9b      	ldrb	r3, [r3, #18]
 800e744:	2b01      	cmp	r3, #1
 800e746:	d13e      	bne.n	800e7c6 <GSM_MQTT_Task+0xa6>
	   {
		   if(sub == 0){
 800e748:	7dfb      	ldrb	r3, [r7, #23]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d10a      	bne.n	800e764 <GSM_MQTT_Task+0x44>
			   MQTT_Sub("onwords/4ltc01/status");
 800e74e:	4821      	ldr	r0, [pc, #132]	@ (800e7d4 <GSM_MQTT_Task+0xb4>)
 800e750:	f7fc f858 	bl	800a804 <MQTT_Sub>
			   MQTT_Sub("onwords/4ltc01/getCurrentStatus");
 800e754:	4820      	ldr	r0, [pc, #128]	@ (800e7d8 <GSM_MQTT_Task+0xb8>)
 800e756:	f7fc f855 	bl	800a804 <MQTT_Sub>
			   MQTT_Sub("onwords/4ltc01/currentStatus");
 800e75a:	4820      	ldr	r0, [pc, #128]	@ (800e7dc <GSM_MQTT_Task+0xbc>)
 800e75c:	f7fc f852 	bl	800a804 <MQTT_Sub>
			   sub = 1;
 800e760:	2301      	movs	r3, #1
 800e762:	75fb      	strb	r3, [r7, #23]
		   }


		   if(SIM800.mqttReceive.newEvent)
 800e764:	4b1a      	ldr	r3, [pc, #104]	@ (800e7d0 <GSM_MQTT_Task+0xb0>)
 800e766:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d013      	beq.n	800e796 <GSM_MQTT_Task+0x76>
		   {
			   unsigned char *topic = SIM800.mqttReceive.topic;
 800e76e:	4b1c      	ldr	r3, [pc, #112]	@ (800e7e0 <GSM_MQTT_Task+0xc0>)
 800e770:	613b      	str	r3, [r7, #16]
				unsigned char *payload = SIM800.mqttReceive.payload;
 800e772:	4b1c      	ldr	r3, [pc, #112]	@ (800e7e4 <GSM_MQTT_Task+0xc4>)
 800e774:	60fb      	str	r3, [r7, #12]
				SIM800.mqttReceive.newEvent = 0;
 800e776:	4b16      	ldr	r3, [pc, #88]	@ (800e7d0 <GSM_MQTT_Task+0xb0>)
 800e778:	2200      	movs	r2, #0
 800e77a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
				safe_printf("Topic: %s\n\r", topic);
 800e77e:	6939      	ldr	r1, [r7, #16]
 800e780:	4819      	ldr	r0, [pc, #100]	@ (800e7e8 <GSM_MQTT_Task+0xc8>)
 800e782:	f001 fbd7 	bl	800ff34 <safe_printf>
				safe_printf("Payload: %s\n\r",payload);
 800e786:	68f9      	ldr	r1, [r7, #12]
 800e788:	4818      	ldr	r0, [pc, #96]	@ (800e7ec <GSM_MQTT_Task+0xcc>)
 800e78a:	f001 fbd3 	bl	800ff34 <safe_printf>
				MQTT_Pub("bala", payload);
 800e78e:	68f9      	ldr	r1, [r7, #12]
 800e790:	4817      	ldr	r0, [pc, #92]	@ (800e7f0 <GSM_MQTT_Task+0xd0>)
 800e792:	f7fb ffc9 	bl	800a728 <MQTT_Pub>
		   }
		   if ((millis() - lastKeepAliveTime) >= (KEEP_ALIVE_INTERVAL * 500))
 800e796:	f000 f831 	bl	800e7fc <millis>
 800e79a:	4602      	mov	r2, r0
 800e79c:	4b15      	ldr	r3, [pc, #84]	@ (800e7f4 <GSM_MQTT_Task+0xd4>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	1ad3      	subs	r3, r2, r3
 800e7a2:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d90d      	bls.n	800e7c6 <GSM_MQTT_Task+0xa6>
			{
			   uint8_t pingreq_packet[2] = {0xC0, 0x00};
 800e7aa:	23c0      	movs	r3, #192	@ 0xc0
 800e7ac:	813b      	strh	r3, [r7, #8]
			   HAL_UART_Transmit(UART_SIM800, pingreq_packet, 2, 100);
 800e7ae:	f107 0108 	add.w	r1, r7, #8
 800e7b2:	2364      	movs	r3, #100	@ 0x64
 800e7b4:	2202      	movs	r2, #2
 800e7b6:	4810      	ldr	r0, [pc, #64]	@ (800e7f8 <GSM_MQTT_Task+0xd8>)
 800e7b8:	f003 ffe0 	bl	801277c <HAL_UART_Transmit>
			   lastKeepAliveTime = millis();
 800e7bc:	f000 f81e 	bl	800e7fc <millis>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	4a0c      	ldr	r2, [pc, #48]	@ (800e7f4 <GSM_MQTT_Task+0xd4>)
 800e7c4:	6013      	str	r3, [r2, #0]
			}
	   }
	   vTaskDelay(100);
 800e7c6:	2064      	movs	r0, #100	@ 0x64
 800e7c8:	f006 f86e 	bl	80148a8 <vTaskDelay>
	   if (SIM800.mqttServer.connect == 0)
 800e7cc:	e7b0      	b.n	800e730 <GSM_MQTT_Task+0x10>
 800e7ce:	bf00      	nop
 800e7d0:	20001304 	.word	0x20001304
 800e7d4:	0801bd00 	.word	0x0801bd00
 800e7d8:	0801bd18 	.word	0x0801bd18
 800e7dc:	0801bd38 	.word	0x0801bd38
 800e7e0:	20001438 	.word	0x20001438
 800e7e4:	20001334 	.word	0x20001334
 800e7e8:	0801bd58 	.word	0x0801bd58
 800e7ec:	0801bd64 	.word	0x0801bd64
 800e7f0:	0801bd74 	.word	0x0801bd74
 800e7f4:	200014cc 	.word	0x200014cc
 800e7f8:	20001048 	.word	0x20001048

0800e7fc <millis>:
	}
}

uint32_t millis() {
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800e800:	f001 fc36 	bl	8010070 <HAL_GetTick>
 800e804:	4603      	mov	r3, r0
}
 800e806:	4618      	mov	r0, r3
 800e808:	bd80      	pop	{r7, pc}

0800e80a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e80a:	b580      	push	{r7, lr}
 800e80c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e80e:	f001 fbf9 	bl	8010004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e812:	f000 f813 	bl	800e83c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e816:	f000 f9a3 	bl	800eb60 <MX_GPIO_Init>
  MX_SPI1_Init();
 800e81a:	f000 f881 	bl	800e920 <MX_SPI1_Init>
  MX_SPI2_Init();
 800e81e:	f000 f8b7 	bl	800e990 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800e822:	f000 f949 	bl	800eab8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800e826:	f000 f971 	bl	800eb0c <MX_USART3_UART_Init>
  MX_SPI3_Init();
 800e82a:	f000 f8e5 	bl	800e9f8 <MX_SPI3_Init>
  MX_UART4_Init();
 800e82e:	f000 f919 	bl	800ea64 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  user_app_init();
 800e832:	f001 fb17 	bl	800fe64 <user_app_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800e836:	bf00      	nop
 800e838:	e7fd      	b.n	800e836 <main+0x2c>
	...

0800e83c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b094      	sub	sp, #80	@ 0x50
 800e840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e842:	f107 031c 	add.w	r3, r7, #28
 800e846:	2234      	movs	r2, #52	@ 0x34
 800e848:	2100      	movs	r1, #0
 800e84a:	4618      	mov	r0, r3
 800e84c:	f009 fe7e 	bl	801854c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e850:	f107 0308 	add.w	r3, r7, #8
 800e854:	2200      	movs	r2, #0
 800e856:	601a      	str	r2, [r3, #0]
 800e858:	605a      	str	r2, [r3, #4]
 800e85a:	609a      	str	r2, [r3, #8]
 800e85c:	60da      	str	r2, [r3, #12]
 800e85e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800e860:	2300      	movs	r3, #0
 800e862:	607b      	str	r3, [r7, #4]
 800e864:	4b2c      	ldr	r3, [pc, #176]	@ (800e918 <SystemClock_Config+0xdc>)
 800e866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e868:	4a2b      	ldr	r2, [pc, #172]	@ (800e918 <SystemClock_Config+0xdc>)
 800e86a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e86e:	6413      	str	r3, [r2, #64]	@ 0x40
 800e870:	4b29      	ldr	r3, [pc, #164]	@ (800e918 <SystemClock_Config+0xdc>)
 800e872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e878:	607b      	str	r3, [r7, #4]
 800e87a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e87c:	2300      	movs	r3, #0
 800e87e:	603b      	str	r3, [r7, #0]
 800e880:	4b26      	ldr	r3, [pc, #152]	@ (800e91c <SystemClock_Config+0xe0>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a25      	ldr	r2, [pc, #148]	@ (800e91c <SystemClock_Config+0xe0>)
 800e886:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e88a:	6013      	str	r3, [r2, #0]
 800e88c:	4b23      	ldr	r3, [pc, #140]	@ (800e91c <SystemClock_Config+0xe0>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e894:	603b      	str	r3, [r7, #0]
 800e896:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800e898:	2302      	movs	r3, #2
 800e89a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800e89c:	2301      	movs	r3, #1
 800e89e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800e8a0:	2310      	movs	r3, #16
 800e8a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e8a4:	2302      	movs	r3, #2
 800e8a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800e8ac:	2308      	movs	r3, #8
 800e8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800e8b0:	23b4      	movs	r3, #180	@ 0xb4
 800e8b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e8b4:	2302      	movs	r3, #2
 800e8b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800e8b8:	2302      	movs	r3, #2
 800e8ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800e8bc:	2302      	movs	r3, #2
 800e8be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e8c0:	f107 031c 	add.w	r3, r7, #28
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f002 fab5 	bl	8010e34 <HAL_RCC_OscConfig>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d001      	beq.n	800e8d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800e8d0:	f000 fa30 	bl	800ed34 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800e8d4:	f001 ff68 	bl	80107a8 <HAL_PWREx_EnableOverDrive>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d001      	beq.n	800e8e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800e8de:	f000 fa29 	bl	800ed34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e8e2:	230f      	movs	r3, #15
 800e8e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e8e6:	2302      	movs	r3, #2
 800e8e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e8ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800e8f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e8f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e8f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800e8fa:	f107 0308 	add.w	r3, r7, #8
 800e8fe:	2105      	movs	r1, #5
 800e900:	4618      	mov	r0, r3
 800e902:	f001 ffa1 	bl	8010848 <HAL_RCC_ClockConfig>
 800e906:	4603      	mov	r3, r0
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d001      	beq.n	800e910 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800e90c:	f000 fa12 	bl	800ed34 <Error_Handler>
  }
}
 800e910:	bf00      	nop
 800e912:	3750      	adds	r7, #80	@ 0x50
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}
 800e918:	40023800 	.word	0x40023800
 800e91c:	40007000 	.word	0x40007000

0800e920 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800e924:	4b18      	ldr	r3, [pc, #96]	@ (800e988 <MX_SPI1_Init+0x68>)
 800e926:	4a19      	ldr	r2, [pc, #100]	@ (800e98c <MX_SPI1_Init+0x6c>)
 800e928:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800e92a:	4b17      	ldr	r3, [pc, #92]	@ (800e988 <MX_SPI1_Init+0x68>)
 800e92c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800e930:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800e932:	4b15      	ldr	r3, [pc, #84]	@ (800e988 <MX_SPI1_Init+0x68>)
 800e934:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800e938:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800e93a:	4b13      	ldr	r3, [pc, #76]	@ (800e988 <MX_SPI1_Init+0x68>)
 800e93c:	2200      	movs	r2, #0
 800e93e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e940:	4b11      	ldr	r3, [pc, #68]	@ (800e988 <MX_SPI1_Init+0x68>)
 800e942:	2200      	movs	r2, #0
 800e944:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e946:	4b10      	ldr	r3, [pc, #64]	@ (800e988 <MX_SPI1_Init+0x68>)
 800e948:	2200      	movs	r2, #0
 800e94a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800e94c:	4b0e      	ldr	r3, [pc, #56]	@ (800e988 <MX_SPI1_Init+0x68>)
 800e94e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e952:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800e954:	4b0c      	ldr	r3, [pc, #48]	@ (800e988 <MX_SPI1_Init+0x68>)
 800e956:	2208      	movs	r2, #8
 800e958:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e95a:	4b0b      	ldr	r3, [pc, #44]	@ (800e988 <MX_SPI1_Init+0x68>)
 800e95c:	2200      	movs	r2, #0
 800e95e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800e960:	4b09      	ldr	r3, [pc, #36]	@ (800e988 <MX_SPI1_Init+0x68>)
 800e962:	2200      	movs	r2, #0
 800e964:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e966:	4b08      	ldr	r3, [pc, #32]	@ (800e988 <MX_SPI1_Init+0x68>)
 800e968:	2200      	movs	r2, #0
 800e96a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800e96c:	4b06      	ldr	r3, [pc, #24]	@ (800e988 <MX_SPI1_Init+0x68>)
 800e96e:	220a      	movs	r2, #10
 800e970:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800e972:	4805      	ldr	r0, [pc, #20]	@ (800e988 <MX_SPI1_Init+0x68>)
 800e974:	f002 fcfc 	bl	8011370 <HAL_SPI_Init>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d001      	beq.n	800e982 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800e97e:	f000 f9d9 	bl	800ed34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800e982:	bf00      	nop
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	20000f40 	.word	0x20000f40
 800e98c:	40013000 	.word	0x40013000

0800e990 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800e994:	4b16      	ldr	r3, [pc, #88]	@ (800e9f0 <MX_SPI2_Init+0x60>)
 800e996:	4a17      	ldr	r2, [pc, #92]	@ (800e9f4 <MX_SPI2_Init+0x64>)
 800e998:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800e99a:	4b15      	ldr	r3, [pc, #84]	@ (800e9f0 <MX_SPI2_Init+0x60>)
 800e99c:	2200      	movs	r2, #0
 800e99e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800e9a0:	4b13      	ldr	r3, [pc, #76]	@ (800e9f0 <MX_SPI2_Init+0x60>)
 800e9a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e9a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800e9a8:	4b11      	ldr	r3, [pc, #68]	@ (800e9f0 <MX_SPI2_Init+0x60>)
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e9ae:	4b10      	ldr	r3, [pc, #64]	@ (800e9f0 <MX_SPI2_Init+0x60>)
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e9b4:	4b0e      	ldr	r3, [pc, #56]	@ (800e9f0 <MX_SPI2_Init+0x60>)
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800e9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e9f0 <MX_SPI2_Init+0x60>)
 800e9bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e9c2:	4b0b      	ldr	r3, [pc, #44]	@ (800e9f0 <MX_SPI2_Init+0x60>)
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800e9c8:	4b09      	ldr	r3, [pc, #36]	@ (800e9f0 <MX_SPI2_Init+0x60>)
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e9ce:	4b08      	ldr	r3, [pc, #32]	@ (800e9f0 <MX_SPI2_Init+0x60>)
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800e9d4:	4b06      	ldr	r3, [pc, #24]	@ (800e9f0 <MX_SPI2_Init+0x60>)
 800e9d6:	220a      	movs	r2, #10
 800e9d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800e9da:	4805      	ldr	r0, [pc, #20]	@ (800e9f0 <MX_SPI2_Init+0x60>)
 800e9dc:	f002 fcc8 	bl	8011370 <HAL_SPI_Init>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d001      	beq.n	800e9ea <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 800e9e6:	f000 f9a5 	bl	800ed34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800e9ea:	bf00      	nop
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	20000f98 	.word	0x20000f98
 800e9f4:	40003800 	.word	0x40003800

0800e9f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800e9fc:	4b17      	ldr	r3, [pc, #92]	@ (800ea5c <MX_SPI3_Init+0x64>)
 800e9fe:	4a18      	ldr	r2, [pc, #96]	@ (800ea60 <MX_SPI3_Init+0x68>)
 800ea00:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800ea02:	4b16      	ldr	r3, [pc, #88]	@ (800ea5c <MX_SPI3_Init+0x64>)
 800ea04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800ea08:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800ea0a:	4b14      	ldr	r3, [pc, #80]	@ (800ea5c <MX_SPI3_Init+0x64>)
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800ea10:	4b12      	ldr	r3, [pc, #72]	@ (800ea5c <MX_SPI3_Init+0x64>)
 800ea12:	2200      	movs	r2, #0
 800ea14:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ea16:	4b11      	ldr	r3, [pc, #68]	@ (800ea5c <MX_SPI3_Init+0x64>)
 800ea18:	2200      	movs	r2, #0
 800ea1a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ea1c:	4b0f      	ldr	r3, [pc, #60]	@ (800ea5c <MX_SPI3_Init+0x64>)
 800ea1e:	2200      	movs	r2, #0
 800ea20:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800ea22:	4b0e      	ldr	r3, [pc, #56]	@ (800ea5c <MX_SPI3_Init+0x64>)
 800ea24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea28:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ea2a:	4b0c      	ldr	r3, [pc, #48]	@ (800ea5c <MX_SPI3_Init+0x64>)
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ea30:	4b0a      	ldr	r3, [pc, #40]	@ (800ea5c <MX_SPI3_Init+0x64>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800ea36:	4b09      	ldr	r3, [pc, #36]	@ (800ea5c <MX_SPI3_Init+0x64>)
 800ea38:	2200      	movs	r2, #0
 800ea3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ea3c:	4b07      	ldr	r3, [pc, #28]	@ (800ea5c <MX_SPI3_Init+0x64>)
 800ea3e:	2200      	movs	r2, #0
 800ea40:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800ea42:	4b06      	ldr	r3, [pc, #24]	@ (800ea5c <MX_SPI3_Init+0x64>)
 800ea44:	220a      	movs	r2, #10
 800ea46:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800ea48:	4804      	ldr	r0, [pc, #16]	@ (800ea5c <MX_SPI3_Init+0x64>)
 800ea4a:	f002 fc91 	bl	8011370 <HAL_SPI_Init>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d001      	beq.n	800ea58 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800ea54:	f000 f96e 	bl	800ed34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800ea58:	bf00      	nop
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	20000ff0 	.word	0x20000ff0
 800ea60:	40003c00 	.word	0x40003c00

0800ea64 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800ea68:	4b11      	ldr	r3, [pc, #68]	@ (800eab0 <MX_UART4_Init+0x4c>)
 800ea6a:	4a12      	ldr	r2, [pc, #72]	@ (800eab4 <MX_UART4_Init+0x50>)
 800ea6c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800ea6e:	4b10      	ldr	r3, [pc, #64]	@ (800eab0 <MX_UART4_Init+0x4c>)
 800ea70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800ea74:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800ea76:	4b0e      	ldr	r3, [pc, #56]	@ (800eab0 <MX_UART4_Init+0x4c>)
 800ea78:	2200      	movs	r2, #0
 800ea7a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800ea7c:	4b0c      	ldr	r3, [pc, #48]	@ (800eab0 <MX_UART4_Init+0x4c>)
 800ea7e:	2200      	movs	r2, #0
 800ea80:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800ea82:	4b0b      	ldr	r3, [pc, #44]	@ (800eab0 <MX_UART4_Init+0x4c>)
 800ea84:	2200      	movs	r2, #0
 800ea86:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800ea88:	4b09      	ldr	r3, [pc, #36]	@ (800eab0 <MX_UART4_Init+0x4c>)
 800ea8a:	220c      	movs	r2, #12
 800ea8c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ea8e:	4b08      	ldr	r3, [pc, #32]	@ (800eab0 <MX_UART4_Init+0x4c>)
 800ea90:	2200      	movs	r2, #0
 800ea92:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800ea94:	4b06      	ldr	r3, [pc, #24]	@ (800eab0 <MX_UART4_Init+0x4c>)
 800ea96:	2200      	movs	r2, #0
 800ea98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800ea9a:	4805      	ldr	r0, [pc, #20]	@ (800eab0 <MX_UART4_Init+0x4c>)
 800ea9c:	f003 fe1e 	bl	80126dc <HAL_UART_Init>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d001      	beq.n	800eaaa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800eaa6:	f000 f945 	bl	800ed34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800eaaa:	bf00      	nop
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	20001048 	.word	0x20001048
 800eab4:	40004c00 	.word	0x40004c00

0800eab8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800eabc:	4b11      	ldr	r3, [pc, #68]	@ (800eb04 <MX_USART2_UART_Init+0x4c>)
 800eabe:	4a12      	ldr	r2, [pc, #72]	@ (800eb08 <MX_USART2_UART_Init+0x50>)
 800eac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800eac2:	4b10      	ldr	r3, [pc, #64]	@ (800eb04 <MX_USART2_UART_Init+0x4c>)
 800eac4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800eac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800eaca:	4b0e      	ldr	r3, [pc, #56]	@ (800eb04 <MX_USART2_UART_Init+0x4c>)
 800eacc:	2200      	movs	r2, #0
 800eace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800ead0:	4b0c      	ldr	r3, [pc, #48]	@ (800eb04 <MX_USART2_UART_Init+0x4c>)
 800ead2:	2200      	movs	r2, #0
 800ead4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800ead6:	4b0b      	ldr	r3, [pc, #44]	@ (800eb04 <MX_USART2_UART_Init+0x4c>)
 800ead8:	2200      	movs	r2, #0
 800eada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800eadc:	4b09      	ldr	r3, [pc, #36]	@ (800eb04 <MX_USART2_UART_Init+0x4c>)
 800eade:	220c      	movs	r2, #12
 800eae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800eae2:	4b08      	ldr	r3, [pc, #32]	@ (800eb04 <MX_USART2_UART_Init+0x4c>)
 800eae4:	2200      	movs	r2, #0
 800eae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800eae8:	4b06      	ldr	r3, [pc, #24]	@ (800eb04 <MX_USART2_UART_Init+0x4c>)
 800eaea:	2200      	movs	r2, #0
 800eaec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800eaee:	4805      	ldr	r0, [pc, #20]	@ (800eb04 <MX_USART2_UART_Init+0x4c>)
 800eaf0:	f003 fdf4 	bl	80126dc <HAL_UART_Init>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d001      	beq.n	800eafe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800eafa:	f000 f91b 	bl	800ed34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800eafe:	bf00      	nop
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	20001090 	.word	0x20001090
 800eb08:	40004400 	.word	0x40004400

0800eb0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800eb10:	4b11      	ldr	r3, [pc, #68]	@ (800eb58 <MX_USART3_UART_Init+0x4c>)
 800eb12:	4a12      	ldr	r2, [pc, #72]	@ (800eb5c <MX_USART3_UART_Init+0x50>)
 800eb14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800eb16:	4b10      	ldr	r3, [pc, #64]	@ (800eb58 <MX_USART3_UART_Init+0x4c>)
 800eb18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800eb1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800eb1e:	4b0e      	ldr	r3, [pc, #56]	@ (800eb58 <MX_USART3_UART_Init+0x4c>)
 800eb20:	2200      	movs	r2, #0
 800eb22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800eb24:	4b0c      	ldr	r3, [pc, #48]	@ (800eb58 <MX_USART3_UART_Init+0x4c>)
 800eb26:	2200      	movs	r2, #0
 800eb28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800eb2a:	4b0b      	ldr	r3, [pc, #44]	@ (800eb58 <MX_USART3_UART_Init+0x4c>)
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800eb30:	4b09      	ldr	r3, [pc, #36]	@ (800eb58 <MX_USART3_UART_Init+0x4c>)
 800eb32:	220c      	movs	r2, #12
 800eb34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800eb36:	4b08      	ldr	r3, [pc, #32]	@ (800eb58 <MX_USART3_UART_Init+0x4c>)
 800eb38:	2200      	movs	r2, #0
 800eb3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800eb3c:	4b06      	ldr	r3, [pc, #24]	@ (800eb58 <MX_USART3_UART_Init+0x4c>)
 800eb3e:	2200      	movs	r2, #0
 800eb40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800eb42:	4805      	ldr	r0, [pc, #20]	@ (800eb58 <MX_USART3_UART_Init+0x4c>)
 800eb44:	f003 fdca 	bl	80126dc <HAL_UART_Init>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d001      	beq.n	800eb52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800eb4e:	f000 f8f1 	bl	800ed34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800eb52:	bf00      	nop
 800eb54:	bd80      	pop	{r7, pc}
 800eb56:	bf00      	nop
 800eb58:	200010d8 	.word	0x200010d8
 800eb5c:	40004800 	.word	0x40004800

0800eb60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b08a      	sub	sp, #40	@ 0x28
 800eb64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb66:	f107 0314 	add.w	r3, r7, #20
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	601a      	str	r2, [r3, #0]
 800eb6e:	605a      	str	r2, [r3, #4]
 800eb70:	609a      	str	r2, [r3, #8]
 800eb72:	60da      	str	r2, [r3, #12]
 800eb74:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800eb76:	2300      	movs	r3, #0
 800eb78:	613b      	str	r3, [r7, #16]
 800eb7a:	4b60      	ldr	r3, [pc, #384]	@ (800ecfc <MX_GPIO_Init+0x19c>)
 800eb7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb7e:	4a5f      	ldr	r2, [pc, #380]	@ (800ecfc <MX_GPIO_Init+0x19c>)
 800eb80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb84:	6313      	str	r3, [r2, #48]	@ 0x30
 800eb86:	4b5d      	ldr	r3, [pc, #372]	@ (800ecfc <MX_GPIO_Init+0x19c>)
 800eb88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb8e:	613b      	str	r3, [r7, #16]
 800eb90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800eb92:	2300      	movs	r3, #0
 800eb94:	60fb      	str	r3, [r7, #12]
 800eb96:	4b59      	ldr	r3, [pc, #356]	@ (800ecfc <MX_GPIO_Init+0x19c>)
 800eb98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb9a:	4a58      	ldr	r2, [pc, #352]	@ (800ecfc <MX_GPIO_Init+0x19c>)
 800eb9c:	f043 0304 	orr.w	r3, r3, #4
 800eba0:	6313      	str	r3, [r2, #48]	@ 0x30
 800eba2:	4b56      	ldr	r3, [pc, #344]	@ (800ecfc <MX_GPIO_Init+0x19c>)
 800eba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eba6:	f003 0304 	and.w	r3, r3, #4
 800ebaa:	60fb      	str	r3, [r7, #12]
 800ebac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ebae:	2300      	movs	r3, #0
 800ebb0:	60bb      	str	r3, [r7, #8]
 800ebb2:	4b52      	ldr	r3, [pc, #328]	@ (800ecfc <MX_GPIO_Init+0x19c>)
 800ebb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebb6:	4a51      	ldr	r2, [pc, #324]	@ (800ecfc <MX_GPIO_Init+0x19c>)
 800ebb8:	f043 0301 	orr.w	r3, r3, #1
 800ebbc:	6313      	str	r3, [r2, #48]	@ 0x30
 800ebbe:	4b4f      	ldr	r3, [pc, #316]	@ (800ecfc <MX_GPIO_Init+0x19c>)
 800ebc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebc2:	f003 0301 	and.w	r3, r3, #1
 800ebc6:	60bb      	str	r3, [r7, #8]
 800ebc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ebca:	2300      	movs	r3, #0
 800ebcc:	607b      	str	r3, [r7, #4]
 800ebce:	4b4b      	ldr	r3, [pc, #300]	@ (800ecfc <MX_GPIO_Init+0x19c>)
 800ebd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebd2:	4a4a      	ldr	r2, [pc, #296]	@ (800ecfc <MX_GPIO_Init+0x19c>)
 800ebd4:	f043 0302 	orr.w	r3, r3, #2
 800ebd8:	6313      	str	r3, [r2, #48]	@ 0x30
 800ebda:	4b48      	ldr	r3, [pc, #288]	@ (800ecfc <MX_GPIO_Init+0x19c>)
 800ebdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebde:	f003 0302 	and.w	r3, r3, #2
 800ebe2:	607b      	str	r3, [r7, #4]
 800ebe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_LED3_GPIO_Port, TOUCH_LED3_Pin, GPIO_PIN_RESET);
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	2102      	movs	r1, #2
 800ebea:	4845      	ldr	r0, [pc, #276]	@ (800ed00 <MX_GPIO_Init+0x1a0>)
 800ebec:	f001 fd90 	bl	8010710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4|L_RELAY_4_Pin, GPIO_PIN_RESET);
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	215c      	movs	r1, #92	@ 0x5c
 800ebf4:	4843      	ldr	r0, [pc, #268]	@ (800ed04 <MX_GPIO_Init+0x1a4>)
 800ebf6:	f001 fd8b 	bl	8010710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_BACKLIT_Pin|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	2113      	movs	r1, #19
 800ebfe:	4842      	ldr	r0, [pc, #264]	@ (800ed08 <MX_GPIO_Init+0x1a8>)
 800ec00:	f001 fd86 	bl	8010710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_LED4_GPIO_Port, TOUCH_LED4_Pin, GPIO_PIN_RESET);
 800ec04:	2200      	movs	r2, #0
 800ec06:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ec0a:	4840      	ldr	r0, [pc, #256]	@ (800ed0c <MX_GPIO_Init+0x1ac>)
 800ec0c:	f001 fd80 	bl	8010710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L_RELAY_2_Pin|L_RELAY_1_Pin, GPIO_PIN_SET);
 800ec10:	2201      	movs	r2, #1
 800ec12:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800ec16:	483b      	ldr	r0, [pc, #236]	@ (800ed04 <MX_GPIO_Init+0x1a4>)
 800ec18:	f001 fd7a 	bl	8010710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_RELAY_3_GPIO_Port, L_RELAY_3_Pin, GPIO_PIN_SET);
 800ec1c:	2201      	movs	r2, #1
 800ec1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ec22:	483a      	ldr	r0, [pc, #232]	@ (800ed0c <MX_GPIO_Init+0x1ac>)
 800ec24:	f001 fd74 	bl	8010710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TOUCH_LED3_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED3_Pin;
 800ec28:	2302      	movs	r3, #2
 800ec2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec30:	2300      	movs	r3, #0
 800ec32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ec34:	2300      	movs	r3, #0
 800ec36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_LED3_GPIO_Port, &GPIO_InitStruct);
 800ec38:	f107 0314 	add.w	r3, r7, #20
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	4830      	ldr	r0, [pc, #192]	@ (800ed00 <MX_GPIO_Init+0x1a0>)
 800ec40:	f001 fbba 	bl	80103b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_LED2_Pin TOUCH_LED1_Pin PC4 L_RELAY_2_Pin
                           L_RELAY_1_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED2_Pin|TOUCH_LED1_Pin|GPIO_PIN_4|L_RELAY_2_Pin
 800ec44:	f44f 7347 	mov.w	r3, #796	@ 0x31c
 800ec48:	617b      	str	r3, [r7, #20]
                          |L_RELAY_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ec52:	2300      	movs	r3, #0
 800ec54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ec56:	f107 0314 	add.w	r3, r7, #20
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	4829      	ldr	r0, [pc, #164]	@ (800ed04 <MX_GPIO_Init+0x1a4>)
 800ec5e:	f001 fbab 	bl	80103b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_BACKLIT_Pin PA1 PA4 */
  GPIO_InitStruct.Pin = DISP_BACKLIT_Pin|GPIO_PIN_1|GPIO_PIN_4;
 800ec62:	2313      	movs	r3, #19
 800ec64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ec66:	2301      	movs	r3, #1
 800ec68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec72:	f107 0314 	add.w	r3, r7, #20
 800ec76:	4619      	mov	r1, r3
 800ec78:	4823      	ldr	r0, [pc, #140]	@ (800ed08 <MX_GPIO_Init+0x1a8>)
 800ec7a:	f001 fb9d 	bl	80103b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_LED4_Pin L_RELAY_3_Pin */
  GPIO_InitStruct.Pin = TOUCH_LED4_Pin|L_RELAY_3_Pin;
 800ec7e:	f44f 4382 	mov.w	r3, #16640	@ 0x4100
 800ec82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ec84:	2301      	movs	r3, #1
 800ec86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ec90:	f107 0314 	add.w	r3, r7, #20
 800ec94:	4619      	mov	r1, r3
 800ec96:	481d      	ldr	r0, [pc, #116]	@ (800ed0c <MX_GPIO_Init+0x1ac>)
 800ec98:	f001 fb8e 	bl	80103b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_RELAY_4_Pin */
  GPIO_InitStruct.Pin = L_RELAY_4_Pin;
 800ec9c:	2340      	movs	r3, #64	@ 0x40
 800ec9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800eca0:	2301      	movs	r3, #1
 800eca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800eca4:	2302      	movs	r3, #2
 800eca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(L_RELAY_4_GPIO_Port, &GPIO_InitStruct);
 800ecac:	f107 0314 	add.w	r3, r7, #20
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	4814      	ldr	r0, [pc, #80]	@ (800ed04 <MX_GPIO_Init+0x1a4>)
 800ecb4:	f001 fb80 	bl	80103b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800ecb8:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 800ecbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800ecbe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800ecc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ecc4:	2302      	movs	r3, #2
 800ecc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ecc8:	f107 0314 	add.w	r3, r7, #20
 800eccc:	4619      	mov	r1, r3
 800ecce:	480e      	ldr	r0, [pc, #56]	@ (800ed08 <MX_GPIO_Init+0x1a8>)
 800ecd0:	f001 fb72 	bl	80103b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	2100      	movs	r1, #0
 800ecd8:	2017      	movs	r0, #23
 800ecda:	f001 fab1 	bl	8010240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800ecde:	2017      	movs	r0, #23
 800ece0:	f001 faca 	bl	8010278 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800ece4:	2200      	movs	r2, #0
 800ece6:	2100      	movs	r1, #0
 800ece8:	2028      	movs	r0, #40	@ 0x28
 800ecea:	f001 faa9 	bl	8010240 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800ecee:	2028      	movs	r0, #40	@ 0x28
 800ecf0:	f001 fac2 	bl	8010278 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800ecf4:	bf00      	nop
 800ecf6:	3728      	adds	r7, #40	@ 0x28
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	40023800 	.word	0x40023800
 800ed00:	40021c00 	.word	0x40021c00
 800ed04:	40020800 	.word	0x40020800
 800ed08:	40020000 	.word	0x40020000
 800ed0c:	40020400 	.word	0x40020400

0800ed10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b082      	sub	sp, #8
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	4a04      	ldr	r2, [pc, #16]	@ (800ed30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d101      	bne.n	800ed26 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800ed22:	f001 f991 	bl	8010048 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800ed26:	bf00      	nop
 800ed28:	3708      	adds	r7, #8
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	40010000 	.word	0x40010000

0800ed34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ed34:	b480      	push	{r7}
 800ed36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800ed38:	b672      	cpsid	i
}
 800ed3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800ed3c:	bf00      	nop
 800ed3e:	e7fd      	b.n	800ed3c <Error_Handler+0x8>

0800ed40 <displayOnwardsLogoOptimized>:
    ST7735_WriteString(start_x, start_y, "on", Font_16x26, RED, BLACK);
    ST7735_WriteString(start_x + 32, start_y, "words", Font_16x26, WHITE, BLACK);
}

// Optimized version with exact positioning
void displayOnwardsLogoOptimized(void) {
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b086      	sub	sp, #24
 800ed44:	af04      	add	r7, sp, #16
    ST7735_SetRotation(1);
 800ed46:	2001      	movs	r0, #1
 800ed48:	f7fb ffbe 	bl	800acc8 <ST7735_SetRotation>
    fillScreen(BLACK);
 800ed4c:	2000      	movs	r0, #0
 800ed4e:	f7fa fdc1 	bl	80098d4 <fillScreen>
    // Exact calculations for 160×128 display
    // Font_16x26: each character is 16px wide, 26px tall
    // "onwards" = 7 characters = 112px total width

    // Perfect center positioning
    int x_pos = 24;  // (160 - 112) / 2 = 24
 800ed52:	2318      	movs	r3, #24
 800ed54:	607b      	str	r3, [r7, #4]
    int y_pos = 51;  // (128 - 26) / 2 = 51
 800ed56:	2333      	movs	r3, #51	@ 0x33
 800ed58:	603b      	str	r3, [r7, #0]

    // Draw "on" in red (positions 0-1, 32px wide)
    ST7735_WriteString(x_pos, y_pos, "on", Font_16x26, RED, BLACK);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	b298      	uxth	r0, r3
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	b299      	uxth	r1, r3
 800ed62:	4b11      	ldr	r3, [pc, #68]	@ (800eda8 <displayOnwardsLogoOptimized+0x68>)
 800ed64:	2200      	movs	r2, #0
 800ed66:	9202      	str	r2, [sp, #8]
 800ed68:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800ed6c:	9201      	str	r2, [sp, #4]
 800ed6e:	685a      	ldr	r2, [r3, #4]
 800ed70:	9200      	str	r2, [sp, #0]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	4a0d      	ldr	r2, [pc, #52]	@ (800edac <displayOnwardsLogoOptimized+0x6c>)
 800ed76:	f7fc f8dd 	bl	800af34 <ST7735_WriteString>

    // Draw "wards" in white (positions 2-6, 80px wide)
    ST7735_WriteString(x_pos + 32, y_pos, "words", Font_16x26, WHITE, BLACK);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	3320      	adds	r3, #32
 800ed80:	b298      	uxth	r0, r3
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	b299      	uxth	r1, r3
 800ed86:	4b08      	ldr	r3, [pc, #32]	@ (800eda8 <displayOnwardsLogoOptimized+0x68>)
 800ed88:	2200      	movs	r2, #0
 800ed8a:	9202      	str	r2, [sp, #8]
 800ed8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ed90:	9201      	str	r2, [sp, #4]
 800ed92:	685a      	ldr	r2, [r3, #4]
 800ed94:	9200      	str	r2, [sp, #0]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4a05      	ldr	r2, [pc, #20]	@ (800edb0 <displayOnwardsLogoOptimized+0x70>)
 800ed9a:	f7fc f8cb 	bl	800af34 <ST7735_WriteString>
}
 800ed9e:	bf00      	nop
 800eda0:	3708      	adds	r7, #8
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	2000002c 	.word	0x2000002c
 800edac:	0801bd7c 	.word	0x0801bd7c
 800edb0:	0801bd80 	.word	0x0801bd80

0800edb4 <showStartupLogoAndMenu>:
    HAL_Delay(3000);
    printf("Logo display complete\n");
}

// Integration with your menu system
void showStartupLogoAndMenu(void) {
 800edb4:	b580      	push	{r7, lr}
 800edb6:	af00      	add	r7, sp, #0
    // Show logo first
    displayOnwardsLogoOptimized();
 800edb8:	f7ff ffc2 	bl	800ed40 <displayOnwardsLogoOptimized>
    HAL_Delay(3000);
 800edbc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800edc0:	f001 f962 	bl	8010088 <HAL_Delay>

    // Transition to menu
    fillScreen(BLACK);
 800edc4:	2000      	movs	r0, #0
 800edc6:	f7fa fd85 	bl	80098d4 <fillScreen>
    HAL_Delay(200);
 800edca:	20c8      	movs	r0, #200	@ 0xc8
 800edcc:	f001 f95c 	bl	8010088 <HAL_Delay>
}
 800edd0:	bf00      	nop
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <SPI_Handler>:
volatile uint16_t spiHead = 0;
volatile uint16_t spiTail = 0;
uint8_t spiRxByte;

void SPI_Handler(void *param)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b0a4      	sub	sp, #144	@ 0x90
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
    uint8_t jsonBuffer[SPI_RING_BUFFER_SIZE];
    uint8_t index = 0;
 800eddc:	2300      	movs	r3, #0
 800edde:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    bool collecting = false;
 800ede2:	2300      	movs	r3, #0
 800ede4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    while (1)
    {
        if(spiHead != spiTail)
 800ede8:	4b37      	ldr	r3, [pc, #220]	@ (800eec8 <SPI_Handler+0xf4>)
 800edea:	881b      	ldrh	r3, [r3, #0]
 800edec:	b29a      	uxth	r2, r3
 800edee:	4b37      	ldr	r3, [pc, #220]	@ (800eecc <SPI_Handler+0xf8>)
 800edf0:	881b      	ldrh	r3, [r3, #0]
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d062      	beq.n	800eebe <SPI_Handler+0xea>
        {
        	uint8_t byte = spiRingBuffer[spiTail];
 800edf8:	4b34      	ldr	r3, [pc, #208]	@ (800eecc <SPI_Handler+0xf8>)
 800edfa:	881b      	ldrh	r3, [r3, #0]
 800edfc:	b29b      	uxth	r3, r3
 800edfe:	461a      	mov	r2, r3
 800ee00:	4b33      	ldr	r3, [pc, #204]	@ (800eed0 <SPI_Handler+0xfc>)
 800ee02:	5c9b      	ldrb	r3, [r3, r2]
 800ee04:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
        	spiTail = (spiTail + 1) % SPI_RING_BUFFER_SIZE;
 800ee08:	4b30      	ldr	r3, [pc, #192]	@ (800eecc <SPI_Handler+0xf8>)
 800ee0a:	881b      	ldrh	r3, [r3, #0]
 800ee0c:	b29b      	uxth	r3, r3
 800ee0e:	3301      	adds	r3, #1
 800ee10:	425a      	negs	r2, r3
 800ee12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ee16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ee1a:	bf58      	it	pl
 800ee1c:	4253      	negpl	r3, r2
 800ee1e:	b29a      	uxth	r2, r3
 800ee20:	4b2a      	ldr	r3, [pc, #168]	@ (800eecc <SPI_Handler+0xf8>)
 800ee22:	801a      	strh	r2, [r3, #0]

        	if(byte == '{')
 800ee24:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800ee28:	2b7b      	cmp	r3, #123	@ 0x7b
 800ee2a:	d111      	bne.n	800ee50 <SPI_Handler+0x7c>
        	{
        		collecting = true;
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        		index = 0;
 800ee32:	2300      	movs	r3, #0
 800ee34:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        		jsonBuffer[index++] = byte;
 800ee38:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ee3c:	1c5a      	adds	r2, r3, #1
 800ee3e:	f887 208f 	strb.w	r2, [r7, #143]	@ 0x8f
 800ee42:	3390      	adds	r3, #144	@ 0x90
 800ee44:	443b      	add	r3, r7
 800ee46:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800ee4a:	f803 2c84 	strb.w	r2, [r3, #-132]
 800ee4e:	e7cb      	b.n	800ede8 <SPI_Handler+0x14>
        	}
        	else if(collecting)
 800ee50:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d0c7      	beq.n	800ede8 <SPI_Handler+0x14>
        	{
        		if(index < SPI_RING_BUFFER_SIZE - 1)
 800ee58:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ee5c:	2b7e      	cmp	r3, #126	@ 0x7e
 800ee5e:	d827      	bhi.n	800eeb0 <SPI_Handler+0xdc>
        		{
        			jsonBuffer[index++] = byte;
 800ee60:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ee64:	1c5a      	adds	r2, r3, #1
 800ee66:	f887 208f 	strb.w	r2, [r7, #143]	@ 0x8f
 800ee6a:	3390      	adds	r3, #144	@ 0x90
 800ee6c:	443b      	add	r3, r7
 800ee6e:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800ee72:	f803 2c84 	strb.w	r2, [r3, #-132]
        			if(byte == '}')
 800ee76:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800ee7a:	2b7d      	cmp	r3, #125	@ 0x7d
 800ee7c:	d1b4      	bne.n	800ede8 <SPI_Handler+0x14>
        			{
        				jsonBuffer[index] = '\0';
 800ee7e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ee82:	3390      	adds	r3, #144	@ 0x90
 800ee84:	443b      	add	r3, r7
 800ee86:	2200      	movs	r2, #0
 800ee88:	f803 2c84 	strb.w	r2, [r3, #-132]
        				safe_printf("JSON received: %s\n", jsonBuffer);
 800ee8c:	f107 030c 	add.w	r3, r7, #12
 800ee90:	4619      	mov	r1, r3
 800ee92:	4810      	ldr	r0, [pc, #64]	@ (800eed4 <SPI_Handler+0x100>)
 800ee94:	f001 f84e 	bl	800ff34 <safe_printf>
        				process_spi_json(jsonBuffer);
 800ee98:	f107 030c 	add.w	r3, r7, #12
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f000 f81b 	bl	800eed8 <process_spi_json>
        				collecting = false;
 800eea2:	2300      	movs	r3, #0
 800eea4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        				index = 0;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800eeae:	e79b      	b.n	800ede8 <SPI_Handler+0x14>
        			}
        		}
        		else
        		{
        			collecting = false;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        			index = 0;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800eebc:	e794      	b.n	800ede8 <SPI_Handler+0x14>
        		}
        	}
        }
        else
        {
        	vTaskDelay(pdMS_TO_TICKS(5));
 800eebe:	2005      	movs	r0, #5
 800eec0:	f005 fcf2 	bl	80148a8 <vTaskDelay>
        if(spiHead != spiTail)
 800eec4:	e790      	b.n	800ede8 <SPI_Handler+0x14>
 800eec6:	bf00      	nop
 800eec8:	200011a0 	.word	0x200011a0
 800eecc:	200011a2 	.word	0x200011a2
 800eed0:	20001120 	.word	0x20001120
 800eed4:	0801bdcc 	.word	0x0801bdcc

0800eed8 <process_spi_json>:
    }
}


void process_spi_json(uint8_t *jsonBuffer)
{
 800eed8:	b590      	push	{r4, r7, lr}
 800eeda:	b089      	sub	sp, #36	@ 0x24
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
	uint8_t deviceState;
	GPIO_PinState state;
	int deviceIndex = -1;
 800eee0:	f04f 33ff 	mov.w	r3, #4294967295
 800eee4:	61fb      	str	r3, [r7, #28]
	cJSON *jsonObj = cJSON_Parse((char *)jsonBuffer);
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f7fd f9be 	bl	800c268 <cJSON_Parse>
 800eeec:	61b8      	str	r0, [r7, #24]
	if(jsonObj)
 800eeee:	69bb      	ldr	r3, [r7, #24]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	f000 80b8 	beq.w	800f066 <process_spi_json+0x18e>
	{
		cJSON *device = cJSON_GetObjectItem(jsonObj, "device");
 800eef6:	495e      	ldr	r1, [pc, #376]	@ (800f070 <process_spi_json+0x198>)
 800eef8:	69b8      	ldr	r0, [r7, #24]
 800eefa:	f7fd ffe9 	bl	800ced0 <cJSON_GetObjectItem>
 800eefe:	6178      	str	r0, [r7, #20]
		if(device)
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d03c      	beq.n	800ef80 <process_spi_json+0xa8>
		{
			if(strcmp(device->valuestring, "L1") == 0) deviceIndex = 0;
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	691b      	ldr	r3, [r3, #16]
 800ef0a:	495a      	ldr	r1, [pc, #360]	@ (800f074 <process_spi_json+0x19c>)
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7f9 f97f 	bl	8008210 <strcmp>
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d102      	bne.n	800ef1e <process_spi_json+0x46>
 800ef18:	2300      	movs	r3, #0
 800ef1a:	61fb      	str	r3, [r7, #28]
 800ef1c:	e030      	b.n	800ef80 <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "L2") == 0) deviceIndex = 1;
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	691b      	ldr	r3, [r3, #16]
 800ef22:	4955      	ldr	r1, [pc, #340]	@ (800f078 <process_spi_json+0x1a0>)
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7f9 f973 	bl	8008210 <strcmp>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d102      	bne.n	800ef36 <process_spi_json+0x5e>
 800ef30:	2301      	movs	r3, #1
 800ef32:	61fb      	str	r3, [r7, #28]
 800ef34:	e024      	b.n	800ef80 <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "L3") == 0) deviceIndex = 2;
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	691b      	ldr	r3, [r3, #16]
 800ef3a:	4950      	ldr	r1, [pc, #320]	@ (800f07c <process_spi_json+0x1a4>)
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7f9 f967 	bl	8008210 <strcmp>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d102      	bne.n	800ef4e <process_spi_json+0x76>
 800ef48:	2302      	movs	r3, #2
 800ef4a:	61fb      	str	r3, [r7, #28]
 800ef4c:	e018      	b.n	800ef80 <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "L4") == 0) deviceIndex = 3;
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	691b      	ldr	r3, [r3, #16]
 800ef52:	494b      	ldr	r1, [pc, #300]	@ (800f080 <process_spi_json+0x1a8>)
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7f9 f95b 	bl	8008210 <strcmp>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d102      	bne.n	800ef66 <process_spi_json+0x8e>
 800ef60:	2303      	movs	r3, #3
 800ef62:	61fb      	str	r3, [r7, #28]
 800ef64:	e00c      	b.n	800ef80 <process_spi_json+0xa8>
			else if(strcmp(device->valuestring, "D1") == 0)
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	691b      	ldr	r3, [r3, #16]
 800ef6a:	4946      	ldr	r1, [pc, #280]	@ (800f084 <process_spi_json+0x1ac>)
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7f9 f94f 	bl	8008210 <strcmp>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d103      	bne.n	800ef80 <process_spi_json+0xa8>
			{
				HAL_GPIO_TogglePin(DISP_BACKLIT_GPIO_Port, DISP_BACKLIT_Pin);
 800ef78:	2101      	movs	r1, #1
 800ef7a:	4843      	ldr	r0, [pc, #268]	@ (800f088 <process_spi_json+0x1b0>)
 800ef7c:	f001 fbe1 	bl	8010742 <HAL_GPIO_TogglePin>
			}
		}
		if(deviceIndex != -1)
 800ef80:	69fb      	ldr	r3, [r7, #28]
 800ef82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef86:	d06e      	beq.n	800f066 <process_spi_json+0x18e>
		{
			cJSON *status = cJSON_CreateObject();
 800ef88:	f7fe f8c6 	bl	800d118 <cJSON_CreateObject>
 800ef8c:	6138      	str	r0, [r7, #16]
			if(xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800ef8e:	4b3f      	ldr	r3, [pc, #252]	@ (800f08c <process_spi_json+0x1b4>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	2164      	movs	r1, #100	@ 0x64
 800ef94:	4618      	mov	r0, r3
 800ef96:	f005 f8ab 	bl	80140f0 <xQueueSemaphoreTake>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	2b01      	cmp	r3, #1
 800ef9e:	d15a      	bne.n	800f056 <process_spi_json+0x17e>
			{
				HAL_GPIO_TogglePin(led_ports[deviceIndex], led_pins[deviceIndex]);
 800efa0:	4a3b      	ldr	r2, [pc, #236]	@ (800f090 <process_spi_json+0x1b8>)
 800efa2:	69fb      	ldr	r3, [r7, #28]
 800efa4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800efa8:	493a      	ldr	r1, [pc, #232]	@ (800f094 <process_spi_json+0x1bc>)
 800efaa:	69fb      	ldr	r3, [r7, #28]
 800efac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800efb0:	4619      	mov	r1, r3
 800efb2:	4610      	mov	r0, r2
 800efb4:	f001 fbc5 	bl	8010742 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(relay_ports[deviceIndex], relay_pins[deviceIndex]);
 800efb8:	4a37      	ldr	r2, [pc, #220]	@ (800f098 <process_spi_json+0x1c0>)
 800efba:	69fb      	ldr	r3, [r7, #28]
 800efbc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800efc0:	4936      	ldr	r1, [pc, #216]	@ (800f09c <process_spi_json+0x1c4>)
 800efc2:	69fb      	ldr	r3, [r7, #28]
 800efc4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800efc8:	4619      	mov	r1, r3
 800efca:	4610      	mov	r0, r2
 800efcc:	f001 fbb9 	bl	8010742 <HAL_GPIO_TogglePin>
				state = HAL_GPIO_ReadPin(led_ports[deviceIndex], led_pins[deviceIndex]);
 800efd0:	4a2f      	ldr	r2, [pc, #188]	@ (800f090 <process_spi_json+0x1b8>)
 800efd2:	69fb      	ldr	r3, [r7, #28]
 800efd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800efd8:	492e      	ldr	r1, [pc, #184]	@ (800f094 <process_spi_json+0x1bc>)
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800efe0:	4619      	mov	r1, r3
 800efe2:	4610      	mov	r0, r2
 800efe4:	f001 fb7c 	bl	80106e0 <HAL_GPIO_ReadPin>
 800efe8:	4603      	mov	r3, r0
 800efea:	73fb      	strb	r3, [r7, #15]
				deviceState = (state == GPIO_PIN_SET) ? 1 : 0;
 800efec:	7bfb      	ldrb	r3, [r7, #15]
 800efee:	2b01      	cmp	r3, #1
 800eff0:	bf0c      	ite	eq
 800eff2:	2301      	moveq	r3, #1
 800eff4:	2300      	movne	r3, #0
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	73bb      	strb	r3, [r7, #14]
				global_device_states[deviceIndex] = deviceState;
 800effa:	7bba      	ldrb	r2, [r7, #14]
 800effc:	4928      	ldr	r1, [pc, #160]	@ (800f0a0 <process_spi_json+0x1c8>)
 800effe:	69fb      	ldr	r3, [r7, #28]
 800f000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				cJSON_AddNumberToObject(status, devices[deviceIndex], global_device_states[deviceIndex]);
 800f004:	4a27      	ldr	r2, [pc, #156]	@ (800f0a4 <process_spi_json+0x1cc>)
 800f006:	69fb      	ldr	r3, [r7, #28]
 800f008:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f00c:	4a24      	ldr	r2, [pc, #144]	@ (800f0a0 <process_spi_json+0x1c8>)
 800f00e:	69fb      	ldr	r3, [r7, #28]
 800f010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f014:	4618      	mov	r0, r3
 800f016:	f7f9 fab5 	bl	8008584 <__aeabi_i2d>
 800f01a:	4602      	mov	r2, r0
 800f01c:	460b      	mov	r3, r1
 800f01e:	ec43 2b10 	vmov	d0, r2, r3
 800f022:	4621      	mov	r1, r4
 800f024:	6938      	ldr	r0, [r7, #16]
 800f026:	f7fe f809 	bl	800d03c <cJSON_AddNumberToObject>
				safe_printf("TOUCH: Device %d set to %s\n", deviceIndex + 1, global_device_states[deviceIndex] ? "ON" : "OFF");
 800f02a:	69fb      	ldr	r3, [r7, #28]
 800f02c:	1c59      	adds	r1, r3, #1
 800f02e:	4a1c      	ldr	r2, [pc, #112]	@ (800f0a0 <process_spi_json+0x1c8>)
 800f030:	69fb      	ldr	r3, [r7, #28]
 800f032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d001      	beq.n	800f03e <process_spi_json+0x166>
 800f03a:	4b1b      	ldr	r3, [pc, #108]	@ (800f0a8 <process_spi_json+0x1d0>)
 800f03c:	e000      	b.n	800f040 <process_spi_json+0x168>
 800f03e:	4b1b      	ldr	r3, [pc, #108]	@ (800f0ac <process_spi_json+0x1d4>)
 800f040:	461a      	mov	r2, r3
 800f042:	481b      	ldr	r0, [pc, #108]	@ (800f0b0 <process_spi_json+0x1d8>)
 800f044:	f000 ff76 	bl	800ff34 <safe_printf>
				xSemaphoreGive(deviceStateMutex);
 800f048:	4b10      	ldr	r3, [pc, #64]	@ (800f08c <process_spi_json+0x1b4>)
 800f04a:	6818      	ldr	r0, [r3, #0]
 800f04c:	2300      	movs	r3, #0
 800f04e:	2200      	movs	r2, #0
 800f050:	2100      	movs	r1, #0
 800f052:	f004 fdbb 	bl	8013bcc <xQueueGenericSend>
			}
			updateToDisplayMenu();
 800f056:	f7fe f8a9 	bl	800d1ac <updateToDisplayMenu>
			send_json_response(status);
 800f05a:	6938      	ldr	r0, [r7, #16]
 800f05c:	f000 fc7a 	bl	800f954 <send_json_response>
			cJSON_Delete(status);
 800f060:	6938      	ldr	r0, [r7, #16]
 800f062:	f7fc f8ed 	bl	800b240 <cJSON_Delete>
		}
	}
}
 800f066:	bf00      	nop
 800f068:	3724      	adds	r7, #36	@ 0x24
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd90      	pop	{r4, r7, pc}
 800f06e:	bf00      	nop
 800f070:	0801bde0 	.word	0x0801bde0
 800f074:	0801bde8 	.word	0x0801bde8
 800f078:	0801bdec 	.word	0x0801bdec
 800f07c:	0801bdf0 	.word	0x0801bdf0
 800f080:	0801bdf4 	.word	0x0801bdf4
 800f084:	0801bdf8 	.word	0x0801bdf8
 800f088:	40020000 	.word	0x40020000
 800f08c:	200012f8 	.word	0x200012f8
 800f090:	20000048 	.word	0x20000048
 800f094:	20000068 	.word	0x20000068
 800f098:	20000058 	.word	0x20000058
 800f09c:	20000070 	.word	0x20000070
 800f0a0:	200014bc 	.word	0x200014bc
 800f0a4:	20000038 	.word	0x20000038
 800f0a8:	0801bdfc 	.word	0x0801bdfc
 800f0ac:	0801be00 	.word	0x0801be00
 800f0b0:	0801be04 	.word	0x0801be04

0800f0b4 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b084      	sub	sp, #16
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	4a1b      	ldr	r2, [pc, #108]	@ (800f130 <HAL_SPI_RxCpltCallback+0x7c>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d125      	bne.n	800f112 <HAL_SPI_RxCpltCallback+0x5e>
    {
        uint16_t nextHead = (spiHead + 1) % SPI_RING_BUFFER_SIZE;
 800f0c6:	4b1b      	ldr	r3, [pc, #108]	@ (800f134 <HAL_SPI_RxCpltCallback+0x80>)
 800f0c8:	881b      	ldrh	r3, [r3, #0]
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	3301      	adds	r3, #1
 800f0ce:	425a      	negs	r2, r3
 800f0d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f0d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f0d8:	bf58      	it	pl
 800f0da:	4253      	negpl	r3, r2
 800f0dc:	81fb      	strh	r3, [r7, #14]
        if(nextHead != spiTail)
 800f0de:	4b16      	ldr	r3, [pc, #88]	@ (800f138 <HAL_SPI_RxCpltCallback+0x84>)
 800f0e0:	881b      	ldrh	r3, [r3, #0]
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	89fa      	ldrh	r2, [r7, #14]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d00b      	beq.n	800f102 <HAL_SPI_RxCpltCallback+0x4e>
        {
        	spiRingBuffer[spiHead] = spiRxByte;
 800f0ea:	4b12      	ldr	r3, [pc, #72]	@ (800f134 <HAL_SPI_RxCpltCallback+0x80>)
 800f0ec:	881b      	ldrh	r3, [r3, #0]
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	4b12      	ldr	r3, [pc, #72]	@ (800f13c <HAL_SPI_RxCpltCallback+0x88>)
 800f0f4:	7819      	ldrb	r1, [r3, #0]
 800f0f6:	4b12      	ldr	r3, [pc, #72]	@ (800f140 <HAL_SPI_RxCpltCallback+0x8c>)
 800f0f8:	5499      	strb	r1, [r3, r2]
        	spiHead = nextHead;
 800f0fa:	4a0e      	ldr	r2, [pc, #56]	@ (800f134 <HAL_SPI_RxCpltCallback+0x80>)
 800f0fc:	89fb      	ldrh	r3, [r7, #14]
 800f0fe:	8013      	strh	r3, [r2, #0]
 800f100:	e002      	b.n	800f108 <HAL_SPI_RxCpltCallback+0x54>
        }
        else
        {
        	safe_printf("SPI ring buffer overflow\n");
 800f102:	4810      	ldr	r0, [pc, #64]	@ (800f144 <HAL_SPI_RxCpltCallback+0x90>)
 800f104:	f000 ff16 	bl	800ff34 <safe_printf>
        }
        HAL_SPI_Receive_IT(&hspi2, &spiRxByte, 1);
 800f108:	2201      	movs	r2, #1
 800f10a:	490c      	ldr	r1, [pc, #48]	@ (800f13c <HAL_SPI_RxCpltCallback+0x88>)
 800f10c:	480e      	ldr	r0, [pc, #56]	@ (800f148 <HAL_SPI_RxCpltCallback+0x94>)
 800f10e:	f002 fafd 	bl	801170c <HAL_SPI_Receive_IT>
    }
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f112:	2300      	movs	r3, #0
 800f114:	60bb      	str	r3, [r7, #8]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	68db      	ldr	r3, [r3, #12]
 800f11c:	60bb      	str	r3, [r7, #8]
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	689b      	ldr	r3, [r3, #8]
 800f124:	60bb      	str	r3, [r7, #8]
 800f126:	68bb      	ldr	r3, [r7, #8]
}
 800f128:	bf00      	nop
 800f12a:	3710      	adds	r7, #16
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	40003800 	.word	0x40003800
 800f134:	200011a0 	.word	0x200011a0
 800f138:	200011a2 	.word	0x200011a2
 800f13c:	200011a4 	.word	0x200011a4
 800f140:	20001120 	.word	0x20001120
 800f144:	0801be20 	.word	0x0801be20
 800f148:	20000f98 	.word	0x20000f98

0800f14c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f14c:	b480      	push	{r7}
 800f14e:	b083      	sub	sp, #12
 800f150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f152:	2300      	movs	r3, #0
 800f154:	607b      	str	r3, [r7, #4]
 800f156:	4b10      	ldr	r3, [pc, #64]	@ (800f198 <HAL_MspInit+0x4c>)
 800f158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f15a:	4a0f      	ldr	r2, [pc, #60]	@ (800f198 <HAL_MspInit+0x4c>)
 800f15c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f160:	6453      	str	r3, [r2, #68]	@ 0x44
 800f162:	4b0d      	ldr	r3, [pc, #52]	@ (800f198 <HAL_MspInit+0x4c>)
 800f164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f16a:	607b      	str	r3, [r7, #4]
 800f16c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f16e:	2300      	movs	r3, #0
 800f170:	603b      	str	r3, [r7, #0]
 800f172:	4b09      	ldr	r3, [pc, #36]	@ (800f198 <HAL_MspInit+0x4c>)
 800f174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f176:	4a08      	ldr	r2, [pc, #32]	@ (800f198 <HAL_MspInit+0x4c>)
 800f178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f17c:	6413      	str	r3, [r2, #64]	@ 0x40
 800f17e:	4b06      	ldr	r3, [pc, #24]	@ (800f198 <HAL_MspInit+0x4c>)
 800f180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f186:	603b      	str	r3, [r7, #0]
 800f188:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f18a:	bf00      	nop
 800f18c:	370c      	adds	r7, #12
 800f18e:	46bd      	mov	sp, r7
 800f190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f194:	4770      	bx	lr
 800f196:	bf00      	nop
 800f198:	40023800 	.word	0x40023800

0800f19c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b08e      	sub	sp, #56	@ 0x38
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f1a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	601a      	str	r2, [r3, #0]
 800f1ac:	605a      	str	r2, [r3, #4]
 800f1ae:	609a      	str	r2, [r3, #8]
 800f1b0:	60da      	str	r2, [r3, #12]
 800f1b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	4a66      	ldr	r2, [pc, #408]	@ (800f354 <HAL_SPI_MspInit+0x1b8>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d12c      	bne.n	800f218 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800f1be:	2300      	movs	r3, #0
 800f1c0:	623b      	str	r3, [r7, #32]
 800f1c2:	4b65      	ldr	r3, [pc, #404]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f1c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1c6:	4a64      	ldr	r2, [pc, #400]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f1c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800f1cc:	6453      	str	r3, [r2, #68]	@ 0x44
 800f1ce:	4b62      	ldr	r3, [pc, #392]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f1d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f1d6:	623b      	str	r3, [r7, #32]
 800f1d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f1da:	2300      	movs	r3, #0
 800f1dc:	61fb      	str	r3, [r7, #28]
 800f1de:	4b5e      	ldr	r3, [pc, #376]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f1e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1e2:	4a5d      	ldr	r2, [pc, #372]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f1e4:	f043 0301 	orr.w	r3, r3, #1
 800f1e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800f1ea:	4b5b      	ldr	r3, [pc, #364]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f1ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1ee:	f003 0301 	and.w	r3, r3, #1
 800f1f2:	61fb      	str	r3, [r7, #28]
 800f1f4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800f1f6:	23a0      	movs	r3, #160	@ 0xa0
 800f1f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1fa:	2302      	movs	r3, #2
 800f1fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1fe:	2300      	movs	r3, #0
 800f200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f202:	2303      	movs	r3, #3
 800f204:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800f206:	2305      	movs	r3, #5
 800f208:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f20a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f20e:	4619      	mov	r1, r3
 800f210:	4852      	ldr	r0, [pc, #328]	@ (800f35c <HAL_SPI_MspInit+0x1c0>)
 800f212:	f001 f8d1 	bl	80103b8 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 800f216:	e099      	b.n	800f34c <HAL_SPI_MspInit+0x1b0>
  else if(hspi->Instance==SPI2)
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	4a50      	ldr	r2, [pc, #320]	@ (800f360 <HAL_SPI_MspInit+0x1c4>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d153      	bne.n	800f2ca <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800f222:	2300      	movs	r3, #0
 800f224:	61bb      	str	r3, [r7, #24]
 800f226:	4b4c      	ldr	r3, [pc, #304]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f22a:	4a4b      	ldr	r2, [pc, #300]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f22c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f230:	6413      	str	r3, [r2, #64]	@ 0x40
 800f232:	4b49      	ldr	r3, [pc, #292]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f23a:	61bb      	str	r3, [r7, #24]
 800f23c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f23e:	2300      	movs	r3, #0
 800f240:	617b      	str	r3, [r7, #20]
 800f242:	4b45      	ldr	r3, [pc, #276]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f246:	4a44      	ldr	r2, [pc, #272]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f248:	f043 0304 	orr.w	r3, r3, #4
 800f24c:	6313      	str	r3, [r2, #48]	@ 0x30
 800f24e:	4b42      	ldr	r3, [pc, #264]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f252:	f003 0304 	and.w	r3, r3, #4
 800f256:	617b      	str	r3, [r7, #20]
 800f258:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f25a:	2300      	movs	r3, #0
 800f25c:	613b      	str	r3, [r7, #16]
 800f25e:	4b3e      	ldr	r3, [pc, #248]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f262:	4a3d      	ldr	r2, [pc, #244]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f264:	f043 0302 	orr.w	r3, r3, #2
 800f268:	6313      	str	r3, [r2, #48]	@ 0x30
 800f26a:	4b3b      	ldr	r3, [pc, #236]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f26c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f26e:	f003 0302 	and.w	r3, r3, #2
 800f272:	613b      	str	r3, [r7, #16]
 800f274:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800f276:	2302      	movs	r3, #2
 800f278:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f27a:	2302      	movs	r3, #2
 800f27c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f27e:	2300      	movs	r3, #0
 800f280:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f282:	2303      	movs	r3, #3
 800f284:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800f286:	2307      	movs	r3, #7
 800f288:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f28a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f28e:	4619      	mov	r1, r3
 800f290:	4834      	ldr	r0, [pc, #208]	@ (800f364 <HAL_SPI_MspInit+0x1c8>)
 800f292:	f001 f891 	bl	80103b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800f296:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f29a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f29c:	2302      	movs	r3, #2
 800f29e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f2a4:	2303      	movs	r3, #3
 800f2a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f2a8:	2305      	movs	r3, #5
 800f2aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f2ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	482d      	ldr	r0, [pc, #180]	@ (800f368 <HAL_SPI_MspInit+0x1cc>)
 800f2b4:	f001 f880 	bl	80103b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	2105      	movs	r1, #5
 800f2bc:	2024      	movs	r0, #36	@ 0x24
 800f2be:	f000 ffbf 	bl	8010240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800f2c2:	2024      	movs	r0, #36	@ 0x24
 800f2c4:	f000 ffd8 	bl	8010278 <HAL_NVIC_EnableIRQ>
}
 800f2c8:	e040      	b.n	800f34c <HAL_SPI_MspInit+0x1b0>
  else if(hspi->Instance==SPI3)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	4a27      	ldr	r2, [pc, #156]	@ (800f36c <HAL_SPI_MspInit+0x1d0>)
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d13b      	bne.n	800f34c <HAL_SPI_MspInit+0x1b0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	60fb      	str	r3, [r7, #12]
 800f2d8:	4b1f      	ldr	r3, [pc, #124]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f2da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2dc:	4a1e      	ldr	r2, [pc, #120]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f2de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f2e2:	6413      	str	r3, [r2, #64]	@ 0x40
 800f2e4:	4b1c      	ldr	r3, [pc, #112]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f2e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f2ec:	60fb      	str	r3, [r7, #12]
 800f2ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	60bb      	str	r3, [r7, #8]
 800f2f4:	4b18      	ldr	r3, [pc, #96]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f2f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2f8:	4a17      	ldr	r2, [pc, #92]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f2fa:	f043 0302 	orr.w	r3, r3, #2
 800f2fe:	6313      	str	r3, [r2, #48]	@ 0x30
 800f300:	4b15      	ldr	r3, [pc, #84]	@ (800f358 <HAL_SPI_MspInit+0x1bc>)
 800f302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f304:	f003 0302 	and.w	r3, r3, #2
 800f308:	60bb      	str	r3, [r7, #8]
 800f30a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f30c:	2301      	movs	r3, #1
 800f30e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f310:	2302      	movs	r3, #2
 800f312:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f314:	2300      	movs	r3, #0
 800f316:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f318:	2303      	movs	r3, #3
 800f31a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800f31c:	2307      	movs	r3, #7
 800f31e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f320:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f324:	4619      	mov	r1, r3
 800f326:	4810      	ldr	r0, [pc, #64]	@ (800f368 <HAL_SPI_MspInit+0x1cc>)
 800f328:	f001 f846 	bl	80103b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800f32c:	2318      	movs	r3, #24
 800f32e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f330:	2302      	movs	r3, #2
 800f332:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f334:	2300      	movs	r3, #0
 800f336:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f338:	2303      	movs	r3, #3
 800f33a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800f33c:	2306      	movs	r3, #6
 800f33e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f340:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f344:	4619      	mov	r1, r3
 800f346:	4808      	ldr	r0, [pc, #32]	@ (800f368 <HAL_SPI_MspInit+0x1cc>)
 800f348:	f001 f836 	bl	80103b8 <HAL_GPIO_Init>
}
 800f34c:	bf00      	nop
 800f34e:	3738      	adds	r7, #56	@ 0x38
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	40013000 	.word	0x40013000
 800f358:	40023800 	.word	0x40023800
 800f35c:	40020000 	.word	0x40020000
 800f360:	40003800 	.word	0x40003800
 800f364:	40020800 	.word	0x40020800
 800f368:	40020400 	.word	0x40020400
 800f36c:	40003c00 	.word	0x40003c00

0800f370 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b08e      	sub	sp, #56	@ 0x38
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f378:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f37c:	2200      	movs	r2, #0
 800f37e:	601a      	str	r2, [r3, #0]
 800f380:	605a      	str	r2, [r3, #4]
 800f382:	609a      	str	r2, [r3, #8]
 800f384:	60da      	str	r2, [r3, #12]
 800f386:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	4a63      	ldr	r2, [pc, #396]	@ (800f51c <HAL_UART_MspInit+0x1ac>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	d135      	bne.n	800f3fe <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800f392:	2300      	movs	r3, #0
 800f394:	623b      	str	r3, [r7, #32]
 800f396:	4b62      	ldr	r3, [pc, #392]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f39a:	4a61      	ldr	r2, [pc, #388]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f39c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f3a0:	6413      	str	r3, [r2, #64]	@ 0x40
 800f3a2:	4b5f      	ldr	r3, [pc, #380]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f3a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f3aa:	623b      	str	r3, [r7, #32]
 800f3ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	61fb      	str	r3, [r7, #28]
 800f3b2:	4b5b      	ldr	r3, [pc, #364]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f3b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3b6:	4a5a      	ldr	r2, [pc, #360]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f3b8:	f043 0304 	orr.w	r3, r3, #4
 800f3bc:	6313      	str	r3, [r2, #48]	@ 0x30
 800f3be:	4b58      	ldr	r3, [pc, #352]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f3c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3c2:	f003 0304 	and.w	r3, r3, #4
 800f3c6:	61fb      	str	r3, [r7, #28]
 800f3c8:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800f3ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800f3ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f3d0:	2302      	movs	r3, #2
 800f3d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f3d8:	2303      	movs	r3, #3
 800f3da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800f3dc:	2308      	movs	r3, #8
 800f3de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f3e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f3e4:	4619      	mov	r1, r3
 800f3e6:	484f      	ldr	r0, [pc, #316]	@ (800f524 <HAL_UART_MspInit+0x1b4>)
 800f3e8:	f000 ffe6 	bl	80103b8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	2100      	movs	r1, #0
 800f3f0:	2034      	movs	r0, #52	@ 0x34
 800f3f2:	f000 ff25 	bl	8010240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800f3f6:	2034      	movs	r0, #52	@ 0x34
 800f3f8:	f000 ff3e 	bl	8010278 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800f3fc:	e089      	b.n	800f512 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART2)
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	4a49      	ldr	r2, [pc, #292]	@ (800f528 <HAL_UART_MspInit+0x1b8>)
 800f404:	4293      	cmp	r3, r2
 800f406:	d12c      	bne.n	800f462 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800f408:	2300      	movs	r3, #0
 800f40a:	61bb      	str	r3, [r7, #24]
 800f40c:	4b44      	ldr	r3, [pc, #272]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f40e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f410:	4a43      	ldr	r2, [pc, #268]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f416:	6413      	str	r3, [r2, #64]	@ 0x40
 800f418:	4b41      	ldr	r3, [pc, #260]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f41a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f41c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f420:	61bb      	str	r3, [r7, #24]
 800f422:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f424:	2300      	movs	r3, #0
 800f426:	617b      	str	r3, [r7, #20]
 800f428:	4b3d      	ldr	r3, [pc, #244]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f42a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f42c:	4a3c      	ldr	r2, [pc, #240]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f42e:	f043 0301 	orr.w	r3, r3, #1
 800f432:	6313      	str	r3, [r2, #48]	@ 0x30
 800f434:	4b3a      	ldr	r3, [pc, #232]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f438:	f003 0301 	and.w	r3, r3, #1
 800f43c:	617b      	str	r3, [r7, #20]
 800f43e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800f440:	230c      	movs	r3, #12
 800f442:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f444:	2302      	movs	r3, #2
 800f446:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f448:	2300      	movs	r3, #0
 800f44a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f44c:	2303      	movs	r3, #3
 800f44e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800f450:	2307      	movs	r3, #7
 800f452:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f454:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f458:	4619      	mov	r1, r3
 800f45a:	4834      	ldr	r0, [pc, #208]	@ (800f52c <HAL_UART_MspInit+0x1bc>)
 800f45c:	f000 ffac 	bl	80103b8 <HAL_GPIO_Init>
}
 800f460:	e057      	b.n	800f512 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	4a32      	ldr	r2, [pc, #200]	@ (800f530 <HAL_UART_MspInit+0x1c0>)
 800f468:	4293      	cmp	r3, r2
 800f46a:	d152      	bne.n	800f512 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800f46c:	2300      	movs	r3, #0
 800f46e:	613b      	str	r3, [r7, #16]
 800f470:	4b2b      	ldr	r3, [pc, #172]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f474:	4a2a      	ldr	r2, [pc, #168]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f476:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f47a:	6413      	str	r3, [r2, #64]	@ 0x40
 800f47c:	4b28      	ldr	r3, [pc, #160]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f47e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f480:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f484:	613b      	str	r3, [r7, #16]
 800f486:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f488:	2300      	movs	r3, #0
 800f48a:	60fb      	str	r3, [r7, #12]
 800f48c:	4b24      	ldr	r3, [pc, #144]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f48e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f490:	4a23      	ldr	r2, [pc, #140]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f492:	f043 0304 	orr.w	r3, r3, #4
 800f496:	6313      	str	r3, [r2, #48]	@ 0x30
 800f498:	4b21      	ldr	r3, [pc, #132]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f49a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f49c:	f003 0304 	and.w	r3, r3, #4
 800f4a0:	60fb      	str	r3, [r7, #12]
 800f4a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	60bb      	str	r3, [r7, #8]
 800f4a8:	4b1d      	ldr	r3, [pc, #116]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f4aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4ac:	4a1c      	ldr	r2, [pc, #112]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f4ae:	f043 0302 	orr.w	r3, r3, #2
 800f4b2:	6313      	str	r3, [r2, #48]	@ 0x30
 800f4b4:	4b1a      	ldr	r3, [pc, #104]	@ (800f520 <HAL_UART_MspInit+0x1b0>)
 800f4b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4b8:	f003 0302 	and.w	r3, r3, #2
 800f4bc:	60bb      	str	r3, [r7, #8]
 800f4be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800f4c0:	2320      	movs	r3, #32
 800f4c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4c4:	2302      	movs	r3, #2
 800f4c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4cc:	2303      	movs	r3, #3
 800f4ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800f4d0:	2307      	movs	r3, #7
 800f4d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f4d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f4d8:	4619      	mov	r1, r3
 800f4da:	4812      	ldr	r0, [pc, #72]	@ (800f524 <HAL_UART_MspInit+0x1b4>)
 800f4dc:	f000 ff6c 	bl	80103b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800f4e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f4e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4e6:	2302      	movs	r3, #2
 800f4e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4ee:	2303      	movs	r3, #3
 800f4f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800f4f2:	2307      	movs	r3, #7
 800f4f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f4f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	480d      	ldr	r0, [pc, #52]	@ (800f534 <HAL_UART_MspInit+0x1c4>)
 800f4fe:	f000 ff5b 	bl	80103b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 800f502:	2200      	movs	r2, #0
 800f504:	2106      	movs	r1, #6
 800f506:	2027      	movs	r0, #39	@ 0x27
 800f508:	f000 fe9a 	bl	8010240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800f50c:	2027      	movs	r0, #39	@ 0x27
 800f50e:	f000 feb3 	bl	8010278 <HAL_NVIC_EnableIRQ>
}
 800f512:	bf00      	nop
 800f514:	3738      	adds	r7, #56	@ 0x38
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	40004c00 	.word	0x40004c00
 800f520:	40023800 	.word	0x40023800
 800f524:	40020800 	.word	0x40020800
 800f528:	40004400 	.word	0x40004400
 800f52c:	40020000 	.word	0x40020000
 800f530:	40004800 	.word	0x40004800
 800f534:	40020400 	.word	0x40020400

0800f538 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b08c      	sub	sp, #48	@ 0x30
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800f540:	2300      	movs	r3, #0
 800f542:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800f544:	2300      	movs	r3, #0
 800f546:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800f548:	2300      	movs	r3, #0
 800f54a:	60bb      	str	r3, [r7, #8]
 800f54c:	4b2f      	ldr	r3, [pc, #188]	@ (800f60c <HAL_InitTick+0xd4>)
 800f54e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f550:	4a2e      	ldr	r2, [pc, #184]	@ (800f60c <HAL_InitTick+0xd4>)
 800f552:	f043 0301 	orr.w	r3, r3, #1
 800f556:	6453      	str	r3, [r2, #68]	@ 0x44
 800f558:	4b2c      	ldr	r3, [pc, #176]	@ (800f60c <HAL_InitTick+0xd4>)
 800f55a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f55c:	f003 0301 	and.w	r3, r3, #1
 800f560:	60bb      	str	r3, [r7, #8]
 800f562:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800f564:	f107 020c 	add.w	r2, r7, #12
 800f568:	f107 0310 	add.w	r3, r7, #16
 800f56c:	4611      	mov	r1, r2
 800f56e:	4618      	mov	r0, r3
 800f570:	f001 fa84 	bl	8010a7c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800f574:	f001 fa6e 	bl	8010a54 <HAL_RCC_GetPCLK2Freq>
 800f578:	4603      	mov	r3, r0
 800f57a:	005b      	lsls	r3, r3, #1
 800f57c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800f57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f580:	4a23      	ldr	r2, [pc, #140]	@ (800f610 <HAL_InitTick+0xd8>)
 800f582:	fba2 2303 	umull	r2, r3, r2, r3
 800f586:	0c9b      	lsrs	r3, r3, #18
 800f588:	3b01      	subs	r3, #1
 800f58a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800f58c:	4b21      	ldr	r3, [pc, #132]	@ (800f614 <HAL_InitTick+0xdc>)
 800f58e:	4a22      	ldr	r2, [pc, #136]	@ (800f618 <HAL_InitTick+0xe0>)
 800f590:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800f592:	4b20      	ldr	r3, [pc, #128]	@ (800f614 <HAL_InitTick+0xdc>)
 800f594:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800f598:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800f59a:	4a1e      	ldr	r2, [pc, #120]	@ (800f614 <HAL_InitTick+0xdc>)
 800f59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f59e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800f5a0:	4b1c      	ldr	r3, [pc, #112]	@ (800f614 <HAL_InitTick+0xdc>)
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f5a6:	4b1b      	ldr	r3, [pc, #108]	@ (800f614 <HAL_InitTick+0xdc>)
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f5ac:	4b19      	ldr	r3, [pc, #100]	@ (800f614 <HAL_InitTick+0xdc>)
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800f5b2:	4818      	ldr	r0, [pc, #96]	@ (800f614 <HAL_InitTick+0xdc>)
 800f5b4:	f002 fdf7 	bl	80121a6 <HAL_TIM_Base_Init>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800f5be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d11b      	bne.n	800f5fe <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800f5c6:	4813      	ldr	r0, [pc, #76]	@ (800f614 <HAL_InitTick+0xdc>)
 800f5c8:	f002 fe46 	bl	8012258 <HAL_TIM_Base_Start_IT>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800f5d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d111      	bne.n	800f5fe <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800f5da:	2019      	movs	r0, #25
 800f5dc:	f000 fe4c 	bl	8010278 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b0f      	cmp	r3, #15
 800f5e4:	d808      	bhi.n	800f5f8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	6879      	ldr	r1, [r7, #4]
 800f5ea:	2019      	movs	r0, #25
 800f5ec:	f000 fe28 	bl	8010240 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800f5f0:	4a0a      	ldr	r2, [pc, #40]	@ (800f61c <HAL_InitTick+0xe4>)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6013      	str	r3, [r2, #0]
 800f5f6:	e002      	b.n	800f5fe <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800f5f8:	2301      	movs	r3, #1
 800f5fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800f5fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f602:	4618      	mov	r0, r3
 800f604:	3730      	adds	r7, #48	@ 0x30
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	40023800 	.word	0x40023800
 800f610:	431bde83 	.word	0x431bde83
 800f614:	200011a8 	.word	0x200011a8
 800f618:	40010000 	.word	0x40010000
 800f61c:	20000078 	.word	0x20000078

0800f620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f620:	b480      	push	{r7}
 800f622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800f624:	bf00      	nop
 800f626:	e7fd      	b.n	800f624 <NMI_Handler+0x4>

0800f628 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f628:	b480      	push	{r7}
 800f62a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f62c:	bf00      	nop
 800f62e:	e7fd      	b.n	800f62c <HardFault_Handler+0x4>

0800f630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f630:	b480      	push	{r7}
 800f632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f634:	bf00      	nop
 800f636:	e7fd      	b.n	800f634 <MemManage_Handler+0x4>

0800f638 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f638:	b480      	push	{r7}
 800f63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f63c:	bf00      	nop
 800f63e:	e7fd      	b.n	800f63c <BusFault_Handler+0x4>

0800f640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f640:	b480      	push	{r7}
 800f642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f644:	bf00      	nop
 800f646:	e7fd      	b.n	800f644 <UsageFault_Handler+0x4>

0800f648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f648:	b480      	push	{r7}
 800f64a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f64c:	bf00      	nop
 800f64e:	46bd      	mov	sp, r7
 800f650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f654:	4770      	bx	lr

0800f656 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800f656:	b580      	push	{r7, lr}
 800f658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800f65a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800f65e:	f001 f88b 	bl	8010778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800f662:	bf00      	nop
 800f664:	bd80      	pop	{r7, pc}
	...

0800f668 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800f66c:	4802      	ldr	r0, [pc, #8]	@ (800f678 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800f66e:	f002 fe63 	bl	8012338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800f672:	bf00      	nop
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	200011a8 	.word	0x200011a8

0800f67c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800f680:	4802      	ldr	r0, [pc, #8]	@ (800f68c <SPI2_IRQHandler+0x10>)
 800f682:	f002 f969 	bl	8011958 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800f686:	bf00      	nop
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop
 800f68c:	20000f98 	.word	0x20000f98

0800f690 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800f694:	4802      	ldr	r0, [pc, #8]	@ (800f6a0 <USART3_IRQHandler+0x10>)
 800f696:	f003 f957 	bl	8012948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800f69a:	bf00      	nop
 800f69c:	bd80      	pop	{r7, pc}
 800f69e:	bf00      	nop
 800f6a0:	200010d8 	.word	0x200010d8

0800f6a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800f6a8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800f6ac:	f001 f864 	bl	8010778 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800f6b0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800f6b4:	f001 f860 	bl	8010778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800f6b8:	bf00      	nop
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800f6c0:	4802      	ldr	r0, [pc, #8]	@ (800f6cc <UART4_IRQHandler+0x10>)
 800f6c2:	f003 f941 	bl	8012948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800f6c6:	bf00      	nop
 800f6c8:	bd80      	pop	{r7, pc}
 800f6ca:	bf00      	nop
 800f6cc:	20001048 	.word	0x20001048

0800f6d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	af00      	add	r7, sp, #0
  return 1;
 800f6d4:	2301      	movs	r3, #1
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr

0800f6e0 <_kill>:

int _kill(int pid, int sig)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b082      	sub	sp, #8
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800f6ea:	f008 ffcd 	bl	8018688 <__errno>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	2216      	movs	r2, #22
 800f6f2:	601a      	str	r2, [r3, #0]
  return -1;
 800f6f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3708      	adds	r7, #8
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <_exit>:

void _exit (int status)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800f708:	f04f 31ff 	mov.w	r1, #4294967295
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f7ff ffe7 	bl	800f6e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 800f712:	bf00      	nop
 800f714:	e7fd      	b.n	800f712 <_exit+0x12>

0800f716 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800f716:	b580      	push	{r7, lr}
 800f718:	b086      	sub	sp, #24
 800f71a:	af00      	add	r7, sp, #0
 800f71c:	60f8      	str	r0, [r7, #12]
 800f71e:	60b9      	str	r1, [r7, #8]
 800f720:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f722:	2300      	movs	r3, #0
 800f724:	617b      	str	r3, [r7, #20]
 800f726:	e00a      	b.n	800f73e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800f728:	f3af 8000 	nop.w
 800f72c:	4601      	mov	r1, r0
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	1c5a      	adds	r2, r3, #1
 800f732:	60ba      	str	r2, [r7, #8]
 800f734:	b2ca      	uxtb	r2, r1
 800f736:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	3301      	adds	r3, #1
 800f73c:	617b      	str	r3, [r7, #20]
 800f73e:	697a      	ldr	r2, [r7, #20]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	429a      	cmp	r2, r3
 800f744:	dbf0      	blt.n	800f728 <_read+0x12>
  }

  return len;
 800f746:	687b      	ldr	r3, [r7, #4]
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3718      	adds	r7, #24
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}

0800f750 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b086      	sub	sp, #24
 800f754:	af00      	add	r7, sp, #0
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	60b9      	str	r1, [r7, #8]
 800f75a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f75c:	2300      	movs	r3, #0
 800f75e:	617b      	str	r3, [r7, #20]
 800f760:	e009      	b.n	800f776 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800f762:	68bb      	ldr	r3, [r7, #8]
 800f764:	1c5a      	adds	r2, r3, #1
 800f766:	60ba      	str	r2, [r7, #8]
 800f768:	781b      	ldrb	r3, [r3, #0]
 800f76a:	4618      	mov	r0, r3
 800f76c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	3301      	adds	r3, #1
 800f774:	617b      	str	r3, [r7, #20]
 800f776:	697a      	ldr	r2, [r7, #20]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	429a      	cmp	r2, r3
 800f77c:	dbf1      	blt.n	800f762 <_write+0x12>
  }
  return len;
 800f77e:	687b      	ldr	r3, [r7, #4]
}
 800f780:	4618      	mov	r0, r3
 800f782:	3718      	adds	r7, #24
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <_close>:

int _close(int file)
{
 800f788:	b480      	push	{r7}
 800f78a:	b083      	sub	sp, #12
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800f790:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f794:	4618      	mov	r0, r3
 800f796:	370c      	adds	r7, #12
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr

0800f7a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b083      	sub	sp, #12
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800f7b0:	605a      	str	r2, [r3, #4]
  return 0;
 800f7b2:	2300      	movs	r3, #0
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	370c      	adds	r7, #12
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr

0800f7c0 <_isatty>:

int _isatty(int file)
{
 800f7c0:	b480      	push	{r7}
 800f7c2:	b083      	sub	sp, #12
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800f7c8:	2301      	movs	r3, #1
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	370c      	adds	r7, #12
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d4:	4770      	bx	lr

0800f7d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800f7d6:	b480      	push	{r7}
 800f7d8:	b085      	sub	sp, #20
 800f7da:	af00      	add	r7, sp, #0
 800f7dc:	60f8      	str	r0, [r7, #12]
 800f7de:	60b9      	str	r1, [r7, #8]
 800f7e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800f7e2:	2300      	movs	r3, #0
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3714      	adds	r7, #20
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr

0800f7f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f7f4:	4b07      	ldr	r3, [pc, #28]	@ (800f814 <SystemInit+0x24>)
 800f7f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7fa:	4a06      	ldr	r2, [pc, #24]	@ (800f814 <SystemInit+0x24>)
 800f7fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f800:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800f804:	4b03      	ldr	r3, [pc, #12]	@ (800f814 <SystemInit+0x24>)
 800f806:	4a04      	ldr	r2, [pc, #16]	@ (800f818 <SystemInit+0x28>)
 800f808:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800f80a:	bf00      	nop
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr
 800f814:	e000ed00 	.word	0xe000ed00
 800f818:	08008000 	.word	0x08008000

0800f81c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800f81c:	b480      	push	{r7}
 800f81e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800f820:	f3bf 8f4f 	dsb	sy
}
 800f824:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800f826:	4b06      	ldr	r3, [pc, #24]	@ (800f840 <__NVIC_SystemReset+0x24>)
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800f82e:	4904      	ldr	r1, [pc, #16]	@ (800f840 <__NVIC_SystemReset+0x24>)
 800f830:	4b04      	ldr	r3, [pc, #16]	@ (800f844 <__NVIC_SystemReset+0x28>)
 800f832:	4313      	orrs	r3, r2
 800f834:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f836:	f3bf 8f4f 	dsb	sy
}
 800f83a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800f83c:	bf00      	nop
 800f83e:	e7fd      	b.n	800f83c <__NVIC_SystemReset+0x20>
 800f840:	e000ed00 	.word	0xe000ed00
 800f844:	05fa0004 	.word	0x05fa0004

0800f848 <UART_Handler>:
volatile uint16_t uartHead = 0;
volatile uint16_t uartTail = 0;
uint8_t uartRxByte;

void UART_Handler(void *param)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b0aa      	sub	sp, #168	@ 0xa8
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
    uint8_t jsonBuffer[JSON_BUFFER_SIZE];
    uint8_t index = 0;
 800f850:	2300      	movs	r3, #0
 800f852:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    bool collecting = false;
 800f856:	2300      	movs	r3, #0
 800f858:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
    while (1)
    {
        if (uartHead != uartTail)
 800f85c:	4b39      	ldr	r3, [pc, #228]	@ (800f944 <UART_Handler+0xfc>)
 800f85e:	881b      	ldrh	r3, [r3, #0]
 800f860:	b29a      	uxth	r2, r3
 800f862:	4b39      	ldr	r3, [pc, #228]	@ (800f948 <UART_Handler+0x100>)
 800f864:	881b      	ldrh	r3, [r3, #0]
 800f866:	b29b      	uxth	r3, r3
 800f868:	429a      	cmp	r2, r3
 800f86a:	d066      	beq.n	800f93a <UART_Handler+0xf2>
        {
            uint8_t byte = uartRingBuffer[uartTail];
 800f86c:	4b36      	ldr	r3, [pc, #216]	@ (800f948 <UART_Handler+0x100>)
 800f86e:	881b      	ldrh	r3, [r3, #0]
 800f870:	b29b      	uxth	r3, r3
 800f872:	461a      	mov	r2, r3
 800f874:	4b35      	ldr	r3, [pc, #212]	@ (800f94c <UART_Handler+0x104>)
 800f876:	5c9b      	ldrb	r3, [r3, r2]
 800f878:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
            uartTail = (uartTail + 1) % UART_RING_BUFFER_SIZE;
 800f87c:	4b32      	ldr	r3, [pc, #200]	@ (800f948 <UART_Handler+0x100>)
 800f87e:	881b      	ldrh	r3, [r3, #0]
 800f880:	b29b      	uxth	r3, r3
 800f882:	3301      	adds	r3, #1
 800f884:	425a      	negs	r2, r3
 800f886:	b2db      	uxtb	r3, r3
 800f888:	b2d2      	uxtb	r2, r2
 800f88a:	bf58      	it	pl
 800f88c:	4253      	negpl	r3, r2
 800f88e:	b29a      	uxth	r2, r3
 800f890:	4b2d      	ldr	r3, [pc, #180]	@ (800f948 <UART_Handler+0x100>)
 800f892:	801a      	strh	r2, [r3, #0]

            if (byte == '{')
 800f894:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800f898:	2b7b      	cmp	r3, #123	@ 0x7b
 800f89a:	d111      	bne.n	800f8c0 <UART_Handler+0x78>
            {
                collecting = true;
 800f89c:	2301      	movs	r3, #1
 800f89e:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
                index = 0;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                jsonBuffer[index++] = byte;
 800f8a8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800f8ac:	1c5a      	adds	r2, r3, #1
 800f8ae:	f887 20a7 	strb.w	r2, [r7, #167]	@ 0xa7
 800f8b2:	33a8      	adds	r3, #168	@ 0xa8
 800f8b4:	443b      	add	r3, r7
 800f8b6:	f897 20a5 	ldrb.w	r2, [r7, #165]	@ 0xa5
 800f8ba:	f803 2c9c 	strb.w	r2, [r3, #-156]
 800f8be:	e7cd      	b.n	800f85c <UART_Handler+0x14>
            }
            else if (collecting)
 800f8c0:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d032      	beq.n	800f92e <UART_Handler+0xe6>
            {
                if (index < JSON_BUFFER_SIZE - 1)
 800f8c8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800f8cc:	2b94      	cmp	r3, #148	@ 0x94
 800f8ce:	d827      	bhi.n	800f920 <UART_Handler+0xd8>
                {
                    jsonBuffer[index++] = byte;
 800f8d0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800f8d4:	1c5a      	adds	r2, r3, #1
 800f8d6:	f887 20a7 	strb.w	r2, [r7, #167]	@ 0xa7
 800f8da:	33a8      	adds	r3, #168	@ 0xa8
 800f8dc:	443b      	add	r3, r7
 800f8de:	f897 20a5 	ldrb.w	r2, [r7, #165]	@ 0xa5
 800f8e2:	f803 2c9c 	strb.w	r2, [r3, #-156]

                    if (byte == '}')
 800f8e6:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800f8ea:	2b7d      	cmp	r3, #125	@ 0x7d
 800f8ec:	d1b6      	bne.n	800f85c <UART_Handler+0x14>
                    {
                        jsonBuffer[index] = '\0';
 800f8ee:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800f8f2:	33a8      	adds	r3, #168	@ 0xa8
 800f8f4:	443b      	add	r3, r7
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	f803 2c9c 	strb.w	r2, [r3, #-156]
                        safe_printf("JSON received: %s\n", jsonBuffer);
 800f8fc:	f107 030c 	add.w	r3, r7, #12
 800f900:	4619      	mov	r1, r3
 800f902:	4813      	ldr	r0, [pc, #76]	@ (800f950 <UART_Handler+0x108>)
 800f904:	f000 fb16 	bl	800ff34 <safe_printf>
                        process_json(jsonBuffer);
 800f908:	f107 030c 	add.w	r3, r7, #12
 800f90c:	4618      	mov	r0, r3
 800f90e:	f000 f96d 	bl	800fbec <process_json>
                        collecting = false;
 800f912:	2300      	movs	r3, #0
 800f914:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
                        index = 0;
 800f918:	2300      	movs	r3, #0
 800f91a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800f91e:	e79d      	b.n	800f85c <UART_Handler+0x14>
                    }
                }
                else
                {
                    collecting = false;
 800f920:	2300      	movs	r3, #0
 800f922:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
                    index = 0;
 800f926:	2300      	movs	r3, #0
 800f928:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800f92c:	e796      	b.n	800f85c <UART_Handler+0x14>
                }
            }
            else if (byte == BOOT_CMD)
 800f92e:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800f932:	2b50      	cmp	r3, #80	@ 0x50
 800f934:	d192      	bne.n	800f85c <UART_Handler+0x14>
            {
                NVIC_SystemReset();
 800f936:	f7ff ff71 	bl	800f81c <__NVIC_SystemReset>
            }
        }
        else
        {
            vTaskDelay(pdMS_TO_TICKS(5));
 800f93a:	2005      	movs	r0, #5
 800f93c:	f004 ffb4 	bl	80148a8 <vTaskDelay>
        if (uartHead != uartTail)
 800f940:	e78c      	b.n	800f85c <UART_Handler+0x14>
 800f942:	bf00      	nop
 800f944:	200012f0 	.word	0x200012f0
 800f948:	200012f2 	.word	0x200012f2
 800f94c:	200011f0 	.word	0x200011f0
 800f950:	0801be3c 	.word	0x0801be3c

0800f954 <send_json_response>:
    }
}


void send_json_response(cJSON *jsonObj)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b084      	sub	sp, #16
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
    char *response = cJSON_PrintUnformatted(jsonObj);
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f7fc fd1b 	bl	800c398 <cJSON_PrintUnformatted>
 800f962:	60f8      	str	r0, [r7, #12]
    if (response)
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d018      	beq.n	800f99c <send_json_response+0x48>
    {
    	safe_printf("Device State JSON: %s\n", response);
 800f96a:	68f9      	ldr	r1, [r7, #12]
 800f96c:	480d      	ldr	r0, [pc, #52]	@ (800f9a4 <send_json_response+0x50>)
 800f96e:	f000 fae1 	bl	800ff34 <safe_printf>
        HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 800f972:	68f8      	ldr	r0, [r7, #12]
 800f974:	f7f8 fcac 	bl	80082d0 <strlen>
 800f978:	4603      	mov	r3, r0
 800f97a:	b29a      	uxth	r2, r3
 800f97c:	f04f 33ff 	mov.w	r3, #4294967295
 800f980:	68f9      	ldr	r1, [r7, #12]
 800f982:	4809      	ldr	r0, [pc, #36]	@ (800f9a8 <send_json_response+0x54>)
 800f984:	f002 fefa 	bl	801277c <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart3, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800f988:	f04f 33ff 	mov.w	r3, #4294967295
 800f98c:	2201      	movs	r2, #1
 800f98e:	4907      	ldr	r1, [pc, #28]	@ (800f9ac <send_json_response+0x58>)
 800f990:	4805      	ldr	r0, [pc, #20]	@ (800f9a8 <send_json_response+0x54>)
 800f992:	f002 fef3 	bl	801277c <HAL_UART_Transmit>
        free(response);
 800f996:	68f8      	ldr	r0, [r7, #12]
 800f998:	f007 f82c 	bl	80169f4 <free>
    }
}
 800f99c:	bf00      	nop
 800f99e:	3710      	adds	r7, #16
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}
 800f9a4:	0801be50 	.word	0x0801be50
 800f9a8:	200010d8 	.word	0x200010d8
 800f9ac:	0801be68 	.word	0x0801be68

0800f9b0 <handle_get_status_request>:

void handle_get_status_request(void)
{
 800f9b0:	b590      	push	{r4, r7, lr}
 800f9b2:	b083      	sub	sp, #12
 800f9b4:	af00      	add	r7, sp, #0
    cJSON *resp = cJSON_CreateObject();
 800f9b6:	f7fd fbaf 	bl	800d118 <cJSON_CreateObject>
 800f9ba:	6038      	str	r0, [r7, #0]
    if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800f9bc:	4b1a      	ldr	r3, [pc, #104]	@ (800fa28 <handle_get_status_request+0x78>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	2164      	movs	r1, #100	@ 0x64
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f004 fb94 	bl	80140f0 <xQueueSemaphoreTake>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b01      	cmp	r3, #1
 800f9cc:	d122      	bne.n	800fa14 <handle_get_status_request+0x64>
    {
        for (int i = 0; i < DEVICE_COUNT; i++)
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	607b      	str	r3, [r7, #4]
 800f9d2:	e015      	b.n	800fa00 <handle_get_status_request+0x50>
        {
            cJSON_AddNumberToObject(resp, devices[i], global_device_states[i]);
 800f9d4:	4a15      	ldr	r2, [pc, #84]	@ (800fa2c <handle_get_status_request+0x7c>)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f9dc:	4a14      	ldr	r2, [pc, #80]	@ (800fa30 <handle_get_status_request+0x80>)
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7f8 fdcd 	bl	8008584 <__aeabi_i2d>
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	460b      	mov	r3, r1
 800f9ee:	ec43 2b10 	vmov	d0, r2, r3
 800f9f2:	4621      	mov	r1, r4
 800f9f4:	6838      	ldr	r0, [r7, #0]
 800f9f6:	f7fd fb21 	bl	800d03c <cJSON_AddNumberToObject>
        for (int i = 0; i < DEVICE_COUNT; i++)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	3301      	adds	r3, #1
 800f9fe:	607b      	str	r3, [r7, #4]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2b03      	cmp	r3, #3
 800fa04:	dde6      	ble.n	800f9d4 <handle_get_status_request+0x24>
        }
        xSemaphoreGive(deviceStateMutex);
 800fa06:	4b08      	ldr	r3, [pc, #32]	@ (800fa28 <handle_get_status_request+0x78>)
 800fa08:	6818      	ldr	r0, [r3, #0]
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	2100      	movs	r1, #0
 800fa10:	f004 f8dc 	bl	8013bcc <xQueueGenericSend>
    }
    send_json_response(resp);
 800fa14:	6838      	ldr	r0, [r7, #0]
 800fa16:	f7ff ff9d 	bl	800f954 <send_json_response>
    cJSON_Delete(resp);
 800fa1a:	6838      	ldr	r0, [r7, #0]
 800fa1c:	f7fb fc10 	bl	800b240 <cJSON_Delete>
}
 800fa20:	bf00      	nop
 800fa22:	370c      	adds	r7, #12
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd90      	pop	{r4, r7, pc}
 800fa28:	200012f8 	.word	0x200012f8
 800fa2c:	20000038 	.word	0x20000038
 800fa30:	200014bc 	.word	0x200014bc

0800fa34 <handle_device_control>:

void handle_device_control(cJSON *json)
{
 800fa34:	b590      	push	{r4, r7, lr}
 800fa36:	b089      	sub	sp, #36	@ 0x24
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
    cJSON *resp = cJSON_CreateObject();
 800fa3c:	f7fd fb6c 	bl	800d118 <cJSON_CreateObject>
 800fa40:	61b8      	str	r0, [r7, #24]
    cJSON *Display = cJSON_GetObjectItem(json, "backlit");
 800fa42:	495e      	ldr	r1, [pc, #376]	@ (800fbbc <handle_device_control+0x188>)
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f7fd fa43 	bl	800ced0 <cJSON_GetObjectItem>
 800fa4a:	6178      	str	r0, [r7, #20]

    if(Display)
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d022      	beq.n	800fa98 <handle_device_control+0x64>
	{
		if (cJSON_IsNumber(Display))
 800fa52:	6978      	ldr	r0, [r7, #20]
 800fa54:	f7fd fb74 	bl	800d140 <cJSON_IsNumber>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d01c      	beq.n	800fa98 <handle_device_control+0x64>
		{
			GPIO_PinState state = HAL_GPIO_ReadPin(DISP_BACKLIT_GPIO_Port, DISP_BACKLIT_Pin);
 800fa5e:	2101      	movs	r1, #1
 800fa60:	4857      	ldr	r0, [pc, #348]	@ (800fbc0 <handle_device_control+0x18c>)
 800fa62:	f000 fe3d 	bl	80106e0 <HAL_GPIO_ReadPin>
 800fa66:	4603      	mov	r3, r0
 800fa68:	74fb      	strb	r3, [r7, #19]
			uint8_t dispState = (state == GPIO_PIN_SET) ? 1 : 0;
 800fa6a:	7cfb      	ldrb	r3, [r7, #19]
 800fa6c:	2b01      	cmp	r3, #1
 800fa6e:	bf0c      	ite	eq
 800fa70:	2301      	moveq	r3, #1
 800fa72:	2300      	movne	r3, #0
 800fa74:	b2db      	uxtb	r3, r3
 800fa76:	74bb      	strb	r3, [r7, #18]
			if(dispState == 1)
 800fa78:	7cbb      	ldrb	r3, [r7, #18]
 800fa7a:	2b01      	cmp	r3, #1
 800fa7c:	f000 809a 	beq.w	800fbb4 <handle_device_control+0x180>
			{
				return;
			}
			else
			{
				HAL_GPIO_WritePin(DISP_BACKLIT_GPIO_Port, DISP_BACKLIT_Pin, Display->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	695b      	ldr	r3, [r3, #20]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	bf14      	ite	ne
 800fa88:	2301      	movne	r3, #1
 800fa8a:	2300      	moveq	r3, #0
 800fa8c:	b2db      	uxtb	r3, r3
 800fa8e:	461a      	mov	r2, r3
 800fa90:	2101      	movs	r1, #1
 800fa92:	484b      	ldr	r0, [pc, #300]	@ (800fbc0 <handle_device_control+0x18c>)
 800fa94:	f000 fe3c 	bl	8010710 <HAL_GPIO_WritePin>
			}
		}
	}


	if (xSemaphoreTake(deviceStateMutex, pdMS_TO_TICKS(100)) == pdTRUE)
 800fa98:	4b4a      	ldr	r3, [pc, #296]	@ (800fbc4 <handle_device_control+0x190>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	2164      	movs	r1, #100	@ 0x64
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f004 fb26 	bl	80140f0 <xQueueSemaphoreTake>
 800faa4:	4603      	mov	r3, r0
 800faa6:	2b01      	cmp	r3, #1
 800faa8:	d17d      	bne.n	800fba6 <handle_device_control+0x172>
	{
		for (int i = 0; i < DEVICE_COUNT; i++)
 800faaa:	2300      	movs	r3, #0
 800faac:	61fb      	str	r3, [r7, #28]
 800faae:	e070      	b.n	800fb92 <handle_device_control+0x15e>
		{
			cJSON *Device = cJSON_GetObjectItem(json, devices[i]);
 800fab0:	4a45      	ldr	r2, [pc, #276]	@ (800fbc8 <handle_device_control+0x194>)
 800fab2:	69fb      	ldr	r3, [r7, #28]
 800fab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fab8:	4619      	mov	r1, r3
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f7fd fa08 	bl	800ced0 <cJSON_GetObjectItem>
 800fac0:	60f8      	str	r0, [r7, #12]
			if (cJSON_IsNumber(Device))
 800fac2:	68f8      	ldr	r0, [r7, #12]
 800fac4:	f7fd fb3c 	bl	800d140 <cJSON_IsNumber>
 800fac8:	4603      	mov	r3, r0
 800faca:	2b00      	cmp	r3, #0
 800facc:	d05e      	beq.n	800fb8c <handle_device_control+0x158>
			{
				HAL_GPIO_WritePin(led_ports[i], led_pins[i], Device->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800face:	4a3f      	ldr	r2, [pc, #252]	@ (800fbcc <handle_device_control+0x198>)
 800fad0:	69fb      	ldr	r3, [r7, #28]
 800fad2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fad6:	4a3e      	ldr	r2, [pc, #248]	@ (800fbd0 <handle_device_control+0x19c>)
 800fad8:	69fb      	ldr	r3, [r7, #28]
 800fada:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	695b      	ldr	r3, [r3, #20]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	bf14      	ite	ne
 800fae6:	2301      	movne	r3, #1
 800fae8:	2300      	moveq	r3, #0
 800faea:	b2db      	uxtb	r3, r3
 800faec:	461a      	mov	r2, r3
 800faee:	f000 fe0f 	bl	8010710 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(relay_ports[i], relay_pins[i], Device->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800faf2:	4a38      	ldr	r2, [pc, #224]	@ (800fbd4 <handle_device_control+0x1a0>)
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fafa:	4a37      	ldr	r2, [pc, #220]	@ (800fbd8 <handle_device_control+0x1a4>)
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	695b      	ldr	r3, [r3, #20]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	bf14      	ite	ne
 800fb0a:	2301      	movne	r3, #1
 800fb0c:	2300      	moveq	r3, #0
 800fb0e:	b2db      	uxtb	r3, r3
 800fb10:	461a      	mov	r2, r3
 800fb12:	f000 fdfd 	bl	8010710 <HAL_GPIO_WritePin>
				GPIO_PinState state = HAL_GPIO_ReadPin(led_ports[i], led_pins[i]);
 800fb16:	4a2d      	ldr	r2, [pc, #180]	@ (800fbcc <handle_device_control+0x198>)
 800fb18:	69fb      	ldr	r3, [r7, #28]
 800fb1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fb1e:	492c      	ldr	r1, [pc, #176]	@ (800fbd0 <handle_device_control+0x19c>)
 800fb20:	69fb      	ldr	r3, [r7, #28]
 800fb22:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fb26:	4619      	mov	r1, r3
 800fb28:	4610      	mov	r0, r2
 800fb2a:	f000 fdd9 	bl	80106e0 <HAL_GPIO_ReadPin>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	72fb      	strb	r3, [r7, #11]
				global_device_states[i] = (state == GPIO_PIN_SET) ? 1 : 0;
 800fb32:	7afb      	ldrb	r3, [r7, #11]
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	bf0c      	ite	eq
 800fb38:	2301      	moveq	r3, #1
 800fb3a:	2300      	movne	r3, #0
 800fb3c:	b2db      	uxtb	r3, r3
 800fb3e:	4619      	mov	r1, r3
 800fb40:	4a26      	ldr	r2, [pc, #152]	@ (800fbdc <handle_device_control+0x1a8>)
 800fb42:	69fb      	ldr	r3, [r7, #28]
 800fb44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				cJSON_AddNumberToObject(resp, devices[i], global_device_states[i]);
 800fb48:	4a1f      	ldr	r2, [pc, #124]	@ (800fbc8 <handle_device_control+0x194>)
 800fb4a:	69fb      	ldr	r3, [r7, #28]
 800fb4c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fb50:	4a22      	ldr	r2, [pc, #136]	@ (800fbdc <handle_device_control+0x1a8>)
 800fb52:	69fb      	ldr	r3, [r7, #28]
 800fb54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7f8 fd13 	bl	8008584 <__aeabi_i2d>
 800fb5e:	4602      	mov	r2, r0
 800fb60:	460b      	mov	r3, r1
 800fb62:	ec43 2b10 	vmov	d0, r2, r3
 800fb66:	4621      	mov	r1, r4
 800fb68:	69b8      	ldr	r0, [r7, #24]
 800fb6a:	f7fd fa67 	bl	800d03c <cJSON_AddNumberToObject>
				safe_printf("ESP: Device %d set to %s\n", i + 1, global_device_states[i] ? "ON" : "OFF");
 800fb6e:	69fb      	ldr	r3, [r7, #28]
 800fb70:	1c59      	adds	r1, r3, #1
 800fb72:	4a1a      	ldr	r2, [pc, #104]	@ (800fbdc <handle_device_control+0x1a8>)
 800fb74:	69fb      	ldr	r3, [r7, #28]
 800fb76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d001      	beq.n	800fb82 <handle_device_control+0x14e>
 800fb7e:	4b18      	ldr	r3, [pc, #96]	@ (800fbe0 <handle_device_control+0x1ac>)
 800fb80:	e000      	b.n	800fb84 <handle_device_control+0x150>
 800fb82:	4b18      	ldr	r3, [pc, #96]	@ (800fbe4 <handle_device_control+0x1b0>)
 800fb84:	461a      	mov	r2, r3
 800fb86:	4818      	ldr	r0, [pc, #96]	@ (800fbe8 <handle_device_control+0x1b4>)
 800fb88:	f000 f9d4 	bl	800ff34 <safe_printf>
		for (int i = 0; i < DEVICE_COUNT; i++)
 800fb8c:	69fb      	ldr	r3, [r7, #28]
 800fb8e:	3301      	adds	r3, #1
 800fb90:	61fb      	str	r3, [r7, #28]
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	2b03      	cmp	r3, #3
 800fb96:	dd8b      	ble.n	800fab0 <handle_device_control+0x7c>
			}
		}
		xSemaphoreGive(deviceStateMutex);
 800fb98:	4b0a      	ldr	r3, [pc, #40]	@ (800fbc4 <handle_device_control+0x190>)
 800fb9a:	6818      	ldr	r0, [r3, #0]
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	2200      	movs	r2, #0
 800fba0:	2100      	movs	r1, #0
 800fba2:	f004 f813 	bl	8013bcc <xQueueGenericSend>
	}
	send_json_response(resp);
 800fba6:	69b8      	ldr	r0, [r7, #24]
 800fba8:	f7ff fed4 	bl	800f954 <send_json_response>
	cJSON_Delete(resp);
 800fbac:	69b8      	ldr	r0, [r7, #24]
 800fbae:	f7fb fb47 	bl	800b240 <cJSON_Delete>
 800fbb2:	e000      	b.n	800fbb6 <handle_device_control+0x182>
				return;
 800fbb4:	bf00      	nop
}
 800fbb6:	3724      	adds	r7, #36	@ 0x24
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd90      	pop	{r4, r7, pc}
 800fbbc:	0801be6c 	.word	0x0801be6c
 800fbc0:	40020000 	.word	0x40020000
 800fbc4:	200012f8 	.word	0x200012f8
 800fbc8:	20000038 	.word	0x20000038
 800fbcc:	20000048 	.word	0x20000048
 800fbd0:	20000068 	.word	0x20000068
 800fbd4:	20000058 	.word	0x20000058
 800fbd8:	20000070 	.word	0x20000070
 800fbdc:	200014bc 	.word	0x200014bc
 800fbe0:	0801be74 	.word	0x0801be74
 800fbe4:	0801be78 	.word	0x0801be78
 800fbe8:	0801be7c 	.word	0x0801be7c

0800fbec <process_json>:

void process_json(uint8_t *jsonBuffer)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b084      	sub	sp, #16
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
    cJSON *json = cJSON_Parse((char *)jsonBuffer);
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f7fc fb37 	bl	800c268 <cJSON_Parse>
 800fbfa:	60f8      	str	r0, [r7, #12]
    if (!json)
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d103      	bne.n	800fc0a <process_json+0x1e>
    {
        safe_printf("Invalid JSON!\n");
 800fc02:	4812      	ldr	r0, [pc, #72]	@ (800fc4c <process_json+0x60>)
 800fc04:	f000 f996 	bl	800ff34 <safe_printf>
        return;
 800fc08:	e01c      	b.n	800fc44 <process_json+0x58>
    }

    cJSON *request = cJSON_GetObjectItem(json, "request");
 800fc0a:	4911      	ldr	r1, [pc, #68]	@ (800fc50 <process_json+0x64>)
 800fc0c:	68f8      	ldr	r0, [r7, #12]
 800fc0e:	f7fd f95f 	bl	800ced0 <cJSON_GetObjectItem>
 800fc12:	60b8      	str	r0, [r7, #8]
    if (cJSON_IsString(request) && strcmp(request->valuestring, "getCurrentStatus") == 0)
 800fc14:	68b8      	ldr	r0, [r7, #8]
 800fc16:	f7fd faaa 	bl	800d16e <cJSON_IsString>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d00b      	beq.n	800fc38 <process_json+0x4c>
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	691b      	ldr	r3, [r3, #16]
 800fc24:	490b      	ldr	r1, [pc, #44]	@ (800fc54 <process_json+0x68>)
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7f8 faf2 	bl	8008210 <strcmp>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d102      	bne.n	800fc38 <process_json+0x4c>
    {
        handle_get_status_request();
 800fc32:	f7ff febd 	bl	800f9b0 <handle_get_status_request>
 800fc36:	e002      	b.n	800fc3e <process_json+0x52>
    }
    else
    {
        handle_device_control(json);
 800fc38:	68f8      	ldr	r0, [r7, #12]
 800fc3a:	f7ff fefb 	bl	800fa34 <handle_device_control>
    }
    cJSON_Delete(json);
 800fc3e:	68f8      	ldr	r0, [r7, #12]
 800fc40:	f7fb fafe 	bl	800b240 <cJSON_Delete>
}
 800fc44:	3710      	adds	r7, #16
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
 800fc4a:	bf00      	nop
 800fc4c:	0801be98 	.word	0x0801be98
 800fc50:	0801bea8 	.word	0x0801bea8
 800fc54:	0801beb0 	.word	0x0801beb0

0800fc58 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b084      	sub	sp, #16
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	4a1f      	ldr	r2, [pc, #124]	@ (800fce4 <HAL_UART_RxCpltCallback+0x8c>)
 800fc66:	4293      	cmp	r3, r2
 800fc68:	d124      	bne.n	800fcb4 <HAL_UART_RxCpltCallback+0x5c>
    {
        uint16_t nextHead = (uartHead + 1) % UART_RING_BUFFER_SIZE;
 800fc6a:	4b1f      	ldr	r3, [pc, #124]	@ (800fce8 <HAL_UART_RxCpltCallback+0x90>)
 800fc6c:	881b      	ldrh	r3, [r3, #0]
 800fc6e:	b29b      	uxth	r3, r3
 800fc70:	3301      	adds	r3, #1
 800fc72:	425a      	negs	r2, r3
 800fc74:	b2db      	uxtb	r3, r3
 800fc76:	b2d2      	uxtb	r2, r2
 800fc78:	bf58      	it	pl
 800fc7a:	4253      	negpl	r3, r2
 800fc7c:	817b      	strh	r3, [r7, #10]
        if (nextHead != uartTail)
 800fc7e:	4b1b      	ldr	r3, [pc, #108]	@ (800fcec <HAL_UART_RxCpltCallback+0x94>)
 800fc80:	881b      	ldrh	r3, [r3, #0]
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	897a      	ldrh	r2, [r7, #10]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d00b      	beq.n	800fca2 <HAL_UART_RxCpltCallback+0x4a>
        {
            uartRingBuffer[uartHead] = uartRxByte;
 800fc8a:	4b17      	ldr	r3, [pc, #92]	@ (800fce8 <HAL_UART_RxCpltCallback+0x90>)
 800fc8c:	881b      	ldrh	r3, [r3, #0]
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	461a      	mov	r2, r3
 800fc92:	4b17      	ldr	r3, [pc, #92]	@ (800fcf0 <HAL_UART_RxCpltCallback+0x98>)
 800fc94:	7819      	ldrb	r1, [r3, #0]
 800fc96:	4b17      	ldr	r3, [pc, #92]	@ (800fcf4 <HAL_UART_RxCpltCallback+0x9c>)
 800fc98:	5499      	strb	r1, [r3, r2]
            uartHead = nextHead;
 800fc9a:	4a13      	ldr	r2, [pc, #76]	@ (800fce8 <HAL_UART_RxCpltCallback+0x90>)
 800fc9c:	897b      	ldrh	r3, [r7, #10]
 800fc9e:	8013      	strh	r3, [r2, #0]
 800fca0:	e002      	b.n	800fca8 <HAL_UART_RxCpltCallback+0x50>
        } else {
            safe_printf("UART ring buffer overflow!\n");
 800fca2:	4815      	ldr	r0, [pc, #84]	@ (800fcf8 <HAL_UART_RxCpltCallback+0xa0>)
 800fca4:	f000 f946 	bl	800ff34 <safe_printf>
        }
        HAL_UART_Receive_IT(&huart3, &uartRxByte, 1);
 800fca8:	2201      	movs	r2, #1
 800fcaa:	4911      	ldr	r1, [pc, #68]	@ (800fcf0 <HAL_UART_RxCpltCallback+0x98>)
 800fcac:	4813      	ldr	r0, [pc, #76]	@ (800fcfc <HAL_UART_RxCpltCallback+0xa4>)
 800fcae:	f002 fe26 	bl	80128fe <HAL_UART_Receive_IT>
    {
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		Sim800_RxCallBack();
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    }
}
 800fcb2:	e012      	b.n	800fcda <HAL_UART_RxCpltCallback+0x82>
    else if(huart == UART_SIM800)
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	4a12      	ldr	r2, [pc, #72]	@ (800fd00 <HAL_UART_RxCpltCallback+0xa8>)
 800fcb8:	4293      	cmp	r3, r2
 800fcba:	d10e      	bne.n	800fcda <HAL_UART_RxCpltCallback+0x82>
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	60fb      	str	r3, [r7, #12]
		Sim800_RxCallBack();
 800fcc0:	f7fa fa48 	bl	800a154 <Sim800_RxCallBack>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d007      	beq.n	800fcda <HAL_UART_RxCpltCallback+0x82>
 800fcca:	4b0e      	ldr	r3, [pc, #56]	@ (800fd04 <HAL_UART_RxCpltCallback+0xac>)
 800fccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fcd0:	601a      	str	r2, [r3, #0]
 800fcd2:	f3bf 8f4f 	dsb	sy
 800fcd6:	f3bf 8f6f 	isb	sy
}
 800fcda:	bf00      	nop
 800fcdc:	3710      	adds	r7, #16
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
 800fce2:	bf00      	nop
 800fce4:	40004800 	.word	0x40004800
 800fce8:	200012f0 	.word	0x200012f0
 800fcec:	200012f2 	.word	0x200012f2
 800fcf0:	200012f4 	.word	0x200012f4
 800fcf4:	200011f0 	.word	0x200011f0
 800fcf8:	0801bec4 	.word	0x0801bec4
 800fcfc:	200010d8 	.word	0x200010d8
 800fd00:	20001048 	.word	0x20001048
 800fd04:	e000ed04 	.word	0xe000ed04

0800fd08 <setup_freeRTOS>:
volatile int global_device_states[4] = {0, 0, 0, 0};
uint32_t lastKeepAliveTime = 0;


void setup_freeRTOS(void)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b086      	sub	sp, #24
 800fd0c:	af02      	add	r7, sp, #8
	HAL_SPI_Receive_IT(&hspi2, &spiRxByte, 1);
 800fd0e:	2201      	movs	r2, #1
 800fd10:	4945      	ldr	r1, [pc, #276]	@ (800fe28 <setup_freeRTOS+0x120>)
 800fd12:	4846      	ldr	r0, [pc, #280]	@ (800fe2c <setup_freeRTOS+0x124>)
 800fd14:	f001 fcfa 	bl	801170c <HAL_SPI_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &rx_data, 1);
 800fd18:	2201      	movs	r2, #1
 800fd1a:	4945      	ldr	r1, [pc, #276]	@ (800fe30 <setup_freeRTOS+0x128>)
 800fd1c:	4845      	ldr	r0, [pc, #276]	@ (800fe34 <setup_freeRTOS+0x12c>)
 800fd1e:	f002 fdee 	bl	80128fe <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &uartRxByte, 1);
 800fd22:	2201      	movs	r2, #1
 800fd24:	4944      	ldr	r1, [pc, #272]	@ (800fe38 <setup_freeRTOS+0x130>)
 800fd26:	4845      	ldr	r0, [pc, #276]	@ (800fe3c <setup_freeRTOS+0x134>)
 800fd28:	f002 fde9 	bl	80128fe <HAL_UART_Receive_IT>

	status = xTaskCreate(SPI_Handler, "SPIHandler", 512, NULL, 5, NULL);
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	9301      	str	r3, [sp, #4]
 800fd30:	2305      	movs	r3, #5
 800fd32:	9300      	str	r3, [sp, #0]
 800fd34:	2300      	movs	r3, #0
 800fd36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd3a:	4941      	ldr	r1, [pc, #260]	@ (800fe40 <setup_freeRTOS+0x138>)
 800fd3c:	4841      	ldr	r0, [pc, #260]	@ (800fe44 <setup_freeRTOS+0x13c>)
 800fd3e:	f004 fc6d 	bl	801461c <xTaskCreate>
 800fd42:	4603      	mov	r3, r0
 800fd44:	4a40      	ldr	r2, [pc, #256]	@ (800fe48 <setup_freeRTOS+0x140>)
 800fd46:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800fd48:	4b3f      	ldr	r3, [pc, #252]	@ (800fe48 <setup_freeRTOS+0x140>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	2b01      	cmp	r3, #1
 800fd4e:	d00b      	beq.n	800fd68 <setup_freeRTOS+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800fd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd54:	f383 8811 	msr	BASEPRI, r3
 800fd58:	f3bf 8f6f 	isb	sy
 800fd5c:	f3bf 8f4f 	dsb	sy
 800fd60:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800fd62:	bf00      	nop
 800fd64:	bf00      	nop
 800fd66:	e7fd      	b.n	800fd64 <setup_freeRTOS+0x5c>

	status = xTaskCreate(UART_Handler, "UARTHandler", 1024, NULL, 4, NULL);
 800fd68:	2300      	movs	r3, #0
 800fd6a:	9301      	str	r3, [sp, #4]
 800fd6c:	2304      	movs	r3, #4
 800fd6e:	9300      	str	r3, [sp, #0]
 800fd70:	2300      	movs	r3, #0
 800fd72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800fd76:	4935      	ldr	r1, [pc, #212]	@ (800fe4c <setup_freeRTOS+0x144>)
 800fd78:	4835      	ldr	r0, [pc, #212]	@ (800fe50 <setup_freeRTOS+0x148>)
 800fd7a:	f004 fc4f 	bl	801461c <xTaskCreate>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	4a31      	ldr	r2, [pc, #196]	@ (800fe48 <setup_freeRTOS+0x140>)
 800fd82:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800fd84:	4b30      	ldr	r3, [pc, #192]	@ (800fe48 <setup_freeRTOS+0x140>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	2b01      	cmp	r3, #1
 800fd8a:	d00b      	beq.n	800fda4 <setup_freeRTOS+0x9c>
        __asm volatile
 800fd8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd90:	f383 8811 	msr	BASEPRI, r3
 800fd94:	f3bf 8f6f 	isb	sy
 800fd98:	f3bf 8f4f 	dsb	sy
 800fd9c:	60bb      	str	r3, [r7, #8]
    }
 800fd9e:	bf00      	nop
 800fda0:	bf00      	nop
 800fda2:	e7fd      	b.n	800fda0 <setup_freeRTOS+0x98>

	status = xTaskCreate(GSM_MQTT_Task, "GSM_MQTT_Task", 1024, NULL, 7, NULL);
 800fda4:	2300      	movs	r3, #0
 800fda6:	9301      	str	r3, [sp, #4]
 800fda8:	2307      	movs	r3, #7
 800fdaa:	9300      	str	r3, [sp, #0]
 800fdac:	2300      	movs	r3, #0
 800fdae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800fdb2:	4928      	ldr	r1, [pc, #160]	@ (800fe54 <setup_freeRTOS+0x14c>)
 800fdb4:	4828      	ldr	r0, [pc, #160]	@ (800fe58 <setup_freeRTOS+0x150>)
 800fdb6:	f004 fc31 	bl	801461c <xTaskCreate>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	4a22      	ldr	r2, [pc, #136]	@ (800fe48 <setup_freeRTOS+0x140>)
 800fdbe:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800fdc0:	4b21      	ldr	r3, [pc, #132]	@ (800fe48 <setup_freeRTOS+0x140>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	d00b      	beq.n	800fde0 <setup_freeRTOS+0xd8>
        __asm volatile
 800fdc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdcc:	f383 8811 	msr	BASEPRI, r3
 800fdd0:	f3bf 8f6f 	isb	sy
 800fdd4:	f3bf 8f4f 	dsb	sy
 800fdd8:	607b      	str	r3, [r7, #4]
    }
 800fdda:	bf00      	nop
 800fddc:	bf00      	nop
 800fdde:	e7fd      	b.n	800fddc <setup_freeRTOS+0xd4>

	status = xTaskCreate(Display_Handler, "DisplayHandler", 1024, NULL, 3, NULL);
 800fde0:	2300      	movs	r3, #0
 800fde2:	9301      	str	r3, [sp, #4]
 800fde4:	2303      	movs	r3, #3
 800fde6:	9300      	str	r3, [sp, #0]
 800fde8:	2300      	movs	r3, #0
 800fdea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800fdee:	491b      	ldr	r1, [pc, #108]	@ (800fe5c <setup_freeRTOS+0x154>)
 800fdf0:	481b      	ldr	r0, [pc, #108]	@ (800fe60 <setup_freeRTOS+0x158>)
 800fdf2:	f004 fc13 	bl	801461c <xTaskCreate>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	4a13      	ldr	r2, [pc, #76]	@ (800fe48 <setup_freeRTOS+0x140>)
 800fdfa:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 800fdfc:	4b12      	ldr	r3, [pc, #72]	@ (800fe48 <setup_freeRTOS+0x140>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	d00b      	beq.n	800fe1c <setup_freeRTOS+0x114>
        __asm volatile
 800fe04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe08:	f383 8811 	msr	BASEPRI, r3
 800fe0c:	f3bf 8f6f 	isb	sy
 800fe10:	f3bf 8f4f 	dsb	sy
 800fe14:	603b      	str	r3, [r7, #0]
    }
 800fe16:	bf00      	nop
 800fe18:	bf00      	nop
 800fe1a:	e7fd      	b.n	800fe18 <setup_freeRTOS+0x110>

	vTaskStartScheduler();
 800fe1c:	f004 fdf4 	bl	8014a08 <vTaskStartScheduler>
}
 800fe20:	bf00      	nop
 800fe22:	3710      	adds	r7, #16
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	200011a4 	.word	0x200011a4
 800fe2c:	20000f98 	.word	0x20000f98
 800fe30:	2000026c 	.word	0x2000026c
 800fe34:	20001048 	.word	0x20001048
 800fe38:	200012f4 	.word	0x200012f4
 800fe3c:	200010d8 	.word	0x200010d8
 800fe40:	0801bf00 	.word	0x0801bf00
 800fe44:	0800edd5 	.word	0x0800edd5
 800fe48:	200012fc 	.word	0x200012fc
 800fe4c:	0801bf0c 	.word	0x0801bf0c
 800fe50:	0800f849 	.word	0x0800f849
 800fe54:	0801bf18 	.word	0x0801bf18
 800fe58:	0800e721 	.word	0x0800e721
 800fe5c:	0801bf28 	.word	0x0801bf28
 800fe60:	0800d19d 	.word	0x0800d19d

0800fe64 <user_app_init>:

void user_app_init(void)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
	ST7735_Init(0);
 800fe6a:	2000      	movs	r0, #0
 800fe6c:	f7fa ff00 	bl	800ac70 <ST7735_Init>
	ST7735_SetRotation(1);
 800fe70:	2001      	movs	r0, #1
 800fe72:	f7fa ff29 	bl	800acc8 <ST7735_SetRotation>
	fillScreen(BLACK);
 800fe76:	2000      	movs	r0, #0
 800fe78:	f7f9 fd2c 	bl	80098d4 <fillScreen>
	showStartupLogoAndMenu();
 800fe7c:	f7fe ff9a 	bl	800edb4 <showStartupLogoAndMenu>
	deviceStateMutex = xSemaphoreCreateMutex();
 800fe80:	2001      	movs	r0, #1
 800fe82:	f003 fe8a 	bl	8013b9a <xQueueCreateMutex>
 800fe86:	4603      	mov	r3, r0
 800fe88:	4a12      	ldr	r2, [pc, #72]	@ (800fed4 <user_app_init+0x70>)
 800fe8a:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 4; i++) {
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	607b      	str	r3, [r7, #4]
 800fe90:	e00c      	b.n	800feac <user_app_init+0x48>
	  global_device_states[i] = 0;
 800fe92:	4a11      	ldr	r2, [pc, #68]	@ (800fed8 <user_app_init+0x74>)
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2100      	movs	r1, #0
 800fe98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  device_states[i] = 0;
 800fe9c:	4a0f      	ldr	r2, [pc, #60]	@ (800fedc <user_app_init+0x78>)
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2100      	movs	r1, #0
 800fea2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	3301      	adds	r3, #1
 800feaa:	607b      	str	r3, [r7, #4]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2b03      	cmp	r3, #3
 800feb0:	ddef      	ble.n	800fe92 <user_app_init+0x2e>
	}
	uartMutex = xSemaphoreCreateMutex();
 800feb2:	2001      	movs	r0, #1
 800feb4:	f003 fe71 	bl	8013b9a <xQueueCreateMutex>
 800feb8:	4603      	mov	r3, r0
 800feba:	4a09      	ldr	r2, [pc, #36]	@ (800fee0 <user_app_init+0x7c>)
 800febc:	6013      	str	r3, [r2, #0]
	initializeMenu();
 800febe:	f7fe fbad 	bl	800e61c <initializeMenu>
	GSM_init();
 800fec2:	f7fe fbfb 	bl	800e6bc <GSM_init>
	setup_freeRTOS();
 800fec6:	f7ff ff1f 	bl	800fd08 <setup_freeRTOS>
}
 800feca:	bf00      	nop
 800fecc:	3708      	adds	r7, #8
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
 800fed2:	bf00      	nop
 800fed4:	200012f8 	.word	0x200012f8
 800fed8:	200014bc 	.word	0x200014bc
 800fedc:	20000e08 	.word	0x20000e08
 800fee0:	20001300 	.word	0x20001300

0800fee4 <vApplicationStackOverflowHook>:


void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6039      	str	r1, [r7, #0]
    safe_printf("Stack overflow in task: %s\n", pcTaskName);
 800feee:	6839      	ldr	r1, [r7, #0]
 800fef0:	4802      	ldr	r0, [pc, #8]	@ (800fefc <vApplicationStackOverflowHook+0x18>)
 800fef2:	f000 f81f 	bl	800ff34 <safe_printf>
    while(1);
 800fef6:	bf00      	nop
 800fef8:	e7fd      	b.n	800fef6 <vApplicationStackOverflowHook+0x12>
 800fefa:	bf00      	nop
 800fefc:	0801bf38 	.word	0x0801bf38

0800ff00 <print_task_info>:
}

void print_task_info(void)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800ff06:	af00      	add	r7, sp, #0
    char taskList[512];
    safe_printf("Task Info:\nName               State  Prio   StackNum     ID\n");
 800ff08:	4808      	ldr	r0, [pc, #32]	@ (800ff2c <print_task_info+0x2c>)
 800ff0a:	f000 f813 	bl	800ff34 <safe_printf>
    vTaskList(taskList);
 800ff0e:	463b      	mov	r3, r7
 800ff10:	4618      	mov	r0, r3
 800ff12:	f005 fcdd 	bl	80158d0 <vTaskList>
    safe_printf("%s\n", taskList);
 800ff16:	463b      	mov	r3, r7
 800ff18:	4619      	mov	r1, r3
 800ff1a:	4805      	ldr	r0, [pc, #20]	@ (800ff30 <print_task_info+0x30>)
 800ff1c:	f000 f80a 	bl	800ff34 <safe_printf>
}
 800ff20:	bf00      	nop
 800ff22:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	0801bf54 	.word	0x0801bf54
 800ff30:	0801bf94 	.word	0x0801bf94

0800ff34 <safe_printf>:


void safe_printf(const char *fmt, ...)
{
 800ff34:	b40f      	push	{r0, r1, r2, r3}
 800ff36:	b580      	push	{r7, lr}
 800ff38:	b0c2      	sub	sp, #264	@ 0x108
 800ff3a:	af00      	add	r7, sp, #0
    if (uartMutex != NULL && xSemaphoreTake(uartMutex, pdMS_TO_TICKS(200)) == pdTRUE)
 800ff3c:	4b1a      	ldr	r3, [pc, #104]	@ (800ffa8 <safe_printf+0x74>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d028      	beq.n	800ff96 <safe_printf+0x62>
 800ff44:	4b18      	ldr	r3, [pc, #96]	@ (800ffa8 <safe_printf+0x74>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	21c8      	movs	r1, #200	@ 0xc8
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f004 f8d0 	bl	80140f0 <xQueueSemaphoreTake>
 800ff50:	4603      	mov	r3, r0
 800ff52:	2b01      	cmp	r3, #1
 800ff54:	d11f      	bne.n	800ff96 <safe_printf+0x62>
    {
        char buffer[256];
        va_list args;
        va_start(args, fmt);
 800ff56:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800ff5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        vsnprintf(buffer, sizeof(buffer), fmt, args);
 800ff5e:	1d38      	adds	r0, r7, #4
 800ff60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ff64:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800ff68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ff6c:	f008 fa4c 	bl	8018408 <vsniprintf>
        va_end(args);

        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800ff70:	1d3b      	adds	r3, r7, #4
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7f8 f9ac 	bl	80082d0 <strlen>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	b29a      	uxth	r2, r3
 800ff7c:	1d39      	adds	r1, r7, #4
 800ff7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ff82:	480a      	ldr	r0, [pc, #40]	@ (800ffac <safe_printf+0x78>)
 800ff84:	f002 fbfa 	bl	801277c <HAL_UART_Transmit>
        xSemaphoreGive(uartMutex);
 800ff88:	4b07      	ldr	r3, [pc, #28]	@ (800ffa8 <safe_printf+0x74>)
 800ff8a:	6818      	ldr	r0, [r3, #0]
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	2200      	movs	r2, #0
 800ff90:	2100      	movs	r1, #0
 800ff92:	f003 fe1b 	bl	8013bcc <xQueueGenericSend>
    }
}
 800ff96:	bf00      	nop
 800ff98:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ffa2:	b004      	add	sp, #16
 800ffa4:	4770      	bx	lr
 800ffa6:	bf00      	nop
 800ffa8:	20001300 	.word	0x20001300
 800ffac:	20001090 	.word	0x20001090

0800ffb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ffb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ffe8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800ffb4:	f7ff fc1c 	bl	800f7f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800ffb8:	480c      	ldr	r0, [pc, #48]	@ (800ffec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800ffba:	490d      	ldr	r1, [pc, #52]	@ (800fff0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800ffbc:	4a0d      	ldr	r2, [pc, #52]	@ (800fff4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ffbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ffc0:	e002      	b.n	800ffc8 <LoopCopyDataInit>

0800ffc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ffc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ffc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ffc6:	3304      	adds	r3, #4

0800ffc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ffc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ffca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ffcc:	d3f9      	bcc.n	800ffc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ffce:	4a0a      	ldr	r2, [pc, #40]	@ (800fff8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ffd0:	4c0a      	ldr	r4, [pc, #40]	@ (800fffc <LoopFillZerobss+0x22>)
  movs r3, #0
 800ffd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ffd4:	e001      	b.n	800ffda <LoopFillZerobss>

0800ffd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ffd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ffd8:	3204      	adds	r2, #4

0800ffda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ffda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ffdc:	d3fb      	bcc.n	800ffd6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800ffde:	f008 fb59 	bl	8018694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ffe2:	f7fe fc12 	bl	800e80a <main>
  bx  lr    
 800ffe6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ffe8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ffec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800fff0:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 800fff4:	0801df68 	.word	0x0801df68
  ldr r2, =_sbss
 800fff8:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 800fffc:	200143cc 	.word	0x200143cc

08010000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010000:	e7fe      	b.n	8010000 <ADC_IRQHandler>
	...

08010004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010008:	4b0e      	ldr	r3, [pc, #56]	@ (8010044 <HAL_Init+0x40>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	4a0d      	ldr	r2, [pc, #52]	@ (8010044 <HAL_Init+0x40>)
 801000e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010012:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010014:	4b0b      	ldr	r3, [pc, #44]	@ (8010044 <HAL_Init+0x40>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	4a0a      	ldr	r2, [pc, #40]	@ (8010044 <HAL_Init+0x40>)
 801001a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801001e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010020:	4b08      	ldr	r3, [pc, #32]	@ (8010044 <HAL_Init+0x40>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	4a07      	ldr	r2, [pc, #28]	@ (8010044 <HAL_Init+0x40>)
 8010026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801002a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801002c:	2003      	movs	r0, #3
 801002e:	f000 f8fc 	bl	801022a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010032:	200f      	movs	r0, #15
 8010034:	f7ff fa80 	bl	800f538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010038:	f7ff f888 	bl	800f14c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801003c:	2300      	movs	r3, #0
}
 801003e:	4618      	mov	r0, r3
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	40023c00 	.word	0x40023c00

08010048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010048:	b480      	push	{r7}
 801004a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801004c:	4b06      	ldr	r3, [pc, #24]	@ (8010068 <HAL_IncTick+0x20>)
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	461a      	mov	r2, r3
 8010052:	4b06      	ldr	r3, [pc, #24]	@ (801006c <HAL_IncTick+0x24>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4413      	add	r3, r2
 8010058:	4a04      	ldr	r2, [pc, #16]	@ (801006c <HAL_IncTick+0x24>)
 801005a:	6013      	str	r3, [r2, #0]
}
 801005c:	bf00      	nop
 801005e:	46bd      	mov	sp, r7
 8010060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010064:	4770      	bx	lr
 8010066:	bf00      	nop
 8010068:	2000007c 	.word	0x2000007c
 801006c:	200014d0 	.word	0x200014d0

08010070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010070:	b480      	push	{r7}
 8010072:	af00      	add	r7, sp, #0
  return uwTick;
 8010074:	4b03      	ldr	r3, [pc, #12]	@ (8010084 <HAL_GetTick+0x14>)
 8010076:	681b      	ldr	r3, [r3, #0]
}
 8010078:	4618      	mov	r0, r3
 801007a:	46bd      	mov	sp, r7
 801007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010080:	4770      	bx	lr
 8010082:	bf00      	nop
 8010084:	200014d0 	.word	0x200014d0

08010088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b084      	sub	sp, #16
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010090:	f7ff ffee 	bl	8010070 <HAL_GetTick>
 8010094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100a0:	d005      	beq.n	80100ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80100a2:	4b0a      	ldr	r3, [pc, #40]	@ (80100cc <HAL_Delay+0x44>)
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	461a      	mov	r2, r3
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	4413      	add	r3, r2
 80100ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80100ae:	bf00      	nop
 80100b0:	f7ff ffde 	bl	8010070 <HAL_GetTick>
 80100b4:	4602      	mov	r2, r0
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	1ad3      	subs	r3, r2, r3
 80100ba:	68fa      	ldr	r2, [r7, #12]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d8f7      	bhi.n	80100b0 <HAL_Delay+0x28>
  {
  }
}
 80100c0:	bf00      	nop
 80100c2:	bf00      	nop
 80100c4:	3710      	adds	r7, #16
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop
 80100cc:	2000007c 	.word	0x2000007c

080100d0 <__NVIC_SetPriorityGrouping>:
{
 80100d0:	b480      	push	{r7}
 80100d2:	b085      	sub	sp, #20
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f003 0307 	and.w	r3, r3, #7
 80100de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80100e0:	4b0c      	ldr	r3, [pc, #48]	@ (8010114 <__NVIC_SetPriorityGrouping+0x44>)
 80100e2:	68db      	ldr	r3, [r3, #12]
 80100e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80100e6:	68ba      	ldr	r2, [r7, #8]
 80100e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80100ec:	4013      	ands	r3, r2
 80100ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80100f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80100fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010102:	4a04      	ldr	r2, [pc, #16]	@ (8010114 <__NVIC_SetPriorityGrouping+0x44>)
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	60d3      	str	r3, [r2, #12]
}
 8010108:	bf00      	nop
 801010a:	3714      	adds	r7, #20
 801010c:	46bd      	mov	sp, r7
 801010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010112:	4770      	bx	lr
 8010114:	e000ed00 	.word	0xe000ed00

08010118 <__NVIC_GetPriorityGrouping>:
{
 8010118:	b480      	push	{r7}
 801011a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801011c:	4b04      	ldr	r3, [pc, #16]	@ (8010130 <__NVIC_GetPriorityGrouping+0x18>)
 801011e:	68db      	ldr	r3, [r3, #12]
 8010120:	0a1b      	lsrs	r3, r3, #8
 8010122:	f003 0307 	and.w	r3, r3, #7
}
 8010126:	4618      	mov	r0, r3
 8010128:	46bd      	mov	sp, r7
 801012a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012e:	4770      	bx	lr
 8010130:	e000ed00 	.word	0xe000ed00

08010134 <__NVIC_EnableIRQ>:
{
 8010134:	b480      	push	{r7}
 8010136:	b083      	sub	sp, #12
 8010138:	af00      	add	r7, sp, #0
 801013a:	4603      	mov	r3, r0
 801013c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801013e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010142:	2b00      	cmp	r3, #0
 8010144:	db0b      	blt.n	801015e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010146:	79fb      	ldrb	r3, [r7, #7]
 8010148:	f003 021f 	and.w	r2, r3, #31
 801014c:	4907      	ldr	r1, [pc, #28]	@ (801016c <__NVIC_EnableIRQ+0x38>)
 801014e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010152:	095b      	lsrs	r3, r3, #5
 8010154:	2001      	movs	r0, #1
 8010156:	fa00 f202 	lsl.w	r2, r0, r2
 801015a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801015e:	bf00      	nop
 8010160:	370c      	adds	r7, #12
 8010162:	46bd      	mov	sp, r7
 8010164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010168:	4770      	bx	lr
 801016a:	bf00      	nop
 801016c:	e000e100 	.word	0xe000e100

08010170 <__NVIC_SetPriority>:
{
 8010170:	b480      	push	{r7}
 8010172:	b083      	sub	sp, #12
 8010174:	af00      	add	r7, sp, #0
 8010176:	4603      	mov	r3, r0
 8010178:	6039      	str	r1, [r7, #0]
 801017a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801017c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010180:	2b00      	cmp	r3, #0
 8010182:	db0a      	blt.n	801019a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	b2da      	uxtb	r2, r3
 8010188:	490c      	ldr	r1, [pc, #48]	@ (80101bc <__NVIC_SetPriority+0x4c>)
 801018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801018e:	0112      	lsls	r2, r2, #4
 8010190:	b2d2      	uxtb	r2, r2
 8010192:	440b      	add	r3, r1
 8010194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8010198:	e00a      	b.n	80101b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	b2da      	uxtb	r2, r3
 801019e:	4908      	ldr	r1, [pc, #32]	@ (80101c0 <__NVIC_SetPriority+0x50>)
 80101a0:	79fb      	ldrb	r3, [r7, #7]
 80101a2:	f003 030f 	and.w	r3, r3, #15
 80101a6:	3b04      	subs	r3, #4
 80101a8:	0112      	lsls	r2, r2, #4
 80101aa:	b2d2      	uxtb	r2, r2
 80101ac:	440b      	add	r3, r1
 80101ae:	761a      	strb	r2, [r3, #24]
}
 80101b0:	bf00      	nop
 80101b2:	370c      	adds	r7, #12
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr
 80101bc:	e000e100 	.word	0xe000e100
 80101c0:	e000ed00 	.word	0xe000ed00

080101c4 <NVIC_EncodePriority>:
{
 80101c4:	b480      	push	{r7}
 80101c6:	b089      	sub	sp, #36	@ 0x24
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	60f8      	str	r0, [r7, #12]
 80101cc:	60b9      	str	r1, [r7, #8]
 80101ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	f003 0307 	and.w	r3, r3, #7
 80101d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	f1c3 0307 	rsb	r3, r3, #7
 80101de:	2b04      	cmp	r3, #4
 80101e0:	bf28      	it	cs
 80101e2:	2304      	movcs	r3, #4
 80101e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80101e6:	69fb      	ldr	r3, [r7, #28]
 80101e8:	3304      	adds	r3, #4
 80101ea:	2b06      	cmp	r3, #6
 80101ec:	d902      	bls.n	80101f4 <NVIC_EncodePriority+0x30>
 80101ee:	69fb      	ldr	r3, [r7, #28]
 80101f0:	3b03      	subs	r3, #3
 80101f2:	e000      	b.n	80101f6 <NVIC_EncodePriority+0x32>
 80101f4:	2300      	movs	r3, #0
 80101f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80101f8:	f04f 32ff 	mov.w	r2, #4294967295
 80101fc:	69bb      	ldr	r3, [r7, #24]
 80101fe:	fa02 f303 	lsl.w	r3, r2, r3
 8010202:	43da      	mvns	r2, r3
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	401a      	ands	r2, r3
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801020c:	f04f 31ff 	mov.w	r1, #4294967295
 8010210:	697b      	ldr	r3, [r7, #20]
 8010212:	fa01 f303 	lsl.w	r3, r1, r3
 8010216:	43d9      	mvns	r1, r3
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801021c:	4313      	orrs	r3, r2
}
 801021e:	4618      	mov	r0, r3
 8010220:	3724      	adds	r7, #36	@ 0x24
 8010222:	46bd      	mov	sp, r7
 8010224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010228:	4770      	bx	lr

0801022a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801022a:	b580      	push	{r7, lr}
 801022c:	b082      	sub	sp, #8
 801022e:	af00      	add	r7, sp, #0
 8010230:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f7ff ff4c 	bl	80100d0 <__NVIC_SetPriorityGrouping>
}
 8010238:	bf00      	nop
 801023a:	3708      	adds	r7, #8
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}

08010240 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010240:	b580      	push	{r7, lr}
 8010242:	b086      	sub	sp, #24
 8010244:	af00      	add	r7, sp, #0
 8010246:	4603      	mov	r3, r0
 8010248:	60b9      	str	r1, [r7, #8]
 801024a:	607a      	str	r2, [r7, #4]
 801024c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801024e:	2300      	movs	r3, #0
 8010250:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010252:	f7ff ff61 	bl	8010118 <__NVIC_GetPriorityGrouping>
 8010256:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010258:	687a      	ldr	r2, [r7, #4]
 801025a:	68b9      	ldr	r1, [r7, #8]
 801025c:	6978      	ldr	r0, [r7, #20]
 801025e:	f7ff ffb1 	bl	80101c4 <NVIC_EncodePriority>
 8010262:	4602      	mov	r2, r0
 8010264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010268:	4611      	mov	r1, r2
 801026a:	4618      	mov	r0, r3
 801026c:	f7ff ff80 	bl	8010170 <__NVIC_SetPriority>
}
 8010270:	bf00      	nop
 8010272:	3718      	adds	r7, #24
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af00      	add	r7, sp, #0
 801027e:	4603      	mov	r3, r0
 8010280:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010286:	4618      	mov	r0, r3
 8010288:	f7ff ff54 	bl	8010134 <__NVIC_EnableIRQ>
}
 801028c:	bf00      	nop
 801028e:	3708      	adds	r7, #8
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}

08010294 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b084      	sub	sp, #16
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80102a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80102a2:	f7ff fee5 	bl	8010070 <HAL_GetTick>
 80102a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80102ae:	b2db      	uxtb	r3, r3
 80102b0:	2b02      	cmp	r3, #2
 80102b2:	d008      	beq.n	80102c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2280      	movs	r2, #128	@ 0x80
 80102b8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2200      	movs	r2, #0
 80102be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80102c2:	2301      	movs	r3, #1
 80102c4:	e052      	b.n	801036c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	681a      	ldr	r2, [r3, #0]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	f022 0216 	bic.w	r2, r2, #22
 80102d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	695a      	ldr	r2, [r3, #20]
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80102e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d103      	bne.n	80102f6 <HAL_DMA_Abort+0x62>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d007      	beq.n	8010306 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	681a      	ldr	r2, [r3, #0]
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	f022 0208 	bic.w	r2, r2, #8
 8010304:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	681a      	ldr	r2, [r3, #0]
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	f022 0201 	bic.w	r2, r2, #1
 8010314:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010316:	e013      	b.n	8010340 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010318:	f7ff feaa 	bl	8010070 <HAL_GetTick>
 801031c:	4602      	mov	r2, r0
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	1ad3      	subs	r3, r2, r3
 8010322:	2b05      	cmp	r3, #5
 8010324:	d90c      	bls.n	8010340 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2220      	movs	r2, #32
 801032a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2203      	movs	r2, #3
 8010330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2200      	movs	r2, #0
 8010338:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 801033c:	2303      	movs	r3, #3
 801033e:	e015      	b.n	801036c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	f003 0301 	and.w	r3, r3, #1
 801034a:	2b00      	cmp	r3, #0
 801034c:	d1e4      	bne.n	8010318 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010352:	223f      	movs	r2, #63	@ 0x3f
 8010354:	409a      	lsls	r2, r3
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2201      	movs	r2, #1
 801035e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2200      	movs	r2, #0
 8010366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 801036a:	2300      	movs	r3, #0
}
 801036c:	4618      	mov	r0, r3
 801036e:	3710      	adds	r7, #16
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}

08010374 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8010374:	b480      	push	{r7}
 8010376:	b083      	sub	sp, #12
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8010382:	b2db      	uxtb	r3, r3
 8010384:	2b02      	cmp	r3, #2
 8010386:	d004      	beq.n	8010392 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2280      	movs	r2, #128	@ 0x80
 801038c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801038e:	2301      	movs	r3, #1
 8010390:	e00c      	b.n	80103ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2205      	movs	r2, #5
 8010396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	681a      	ldr	r2, [r3, #0]
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	f022 0201 	bic.w	r2, r2, #1
 80103a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80103aa:	2300      	movs	r3, #0
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	370c      	adds	r7, #12
 80103b0:	46bd      	mov	sp, r7
 80103b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b6:	4770      	bx	lr

080103b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b089      	sub	sp, #36	@ 0x24
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80103c2:	2300      	movs	r3, #0
 80103c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80103c6:	2300      	movs	r3, #0
 80103c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80103ca:	2300      	movs	r3, #0
 80103cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80103ce:	2300      	movs	r3, #0
 80103d0:	61fb      	str	r3, [r7, #28]
 80103d2:	e165      	b.n	80106a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80103d4:	2201      	movs	r2, #1
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	fa02 f303 	lsl.w	r3, r2, r3
 80103dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	697a      	ldr	r2, [r7, #20]
 80103e4:	4013      	ands	r3, r2
 80103e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80103e8:	693a      	ldr	r2, [r7, #16]
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	f040 8154 	bne.w	801069a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	f003 0303 	and.w	r3, r3, #3
 80103fa:	2b01      	cmp	r3, #1
 80103fc:	d005      	beq.n	801040a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	685b      	ldr	r3, [r3, #4]
 8010402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010406:	2b02      	cmp	r3, #2
 8010408:	d130      	bne.n	801046c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	689b      	ldr	r3, [r3, #8]
 801040e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010410:	69fb      	ldr	r3, [r7, #28]
 8010412:	005b      	lsls	r3, r3, #1
 8010414:	2203      	movs	r2, #3
 8010416:	fa02 f303 	lsl.w	r3, r2, r3
 801041a:	43db      	mvns	r3, r3
 801041c:	69ba      	ldr	r2, [r7, #24]
 801041e:	4013      	ands	r3, r2
 8010420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	68da      	ldr	r2, [r3, #12]
 8010426:	69fb      	ldr	r3, [r7, #28]
 8010428:	005b      	lsls	r3, r3, #1
 801042a:	fa02 f303 	lsl.w	r3, r2, r3
 801042e:	69ba      	ldr	r2, [r7, #24]
 8010430:	4313      	orrs	r3, r2
 8010432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	69ba      	ldr	r2, [r7, #24]
 8010438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	685b      	ldr	r3, [r3, #4]
 801043e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010440:	2201      	movs	r2, #1
 8010442:	69fb      	ldr	r3, [r7, #28]
 8010444:	fa02 f303 	lsl.w	r3, r2, r3
 8010448:	43db      	mvns	r3, r3
 801044a:	69ba      	ldr	r2, [r7, #24]
 801044c:	4013      	ands	r3, r2
 801044e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	091b      	lsrs	r3, r3, #4
 8010456:	f003 0201 	and.w	r2, r3, #1
 801045a:	69fb      	ldr	r3, [r7, #28]
 801045c:	fa02 f303 	lsl.w	r3, r2, r3
 8010460:	69ba      	ldr	r2, [r7, #24]
 8010462:	4313      	orrs	r3, r2
 8010464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	69ba      	ldr	r2, [r7, #24]
 801046a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	685b      	ldr	r3, [r3, #4]
 8010470:	f003 0303 	and.w	r3, r3, #3
 8010474:	2b03      	cmp	r3, #3
 8010476:	d017      	beq.n	80104a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	68db      	ldr	r3, [r3, #12]
 801047c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801047e:	69fb      	ldr	r3, [r7, #28]
 8010480:	005b      	lsls	r3, r3, #1
 8010482:	2203      	movs	r2, #3
 8010484:	fa02 f303 	lsl.w	r3, r2, r3
 8010488:	43db      	mvns	r3, r3
 801048a:	69ba      	ldr	r2, [r7, #24]
 801048c:	4013      	ands	r3, r2
 801048e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	689a      	ldr	r2, [r3, #8]
 8010494:	69fb      	ldr	r3, [r7, #28]
 8010496:	005b      	lsls	r3, r3, #1
 8010498:	fa02 f303 	lsl.w	r3, r2, r3
 801049c:	69ba      	ldr	r2, [r7, #24]
 801049e:	4313      	orrs	r3, r2
 80104a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	69ba      	ldr	r2, [r7, #24]
 80104a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	685b      	ldr	r3, [r3, #4]
 80104ac:	f003 0303 	and.w	r3, r3, #3
 80104b0:	2b02      	cmp	r3, #2
 80104b2:	d123      	bne.n	80104fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80104b4:	69fb      	ldr	r3, [r7, #28]
 80104b6:	08da      	lsrs	r2, r3, #3
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	3208      	adds	r2, #8
 80104bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80104c2:	69fb      	ldr	r3, [r7, #28]
 80104c4:	f003 0307 	and.w	r3, r3, #7
 80104c8:	009b      	lsls	r3, r3, #2
 80104ca:	220f      	movs	r2, #15
 80104cc:	fa02 f303 	lsl.w	r3, r2, r3
 80104d0:	43db      	mvns	r3, r3
 80104d2:	69ba      	ldr	r2, [r7, #24]
 80104d4:	4013      	ands	r3, r2
 80104d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	691a      	ldr	r2, [r3, #16]
 80104dc:	69fb      	ldr	r3, [r7, #28]
 80104de:	f003 0307 	and.w	r3, r3, #7
 80104e2:	009b      	lsls	r3, r3, #2
 80104e4:	fa02 f303 	lsl.w	r3, r2, r3
 80104e8:	69ba      	ldr	r2, [r7, #24]
 80104ea:	4313      	orrs	r3, r2
 80104ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80104ee:	69fb      	ldr	r3, [r7, #28]
 80104f0:	08da      	lsrs	r2, r3, #3
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	3208      	adds	r2, #8
 80104f6:	69b9      	ldr	r1, [r7, #24]
 80104f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010502:	69fb      	ldr	r3, [r7, #28]
 8010504:	005b      	lsls	r3, r3, #1
 8010506:	2203      	movs	r2, #3
 8010508:	fa02 f303 	lsl.w	r3, r2, r3
 801050c:	43db      	mvns	r3, r3
 801050e:	69ba      	ldr	r2, [r7, #24]
 8010510:	4013      	ands	r3, r2
 8010512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	685b      	ldr	r3, [r3, #4]
 8010518:	f003 0203 	and.w	r2, r3, #3
 801051c:	69fb      	ldr	r3, [r7, #28]
 801051e:	005b      	lsls	r3, r3, #1
 8010520:	fa02 f303 	lsl.w	r3, r2, r3
 8010524:	69ba      	ldr	r2, [r7, #24]
 8010526:	4313      	orrs	r3, r2
 8010528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	69ba      	ldr	r2, [r7, #24]
 801052e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	685b      	ldr	r3, [r3, #4]
 8010534:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8010538:	2b00      	cmp	r3, #0
 801053a:	f000 80ae 	beq.w	801069a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801053e:	2300      	movs	r3, #0
 8010540:	60fb      	str	r3, [r7, #12]
 8010542:	4b5d      	ldr	r3, [pc, #372]	@ (80106b8 <HAL_GPIO_Init+0x300>)
 8010544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010546:	4a5c      	ldr	r2, [pc, #368]	@ (80106b8 <HAL_GPIO_Init+0x300>)
 8010548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801054c:	6453      	str	r3, [r2, #68]	@ 0x44
 801054e:	4b5a      	ldr	r3, [pc, #360]	@ (80106b8 <HAL_GPIO_Init+0x300>)
 8010550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010556:	60fb      	str	r3, [r7, #12]
 8010558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801055a:	4a58      	ldr	r2, [pc, #352]	@ (80106bc <HAL_GPIO_Init+0x304>)
 801055c:	69fb      	ldr	r3, [r7, #28]
 801055e:	089b      	lsrs	r3, r3, #2
 8010560:	3302      	adds	r3, #2
 8010562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	f003 0303 	and.w	r3, r3, #3
 801056e:	009b      	lsls	r3, r3, #2
 8010570:	220f      	movs	r2, #15
 8010572:	fa02 f303 	lsl.w	r3, r2, r3
 8010576:	43db      	mvns	r3, r3
 8010578:	69ba      	ldr	r2, [r7, #24]
 801057a:	4013      	ands	r3, r2
 801057c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	4a4f      	ldr	r2, [pc, #316]	@ (80106c0 <HAL_GPIO_Init+0x308>)
 8010582:	4293      	cmp	r3, r2
 8010584:	d025      	beq.n	80105d2 <HAL_GPIO_Init+0x21a>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	4a4e      	ldr	r2, [pc, #312]	@ (80106c4 <HAL_GPIO_Init+0x30c>)
 801058a:	4293      	cmp	r3, r2
 801058c:	d01f      	beq.n	80105ce <HAL_GPIO_Init+0x216>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	4a4d      	ldr	r2, [pc, #308]	@ (80106c8 <HAL_GPIO_Init+0x310>)
 8010592:	4293      	cmp	r3, r2
 8010594:	d019      	beq.n	80105ca <HAL_GPIO_Init+0x212>
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	4a4c      	ldr	r2, [pc, #304]	@ (80106cc <HAL_GPIO_Init+0x314>)
 801059a:	4293      	cmp	r3, r2
 801059c:	d013      	beq.n	80105c6 <HAL_GPIO_Init+0x20e>
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	4a4b      	ldr	r2, [pc, #300]	@ (80106d0 <HAL_GPIO_Init+0x318>)
 80105a2:	4293      	cmp	r3, r2
 80105a4:	d00d      	beq.n	80105c2 <HAL_GPIO_Init+0x20a>
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	4a4a      	ldr	r2, [pc, #296]	@ (80106d4 <HAL_GPIO_Init+0x31c>)
 80105aa:	4293      	cmp	r3, r2
 80105ac:	d007      	beq.n	80105be <HAL_GPIO_Init+0x206>
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	4a49      	ldr	r2, [pc, #292]	@ (80106d8 <HAL_GPIO_Init+0x320>)
 80105b2:	4293      	cmp	r3, r2
 80105b4:	d101      	bne.n	80105ba <HAL_GPIO_Init+0x202>
 80105b6:	2306      	movs	r3, #6
 80105b8:	e00c      	b.n	80105d4 <HAL_GPIO_Init+0x21c>
 80105ba:	2307      	movs	r3, #7
 80105bc:	e00a      	b.n	80105d4 <HAL_GPIO_Init+0x21c>
 80105be:	2305      	movs	r3, #5
 80105c0:	e008      	b.n	80105d4 <HAL_GPIO_Init+0x21c>
 80105c2:	2304      	movs	r3, #4
 80105c4:	e006      	b.n	80105d4 <HAL_GPIO_Init+0x21c>
 80105c6:	2303      	movs	r3, #3
 80105c8:	e004      	b.n	80105d4 <HAL_GPIO_Init+0x21c>
 80105ca:	2302      	movs	r3, #2
 80105cc:	e002      	b.n	80105d4 <HAL_GPIO_Init+0x21c>
 80105ce:	2301      	movs	r3, #1
 80105d0:	e000      	b.n	80105d4 <HAL_GPIO_Init+0x21c>
 80105d2:	2300      	movs	r3, #0
 80105d4:	69fa      	ldr	r2, [r7, #28]
 80105d6:	f002 0203 	and.w	r2, r2, #3
 80105da:	0092      	lsls	r2, r2, #2
 80105dc:	4093      	lsls	r3, r2
 80105de:	69ba      	ldr	r2, [r7, #24]
 80105e0:	4313      	orrs	r3, r2
 80105e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80105e4:	4935      	ldr	r1, [pc, #212]	@ (80106bc <HAL_GPIO_Init+0x304>)
 80105e6:	69fb      	ldr	r3, [r7, #28]
 80105e8:	089b      	lsrs	r3, r3, #2
 80105ea:	3302      	adds	r3, #2
 80105ec:	69ba      	ldr	r2, [r7, #24]
 80105ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80105f2:	4b3a      	ldr	r3, [pc, #232]	@ (80106dc <HAL_GPIO_Init+0x324>)
 80105f4:	689b      	ldr	r3, [r3, #8]
 80105f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	43db      	mvns	r3, r3
 80105fc:	69ba      	ldr	r2, [r7, #24]
 80105fe:	4013      	ands	r3, r2
 8010600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	685b      	ldr	r3, [r3, #4]
 8010606:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801060a:	2b00      	cmp	r3, #0
 801060c:	d003      	beq.n	8010616 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 801060e:	69ba      	ldr	r2, [r7, #24]
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	4313      	orrs	r3, r2
 8010614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8010616:	4a31      	ldr	r2, [pc, #196]	@ (80106dc <HAL_GPIO_Init+0x324>)
 8010618:	69bb      	ldr	r3, [r7, #24]
 801061a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801061c:	4b2f      	ldr	r3, [pc, #188]	@ (80106dc <HAL_GPIO_Init+0x324>)
 801061e:	68db      	ldr	r3, [r3, #12]
 8010620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010622:	693b      	ldr	r3, [r7, #16]
 8010624:	43db      	mvns	r3, r3
 8010626:	69ba      	ldr	r2, [r7, #24]
 8010628:	4013      	ands	r3, r2
 801062a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	685b      	ldr	r3, [r3, #4]
 8010630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010634:	2b00      	cmp	r3, #0
 8010636:	d003      	beq.n	8010640 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8010638:	69ba      	ldr	r2, [r7, #24]
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	4313      	orrs	r3, r2
 801063e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010640:	4a26      	ldr	r2, [pc, #152]	@ (80106dc <HAL_GPIO_Init+0x324>)
 8010642:	69bb      	ldr	r3, [r7, #24]
 8010644:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8010646:	4b25      	ldr	r3, [pc, #148]	@ (80106dc <HAL_GPIO_Init+0x324>)
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801064c:	693b      	ldr	r3, [r7, #16]
 801064e:	43db      	mvns	r3, r3
 8010650:	69ba      	ldr	r2, [r7, #24]
 8010652:	4013      	ands	r3, r2
 8010654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801065e:	2b00      	cmp	r3, #0
 8010660:	d003      	beq.n	801066a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8010662:	69ba      	ldr	r2, [r7, #24]
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	4313      	orrs	r3, r2
 8010668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801066a:	4a1c      	ldr	r2, [pc, #112]	@ (80106dc <HAL_GPIO_Init+0x324>)
 801066c:	69bb      	ldr	r3, [r7, #24]
 801066e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010670:	4b1a      	ldr	r3, [pc, #104]	@ (80106dc <HAL_GPIO_Init+0x324>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	43db      	mvns	r3, r3
 801067a:	69ba      	ldr	r2, [r7, #24]
 801067c:	4013      	ands	r3, r2
 801067e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	685b      	ldr	r3, [r3, #4]
 8010684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010688:	2b00      	cmp	r3, #0
 801068a:	d003      	beq.n	8010694 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801068c:	69ba      	ldr	r2, [r7, #24]
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	4313      	orrs	r3, r2
 8010692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010694:	4a11      	ldr	r2, [pc, #68]	@ (80106dc <HAL_GPIO_Init+0x324>)
 8010696:	69bb      	ldr	r3, [r7, #24]
 8010698:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801069a:	69fb      	ldr	r3, [r7, #28]
 801069c:	3301      	adds	r3, #1
 801069e:	61fb      	str	r3, [r7, #28]
 80106a0:	69fb      	ldr	r3, [r7, #28]
 80106a2:	2b0f      	cmp	r3, #15
 80106a4:	f67f ae96 	bls.w	80103d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80106a8:	bf00      	nop
 80106aa:	bf00      	nop
 80106ac:	3724      	adds	r7, #36	@ 0x24
 80106ae:	46bd      	mov	sp, r7
 80106b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b4:	4770      	bx	lr
 80106b6:	bf00      	nop
 80106b8:	40023800 	.word	0x40023800
 80106bc:	40013800 	.word	0x40013800
 80106c0:	40020000 	.word	0x40020000
 80106c4:	40020400 	.word	0x40020400
 80106c8:	40020800 	.word	0x40020800
 80106cc:	40020c00 	.word	0x40020c00
 80106d0:	40021000 	.word	0x40021000
 80106d4:	40021400 	.word	0x40021400
 80106d8:	40021800 	.word	0x40021800
 80106dc:	40013c00 	.word	0x40013c00

080106e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80106e0:	b480      	push	{r7}
 80106e2:	b085      	sub	sp, #20
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	460b      	mov	r3, r1
 80106ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	691a      	ldr	r2, [r3, #16]
 80106f0:	887b      	ldrh	r3, [r7, #2]
 80106f2:	4013      	ands	r3, r2
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d002      	beq.n	80106fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80106f8:	2301      	movs	r3, #1
 80106fa:	73fb      	strb	r3, [r7, #15]
 80106fc:	e001      	b.n	8010702 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80106fe:	2300      	movs	r3, #0
 8010700:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8010702:	7bfb      	ldrb	r3, [r7, #15]
}
 8010704:	4618      	mov	r0, r3
 8010706:	3714      	adds	r7, #20
 8010708:	46bd      	mov	sp, r7
 801070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070e:	4770      	bx	lr

08010710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010710:	b480      	push	{r7}
 8010712:	b083      	sub	sp, #12
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	460b      	mov	r3, r1
 801071a:	807b      	strh	r3, [r7, #2]
 801071c:	4613      	mov	r3, r2
 801071e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010720:	787b      	ldrb	r3, [r7, #1]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d003      	beq.n	801072e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010726:	887a      	ldrh	r2, [r7, #2]
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801072c:	e003      	b.n	8010736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801072e:	887b      	ldrh	r3, [r7, #2]
 8010730:	041a      	lsls	r2, r3, #16
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	619a      	str	r2, [r3, #24]
}
 8010736:	bf00      	nop
 8010738:	370c      	adds	r7, #12
 801073a:	46bd      	mov	sp, r7
 801073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010740:	4770      	bx	lr

08010742 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8010742:	b480      	push	{r7}
 8010744:	b085      	sub	sp, #20
 8010746:	af00      	add	r7, sp, #0
 8010748:	6078      	str	r0, [r7, #4]
 801074a:	460b      	mov	r3, r1
 801074c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	695b      	ldr	r3, [r3, #20]
 8010752:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8010754:	887a      	ldrh	r2, [r7, #2]
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	4013      	ands	r3, r2
 801075a:	041a      	lsls	r2, r3, #16
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	43d9      	mvns	r1, r3
 8010760:	887b      	ldrh	r3, [r7, #2]
 8010762:	400b      	ands	r3, r1
 8010764:	431a      	orrs	r2, r3
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	619a      	str	r2, [r3, #24]
}
 801076a:	bf00      	nop
 801076c:	3714      	adds	r7, #20
 801076e:	46bd      	mov	sp, r7
 8010770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010774:	4770      	bx	lr
	...

08010778 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b082      	sub	sp, #8
 801077c:	af00      	add	r7, sp, #0
 801077e:	4603      	mov	r3, r0
 8010780:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8010782:	4b08      	ldr	r3, [pc, #32]	@ (80107a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010784:	695a      	ldr	r2, [r3, #20]
 8010786:	88fb      	ldrh	r3, [r7, #6]
 8010788:	4013      	ands	r3, r2
 801078a:	2b00      	cmp	r3, #0
 801078c:	d006      	beq.n	801079c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801078e:	4a05      	ldr	r2, [pc, #20]	@ (80107a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010790:	88fb      	ldrh	r3, [r7, #6]
 8010792:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010794:	88fb      	ldrh	r3, [r7, #6]
 8010796:	4618      	mov	r0, r3
 8010798:	f7fd ff08 	bl	800e5ac <HAL_GPIO_EXTI_Callback>
  }
}
 801079c:	bf00      	nop
 801079e:	3708      	adds	r7, #8
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}
 80107a4:	40013c00 	.word	0x40013c00

080107a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b082      	sub	sp, #8
 80107ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80107ae:	2300      	movs	r3, #0
 80107b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80107b2:	2300      	movs	r3, #0
 80107b4:	603b      	str	r3, [r7, #0]
 80107b6:	4b20      	ldr	r3, [pc, #128]	@ (8010838 <HAL_PWREx_EnableOverDrive+0x90>)
 80107b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107ba:	4a1f      	ldr	r2, [pc, #124]	@ (8010838 <HAL_PWREx_EnableOverDrive+0x90>)
 80107bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80107c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80107c2:	4b1d      	ldr	r3, [pc, #116]	@ (8010838 <HAL_PWREx_EnableOverDrive+0x90>)
 80107c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80107ca:	603b      	str	r3, [r7, #0]
 80107cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80107ce:	4b1b      	ldr	r3, [pc, #108]	@ (801083c <HAL_PWREx_EnableOverDrive+0x94>)
 80107d0:	2201      	movs	r2, #1
 80107d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80107d4:	f7ff fc4c 	bl	8010070 <HAL_GetTick>
 80107d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80107da:	e009      	b.n	80107f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80107dc:	f7ff fc48 	bl	8010070 <HAL_GetTick>
 80107e0:	4602      	mov	r2, r0
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	1ad3      	subs	r3, r2, r3
 80107e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80107ea:	d901      	bls.n	80107f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80107ec:	2303      	movs	r3, #3
 80107ee:	e01f      	b.n	8010830 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80107f0:	4b13      	ldr	r3, [pc, #76]	@ (8010840 <HAL_PWREx_EnableOverDrive+0x98>)
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80107f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80107fc:	d1ee      	bne.n	80107dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80107fe:	4b11      	ldr	r3, [pc, #68]	@ (8010844 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010800:	2201      	movs	r2, #1
 8010802:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010804:	f7ff fc34 	bl	8010070 <HAL_GetTick>
 8010808:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801080a:	e009      	b.n	8010820 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801080c:	f7ff fc30 	bl	8010070 <HAL_GetTick>
 8010810:	4602      	mov	r2, r0
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	1ad3      	subs	r3, r2, r3
 8010816:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801081a:	d901      	bls.n	8010820 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 801081c:	2303      	movs	r3, #3
 801081e:	e007      	b.n	8010830 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8010820:	4b07      	ldr	r3, [pc, #28]	@ (8010840 <HAL_PWREx_EnableOverDrive+0x98>)
 8010822:	685b      	ldr	r3, [r3, #4]
 8010824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010828:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801082c:	d1ee      	bne.n	801080c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 801082e:	2300      	movs	r3, #0
}
 8010830:	4618      	mov	r0, r3
 8010832:	3708      	adds	r7, #8
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}
 8010838:	40023800 	.word	0x40023800
 801083c:	420e0040 	.word	0x420e0040
 8010840:	40007000 	.word	0x40007000
 8010844:	420e0044 	.word	0x420e0044

08010848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b084      	sub	sp, #16
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
 8010850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d101      	bne.n	801085c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010858:	2301      	movs	r3, #1
 801085a:	e0cc      	b.n	80109f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801085c:	4b68      	ldr	r3, [pc, #416]	@ (8010a00 <HAL_RCC_ClockConfig+0x1b8>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	f003 030f 	and.w	r3, r3, #15
 8010864:	683a      	ldr	r2, [r7, #0]
 8010866:	429a      	cmp	r2, r3
 8010868:	d90c      	bls.n	8010884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801086a:	4b65      	ldr	r3, [pc, #404]	@ (8010a00 <HAL_RCC_ClockConfig+0x1b8>)
 801086c:	683a      	ldr	r2, [r7, #0]
 801086e:	b2d2      	uxtb	r2, r2
 8010870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010872:	4b63      	ldr	r3, [pc, #396]	@ (8010a00 <HAL_RCC_ClockConfig+0x1b8>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f003 030f 	and.w	r3, r3, #15
 801087a:	683a      	ldr	r2, [r7, #0]
 801087c:	429a      	cmp	r2, r3
 801087e:	d001      	beq.n	8010884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010880:	2301      	movs	r3, #1
 8010882:	e0b8      	b.n	80109f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	f003 0302 	and.w	r3, r3, #2
 801088c:	2b00      	cmp	r3, #0
 801088e:	d020      	beq.n	80108d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	f003 0304 	and.w	r3, r3, #4
 8010898:	2b00      	cmp	r3, #0
 801089a:	d005      	beq.n	80108a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801089c:	4b59      	ldr	r3, [pc, #356]	@ (8010a04 <HAL_RCC_ClockConfig+0x1bc>)
 801089e:	689b      	ldr	r3, [r3, #8]
 80108a0:	4a58      	ldr	r2, [pc, #352]	@ (8010a04 <HAL_RCC_ClockConfig+0x1bc>)
 80108a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80108a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	f003 0308 	and.w	r3, r3, #8
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d005      	beq.n	80108c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80108b4:	4b53      	ldr	r3, [pc, #332]	@ (8010a04 <HAL_RCC_ClockConfig+0x1bc>)
 80108b6:	689b      	ldr	r3, [r3, #8]
 80108b8:	4a52      	ldr	r2, [pc, #328]	@ (8010a04 <HAL_RCC_ClockConfig+0x1bc>)
 80108ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80108be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80108c0:	4b50      	ldr	r3, [pc, #320]	@ (8010a04 <HAL_RCC_ClockConfig+0x1bc>)
 80108c2:	689b      	ldr	r3, [r3, #8]
 80108c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	689b      	ldr	r3, [r3, #8]
 80108cc:	494d      	ldr	r1, [pc, #308]	@ (8010a04 <HAL_RCC_ClockConfig+0x1bc>)
 80108ce:	4313      	orrs	r3, r2
 80108d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	f003 0301 	and.w	r3, r3, #1
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d044      	beq.n	8010968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	2b01      	cmp	r3, #1
 80108e4:	d107      	bne.n	80108f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80108e6:	4b47      	ldr	r3, [pc, #284]	@ (8010a04 <HAL_RCC_ClockConfig+0x1bc>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d119      	bne.n	8010926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80108f2:	2301      	movs	r3, #1
 80108f4:	e07f      	b.n	80109f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	685b      	ldr	r3, [r3, #4]
 80108fa:	2b02      	cmp	r3, #2
 80108fc:	d003      	beq.n	8010906 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010902:	2b03      	cmp	r3, #3
 8010904:	d107      	bne.n	8010916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010906:	4b3f      	ldr	r3, [pc, #252]	@ (8010a04 <HAL_RCC_ClockConfig+0x1bc>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801090e:	2b00      	cmp	r3, #0
 8010910:	d109      	bne.n	8010926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010912:	2301      	movs	r3, #1
 8010914:	e06f      	b.n	80109f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010916:	4b3b      	ldr	r3, [pc, #236]	@ (8010a04 <HAL_RCC_ClockConfig+0x1bc>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	f003 0302 	and.w	r3, r3, #2
 801091e:	2b00      	cmp	r3, #0
 8010920:	d101      	bne.n	8010926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010922:	2301      	movs	r3, #1
 8010924:	e067      	b.n	80109f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010926:	4b37      	ldr	r3, [pc, #220]	@ (8010a04 <HAL_RCC_ClockConfig+0x1bc>)
 8010928:	689b      	ldr	r3, [r3, #8]
 801092a:	f023 0203 	bic.w	r2, r3, #3
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	685b      	ldr	r3, [r3, #4]
 8010932:	4934      	ldr	r1, [pc, #208]	@ (8010a04 <HAL_RCC_ClockConfig+0x1bc>)
 8010934:	4313      	orrs	r3, r2
 8010936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010938:	f7ff fb9a 	bl	8010070 <HAL_GetTick>
 801093c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801093e:	e00a      	b.n	8010956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010940:	f7ff fb96 	bl	8010070 <HAL_GetTick>
 8010944:	4602      	mov	r2, r0
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	1ad3      	subs	r3, r2, r3
 801094a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801094e:	4293      	cmp	r3, r2
 8010950:	d901      	bls.n	8010956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010952:	2303      	movs	r3, #3
 8010954:	e04f      	b.n	80109f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010956:	4b2b      	ldr	r3, [pc, #172]	@ (8010a04 <HAL_RCC_ClockConfig+0x1bc>)
 8010958:	689b      	ldr	r3, [r3, #8]
 801095a:	f003 020c 	and.w	r2, r3, #12
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	009b      	lsls	r3, r3, #2
 8010964:	429a      	cmp	r2, r3
 8010966:	d1eb      	bne.n	8010940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010968:	4b25      	ldr	r3, [pc, #148]	@ (8010a00 <HAL_RCC_ClockConfig+0x1b8>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	f003 030f 	and.w	r3, r3, #15
 8010970:	683a      	ldr	r2, [r7, #0]
 8010972:	429a      	cmp	r2, r3
 8010974:	d20c      	bcs.n	8010990 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010976:	4b22      	ldr	r3, [pc, #136]	@ (8010a00 <HAL_RCC_ClockConfig+0x1b8>)
 8010978:	683a      	ldr	r2, [r7, #0]
 801097a:	b2d2      	uxtb	r2, r2
 801097c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801097e:	4b20      	ldr	r3, [pc, #128]	@ (8010a00 <HAL_RCC_ClockConfig+0x1b8>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	f003 030f 	and.w	r3, r3, #15
 8010986:	683a      	ldr	r2, [r7, #0]
 8010988:	429a      	cmp	r2, r3
 801098a:	d001      	beq.n	8010990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801098c:	2301      	movs	r3, #1
 801098e:	e032      	b.n	80109f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	f003 0304 	and.w	r3, r3, #4
 8010998:	2b00      	cmp	r3, #0
 801099a:	d008      	beq.n	80109ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801099c:	4b19      	ldr	r3, [pc, #100]	@ (8010a04 <HAL_RCC_ClockConfig+0x1bc>)
 801099e:	689b      	ldr	r3, [r3, #8]
 80109a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	68db      	ldr	r3, [r3, #12]
 80109a8:	4916      	ldr	r1, [pc, #88]	@ (8010a04 <HAL_RCC_ClockConfig+0x1bc>)
 80109aa:	4313      	orrs	r3, r2
 80109ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	f003 0308 	and.w	r3, r3, #8
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d009      	beq.n	80109ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80109ba:	4b12      	ldr	r3, [pc, #72]	@ (8010a04 <HAL_RCC_ClockConfig+0x1bc>)
 80109bc:	689b      	ldr	r3, [r3, #8]
 80109be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	691b      	ldr	r3, [r3, #16]
 80109c6:	00db      	lsls	r3, r3, #3
 80109c8:	490e      	ldr	r1, [pc, #56]	@ (8010a04 <HAL_RCC_ClockConfig+0x1bc>)
 80109ca:	4313      	orrs	r3, r2
 80109cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80109ce:	f000 f887 	bl	8010ae0 <HAL_RCC_GetSysClockFreq>
 80109d2:	4602      	mov	r2, r0
 80109d4:	4b0b      	ldr	r3, [pc, #44]	@ (8010a04 <HAL_RCC_ClockConfig+0x1bc>)
 80109d6:	689b      	ldr	r3, [r3, #8]
 80109d8:	091b      	lsrs	r3, r3, #4
 80109da:	f003 030f 	and.w	r3, r3, #15
 80109de:	490a      	ldr	r1, [pc, #40]	@ (8010a08 <HAL_RCC_ClockConfig+0x1c0>)
 80109e0:	5ccb      	ldrb	r3, [r1, r3]
 80109e2:	fa22 f303 	lsr.w	r3, r2, r3
 80109e6:	4a09      	ldr	r2, [pc, #36]	@ (8010a0c <HAL_RCC_ClockConfig+0x1c4>)
 80109e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80109ea:	4b09      	ldr	r3, [pc, #36]	@ (8010a10 <HAL_RCC_ClockConfig+0x1c8>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7fe fda2 	bl	800f538 <HAL_InitTick>

  return HAL_OK;
 80109f4:	2300      	movs	r3, #0
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	3710      	adds	r7, #16
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
 80109fe:	bf00      	nop
 8010a00:	40023c00 	.word	0x40023c00
 8010a04:	40023800 	.word	0x40023800
 8010a08:	0801dafc 	.word	0x0801dafc
 8010a0c:	20000034 	.word	0x20000034
 8010a10:	20000078 	.word	0x20000078

08010a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010a14:	b480      	push	{r7}
 8010a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010a18:	4b03      	ldr	r3, [pc, #12]	@ (8010a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop
 8010a28:	20000034 	.word	0x20000034

08010a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8010a30:	f7ff fff0 	bl	8010a14 <HAL_RCC_GetHCLKFreq>
 8010a34:	4602      	mov	r2, r0
 8010a36:	4b05      	ldr	r3, [pc, #20]	@ (8010a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8010a38:	689b      	ldr	r3, [r3, #8]
 8010a3a:	0a9b      	lsrs	r3, r3, #10
 8010a3c:	f003 0307 	and.w	r3, r3, #7
 8010a40:	4903      	ldr	r1, [pc, #12]	@ (8010a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010a42:	5ccb      	ldrb	r3, [r1, r3]
 8010a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	bd80      	pop	{r7, pc}
 8010a4c:	40023800 	.word	0x40023800
 8010a50:	0801db0c 	.word	0x0801db0c

08010a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8010a58:	f7ff ffdc 	bl	8010a14 <HAL_RCC_GetHCLKFreq>
 8010a5c:	4602      	mov	r2, r0
 8010a5e:	4b05      	ldr	r3, [pc, #20]	@ (8010a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010a60:	689b      	ldr	r3, [r3, #8]
 8010a62:	0b5b      	lsrs	r3, r3, #13
 8010a64:	f003 0307 	and.w	r3, r3, #7
 8010a68:	4903      	ldr	r1, [pc, #12]	@ (8010a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010a6a:	5ccb      	ldrb	r3, [r1, r3]
 8010a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	bd80      	pop	{r7, pc}
 8010a74:	40023800 	.word	0x40023800
 8010a78:	0801db0c 	.word	0x0801db0c

08010a7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	b083      	sub	sp, #12
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
 8010a84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	220f      	movs	r2, #15
 8010a8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010a8c:	4b12      	ldr	r3, [pc, #72]	@ (8010ad8 <HAL_RCC_GetClockConfig+0x5c>)
 8010a8e:	689b      	ldr	r3, [r3, #8]
 8010a90:	f003 0203 	and.w	r2, r3, #3
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8010a98:	4b0f      	ldr	r3, [pc, #60]	@ (8010ad8 <HAL_RCC_GetClockConfig+0x5c>)
 8010a9a:	689b      	ldr	r3, [r3, #8]
 8010a9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8010aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8010ad8 <HAL_RCC_GetClockConfig+0x5c>)
 8010aa6:	689b      	ldr	r3, [r3, #8]
 8010aa8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8010ab0:	4b09      	ldr	r3, [pc, #36]	@ (8010ad8 <HAL_RCC_GetClockConfig+0x5c>)
 8010ab2:	689b      	ldr	r3, [r3, #8]
 8010ab4:	08db      	lsrs	r3, r3, #3
 8010ab6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010abe:	4b07      	ldr	r3, [pc, #28]	@ (8010adc <HAL_RCC_GetClockConfig+0x60>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	f003 020f 	and.w	r2, r3, #15
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	601a      	str	r2, [r3, #0]
}
 8010aca:	bf00      	nop
 8010acc:	370c      	adds	r7, #12
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop
 8010ad8:	40023800 	.word	0x40023800
 8010adc:	40023c00 	.word	0x40023c00

08010ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010ae4:	b0a6      	sub	sp, #152	@ 0x98
 8010ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8010aee:	2300      	movs	r3, #0
 8010af0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8010af4:	2300      	movs	r3, #0
 8010af6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8010afa:	2300      	movs	r3, #0
 8010afc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8010b00:	2300      	movs	r3, #0
 8010b02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010b06:	4bc8      	ldr	r3, [pc, #800]	@ (8010e28 <HAL_RCC_GetSysClockFreq+0x348>)
 8010b08:	689b      	ldr	r3, [r3, #8]
 8010b0a:	f003 030c 	and.w	r3, r3, #12
 8010b0e:	2b0c      	cmp	r3, #12
 8010b10:	f200 817e 	bhi.w	8010e10 <HAL_RCC_GetSysClockFreq+0x330>
 8010b14:	a201      	add	r2, pc, #4	@ (adr r2, 8010b1c <HAL_RCC_GetSysClockFreq+0x3c>)
 8010b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b1a:	bf00      	nop
 8010b1c:	08010b51 	.word	0x08010b51
 8010b20:	08010e11 	.word	0x08010e11
 8010b24:	08010e11 	.word	0x08010e11
 8010b28:	08010e11 	.word	0x08010e11
 8010b2c:	08010b59 	.word	0x08010b59
 8010b30:	08010e11 	.word	0x08010e11
 8010b34:	08010e11 	.word	0x08010e11
 8010b38:	08010e11 	.word	0x08010e11
 8010b3c:	08010b61 	.word	0x08010b61
 8010b40:	08010e11 	.word	0x08010e11
 8010b44:	08010e11 	.word	0x08010e11
 8010b48:	08010e11 	.word	0x08010e11
 8010b4c:	08010ccb 	.word	0x08010ccb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010b50:	4bb6      	ldr	r3, [pc, #728]	@ (8010e2c <HAL_RCC_GetSysClockFreq+0x34c>)
 8010b52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8010b56:	e15f      	b.n	8010e18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010b58:	4bb5      	ldr	r3, [pc, #724]	@ (8010e30 <HAL_RCC_GetSysClockFreq+0x350>)
 8010b5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8010b5e:	e15b      	b.n	8010e18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010b60:	4bb1      	ldr	r3, [pc, #708]	@ (8010e28 <HAL_RCC_GetSysClockFreq+0x348>)
 8010b62:	685b      	ldr	r3, [r3, #4]
 8010b64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010b68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010b6c:	4bae      	ldr	r3, [pc, #696]	@ (8010e28 <HAL_RCC_GetSysClockFreq+0x348>)
 8010b6e:	685b      	ldr	r3, [r3, #4]
 8010b70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d031      	beq.n	8010bdc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010b78:	4bab      	ldr	r3, [pc, #684]	@ (8010e28 <HAL_RCC_GetSysClockFreq+0x348>)
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	099b      	lsrs	r3, r3, #6
 8010b7e:	2200      	movs	r2, #0
 8010b80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010b82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010b84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8010b90:	4ba7      	ldr	r3, [pc, #668]	@ (8010e30 <HAL_RCC_GetSysClockFreq+0x350>)
 8010b92:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8010b96:	462a      	mov	r2, r5
 8010b98:	fb03 f202 	mul.w	r2, r3, r2
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	4621      	mov	r1, r4
 8010ba0:	fb01 f303 	mul.w	r3, r1, r3
 8010ba4:	4413      	add	r3, r2
 8010ba6:	4aa2      	ldr	r2, [pc, #648]	@ (8010e30 <HAL_RCC_GetSysClockFreq+0x350>)
 8010ba8:	4621      	mov	r1, r4
 8010baa:	fba1 1202 	umull	r1, r2, r1, r2
 8010bae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010bb0:	460a      	mov	r2, r1
 8010bb2:	67ba      	str	r2, [r7, #120]	@ 0x78
 8010bb4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010bb6:	4413      	add	r3, r2
 8010bb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010bc2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8010bc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010bc8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8010bcc:	f7f8 f83c 	bl	8008c48 <__aeabi_uldivmod>
 8010bd0:	4602      	mov	r2, r0
 8010bd2:	460b      	mov	r3, r1
 8010bd4:	4613      	mov	r3, r2
 8010bd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010bda:	e064      	b.n	8010ca6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010bdc:	4b92      	ldr	r3, [pc, #584]	@ (8010e28 <HAL_RCC_GetSysClockFreq+0x348>)
 8010bde:	685b      	ldr	r3, [r3, #4]
 8010be0:	099b      	lsrs	r3, r3, #6
 8010be2:	2200      	movs	r2, #0
 8010be4:	653b      	str	r3, [r7, #80]	@ 0x50
 8010be6:	657a      	str	r2, [r7, #84]	@ 0x54
 8010be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010bf4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8010bf8:	4622      	mov	r2, r4
 8010bfa:	462b      	mov	r3, r5
 8010bfc:	f04f 0000 	mov.w	r0, #0
 8010c00:	f04f 0100 	mov.w	r1, #0
 8010c04:	0159      	lsls	r1, r3, #5
 8010c06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010c0a:	0150      	lsls	r0, r2, #5
 8010c0c:	4602      	mov	r2, r0
 8010c0e:	460b      	mov	r3, r1
 8010c10:	4621      	mov	r1, r4
 8010c12:	1a51      	subs	r1, r2, r1
 8010c14:	6139      	str	r1, [r7, #16]
 8010c16:	4629      	mov	r1, r5
 8010c18:	eb63 0301 	sbc.w	r3, r3, r1
 8010c1c:	617b      	str	r3, [r7, #20]
 8010c1e:	f04f 0200 	mov.w	r2, #0
 8010c22:	f04f 0300 	mov.w	r3, #0
 8010c26:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010c2a:	4659      	mov	r1, fp
 8010c2c:	018b      	lsls	r3, r1, #6
 8010c2e:	4651      	mov	r1, sl
 8010c30:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8010c34:	4651      	mov	r1, sl
 8010c36:	018a      	lsls	r2, r1, #6
 8010c38:	4651      	mov	r1, sl
 8010c3a:	ebb2 0801 	subs.w	r8, r2, r1
 8010c3e:	4659      	mov	r1, fp
 8010c40:	eb63 0901 	sbc.w	r9, r3, r1
 8010c44:	f04f 0200 	mov.w	r2, #0
 8010c48:	f04f 0300 	mov.w	r3, #0
 8010c4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010c50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010c54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010c58:	4690      	mov	r8, r2
 8010c5a:	4699      	mov	r9, r3
 8010c5c:	4623      	mov	r3, r4
 8010c5e:	eb18 0303 	adds.w	r3, r8, r3
 8010c62:	60bb      	str	r3, [r7, #8]
 8010c64:	462b      	mov	r3, r5
 8010c66:	eb49 0303 	adc.w	r3, r9, r3
 8010c6a:	60fb      	str	r3, [r7, #12]
 8010c6c:	f04f 0200 	mov.w	r2, #0
 8010c70:	f04f 0300 	mov.w	r3, #0
 8010c74:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8010c78:	4629      	mov	r1, r5
 8010c7a:	028b      	lsls	r3, r1, #10
 8010c7c:	4621      	mov	r1, r4
 8010c7e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010c82:	4621      	mov	r1, r4
 8010c84:	028a      	lsls	r2, r1, #10
 8010c86:	4610      	mov	r0, r2
 8010c88:	4619      	mov	r1, r3
 8010c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010c8e:	2200      	movs	r2, #0
 8010c90:	643b      	str	r3, [r7, #64]	@ 0x40
 8010c92:	647a      	str	r2, [r7, #68]	@ 0x44
 8010c94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8010c98:	f7f7 ffd6 	bl	8008c48 <__aeabi_uldivmod>
 8010c9c:	4602      	mov	r2, r0
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	4613      	mov	r3, r2
 8010ca2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8010ca6:	4b60      	ldr	r3, [pc, #384]	@ (8010e28 <HAL_RCC_GetSysClockFreq+0x348>)
 8010ca8:	685b      	ldr	r3, [r3, #4]
 8010caa:	0c1b      	lsrs	r3, r3, #16
 8010cac:	f003 0303 	and.w	r3, r3, #3
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	005b      	lsls	r3, r3, #1
 8010cb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8010cb8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010cbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8010cc8:	e0a6      	b.n	8010e18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010cca:	4b57      	ldr	r3, [pc, #348]	@ (8010e28 <HAL_RCC_GetSysClockFreq+0x348>)
 8010ccc:	685b      	ldr	r3, [r3, #4]
 8010cce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010cd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010cd6:	4b54      	ldr	r3, [pc, #336]	@ (8010e28 <HAL_RCC_GetSysClockFreq+0x348>)
 8010cd8:	685b      	ldr	r3, [r3, #4]
 8010cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d02a      	beq.n	8010d38 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010ce2:	4b51      	ldr	r3, [pc, #324]	@ (8010e28 <HAL_RCC_GetSysClockFreq+0x348>)
 8010ce4:	685b      	ldr	r3, [r3, #4]
 8010ce6:	099b      	lsrs	r3, r3, #6
 8010ce8:	2200      	movs	r2, #0
 8010cea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010cec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8010cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cf0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8010cf4:	2100      	movs	r1, #0
 8010cf6:	4b4e      	ldr	r3, [pc, #312]	@ (8010e30 <HAL_RCC_GetSysClockFreq+0x350>)
 8010cf8:	fb03 f201 	mul.w	r2, r3, r1
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	fb00 f303 	mul.w	r3, r0, r3
 8010d02:	4413      	add	r3, r2
 8010d04:	4a4a      	ldr	r2, [pc, #296]	@ (8010e30 <HAL_RCC_GetSysClockFreq+0x350>)
 8010d06:	fba0 1202 	umull	r1, r2, r0, r2
 8010d0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8010d0c:	460a      	mov	r2, r1
 8010d0e:	673a      	str	r2, [r7, #112]	@ 0x70
 8010d10:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8010d12:	4413      	add	r3, r2
 8010d14:	677b      	str	r3, [r7, #116]	@ 0x74
 8010d16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8010d1e:	637a      	str	r2, [r7, #52]	@ 0x34
 8010d20:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8010d24:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8010d28:	f7f7 ff8e 	bl	8008c48 <__aeabi_uldivmod>
 8010d2c:	4602      	mov	r2, r0
 8010d2e:	460b      	mov	r3, r1
 8010d30:	4613      	mov	r3, r2
 8010d32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010d36:	e05b      	b.n	8010df0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010d38:	4b3b      	ldr	r3, [pc, #236]	@ (8010e28 <HAL_RCC_GetSysClockFreq+0x348>)
 8010d3a:	685b      	ldr	r3, [r3, #4]
 8010d3c:	099b      	lsrs	r3, r3, #6
 8010d3e:	2200      	movs	r2, #0
 8010d40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010d42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d4a:	623b      	str	r3, [r7, #32]
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8010d54:	4642      	mov	r2, r8
 8010d56:	464b      	mov	r3, r9
 8010d58:	f04f 0000 	mov.w	r0, #0
 8010d5c:	f04f 0100 	mov.w	r1, #0
 8010d60:	0159      	lsls	r1, r3, #5
 8010d62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010d66:	0150      	lsls	r0, r2, #5
 8010d68:	4602      	mov	r2, r0
 8010d6a:	460b      	mov	r3, r1
 8010d6c:	4641      	mov	r1, r8
 8010d6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8010d72:	4649      	mov	r1, r9
 8010d74:	eb63 0b01 	sbc.w	fp, r3, r1
 8010d78:	f04f 0200 	mov.w	r2, #0
 8010d7c:	f04f 0300 	mov.w	r3, #0
 8010d80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8010d84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8010d88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8010d8c:	ebb2 040a 	subs.w	r4, r2, sl
 8010d90:	eb63 050b 	sbc.w	r5, r3, fp
 8010d94:	f04f 0200 	mov.w	r2, #0
 8010d98:	f04f 0300 	mov.w	r3, #0
 8010d9c:	00eb      	lsls	r3, r5, #3
 8010d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010da2:	00e2      	lsls	r2, r4, #3
 8010da4:	4614      	mov	r4, r2
 8010da6:	461d      	mov	r5, r3
 8010da8:	4643      	mov	r3, r8
 8010daa:	18e3      	adds	r3, r4, r3
 8010dac:	603b      	str	r3, [r7, #0]
 8010dae:	464b      	mov	r3, r9
 8010db0:	eb45 0303 	adc.w	r3, r5, r3
 8010db4:	607b      	str	r3, [r7, #4]
 8010db6:	f04f 0200 	mov.w	r2, #0
 8010dba:	f04f 0300 	mov.w	r3, #0
 8010dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	028b      	lsls	r3, r1, #10
 8010dc6:	4621      	mov	r1, r4
 8010dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010dcc:	4621      	mov	r1, r4
 8010dce:	028a      	lsls	r2, r1, #10
 8010dd0:	4610      	mov	r0, r2
 8010dd2:	4619      	mov	r1, r3
 8010dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010dd8:	2200      	movs	r2, #0
 8010dda:	61bb      	str	r3, [r7, #24]
 8010ddc:	61fa      	str	r2, [r7, #28]
 8010dde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010de2:	f7f7 ff31 	bl	8008c48 <__aeabi_uldivmod>
 8010de6:	4602      	mov	r2, r0
 8010de8:	460b      	mov	r3, r1
 8010dea:	4613      	mov	r3, r2
 8010dec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8010df0:	4b0d      	ldr	r3, [pc, #52]	@ (8010e28 <HAL_RCC_GetSysClockFreq+0x348>)
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	0f1b      	lsrs	r3, r3, #28
 8010df6:	f003 0307 	and.w	r3, r3, #7
 8010dfa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8010dfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010e02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8010e0e:	e003      	b.n	8010e18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010e10:	4b06      	ldr	r3, [pc, #24]	@ (8010e2c <HAL_RCC_GetSysClockFreq+0x34c>)
 8010e12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8010e16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010e18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	3798      	adds	r7, #152	@ 0x98
 8010e20:	46bd      	mov	sp, r7
 8010e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010e26:	bf00      	nop
 8010e28:	40023800 	.word	0x40023800
 8010e2c:	00f42400 	.word	0x00f42400
 8010e30:	017d7840 	.word	0x017d7840

08010e34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b086      	sub	sp, #24
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d101      	bne.n	8010e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010e42:	2301      	movs	r3, #1
 8010e44:	e28d      	b.n	8011362 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	f003 0301 	and.w	r3, r3, #1
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	f000 8083 	beq.w	8010f5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8010e54:	4b94      	ldr	r3, [pc, #592]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010e56:	689b      	ldr	r3, [r3, #8]
 8010e58:	f003 030c 	and.w	r3, r3, #12
 8010e5c:	2b04      	cmp	r3, #4
 8010e5e:	d019      	beq.n	8010e94 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8010e60:	4b91      	ldr	r3, [pc, #580]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010e62:	689b      	ldr	r3, [r3, #8]
 8010e64:	f003 030c 	and.w	r3, r3, #12
        || \
 8010e68:	2b08      	cmp	r3, #8
 8010e6a:	d106      	bne.n	8010e7a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8010e6c:	4b8e      	ldr	r3, [pc, #568]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010e6e:	685b      	ldr	r3, [r3, #4]
 8010e70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010e74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010e78:	d00c      	beq.n	8010e94 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010e7a:	4b8b      	ldr	r3, [pc, #556]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010e7c:	689b      	ldr	r3, [r3, #8]
 8010e7e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8010e82:	2b0c      	cmp	r3, #12
 8010e84:	d112      	bne.n	8010eac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010e86:	4b88      	ldr	r3, [pc, #544]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010e88:	685b      	ldr	r3, [r3, #4]
 8010e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010e8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010e92:	d10b      	bne.n	8010eac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010e94:	4b84      	ldr	r3, [pc, #528]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d05b      	beq.n	8010f58 <HAL_RCC_OscConfig+0x124>
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	685b      	ldr	r3, [r3, #4]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d157      	bne.n	8010f58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	e25a      	b.n	8011362 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010eb4:	d106      	bne.n	8010ec4 <HAL_RCC_OscConfig+0x90>
 8010eb6:	4b7c      	ldr	r3, [pc, #496]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	4a7b      	ldr	r2, [pc, #492]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010ec0:	6013      	str	r3, [r2, #0]
 8010ec2:	e01d      	b.n	8010f00 <HAL_RCC_OscConfig+0xcc>
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010ecc:	d10c      	bne.n	8010ee8 <HAL_RCC_OscConfig+0xb4>
 8010ece:	4b76      	ldr	r3, [pc, #472]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	4a75      	ldr	r2, [pc, #468]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010ed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010ed8:	6013      	str	r3, [r2, #0]
 8010eda:	4b73      	ldr	r3, [pc, #460]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	4a72      	ldr	r2, [pc, #456]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010ee4:	6013      	str	r3, [r2, #0]
 8010ee6:	e00b      	b.n	8010f00 <HAL_RCC_OscConfig+0xcc>
 8010ee8:	4b6f      	ldr	r3, [pc, #444]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	4a6e      	ldr	r2, [pc, #440]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010ef2:	6013      	str	r3, [r2, #0]
 8010ef4:	4b6c      	ldr	r3, [pc, #432]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	4a6b      	ldr	r2, [pc, #428]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	685b      	ldr	r3, [r3, #4]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d013      	beq.n	8010f30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f08:	f7ff f8b2 	bl	8010070 <HAL_GetTick>
 8010f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010f0e:	e008      	b.n	8010f22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010f10:	f7ff f8ae 	bl	8010070 <HAL_GetTick>
 8010f14:	4602      	mov	r2, r0
 8010f16:	693b      	ldr	r3, [r7, #16]
 8010f18:	1ad3      	subs	r3, r2, r3
 8010f1a:	2b64      	cmp	r3, #100	@ 0x64
 8010f1c:	d901      	bls.n	8010f22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8010f1e:	2303      	movs	r3, #3
 8010f20:	e21f      	b.n	8011362 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010f22:	4b61      	ldr	r3, [pc, #388]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d0f0      	beq.n	8010f10 <HAL_RCC_OscConfig+0xdc>
 8010f2e:	e014      	b.n	8010f5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f30:	f7ff f89e 	bl	8010070 <HAL_GetTick>
 8010f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f36:	e008      	b.n	8010f4a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010f38:	f7ff f89a 	bl	8010070 <HAL_GetTick>
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	693b      	ldr	r3, [r7, #16]
 8010f40:	1ad3      	subs	r3, r2, r3
 8010f42:	2b64      	cmp	r3, #100	@ 0x64
 8010f44:	d901      	bls.n	8010f4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8010f46:	2303      	movs	r3, #3
 8010f48:	e20b      	b.n	8011362 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f4a:	4b57      	ldr	r3, [pc, #348]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d1f0      	bne.n	8010f38 <HAL_RCC_OscConfig+0x104>
 8010f56:	e000      	b.n	8010f5a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	f003 0302 	and.w	r3, r3, #2
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d06f      	beq.n	8011046 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8010f66:	4b50      	ldr	r3, [pc, #320]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010f68:	689b      	ldr	r3, [r3, #8]
 8010f6a:	f003 030c 	and.w	r3, r3, #12
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d017      	beq.n	8010fa2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8010f72:	4b4d      	ldr	r3, [pc, #308]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010f74:	689b      	ldr	r3, [r3, #8]
 8010f76:	f003 030c 	and.w	r3, r3, #12
        || \
 8010f7a:	2b08      	cmp	r3, #8
 8010f7c:	d105      	bne.n	8010f8a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8010f7e:	4b4a      	ldr	r3, [pc, #296]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010f80:	685b      	ldr	r3, [r3, #4]
 8010f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d00b      	beq.n	8010fa2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010f8a:	4b47      	ldr	r3, [pc, #284]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010f8c:	689b      	ldr	r3, [r3, #8]
 8010f8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8010f92:	2b0c      	cmp	r3, #12
 8010f94:	d11c      	bne.n	8010fd0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010f96:	4b44      	ldr	r3, [pc, #272]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d116      	bne.n	8010fd0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010fa2:	4b41      	ldr	r3, [pc, #260]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	f003 0302 	and.w	r3, r3, #2
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d005      	beq.n	8010fba <HAL_RCC_OscConfig+0x186>
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	68db      	ldr	r3, [r3, #12]
 8010fb2:	2b01      	cmp	r3, #1
 8010fb4:	d001      	beq.n	8010fba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	e1d3      	b.n	8011362 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010fba:	4b3b      	ldr	r3, [pc, #236]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	691b      	ldr	r3, [r3, #16]
 8010fc6:	00db      	lsls	r3, r3, #3
 8010fc8:	4937      	ldr	r1, [pc, #220]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010fca:	4313      	orrs	r3, r2
 8010fcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010fce:	e03a      	b.n	8011046 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	68db      	ldr	r3, [r3, #12]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d020      	beq.n	801101a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010fd8:	4b34      	ldr	r3, [pc, #208]	@ (80110ac <HAL_RCC_OscConfig+0x278>)
 8010fda:	2201      	movs	r2, #1
 8010fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010fde:	f7ff f847 	bl	8010070 <HAL_GetTick>
 8010fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010fe4:	e008      	b.n	8010ff8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010fe6:	f7ff f843 	bl	8010070 <HAL_GetTick>
 8010fea:	4602      	mov	r2, r0
 8010fec:	693b      	ldr	r3, [r7, #16]
 8010fee:	1ad3      	subs	r3, r2, r3
 8010ff0:	2b02      	cmp	r3, #2
 8010ff2:	d901      	bls.n	8010ff8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8010ff4:	2303      	movs	r3, #3
 8010ff6:	e1b4      	b.n	8011362 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	f003 0302 	and.w	r3, r3, #2
 8011000:	2b00      	cmp	r3, #0
 8011002:	d0f0      	beq.n	8010fe6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011004:	4b28      	ldr	r3, [pc, #160]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	691b      	ldr	r3, [r3, #16]
 8011010:	00db      	lsls	r3, r3, #3
 8011012:	4925      	ldr	r1, [pc, #148]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 8011014:	4313      	orrs	r3, r2
 8011016:	600b      	str	r3, [r1, #0]
 8011018:	e015      	b.n	8011046 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801101a:	4b24      	ldr	r3, [pc, #144]	@ (80110ac <HAL_RCC_OscConfig+0x278>)
 801101c:	2200      	movs	r2, #0
 801101e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011020:	f7ff f826 	bl	8010070 <HAL_GetTick>
 8011024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011026:	e008      	b.n	801103a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011028:	f7ff f822 	bl	8010070 <HAL_GetTick>
 801102c:	4602      	mov	r2, r0
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	1ad3      	subs	r3, r2, r3
 8011032:	2b02      	cmp	r3, #2
 8011034:	d901      	bls.n	801103a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8011036:	2303      	movs	r3, #3
 8011038:	e193      	b.n	8011362 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801103a:	4b1b      	ldr	r3, [pc, #108]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	f003 0302 	and.w	r3, r3, #2
 8011042:	2b00      	cmp	r3, #0
 8011044:	d1f0      	bne.n	8011028 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	f003 0308 	and.w	r3, r3, #8
 801104e:	2b00      	cmp	r3, #0
 8011050:	d036      	beq.n	80110c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	695b      	ldr	r3, [r3, #20]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d016      	beq.n	8011088 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801105a:	4b15      	ldr	r3, [pc, #84]	@ (80110b0 <HAL_RCC_OscConfig+0x27c>)
 801105c:	2201      	movs	r2, #1
 801105e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011060:	f7ff f806 	bl	8010070 <HAL_GetTick>
 8011064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011066:	e008      	b.n	801107a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011068:	f7ff f802 	bl	8010070 <HAL_GetTick>
 801106c:	4602      	mov	r2, r0
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	1ad3      	subs	r3, r2, r3
 8011072:	2b02      	cmp	r3, #2
 8011074:	d901      	bls.n	801107a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8011076:	2303      	movs	r3, #3
 8011078:	e173      	b.n	8011362 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801107a:	4b0b      	ldr	r3, [pc, #44]	@ (80110a8 <HAL_RCC_OscConfig+0x274>)
 801107c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801107e:	f003 0302 	and.w	r3, r3, #2
 8011082:	2b00      	cmp	r3, #0
 8011084:	d0f0      	beq.n	8011068 <HAL_RCC_OscConfig+0x234>
 8011086:	e01b      	b.n	80110c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011088:	4b09      	ldr	r3, [pc, #36]	@ (80110b0 <HAL_RCC_OscConfig+0x27c>)
 801108a:	2200      	movs	r2, #0
 801108c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801108e:	f7fe ffef 	bl	8010070 <HAL_GetTick>
 8011092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011094:	e00e      	b.n	80110b4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011096:	f7fe ffeb 	bl	8010070 <HAL_GetTick>
 801109a:	4602      	mov	r2, r0
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	1ad3      	subs	r3, r2, r3
 80110a0:	2b02      	cmp	r3, #2
 80110a2:	d907      	bls.n	80110b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80110a4:	2303      	movs	r3, #3
 80110a6:	e15c      	b.n	8011362 <HAL_RCC_OscConfig+0x52e>
 80110a8:	40023800 	.word	0x40023800
 80110ac:	42470000 	.word	0x42470000
 80110b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80110b4:	4b8a      	ldr	r3, [pc, #552]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 80110b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110b8:	f003 0302 	and.w	r3, r3, #2
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d1ea      	bne.n	8011096 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	f003 0304 	and.w	r3, r3, #4
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	f000 8097 	beq.w	80111fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80110ce:	2300      	movs	r3, #0
 80110d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80110d2:	4b83      	ldr	r3, [pc, #524]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 80110d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d10f      	bne.n	80110fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80110de:	2300      	movs	r3, #0
 80110e0:	60bb      	str	r3, [r7, #8]
 80110e2:	4b7f      	ldr	r3, [pc, #508]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 80110e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110e6:	4a7e      	ldr	r2, [pc, #504]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 80110e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80110ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80110ee:	4b7c      	ldr	r3, [pc, #496]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 80110f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80110f6:	60bb      	str	r3, [r7, #8]
 80110f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80110fa:	2301      	movs	r3, #1
 80110fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80110fe:	4b79      	ldr	r3, [pc, #484]	@ (80112e4 <HAL_RCC_OscConfig+0x4b0>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011106:	2b00      	cmp	r3, #0
 8011108:	d118      	bne.n	801113c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801110a:	4b76      	ldr	r3, [pc, #472]	@ (80112e4 <HAL_RCC_OscConfig+0x4b0>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	4a75      	ldr	r2, [pc, #468]	@ (80112e4 <HAL_RCC_OscConfig+0x4b0>)
 8011110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011116:	f7fe ffab 	bl	8010070 <HAL_GetTick>
 801111a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801111c:	e008      	b.n	8011130 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801111e:	f7fe ffa7 	bl	8010070 <HAL_GetTick>
 8011122:	4602      	mov	r2, r0
 8011124:	693b      	ldr	r3, [r7, #16]
 8011126:	1ad3      	subs	r3, r2, r3
 8011128:	2b02      	cmp	r3, #2
 801112a:	d901      	bls.n	8011130 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 801112c:	2303      	movs	r3, #3
 801112e:	e118      	b.n	8011362 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011130:	4b6c      	ldr	r3, [pc, #432]	@ (80112e4 <HAL_RCC_OscConfig+0x4b0>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011138:	2b00      	cmp	r3, #0
 801113a:	d0f0      	beq.n	801111e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	689b      	ldr	r3, [r3, #8]
 8011140:	2b01      	cmp	r3, #1
 8011142:	d106      	bne.n	8011152 <HAL_RCC_OscConfig+0x31e>
 8011144:	4b66      	ldr	r3, [pc, #408]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 8011146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011148:	4a65      	ldr	r2, [pc, #404]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 801114a:	f043 0301 	orr.w	r3, r3, #1
 801114e:	6713      	str	r3, [r2, #112]	@ 0x70
 8011150:	e01c      	b.n	801118c <HAL_RCC_OscConfig+0x358>
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	689b      	ldr	r3, [r3, #8]
 8011156:	2b05      	cmp	r3, #5
 8011158:	d10c      	bne.n	8011174 <HAL_RCC_OscConfig+0x340>
 801115a:	4b61      	ldr	r3, [pc, #388]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 801115c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801115e:	4a60      	ldr	r2, [pc, #384]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 8011160:	f043 0304 	orr.w	r3, r3, #4
 8011164:	6713      	str	r3, [r2, #112]	@ 0x70
 8011166:	4b5e      	ldr	r3, [pc, #376]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 8011168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801116a:	4a5d      	ldr	r2, [pc, #372]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 801116c:	f043 0301 	orr.w	r3, r3, #1
 8011170:	6713      	str	r3, [r2, #112]	@ 0x70
 8011172:	e00b      	b.n	801118c <HAL_RCC_OscConfig+0x358>
 8011174:	4b5a      	ldr	r3, [pc, #360]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 8011176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011178:	4a59      	ldr	r2, [pc, #356]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 801117a:	f023 0301 	bic.w	r3, r3, #1
 801117e:	6713      	str	r3, [r2, #112]	@ 0x70
 8011180:	4b57      	ldr	r3, [pc, #348]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 8011182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011184:	4a56      	ldr	r2, [pc, #344]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 8011186:	f023 0304 	bic.w	r3, r3, #4
 801118a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	689b      	ldr	r3, [r3, #8]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d015      	beq.n	80111c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011194:	f7fe ff6c 	bl	8010070 <HAL_GetTick>
 8011198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801119a:	e00a      	b.n	80111b2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801119c:	f7fe ff68 	bl	8010070 <HAL_GetTick>
 80111a0:	4602      	mov	r2, r0
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	1ad3      	subs	r3, r2, r3
 80111a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80111aa:	4293      	cmp	r3, r2
 80111ac:	d901      	bls.n	80111b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80111ae:	2303      	movs	r3, #3
 80111b0:	e0d7      	b.n	8011362 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80111b2:	4b4b      	ldr	r3, [pc, #300]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 80111b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111b6:	f003 0302 	and.w	r3, r3, #2
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d0ee      	beq.n	801119c <HAL_RCC_OscConfig+0x368>
 80111be:	e014      	b.n	80111ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80111c0:	f7fe ff56 	bl	8010070 <HAL_GetTick>
 80111c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80111c6:	e00a      	b.n	80111de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80111c8:	f7fe ff52 	bl	8010070 <HAL_GetTick>
 80111cc:	4602      	mov	r2, r0
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	1ad3      	subs	r3, r2, r3
 80111d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80111d6:	4293      	cmp	r3, r2
 80111d8:	d901      	bls.n	80111de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80111da:	2303      	movs	r3, #3
 80111dc:	e0c1      	b.n	8011362 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80111de:	4b40      	ldr	r3, [pc, #256]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 80111e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111e2:	f003 0302 	and.w	r3, r3, #2
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d1ee      	bne.n	80111c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80111ea:	7dfb      	ldrb	r3, [r7, #23]
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	d105      	bne.n	80111fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80111f0:	4b3b      	ldr	r3, [pc, #236]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 80111f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80111f4:	4a3a      	ldr	r2, [pc, #232]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 80111f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80111fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	699b      	ldr	r3, [r3, #24]
 8011200:	2b00      	cmp	r3, #0
 8011202:	f000 80ad 	beq.w	8011360 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011206:	4b36      	ldr	r3, [pc, #216]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 8011208:	689b      	ldr	r3, [r3, #8]
 801120a:	f003 030c 	and.w	r3, r3, #12
 801120e:	2b08      	cmp	r3, #8
 8011210:	d060      	beq.n	80112d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	699b      	ldr	r3, [r3, #24]
 8011216:	2b02      	cmp	r3, #2
 8011218:	d145      	bne.n	80112a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801121a:	4b33      	ldr	r3, [pc, #204]	@ (80112e8 <HAL_RCC_OscConfig+0x4b4>)
 801121c:	2200      	movs	r2, #0
 801121e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011220:	f7fe ff26 	bl	8010070 <HAL_GetTick>
 8011224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011226:	e008      	b.n	801123a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011228:	f7fe ff22 	bl	8010070 <HAL_GetTick>
 801122c:	4602      	mov	r2, r0
 801122e:	693b      	ldr	r3, [r7, #16]
 8011230:	1ad3      	subs	r3, r2, r3
 8011232:	2b02      	cmp	r3, #2
 8011234:	d901      	bls.n	801123a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8011236:	2303      	movs	r3, #3
 8011238:	e093      	b.n	8011362 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801123a:	4b29      	ldr	r3, [pc, #164]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011242:	2b00      	cmp	r3, #0
 8011244:	d1f0      	bne.n	8011228 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	69da      	ldr	r2, [r3, #28]
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6a1b      	ldr	r3, [r3, #32]
 801124e:	431a      	orrs	r2, r3
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011254:	019b      	lsls	r3, r3, #6
 8011256:	431a      	orrs	r2, r3
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801125c:	085b      	lsrs	r3, r3, #1
 801125e:	3b01      	subs	r3, #1
 8011260:	041b      	lsls	r3, r3, #16
 8011262:	431a      	orrs	r2, r3
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011268:	061b      	lsls	r3, r3, #24
 801126a:	431a      	orrs	r2, r3
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011270:	071b      	lsls	r3, r3, #28
 8011272:	491b      	ldr	r1, [pc, #108]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 8011274:	4313      	orrs	r3, r2
 8011276:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011278:	4b1b      	ldr	r3, [pc, #108]	@ (80112e8 <HAL_RCC_OscConfig+0x4b4>)
 801127a:	2201      	movs	r2, #1
 801127c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801127e:	f7fe fef7 	bl	8010070 <HAL_GetTick>
 8011282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011284:	e008      	b.n	8011298 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011286:	f7fe fef3 	bl	8010070 <HAL_GetTick>
 801128a:	4602      	mov	r2, r0
 801128c:	693b      	ldr	r3, [r7, #16]
 801128e:	1ad3      	subs	r3, r2, r3
 8011290:	2b02      	cmp	r3, #2
 8011292:	d901      	bls.n	8011298 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8011294:	2303      	movs	r3, #3
 8011296:	e064      	b.n	8011362 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011298:	4b11      	ldr	r3, [pc, #68]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d0f0      	beq.n	8011286 <HAL_RCC_OscConfig+0x452>
 80112a4:	e05c      	b.n	8011360 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80112a6:	4b10      	ldr	r3, [pc, #64]	@ (80112e8 <HAL_RCC_OscConfig+0x4b4>)
 80112a8:	2200      	movs	r2, #0
 80112aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112ac:	f7fe fee0 	bl	8010070 <HAL_GetTick>
 80112b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80112b2:	e008      	b.n	80112c6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80112b4:	f7fe fedc 	bl	8010070 <HAL_GetTick>
 80112b8:	4602      	mov	r2, r0
 80112ba:	693b      	ldr	r3, [r7, #16]
 80112bc:	1ad3      	subs	r3, r2, r3
 80112be:	2b02      	cmp	r3, #2
 80112c0:	d901      	bls.n	80112c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80112c2:	2303      	movs	r3, #3
 80112c4:	e04d      	b.n	8011362 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80112c6:	4b06      	ldr	r3, [pc, #24]	@ (80112e0 <HAL_RCC_OscConfig+0x4ac>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d1f0      	bne.n	80112b4 <HAL_RCC_OscConfig+0x480>
 80112d2:	e045      	b.n	8011360 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	699b      	ldr	r3, [r3, #24]
 80112d8:	2b01      	cmp	r3, #1
 80112da:	d107      	bne.n	80112ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80112dc:	2301      	movs	r3, #1
 80112de:	e040      	b.n	8011362 <HAL_RCC_OscConfig+0x52e>
 80112e0:	40023800 	.word	0x40023800
 80112e4:	40007000 	.word	0x40007000
 80112e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80112ec:	4b1f      	ldr	r3, [pc, #124]	@ (801136c <HAL_RCC_OscConfig+0x538>)
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	699b      	ldr	r3, [r3, #24]
 80112f6:	2b01      	cmp	r3, #1
 80112f8:	d030      	beq.n	801135c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011304:	429a      	cmp	r2, r3
 8011306:	d129      	bne.n	801135c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011312:	429a      	cmp	r2, r3
 8011314:	d122      	bne.n	801135c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011316:	68fa      	ldr	r2, [r7, #12]
 8011318:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 801131c:	4013      	ands	r3, r2
 801131e:	687a      	ldr	r2, [r7, #4]
 8011320:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8011322:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011324:	4293      	cmp	r3, r2
 8011326:	d119      	bne.n	801135c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011332:	085b      	lsrs	r3, r3, #1
 8011334:	3b01      	subs	r3, #1
 8011336:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011338:	429a      	cmp	r2, r3
 801133a:	d10f      	bne.n	801135c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011346:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011348:	429a      	cmp	r2, r3
 801134a:	d107      	bne.n	801135c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011356:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011358:	429a      	cmp	r2, r3
 801135a:	d001      	beq.n	8011360 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 801135c:	2301      	movs	r3, #1
 801135e:	e000      	b.n	8011362 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8011360:	2300      	movs	r3, #0
}
 8011362:	4618      	mov	r0, r3
 8011364:	3718      	adds	r7, #24
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop
 801136c:	40023800 	.word	0x40023800

08011370 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d101      	bne.n	8011382 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801137e:	2301      	movs	r3, #1
 8011380:	e07b      	b.n	801147a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011386:	2b00      	cmp	r3, #0
 8011388:	d108      	bne.n	801139c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	685b      	ldr	r3, [r3, #4]
 801138e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011392:	d009      	beq.n	80113a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	2200      	movs	r2, #0
 8011398:	61da      	str	r2, [r3, #28]
 801139a:	e005      	b.n	80113a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2200      	movs	r2, #0
 80113a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	2200      	movs	r2, #0
 80113a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2200      	movs	r2, #0
 80113ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80113b4:	b2db      	uxtb	r3, r3
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d106      	bne.n	80113c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2200      	movs	r2, #0
 80113be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f7fd feea 	bl	800f19c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2202      	movs	r2, #2
 80113cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	681a      	ldr	r2, [r3, #0]
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80113de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	689b      	ldr	r3, [r3, #8]
 80113ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80113f0:	431a      	orrs	r2, r3
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	68db      	ldr	r3, [r3, #12]
 80113f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80113fa:	431a      	orrs	r2, r3
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	691b      	ldr	r3, [r3, #16]
 8011400:	f003 0302 	and.w	r3, r3, #2
 8011404:	431a      	orrs	r2, r3
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	695b      	ldr	r3, [r3, #20]
 801140a:	f003 0301 	and.w	r3, r3, #1
 801140e:	431a      	orrs	r2, r3
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	699b      	ldr	r3, [r3, #24]
 8011414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011418:	431a      	orrs	r2, r3
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	69db      	ldr	r3, [r3, #28]
 801141e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011422:	431a      	orrs	r2, r3
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6a1b      	ldr	r3, [r3, #32]
 8011428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801142c:	ea42 0103 	orr.w	r1, r2, r3
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011434:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	430a      	orrs	r2, r1
 801143e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	699b      	ldr	r3, [r3, #24]
 8011444:	0c1b      	lsrs	r3, r3, #16
 8011446:	f003 0104 	and.w	r1, r3, #4
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801144e:	f003 0210 	and.w	r2, r3, #16
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	430a      	orrs	r2, r1
 8011458:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	69da      	ldr	r2, [r3, #28]
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8011468:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2200      	movs	r2, #0
 801146e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2201      	movs	r2, #1
 8011474:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8011478:	2300      	movs	r3, #0
}
 801147a:	4618      	mov	r0, r3
 801147c:	3708      	adds	r7, #8
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}

08011482 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011482:	b580      	push	{r7, lr}
 8011484:	b088      	sub	sp, #32
 8011486:	af00      	add	r7, sp, #0
 8011488:	60f8      	str	r0, [r7, #12]
 801148a:	60b9      	str	r1, [r7, #8]
 801148c:	603b      	str	r3, [r7, #0]
 801148e:	4613      	mov	r3, r2
 8011490:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011492:	f7fe fded 	bl	8010070 <HAL_GetTick>
 8011496:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8011498:	88fb      	ldrh	r3, [r7, #6]
 801149a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	2b01      	cmp	r3, #1
 80114a6:	d001      	beq.n	80114ac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80114a8:	2302      	movs	r3, #2
 80114aa:	e12a      	b.n	8011702 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d002      	beq.n	80114b8 <HAL_SPI_Transmit+0x36>
 80114b2:	88fb      	ldrh	r3, [r7, #6]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d101      	bne.n	80114bc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80114b8:	2301      	movs	r3, #1
 80114ba:	e122      	b.n	8011702 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80114c2:	2b01      	cmp	r3, #1
 80114c4:	d101      	bne.n	80114ca <HAL_SPI_Transmit+0x48>
 80114c6:	2302      	movs	r3, #2
 80114c8:	e11b      	b.n	8011702 <HAL_SPI_Transmit+0x280>
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	2201      	movs	r2, #1
 80114ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	2203      	movs	r2, #3
 80114d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	2200      	movs	r2, #0
 80114de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	68ba      	ldr	r2, [r7, #8]
 80114e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	88fa      	ldrh	r2, [r7, #6]
 80114ea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	88fa      	ldrh	r2, [r7, #6]
 80114f0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	2200      	movs	r2, #0
 80114f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	2200      	movs	r2, #0
 80114fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	2200      	movs	r2, #0
 8011502:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	2200      	movs	r2, #0
 8011508:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	2200      	movs	r2, #0
 801150e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	689b      	ldr	r3, [r3, #8]
 8011514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011518:	d10f      	bne.n	801153a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	681a      	ldr	r2, [r3, #0]
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011528:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	681a      	ldr	r2, [r3, #0]
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011538:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011544:	2b40      	cmp	r3, #64	@ 0x40
 8011546:	d007      	beq.n	8011558 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	681a      	ldr	r2, [r3, #0]
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011556:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	68db      	ldr	r3, [r3, #12]
 801155c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011560:	d152      	bne.n	8011608 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	685b      	ldr	r3, [r3, #4]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d002      	beq.n	8011570 <HAL_SPI_Transmit+0xee>
 801156a:	8b7b      	ldrh	r3, [r7, #26]
 801156c:	2b01      	cmp	r3, #1
 801156e:	d145      	bne.n	80115fc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011574:	881a      	ldrh	r2, [r3, #0]
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011580:	1c9a      	adds	r2, r3, #2
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801158a:	b29b      	uxth	r3, r3
 801158c:	3b01      	subs	r3, #1
 801158e:	b29a      	uxth	r2, r3
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8011594:	e032      	b.n	80115fc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	689b      	ldr	r3, [r3, #8]
 801159c:	f003 0302 	and.w	r3, r3, #2
 80115a0:	2b02      	cmp	r3, #2
 80115a2:	d112      	bne.n	80115ca <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80115a8:	881a      	ldrh	r2, [r3, #0]
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80115b4:	1c9a      	adds	r2, r3, #2
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80115be:	b29b      	uxth	r3, r3
 80115c0:	3b01      	subs	r3, #1
 80115c2:	b29a      	uxth	r2, r3
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80115c8:	e018      	b.n	80115fc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80115ca:	f7fe fd51 	bl	8010070 <HAL_GetTick>
 80115ce:	4602      	mov	r2, r0
 80115d0:	69fb      	ldr	r3, [r7, #28]
 80115d2:	1ad3      	subs	r3, r2, r3
 80115d4:	683a      	ldr	r2, [r7, #0]
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d803      	bhi.n	80115e2 <HAL_SPI_Transmit+0x160>
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115e0:	d102      	bne.n	80115e8 <HAL_SPI_Transmit+0x166>
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d109      	bne.n	80115fc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	2201      	movs	r2, #1
 80115ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	2200      	movs	r2, #0
 80115f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80115f8:	2303      	movs	r3, #3
 80115fa:	e082      	b.n	8011702 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011600:	b29b      	uxth	r3, r3
 8011602:	2b00      	cmp	r3, #0
 8011604:	d1c7      	bne.n	8011596 <HAL_SPI_Transmit+0x114>
 8011606:	e053      	b.n	80116b0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	685b      	ldr	r3, [r3, #4]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d002      	beq.n	8011616 <HAL_SPI_Transmit+0x194>
 8011610:	8b7b      	ldrh	r3, [r7, #26]
 8011612:	2b01      	cmp	r3, #1
 8011614:	d147      	bne.n	80116a6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	330c      	adds	r3, #12
 8011620:	7812      	ldrb	r2, [r2, #0]
 8011622:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011628:	1c5a      	adds	r2, r3, #1
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011632:	b29b      	uxth	r3, r3
 8011634:	3b01      	subs	r3, #1
 8011636:	b29a      	uxth	r2, r3
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 801163c:	e033      	b.n	80116a6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	689b      	ldr	r3, [r3, #8]
 8011644:	f003 0302 	and.w	r3, r3, #2
 8011648:	2b02      	cmp	r3, #2
 801164a:	d113      	bne.n	8011674 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	330c      	adds	r3, #12
 8011656:	7812      	ldrb	r2, [r2, #0]
 8011658:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801165e:	1c5a      	adds	r2, r3, #1
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011668:	b29b      	uxth	r3, r3
 801166a:	3b01      	subs	r3, #1
 801166c:	b29a      	uxth	r2, r3
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	86da      	strh	r2, [r3, #54]	@ 0x36
 8011672:	e018      	b.n	80116a6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011674:	f7fe fcfc 	bl	8010070 <HAL_GetTick>
 8011678:	4602      	mov	r2, r0
 801167a:	69fb      	ldr	r3, [r7, #28]
 801167c:	1ad3      	subs	r3, r2, r3
 801167e:	683a      	ldr	r2, [r7, #0]
 8011680:	429a      	cmp	r2, r3
 8011682:	d803      	bhi.n	801168c <HAL_SPI_Transmit+0x20a>
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	f1b3 3fff 	cmp.w	r3, #4294967295
 801168a:	d102      	bne.n	8011692 <HAL_SPI_Transmit+0x210>
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d109      	bne.n	80116a6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	2201      	movs	r2, #1
 8011696:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	2200      	movs	r2, #0
 801169e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80116a2:	2303      	movs	r3, #3
 80116a4:	e02d      	b.n	8011702 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80116aa:	b29b      	uxth	r3, r3
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d1c6      	bne.n	801163e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80116b0:	69fa      	ldr	r2, [r7, #28]
 80116b2:	6839      	ldr	r1, [r7, #0]
 80116b4:	68f8      	ldr	r0, [r7, #12]
 80116b6:	f000 fc6f 	bl	8011f98 <SPI_EndRxTxTransaction>
 80116ba:	4603      	mov	r3, r0
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d002      	beq.n	80116c6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	2220      	movs	r2, #32
 80116c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	689b      	ldr	r3, [r3, #8]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d10a      	bne.n	80116e4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80116ce:	2300      	movs	r3, #0
 80116d0:	617b      	str	r3, [r7, #20]
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	68db      	ldr	r3, [r3, #12]
 80116d8:	617b      	str	r3, [r7, #20]
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	689b      	ldr	r3, [r3, #8]
 80116e0:	617b      	str	r3, [r7, #20]
 80116e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	2201      	movs	r2, #1
 80116e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2200      	movs	r2, #0
 80116f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d001      	beq.n	8011700 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80116fc:	2301      	movs	r3, #1
 80116fe:	e000      	b.n	8011702 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8011700:	2300      	movs	r3, #0
  }
}
 8011702:	4618      	mov	r0, r3
 8011704:	3720      	adds	r7, #32
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}
	...

0801170c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b084      	sub	sp, #16
 8011710:	af00      	add	r7, sp, #0
 8011712:	60f8      	str	r0, [r7, #12]
 8011714:	60b9      	str	r1, [r7, #8]
 8011716:	4613      	mov	r3, r2
 8011718:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011720:	b2db      	uxtb	r3, r3
 8011722:	2b01      	cmp	r3, #1
 8011724:	d001      	beq.n	801172a <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8011726:	2302      	movs	r3, #2
 8011728:	e07f      	b.n	801182a <HAL_SPI_Receive_IT+0x11e>
  }

  if ((pData == NULL) || (Size == 0U))
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d002      	beq.n	8011736 <HAL_SPI_Receive_IT+0x2a>
 8011730:	88fb      	ldrh	r3, [r7, #6]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d101      	bne.n	801173a <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 8011736:	2301      	movs	r3, #1
 8011738:	e077      	b.n	801182a <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	689b      	ldr	r3, [r3, #8]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d110      	bne.n	8011764 <HAL_SPI_Receive_IT+0x58>
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	685b      	ldr	r3, [r3, #4]
 8011746:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801174a:	d10b      	bne.n	8011764 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	2204      	movs	r2, #4
 8011750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8011754:	88fb      	ldrh	r3, [r7, #6]
 8011756:	68ba      	ldr	r2, [r7, #8]
 8011758:	68b9      	ldr	r1, [r7, #8]
 801175a:	68f8      	ldr	r0, [r7, #12]
 801175c:	f000 f86e 	bl	801183c <HAL_SPI_TransmitReceive_IT>
 8011760:	4603      	mov	r3, r0
 8011762:	e062      	b.n	801182a <HAL_SPI_Receive_IT+0x11e>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801176a:	2b01      	cmp	r3, #1
 801176c:	d101      	bne.n	8011772 <HAL_SPI_Receive_IT+0x66>
 801176e:	2302      	movs	r3, #2
 8011770:	e05b      	b.n	801182a <HAL_SPI_Receive_IT+0x11e>
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	2201      	movs	r2, #1
 8011776:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	2204      	movs	r2, #4
 801177e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	2200      	movs	r2, #0
 8011786:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	68ba      	ldr	r2, [r7, #8]
 801178c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	88fa      	ldrh	r2, [r7, #6]
 8011792:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	88fa      	ldrh	r2, [r7, #6]
 8011798:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	2200      	movs	r2, #0
 801179e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	2200      	movs	r2, #0
 80117a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	2200      	movs	r2, #0
 80117aa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	2200      	movs	r2, #0
 80117b0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	68db      	ldr	r3, [r3, #12]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d003      	beq.n	80117c2 <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	4a1d      	ldr	r2, [pc, #116]	@ (8011834 <HAL_SPI_Receive_IT+0x128>)
 80117be:	641a      	str	r2, [r3, #64]	@ 0x40
 80117c0:	e002      	b.n	80117c8 <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	4a1c      	ldr	r2, [pc, #112]	@ (8011838 <HAL_SPI_Receive_IT+0x12c>)
 80117c6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	689b      	ldr	r3, [r3, #8]
 80117cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80117d0:	d10f      	bne.n	80117f2 <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	681a      	ldr	r2, [r3, #0]
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80117e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	681a      	ldr	r2, [r3, #0]
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80117f0:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80117fc:	2b40      	cmp	r3, #64	@ 0x40
 80117fe:	d007      	beq.n	8011810 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	681a      	ldr	r2, [r3, #0]
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801180e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	2200      	movs	r2, #0
 8011814:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	685a      	ldr	r2, [r3, #4]
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8011826:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011828:	2300      	movs	r3, #0
}
 801182a:	4618      	mov	r0, r3
 801182c:	3710      	adds	r7, #16
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}
 8011832:	bf00      	nop
 8011834:	08011d75 	.word	0x08011d75
 8011838:	08011d2b 	.word	0x08011d2b

0801183c <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 801183c:	b480      	push	{r7}
 801183e:	b087      	sub	sp, #28
 8011840:	af00      	add	r7, sp, #0
 8011842:	60f8      	str	r0, [r7, #12]
 8011844:	60b9      	str	r1, [r7, #8]
 8011846:	607a      	str	r2, [r7, #4]
 8011848:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011850:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	685b      	ldr	r3, [r3, #4]
 8011856:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011858:	7dfb      	ldrb	r3, [r7, #23]
 801185a:	2b01      	cmp	r3, #1
 801185c:	d00c      	beq.n	8011878 <HAL_SPI_TransmitReceive_IT+0x3c>
 801185e:	693b      	ldr	r3, [r7, #16]
 8011860:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011864:	d106      	bne.n	8011874 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	689b      	ldr	r3, [r3, #8]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d102      	bne.n	8011874 <HAL_SPI_TransmitReceive_IT+0x38>
 801186e:	7dfb      	ldrb	r3, [r7, #23]
 8011870:	2b04      	cmp	r3, #4
 8011872:	d001      	beq.n	8011878 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8011874:	2302      	movs	r3, #2
 8011876:	e061      	b.n	801193c <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d005      	beq.n	801188a <HAL_SPI_TransmitReceive_IT+0x4e>
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d002      	beq.n	801188a <HAL_SPI_TransmitReceive_IT+0x4e>
 8011884:	887b      	ldrh	r3, [r7, #2]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d101      	bne.n	801188e <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 801188a:	2301      	movs	r3, #1
 801188c:	e056      	b.n	801193c <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8011894:	2b01      	cmp	r3, #1
 8011896:	d101      	bne.n	801189c <HAL_SPI_TransmitReceive_IT+0x60>
 8011898:	2302      	movs	r3, #2
 801189a:	e04f      	b.n	801193c <HAL_SPI_TransmitReceive_IT+0x100>
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	2201      	movs	r2, #1
 80118a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80118aa:	b2db      	uxtb	r3, r3
 80118ac:	2b04      	cmp	r3, #4
 80118ae:	d003      	beq.n	80118b8 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	2205      	movs	r2, #5
 80118b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	2200      	movs	r2, #0
 80118bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	68ba      	ldr	r2, [r7, #8]
 80118c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	887a      	ldrh	r2, [r7, #2]
 80118c8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	887a      	ldrh	r2, [r7, #2]
 80118ce:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	687a      	ldr	r2, [r7, #4]
 80118d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	887a      	ldrh	r2, [r7, #2]
 80118da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	887a      	ldrh	r2, [r7, #2]
 80118e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	68db      	ldr	r3, [r3, #12]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d006      	beq.n	80118f8 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	4a16      	ldr	r2, [pc, #88]	@ (8011948 <HAL_SPI_TransmitReceive_IT+0x10c>)
 80118ee:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	4a16      	ldr	r2, [pc, #88]	@ (801194c <HAL_SPI_TransmitReceive_IT+0x110>)
 80118f4:	645a      	str	r2, [r3, #68]	@ 0x44
 80118f6:	e005      	b.n	8011904 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	4a15      	ldr	r2, [pc, #84]	@ (8011950 <HAL_SPI_TransmitReceive_IT+0x114>)
 80118fc:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	4a14      	ldr	r2, [pc, #80]	@ (8011954 <HAL_SPI_TransmitReceive_IT+0x118>)
 8011902:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801190e:	2b40      	cmp	r3, #64	@ 0x40
 8011910:	d007      	beq.n	8011922 <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	681a      	ldr	r2, [r3, #0]
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011920:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	2200      	movs	r2, #0
 8011926:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	685a      	ldr	r2, [r3, #4]
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8011938:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801193a:	2300      	movs	r3, #0
}
 801193c:	4618      	mov	r0, r3
 801193e:	371c      	adds	r7, #28
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr
 8011948:	08011c6d 	.word	0x08011c6d
 801194c:	08011ccd 	.word	0x08011ccd
 8011950:	08011ba9 	.word	0x08011ba9
 8011954:	08011c0d 	.word	0x08011c0d

08011958 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b088      	sub	sp, #32
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	685b      	ldr	r3, [r3, #4]
 8011966:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	689b      	ldr	r3, [r3, #8]
 801196e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8011970:	69bb      	ldr	r3, [r7, #24]
 8011972:	099b      	lsrs	r3, r3, #6
 8011974:	f003 0301 	and.w	r3, r3, #1
 8011978:	2b00      	cmp	r3, #0
 801197a:	d10f      	bne.n	801199c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801197c:	69bb      	ldr	r3, [r7, #24]
 801197e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8011982:	2b00      	cmp	r3, #0
 8011984:	d00a      	beq.n	801199c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8011986:	69fb      	ldr	r3, [r7, #28]
 8011988:	099b      	lsrs	r3, r3, #6
 801198a:	f003 0301 	and.w	r3, r3, #1
 801198e:	2b00      	cmp	r3, #0
 8011990:	d004      	beq.n	801199c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	4798      	blx	r3
    return;
 801199a:	e0d7      	b.n	8011b4c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801199c:	69bb      	ldr	r3, [r7, #24]
 801199e:	085b      	lsrs	r3, r3, #1
 80119a0:	f003 0301 	and.w	r3, r3, #1
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d00a      	beq.n	80119be <HAL_SPI_IRQHandler+0x66>
 80119a8:	69fb      	ldr	r3, [r7, #28]
 80119aa:	09db      	lsrs	r3, r3, #7
 80119ac:	f003 0301 	and.w	r3, r3, #1
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d004      	beq.n	80119be <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80119b8:	6878      	ldr	r0, [r7, #4]
 80119ba:	4798      	blx	r3
    return;
 80119bc:	e0c6      	b.n	8011b4c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80119be:	69bb      	ldr	r3, [r7, #24]
 80119c0:	095b      	lsrs	r3, r3, #5
 80119c2:	f003 0301 	and.w	r3, r3, #1
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d10c      	bne.n	80119e4 <HAL_SPI_IRQHandler+0x8c>
 80119ca:	69bb      	ldr	r3, [r7, #24]
 80119cc:	099b      	lsrs	r3, r3, #6
 80119ce:	f003 0301 	and.w	r3, r3, #1
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d106      	bne.n	80119e4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80119d6:	69bb      	ldr	r3, [r7, #24]
 80119d8:	0a1b      	lsrs	r3, r3, #8
 80119da:	f003 0301 	and.w	r3, r3, #1
 80119de:	2b00      	cmp	r3, #0
 80119e0:	f000 80b4 	beq.w	8011b4c <HAL_SPI_IRQHandler+0x1f4>
 80119e4:	69fb      	ldr	r3, [r7, #28]
 80119e6:	095b      	lsrs	r3, r3, #5
 80119e8:	f003 0301 	and.w	r3, r3, #1
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	f000 80ad 	beq.w	8011b4c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80119f2:	69bb      	ldr	r3, [r7, #24]
 80119f4:	099b      	lsrs	r3, r3, #6
 80119f6:	f003 0301 	and.w	r3, r3, #1
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d023      	beq.n	8011a46 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011a04:	b2db      	uxtb	r3, r3
 8011a06:	2b03      	cmp	r3, #3
 8011a08:	d011      	beq.n	8011a2e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011a0e:	f043 0204 	orr.w	r2, r3, #4
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011a16:	2300      	movs	r3, #0
 8011a18:	617b      	str	r3, [r7, #20]
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	68db      	ldr	r3, [r3, #12]
 8011a20:	617b      	str	r3, [r7, #20]
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	689b      	ldr	r3, [r3, #8]
 8011a28:	617b      	str	r3, [r7, #20]
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	e00b      	b.n	8011a46 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011a2e:	2300      	movs	r3, #0
 8011a30:	613b      	str	r3, [r7, #16]
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	68db      	ldr	r3, [r3, #12]
 8011a38:	613b      	str	r3, [r7, #16]
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	689b      	ldr	r3, [r3, #8]
 8011a40:	613b      	str	r3, [r7, #16]
 8011a42:	693b      	ldr	r3, [r7, #16]
        return;
 8011a44:	e082      	b.n	8011b4c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8011a46:	69bb      	ldr	r3, [r7, #24]
 8011a48:	095b      	lsrs	r3, r3, #5
 8011a4a:	f003 0301 	and.w	r3, r3, #1
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d014      	beq.n	8011a7c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011a56:	f043 0201 	orr.w	r2, r3, #1
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011a5e:	2300      	movs	r3, #0
 8011a60:	60fb      	str	r3, [r7, #12]
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	689b      	ldr	r3, [r3, #8]
 8011a68:	60fb      	str	r3, [r7, #12]
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	681a      	ldr	r2, [r3, #0]
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011a78:	601a      	str	r2, [r3, #0]
 8011a7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8011a7c:	69bb      	ldr	r3, [r7, #24]
 8011a7e:	0a1b      	lsrs	r3, r3, #8
 8011a80:	f003 0301 	and.w	r3, r3, #1
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d00c      	beq.n	8011aa2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011a8c:	f043 0208 	orr.w	r2, r3, #8
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011a94:	2300      	movs	r3, #0
 8011a96:	60bb      	str	r3, [r7, #8]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	689b      	ldr	r3, [r3, #8]
 8011a9e:	60bb      	str	r3, [r7, #8]
 8011aa0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d04f      	beq.n	8011b4a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	685a      	ldr	r2, [r3, #4]
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8011ab8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	2201      	movs	r2, #1
 8011abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8011ac2:	69fb      	ldr	r3, [r7, #28]
 8011ac4:	f003 0302 	and.w	r3, r3, #2
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d104      	bne.n	8011ad6 <HAL_SPI_IRQHandler+0x17e>
 8011acc:	69fb      	ldr	r3, [r7, #28]
 8011ace:	f003 0301 	and.w	r3, r3, #1
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d034      	beq.n	8011b40 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	685a      	ldr	r2, [r3, #4]
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	f022 0203 	bic.w	r2, r2, #3
 8011ae4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d011      	beq.n	8011b12 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011af2:	4a18      	ldr	r2, [pc, #96]	@ (8011b54 <HAL_SPI_IRQHandler+0x1fc>)
 8011af4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7fe fc3a 	bl	8010374 <HAL_DMA_Abort_IT>
 8011b00:	4603      	mov	r3, r0
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d005      	beq.n	8011b12 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d016      	beq.n	8011b48 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011b1e:	4a0d      	ldr	r2, [pc, #52]	@ (8011b54 <HAL_SPI_IRQHandler+0x1fc>)
 8011b20:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7fe fc24 	bl	8010374 <HAL_DMA_Abort_IT>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d00a      	beq.n	8011b48 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8011b3e:	e003      	b.n	8011b48 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f000 f813 	bl	8011b6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8011b46:	e000      	b.n	8011b4a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8011b48:	bf00      	nop
    return;
 8011b4a:	bf00      	nop
  }
}
 8011b4c:	3720      	adds	r7, #32
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}
 8011b52:	bf00      	nop
 8011b54:	08011b81 	.word	0x08011b81

08011b58 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b083      	sub	sp, #12
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8011b60:	bf00      	nop
 8011b62:	370c      	adds	r7, #12
 8011b64:	46bd      	mov	sp, r7
 8011b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6a:	4770      	bx	lr

08011b6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	b083      	sub	sp, #12
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8011b74:	bf00      	nop
 8011b76:	370c      	adds	r7, #12
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7e:	4770      	bx	lr

08011b80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	2200      	movs	r2, #0
 8011b92:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	2200      	movs	r2, #0
 8011b98:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8011b9a:	68f8      	ldr	r0, [r7, #12]
 8011b9c:	f7ff ffe6 	bl	8011b6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011ba0:	bf00      	nop
 8011ba2:	3710      	adds	r7, #16
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}

08011ba8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b082      	sub	sp, #8
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	f103 020c 	add.w	r2, r3, #12
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011bbc:	7812      	ldrb	r2, [r2, #0]
 8011bbe:	b2d2      	uxtb	r2, r2
 8011bc0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011bc6:	1c5a      	adds	r2, r3, #1
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011bd0:	b29b      	uxth	r3, r3
 8011bd2:	3b01      	subs	r3, #1
 8011bd4:	b29a      	uxth	r2, r3
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011bde:	b29b      	uxth	r3, r3
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d10f      	bne.n	8011c04 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	685a      	ldr	r2, [r3, #4]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8011bf2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011bf8:	b29b      	uxth	r3, r3
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d102      	bne.n	8011c04 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f000 fa1e 	bl	8012040 <SPI_CloseRxTx_ISR>
    }
  }
}
 8011c04:	bf00      	nop
 8011c06:	3708      	adds	r7, #8
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}

08011c0c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b082      	sub	sp, #8
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	330c      	adds	r3, #12
 8011c1e:	7812      	ldrb	r2, [r2, #0]
 8011c20:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c26:	1c5a      	adds	r2, r3, #1
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011c30:	b29b      	uxth	r3, r3
 8011c32:	3b01      	subs	r3, #1
 8011c34:	b29a      	uxth	r2, r3
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d10f      	bne.n	8011c64 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	685a      	ldr	r2, [r3, #4]
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011c52:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011c58:	b29b      	uxth	r3, r3
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d102      	bne.n	8011c64 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f000 f9ee 	bl	8012040 <SPI_CloseRxTx_ISR>
    }
  }
}
 8011c64:	bf00      	nop
 8011c66:	3708      	adds	r7, #8
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b082      	sub	sp, #8
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	68da      	ldr	r2, [r3, #12]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c7e:	b292      	uxth	r2, r2
 8011c80:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c86:	1c9a      	adds	r2, r3, #2
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	3b01      	subs	r3, #1
 8011c94:	b29a      	uxth	r2, r3
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d10f      	bne.n	8011cc4 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	685a      	ldr	r2, [r3, #4]
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011cb2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011cb8:	b29b      	uxth	r3, r3
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d102      	bne.n	8011cc4 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f000 f9be 	bl	8012040 <SPI_CloseRxTx_ISR>
    }
  }
}
 8011cc4:	bf00      	nop
 8011cc6:	3708      	adds	r7, #8
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd80      	pop	{r7, pc}

08011ccc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b082      	sub	sp, #8
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cd8:	881a      	ldrh	r2, [r3, #0]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ce4:	1c9a      	adds	r2, r3, #2
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011cee:	b29b      	uxth	r3, r3
 8011cf0:	3b01      	subs	r3, #1
 8011cf2:	b29a      	uxth	r2, r3
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011cfc:	b29b      	uxth	r3, r3
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d10f      	bne.n	8011d22 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	685a      	ldr	r2, [r3, #4]
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011d10:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d16:	b29b      	uxth	r3, r3
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d102      	bne.n	8011d22 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f000 f98f 	bl	8012040 <SPI_CloseRxTx_ISR>
    }
  }
}
 8011d22:	bf00      	nop
 8011d24:	3708      	adds	r7, #8
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}

08011d2a <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8011d2a:	b580      	push	{r7, lr}
 8011d2c:	b082      	sub	sp, #8
 8011d2e:	af00      	add	r7, sp, #0
 8011d30:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	f103 020c 	add.w	r2, r3, #12
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d3e:	7812      	ldrb	r2, [r2, #0]
 8011d40:	b2d2      	uxtb	r2, r2
 8011d42:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d48:	1c5a      	adds	r2, r3, #1
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d52:	b29b      	uxth	r3, r3
 8011d54:	3b01      	subs	r3, #1
 8011d56:	b29a      	uxth	r2, r3
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d60:	b29b      	uxth	r3, r3
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d102      	bne.n	8011d6c <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f000 f9de 	bl	8012128 <SPI_CloseRx_ISR>
  }
}
 8011d6c:	bf00      	nop
 8011d6e:	3708      	adds	r7, #8
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}

08011d74 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b082      	sub	sp, #8
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	68da      	ldr	r2, [r3, #12]
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d86:	b292      	uxth	r2, r2
 8011d88:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d8e:	1c9a      	adds	r2, r3, #2
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d98:	b29b      	uxth	r3, r3
 8011d9a:	3b01      	subs	r3, #1
 8011d9c:	b29a      	uxth	r2, r3
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011da6:	b29b      	uxth	r3, r3
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d102      	bne.n	8011db2 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	f000 f9bb 	bl	8012128 <SPI_CloseRx_ISR>
  }
}
 8011db2:	bf00      	nop
 8011db4:	3708      	adds	r7, #8
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}
	...

08011dbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b088      	sub	sp, #32
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	60f8      	str	r0, [r7, #12]
 8011dc4:	60b9      	str	r1, [r7, #8]
 8011dc6:	603b      	str	r3, [r7, #0]
 8011dc8:	4613      	mov	r3, r2
 8011dca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011dcc:	f7fe f950 	bl	8010070 <HAL_GetTick>
 8011dd0:	4602      	mov	r2, r0
 8011dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dd4:	1a9b      	subs	r3, r3, r2
 8011dd6:	683a      	ldr	r2, [r7, #0]
 8011dd8:	4413      	add	r3, r2
 8011dda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011ddc:	f7fe f948 	bl	8010070 <HAL_GetTick>
 8011de0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011de2:	4b39      	ldr	r3, [pc, #228]	@ (8011ec8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	015b      	lsls	r3, r3, #5
 8011de8:	0d1b      	lsrs	r3, r3, #20
 8011dea:	69fa      	ldr	r2, [r7, #28]
 8011dec:	fb02 f303 	mul.w	r3, r2, r3
 8011df0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011df2:	e055      	b.n	8011ea0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dfa:	d051      	beq.n	8011ea0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011dfc:	f7fe f938 	bl	8010070 <HAL_GetTick>
 8011e00:	4602      	mov	r2, r0
 8011e02:	69bb      	ldr	r3, [r7, #24]
 8011e04:	1ad3      	subs	r3, r2, r3
 8011e06:	69fa      	ldr	r2, [r7, #28]
 8011e08:	429a      	cmp	r2, r3
 8011e0a:	d902      	bls.n	8011e12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8011e0c:	69fb      	ldr	r3, [r7, #28]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d13d      	bne.n	8011e8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	685a      	ldr	r2, [r3, #4]
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8011e20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011e2a:	d111      	bne.n	8011e50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	689b      	ldr	r3, [r3, #8]
 8011e30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011e34:	d004      	beq.n	8011e40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	689b      	ldr	r3, [r3, #8]
 8011e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011e3e:	d107      	bne.n	8011e50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	681a      	ldr	r2, [r3, #0]
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011e4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011e58:	d10f      	bne.n	8011e7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	681a      	ldr	r2, [r3, #0]
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8011e68:	601a      	str	r2, [r3, #0]
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	681a      	ldr	r2, [r3, #0]
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011e78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	2201      	movs	r2, #1
 8011e7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	2200      	movs	r2, #0
 8011e86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8011e8a:	2303      	movs	r3, #3
 8011e8c:	e018      	b.n	8011ec0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011e8e:	697b      	ldr	r3, [r7, #20]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d102      	bne.n	8011e9a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8011e94:	2300      	movs	r3, #0
 8011e96:	61fb      	str	r3, [r7, #28]
 8011e98:	e002      	b.n	8011ea0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8011e9a:	697b      	ldr	r3, [r7, #20]
 8011e9c:	3b01      	subs	r3, #1
 8011e9e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	689a      	ldr	r2, [r3, #8]
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	4013      	ands	r3, r2
 8011eaa:	68ba      	ldr	r2, [r7, #8]
 8011eac:	429a      	cmp	r2, r3
 8011eae:	bf0c      	ite	eq
 8011eb0:	2301      	moveq	r3, #1
 8011eb2:	2300      	movne	r3, #0
 8011eb4:	b2db      	uxtb	r3, r3
 8011eb6:	461a      	mov	r2, r3
 8011eb8:	79fb      	ldrb	r3, [r7, #7]
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d19a      	bne.n	8011df4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8011ebe:	2300      	movs	r3, #0
}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	3720      	adds	r7, #32
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}
 8011ec8:	20000034 	.word	0x20000034

08011ecc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b086      	sub	sp, #24
 8011ed0:	af02      	add	r7, sp, #8
 8011ed2:	60f8      	str	r0, [r7, #12]
 8011ed4:	60b9      	str	r1, [r7, #8]
 8011ed6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	685b      	ldr	r3, [r3, #4]
 8011edc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011ee0:	d111      	bne.n	8011f06 <SPI_EndRxTransaction+0x3a>
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	689b      	ldr	r3, [r3, #8]
 8011ee6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011eea:	d004      	beq.n	8011ef6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	689b      	ldr	r3, [r3, #8]
 8011ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011ef4:	d107      	bne.n	8011f06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	681a      	ldr	r2, [r3, #0]
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011f04:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	685b      	ldr	r3, [r3, #4]
 8011f0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011f0e:	d12a      	bne.n	8011f66 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	689b      	ldr	r3, [r3, #8]
 8011f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011f18:	d012      	beq.n	8011f40 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	9300      	str	r3, [sp, #0]
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	2200      	movs	r2, #0
 8011f22:	2180      	movs	r1, #128	@ 0x80
 8011f24:	68f8      	ldr	r0, [r7, #12]
 8011f26:	f7ff ff49 	bl	8011dbc <SPI_WaitFlagStateUntilTimeout>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d02d      	beq.n	8011f8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011f34:	f043 0220 	orr.w	r2, r3, #32
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8011f3c:	2303      	movs	r3, #3
 8011f3e:	e026      	b.n	8011f8e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	9300      	str	r3, [sp, #0]
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	2200      	movs	r2, #0
 8011f48:	2101      	movs	r1, #1
 8011f4a:	68f8      	ldr	r0, [r7, #12]
 8011f4c:	f7ff ff36 	bl	8011dbc <SPI_WaitFlagStateUntilTimeout>
 8011f50:	4603      	mov	r3, r0
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d01a      	beq.n	8011f8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011f5a:	f043 0220 	orr.w	r2, r3, #32
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8011f62:	2303      	movs	r3, #3
 8011f64:	e013      	b.n	8011f8e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	9300      	str	r3, [sp, #0]
 8011f6a:	68bb      	ldr	r3, [r7, #8]
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	2101      	movs	r1, #1
 8011f70:	68f8      	ldr	r0, [r7, #12]
 8011f72:	f7ff ff23 	bl	8011dbc <SPI_WaitFlagStateUntilTimeout>
 8011f76:	4603      	mov	r3, r0
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d007      	beq.n	8011f8c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011f80:	f043 0220 	orr.w	r2, r3, #32
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8011f88:	2303      	movs	r3, #3
 8011f8a:	e000      	b.n	8011f8e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8011f8c:	2300      	movs	r3, #0
}
 8011f8e:	4618      	mov	r0, r3
 8011f90:	3710      	adds	r7, #16
 8011f92:	46bd      	mov	sp, r7
 8011f94:	bd80      	pop	{r7, pc}
	...

08011f98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b088      	sub	sp, #32
 8011f9c:	af02      	add	r7, sp, #8
 8011f9e:	60f8      	str	r0, [r7, #12]
 8011fa0:	60b9      	str	r1, [r7, #8]
 8011fa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	9300      	str	r3, [sp, #0]
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	2201      	movs	r2, #1
 8011fac:	2102      	movs	r1, #2
 8011fae:	68f8      	ldr	r0, [r7, #12]
 8011fb0:	f7ff ff04 	bl	8011dbc <SPI_WaitFlagStateUntilTimeout>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d007      	beq.n	8011fca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011fbe:	f043 0220 	orr.w	r2, r3, #32
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8011fc6:	2303      	movs	r3, #3
 8011fc8:	e032      	b.n	8012030 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8011fca:	4b1b      	ldr	r3, [pc, #108]	@ (8012038 <SPI_EndRxTxTransaction+0xa0>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	4a1b      	ldr	r2, [pc, #108]	@ (801203c <SPI_EndRxTxTransaction+0xa4>)
 8011fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8011fd4:	0d5b      	lsrs	r3, r3, #21
 8011fd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011fda:	fb02 f303 	mul.w	r3, r2, r3
 8011fde:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	685b      	ldr	r3, [r3, #4]
 8011fe4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011fe8:	d112      	bne.n	8012010 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	9300      	str	r3, [sp, #0]
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	2180      	movs	r1, #128	@ 0x80
 8011ff4:	68f8      	ldr	r0, [r7, #12]
 8011ff6:	f7ff fee1 	bl	8011dbc <SPI_WaitFlagStateUntilTimeout>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d016      	beq.n	801202e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012004:	f043 0220 	orr.w	r2, r3, #32
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 801200c:	2303      	movs	r3, #3
 801200e:	e00f      	b.n	8012030 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d00a      	beq.n	801202c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	3b01      	subs	r3, #1
 801201a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	689b      	ldr	r3, [r3, #8]
 8012022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012026:	2b80      	cmp	r3, #128	@ 0x80
 8012028:	d0f2      	beq.n	8012010 <SPI_EndRxTxTransaction+0x78>
 801202a:	e000      	b.n	801202e <SPI_EndRxTxTransaction+0x96>
        break;
 801202c:	bf00      	nop
  }

  return HAL_OK;
 801202e:	2300      	movs	r3, #0
}
 8012030:	4618      	mov	r0, r3
 8012032:	3718      	adds	r7, #24
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}
 8012038:	20000034 	.word	0x20000034
 801203c:	165e9f81 	.word	0x165e9f81

08012040 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b086      	sub	sp, #24
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8012048:	4b35      	ldr	r3, [pc, #212]	@ (8012120 <SPI_CloseRxTx_ISR+0xe0>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	4a35      	ldr	r2, [pc, #212]	@ (8012124 <SPI_CloseRxTx_ISR+0xe4>)
 801204e:	fba2 2303 	umull	r2, r3, r2, r3
 8012052:	0a5b      	lsrs	r3, r3, #9
 8012054:	2264      	movs	r2, #100	@ 0x64
 8012056:	fb02 f303 	mul.w	r3, r2, r3
 801205a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801205c:	f7fe f808 	bl	8010070 <HAL_GetTick>
 8012060:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	685a      	ldr	r2, [r3, #4]
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	f022 0220 	bic.w	r2, r2, #32
 8012070:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d106      	bne.n	8012086 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801207c:	f043 0220 	orr.w	r2, r3, #32
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8012084:	e009      	b.n	801209a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8012086:	693b      	ldr	r3, [r7, #16]
 8012088:	3b01      	subs	r3, #1
 801208a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	689b      	ldr	r3, [r3, #8]
 8012092:	f003 0302 	and.w	r3, r3, #2
 8012096:	2b00      	cmp	r3, #0
 8012098:	d0eb      	beq.n	8012072 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801209a:	697a      	ldr	r2, [r7, #20]
 801209c:	2164      	movs	r1, #100	@ 0x64
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	f7ff ff7a 	bl	8011f98 <SPI_EndRxTxTransaction>
 80120a4:	4603      	mov	r3, r0
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d005      	beq.n	80120b6 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80120ae:	f043 0220 	orr.w	r2, r3, #32
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	689b      	ldr	r3, [r3, #8]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d10a      	bne.n	80120d4 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80120be:	2300      	movs	r3, #0
 80120c0:	60fb      	str	r3, [r7, #12]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	68db      	ldr	r3, [r3, #12]
 80120c8:	60fb      	str	r3, [r7, #12]
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	689b      	ldr	r3, [r3, #8]
 80120d0:	60fb      	str	r3, [r7, #12]
 80120d2:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d115      	bne.n	8012108 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	2b04      	cmp	r3, #4
 80120e6:	d107      	bne.n	80120f8 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2201      	movs	r2, #1
 80120ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80120f0:	6878      	ldr	r0, [r7, #4]
 80120f2:	f7fc ffdf 	bl	800f0b4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80120f6:	e00e      	b.n	8012116 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2201      	movs	r2, #1
 80120fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f7ff fd29 	bl	8011b58 <HAL_SPI_TxRxCpltCallback>
}
 8012106:	e006      	b.n	8012116 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	2201      	movs	r2, #1
 801210c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f7ff fd2b 	bl	8011b6c <HAL_SPI_ErrorCallback>
}
 8012116:	bf00      	nop
 8012118:	3718      	adds	r7, #24
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
 801211e:	bf00      	nop
 8012120:	20000034 	.word	0x20000034
 8012124:	057619f1 	.word	0x057619f1

08012128 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b084      	sub	sp, #16
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	685a      	ldr	r2, [r3, #4]
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801213e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8012140:	f7fd ff96 	bl	8010070 <HAL_GetTick>
 8012144:	4603      	mov	r3, r0
 8012146:	461a      	mov	r2, r3
 8012148:	2164      	movs	r1, #100	@ 0x64
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f7ff febe 	bl	8011ecc <SPI_EndRxTransaction>
 8012150:	4603      	mov	r3, r0
 8012152:	2b00      	cmp	r3, #0
 8012154:	d005      	beq.n	8012162 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801215a:	f043 0220 	orr.w	r2, r3, #32
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	689b      	ldr	r3, [r3, #8]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d10a      	bne.n	8012180 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801216a:	2300      	movs	r3, #0
 801216c:	60fb      	str	r3, [r7, #12]
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	68db      	ldr	r3, [r3, #12]
 8012174:	60fb      	str	r3, [r7, #12]
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	689b      	ldr	r3, [r3, #8]
 801217c:	60fb      	str	r3, [r7, #12]
 801217e:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2201      	movs	r2, #1
 8012184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801218c:	2b00      	cmp	r3, #0
 801218e:	d103      	bne.n	8012198 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f7fc ff8f 	bl	800f0b4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8012196:	e002      	b.n	801219e <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f7ff fce7 	bl	8011b6c <HAL_SPI_ErrorCallback>
}
 801219e:	bf00      	nop
 80121a0:	3710      	adds	r7, #16
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}

080121a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80121a6:	b580      	push	{r7, lr}
 80121a8:	b082      	sub	sp, #8
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d101      	bne.n	80121b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80121b4:	2301      	movs	r3, #1
 80121b6:	e041      	b.n	801223c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80121be:	b2db      	uxtb	r3, r3
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d106      	bne.n	80121d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2200      	movs	r2, #0
 80121c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f000 f839 	bl	8012244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2202      	movs	r2, #2
 80121d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	681a      	ldr	r2, [r3, #0]
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	3304      	adds	r3, #4
 80121e2:	4619      	mov	r1, r3
 80121e4:	4610      	mov	r0, r2
 80121e6:	f000 f9bf 	bl	8012568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2201      	movs	r2, #1
 80121ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2201      	movs	r2, #1
 80121f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2201      	movs	r2, #1
 80121fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2201      	movs	r2, #1
 8012206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2201      	movs	r2, #1
 801220e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2201      	movs	r2, #1
 8012216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2201      	movs	r2, #1
 801221e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2201      	movs	r2, #1
 8012226:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2201      	movs	r2, #1
 801222e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2201      	movs	r2, #1
 8012236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801223a:	2300      	movs	r3, #0
}
 801223c:	4618      	mov	r0, r3
 801223e:	3708      	adds	r7, #8
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}

08012244 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8012244:	b480      	push	{r7}
 8012246:	b083      	sub	sp, #12
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801224c:	bf00      	nop
 801224e:	370c      	adds	r7, #12
 8012250:	46bd      	mov	sp, r7
 8012252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012256:	4770      	bx	lr

08012258 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012258:	b480      	push	{r7}
 801225a:	b085      	sub	sp, #20
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012266:	b2db      	uxtb	r3, r3
 8012268:	2b01      	cmp	r3, #1
 801226a:	d001      	beq.n	8012270 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801226c:	2301      	movs	r3, #1
 801226e:	e04e      	b.n	801230e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	2202      	movs	r2, #2
 8012274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	68da      	ldr	r2, [r3, #12]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	f042 0201 	orr.w	r2, r2, #1
 8012286:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	4a23      	ldr	r2, [pc, #140]	@ (801231c <HAL_TIM_Base_Start_IT+0xc4>)
 801228e:	4293      	cmp	r3, r2
 8012290:	d022      	beq.n	80122d8 <HAL_TIM_Base_Start_IT+0x80>
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801229a:	d01d      	beq.n	80122d8 <HAL_TIM_Base_Start_IT+0x80>
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	4a1f      	ldr	r2, [pc, #124]	@ (8012320 <HAL_TIM_Base_Start_IT+0xc8>)
 80122a2:	4293      	cmp	r3, r2
 80122a4:	d018      	beq.n	80122d8 <HAL_TIM_Base_Start_IT+0x80>
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	4a1e      	ldr	r2, [pc, #120]	@ (8012324 <HAL_TIM_Base_Start_IT+0xcc>)
 80122ac:	4293      	cmp	r3, r2
 80122ae:	d013      	beq.n	80122d8 <HAL_TIM_Base_Start_IT+0x80>
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	4a1c      	ldr	r2, [pc, #112]	@ (8012328 <HAL_TIM_Base_Start_IT+0xd0>)
 80122b6:	4293      	cmp	r3, r2
 80122b8:	d00e      	beq.n	80122d8 <HAL_TIM_Base_Start_IT+0x80>
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	4a1b      	ldr	r2, [pc, #108]	@ (801232c <HAL_TIM_Base_Start_IT+0xd4>)
 80122c0:	4293      	cmp	r3, r2
 80122c2:	d009      	beq.n	80122d8 <HAL_TIM_Base_Start_IT+0x80>
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	4a19      	ldr	r2, [pc, #100]	@ (8012330 <HAL_TIM_Base_Start_IT+0xd8>)
 80122ca:	4293      	cmp	r3, r2
 80122cc:	d004      	beq.n	80122d8 <HAL_TIM_Base_Start_IT+0x80>
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	4a18      	ldr	r2, [pc, #96]	@ (8012334 <HAL_TIM_Base_Start_IT+0xdc>)
 80122d4:	4293      	cmp	r3, r2
 80122d6:	d111      	bne.n	80122fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	689b      	ldr	r3, [r3, #8]
 80122de:	f003 0307 	and.w	r3, r3, #7
 80122e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	2b06      	cmp	r3, #6
 80122e8:	d010      	beq.n	801230c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	681a      	ldr	r2, [r3, #0]
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	f042 0201 	orr.w	r2, r2, #1
 80122f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80122fa:	e007      	b.n	801230c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	681a      	ldr	r2, [r3, #0]
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	f042 0201 	orr.w	r2, r2, #1
 801230a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801230c:	2300      	movs	r3, #0
}
 801230e:	4618      	mov	r0, r3
 8012310:	3714      	adds	r7, #20
 8012312:	46bd      	mov	sp, r7
 8012314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012318:	4770      	bx	lr
 801231a:	bf00      	nop
 801231c:	40010000 	.word	0x40010000
 8012320:	40000400 	.word	0x40000400
 8012324:	40000800 	.word	0x40000800
 8012328:	40000c00 	.word	0x40000c00
 801232c:	40010400 	.word	0x40010400
 8012330:	40014000 	.word	0x40014000
 8012334:	40001800 	.word	0x40001800

08012338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b084      	sub	sp, #16
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	68db      	ldr	r3, [r3, #12]
 8012346:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	691b      	ldr	r3, [r3, #16]
 801234e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012350:	68bb      	ldr	r3, [r7, #8]
 8012352:	f003 0302 	and.w	r3, r3, #2
 8012356:	2b00      	cmp	r3, #0
 8012358:	d020      	beq.n	801239c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	f003 0302 	and.w	r3, r3, #2
 8012360:	2b00      	cmp	r3, #0
 8012362:	d01b      	beq.n	801239c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	f06f 0202 	mvn.w	r2, #2
 801236c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2201      	movs	r2, #1
 8012372:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	699b      	ldr	r3, [r3, #24]
 801237a:	f003 0303 	and.w	r3, r3, #3
 801237e:	2b00      	cmp	r3, #0
 8012380:	d003      	beq.n	801238a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f000 f8d2 	bl	801252c <HAL_TIM_IC_CaptureCallback>
 8012388:	e005      	b.n	8012396 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	f000 f8c4 	bl	8012518 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f000 f8d5 	bl	8012540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2200      	movs	r2, #0
 801239a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	f003 0304 	and.w	r3, r3, #4
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d020      	beq.n	80123e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	f003 0304 	and.w	r3, r3, #4
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d01b      	beq.n	80123e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	f06f 0204 	mvn.w	r2, #4
 80123b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	2202      	movs	r2, #2
 80123be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	699b      	ldr	r3, [r3, #24]
 80123c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d003      	beq.n	80123d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f000 f8ac 	bl	801252c <HAL_TIM_IC_CaptureCallback>
 80123d4:	e005      	b.n	80123e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f000 f89e 	bl	8012518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f000 f8af 	bl	8012540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	2200      	movs	r2, #0
 80123e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80123e8:	68bb      	ldr	r3, [r7, #8]
 80123ea:	f003 0308 	and.w	r3, r3, #8
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d020      	beq.n	8012434 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	f003 0308 	and.w	r3, r3, #8
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d01b      	beq.n	8012434 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	f06f 0208 	mvn.w	r2, #8
 8012404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2204      	movs	r2, #4
 801240a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	69db      	ldr	r3, [r3, #28]
 8012412:	f003 0303 	and.w	r3, r3, #3
 8012416:	2b00      	cmp	r3, #0
 8012418:	d003      	beq.n	8012422 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801241a:	6878      	ldr	r0, [r7, #4]
 801241c:	f000 f886 	bl	801252c <HAL_TIM_IC_CaptureCallback>
 8012420:	e005      	b.n	801242e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f000 f878 	bl	8012518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f000 f889 	bl	8012540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2200      	movs	r2, #0
 8012432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	f003 0310 	and.w	r3, r3, #16
 801243a:	2b00      	cmp	r3, #0
 801243c:	d020      	beq.n	8012480 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	f003 0310 	and.w	r3, r3, #16
 8012444:	2b00      	cmp	r3, #0
 8012446:	d01b      	beq.n	8012480 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	f06f 0210 	mvn.w	r2, #16
 8012450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	2208      	movs	r2, #8
 8012456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	69db      	ldr	r3, [r3, #28]
 801245e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012462:	2b00      	cmp	r3, #0
 8012464:	d003      	beq.n	801246e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012466:	6878      	ldr	r0, [r7, #4]
 8012468:	f000 f860 	bl	801252c <HAL_TIM_IC_CaptureCallback>
 801246c:	e005      	b.n	801247a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f000 f852 	bl	8012518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f000 f863 	bl	8012540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	2200      	movs	r2, #0
 801247e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012480:	68bb      	ldr	r3, [r7, #8]
 8012482:	f003 0301 	and.w	r3, r3, #1
 8012486:	2b00      	cmp	r3, #0
 8012488:	d00c      	beq.n	80124a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	f003 0301 	and.w	r3, r3, #1
 8012490:	2b00      	cmp	r3, #0
 8012492:	d007      	beq.n	80124a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	f06f 0201 	mvn.w	r2, #1
 801249c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f7fc fc36 	bl	800ed10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80124a4:	68bb      	ldr	r3, [r7, #8]
 80124a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d00c      	beq.n	80124c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d007      	beq.n	80124c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80124c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f000 f900 	bl	80126c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d00c      	beq.n	80124ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d007      	beq.n	80124ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80124e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f000 f834 	bl	8012554 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80124ec:	68bb      	ldr	r3, [r7, #8]
 80124ee:	f003 0320 	and.w	r3, r3, #32
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d00c      	beq.n	8012510 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	f003 0320 	and.w	r3, r3, #32
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d007      	beq.n	8012510 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	f06f 0220 	mvn.w	r2, #32
 8012508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801250a:	6878      	ldr	r0, [r7, #4]
 801250c:	f000 f8d2 	bl	80126b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012510:	bf00      	nop
 8012512:	3710      	adds	r7, #16
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}

08012518 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012518:	b480      	push	{r7}
 801251a:	b083      	sub	sp, #12
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012520:	bf00      	nop
 8012522:	370c      	adds	r7, #12
 8012524:	46bd      	mov	sp, r7
 8012526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252a:	4770      	bx	lr

0801252c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801252c:	b480      	push	{r7}
 801252e:	b083      	sub	sp, #12
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012534:	bf00      	nop
 8012536:	370c      	adds	r7, #12
 8012538:	46bd      	mov	sp, r7
 801253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253e:	4770      	bx	lr

08012540 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012540:	b480      	push	{r7}
 8012542:	b083      	sub	sp, #12
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012548:	bf00      	nop
 801254a:	370c      	adds	r7, #12
 801254c:	46bd      	mov	sp, r7
 801254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012552:	4770      	bx	lr

08012554 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012554:	b480      	push	{r7}
 8012556:	b083      	sub	sp, #12
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801255c:	bf00      	nop
 801255e:	370c      	adds	r7, #12
 8012560:	46bd      	mov	sp, r7
 8012562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012566:	4770      	bx	lr

08012568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012568:	b480      	push	{r7}
 801256a:	b085      	sub	sp, #20
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	4a43      	ldr	r2, [pc, #268]	@ (8012688 <TIM_Base_SetConfig+0x120>)
 801257c:	4293      	cmp	r3, r2
 801257e:	d013      	beq.n	80125a8 <TIM_Base_SetConfig+0x40>
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012586:	d00f      	beq.n	80125a8 <TIM_Base_SetConfig+0x40>
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	4a40      	ldr	r2, [pc, #256]	@ (801268c <TIM_Base_SetConfig+0x124>)
 801258c:	4293      	cmp	r3, r2
 801258e:	d00b      	beq.n	80125a8 <TIM_Base_SetConfig+0x40>
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	4a3f      	ldr	r2, [pc, #252]	@ (8012690 <TIM_Base_SetConfig+0x128>)
 8012594:	4293      	cmp	r3, r2
 8012596:	d007      	beq.n	80125a8 <TIM_Base_SetConfig+0x40>
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	4a3e      	ldr	r2, [pc, #248]	@ (8012694 <TIM_Base_SetConfig+0x12c>)
 801259c:	4293      	cmp	r3, r2
 801259e:	d003      	beq.n	80125a8 <TIM_Base_SetConfig+0x40>
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	4a3d      	ldr	r2, [pc, #244]	@ (8012698 <TIM_Base_SetConfig+0x130>)
 80125a4:	4293      	cmp	r3, r2
 80125a6:	d108      	bne.n	80125ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80125ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	685b      	ldr	r3, [r3, #4]
 80125b4:	68fa      	ldr	r2, [r7, #12]
 80125b6:	4313      	orrs	r3, r2
 80125b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	4a32      	ldr	r2, [pc, #200]	@ (8012688 <TIM_Base_SetConfig+0x120>)
 80125be:	4293      	cmp	r3, r2
 80125c0:	d02b      	beq.n	801261a <TIM_Base_SetConfig+0xb2>
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80125c8:	d027      	beq.n	801261a <TIM_Base_SetConfig+0xb2>
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	4a2f      	ldr	r2, [pc, #188]	@ (801268c <TIM_Base_SetConfig+0x124>)
 80125ce:	4293      	cmp	r3, r2
 80125d0:	d023      	beq.n	801261a <TIM_Base_SetConfig+0xb2>
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	4a2e      	ldr	r2, [pc, #184]	@ (8012690 <TIM_Base_SetConfig+0x128>)
 80125d6:	4293      	cmp	r3, r2
 80125d8:	d01f      	beq.n	801261a <TIM_Base_SetConfig+0xb2>
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	4a2d      	ldr	r2, [pc, #180]	@ (8012694 <TIM_Base_SetConfig+0x12c>)
 80125de:	4293      	cmp	r3, r2
 80125e0:	d01b      	beq.n	801261a <TIM_Base_SetConfig+0xb2>
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	4a2c      	ldr	r2, [pc, #176]	@ (8012698 <TIM_Base_SetConfig+0x130>)
 80125e6:	4293      	cmp	r3, r2
 80125e8:	d017      	beq.n	801261a <TIM_Base_SetConfig+0xb2>
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	4a2b      	ldr	r2, [pc, #172]	@ (801269c <TIM_Base_SetConfig+0x134>)
 80125ee:	4293      	cmp	r3, r2
 80125f0:	d013      	beq.n	801261a <TIM_Base_SetConfig+0xb2>
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	4a2a      	ldr	r2, [pc, #168]	@ (80126a0 <TIM_Base_SetConfig+0x138>)
 80125f6:	4293      	cmp	r3, r2
 80125f8:	d00f      	beq.n	801261a <TIM_Base_SetConfig+0xb2>
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	4a29      	ldr	r2, [pc, #164]	@ (80126a4 <TIM_Base_SetConfig+0x13c>)
 80125fe:	4293      	cmp	r3, r2
 8012600:	d00b      	beq.n	801261a <TIM_Base_SetConfig+0xb2>
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	4a28      	ldr	r2, [pc, #160]	@ (80126a8 <TIM_Base_SetConfig+0x140>)
 8012606:	4293      	cmp	r3, r2
 8012608:	d007      	beq.n	801261a <TIM_Base_SetConfig+0xb2>
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	4a27      	ldr	r2, [pc, #156]	@ (80126ac <TIM_Base_SetConfig+0x144>)
 801260e:	4293      	cmp	r3, r2
 8012610:	d003      	beq.n	801261a <TIM_Base_SetConfig+0xb2>
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	4a26      	ldr	r2, [pc, #152]	@ (80126b0 <TIM_Base_SetConfig+0x148>)
 8012616:	4293      	cmp	r3, r2
 8012618:	d108      	bne.n	801262c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	68db      	ldr	r3, [r3, #12]
 8012626:	68fa      	ldr	r2, [r7, #12]
 8012628:	4313      	orrs	r3, r2
 801262a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	695b      	ldr	r3, [r3, #20]
 8012636:	4313      	orrs	r3, r2
 8012638:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	689a      	ldr	r2, [r3, #8]
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	681a      	ldr	r2, [r3, #0]
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	4a0e      	ldr	r2, [pc, #56]	@ (8012688 <TIM_Base_SetConfig+0x120>)
 801264e:	4293      	cmp	r3, r2
 8012650:	d003      	beq.n	801265a <TIM_Base_SetConfig+0xf2>
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	4a10      	ldr	r2, [pc, #64]	@ (8012698 <TIM_Base_SetConfig+0x130>)
 8012656:	4293      	cmp	r3, r2
 8012658:	d103      	bne.n	8012662 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	691a      	ldr	r2, [r3, #16]
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	f043 0204 	orr.w	r2, r3, #4
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2201      	movs	r2, #1
 8012672:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	68fa      	ldr	r2, [r7, #12]
 8012678:	601a      	str	r2, [r3, #0]
}
 801267a:	bf00      	nop
 801267c:	3714      	adds	r7, #20
 801267e:	46bd      	mov	sp, r7
 8012680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012684:	4770      	bx	lr
 8012686:	bf00      	nop
 8012688:	40010000 	.word	0x40010000
 801268c:	40000400 	.word	0x40000400
 8012690:	40000800 	.word	0x40000800
 8012694:	40000c00 	.word	0x40000c00
 8012698:	40010400 	.word	0x40010400
 801269c:	40014000 	.word	0x40014000
 80126a0:	40014400 	.word	0x40014400
 80126a4:	40014800 	.word	0x40014800
 80126a8:	40001800 	.word	0x40001800
 80126ac:	40001c00 	.word	0x40001c00
 80126b0:	40002000 	.word	0x40002000

080126b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80126b4:	b480      	push	{r7}
 80126b6:	b083      	sub	sp, #12
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80126bc:	bf00      	nop
 80126be:	370c      	adds	r7, #12
 80126c0:	46bd      	mov	sp, r7
 80126c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c6:	4770      	bx	lr

080126c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80126c8:	b480      	push	{r7}
 80126ca:	b083      	sub	sp, #12
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80126d0:	bf00      	nop
 80126d2:	370c      	adds	r7, #12
 80126d4:	46bd      	mov	sp, r7
 80126d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126da:	4770      	bx	lr

080126dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b082      	sub	sp, #8
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d101      	bne.n	80126ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80126ea:	2301      	movs	r3, #1
 80126ec:	e042      	b.n	8012774 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80126f4:	b2db      	uxtb	r3, r3
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d106      	bne.n	8012708 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	2200      	movs	r2, #0
 80126fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f7fc fe34 	bl	800f370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2224      	movs	r2, #36	@ 0x24
 801270c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	68da      	ldr	r2, [r3, #12]
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801271e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f000 fe09 	bl	8013338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	691a      	ldr	r2, [r3, #16]
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8012734:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	695a      	ldr	r2, [r3, #20]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8012744:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	68da      	ldr	r2, [r3, #12]
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8012754:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2200      	movs	r2, #0
 801275a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	2220      	movs	r2, #32
 8012760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2220      	movs	r2, #32
 8012768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	2200      	movs	r2, #0
 8012770:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8012772:	2300      	movs	r3, #0
}
 8012774:	4618      	mov	r0, r3
 8012776:	3708      	adds	r7, #8
 8012778:	46bd      	mov	sp, r7
 801277a:	bd80      	pop	{r7, pc}

0801277c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b08a      	sub	sp, #40	@ 0x28
 8012780:	af02      	add	r7, sp, #8
 8012782:	60f8      	str	r0, [r7, #12]
 8012784:	60b9      	str	r1, [r7, #8]
 8012786:	603b      	str	r3, [r7, #0]
 8012788:	4613      	mov	r3, r2
 801278a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801278c:	2300      	movs	r3, #0
 801278e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012796:	b2db      	uxtb	r3, r3
 8012798:	2b20      	cmp	r3, #32
 801279a:	d175      	bne.n	8012888 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d002      	beq.n	80127a8 <HAL_UART_Transmit+0x2c>
 80127a2:	88fb      	ldrh	r3, [r7, #6]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d101      	bne.n	80127ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80127a8:	2301      	movs	r3, #1
 80127aa:	e06e      	b.n	801288a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	2200      	movs	r2, #0
 80127b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	2221      	movs	r2, #33	@ 0x21
 80127b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80127ba:	f7fd fc59 	bl	8010070 <HAL_GetTick>
 80127be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	88fa      	ldrh	r2, [r7, #6]
 80127c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	88fa      	ldrh	r2, [r7, #6]
 80127ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	689b      	ldr	r3, [r3, #8]
 80127d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80127d4:	d108      	bne.n	80127e8 <HAL_UART_Transmit+0x6c>
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	691b      	ldr	r3, [r3, #16]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d104      	bne.n	80127e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80127de:	2300      	movs	r3, #0
 80127e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	61bb      	str	r3, [r7, #24]
 80127e6:	e003      	b.n	80127f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80127e8:	68bb      	ldr	r3, [r7, #8]
 80127ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80127ec:	2300      	movs	r3, #0
 80127ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80127f0:	e02e      	b.n	8012850 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80127f2:	683b      	ldr	r3, [r7, #0]
 80127f4:	9300      	str	r3, [sp, #0]
 80127f6:	697b      	ldr	r3, [r7, #20]
 80127f8:	2200      	movs	r2, #0
 80127fa:	2180      	movs	r1, #128	@ 0x80
 80127fc:	68f8      	ldr	r0, [r7, #12]
 80127fe:	f000 fb6d 	bl	8012edc <UART_WaitOnFlagUntilTimeout>
 8012802:	4603      	mov	r3, r0
 8012804:	2b00      	cmp	r3, #0
 8012806:	d005      	beq.n	8012814 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	2220      	movs	r2, #32
 801280c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8012810:	2303      	movs	r3, #3
 8012812:	e03a      	b.n	801288a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8012814:	69fb      	ldr	r3, [r7, #28]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d10b      	bne.n	8012832 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801281a:	69bb      	ldr	r3, [r7, #24]
 801281c:	881b      	ldrh	r3, [r3, #0]
 801281e:	461a      	mov	r2, r3
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012828:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801282a:	69bb      	ldr	r3, [r7, #24]
 801282c:	3302      	adds	r3, #2
 801282e:	61bb      	str	r3, [r7, #24]
 8012830:	e007      	b.n	8012842 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8012832:	69fb      	ldr	r3, [r7, #28]
 8012834:	781a      	ldrb	r2, [r3, #0]
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801283c:	69fb      	ldr	r3, [r7, #28]
 801283e:	3301      	adds	r3, #1
 8012840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8012846:	b29b      	uxth	r3, r3
 8012848:	3b01      	subs	r3, #1
 801284a:	b29a      	uxth	r2, r3
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8012854:	b29b      	uxth	r3, r3
 8012856:	2b00      	cmp	r3, #0
 8012858:	d1cb      	bne.n	80127f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801285a:	683b      	ldr	r3, [r7, #0]
 801285c:	9300      	str	r3, [sp, #0]
 801285e:	697b      	ldr	r3, [r7, #20]
 8012860:	2200      	movs	r2, #0
 8012862:	2140      	movs	r1, #64	@ 0x40
 8012864:	68f8      	ldr	r0, [r7, #12]
 8012866:	f000 fb39 	bl	8012edc <UART_WaitOnFlagUntilTimeout>
 801286a:	4603      	mov	r3, r0
 801286c:	2b00      	cmp	r3, #0
 801286e:	d005      	beq.n	801287c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	2220      	movs	r2, #32
 8012874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8012878:	2303      	movs	r3, #3
 801287a:	e006      	b.n	801288a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	2220      	movs	r2, #32
 8012880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8012884:	2300      	movs	r3, #0
 8012886:	e000      	b.n	801288a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8012888:	2302      	movs	r3, #2
  }
}
 801288a:	4618      	mov	r0, r3
 801288c:	3720      	adds	r7, #32
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}

08012892 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8012892:	b480      	push	{r7}
 8012894:	b085      	sub	sp, #20
 8012896:	af00      	add	r7, sp, #0
 8012898:	60f8      	str	r0, [r7, #12]
 801289a:	60b9      	str	r1, [r7, #8]
 801289c:	4613      	mov	r3, r2
 801289e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80128a6:	b2db      	uxtb	r3, r3
 80128a8:	2b20      	cmp	r3, #32
 80128aa:	d121      	bne.n	80128f0 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d002      	beq.n	80128b8 <HAL_UART_Transmit_IT+0x26>
 80128b2:	88fb      	ldrh	r3, [r7, #6]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d101      	bne.n	80128bc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80128b8:	2301      	movs	r3, #1
 80128ba:	e01a      	b.n	80128f2 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	68ba      	ldr	r2, [r7, #8]
 80128c0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	88fa      	ldrh	r2, [r7, #6]
 80128c6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	88fa      	ldrh	r2, [r7, #6]
 80128cc:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	2200      	movs	r2, #0
 80128d2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	2221      	movs	r2, #33	@ 0x21
 80128d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	68da      	ldr	r2, [r3, #12]
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80128ea:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80128ec:	2300      	movs	r3, #0
 80128ee:	e000      	b.n	80128f2 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80128f0:	2302      	movs	r3, #2
  }
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	3714      	adds	r7, #20
 80128f6:	46bd      	mov	sp, r7
 80128f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fc:	4770      	bx	lr

080128fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80128fe:	b580      	push	{r7, lr}
 8012900:	b084      	sub	sp, #16
 8012902:	af00      	add	r7, sp, #0
 8012904:	60f8      	str	r0, [r7, #12]
 8012906:	60b9      	str	r1, [r7, #8]
 8012908:	4613      	mov	r3, r2
 801290a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012912:	b2db      	uxtb	r3, r3
 8012914:	2b20      	cmp	r3, #32
 8012916:	d112      	bne.n	801293e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d002      	beq.n	8012924 <HAL_UART_Receive_IT+0x26>
 801291e:	88fb      	ldrh	r3, [r7, #6]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d101      	bne.n	8012928 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8012924:	2301      	movs	r3, #1
 8012926:	e00b      	b.n	8012940 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	2200      	movs	r2, #0
 801292c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 801292e:	88fb      	ldrh	r3, [r7, #6]
 8012930:	461a      	mov	r2, r3
 8012932:	68b9      	ldr	r1, [r7, #8]
 8012934:	68f8      	ldr	r0, [r7, #12]
 8012936:	f000 fb2a 	bl	8012f8e <UART_Start_Receive_IT>
 801293a:	4603      	mov	r3, r0
 801293c:	e000      	b.n	8012940 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 801293e:	2302      	movs	r3, #2
  }
}
 8012940:	4618      	mov	r0, r3
 8012942:	3710      	adds	r7, #16
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b0ba      	sub	sp, #232	@ 0xe8
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	68db      	ldr	r3, [r3, #12]
 8012960:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	695b      	ldr	r3, [r3, #20]
 801296a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 801296e:	2300      	movs	r3, #0
 8012970:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8012974:	2300      	movs	r3, #0
 8012976:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801297a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801297e:	f003 030f 	and.w	r3, r3, #15
 8012982:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8012986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801298a:	2b00      	cmp	r3, #0
 801298c:	d10f      	bne.n	80129ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801298e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012992:	f003 0320 	and.w	r3, r3, #32
 8012996:	2b00      	cmp	r3, #0
 8012998:	d009      	beq.n	80129ae <HAL_UART_IRQHandler+0x66>
 801299a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801299e:	f003 0320 	and.w	r3, r3, #32
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d003      	beq.n	80129ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f000 fc07 	bl	80131ba <UART_Receive_IT>
      return;
 80129ac:	e273      	b.n	8012e96 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80129ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	f000 80de 	beq.w	8012b74 <HAL_UART_IRQHandler+0x22c>
 80129b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80129bc:	f003 0301 	and.w	r3, r3, #1
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d106      	bne.n	80129d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80129c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80129c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	f000 80d1 	beq.w	8012b74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80129d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80129d6:	f003 0301 	and.w	r3, r3, #1
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d00b      	beq.n	80129f6 <HAL_UART_IRQHandler+0xae>
 80129de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80129e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d005      	beq.n	80129f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129ee:	f043 0201 	orr.w	r2, r3, #1
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80129f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80129fa:	f003 0304 	and.w	r3, r3, #4
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d00b      	beq.n	8012a1a <HAL_UART_IRQHandler+0xd2>
 8012a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012a06:	f003 0301 	and.w	r3, r3, #1
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d005      	beq.n	8012a1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a12:	f043 0202 	orr.w	r2, r3, #2
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a1e:	f003 0302 	and.w	r3, r3, #2
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d00b      	beq.n	8012a3e <HAL_UART_IRQHandler+0xf6>
 8012a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012a2a:	f003 0301 	and.w	r3, r3, #1
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d005      	beq.n	8012a3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a36:	f043 0204 	orr.w	r2, r3, #4
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8012a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a42:	f003 0308 	and.w	r3, r3, #8
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d011      	beq.n	8012a6e <HAL_UART_IRQHandler+0x126>
 8012a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012a4e:	f003 0320 	and.w	r3, r3, #32
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d105      	bne.n	8012a62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8012a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012a5a:	f003 0301 	and.w	r3, r3, #1
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d005      	beq.n	8012a6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a66:	f043 0208 	orr.w	r2, r3, #8
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	f000 820a 	beq.w	8012e8c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a7c:	f003 0320 	and.w	r3, r3, #32
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d008      	beq.n	8012a96 <HAL_UART_IRQHandler+0x14e>
 8012a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012a88:	f003 0320 	and.w	r3, r3, #32
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d002      	beq.n	8012a96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f000 fb92 	bl	80131ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	695b      	ldr	r3, [r3, #20]
 8012a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012aa0:	2b40      	cmp	r3, #64	@ 0x40
 8012aa2:	bf0c      	ite	eq
 8012aa4:	2301      	moveq	r3, #1
 8012aa6:	2300      	movne	r3, #0
 8012aa8:	b2db      	uxtb	r3, r3
 8012aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ab2:	f003 0308 	and.w	r3, r3, #8
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d103      	bne.n	8012ac2 <HAL_UART_IRQHandler+0x17a>
 8012aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d04f      	beq.n	8012b62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	f000 fa9d 	bl	8013002 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	695b      	ldr	r3, [r3, #20]
 8012ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ad2:	2b40      	cmp	r3, #64	@ 0x40
 8012ad4:	d141      	bne.n	8012b5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	3314      	adds	r3, #20
 8012adc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012ae4:	e853 3f00 	ldrex	r3, [r3]
 8012ae8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8012aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012af0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012af4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	3314      	adds	r3, #20
 8012afe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8012b02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8012b06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8012b0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012b12:	e841 2300 	strex	r3, r2, [r1]
 8012b16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8012b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d1d9      	bne.n	8012ad6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d013      	beq.n	8012b52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b2e:	4a8a      	ldr	r2, [pc, #552]	@ (8012d58 <HAL_UART_IRQHandler+0x410>)
 8012b30:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b36:	4618      	mov	r0, r3
 8012b38:	f7fd fc1c 	bl	8010374 <HAL_DMA_Abort_IT>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d016      	beq.n	8012b70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b48:	687a      	ldr	r2, [r7, #4]
 8012b4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8012b4c:	4610      	mov	r0, r2
 8012b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b50:	e00e      	b.n	8012b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012b52:	6878      	ldr	r0, [r7, #4]
 8012b54:	f000 f9ac 	bl	8012eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b58:	e00a      	b.n	8012b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012b5a:	6878      	ldr	r0, [r7, #4]
 8012b5c:	f000 f9a8 	bl	8012eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b60:	e006      	b.n	8012b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f000 f9a4 	bl	8012eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8012b6e:	e18d      	b.n	8012e8c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b70:	bf00      	nop
    return;
 8012b72:	e18b      	b.n	8012e8c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b78:	2b01      	cmp	r3, #1
 8012b7a:	f040 8167 	bne.w	8012e4c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8012b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012b82:	f003 0310 	and.w	r3, r3, #16
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	f000 8160 	beq.w	8012e4c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8012b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012b90:	f003 0310 	and.w	r3, r3, #16
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	f000 8159 	beq.w	8012e4c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	60bb      	str	r3, [r7, #8]
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	60bb      	str	r3, [r7, #8]
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	685b      	ldr	r3, [r3, #4]
 8012bac:	60bb      	str	r3, [r7, #8]
 8012bae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	695b      	ldr	r3, [r3, #20]
 8012bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012bba:	2b40      	cmp	r3, #64	@ 0x40
 8012bbc:	f040 80ce 	bne.w	8012d5c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	685b      	ldr	r3, [r3, #4]
 8012bc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012bcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	f000 80a9 	beq.w	8012d28 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012bde:	429a      	cmp	r2, r3
 8012be0:	f080 80a2 	bcs.w	8012d28 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012bea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012bf0:	69db      	ldr	r3, [r3, #28]
 8012bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012bf6:	f000 8088 	beq.w	8012d0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	330c      	adds	r3, #12
 8012c00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012c08:	e853 3f00 	ldrex	r3, [r3]
 8012c0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8012c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012c18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	330c      	adds	r3, #12
 8012c22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8012c26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8012c2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8012c32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012c36:	e841 2300 	strex	r3, r2, [r1]
 8012c3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8012c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d1d9      	bne.n	8012bfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	3314      	adds	r3, #20
 8012c4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012c50:	e853 3f00 	ldrex	r3, [r3]
 8012c54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8012c56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012c58:	f023 0301 	bic.w	r3, r3, #1
 8012c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	3314      	adds	r3, #20
 8012c66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012c6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8012c72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012c76:	e841 2300 	strex	r3, r2, [r1]
 8012c7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012c7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d1e1      	bne.n	8012c46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	3314      	adds	r3, #20
 8012c88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012c8c:	e853 3f00 	ldrex	r3, [r3]
 8012c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8012c92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012c94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012c98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	3314      	adds	r3, #20
 8012ca2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8012ca6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012ca8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012caa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012cac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012cae:	e841 2300 	strex	r3, r2, [r1]
 8012cb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8012cb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d1e3      	bne.n	8012c82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2220      	movs	r2, #32
 8012cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	330c      	adds	r3, #12
 8012cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cd2:	e853 3f00 	ldrex	r3, [r3]
 8012cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8012cd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012cda:	f023 0310 	bic.w	r3, r3, #16
 8012cde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	330c      	adds	r3, #12
 8012ce8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012cec:	65ba      	str	r2, [r7, #88]	@ 0x58
 8012cee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cf0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012cf2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012cf4:	e841 2300 	strex	r3, r2, [r1]
 8012cf8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d1e3      	bne.n	8012cc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7fd fac5 	bl	8010294 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	2202      	movs	r2, #2
 8012d0e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8012d18:	b29b      	uxth	r3, r3
 8012d1a:	1ad3      	subs	r3, r2, r3
 8012d1c:	b29b      	uxth	r3, r3
 8012d1e:	4619      	mov	r1, r3
 8012d20:	6878      	ldr	r0, [r7, #4]
 8012d22:	f000 f8cf 	bl	8012ec4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8012d26:	e0b3      	b.n	8012e90 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012d2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012d30:	429a      	cmp	r2, r3
 8012d32:	f040 80ad 	bne.w	8012e90 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d3a:	69db      	ldr	r3, [r3, #28]
 8012d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012d40:	f040 80a6 	bne.w	8012e90 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2202      	movs	r2, #2
 8012d48:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012d4e:	4619      	mov	r1, r3
 8012d50:	6878      	ldr	r0, [r7, #4]
 8012d52:	f000 f8b7 	bl	8012ec4 <HAL_UARTEx_RxEventCallback>
      return;
 8012d56:	e09b      	b.n	8012e90 <HAL_UART_IRQHandler+0x548>
 8012d58:	080130c9 	.word	0x080130c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8012d64:	b29b      	uxth	r3, r3
 8012d66:	1ad3      	subs	r3, r2, r3
 8012d68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8012d70:	b29b      	uxth	r3, r3
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	f000 808e 	beq.w	8012e94 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8012d78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	f000 8089 	beq.w	8012e94 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	330c      	adds	r3, #12
 8012d88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d8c:	e853 3f00 	ldrex	r3, [r3]
 8012d90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012d98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	330c      	adds	r3, #12
 8012da2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8012da6:	647a      	str	r2, [r7, #68]	@ 0x44
 8012da8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012daa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012dac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012dae:	e841 2300 	strex	r3, r2, [r1]
 8012db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d1e3      	bne.n	8012d82 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	3314      	adds	r3, #20
 8012dc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dc4:	e853 3f00 	ldrex	r3, [r3]
 8012dc8:	623b      	str	r3, [r7, #32]
   return(result);
 8012dca:	6a3b      	ldr	r3, [r7, #32]
 8012dcc:	f023 0301 	bic.w	r3, r3, #1
 8012dd0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	3314      	adds	r3, #20
 8012dda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012dde:	633a      	str	r2, [r7, #48]	@ 0x30
 8012de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012de2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012de4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012de6:	e841 2300 	strex	r3, r2, [r1]
 8012dea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d1e3      	bne.n	8012dba <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	2220      	movs	r2, #32
 8012df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	330c      	adds	r3, #12
 8012e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e08:	693b      	ldr	r3, [r7, #16]
 8012e0a:	e853 3f00 	ldrex	r3, [r3]
 8012e0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	f023 0310 	bic.w	r3, r3, #16
 8012e16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	330c      	adds	r3, #12
 8012e20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8012e24:	61fa      	str	r2, [r7, #28]
 8012e26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e28:	69b9      	ldr	r1, [r7, #24]
 8012e2a:	69fa      	ldr	r2, [r7, #28]
 8012e2c:	e841 2300 	strex	r3, r2, [r1]
 8012e30:	617b      	str	r3, [r7, #20]
   return(result);
 8012e32:	697b      	ldr	r3, [r7, #20]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d1e3      	bne.n	8012e00 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	2202      	movs	r2, #2
 8012e3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012e3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8012e42:	4619      	mov	r1, r3
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	f000 f83d 	bl	8012ec4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8012e4a:	e023      	b.n	8012e94 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8012e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d009      	beq.n	8012e6c <HAL_UART_IRQHandler+0x524>
 8012e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d003      	beq.n	8012e6c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f000 f940 	bl	80130ea <UART_Transmit_IT>
    return;
 8012e6a:	e014      	b.n	8012e96 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8012e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d00e      	beq.n	8012e96 <HAL_UART_IRQHandler+0x54e>
 8012e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d008      	beq.n	8012e96 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f000 f980 	bl	801318a <UART_EndTransmit_IT>
    return;
 8012e8a:	e004      	b.n	8012e96 <HAL_UART_IRQHandler+0x54e>
    return;
 8012e8c:	bf00      	nop
 8012e8e:	e002      	b.n	8012e96 <HAL_UART_IRQHandler+0x54e>
      return;
 8012e90:	bf00      	nop
 8012e92:	e000      	b.n	8012e96 <HAL_UART_IRQHandler+0x54e>
      return;
 8012e94:	bf00      	nop
  }
}
 8012e96:	37e8      	adds	r7, #232	@ 0xe8
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	bd80      	pop	{r7, pc}

08012e9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012e9c:	b480      	push	{r7}
 8012e9e:	b083      	sub	sp, #12
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8012ea4:	bf00      	nop
 8012ea6:	370c      	adds	r7, #12
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eae:	4770      	bx	lr

08012eb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012eb0:	b480      	push	{r7}
 8012eb2:	b083      	sub	sp, #12
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8012eb8:	bf00      	nop
 8012eba:	370c      	adds	r7, #12
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec2:	4770      	bx	lr

08012ec4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012ec4:	b480      	push	{r7}
 8012ec6:	b083      	sub	sp, #12
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
 8012ecc:	460b      	mov	r3, r1
 8012ece:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012ed0:	bf00      	nop
 8012ed2:	370c      	adds	r7, #12
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eda:	4770      	bx	lr

08012edc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b086      	sub	sp, #24
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	60f8      	str	r0, [r7, #12]
 8012ee4:	60b9      	str	r1, [r7, #8]
 8012ee6:	603b      	str	r3, [r7, #0]
 8012ee8:	4613      	mov	r3, r2
 8012eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012eec:	e03b      	b.n	8012f66 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012eee:	6a3b      	ldr	r3, [r7, #32]
 8012ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ef4:	d037      	beq.n	8012f66 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012ef6:	f7fd f8bb 	bl	8010070 <HAL_GetTick>
 8012efa:	4602      	mov	r2, r0
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	1ad3      	subs	r3, r2, r3
 8012f00:	6a3a      	ldr	r2, [r7, #32]
 8012f02:	429a      	cmp	r2, r3
 8012f04:	d302      	bcc.n	8012f0c <UART_WaitOnFlagUntilTimeout+0x30>
 8012f06:	6a3b      	ldr	r3, [r7, #32]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d101      	bne.n	8012f10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012f0c:	2303      	movs	r3, #3
 8012f0e:	e03a      	b.n	8012f86 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	68db      	ldr	r3, [r3, #12]
 8012f16:	f003 0304 	and.w	r3, r3, #4
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d023      	beq.n	8012f66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8012f1e:	68bb      	ldr	r3, [r7, #8]
 8012f20:	2b80      	cmp	r3, #128	@ 0x80
 8012f22:	d020      	beq.n	8012f66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	2b40      	cmp	r3, #64	@ 0x40
 8012f28:	d01d      	beq.n	8012f66 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	f003 0308 	and.w	r3, r3, #8
 8012f34:	2b08      	cmp	r3, #8
 8012f36:	d116      	bne.n	8012f66 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8012f38:	2300      	movs	r3, #0
 8012f3a:	617b      	str	r3, [r7, #20]
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	617b      	str	r3, [r7, #20]
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	685b      	ldr	r3, [r3, #4]
 8012f4a:	617b      	str	r3, [r7, #20]
 8012f4c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012f4e:	68f8      	ldr	r0, [r7, #12]
 8012f50:	f000 f857 	bl	8013002 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	2208      	movs	r2, #8
 8012f58:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8012f62:	2301      	movs	r3, #1
 8012f64:	e00f      	b.n	8012f86 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	681a      	ldr	r2, [r3, #0]
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	4013      	ands	r3, r2
 8012f70:	68ba      	ldr	r2, [r7, #8]
 8012f72:	429a      	cmp	r2, r3
 8012f74:	bf0c      	ite	eq
 8012f76:	2301      	moveq	r3, #1
 8012f78:	2300      	movne	r3, #0
 8012f7a:	b2db      	uxtb	r3, r3
 8012f7c:	461a      	mov	r2, r3
 8012f7e:	79fb      	ldrb	r3, [r7, #7]
 8012f80:	429a      	cmp	r2, r3
 8012f82:	d0b4      	beq.n	8012eee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012f84:	2300      	movs	r3, #0
}
 8012f86:	4618      	mov	r0, r3
 8012f88:	3718      	adds	r7, #24
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	bd80      	pop	{r7, pc}

08012f8e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012f8e:	b480      	push	{r7}
 8012f90:	b085      	sub	sp, #20
 8012f92:	af00      	add	r7, sp, #0
 8012f94:	60f8      	str	r0, [r7, #12]
 8012f96:	60b9      	str	r1, [r7, #8]
 8012f98:	4613      	mov	r3, r2
 8012f9a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	68ba      	ldr	r2, [r7, #8]
 8012fa0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	88fa      	ldrh	r2, [r7, #6]
 8012fa6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	88fa      	ldrh	r2, [r7, #6]
 8012fac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	2222      	movs	r2, #34	@ 0x22
 8012fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	691b      	ldr	r3, [r3, #16]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d007      	beq.n	8012fd4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	68da      	ldr	r2, [r3, #12]
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012fd2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	695a      	ldr	r2, [r3, #20]
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	f042 0201 	orr.w	r2, r2, #1
 8012fe2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	68da      	ldr	r2, [r3, #12]
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	f042 0220 	orr.w	r2, r2, #32
 8012ff2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012ff4:	2300      	movs	r3, #0
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3714      	adds	r7, #20
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013000:	4770      	bx	lr

08013002 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013002:	b480      	push	{r7}
 8013004:	b095      	sub	sp, #84	@ 0x54
 8013006:	af00      	add	r7, sp, #0
 8013008:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	330c      	adds	r3, #12
 8013010:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013014:	e853 3f00 	ldrex	r3, [r3]
 8013018:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801301a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801301c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013020:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	330c      	adds	r3, #12
 8013028:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801302a:	643a      	str	r2, [r7, #64]	@ 0x40
 801302c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801302e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013030:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013032:	e841 2300 	strex	r3, r2, [r1]
 8013036:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801303a:	2b00      	cmp	r3, #0
 801303c:	d1e5      	bne.n	801300a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	3314      	adds	r3, #20
 8013044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013046:	6a3b      	ldr	r3, [r7, #32]
 8013048:	e853 3f00 	ldrex	r3, [r3]
 801304c:	61fb      	str	r3, [r7, #28]
   return(result);
 801304e:	69fb      	ldr	r3, [r7, #28]
 8013050:	f023 0301 	bic.w	r3, r3, #1
 8013054:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	3314      	adds	r3, #20
 801305c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801305e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013060:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013062:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013064:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013066:	e841 2300 	strex	r3, r2, [r1]
 801306a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801306c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801306e:	2b00      	cmp	r3, #0
 8013070:	d1e5      	bne.n	801303e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013076:	2b01      	cmp	r3, #1
 8013078:	d119      	bne.n	80130ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	330c      	adds	r3, #12
 8013080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	e853 3f00 	ldrex	r3, [r3]
 8013088:	60bb      	str	r3, [r7, #8]
   return(result);
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	f023 0310 	bic.w	r3, r3, #16
 8013090:	647b      	str	r3, [r7, #68]	@ 0x44
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	330c      	adds	r3, #12
 8013098:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801309a:	61ba      	str	r2, [r7, #24]
 801309c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801309e:	6979      	ldr	r1, [r7, #20]
 80130a0:	69ba      	ldr	r2, [r7, #24]
 80130a2:	e841 2300 	strex	r3, r2, [r1]
 80130a6:	613b      	str	r3, [r7, #16]
   return(result);
 80130a8:	693b      	ldr	r3, [r7, #16]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d1e5      	bne.n	801307a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	2220      	movs	r2, #32
 80130b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	2200      	movs	r2, #0
 80130ba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80130bc:	bf00      	nop
 80130be:	3754      	adds	r7, #84	@ 0x54
 80130c0:	46bd      	mov	sp, r7
 80130c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c6:	4770      	bx	lr

080130c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b084      	sub	sp, #16
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	2200      	movs	r2, #0
 80130da:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80130dc:	68f8      	ldr	r0, [r7, #12]
 80130de:	f7ff fee7 	bl	8012eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80130e2:	bf00      	nop
 80130e4:	3710      	adds	r7, #16
 80130e6:	46bd      	mov	sp, r7
 80130e8:	bd80      	pop	{r7, pc}

080130ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80130ea:	b480      	push	{r7}
 80130ec:	b085      	sub	sp, #20
 80130ee:	af00      	add	r7, sp, #0
 80130f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80130f8:	b2db      	uxtb	r3, r3
 80130fa:	2b21      	cmp	r3, #33	@ 0x21
 80130fc:	d13e      	bne.n	801317c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	689b      	ldr	r3, [r3, #8]
 8013102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013106:	d114      	bne.n	8013132 <UART_Transmit_IT+0x48>
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	691b      	ldr	r3, [r3, #16]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d110      	bne.n	8013132 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	6a1b      	ldr	r3, [r3, #32]
 8013114:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	881b      	ldrh	r3, [r3, #0]
 801311a:	461a      	mov	r2, r3
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013124:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	6a1b      	ldr	r3, [r3, #32]
 801312a:	1c9a      	adds	r2, r3, #2
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	621a      	str	r2, [r3, #32]
 8013130:	e008      	b.n	8013144 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	6a1b      	ldr	r3, [r3, #32]
 8013136:	1c59      	adds	r1, r3, #1
 8013138:	687a      	ldr	r2, [r7, #4]
 801313a:	6211      	str	r1, [r2, #32]
 801313c:	781a      	ldrb	r2, [r3, #0]
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8013148:	b29b      	uxth	r3, r3
 801314a:	3b01      	subs	r3, #1
 801314c:	b29b      	uxth	r3, r3
 801314e:	687a      	ldr	r2, [r7, #4]
 8013150:	4619      	mov	r1, r3
 8013152:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8013154:	2b00      	cmp	r3, #0
 8013156:	d10f      	bne.n	8013178 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	68da      	ldr	r2, [r3, #12]
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8013166:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	68da      	ldr	r2, [r3, #12]
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013176:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8013178:	2300      	movs	r3, #0
 801317a:	e000      	b.n	801317e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801317c:	2302      	movs	r3, #2
  }
}
 801317e:	4618      	mov	r0, r3
 8013180:	3714      	adds	r7, #20
 8013182:	46bd      	mov	sp, r7
 8013184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013188:	4770      	bx	lr

0801318a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801318a:	b580      	push	{r7, lr}
 801318c:	b082      	sub	sp, #8
 801318e:	af00      	add	r7, sp, #0
 8013190:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	68da      	ldr	r2, [r3, #12]
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80131a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	2220      	movs	r2, #32
 80131a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80131aa:	6878      	ldr	r0, [r7, #4]
 80131ac:	f7ff fe76 	bl	8012e9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80131b0:	2300      	movs	r3, #0
}
 80131b2:	4618      	mov	r0, r3
 80131b4:	3708      	adds	r7, #8
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}

080131ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80131ba:	b580      	push	{r7, lr}
 80131bc:	b08c      	sub	sp, #48	@ 0x30
 80131be:	af00      	add	r7, sp, #0
 80131c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80131c2:	2300      	movs	r3, #0
 80131c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80131c6:	2300      	movs	r3, #0
 80131c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80131d0:	b2db      	uxtb	r3, r3
 80131d2:	2b22      	cmp	r3, #34	@ 0x22
 80131d4:	f040 80aa 	bne.w	801332c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	689b      	ldr	r3, [r3, #8]
 80131dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80131e0:	d115      	bne.n	801320e <UART_Receive_IT+0x54>
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	691b      	ldr	r3, [r3, #16]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d111      	bne.n	801320e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	685b      	ldr	r3, [r3, #4]
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131fc:	b29a      	uxth	r2, r3
 80131fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013200:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013206:	1c9a      	adds	r2, r3, #2
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	629a      	str	r2, [r3, #40]	@ 0x28
 801320c:	e024      	b.n	8013258 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013212:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	689b      	ldr	r3, [r3, #8]
 8013218:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801321c:	d007      	beq.n	801322e <UART_Receive_IT+0x74>
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	689b      	ldr	r3, [r3, #8]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d10a      	bne.n	801323c <UART_Receive_IT+0x82>
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	691b      	ldr	r3, [r3, #16]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d106      	bne.n	801323c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	685b      	ldr	r3, [r3, #4]
 8013234:	b2da      	uxtb	r2, r3
 8013236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013238:	701a      	strb	r2, [r3, #0]
 801323a:	e008      	b.n	801324e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	685b      	ldr	r3, [r3, #4]
 8013242:	b2db      	uxtb	r3, r3
 8013244:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013248:	b2da      	uxtb	r2, r3
 801324a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801324c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013252:	1c5a      	adds	r2, r3, #1
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801325c:	b29b      	uxth	r3, r3
 801325e:	3b01      	subs	r3, #1
 8013260:	b29b      	uxth	r3, r3
 8013262:	687a      	ldr	r2, [r7, #4]
 8013264:	4619      	mov	r1, r3
 8013266:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8013268:	2b00      	cmp	r3, #0
 801326a:	d15d      	bne.n	8013328 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	68da      	ldr	r2, [r3, #12]
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	f022 0220 	bic.w	r2, r2, #32
 801327a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	68da      	ldr	r2, [r3, #12]
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801328a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	695a      	ldr	r2, [r3, #20]
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	f022 0201 	bic.w	r2, r2, #1
 801329a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	2220      	movs	r2, #32
 80132a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2200      	movs	r2, #0
 80132a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80132ae:	2b01      	cmp	r3, #1
 80132b0:	d135      	bne.n	801331e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	2200      	movs	r2, #0
 80132b6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	330c      	adds	r3, #12
 80132be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132c0:	697b      	ldr	r3, [r7, #20]
 80132c2:	e853 3f00 	ldrex	r3, [r3]
 80132c6:	613b      	str	r3, [r7, #16]
   return(result);
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	f023 0310 	bic.w	r3, r3, #16
 80132ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	330c      	adds	r3, #12
 80132d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80132d8:	623a      	str	r2, [r7, #32]
 80132da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132dc:	69f9      	ldr	r1, [r7, #28]
 80132de:	6a3a      	ldr	r2, [r7, #32]
 80132e0:	e841 2300 	strex	r3, r2, [r1]
 80132e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80132e6:	69bb      	ldr	r3, [r7, #24]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d1e5      	bne.n	80132b8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	f003 0310 	and.w	r3, r3, #16
 80132f6:	2b10      	cmp	r3, #16
 80132f8:	d10a      	bne.n	8013310 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80132fa:	2300      	movs	r3, #0
 80132fc:	60fb      	str	r3, [r7, #12]
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	60fb      	str	r3, [r7, #12]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	685b      	ldr	r3, [r3, #4]
 801330c:	60fb      	str	r3, [r7, #12]
 801330e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013314:	4619      	mov	r1, r3
 8013316:	6878      	ldr	r0, [r7, #4]
 8013318:	f7ff fdd4 	bl	8012ec4 <HAL_UARTEx_RxEventCallback>
 801331c:	e002      	b.n	8013324 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801331e:	6878      	ldr	r0, [r7, #4]
 8013320:	f7fc fc9a 	bl	800fc58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8013324:	2300      	movs	r3, #0
 8013326:	e002      	b.n	801332e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8013328:	2300      	movs	r3, #0
 801332a:	e000      	b.n	801332e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 801332c:	2302      	movs	r3, #2
  }
}
 801332e:	4618      	mov	r0, r3
 8013330:	3730      	adds	r7, #48	@ 0x30
 8013332:	46bd      	mov	sp, r7
 8013334:	bd80      	pop	{r7, pc}
	...

08013338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801333c:	b0c0      	sub	sp, #256	@ 0x100
 801333e:	af00      	add	r7, sp, #0
 8013340:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	691b      	ldr	r3, [r3, #16]
 801334c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8013350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013354:	68d9      	ldr	r1, [r3, #12]
 8013356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801335a:	681a      	ldr	r2, [r3, #0]
 801335c:	ea40 0301 	orr.w	r3, r0, r1
 8013360:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8013362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013366:	689a      	ldr	r2, [r3, #8]
 8013368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801336c:	691b      	ldr	r3, [r3, #16]
 801336e:	431a      	orrs	r2, r3
 8013370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013374:	695b      	ldr	r3, [r3, #20]
 8013376:	431a      	orrs	r2, r3
 8013378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801337c:	69db      	ldr	r3, [r3, #28]
 801337e:	4313      	orrs	r3, r2
 8013380:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8013384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	68db      	ldr	r3, [r3, #12]
 801338c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8013390:	f021 010c 	bic.w	r1, r1, #12
 8013394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013398:	681a      	ldr	r2, [r3, #0]
 801339a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801339e:	430b      	orrs	r3, r1
 80133a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80133a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	695b      	ldr	r3, [r3, #20]
 80133aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80133ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80133b2:	6999      	ldr	r1, [r3, #24]
 80133b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80133b8:	681a      	ldr	r2, [r3, #0]
 80133ba:	ea40 0301 	orr.w	r3, r0, r1
 80133be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80133c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80133c4:	681a      	ldr	r2, [r3, #0]
 80133c6:	4b8f      	ldr	r3, [pc, #572]	@ (8013604 <UART_SetConfig+0x2cc>)
 80133c8:	429a      	cmp	r2, r3
 80133ca:	d005      	beq.n	80133d8 <UART_SetConfig+0xa0>
 80133cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80133d0:	681a      	ldr	r2, [r3, #0]
 80133d2:	4b8d      	ldr	r3, [pc, #564]	@ (8013608 <UART_SetConfig+0x2d0>)
 80133d4:	429a      	cmp	r2, r3
 80133d6:	d104      	bne.n	80133e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80133d8:	f7fd fb3c 	bl	8010a54 <HAL_RCC_GetPCLK2Freq>
 80133dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80133e0:	e003      	b.n	80133ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80133e2:	f7fd fb23 	bl	8010a2c <HAL_RCC_GetPCLK1Freq>
 80133e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80133ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80133ee:	69db      	ldr	r3, [r3, #28]
 80133f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80133f4:	f040 810c 	bne.w	8013610 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80133f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80133fc:	2200      	movs	r2, #0
 80133fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8013402:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8013406:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 801340a:	4622      	mov	r2, r4
 801340c:	462b      	mov	r3, r5
 801340e:	1891      	adds	r1, r2, r2
 8013410:	65b9      	str	r1, [r7, #88]	@ 0x58
 8013412:	415b      	adcs	r3, r3
 8013414:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013416:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801341a:	4621      	mov	r1, r4
 801341c:	eb12 0801 	adds.w	r8, r2, r1
 8013420:	4629      	mov	r1, r5
 8013422:	eb43 0901 	adc.w	r9, r3, r1
 8013426:	f04f 0200 	mov.w	r2, #0
 801342a:	f04f 0300 	mov.w	r3, #0
 801342e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8013432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8013436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801343a:	4690      	mov	r8, r2
 801343c:	4699      	mov	r9, r3
 801343e:	4623      	mov	r3, r4
 8013440:	eb18 0303 	adds.w	r3, r8, r3
 8013444:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8013448:	462b      	mov	r3, r5
 801344a:	eb49 0303 	adc.w	r3, r9, r3
 801344e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8013452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013456:	685b      	ldr	r3, [r3, #4]
 8013458:	2200      	movs	r2, #0
 801345a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801345e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8013462:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8013466:	460b      	mov	r3, r1
 8013468:	18db      	adds	r3, r3, r3
 801346a:	653b      	str	r3, [r7, #80]	@ 0x50
 801346c:	4613      	mov	r3, r2
 801346e:	eb42 0303 	adc.w	r3, r2, r3
 8013472:	657b      	str	r3, [r7, #84]	@ 0x54
 8013474:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8013478:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 801347c:	f7f5 fbe4 	bl	8008c48 <__aeabi_uldivmod>
 8013480:	4602      	mov	r2, r0
 8013482:	460b      	mov	r3, r1
 8013484:	4b61      	ldr	r3, [pc, #388]	@ (801360c <UART_SetConfig+0x2d4>)
 8013486:	fba3 2302 	umull	r2, r3, r3, r2
 801348a:	095b      	lsrs	r3, r3, #5
 801348c:	011c      	lsls	r4, r3, #4
 801348e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8013492:	2200      	movs	r2, #0
 8013494:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8013498:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 801349c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80134a0:	4642      	mov	r2, r8
 80134a2:	464b      	mov	r3, r9
 80134a4:	1891      	adds	r1, r2, r2
 80134a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80134a8:	415b      	adcs	r3, r3
 80134aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80134ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80134b0:	4641      	mov	r1, r8
 80134b2:	eb12 0a01 	adds.w	sl, r2, r1
 80134b6:	4649      	mov	r1, r9
 80134b8:	eb43 0b01 	adc.w	fp, r3, r1
 80134bc:	f04f 0200 	mov.w	r2, #0
 80134c0:	f04f 0300 	mov.w	r3, #0
 80134c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80134c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80134cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80134d0:	4692      	mov	sl, r2
 80134d2:	469b      	mov	fp, r3
 80134d4:	4643      	mov	r3, r8
 80134d6:	eb1a 0303 	adds.w	r3, sl, r3
 80134da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80134de:	464b      	mov	r3, r9
 80134e0:	eb4b 0303 	adc.w	r3, fp, r3
 80134e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80134e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80134ec:	685b      	ldr	r3, [r3, #4]
 80134ee:	2200      	movs	r2, #0
 80134f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80134f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80134f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80134fc:	460b      	mov	r3, r1
 80134fe:	18db      	adds	r3, r3, r3
 8013500:	643b      	str	r3, [r7, #64]	@ 0x40
 8013502:	4613      	mov	r3, r2
 8013504:	eb42 0303 	adc.w	r3, r2, r3
 8013508:	647b      	str	r3, [r7, #68]	@ 0x44
 801350a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801350e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8013512:	f7f5 fb99 	bl	8008c48 <__aeabi_uldivmod>
 8013516:	4602      	mov	r2, r0
 8013518:	460b      	mov	r3, r1
 801351a:	4611      	mov	r1, r2
 801351c:	4b3b      	ldr	r3, [pc, #236]	@ (801360c <UART_SetConfig+0x2d4>)
 801351e:	fba3 2301 	umull	r2, r3, r3, r1
 8013522:	095b      	lsrs	r3, r3, #5
 8013524:	2264      	movs	r2, #100	@ 0x64
 8013526:	fb02 f303 	mul.w	r3, r2, r3
 801352a:	1acb      	subs	r3, r1, r3
 801352c:	00db      	lsls	r3, r3, #3
 801352e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8013532:	4b36      	ldr	r3, [pc, #216]	@ (801360c <UART_SetConfig+0x2d4>)
 8013534:	fba3 2302 	umull	r2, r3, r3, r2
 8013538:	095b      	lsrs	r3, r3, #5
 801353a:	005b      	lsls	r3, r3, #1
 801353c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8013540:	441c      	add	r4, r3
 8013542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8013546:	2200      	movs	r2, #0
 8013548:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801354c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8013550:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8013554:	4642      	mov	r2, r8
 8013556:	464b      	mov	r3, r9
 8013558:	1891      	adds	r1, r2, r2
 801355a:	63b9      	str	r1, [r7, #56]	@ 0x38
 801355c:	415b      	adcs	r3, r3
 801355e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013560:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8013564:	4641      	mov	r1, r8
 8013566:	1851      	adds	r1, r2, r1
 8013568:	6339      	str	r1, [r7, #48]	@ 0x30
 801356a:	4649      	mov	r1, r9
 801356c:	414b      	adcs	r3, r1
 801356e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013570:	f04f 0200 	mov.w	r2, #0
 8013574:	f04f 0300 	mov.w	r3, #0
 8013578:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 801357c:	4659      	mov	r1, fp
 801357e:	00cb      	lsls	r3, r1, #3
 8013580:	4651      	mov	r1, sl
 8013582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013586:	4651      	mov	r1, sl
 8013588:	00ca      	lsls	r2, r1, #3
 801358a:	4610      	mov	r0, r2
 801358c:	4619      	mov	r1, r3
 801358e:	4603      	mov	r3, r0
 8013590:	4642      	mov	r2, r8
 8013592:	189b      	adds	r3, r3, r2
 8013594:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8013598:	464b      	mov	r3, r9
 801359a:	460a      	mov	r2, r1
 801359c:	eb42 0303 	adc.w	r3, r2, r3
 80135a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80135a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80135a8:	685b      	ldr	r3, [r3, #4]
 80135aa:	2200      	movs	r2, #0
 80135ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80135b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80135b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80135b8:	460b      	mov	r3, r1
 80135ba:	18db      	adds	r3, r3, r3
 80135bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80135be:	4613      	mov	r3, r2
 80135c0:	eb42 0303 	adc.w	r3, r2, r3
 80135c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80135c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80135ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80135ce:	f7f5 fb3b 	bl	8008c48 <__aeabi_uldivmod>
 80135d2:	4602      	mov	r2, r0
 80135d4:	460b      	mov	r3, r1
 80135d6:	4b0d      	ldr	r3, [pc, #52]	@ (801360c <UART_SetConfig+0x2d4>)
 80135d8:	fba3 1302 	umull	r1, r3, r3, r2
 80135dc:	095b      	lsrs	r3, r3, #5
 80135de:	2164      	movs	r1, #100	@ 0x64
 80135e0:	fb01 f303 	mul.w	r3, r1, r3
 80135e4:	1ad3      	subs	r3, r2, r3
 80135e6:	00db      	lsls	r3, r3, #3
 80135e8:	3332      	adds	r3, #50	@ 0x32
 80135ea:	4a08      	ldr	r2, [pc, #32]	@ (801360c <UART_SetConfig+0x2d4>)
 80135ec:	fba2 2303 	umull	r2, r3, r2, r3
 80135f0:	095b      	lsrs	r3, r3, #5
 80135f2:	f003 0207 	and.w	r2, r3, #7
 80135f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	4422      	add	r2, r4
 80135fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8013600:	e106      	b.n	8013810 <UART_SetConfig+0x4d8>
 8013602:	bf00      	nop
 8013604:	40011000 	.word	0x40011000
 8013608:	40011400 	.word	0x40011400
 801360c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8013614:	2200      	movs	r2, #0
 8013616:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801361a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801361e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8013622:	4642      	mov	r2, r8
 8013624:	464b      	mov	r3, r9
 8013626:	1891      	adds	r1, r2, r2
 8013628:	6239      	str	r1, [r7, #32]
 801362a:	415b      	adcs	r3, r3
 801362c:	627b      	str	r3, [r7, #36]	@ 0x24
 801362e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8013632:	4641      	mov	r1, r8
 8013634:	1854      	adds	r4, r2, r1
 8013636:	4649      	mov	r1, r9
 8013638:	eb43 0501 	adc.w	r5, r3, r1
 801363c:	f04f 0200 	mov.w	r2, #0
 8013640:	f04f 0300 	mov.w	r3, #0
 8013644:	00eb      	lsls	r3, r5, #3
 8013646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801364a:	00e2      	lsls	r2, r4, #3
 801364c:	4614      	mov	r4, r2
 801364e:	461d      	mov	r5, r3
 8013650:	4643      	mov	r3, r8
 8013652:	18e3      	adds	r3, r4, r3
 8013654:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013658:	464b      	mov	r3, r9
 801365a:	eb45 0303 	adc.w	r3, r5, r3
 801365e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8013662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013666:	685b      	ldr	r3, [r3, #4]
 8013668:	2200      	movs	r2, #0
 801366a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801366e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8013672:	f04f 0200 	mov.w	r2, #0
 8013676:	f04f 0300 	mov.w	r3, #0
 801367a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801367e:	4629      	mov	r1, r5
 8013680:	008b      	lsls	r3, r1, #2
 8013682:	4621      	mov	r1, r4
 8013684:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013688:	4621      	mov	r1, r4
 801368a:	008a      	lsls	r2, r1, #2
 801368c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8013690:	f7f5 fada 	bl	8008c48 <__aeabi_uldivmod>
 8013694:	4602      	mov	r2, r0
 8013696:	460b      	mov	r3, r1
 8013698:	4b60      	ldr	r3, [pc, #384]	@ (801381c <UART_SetConfig+0x4e4>)
 801369a:	fba3 2302 	umull	r2, r3, r3, r2
 801369e:	095b      	lsrs	r3, r3, #5
 80136a0:	011c      	lsls	r4, r3, #4
 80136a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80136a6:	2200      	movs	r2, #0
 80136a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80136ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80136b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80136b4:	4642      	mov	r2, r8
 80136b6:	464b      	mov	r3, r9
 80136b8:	1891      	adds	r1, r2, r2
 80136ba:	61b9      	str	r1, [r7, #24]
 80136bc:	415b      	adcs	r3, r3
 80136be:	61fb      	str	r3, [r7, #28]
 80136c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80136c4:	4641      	mov	r1, r8
 80136c6:	1851      	adds	r1, r2, r1
 80136c8:	6139      	str	r1, [r7, #16]
 80136ca:	4649      	mov	r1, r9
 80136cc:	414b      	adcs	r3, r1
 80136ce:	617b      	str	r3, [r7, #20]
 80136d0:	f04f 0200 	mov.w	r2, #0
 80136d4:	f04f 0300 	mov.w	r3, #0
 80136d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80136dc:	4659      	mov	r1, fp
 80136de:	00cb      	lsls	r3, r1, #3
 80136e0:	4651      	mov	r1, sl
 80136e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80136e6:	4651      	mov	r1, sl
 80136e8:	00ca      	lsls	r2, r1, #3
 80136ea:	4610      	mov	r0, r2
 80136ec:	4619      	mov	r1, r3
 80136ee:	4603      	mov	r3, r0
 80136f0:	4642      	mov	r2, r8
 80136f2:	189b      	adds	r3, r3, r2
 80136f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80136f8:	464b      	mov	r3, r9
 80136fa:	460a      	mov	r2, r1
 80136fc:	eb42 0303 	adc.w	r3, r2, r3
 8013700:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8013704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013708:	685b      	ldr	r3, [r3, #4]
 801370a:	2200      	movs	r2, #0
 801370c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801370e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8013710:	f04f 0200 	mov.w	r2, #0
 8013714:	f04f 0300 	mov.w	r3, #0
 8013718:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 801371c:	4649      	mov	r1, r9
 801371e:	008b      	lsls	r3, r1, #2
 8013720:	4641      	mov	r1, r8
 8013722:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013726:	4641      	mov	r1, r8
 8013728:	008a      	lsls	r2, r1, #2
 801372a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801372e:	f7f5 fa8b 	bl	8008c48 <__aeabi_uldivmod>
 8013732:	4602      	mov	r2, r0
 8013734:	460b      	mov	r3, r1
 8013736:	4611      	mov	r1, r2
 8013738:	4b38      	ldr	r3, [pc, #224]	@ (801381c <UART_SetConfig+0x4e4>)
 801373a:	fba3 2301 	umull	r2, r3, r3, r1
 801373e:	095b      	lsrs	r3, r3, #5
 8013740:	2264      	movs	r2, #100	@ 0x64
 8013742:	fb02 f303 	mul.w	r3, r2, r3
 8013746:	1acb      	subs	r3, r1, r3
 8013748:	011b      	lsls	r3, r3, #4
 801374a:	3332      	adds	r3, #50	@ 0x32
 801374c:	4a33      	ldr	r2, [pc, #204]	@ (801381c <UART_SetConfig+0x4e4>)
 801374e:	fba2 2303 	umull	r2, r3, r2, r3
 8013752:	095b      	lsrs	r3, r3, #5
 8013754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013758:	441c      	add	r4, r3
 801375a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801375e:	2200      	movs	r2, #0
 8013760:	673b      	str	r3, [r7, #112]	@ 0x70
 8013762:	677a      	str	r2, [r7, #116]	@ 0x74
 8013764:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8013768:	4642      	mov	r2, r8
 801376a:	464b      	mov	r3, r9
 801376c:	1891      	adds	r1, r2, r2
 801376e:	60b9      	str	r1, [r7, #8]
 8013770:	415b      	adcs	r3, r3
 8013772:	60fb      	str	r3, [r7, #12]
 8013774:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013778:	4641      	mov	r1, r8
 801377a:	1851      	adds	r1, r2, r1
 801377c:	6039      	str	r1, [r7, #0]
 801377e:	4649      	mov	r1, r9
 8013780:	414b      	adcs	r3, r1
 8013782:	607b      	str	r3, [r7, #4]
 8013784:	f04f 0200 	mov.w	r2, #0
 8013788:	f04f 0300 	mov.w	r3, #0
 801378c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8013790:	4659      	mov	r1, fp
 8013792:	00cb      	lsls	r3, r1, #3
 8013794:	4651      	mov	r1, sl
 8013796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801379a:	4651      	mov	r1, sl
 801379c:	00ca      	lsls	r2, r1, #3
 801379e:	4610      	mov	r0, r2
 80137a0:	4619      	mov	r1, r3
 80137a2:	4603      	mov	r3, r0
 80137a4:	4642      	mov	r2, r8
 80137a6:	189b      	adds	r3, r3, r2
 80137a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80137aa:	464b      	mov	r3, r9
 80137ac:	460a      	mov	r2, r1
 80137ae:	eb42 0303 	adc.w	r3, r2, r3
 80137b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80137b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80137b8:	685b      	ldr	r3, [r3, #4]
 80137ba:	2200      	movs	r2, #0
 80137bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80137be:	667a      	str	r2, [r7, #100]	@ 0x64
 80137c0:	f04f 0200 	mov.w	r2, #0
 80137c4:	f04f 0300 	mov.w	r3, #0
 80137c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80137cc:	4649      	mov	r1, r9
 80137ce:	008b      	lsls	r3, r1, #2
 80137d0:	4641      	mov	r1, r8
 80137d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80137d6:	4641      	mov	r1, r8
 80137d8:	008a      	lsls	r2, r1, #2
 80137da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80137de:	f7f5 fa33 	bl	8008c48 <__aeabi_uldivmod>
 80137e2:	4602      	mov	r2, r0
 80137e4:	460b      	mov	r3, r1
 80137e6:	4b0d      	ldr	r3, [pc, #52]	@ (801381c <UART_SetConfig+0x4e4>)
 80137e8:	fba3 1302 	umull	r1, r3, r3, r2
 80137ec:	095b      	lsrs	r3, r3, #5
 80137ee:	2164      	movs	r1, #100	@ 0x64
 80137f0:	fb01 f303 	mul.w	r3, r1, r3
 80137f4:	1ad3      	subs	r3, r2, r3
 80137f6:	011b      	lsls	r3, r3, #4
 80137f8:	3332      	adds	r3, #50	@ 0x32
 80137fa:	4a08      	ldr	r2, [pc, #32]	@ (801381c <UART_SetConfig+0x4e4>)
 80137fc:	fba2 2303 	umull	r2, r3, r2, r3
 8013800:	095b      	lsrs	r3, r3, #5
 8013802:	f003 020f 	and.w	r2, r3, #15
 8013806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	4422      	add	r2, r4
 801380e:	609a      	str	r2, [r3, #8]
}
 8013810:	bf00      	nop
 8013812:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8013816:	46bd      	mov	sp, r7
 8013818:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801381c:	51eb851f 	.word	0x51eb851f

08013820 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013820:	b480      	push	{r7}
 8013822:	b083      	sub	sp, #12
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	f103 0208 	add.w	r2, r3, #8
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	f04f 32ff 	mov.w	r2, #4294967295
 8013838:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f103 0208 	add.w	r2, r3, #8
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	f103 0208 	add.w	r2, r3, #8
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	2200      	movs	r2, #0
 8013852:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013854:	bf00      	nop
 8013856:	370c      	adds	r7, #12
 8013858:	46bd      	mov	sp, r7
 801385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385e:	4770      	bx	lr

08013860 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013860:	b480      	push	{r7}
 8013862:	b083      	sub	sp, #12
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	2200      	movs	r2, #0
 801386c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801386e:	bf00      	nop
 8013870:	370c      	adds	r7, #12
 8013872:	46bd      	mov	sp, r7
 8013874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013878:	4770      	bx	lr

0801387a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 801387a:	b480      	push	{r7}
 801387c:	b085      	sub	sp, #20
 801387e:	af00      	add	r7, sp, #0
 8013880:	6078      	str	r0, [r7, #4]
 8013882:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	685b      	ldr	r3, [r3, #4]
 8013888:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 801388a:	683b      	ldr	r3, [r7, #0]
 801388c:	68fa      	ldr	r2, [r7, #12]
 801388e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	689a      	ldr	r2, [r3, #8]
 8013894:	683b      	ldr	r3, [r7, #0]
 8013896:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	689b      	ldr	r3, [r3, #8]
 801389c:	683a      	ldr	r2, [r7, #0]
 801389e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	683a      	ldr	r2, [r7, #0]
 80138a4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80138a6:	683b      	ldr	r3, [r7, #0]
 80138a8:	687a      	ldr	r2, [r7, #4]
 80138aa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	1c5a      	adds	r2, r3, #1
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	601a      	str	r2, [r3, #0]
}
 80138b6:	bf00      	nop
 80138b8:	3714      	adds	r7, #20
 80138ba:	46bd      	mov	sp, r7
 80138bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c0:	4770      	bx	lr

080138c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80138c2:	b480      	push	{r7}
 80138c4:	b085      	sub	sp, #20
 80138c6:	af00      	add	r7, sp, #0
 80138c8:	6078      	str	r0, [r7, #4]
 80138ca:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80138d2:	68bb      	ldr	r3, [r7, #8]
 80138d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138d8:	d103      	bne.n	80138e2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	691b      	ldr	r3, [r3, #16]
 80138de:	60fb      	str	r3, [r7, #12]
 80138e0:	e00c      	b.n	80138fc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	3308      	adds	r3, #8
 80138e6:	60fb      	str	r3, [r7, #12]
 80138e8:	e002      	b.n	80138f0 <vListInsert+0x2e>
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	685b      	ldr	r3, [r3, #4]
 80138ee:	60fb      	str	r3, [r7, #12]
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	685b      	ldr	r3, [r3, #4]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	68ba      	ldr	r2, [r7, #8]
 80138f8:	429a      	cmp	r2, r3
 80138fa:	d2f6      	bcs.n	80138ea <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	685a      	ldr	r2, [r3, #4]
 8013900:	683b      	ldr	r3, [r7, #0]
 8013902:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013904:	683b      	ldr	r3, [r7, #0]
 8013906:	685b      	ldr	r3, [r3, #4]
 8013908:	683a      	ldr	r2, [r7, #0]
 801390a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 801390c:	683b      	ldr	r3, [r7, #0]
 801390e:	68fa      	ldr	r2, [r7, #12]
 8013910:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	683a      	ldr	r2, [r7, #0]
 8013916:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8013918:	683b      	ldr	r3, [r7, #0]
 801391a:	687a      	ldr	r2, [r7, #4]
 801391c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	1c5a      	adds	r2, r3, #1
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	601a      	str	r2, [r3, #0]
}
 8013928:	bf00      	nop
 801392a:	3714      	adds	r7, #20
 801392c:	46bd      	mov	sp, r7
 801392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013932:	4770      	bx	lr

08013934 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013934:	b480      	push	{r7}
 8013936:	b085      	sub	sp, #20
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	691b      	ldr	r3, [r3, #16]
 8013940:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	685b      	ldr	r3, [r3, #4]
 8013946:	687a      	ldr	r2, [r7, #4]
 8013948:	6892      	ldr	r2, [r2, #8]
 801394a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	689b      	ldr	r3, [r3, #8]
 8013950:	687a      	ldr	r2, [r7, #4]
 8013952:	6852      	ldr	r2, [r2, #4]
 8013954:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	685b      	ldr	r3, [r3, #4]
 801395a:	687a      	ldr	r2, [r7, #4]
 801395c:	429a      	cmp	r2, r3
 801395e:	d103      	bne.n	8013968 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	689a      	ldr	r2, [r3, #8]
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2200      	movs	r2, #0
 801396c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	1e5a      	subs	r2, r3, #1
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	681b      	ldr	r3, [r3, #0]
}
 801397c:	4618      	mov	r0, r3
 801397e:	3714      	adds	r7, #20
 8013980:	46bd      	mov	sp, r7
 8013982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013986:	4770      	bx	lr

08013988 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8013988:	b580      	push	{r7, lr}
 801398a:	b084      	sub	sp, #16
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
 8013990:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d10b      	bne.n	80139b4 <xQueueGenericReset+0x2c>
        __asm volatile
 801399c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139a0:	f383 8811 	msr	BASEPRI, r3
 80139a4:	f3bf 8f6f 	isb	sy
 80139a8:	f3bf 8f4f 	dsb	sy
 80139ac:	60bb      	str	r3, [r7, #8]
    }
 80139ae:	bf00      	nop
 80139b0:	bf00      	nop
 80139b2:	e7fd      	b.n	80139b0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80139b4:	f002 fcea 	bl	801638c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	681a      	ldr	r2, [r3, #0]
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80139c0:	68f9      	ldr	r1, [r7, #12]
 80139c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80139c4:	fb01 f303 	mul.w	r3, r1, r3
 80139c8:	441a      	add	r2, r3
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	2200      	movs	r2, #0
 80139d2:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	681a      	ldr	r2, [r3, #0]
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	681a      	ldr	r2, [r3, #0]
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80139e4:	3b01      	subs	r3, #1
 80139e6:	68f9      	ldr	r1, [r7, #12]
 80139e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80139ea:	fb01 f303 	mul.w	r3, r1, r3
 80139ee:	441a      	add	r2, r3
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	22ff      	movs	r2, #255	@ 0xff
 80139f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	22ff      	movs	r2, #255	@ 0xff
 8013a00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d114      	bne.n	8013a34 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	691b      	ldr	r3, [r3, #16]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d01a      	beq.n	8013a48 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	3310      	adds	r3, #16
 8013a16:	4618      	mov	r0, r3
 8013a18:	f001 fb20 	bl	801505c <xTaskRemoveFromEventList>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d012      	beq.n	8013a48 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8013a22:	4b0d      	ldr	r3, [pc, #52]	@ (8013a58 <xQueueGenericReset+0xd0>)
 8013a24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a28:	601a      	str	r2, [r3, #0]
 8013a2a:	f3bf 8f4f 	dsb	sy
 8013a2e:	f3bf 8f6f 	isb	sy
 8013a32:	e009      	b.n	8013a48 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	3310      	adds	r3, #16
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f7ff fef1 	bl	8013820 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	3324      	adds	r3, #36	@ 0x24
 8013a42:	4618      	mov	r0, r3
 8013a44:	f7ff feec 	bl	8013820 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8013a48:	f002 fcd2 	bl	80163f0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8013a4c:	2301      	movs	r3, #1
}
 8013a4e:	4618      	mov	r0, r3
 8013a50:	3710      	adds	r7, #16
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd80      	pop	{r7, pc}
 8013a56:	bf00      	nop
 8013a58:	e000ed04 	.word	0xe000ed04

08013a5c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b08c      	sub	sp, #48	@ 0x30
 8013a60:	af02      	add	r7, sp, #8
 8013a62:	60f8      	str	r0, [r7, #12]
 8013a64:	60b9      	str	r1, [r7, #8]
 8013a66:	4613      	mov	r3, r2
 8013a68:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d10b      	bne.n	8013a88 <xQueueGenericCreate+0x2c>
        __asm volatile
 8013a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a74:	f383 8811 	msr	BASEPRI, r3
 8013a78:	f3bf 8f6f 	isb	sy
 8013a7c:	f3bf 8f4f 	dsb	sy
 8013a80:	61bb      	str	r3, [r7, #24]
    }
 8013a82:	bf00      	nop
 8013a84:	bf00      	nop
 8013a86:	e7fd      	b.n	8013a84 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	68ba      	ldr	r2, [r7, #8]
 8013a8c:	fb02 f303 	mul.w	r3, r2, r3
 8013a90:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8013a92:	68bb      	ldr	r3, [r7, #8]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d006      	beq.n	8013aa6 <xQueueGenericCreate+0x4a>
 8013a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013aa0:	68fa      	ldr	r2, [r7, #12]
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	d101      	bne.n	8013aaa <xQueueGenericCreate+0x4e>
 8013aa6:	2301      	movs	r3, #1
 8013aa8:	e000      	b.n	8013aac <xQueueGenericCreate+0x50>
 8013aaa:	2300      	movs	r3, #0
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d10b      	bne.n	8013ac8 <xQueueGenericCreate+0x6c>
        __asm volatile
 8013ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ab4:	f383 8811 	msr	BASEPRI, r3
 8013ab8:	f3bf 8f6f 	isb	sy
 8013abc:	f3bf 8f4f 	dsb	sy
 8013ac0:	617b      	str	r3, [r7, #20]
    }
 8013ac2:	bf00      	nop
 8013ac4:	bf00      	nop
 8013ac6:	e7fd      	b.n	8013ac4 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8013ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aca:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8013ace:	d90b      	bls.n	8013ae8 <xQueueGenericCreate+0x8c>
        __asm volatile
 8013ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ad4:	f383 8811 	msr	BASEPRI, r3
 8013ad8:	f3bf 8f6f 	isb	sy
 8013adc:	f3bf 8f4f 	dsb	sy
 8013ae0:	613b      	str	r3, [r7, #16]
    }
 8013ae2:	bf00      	nop
 8013ae4:	bf00      	nop
 8013ae6:	e7fd      	b.n	8013ae4 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aea:	3350      	adds	r3, #80	@ 0x50
 8013aec:	4618      	mov	r0, r3
 8013aee:	f002 fd77 	bl	80165e0 <pvPortMalloc>
 8013af2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8013af4:	6a3b      	ldr	r3, [r7, #32]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d00d      	beq.n	8013b16 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013afa:	6a3b      	ldr	r3, [r7, #32]
 8013afc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013afe:	69fb      	ldr	r3, [r7, #28]
 8013b00:	3350      	adds	r3, #80	@ 0x50
 8013b02:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013b04:	79fa      	ldrb	r2, [r7, #7]
 8013b06:	6a3b      	ldr	r3, [r7, #32]
 8013b08:	9300      	str	r3, [sp, #0]
 8013b0a:	4613      	mov	r3, r2
 8013b0c:	69fa      	ldr	r2, [r7, #28]
 8013b0e:	68b9      	ldr	r1, [r7, #8]
 8013b10:	68f8      	ldr	r0, [r7, #12]
 8013b12:	f000 f805 	bl	8013b20 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8013b16:	6a3b      	ldr	r3, [r7, #32]
    }
 8013b18:	4618      	mov	r0, r3
 8013b1a:	3728      	adds	r7, #40	@ 0x28
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bd80      	pop	{r7, pc}

08013b20 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b084      	sub	sp, #16
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	60f8      	str	r0, [r7, #12]
 8013b28:	60b9      	str	r1, [r7, #8]
 8013b2a:	607a      	str	r2, [r7, #4]
 8013b2c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8013b2e:	68bb      	ldr	r3, [r7, #8]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d103      	bne.n	8013b3c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013b34:	69bb      	ldr	r3, [r7, #24]
 8013b36:	69ba      	ldr	r2, [r7, #24]
 8013b38:	601a      	str	r2, [r3, #0]
 8013b3a:	e002      	b.n	8013b42 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013b3c:	69bb      	ldr	r3, [r7, #24]
 8013b3e:	687a      	ldr	r2, [r7, #4]
 8013b40:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8013b42:	69bb      	ldr	r3, [r7, #24]
 8013b44:	68fa      	ldr	r2, [r7, #12]
 8013b46:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8013b48:	69bb      	ldr	r3, [r7, #24]
 8013b4a:	68ba      	ldr	r2, [r7, #8]
 8013b4c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013b4e:	2101      	movs	r1, #1
 8013b50:	69b8      	ldr	r0, [r7, #24]
 8013b52:	f7ff ff19 	bl	8013988 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8013b56:	69bb      	ldr	r3, [r7, #24]
 8013b58:	78fa      	ldrb	r2, [r7, #3]
 8013b5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8013b5e:	bf00      	nop
 8013b60:	3710      	adds	r7, #16
 8013b62:	46bd      	mov	sp, r7
 8013b64:	bd80      	pop	{r7, pc}

08013b66 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8013b66:	b580      	push	{r7, lr}
 8013b68:	b082      	sub	sp, #8
 8013b6a:	af00      	add	r7, sp, #0
 8013b6c:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d00e      	beq.n	8013b92 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2200      	movs	r2, #0
 8013b78:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	2200      	movs	r2, #0
 8013b84:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013b86:	2300      	movs	r3, #0
 8013b88:	2200      	movs	r2, #0
 8013b8a:	2100      	movs	r1, #0
 8013b8c:	6878      	ldr	r0, [r7, #4]
 8013b8e:	f000 f81d 	bl	8013bcc <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8013b92:	bf00      	nop
 8013b94:	3708      	adds	r7, #8
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}

08013b9a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8013b9a:	b580      	push	{r7, lr}
 8013b9c:	b086      	sub	sp, #24
 8013b9e:	af00      	add	r7, sp, #0
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	617b      	str	r3, [r7, #20]
 8013ba8:	2300      	movs	r3, #0
 8013baa:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013bac:	79fb      	ldrb	r3, [r7, #7]
 8013bae:	461a      	mov	r2, r3
 8013bb0:	6939      	ldr	r1, [r7, #16]
 8013bb2:	6978      	ldr	r0, [r7, #20]
 8013bb4:	f7ff ff52 	bl	8013a5c <xQueueGenericCreate>
 8013bb8:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013bba:	68f8      	ldr	r0, [r7, #12]
 8013bbc:	f7ff ffd3 	bl	8013b66 <prvInitialiseMutex>

        return xNewQueue;
 8013bc0:	68fb      	ldr	r3, [r7, #12]
    }
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	3718      	adds	r7, #24
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}
	...

08013bcc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b08e      	sub	sp, #56	@ 0x38
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	60f8      	str	r0, [r7, #12]
 8013bd4:	60b9      	str	r1, [r7, #8]
 8013bd6:	607a      	str	r2, [r7, #4]
 8013bd8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013bda:	2300      	movs	r3, #0
 8013bdc:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8013be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d10b      	bne.n	8013c00 <xQueueGenericSend+0x34>
        __asm volatile
 8013be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bec:	f383 8811 	msr	BASEPRI, r3
 8013bf0:	f3bf 8f6f 	isb	sy
 8013bf4:	f3bf 8f4f 	dsb	sy
 8013bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8013bfa:	bf00      	nop
 8013bfc:	bf00      	nop
 8013bfe:	e7fd      	b.n	8013bfc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c00:	68bb      	ldr	r3, [r7, #8]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d103      	bne.n	8013c0e <xQueueGenericSend+0x42>
 8013c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d101      	bne.n	8013c12 <xQueueGenericSend+0x46>
 8013c0e:	2301      	movs	r3, #1
 8013c10:	e000      	b.n	8013c14 <xQueueGenericSend+0x48>
 8013c12:	2300      	movs	r3, #0
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d10b      	bne.n	8013c30 <xQueueGenericSend+0x64>
        __asm volatile
 8013c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c1c:	f383 8811 	msr	BASEPRI, r3
 8013c20:	f3bf 8f6f 	isb	sy
 8013c24:	f3bf 8f4f 	dsb	sy
 8013c28:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8013c2a:	bf00      	nop
 8013c2c:	bf00      	nop
 8013c2e:	e7fd      	b.n	8013c2c <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	2b02      	cmp	r3, #2
 8013c34:	d103      	bne.n	8013c3e <xQueueGenericSend+0x72>
 8013c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c3a:	2b01      	cmp	r3, #1
 8013c3c:	d101      	bne.n	8013c42 <xQueueGenericSend+0x76>
 8013c3e:	2301      	movs	r3, #1
 8013c40:	e000      	b.n	8013c44 <xQueueGenericSend+0x78>
 8013c42:	2300      	movs	r3, #0
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d10b      	bne.n	8013c60 <xQueueGenericSend+0x94>
        __asm volatile
 8013c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c4c:	f383 8811 	msr	BASEPRI, r3
 8013c50:	f3bf 8f6f 	isb	sy
 8013c54:	f3bf 8f4f 	dsb	sy
 8013c58:	623b      	str	r3, [r7, #32]
    }
 8013c5a:	bf00      	nop
 8013c5c:	bf00      	nop
 8013c5e:	e7fd      	b.n	8013c5c <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c60:	f001 fc70 	bl	8015544 <xTaskGetSchedulerState>
 8013c64:	4603      	mov	r3, r0
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d102      	bne.n	8013c70 <xQueueGenericSend+0xa4>
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d101      	bne.n	8013c74 <xQueueGenericSend+0xa8>
 8013c70:	2301      	movs	r3, #1
 8013c72:	e000      	b.n	8013c76 <xQueueGenericSend+0xaa>
 8013c74:	2300      	movs	r3, #0
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d10b      	bne.n	8013c92 <xQueueGenericSend+0xc6>
        __asm volatile
 8013c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c7e:	f383 8811 	msr	BASEPRI, r3
 8013c82:	f3bf 8f6f 	isb	sy
 8013c86:	f3bf 8f4f 	dsb	sy
 8013c8a:	61fb      	str	r3, [r7, #28]
    }
 8013c8c:	bf00      	nop
 8013c8e:	bf00      	nop
 8013c90:	e7fd      	b.n	8013c8e <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8013c92:	f002 fb7b 	bl	801638c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d302      	bcc.n	8013ca8 <xQueueGenericSend+0xdc>
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	2b02      	cmp	r3, #2
 8013ca6:	d129      	bne.n	8013cfc <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013ca8:	683a      	ldr	r2, [r7, #0]
 8013caa:	68b9      	ldr	r1, [r7, #8]
 8013cac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013cae:	f000 fb47 	bl	8014340 <prvCopyDataToQueue>
 8013cb2:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d010      	beq.n	8013cde <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cbe:	3324      	adds	r3, #36	@ 0x24
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f001 f9cb 	bl	801505c <xTaskRemoveFromEventList>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d013      	beq.n	8013cf4 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8013ccc:	4b3f      	ldr	r3, [pc, #252]	@ (8013dcc <xQueueGenericSend+0x200>)
 8013cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013cd2:	601a      	str	r2, [r3, #0]
 8013cd4:	f3bf 8f4f 	dsb	sy
 8013cd8:	f3bf 8f6f 	isb	sy
 8013cdc:	e00a      	b.n	8013cf4 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8013cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d007      	beq.n	8013cf4 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8013ce4:	4b39      	ldr	r3, [pc, #228]	@ (8013dcc <xQueueGenericSend+0x200>)
 8013ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013cea:	601a      	str	r2, [r3, #0]
 8013cec:	f3bf 8f4f 	dsb	sy
 8013cf0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8013cf4:	f002 fb7c 	bl	80163f0 <vPortExitCritical>
                return pdPASS;
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	e063      	b.n	8013dc4 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d103      	bne.n	8013d0a <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8013d02:	f002 fb75 	bl	80163f0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8013d06:	2300      	movs	r3, #0
 8013d08:	e05c      	b.n	8013dc4 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8013d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d106      	bne.n	8013d1e <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8013d10:	f107 0314 	add.w	r3, r7, #20
 8013d14:	4618      	mov	r0, r3
 8013d16:	f001 fa05 	bl	8015124 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8013d1e:	f002 fb67 	bl	80163f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8013d22:	f000 fec3 	bl	8014aac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8013d26:	f002 fb31 	bl	801638c <vPortEnterCritical>
 8013d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013d30:	b25b      	sxtb	r3, r3
 8013d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d36:	d103      	bne.n	8013d40 <xQueueGenericSend+0x174>
 8013d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013d46:	b25b      	sxtb	r3, r3
 8013d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d4c:	d103      	bne.n	8013d56 <xQueueGenericSend+0x18a>
 8013d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d50:	2200      	movs	r2, #0
 8013d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013d56:	f002 fb4b 	bl	80163f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013d5a:	1d3a      	adds	r2, r7, #4
 8013d5c:	f107 0314 	add.w	r3, r7, #20
 8013d60:	4611      	mov	r1, r2
 8013d62:	4618      	mov	r0, r3
 8013d64:	f001 f9f4 	bl	8015150 <xTaskCheckForTimeOut>
 8013d68:	4603      	mov	r3, r0
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d124      	bne.n	8013db8 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013d6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013d70:	f000 fbde 	bl	8014530 <prvIsQueueFull>
 8013d74:	4603      	mov	r3, r0
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d018      	beq.n	8013dac <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d7c:	3310      	adds	r3, #16
 8013d7e:	687a      	ldr	r2, [r7, #4]
 8013d80:	4611      	mov	r1, r2
 8013d82:	4618      	mov	r0, r3
 8013d84:	f001 f918 	bl	8014fb8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8013d88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013d8a:	f000 fb69 	bl	8014460 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8013d8e:	f000 fe9b 	bl	8014ac8 <xTaskResumeAll>
 8013d92:	4603      	mov	r3, r0
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	f47f af7c 	bne.w	8013c92 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8013d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8013dcc <xQueueGenericSend+0x200>)
 8013d9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013da0:	601a      	str	r2, [r3, #0]
 8013da2:	f3bf 8f4f 	dsb	sy
 8013da6:	f3bf 8f6f 	isb	sy
 8013daa:	e772      	b.n	8013c92 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8013dac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013dae:	f000 fb57 	bl	8014460 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8013db2:	f000 fe89 	bl	8014ac8 <xTaskResumeAll>
 8013db6:	e76c      	b.n	8013c92 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8013db8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013dba:	f000 fb51 	bl	8014460 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8013dbe:	f000 fe83 	bl	8014ac8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8013dc2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3738      	adds	r7, #56	@ 0x38
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}
 8013dcc:	e000ed04 	.word	0xe000ed04

08013dd0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b090      	sub	sp, #64	@ 0x40
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	60f8      	str	r0, [r7, #12]
 8013dd8:	60b9      	str	r1, [r7, #8]
 8013dda:	607a      	str	r2, [r7, #4]
 8013ddc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8013de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d10b      	bne.n	8013e00 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8013de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dec:	f383 8811 	msr	BASEPRI, r3
 8013df0:	f3bf 8f6f 	isb	sy
 8013df4:	f3bf 8f4f 	dsb	sy
 8013df8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8013dfa:	bf00      	nop
 8013dfc:	bf00      	nop
 8013dfe:	e7fd      	b.n	8013dfc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013e00:	68bb      	ldr	r3, [r7, #8]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d103      	bne.n	8013e0e <xQueueGenericSendFromISR+0x3e>
 8013e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d101      	bne.n	8013e12 <xQueueGenericSendFromISR+0x42>
 8013e0e:	2301      	movs	r3, #1
 8013e10:	e000      	b.n	8013e14 <xQueueGenericSendFromISR+0x44>
 8013e12:	2300      	movs	r3, #0
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d10b      	bne.n	8013e30 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8013e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e1c:	f383 8811 	msr	BASEPRI, r3
 8013e20:	f3bf 8f6f 	isb	sy
 8013e24:	f3bf 8f4f 	dsb	sy
 8013e28:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8013e2a:	bf00      	nop
 8013e2c:	bf00      	nop
 8013e2e:	e7fd      	b.n	8013e2c <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	2b02      	cmp	r3, #2
 8013e34:	d103      	bne.n	8013e3e <xQueueGenericSendFromISR+0x6e>
 8013e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e3a:	2b01      	cmp	r3, #1
 8013e3c:	d101      	bne.n	8013e42 <xQueueGenericSendFromISR+0x72>
 8013e3e:	2301      	movs	r3, #1
 8013e40:	e000      	b.n	8013e44 <xQueueGenericSendFromISR+0x74>
 8013e42:	2300      	movs	r3, #0
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d10b      	bne.n	8013e60 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8013e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e4c:	f383 8811 	msr	BASEPRI, r3
 8013e50:	f3bf 8f6f 	isb	sy
 8013e54:	f3bf 8f4f 	dsb	sy
 8013e58:	623b      	str	r3, [r7, #32]
    }
 8013e5a:	bf00      	nop
 8013e5c:	bf00      	nop
 8013e5e:	e7fd      	b.n	8013e5c <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013e60:	f002 fb7c 	bl	801655c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8013e64:	f3ef 8211 	mrs	r2, BASEPRI
 8013e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e6c:	f383 8811 	msr	BASEPRI, r3
 8013e70:	f3bf 8f6f 	isb	sy
 8013e74:	f3bf 8f4f 	dsb	sy
 8013e78:	61fa      	str	r2, [r7, #28]
 8013e7a:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8013e7c:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013e7e:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	d302      	bcc.n	8013e92 <xQueueGenericSendFromISR+0xc2>
 8013e8c:	683b      	ldr	r3, [r7, #0]
 8013e8e:	2b02      	cmp	r3, #2
 8013e90:	d13f      	bne.n	8013f12 <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8013e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013e98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013ea2:	683a      	ldr	r2, [r7, #0]
 8013ea4:	68b9      	ldr	r1, [r7, #8]
 8013ea6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013ea8:	f000 fa4a 	bl	8014340 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8013eac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8013eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013eb4:	d112      	bne.n	8013edc <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d026      	beq.n	8013f0c <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ec0:	3324      	adds	r3, #36	@ 0x24
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f001 f8ca 	bl	801505c <xTaskRemoveFromEventList>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d01e      	beq.n	8013f0c <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d01b      	beq.n	8013f0c <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	2201      	movs	r2, #1
 8013ed8:	601a      	str	r2, [r3, #0]
 8013eda:	e017      	b.n	8013f0c <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8013edc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8013ee0:	2b7f      	cmp	r3, #127	@ 0x7f
 8013ee2:	d10b      	bne.n	8013efc <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8013ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ee8:	f383 8811 	msr	BASEPRI, r3
 8013eec:	f3bf 8f6f 	isb	sy
 8013ef0:	f3bf 8f4f 	dsb	sy
 8013ef4:	617b      	str	r3, [r7, #20]
    }
 8013ef6:	bf00      	nop
 8013ef8:	bf00      	nop
 8013efa:	e7fd      	b.n	8013ef8 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013efc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013f00:	3301      	adds	r3, #1
 8013f02:	b2db      	uxtb	r3, r3
 8013f04:	b25a      	sxtb	r2, r3
 8013f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8013f10:	e001      	b.n	8013f16 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8013f12:	2300      	movs	r3, #0
 8013f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f18:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8013f1a:	693b      	ldr	r3, [r7, #16]
 8013f1c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8013f20:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8013f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013f24:	4618      	mov	r0, r3
 8013f26:	3740      	adds	r7, #64	@ 0x40
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bd80      	pop	{r7, pc}

08013f2c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b08c      	sub	sp, #48	@ 0x30
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	60f8      	str	r0, [r7, #12]
 8013f34:	60b9      	str	r1, [r7, #8]
 8013f36:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8013f38:	2300      	movs	r3, #0
 8013f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8013f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d10b      	bne.n	8013f5e <xQueueReceive+0x32>
        __asm volatile
 8013f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f4a:	f383 8811 	msr	BASEPRI, r3
 8013f4e:	f3bf 8f6f 	isb	sy
 8013f52:	f3bf 8f4f 	dsb	sy
 8013f56:	623b      	str	r3, [r7, #32]
    }
 8013f58:	bf00      	nop
 8013f5a:	bf00      	nop
 8013f5c:	e7fd      	b.n	8013f5a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d103      	bne.n	8013f6c <xQueueReceive+0x40>
 8013f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d101      	bne.n	8013f70 <xQueueReceive+0x44>
 8013f6c:	2301      	movs	r3, #1
 8013f6e:	e000      	b.n	8013f72 <xQueueReceive+0x46>
 8013f70:	2300      	movs	r3, #0
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d10b      	bne.n	8013f8e <xQueueReceive+0x62>
        __asm volatile
 8013f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f7a:	f383 8811 	msr	BASEPRI, r3
 8013f7e:	f3bf 8f6f 	isb	sy
 8013f82:	f3bf 8f4f 	dsb	sy
 8013f86:	61fb      	str	r3, [r7, #28]
    }
 8013f88:	bf00      	nop
 8013f8a:	bf00      	nop
 8013f8c:	e7fd      	b.n	8013f8a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013f8e:	f001 fad9 	bl	8015544 <xTaskGetSchedulerState>
 8013f92:	4603      	mov	r3, r0
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d102      	bne.n	8013f9e <xQueueReceive+0x72>
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d101      	bne.n	8013fa2 <xQueueReceive+0x76>
 8013f9e:	2301      	movs	r3, #1
 8013fa0:	e000      	b.n	8013fa4 <xQueueReceive+0x78>
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d10b      	bne.n	8013fc0 <xQueueReceive+0x94>
        __asm volatile
 8013fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fac:	f383 8811 	msr	BASEPRI, r3
 8013fb0:	f3bf 8f6f 	isb	sy
 8013fb4:	f3bf 8f4f 	dsb	sy
 8013fb8:	61bb      	str	r3, [r7, #24]
    }
 8013fba:	bf00      	nop
 8013fbc:	bf00      	nop
 8013fbe:	e7fd      	b.n	8013fbc <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8013fc0:	f002 f9e4 	bl	801638c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013fc8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d01f      	beq.n	8014010 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013fd0:	68b9      	ldr	r1, [r7, #8]
 8013fd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013fd4:	f000 fa1e 	bl	8014414 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fda:	1e5a      	subs	r2, r3, #1
 8013fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fde:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fe2:	691b      	ldr	r3, [r3, #16]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d00f      	beq.n	8014008 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fea:	3310      	adds	r3, #16
 8013fec:	4618      	mov	r0, r3
 8013fee:	f001 f835 	bl	801505c <xTaskRemoveFromEventList>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d007      	beq.n	8014008 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8013ff8:	4b3c      	ldr	r3, [pc, #240]	@ (80140ec <xQueueReceive+0x1c0>)
 8013ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013ffe:	601a      	str	r2, [r3, #0]
 8014000:	f3bf 8f4f 	dsb	sy
 8014004:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8014008:	f002 f9f2 	bl	80163f0 <vPortExitCritical>
                return pdPASS;
 801400c:	2301      	movs	r3, #1
 801400e:	e069      	b.n	80140e4 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d103      	bne.n	801401e <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8014016:	f002 f9eb 	bl	80163f0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 801401a:	2300      	movs	r3, #0
 801401c:	e062      	b.n	80140e4 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 801401e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014020:	2b00      	cmp	r3, #0
 8014022:	d106      	bne.n	8014032 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8014024:	f107 0310 	add.w	r3, r7, #16
 8014028:	4618      	mov	r0, r3
 801402a:	f001 f87b 	bl	8015124 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 801402e:	2301      	movs	r3, #1
 8014030:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8014032:	f002 f9dd 	bl	80163f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8014036:	f000 fd39 	bl	8014aac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 801403a:	f002 f9a7 	bl	801638c <vPortEnterCritical>
 801403e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014040:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014044:	b25b      	sxtb	r3, r3
 8014046:	f1b3 3fff 	cmp.w	r3, #4294967295
 801404a:	d103      	bne.n	8014054 <xQueueReceive+0x128>
 801404c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801404e:	2200      	movs	r2, #0
 8014050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014056:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801405a:	b25b      	sxtb	r3, r3
 801405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014060:	d103      	bne.n	801406a <xQueueReceive+0x13e>
 8014062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014064:	2200      	movs	r2, #0
 8014066:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801406a:	f002 f9c1 	bl	80163f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801406e:	1d3a      	adds	r2, r7, #4
 8014070:	f107 0310 	add.w	r3, r7, #16
 8014074:	4611      	mov	r1, r2
 8014076:	4618      	mov	r0, r3
 8014078:	f001 f86a 	bl	8015150 <xTaskCheckForTimeOut>
 801407c:	4603      	mov	r3, r0
 801407e:	2b00      	cmp	r3, #0
 8014080:	d123      	bne.n	80140ca <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014082:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014084:	f000 fa3e 	bl	8014504 <prvIsQueueEmpty>
 8014088:	4603      	mov	r3, r0
 801408a:	2b00      	cmp	r3, #0
 801408c:	d017      	beq.n	80140be <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801408e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014090:	3324      	adds	r3, #36	@ 0x24
 8014092:	687a      	ldr	r2, [r7, #4]
 8014094:	4611      	mov	r1, r2
 8014096:	4618      	mov	r0, r3
 8014098:	f000 ff8e 	bl	8014fb8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 801409c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801409e:	f000 f9df 	bl	8014460 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80140a2:	f000 fd11 	bl	8014ac8 <xTaskResumeAll>
 80140a6:	4603      	mov	r3, r0
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d189      	bne.n	8013fc0 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80140ac:	4b0f      	ldr	r3, [pc, #60]	@ (80140ec <xQueueReceive+0x1c0>)
 80140ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80140b2:	601a      	str	r2, [r3, #0]
 80140b4:	f3bf 8f4f 	dsb	sy
 80140b8:	f3bf 8f6f 	isb	sy
 80140bc:	e780      	b.n	8013fc0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80140be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80140c0:	f000 f9ce 	bl	8014460 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80140c4:	f000 fd00 	bl	8014ac8 <xTaskResumeAll>
 80140c8:	e77a      	b.n	8013fc0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80140ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80140cc:	f000 f9c8 	bl	8014460 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80140d0:	f000 fcfa 	bl	8014ac8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80140d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80140d6:	f000 fa15 	bl	8014504 <prvIsQueueEmpty>
 80140da:	4603      	mov	r3, r0
 80140dc:	2b00      	cmp	r3, #0
 80140de:	f43f af6f 	beq.w	8013fc0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80140e2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80140e4:	4618      	mov	r0, r3
 80140e6:	3730      	adds	r7, #48	@ 0x30
 80140e8:	46bd      	mov	sp, r7
 80140ea:	bd80      	pop	{r7, pc}
 80140ec:	e000ed04 	.word	0xe000ed04

080140f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b08e      	sub	sp, #56	@ 0x38
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
 80140f8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80140fa:	2300      	movs	r3, #0
 80140fc:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8014102:	2300      	movs	r3, #0
 8014104:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8014106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014108:	2b00      	cmp	r3, #0
 801410a:	d10b      	bne.n	8014124 <xQueueSemaphoreTake+0x34>
        __asm volatile
 801410c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014110:	f383 8811 	msr	BASEPRI, r3
 8014114:	f3bf 8f6f 	isb	sy
 8014118:	f3bf 8f4f 	dsb	sy
 801411c:	623b      	str	r3, [r7, #32]
    }
 801411e:	bf00      	nop
 8014120:	bf00      	nop
 8014122:	e7fd      	b.n	8014120 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8014124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014128:	2b00      	cmp	r3, #0
 801412a:	d00b      	beq.n	8014144 <xQueueSemaphoreTake+0x54>
        __asm volatile
 801412c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014130:	f383 8811 	msr	BASEPRI, r3
 8014134:	f3bf 8f6f 	isb	sy
 8014138:	f3bf 8f4f 	dsb	sy
 801413c:	61fb      	str	r3, [r7, #28]
    }
 801413e:	bf00      	nop
 8014140:	bf00      	nop
 8014142:	e7fd      	b.n	8014140 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014144:	f001 f9fe 	bl	8015544 <xTaskGetSchedulerState>
 8014148:	4603      	mov	r3, r0
 801414a:	2b00      	cmp	r3, #0
 801414c:	d102      	bne.n	8014154 <xQueueSemaphoreTake+0x64>
 801414e:	683b      	ldr	r3, [r7, #0]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d101      	bne.n	8014158 <xQueueSemaphoreTake+0x68>
 8014154:	2301      	movs	r3, #1
 8014156:	e000      	b.n	801415a <xQueueSemaphoreTake+0x6a>
 8014158:	2300      	movs	r3, #0
 801415a:	2b00      	cmp	r3, #0
 801415c:	d10b      	bne.n	8014176 <xQueueSemaphoreTake+0x86>
        __asm volatile
 801415e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014162:	f383 8811 	msr	BASEPRI, r3
 8014166:	f3bf 8f6f 	isb	sy
 801416a:	f3bf 8f4f 	dsb	sy
 801416e:	61bb      	str	r3, [r7, #24]
    }
 8014170:	bf00      	nop
 8014172:	bf00      	nop
 8014174:	e7fd      	b.n	8014172 <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8014176:	f002 f909 	bl	801638c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801417a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801417c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801417e:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014182:	2b00      	cmp	r3, #0
 8014184:	d024      	beq.n	80141d0 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014188:	1e5a      	subs	r2, r3, #1
 801418a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801418c:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801418e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d104      	bne.n	80141a0 <xQueueSemaphoreTake+0xb0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014196:	f001 fc31 	bl	80159fc <pvTaskIncrementMutexHeldCount>
 801419a:	4602      	mov	r2, r0
 801419c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801419e:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80141a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141a2:	691b      	ldr	r3, [r3, #16]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d00f      	beq.n	80141c8 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80141a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141aa:	3310      	adds	r3, #16
 80141ac:	4618      	mov	r0, r3
 80141ae:	f000 ff55 	bl	801505c <xTaskRemoveFromEventList>
 80141b2:	4603      	mov	r3, r0
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d007      	beq.n	80141c8 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80141b8:	4b54      	ldr	r3, [pc, #336]	@ (801430c <xQueueSemaphoreTake+0x21c>)
 80141ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80141be:	601a      	str	r2, [r3, #0]
 80141c0:	f3bf 8f4f 	dsb	sy
 80141c4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80141c8:	f002 f912 	bl	80163f0 <vPortExitCritical>
                return pdPASS;
 80141cc:	2301      	movs	r3, #1
 80141ce:	e098      	b.n	8014302 <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80141d0:	683b      	ldr	r3, [r7, #0]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d112      	bne.n	80141fc <xQueueSemaphoreTake+0x10c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80141d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d00b      	beq.n	80141f4 <xQueueSemaphoreTake+0x104>
        __asm volatile
 80141dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141e0:	f383 8811 	msr	BASEPRI, r3
 80141e4:	f3bf 8f6f 	isb	sy
 80141e8:	f3bf 8f4f 	dsb	sy
 80141ec:	617b      	str	r3, [r7, #20]
    }
 80141ee:	bf00      	nop
 80141f0:	bf00      	nop
 80141f2:	e7fd      	b.n	80141f0 <xQueueSemaphoreTake+0x100>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80141f4:	f002 f8fc 	bl	80163f0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80141f8:	2300      	movs	r3, #0
 80141fa:	e082      	b.n	8014302 <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 80141fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d106      	bne.n	8014210 <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8014202:	f107 030c 	add.w	r3, r7, #12
 8014206:	4618      	mov	r0, r3
 8014208:	f000 ff8c 	bl	8015124 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 801420c:	2301      	movs	r3, #1
 801420e:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8014210:	f002 f8ee 	bl	80163f0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8014214:	f000 fc4a 	bl	8014aac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8014218:	f002 f8b8 	bl	801638c <vPortEnterCritical>
 801421c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801421e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014222:	b25b      	sxtb	r3, r3
 8014224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014228:	d103      	bne.n	8014232 <xQueueSemaphoreTake+0x142>
 801422a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801422c:	2200      	movs	r2, #0
 801422e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014234:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014238:	b25b      	sxtb	r3, r3
 801423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801423e:	d103      	bne.n	8014248 <xQueueSemaphoreTake+0x158>
 8014240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014242:	2200      	movs	r2, #0
 8014244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014248:	f002 f8d2 	bl	80163f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801424c:	463a      	mov	r2, r7
 801424e:	f107 030c 	add.w	r3, r7, #12
 8014252:	4611      	mov	r1, r2
 8014254:	4618      	mov	r0, r3
 8014256:	f000 ff7b 	bl	8015150 <xTaskCheckForTimeOut>
 801425a:	4603      	mov	r3, r0
 801425c:	2b00      	cmp	r3, #0
 801425e:	d132      	bne.n	80142c6 <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014260:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014262:	f000 f94f 	bl	8014504 <prvIsQueueEmpty>
 8014266:	4603      	mov	r3, r0
 8014268:	2b00      	cmp	r3, #0
 801426a:	d026      	beq.n	80142ba <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801426c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d109      	bne.n	8014288 <xQueueSemaphoreTake+0x198>
                        {
                            taskENTER_CRITICAL();
 8014274:	f002 f88a 	bl	801638c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801427a:	689b      	ldr	r3, [r3, #8]
 801427c:	4618      	mov	r0, r3
 801427e:	f001 f97f 	bl	8015580 <xTaskPriorityInherit>
 8014282:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 8014284:	f002 f8b4 	bl	80163f0 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801428a:	3324      	adds	r3, #36	@ 0x24
 801428c:	683a      	ldr	r2, [r7, #0]
 801428e:	4611      	mov	r1, r2
 8014290:	4618      	mov	r0, r3
 8014292:	f000 fe91 	bl	8014fb8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8014296:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014298:	f000 f8e2 	bl	8014460 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 801429c:	f000 fc14 	bl	8014ac8 <xTaskResumeAll>
 80142a0:	4603      	mov	r3, r0
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	f47f af67 	bne.w	8014176 <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 80142a8:	4b18      	ldr	r3, [pc, #96]	@ (801430c <xQueueSemaphoreTake+0x21c>)
 80142aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80142ae:	601a      	str	r2, [r3, #0]
 80142b0:	f3bf 8f4f 	dsb	sy
 80142b4:	f3bf 8f6f 	isb	sy
 80142b8:	e75d      	b.n	8014176 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80142ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80142bc:	f000 f8d0 	bl	8014460 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80142c0:	f000 fc02 	bl	8014ac8 <xTaskResumeAll>
 80142c4:	e757      	b.n	8014176 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80142c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80142c8:	f000 f8ca 	bl	8014460 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80142cc:	f000 fbfc 	bl	8014ac8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80142d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80142d2:	f000 f917 	bl	8014504 <prvIsQueueEmpty>
 80142d6:	4603      	mov	r3, r0
 80142d8:	2b00      	cmp	r3, #0
 80142da:	f43f af4c 	beq.w	8014176 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80142de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d00d      	beq.n	8014300 <xQueueSemaphoreTake+0x210>
                        {
                            taskENTER_CRITICAL();
 80142e4:	f002 f852 	bl	801638c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80142e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80142ea:	f000 f811 	bl	8014310 <prvGetDisinheritPriorityAfterTimeout>
 80142ee:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80142f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142f2:	689b      	ldr	r3, [r3, #8]
 80142f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80142f6:	4618      	mov	r0, r3
 80142f8:	f001 fa34 	bl	8015764 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80142fc:	f002 f878 	bl	80163f0 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8014300:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8014302:	4618      	mov	r0, r3
 8014304:	3738      	adds	r7, #56	@ 0x38
 8014306:	46bd      	mov	sp, r7
 8014308:	bd80      	pop	{r7, pc}
 801430a:	bf00      	nop
 801430c:	e000ed04 	.word	0xe000ed04

08014310 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8014310:	b480      	push	{r7}
 8014312:	b085      	sub	sp, #20
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801431c:	2b00      	cmp	r3, #0
 801431e:	d006      	beq.n	801432e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	f1c3 0305 	rsb	r3, r3, #5
 801432a:	60fb      	str	r3, [r7, #12]
 801432c:	e001      	b.n	8014332 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801432e:	2300      	movs	r3, #0
 8014330:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8014332:	68fb      	ldr	r3, [r7, #12]
    }
 8014334:	4618      	mov	r0, r3
 8014336:	3714      	adds	r7, #20
 8014338:	46bd      	mov	sp, r7
 801433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433e:	4770      	bx	lr

08014340 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b086      	sub	sp, #24
 8014344:	af00      	add	r7, sp, #0
 8014346:	60f8      	str	r0, [r7, #12]
 8014348:	60b9      	str	r1, [r7, #8]
 801434a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 801434c:	2300      	movs	r3, #0
 801434e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014354:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801435a:	2b00      	cmp	r3, #0
 801435c:	d10d      	bne.n	801437a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d14d      	bne.n	8014402 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	689b      	ldr	r3, [r3, #8]
 801436a:	4618      	mov	r0, r3
 801436c:	f001 f97e 	bl	801566c <xTaskPriorityDisinherit>
 8014370:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	2200      	movs	r2, #0
 8014376:	609a      	str	r2, [r3, #8]
 8014378:	e043      	b.n	8014402 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d119      	bne.n	80143b4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	6858      	ldr	r0, [r3, #4]
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014388:	461a      	mov	r2, r3
 801438a:	68b9      	ldr	r1, [r7, #8]
 801438c:	f004 f9b1 	bl	80186f2 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	685a      	ldr	r2, [r3, #4]
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014398:	441a      	add	r2, r3
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	685a      	ldr	r2, [r3, #4]
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	689b      	ldr	r3, [r3, #8]
 80143a6:	429a      	cmp	r2, r3
 80143a8:	d32b      	bcc.n	8014402 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	681a      	ldr	r2, [r3, #0]
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	605a      	str	r2, [r3, #4]
 80143b2:	e026      	b.n	8014402 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	68d8      	ldr	r0, [r3, #12]
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80143bc:	461a      	mov	r2, r3
 80143be:	68b9      	ldr	r1, [r7, #8]
 80143c0:	f004 f997 	bl	80186f2 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	68da      	ldr	r2, [r3, #12]
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80143cc:	425b      	negs	r3, r3
 80143ce:	441a      	add	r2, r3
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	68da      	ldr	r2, [r3, #12]
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	429a      	cmp	r2, r3
 80143de:	d207      	bcs.n	80143f0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	689a      	ldr	r2, [r3, #8]
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80143e8:	425b      	negs	r3, r3
 80143ea:	441a      	add	r2, r3
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	2b02      	cmp	r3, #2
 80143f4:	d105      	bne.n	8014402 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80143f6:	693b      	ldr	r3, [r7, #16]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d002      	beq.n	8014402 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80143fc:	693b      	ldr	r3, [r7, #16]
 80143fe:	3b01      	subs	r3, #1
 8014400:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014402:	693b      	ldr	r3, [r7, #16]
 8014404:	1c5a      	adds	r2, r3, #1
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 801440a:	697b      	ldr	r3, [r7, #20]
}
 801440c:	4618      	mov	r0, r3
 801440e:	3718      	adds	r7, #24
 8014410:	46bd      	mov	sp, r7
 8014412:	bd80      	pop	{r7, pc}

08014414 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b082      	sub	sp, #8
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
 801441c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014422:	2b00      	cmp	r3, #0
 8014424:	d018      	beq.n	8014458 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	68da      	ldr	r2, [r3, #12]
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801442e:	441a      	add	r2, r3
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	68da      	ldr	r2, [r3, #12]
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	689b      	ldr	r3, [r3, #8]
 801443c:	429a      	cmp	r2, r3
 801443e:	d303      	bcc.n	8014448 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	681a      	ldr	r2, [r3, #0]
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	68d9      	ldr	r1, [r3, #12]
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014450:	461a      	mov	r2, r3
 8014452:	6838      	ldr	r0, [r7, #0]
 8014454:	f004 f94d 	bl	80186f2 <memcpy>
    }
}
 8014458:	bf00      	nop
 801445a:	3708      	adds	r7, #8
 801445c:	46bd      	mov	sp, r7
 801445e:	bd80      	pop	{r7, pc}

08014460 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014460:	b580      	push	{r7, lr}
 8014462:	b084      	sub	sp, #16
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8014468:	f001 ff90 	bl	801638c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014472:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8014474:	e011      	b.n	801449a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801447a:	2b00      	cmp	r3, #0
 801447c:	d012      	beq.n	80144a4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	3324      	adds	r3, #36	@ 0x24
 8014482:	4618      	mov	r0, r3
 8014484:	f000 fdea 	bl	801505c <xTaskRemoveFromEventList>
 8014488:	4603      	mov	r3, r0
 801448a:	2b00      	cmp	r3, #0
 801448c:	d001      	beq.n	8014492 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 801448e:	f000 fec7 	bl	8015220 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8014492:	7bfb      	ldrb	r3, [r7, #15]
 8014494:	3b01      	subs	r3, #1
 8014496:	b2db      	uxtb	r3, r3
 8014498:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 801449a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	dce9      	bgt.n	8014476 <prvUnlockQueue+0x16>
 80144a2:	e000      	b.n	80144a6 <prvUnlockQueue+0x46>
                        break;
 80144a4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	22ff      	movs	r2, #255	@ 0xff
 80144aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80144ae:	f001 ff9f 	bl	80163f0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80144b2:	f001 ff6b 	bl	801638c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80144bc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80144be:	e011      	b.n	80144e4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	691b      	ldr	r3, [r3, #16]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d012      	beq.n	80144ee <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	3310      	adds	r3, #16
 80144cc:	4618      	mov	r0, r3
 80144ce:	f000 fdc5 	bl	801505c <xTaskRemoveFromEventList>
 80144d2:	4603      	mov	r3, r0
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d001      	beq.n	80144dc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80144d8:	f000 fea2 	bl	8015220 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80144dc:	7bbb      	ldrb	r3, [r7, #14]
 80144de:	3b01      	subs	r3, #1
 80144e0:	b2db      	uxtb	r3, r3
 80144e2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80144e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	dce9      	bgt.n	80144c0 <prvUnlockQueue+0x60>
 80144ec:	e000      	b.n	80144f0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80144ee:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	22ff      	movs	r2, #255	@ 0xff
 80144f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80144f8:	f001 ff7a 	bl	80163f0 <vPortExitCritical>
}
 80144fc:	bf00      	nop
 80144fe:	3710      	adds	r7, #16
 8014500:	46bd      	mov	sp, r7
 8014502:	bd80      	pop	{r7, pc}

08014504 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b084      	sub	sp, #16
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 801450c:	f001 ff3e 	bl	801638c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014514:	2b00      	cmp	r3, #0
 8014516:	d102      	bne.n	801451e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8014518:	2301      	movs	r3, #1
 801451a:	60fb      	str	r3, [r7, #12]
 801451c:	e001      	b.n	8014522 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 801451e:	2300      	movs	r3, #0
 8014520:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8014522:	f001 ff65 	bl	80163f0 <vPortExitCritical>

    return xReturn;
 8014526:	68fb      	ldr	r3, [r7, #12]
}
 8014528:	4618      	mov	r0, r3
 801452a:	3710      	adds	r7, #16
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}

08014530 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b084      	sub	sp, #16
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8014538:	f001 ff28 	bl	801638c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014544:	429a      	cmp	r2, r3
 8014546:	d102      	bne.n	801454e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8014548:	2301      	movs	r3, #1
 801454a:	60fb      	str	r3, [r7, #12]
 801454c:	e001      	b.n	8014552 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 801454e:	2300      	movs	r3, #0
 8014550:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8014552:	f001 ff4d 	bl	80163f0 <vPortExitCritical>

    return xReturn;
 8014556:	68fb      	ldr	r3, [r7, #12]
}
 8014558:	4618      	mov	r0, r3
 801455a:	3710      	adds	r7, #16
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}

08014560 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8014560:	b480      	push	{r7}
 8014562:	b085      	sub	sp, #20
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
 8014568:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801456a:	2300      	movs	r3, #0
 801456c:	60fb      	str	r3, [r7, #12]
 801456e:	e014      	b.n	801459a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014570:	4a0f      	ldr	r2, [pc, #60]	@ (80145b0 <vQueueAddToRegistry+0x50>)
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d10b      	bne.n	8014594 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801457c:	490c      	ldr	r1, [pc, #48]	@ (80145b0 <vQueueAddToRegistry+0x50>)
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	683a      	ldr	r2, [r7, #0]
 8014582:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8014586:	4a0a      	ldr	r2, [pc, #40]	@ (80145b0 <vQueueAddToRegistry+0x50>)
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	00db      	lsls	r3, r3, #3
 801458c:	4413      	add	r3, r2
 801458e:	687a      	ldr	r2, [r7, #4]
 8014590:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8014592:	e006      	b.n	80145a2 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	3301      	adds	r3, #1
 8014598:	60fb      	str	r3, [r7, #12]
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	2b07      	cmp	r3, #7
 801459e:	d9e7      	bls.n	8014570 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80145a0:	bf00      	nop
 80145a2:	bf00      	nop
 80145a4:	3714      	adds	r7, #20
 80145a6:	46bd      	mov	sp, r7
 80145a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ac:	4770      	bx	lr
 80145ae:	bf00      	nop
 80145b0:	200014d4 	.word	0x200014d4

080145b4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b086      	sub	sp, #24
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	60f8      	str	r0, [r7, #12]
 80145bc:	60b9      	str	r1, [r7, #8]
 80145be:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80145c4:	f001 fee2 	bl	801638c <vPortEnterCritical>
 80145c8:	697b      	ldr	r3, [r7, #20]
 80145ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80145ce:	b25b      	sxtb	r3, r3
 80145d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145d4:	d103      	bne.n	80145de <vQueueWaitForMessageRestricted+0x2a>
 80145d6:	697b      	ldr	r3, [r7, #20]
 80145d8:	2200      	movs	r2, #0
 80145da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80145de:	697b      	ldr	r3, [r7, #20]
 80145e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80145e4:	b25b      	sxtb	r3, r3
 80145e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145ea:	d103      	bne.n	80145f4 <vQueueWaitForMessageRestricted+0x40>
 80145ec:	697b      	ldr	r3, [r7, #20]
 80145ee:	2200      	movs	r2, #0
 80145f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80145f4:	f001 fefc 	bl	80163f0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80145f8:	697b      	ldr	r3, [r7, #20]
 80145fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d106      	bne.n	801460e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014600:	697b      	ldr	r3, [r7, #20]
 8014602:	3324      	adds	r3, #36	@ 0x24
 8014604:	687a      	ldr	r2, [r7, #4]
 8014606:	68b9      	ldr	r1, [r7, #8]
 8014608:	4618      	mov	r0, r3
 801460a:	f000 fcfb 	bl	8015004 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 801460e:	6978      	ldr	r0, [r7, #20]
 8014610:	f7ff ff26 	bl	8014460 <prvUnlockQueue>
    }
 8014614:	bf00      	nop
 8014616:	3718      	adds	r7, #24
 8014618:	46bd      	mov	sp, r7
 801461a:	bd80      	pop	{r7, pc}

0801461c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 801461c:	b580      	push	{r7, lr}
 801461e:	b08c      	sub	sp, #48	@ 0x30
 8014620:	af04      	add	r7, sp, #16
 8014622:	60f8      	str	r0, [r7, #12]
 8014624:	60b9      	str	r1, [r7, #8]
 8014626:	603b      	str	r3, [r7, #0]
 8014628:	4613      	mov	r3, r2
 801462a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801462c:	88fb      	ldrh	r3, [r7, #6]
 801462e:	009b      	lsls	r3, r3, #2
 8014630:	4618      	mov	r0, r3
 8014632:	f001 ffd5 	bl	80165e0 <pvPortMalloc>
 8014636:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8014638:	697b      	ldr	r3, [r7, #20]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d00e      	beq.n	801465c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801463e:	2058      	movs	r0, #88	@ 0x58
 8014640:	f001 ffce 	bl	80165e0 <pvPortMalloc>
 8014644:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8014646:	69fb      	ldr	r3, [r7, #28]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d003      	beq.n	8014654 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 801464c:	69fb      	ldr	r3, [r7, #28]
 801464e:	697a      	ldr	r2, [r7, #20]
 8014650:	631a      	str	r2, [r3, #48]	@ 0x30
 8014652:	e005      	b.n	8014660 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8014654:	6978      	ldr	r0, [r7, #20]
 8014656:	f002 f8a5 	bl	80167a4 <vPortFree>
 801465a:	e001      	b.n	8014660 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 801465c:	2300      	movs	r3, #0
 801465e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8014660:	69fb      	ldr	r3, [r7, #28]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d013      	beq.n	801468e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014666:	88fa      	ldrh	r2, [r7, #6]
 8014668:	2300      	movs	r3, #0
 801466a:	9303      	str	r3, [sp, #12]
 801466c:	69fb      	ldr	r3, [r7, #28]
 801466e:	9302      	str	r3, [sp, #8]
 8014670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014672:	9301      	str	r3, [sp, #4]
 8014674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014676:	9300      	str	r3, [sp, #0]
 8014678:	683b      	ldr	r3, [r7, #0]
 801467a:	68b9      	ldr	r1, [r7, #8]
 801467c:	68f8      	ldr	r0, [r7, #12]
 801467e:	f000 f80e 	bl	801469e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8014682:	69f8      	ldr	r0, [r7, #28]
 8014684:	f000 f8a2 	bl	80147cc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8014688:	2301      	movs	r3, #1
 801468a:	61bb      	str	r3, [r7, #24]
 801468c:	e002      	b.n	8014694 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801468e:	f04f 33ff 	mov.w	r3, #4294967295
 8014692:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8014694:	69bb      	ldr	r3, [r7, #24]
    }
 8014696:	4618      	mov	r0, r3
 8014698:	3720      	adds	r7, #32
 801469a:	46bd      	mov	sp, r7
 801469c:	bd80      	pop	{r7, pc}

0801469e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 801469e:	b580      	push	{r7, lr}
 80146a0:	b088      	sub	sp, #32
 80146a2:	af00      	add	r7, sp, #0
 80146a4:	60f8      	str	r0, [r7, #12]
 80146a6:	60b9      	str	r1, [r7, #8]
 80146a8:	607a      	str	r2, [r7, #4]
 80146aa:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80146ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146ae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	009b      	lsls	r3, r3, #2
 80146b4:	461a      	mov	r2, r3
 80146b6:	21a5      	movs	r1, #165	@ 0xa5
 80146b8:	f003 ff48 	bl	801854c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80146bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80146c6:	3b01      	subs	r3, #1
 80146c8:	009b      	lsls	r3, r3, #2
 80146ca:	4413      	add	r3, r2
 80146cc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80146ce:	69bb      	ldr	r3, [r7, #24]
 80146d0:	f023 0307 	bic.w	r3, r3, #7
 80146d4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80146d6:	69bb      	ldr	r3, [r7, #24]
 80146d8:	f003 0307 	and.w	r3, r3, #7
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d00b      	beq.n	80146f8 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80146e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146e4:	f383 8811 	msr	BASEPRI, r3
 80146e8:	f3bf 8f6f 	isb	sy
 80146ec:	f3bf 8f4f 	dsb	sy
 80146f0:	617b      	str	r3, [r7, #20]
    }
 80146f2:	bf00      	nop
 80146f4:	bf00      	nop
 80146f6:	e7fd      	b.n	80146f4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d01f      	beq.n	801473e <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80146fe:	2300      	movs	r3, #0
 8014700:	61fb      	str	r3, [r7, #28]
 8014702:	e012      	b.n	801472a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014704:	68ba      	ldr	r2, [r7, #8]
 8014706:	69fb      	ldr	r3, [r7, #28]
 8014708:	4413      	add	r3, r2
 801470a:	7819      	ldrb	r1, [r3, #0]
 801470c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801470e:	69fb      	ldr	r3, [r7, #28]
 8014710:	4413      	add	r3, r2
 8014712:	3334      	adds	r3, #52	@ 0x34
 8014714:	460a      	mov	r2, r1
 8014716:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8014718:	68ba      	ldr	r2, [r7, #8]
 801471a:	69fb      	ldr	r3, [r7, #28]
 801471c:	4413      	add	r3, r2
 801471e:	781b      	ldrb	r3, [r3, #0]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d006      	beq.n	8014732 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014724:	69fb      	ldr	r3, [r7, #28]
 8014726:	3301      	adds	r3, #1
 8014728:	61fb      	str	r3, [r7, #28]
 801472a:	69fb      	ldr	r3, [r7, #28]
 801472c:	2b09      	cmp	r3, #9
 801472e:	d9e9      	bls.n	8014704 <prvInitialiseNewTask+0x66>
 8014730:	e000      	b.n	8014734 <prvInitialiseNewTask+0x96>
            {
                break;
 8014732:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014736:	2200      	movs	r2, #0
 8014738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801473c:	e003      	b.n	8014746 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801473e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014740:	2200      	movs	r2, #0
 8014742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014748:	2b04      	cmp	r3, #4
 801474a:	d901      	bls.n	8014750 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801474c:	2304      	movs	r3, #4
 801474e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8014750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014752:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014754:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8014756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801475a:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 801475c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801475e:	2200      	movs	r2, #0
 8014760:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014764:	3304      	adds	r3, #4
 8014766:	4618      	mov	r0, r3
 8014768:	f7ff f87a 	bl	8013860 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801476c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801476e:	3318      	adds	r3, #24
 8014770:	4618      	mov	r0, r3
 8014772:	f7ff f875 	bl	8013860 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801477a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801477c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801477e:	f1c3 0205 	rsb	r2, r3, #5
 8014782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014784:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801478a:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 801478c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801478e:	3350      	adds	r3, #80	@ 0x50
 8014790:	2204      	movs	r2, #4
 8014792:	2100      	movs	r1, #0
 8014794:	4618      	mov	r0, r3
 8014796:	f003 fed9 	bl	801854c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 801479a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801479c:	3354      	adds	r3, #84	@ 0x54
 801479e:	2201      	movs	r2, #1
 80147a0:	2100      	movs	r1, #0
 80147a2:	4618      	mov	r0, r3
 80147a4:	f003 fed2 	bl	801854c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80147a8:	683a      	ldr	r2, [r7, #0]
 80147aa:	68f9      	ldr	r1, [r7, #12]
 80147ac:	69b8      	ldr	r0, [r7, #24]
 80147ae:	f001 fcbd 	bl	801612c <pxPortInitialiseStack>
 80147b2:	4602      	mov	r2, r0
 80147b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147b6:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80147b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d002      	beq.n	80147c4 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80147be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80147c2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80147c4:	bf00      	nop
 80147c6:	3720      	adds	r7, #32
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}

080147cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b082      	sub	sp, #8
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80147d4:	f001 fdda 	bl	801638c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80147d8:	4b2c      	ldr	r3, [pc, #176]	@ (801488c <prvAddNewTaskToReadyList+0xc0>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	3301      	adds	r3, #1
 80147de:	4a2b      	ldr	r2, [pc, #172]	@ (801488c <prvAddNewTaskToReadyList+0xc0>)
 80147e0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80147e2:	4b2b      	ldr	r3, [pc, #172]	@ (8014890 <prvAddNewTaskToReadyList+0xc4>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d109      	bne.n	80147fe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80147ea:	4a29      	ldr	r2, [pc, #164]	@ (8014890 <prvAddNewTaskToReadyList+0xc4>)
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80147f0:	4b26      	ldr	r3, [pc, #152]	@ (801488c <prvAddNewTaskToReadyList+0xc0>)
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	2b01      	cmp	r3, #1
 80147f6:	d110      	bne.n	801481a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80147f8:	f000 fd36 	bl	8015268 <prvInitialiseTaskLists>
 80147fc:	e00d      	b.n	801481a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80147fe:	4b25      	ldr	r3, [pc, #148]	@ (8014894 <prvAddNewTaskToReadyList+0xc8>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d109      	bne.n	801481a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014806:	4b22      	ldr	r3, [pc, #136]	@ (8014890 <prvAddNewTaskToReadyList+0xc4>)
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014810:	429a      	cmp	r2, r3
 8014812:	d802      	bhi.n	801481a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8014814:	4a1e      	ldr	r2, [pc, #120]	@ (8014890 <prvAddNewTaskToReadyList+0xc4>)
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 801481a:	4b1f      	ldr	r3, [pc, #124]	@ (8014898 <prvAddNewTaskToReadyList+0xcc>)
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	3301      	adds	r3, #1
 8014820:	4a1d      	ldr	r2, [pc, #116]	@ (8014898 <prvAddNewTaskToReadyList+0xcc>)
 8014822:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014824:	4b1c      	ldr	r3, [pc, #112]	@ (8014898 <prvAddNewTaskToReadyList+0xcc>)
 8014826:	681a      	ldr	r2, [r3, #0]
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014830:	2201      	movs	r2, #1
 8014832:	409a      	lsls	r2, r3
 8014834:	4b19      	ldr	r3, [pc, #100]	@ (801489c <prvAddNewTaskToReadyList+0xd0>)
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	4313      	orrs	r3, r2
 801483a:	4a18      	ldr	r2, [pc, #96]	@ (801489c <prvAddNewTaskToReadyList+0xd0>)
 801483c:	6013      	str	r3, [r2, #0]
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014842:	4613      	mov	r3, r2
 8014844:	009b      	lsls	r3, r3, #2
 8014846:	4413      	add	r3, r2
 8014848:	009b      	lsls	r3, r3, #2
 801484a:	4a15      	ldr	r2, [pc, #84]	@ (80148a0 <prvAddNewTaskToReadyList+0xd4>)
 801484c:	441a      	add	r2, r3
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	3304      	adds	r3, #4
 8014852:	4619      	mov	r1, r3
 8014854:	4610      	mov	r0, r2
 8014856:	f7ff f810 	bl	801387a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 801485a:	f001 fdc9 	bl	80163f0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 801485e:	4b0d      	ldr	r3, [pc, #52]	@ (8014894 <prvAddNewTaskToReadyList+0xc8>)
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d00e      	beq.n	8014884 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014866:	4b0a      	ldr	r3, [pc, #40]	@ (8014890 <prvAddNewTaskToReadyList+0xc4>)
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014870:	429a      	cmp	r2, r3
 8014872:	d207      	bcs.n	8014884 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8014874:	4b0b      	ldr	r3, [pc, #44]	@ (80148a4 <prvAddNewTaskToReadyList+0xd8>)
 8014876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801487a:	601a      	str	r2, [r3, #0]
 801487c:	f3bf 8f4f 	dsb	sy
 8014880:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8014884:	bf00      	nop
 8014886:	3708      	adds	r7, #8
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}
 801488c:	200015ec 	.word	0x200015ec
 8014890:	20001514 	.word	0x20001514
 8014894:	200015f8 	.word	0x200015f8
 8014898:	20001608 	.word	0x20001608
 801489c:	200015f4 	.word	0x200015f4
 80148a0:	20001518 	.word	0x20001518
 80148a4:	e000ed04 	.word	0xe000ed04

080148a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b084      	sub	sp, #16
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80148b0:	2300      	movs	r3, #0
 80148b2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d018      	beq.n	80148ec <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80148ba:	4b14      	ldr	r3, [pc, #80]	@ (801490c <vTaskDelay+0x64>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d00b      	beq.n	80148da <vTaskDelay+0x32>
        __asm volatile
 80148c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148c6:	f383 8811 	msr	BASEPRI, r3
 80148ca:	f3bf 8f6f 	isb	sy
 80148ce:	f3bf 8f4f 	dsb	sy
 80148d2:	60bb      	str	r3, [r7, #8]
    }
 80148d4:	bf00      	nop
 80148d6:	bf00      	nop
 80148d8:	e7fd      	b.n	80148d6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80148da:	f000 f8e7 	bl	8014aac <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80148de:	2100      	movs	r1, #0
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f001 f89f 	bl	8015a24 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80148e6:	f000 f8ef 	bl	8014ac8 <xTaskResumeAll>
 80148ea:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d107      	bne.n	8014902 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 80148f2:	4b07      	ldr	r3, [pc, #28]	@ (8014910 <vTaskDelay+0x68>)
 80148f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80148f8:	601a      	str	r2, [r3, #0]
 80148fa:	f3bf 8f4f 	dsb	sy
 80148fe:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8014902:	bf00      	nop
 8014904:	3710      	adds	r7, #16
 8014906:	46bd      	mov	sp, r7
 8014908:	bd80      	pop	{r7, pc}
 801490a:	bf00      	nop
 801490c:	20001614 	.word	0x20001614
 8014910:	e000ed04 	.word	0xe000ed04

08014914 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 8014914:	b580      	push	{r7, lr}
 8014916:	b08a      	sub	sp, #40	@ 0x28
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	61fb      	str	r3, [r7, #28]

        configASSERT( pxTCB );
 8014920:	69fb      	ldr	r3, [r7, #28]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d10b      	bne.n	801493e <eTaskGetState+0x2a>
        __asm volatile
 8014926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801492a:	f383 8811 	msr	BASEPRI, r3
 801492e:	f3bf 8f6f 	isb	sy
 8014932:	f3bf 8f4f 	dsb	sy
 8014936:	60fb      	str	r3, [r7, #12]
    }
 8014938:	bf00      	nop
 801493a:	bf00      	nop
 801493c:	e7fd      	b.n	801493a <eTaskGetState+0x26>

        if( pxTCB == pxCurrentTCB )
 801493e:	4b2d      	ldr	r3, [pc, #180]	@ (80149f4 <eTaskGetState+0xe0>)
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	69fa      	ldr	r2, [r7, #28]
 8014944:	429a      	cmp	r2, r3
 8014946:	d103      	bne.n	8014950 <eTaskGetState+0x3c>
        {
            /* The task calling this function is querying its own state. */
            eReturn = eRunning;
 8014948:	2300      	movs	r3, #0
 801494a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801494e:	e04b      	b.n	80149e8 <eTaskGetState+0xd4>
        }
        else
        {
            taskENTER_CRITICAL();
 8014950:	f001 fd1c 	bl	801638c <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8014954:	69fb      	ldr	r3, [r7, #28]
 8014956:	695b      	ldr	r3, [r3, #20]
 8014958:	61bb      	str	r3, [r7, #24]
                pxDelayedList = pxDelayedTaskList;
 801495a:	4b27      	ldr	r3, [pc, #156]	@ (80149f8 <eTaskGetState+0xe4>)
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	617b      	str	r3, [r7, #20]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8014960:	4b26      	ldr	r3, [pc, #152]	@ (80149fc <eTaskGetState+0xe8>)
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	613b      	str	r3, [r7, #16]
            }
            taskEXIT_CRITICAL();
 8014966:	f001 fd43 	bl	80163f0 <vPortExitCritical>

            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801496a:	69ba      	ldr	r2, [r7, #24]
 801496c:	697b      	ldr	r3, [r7, #20]
 801496e:	429a      	cmp	r2, r3
 8014970:	d003      	beq.n	801497a <eTaskGetState+0x66>
 8014972:	69ba      	ldr	r2, [r7, #24]
 8014974:	693b      	ldr	r3, [r7, #16]
 8014976:	429a      	cmp	r2, r3
 8014978:	d103      	bne.n	8014982 <eTaskGetState+0x6e>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 801497a:	2302      	movs	r3, #2
 801497c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014980:	e032      	b.n	80149e8 <eTaskGetState+0xd4>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
 8014982:	69bb      	ldr	r3, [r7, #24]
 8014984:	4a1e      	ldr	r2, [pc, #120]	@ (8014a00 <eTaskGetState+0xec>)
 8014986:	4293      	cmp	r3, r2
 8014988:	d120      	bne.n	80149cc <eTaskGetState+0xb8>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801498a:	69fb      	ldr	r3, [r7, #28]
 801498c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801498e:	2b00      	cmp	r3, #0
 8014990:	d118      	bne.n	80149c4 <eTaskGetState+0xb0>
                                /* The task does not appear on the event list item of
                                 * and of the RTOS objects, but could still be in the
                                 * blocked state if it is waiting on its notification
                                 * rather than waiting on an object.  If not, is
                                 * suspended. */
                                eReturn = eSuspended;
 8014992:	2303      	movs	r3, #3
 8014994:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8014998:	2300      	movs	r3, #0
 801499a:	623b      	str	r3, [r7, #32]
 801499c:	e00e      	b.n	80149bc <eTaskGetState+0xa8>
                                {
                                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 801499e:	69fa      	ldr	r2, [r7, #28]
 80149a0:	6a3b      	ldr	r3, [r7, #32]
 80149a2:	4413      	add	r3, r2
 80149a4:	3354      	adds	r3, #84	@ 0x54
 80149a6:	781b      	ldrb	r3, [r3, #0]
 80149a8:	b2db      	uxtb	r3, r3
 80149aa:	2b01      	cmp	r3, #1
 80149ac:	d103      	bne.n	80149b6 <eTaskGetState+0xa2>
                                    {
                                        eReturn = eBlocked;
 80149ae:	2302      	movs	r3, #2
 80149b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                        break;
 80149b4:	e018      	b.n	80149e8 <eTaskGetState+0xd4>
                                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80149b6:	6a3b      	ldr	r3, [r7, #32]
 80149b8:	3301      	adds	r3, #1
 80149ba:	623b      	str	r3, [r7, #32]
 80149bc:	6a3b      	ldr	r3, [r7, #32]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	dded      	ble.n	801499e <eTaskGetState+0x8a>
 80149c2:	e011      	b.n	80149e8 <eTaskGetState+0xd4>
                            }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
 80149c4:	2302      	movs	r3, #2
 80149c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80149ca:	e00d      	b.n	80149e8 <eTaskGetState+0xd4>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80149cc:	69bb      	ldr	r3, [r7, #24]
 80149ce:	4a0d      	ldr	r2, [pc, #52]	@ (8014a04 <eTaskGetState+0xf0>)
 80149d0:	4293      	cmp	r3, r2
 80149d2:	d002      	beq.n	80149da <eTaskGetState+0xc6>
 80149d4:	69bb      	ldr	r3, [r7, #24]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d103      	bne.n	80149e2 <eTaskGetState+0xce>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 80149da:	2304      	movs	r3, #4
 80149dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80149e0:	e002      	b.n	80149e8 <eTaskGetState+0xd4>

            else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
            {
                /* If the task is not in any other state, it must be in the
                 * Ready (including pending ready) state. */
                eReturn = eReady;
 80149e2:	2301      	movs	r3, #1
 80149e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }

        return eReturn;
 80149e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80149ec:	4618      	mov	r0, r3
 80149ee:	3728      	adds	r7, #40	@ 0x28
 80149f0:	46bd      	mov	sp, r7
 80149f2:	bd80      	pop	{r7, pc}
 80149f4:	20001514 	.word	0x20001514
 80149f8:	200015a4 	.word	0x200015a4
 80149fc:	200015a8 	.word	0x200015a8
 8014a00:	200015d8 	.word	0x200015d8
 8014a04:	200015c0 	.word	0x200015c0

08014a08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b086      	sub	sp, #24
 8014a0c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8014a0e:	4b20      	ldr	r3, [pc, #128]	@ (8014a90 <vTaskStartScheduler+0x88>)
 8014a10:	9301      	str	r3, [sp, #4]
 8014a12:	2300      	movs	r3, #0
 8014a14:	9300      	str	r3, [sp, #0]
 8014a16:	2300      	movs	r3, #0
 8014a18:	2282      	movs	r2, #130	@ 0x82
 8014a1a:	491e      	ldr	r1, [pc, #120]	@ (8014a94 <vTaskStartScheduler+0x8c>)
 8014a1c:	481e      	ldr	r0, [pc, #120]	@ (8014a98 <vTaskStartScheduler+0x90>)
 8014a1e:	f7ff fdfd 	bl	801461c <xTaskCreate>
 8014a22:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	2b01      	cmp	r3, #1
 8014a28:	d102      	bne.n	8014a30 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8014a2a:	f001 f861 	bl	8015af0 <xTimerCreateTimerTask>
 8014a2e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	2b01      	cmp	r3, #1
 8014a34:	d116      	bne.n	8014a64 <vTaskStartScheduler+0x5c>
        __asm volatile
 8014a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a3a:	f383 8811 	msr	BASEPRI, r3
 8014a3e:	f3bf 8f6f 	isb	sy
 8014a42:	f3bf 8f4f 	dsb	sy
 8014a46:	60bb      	str	r3, [r7, #8]
    }
 8014a48:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8014a4a:	4b14      	ldr	r3, [pc, #80]	@ (8014a9c <vTaskStartScheduler+0x94>)
 8014a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8014a50:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8014a52:	4b13      	ldr	r3, [pc, #76]	@ (8014aa0 <vTaskStartScheduler+0x98>)
 8014a54:	2201      	movs	r2, #1
 8014a56:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014a58:	4b12      	ldr	r3, [pc, #72]	@ (8014aa4 <vTaskStartScheduler+0x9c>)
 8014a5a:	2200      	movs	r2, #0
 8014a5c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8014a5e:	f001 fbf1 	bl	8016244 <xPortStartScheduler>
 8014a62:	e00f      	b.n	8014a84 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a6a:	d10b      	bne.n	8014a84 <vTaskStartScheduler+0x7c>
        __asm volatile
 8014a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a70:	f383 8811 	msr	BASEPRI, r3
 8014a74:	f3bf 8f6f 	isb	sy
 8014a78:	f3bf 8f4f 	dsb	sy
 8014a7c:	607b      	str	r3, [r7, #4]
    }
 8014a7e:	bf00      	nop
 8014a80:	bf00      	nop
 8014a82:	e7fd      	b.n	8014a80 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8014a84:	4b08      	ldr	r3, [pc, #32]	@ (8014aa8 <vTaskStartScheduler+0xa0>)
 8014a86:	681b      	ldr	r3, [r3, #0]
}
 8014a88:	bf00      	nop
 8014a8a:	3710      	adds	r7, #16
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bd80      	pop	{r7, pc}
 8014a90:	20001610 	.word	0x20001610
 8014a94:	0801bf98 	.word	0x0801bf98
 8014a98:	08015239 	.word	0x08015239
 8014a9c:	2000160c 	.word	0x2000160c
 8014aa0:	200015f8 	.word	0x200015f8
 8014aa4:	200015f0 	.word	0x200015f0
 8014aa8:	0801db14 	.word	0x0801db14

08014aac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014aac:	b480      	push	{r7}
 8014aae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8014ab0:	4b04      	ldr	r3, [pc, #16]	@ (8014ac4 <vTaskSuspendAll+0x18>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	3301      	adds	r3, #1
 8014ab6:	4a03      	ldr	r2, [pc, #12]	@ (8014ac4 <vTaskSuspendAll+0x18>)
 8014ab8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8014aba:	bf00      	nop
 8014abc:	46bd      	mov	sp, r7
 8014abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac2:	4770      	bx	lr
 8014ac4:	20001614 	.word	0x20001614

08014ac8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b084      	sub	sp, #16
 8014acc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8014ace:	2300      	movs	r3, #0
 8014ad0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8014ad6:	4b42      	ldr	r3, [pc, #264]	@ (8014be0 <xTaskResumeAll+0x118>)
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d10b      	bne.n	8014af6 <xTaskResumeAll+0x2e>
        __asm volatile
 8014ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ae2:	f383 8811 	msr	BASEPRI, r3
 8014ae6:	f3bf 8f6f 	isb	sy
 8014aea:	f3bf 8f4f 	dsb	sy
 8014aee:	603b      	str	r3, [r7, #0]
    }
 8014af0:	bf00      	nop
 8014af2:	bf00      	nop
 8014af4:	e7fd      	b.n	8014af2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8014af6:	f001 fc49 	bl	801638c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8014afa:	4b39      	ldr	r3, [pc, #228]	@ (8014be0 <xTaskResumeAll+0x118>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	3b01      	subs	r3, #1
 8014b00:	4a37      	ldr	r2, [pc, #220]	@ (8014be0 <xTaskResumeAll+0x118>)
 8014b02:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014b04:	4b36      	ldr	r3, [pc, #216]	@ (8014be0 <xTaskResumeAll+0x118>)
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d161      	bne.n	8014bd0 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014b0c:	4b35      	ldr	r3, [pc, #212]	@ (8014be4 <xTaskResumeAll+0x11c>)
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d05d      	beq.n	8014bd0 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014b14:	e02e      	b.n	8014b74 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b16:	4b34      	ldr	r3, [pc, #208]	@ (8014be8 <xTaskResumeAll+0x120>)
 8014b18:	68db      	ldr	r3, [r3, #12]
 8014b1a:	68db      	ldr	r3, [r3, #12]
 8014b1c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	3318      	adds	r3, #24
 8014b22:	4618      	mov	r0, r3
 8014b24:	f7fe ff06 	bl	8013934 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	3304      	adds	r3, #4
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	f7fe ff01 	bl	8013934 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b36:	2201      	movs	r2, #1
 8014b38:	409a      	lsls	r2, r3
 8014b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8014bec <xTaskResumeAll+0x124>)
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	4313      	orrs	r3, r2
 8014b40:	4a2a      	ldr	r2, [pc, #168]	@ (8014bec <xTaskResumeAll+0x124>)
 8014b42:	6013      	str	r3, [r2, #0]
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b48:	4613      	mov	r3, r2
 8014b4a:	009b      	lsls	r3, r3, #2
 8014b4c:	4413      	add	r3, r2
 8014b4e:	009b      	lsls	r3, r3, #2
 8014b50:	4a27      	ldr	r2, [pc, #156]	@ (8014bf0 <xTaskResumeAll+0x128>)
 8014b52:	441a      	add	r2, r3
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	3304      	adds	r3, #4
 8014b58:	4619      	mov	r1, r3
 8014b5a:	4610      	mov	r0, r2
 8014b5c:	f7fe fe8d 	bl	801387a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b64:	4b23      	ldr	r3, [pc, #140]	@ (8014bf4 <xTaskResumeAll+0x12c>)
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b6a:	429a      	cmp	r2, r3
 8014b6c:	d302      	bcc.n	8014b74 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8014b6e:	4b22      	ldr	r3, [pc, #136]	@ (8014bf8 <xTaskResumeAll+0x130>)
 8014b70:	2201      	movs	r2, #1
 8014b72:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014b74:	4b1c      	ldr	r3, [pc, #112]	@ (8014be8 <xTaskResumeAll+0x120>)
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d1cc      	bne.n	8014b16 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d001      	beq.n	8014b86 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8014b82:	f000 fcc3 	bl	801550c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014b86:	4b1d      	ldr	r3, [pc, #116]	@ (8014bfc <xTaskResumeAll+0x134>)
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d010      	beq.n	8014bb4 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8014b92:	f000 f8d5 	bl	8014d40 <xTaskIncrementTick>
 8014b96:	4603      	mov	r3, r0
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d002      	beq.n	8014ba2 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8014b9c:	4b16      	ldr	r3, [pc, #88]	@ (8014bf8 <xTaskResumeAll+0x130>)
 8014b9e:	2201      	movs	r2, #1
 8014ba0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	3b01      	subs	r3, #1
 8014ba6:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d1f1      	bne.n	8014b92 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8014bae:	4b13      	ldr	r3, [pc, #76]	@ (8014bfc <xTaskResumeAll+0x134>)
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8014bb4:	4b10      	ldr	r3, [pc, #64]	@ (8014bf8 <xTaskResumeAll+0x130>)
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d009      	beq.n	8014bd0 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8014bbc:	2301      	movs	r3, #1
 8014bbe:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8014bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8014c00 <xTaskResumeAll+0x138>)
 8014bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014bc6:	601a      	str	r2, [r3, #0]
 8014bc8:	f3bf 8f4f 	dsb	sy
 8014bcc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8014bd0:	f001 fc0e 	bl	80163f0 <vPortExitCritical>

    return xAlreadyYielded;
 8014bd4:	68bb      	ldr	r3, [r7, #8]
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	3710      	adds	r7, #16
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}
 8014bde:	bf00      	nop
 8014be0:	20001614 	.word	0x20001614
 8014be4:	200015ec 	.word	0x200015ec
 8014be8:	200015ac 	.word	0x200015ac
 8014bec:	200015f4 	.word	0x200015f4
 8014bf0:	20001518 	.word	0x20001518
 8014bf4:	20001514 	.word	0x20001514
 8014bf8:	20001600 	.word	0x20001600
 8014bfc:	200015fc 	.word	0x200015fc
 8014c00:	e000ed04 	.word	0xe000ed04

08014c04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014c04:	b480      	push	{r7}
 8014c06:	b083      	sub	sp, #12
 8014c08:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8014c0a:	4b05      	ldr	r3, [pc, #20]	@ (8014c20 <xTaskGetTickCount+0x1c>)
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8014c10:	687b      	ldr	r3, [r7, #4]
}
 8014c12:	4618      	mov	r0, r3
 8014c14:	370c      	adds	r7, #12
 8014c16:	46bd      	mov	sp, r7
 8014c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1c:	4770      	bx	lr
 8014c1e:	bf00      	nop
 8014c20:	200015f0 	.word	0x200015f0

08014c24 <uxTaskGetSystemState>:
#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                      const UBaseType_t uxArraySize,
                                      uint32_t * const pulTotalRunTime )
    {
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b086      	sub	sp, #24
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	60f8      	str	r0, [r7, #12]
 8014c2c:	60b9      	str	r1, [r7, #8]
 8014c2e:	607a      	str	r2, [r7, #4]
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8014c30:	2300      	movs	r3, #0
 8014c32:	617b      	str	r3, [r7, #20]
 8014c34:	2305      	movs	r3, #5
 8014c36:	613b      	str	r3, [r7, #16]

        vTaskSuspendAll();
 8014c38:	f7ff ff38 	bl	8014aac <vTaskSuspendAll>
        {
            /* Is there a space in the array for each task in the system? */
            if( uxArraySize >= uxCurrentNumberOfTasks )
 8014c3c:	4b3a      	ldr	r3, [pc, #232]	@ (8014d28 <uxTaskGetSystemState+0x104>)
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	68ba      	ldr	r2, [r7, #8]
 8014c42:	429a      	cmp	r2, r3
 8014c44:	d368      	bcc.n	8014d18 <uxTaskGetSystemState+0xf4>
            {
                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Ready state. */
                do
                {
                    uxQueue--;
 8014c46:	693b      	ldr	r3, [r7, #16]
 8014c48:	3b01      	subs	r3, #1
 8014c4a:	613b      	str	r3, [r7, #16]
                    uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8014c4c:	697a      	ldr	r2, [r7, #20]
 8014c4e:	4613      	mov	r3, r2
 8014c50:	00db      	lsls	r3, r3, #3
 8014c52:	4413      	add	r3, r2
 8014c54:	009b      	lsls	r3, r3, #2
 8014c56:	461a      	mov	r2, r3
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	1898      	adds	r0, r3, r2
 8014c5c:	693a      	ldr	r2, [r7, #16]
 8014c5e:	4613      	mov	r3, r2
 8014c60:	009b      	lsls	r3, r3, #2
 8014c62:	4413      	add	r3, r2
 8014c64:	009b      	lsls	r3, r3, #2
 8014c66:	4a31      	ldr	r2, [pc, #196]	@ (8014d2c <uxTaskGetSystemState+0x108>)
 8014c68:	4413      	add	r3, r2
 8014c6a:	2201      	movs	r2, #1
 8014c6c:	4619      	mov	r1, r3
 8014c6e:	f000 fbcf 	bl	8015410 <prvListTasksWithinSingleList>
 8014c72:	4602      	mov	r2, r0
 8014c74:	697b      	ldr	r3, [r7, #20]
 8014c76:	4413      	add	r3, r2
 8014c78:	617b      	str	r3, [r7, #20]
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c7a:	693b      	ldr	r3, [r7, #16]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d1e2      	bne.n	8014c46 <uxTaskGetSystemState+0x22>

                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Blocked state. */
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8014c80:	697a      	ldr	r2, [r7, #20]
 8014c82:	4613      	mov	r3, r2
 8014c84:	00db      	lsls	r3, r3, #3
 8014c86:	4413      	add	r3, r2
 8014c88:	009b      	lsls	r3, r3, #2
 8014c8a:	461a      	mov	r2, r3
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	4413      	add	r3, r2
 8014c90:	4a27      	ldr	r2, [pc, #156]	@ (8014d30 <uxTaskGetSystemState+0x10c>)
 8014c92:	6811      	ldr	r1, [r2, #0]
 8014c94:	2202      	movs	r2, #2
 8014c96:	4618      	mov	r0, r3
 8014c98:	f000 fbba 	bl	8015410 <prvListTasksWithinSingleList>
 8014c9c:	4602      	mov	r2, r0
 8014c9e:	697b      	ldr	r3, [r7, #20]
 8014ca0:	4413      	add	r3, r2
 8014ca2:	617b      	str	r3, [r7, #20]
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8014ca4:	697a      	ldr	r2, [r7, #20]
 8014ca6:	4613      	mov	r3, r2
 8014ca8:	00db      	lsls	r3, r3, #3
 8014caa:	4413      	add	r3, r2
 8014cac:	009b      	lsls	r3, r3, #2
 8014cae:	461a      	mov	r2, r3
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	4413      	add	r3, r2
 8014cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8014d34 <uxTaskGetSystemState+0x110>)
 8014cb6:	6811      	ldr	r1, [r2, #0]
 8014cb8:	2202      	movs	r2, #2
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f000 fba8 	bl	8015410 <prvListTasksWithinSingleList>
 8014cc0:	4602      	mov	r2, r0
 8014cc2:	697b      	ldr	r3, [r7, #20]
 8014cc4:	4413      	add	r3, r2
 8014cc6:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskDelete == 1 )
                    {
                        /* Fill in an TaskStatus_t structure with information on
                         * each task that has been deleted but not yet cleaned up. */
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8014cc8:	697a      	ldr	r2, [r7, #20]
 8014cca:	4613      	mov	r3, r2
 8014ccc:	00db      	lsls	r3, r3, #3
 8014cce:	4413      	add	r3, r2
 8014cd0:	009b      	lsls	r3, r3, #2
 8014cd2:	461a      	mov	r2, r3
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	4413      	add	r3, r2
 8014cd8:	2204      	movs	r2, #4
 8014cda:	4917      	ldr	r1, [pc, #92]	@ (8014d38 <uxTaskGetSystemState+0x114>)
 8014cdc:	4618      	mov	r0, r3
 8014cde:	f000 fb97 	bl	8015410 <prvListTasksWithinSingleList>
 8014ce2:	4602      	mov	r2, r0
 8014ce4:	697b      	ldr	r3, [r7, #20]
 8014ce6:	4413      	add	r3, r2
 8014ce8:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskSuspend == 1 )
                    {
                        /* Fill in an TaskStatus_t structure with information on
                         * each task in the Suspended state. */
                        uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8014cea:	697a      	ldr	r2, [r7, #20]
 8014cec:	4613      	mov	r3, r2
 8014cee:	00db      	lsls	r3, r3, #3
 8014cf0:	4413      	add	r3, r2
 8014cf2:	009b      	lsls	r3, r3, #2
 8014cf4:	461a      	mov	r2, r3
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	4413      	add	r3, r2
 8014cfa:	2203      	movs	r2, #3
 8014cfc:	490f      	ldr	r1, [pc, #60]	@ (8014d3c <uxTaskGetSystemState+0x118>)
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f000 fb86 	bl	8015410 <prvListTasksWithinSingleList>
 8014d04:	4602      	mov	r2, r0
 8014d06:	697b      	ldr	r3, [r7, #20]
 8014d08:	4413      	add	r3, r2
 8014d0a:	617b      	str	r3, [r7, #20]
                            #endif
                        }
                    }
                #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
                    {
                        if( pulTotalRunTime != NULL )
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d002      	beq.n	8014d18 <uxTaskGetSystemState+0xf4>
                        {
                            *pulTotalRunTime = 0;
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	2200      	movs	r2, #0
 8014d16:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        ( void ) xTaskResumeAll();
 8014d18:	f7ff fed6 	bl	8014ac8 <xTaskResumeAll>

        return uxTask;
 8014d1c:	697b      	ldr	r3, [r7, #20]
    }
 8014d1e:	4618      	mov	r0, r3
 8014d20:	3718      	adds	r7, #24
 8014d22:	46bd      	mov	sp, r7
 8014d24:	bd80      	pop	{r7, pc}
 8014d26:	bf00      	nop
 8014d28:	200015ec 	.word	0x200015ec
 8014d2c:	20001518 	.word	0x20001518
 8014d30:	200015a4 	.word	0x200015a4
 8014d34:	200015a8 	.word	0x200015a8
 8014d38:	200015c0 	.word	0x200015c0
 8014d3c:	200015d8 	.word	0x200015d8

08014d40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b086      	sub	sp, #24
 8014d44:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8014d46:	2300      	movs	r3, #0
 8014d48:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014d4a:	4b4f      	ldr	r3, [pc, #316]	@ (8014e88 <xTaskIncrementTick+0x148>)
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	f040 808f 	bne.w	8014e72 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014d54:	4b4d      	ldr	r3, [pc, #308]	@ (8014e8c <xTaskIncrementTick+0x14c>)
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	3301      	adds	r3, #1
 8014d5a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8014d5c:	4a4b      	ldr	r2, [pc, #300]	@ (8014e8c <xTaskIncrementTick+0x14c>)
 8014d5e:	693b      	ldr	r3, [r7, #16]
 8014d60:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014d62:	693b      	ldr	r3, [r7, #16]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d121      	bne.n	8014dac <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8014d68:	4b49      	ldr	r3, [pc, #292]	@ (8014e90 <xTaskIncrementTick+0x150>)
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d00b      	beq.n	8014d8a <xTaskIncrementTick+0x4a>
        __asm volatile
 8014d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d76:	f383 8811 	msr	BASEPRI, r3
 8014d7a:	f3bf 8f6f 	isb	sy
 8014d7e:	f3bf 8f4f 	dsb	sy
 8014d82:	603b      	str	r3, [r7, #0]
    }
 8014d84:	bf00      	nop
 8014d86:	bf00      	nop
 8014d88:	e7fd      	b.n	8014d86 <xTaskIncrementTick+0x46>
 8014d8a:	4b41      	ldr	r3, [pc, #260]	@ (8014e90 <xTaskIncrementTick+0x150>)
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	60fb      	str	r3, [r7, #12]
 8014d90:	4b40      	ldr	r3, [pc, #256]	@ (8014e94 <xTaskIncrementTick+0x154>)
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	4a3e      	ldr	r2, [pc, #248]	@ (8014e90 <xTaskIncrementTick+0x150>)
 8014d96:	6013      	str	r3, [r2, #0]
 8014d98:	4a3e      	ldr	r2, [pc, #248]	@ (8014e94 <xTaskIncrementTick+0x154>)
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	6013      	str	r3, [r2, #0]
 8014d9e:	4b3e      	ldr	r3, [pc, #248]	@ (8014e98 <xTaskIncrementTick+0x158>)
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	3301      	adds	r3, #1
 8014da4:	4a3c      	ldr	r2, [pc, #240]	@ (8014e98 <xTaskIncrementTick+0x158>)
 8014da6:	6013      	str	r3, [r2, #0]
 8014da8:	f000 fbb0 	bl	801550c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8014dac:	4b3b      	ldr	r3, [pc, #236]	@ (8014e9c <xTaskIncrementTick+0x15c>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	693a      	ldr	r2, [r7, #16]
 8014db2:	429a      	cmp	r2, r3
 8014db4:	d348      	bcc.n	8014e48 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014db6:	4b36      	ldr	r3, [pc, #216]	@ (8014e90 <xTaskIncrementTick+0x150>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d104      	bne.n	8014dca <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014dc0:	4b36      	ldr	r3, [pc, #216]	@ (8014e9c <xTaskIncrementTick+0x15c>)
 8014dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8014dc6:	601a      	str	r2, [r3, #0]
                    break;
 8014dc8:	e03e      	b.n	8014e48 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014dca:	4b31      	ldr	r3, [pc, #196]	@ (8014e90 <xTaskIncrementTick+0x150>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	68db      	ldr	r3, [r3, #12]
 8014dd0:	68db      	ldr	r3, [r3, #12]
 8014dd2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014dd4:	68bb      	ldr	r3, [r7, #8]
 8014dd6:	685b      	ldr	r3, [r3, #4]
 8014dd8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8014dda:	693a      	ldr	r2, [r7, #16]
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	429a      	cmp	r2, r3
 8014de0:	d203      	bcs.n	8014dea <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8014de2:	4a2e      	ldr	r2, [pc, #184]	@ (8014e9c <xTaskIncrementTick+0x15c>)
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014de8:	e02e      	b.n	8014e48 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014dea:	68bb      	ldr	r3, [r7, #8]
 8014dec:	3304      	adds	r3, #4
 8014dee:	4618      	mov	r0, r3
 8014df0:	f7fe fda0 	bl	8013934 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014df4:	68bb      	ldr	r3, [r7, #8]
 8014df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d004      	beq.n	8014e06 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014dfc:	68bb      	ldr	r3, [r7, #8]
 8014dfe:	3318      	adds	r3, #24
 8014e00:	4618      	mov	r0, r3
 8014e02:	f7fe fd97 	bl	8013934 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8014e06:	68bb      	ldr	r3, [r7, #8]
 8014e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e0a:	2201      	movs	r2, #1
 8014e0c:	409a      	lsls	r2, r3
 8014e0e:	4b24      	ldr	r3, [pc, #144]	@ (8014ea0 <xTaskIncrementTick+0x160>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	4313      	orrs	r3, r2
 8014e14:	4a22      	ldr	r2, [pc, #136]	@ (8014ea0 <xTaskIncrementTick+0x160>)
 8014e16:	6013      	str	r3, [r2, #0]
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e1c:	4613      	mov	r3, r2
 8014e1e:	009b      	lsls	r3, r3, #2
 8014e20:	4413      	add	r3, r2
 8014e22:	009b      	lsls	r3, r3, #2
 8014e24:	4a1f      	ldr	r2, [pc, #124]	@ (8014ea4 <xTaskIncrementTick+0x164>)
 8014e26:	441a      	add	r2, r3
 8014e28:	68bb      	ldr	r3, [r7, #8]
 8014e2a:	3304      	adds	r3, #4
 8014e2c:	4619      	mov	r1, r3
 8014e2e:	4610      	mov	r0, r2
 8014e30:	f7fe fd23 	bl	801387a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014e34:	68bb      	ldr	r3, [r7, #8]
 8014e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e38:	4b1b      	ldr	r3, [pc, #108]	@ (8014ea8 <xTaskIncrementTick+0x168>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e3e:	429a      	cmp	r2, r3
 8014e40:	d3b9      	bcc.n	8014db6 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8014e42:	2301      	movs	r3, #1
 8014e44:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014e46:	e7b6      	b.n	8014db6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014e48:	4b17      	ldr	r3, [pc, #92]	@ (8014ea8 <xTaskIncrementTick+0x168>)
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e4e:	4915      	ldr	r1, [pc, #84]	@ (8014ea4 <xTaskIncrementTick+0x164>)
 8014e50:	4613      	mov	r3, r2
 8014e52:	009b      	lsls	r3, r3, #2
 8014e54:	4413      	add	r3, r2
 8014e56:	009b      	lsls	r3, r3, #2
 8014e58:	440b      	add	r3, r1
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	2b01      	cmp	r3, #1
 8014e5e:	d901      	bls.n	8014e64 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8014e60:	2301      	movs	r3, #1
 8014e62:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8014e64:	4b11      	ldr	r3, [pc, #68]	@ (8014eac <xTaskIncrementTick+0x16c>)
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d007      	beq.n	8014e7c <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8014e6c:	2301      	movs	r3, #1
 8014e6e:	617b      	str	r3, [r7, #20]
 8014e70:	e004      	b.n	8014e7c <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8014e72:	4b0f      	ldr	r3, [pc, #60]	@ (8014eb0 <xTaskIncrementTick+0x170>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	3301      	adds	r3, #1
 8014e78:	4a0d      	ldr	r2, [pc, #52]	@ (8014eb0 <xTaskIncrementTick+0x170>)
 8014e7a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8014e7c:	697b      	ldr	r3, [r7, #20]
}
 8014e7e:	4618      	mov	r0, r3
 8014e80:	3718      	adds	r7, #24
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bd80      	pop	{r7, pc}
 8014e86:	bf00      	nop
 8014e88:	20001614 	.word	0x20001614
 8014e8c:	200015f0 	.word	0x200015f0
 8014e90:	200015a4 	.word	0x200015a4
 8014e94:	200015a8 	.word	0x200015a8
 8014e98:	20001604 	.word	0x20001604
 8014e9c:	2000160c 	.word	0x2000160c
 8014ea0:	200015f4 	.word	0x200015f4
 8014ea4:	20001518 	.word	0x20001518
 8014ea8:	20001514 	.word	0x20001514
 8014eac:	20001600 	.word	0x20001600
 8014eb0:	200015fc 	.word	0x200015fc

08014eb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b088      	sub	sp, #32
 8014eb8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014eba:	4b3a      	ldr	r3, [pc, #232]	@ (8014fa4 <vTaskSwitchContext+0xf0>)
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d003      	beq.n	8014eca <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8014ec2:	4b39      	ldr	r3, [pc, #228]	@ (8014fa8 <vTaskSwitchContext+0xf4>)
 8014ec4:	2201      	movs	r2, #1
 8014ec6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8014ec8:	e067      	b.n	8014f9a <vTaskSwitchContext+0xe6>
        xYieldPending = pdFALSE;
 8014eca:	4b37      	ldr	r3, [pc, #220]	@ (8014fa8 <vTaskSwitchContext+0xf4>)
 8014ecc:	2200      	movs	r2, #0
 8014ece:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8014ed0:	4b36      	ldr	r3, [pc, #216]	@ (8014fac <vTaskSwitchContext+0xf8>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ed6:	61fb      	str	r3, [r7, #28]
 8014ed8:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8014edc:	61bb      	str	r3, [r7, #24]
 8014ede:	69fb      	ldr	r3, [r7, #28]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	69ba      	ldr	r2, [r7, #24]
 8014ee4:	429a      	cmp	r2, r3
 8014ee6:	d111      	bne.n	8014f0c <vTaskSwitchContext+0x58>
 8014ee8:	69fb      	ldr	r3, [r7, #28]
 8014eea:	3304      	adds	r3, #4
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	69ba      	ldr	r2, [r7, #24]
 8014ef0:	429a      	cmp	r2, r3
 8014ef2:	d10b      	bne.n	8014f0c <vTaskSwitchContext+0x58>
 8014ef4:	69fb      	ldr	r3, [r7, #28]
 8014ef6:	3308      	adds	r3, #8
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	69ba      	ldr	r2, [r7, #24]
 8014efc:	429a      	cmp	r2, r3
 8014efe:	d105      	bne.n	8014f0c <vTaskSwitchContext+0x58>
 8014f00:	69fb      	ldr	r3, [r7, #28]
 8014f02:	330c      	adds	r3, #12
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	69ba      	ldr	r2, [r7, #24]
 8014f08:	429a      	cmp	r2, r3
 8014f0a:	d008      	beq.n	8014f1e <vTaskSwitchContext+0x6a>
 8014f0c:	4b27      	ldr	r3, [pc, #156]	@ (8014fac <vTaskSwitchContext+0xf8>)
 8014f0e:	681a      	ldr	r2, [r3, #0]
 8014f10:	4b26      	ldr	r3, [pc, #152]	@ (8014fac <vTaskSwitchContext+0xf8>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	3334      	adds	r3, #52	@ 0x34
 8014f16:	4619      	mov	r1, r3
 8014f18:	4610      	mov	r0, r2
 8014f1a:	f7fa ffe3 	bl	800fee4 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f1e:	4b24      	ldr	r3, [pc, #144]	@ (8014fb0 <vTaskSwitchContext+0xfc>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	fab3 f383 	clz	r3, r3
 8014f2a:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8014f2c:	7afb      	ldrb	r3, [r7, #11]
 8014f2e:	f1c3 031f 	rsb	r3, r3, #31
 8014f32:	617b      	str	r3, [r7, #20]
 8014f34:	491f      	ldr	r1, [pc, #124]	@ (8014fb4 <vTaskSwitchContext+0x100>)
 8014f36:	697a      	ldr	r2, [r7, #20]
 8014f38:	4613      	mov	r3, r2
 8014f3a:	009b      	lsls	r3, r3, #2
 8014f3c:	4413      	add	r3, r2
 8014f3e:	009b      	lsls	r3, r3, #2
 8014f40:	440b      	add	r3, r1
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d10b      	bne.n	8014f60 <vTaskSwitchContext+0xac>
        __asm volatile
 8014f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f4c:	f383 8811 	msr	BASEPRI, r3
 8014f50:	f3bf 8f6f 	isb	sy
 8014f54:	f3bf 8f4f 	dsb	sy
 8014f58:	607b      	str	r3, [r7, #4]
    }
 8014f5a:	bf00      	nop
 8014f5c:	bf00      	nop
 8014f5e:	e7fd      	b.n	8014f5c <vTaskSwitchContext+0xa8>
 8014f60:	697a      	ldr	r2, [r7, #20]
 8014f62:	4613      	mov	r3, r2
 8014f64:	009b      	lsls	r3, r3, #2
 8014f66:	4413      	add	r3, r2
 8014f68:	009b      	lsls	r3, r3, #2
 8014f6a:	4a12      	ldr	r2, [pc, #72]	@ (8014fb4 <vTaskSwitchContext+0x100>)
 8014f6c:	4413      	add	r3, r2
 8014f6e:	613b      	str	r3, [r7, #16]
 8014f70:	693b      	ldr	r3, [r7, #16]
 8014f72:	685b      	ldr	r3, [r3, #4]
 8014f74:	685a      	ldr	r2, [r3, #4]
 8014f76:	693b      	ldr	r3, [r7, #16]
 8014f78:	605a      	str	r2, [r3, #4]
 8014f7a:	693b      	ldr	r3, [r7, #16]
 8014f7c:	685a      	ldr	r2, [r3, #4]
 8014f7e:	693b      	ldr	r3, [r7, #16]
 8014f80:	3308      	adds	r3, #8
 8014f82:	429a      	cmp	r2, r3
 8014f84:	d104      	bne.n	8014f90 <vTaskSwitchContext+0xdc>
 8014f86:	693b      	ldr	r3, [r7, #16]
 8014f88:	685b      	ldr	r3, [r3, #4]
 8014f8a:	685a      	ldr	r2, [r3, #4]
 8014f8c:	693b      	ldr	r3, [r7, #16]
 8014f8e:	605a      	str	r2, [r3, #4]
 8014f90:	693b      	ldr	r3, [r7, #16]
 8014f92:	685b      	ldr	r3, [r3, #4]
 8014f94:	68db      	ldr	r3, [r3, #12]
 8014f96:	4a05      	ldr	r2, [pc, #20]	@ (8014fac <vTaskSwitchContext+0xf8>)
 8014f98:	6013      	str	r3, [r2, #0]
}
 8014f9a:	bf00      	nop
 8014f9c:	3720      	adds	r7, #32
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	bd80      	pop	{r7, pc}
 8014fa2:	bf00      	nop
 8014fa4:	20001614 	.word	0x20001614
 8014fa8:	20001600 	.word	0x20001600
 8014fac:	20001514 	.word	0x20001514
 8014fb0:	200015f4 	.word	0x200015f4
 8014fb4:	20001518 	.word	0x20001518

08014fb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b084      	sub	sp, #16
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
 8014fc0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d10b      	bne.n	8014fe0 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8014fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fcc:	f383 8811 	msr	BASEPRI, r3
 8014fd0:	f3bf 8f6f 	isb	sy
 8014fd4:	f3bf 8f4f 	dsb	sy
 8014fd8:	60fb      	str	r3, [r7, #12]
    }
 8014fda:	bf00      	nop
 8014fdc:	bf00      	nop
 8014fde:	e7fd      	b.n	8014fdc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014fe0:	4b07      	ldr	r3, [pc, #28]	@ (8015000 <vTaskPlaceOnEventList+0x48>)
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	3318      	adds	r3, #24
 8014fe6:	4619      	mov	r1, r3
 8014fe8:	6878      	ldr	r0, [r7, #4]
 8014fea:	f7fe fc6a 	bl	80138c2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014fee:	2101      	movs	r1, #1
 8014ff0:	6838      	ldr	r0, [r7, #0]
 8014ff2:	f000 fd17 	bl	8015a24 <prvAddCurrentTaskToDelayedList>
}
 8014ff6:	bf00      	nop
 8014ff8:	3710      	adds	r7, #16
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	bd80      	pop	{r7, pc}
 8014ffe:	bf00      	nop
 8015000:	20001514 	.word	0x20001514

08015004 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8015004:	b580      	push	{r7, lr}
 8015006:	b086      	sub	sp, #24
 8015008:	af00      	add	r7, sp, #0
 801500a:	60f8      	str	r0, [r7, #12]
 801500c:	60b9      	str	r1, [r7, #8]
 801500e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d10b      	bne.n	801502e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8015016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801501a:	f383 8811 	msr	BASEPRI, r3
 801501e:	f3bf 8f6f 	isb	sy
 8015022:	f3bf 8f4f 	dsb	sy
 8015026:	617b      	str	r3, [r7, #20]
    }
 8015028:	bf00      	nop
 801502a:	bf00      	nop
 801502c:	e7fd      	b.n	801502a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801502e:	4b0a      	ldr	r3, [pc, #40]	@ (8015058 <vTaskPlaceOnEventListRestricted+0x54>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	3318      	adds	r3, #24
 8015034:	4619      	mov	r1, r3
 8015036:	68f8      	ldr	r0, [r7, #12]
 8015038:	f7fe fc1f 	bl	801387a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d002      	beq.n	8015048 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8015042:	f04f 33ff 	mov.w	r3, #4294967295
 8015046:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015048:	6879      	ldr	r1, [r7, #4]
 801504a:	68b8      	ldr	r0, [r7, #8]
 801504c:	f000 fcea 	bl	8015a24 <prvAddCurrentTaskToDelayedList>
    }
 8015050:	bf00      	nop
 8015052:	3718      	adds	r7, #24
 8015054:	46bd      	mov	sp, r7
 8015056:	bd80      	pop	{r7, pc}
 8015058:	20001514 	.word	0x20001514

0801505c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801505c:	b580      	push	{r7, lr}
 801505e:	b086      	sub	sp, #24
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	68db      	ldr	r3, [r3, #12]
 8015068:	68db      	ldr	r3, [r3, #12]
 801506a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 801506c:	693b      	ldr	r3, [r7, #16]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d10b      	bne.n	801508a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8015072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015076:	f383 8811 	msr	BASEPRI, r3
 801507a:	f3bf 8f6f 	isb	sy
 801507e:	f3bf 8f4f 	dsb	sy
 8015082:	60fb      	str	r3, [r7, #12]
    }
 8015084:	bf00      	nop
 8015086:	bf00      	nop
 8015088:	e7fd      	b.n	8015086 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801508a:	693b      	ldr	r3, [r7, #16]
 801508c:	3318      	adds	r3, #24
 801508e:	4618      	mov	r0, r3
 8015090:	f7fe fc50 	bl	8013934 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015094:	4b1d      	ldr	r3, [pc, #116]	@ (801510c <xTaskRemoveFromEventList+0xb0>)
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d11c      	bne.n	80150d6 <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801509c:	693b      	ldr	r3, [r7, #16]
 801509e:	3304      	adds	r3, #4
 80150a0:	4618      	mov	r0, r3
 80150a2:	f7fe fc47 	bl	8013934 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80150a6:	693b      	ldr	r3, [r7, #16]
 80150a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150aa:	2201      	movs	r2, #1
 80150ac:	409a      	lsls	r2, r3
 80150ae:	4b18      	ldr	r3, [pc, #96]	@ (8015110 <xTaskRemoveFromEventList+0xb4>)
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	4313      	orrs	r3, r2
 80150b4:	4a16      	ldr	r2, [pc, #88]	@ (8015110 <xTaskRemoveFromEventList+0xb4>)
 80150b6:	6013      	str	r3, [r2, #0]
 80150b8:	693b      	ldr	r3, [r7, #16]
 80150ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150bc:	4613      	mov	r3, r2
 80150be:	009b      	lsls	r3, r3, #2
 80150c0:	4413      	add	r3, r2
 80150c2:	009b      	lsls	r3, r3, #2
 80150c4:	4a13      	ldr	r2, [pc, #76]	@ (8015114 <xTaskRemoveFromEventList+0xb8>)
 80150c6:	441a      	add	r2, r3
 80150c8:	693b      	ldr	r3, [r7, #16]
 80150ca:	3304      	adds	r3, #4
 80150cc:	4619      	mov	r1, r3
 80150ce:	4610      	mov	r0, r2
 80150d0:	f7fe fbd3 	bl	801387a <vListInsertEnd>
 80150d4:	e005      	b.n	80150e2 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80150d6:	693b      	ldr	r3, [r7, #16]
 80150d8:	3318      	adds	r3, #24
 80150da:	4619      	mov	r1, r3
 80150dc:	480e      	ldr	r0, [pc, #56]	@ (8015118 <xTaskRemoveFromEventList+0xbc>)
 80150de:	f7fe fbcc 	bl	801387a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80150e2:	693b      	ldr	r3, [r7, #16]
 80150e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150e6:	4b0d      	ldr	r3, [pc, #52]	@ (801511c <xTaskRemoveFromEventList+0xc0>)
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d905      	bls.n	80150fc <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80150f0:	2301      	movs	r3, #1
 80150f2:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80150f4:	4b0a      	ldr	r3, [pc, #40]	@ (8015120 <xTaskRemoveFromEventList+0xc4>)
 80150f6:	2201      	movs	r2, #1
 80150f8:	601a      	str	r2, [r3, #0]
 80150fa:	e001      	b.n	8015100 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 80150fc:	2300      	movs	r3, #0
 80150fe:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8015100:	697b      	ldr	r3, [r7, #20]
}
 8015102:	4618      	mov	r0, r3
 8015104:	3718      	adds	r7, #24
 8015106:	46bd      	mov	sp, r7
 8015108:	bd80      	pop	{r7, pc}
 801510a:	bf00      	nop
 801510c:	20001614 	.word	0x20001614
 8015110:	200015f4 	.word	0x200015f4
 8015114:	20001518 	.word	0x20001518
 8015118:	200015ac 	.word	0x200015ac
 801511c:	20001514 	.word	0x20001514
 8015120:	20001600 	.word	0x20001600

08015124 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015124:	b480      	push	{r7}
 8015126:	b083      	sub	sp, #12
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 801512c:	4b06      	ldr	r3, [pc, #24]	@ (8015148 <vTaskInternalSetTimeOutState+0x24>)
 801512e:	681a      	ldr	r2, [r3, #0]
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8015134:	4b05      	ldr	r3, [pc, #20]	@ (801514c <vTaskInternalSetTimeOutState+0x28>)
 8015136:	681a      	ldr	r2, [r3, #0]
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	605a      	str	r2, [r3, #4]
}
 801513c:	bf00      	nop
 801513e:	370c      	adds	r7, #12
 8015140:	46bd      	mov	sp, r7
 8015142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015146:	4770      	bx	lr
 8015148:	20001604 	.word	0x20001604
 801514c:	200015f0 	.word	0x200015f0

08015150 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b088      	sub	sp, #32
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
 8015158:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d10b      	bne.n	8015178 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8015160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015164:	f383 8811 	msr	BASEPRI, r3
 8015168:	f3bf 8f6f 	isb	sy
 801516c:	f3bf 8f4f 	dsb	sy
 8015170:	613b      	str	r3, [r7, #16]
    }
 8015172:	bf00      	nop
 8015174:	bf00      	nop
 8015176:	e7fd      	b.n	8015174 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8015178:	683b      	ldr	r3, [r7, #0]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d10b      	bne.n	8015196 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 801517e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015182:	f383 8811 	msr	BASEPRI, r3
 8015186:	f3bf 8f6f 	isb	sy
 801518a:	f3bf 8f4f 	dsb	sy
 801518e:	60fb      	str	r3, [r7, #12]
    }
 8015190:	bf00      	nop
 8015192:	bf00      	nop
 8015194:	e7fd      	b.n	8015192 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8015196:	f001 f8f9 	bl	801638c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 801519a:	4b1f      	ldr	r3, [pc, #124]	@ (8015218 <xTaskCheckForTimeOut+0xc8>)
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	685b      	ldr	r3, [r3, #4]
 80151a4:	69ba      	ldr	r2, [r7, #24]
 80151a6:	1ad3      	subs	r3, r2, r3
 80151a8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80151aa:	683b      	ldr	r3, [r7, #0]
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151b2:	d102      	bne.n	80151ba <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80151b4:	2300      	movs	r3, #0
 80151b6:	61fb      	str	r3, [r7, #28]
 80151b8:	e026      	b.n	8015208 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	681a      	ldr	r2, [r3, #0]
 80151be:	4b17      	ldr	r3, [pc, #92]	@ (801521c <xTaskCheckForTimeOut+0xcc>)
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	429a      	cmp	r2, r3
 80151c4:	d00a      	beq.n	80151dc <xTaskCheckForTimeOut+0x8c>
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	685b      	ldr	r3, [r3, #4]
 80151ca:	69ba      	ldr	r2, [r7, #24]
 80151cc:	429a      	cmp	r2, r3
 80151ce:	d305      	bcc.n	80151dc <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80151d0:	2301      	movs	r3, #1
 80151d2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80151d4:	683b      	ldr	r3, [r7, #0]
 80151d6:	2200      	movs	r2, #0
 80151d8:	601a      	str	r2, [r3, #0]
 80151da:	e015      	b.n	8015208 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80151dc:	683b      	ldr	r3, [r7, #0]
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	697a      	ldr	r2, [r7, #20]
 80151e2:	429a      	cmp	r2, r3
 80151e4:	d20b      	bcs.n	80151fe <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80151e6:	683b      	ldr	r3, [r7, #0]
 80151e8:	681a      	ldr	r2, [r3, #0]
 80151ea:	697b      	ldr	r3, [r7, #20]
 80151ec:	1ad2      	subs	r2, r2, r3
 80151ee:	683b      	ldr	r3, [r7, #0]
 80151f0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80151f2:	6878      	ldr	r0, [r7, #4]
 80151f4:	f7ff ff96 	bl	8015124 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80151f8:	2300      	movs	r3, #0
 80151fa:	61fb      	str	r3, [r7, #28]
 80151fc:	e004      	b.n	8015208 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80151fe:	683b      	ldr	r3, [r7, #0]
 8015200:	2200      	movs	r2, #0
 8015202:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8015204:	2301      	movs	r3, #1
 8015206:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8015208:	f001 f8f2 	bl	80163f0 <vPortExitCritical>

    return xReturn;
 801520c:	69fb      	ldr	r3, [r7, #28]
}
 801520e:	4618      	mov	r0, r3
 8015210:	3720      	adds	r7, #32
 8015212:	46bd      	mov	sp, r7
 8015214:	bd80      	pop	{r7, pc}
 8015216:	bf00      	nop
 8015218:	200015f0 	.word	0x200015f0
 801521c:	20001604 	.word	0x20001604

08015220 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015220:	b480      	push	{r7}
 8015222:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8015224:	4b03      	ldr	r3, [pc, #12]	@ (8015234 <vTaskMissedYield+0x14>)
 8015226:	2201      	movs	r2, #1
 8015228:	601a      	str	r2, [r3, #0]
}
 801522a:	bf00      	nop
 801522c:	46bd      	mov	sp, r7
 801522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015232:	4770      	bx	lr
 8015234:	20001600 	.word	0x20001600

08015238 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b082      	sub	sp, #8
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8015240:	f000 f852 	bl	80152e8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015244:	4b06      	ldr	r3, [pc, #24]	@ (8015260 <prvIdleTask+0x28>)
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	2b01      	cmp	r3, #1
 801524a:	d9f9      	bls.n	8015240 <prvIdleTask+0x8>
                {
                    taskYIELD();
 801524c:	4b05      	ldr	r3, [pc, #20]	@ (8015264 <prvIdleTask+0x2c>)
 801524e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015252:	601a      	str	r2, [r3, #0]
 8015254:	f3bf 8f4f 	dsb	sy
 8015258:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 801525c:	e7f0      	b.n	8015240 <prvIdleTask+0x8>
 801525e:	bf00      	nop
 8015260:	20001518 	.word	0x20001518
 8015264:	e000ed04 	.word	0xe000ed04

08015268 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b082      	sub	sp, #8
 801526c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801526e:	2300      	movs	r3, #0
 8015270:	607b      	str	r3, [r7, #4]
 8015272:	e00c      	b.n	801528e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015274:	687a      	ldr	r2, [r7, #4]
 8015276:	4613      	mov	r3, r2
 8015278:	009b      	lsls	r3, r3, #2
 801527a:	4413      	add	r3, r2
 801527c:	009b      	lsls	r3, r3, #2
 801527e:	4a12      	ldr	r2, [pc, #72]	@ (80152c8 <prvInitialiseTaskLists+0x60>)
 8015280:	4413      	add	r3, r2
 8015282:	4618      	mov	r0, r3
 8015284:	f7fe facc 	bl	8013820 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	3301      	adds	r3, #1
 801528c:	607b      	str	r3, [r7, #4]
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	2b04      	cmp	r3, #4
 8015292:	d9ef      	bls.n	8015274 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8015294:	480d      	ldr	r0, [pc, #52]	@ (80152cc <prvInitialiseTaskLists+0x64>)
 8015296:	f7fe fac3 	bl	8013820 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 801529a:	480d      	ldr	r0, [pc, #52]	@ (80152d0 <prvInitialiseTaskLists+0x68>)
 801529c:	f7fe fac0 	bl	8013820 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80152a0:	480c      	ldr	r0, [pc, #48]	@ (80152d4 <prvInitialiseTaskLists+0x6c>)
 80152a2:	f7fe fabd 	bl	8013820 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80152a6:	480c      	ldr	r0, [pc, #48]	@ (80152d8 <prvInitialiseTaskLists+0x70>)
 80152a8:	f7fe faba 	bl	8013820 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80152ac:	480b      	ldr	r0, [pc, #44]	@ (80152dc <prvInitialiseTaskLists+0x74>)
 80152ae:	f7fe fab7 	bl	8013820 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80152b2:	4b0b      	ldr	r3, [pc, #44]	@ (80152e0 <prvInitialiseTaskLists+0x78>)
 80152b4:	4a05      	ldr	r2, [pc, #20]	@ (80152cc <prvInitialiseTaskLists+0x64>)
 80152b6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80152b8:	4b0a      	ldr	r3, [pc, #40]	@ (80152e4 <prvInitialiseTaskLists+0x7c>)
 80152ba:	4a05      	ldr	r2, [pc, #20]	@ (80152d0 <prvInitialiseTaskLists+0x68>)
 80152bc:	601a      	str	r2, [r3, #0]
}
 80152be:	bf00      	nop
 80152c0:	3708      	adds	r7, #8
 80152c2:	46bd      	mov	sp, r7
 80152c4:	bd80      	pop	{r7, pc}
 80152c6:	bf00      	nop
 80152c8:	20001518 	.word	0x20001518
 80152cc:	2000157c 	.word	0x2000157c
 80152d0:	20001590 	.word	0x20001590
 80152d4:	200015ac 	.word	0x200015ac
 80152d8:	200015c0 	.word	0x200015c0
 80152dc:	200015d8 	.word	0x200015d8
 80152e0:	200015a4 	.word	0x200015a4
 80152e4:	200015a8 	.word	0x200015a8

080152e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b082      	sub	sp, #8
 80152ec:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80152ee:	e019      	b.n	8015324 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80152f0:	f001 f84c 	bl	801638c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152f4:	4b10      	ldr	r3, [pc, #64]	@ (8015338 <prvCheckTasksWaitingTermination+0x50>)
 80152f6:	68db      	ldr	r3, [r3, #12]
 80152f8:	68db      	ldr	r3, [r3, #12]
 80152fa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	3304      	adds	r3, #4
 8015300:	4618      	mov	r0, r3
 8015302:	f7fe fb17 	bl	8013934 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8015306:	4b0d      	ldr	r3, [pc, #52]	@ (801533c <prvCheckTasksWaitingTermination+0x54>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	3b01      	subs	r3, #1
 801530c:	4a0b      	ldr	r2, [pc, #44]	@ (801533c <prvCheckTasksWaitingTermination+0x54>)
 801530e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8015310:	4b0b      	ldr	r3, [pc, #44]	@ (8015340 <prvCheckTasksWaitingTermination+0x58>)
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	3b01      	subs	r3, #1
 8015316:	4a0a      	ldr	r2, [pc, #40]	@ (8015340 <prvCheckTasksWaitingTermination+0x58>)
 8015318:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 801531a:	f001 f869 	bl	80163f0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 801531e:	6878      	ldr	r0, [r7, #4]
 8015320:	f000 f8e4 	bl	80154ec <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015324:	4b06      	ldr	r3, [pc, #24]	@ (8015340 <prvCheckTasksWaitingTermination+0x58>)
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d1e1      	bne.n	80152f0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 801532c:	bf00      	nop
 801532e:	bf00      	nop
 8015330:	3708      	adds	r7, #8
 8015332:	46bd      	mov	sp, r7
 8015334:	bd80      	pop	{r7, pc}
 8015336:	bf00      	nop
 8015338:	200015c0 	.word	0x200015c0
 801533c:	200015ec 	.word	0x200015ec
 8015340:	200015d4 	.word	0x200015d4

08015344 <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 8015344:	b580      	push	{r7, lr}
 8015346:	b086      	sub	sp, #24
 8015348:	af00      	add	r7, sp, #0
 801534a:	60f8      	str	r0, [r7, #12]
 801534c:	60b9      	str	r1, [r7, #8]
 801534e:	607a      	str	r2, [r7, #4]
 8015350:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d102      	bne.n	801535e <vTaskGetInfo+0x1a>
 8015358:	4b2c      	ldr	r3, [pc, #176]	@ (801540c <vTaskGetInfo+0xc8>)
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	e000      	b.n	8015360 <vTaskGetInfo+0x1c>
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	617b      	str	r3, [r7, #20]

        pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8015362:	68bb      	ldr	r3, [r7, #8]
 8015364:	697a      	ldr	r2, [r7, #20]
 8015366:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 8015368:	697b      	ldr	r3, [r7, #20]
 801536a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801536e:	68bb      	ldr	r3, [r7, #8]
 8015370:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015376:	68bb      	ldr	r3, [r7, #8]
 8015378:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 801537a:	697b      	ldr	r3, [r7, #20]
 801537c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801537e:	68bb      	ldr	r3, [r7, #8]
 8015380:	61da      	str	r2, [r3, #28]
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8015382:	697b      	ldr	r3, [r7, #20]
 8015384:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015386:	68bb      	ldr	r3, [r7, #8]
 8015388:	609a      	str	r2, [r3, #8]

        #if ( configUSE_MUTEXES == 1 )
            {
                pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 801538a:	697b      	ldr	r3, [r7, #20]
 801538c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801538e:	68bb      	ldr	r3, [r7, #8]
 8015390:	615a      	str	r2, [r3, #20]
            {
                pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
            }
        #else
            {
                pxTaskStatus->ulRunTimeCounter = 0;
 8015392:	68bb      	ldr	r3, [r7, #8]
 8015394:	2200      	movs	r2, #0
 8015396:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 8015398:	78fb      	ldrb	r3, [r7, #3]
 801539a:	2b05      	cmp	r3, #5
 801539c:	d01a      	beq.n	80153d4 <vTaskGetInfo+0x90>
        {
            if( pxTCB == pxCurrentTCB )
 801539e:	4b1b      	ldr	r3, [pc, #108]	@ (801540c <vTaskGetInfo+0xc8>)
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	697a      	ldr	r2, [r7, #20]
 80153a4:	429a      	cmp	r2, r3
 80153a6:	d103      	bne.n	80153b0 <vTaskGetInfo+0x6c>
            {
                pxTaskStatus->eCurrentState = eRunning;
 80153a8:	68bb      	ldr	r3, [r7, #8]
 80153aa:	2200      	movs	r2, #0
 80153ac:	731a      	strb	r2, [r3, #12]
 80153ae:	e018      	b.n	80153e2 <vTaskGetInfo+0x9e>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 80153b0:	68bb      	ldr	r3, [r7, #8]
 80153b2:	78fa      	ldrb	r2, [r7, #3]
 80153b4:	731a      	strb	r2, [r3, #12]
                #if ( INCLUDE_vTaskSuspend == 1 )
                    {
                        /* If the task is in the suspended list then there is a
                         *  chance it is actually just blocked indefinitely - so really
                         *  it should be reported as being in the Blocked state. */
                        if( eState == eSuspended )
 80153b6:	78fb      	ldrb	r3, [r7, #3]
 80153b8:	2b03      	cmp	r3, #3
 80153ba:	d112      	bne.n	80153e2 <vTaskGetInfo+0x9e>
                        {
                            vTaskSuspendAll();
 80153bc:	f7ff fb76 	bl	8014aac <vTaskSuspendAll>
                            {
                                if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80153c0:	697b      	ldr	r3, [r7, #20]
 80153c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d002      	beq.n	80153ce <vTaskGetInfo+0x8a>
                                {
                                    pxTaskStatus->eCurrentState = eBlocked;
 80153c8:	68bb      	ldr	r3, [r7, #8]
 80153ca:	2202      	movs	r2, #2
 80153cc:	731a      	strb	r2, [r3, #12]
                                }
                            }
                            ( void ) xTaskResumeAll();
 80153ce:	f7ff fb7b 	bl	8014ac8 <xTaskResumeAll>
 80153d2:	e006      	b.n	80153e2 <vTaskGetInfo+0x9e>
                #endif /* INCLUDE_vTaskSuspend */
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80153d4:	6978      	ldr	r0, [r7, #20]
 80153d6:	f7ff fa9d 	bl	8014914 <eTaskGetState>
 80153da:	4603      	mov	r3, r0
 80153dc:	461a      	mov	r2, r3
 80153de:	68bb      	ldr	r3, [r7, #8]
 80153e0:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d009      	beq.n	80153fc <vTaskGetInfo+0xb8>
                {
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
                }
            #else
                {
                    pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80153e8:	697b      	ldr	r3, [r7, #20]
 80153ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153ec:	4618      	mov	r0, r3
 80153ee:	f000 f861 	bl	80154b4 <prvTaskCheckFreeStackSpace>
 80153f2:	4603      	mov	r3, r0
 80153f4:	461a      	mov	r2, r3
 80153f6:	68bb      	ldr	r3, [r7, #8]
 80153f8:	841a      	strh	r2, [r3, #32]
        }
        else
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }
    }
 80153fa:	e002      	b.n	8015402 <vTaskGetInfo+0xbe>
            pxTaskStatus->usStackHighWaterMark = 0;
 80153fc:	68bb      	ldr	r3, [r7, #8]
 80153fe:	2200      	movs	r2, #0
 8015400:	841a      	strh	r2, [r3, #32]
    }
 8015402:	bf00      	nop
 8015404:	3718      	adds	r7, #24
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}
 801540a:	bf00      	nop
 801540c:	20001514 	.word	0x20001514

08015410 <prvListTasksWithinSingleList>:
#if ( configUSE_TRACE_FACILITY == 1 )

    static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
                                                     List_t * pxList,
                                                     eTaskState eState )
    {
 8015410:	b580      	push	{r7, lr}
 8015412:	b08a      	sub	sp, #40	@ 0x28
 8015414:	af00      	add	r7, sp, #0
 8015416:	60f8      	str	r0, [r7, #12]
 8015418:	60b9      	str	r1, [r7, #8]
 801541a:	4613      	mov	r3, r2
 801541c:	71fb      	strb	r3, [r7, #7]
        configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
        UBaseType_t uxTask = 0;
 801541e:	2300      	movs	r3, #0
 8015420:	627b      	str	r3, [r7, #36]	@ 0x24

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8015422:	68bb      	ldr	r3, [r7, #8]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d03f      	beq.n	80154aa <prvListTasksWithinSingleList+0x9a>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801542a:	68bb      	ldr	r3, [r7, #8]
 801542c:	623b      	str	r3, [r7, #32]
 801542e:	6a3b      	ldr	r3, [r7, #32]
 8015430:	685b      	ldr	r3, [r3, #4]
 8015432:	685a      	ldr	r2, [r3, #4]
 8015434:	6a3b      	ldr	r3, [r7, #32]
 8015436:	605a      	str	r2, [r3, #4]
 8015438:	6a3b      	ldr	r3, [r7, #32]
 801543a:	685a      	ldr	r2, [r3, #4]
 801543c:	6a3b      	ldr	r3, [r7, #32]
 801543e:	3308      	adds	r3, #8
 8015440:	429a      	cmp	r2, r3
 8015442:	d104      	bne.n	801544e <prvListTasksWithinSingleList+0x3e>
 8015444:	6a3b      	ldr	r3, [r7, #32]
 8015446:	685b      	ldr	r3, [r3, #4]
 8015448:	685a      	ldr	r2, [r3, #4]
 801544a:	6a3b      	ldr	r3, [r7, #32]
 801544c:	605a      	str	r2, [r3, #4]
 801544e:	6a3b      	ldr	r3, [r7, #32]
 8015450:	685b      	ldr	r3, [r3, #4]
 8015452:	68db      	ldr	r3, [r3, #12]
 8015454:	61fb      	str	r3, [r7, #28]
             * pxTaskStatusArray array for each task that is referenced from
             * pxList.  See the definition of TaskStatus_t in task.h for the
             * meaning of each TaskStatus_t structure member. */
            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015456:	68bb      	ldr	r3, [r7, #8]
 8015458:	61bb      	str	r3, [r7, #24]
 801545a:	69bb      	ldr	r3, [r7, #24]
 801545c:	685b      	ldr	r3, [r3, #4]
 801545e:	685a      	ldr	r2, [r3, #4]
 8015460:	69bb      	ldr	r3, [r7, #24]
 8015462:	605a      	str	r2, [r3, #4]
 8015464:	69bb      	ldr	r3, [r7, #24]
 8015466:	685a      	ldr	r2, [r3, #4]
 8015468:	69bb      	ldr	r3, [r7, #24]
 801546a:	3308      	adds	r3, #8
 801546c:	429a      	cmp	r2, r3
 801546e:	d104      	bne.n	801547a <prvListTasksWithinSingleList+0x6a>
 8015470:	69bb      	ldr	r3, [r7, #24]
 8015472:	685b      	ldr	r3, [r3, #4]
 8015474:	685a      	ldr	r2, [r3, #4]
 8015476:	69bb      	ldr	r3, [r7, #24]
 8015478:	605a      	str	r2, [r3, #4]
 801547a:	69bb      	ldr	r3, [r7, #24]
 801547c:	685b      	ldr	r3, [r3, #4]
 801547e:	68db      	ldr	r3, [r3, #12]
 8015480:	617b      	str	r3, [r7, #20]
                vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8015482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015484:	4613      	mov	r3, r2
 8015486:	00db      	lsls	r3, r3, #3
 8015488:	4413      	add	r3, r2
 801548a:	009b      	lsls	r3, r3, #2
 801548c:	461a      	mov	r2, r3
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	1899      	adds	r1, r3, r2
 8015492:	79fb      	ldrb	r3, [r7, #7]
 8015494:	2201      	movs	r2, #1
 8015496:	6978      	ldr	r0, [r7, #20]
 8015498:	f7ff ff54 	bl	8015344 <vTaskGetInfo>
                uxTask++;
 801549c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801549e:	3301      	adds	r3, #1
 80154a0:	627b      	str	r3, [r7, #36]	@ 0x24
            } while( pxNextTCB != pxFirstTCB );
 80154a2:	697a      	ldr	r2, [r7, #20]
 80154a4:	69fb      	ldr	r3, [r7, #28]
 80154a6:	429a      	cmp	r2, r3
 80154a8:	d1d5      	bne.n	8015456 <prvListTasksWithinSingleList+0x46>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return uxTask;
 80154aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80154ac:	4618      	mov	r0, r3
 80154ae:	3728      	adds	r7, #40	@ 0x28
 80154b0:	46bd      	mov	sp, r7
 80154b2:	bd80      	pop	{r7, pc}

080154b4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 80154b4:	b480      	push	{r7}
 80154b6:	b085      	sub	sp, #20
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 80154bc:	2300      	movs	r3, #0
 80154be:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80154c0:	e005      	b.n	80154ce <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	3301      	adds	r3, #1
 80154c6:	607b      	str	r3, [r7, #4]
            ulCount++;
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	3301      	adds	r3, #1
 80154cc:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	781b      	ldrb	r3, [r3, #0]
 80154d2:	2ba5      	cmp	r3, #165	@ 0xa5
 80154d4:	d0f5      	beq.n	80154c2 <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	089b      	lsrs	r3, r3, #2
 80154da:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	b29b      	uxth	r3, r3
    }
 80154e0:	4618      	mov	r0, r3
 80154e2:	3714      	adds	r7, #20
 80154e4:	46bd      	mov	sp, r7
 80154e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ea:	4770      	bx	lr

080154ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b082      	sub	sp, #8
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80154f8:	4618      	mov	r0, r3
 80154fa:	f001 f953 	bl	80167a4 <vPortFree>
                vPortFree( pxTCB );
 80154fe:	6878      	ldr	r0, [r7, #4]
 8015500:	f001 f950 	bl	80167a4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8015504:	bf00      	nop
 8015506:	3708      	adds	r7, #8
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}

0801550c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801550c:	b480      	push	{r7}
 801550e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015510:	4b0a      	ldr	r3, [pc, #40]	@ (801553c <prvResetNextTaskUnblockTime+0x30>)
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d104      	bne.n	8015524 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 801551a:	4b09      	ldr	r3, [pc, #36]	@ (8015540 <prvResetNextTaskUnblockTime+0x34>)
 801551c:	f04f 32ff 	mov.w	r2, #4294967295
 8015520:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8015522:	e005      	b.n	8015530 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8015524:	4b05      	ldr	r3, [pc, #20]	@ (801553c <prvResetNextTaskUnblockTime+0x30>)
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	68db      	ldr	r3, [r3, #12]
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	4a04      	ldr	r2, [pc, #16]	@ (8015540 <prvResetNextTaskUnblockTime+0x34>)
 801552e:	6013      	str	r3, [r2, #0]
}
 8015530:	bf00      	nop
 8015532:	46bd      	mov	sp, r7
 8015534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015538:	4770      	bx	lr
 801553a:	bf00      	nop
 801553c:	200015a4 	.word	0x200015a4
 8015540:	2000160c 	.word	0x2000160c

08015544 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8015544:	b480      	push	{r7}
 8015546:	b083      	sub	sp, #12
 8015548:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 801554a:	4b0b      	ldr	r3, [pc, #44]	@ (8015578 <xTaskGetSchedulerState+0x34>)
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d102      	bne.n	8015558 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8015552:	2301      	movs	r3, #1
 8015554:	607b      	str	r3, [r7, #4]
 8015556:	e008      	b.n	801556a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015558:	4b08      	ldr	r3, [pc, #32]	@ (801557c <xTaskGetSchedulerState+0x38>)
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d102      	bne.n	8015566 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8015560:	2302      	movs	r3, #2
 8015562:	607b      	str	r3, [r7, #4]
 8015564:	e001      	b.n	801556a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8015566:	2300      	movs	r3, #0
 8015568:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 801556a:	687b      	ldr	r3, [r7, #4]
    }
 801556c:	4618      	mov	r0, r3
 801556e:	370c      	adds	r7, #12
 8015570:	46bd      	mov	sp, r7
 8015572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015576:	4770      	bx	lr
 8015578:	200015f8 	.word	0x200015f8
 801557c:	20001614 	.word	0x20001614

08015580 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8015580:	b580      	push	{r7, lr}
 8015582:	b084      	sub	sp, #16
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 801558c:	2300      	movs	r3, #0
 801558e:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d05e      	beq.n	8015654 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015596:	68bb      	ldr	r3, [r7, #8]
 8015598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801559a:	4b31      	ldr	r3, [pc, #196]	@ (8015660 <xTaskPriorityInherit+0xe0>)
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155a0:	429a      	cmp	r2, r3
 80155a2:	d24e      	bcs.n	8015642 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80155a4:	68bb      	ldr	r3, [r7, #8]
 80155a6:	699b      	ldr	r3, [r3, #24]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	db06      	blt.n	80155ba <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80155ac:	4b2c      	ldr	r3, [pc, #176]	@ (8015660 <xTaskPriorityInherit+0xe0>)
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155b2:	f1c3 0205 	rsb	r2, r3, #5
 80155b6:	68bb      	ldr	r3, [r7, #8]
 80155b8:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80155ba:	68bb      	ldr	r3, [r7, #8]
 80155bc:	6959      	ldr	r1, [r3, #20]
 80155be:	68bb      	ldr	r3, [r7, #8]
 80155c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155c2:	4613      	mov	r3, r2
 80155c4:	009b      	lsls	r3, r3, #2
 80155c6:	4413      	add	r3, r2
 80155c8:	009b      	lsls	r3, r3, #2
 80155ca:	4a26      	ldr	r2, [pc, #152]	@ (8015664 <xTaskPriorityInherit+0xe4>)
 80155cc:	4413      	add	r3, r2
 80155ce:	4299      	cmp	r1, r3
 80155d0:	d12f      	bne.n	8015632 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80155d2:	68bb      	ldr	r3, [r7, #8]
 80155d4:	3304      	adds	r3, #4
 80155d6:	4618      	mov	r0, r3
 80155d8:	f7fe f9ac 	bl	8013934 <uxListRemove>
 80155dc:	4603      	mov	r3, r0
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d10a      	bne.n	80155f8 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80155e2:	68bb      	ldr	r3, [r7, #8]
 80155e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155e6:	2201      	movs	r2, #1
 80155e8:	fa02 f303 	lsl.w	r3, r2, r3
 80155ec:	43da      	mvns	r2, r3
 80155ee:	4b1e      	ldr	r3, [pc, #120]	@ (8015668 <xTaskPriorityInherit+0xe8>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	4013      	ands	r3, r2
 80155f4:	4a1c      	ldr	r2, [pc, #112]	@ (8015668 <xTaskPriorityInherit+0xe8>)
 80155f6:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80155f8:	4b19      	ldr	r3, [pc, #100]	@ (8015660 <xTaskPriorityInherit+0xe0>)
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155fe:	68bb      	ldr	r3, [r7, #8]
 8015600:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8015602:	68bb      	ldr	r3, [r7, #8]
 8015604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015606:	2201      	movs	r2, #1
 8015608:	409a      	lsls	r2, r3
 801560a:	4b17      	ldr	r3, [pc, #92]	@ (8015668 <xTaskPriorityInherit+0xe8>)
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	4313      	orrs	r3, r2
 8015610:	4a15      	ldr	r2, [pc, #84]	@ (8015668 <xTaskPriorityInherit+0xe8>)
 8015612:	6013      	str	r3, [r2, #0]
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015618:	4613      	mov	r3, r2
 801561a:	009b      	lsls	r3, r3, #2
 801561c:	4413      	add	r3, r2
 801561e:	009b      	lsls	r3, r3, #2
 8015620:	4a10      	ldr	r2, [pc, #64]	@ (8015664 <xTaskPriorityInherit+0xe4>)
 8015622:	441a      	add	r2, r3
 8015624:	68bb      	ldr	r3, [r7, #8]
 8015626:	3304      	adds	r3, #4
 8015628:	4619      	mov	r1, r3
 801562a:	4610      	mov	r0, r2
 801562c:	f7fe f925 	bl	801387a <vListInsertEnd>
 8015630:	e004      	b.n	801563c <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015632:	4b0b      	ldr	r3, [pc, #44]	@ (8015660 <xTaskPriorityInherit+0xe0>)
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015638:	68bb      	ldr	r3, [r7, #8]
 801563a:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 801563c:	2301      	movs	r3, #1
 801563e:	60fb      	str	r3, [r7, #12]
 8015640:	e008      	b.n	8015654 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015642:	68bb      	ldr	r3, [r7, #8]
 8015644:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015646:	4b06      	ldr	r3, [pc, #24]	@ (8015660 <xTaskPriorityInherit+0xe0>)
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801564c:	429a      	cmp	r2, r3
 801564e:	d201      	bcs.n	8015654 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8015650:	2301      	movs	r3, #1
 8015652:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8015654:	68fb      	ldr	r3, [r7, #12]
    }
 8015656:	4618      	mov	r0, r3
 8015658:	3710      	adds	r7, #16
 801565a:	46bd      	mov	sp, r7
 801565c:	bd80      	pop	{r7, pc}
 801565e:	bf00      	nop
 8015660:	20001514 	.word	0x20001514
 8015664:	20001518 	.word	0x20001518
 8015668:	200015f4 	.word	0x200015f4

0801566c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 801566c:	b580      	push	{r7, lr}
 801566e:	b086      	sub	sp, #24
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8015678:	2300      	movs	r3, #0
 801567a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d065      	beq.n	801574e <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8015682:	4b35      	ldr	r3, [pc, #212]	@ (8015758 <xTaskPriorityDisinherit+0xec>)
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	693a      	ldr	r2, [r7, #16]
 8015688:	429a      	cmp	r2, r3
 801568a:	d00b      	beq.n	80156a4 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 801568c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015690:	f383 8811 	msr	BASEPRI, r3
 8015694:	f3bf 8f6f 	isb	sy
 8015698:	f3bf 8f4f 	dsb	sy
 801569c:	60fb      	str	r3, [r7, #12]
    }
 801569e:	bf00      	nop
 80156a0:	bf00      	nop
 80156a2:	e7fd      	b.n	80156a0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80156a4:	693b      	ldr	r3, [r7, #16]
 80156a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d10b      	bne.n	80156c4 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 80156ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156b0:	f383 8811 	msr	BASEPRI, r3
 80156b4:	f3bf 8f6f 	isb	sy
 80156b8:	f3bf 8f4f 	dsb	sy
 80156bc:	60bb      	str	r3, [r7, #8]
    }
 80156be:	bf00      	nop
 80156c0:	bf00      	nop
 80156c2:	e7fd      	b.n	80156c0 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80156c4:	693b      	ldr	r3, [r7, #16]
 80156c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80156c8:	1e5a      	subs	r2, r3, #1
 80156ca:	693b      	ldr	r3, [r7, #16]
 80156cc:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80156ce:	693b      	ldr	r3, [r7, #16]
 80156d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80156d2:	693b      	ldr	r3, [r7, #16]
 80156d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80156d6:	429a      	cmp	r2, r3
 80156d8:	d039      	beq.n	801574e <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80156da:	693b      	ldr	r3, [r7, #16]
 80156dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d135      	bne.n	801574e <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80156e2:	693b      	ldr	r3, [r7, #16]
 80156e4:	3304      	adds	r3, #4
 80156e6:	4618      	mov	r0, r3
 80156e8:	f7fe f924 	bl	8013934 <uxListRemove>
 80156ec:	4603      	mov	r3, r0
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d10a      	bne.n	8015708 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80156f2:	693b      	ldr	r3, [r7, #16]
 80156f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156f6:	2201      	movs	r2, #1
 80156f8:	fa02 f303 	lsl.w	r3, r2, r3
 80156fc:	43da      	mvns	r2, r3
 80156fe:	4b17      	ldr	r3, [pc, #92]	@ (801575c <xTaskPriorityDisinherit+0xf0>)
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	4013      	ands	r3, r2
 8015704:	4a15      	ldr	r2, [pc, #84]	@ (801575c <xTaskPriorityDisinherit+0xf0>)
 8015706:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015708:	693b      	ldr	r3, [r7, #16]
 801570a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801570c:	693b      	ldr	r3, [r7, #16]
 801570e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015710:	693b      	ldr	r3, [r7, #16]
 8015712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015714:	f1c3 0205 	rsb	r2, r3, #5
 8015718:	693b      	ldr	r3, [r7, #16]
 801571a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 801571c:	693b      	ldr	r3, [r7, #16]
 801571e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015720:	2201      	movs	r2, #1
 8015722:	409a      	lsls	r2, r3
 8015724:	4b0d      	ldr	r3, [pc, #52]	@ (801575c <xTaskPriorityDisinherit+0xf0>)
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	4313      	orrs	r3, r2
 801572a:	4a0c      	ldr	r2, [pc, #48]	@ (801575c <xTaskPriorityDisinherit+0xf0>)
 801572c:	6013      	str	r3, [r2, #0]
 801572e:	693b      	ldr	r3, [r7, #16]
 8015730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015732:	4613      	mov	r3, r2
 8015734:	009b      	lsls	r3, r3, #2
 8015736:	4413      	add	r3, r2
 8015738:	009b      	lsls	r3, r3, #2
 801573a:	4a09      	ldr	r2, [pc, #36]	@ (8015760 <xTaskPriorityDisinherit+0xf4>)
 801573c:	441a      	add	r2, r3
 801573e:	693b      	ldr	r3, [r7, #16]
 8015740:	3304      	adds	r3, #4
 8015742:	4619      	mov	r1, r3
 8015744:	4610      	mov	r0, r2
 8015746:	f7fe f898 	bl	801387a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 801574a:	2301      	movs	r3, #1
 801574c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 801574e:	697b      	ldr	r3, [r7, #20]
    }
 8015750:	4618      	mov	r0, r3
 8015752:	3718      	adds	r7, #24
 8015754:	46bd      	mov	sp, r7
 8015756:	bd80      	pop	{r7, pc}
 8015758:	20001514 	.word	0x20001514
 801575c:	200015f4 	.word	0x200015f4
 8015760:	20001518 	.word	0x20001518

08015764 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8015764:	b580      	push	{r7, lr}
 8015766:	b088      	sub	sp, #32
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
 801576c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015772:	2301      	movs	r3, #1
 8015774:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d079      	beq.n	8015870 <vTaskPriorityDisinheritAfterTimeout+0x10c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 801577c:	69bb      	ldr	r3, [r7, #24]
 801577e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015780:	2b00      	cmp	r3, #0
 8015782:	d10b      	bne.n	801579c <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8015784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015788:	f383 8811 	msr	BASEPRI, r3
 801578c:	f3bf 8f6f 	isb	sy
 8015790:	f3bf 8f4f 	dsb	sy
 8015794:	60fb      	str	r3, [r7, #12]
    }
 8015796:	bf00      	nop
 8015798:	bf00      	nop
 801579a:	e7fd      	b.n	8015798 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801579c:	69bb      	ldr	r3, [r7, #24]
 801579e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80157a0:	683a      	ldr	r2, [r7, #0]
 80157a2:	429a      	cmp	r2, r3
 80157a4:	d902      	bls.n	80157ac <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80157a6:	683b      	ldr	r3, [r7, #0]
 80157a8:	61fb      	str	r3, [r7, #28]
 80157aa:	e002      	b.n	80157b2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80157ac:	69bb      	ldr	r3, [r7, #24]
 80157ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80157b0:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80157b2:	69bb      	ldr	r3, [r7, #24]
 80157b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157b6:	69fa      	ldr	r2, [r7, #28]
 80157b8:	429a      	cmp	r2, r3
 80157ba:	d059      	beq.n	8015870 <vTaskPriorityDisinheritAfterTimeout+0x10c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80157bc:	69bb      	ldr	r3, [r7, #24]
 80157be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80157c0:	697a      	ldr	r2, [r7, #20]
 80157c2:	429a      	cmp	r2, r3
 80157c4:	d154      	bne.n	8015870 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80157c6:	4b2c      	ldr	r3, [pc, #176]	@ (8015878 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	69ba      	ldr	r2, [r7, #24]
 80157cc:	429a      	cmp	r2, r3
 80157ce:	d10b      	bne.n	80157e8 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 80157d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157d4:	f383 8811 	msr	BASEPRI, r3
 80157d8:	f3bf 8f6f 	isb	sy
 80157dc:	f3bf 8f4f 	dsb	sy
 80157e0:	60bb      	str	r3, [r7, #8]
    }
 80157e2:	bf00      	nop
 80157e4:	bf00      	nop
 80157e6:	e7fd      	b.n	80157e4 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80157e8:	69bb      	ldr	r3, [r7, #24]
 80157ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157ec:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80157ee:	69bb      	ldr	r3, [r7, #24]
 80157f0:	69fa      	ldr	r2, [r7, #28]
 80157f2:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80157f4:	69bb      	ldr	r3, [r7, #24]
 80157f6:	699b      	ldr	r3, [r3, #24]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	db04      	blt.n	8015806 <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80157fc:	69fb      	ldr	r3, [r7, #28]
 80157fe:	f1c3 0205 	rsb	r2, r3, #5
 8015802:	69bb      	ldr	r3, [r7, #24]
 8015804:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015806:	69bb      	ldr	r3, [r7, #24]
 8015808:	6959      	ldr	r1, [r3, #20]
 801580a:	693a      	ldr	r2, [r7, #16]
 801580c:	4613      	mov	r3, r2
 801580e:	009b      	lsls	r3, r3, #2
 8015810:	4413      	add	r3, r2
 8015812:	009b      	lsls	r3, r3, #2
 8015814:	4a19      	ldr	r2, [pc, #100]	@ (801587c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8015816:	4413      	add	r3, r2
 8015818:	4299      	cmp	r1, r3
 801581a:	d129      	bne.n	8015870 <vTaskPriorityDisinheritAfterTimeout+0x10c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801581c:	69bb      	ldr	r3, [r7, #24]
 801581e:	3304      	adds	r3, #4
 8015820:	4618      	mov	r0, r3
 8015822:	f7fe f887 	bl	8013934 <uxListRemove>
 8015826:	4603      	mov	r3, r0
 8015828:	2b00      	cmp	r3, #0
 801582a:	d10a      	bne.n	8015842 <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801582c:	69bb      	ldr	r3, [r7, #24]
 801582e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015830:	2201      	movs	r2, #1
 8015832:	fa02 f303 	lsl.w	r3, r2, r3
 8015836:	43da      	mvns	r2, r3
 8015838:	4b11      	ldr	r3, [pc, #68]	@ (8015880 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	4013      	ands	r3, r2
 801583e:	4a10      	ldr	r2, [pc, #64]	@ (8015880 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015840:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8015842:	69bb      	ldr	r3, [r7, #24]
 8015844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015846:	2201      	movs	r2, #1
 8015848:	409a      	lsls	r2, r3
 801584a:	4b0d      	ldr	r3, [pc, #52]	@ (8015880 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	4313      	orrs	r3, r2
 8015850:	4a0b      	ldr	r2, [pc, #44]	@ (8015880 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015852:	6013      	str	r3, [r2, #0]
 8015854:	69bb      	ldr	r3, [r7, #24]
 8015856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015858:	4613      	mov	r3, r2
 801585a:	009b      	lsls	r3, r3, #2
 801585c:	4413      	add	r3, r2
 801585e:	009b      	lsls	r3, r3, #2
 8015860:	4a06      	ldr	r2, [pc, #24]	@ (801587c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8015862:	441a      	add	r2, r3
 8015864:	69bb      	ldr	r3, [r7, #24]
 8015866:	3304      	adds	r3, #4
 8015868:	4619      	mov	r1, r3
 801586a:	4610      	mov	r0, r2
 801586c:	f7fe f805 	bl	801387a <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8015870:	bf00      	nop
 8015872:	3720      	adds	r7, #32
 8015874:	46bd      	mov	sp, r7
 8015876:	bd80      	pop	{r7, pc}
 8015878:	20001514 	.word	0x20001514
 801587c:	20001518 	.word	0x20001518
 8015880:	200015f4 	.word	0x200015f4

08015884 <prvWriteNameToBuffer>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

    static char * prvWriteNameToBuffer( char * pcBuffer,
                                        const char * pcTaskName )
    {
 8015884:	b580      	push	{r7, lr}
 8015886:	b084      	sub	sp, #16
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
 801588c:	6039      	str	r1, [r7, #0]
        size_t x;

        /* Start by copying the entire string. */
        strcpy( pcBuffer, pcTaskName );
 801588e:	6839      	ldr	r1, [r7, #0]
 8015890:	6878      	ldr	r0, [r7, #4]
 8015892:	f002 ff26 	bl	80186e2 <strcpy>

        /* Pad the end of the string with spaces to ensure columns line up when
         * printed out. */
        for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8015896:	6878      	ldr	r0, [r7, #4]
 8015898:	f7f2 fd1a 	bl	80082d0 <strlen>
 801589c:	60f8      	str	r0, [r7, #12]
 801589e:	e007      	b.n	80158b0 <prvWriteNameToBuffer+0x2c>
        {
            pcBuffer[ x ] = ' ';
 80158a0:	687a      	ldr	r2, [r7, #4]
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	4413      	add	r3, r2
 80158a6:	2220      	movs	r2, #32
 80158a8:	701a      	strb	r2, [r3, #0]
        for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	3301      	adds	r3, #1
 80158ae:	60fb      	str	r3, [r7, #12]
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	2b08      	cmp	r3, #8
 80158b4:	d9f4      	bls.n	80158a0 <prvWriteNameToBuffer+0x1c>
        }

        /* Terminate. */
        pcBuffer[ x ] = ( char ) 0x00;
 80158b6:	687a      	ldr	r2, [r7, #4]
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	4413      	add	r3, r2
 80158bc:	2200      	movs	r2, #0
 80158be:	701a      	strb	r2, [r3, #0]

        /* Return the new end of string. */
        return &( pcBuffer[ x ] );
 80158c0:	687a      	ldr	r2, [r7, #4]
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	4413      	add	r3, r2
    }
 80158c6:	4618      	mov	r0, r3
 80158c8:	3710      	adds	r7, #16
 80158ca:	46bd      	mov	sp, r7
 80158cc:	bd80      	pop	{r7, pc}
	...

080158d0 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    void vTaskList( char * pcWriteBuffer )
    {
 80158d0:	b590      	push	{r4, r7, lr}
 80158d2:	b089      	sub	sp, #36	@ 0x24
 80158d4:	af02      	add	r7, sp, #8
 80158d6:	6078      	str	r0, [r7, #4]
         * through a call to vTaskList().
         */


        /* Make sure the write buffer does not contain a string. */
        *pcWriteBuffer = ( char ) 0x00;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	2200      	movs	r2, #0
 80158dc:	701a      	strb	r2, [r3, #0]

        /* Take a snapshot of the number of tasks in case it changes while this
         * function is executing. */
        uxArraySize = uxCurrentNumberOfTasks;
 80158de:	4b45      	ldr	r3, [pc, #276]	@ (80159f4 <vTaskList+0x124>)
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	60fb      	str	r3, [r7, #12]

        /* Allocate an array index for each task.  NOTE!  if
         * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
         * equate to NULL. */
        pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80158e4:	4b43      	ldr	r3, [pc, #268]	@ (80159f4 <vTaskList+0x124>)
 80158e6:	681a      	ldr	r2, [r3, #0]
 80158e8:	4613      	mov	r3, r2
 80158ea:	00db      	lsls	r3, r3, #3
 80158ec:	4413      	add	r3, r2
 80158ee:	009b      	lsls	r3, r3, #2
 80158f0:	4618      	mov	r0, r3
 80158f2:	f000 fe75 	bl	80165e0 <pvPortMalloc>
 80158f6:	60b8      	str	r0, [r7, #8]

        if( pxTaskStatusArray != NULL )
 80158f8:	68bb      	ldr	r3, [r7, #8]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d076      	beq.n	80159ec <vTaskList+0x11c>
        {
            /* Generate the (binary) data. */
            uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 80158fe:	2200      	movs	r2, #0
 8015900:	68f9      	ldr	r1, [r7, #12]
 8015902:	68b8      	ldr	r0, [r7, #8]
 8015904:	f7ff f98e 	bl	8014c24 <uxTaskGetSystemState>
 8015908:	60f8      	str	r0, [r7, #12]

            /* Create a human readable table from the binary data. */
            for( x = 0; x < uxArraySize; x++ )
 801590a:	2300      	movs	r3, #0
 801590c:	617b      	str	r3, [r7, #20]
 801590e:	e066      	b.n	80159de <vTaskList+0x10e>
            {
                switch( pxTaskStatusArray[ x ].eCurrentState )
 8015910:	697a      	ldr	r2, [r7, #20]
 8015912:	4613      	mov	r3, r2
 8015914:	00db      	lsls	r3, r3, #3
 8015916:	4413      	add	r3, r2
 8015918:	009b      	lsls	r3, r3, #2
 801591a:	461a      	mov	r2, r3
 801591c:	68bb      	ldr	r3, [r7, #8]
 801591e:	4413      	add	r3, r2
 8015920:	7b1b      	ldrb	r3, [r3, #12]
 8015922:	2b04      	cmp	r3, #4
 8015924:	d81b      	bhi.n	801595e <vTaskList+0x8e>
 8015926:	a201      	add	r2, pc, #4	@ (adr r2, 801592c <vTaskList+0x5c>)
 8015928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801592c:	08015941 	.word	0x08015941
 8015930:	08015947 	.word	0x08015947
 8015934:	0801594d 	.word	0x0801594d
 8015938:	08015953 	.word	0x08015953
 801593c:	08015959 	.word	0x08015959
                {
                    case eRunning:
                        cStatus = tskRUNNING_CHAR;
 8015940:	2358      	movs	r3, #88	@ 0x58
 8015942:	74fb      	strb	r3, [r7, #19]
                        break;
 8015944:	e00e      	b.n	8015964 <vTaskList+0x94>

                    case eReady:
                        cStatus = tskREADY_CHAR;
 8015946:	2352      	movs	r3, #82	@ 0x52
 8015948:	74fb      	strb	r3, [r7, #19]
                        break;
 801594a:	e00b      	b.n	8015964 <vTaskList+0x94>

                    case eBlocked:
                        cStatus = tskBLOCKED_CHAR;
 801594c:	2342      	movs	r3, #66	@ 0x42
 801594e:	74fb      	strb	r3, [r7, #19]
                        break;
 8015950:	e008      	b.n	8015964 <vTaskList+0x94>

                    case eSuspended:
                        cStatus = tskSUSPENDED_CHAR;
 8015952:	2353      	movs	r3, #83	@ 0x53
 8015954:	74fb      	strb	r3, [r7, #19]
                        break;
 8015956:	e005      	b.n	8015964 <vTaskList+0x94>

                    case eDeleted:
                        cStatus = tskDELETED_CHAR;
 8015958:	2344      	movs	r3, #68	@ 0x44
 801595a:	74fb      	strb	r3, [r7, #19]
                        break;
 801595c:	e002      	b.n	8015964 <vTaskList+0x94>

                    case eInvalid: /* Fall through. */
                    default:       /* Should not get here, but it is included
                                    * to prevent static checking errors. */
                        cStatus = ( char ) 0x00;
 801595e:	2300      	movs	r3, #0
 8015960:	74fb      	strb	r3, [r7, #19]
                        break;
 8015962:	bf00      	nop
                }

                /* Write the task name to the string, padding with spaces so it
                 * can be printed in tabular form more easily. */
                pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8015964:	697a      	ldr	r2, [r7, #20]
 8015966:	4613      	mov	r3, r2
 8015968:	00db      	lsls	r3, r3, #3
 801596a:	4413      	add	r3, r2
 801596c:	009b      	lsls	r3, r3, #2
 801596e:	461a      	mov	r2, r3
 8015970:	68bb      	ldr	r3, [r7, #8]
 8015972:	4413      	add	r3, r2
 8015974:	685b      	ldr	r3, [r3, #4]
 8015976:	4619      	mov	r1, r3
 8015978:	6878      	ldr	r0, [r7, #4]
 801597a:	f7ff ff83 	bl	8015884 <prvWriteNameToBuffer>
 801597e:	6078      	str	r0, [r7, #4]

                /* Write the rest of the string. */
                sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8015980:	7cf9      	ldrb	r1, [r7, #19]
 8015982:	697a      	ldr	r2, [r7, #20]
 8015984:	4613      	mov	r3, r2
 8015986:	00db      	lsls	r3, r3, #3
 8015988:	4413      	add	r3, r2
 801598a:	009b      	lsls	r3, r3, #2
 801598c:	461a      	mov	r2, r3
 801598e:	68bb      	ldr	r3, [r7, #8]
 8015990:	4413      	add	r3, r2
 8015992:	6918      	ldr	r0, [r3, #16]
 8015994:	697a      	ldr	r2, [r7, #20]
 8015996:	4613      	mov	r3, r2
 8015998:	00db      	lsls	r3, r3, #3
 801599a:	4413      	add	r3, r2
 801599c:	009b      	lsls	r3, r3, #2
 801599e:	461a      	mov	r2, r3
 80159a0:	68bb      	ldr	r3, [r7, #8]
 80159a2:	4413      	add	r3, r2
 80159a4:	8c1b      	ldrh	r3, [r3, #32]
 80159a6:	461c      	mov	r4, r3
 80159a8:	697a      	ldr	r2, [r7, #20]
 80159aa:	4613      	mov	r3, r2
 80159ac:	00db      	lsls	r3, r3, #3
 80159ae:	4413      	add	r3, r2
 80159b0:	009b      	lsls	r3, r3, #2
 80159b2:	461a      	mov	r2, r3
 80159b4:	68bb      	ldr	r3, [r7, #8]
 80159b6:	4413      	add	r3, r2
 80159b8:	689b      	ldr	r3, [r3, #8]
 80159ba:	9301      	str	r3, [sp, #4]
 80159bc:	9400      	str	r4, [sp, #0]
 80159be:	4603      	mov	r3, r0
 80159c0:	460a      	mov	r2, r1
 80159c2:	490d      	ldr	r1, [pc, #52]	@ (80159f8 <vTaskList+0x128>)
 80159c4:	6878      	ldr	r0, [r7, #4]
 80159c6:	f002 fc5d 	bl	8018284 <siprintf>
                pcWriteBuffer += strlen( pcWriteBuffer );                                                                                                                                                                                                /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 80159ca:	6878      	ldr	r0, [r7, #4]
 80159cc:	f7f2 fc80 	bl	80082d0 <strlen>
 80159d0:	4602      	mov	r2, r0
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	4413      	add	r3, r2
 80159d6:	607b      	str	r3, [r7, #4]
            for( x = 0; x < uxArraySize; x++ )
 80159d8:	697b      	ldr	r3, [r7, #20]
 80159da:	3301      	adds	r3, #1
 80159dc:	617b      	str	r3, [r7, #20]
 80159de:	697a      	ldr	r2, [r7, #20]
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	429a      	cmp	r2, r3
 80159e4:	d394      	bcc.n	8015910 <vTaskList+0x40>
            }

            /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
             * is 0 then vPortFree() will be #defined to nothing. */
            vPortFree( pxTaskStatusArray );
 80159e6:	68b8      	ldr	r0, [r7, #8]
 80159e8:	f000 fedc 	bl	80167a4 <vPortFree>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80159ec:	bf00      	nop
 80159ee:	371c      	adds	r7, #28
 80159f0:	46bd      	mov	sp, r7
 80159f2:	bd90      	pop	{r4, r7, pc}
 80159f4:	200015ec 	.word	0x200015ec
 80159f8:	0801bfa0 	.word	0x0801bfa0

080159fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80159fc:	b480      	push	{r7}
 80159fe:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8015a00:	4b07      	ldr	r3, [pc, #28]	@ (8015a20 <pvTaskIncrementMutexHeldCount+0x24>)
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d004      	beq.n	8015a12 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8015a08:	4b05      	ldr	r3, [pc, #20]	@ (8015a20 <pvTaskIncrementMutexHeldCount+0x24>)
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015a0e:	3201      	adds	r2, #1
 8015a10:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 8015a12:	4b03      	ldr	r3, [pc, #12]	@ (8015a20 <pvTaskIncrementMutexHeldCount+0x24>)
 8015a14:	681b      	ldr	r3, [r3, #0]
    }
 8015a16:	4618      	mov	r0, r3
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1e:	4770      	bx	lr
 8015a20:	20001514 	.word	0x20001514

08015a24 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b084      	sub	sp, #16
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
 8015a2c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8015a2e:	4b29      	ldr	r3, [pc, #164]	@ (8015ad4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015a34:	4b28      	ldr	r3, [pc, #160]	@ (8015ad8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	3304      	adds	r3, #4
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	f7fd ff7a 	bl	8013934 <uxListRemove>
 8015a40:	4603      	mov	r3, r0
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d10b      	bne.n	8015a5e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8015a46:	4b24      	ldr	r3, [pc, #144]	@ (8015ad8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a4c:	2201      	movs	r2, #1
 8015a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8015a52:	43da      	mvns	r2, r3
 8015a54:	4b21      	ldr	r3, [pc, #132]	@ (8015adc <prvAddCurrentTaskToDelayedList+0xb8>)
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	4013      	ands	r3, r2
 8015a5a:	4a20      	ldr	r2, [pc, #128]	@ (8015adc <prvAddCurrentTaskToDelayedList+0xb8>)
 8015a5c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a64:	d10a      	bne.n	8015a7c <prvAddCurrentTaskToDelayedList+0x58>
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d007      	beq.n	8015a7c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8015ad8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	3304      	adds	r3, #4
 8015a72:	4619      	mov	r1, r3
 8015a74:	481a      	ldr	r0, [pc, #104]	@ (8015ae0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8015a76:	f7fd ff00 	bl	801387a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8015a7a:	e026      	b.n	8015aca <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8015a7c:	68fa      	ldr	r2, [r7, #12]
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	4413      	add	r3, r2
 8015a82:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015a84:	4b14      	ldr	r3, [pc, #80]	@ (8015ad8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	68ba      	ldr	r2, [r7, #8]
 8015a8a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8015a8c:	68ba      	ldr	r2, [r7, #8]
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	429a      	cmp	r2, r3
 8015a92:	d209      	bcs.n	8015aa8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015a94:	4b13      	ldr	r3, [pc, #76]	@ (8015ae4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8015a96:	681a      	ldr	r2, [r3, #0]
 8015a98:	4b0f      	ldr	r3, [pc, #60]	@ (8015ad8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	3304      	adds	r3, #4
 8015a9e:	4619      	mov	r1, r3
 8015aa0:	4610      	mov	r0, r2
 8015aa2:	f7fd ff0e 	bl	80138c2 <vListInsert>
}
 8015aa6:	e010      	b.n	8015aca <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8015ae8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8015aaa:	681a      	ldr	r2, [r3, #0]
 8015aac:	4b0a      	ldr	r3, [pc, #40]	@ (8015ad8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	3304      	adds	r3, #4
 8015ab2:	4619      	mov	r1, r3
 8015ab4:	4610      	mov	r0, r2
 8015ab6:	f7fd ff04 	bl	80138c2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8015aba:	4b0c      	ldr	r3, [pc, #48]	@ (8015aec <prvAddCurrentTaskToDelayedList+0xc8>)
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	68ba      	ldr	r2, [r7, #8]
 8015ac0:	429a      	cmp	r2, r3
 8015ac2:	d202      	bcs.n	8015aca <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8015ac4:	4a09      	ldr	r2, [pc, #36]	@ (8015aec <prvAddCurrentTaskToDelayedList+0xc8>)
 8015ac6:	68bb      	ldr	r3, [r7, #8]
 8015ac8:	6013      	str	r3, [r2, #0]
}
 8015aca:	bf00      	nop
 8015acc:	3710      	adds	r7, #16
 8015ace:	46bd      	mov	sp, r7
 8015ad0:	bd80      	pop	{r7, pc}
 8015ad2:	bf00      	nop
 8015ad4:	200015f0 	.word	0x200015f0
 8015ad8:	20001514 	.word	0x20001514
 8015adc:	200015f4 	.word	0x200015f4
 8015ae0:	200015d8 	.word	0x200015d8
 8015ae4:	200015a8 	.word	0x200015a8
 8015ae8:	200015a4 	.word	0x200015a4
 8015aec:	2000160c 	.word	0x2000160c

08015af0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8015af0:	b580      	push	{r7, lr}
 8015af2:	b084      	sub	sp, #16
 8015af4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8015af6:	2300      	movs	r3, #0
 8015af8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8015afa:	f000 fae1 	bl	80160c0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8015afe:	4b12      	ldr	r3, [pc, #72]	@ (8015b48 <xTimerCreateTimerTask+0x58>)
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d00b      	beq.n	8015b1e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8015b06:	4b11      	ldr	r3, [pc, #68]	@ (8015b4c <xTimerCreateTimerTask+0x5c>)
 8015b08:	9301      	str	r3, [sp, #4]
 8015b0a:	2302      	movs	r3, #2
 8015b0c:	9300      	str	r3, [sp, #0]
 8015b0e:	2300      	movs	r3, #0
 8015b10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8015b14:	490e      	ldr	r1, [pc, #56]	@ (8015b50 <xTimerCreateTimerTask+0x60>)
 8015b16:	480f      	ldr	r0, [pc, #60]	@ (8015b54 <xTimerCreateTimerTask+0x64>)
 8015b18:	f7fe fd80 	bl	801461c <xTaskCreate>
 8015b1c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d10b      	bne.n	8015b3c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8015b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b28:	f383 8811 	msr	BASEPRI, r3
 8015b2c:	f3bf 8f6f 	isb	sy
 8015b30:	f3bf 8f4f 	dsb	sy
 8015b34:	603b      	str	r3, [r7, #0]
    }
 8015b36:	bf00      	nop
 8015b38:	bf00      	nop
 8015b3a:	e7fd      	b.n	8015b38 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8015b3c:	687b      	ldr	r3, [r7, #4]
    }
 8015b3e:	4618      	mov	r0, r3
 8015b40:	3708      	adds	r7, #8
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}
 8015b46:	bf00      	nop
 8015b48:	20001648 	.word	0x20001648
 8015b4c:	2000164c 	.word	0x2000164c
 8015b50:	0801bfb0 	.word	0x0801bfb0
 8015b54:	08015c91 	.word	0x08015c91

08015b58 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b08a      	sub	sp, #40	@ 0x28
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	60f8      	str	r0, [r7, #12]
 8015b60:	60b9      	str	r1, [r7, #8]
 8015b62:	607a      	str	r2, [r7, #4]
 8015b64:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8015b66:	2300      	movs	r3, #0
 8015b68:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d10b      	bne.n	8015b88 <xTimerGenericCommand+0x30>
        __asm volatile
 8015b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b74:	f383 8811 	msr	BASEPRI, r3
 8015b78:	f3bf 8f6f 	isb	sy
 8015b7c:	f3bf 8f4f 	dsb	sy
 8015b80:	623b      	str	r3, [r7, #32]
    }
 8015b82:	bf00      	nop
 8015b84:	bf00      	nop
 8015b86:	e7fd      	b.n	8015b84 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8015b88:	4b19      	ldr	r3, [pc, #100]	@ (8015bf0 <xTimerGenericCommand+0x98>)
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d02a      	beq.n	8015be6 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8015b90:	68bb      	ldr	r3, [r7, #8]
 8015b92:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015b9c:	68bb      	ldr	r3, [r7, #8]
 8015b9e:	2b05      	cmp	r3, #5
 8015ba0:	dc18      	bgt.n	8015bd4 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015ba2:	f7ff fccf 	bl	8015544 <xTaskGetSchedulerState>
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	2b02      	cmp	r3, #2
 8015baa:	d109      	bne.n	8015bc0 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015bac:	4b10      	ldr	r3, [pc, #64]	@ (8015bf0 <xTimerGenericCommand+0x98>)
 8015bae:	6818      	ldr	r0, [r3, #0]
 8015bb0:	f107 0114 	add.w	r1, r7, #20
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015bb8:	f7fe f808 	bl	8013bcc <xQueueGenericSend>
 8015bbc:	6278      	str	r0, [r7, #36]	@ 0x24
 8015bbe:	e012      	b.n	8015be6 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8015bf0 <xTimerGenericCommand+0x98>)
 8015bc2:	6818      	ldr	r0, [r3, #0]
 8015bc4:	f107 0114 	add.w	r1, r7, #20
 8015bc8:	2300      	movs	r3, #0
 8015bca:	2200      	movs	r2, #0
 8015bcc:	f7fd fffe 	bl	8013bcc <xQueueGenericSend>
 8015bd0:	6278      	str	r0, [r7, #36]	@ 0x24
 8015bd2:	e008      	b.n	8015be6 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015bd4:	4b06      	ldr	r3, [pc, #24]	@ (8015bf0 <xTimerGenericCommand+0x98>)
 8015bd6:	6818      	ldr	r0, [r3, #0]
 8015bd8:	f107 0114 	add.w	r1, r7, #20
 8015bdc:	2300      	movs	r3, #0
 8015bde:	683a      	ldr	r2, [r7, #0]
 8015be0:	f7fe f8f6 	bl	8013dd0 <xQueueGenericSendFromISR>
 8015be4:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8015be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8015be8:	4618      	mov	r0, r3
 8015bea:	3728      	adds	r7, #40	@ 0x28
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}
 8015bf0:	20001648 	.word	0x20001648

08015bf4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b088      	sub	sp, #32
 8015bf8:	af02      	add	r7, sp, #8
 8015bfa:	6078      	str	r0, [r7, #4]
 8015bfc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015bfe:	4b23      	ldr	r3, [pc, #140]	@ (8015c8c <prvProcessExpiredTimer+0x98>)
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	68db      	ldr	r3, [r3, #12]
 8015c04:	68db      	ldr	r3, [r3, #12]
 8015c06:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	3304      	adds	r3, #4
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f7fd fe91 	bl	8013934 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015c12:	697b      	ldr	r3, [r7, #20]
 8015c14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015c18:	f003 0304 	and.w	r3, r3, #4
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d023      	beq.n	8015c68 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015c20:	697b      	ldr	r3, [r7, #20]
 8015c22:	699a      	ldr	r2, [r3, #24]
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	18d1      	adds	r1, r2, r3
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	683a      	ldr	r2, [r7, #0]
 8015c2c:	6978      	ldr	r0, [r7, #20]
 8015c2e:	f000 f8d5 	bl	8015ddc <prvInsertTimerInActiveList>
 8015c32:	4603      	mov	r3, r0
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d020      	beq.n	8015c7a <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015c38:	2300      	movs	r3, #0
 8015c3a:	9300      	str	r3, [sp, #0]
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	687a      	ldr	r2, [r7, #4]
 8015c40:	2100      	movs	r1, #0
 8015c42:	6978      	ldr	r0, [r7, #20]
 8015c44:	f7ff ff88 	bl	8015b58 <xTimerGenericCommand>
 8015c48:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8015c4a:	693b      	ldr	r3, [r7, #16]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d114      	bne.n	8015c7a <prvProcessExpiredTimer+0x86>
        __asm volatile
 8015c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c54:	f383 8811 	msr	BASEPRI, r3
 8015c58:	f3bf 8f6f 	isb	sy
 8015c5c:	f3bf 8f4f 	dsb	sy
 8015c60:	60fb      	str	r3, [r7, #12]
    }
 8015c62:	bf00      	nop
 8015c64:	bf00      	nop
 8015c66:	e7fd      	b.n	8015c64 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015c68:	697b      	ldr	r3, [r7, #20]
 8015c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015c6e:	f023 0301 	bic.w	r3, r3, #1
 8015c72:	b2da      	uxtb	r2, r3
 8015c74:	697b      	ldr	r3, [r7, #20]
 8015c76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015c7a:	697b      	ldr	r3, [r7, #20]
 8015c7c:	6a1b      	ldr	r3, [r3, #32]
 8015c7e:	6978      	ldr	r0, [r7, #20]
 8015c80:	4798      	blx	r3
    }
 8015c82:	bf00      	nop
 8015c84:	3718      	adds	r7, #24
 8015c86:	46bd      	mov	sp, r7
 8015c88:	bd80      	pop	{r7, pc}
 8015c8a:	bf00      	nop
 8015c8c:	20001640 	.word	0x20001640

08015c90 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b084      	sub	sp, #16
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015c98:	f107 0308 	add.w	r3, r7, #8
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	f000 f859 	bl	8015d54 <prvGetNextExpireTime>
 8015ca2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015ca4:	68bb      	ldr	r3, [r7, #8]
 8015ca6:	4619      	mov	r1, r3
 8015ca8:	68f8      	ldr	r0, [r7, #12]
 8015caa:	f000 f805 	bl	8015cb8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8015cae:	f000 f8d7 	bl	8015e60 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015cb2:	bf00      	nop
 8015cb4:	e7f0      	b.n	8015c98 <prvTimerTask+0x8>
	...

08015cb8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b084      	sub	sp, #16
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
 8015cc0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8015cc2:	f7fe fef3 	bl	8014aac <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015cc6:	f107 0308 	add.w	r3, r7, #8
 8015cca:	4618      	mov	r0, r3
 8015ccc:	f000 f866 	bl	8015d9c <prvSampleTimeNow>
 8015cd0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8015cd2:	68bb      	ldr	r3, [r7, #8]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d130      	bne.n	8015d3a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015cd8:	683b      	ldr	r3, [r7, #0]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d10a      	bne.n	8015cf4 <prvProcessTimerOrBlockTask+0x3c>
 8015cde:	687a      	ldr	r2, [r7, #4]
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	429a      	cmp	r2, r3
 8015ce4:	d806      	bhi.n	8015cf4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8015ce6:	f7fe feef 	bl	8014ac8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015cea:	68f9      	ldr	r1, [r7, #12]
 8015cec:	6878      	ldr	r0, [r7, #4]
 8015cee:	f7ff ff81 	bl	8015bf4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8015cf2:	e024      	b.n	8015d3e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8015cf4:	683b      	ldr	r3, [r7, #0]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d008      	beq.n	8015d0c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015cfa:	4b13      	ldr	r3, [pc, #76]	@ (8015d48 <prvProcessTimerOrBlockTask+0x90>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d101      	bne.n	8015d08 <prvProcessTimerOrBlockTask+0x50>
 8015d04:	2301      	movs	r3, #1
 8015d06:	e000      	b.n	8015d0a <prvProcessTimerOrBlockTask+0x52>
 8015d08:	2300      	movs	r3, #0
 8015d0a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8015d4c <prvProcessTimerOrBlockTask+0x94>)
 8015d0e:	6818      	ldr	r0, [r3, #0]
 8015d10:	687a      	ldr	r2, [r7, #4]
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	1ad3      	subs	r3, r2, r3
 8015d16:	683a      	ldr	r2, [r7, #0]
 8015d18:	4619      	mov	r1, r3
 8015d1a:	f7fe fc4b 	bl	80145b4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8015d1e:	f7fe fed3 	bl	8014ac8 <xTaskResumeAll>
 8015d22:	4603      	mov	r3, r0
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d10a      	bne.n	8015d3e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8015d28:	4b09      	ldr	r3, [pc, #36]	@ (8015d50 <prvProcessTimerOrBlockTask+0x98>)
 8015d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015d2e:	601a      	str	r2, [r3, #0]
 8015d30:	f3bf 8f4f 	dsb	sy
 8015d34:	f3bf 8f6f 	isb	sy
    }
 8015d38:	e001      	b.n	8015d3e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8015d3a:	f7fe fec5 	bl	8014ac8 <xTaskResumeAll>
    }
 8015d3e:	bf00      	nop
 8015d40:	3710      	adds	r7, #16
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd80      	pop	{r7, pc}
 8015d46:	bf00      	nop
 8015d48:	20001644 	.word	0x20001644
 8015d4c:	20001648 	.word	0x20001648
 8015d50:	e000ed04 	.word	0xe000ed04

08015d54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8015d54:	b480      	push	{r7}
 8015d56:	b085      	sub	sp, #20
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8015d98 <prvGetNextExpireTime+0x44>)
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d101      	bne.n	8015d6a <prvGetNextExpireTime+0x16>
 8015d66:	2201      	movs	r2, #1
 8015d68:	e000      	b.n	8015d6c <prvGetNextExpireTime+0x18>
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d105      	bne.n	8015d84 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015d78:	4b07      	ldr	r3, [pc, #28]	@ (8015d98 <prvGetNextExpireTime+0x44>)
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	68db      	ldr	r3, [r3, #12]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	60fb      	str	r3, [r7, #12]
 8015d82:	e001      	b.n	8015d88 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8015d84:	2300      	movs	r3, #0
 8015d86:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8015d88:	68fb      	ldr	r3, [r7, #12]
    }
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	3714      	adds	r7, #20
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d94:	4770      	bx	lr
 8015d96:	bf00      	nop
 8015d98:	20001640 	.word	0x20001640

08015d9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b084      	sub	sp, #16
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8015da4:	f7fe ff2e 	bl	8014c04 <xTaskGetTickCount>
 8015da8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8015daa:	4b0b      	ldr	r3, [pc, #44]	@ (8015dd8 <prvSampleTimeNow+0x3c>)
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	68fa      	ldr	r2, [r7, #12]
 8015db0:	429a      	cmp	r2, r3
 8015db2:	d205      	bcs.n	8015dc0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8015db4:	f000 f91e 	bl	8015ff4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	2201      	movs	r2, #1
 8015dbc:	601a      	str	r2, [r3, #0]
 8015dbe:	e002      	b.n	8015dc6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8015dc6:	4a04      	ldr	r2, [pc, #16]	@ (8015dd8 <prvSampleTimeNow+0x3c>)
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8015dcc:	68fb      	ldr	r3, [r7, #12]
    }
 8015dce:	4618      	mov	r0, r3
 8015dd0:	3710      	adds	r7, #16
 8015dd2:	46bd      	mov	sp, r7
 8015dd4:	bd80      	pop	{r7, pc}
 8015dd6:	bf00      	nop
 8015dd8:	20001650 	.word	0x20001650

08015ddc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b086      	sub	sp, #24
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	60f8      	str	r0, [r7, #12]
 8015de4:	60b9      	str	r1, [r7, #8]
 8015de6:	607a      	str	r2, [r7, #4]
 8015de8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8015dea:	2300      	movs	r3, #0
 8015dec:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	68ba      	ldr	r2, [r7, #8]
 8015df2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	68fa      	ldr	r2, [r7, #12]
 8015df8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8015dfa:	68ba      	ldr	r2, [r7, #8]
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	429a      	cmp	r2, r3
 8015e00:	d812      	bhi.n	8015e28 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015e02:	687a      	ldr	r2, [r7, #4]
 8015e04:	683b      	ldr	r3, [r7, #0]
 8015e06:	1ad2      	subs	r2, r2, r3
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	699b      	ldr	r3, [r3, #24]
 8015e0c:	429a      	cmp	r2, r3
 8015e0e:	d302      	bcc.n	8015e16 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8015e10:	2301      	movs	r3, #1
 8015e12:	617b      	str	r3, [r7, #20]
 8015e14:	e01b      	b.n	8015e4e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015e16:	4b10      	ldr	r3, [pc, #64]	@ (8015e58 <prvInsertTimerInActiveList+0x7c>)
 8015e18:	681a      	ldr	r2, [r3, #0]
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	3304      	adds	r3, #4
 8015e1e:	4619      	mov	r1, r3
 8015e20:	4610      	mov	r0, r2
 8015e22:	f7fd fd4e 	bl	80138c2 <vListInsert>
 8015e26:	e012      	b.n	8015e4e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015e28:	687a      	ldr	r2, [r7, #4]
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	429a      	cmp	r2, r3
 8015e2e:	d206      	bcs.n	8015e3e <prvInsertTimerInActiveList+0x62>
 8015e30:	68ba      	ldr	r2, [r7, #8]
 8015e32:	683b      	ldr	r3, [r7, #0]
 8015e34:	429a      	cmp	r2, r3
 8015e36:	d302      	bcc.n	8015e3e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8015e38:	2301      	movs	r3, #1
 8015e3a:	617b      	str	r3, [r7, #20]
 8015e3c:	e007      	b.n	8015e4e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015e3e:	4b07      	ldr	r3, [pc, #28]	@ (8015e5c <prvInsertTimerInActiveList+0x80>)
 8015e40:	681a      	ldr	r2, [r3, #0]
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	3304      	adds	r3, #4
 8015e46:	4619      	mov	r1, r3
 8015e48:	4610      	mov	r0, r2
 8015e4a:	f7fd fd3a 	bl	80138c2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8015e4e:	697b      	ldr	r3, [r7, #20]
    }
 8015e50:	4618      	mov	r0, r3
 8015e52:	3718      	adds	r7, #24
 8015e54:	46bd      	mov	sp, r7
 8015e56:	bd80      	pop	{r7, pc}
 8015e58:	20001644 	.word	0x20001644
 8015e5c:	20001640 	.word	0x20001640

08015e60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b08c      	sub	sp, #48	@ 0x30
 8015e64:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015e66:	e0b2      	b.n	8015fce <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015e68:	68bb      	ldr	r3, [r7, #8]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	f2c0 80af 	blt.w	8015fce <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015e70:	693b      	ldr	r3, [r7, #16]
 8015e72:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e76:	695b      	ldr	r3, [r3, #20]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d004      	beq.n	8015e86 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e7e:	3304      	adds	r3, #4
 8015e80:	4618      	mov	r0, r3
 8015e82:	f7fd fd57 	bl	8013934 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015e86:	1d3b      	adds	r3, r7, #4
 8015e88:	4618      	mov	r0, r3
 8015e8a:	f7ff ff87 	bl	8015d9c <prvSampleTimeNow>
 8015e8e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8015e90:	68bb      	ldr	r3, [r7, #8]
 8015e92:	2b09      	cmp	r3, #9
 8015e94:	f200 8098 	bhi.w	8015fc8 <prvProcessReceivedCommands+0x168>
 8015e98:	a201      	add	r2, pc, #4	@ (adr r2, 8015ea0 <prvProcessReceivedCommands+0x40>)
 8015e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e9e:	bf00      	nop
 8015ea0:	08015ec9 	.word	0x08015ec9
 8015ea4:	08015ec9 	.word	0x08015ec9
 8015ea8:	08015ec9 	.word	0x08015ec9
 8015eac:	08015f3f 	.word	0x08015f3f
 8015eb0:	08015f53 	.word	0x08015f53
 8015eb4:	08015f9f 	.word	0x08015f9f
 8015eb8:	08015ec9 	.word	0x08015ec9
 8015ebc:	08015ec9 	.word	0x08015ec9
 8015ec0:	08015f3f 	.word	0x08015f3f
 8015ec4:	08015f53 	.word	0x08015f53
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015ece:	f043 0301 	orr.w	r3, r3, #1
 8015ed2:	b2da      	uxtb	r2, r3
 8015ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ed6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015eda:	68fa      	ldr	r2, [r7, #12]
 8015edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ede:	699b      	ldr	r3, [r3, #24]
 8015ee0:	18d1      	adds	r1, r2, r3
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	6a3a      	ldr	r2, [r7, #32]
 8015ee6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015ee8:	f7ff ff78 	bl	8015ddc <prvInsertTimerInActiveList>
 8015eec:	4603      	mov	r3, r0
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d06c      	beq.n	8015fcc <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ef4:	6a1b      	ldr	r3, [r3, #32]
 8015ef6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015ef8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015efc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015f00:	f003 0304 	and.w	r3, r3, #4
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d061      	beq.n	8015fcc <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015f08:	68fa      	ldr	r2, [r7, #12]
 8015f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f0c:	699b      	ldr	r3, [r3, #24]
 8015f0e:	441a      	add	r2, r3
 8015f10:	2300      	movs	r3, #0
 8015f12:	9300      	str	r3, [sp, #0]
 8015f14:	2300      	movs	r3, #0
 8015f16:	2100      	movs	r1, #0
 8015f18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015f1a:	f7ff fe1d 	bl	8015b58 <xTimerGenericCommand>
 8015f1e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8015f20:	69fb      	ldr	r3, [r7, #28]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d152      	bne.n	8015fcc <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8015f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f2a:	f383 8811 	msr	BASEPRI, r3
 8015f2e:	f3bf 8f6f 	isb	sy
 8015f32:	f3bf 8f4f 	dsb	sy
 8015f36:	61bb      	str	r3, [r7, #24]
    }
 8015f38:	bf00      	nop
 8015f3a:	bf00      	nop
 8015f3c:	e7fd      	b.n	8015f3a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015f44:	f023 0301 	bic.w	r3, r3, #1
 8015f48:	b2da      	uxtb	r2, r3
 8015f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8015f50:	e03d      	b.n	8015fce <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015f58:	f043 0301 	orr.w	r3, r3, #1
 8015f5c:	b2da      	uxtb	r2, r3
 8015f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015f64:	68fa      	ldr	r2, [r7, #12]
 8015f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f68:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f6c:	699b      	ldr	r3, [r3, #24]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d10b      	bne.n	8015f8a <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8015f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f76:	f383 8811 	msr	BASEPRI, r3
 8015f7a:	f3bf 8f6f 	isb	sy
 8015f7e:	f3bf 8f4f 	dsb	sy
 8015f82:	617b      	str	r3, [r7, #20]
    }
 8015f84:	bf00      	nop
 8015f86:	bf00      	nop
 8015f88:	e7fd      	b.n	8015f86 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f8c:	699a      	ldr	r2, [r3, #24]
 8015f8e:	6a3b      	ldr	r3, [r7, #32]
 8015f90:	18d1      	adds	r1, r2, r3
 8015f92:	6a3b      	ldr	r3, [r7, #32]
 8015f94:	6a3a      	ldr	r2, [r7, #32]
 8015f96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015f98:	f7ff ff20 	bl	8015ddc <prvInsertTimerInActiveList>
                        break;
 8015f9c:	e017      	b.n	8015fce <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015fa4:	f003 0302 	and.w	r3, r3, #2
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d103      	bne.n	8015fb4 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8015fac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015fae:	f000 fbf9 	bl	80167a4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8015fb2:	e00c      	b.n	8015fce <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015fba:	f023 0301 	bic.w	r3, r3, #1
 8015fbe:	b2da      	uxtb	r2, r3
 8015fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8015fc6:	e002      	b.n	8015fce <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8015fc8:	bf00      	nop
 8015fca:	e000      	b.n	8015fce <prvProcessReceivedCommands+0x16e>
                        break;
 8015fcc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015fce:	4b08      	ldr	r3, [pc, #32]	@ (8015ff0 <prvProcessReceivedCommands+0x190>)
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	f107 0108 	add.w	r1, r7, #8
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	4618      	mov	r0, r3
 8015fda:	f7fd ffa7 	bl	8013f2c <xQueueReceive>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	f47f af41 	bne.w	8015e68 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8015fe6:	bf00      	nop
 8015fe8:	bf00      	nop
 8015fea:	3728      	adds	r7, #40	@ 0x28
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd80      	pop	{r7, pc}
 8015ff0:	20001648 	.word	0x20001648

08015ff4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b088      	sub	sp, #32
 8015ff8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015ffa:	e049      	b.n	8016090 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015ffc:	4b2e      	ldr	r3, [pc, #184]	@ (80160b8 <prvSwitchTimerLists+0xc4>)
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	68db      	ldr	r3, [r3, #12]
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016006:	4b2c      	ldr	r3, [pc, #176]	@ (80160b8 <prvSwitchTimerLists+0xc4>)
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	68db      	ldr	r3, [r3, #12]
 801600c:	68db      	ldr	r3, [r3, #12]
 801600e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	3304      	adds	r3, #4
 8016014:	4618      	mov	r0, r3
 8016016:	f7fd fc8d 	bl	8013934 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	6a1b      	ldr	r3, [r3, #32]
 801601e:	68f8      	ldr	r0, [r7, #12]
 8016020:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016028:	f003 0304 	and.w	r3, r3, #4
 801602c:	2b00      	cmp	r3, #0
 801602e:	d02f      	beq.n	8016090 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	699b      	ldr	r3, [r3, #24]
 8016034:	693a      	ldr	r2, [r7, #16]
 8016036:	4413      	add	r3, r2
 8016038:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 801603a:	68ba      	ldr	r2, [r7, #8]
 801603c:	693b      	ldr	r3, [r7, #16]
 801603e:	429a      	cmp	r2, r3
 8016040:	d90e      	bls.n	8016060 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	68ba      	ldr	r2, [r7, #8]
 8016046:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	68fa      	ldr	r2, [r7, #12]
 801604c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801604e:	4b1a      	ldr	r3, [pc, #104]	@ (80160b8 <prvSwitchTimerLists+0xc4>)
 8016050:	681a      	ldr	r2, [r3, #0]
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	3304      	adds	r3, #4
 8016056:	4619      	mov	r1, r3
 8016058:	4610      	mov	r0, r2
 801605a:	f7fd fc32 	bl	80138c2 <vListInsert>
 801605e:	e017      	b.n	8016090 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016060:	2300      	movs	r3, #0
 8016062:	9300      	str	r3, [sp, #0]
 8016064:	2300      	movs	r3, #0
 8016066:	693a      	ldr	r2, [r7, #16]
 8016068:	2100      	movs	r1, #0
 801606a:	68f8      	ldr	r0, [r7, #12]
 801606c:	f7ff fd74 	bl	8015b58 <xTimerGenericCommand>
 8016070:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d10b      	bne.n	8016090 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8016078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801607c:	f383 8811 	msr	BASEPRI, r3
 8016080:	f3bf 8f6f 	isb	sy
 8016084:	f3bf 8f4f 	dsb	sy
 8016088:	603b      	str	r3, [r7, #0]
    }
 801608a:	bf00      	nop
 801608c:	bf00      	nop
 801608e:	e7fd      	b.n	801608c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016090:	4b09      	ldr	r3, [pc, #36]	@ (80160b8 <prvSwitchTimerLists+0xc4>)
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d1b0      	bne.n	8015ffc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 801609a:	4b07      	ldr	r3, [pc, #28]	@ (80160b8 <prvSwitchTimerLists+0xc4>)
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80160a0:	4b06      	ldr	r3, [pc, #24]	@ (80160bc <prvSwitchTimerLists+0xc8>)
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	4a04      	ldr	r2, [pc, #16]	@ (80160b8 <prvSwitchTimerLists+0xc4>)
 80160a6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80160a8:	4a04      	ldr	r2, [pc, #16]	@ (80160bc <prvSwitchTimerLists+0xc8>)
 80160aa:	697b      	ldr	r3, [r7, #20]
 80160ac:	6013      	str	r3, [r2, #0]
    }
 80160ae:	bf00      	nop
 80160b0:	3718      	adds	r7, #24
 80160b2:	46bd      	mov	sp, r7
 80160b4:	bd80      	pop	{r7, pc}
 80160b6:	bf00      	nop
 80160b8:	20001640 	.word	0x20001640
 80160bc:	20001644 	.word	0x20001644

080160c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80160c0:	b580      	push	{r7, lr}
 80160c2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80160c4:	f000 f962 	bl	801638c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80160c8:	4b12      	ldr	r3, [pc, #72]	@ (8016114 <prvCheckForValidListAndQueue+0x54>)
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d11d      	bne.n	801610c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80160d0:	4811      	ldr	r0, [pc, #68]	@ (8016118 <prvCheckForValidListAndQueue+0x58>)
 80160d2:	f7fd fba5 	bl	8013820 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80160d6:	4811      	ldr	r0, [pc, #68]	@ (801611c <prvCheckForValidListAndQueue+0x5c>)
 80160d8:	f7fd fba2 	bl	8013820 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80160dc:	4b10      	ldr	r3, [pc, #64]	@ (8016120 <prvCheckForValidListAndQueue+0x60>)
 80160de:	4a0e      	ldr	r2, [pc, #56]	@ (8016118 <prvCheckForValidListAndQueue+0x58>)
 80160e0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80160e2:	4b10      	ldr	r3, [pc, #64]	@ (8016124 <prvCheckForValidListAndQueue+0x64>)
 80160e4:	4a0d      	ldr	r2, [pc, #52]	@ (801611c <prvCheckForValidListAndQueue+0x5c>)
 80160e6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80160e8:	2200      	movs	r2, #0
 80160ea:	210c      	movs	r1, #12
 80160ec:	200a      	movs	r0, #10
 80160ee:	f7fd fcb5 	bl	8013a5c <xQueueGenericCreate>
 80160f2:	4603      	mov	r3, r0
 80160f4:	4a07      	ldr	r2, [pc, #28]	@ (8016114 <prvCheckForValidListAndQueue+0x54>)
 80160f6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80160f8:	4b06      	ldr	r3, [pc, #24]	@ (8016114 <prvCheckForValidListAndQueue+0x54>)
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d005      	beq.n	801610c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016100:	4b04      	ldr	r3, [pc, #16]	@ (8016114 <prvCheckForValidListAndQueue+0x54>)
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	4908      	ldr	r1, [pc, #32]	@ (8016128 <prvCheckForValidListAndQueue+0x68>)
 8016106:	4618      	mov	r0, r3
 8016108:	f7fe fa2a 	bl	8014560 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 801610c:	f000 f970 	bl	80163f0 <vPortExitCritical>
    }
 8016110:	bf00      	nop
 8016112:	bd80      	pop	{r7, pc}
 8016114:	20001648 	.word	0x20001648
 8016118:	20001618 	.word	0x20001618
 801611c:	2000162c 	.word	0x2000162c
 8016120:	20001640 	.word	0x20001640
 8016124:	20001644 	.word	0x20001644
 8016128:	0801bfb8 	.word	0x0801bfb8

0801612c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 801612c:	b480      	push	{r7}
 801612e:	b085      	sub	sp, #20
 8016130:	af00      	add	r7, sp, #0
 8016132:	60f8      	str	r0, [r7, #12]
 8016134:	60b9      	str	r1, [r7, #8]
 8016136:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	3b04      	subs	r3, #4
 801613c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016144:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	3b04      	subs	r3, #4
 801614a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 801614c:	68bb      	ldr	r3, [r7, #8]
 801614e:	f023 0201 	bic.w	r2, r3, #1
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	3b04      	subs	r3, #4
 801615a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 801615c:	4a0c      	ldr	r2, [pc, #48]	@ (8016190 <pxPortInitialiseStack+0x64>)
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	3b14      	subs	r3, #20
 8016166:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8016168:	687a      	ldr	r2, [r7, #4]
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	3b04      	subs	r3, #4
 8016172:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	f06f 0202 	mvn.w	r2, #2
 801617a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	3b20      	subs	r3, #32
 8016180:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8016182:	68fb      	ldr	r3, [r7, #12]
}
 8016184:	4618      	mov	r0, r3
 8016186:	3714      	adds	r7, #20
 8016188:	46bd      	mov	sp, r7
 801618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801618e:	4770      	bx	lr
 8016190:	08016195 	.word	0x08016195

08016194 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016194:	b480      	push	{r7}
 8016196:	b085      	sub	sp, #20
 8016198:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 801619a:	2300      	movs	r3, #0
 801619c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 801619e:	4b13      	ldr	r3, [pc, #76]	@ (80161ec <prvTaskExitError+0x58>)
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161a6:	d00b      	beq.n	80161c0 <prvTaskExitError+0x2c>
        __asm volatile
 80161a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161ac:	f383 8811 	msr	BASEPRI, r3
 80161b0:	f3bf 8f6f 	isb	sy
 80161b4:	f3bf 8f4f 	dsb	sy
 80161b8:	60fb      	str	r3, [r7, #12]
    }
 80161ba:	bf00      	nop
 80161bc:	bf00      	nop
 80161be:	e7fd      	b.n	80161bc <prvTaskExitError+0x28>
        __asm volatile
 80161c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161c4:	f383 8811 	msr	BASEPRI, r3
 80161c8:	f3bf 8f6f 	isb	sy
 80161cc:	f3bf 8f4f 	dsb	sy
 80161d0:	60bb      	str	r3, [r7, #8]
    }
 80161d2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80161d4:	bf00      	nop
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d0fc      	beq.n	80161d6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80161dc:	bf00      	nop
 80161de:	bf00      	nop
 80161e0:	3714      	adds	r7, #20
 80161e2:	46bd      	mov	sp, r7
 80161e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e8:	4770      	bx	lr
 80161ea:	bf00      	nop
 80161ec:	20000080 	.word	0x20000080

080161f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80161f0:	4b07      	ldr	r3, [pc, #28]	@ (8016210 <pxCurrentTCBConst2>)
 80161f2:	6819      	ldr	r1, [r3, #0]
 80161f4:	6808      	ldr	r0, [r1, #0]
 80161f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161fa:	f380 8809 	msr	PSP, r0
 80161fe:	f3bf 8f6f 	isb	sy
 8016202:	f04f 0000 	mov.w	r0, #0
 8016206:	f380 8811 	msr	BASEPRI, r0
 801620a:	4770      	bx	lr
 801620c:	f3af 8000 	nop.w

08016210 <pxCurrentTCBConst2>:
 8016210:	20001514 	.word	0x20001514
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8016214:	bf00      	nop
 8016216:	bf00      	nop

08016218 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8016218:	4808      	ldr	r0, [pc, #32]	@ (801623c <prvPortStartFirstTask+0x24>)
 801621a:	6800      	ldr	r0, [r0, #0]
 801621c:	6800      	ldr	r0, [r0, #0]
 801621e:	f380 8808 	msr	MSP, r0
 8016222:	f04f 0000 	mov.w	r0, #0
 8016226:	f380 8814 	msr	CONTROL, r0
 801622a:	b662      	cpsie	i
 801622c:	b661      	cpsie	f
 801622e:	f3bf 8f4f 	dsb	sy
 8016232:	f3bf 8f6f 	isb	sy
 8016236:	df00      	svc	0
 8016238:	bf00      	nop
 801623a:	0000      	.short	0x0000
 801623c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8016240:	bf00      	nop
 8016242:	bf00      	nop

08016244 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b086      	sub	sp, #24
 8016248:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801624a:	4b47      	ldr	r3, [pc, #284]	@ (8016368 <xPortStartScheduler+0x124>)
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	4a47      	ldr	r2, [pc, #284]	@ (801636c <xPortStartScheduler+0x128>)
 8016250:	4293      	cmp	r3, r2
 8016252:	d10b      	bne.n	801626c <xPortStartScheduler+0x28>
        __asm volatile
 8016254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016258:	f383 8811 	msr	BASEPRI, r3
 801625c:	f3bf 8f6f 	isb	sy
 8016260:	f3bf 8f4f 	dsb	sy
 8016264:	60fb      	str	r3, [r7, #12]
    }
 8016266:	bf00      	nop
 8016268:	bf00      	nop
 801626a:	e7fd      	b.n	8016268 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801626c:	4b3e      	ldr	r3, [pc, #248]	@ (8016368 <xPortStartScheduler+0x124>)
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	4a3f      	ldr	r2, [pc, #252]	@ (8016370 <xPortStartScheduler+0x12c>)
 8016272:	4293      	cmp	r3, r2
 8016274:	d10b      	bne.n	801628e <xPortStartScheduler+0x4a>
        __asm volatile
 8016276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801627a:	f383 8811 	msr	BASEPRI, r3
 801627e:	f3bf 8f6f 	isb	sy
 8016282:	f3bf 8f4f 	dsb	sy
 8016286:	613b      	str	r3, [r7, #16]
    }
 8016288:	bf00      	nop
 801628a:	bf00      	nop
 801628c:	e7fd      	b.n	801628a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801628e:	4b39      	ldr	r3, [pc, #228]	@ (8016374 <xPortStartScheduler+0x130>)
 8016290:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016292:	697b      	ldr	r3, [r7, #20]
 8016294:	781b      	ldrb	r3, [r3, #0]
 8016296:	b2db      	uxtb	r3, r3
 8016298:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801629a:	697b      	ldr	r3, [r7, #20]
 801629c:	22ff      	movs	r2, #255	@ 0xff
 801629e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80162a0:	697b      	ldr	r3, [r7, #20]
 80162a2:	781b      	ldrb	r3, [r3, #0]
 80162a4:	b2db      	uxtb	r3, r3
 80162a6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80162a8:	78fb      	ldrb	r3, [r7, #3]
 80162aa:	b2db      	uxtb	r3, r3
 80162ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80162b0:	b2da      	uxtb	r2, r3
 80162b2:	4b31      	ldr	r3, [pc, #196]	@ (8016378 <xPortStartScheduler+0x134>)
 80162b4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80162b6:	4b31      	ldr	r3, [pc, #196]	@ (801637c <xPortStartScheduler+0x138>)
 80162b8:	2207      	movs	r2, #7
 80162ba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80162bc:	e009      	b.n	80162d2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80162be:	4b2f      	ldr	r3, [pc, #188]	@ (801637c <xPortStartScheduler+0x138>)
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	3b01      	subs	r3, #1
 80162c4:	4a2d      	ldr	r2, [pc, #180]	@ (801637c <xPortStartScheduler+0x138>)
 80162c6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80162c8:	78fb      	ldrb	r3, [r7, #3]
 80162ca:	b2db      	uxtb	r3, r3
 80162cc:	005b      	lsls	r3, r3, #1
 80162ce:	b2db      	uxtb	r3, r3
 80162d0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80162d2:	78fb      	ldrb	r3, [r7, #3]
 80162d4:	b2db      	uxtb	r3, r3
 80162d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80162da:	2b80      	cmp	r3, #128	@ 0x80
 80162dc:	d0ef      	beq.n	80162be <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80162de:	4b27      	ldr	r3, [pc, #156]	@ (801637c <xPortStartScheduler+0x138>)
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	f1c3 0307 	rsb	r3, r3, #7
 80162e6:	2b04      	cmp	r3, #4
 80162e8:	d00b      	beq.n	8016302 <xPortStartScheduler+0xbe>
        __asm volatile
 80162ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162ee:	f383 8811 	msr	BASEPRI, r3
 80162f2:	f3bf 8f6f 	isb	sy
 80162f6:	f3bf 8f4f 	dsb	sy
 80162fa:	60bb      	str	r3, [r7, #8]
    }
 80162fc:	bf00      	nop
 80162fe:	bf00      	nop
 8016300:	e7fd      	b.n	80162fe <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016302:	4b1e      	ldr	r3, [pc, #120]	@ (801637c <xPortStartScheduler+0x138>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	021b      	lsls	r3, r3, #8
 8016308:	4a1c      	ldr	r2, [pc, #112]	@ (801637c <xPortStartScheduler+0x138>)
 801630a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801630c:	4b1b      	ldr	r3, [pc, #108]	@ (801637c <xPortStartScheduler+0x138>)
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016314:	4a19      	ldr	r2, [pc, #100]	@ (801637c <xPortStartScheduler+0x138>)
 8016316:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	b2da      	uxtb	r2, r3
 801631c:	697b      	ldr	r3, [r7, #20]
 801631e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8016320:	4b17      	ldr	r3, [pc, #92]	@ (8016380 <xPortStartScheduler+0x13c>)
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	4a16      	ldr	r2, [pc, #88]	@ (8016380 <xPortStartScheduler+0x13c>)
 8016326:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801632a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 801632c:	4b14      	ldr	r3, [pc, #80]	@ (8016380 <xPortStartScheduler+0x13c>)
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	4a13      	ldr	r2, [pc, #76]	@ (8016380 <xPortStartScheduler+0x13c>)
 8016332:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016336:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8016338:	f000 f8e0 	bl	80164fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 801633c:	4b11      	ldr	r3, [pc, #68]	@ (8016384 <xPortStartScheduler+0x140>)
 801633e:	2200      	movs	r2, #0
 8016340:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8016342:	f000 f8ff 	bl	8016544 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016346:	4b10      	ldr	r3, [pc, #64]	@ (8016388 <xPortStartScheduler+0x144>)
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	4a0f      	ldr	r2, [pc, #60]	@ (8016388 <xPortStartScheduler+0x144>)
 801634c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8016350:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8016352:	f7ff ff61 	bl	8016218 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8016356:	f7fe fdad 	bl	8014eb4 <vTaskSwitchContext>
    prvTaskExitError();
 801635a:	f7ff ff1b 	bl	8016194 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 801635e:	2300      	movs	r3, #0
}
 8016360:	4618      	mov	r0, r3
 8016362:	3718      	adds	r7, #24
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}
 8016368:	e000ed00 	.word	0xe000ed00
 801636c:	410fc271 	.word	0x410fc271
 8016370:	410fc270 	.word	0x410fc270
 8016374:	e000e400 	.word	0xe000e400
 8016378:	20001654 	.word	0x20001654
 801637c:	20001658 	.word	0x20001658
 8016380:	e000ed20 	.word	0xe000ed20
 8016384:	20000080 	.word	0x20000080
 8016388:	e000ef34 	.word	0xe000ef34

0801638c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801638c:	b480      	push	{r7}
 801638e:	b083      	sub	sp, #12
 8016390:	af00      	add	r7, sp, #0
        __asm volatile
 8016392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016396:	f383 8811 	msr	BASEPRI, r3
 801639a:	f3bf 8f6f 	isb	sy
 801639e:	f3bf 8f4f 	dsb	sy
 80163a2:	607b      	str	r3, [r7, #4]
    }
 80163a4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80163a6:	4b10      	ldr	r3, [pc, #64]	@ (80163e8 <vPortEnterCritical+0x5c>)
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	3301      	adds	r3, #1
 80163ac:	4a0e      	ldr	r2, [pc, #56]	@ (80163e8 <vPortEnterCritical+0x5c>)
 80163ae:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80163b0:	4b0d      	ldr	r3, [pc, #52]	@ (80163e8 <vPortEnterCritical+0x5c>)
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	2b01      	cmp	r3, #1
 80163b6:	d110      	bne.n	80163da <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80163b8:	4b0c      	ldr	r3, [pc, #48]	@ (80163ec <vPortEnterCritical+0x60>)
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	b2db      	uxtb	r3, r3
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d00b      	beq.n	80163da <vPortEnterCritical+0x4e>
        __asm volatile
 80163c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163c6:	f383 8811 	msr	BASEPRI, r3
 80163ca:	f3bf 8f6f 	isb	sy
 80163ce:	f3bf 8f4f 	dsb	sy
 80163d2:	603b      	str	r3, [r7, #0]
    }
 80163d4:	bf00      	nop
 80163d6:	bf00      	nop
 80163d8:	e7fd      	b.n	80163d6 <vPortEnterCritical+0x4a>
    }
}
 80163da:	bf00      	nop
 80163dc:	370c      	adds	r7, #12
 80163de:	46bd      	mov	sp, r7
 80163e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e4:	4770      	bx	lr
 80163e6:	bf00      	nop
 80163e8:	20000080 	.word	0x20000080
 80163ec:	e000ed04 	.word	0xe000ed04

080163f0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80163f0:	b480      	push	{r7}
 80163f2:	b083      	sub	sp, #12
 80163f4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80163f6:	4b12      	ldr	r3, [pc, #72]	@ (8016440 <vPortExitCritical+0x50>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d10b      	bne.n	8016416 <vPortExitCritical+0x26>
        __asm volatile
 80163fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016402:	f383 8811 	msr	BASEPRI, r3
 8016406:	f3bf 8f6f 	isb	sy
 801640a:	f3bf 8f4f 	dsb	sy
 801640e:	607b      	str	r3, [r7, #4]
    }
 8016410:	bf00      	nop
 8016412:	bf00      	nop
 8016414:	e7fd      	b.n	8016412 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8016416:	4b0a      	ldr	r3, [pc, #40]	@ (8016440 <vPortExitCritical+0x50>)
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	3b01      	subs	r3, #1
 801641c:	4a08      	ldr	r2, [pc, #32]	@ (8016440 <vPortExitCritical+0x50>)
 801641e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8016420:	4b07      	ldr	r3, [pc, #28]	@ (8016440 <vPortExitCritical+0x50>)
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d105      	bne.n	8016434 <vPortExitCritical+0x44>
 8016428:	2300      	movs	r3, #0
 801642a:	603b      	str	r3, [r7, #0]
        __asm volatile
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	f383 8811 	msr	BASEPRI, r3
    }
 8016432:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8016434:	bf00      	nop
 8016436:	370c      	adds	r7, #12
 8016438:	46bd      	mov	sp, r7
 801643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801643e:	4770      	bx	lr
 8016440:	20000080 	.word	0x20000080
	...

08016450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8016450:	f3ef 8009 	mrs	r0, PSP
 8016454:	f3bf 8f6f 	isb	sy
 8016458:	4b15      	ldr	r3, [pc, #84]	@ (80164b0 <pxCurrentTCBConst>)
 801645a:	681a      	ldr	r2, [r3, #0]
 801645c:	f01e 0f10 	tst.w	lr, #16
 8016460:	bf08      	it	eq
 8016462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801646a:	6010      	str	r0, [r2, #0]
 801646c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016470:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016474:	f380 8811 	msr	BASEPRI, r0
 8016478:	f3bf 8f4f 	dsb	sy
 801647c:	f3bf 8f6f 	isb	sy
 8016480:	f7fe fd18 	bl	8014eb4 <vTaskSwitchContext>
 8016484:	f04f 0000 	mov.w	r0, #0
 8016488:	f380 8811 	msr	BASEPRI, r0
 801648c:	bc09      	pop	{r0, r3}
 801648e:	6819      	ldr	r1, [r3, #0]
 8016490:	6808      	ldr	r0, [r1, #0]
 8016492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016496:	f01e 0f10 	tst.w	lr, #16
 801649a:	bf08      	it	eq
 801649c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80164a0:	f380 8809 	msr	PSP, r0
 80164a4:	f3bf 8f6f 	isb	sy
 80164a8:	4770      	bx	lr
 80164aa:	bf00      	nop
 80164ac:	f3af 8000 	nop.w

080164b0 <pxCurrentTCBConst>:
 80164b0:	20001514 	.word	0x20001514
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80164b4:	bf00      	nop
 80164b6:	bf00      	nop

080164b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b082      	sub	sp, #8
 80164bc:	af00      	add	r7, sp, #0
        __asm volatile
 80164be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80164c2:	f383 8811 	msr	BASEPRI, r3
 80164c6:	f3bf 8f6f 	isb	sy
 80164ca:	f3bf 8f4f 	dsb	sy
 80164ce:	607b      	str	r3, [r7, #4]
    }
 80164d0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80164d2:	f7fe fc35 	bl	8014d40 <xTaskIncrementTick>
 80164d6:	4603      	mov	r3, r0
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d003      	beq.n	80164e4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80164dc:	4b06      	ldr	r3, [pc, #24]	@ (80164f8 <SysTick_Handler+0x40>)
 80164de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80164e2:	601a      	str	r2, [r3, #0]
 80164e4:	2300      	movs	r3, #0
 80164e6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80164e8:	683b      	ldr	r3, [r7, #0]
 80164ea:	f383 8811 	msr	BASEPRI, r3
    }
 80164ee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80164f0:	bf00      	nop
 80164f2:	3708      	adds	r7, #8
 80164f4:	46bd      	mov	sp, r7
 80164f6:	bd80      	pop	{r7, pc}
 80164f8:	e000ed04 	.word	0xe000ed04

080164fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80164fc:	b480      	push	{r7}
 80164fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016500:	4b0b      	ldr	r3, [pc, #44]	@ (8016530 <vPortSetupTimerInterrupt+0x34>)
 8016502:	2200      	movs	r2, #0
 8016504:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016506:	4b0b      	ldr	r3, [pc, #44]	@ (8016534 <vPortSetupTimerInterrupt+0x38>)
 8016508:	2200      	movs	r2, #0
 801650a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801650c:	4b0a      	ldr	r3, [pc, #40]	@ (8016538 <vPortSetupTimerInterrupt+0x3c>)
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	4a0a      	ldr	r2, [pc, #40]	@ (801653c <vPortSetupTimerInterrupt+0x40>)
 8016512:	fba2 2303 	umull	r2, r3, r2, r3
 8016516:	099b      	lsrs	r3, r3, #6
 8016518:	4a09      	ldr	r2, [pc, #36]	@ (8016540 <vPortSetupTimerInterrupt+0x44>)
 801651a:	3b01      	subs	r3, #1
 801651c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801651e:	4b04      	ldr	r3, [pc, #16]	@ (8016530 <vPortSetupTimerInterrupt+0x34>)
 8016520:	2207      	movs	r2, #7
 8016522:	601a      	str	r2, [r3, #0]
}
 8016524:	bf00      	nop
 8016526:	46bd      	mov	sp, r7
 8016528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801652c:	4770      	bx	lr
 801652e:	bf00      	nop
 8016530:	e000e010 	.word	0xe000e010
 8016534:	e000e018 	.word	0xe000e018
 8016538:	20000034 	.word	0x20000034
 801653c:	10624dd3 	.word	0x10624dd3
 8016540:	e000e014 	.word	0xe000e014

08016544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8016544:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016554 <vPortEnableVFP+0x10>
 8016548:	6801      	ldr	r1, [r0, #0]
 801654a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801654e:	6001      	str	r1, [r0, #0]
 8016550:	4770      	bx	lr
 8016552:	0000      	.short	0x0000
 8016554:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8016558:	bf00      	nop
 801655a:	bf00      	nop

0801655c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 801655c:	b480      	push	{r7}
 801655e:	b085      	sub	sp, #20
 8016560:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8016562:	f3ef 8305 	mrs	r3, IPSR
 8016566:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	2b0f      	cmp	r3, #15
 801656c:	d915      	bls.n	801659a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801656e:	4a18      	ldr	r2, [pc, #96]	@ (80165d0 <vPortValidateInterruptPriority+0x74>)
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	4413      	add	r3, r2
 8016574:	781b      	ldrb	r3, [r3, #0]
 8016576:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016578:	4b16      	ldr	r3, [pc, #88]	@ (80165d4 <vPortValidateInterruptPriority+0x78>)
 801657a:	781b      	ldrb	r3, [r3, #0]
 801657c:	7afa      	ldrb	r2, [r7, #11]
 801657e:	429a      	cmp	r2, r3
 8016580:	d20b      	bcs.n	801659a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8016582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016586:	f383 8811 	msr	BASEPRI, r3
 801658a:	f3bf 8f6f 	isb	sy
 801658e:	f3bf 8f4f 	dsb	sy
 8016592:	607b      	str	r3, [r7, #4]
    }
 8016594:	bf00      	nop
 8016596:	bf00      	nop
 8016598:	e7fd      	b.n	8016596 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801659a:	4b0f      	ldr	r3, [pc, #60]	@ (80165d8 <vPortValidateInterruptPriority+0x7c>)
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80165a2:	4b0e      	ldr	r3, [pc, #56]	@ (80165dc <vPortValidateInterruptPriority+0x80>)
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	429a      	cmp	r2, r3
 80165a8:	d90b      	bls.n	80165c2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80165aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165ae:	f383 8811 	msr	BASEPRI, r3
 80165b2:	f3bf 8f6f 	isb	sy
 80165b6:	f3bf 8f4f 	dsb	sy
 80165ba:	603b      	str	r3, [r7, #0]
    }
 80165bc:	bf00      	nop
 80165be:	bf00      	nop
 80165c0:	e7fd      	b.n	80165be <vPortValidateInterruptPriority+0x62>
    }
 80165c2:	bf00      	nop
 80165c4:	3714      	adds	r7, #20
 80165c6:	46bd      	mov	sp, r7
 80165c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165cc:	4770      	bx	lr
 80165ce:	bf00      	nop
 80165d0:	e000e3f0 	.word	0xe000e3f0
 80165d4:	20001654 	.word	0x20001654
 80165d8:	e000ed0c 	.word	0xe000ed0c
 80165dc:	20001658 	.word	0x20001658

080165e0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b08a      	sub	sp, #40	@ 0x28
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80165e8:	2300      	movs	r3, #0
 80165ea:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80165ec:	f7fe fa5e 	bl	8014aac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80165f0:	4b66      	ldr	r3, [pc, #408]	@ (801678c <pvPortMalloc+0x1ac>)
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d101      	bne.n	80165fc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80165f8:	f000 f938 	bl	801686c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80165fc:	4b64      	ldr	r3, [pc, #400]	@ (8016790 <pvPortMalloc+0x1b0>)
 80165fe:	681a      	ldr	r2, [r3, #0]
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	4013      	ands	r3, r2
 8016604:	2b00      	cmp	r3, #0
 8016606:	f040 80a9 	bne.w	801675c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d02e      	beq.n	801666e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8016610:	2208      	movs	r2, #8
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8016616:	687a      	ldr	r2, [r7, #4]
 8016618:	429a      	cmp	r2, r3
 801661a:	d228      	bcs.n	801666e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 801661c:	2208      	movs	r2, #8
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	4413      	add	r3, r2
 8016622:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	f003 0307 	and.w	r3, r3, #7
 801662a:	2b00      	cmp	r3, #0
 801662c:	d022      	beq.n	8016674 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	f023 0307 	bic.w	r3, r3, #7
 8016634:	3308      	adds	r3, #8
 8016636:	687a      	ldr	r2, [r7, #4]
 8016638:	429a      	cmp	r2, r3
 801663a:	d215      	bcs.n	8016668 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	f023 0307 	bic.w	r3, r3, #7
 8016642:	3308      	adds	r3, #8
 8016644:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	f003 0307 	and.w	r3, r3, #7
 801664c:	2b00      	cmp	r3, #0
 801664e:	d011      	beq.n	8016674 <pvPortMalloc+0x94>
        __asm volatile
 8016650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016654:	f383 8811 	msr	BASEPRI, r3
 8016658:	f3bf 8f6f 	isb	sy
 801665c:	f3bf 8f4f 	dsb	sy
 8016660:	617b      	str	r3, [r7, #20]
    }
 8016662:	bf00      	nop
 8016664:	bf00      	nop
 8016666:	e7fd      	b.n	8016664 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8016668:	2300      	movs	r3, #0
 801666a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801666c:	e002      	b.n	8016674 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 801666e:	2300      	movs	r3, #0
 8016670:	607b      	str	r3, [r7, #4]
 8016672:	e000      	b.n	8016676 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016674:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d06f      	beq.n	801675c <pvPortMalloc+0x17c>
 801667c:	4b45      	ldr	r3, [pc, #276]	@ (8016794 <pvPortMalloc+0x1b4>)
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	687a      	ldr	r2, [r7, #4]
 8016682:	429a      	cmp	r2, r3
 8016684:	d86a      	bhi.n	801675c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8016686:	4b44      	ldr	r3, [pc, #272]	@ (8016798 <pvPortMalloc+0x1b8>)
 8016688:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 801668a:	4b43      	ldr	r3, [pc, #268]	@ (8016798 <pvPortMalloc+0x1b8>)
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016690:	e004      	b.n	801669c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8016692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016694:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8016696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801669c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801669e:	685b      	ldr	r3, [r3, #4]
 80166a0:	687a      	ldr	r2, [r7, #4]
 80166a2:	429a      	cmp	r2, r3
 80166a4:	d903      	bls.n	80166ae <pvPortMalloc+0xce>
 80166a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d1f1      	bne.n	8016692 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80166ae:	4b37      	ldr	r3, [pc, #220]	@ (801678c <pvPortMalloc+0x1ac>)
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166b4:	429a      	cmp	r2, r3
 80166b6:	d051      	beq.n	801675c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80166b8:	6a3b      	ldr	r3, [r7, #32]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	2208      	movs	r2, #8
 80166be:	4413      	add	r3, r2
 80166c0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80166c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166c4:	681a      	ldr	r2, [r3, #0]
 80166c6:	6a3b      	ldr	r3, [r7, #32]
 80166c8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80166ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166cc:	685a      	ldr	r2, [r3, #4]
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	1ad2      	subs	r2, r2, r3
 80166d2:	2308      	movs	r3, #8
 80166d4:	005b      	lsls	r3, r3, #1
 80166d6:	429a      	cmp	r2, r3
 80166d8:	d920      	bls.n	801671c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80166da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	4413      	add	r3, r2
 80166e0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80166e2:	69bb      	ldr	r3, [r7, #24]
 80166e4:	f003 0307 	and.w	r3, r3, #7
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d00b      	beq.n	8016704 <pvPortMalloc+0x124>
        __asm volatile
 80166ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166f0:	f383 8811 	msr	BASEPRI, r3
 80166f4:	f3bf 8f6f 	isb	sy
 80166f8:	f3bf 8f4f 	dsb	sy
 80166fc:	613b      	str	r3, [r7, #16]
    }
 80166fe:	bf00      	nop
 8016700:	bf00      	nop
 8016702:	e7fd      	b.n	8016700 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016706:	685a      	ldr	r2, [r3, #4]
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	1ad2      	subs	r2, r2, r3
 801670c:	69bb      	ldr	r3, [r7, #24]
 801670e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8016710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016712:	687a      	ldr	r2, [r7, #4]
 8016714:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016716:	69b8      	ldr	r0, [r7, #24]
 8016718:	f000 f90a 	bl	8016930 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 801671c:	4b1d      	ldr	r3, [pc, #116]	@ (8016794 <pvPortMalloc+0x1b4>)
 801671e:	681a      	ldr	r2, [r3, #0]
 8016720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016722:	685b      	ldr	r3, [r3, #4]
 8016724:	1ad3      	subs	r3, r2, r3
 8016726:	4a1b      	ldr	r2, [pc, #108]	@ (8016794 <pvPortMalloc+0x1b4>)
 8016728:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801672a:	4b1a      	ldr	r3, [pc, #104]	@ (8016794 <pvPortMalloc+0x1b4>)
 801672c:	681a      	ldr	r2, [r3, #0]
 801672e:	4b1b      	ldr	r3, [pc, #108]	@ (801679c <pvPortMalloc+0x1bc>)
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	429a      	cmp	r2, r3
 8016734:	d203      	bcs.n	801673e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016736:	4b17      	ldr	r3, [pc, #92]	@ (8016794 <pvPortMalloc+0x1b4>)
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	4a18      	ldr	r2, [pc, #96]	@ (801679c <pvPortMalloc+0x1bc>)
 801673c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 801673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016740:	685a      	ldr	r2, [r3, #4]
 8016742:	4b13      	ldr	r3, [pc, #76]	@ (8016790 <pvPortMalloc+0x1b0>)
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	431a      	orrs	r2, r3
 8016748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801674a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 801674c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801674e:	2200      	movs	r2, #0
 8016750:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8016752:	4b13      	ldr	r3, [pc, #76]	@ (80167a0 <pvPortMalloc+0x1c0>)
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	3301      	adds	r3, #1
 8016758:	4a11      	ldr	r2, [pc, #68]	@ (80167a0 <pvPortMalloc+0x1c0>)
 801675a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 801675c:	f7fe f9b4 	bl	8014ac8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016760:	69fb      	ldr	r3, [r7, #28]
 8016762:	f003 0307 	and.w	r3, r3, #7
 8016766:	2b00      	cmp	r3, #0
 8016768:	d00b      	beq.n	8016782 <pvPortMalloc+0x1a2>
        __asm volatile
 801676a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801676e:	f383 8811 	msr	BASEPRI, r3
 8016772:	f3bf 8f6f 	isb	sy
 8016776:	f3bf 8f4f 	dsb	sy
 801677a:	60fb      	str	r3, [r7, #12]
    }
 801677c:	bf00      	nop
 801677e:	bf00      	nop
 8016780:	e7fd      	b.n	801677e <pvPortMalloc+0x19e>
    return pvReturn;
 8016782:	69fb      	ldr	r3, [r7, #28]
}
 8016784:	4618      	mov	r0, r3
 8016786:	3728      	adds	r7, #40	@ 0x28
 8016788:	46bd      	mov	sp, r7
 801678a:	bd80      	pop	{r7, pc}
 801678c:	20014264 	.word	0x20014264
 8016790:	20014278 	.word	0x20014278
 8016794:	20014268 	.word	0x20014268
 8016798:	2001425c 	.word	0x2001425c
 801679c:	2001426c 	.word	0x2001426c
 80167a0:	20014270 	.word	0x20014270

080167a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b086      	sub	sp, #24
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d04f      	beq.n	8016856 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80167b6:	2308      	movs	r3, #8
 80167b8:	425b      	negs	r3, r3
 80167ba:	697a      	ldr	r2, [r7, #20]
 80167bc:	4413      	add	r3, r2
 80167be:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80167c0:	697b      	ldr	r3, [r7, #20]
 80167c2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80167c4:	693b      	ldr	r3, [r7, #16]
 80167c6:	685a      	ldr	r2, [r3, #4]
 80167c8:	4b25      	ldr	r3, [pc, #148]	@ (8016860 <vPortFree+0xbc>)
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	4013      	ands	r3, r2
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d10b      	bne.n	80167ea <vPortFree+0x46>
        __asm volatile
 80167d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167d6:	f383 8811 	msr	BASEPRI, r3
 80167da:	f3bf 8f6f 	isb	sy
 80167de:	f3bf 8f4f 	dsb	sy
 80167e2:	60fb      	str	r3, [r7, #12]
    }
 80167e4:	bf00      	nop
 80167e6:	bf00      	nop
 80167e8:	e7fd      	b.n	80167e6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80167ea:	693b      	ldr	r3, [r7, #16]
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d00b      	beq.n	801680a <vPortFree+0x66>
        __asm volatile
 80167f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167f6:	f383 8811 	msr	BASEPRI, r3
 80167fa:	f3bf 8f6f 	isb	sy
 80167fe:	f3bf 8f4f 	dsb	sy
 8016802:	60bb      	str	r3, [r7, #8]
    }
 8016804:	bf00      	nop
 8016806:	bf00      	nop
 8016808:	e7fd      	b.n	8016806 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801680a:	693b      	ldr	r3, [r7, #16]
 801680c:	685a      	ldr	r2, [r3, #4]
 801680e:	4b14      	ldr	r3, [pc, #80]	@ (8016860 <vPortFree+0xbc>)
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	4013      	ands	r3, r2
 8016814:	2b00      	cmp	r3, #0
 8016816:	d01e      	beq.n	8016856 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8016818:	693b      	ldr	r3, [r7, #16]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d11a      	bne.n	8016856 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016820:	693b      	ldr	r3, [r7, #16]
 8016822:	685a      	ldr	r2, [r3, #4]
 8016824:	4b0e      	ldr	r3, [pc, #56]	@ (8016860 <vPortFree+0xbc>)
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	43db      	mvns	r3, r3
 801682a:	401a      	ands	r2, r3
 801682c:	693b      	ldr	r3, [r7, #16]
 801682e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8016830:	f7fe f93c 	bl	8014aac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8016834:	693b      	ldr	r3, [r7, #16]
 8016836:	685a      	ldr	r2, [r3, #4]
 8016838:	4b0a      	ldr	r3, [pc, #40]	@ (8016864 <vPortFree+0xc0>)
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	4413      	add	r3, r2
 801683e:	4a09      	ldr	r2, [pc, #36]	@ (8016864 <vPortFree+0xc0>)
 8016840:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016842:	6938      	ldr	r0, [r7, #16]
 8016844:	f000 f874 	bl	8016930 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8016848:	4b07      	ldr	r3, [pc, #28]	@ (8016868 <vPortFree+0xc4>)
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	3301      	adds	r3, #1
 801684e:	4a06      	ldr	r2, [pc, #24]	@ (8016868 <vPortFree+0xc4>)
 8016850:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8016852:	f7fe f939 	bl	8014ac8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8016856:	bf00      	nop
 8016858:	3718      	adds	r7, #24
 801685a:	46bd      	mov	sp, r7
 801685c:	bd80      	pop	{r7, pc}
 801685e:	bf00      	nop
 8016860:	20014278 	.word	0x20014278
 8016864:	20014268 	.word	0x20014268
 8016868:	20014274 	.word	0x20014274

0801686c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 801686c:	b480      	push	{r7}
 801686e:	b085      	sub	sp, #20
 8016870:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016872:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8016876:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8016878:	4b27      	ldr	r3, [pc, #156]	@ (8016918 <prvHeapInit+0xac>)
 801687a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	f003 0307 	and.w	r3, r3, #7
 8016882:	2b00      	cmp	r3, #0
 8016884:	d00c      	beq.n	80168a0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	3307      	adds	r3, #7
 801688a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	f023 0307 	bic.w	r3, r3, #7
 8016892:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016894:	68ba      	ldr	r2, [r7, #8]
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	1ad3      	subs	r3, r2, r3
 801689a:	4a1f      	ldr	r2, [pc, #124]	@ (8016918 <prvHeapInit+0xac>)
 801689c:	4413      	add	r3, r2
 801689e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80168a4:	4a1d      	ldr	r2, [pc, #116]	@ (801691c <prvHeapInit+0xb0>)
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80168aa:	4b1c      	ldr	r3, [pc, #112]	@ (801691c <prvHeapInit+0xb0>)
 80168ac:	2200      	movs	r2, #0
 80168ae:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	68ba      	ldr	r2, [r7, #8]
 80168b4:	4413      	add	r3, r2
 80168b6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80168b8:	2208      	movs	r2, #8
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	1a9b      	subs	r3, r3, r2
 80168be:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	f023 0307 	bic.w	r3, r3, #7
 80168c6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	4a15      	ldr	r2, [pc, #84]	@ (8016920 <prvHeapInit+0xb4>)
 80168cc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80168ce:	4b14      	ldr	r3, [pc, #80]	@ (8016920 <prvHeapInit+0xb4>)
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	2200      	movs	r2, #0
 80168d4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80168d6:	4b12      	ldr	r3, [pc, #72]	@ (8016920 <prvHeapInit+0xb4>)
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	2200      	movs	r2, #0
 80168dc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80168e2:	683b      	ldr	r3, [r7, #0]
 80168e4:	68fa      	ldr	r2, [r7, #12]
 80168e6:	1ad2      	subs	r2, r2, r3
 80168e8:	683b      	ldr	r3, [r7, #0]
 80168ea:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80168ec:	4b0c      	ldr	r3, [pc, #48]	@ (8016920 <prvHeapInit+0xb4>)
 80168ee:	681a      	ldr	r2, [r3, #0]
 80168f0:	683b      	ldr	r3, [r7, #0]
 80168f2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	685b      	ldr	r3, [r3, #4]
 80168f8:	4a0a      	ldr	r2, [pc, #40]	@ (8016924 <prvHeapInit+0xb8>)
 80168fa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80168fc:	683b      	ldr	r3, [r7, #0]
 80168fe:	685b      	ldr	r3, [r3, #4]
 8016900:	4a09      	ldr	r2, [pc, #36]	@ (8016928 <prvHeapInit+0xbc>)
 8016902:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016904:	4b09      	ldr	r3, [pc, #36]	@ (801692c <prvHeapInit+0xc0>)
 8016906:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801690a:	601a      	str	r2, [r3, #0]
}
 801690c:	bf00      	nop
 801690e:	3714      	adds	r7, #20
 8016910:	46bd      	mov	sp, r7
 8016912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016916:	4770      	bx	lr
 8016918:	2000165c 	.word	0x2000165c
 801691c:	2001425c 	.word	0x2001425c
 8016920:	20014264 	.word	0x20014264
 8016924:	2001426c 	.word	0x2001426c
 8016928:	20014268 	.word	0x20014268
 801692c:	20014278 	.word	0x20014278

08016930 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8016930:	b480      	push	{r7}
 8016932:	b085      	sub	sp, #20
 8016934:	af00      	add	r7, sp, #0
 8016936:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016938:	4b28      	ldr	r3, [pc, #160]	@ (80169dc <prvInsertBlockIntoFreeList+0xac>)
 801693a:	60fb      	str	r3, [r7, #12]
 801693c:	e002      	b.n	8016944 <prvInsertBlockIntoFreeList+0x14>
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	60fb      	str	r3, [r7, #12]
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	687a      	ldr	r2, [r7, #4]
 801694a:	429a      	cmp	r2, r3
 801694c:	d8f7      	bhi.n	801693e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	685b      	ldr	r3, [r3, #4]
 8016956:	68ba      	ldr	r2, [r7, #8]
 8016958:	4413      	add	r3, r2
 801695a:	687a      	ldr	r2, [r7, #4]
 801695c:	429a      	cmp	r2, r3
 801695e:	d108      	bne.n	8016972 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	685a      	ldr	r2, [r3, #4]
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	685b      	ldr	r3, [r3, #4]
 8016968:	441a      	add	r2, r3
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	685b      	ldr	r3, [r3, #4]
 801697a:	68ba      	ldr	r2, [r7, #8]
 801697c:	441a      	add	r2, r3
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	429a      	cmp	r2, r3
 8016984:	d118      	bne.n	80169b8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	681a      	ldr	r2, [r3, #0]
 801698a:	4b15      	ldr	r3, [pc, #84]	@ (80169e0 <prvInsertBlockIntoFreeList+0xb0>)
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	429a      	cmp	r2, r3
 8016990:	d00d      	beq.n	80169ae <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	685a      	ldr	r2, [r3, #4]
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	685b      	ldr	r3, [r3, #4]
 801699c:	441a      	add	r2, r3
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	681a      	ldr	r2, [r3, #0]
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	601a      	str	r2, [r3, #0]
 80169ac:	e008      	b.n	80169c0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80169ae:	4b0c      	ldr	r3, [pc, #48]	@ (80169e0 <prvInsertBlockIntoFreeList+0xb0>)
 80169b0:	681a      	ldr	r2, [r3, #0]
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	601a      	str	r2, [r3, #0]
 80169b6:	e003      	b.n	80169c0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	681a      	ldr	r2, [r3, #0]
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80169c0:	68fa      	ldr	r2, [r7, #12]
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	429a      	cmp	r2, r3
 80169c6:	d002      	beq.n	80169ce <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	687a      	ldr	r2, [r7, #4]
 80169cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80169ce:	bf00      	nop
 80169d0:	3714      	adds	r7, #20
 80169d2:	46bd      	mov	sp, r7
 80169d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d8:	4770      	bx	lr
 80169da:	bf00      	nop
 80169dc:	2001425c 	.word	0x2001425c
 80169e0:	20014264 	.word	0x20014264

080169e4 <malloc>:
 80169e4:	4b02      	ldr	r3, [pc, #8]	@ (80169f0 <malloc+0xc>)
 80169e6:	4601      	mov	r1, r0
 80169e8:	6818      	ldr	r0, [r3, #0]
 80169ea:	f000 b82d 	b.w	8016a48 <_malloc_r>
 80169ee:	bf00      	nop
 80169f0:	200001fc 	.word	0x200001fc

080169f4 <free>:
 80169f4:	4b02      	ldr	r3, [pc, #8]	@ (8016a00 <free+0xc>)
 80169f6:	4601      	mov	r1, r0
 80169f8:	6818      	ldr	r0, [r3, #0]
 80169fa:	f002 bce9 	b.w	80193d0 <_free_r>
 80169fe:	bf00      	nop
 8016a00:	200001fc 	.word	0x200001fc

08016a04 <sbrk_aligned>:
 8016a04:	b570      	push	{r4, r5, r6, lr}
 8016a06:	4e0f      	ldr	r6, [pc, #60]	@ (8016a44 <sbrk_aligned+0x40>)
 8016a08:	460c      	mov	r4, r1
 8016a0a:	6831      	ldr	r1, [r6, #0]
 8016a0c:	4605      	mov	r5, r0
 8016a0e:	b911      	cbnz	r1, 8016a16 <sbrk_aligned+0x12>
 8016a10:	f001 fe18 	bl	8018644 <_sbrk_r>
 8016a14:	6030      	str	r0, [r6, #0]
 8016a16:	4621      	mov	r1, r4
 8016a18:	4628      	mov	r0, r5
 8016a1a:	f001 fe13 	bl	8018644 <_sbrk_r>
 8016a1e:	1c43      	adds	r3, r0, #1
 8016a20:	d103      	bne.n	8016a2a <sbrk_aligned+0x26>
 8016a22:	f04f 34ff 	mov.w	r4, #4294967295
 8016a26:	4620      	mov	r0, r4
 8016a28:	bd70      	pop	{r4, r5, r6, pc}
 8016a2a:	1cc4      	adds	r4, r0, #3
 8016a2c:	f024 0403 	bic.w	r4, r4, #3
 8016a30:	42a0      	cmp	r0, r4
 8016a32:	d0f8      	beq.n	8016a26 <sbrk_aligned+0x22>
 8016a34:	1a21      	subs	r1, r4, r0
 8016a36:	4628      	mov	r0, r5
 8016a38:	f001 fe04 	bl	8018644 <_sbrk_r>
 8016a3c:	3001      	adds	r0, #1
 8016a3e:	d1f2      	bne.n	8016a26 <sbrk_aligned+0x22>
 8016a40:	e7ef      	b.n	8016a22 <sbrk_aligned+0x1e>
 8016a42:	bf00      	nop
 8016a44:	2001427c 	.word	0x2001427c

08016a48 <_malloc_r>:
 8016a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a4c:	1ccd      	adds	r5, r1, #3
 8016a4e:	f025 0503 	bic.w	r5, r5, #3
 8016a52:	3508      	adds	r5, #8
 8016a54:	2d0c      	cmp	r5, #12
 8016a56:	bf38      	it	cc
 8016a58:	250c      	movcc	r5, #12
 8016a5a:	2d00      	cmp	r5, #0
 8016a5c:	4606      	mov	r6, r0
 8016a5e:	db01      	blt.n	8016a64 <_malloc_r+0x1c>
 8016a60:	42a9      	cmp	r1, r5
 8016a62:	d904      	bls.n	8016a6e <_malloc_r+0x26>
 8016a64:	230c      	movs	r3, #12
 8016a66:	6033      	str	r3, [r6, #0]
 8016a68:	2000      	movs	r0, #0
 8016a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016b44 <_malloc_r+0xfc>
 8016a72:	f000 f869 	bl	8016b48 <__malloc_lock>
 8016a76:	f8d8 3000 	ldr.w	r3, [r8]
 8016a7a:	461c      	mov	r4, r3
 8016a7c:	bb44      	cbnz	r4, 8016ad0 <_malloc_r+0x88>
 8016a7e:	4629      	mov	r1, r5
 8016a80:	4630      	mov	r0, r6
 8016a82:	f7ff ffbf 	bl	8016a04 <sbrk_aligned>
 8016a86:	1c43      	adds	r3, r0, #1
 8016a88:	4604      	mov	r4, r0
 8016a8a:	d158      	bne.n	8016b3e <_malloc_r+0xf6>
 8016a8c:	f8d8 4000 	ldr.w	r4, [r8]
 8016a90:	4627      	mov	r7, r4
 8016a92:	2f00      	cmp	r7, #0
 8016a94:	d143      	bne.n	8016b1e <_malloc_r+0xd6>
 8016a96:	2c00      	cmp	r4, #0
 8016a98:	d04b      	beq.n	8016b32 <_malloc_r+0xea>
 8016a9a:	6823      	ldr	r3, [r4, #0]
 8016a9c:	4639      	mov	r1, r7
 8016a9e:	4630      	mov	r0, r6
 8016aa0:	eb04 0903 	add.w	r9, r4, r3
 8016aa4:	f001 fdce 	bl	8018644 <_sbrk_r>
 8016aa8:	4581      	cmp	r9, r0
 8016aaa:	d142      	bne.n	8016b32 <_malloc_r+0xea>
 8016aac:	6821      	ldr	r1, [r4, #0]
 8016aae:	1a6d      	subs	r5, r5, r1
 8016ab0:	4629      	mov	r1, r5
 8016ab2:	4630      	mov	r0, r6
 8016ab4:	f7ff ffa6 	bl	8016a04 <sbrk_aligned>
 8016ab8:	3001      	adds	r0, #1
 8016aba:	d03a      	beq.n	8016b32 <_malloc_r+0xea>
 8016abc:	6823      	ldr	r3, [r4, #0]
 8016abe:	442b      	add	r3, r5
 8016ac0:	6023      	str	r3, [r4, #0]
 8016ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8016ac6:	685a      	ldr	r2, [r3, #4]
 8016ac8:	bb62      	cbnz	r2, 8016b24 <_malloc_r+0xdc>
 8016aca:	f8c8 7000 	str.w	r7, [r8]
 8016ace:	e00f      	b.n	8016af0 <_malloc_r+0xa8>
 8016ad0:	6822      	ldr	r2, [r4, #0]
 8016ad2:	1b52      	subs	r2, r2, r5
 8016ad4:	d420      	bmi.n	8016b18 <_malloc_r+0xd0>
 8016ad6:	2a0b      	cmp	r2, #11
 8016ad8:	d917      	bls.n	8016b0a <_malloc_r+0xc2>
 8016ada:	1961      	adds	r1, r4, r5
 8016adc:	42a3      	cmp	r3, r4
 8016ade:	6025      	str	r5, [r4, #0]
 8016ae0:	bf18      	it	ne
 8016ae2:	6059      	strne	r1, [r3, #4]
 8016ae4:	6863      	ldr	r3, [r4, #4]
 8016ae6:	bf08      	it	eq
 8016ae8:	f8c8 1000 	streq.w	r1, [r8]
 8016aec:	5162      	str	r2, [r4, r5]
 8016aee:	604b      	str	r3, [r1, #4]
 8016af0:	4630      	mov	r0, r6
 8016af2:	f000 f82f 	bl	8016b54 <__malloc_unlock>
 8016af6:	f104 000b 	add.w	r0, r4, #11
 8016afa:	1d23      	adds	r3, r4, #4
 8016afc:	f020 0007 	bic.w	r0, r0, #7
 8016b00:	1ac2      	subs	r2, r0, r3
 8016b02:	bf1c      	itt	ne
 8016b04:	1a1b      	subne	r3, r3, r0
 8016b06:	50a3      	strne	r3, [r4, r2]
 8016b08:	e7af      	b.n	8016a6a <_malloc_r+0x22>
 8016b0a:	6862      	ldr	r2, [r4, #4]
 8016b0c:	42a3      	cmp	r3, r4
 8016b0e:	bf0c      	ite	eq
 8016b10:	f8c8 2000 	streq.w	r2, [r8]
 8016b14:	605a      	strne	r2, [r3, #4]
 8016b16:	e7eb      	b.n	8016af0 <_malloc_r+0xa8>
 8016b18:	4623      	mov	r3, r4
 8016b1a:	6864      	ldr	r4, [r4, #4]
 8016b1c:	e7ae      	b.n	8016a7c <_malloc_r+0x34>
 8016b1e:	463c      	mov	r4, r7
 8016b20:	687f      	ldr	r7, [r7, #4]
 8016b22:	e7b6      	b.n	8016a92 <_malloc_r+0x4a>
 8016b24:	461a      	mov	r2, r3
 8016b26:	685b      	ldr	r3, [r3, #4]
 8016b28:	42a3      	cmp	r3, r4
 8016b2a:	d1fb      	bne.n	8016b24 <_malloc_r+0xdc>
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	6053      	str	r3, [r2, #4]
 8016b30:	e7de      	b.n	8016af0 <_malloc_r+0xa8>
 8016b32:	230c      	movs	r3, #12
 8016b34:	6033      	str	r3, [r6, #0]
 8016b36:	4630      	mov	r0, r6
 8016b38:	f000 f80c 	bl	8016b54 <__malloc_unlock>
 8016b3c:	e794      	b.n	8016a68 <_malloc_r+0x20>
 8016b3e:	6005      	str	r5, [r0, #0]
 8016b40:	e7d6      	b.n	8016af0 <_malloc_r+0xa8>
 8016b42:	bf00      	nop
 8016b44:	20014280 	.word	0x20014280

08016b48 <__malloc_lock>:
 8016b48:	4801      	ldr	r0, [pc, #4]	@ (8016b50 <__malloc_lock+0x8>)
 8016b4a:	f001 bdc8 	b.w	80186de <__retarget_lock_acquire_recursive>
 8016b4e:	bf00      	nop
 8016b50:	200143c4 	.word	0x200143c4

08016b54 <__malloc_unlock>:
 8016b54:	4801      	ldr	r0, [pc, #4]	@ (8016b5c <__malloc_unlock+0x8>)
 8016b56:	f001 bdc3 	b.w	80186e0 <__retarget_lock_release_recursive>
 8016b5a:	bf00      	nop
 8016b5c:	200143c4 	.word	0x200143c4

08016b60 <realloc>:
 8016b60:	4b02      	ldr	r3, [pc, #8]	@ (8016b6c <realloc+0xc>)
 8016b62:	460a      	mov	r2, r1
 8016b64:	4601      	mov	r1, r0
 8016b66:	6818      	ldr	r0, [r3, #0]
 8016b68:	f000 b802 	b.w	8016b70 <_realloc_r>
 8016b6c:	200001fc 	.word	0x200001fc

08016b70 <_realloc_r>:
 8016b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b74:	4607      	mov	r7, r0
 8016b76:	4614      	mov	r4, r2
 8016b78:	460d      	mov	r5, r1
 8016b7a:	b921      	cbnz	r1, 8016b86 <_realloc_r+0x16>
 8016b7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b80:	4611      	mov	r1, r2
 8016b82:	f7ff bf61 	b.w	8016a48 <_malloc_r>
 8016b86:	b92a      	cbnz	r2, 8016b94 <_realloc_r+0x24>
 8016b88:	f002 fc22 	bl	80193d0 <_free_r>
 8016b8c:	4625      	mov	r5, r4
 8016b8e:	4628      	mov	r0, r5
 8016b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b94:	f003 fc5c 	bl	801a450 <_malloc_usable_size_r>
 8016b98:	4284      	cmp	r4, r0
 8016b9a:	4606      	mov	r6, r0
 8016b9c:	d802      	bhi.n	8016ba4 <_realloc_r+0x34>
 8016b9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016ba2:	d8f4      	bhi.n	8016b8e <_realloc_r+0x1e>
 8016ba4:	4621      	mov	r1, r4
 8016ba6:	4638      	mov	r0, r7
 8016ba8:	f7ff ff4e 	bl	8016a48 <_malloc_r>
 8016bac:	4680      	mov	r8, r0
 8016bae:	b908      	cbnz	r0, 8016bb4 <_realloc_r+0x44>
 8016bb0:	4645      	mov	r5, r8
 8016bb2:	e7ec      	b.n	8016b8e <_realloc_r+0x1e>
 8016bb4:	42b4      	cmp	r4, r6
 8016bb6:	4622      	mov	r2, r4
 8016bb8:	4629      	mov	r1, r5
 8016bba:	bf28      	it	cs
 8016bbc:	4632      	movcs	r2, r6
 8016bbe:	f001 fd98 	bl	80186f2 <memcpy>
 8016bc2:	4629      	mov	r1, r5
 8016bc4:	4638      	mov	r0, r7
 8016bc6:	f002 fc03 	bl	80193d0 <_free_r>
 8016bca:	e7f1      	b.n	8016bb0 <_realloc_r+0x40>

08016bcc <sulp>:
 8016bcc:	b570      	push	{r4, r5, r6, lr}
 8016bce:	4604      	mov	r4, r0
 8016bd0:	460d      	mov	r5, r1
 8016bd2:	ec45 4b10 	vmov	d0, r4, r5
 8016bd6:	4616      	mov	r6, r2
 8016bd8:	f003 fafc 	bl	801a1d4 <__ulp>
 8016bdc:	ec51 0b10 	vmov	r0, r1, d0
 8016be0:	b17e      	cbz	r6, 8016c02 <sulp+0x36>
 8016be2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016be6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	dd09      	ble.n	8016c02 <sulp+0x36>
 8016bee:	051b      	lsls	r3, r3, #20
 8016bf0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8016bf4:	2400      	movs	r4, #0
 8016bf6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8016bfa:	4622      	mov	r2, r4
 8016bfc:	462b      	mov	r3, r5
 8016bfe:	f7f1 fd2b 	bl	8008658 <__aeabi_dmul>
 8016c02:	ec41 0b10 	vmov	d0, r0, r1
 8016c06:	bd70      	pop	{r4, r5, r6, pc}

08016c08 <_strtod_l>:
 8016c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c0c:	b09f      	sub	sp, #124	@ 0x7c
 8016c0e:	460c      	mov	r4, r1
 8016c10:	9217      	str	r2, [sp, #92]	@ 0x5c
 8016c12:	2200      	movs	r2, #0
 8016c14:	921a      	str	r2, [sp, #104]	@ 0x68
 8016c16:	9005      	str	r0, [sp, #20]
 8016c18:	f04f 0a00 	mov.w	sl, #0
 8016c1c:	f04f 0b00 	mov.w	fp, #0
 8016c20:	460a      	mov	r2, r1
 8016c22:	9219      	str	r2, [sp, #100]	@ 0x64
 8016c24:	7811      	ldrb	r1, [r2, #0]
 8016c26:	292b      	cmp	r1, #43	@ 0x2b
 8016c28:	d04a      	beq.n	8016cc0 <_strtod_l+0xb8>
 8016c2a:	d838      	bhi.n	8016c9e <_strtod_l+0x96>
 8016c2c:	290d      	cmp	r1, #13
 8016c2e:	d832      	bhi.n	8016c96 <_strtod_l+0x8e>
 8016c30:	2908      	cmp	r1, #8
 8016c32:	d832      	bhi.n	8016c9a <_strtod_l+0x92>
 8016c34:	2900      	cmp	r1, #0
 8016c36:	d03b      	beq.n	8016cb0 <_strtod_l+0xa8>
 8016c38:	2200      	movs	r2, #0
 8016c3a:	920e      	str	r2, [sp, #56]	@ 0x38
 8016c3c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8016c3e:	782a      	ldrb	r2, [r5, #0]
 8016c40:	2a30      	cmp	r2, #48	@ 0x30
 8016c42:	f040 80b2 	bne.w	8016daa <_strtod_l+0x1a2>
 8016c46:	786a      	ldrb	r2, [r5, #1]
 8016c48:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016c4c:	2a58      	cmp	r2, #88	@ 0x58
 8016c4e:	d16e      	bne.n	8016d2e <_strtod_l+0x126>
 8016c50:	9302      	str	r3, [sp, #8]
 8016c52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c54:	9301      	str	r3, [sp, #4]
 8016c56:	ab1a      	add	r3, sp, #104	@ 0x68
 8016c58:	9300      	str	r3, [sp, #0]
 8016c5a:	4a8f      	ldr	r2, [pc, #572]	@ (8016e98 <_strtod_l+0x290>)
 8016c5c:	9805      	ldr	r0, [sp, #20]
 8016c5e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016c60:	a919      	add	r1, sp, #100	@ 0x64
 8016c62:	f002 fc67 	bl	8019534 <__gethex>
 8016c66:	f010 060f 	ands.w	r6, r0, #15
 8016c6a:	4604      	mov	r4, r0
 8016c6c:	d005      	beq.n	8016c7a <_strtod_l+0x72>
 8016c6e:	2e06      	cmp	r6, #6
 8016c70:	d128      	bne.n	8016cc4 <_strtod_l+0xbc>
 8016c72:	3501      	adds	r5, #1
 8016c74:	2300      	movs	r3, #0
 8016c76:	9519      	str	r5, [sp, #100]	@ 0x64
 8016c78:	930e      	str	r3, [sp, #56]	@ 0x38
 8016c7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	f040 858e 	bne.w	801779e <_strtod_l+0xb96>
 8016c82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c84:	b1cb      	cbz	r3, 8016cba <_strtod_l+0xb2>
 8016c86:	4652      	mov	r2, sl
 8016c88:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8016c8c:	ec43 2b10 	vmov	d0, r2, r3
 8016c90:	b01f      	add	sp, #124	@ 0x7c
 8016c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c96:	2920      	cmp	r1, #32
 8016c98:	d1ce      	bne.n	8016c38 <_strtod_l+0x30>
 8016c9a:	3201      	adds	r2, #1
 8016c9c:	e7c1      	b.n	8016c22 <_strtod_l+0x1a>
 8016c9e:	292d      	cmp	r1, #45	@ 0x2d
 8016ca0:	d1ca      	bne.n	8016c38 <_strtod_l+0x30>
 8016ca2:	2101      	movs	r1, #1
 8016ca4:	910e      	str	r1, [sp, #56]	@ 0x38
 8016ca6:	1c51      	adds	r1, r2, #1
 8016ca8:	9119      	str	r1, [sp, #100]	@ 0x64
 8016caa:	7852      	ldrb	r2, [r2, #1]
 8016cac:	2a00      	cmp	r2, #0
 8016cae:	d1c5      	bne.n	8016c3c <_strtod_l+0x34>
 8016cb0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016cb2:	9419      	str	r4, [sp, #100]	@ 0x64
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	f040 8570 	bne.w	801779a <_strtod_l+0xb92>
 8016cba:	4652      	mov	r2, sl
 8016cbc:	465b      	mov	r3, fp
 8016cbe:	e7e5      	b.n	8016c8c <_strtod_l+0x84>
 8016cc0:	2100      	movs	r1, #0
 8016cc2:	e7ef      	b.n	8016ca4 <_strtod_l+0x9c>
 8016cc4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016cc6:	b13a      	cbz	r2, 8016cd8 <_strtod_l+0xd0>
 8016cc8:	2135      	movs	r1, #53	@ 0x35
 8016cca:	a81c      	add	r0, sp, #112	@ 0x70
 8016ccc:	f003 fb7c 	bl	801a3c8 <__copybits>
 8016cd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016cd2:	9805      	ldr	r0, [sp, #20]
 8016cd4:	f002 ff52 	bl	8019b7c <_Bfree>
 8016cd8:	3e01      	subs	r6, #1
 8016cda:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016cdc:	2e04      	cmp	r6, #4
 8016cde:	d806      	bhi.n	8016cee <_strtod_l+0xe6>
 8016ce0:	e8df f006 	tbb	[pc, r6]
 8016ce4:	201d0314 	.word	0x201d0314
 8016ce8:	14          	.byte	0x14
 8016ce9:	00          	.byte	0x00
 8016cea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8016cee:	05e1      	lsls	r1, r4, #23
 8016cf0:	bf48      	it	mi
 8016cf2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016cf6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016cfa:	0d1b      	lsrs	r3, r3, #20
 8016cfc:	051b      	lsls	r3, r3, #20
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d1bb      	bne.n	8016c7a <_strtod_l+0x72>
 8016d02:	f001 fcc1 	bl	8018688 <__errno>
 8016d06:	2322      	movs	r3, #34	@ 0x22
 8016d08:	6003      	str	r3, [r0, #0]
 8016d0a:	e7b6      	b.n	8016c7a <_strtod_l+0x72>
 8016d0c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016d10:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016d14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016d18:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016d1c:	e7e7      	b.n	8016cee <_strtod_l+0xe6>
 8016d1e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8016ea0 <_strtod_l+0x298>
 8016d22:	e7e4      	b.n	8016cee <_strtod_l+0xe6>
 8016d24:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016d28:	f04f 3aff 	mov.w	sl, #4294967295
 8016d2c:	e7df      	b.n	8016cee <_strtod_l+0xe6>
 8016d2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d30:	1c5a      	adds	r2, r3, #1
 8016d32:	9219      	str	r2, [sp, #100]	@ 0x64
 8016d34:	785b      	ldrb	r3, [r3, #1]
 8016d36:	2b30      	cmp	r3, #48	@ 0x30
 8016d38:	d0f9      	beq.n	8016d2e <_strtod_l+0x126>
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d09d      	beq.n	8016c7a <_strtod_l+0x72>
 8016d3e:	2301      	movs	r3, #1
 8016d40:	2700      	movs	r7, #0
 8016d42:	9308      	str	r3, [sp, #32]
 8016d44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d46:	930c      	str	r3, [sp, #48]	@ 0x30
 8016d48:	970b      	str	r7, [sp, #44]	@ 0x2c
 8016d4a:	46b9      	mov	r9, r7
 8016d4c:	220a      	movs	r2, #10
 8016d4e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8016d50:	7805      	ldrb	r5, [r0, #0]
 8016d52:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8016d56:	b2d9      	uxtb	r1, r3
 8016d58:	2909      	cmp	r1, #9
 8016d5a:	d928      	bls.n	8016dae <_strtod_l+0x1a6>
 8016d5c:	494f      	ldr	r1, [pc, #316]	@ (8016e9c <_strtod_l+0x294>)
 8016d5e:	2201      	movs	r2, #1
 8016d60:	f001 fbfc 	bl	801855c <strncmp>
 8016d64:	2800      	cmp	r0, #0
 8016d66:	d032      	beq.n	8016dce <_strtod_l+0x1c6>
 8016d68:	2000      	movs	r0, #0
 8016d6a:	462a      	mov	r2, r5
 8016d6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8016d6e:	464d      	mov	r5, r9
 8016d70:	4603      	mov	r3, r0
 8016d72:	2a65      	cmp	r2, #101	@ 0x65
 8016d74:	d001      	beq.n	8016d7a <_strtod_l+0x172>
 8016d76:	2a45      	cmp	r2, #69	@ 0x45
 8016d78:	d114      	bne.n	8016da4 <_strtod_l+0x19c>
 8016d7a:	b91d      	cbnz	r5, 8016d84 <_strtod_l+0x17c>
 8016d7c:	9a08      	ldr	r2, [sp, #32]
 8016d7e:	4302      	orrs	r2, r0
 8016d80:	d096      	beq.n	8016cb0 <_strtod_l+0xa8>
 8016d82:	2500      	movs	r5, #0
 8016d84:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8016d86:	1c62      	adds	r2, r4, #1
 8016d88:	9219      	str	r2, [sp, #100]	@ 0x64
 8016d8a:	7862      	ldrb	r2, [r4, #1]
 8016d8c:	2a2b      	cmp	r2, #43	@ 0x2b
 8016d8e:	d07a      	beq.n	8016e86 <_strtod_l+0x27e>
 8016d90:	2a2d      	cmp	r2, #45	@ 0x2d
 8016d92:	d07e      	beq.n	8016e92 <_strtod_l+0x28a>
 8016d94:	f04f 0c00 	mov.w	ip, #0
 8016d98:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016d9c:	2909      	cmp	r1, #9
 8016d9e:	f240 8085 	bls.w	8016eac <_strtod_l+0x2a4>
 8016da2:	9419      	str	r4, [sp, #100]	@ 0x64
 8016da4:	f04f 0800 	mov.w	r8, #0
 8016da8:	e0a5      	b.n	8016ef6 <_strtod_l+0x2ee>
 8016daa:	2300      	movs	r3, #0
 8016dac:	e7c8      	b.n	8016d40 <_strtod_l+0x138>
 8016dae:	f1b9 0f08 	cmp.w	r9, #8
 8016db2:	bfd8      	it	le
 8016db4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8016db6:	f100 0001 	add.w	r0, r0, #1
 8016dba:	bfda      	itte	le
 8016dbc:	fb02 3301 	mlale	r3, r2, r1, r3
 8016dc0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8016dc2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8016dc6:	f109 0901 	add.w	r9, r9, #1
 8016dca:	9019      	str	r0, [sp, #100]	@ 0x64
 8016dcc:	e7bf      	b.n	8016d4e <_strtod_l+0x146>
 8016dce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016dd0:	1c5a      	adds	r2, r3, #1
 8016dd2:	9219      	str	r2, [sp, #100]	@ 0x64
 8016dd4:	785a      	ldrb	r2, [r3, #1]
 8016dd6:	f1b9 0f00 	cmp.w	r9, #0
 8016dda:	d03b      	beq.n	8016e54 <_strtod_l+0x24c>
 8016ddc:	900a      	str	r0, [sp, #40]	@ 0x28
 8016dde:	464d      	mov	r5, r9
 8016de0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8016de4:	2b09      	cmp	r3, #9
 8016de6:	d912      	bls.n	8016e0e <_strtod_l+0x206>
 8016de8:	2301      	movs	r3, #1
 8016dea:	e7c2      	b.n	8016d72 <_strtod_l+0x16a>
 8016dec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016dee:	1c5a      	adds	r2, r3, #1
 8016df0:	9219      	str	r2, [sp, #100]	@ 0x64
 8016df2:	785a      	ldrb	r2, [r3, #1]
 8016df4:	3001      	adds	r0, #1
 8016df6:	2a30      	cmp	r2, #48	@ 0x30
 8016df8:	d0f8      	beq.n	8016dec <_strtod_l+0x1e4>
 8016dfa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016dfe:	2b08      	cmp	r3, #8
 8016e00:	f200 84d2 	bhi.w	80177a8 <_strtod_l+0xba0>
 8016e04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016e06:	900a      	str	r0, [sp, #40]	@ 0x28
 8016e08:	2000      	movs	r0, #0
 8016e0a:	930c      	str	r3, [sp, #48]	@ 0x30
 8016e0c:	4605      	mov	r5, r0
 8016e0e:	3a30      	subs	r2, #48	@ 0x30
 8016e10:	f100 0301 	add.w	r3, r0, #1
 8016e14:	d018      	beq.n	8016e48 <_strtod_l+0x240>
 8016e16:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016e18:	4419      	add	r1, r3
 8016e1a:	910a      	str	r1, [sp, #40]	@ 0x28
 8016e1c:	462e      	mov	r6, r5
 8016e1e:	f04f 0e0a 	mov.w	lr, #10
 8016e22:	1c71      	adds	r1, r6, #1
 8016e24:	eba1 0c05 	sub.w	ip, r1, r5
 8016e28:	4563      	cmp	r3, ip
 8016e2a:	dc15      	bgt.n	8016e58 <_strtod_l+0x250>
 8016e2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8016e30:	182b      	adds	r3, r5, r0
 8016e32:	2b08      	cmp	r3, #8
 8016e34:	f105 0501 	add.w	r5, r5, #1
 8016e38:	4405      	add	r5, r0
 8016e3a:	dc1a      	bgt.n	8016e72 <_strtod_l+0x26a>
 8016e3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016e3e:	230a      	movs	r3, #10
 8016e40:	fb03 2301 	mla	r3, r3, r1, r2
 8016e44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016e46:	2300      	movs	r3, #0
 8016e48:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016e4a:	1c51      	adds	r1, r2, #1
 8016e4c:	9119      	str	r1, [sp, #100]	@ 0x64
 8016e4e:	7852      	ldrb	r2, [r2, #1]
 8016e50:	4618      	mov	r0, r3
 8016e52:	e7c5      	b.n	8016de0 <_strtod_l+0x1d8>
 8016e54:	4648      	mov	r0, r9
 8016e56:	e7ce      	b.n	8016df6 <_strtod_l+0x1ee>
 8016e58:	2e08      	cmp	r6, #8
 8016e5a:	dc05      	bgt.n	8016e68 <_strtod_l+0x260>
 8016e5c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8016e5e:	fb0e f606 	mul.w	r6, lr, r6
 8016e62:	960b      	str	r6, [sp, #44]	@ 0x2c
 8016e64:	460e      	mov	r6, r1
 8016e66:	e7dc      	b.n	8016e22 <_strtod_l+0x21a>
 8016e68:	2910      	cmp	r1, #16
 8016e6a:	bfd8      	it	le
 8016e6c:	fb0e f707 	mulle.w	r7, lr, r7
 8016e70:	e7f8      	b.n	8016e64 <_strtod_l+0x25c>
 8016e72:	2b0f      	cmp	r3, #15
 8016e74:	bfdc      	itt	le
 8016e76:	230a      	movle	r3, #10
 8016e78:	fb03 2707 	mlale	r7, r3, r7, r2
 8016e7c:	e7e3      	b.n	8016e46 <_strtod_l+0x23e>
 8016e7e:	2300      	movs	r3, #0
 8016e80:	930a      	str	r3, [sp, #40]	@ 0x28
 8016e82:	2301      	movs	r3, #1
 8016e84:	e77a      	b.n	8016d7c <_strtod_l+0x174>
 8016e86:	f04f 0c00 	mov.w	ip, #0
 8016e8a:	1ca2      	adds	r2, r4, #2
 8016e8c:	9219      	str	r2, [sp, #100]	@ 0x64
 8016e8e:	78a2      	ldrb	r2, [r4, #2]
 8016e90:	e782      	b.n	8016d98 <_strtod_l+0x190>
 8016e92:	f04f 0c01 	mov.w	ip, #1
 8016e96:	e7f8      	b.n	8016e8a <_strtod_l+0x282>
 8016e98:	0801dd18 	.word	0x0801dd18
 8016e9c:	0801db18 	.word	0x0801db18
 8016ea0:	7ff00000 	.word	0x7ff00000
 8016ea4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016ea6:	1c51      	adds	r1, r2, #1
 8016ea8:	9119      	str	r1, [sp, #100]	@ 0x64
 8016eaa:	7852      	ldrb	r2, [r2, #1]
 8016eac:	2a30      	cmp	r2, #48	@ 0x30
 8016eae:	d0f9      	beq.n	8016ea4 <_strtod_l+0x29c>
 8016eb0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8016eb4:	2908      	cmp	r1, #8
 8016eb6:	f63f af75 	bhi.w	8016da4 <_strtod_l+0x19c>
 8016eba:	3a30      	subs	r2, #48	@ 0x30
 8016ebc:	9209      	str	r2, [sp, #36]	@ 0x24
 8016ebe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016ec0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016ec2:	f04f 080a 	mov.w	r8, #10
 8016ec6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016ec8:	1c56      	adds	r6, r2, #1
 8016eca:	9619      	str	r6, [sp, #100]	@ 0x64
 8016ecc:	7852      	ldrb	r2, [r2, #1]
 8016ece:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016ed2:	f1be 0f09 	cmp.w	lr, #9
 8016ed6:	d939      	bls.n	8016f4c <_strtod_l+0x344>
 8016ed8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016eda:	1a76      	subs	r6, r6, r1
 8016edc:	2e08      	cmp	r6, #8
 8016ede:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8016ee2:	dc03      	bgt.n	8016eec <_strtod_l+0x2e4>
 8016ee4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016ee6:	4588      	cmp	r8, r1
 8016ee8:	bfa8      	it	ge
 8016eea:	4688      	movge	r8, r1
 8016eec:	f1bc 0f00 	cmp.w	ip, #0
 8016ef0:	d001      	beq.n	8016ef6 <_strtod_l+0x2ee>
 8016ef2:	f1c8 0800 	rsb	r8, r8, #0
 8016ef6:	2d00      	cmp	r5, #0
 8016ef8:	d14e      	bne.n	8016f98 <_strtod_l+0x390>
 8016efa:	9908      	ldr	r1, [sp, #32]
 8016efc:	4308      	orrs	r0, r1
 8016efe:	f47f aebc 	bne.w	8016c7a <_strtod_l+0x72>
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	f47f aed4 	bne.w	8016cb0 <_strtod_l+0xa8>
 8016f08:	2a69      	cmp	r2, #105	@ 0x69
 8016f0a:	d028      	beq.n	8016f5e <_strtod_l+0x356>
 8016f0c:	dc25      	bgt.n	8016f5a <_strtod_l+0x352>
 8016f0e:	2a49      	cmp	r2, #73	@ 0x49
 8016f10:	d025      	beq.n	8016f5e <_strtod_l+0x356>
 8016f12:	2a4e      	cmp	r2, #78	@ 0x4e
 8016f14:	f47f aecc 	bne.w	8016cb0 <_strtod_l+0xa8>
 8016f18:	499a      	ldr	r1, [pc, #616]	@ (8017184 <_strtod_l+0x57c>)
 8016f1a:	a819      	add	r0, sp, #100	@ 0x64
 8016f1c:	f002 fd2c 	bl	8019978 <__match>
 8016f20:	2800      	cmp	r0, #0
 8016f22:	f43f aec5 	beq.w	8016cb0 <_strtod_l+0xa8>
 8016f26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f28:	781b      	ldrb	r3, [r3, #0]
 8016f2a:	2b28      	cmp	r3, #40	@ 0x28
 8016f2c:	d12e      	bne.n	8016f8c <_strtod_l+0x384>
 8016f2e:	4996      	ldr	r1, [pc, #600]	@ (8017188 <_strtod_l+0x580>)
 8016f30:	aa1c      	add	r2, sp, #112	@ 0x70
 8016f32:	a819      	add	r0, sp, #100	@ 0x64
 8016f34:	f002 fd34 	bl	80199a0 <__hexnan>
 8016f38:	2805      	cmp	r0, #5
 8016f3a:	d127      	bne.n	8016f8c <_strtod_l+0x384>
 8016f3c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016f3e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8016f42:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016f46:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016f4a:	e696      	b.n	8016c7a <_strtod_l+0x72>
 8016f4c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016f4e:	fb08 2101 	mla	r1, r8, r1, r2
 8016f52:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8016f56:	9209      	str	r2, [sp, #36]	@ 0x24
 8016f58:	e7b5      	b.n	8016ec6 <_strtod_l+0x2be>
 8016f5a:	2a6e      	cmp	r2, #110	@ 0x6e
 8016f5c:	e7da      	b.n	8016f14 <_strtod_l+0x30c>
 8016f5e:	498b      	ldr	r1, [pc, #556]	@ (801718c <_strtod_l+0x584>)
 8016f60:	a819      	add	r0, sp, #100	@ 0x64
 8016f62:	f002 fd09 	bl	8019978 <__match>
 8016f66:	2800      	cmp	r0, #0
 8016f68:	f43f aea2 	beq.w	8016cb0 <_strtod_l+0xa8>
 8016f6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f6e:	4988      	ldr	r1, [pc, #544]	@ (8017190 <_strtod_l+0x588>)
 8016f70:	3b01      	subs	r3, #1
 8016f72:	a819      	add	r0, sp, #100	@ 0x64
 8016f74:	9319      	str	r3, [sp, #100]	@ 0x64
 8016f76:	f002 fcff 	bl	8019978 <__match>
 8016f7a:	b910      	cbnz	r0, 8016f82 <_strtod_l+0x37a>
 8016f7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f7e:	3301      	adds	r3, #1
 8016f80:	9319      	str	r3, [sp, #100]	@ 0x64
 8016f82:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80171a0 <_strtod_l+0x598>
 8016f86:	f04f 0a00 	mov.w	sl, #0
 8016f8a:	e676      	b.n	8016c7a <_strtod_l+0x72>
 8016f8c:	4881      	ldr	r0, [pc, #516]	@ (8017194 <_strtod_l+0x58c>)
 8016f8e:	f001 fbbf 	bl	8018710 <nan>
 8016f92:	ec5b ab10 	vmov	sl, fp, d0
 8016f96:	e670      	b.n	8016c7a <_strtod_l+0x72>
 8016f98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016f9a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8016f9c:	eba8 0303 	sub.w	r3, r8, r3
 8016fa0:	f1b9 0f00 	cmp.w	r9, #0
 8016fa4:	bf08      	it	eq
 8016fa6:	46a9      	moveq	r9, r5
 8016fa8:	2d10      	cmp	r5, #16
 8016faa:	9309      	str	r3, [sp, #36]	@ 0x24
 8016fac:	462c      	mov	r4, r5
 8016fae:	bfa8      	it	ge
 8016fb0:	2410      	movge	r4, #16
 8016fb2:	f7f1 fad7 	bl	8008564 <__aeabi_ui2d>
 8016fb6:	2d09      	cmp	r5, #9
 8016fb8:	4682      	mov	sl, r0
 8016fba:	468b      	mov	fp, r1
 8016fbc:	dc13      	bgt.n	8016fe6 <_strtod_l+0x3de>
 8016fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	f43f ae5a 	beq.w	8016c7a <_strtod_l+0x72>
 8016fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016fc8:	dd78      	ble.n	80170bc <_strtod_l+0x4b4>
 8016fca:	2b16      	cmp	r3, #22
 8016fcc:	dc5f      	bgt.n	801708e <_strtod_l+0x486>
 8016fce:	4972      	ldr	r1, [pc, #456]	@ (8017198 <_strtod_l+0x590>)
 8016fd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016fd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fd8:	4652      	mov	r2, sl
 8016fda:	465b      	mov	r3, fp
 8016fdc:	f7f1 fb3c 	bl	8008658 <__aeabi_dmul>
 8016fe0:	4682      	mov	sl, r0
 8016fe2:	468b      	mov	fp, r1
 8016fe4:	e649      	b.n	8016c7a <_strtod_l+0x72>
 8016fe6:	4b6c      	ldr	r3, [pc, #432]	@ (8017198 <_strtod_l+0x590>)
 8016fe8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016fec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8016ff0:	f7f1 fb32 	bl	8008658 <__aeabi_dmul>
 8016ff4:	4682      	mov	sl, r0
 8016ff6:	4638      	mov	r0, r7
 8016ff8:	468b      	mov	fp, r1
 8016ffa:	f7f1 fab3 	bl	8008564 <__aeabi_ui2d>
 8016ffe:	4602      	mov	r2, r0
 8017000:	460b      	mov	r3, r1
 8017002:	4650      	mov	r0, sl
 8017004:	4659      	mov	r1, fp
 8017006:	f7f1 f971 	bl	80082ec <__adddf3>
 801700a:	2d0f      	cmp	r5, #15
 801700c:	4682      	mov	sl, r0
 801700e:	468b      	mov	fp, r1
 8017010:	ddd5      	ble.n	8016fbe <_strtod_l+0x3b6>
 8017012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017014:	1b2c      	subs	r4, r5, r4
 8017016:	441c      	add	r4, r3
 8017018:	2c00      	cmp	r4, #0
 801701a:	f340 8093 	ble.w	8017144 <_strtod_l+0x53c>
 801701e:	f014 030f 	ands.w	r3, r4, #15
 8017022:	d00a      	beq.n	801703a <_strtod_l+0x432>
 8017024:	495c      	ldr	r1, [pc, #368]	@ (8017198 <_strtod_l+0x590>)
 8017026:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801702a:	4652      	mov	r2, sl
 801702c:	465b      	mov	r3, fp
 801702e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017032:	f7f1 fb11 	bl	8008658 <__aeabi_dmul>
 8017036:	4682      	mov	sl, r0
 8017038:	468b      	mov	fp, r1
 801703a:	f034 040f 	bics.w	r4, r4, #15
 801703e:	d073      	beq.n	8017128 <_strtod_l+0x520>
 8017040:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8017044:	dd49      	ble.n	80170da <_strtod_l+0x4d2>
 8017046:	2400      	movs	r4, #0
 8017048:	46a0      	mov	r8, r4
 801704a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801704c:	46a1      	mov	r9, r4
 801704e:	9a05      	ldr	r2, [sp, #20]
 8017050:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80171a0 <_strtod_l+0x598>
 8017054:	2322      	movs	r3, #34	@ 0x22
 8017056:	6013      	str	r3, [r2, #0]
 8017058:	f04f 0a00 	mov.w	sl, #0
 801705c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801705e:	2b00      	cmp	r3, #0
 8017060:	f43f ae0b 	beq.w	8016c7a <_strtod_l+0x72>
 8017064:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017066:	9805      	ldr	r0, [sp, #20]
 8017068:	f002 fd88 	bl	8019b7c <_Bfree>
 801706c:	9805      	ldr	r0, [sp, #20]
 801706e:	4649      	mov	r1, r9
 8017070:	f002 fd84 	bl	8019b7c <_Bfree>
 8017074:	9805      	ldr	r0, [sp, #20]
 8017076:	4641      	mov	r1, r8
 8017078:	f002 fd80 	bl	8019b7c <_Bfree>
 801707c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801707e:	9805      	ldr	r0, [sp, #20]
 8017080:	f002 fd7c 	bl	8019b7c <_Bfree>
 8017084:	9805      	ldr	r0, [sp, #20]
 8017086:	4621      	mov	r1, r4
 8017088:	f002 fd78 	bl	8019b7c <_Bfree>
 801708c:	e5f5      	b.n	8016c7a <_strtod_l+0x72>
 801708e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017090:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8017094:	4293      	cmp	r3, r2
 8017096:	dbbc      	blt.n	8017012 <_strtod_l+0x40a>
 8017098:	4c3f      	ldr	r4, [pc, #252]	@ (8017198 <_strtod_l+0x590>)
 801709a:	f1c5 050f 	rsb	r5, r5, #15
 801709e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80170a2:	4652      	mov	r2, sl
 80170a4:	465b      	mov	r3, fp
 80170a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80170aa:	f7f1 fad5 	bl	8008658 <__aeabi_dmul>
 80170ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80170b0:	1b5d      	subs	r5, r3, r5
 80170b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80170b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80170ba:	e78f      	b.n	8016fdc <_strtod_l+0x3d4>
 80170bc:	3316      	adds	r3, #22
 80170be:	dba8      	blt.n	8017012 <_strtod_l+0x40a>
 80170c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80170c2:	eba3 0808 	sub.w	r8, r3, r8
 80170c6:	4b34      	ldr	r3, [pc, #208]	@ (8017198 <_strtod_l+0x590>)
 80170c8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80170cc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80170d0:	4650      	mov	r0, sl
 80170d2:	4659      	mov	r1, fp
 80170d4:	f7f1 fbea 	bl	80088ac <__aeabi_ddiv>
 80170d8:	e782      	b.n	8016fe0 <_strtod_l+0x3d8>
 80170da:	2300      	movs	r3, #0
 80170dc:	4f2f      	ldr	r7, [pc, #188]	@ (801719c <_strtod_l+0x594>)
 80170de:	1124      	asrs	r4, r4, #4
 80170e0:	4650      	mov	r0, sl
 80170e2:	4659      	mov	r1, fp
 80170e4:	461e      	mov	r6, r3
 80170e6:	2c01      	cmp	r4, #1
 80170e8:	dc21      	bgt.n	801712e <_strtod_l+0x526>
 80170ea:	b10b      	cbz	r3, 80170f0 <_strtod_l+0x4e8>
 80170ec:	4682      	mov	sl, r0
 80170ee:	468b      	mov	fp, r1
 80170f0:	492a      	ldr	r1, [pc, #168]	@ (801719c <_strtod_l+0x594>)
 80170f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80170f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80170fa:	4652      	mov	r2, sl
 80170fc:	465b      	mov	r3, fp
 80170fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017102:	f7f1 faa9 	bl	8008658 <__aeabi_dmul>
 8017106:	4b26      	ldr	r3, [pc, #152]	@ (80171a0 <_strtod_l+0x598>)
 8017108:	460a      	mov	r2, r1
 801710a:	400b      	ands	r3, r1
 801710c:	4925      	ldr	r1, [pc, #148]	@ (80171a4 <_strtod_l+0x59c>)
 801710e:	428b      	cmp	r3, r1
 8017110:	4682      	mov	sl, r0
 8017112:	d898      	bhi.n	8017046 <_strtod_l+0x43e>
 8017114:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8017118:	428b      	cmp	r3, r1
 801711a:	bf86      	itte	hi
 801711c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80171a8 <_strtod_l+0x5a0>
 8017120:	f04f 3aff 	movhi.w	sl, #4294967295
 8017124:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8017128:	2300      	movs	r3, #0
 801712a:	9308      	str	r3, [sp, #32]
 801712c:	e076      	b.n	801721c <_strtod_l+0x614>
 801712e:	07e2      	lsls	r2, r4, #31
 8017130:	d504      	bpl.n	801713c <_strtod_l+0x534>
 8017132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017136:	f7f1 fa8f 	bl	8008658 <__aeabi_dmul>
 801713a:	2301      	movs	r3, #1
 801713c:	3601      	adds	r6, #1
 801713e:	1064      	asrs	r4, r4, #1
 8017140:	3708      	adds	r7, #8
 8017142:	e7d0      	b.n	80170e6 <_strtod_l+0x4de>
 8017144:	d0f0      	beq.n	8017128 <_strtod_l+0x520>
 8017146:	4264      	negs	r4, r4
 8017148:	f014 020f 	ands.w	r2, r4, #15
 801714c:	d00a      	beq.n	8017164 <_strtod_l+0x55c>
 801714e:	4b12      	ldr	r3, [pc, #72]	@ (8017198 <_strtod_l+0x590>)
 8017150:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017154:	4650      	mov	r0, sl
 8017156:	4659      	mov	r1, fp
 8017158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801715c:	f7f1 fba6 	bl	80088ac <__aeabi_ddiv>
 8017160:	4682      	mov	sl, r0
 8017162:	468b      	mov	fp, r1
 8017164:	1124      	asrs	r4, r4, #4
 8017166:	d0df      	beq.n	8017128 <_strtod_l+0x520>
 8017168:	2c1f      	cmp	r4, #31
 801716a:	dd1f      	ble.n	80171ac <_strtod_l+0x5a4>
 801716c:	2400      	movs	r4, #0
 801716e:	46a0      	mov	r8, r4
 8017170:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017172:	46a1      	mov	r9, r4
 8017174:	9a05      	ldr	r2, [sp, #20]
 8017176:	2322      	movs	r3, #34	@ 0x22
 8017178:	f04f 0a00 	mov.w	sl, #0
 801717c:	f04f 0b00 	mov.w	fp, #0
 8017180:	6013      	str	r3, [r2, #0]
 8017182:	e76b      	b.n	801705c <_strtod_l+0x454>
 8017184:	0801db27 	.word	0x0801db27
 8017188:	0801dd04 	.word	0x0801dd04
 801718c:	0801db1f 	.word	0x0801db1f
 8017190:	0801db57 	.word	0x0801db57
 8017194:	0801dd01 	.word	0x0801dd01
 8017198:	0801de90 	.word	0x0801de90
 801719c:	0801de68 	.word	0x0801de68
 80171a0:	7ff00000 	.word	0x7ff00000
 80171a4:	7ca00000 	.word	0x7ca00000
 80171a8:	7fefffff 	.word	0x7fefffff
 80171ac:	f014 0310 	ands.w	r3, r4, #16
 80171b0:	bf18      	it	ne
 80171b2:	236a      	movne	r3, #106	@ 0x6a
 80171b4:	4ea9      	ldr	r6, [pc, #676]	@ (801745c <_strtod_l+0x854>)
 80171b6:	9308      	str	r3, [sp, #32]
 80171b8:	4650      	mov	r0, sl
 80171ba:	4659      	mov	r1, fp
 80171bc:	2300      	movs	r3, #0
 80171be:	07e7      	lsls	r7, r4, #31
 80171c0:	d504      	bpl.n	80171cc <_strtod_l+0x5c4>
 80171c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80171c6:	f7f1 fa47 	bl	8008658 <__aeabi_dmul>
 80171ca:	2301      	movs	r3, #1
 80171cc:	1064      	asrs	r4, r4, #1
 80171ce:	f106 0608 	add.w	r6, r6, #8
 80171d2:	d1f4      	bne.n	80171be <_strtod_l+0x5b6>
 80171d4:	b10b      	cbz	r3, 80171da <_strtod_l+0x5d2>
 80171d6:	4682      	mov	sl, r0
 80171d8:	468b      	mov	fp, r1
 80171da:	9b08      	ldr	r3, [sp, #32]
 80171dc:	b1b3      	cbz	r3, 801720c <_strtod_l+0x604>
 80171de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80171e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	4659      	mov	r1, fp
 80171ea:	dd0f      	ble.n	801720c <_strtod_l+0x604>
 80171ec:	2b1f      	cmp	r3, #31
 80171ee:	dd56      	ble.n	801729e <_strtod_l+0x696>
 80171f0:	2b34      	cmp	r3, #52	@ 0x34
 80171f2:	bfde      	ittt	le
 80171f4:	f04f 33ff 	movle.w	r3, #4294967295
 80171f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80171fc:	4093      	lslle	r3, r2
 80171fe:	f04f 0a00 	mov.w	sl, #0
 8017202:	bfcc      	ite	gt
 8017204:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8017208:	ea03 0b01 	andle.w	fp, r3, r1
 801720c:	2200      	movs	r2, #0
 801720e:	2300      	movs	r3, #0
 8017210:	4650      	mov	r0, sl
 8017212:	4659      	mov	r1, fp
 8017214:	f7f1 fc88 	bl	8008b28 <__aeabi_dcmpeq>
 8017218:	2800      	cmp	r0, #0
 801721a:	d1a7      	bne.n	801716c <_strtod_l+0x564>
 801721c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801721e:	9300      	str	r3, [sp, #0]
 8017220:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017222:	9805      	ldr	r0, [sp, #20]
 8017224:	462b      	mov	r3, r5
 8017226:	464a      	mov	r2, r9
 8017228:	f002 fd10 	bl	8019c4c <__s2b>
 801722c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801722e:	2800      	cmp	r0, #0
 8017230:	f43f af09 	beq.w	8017046 <_strtod_l+0x43e>
 8017234:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017236:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017238:	2a00      	cmp	r2, #0
 801723a:	eba3 0308 	sub.w	r3, r3, r8
 801723e:	bfa8      	it	ge
 8017240:	2300      	movge	r3, #0
 8017242:	9312      	str	r3, [sp, #72]	@ 0x48
 8017244:	2400      	movs	r4, #0
 8017246:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801724a:	9316      	str	r3, [sp, #88]	@ 0x58
 801724c:	46a0      	mov	r8, r4
 801724e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017250:	9805      	ldr	r0, [sp, #20]
 8017252:	6859      	ldr	r1, [r3, #4]
 8017254:	f002 fc52 	bl	8019afc <_Balloc>
 8017258:	4681      	mov	r9, r0
 801725a:	2800      	cmp	r0, #0
 801725c:	f43f aef7 	beq.w	801704e <_strtod_l+0x446>
 8017260:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017262:	691a      	ldr	r2, [r3, #16]
 8017264:	3202      	adds	r2, #2
 8017266:	f103 010c 	add.w	r1, r3, #12
 801726a:	0092      	lsls	r2, r2, #2
 801726c:	300c      	adds	r0, #12
 801726e:	f001 fa40 	bl	80186f2 <memcpy>
 8017272:	ec4b ab10 	vmov	d0, sl, fp
 8017276:	9805      	ldr	r0, [sp, #20]
 8017278:	aa1c      	add	r2, sp, #112	@ 0x70
 801727a:	a91b      	add	r1, sp, #108	@ 0x6c
 801727c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8017280:	f003 f818 	bl	801a2b4 <__d2b>
 8017284:	901a      	str	r0, [sp, #104]	@ 0x68
 8017286:	2800      	cmp	r0, #0
 8017288:	f43f aee1 	beq.w	801704e <_strtod_l+0x446>
 801728c:	9805      	ldr	r0, [sp, #20]
 801728e:	2101      	movs	r1, #1
 8017290:	f002 fd72 	bl	8019d78 <__i2b>
 8017294:	4680      	mov	r8, r0
 8017296:	b948      	cbnz	r0, 80172ac <_strtod_l+0x6a4>
 8017298:	f04f 0800 	mov.w	r8, #0
 801729c:	e6d7      	b.n	801704e <_strtod_l+0x446>
 801729e:	f04f 32ff 	mov.w	r2, #4294967295
 80172a2:	fa02 f303 	lsl.w	r3, r2, r3
 80172a6:	ea03 0a0a 	and.w	sl, r3, sl
 80172aa:	e7af      	b.n	801720c <_strtod_l+0x604>
 80172ac:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80172ae:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80172b0:	2d00      	cmp	r5, #0
 80172b2:	bfab      	itete	ge
 80172b4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80172b6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80172b8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80172ba:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80172bc:	bfac      	ite	ge
 80172be:	18ef      	addge	r7, r5, r3
 80172c0:	1b5e      	sublt	r6, r3, r5
 80172c2:	9b08      	ldr	r3, [sp, #32]
 80172c4:	1aed      	subs	r5, r5, r3
 80172c6:	4415      	add	r5, r2
 80172c8:	4b65      	ldr	r3, [pc, #404]	@ (8017460 <_strtod_l+0x858>)
 80172ca:	3d01      	subs	r5, #1
 80172cc:	429d      	cmp	r5, r3
 80172ce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80172d2:	da50      	bge.n	8017376 <_strtod_l+0x76e>
 80172d4:	1b5b      	subs	r3, r3, r5
 80172d6:	2b1f      	cmp	r3, #31
 80172d8:	eba2 0203 	sub.w	r2, r2, r3
 80172dc:	f04f 0101 	mov.w	r1, #1
 80172e0:	dc3d      	bgt.n	801735e <_strtod_l+0x756>
 80172e2:	fa01 f303 	lsl.w	r3, r1, r3
 80172e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80172e8:	2300      	movs	r3, #0
 80172ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80172ec:	18bd      	adds	r5, r7, r2
 80172ee:	9b08      	ldr	r3, [sp, #32]
 80172f0:	42af      	cmp	r7, r5
 80172f2:	4416      	add	r6, r2
 80172f4:	441e      	add	r6, r3
 80172f6:	463b      	mov	r3, r7
 80172f8:	bfa8      	it	ge
 80172fa:	462b      	movge	r3, r5
 80172fc:	42b3      	cmp	r3, r6
 80172fe:	bfa8      	it	ge
 8017300:	4633      	movge	r3, r6
 8017302:	2b00      	cmp	r3, #0
 8017304:	bfc2      	ittt	gt
 8017306:	1aed      	subgt	r5, r5, r3
 8017308:	1af6      	subgt	r6, r6, r3
 801730a:	1aff      	subgt	r7, r7, r3
 801730c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801730e:	2b00      	cmp	r3, #0
 8017310:	dd16      	ble.n	8017340 <_strtod_l+0x738>
 8017312:	4641      	mov	r1, r8
 8017314:	9805      	ldr	r0, [sp, #20]
 8017316:	461a      	mov	r2, r3
 8017318:	f002 fde6 	bl	8019ee8 <__pow5mult>
 801731c:	4680      	mov	r8, r0
 801731e:	2800      	cmp	r0, #0
 8017320:	d0ba      	beq.n	8017298 <_strtod_l+0x690>
 8017322:	4601      	mov	r1, r0
 8017324:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017326:	9805      	ldr	r0, [sp, #20]
 8017328:	f002 fd3c 	bl	8019da4 <__multiply>
 801732c:	900a      	str	r0, [sp, #40]	@ 0x28
 801732e:	2800      	cmp	r0, #0
 8017330:	f43f ae8d 	beq.w	801704e <_strtod_l+0x446>
 8017334:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017336:	9805      	ldr	r0, [sp, #20]
 8017338:	f002 fc20 	bl	8019b7c <_Bfree>
 801733c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801733e:	931a      	str	r3, [sp, #104]	@ 0x68
 8017340:	2d00      	cmp	r5, #0
 8017342:	dc1d      	bgt.n	8017380 <_strtod_l+0x778>
 8017344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017346:	2b00      	cmp	r3, #0
 8017348:	dd23      	ble.n	8017392 <_strtod_l+0x78a>
 801734a:	4649      	mov	r1, r9
 801734c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801734e:	9805      	ldr	r0, [sp, #20]
 8017350:	f002 fdca 	bl	8019ee8 <__pow5mult>
 8017354:	4681      	mov	r9, r0
 8017356:	b9e0      	cbnz	r0, 8017392 <_strtod_l+0x78a>
 8017358:	f04f 0900 	mov.w	r9, #0
 801735c:	e677      	b.n	801704e <_strtod_l+0x446>
 801735e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8017362:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8017366:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801736a:	35e2      	adds	r5, #226	@ 0xe2
 801736c:	fa01 f305 	lsl.w	r3, r1, r5
 8017370:	9310      	str	r3, [sp, #64]	@ 0x40
 8017372:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017374:	e7ba      	b.n	80172ec <_strtod_l+0x6e4>
 8017376:	2300      	movs	r3, #0
 8017378:	9310      	str	r3, [sp, #64]	@ 0x40
 801737a:	2301      	movs	r3, #1
 801737c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801737e:	e7b5      	b.n	80172ec <_strtod_l+0x6e4>
 8017380:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017382:	9805      	ldr	r0, [sp, #20]
 8017384:	462a      	mov	r2, r5
 8017386:	f002 fe09 	bl	8019f9c <__lshift>
 801738a:	901a      	str	r0, [sp, #104]	@ 0x68
 801738c:	2800      	cmp	r0, #0
 801738e:	d1d9      	bne.n	8017344 <_strtod_l+0x73c>
 8017390:	e65d      	b.n	801704e <_strtod_l+0x446>
 8017392:	2e00      	cmp	r6, #0
 8017394:	dd07      	ble.n	80173a6 <_strtod_l+0x79e>
 8017396:	4649      	mov	r1, r9
 8017398:	9805      	ldr	r0, [sp, #20]
 801739a:	4632      	mov	r2, r6
 801739c:	f002 fdfe 	bl	8019f9c <__lshift>
 80173a0:	4681      	mov	r9, r0
 80173a2:	2800      	cmp	r0, #0
 80173a4:	d0d8      	beq.n	8017358 <_strtod_l+0x750>
 80173a6:	2f00      	cmp	r7, #0
 80173a8:	dd08      	ble.n	80173bc <_strtod_l+0x7b4>
 80173aa:	4641      	mov	r1, r8
 80173ac:	9805      	ldr	r0, [sp, #20]
 80173ae:	463a      	mov	r2, r7
 80173b0:	f002 fdf4 	bl	8019f9c <__lshift>
 80173b4:	4680      	mov	r8, r0
 80173b6:	2800      	cmp	r0, #0
 80173b8:	f43f ae49 	beq.w	801704e <_strtod_l+0x446>
 80173bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80173be:	9805      	ldr	r0, [sp, #20]
 80173c0:	464a      	mov	r2, r9
 80173c2:	f002 fe73 	bl	801a0ac <__mdiff>
 80173c6:	4604      	mov	r4, r0
 80173c8:	2800      	cmp	r0, #0
 80173ca:	f43f ae40 	beq.w	801704e <_strtod_l+0x446>
 80173ce:	68c3      	ldr	r3, [r0, #12]
 80173d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80173d2:	2300      	movs	r3, #0
 80173d4:	60c3      	str	r3, [r0, #12]
 80173d6:	4641      	mov	r1, r8
 80173d8:	f002 fe4c 	bl	801a074 <__mcmp>
 80173dc:	2800      	cmp	r0, #0
 80173de:	da45      	bge.n	801746c <_strtod_l+0x864>
 80173e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80173e2:	ea53 030a 	orrs.w	r3, r3, sl
 80173e6:	d16b      	bne.n	80174c0 <_strtod_l+0x8b8>
 80173e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d167      	bne.n	80174c0 <_strtod_l+0x8b8>
 80173f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80173f4:	0d1b      	lsrs	r3, r3, #20
 80173f6:	051b      	lsls	r3, r3, #20
 80173f8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80173fc:	d960      	bls.n	80174c0 <_strtod_l+0x8b8>
 80173fe:	6963      	ldr	r3, [r4, #20]
 8017400:	b913      	cbnz	r3, 8017408 <_strtod_l+0x800>
 8017402:	6923      	ldr	r3, [r4, #16]
 8017404:	2b01      	cmp	r3, #1
 8017406:	dd5b      	ble.n	80174c0 <_strtod_l+0x8b8>
 8017408:	4621      	mov	r1, r4
 801740a:	2201      	movs	r2, #1
 801740c:	9805      	ldr	r0, [sp, #20]
 801740e:	f002 fdc5 	bl	8019f9c <__lshift>
 8017412:	4641      	mov	r1, r8
 8017414:	4604      	mov	r4, r0
 8017416:	f002 fe2d 	bl	801a074 <__mcmp>
 801741a:	2800      	cmp	r0, #0
 801741c:	dd50      	ble.n	80174c0 <_strtod_l+0x8b8>
 801741e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017422:	9a08      	ldr	r2, [sp, #32]
 8017424:	0d1b      	lsrs	r3, r3, #20
 8017426:	051b      	lsls	r3, r3, #20
 8017428:	2a00      	cmp	r2, #0
 801742a:	d06a      	beq.n	8017502 <_strtod_l+0x8fa>
 801742c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017430:	d867      	bhi.n	8017502 <_strtod_l+0x8fa>
 8017432:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8017436:	f67f ae9d 	bls.w	8017174 <_strtod_l+0x56c>
 801743a:	4b0a      	ldr	r3, [pc, #40]	@ (8017464 <_strtod_l+0x85c>)
 801743c:	4650      	mov	r0, sl
 801743e:	4659      	mov	r1, fp
 8017440:	2200      	movs	r2, #0
 8017442:	f7f1 f909 	bl	8008658 <__aeabi_dmul>
 8017446:	4b08      	ldr	r3, [pc, #32]	@ (8017468 <_strtod_l+0x860>)
 8017448:	400b      	ands	r3, r1
 801744a:	4682      	mov	sl, r0
 801744c:	468b      	mov	fp, r1
 801744e:	2b00      	cmp	r3, #0
 8017450:	f47f ae08 	bne.w	8017064 <_strtod_l+0x45c>
 8017454:	9a05      	ldr	r2, [sp, #20]
 8017456:	2322      	movs	r3, #34	@ 0x22
 8017458:	6013      	str	r3, [r2, #0]
 801745a:	e603      	b.n	8017064 <_strtod_l+0x45c>
 801745c:	0801dd30 	.word	0x0801dd30
 8017460:	fffffc02 	.word	0xfffffc02
 8017464:	39500000 	.word	0x39500000
 8017468:	7ff00000 	.word	0x7ff00000
 801746c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8017470:	d165      	bne.n	801753e <_strtod_l+0x936>
 8017472:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017474:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017478:	b35a      	cbz	r2, 80174d2 <_strtod_l+0x8ca>
 801747a:	4a9f      	ldr	r2, [pc, #636]	@ (80176f8 <_strtod_l+0xaf0>)
 801747c:	4293      	cmp	r3, r2
 801747e:	d12b      	bne.n	80174d8 <_strtod_l+0x8d0>
 8017480:	9b08      	ldr	r3, [sp, #32]
 8017482:	4651      	mov	r1, sl
 8017484:	b303      	cbz	r3, 80174c8 <_strtod_l+0x8c0>
 8017486:	4b9d      	ldr	r3, [pc, #628]	@ (80176fc <_strtod_l+0xaf4>)
 8017488:	465a      	mov	r2, fp
 801748a:	4013      	ands	r3, r2
 801748c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8017490:	f04f 32ff 	mov.w	r2, #4294967295
 8017494:	d81b      	bhi.n	80174ce <_strtod_l+0x8c6>
 8017496:	0d1b      	lsrs	r3, r3, #20
 8017498:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801749c:	fa02 f303 	lsl.w	r3, r2, r3
 80174a0:	4299      	cmp	r1, r3
 80174a2:	d119      	bne.n	80174d8 <_strtod_l+0x8d0>
 80174a4:	4b96      	ldr	r3, [pc, #600]	@ (8017700 <_strtod_l+0xaf8>)
 80174a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80174a8:	429a      	cmp	r2, r3
 80174aa:	d102      	bne.n	80174b2 <_strtod_l+0x8aa>
 80174ac:	3101      	adds	r1, #1
 80174ae:	f43f adce 	beq.w	801704e <_strtod_l+0x446>
 80174b2:	4b92      	ldr	r3, [pc, #584]	@ (80176fc <_strtod_l+0xaf4>)
 80174b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80174b6:	401a      	ands	r2, r3
 80174b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80174bc:	f04f 0a00 	mov.w	sl, #0
 80174c0:	9b08      	ldr	r3, [sp, #32]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d1b9      	bne.n	801743a <_strtod_l+0x832>
 80174c6:	e5cd      	b.n	8017064 <_strtod_l+0x45c>
 80174c8:	f04f 33ff 	mov.w	r3, #4294967295
 80174cc:	e7e8      	b.n	80174a0 <_strtod_l+0x898>
 80174ce:	4613      	mov	r3, r2
 80174d0:	e7e6      	b.n	80174a0 <_strtod_l+0x898>
 80174d2:	ea53 030a 	orrs.w	r3, r3, sl
 80174d6:	d0a2      	beq.n	801741e <_strtod_l+0x816>
 80174d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80174da:	b1db      	cbz	r3, 8017514 <_strtod_l+0x90c>
 80174dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80174de:	4213      	tst	r3, r2
 80174e0:	d0ee      	beq.n	80174c0 <_strtod_l+0x8b8>
 80174e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80174e4:	9a08      	ldr	r2, [sp, #32]
 80174e6:	4650      	mov	r0, sl
 80174e8:	4659      	mov	r1, fp
 80174ea:	b1bb      	cbz	r3, 801751c <_strtod_l+0x914>
 80174ec:	f7ff fb6e 	bl	8016bcc <sulp>
 80174f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80174f4:	ec53 2b10 	vmov	r2, r3, d0
 80174f8:	f7f0 fef8 	bl	80082ec <__adddf3>
 80174fc:	4682      	mov	sl, r0
 80174fe:	468b      	mov	fp, r1
 8017500:	e7de      	b.n	80174c0 <_strtod_l+0x8b8>
 8017502:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8017506:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801750a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801750e:	f04f 3aff 	mov.w	sl, #4294967295
 8017512:	e7d5      	b.n	80174c0 <_strtod_l+0x8b8>
 8017514:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017516:	ea13 0f0a 	tst.w	r3, sl
 801751a:	e7e1      	b.n	80174e0 <_strtod_l+0x8d8>
 801751c:	f7ff fb56 	bl	8016bcc <sulp>
 8017520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017524:	ec53 2b10 	vmov	r2, r3, d0
 8017528:	f7f0 fede 	bl	80082e8 <__aeabi_dsub>
 801752c:	2200      	movs	r2, #0
 801752e:	2300      	movs	r3, #0
 8017530:	4682      	mov	sl, r0
 8017532:	468b      	mov	fp, r1
 8017534:	f7f1 faf8 	bl	8008b28 <__aeabi_dcmpeq>
 8017538:	2800      	cmp	r0, #0
 801753a:	d0c1      	beq.n	80174c0 <_strtod_l+0x8b8>
 801753c:	e61a      	b.n	8017174 <_strtod_l+0x56c>
 801753e:	4641      	mov	r1, r8
 8017540:	4620      	mov	r0, r4
 8017542:	f002 ff0f 	bl	801a364 <__ratio>
 8017546:	ec57 6b10 	vmov	r6, r7, d0
 801754a:	2200      	movs	r2, #0
 801754c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8017550:	4630      	mov	r0, r6
 8017552:	4639      	mov	r1, r7
 8017554:	f7f1 fafc 	bl	8008b50 <__aeabi_dcmple>
 8017558:	2800      	cmp	r0, #0
 801755a:	d06f      	beq.n	801763c <_strtod_l+0xa34>
 801755c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801755e:	2b00      	cmp	r3, #0
 8017560:	d17a      	bne.n	8017658 <_strtod_l+0xa50>
 8017562:	f1ba 0f00 	cmp.w	sl, #0
 8017566:	d158      	bne.n	801761a <_strtod_l+0xa12>
 8017568:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801756a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801756e:	2b00      	cmp	r3, #0
 8017570:	d15a      	bne.n	8017628 <_strtod_l+0xa20>
 8017572:	4b64      	ldr	r3, [pc, #400]	@ (8017704 <_strtod_l+0xafc>)
 8017574:	2200      	movs	r2, #0
 8017576:	4630      	mov	r0, r6
 8017578:	4639      	mov	r1, r7
 801757a:	f7f1 fadf 	bl	8008b3c <__aeabi_dcmplt>
 801757e:	2800      	cmp	r0, #0
 8017580:	d159      	bne.n	8017636 <_strtod_l+0xa2e>
 8017582:	4630      	mov	r0, r6
 8017584:	4639      	mov	r1, r7
 8017586:	4b60      	ldr	r3, [pc, #384]	@ (8017708 <_strtod_l+0xb00>)
 8017588:	2200      	movs	r2, #0
 801758a:	f7f1 f865 	bl	8008658 <__aeabi_dmul>
 801758e:	4606      	mov	r6, r0
 8017590:	460f      	mov	r7, r1
 8017592:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8017596:	9606      	str	r6, [sp, #24]
 8017598:	9307      	str	r3, [sp, #28]
 801759a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801759e:	4d57      	ldr	r5, [pc, #348]	@ (80176fc <_strtod_l+0xaf4>)
 80175a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80175a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80175a6:	401d      	ands	r5, r3
 80175a8:	4b58      	ldr	r3, [pc, #352]	@ (801770c <_strtod_l+0xb04>)
 80175aa:	429d      	cmp	r5, r3
 80175ac:	f040 80b2 	bne.w	8017714 <_strtod_l+0xb0c>
 80175b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80175b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80175b6:	ec4b ab10 	vmov	d0, sl, fp
 80175ba:	f002 fe0b 	bl	801a1d4 <__ulp>
 80175be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80175c2:	ec51 0b10 	vmov	r0, r1, d0
 80175c6:	f7f1 f847 	bl	8008658 <__aeabi_dmul>
 80175ca:	4652      	mov	r2, sl
 80175cc:	465b      	mov	r3, fp
 80175ce:	f7f0 fe8d 	bl	80082ec <__adddf3>
 80175d2:	460b      	mov	r3, r1
 80175d4:	4949      	ldr	r1, [pc, #292]	@ (80176fc <_strtod_l+0xaf4>)
 80175d6:	4a4e      	ldr	r2, [pc, #312]	@ (8017710 <_strtod_l+0xb08>)
 80175d8:	4019      	ands	r1, r3
 80175da:	4291      	cmp	r1, r2
 80175dc:	4682      	mov	sl, r0
 80175de:	d942      	bls.n	8017666 <_strtod_l+0xa5e>
 80175e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80175e2:	4b47      	ldr	r3, [pc, #284]	@ (8017700 <_strtod_l+0xaf8>)
 80175e4:	429a      	cmp	r2, r3
 80175e6:	d103      	bne.n	80175f0 <_strtod_l+0x9e8>
 80175e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80175ea:	3301      	adds	r3, #1
 80175ec:	f43f ad2f 	beq.w	801704e <_strtod_l+0x446>
 80175f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8017700 <_strtod_l+0xaf8>
 80175f4:	f04f 3aff 	mov.w	sl, #4294967295
 80175f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80175fa:	9805      	ldr	r0, [sp, #20]
 80175fc:	f002 fabe 	bl	8019b7c <_Bfree>
 8017600:	9805      	ldr	r0, [sp, #20]
 8017602:	4649      	mov	r1, r9
 8017604:	f002 faba 	bl	8019b7c <_Bfree>
 8017608:	9805      	ldr	r0, [sp, #20]
 801760a:	4641      	mov	r1, r8
 801760c:	f002 fab6 	bl	8019b7c <_Bfree>
 8017610:	9805      	ldr	r0, [sp, #20]
 8017612:	4621      	mov	r1, r4
 8017614:	f002 fab2 	bl	8019b7c <_Bfree>
 8017618:	e619      	b.n	801724e <_strtod_l+0x646>
 801761a:	f1ba 0f01 	cmp.w	sl, #1
 801761e:	d103      	bne.n	8017628 <_strtod_l+0xa20>
 8017620:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017622:	2b00      	cmp	r3, #0
 8017624:	f43f ada6 	beq.w	8017174 <_strtod_l+0x56c>
 8017628:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80176d8 <_strtod_l+0xad0>
 801762c:	4f35      	ldr	r7, [pc, #212]	@ (8017704 <_strtod_l+0xafc>)
 801762e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017632:	2600      	movs	r6, #0
 8017634:	e7b1      	b.n	801759a <_strtod_l+0x992>
 8017636:	4f34      	ldr	r7, [pc, #208]	@ (8017708 <_strtod_l+0xb00>)
 8017638:	2600      	movs	r6, #0
 801763a:	e7aa      	b.n	8017592 <_strtod_l+0x98a>
 801763c:	4b32      	ldr	r3, [pc, #200]	@ (8017708 <_strtod_l+0xb00>)
 801763e:	4630      	mov	r0, r6
 8017640:	4639      	mov	r1, r7
 8017642:	2200      	movs	r2, #0
 8017644:	f7f1 f808 	bl	8008658 <__aeabi_dmul>
 8017648:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801764a:	4606      	mov	r6, r0
 801764c:	460f      	mov	r7, r1
 801764e:	2b00      	cmp	r3, #0
 8017650:	d09f      	beq.n	8017592 <_strtod_l+0x98a>
 8017652:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8017656:	e7a0      	b.n	801759a <_strtod_l+0x992>
 8017658:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80176e0 <_strtod_l+0xad8>
 801765c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017660:	ec57 6b17 	vmov	r6, r7, d7
 8017664:	e799      	b.n	801759a <_strtod_l+0x992>
 8017666:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801766a:	9b08      	ldr	r3, [sp, #32]
 801766c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8017670:	2b00      	cmp	r3, #0
 8017672:	d1c1      	bne.n	80175f8 <_strtod_l+0x9f0>
 8017674:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017678:	0d1b      	lsrs	r3, r3, #20
 801767a:	051b      	lsls	r3, r3, #20
 801767c:	429d      	cmp	r5, r3
 801767e:	d1bb      	bne.n	80175f8 <_strtod_l+0x9f0>
 8017680:	4630      	mov	r0, r6
 8017682:	4639      	mov	r1, r7
 8017684:	f7f1 faf8 	bl	8008c78 <__aeabi_d2lz>
 8017688:	f7f0 ffb8 	bl	80085fc <__aeabi_l2d>
 801768c:	4602      	mov	r2, r0
 801768e:	460b      	mov	r3, r1
 8017690:	4630      	mov	r0, r6
 8017692:	4639      	mov	r1, r7
 8017694:	f7f0 fe28 	bl	80082e8 <__aeabi_dsub>
 8017698:	460b      	mov	r3, r1
 801769a:	4602      	mov	r2, r0
 801769c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80176a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80176a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80176a6:	ea46 060a 	orr.w	r6, r6, sl
 80176aa:	431e      	orrs	r6, r3
 80176ac:	d06f      	beq.n	801778e <_strtod_l+0xb86>
 80176ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80176e8 <_strtod_l+0xae0>)
 80176b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176b4:	f7f1 fa42 	bl	8008b3c <__aeabi_dcmplt>
 80176b8:	2800      	cmp	r0, #0
 80176ba:	f47f acd3 	bne.w	8017064 <_strtod_l+0x45c>
 80176be:	a30c      	add	r3, pc, #48	@ (adr r3, 80176f0 <_strtod_l+0xae8>)
 80176c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80176c8:	f7f1 fa56 	bl	8008b78 <__aeabi_dcmpgt>
 80176cc:	2800      	cmp	r0, #0
 80176ce:	d093      	beq.n	80175f8 <_strtod_l+0x9f0>
 80176d0:	e4c8      	b.n	8017064 <_strtod_l+0x45c>
 80176d2:	bf00      	nop
 80176d4:	f3af 8000 	nop.w
 80176d8:	00000000 	.word	0x00000000
 80176dc:	bff00000 	.word	0xbff00000
 80176e0:	00000000 	.word	0x00000000
 80176e4:	3ff00000 	.word	0x3ff00000
 80176e8:	94a03595 	.word	0x94a03595
 80176ec:	3fdfffff 	.word	0x3fdfffff
 80176f0:	35afe535 	.word	0x35afe535
 80176f4:	3fe00000 	.word	0x3fe00000
 80176f8:	000fffff 	.word	0x000fffff
 80176fc:	7ff00000 	.word	0x7ff00000
 8017700:	7fefffff 	.word	0x7fefffff
 8017704:	3ff00000 	.word	0x3ff00000
 8017708:	3fe00000 	.word	0x3fe00000
 801770c:	7fe00000 	.word	0x7fe00000
 8017710:	7c9fffff 	.word	0x7c9fffff
 8017714:	9b08      	ldr	r3, [sp, #32]
 8017716:	b323      	cbz	r3, 8017762 <_strtod_l+0xb5a>
 8017718:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801771c:	d821      	bhi.n	8017762 <_strtod_l+0xb5a>
 801771e:	a328      	add	r3, pc, #160	@ (adr r3, 80177c0 <_strtod_l+0xbb8>)
 8017720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017724:	4630      	mov	r0, r6
 8017726:	4639      	mov	r1, r7
 8017728:	f7f1 fa12 	bl	8008b50 <__aeabi_dcmple>
 801772c:	b1a0      	cbz	r0, 8017758 <_strtod_l+0xb50>
 801772e:	4639      	mov	r1, r7
 8017730:	4630      	mov	r0, r6
 8017732:	f7f1 fa69 	bl	8008c08 <__aeabi_d2uiz>
 8017736:	2801      	cmp	r0, #1
 8017738:	bf38      	it	cc
 801773a:	2001      	movcc	r0, #1
 801773c:	f7f0 ff12 	bl	8008564 <__aeabi_ui2d>
 8017740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017742:	4606      	mov	r6, r0
 8017744:	460f      	mov	r7, r1
 8017746:	b9fb      	cbnz	r3, 8017788 <_strtod_l+0xb80>
 8017748:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801774c:	9014      	str	r0, [sp, #80]	@ 0x50
 801774e:	9315      	str	r3, [sp, #84]	@ 0x54
 8017750:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8017754:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8017758:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801775a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801775e:	1b5b      	subs	r3, r3, r5
 8017760:	9311      	str	r3, [sp, #68]	@ 0x44
 8017762:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8017766:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801776a:	f002 fd33 	bl	801a1d4 <__ulp>
 801776e:	4650      	mov	r0, sl
 8017770:	ec53 2b10 	vmov	r2, r3, d0
 8017774:	4659      	mov	r1, fp
 8017776:	f7f0 ff6f 	bl	8008658 <__aeabi_dmul>
 801777a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801777e:	f7f0 fdb5 	bl	80082ec <__adddf3>
 8017782:	4682      	mov	sl, r0
 8017784:	468b      	mov	fp, r1
 8017786:	e770      	b.n	801766a <_strtod_l+0xa62>
 8017788:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801778c:	e7e0      	b.n	8017750 <_strtod_l+0xb48>
 801778e:	a30e      	add	r3, pc, #56	@ (adr r3, 80177c8 <_strtod_l+0xbc0>)
 8017790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017794:	f7f1 f9d2 	bl	8008b3c <__aeabi_dcmplt>
 8017798:	e798      	b.n	80176cc <_strtod_l+0xac4>
 801779a:	2300      	movs	r3, #0
 801779c:	930e      	str	r3, [sp, #56]	@ 0x38
 801779e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80177a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80177a2:	6013      	str	r3, [r2, #0]
 80177a4:	f7ff ba6d 	b.w	8016c82 <_strtod_l+0x7a>
 80177a8:	2a65      	cmp	r2, #101	@ 0x65
 80177aa:	f43f ab68 	beq.w	8016e7e <_strtod_l+0x276>
 80177ae:	2a45      	cmp	r2, #69	@ 0x45
 80177b0:	f43f ab65 	beq.w	8016e7e <_strtod_l+0x276>
 80177b4:	2301      	movs	r3, #1
 80177b6:	f7ff bba0 	b.w	8016efa <_strtod_l+0x2f2>
 80177ba:	bf00      	nop
 80177bc:	f3af 8000 	nop.w
 80177c0:	ffc00000 	.word	0xffc00000
 80177c4:	41dfffff 	.word	0x41dfffff
 80177c8:	94a03595 	.word	0x94a03595
 80177cc:	3fcfffff 	.word	0x3fcfffff

080177d0 <strtod>:
 80177d0:	460a      	mov	r2, r1
 80177d2:	4601      	mov	r1, r0
 80177d4:	4802      	ldr	r0, [pc, #8]	@ (80177e0 <strtod+0x10>)
 80177d6:	4b03      	ldr	r3, [pc, #12]	@ (80177e4 <strtod+0x14>)
 80177d8:	6800      	ldr	r0, [r0, #0]
 80177da:	f7ff ba15 	b.w	8016c08 <_strtod_l>
 80177de:	bf00      	nop
 80177e0:	200001fc 	.word	0x200001fc
 80177e4:	20000090 	.word	0x20000090

080177e8 <__cvt>:
 80177e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80177ec:	ec57 6b10 	vmov	r6, r7, d0
 80177f0:	2f00      	cmp	r7, #0
 80177f2:	460c      	mov	r4, r1
 80177f4:	4619      	mov	r1, r3
 80177f6:	463b      	mov	r3, r7
 80177f8:	bfbb      	ittet	lt
 80177fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80177fe:	461f      	movlt	r7, r3
 8017800:	2300      	movge	r3, #0
 8017802:	232d      	movlt	r3, #45	@ 0x2d
 8017804:	700b      	strb	r3, [r1, #0]
 8017806:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017808:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801780c:	4691      	mov	r9, r2
 801780e:	f023 0820 	bic.w	r8, r3, #32
 8017812:	bfbc      	itt	lt
 8017814:	4632      	movlt	r2, r6
 8017816:	4616      	movlt	r6, r2
 8017818:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801781c:	d005      	beq.n	801782a <__cvt+0x42>
 801781e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8017822:	d100      	bne.n	8017826 <__cvt+0x3e>
 8017824:	3401      	adds	r4, #1
 8017826:	2102      	movs	r1, #2
 8017828:	e000      	b.n	801782c <__cvt+0x44>
 801782a:	2103      	movs	r1, #3
 801782c:	ab03      	add	r3, sp, #12
 801782e:	9301      	str	r3, [sp, #4]
 8017830:	ab02      	add	r3, sp, #8
 8017832:	9300      	str	r3, [sp, #0]
 8017834:	ec47 6b10 	vmov	d0, r6, r7
 8017838:	4653      	mov	r3, sl
 801783a:	4622      	mov	r2, r4
 801783c:	f000 fff8 	bl	8018830 <_dtoa_r>
 8017840:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8017844:	4605      	mov	r5, r0
 8017846:	d119      	bne.n	801787c <__cvt+0x94>
 8017848:	f019 0f01 	tst.w	r9, #1
 801784c:	d00e      	beq.n	801786c <__cvt+0x84>
 801784e:	eb00 0904 	add.w	r9, r0, r4
 8017852:	2200      	movs	r2, #0
 8017854:	2300      	movs	r3, #0
 8017856:	4630      	mov	r0, r6
 8017858:	4639      	mov	r1, r7
 801785a:	f7f1 f965 	bl	8008b28 <__aeabi_dcmpeq>
 801785e:	b108      	cbz	r0, 8017864 <__cvt+0x7c>
 8017860:	f8cd 900c 	str.w	r9, [sp, #12]
 8017864:	2230      	movs	r2, #48	@ 0x30
 8017866:	9b03      	ldr	r3, [sp, #12]
 8017868:	454b      	cmp	r3, r9
 801786a:	d31e      	bcc.n	80178aa <__cvt+0xc2>
 801786c:	9b03      	ldr	r3, [sp, #12]
 801786e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017870:	1b5b      	subs	r3, r3, r5
 8017872:	4628      	mov	r0, r5
 8017874:	6013      	str	r3, [r2, #0]
 8017876:	b004      	add	sp, #16
 8017878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801787c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8017880:	eb00 0904 	add.w	r9, r0, r4
 8017884:	d1e5      	bne.n	8017852 <__cvt+0x6a>
 8017886:	7803      	ldrb	r3, [r0, #0]
 8017888:	2b30      	cmp	r3, #48	@ 0x30
 801788a:	d10a      	bne.n	80178a2 <__cvt+0xba>
 801788c:	2200      	movs	r2, #0
 801788e:	2300      	movs	r3, #0
 8017890:	4630      	mov	r0, r6
 8017892:	4639      	mov	r1, r7
 8017894:	f7f1 f948 	bl	8008b28 <__aeabi_dcmpeq>
 8017898:	b918      	cbnz	r0, 80178a2 <__cvt+0xba>
 801789a:	f1c4 0401 	rsb	r4, r4, #1
 801789e:	f8ca 4000 	str.w	r4, [sl]
 80178a2:	f8da 3000 	ldr.w	r3, [sl]
 80178a6:	4499      	add	r9, r3
 80178a8:	e7d3      	b.n	8017852 <__cvt+0x6a>
 80178aa:	1c59      	adds	r1, r3, #1
 80178ac:	9103      	str	r1, [sp, #12]
 80178ae:	701a      	strb	r2, [r3, #0]
 80178b0:	e7d9      	b.n	8017866 <__cvt+0x7e>

080178b2 <__exponent>:
 80178b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80178b4:	2900      	cmp	r1, #0
 80178b6:	bfba      	itte	lt
 80178b8:	4249      	neglt	r1, r1
 80178ba:	232d      	movlt	r3, #45	@ 0x2d
 80178bc:	232b      	movge	r3, #43	@ 0x2b
 80178be:	2909      	cmp	r1, #9
 80178c0:	7002      	strb	r2, [r0, #0]
 80178c2:	7043      	strb	r3, [r0, #1]
 80178c4:	dd29      	ble.n	801791a <__exponent+0x68>
 80178c6:	f10d 0307 	add.w	r3, sp, #7
 80178ca:	461d      	mov	r5, r3
 80178cc:	270a      	movs	r7, #10
 80178ce:	461a      	mov	r2, r3
 80178d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80178d4:	fb07 1416 	mls	r4, r7, r6, r1
 80178d8:	3430      	adds	r4, #48	@ 0x30
 80178da:	f802 4c01 	strb.w	r4, [r2, #-1]
 80178de:	460c      	mov	r4, r1
 80178e0:	2c63      	cmp	r4, #99	@ 0x63
 80178e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80178e6:	4631      	mov	r1, r6
 80178e8:	dcf1      	bgt.n	80178ce <__exponent+0x1c>
 80178ea:	3130      	adds	r1, #48	@ 0x30
 80178ec:	1e94      	subs	r4, r2, #2
 80178ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80178f2:	1c41      	adds	r1, r0, #1
 80178f4:	4623      	mov	r3, r4
 80178f6:	42ab      	cmp	r3, r5
 80178f8:	d30a      	bcc.n	8017910 <__exponent+0x5e>
 80178fa:	f10d 0309 	add.w	r3, sp, #9
 80178fe:	1a9b      	subs	r3, r3, r2
 8017900:	42ac      	cmp	r4, r5
 8017902:	bf88      	it	hi
 8017904:	2300      	movhi	r3, #0
 8017906:	3302      	adds	r3, #2
 8017908:	4403      	add	r3, r0
 801790a:	1a18      	subs	r0, r3, r0
 801790c:	b003      	add	sp, #12
 801790e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017910:	f813 6b01 	ldrb.w	r6, [r3], #1
 8017914:	f801 6f01 	strb.w	r6, [r1, #1]!
 8017918:	e7ed      	b.n	80178f6 <__exponent+0x44>
 801791a:	2330      	movs	r3, #48	@ 0x30
 801791c:	3130      	adds	r1, #48	@ 0x30
 801791e:	7083      	strb	r3, [r0, #2]
 8017920:	70c1      	strb	r1, [r0, #3]
 8017922:	1d03      	adds	r3, r0, #4
 8017924:	e7f1      	b.n	801790a <__exponent+0x58>
	...

08017928 <_printf_float>:
 8017928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801792c:	b08d      	sub	sp, #52	@ 0x34
 801792e:	460c      	mov	r4, r1
 8017930:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8017934:	4616      	mov	r6, r2
 8017936:	461f      	mov	r7, r3
 8017938:	4605      	mov	r5, r0
 801793a:	f000 fe4b 	bl	80185d4 <_localeconv_r>
 801793e:	6803      	ldr	r3, [r0, #0]
 8017940:	9304      	str	r3, [sp, #16]
 8017942:	4618      	mov	r0, r3
 8017944:	f7f0 fcc4 	bl	80082d0 <strlen>
 8017948:	2300      	movs	r3, #0
 801794a:	930a      	str	r3, [sp, #40]	@ 0x28
 801794c:	f8d8 3000 	ldr.w	r3, [r8]
 8017950:	9005      	str	r0, [sp, #20]
 8017952:	3307      	adds	r3, #7
 8017954:	f023 0307 	bic.w	r3, r3, #7
 8017958:	f103 0208 	add.w	r2, r3, #8
 801795c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8017960:	f8d4 b000 	ldr.w	fp, [r4]
 8017964:	f8c8 2000 	str.w	r2, [r8]
 8017968:	e9d3 8900 	ldrd	r8, r9, [r3]
 801796c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8017970:	9307      	str	r3, [sp, #28]
 8017972:	f8cd 8018 	str.w	r8, [sp, #24]
 8017976:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801797a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801797e:	4b9c      	ldr	r3, [pc, #624]	@ (8017bf0 <_printf_float+0x2c8>)
 8017980:	f04f 32ff 	mov.w	r2, #4294967295
 8017984:	f7f1 f902 	bl	8008b8c <__aeabi_dcmpun>
 8017988:	bb70      	cbnz	r0, 80179e8 <_printf_float+0xc0>
 801798a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801798e:	4b98      	ldr	r3, [pc, #608]	@ (8017bf0 <_printf_float+0x2c8>)
 8017990:	f04f 32ff 	mov.w	r2, #4294967295
 8017994:	f7f1 f8dc 	bl	8008b50 <__aeabi_dcmple>
 8017998:	bb30      	cbnz	r0, 80179e8 <_printf_float+0xc0>
 801799a:	2200      	movs	r2, #0
 801799c:	2300      	movs	r3, #0
 801799e:	4640      	mov	r0, r8
 80179a0:	4649      	mov	r1, r9
 80179a2:	f7f1 f8cb 	bl	8008b3c <__aeabi_dcmplt>
 80179a6:	b110      	cbz	r0, 80179ae <_printf_float+0x86>
 80179a8:	232d      	movs	r3, #45	@ 0x2d
 80179aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80179ae:	4a91      	ldr	r2, [pc, #580]	@ (8017bf4 <_printf_float+0x2cc>)
 80179b0:	4b91      	ldr	r3, [pc, #580]	@ (8017bf8 <_printf_float+0x2d0>)
 80179b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80179b6:	bf8c      	ite	hi
 80179b8:	4690      	movhi	r8, r2
 80179ba:	4698      	movls	r8, r3
 80179bc:	2303      	movs	r3, #3
 80179be:	6123      	str	r3, [r4, #16]
 80179c0:	f02b 0304 	bic.w	r3, fp, #4
 80179c4:	6023      	str	r3, [r4, #0]
 80179c6:	f04f 0900 	mov.w	r9, #0
 80179ca:	9700      	str	r7, [sp, #0]
 80179cc:	4633      	mov	r3, r6
 80179ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80179d0:	4621      	mov	r1, r4
 80179d2:	4628      	mov	r0, r5
 80179d4:	f000 f9d2 	bl	8017d7c <_printf_common>
 80179d8:	3001      	adds	r0, #1
 80179da:	f040 808d 	bne.w	8017af8 <_printf_float+0x1d0>
 80179de:	f04f 30ff 	mov.w	r0, #4294967295
 80179e2:	b00d      	add	sp, #52	@ 0x34
 80179e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179e8:	4642      	mov	r2, r8
 80179ea:	464b      	mov	r3, r9
 80179ec:	4640      	mov	r0, r8
 80179ee:	4649      	mov	r1, r9
 80179f0:	f7f1 f8cc 	bl	8008b8c <__aeabi_dcmpun>
 80179f4:	b140      	cbz	r0, 8017a08 <_printf_float+0xe0>
 80179f6:	464b      	mov	r3, r9
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	bfbc      	itt	lt
 80179fc:	232d      	movlt	r3, #45	@ 0x2d
 80179fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8017a02:	4a7e      	ldr	r2, [pc, #504]	@ (8017bfc <_printf_float+0x2d4>)
 8017a04:	4b7e      	ldr	r3, [pc, #504]	@ (8017c00 <_printf_float+0x2d8>)
 8017a06:	e7d4      	b.n	80179b2 <_printf_float+0x8a>
 8017a08:	6863      	ldr	r3, [r4, #4]
 8017a0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8017a0e:	9206      	str	r2, [sp, #24]
 8017a10:	1c5a      	adds	r2, r3, #1
 8017a12:	d13b      	bne.n	8017a8c <_printf_float+0x164>
 8017a14:	2306      	movs	r3, #6
 8017a16:	6063      	str	r3, [r4, #4]
 8017a18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	6022      	str	r2, [r4, #0]
 8017a20:	9303      	str	r3, [sp, #12]
 8017a22:	ab0a      	add	r3, sp, #40	@ 0x28
 8017a24:	e9cd a301 	strd	sl, r3, [sp, #4]
 8017a28:	ab09      	add	r3, sp, #36	@ 0x24
 8017a2a:	9300      	str	r3, [sp, #0]
 8017a2c:	6861      	ldr	r1, [r4, #4]
 8017a2e:	ec49 8b10 	vmov	d0, r8, r9
 8017a32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8017a36:	4628      	mov	r0, r5
 8017a38:	f7ff fed6 	bl	80177e8 <__cvt>
 8017a3c:	9b06      	ldr	r3, [sp, #24]
 8017a3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017a40:	2b47      	cmp	r3, #71	@ 0x47
 8017a42:	4680      	mov	r8, r0
 8017a44:	d129      	bne.n	8017a9a <_printf_float+0x172>
 8017a46:	1cc8      	adds	r0, r1, #3
 8017a48:	db02      	blt.n	8017a50 <_printf_float+0x128>
 8017a4a:	6863      	ldr	r3, [r4, #4]
 8017a4c:	4299      	cmp	r1, r3
 8017a4e:	dd41      	ble.n	8017ad4 <_printf_float+0x1ac>
 8017a50:	f1aa 0a02 	sub.w	sl, sl, #2
 8017a54:	fa5f fa8a 	uxtb.w	sl, sl
 8017a58:	3901      	subs	r1, #1
 8017a5a:	4652      	mov	r2, sl
 8017a5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8017a60:	9109      	str	r1, [sp, #36]	@ 0x24
 8017a62:	f7ff ff26 	bl	80178b2 <__exponent>
 8017a66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017a68:	1813      	adds	r3, r2, r0
 8017a6a:	2a01      	cmp	r2, #1
 8017a6c:	4681      	mov	r9, r0
 8017a6e:	6123      	str	r3, [r4, #16]
 8017a70:	dc02      	bgt.n	8017a78 <_printf_float+0x150>
 8017a72:	6822      	ldr	r2, [r4, #0]
 8017a74:	07d2      	lsls	r2, r2, #31
 8017a76:	d501      	bpl.n	8017a7c <_printf_float+0x154>
 8017a78:	3301      	adds	r3, #1
 8017a7a:	6123      	str	r3, [r4, #16]
 8017a7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d0a2      	beq.n	80179ca <_printf_float+0xa2>
 8017a84:	232d      	movs	r3, #45	@ 0x2d
 8017a86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017a8a:	e79e      	b.n	80179ca <_printf_float+0xa2>
 8017a8c:	9a06      	ldr	r2, [sp, #24]
 8017a8e:	2a47      	cmp	r2, #71	@ 0x47
 8017a90:	d1c2      	bne.n	8017a18 <_printf_float+0xf0>
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d1c0      	bne.n	8017a18 <_printf_float+0xf0>
 8017a96:	2301      	movs	r3, #1
 8017a98:	e7bd      	b.n	8017a16 <_printf_float+0xee>
 8017a9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8017a9e:	d9db      	bls.n	8017a58 <_printf_float+0x130>
 8017aa0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8017aa4:	d118      	bne.n	8017ad8 <_printf_float+0x1b0>
 8017aa6:	2900      	cmp	r1, #0
 8017aa8:	6863      	ldr	r3, [r4, #4]
 8017aaa:	dd0b      	ble.n	8017ac4 <_printf_float+0x19c>
 8017aac:	6121      	str	r1, [r4, #16]
 8017aae:	b913      	cbnz	r3, 8017ab6 <_printf_float+0x18e>
 8017ab0:	6822      	ldr	r2, [r4, #0]
 8017ab2:	07d0      	lsls	r0, r2, #31
 8017ab4:	d502      	bpl.n	8017abc <_printf_float+0x194>
 8017ab6:	3301      	adds	r3, #1
 8017ab8:	440b      	add	r3, r1
 8017aba:	6123      	str	r3, [r4, #16]
 8017abc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8017abe:	f04f 0900 	mov.w	r9, #0
 8017ac2:	e7db      	b.n	8017a7c <_printf_float+0x154>
 8017ac4:	b913      	cbnz	r3, 8017acc <_printf_float+0x1a4>
 8017ac6:	6822      	ldr	r2, [r4, #0]
 8017ac8:	07d2      	lsls	r2, r2, #31
 8017aca:	d501      	bpl.n	8017ad0 <_printf_float+0x1a8>
 8017acc:	3302      	adds	r3, #2
 8017ace:	e7f4      	b.n	8017aba <_printf_float+0x192>
 8017ad0:	2301      	movs	r3, #1
 8017ad2:	e7f2      	b.n	8017aba <_printf_float+0x192>
 8017ad4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8017ad8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017ada:	4299      	cmp	r1, r3
 8017adc:	db05      	blt.n	8017aea <_printf_float+0x1c2>
 8017ade:	6823      	ldr	r3, [r4, #0]
 8017ae0:	6121      	str	r1, [r4, #16]
 8017ae2:	07d8      	lsls	r0, r3, #31
 8017ae4:	d5ea      	bpl.n	8017abc <_printf_float+0x194>
 8017ae6:	1c4b      	adds	r3, r1, #1
 8017ae8:	e7e7      	b.n	8017aba <_printf_float+0x192>
 8017aea:	2900      	cmp	r1, #0
 8017aec:	bfd4      	ite	le
 8017aee:	f1c1 0202 	rsble	r2, r1, #2
 8017af2:	2201      	movgt	r2, #1
 8017af4:	4413      	add	r3, r2
 8017af6:	e7e0      	b.n	8017aba <_printf_float+0x192>
 8017af8:	6823      	ldr	r3, [r4, #0]
 8017afa:	055a      	lsls	r2, r3, #21
 8017afc:	d407      	bmi.n	8017b0e <_printf_float+0x1e6>
 8017afe:	6923      	ldr	r3, [r4, #16]
 8017b00:	4642      	mov	r2, r8
 8017b02:	4631      	mov	r1, r6
 8017b04:	4628      	mov	r0, r5
 8017b06:	47b8      	blx	r7
 8017b08:	3001      	adds	r0, #1
 8017b0a:	d12b      	bne.n	8017b64 <_printf_float+0x23c>
 8017b0c:	e767      	b.n	80179de <_printf_float+0xb6>
 8017b0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8017b12:	f240 80dd 	bls.w	8017cd0 <_printf_float+0x3a8>
 8017b16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	f7f1 f803 	bl	8008b28 <__aeabi_dcmpeq>
 8017b22:	2800      	cmp	r0, #0
 8017b24:	d033      	beq.n	8017b8e <_printf_float+0x266>
 8017b26:	4a37      	ldr	r2, [pc, #220]	@ (8017c04 <_printf_float+0x2dc>)
 8017b28:	2301      	movs	r3, #1
 8017b2a:	4631      	mov	r1, r6
 8017b2c:	4628      	mov	r0, r5
 8017b2e:	47b8      	blx	r7
 8017b30:	3001      	adds	r0, #1
 8017b32:	f43f af54 	beq.w	80179de <_printf_float+0xb6>
 8017b36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8017b3a:	4543      	cmp	r3, r8
 8017b3c:	db02      	blt.n	8017b44 <_printf_float+0x21c>
 8017b3e:	6823      	ldr	r3, [r4, #0]
 8017b40:	07d8      	lsls	r0, r3, #31
 8017b42:	d50f      	bpl.n	8017b64 <_printf_float+0x23c>
 8017b44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017b48:	4631      	mov	r1, r6
 8017b4a:	4628      	mov	r0, r5
 8017b4c:	47b8      	blx	r7
 8017b4e:	3001      	adds	r0, #1
 8017b50:	f43f af45 	beq.w	80179de <_printf_float+0xb6>
 8017b54:	f04f 0900 	mov.w	r9, #0
 8017b58:	f108 38ff 	add.w	r8, r8, #4294967295
 8017b5c:	f104 0a1a 	add.w	sl, r4, #26
 8017b60:	45c8      	cmp	r8, r9
 8017b62:	dc09      	bgt.n	8017b78 <_printf_float+0x250>
 8017b64:	6823      	ldr	r3, [r4, #0]
 8017b66:	079b      	lsls	r3, r3, #30
 8017b68:	f100 8103 	bmi.w	8017d72 <_printf_float+0x44a>
 8017b6c:	68e0      	ldr	r0, [r4, #12]
 8017b6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017b70:	4298      	cmp	r0, r3
 8017b72:	bfb8      	it	lt
 8017b74:	4618      	movlt	r0, r3
 8017b76:	e734      	b.n	80179e2 <_printf_float+0xba>
 8017b78:	2301      	movs	r3, #1
 8017b7a:	4652      	mov	r2, sl
 8017b7c:	4631      	mov	r1, r6
 8017b7e:	4628      	mov	r0, r5
 8017b80:	47b8      	blx	r7
 8017b82:	3001      	adds	r0, #1
 8017b84:	f43f af2b 	beq.w	80179de <_printf_float+0xb6>
 8017b88:	f109 0901 	add.w	r9, r9, #1
 8017b8c:	e7e8      	b.n	8017b60 <_printf_float+0x238>
 8017b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	dc39      	bgt.n	8017c08 <_printf_float+0x2e0>
 8017b94:	4a1b      	ldr	r2, [pc, #108]	@ (8017c04 <_printf_float+0x2dc>)
 8017b96:	2301      	movs	r3, #1
 8017b98:	4631      	mov	r1, r6
 8017b9a:	4628      	mov	r0, r5
 8017b9c:	47b8      	blx	r7
 8017b9e:	3001      	adds	r0, #1
 8017ba0:	f43f af1d 	beq.w	80179de <_printf_float+0xb6>
 8017ba4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8017ba8:	ea59 0303 	orrs.w	r3, r9, r3
 8017bac:	d102      	bne.n	8017bb4 <_printf_float+0x28c>
 8017bae:	6823      	ldr	r3, [r4, #0]
 8017bb0:	07d9      	lsls	r1, r3, #31
 8017bb2:	d5d7      	bpl.n	8017b64 <_printf_float+0x23c>
 8017bb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017bb8:	4631      	mov	r1, r6
 8017bba:	4628      	mov	r0, r5
 8017bbc:	47b8      	blx	r7
 8017bbe:	3001      	adds	r0, #1
 8017bc0:	f43f af0d 	beq.w	80179de <_printf_float+0xb6>
 8017bc4:	f04f 0a00 	mov.w	sl, #0
 8017bc8:	f104 0b1a 	add.w	fp, r4, #26
 8017bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017bce:	425b      	negs	r3, r3
 8017bd0:	4553      	cmp	r3, sl
 8017bd2:	dc01      	bgt.n	8017bd8 <_printf_float+0x2b0>
 8017bd4:	464b      	mov	r3, r9
 8017bd6:	e793      	b.n	8017b00 <_printf_float+0x1d8>
 8017bd8:	2301      	movs	r3, #1
 8017bda:	465a      	mov	r2, fp
 8017bdc:	4631      	mov	r1, r6
 8017bde:	4628      	mov	r0, r5
 8017be0:	47b8      	blx	r7
 8017be2:	3001      	adds	r0, #1
 8017be4:	f43f aefb 	beq.w	80179de <_printf_float+0xb6>
 8017be8:	f10a 0a01 	add.w	sl, sl, #1
 8017bec:	e7ee      	b.n	8017bcc <_printf_float+0x2a4>
 8017bee:	bf00      	nop
 8017bf0:	7fefffff 	.word	0x7fefffff
 8017bf4:	0801db1e 	.word	0x0801db1e
 8017bf8:	0801db1a 	.word	0x0801db1a
 8017bfc:	0801db26 	.word	0x0801db26
 8017c00:	0801db22 	.word	0x0801db22
 8017c04:	0801dcc1 	.word	0x0801dcc1
 8017c08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017c0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8017c0e:	4553      	cmp	r3, sl
 8017c10:	bfa8      	it	ge
 8017c12:	4653      	movge	r3, sl
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	4699      	mov	r9, r3
 8017c18:	dc36      	bgt.n	8017c88 <_printf_float+0x360>
 8017c1a:	f04f 0b00 	mov.w	fp, #0
 8017c1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017c22:	f104 021a 	add.w	r2, r4, #26
 8017c26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017c28:	9306      	str	r3, [sp, #24]
 8017c2a:	eba3 0309 	sub.w	r3, r3, r9
 8017c2e:	455b      	cmp	r3, fp
 8017c30:	dc31      	bgt.n	8017c96 <_printf_float+0x36e>
 8017c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c34:	459a      	cmp	sl, r3
 8017c36:	dc3a      	bgt.n	8017cae <_printf_float+0x386>
 8017c38:	6823      	ldr	r3, [r4, #0]
 8017c3a:	07da      	lsls	r2, r3, #31
 8017c3c:	d437      	bmi.n	8017cae <_printf_float+0x386>
 8017c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c40:	ebaa 0903 	sub.w	r9, sl, r3
 8017c44:	9b06      	ldr	r3, [sp, #24]
 8017c46:	ebaa 0303 	sub.w	r3, sl, r3
 8017c4a:	4599      	cmp	r9, r3
 8017c4c:	bfa8      	it	ge
 8017c4e:	4699      	movge	r9, r3
 8017c50:	f1b9 0f00 	cmp.w	r9, #0
 8017c54:	dc33      	bgt.n	8017cbe <_printf_float+0x396>
 8017c56:	f04f 0800 	mov.w	r8, #0
 8017c5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017c5e:	f104 0b1a 	add.w	fp, r4, #26
 8017c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c64:	ebaa 0303 	sub.w	r3, sl, r3
 8017c68:	eba3 0309 	sub.w	r3, r3, r9
 8017c6c:	4543      	cmp	r3, r8
 8017c6e:	f77f af79 	ble.w	8017b64 <_printf_float+0x23c>
 8017c72:	2301      	movs	r3, #1
 8017c74:	465a      	mov	r2, fp
 8017c76:	4631      	mov	r1, r6
 8017c78:	4628      	mov	r0, r5
 8017c7a:	47b8      	blx	r7
 8017c7c:	3001      	adds	r0, #1
 8017c7e:	f43f aeae 	beq.w	80179de <_printf_float+0xb6>
 8017c82:	f108 0801 	add.w	r8, r8, #1
 8017c86:	e7ec      	b.n	8017c62 <_printf_float+0x33a>
 8017c88:	4642      	mov	r2, r8
 8017c8a:	4631      	mov	r1, r6
 8017c8c:	4628      	mov	r0, r5
 8017c8e:	47b8      	blx	r7
 8017c90:	3001      	adds	r0, #1
 8017c92:	d1c2      	bne.n	8017c1a <_printf_float+0x2f2>
 8017c94:	e6a3      	b.n	80179de <_printf_float+0xb6>
 8017c96:	2301      	movs	r3, #1
 8017c98:	4631      	mov	r1, r6
 8017c9a:	4628      	mov	r0, r5
 8017c9c:	9206      	str	r2, [sp, #24]
 8017c9e:	47b8      	blx	r7
 8017ca0:	3001      	adds	r0, #1
 8017ca2:	f43f ae9c 	beq.w	80179de <_printf_float+0xb6>
 8017ca6:	9a06      	ldr	r2, [sp, #24]
 8017ca8:	f10b 0b01 	add.w	fp, fp, #1
 8017cac:	e7bb      	b.n	8017c26 <_printf_float+0x2fe>
 8017cae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017cb2:	4631      	mov	r1, r6
 8017cb4:	4628      	mov	r0, r5
 8017cb6:	47b8      	blx	r7
 8017cb8:	3001      	adds	r0, #1
 8017cba:	d1c0      	bne.n	8017c3e <_printf_float+0x316>
 8017cbc:	e68f      	b.n	80179de <_printf_float+0xb6>
 8017cbe:	9a06      	ldr	r2, [sp, #24]
 8017cc0:	464b      	mov	r3, r9
 8017cc2:	4442      	add	r2, r8
 8017cc4:	4631      	mov	r1, r6
 8017cc6:	4628      	mov	r0, r5
 8017cc8:	47b8      	blx	r7
 8017cca:	3001      	adds	r0, #1
 8017ccc:	d1c3      	bne.n	8017c56 <_printf_float+0x32e>
 8017cce:	e686      	b.n	80179de <_printf_float+0xb6>
 8017cd0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8017cd4:	f1ba 0f01 	cmp.w	sl, #1
 8017cd8:	dc01      	bgt.n	8017cde <_printf_float+0x3b6>
 8017cda:	07db      	lsls	r3, r3, #31
 8017cdc:	d536      	bpl.n	8017d4c <_printf_float+0x424>
 8017cde:	2301      	movs	r3, #1
 8017ce0:	4642      	mov	r2, r8
 8017ce2:	4631      	mov	r1, r6
 8017ce4:	4628      	mov	r0, r5
 8017ce6:	47b8      	blx	r7
 8017ce8:	3001      	adds	r0, #1
 8017cea:	f43f ae78 	beq.w	80179de <_printf_float+0xb6>
 8017cee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017cf2:	4631      	mov	r1, r6
 8017cf4:	4628      	mov	r0, r5
 8017cf6:	47b8      	blx	r7
 8017cf8:	3001      	adds	r0, #1
 8017cfa:	f43f ae70 	beq.w	80179de <_printf_float+0xb6>
 8017cfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8017d02:	2200      	movs	r2, #0
 8017d04:	2300      	movs	r3, #0
 8017d06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d0a:	f7f0 ff0d 	bl	8008b28 <__aeabi_dcmpeq>
 8017d0e:	b9c0      	cbnz	r0, 8017d42 <_printf_float+0x41a>
 8017d10:	4653      	mov	r3, sl
 8017d12:	f108 0201 	add.w	r2, r8, #1
 8017d16:	4631      	mov	r1, r6
 8017d18:	4628      	mov	r0, r5
 8017d1a:	47b8      	blx	r7
 8017d1c:	3001      	adds	r0, #1
 8017d1e:	d10c      	bne.n	8017d3a <_printf_float+0x412>
 8017d20:	e65d      	b.n	80179de <_printf_float+0xb6>
 8017d22:	2301      	movs	r3, #1
 8017d24:	465a      	mov	r2, fp
 8017d26:	4631      	mov	r1, r6
 8017d28:	4628      	mov	r0, r5
 8017d2a:	47b8      	blx	r7
 8017d2c:	3001      	adds	r0, #1
 8017d2e:	f43f ae56 	beq.w	80179de <_printf_float+0xb6>
 8017d32:	f108 0801 	add.w	r8, r8, #1
 8017d36:	45d0      	cmp	r8, sl
 8017d38:	dbf3      	blt.n	8017d22 <_printf_float+0x3fa>
 8017d3a:	464b      	mov	r3, r9
 8017d3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8017d40:	e6df      	b.n	8017b02 <_printf_float+0x1da>
 8017d42:	f04f 0800 	mov.w	r8, #0
 8017d46:	f104 0b1a 	add.w	fp, r4, #26
 8017d4a:	e7f4      	b.n	8017d36 <_printf_float+0x40e>
 8017d4c:	2301      	movs	r3, #1
 8017d4e:	4642      	mov	r2, r8
 8017d50:	e7e1      	b.n	8017d16 <_printf_float+0x3ee>
 8017d52:	2301      	movs	r3, #1
 8017d54:	464a      	mov	r2, r9
 8017d56:	4631      	mov	r1, r6
 8017d58:	4628      	mov	r0, r5
 8017d5a:	47b8      	blx	r7
 8017d5c:	3001      	adds	r0, #1
 8017d5e:	f43f ae3e 	beq.w	80179de <_printf_float+0xb6>
 8017d62:	f108 0801 	add.w	r8, r8, #1
 8017d66:	68e3      	ldr	r3, [r4, #12]
 8017d68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017d6a:	1a5b      	subs	r3, r3, r1
 8017d6c:	4543      	cmp	r3, r8
 8017d6e:	dcf0      	bgt.n	8017d52 <_printf_float+0x42a>
 8017d70:	e6fc      	b.n	8017b6c <_printf_float+0x244>
 8017d72:	f04f 0800 	mov.w	r8, #0
 8017d76:	f104 0919 	add.w	r9, r4, #25
 8017d7a:	e7f4      	b.n	8017d66 <_printf_float+0x43e>

08017d7c <_printf_common>:
 8017d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d80:	4616      	mov	r6, r2
 8017d82:	4698      	mov	r8, r3
 8017d84:	688a      	ldr	r2, [r1, #8]
 8017d86:	690b      	ldr	r3, [r1, #16]
 8017d88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017d8c:	4293      	cmp	r3, r2
 8017d8e:	bfb8      	it	lt
 8017d90:	4613      	movlt	r3, r2
 8017d92:	6033      	str	r3, [r6, #0]
 8017d94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017d98:	4607      	mov	r7, r0
 8017d9a:	460c      	mov	r4, r1
 8017d9c:	b10a      	cbz	r2, 8017da2 <_printf_common+0x26>
 8017d9e:	3301      	adds	r3, #1
 8017da0:	6033      	str	r3, [r6, #0]
 8017da2:	6823      	ldr	r3, [r4, #0]
 8017da4:	0699      	lsls	r1, r3, #26
 8017da6:	bf42      	ittt	mi
 8017da8:	6833      	ldrmi	r3, [r6, #0]
 8017daa:	3302      	addmi	r3, #2
 8017dac:	6033      	strmi	r3, [r6, #0]
 8017dae:	6825      	ldr	r5, [r4, #0]
 8017db0:	f015 0506 	ands.w	r5, r5, #6
 8017db4:	d106      	bne.n	8017dc4 <_printf_common+0x48>
 8017db6:	f104 0a19 	add.w	sl, r4, #25
 8017dba:	68e3      	ldr	r3, [r4, #12]
 8017dbc:	6832      	ldr	r2, [r6, #0]
 8017dbe:	1a9b      	subs	r3, r3, r2
 8017dc0:	42ab      	cmp	r3, r5
 8017dc2:	dc26      	bgt.n	8017e12 <_printf_common+0x96>
 8017dc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017dc8:	6822      	ldr	r2, [r4, #0]
 8017dca:	3b00      	subs	r3, #0
 8017dcc:	bf18      	it	ne
 8017dce:	2301      	movne	r3, #1
 8017dd0:	0692      	lsls	r2, r2, #26
 8017dd2:	d42b      	bmi.n	8017e2c <_printf_common+0xb0>
 8017dd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017dd8:	4641      	mov	r1, r8
 8017dda:	4638      	mov	r0, r7
 8017ddc:	47c8      	blx	r9
 8017dde:	3001      	adds	r0, #1
 8017de0:	d01e      	beq.n	8017e20 <_printf_common+0xa4>
 8017de2:	6823      	ldr	r3, [r4, #0]
 8017de4:	6922      	ldr	r2, [r4, #16]
 8017de6:	f003 0306 	and.w	r3, r3, #6
 8017dea:	2b04      	cmp	r3, #4
 8017dec:	bf02      	ittt	eq
 8017dee:	68e5      	ldreq	r5, [r4, #12]
 8017df0:	6833      	ldreq	r3, [r6, #0]
 8017df2:	1aed      	subeq	r5, r5, r3
 8017df4:	68a3      	ldr	r3, [r4, #8]
 8017df6:	bf0c      	ite	eq
 8017df8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017dfc:	2500      	movne	r5, #0
 8017dfe:	4293      	cmp	r3, r2
 8017e00:	bfc4      	itt	gt
 8017e02:	1a9b      	subgt	r3, r3, r2
 8017e04:	18ed      	addgt	r5, r5, r3
 8017e06:	2600      	movs	r6, #0
 8017e08:	341a      	adds	r4, #26
 8017e0a:	42b5      	cmp	r5, r6
 8017e0c:	d11a      	bne.n	8017e44 <_printf_common+0xc8>
 8017e0e:	2000      	movs	r0, #0
 8017e10:	e008      	b.n	8017e24 <_printf_common+0xa8>
 8017e12:	2301      	movs	r3, #1
 8017e14:	4652      	mov	r2, sl
 8017e16:	4641      	mov	r1, r8
 8017e18:	4638      	mov	r0, r7
 8017e1a:	47c8      	blx	r9
 8017e1c:	3001      	adds	r0, #1
 8017e1e:	d103      	bne.n	8017e28 <_printf_common+0xac>
 8017e20:	f04f 30ff 	mov.w	r0, #4294967295
 8017e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e28:	3501      	adds	r5, #1
 8017e2a:	e7c6      	b.n	8017dba <_printf_common+0x3e>
 8017e2c:	18e1      	adds	r1, r4, r3
 8017e2e:	1c5a      	adds	r2, r3, #1
 8017e30:	2030      	movs	r0, #48	@ 0x30
 8017e32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017e36:	4422      	add	r2, r4
 8017e38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017e3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017e40:	3302      	adds	r3, #2
 8017e42:	e7c7      	b.n	8017dd4 <_printf_common+0x58>
 8017e44:	2301      	movs	r3, #1
 8017e46:	4622      	mov	r2, r4
 8017e48:	4641      	mov	r1, r8
 8017e4a:	4638      	mov	r0, r7
 8017e4c:	47c8      	blx	r9
 8017e4e:	3001      	adds	r0, #1
 8017e50:	d0e6      	beq.n	8017e20 <_printf_common+0xa4>
 8017e52:	3601      	adds	r6, #1
 8017e54:	e7d9      	b.n	8017e0a <_printf_common+0x8e>
	...

08017e58 <_printf_i>:
 8017e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017e5c:	7e0f      	ldrb	r7, [r1, #24]
 8017e5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017e60:	2f78      	cmp	r7, #120	@ 0x78
 8017e62:	4691      	mov	r9, r2
 8017e64:	4680      	mov	r8, r0
 8017e66:	460c      	mov	r4, r1
 8017e68:	469a      	mov	sl, r3
 8017e6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017e6e:	d807      	bhi.n	8017e80 <_printf_i+0x28>
 8017e70:	2f62      	cmp	r7, #98	@ 0x62
 8017e72:	d80a      	bhi.n	8017e8a <_printf_i+0x32>
 8017e74:	2f00      	cmp	r7, #0
 8017e76:	f000 80d1 	beq.w	801801c <_printf_i+0x1c4>
 8017e7a:	2f58      	cmp	r7, #88	@ 0x58
 8017e7c:	f000 80b8 	beq.w	8017ff0 <_printf_i+0x198>
 8017e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017e84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017e88:	e03a      	b.n	8017f00 <_printf_i+0xa8>
 8017e8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017e8e:	2b15      	cmp	r3, #21
 8017e90:	d8f6      	bhi.n	8017e80 <_printf_i+0x28>
 8017e92:	a101      	add	r1, pc, #4	@ (adr r1, 8017e98 <_printf_i+0x40>)
 8017e94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017e98:	08017ef1 	.word	0x08017ef1
 8017e9c:	08017f05 	.word	0x08017f05
 8017ea0:	08017e81 	.word	0x08017e81
 8017ea4:	08017e81 	.word	0x08017e81
 8017ea8:	08017e81 	.word	0x08017e81
 8017eac:	08017e81 	.word	0x08017e81
 8017eb0:	08017f05 	.word	0x08017f05
 8017eb4:	08017e81 	.word	0x08017e81
 8017eb8:	08017e81 	.word	0x08017e81
 8017ebc:	08017e81 	.word	0x08017e81
 8017ec0:	08017e81 	.word	0x08017e81
 8017ec4:	08018003 	.word	0x08018003
 8017ec8:	08017f2f 	.word	0x08017f2f
 8017ecc:	08017fbd 	.word	0x08017fbd
 8017ed0:	08017e81 	.word	0x08017e81
 8017ed4:	08017e81 	.word	0x08017e81
 8017ed8:	08018025 	.word	0x08018025
 8017edc:	08017e81 	.word	0x08017e81
 8017ee0:	08017f2f 	.word	0x08017f2f
 8017ee4:	08017e81 	.word	0x08017e81
 8017ee8:	08017e81 	.word	0x08017e81
 8017eec:	08017fc5 	.word	0x08017fc5
 8017ef0:	6833      	ldr	r3, [r6, #0]
 8017ef2:	1d1a      	adds	r2, r3, #4
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	6032      	str	r2, [r6, #0]
 8017ef8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017efc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017f00:	2301      	movs	r3, #1
 8017f02:	e09c      	b.n	801803e <_printf_i+0x1e6>
 8017f04:	6833      	ldr	r3, [r6, #0]
 8017f06:	6820      	ldr	r0, [r4, #0]
 8017f08:	1d19      	adds	r1, r3, #4
 8017f0a:	6031      	str	r1, [r6, #0]
 8017f0c:	0606      	lsls	r6, r0, #24
 8017f0e:	d501      	bpl.n	8017f14 <_printf_i+0xbc>
 8017f10:	681d      	ldr	r5, [r3, #0]
 8017f12:	e003      	b.n	8017f1c <_printf_i+0xc4>
 8017f14:	0645      	lsls	r5, r0, #25
 8017f16:	d5fb      	bpl.n	8017f10 <_printf_i+0xb8>
 8017f18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017f1c:	2d00      	cmp	r5, #0
 8017f1e:	da03      	bge.n	8017f28 <_printf_i+0xd0>
 8017f20:	232d      	movs	r3, #45	@ 0x2d
 8017f22:	426d      	negs	r5, r5
 8017f24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017f28:	4858      	ldr	r0, [pc, #352]	@ (801808c <_printf_i+0x234>)
 8017f2a:	230a      	movs	r3, #10
 8017f2c:	e011      	b.n	8017f52 <_printf_i+0xfa>
 8017f2e:	6821      	ldr	r1, [r4, #0]
 8017f30:	6833      	ldr	r3, [r6, #0]
 8017f32:	0608      	lsls	r0, r1, #24
 8017f34:	f853 5b04 	ldr.w	r5, [r3], #4
 8017f38:	d402      	bmi.n	8017f40 <_printf_i+0xe8>
 8017f3a:	0649      	lsls	r1, r1, #25
 8017f3c:	bf48      	it	mi
 8017f3e:	b2ad      	uxthmi	r5, r5
 8017f40:	2f6f      	cmp	r7, #111	@ 0x6f
 8017f42:	4852      	ldr	r0, [pc, #328]	@ (801808c <_printf_i+0x234>)
 8017f44:	6033      	str	r3, [r6, #0]
 8017f46:	bf14      	ite	ne
 8017f48:	230a      	movne	r3, #10
 8017f4a:	2308      	moveq	r3, #8
 8017f4c:	2100      	movs	r1, #0
 8017f4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017f52:	6866      	ldr	r6, [r4, #4]
 8017f54:	60a6      	str	r6, [r4, #8]
 8017f56:	2e00      	cmp	r6, #0
 8017f58:	db05      	blt.n	8017f66 <_printf_i+0x10e>
 8017f5a:	6821      	ldr	r1, [r4, #0]
 8017f5c:	432e      	orrs	r6, r5
 8017f5e:	f021 0104 	bic.w	r1, r1, #4
 8017f62:	6021      	str	r1, [r4, #0]
 8017f64:	d04b      	beq.n	8017ffe <_printf_i+0x1a6>
 8017f66:	4616      	mov	r6, r2
 8017f68:	fbb5 f1f3 	udiv	r1, r5, r3
 8017f6c:	fb03 5711 	mls	r7, r3, r1, r5
 8017f70:	5dc7      	ldrb	r7, [r0, r7]
 8017f72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017f76:	462f      	mov	r7, r5
 8017f78:	42bb      	cmp	r3, r7
 8017f7a:	460d      	mov	r5, r1
 8017f7c:	d9f4      	bls.n	8017f68 <_printf_i+0x110>
 8017f7e:	2b08      	cmp	r3, #8
 8017f80:	d10b      	bne.n	8017f9a <_printf_i+0x142>
 8017f82:	6823      	ldr	r3, [r4, #0]
 8017f84:	07df      	lsls	r7, r3, #31
 8017f86:	d508      	bpl.n	8017f9a <_printf_i+0x142>
 8017f88:	6923      	ldr	r3, [r4, #16]
 8017f8a:	6861      	ldr	r1, [r4, #4]
 8017f8c:	4299      	cmp	r1, r3
 8017f8e:	bfde      	ittt	le
 8017f90:	2330      	movle	r3, #48	@ 0x30
 8017f92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017f96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017f9a:	1b92      	subs	r2, r2, r6
 8017f9c:	6122      	str	r2, [r4, #16]
 8017f9e:	f8cd a000 	str.w	sl, [sp]
 8017fa2:	464b      	mov	r3, r9
 8017fa4:	aa03      	add	r2, sp, #12
 8017fa6:	4621      	mov	r1, r4
 8017fa8:	4640      	mov	r0, r8
 8017faa:	f7ff fee7 	bl	8017d7c <_printf_common>
 8017fae:	3001      	adds	r0, #1
 8017fb0:	d14a      	bne.n	8018048 <_printf_i+0x1f0>
 8017fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8017fb6:	b004      	add	sp, #16
 8017fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fbc:	6823      	ldr	r3, [r4, #0]
 8017fbe:	f043 0320 	orr.w	r3, r3, #32
 8017fc2:	6023      	str	r3, [r4, #0]
 8017fc4:	4832      	ldr	r0, [pc, #200]	@ (8018090 <_printf_i+0x238>)
 8017fc6:	2778      	movs	r7, #120	@ 0x78
 8017fc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017fcc:	6823      	ldr	r3, [r4, #0]
 8017fce:	6831      	ldr	r1, [r6, #0]
 8017fd0:	061f      	lsls	r7, r3, #24
 8017fd2:	f851 5b04 	ldr.w	r5, [r1], #4
 8017fd6:	d402      	bmi.n	8017fde <_printf_i+0x186>
 8017fd8:	065f      	lsls	r7, r3, #25
 8017fda:	bf48      	it	mi
 8017fdc:	b2ad      	uxthmi	r5, r5
 8017fde:	6031      	str	r1, [r6, #0]
 8017fe0:	07d9      	lsls	r1, r3, #31
 8017fe2:	bf44      	itt	mi
 8017fe4:	f043 0320 	orrmi.w	r3, r3, #32
 8017fe8:	6023      	strmi	r3, [r4, #0]
 8017fea:	b11d      	cbz	r5, 8017ff4 <_printf_i+0x19c>
 8017fec:	2310      	movs	r3, #16
 8017fee:	e7ad      	b.n	8017f4c <_printf_i+0xf4>
 8017ff0:	4826      	ldr	r0, [pc, #152]	@ (801808c <_printf_i+0x234>)
 8017ff2:	e7e9      	b.n	8017fc8 <_printf_i+0x170>
 8017ff4:	6823      	ldr	r3, [r4, #0]
 8017ff6:	f023 0320 	bic.w	r3, r3, #32
 8017ffa:	6023      	str	r3, [r4, #0]
 8017ffc:	e7f6      	b.n	8017fec <_printf_i+0x194>
 8017ffe:	4616      	mov	r6, r2
 8018000:	e7bd      	b.n	8017f7e <_printf_i+0x126>
 8018002:	6833      	ldr	r3, [r6, #0]
 8018004:	6825      	ldr	r5, [r4, #0]
 8018006:	6961      	ldr	r1, [r4, #20]
 8018008:	1d18      	adds	r0, r3, #4
 801800a:	6030      	str	r0, [r6, #0]
 801800c:	062e      	lsls	r6, r5, #24
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	d501      	bpl.n	8018016 <_printf_i+0x1be>
 8018012:	6019      	str	r1, [r3, #0]
 8018014:	e002      	b.n	801801c <_printf_i+0x1c4>
 8018016:	0668      	lsls	r0, r5, #25
 8018018:	d5fb      	bpl.n	8018012 <_printf_i+0x1ba>
 801801a:	8019      	strh	r1, [r3, #0]
 801801c:	2300      	movs	r3, #0
 801801e:	6123      	str	r3, [r4, #16]
 8018020:	4616      	mov	r6, r2
 8018022:	e7bc      	b.n	8017f9e <_printf_i+0x146>
 8018024:	6833      	ldr	r3, [r6, #0]
 8018026:	1d1a      	adds	r2, r3, #4
 8018028:	6032      	str	r2, [r6, #0]
 801802a:	681e      	ldr	r6, [r3, #0]
 801802c:	6862      	ldr	r2, [r4, #4]
 801802e:	2100      	movs	r1, #0
 8018030:	4630      	mov	r0, r6
 8018032:	f7f0 f8fd 	bl	8008230 <memchr>
 8018036:	b108      	cbz	r0, 801803c <_printf_i+0x1e4>
 8018038:	1b80      	subs	r0, r0, r6
 801803a:	6060      	str	r0, [r4, #4]
 801803c:	6863      	ldr	r3, [r4, #4]
 801803e:	6123      	str	r3, [r4, #16]
 8018040:	2300      	movs	r3, #0
 8018042:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018046:	e7aa      	b.n	8017f9e <_printf_i+0x146>
 8018048:	6923      	ldr	r3, [r4, #16]
 801804a:	4632      	mov	r2, r6
 801804c:	4649      	mov	r1, r9
 801804e:	4640      	mov	r0, r8
 8018050:	47d0      	blx	sl
 8018052:	3001      	adds	r0, #1
 8018054:	d0ad      	beq.n	8017fb2 <_printf_i+0x15a>
 8018056:	6823      	ldr	r3, [r4, #0]
 8018058:	079b      	lsls	r3, r3, #30
 801805a:	d413      	bmi.n	8018084 <_printf_i+0x22c>
 801805c:	68e0      	ldr	r0, [r4, #12]
 801805e:	9b03      	ldr	r3, [sp, #12]
 8018060:	4298      	cmp	r0, r3
 8018062:	bfb8      	it	lt
 8018064:	4618      	movlt	r0, r3
 8018066:	e7a6      	b.n	8017fb6 <_printf_i+0x15e>
 8018068:	2301      	movs	r3, #1
 801806a:	4632      	mov	r2, r6
 801806c:	4649      	mov	r1, r9
 801806e:	4640      	mov	r0, r8
 8018070:	47d0      	blx	sl
 8018072:	3001      	adds	r0, #1
 8018074:	d09d      	beq.n	8017fb2 <_printf_i+0x15a>
 8018076:	3501      	adds	r5, #1
 8018078:	68e3      	ldr	r3, [r4, #12]
 801807a:	9903      	ldr	r1, [sp, #12]
 801807c:	1a5b      	subs	r3, r3, r1
 801807e:	42ab      	cmp	r3, r5
 8018080:	dcf2      	bgt.n	8018068 <_printf_i+0x210>
 8018082:	e7eb      	b.n	801805c <_printf_i+0x204>
 8018084:	2500      	movs	r5, #0
 8018086:	f104 0619 	add.w	r6, r4, #25
 801808a:	e7f5      	b.n	8018078 <_printf_i+0x220>
 801808c:	0801db2a 	.word	0x0801db2a
 8018090:	0801db3b 	.word	0x0801db3b

08018094 <std>:
 8018094:	2300      	movs	r3, #0
 8018096:	b510      	push	{r4, lr}
 8018098:	4604      	mov	r4, r0
 801809a:	e9c0 3300 	strd	r3, r3, [r0]
 801809e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80180a2:	6083      	str	r3, [r0, #8]
 80180a4:	8181      	strh	r1, [r0, #12]
 80180a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80180a8:	81c2      	strh	r2, [r0, #14]
 80180aa:	6183      	str	r3, [r0, #24]
 80180ac:	4619      	mov	r1, r3
 80180ae:	2208      	movs	r2, #8
 80180b0:	305c      	adds	r0, #92	@ 0x5c
 80180b2:	f000 fa4b 	bl	801854c <memset>
 80180b6:	4b0d      	ldr	r3, [pc, #52]	@ (80180ec <std+0x58>)
 80180b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80180ba:	4b0d      	ldr	r3, [pc, #52]	@ (80180f0 <std+0x5c>)
 80180bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80180be:	4b0d      	ldr	r3, [pc, #52]	@ (80180f4 <std+0x60>)
 80180c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80180c2:	4b0d      	ldr	r3, [pc, #52]	@ (80180f8 <std+0x64>)
 80180c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80180c6:	4b0d      	ldr	r3, [pc, #52]	@ (80180fc <std+0x68>)
 80180c8:	6224      	str	r4, [r4, #32]
 80180ca:	429c      	cmp	r4, r3
 80180cc:	d006      	beq.n	80180dc <std+0x48>
 80180ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80180d2:	4294      	cmp	r4, r2
 80180d4:	d002      	beq.n	80180dc <std+0x48>
 80180d6:	33d0      	adds	r3, #208	@ 0xd0
 80180d8:	429c      	cmp	r4, r3
 80180da:	d105      	bne.n	80180e8 <std+0x54>
 80180dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80180e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180e4:	f000 bafa 	b.w	80186dc <__retarget_lock_init_recursive>
 80180e8:	bd10      	pop	{r4, pc}
 80180ea:	bf00      	nop
 80180ec:	08018321 	.word	0x08018321
 80180f0:	08018347 	.word	0x08018347
 80180f4:	0801837f 	.word	0x0801837f
 80180f8:	080183a3 	.word	0x080183a3
 80180fc:	20014284 	.word	0x20014284

08018100 <stdio_exit_handler>:
 8018100:	4a02      	ldr	r2, [pc, #8]	@ (801810c <stdio_exit_handler+0xc>)
 8018102:	4903      	ldr	r1, [pc, #12]	@ (8018110 <stdio_exit_handler+0x10>)
 8018104:	4803      	ldr	r0, [pc, #12]	@ (8018114 <stdio_exit_handler+0x14>)
 8018106:	f000 b869 	b.w	80181dc <_fwalk_sglue>
 801810a:	bf00      	nop
 801810c:	20000084 	.word	0x20000084
 8018110:	0801ae6d 	.word	0x0801ae6d
 8018114:	20000200 	.word	0x20000200

08018118 <cleanup_stdio>:
 8018118:	6841      	ldr	r1, [r0, #4]
 801811a:	4b0c      	ldr	r3, [pc, #48]	@ (801814c <cleanup_stdio+0x34>)
 801811c:	4299      	cmp	r1, r3
 801811e:	b510      	push	{r4, lr}
 8018120:	4604      	mov	r4, r0
 8018122:	d001      	beq.n	8018128 <cleanup_stdio+0x10>
 8018124:	f002 fea2 	bl	801ae6c <_fflush_r>
 8018128:	68a1      	ldr	r1, [r4, #8]
 801812a:	4b09      	ldr	r3, [pc, #36]	@ (8018150 <cleanup_stdio+0x38>)
 801812c:	4299      	cmp	r1, r3
 801812e:	d002      	beq.n	8018136 <cleanup_stdio+0x1e>
 8018130:	4620      	mov	r0, r4
 8018132:	f002 fe9b 	bl	801ae6c <_fflush_r>
 8018136:	68e1      	ldr	r1, [r4, #12]
 8018138:	4b06      	ldr	r3, [pc, #24]	@ (8018154 <cleanup_stdio+0x3c>)
 801813a:	4299      	cmp	r1, r3
 801813c:	d004      	beq.n	8018148 <cleanup_stdio+0x30>
 801813e:	4620      	mov	r0, r4
 8018140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018144:	f002 be92 	b.w	801ae6c <_fflush_r>
 8018148:	bd10      	pop	{r4, pc}
 801814a:	bf00      	nop
 801814c:	20014284 	.word	0x20014284
 8018150:	200142ec 	.word	0x200142ec
 8018154:	20014354 	.word	0x20014354

08018158 <global_stdio_init.part.0>:
 8018158:	b510      	push	{r4, lr}
 801815a:	4b0b      	ldr	r3, [pc, #44]	@ (8018188 <global_stdio_init.part.0+0x30>)
 801815c:	4c0b      	ldr	r4, [pc, #44]	@ (801818c <global_stdio_init.part.0+0x34>)
 801815e:	4a0c      	ldr	r2, [pc, #48]	@ (8018190 <global_stdio_init.part.0+0x38>)
 8018160:	601a      	str	r2, [r3, #0]
 8018162:	4620      	mov	r0, r4
 8018164:	2200      	movs	r2, #0
 8018166:	2104      	movs	r1, #4
 8018168:	f7ff ff94 	bl	8018094 <std>
 801816c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018170:	2201      	movs	r2, #1
 8018172:	2109      	movs	r1, #9
 8018174:	f7ff ff8e 	bl	8018094 <std>
 8018178:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801817c:	2202      	movs	r2, #2
 801817e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018182:	2112      	movs	r1, #18
 8018184:	f7ff bf86 	b.w	8018094 <std>
 8018188:	200143bc 	.word	0x200143bc
 801818c:	20014284 	.word	0x20014284
 8018190:	08018101 	.word	0x08018101

08018194 <__sfp_lock_acquire>:
 8018194:	4801      	ldr	r0, [pc, #4]	@ (801819c <__sfp_lock_acquire+0x8>)
 8018196:	f000 baa2 	b.w	80186de <__retarget_lock_acquire_recursive>
 801819a:	bf00      	nop
 801819c:	200143c5 	.word	0x200143c5

080181a0 <__sfp_lock_release>:
 80181a0:	4801      	ldr	r0, [pc, #4]	@ (80181a8 <__sfp_lock_release+0x8>)
 80181a2:	f000 ba9d 	b.w	80186e0 <__retarget_lock_release_recursive>
 80181a6:	bf00      	nop
 80181a8:	200143c5 	.word	0x200143c5

080181ac <__sinit>:
 80181ac:	b510      	push	{r4, lr}
 80181ae:	4604      	mov	r4, r0
 80181b0:	f7ff fff0 	bl	8018194 <__sfp_lock_acquire>
 80181b4:	6a23      	ldr	r3, [r4, #32]
 80181b6:	b11b      	cbz	r3, 80181c0 <__sinit+0x14>
 80181b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181bc:	f7ff bff0 	b.w	80181a0 <__sfp_lock_release>
 80181c0:	4b04      	ldr	r3, [pc, #16]	@ (80181d4 <__sinit+0x28>)
 80181c2:	6223      	str	r3, [r4, #32]
 80181c4:	4b04      	ldr	r3, [pc, #16]	@ (80181d8 <__sinit+0x2c>)
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d1f5      	bne.n	80181b8 <__sinit+0xc>
 80181cc:	f7ff ffc4 	bl	8018158 <global_stdio_init.part.0>
 80181d0:	e7f2      	b.n	80181b8 <__sinit+0xc>
 80181d2:	bf00      	nop
 80181d4:	08018119 	.word	0x08018119
 80181d8:	200143bc 	.word	0x200143bc

080181dc <_fwalk_sglue>:
 80181dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181e0:	4607      	mov	r7, r0
 80181e2:	4688      	mov	r8, r1
 80181e4:	4614      	mov	r4, r2
 80181e6:	2600      	movs	r6, #0
 80181e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80181ec:	f1b9 0901 	subs.w	r9, r9, #1
 80181f0:	d505      	bpl.n	80181fe <_fwalk_sglue+0x22>
 80181f2:	6824      	ldr	r4, [r4, #0]
 80181f4:	2c00      	cmp	r4, #0
 80181f6:	d1f7      	bne.n	80181e8 <_fwalk_sglue+0xc>
 80181f8:	4630      	mov	r0, r6
 80181fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181fe:	89ab      	ldrh	r3, [r5, #12]
 8018200:	2b01      	cmp	r3, #1
 8018202:	d907      	bls.n	8018214 <_fwalk_sglue+0x38>
 8018204:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018208:	3301      	adds	r3, #1
 801820a:	d003      	beq.n	8018214 <_fwalk_sglue+0x38>
 801820c:	4629      	mov	r1, r5
 801820e:	4638      	mov	r0, r7
 8018210:	47c0      	blx	r8
 8018212:	4306      	orrs	r6, r0
 8018214:	3568      	adds	r5, #104	@ 0x68
 8018216:	e7e9      	b.n	80181ec <_fwalk_sglue+0x10>

08018218 <sniprintf>:
 8018218:	b40c      	push	{r2, r3}
 801821a:	b530      	push	{r4, r5, lr}
 801821c:	4b18      	ldr	r3, [pc, #96]	@ (8018280 <sniprintf+0x68>)
 801821e:	1e0c      	subs	r4, r1, #0
 8018220:	681d      	ldr	r5, [r3, #0]
 8018222:	b09d      	sub	sp, #116	@ 0x74
 8018224:	da08      	bge.n	8018238 <sniprintf+0x20>
 8018226:	238b      	movs	r3, #139	@ 0x8b
 8018228:	602b      	str	r3, [r5, #0]
 801822a:	f04f 30ff 	mov.w	r0, #4294967295
 801822e:	b01d      	add	sp, #116	@ 0x74
 8018230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018234:	b002      	add	sp, #8
 8018236:	4770      	bx	lr
 8018238:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801823c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018240:	f04f 0300 	mov.w	r3, #0
 8018244:	931b      	str	r3, [sp, #108]	@ 0x6c
 8018246:	bf14      	ite	ne
 8018248:	f104 33ff 	addne.w	r3, r4, #4294967295
 801824c:	4623      	moveq	r3, r4
 801824e:	9304      	str	r3, [sp, #16]
 8018250:	9307      	str	r3, [sp, #28]
 8018252:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018256:	9002      	str	r0, [sp, #8]
 8018258:	9006      	str	r0, [sp, #24]
 801825a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801825e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018260:	ab21      	add	r3, sp, #132	@ 0x84
 8018262:	a902      	add	r1, sp, #8
 8018264:	4628      	mov	r0, r5
 8018266:	9301      	str	r3, [sp, #4]
 8018268:	f002 f962 	bl	801a530 <_svfiprintf_r>
 801826c:	1c43      	adds	r3, r0, #1
 801826e:	bfbc      	itt	lt
 8018270:	238b      	movlt	r3, #139	@ 0x8b
 8018272:	602b      	strlt	r3, [r5, #0]
 8018274:	2c00      	cmp	r4, #0
 8018276:	d0da      	beq.n	801822e <sniprintf+0x16>
 8018278:	9b02      	ldr	r3, [sp, #8]
 801827a:	2200      	movs	r2, #0
 801827c:	701a      	strb	r2, [r3, #0]
 801827e:	e7d6      	b.n	801822e <sniprintf+0x16>
 8018280:	200001fc 	.word	0x200001fc

08018284 <siprintf>:
 8018284:	b40e      	push	{r1, r2, r3}
 8018286:	b510      	push	{r4, lr}
 8018288:	b09d      	sub	sp, #116	@ 0x74
 801828a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801828c:	9002      	str	r0, [sp, #8]
 801828e:	9006      	str	r0, [sp, #24]
 8018290:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018294:	480a      	ldr	r0, [pc, #40]	@ (80182c0 <siprintf+0x3c>)
 8018296:	9107      	str	r1, [sp, #28]
 8018298:	9104      	str	r1, [sp, #16]
 801829a:	490a      	ldr	r1, [pc, #40]	@ (80182c4 <siprintf+0x40>)
 801829c:	f853 2b04 	ldr.w	r2, [r3], #4
 80182a0:	9105      	str	r1, [sp, #20]
 80182a2:	2400      	movs	r4, #0
 80182a4:	a902      	add	r1, sp, #8
 80182a6:	6800      	ldr	r0, [r0, #0]
 80182a8:	9301      	str	r3, [sp, #4]
 80182aa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80182ac:	f002 f940 	bl	801a530 <_svfiprintf_r>
 80182b0:	9b02      	ldr	r3, [sp, #8]
 80182b2:	701c      	strb	r4, [r3, #0]
 80182b4:	b01d      	add	sp, #116	@ 0x74
 80182b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182ba:	b003      	add	sp, #12
 80182bc:	4770      	bx	lr
 80182be:	bf00      	nop
 80182c0:	200001fc 	.word	0x200001fc
 80182c4:	ffff0208 	.word	0xffff0208

080182c8 <siscanf>:
 80182c8:	b40e      	push	{r1, r2, r3}
 80182ca:	b570      	push	{r4, r5, r6, lr}
 80182cc:	b09d      	sub	sp, #116	@ 0x74
 80182ce:	ac21      	add	r4, sp, #132	@ 0x84
 80182d0:	2500      	movs	r5, #0
 80182d2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80182d6:	f854 6b04 	ldr.w	r6, [r4], #4
 80182da:	f8ad 2014 	strh.w	r2, [sp, #20]
 80182de:	951b      	str	r5, [sp, #108]	@ 0x6c
 80182e0:	9002      	str	r0, [sp, #8]
 80182e2:	9006      	str	r0, [sp, #24]
 80182e4:	f7ef fff4 	bl	80082d0 <strlen>
 80182e8:	4b0b      	ldr	r3, [pc, #44]	@ (8018318 <siscanf+0x50>)
 80182ea:	9003      	str	r0, [sp, #12]
 80182ec:	9007      	str	r0, [sp, #28]
 80182ee:	480b      	ldr	r0, [pc, #44]	@ (801831c <siscanf+0x54>)
 80182f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80182f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80182f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80182fa:	4632      	mov	r2, r6
 80182fc:	4623      	mov	r3, r4
 80182fe:	a902      	add	r1, sp, #8
 8018300:	6800      	ldr	r0, [r0, #0]
 8018302:	950f      	str	r5, [sp, #60]	@ 0x3c
 8018304:	9514      	str	r5, [sp, #80]	@ 0x50
 8018306:	9401      	str	r4, [sp, #4]
 8018308:	f002 fa68 	bl	801a7dc <__ssvfiscanf_r>
 801830c:	b01d      	add	sp, #116	@ 0x74
 801830e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018312:	b003      	add	sp, #12
 8018314:	4770      	bx	lr
 8018316:	bf00      	nop
 8018318:	08018343 	.word	0x08018343
 801831c:	200001fc 	.word	0x200001fc

08018320 <__sread>:
 8018320:	b510      	push	{r4, lr}
 8018322:	460c      	mov	r4, r1
 8018324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018328:	f000 f97a 	bl	8018620 <_read_r>
 801832c:	2800      	cmp	r0, #0
 801832e:	bfab      	itete	ge
 8018330:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018332:	89a3      	ldrhlt	r3, [r4, #12]
 8018334:	181b      	addge	r3, r3, r0
 8018336:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801833a:	bfac      	ite	ge
 801833c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801833e:	81a3      	strhlt	r3, [r4, #12]
 8018340:	bd10      	pop	{r4, pc}

08018342 <__seofread>:
 8018342:	2000      	movs	r0, #0
 8018344:	4770      	bx	lr

08018346 <__swrite>:
 8018346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801834a:	461f      	mov	r7, r3
 801834c:	898b      	ldrh	r3, [r1, #12]
 801834e:	05db      	lsls	r3, r3, #23
 8018350:	4605      	mov	r5, r0
 8018352:	460c      	mov	r4, r1
 8018354:	4616      	mov	r6, r2
 8018356:	d505      	bpl.n	8018364 <__swrite+0x1e>
 8018358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801835c:	2302      	movs	r3, #2
 801835e:	2200      	movs	r2, #0
 8018360:	f000 f94c 	bl	80185fc <_lseek_r>
 8018364:	89a3      	ldrh	r3, [r4, #12]
 8018366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801836a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801836e:	81a3      	strh	r3, [r4, #12]
 8018370:	4632      	mov	r2, r6
 8018372:	463b      	mov	r3, r7
 8018374:	4628      	mov	r0, r5
 8018376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801837a:	f000 b973 	b.w	8018664 <_write_r>

0801837e <__sseek>:
 801837e:	b510      	push	{r4, lr}
 8018380:	460c      	mov	r4, r1
 8018382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018386:	f000 f939 	bl	80185fc <_lseek_r>
 801838a:	1c43      	adds	r3, r0, #1
 801838c:	89a3      	ldrh	r3, [r4, #12]
 801838e:	bf15      	itete	ne
 8018390:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018392:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018396:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801839a:	81a3      	strheq	r3, [r4, #12]
 801839c:	bf18      	it	ne
 801839e:	81a3      	strhne	r3, [r4, #12]
 80183a0:	bd10      	pop	{r4, pc}

080183a2 <__sclose>:
 80183a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183a6:	f000 b919 	b.w	80185dc <_close_r>

080183aa <_vsniprintf_r>:
 80183aa:	b530      	push	{r4, r5, lr}
 80183ac:	4614      	mov	r4, r2
 80183ae:	2c00      	cmp	r4, #0
 80183b0:	b09b      	sub	sp, #108	@ 0x6c
 80183b2:	4605      	mov	r5, r0
 80183b4:	461a      	mov	r2, r3
 80183b6:	da05      	bge.n	80183c4 <_vsniprintf_r+0x1a>
 80183b8:	238b      	movs	r3, #139	@ 0x8b
 80183ba:	6003      	str	r3, [r0, #0]
 80183bc:	f04f 30ff 	mov.w	r0, #4294967295
 80183c0:	b01b      	add	sp, #108	@ 0x6c
 80183c2:	bd30      	pop	{r4, r5, pc}
 80183c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80183c8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80183cc:	f04f 0300 	mov.w	r3, #0
 80183d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80183d2:	bf14      	ite	ne
 80183d4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80183d8:	4623      	moveq	r3, r4
 80183da:	9302      	str	r3, [sp, #8]
 80183dc:	9305      	str	r3, [sp, #20]
 80183de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80183e2:	9100      	str	r1, [sp, #0]
 80183e4:	9104      	str	r1, [sp, #16]
 80183e6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80183ea:	4669      	mov	r1, sp
 80183ec:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80183ee:	f002 f89f 	bl	801a530 <_svfiprintf_r>
 80183f2:	1c43      	adds	r3, r0, #1
 80183f4:	bfbc      	itt	lt
 80183f6:	238b      	movlt	r3, #139	@ 0x8b
 80183f8:	602b      	strlt	r3, [r5, #0]
 80183fa:	2c00      	cmp	r4, #0
 80183fc:	d0e0      	beq.n	80183c0 <_vsniprintf_r+0x16>
 80183fe:	9b00      	ldr	r3, [sp, #0]
 8018400:	2200      	movs	r2, #0
 8018402:	701a      	strb	r2, [r3, #0]
 8018404:	e7dc      	b.n	80183c0 <_vsniprintf_r+0x16>
	...

08018408 <vsniprintf>:
 8018408:	b507      	push	{r0, r1, r2, lr}
 801840a:	9300      	str	r3, [sp, #0]
 801840c:	4613      	mov	r3, r2
 801840e:	460a      	mov	r2, r1
 8018410:	4601      	mov	r1, r0
 8018412:	4803      	ldr	r0, [pc, #12]	@ (8018420 <vsniprintf+0x18>)
 8018414:	6800      	ldr	r0, [r0, #0]
 8018416:	f7ff ffc8 	bl	80183aa <_vsniprintf_r>
 801841a:	b003      	add	sp, #12
 801841c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018420:	200001fc 	.word	0x200001fc

08018424 <__swbuf_r>:
 8018424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018426:	460e      	mov	r6, r1
 8018428:	4614      	mov	r4, r2
 801842a:	4605      	mov	r5, r0
 801842c:	b118      	cbz	r0, 8018436 <__swbuf_r+0x12>
 801842e:	6a03      	ldr	r3, [r0, #32]
 8018430:	b90b      	cbnz	r3, 8018436 <__swbuf_r+0x12>
 8018432:	f7ff febb 	bl	80181ac <__sinit>
 8018436:	69a3      	ldr	r3, [r4, #24]
 8018438:	60a3      	str	r3, [r4, #8]
 801843a:	89a3      	ldrh	r3, [r4, #12]
 801843c:	071a      	lsls	r2, r3, #28
 801843e:	d501      	bpl.n	8018444 <__swbuf_r+0x20>
 8018440:	6923      	ldr	r3, [r4, #16]
 8018442:	b943      	cbnz	r3, 8018456 <__swbuf_r+0x32>
 8018444:	4621      	mov	r1, r4
 8018446:	4628      	mov	r0, r5
 8018448:	f000 f82a 	bl	80184a0 <__swsetup_r>
 801844c:	b118      	cbz	r0, 8018456 <__swbuf_r+0x32>
 801844e:	f04f 37ff 	mov.w	r7, #4294967295
 8018452:	4638      	mov	r0, r7
 8018454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018456:	6823      	ldr	r3, [r4, #0]
 8018458:	6922      	ldr	r2, [r4, #16]
 801845a:	1a98      	subs	r0, r3, r2
 801845c:	6963      	ldr	r3, [r4, #20]
 801845e:	b2f6      	uxtb	r6, r6
 8018460:	4283      	cmp	r3, r0
 8018462:	4637      	mov	r7, r6
 8018464:	dc05      	bgt.n	8018472 <__swbuf_r+0x4e>
 8018466:	4621      	mov	r1, r4
 8018468:	4628      	mov	r0, r5
 801846a:	f002 fcff 	bl	801ae6c <_fflush_r>
 801846e:	2800      	cmp	r0, #0
 8018470:	d1ed      	bne.n	801844e <__swbuf_r+0x2a>
 8018472:	68a3      	ldr	r3, [r4, #8]
 8018474:	3b01      	subs	r3, #1
 8018476:	60a3      	str	r3, [r4, #8]
 8018478:	6823      	ldr	r3, [r4, #0]
 801847a:	1c5a      	adds	r2, r3, #1
 801847c:	6022      	str	r2, [r4, #0]
 801847e:	701e      	strb	r6, [r3, #0]
 8018480:	6962      	ldr	r2, [r4, #20]
 8018482:	1c43      	adds	r3, r0, #1
 8018484:	429a      	cmp	r2, r3
 8018486:	d004      	beq.n	8018492 <__swbuf_r+0x6e>
 8018488:	89a3      	ldrh	r3, [r4, #12]
 801848a:	07db      	lsls	r3, r3, #31
 801848c:	d5e1      	bpl.n	8018452 <__swbuf_r+0x2e>
 801848e:	2e0a      	cmp	r6, #10
 8018490:	d1df      	bne.n	8018452 <__swbuf_r+0x2e>
 8018492:	4621      	mov	r1, r4
 8018494:	4628      	mov	r0, r5
 8018496:	f002 fce9 	bl	801ae6c <_fflush_r>
 801849a:	2800      	cmp	r0, #0
 801849c:	d0d9      	beq.n	8018452 <__swbuf_r+0x2e>
 801849e:	e7d6      	b.n	801844e <__swbuf_r+0x2a>

080184a0 <__swsetup_r>:
 80184a0:	b538      	push	{r3, r4, r5, lr}
 80184a2:	4b29      	ldr	r3, [pc, #164]	@ (8018548 <__swsetup_r+0xa8>)
 80184a4:	4605      	mov	r5, r0
 80184a6:	6818      	ldr	r0, [r3, #0]
 80184a8:	460c      	mov	r4, r1
 80184aa:	b118      	cbz	r0, 80184b4 <__swsetup_r+0x14>
 80184ac:	6a03      	ldr	r3, [r0, #32]
 80184ae:	b90b      	cbnz	r3, 80184b4 <__swsetup_r+0x14>
 80184b0:	f7ff fe7c 	bl	80181ac <__sinit>
 80184b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184b8:	0719      	lsls	r1, r3, #28
 80184ba:	d422      	bmi.n	8018502 <__swsetup_r+0x62>
 80184bc:	06da      	lsls	r2, r3, #27
 80184be:	d407      	bmi.n	80184d0 <__swsetup_r+0x30>
 80184c0:	2209      	movs	r2, #9
 80184c2:	602a      	str	r2, [r5, #0]
 80184c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80184c8:	81a3      	strh	r3, [r4, #12]
 80184ca:	f04f 30ff 	mov.w	r0, #4294967295
 80184ce:	e033      	b.n	8018538 <__swsetup_r+0x98>
 80184d0:	0758      	lsls	r0, r3, #29
 80184d2:	d512      	bpl.n	80184fa <__swsetup_r+0x5a>
 80184d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80184d6:	b141      	cbz	r1, 80184ea <__swsetup_r+0x4a>
 80184d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80184dc:	4299      	cmp	r1, r3
 80184de:	d002      	beq.n	80184e6 <__swsetup_r+0x46>
 80184e0:	4628      	mov	r0, r5
 80184e2:	f000 ff75 	bl	80193d0 <_free_r>
 80184e6:	2300      	movs	r3, #0
 80184e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80184ea:	89a3      	ldrh	r3, [r4, #12]
 80184ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80184f0:	81a3      	strh	r3, [r4, #12]
 80184f2:	2300      	movs	r3, #0
 80184f4:	6063      	str	r3, [r4, #4]
 80184f6:	6923      	ldr	r3, [r4, #16]
 80184f8:	6023      	str	r3, [r4, #0]
 80184fa:	89a3      	ldrh	r3, [r4, #12]
 80184fc:	f043 0308 	orr.w	r3, r3, #8
 8018500:	81a3      	strh	r3, [r4, #12]
 8018502:	6923      	ldr	r3, [r4, #16]
 8018504:	b94b      	cbnz	r3, 801851a <__swsetup_r+0x7a>
 8018506:	89a3      	ldrh	r3, [r4, #12]
 8018508:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801850c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018510:	d003      	beq.n	801851a <__swsetup_r+0x7a>
 8018512:	4621      	mov	r1, r4
 8018514:	4628      	mov	r0, r5
 8018516:	f002 fcf7 	bl	801af08 <__smakebuf_r>
 801851a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801851e:	f013 0201 	ands.w	r2, r3, #1
 8018522:	d00a      	beq.n	801853a <__swsetup_r+0x9a>
 8018524:	2200      	movs	r2, #0
 8018526:	60a2      	str	r2, [r4, #8]
 8018528:	6962      	ldr	r2, [r4, #20]
 801852a:	4252      	negs	r2, r2
 801852c:	61a2      	str	r2, [r4, #24]
 801852e:	6922      	ldr	r2, [r4, #16]
 8018530:	b942      	cbnz	r2, 8018544 <__swsetup_r+0xa4>
 8018532:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018536:	d1c5      	bne.n	80184c4 <__swsetup_r+0x24>
 8018538:	bd38      	pop	{r3, r4, r5, pc}
 801853a:	0799      	lsls	r1, r3, #30
 801853c:	bf58      	it	pl
 801853e:	6962      	ldrpl	r2, [r4, #20]
 8018540:	60a2      	str	r2, [r4, #8]
 8018542:	e7f4      	b.n	801852e <__swsetup_r+0x8e>
 8018544:	2000      	movs	r0, #0
 8018546:	e7f7      	b.n	8018538 <__swsetup_r+0x98>
 8018548:	200001fc 	.word	0x200001fc

0801854c <memset>:
 801854c:	4402      	add	r2, r0
 801854e:	4603      	mov	r3, r0
 8018550:	4293      	cmp	r3, r2
 8018552:	d100      	bne.n	8018556 <memset+0xa>
 8018554:	4770      	bx	lr
 8018556:	f803 1b01 	strb.w	r1, [r3], #1
 801855a:	e7f9      	b.n	8018550 <memset+0x4>

0801855c <strncmp>:
 801855c:	b510      	push	{r4, lr}
 801855e:	b16a      	cbz	r2, 801857c <strncmp+0x20>
 8018560:	3901      	subs	r1, #1
 8018562:	1884      	adds	r4, r0, r2
 8018564:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018568:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801856c:	429a      	cmp	r2, r3
 801856e:	d103      	bne.n	8018578 <strncmp+0x1c>
 8018570:	42a0      	cmp	r0, r4
 8018572:	d001      	beq.n	8018578 <strncmp+0x1c>
 8018574:	2a00      	cmp	r2, #0
 8018576:	d1f5      	bne.n	8018564 <strncmp+0x8>
 8018578:	1ad0      	subs	r0, r2, r3
 801857a:	bd10      	pop	{r4, pc}
 801857c:	4610      	mov	r0, r2
 801857e:	e7fc      	b.n	801857a <strncmp+0x1e>

08018580 <strncpy>:
 8018580:	b510      	push	{r4, lr}
 8018582:	3901      	subs	r1, #1
 8018584:	4603      	mov	r3, r0
 8018586:	b132      	cbz	r2, 8018596 <strncpy+0x16>
 8018588:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801858c:	f803 4b01 	strb.w	r4, [r3], #1
 8018590:	3a01      	subs	r2, #1
 8018592:	2c00      	cmp	r4, #0
 8018594:	d1f7      	bne.n	8018586 <strncpy+0x6>
 8018596:	441a      	add	r2, r3
 8018598:	2100      	movs	r1, #0
 801859a:	4293      	cmp	r3, r2
 801859c:	d100      	bne.n	80185a0 <strncpy+0x20>
 801859e:	bd10      	pop	{r4, pc}
 80185a0:	f803 1b01 	strb.w	r1, [r3], #1
 80185a4:	e7f9      	b.n	801859a <strncpy+0x1a>

080185a6 <strstr>:
 80185a6:	780a      	ldrb	r2, [r1, #0]
 80185a8:	b570      	push	{r4, r5, r6, lr}
 80185aa:	b96a      	cbnz	r2, 80185c8 <strstr+0x22>
 80185ac:	bd70      	pop	{r4, r5, r6, pc}
 80185ae:	429a      	cmp	r2, r3
 80185b0:	d109      	bne.n	80185c6 <strstr+0x20>
 80185b2:	460c      	mov	r4, r1
 80185b4:	4605      	mov	r5, r0
 80185b6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d0f6      	beq.n	80185ac <strstr+0x6>
 80185be:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80185c2:	429e      	cmp	r6, r3
 80185c4:	d0f7      	beq.n	80185b6 <strstr+0x10>
 80185c6:	3001      	adds	r0, #1
 80185c8:	7803      	ldrb	r3, [r0, #0]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d1ef      	bne.n	80185ae <strstr+0x8>
 80185ce:	4618      	mov	r0, r3
 80185d0:	e7ec      	b.n	80185ac <strstr+0x6>
	...

080185d4 <_localeconv_r>:
 80185d4:	4800      	ldr	r0, [pc, #0]	@ (80185d8 <_localeconv_r+0x4>)
 80185d6:	4770      	bx	lr
 80185d8:	20000180 	.word	0x20000180

080185dc <_close_r>:
 80185dc:	b538      	push	{r3, r4, r5, lr}
 80185de:	4d06      	ldr	r5, [pc, #24]	@ (80185f8 <_close_r+0x1c>)
 80185e0:	2300      	movs	r3, #0
 80185e2:	4604      	mov	r4, r0
 80185e4:	4608      	mov	r0, r1
 80185e6:	602b      	str	r3, [r5, #0]
 80185e8:	f7f7 f8ce 	bl	800f788 <_close>
 80185ec:	1c43      	adds	r3, r0, #1
 80185ee:	d102      	bne.n	80185f6 <_close_r+0x1a>
 80185f0:	682b      	ldr	r3, [r5, #0]
 80185f2:	b103      	cbz	r3, 80185f6 <_close_r+0x1a>
 80185f4:	6023      	str	r3, [r4, #0]
 80185f6:	bd38      	pop	{r3, r4, r5, pc}
 80185f8:	200143c0 	.word	0x200143c0

080185fc <_lseek_r>:
 80185fc:	b538      	push	{r3, r4, r5, lr}
 80185fe:	4d07      	ldr	r5, [pc, #28]	@ (801861c <_lseek_r+0x20>)
 8018600:	4604      	mov	r4, r0
 8018602:	4608      	mov	r0, r1
 8018604:	4611      	mov	r1, r2
 8018606:	2200      	movs	r2, #0
 8018608:	602a      	str	r2, [r5, #0]
 801860a:	461a      	mov	r2, r3
 801860c:	f7f7 f8e3 	bl	800f7d6 <_lseek>
 8018610:	1c43      	adds	r3, r0, #1
 8018612:	d102      	bne.n	801861a <_lseek_r+0x1e>
 8018614:	682b      	ldr	r3, [r5, #0]
 8018616:	b103      	cbz	r3, 801861a <_lseek_r+0x1e>
 8018618:	6023      	str	r3, [r4, #0]
 801861a:	bd38      	pop	{r3, r4, r5, pc}
 801861c:	200143c0 	.word	0x200143c0

08018620 <_read_r>:
 8018620:	b538      	push	{r3, r4, r5, lr}
 8018622:	4d07      	ldr	r5, [pc, #28]	@ (8018640 <_read_r+0x20>)
 8018624:	4604      	mov	r4, r0
 8018626:	4608      	mov	r0, r1
 8018628:	4611      	mov	r1, r2
 801862a:	2200      	movs	r2, #0
 801862c:	602a      	str	r2, [r5, #0]
 801862e:	461a      	mov	r2, r3
 8018630:	f7f7 f871 	bl	800f716 <_read>
 8018634:	1c43      	adds	r3, r0, #1
 8018636:	d102      	bne.n	801863e <_read_r+0x1e>
 8018638:	682b      	ldr	r3, [r5, #0]
 801863a:	b103      	cbz	r3, 801863e <_read_r+0x1e>
 801863c:	6023      	str	r3, [r4, #0]
 801863e:	bd38      	pop	{r3, r4, r5, pc}
 8018640:	200143c0 	.word	0x200143c0

08018644 <_sbrk_r>:
 8018644:	b538      	push	{r3, r4, r5, lr}
 8018646:	4d06      	ldr	r5, [pc, #24]	@ (8018660 <_sbrk_r+0x1c>)
 8018648:	2300      	movs	r3, #0
 801864a:	4604      	mov	r4, r0
 801864c:	4608      	mov	r0, r1
 801864e:	602b      	str	r3, [r5, #0]
 8018650:	f003 f802 	bl	801b658 <_sbrk>
 8018654:	1c43      	adds	r3, r0, #1
 8018656:	d102      	bne.n	801865e <_sbrk_r+0x1a>
 8018658:	682b      	ldr	r3, [r5, #0]
 801865a:	b103      	cbz	r3, 801865e <_sbrk_r+0x1a>
 801865c:	6023      	str	r3, [r4, #0]
 801865e:	bd38      	pop	{r3, r4, r5, pc}
 8018660:	200143c0 	.word	0x200143c0

08018664 <_write_r>:
 8018664:	b538      	push	{r3, r4, r5, lr}
 8018666:	4d07      	ldr	r5, [pc, #28]	@ (8018684 <_write_r+0x20>)
 8018668:	4604      	mov	r4, r0
 801866a:	4608      	mov	r0, r1
 801866c:	4611      	mov	r1, r2
 801866e:	2200      	movs	r2, #0
 8018670:	602a      	str	r2, [r5, #0]
 8018672:	461a      	mov	r2, r3
 8018674:	f7f7 f86c 	bl	800f750 <_write>
 8018678:	1c43      	adds	r3, r0, #1
 801867a:	d102      	bne.n	8018682 <_write_r+0x1e>
 801867c:	682b      	ldr	r3, [r5, #0]
 801867e:	b103      	cbz	r3, 8018682 <_write_r+0x1e>
 8018680:	6023      	str	r3, [r4, #0]
 8018682:	bd38      	pop	{r3, r4, r5, pc}
 8018684:	200143c0 	.word	0x200143c0

08018688 <__errno>:
 8018688:	4b01      	ldr	r3, [pc, #4]	@ (8018690 <__errno+0x8>)
 801868a:	6818      	ldr	r0, [r3, #0]
 801868c:	4770      	bx	lr
 801868e:	bf00      	nop
 8018690:	200001fc 	.word	0x200001fc

08018694 <__libc_init_array>:
 8018694:	b570      	push	{r4, r5, r6, lr}
 8018696:	4d0d      	ldr	r5, [pc, #52]	@ (80186cc <__libc_init_array+0x38>)
 8018698:	4c0d      	ldr	r4, [pc, #52]	@ (80186d0 <__libc_init_array+0x3c>)
 801869a:	1b64      	subs	r4, r4, r5
 801869c:	10a4      	asrs	r4, r4, #2
 801869e:	2600      	movs	r6, #0
 80186a0:	42a6      	cmp	r6, r4
 80186a2:	d109      	bne.n	80186b8 <__libc_init_array+0x24>
 80186a4:	4d0b      	ldr	r5, [pc, #44]	@ (80186d4 <__libc_init_array+0x40>)
 80186a6:	4c0c      	ldr	r4, [pc, #48]	@ (80186d8 <__libc_init_array+0x44>)
 80186a8:	f002 ffe4 	bl	801b674 <_init>
 80186ac:	1b64      	subs	r4, r4, r5
 80186ae:	10a4      	asrs	r4, r4, #2
 80186b0:	2600      	movs	r6, #0
 80186b2:	42a6      	cmp	r6, r4
 80186b4:	d105      	bne.n	80186c2 <__libc_init_array+0x2e>
 80186b6:	bd70      	pop	{r4, r5, r6, pc}
 80186b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80186bc:	4798      	blx	r3
 80186be:	3601      	adds	r6, #1
 80186c0:	e7ee      	b.n	80186a0 <__libc_init_array+0xc>
 80186c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80186c6:	4798      	blx	r3
 80186c8:	3601      	adds	r6, #1
 80186ca:	e7f2      	b.n	80186b2 <__libc_init_array+0x1e>
 80186cc:	0801df60 	.word	0x0801df60
 80186d0:	0801df60 	.word	0x0801df60
 80186d4:	0801df60 	.word	0x0801df60
 80186d8:	0801df64 	.word	0x0801df64

080186dc <__retarget_lock_init_recursive>:
 80186dc:	4770      	bx	lr

080186de <__retarget_lock_acquire_recursive>:
 80186de:	4770      	bx	lr

080186e0 <__retarget_lock_release_recursive>:
 80186e0:	4770      	bx	lr

080186e2 <strcpy>:
 80186e2:	4603      	mov	r3, r0
 80186e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80186e8:	f803 2b01 	strb.w	r2, [r3], #1
 80186ec:	2a00      	cmp	r2, #0
 80186ee:	d1f9      	bne.n	80186e4 <strcpy+0x2>
 80186f0:	4770      	bx	lr

080186f2 <memcpy>:
 80186f2:	440a      	add	r2, r1
 80186f4:	4291      	cmp	r1, r2
 80186f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80186fa:	d100      	bne.n	80186fe <memcpy+0xc>
 80186fc:	4770      	bx	lr
 80186fe:	b510      	push	{r4, lr}
 8018700:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018704:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018708:	4291      	cmp	r1, r2
 801870a:	d1f9      	bne.n	8018700 <memcpy+0xe>
 801870c:	bd10      	pop	{r4, pc}
	...

08018710 <nan>:
 8018710:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018718 <nan+0x8>
 8018714:	4770      	bx	lr
 8018716:	bf00      	nop
 8018718:	00000000 	.word	0x00000000
 801871c:	7ff80000 	.word	0x7ff80000

08018720 <quorem>:
 8018720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018724:	6903      	ldr	r3, [r0, #16]
 8018726:	690c      	ldr	r4, [r1, #16]
 8018728:	42a3      	cmp	r3, r4
 801872a:	4607      	mov	r7, r0
 801872c:	db7e      	blt.n	801882c <quorem+0x10c>
 801872e:	3c01      	subs	r4, #1
 8018730:	f101 0814 	add.w	r8, r1, #20
 8018734:	00a3      	lsls	r3, r4, #2
 8018736:	f100 0514 	add.w	r5, r0, #20
 801873a:	9300      	str	r3, [sp, #0]
 801873c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018740:	9301      	str	r3, [sp, #4]
 8018742:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018746:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801874a:	3301      	adds	r3, #1
 801874c:	429a      	cmp	r2, r3
 801874e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018752:	fbb2 f6f3 	udiv	r6, r2, r3
 8018756:	d32e      	bcc.n	80187b6 <quorem+0x96>
 8018758:	f04f 0a00 	mov.w	sl, #0
 801875c:	46c4      	mov	ip, r8
 801875e:	46ae      	mov	lr, r5
 8018760:	46d3      	mov	fp, sl
 8018762:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018766:	b298      	uxth	r0, r3
 8018768:	fb06 a000 	mla	r0, r6, r0, sl
 801876c:	0c02      	lsrs	r2, r0, #16
 801876e:	0c1b      	lsrs	r3, r3, #16
 8018770:	fb06 2303 	mla	r3, r6, r3, r2
 8018774:	f8de 2000 	ldr.w	r2, [lr]
 8018778:	b280      	uxth	r0, r0
 801877a:	b292      	uxth	r2, r2
 801877c:	1a12      	subs	r2, r2, r0
 801877e:	445a      	add	r2, fp
 8018780:	f8de 0000 	ldr.w	r0, [lr]
 8018784:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018788:	b29b      	uxth	r3, r3
 801878a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801878e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8018792:	b292      	uxth	r2, r2
 8018794:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8018798:	45e1      	cmp	r9, ip
 801879a:	f84e 2b04 	str.w	r2, [lr], #4
 801879e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80187a2:	d2de      	bcs.n	8018762 <quorem+0x42>
 80187a4:	9b00      	ldr	r3, [sp, #0]
 80187a6:	58eb      	ldr	r3, [r5, r3]
 80187a8:	b92b      	cbnz	r3, 80187b6 <quorem+0x96>
 80187aa:	9b01      	ldr	r3, [sp, #4]
 80187ac:	3b04      	subs	r3, #4
 80187ae:	429d      	cmp	r5, r3
 80187b0:	461a      	mov	r2, r3
 80187b2:	d32f      	bcc.n	8018814 <quorem+0xf4>
 80187b4:	613c      	str	r4, [r7, #16]
 80187b6:	4638      	mov	r0, r7
 80187b8:	f001 fc5c 	bl	801a074 <__mcmp>
 80187bc:	2800      	cmp	r0, #0
 80187be:	db25      	blt.n	801880c <quorem+0xec>
 80187c0:	4629      	mov	r1, r5
 80187c2:	2000      	movs	r0, #0
 80187c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80187c8:	f8d1 c000 	ldr.w	ip, [r1]
 80187cc:	fa1f fe82 	uxth.w	lr, r2
 80187d0:	fa1f f38c 	uxth.w	r3, ip
 80187d4:	eba3 030e 	sub.w	r3, r3, lr
 80187d8:	4403      	add	r3, r0
 80187da:	0c12      	lsrs	r2, r2, #16
 80187dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80187e0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80187e4:	b29b      	uxth	r3, r3
 80187e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80187ea:	45c1      	cmp	r9, r8
 80187ec:	f841 3b04 	str.w	r3, [r1], #4
 80187f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80187f4:	d2e6      	bcs.n	80187c4 <quorem+0xa4>
 80187f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80187fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80187fe:	b922      	cbnz	r2, 801880a <quorem+0xea>
 8018800:	3b04      	subs	r3, #4
 8018802:	429d      	cmp	r5, r3
 8018804:	461a      	mov	r2, r3
 8018806:	d30b      	bcc.n	8018820 <quorem+0x100>
 8018808:	613c      	str	r4, [r7, #16]
 801880a:	3601      	adds	r6, #1
 801880c:	4630      	mov	r0, r6
 801880e:	b003      	add	sp, #12
 8018810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018814:	6812      	ldr	r2, [r2, #0]
 8018816:	3b04      	subs	r3, #4
 8018818:	2a00      	cmp	r2, #0
 801881a:	d1cb      	bne.n	80187b4 <quorem+0x94>
 801881c:	3c01      	subs	r4, #1
 801881e:	e7c6      	b.n	80187ae <quorem+0x8e>
 8018820:	6812      	ldr	r2, [r2, #0]
 8018822:	3b04      	subs	r3, #4
 8018824:	2a00      	cmp	r2, #0
 8018826:	d1ef      	bne.n	8018808 <quorem+0xe8>
 8018828:	3c01      	subs	r4, #1
 801882a:	e7ea      	b.n	8018802 <quorem+0xe2>
 801882c:	2000      	movs	r0, #0
 801882e:	e7ee      	b.n	801880e <quorem+0xee>

08018830 <_dtoa_r>:
 8018830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018834:	69c7      	ldr	r7, [r0, #28]
 8018836:	b097      	sub	sp, #92	@ 0x5c
 8018838:	ed8d 0b04 	vstr	d0, [sp, #16]
 801883c:	ec55 4b10 	vmov	r4, r5, d0
 8018840:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8018842:	9107      	str	r1, [sp, #28]
 8018844:	4681      	mov	r9, r0
 8018846:	920c      	str	r2, [sp, #48]	@ 0x30
 8018848:	9311      	str	r3, [sp, #68]	@ 0x44
 801884a:	b97f      	cbnz	r7, 801886c <_dtoa_r+0x3c>
 801884c:	2010      	movs	r0, #16
 801884e:	f7fe f8c9 	bl	80169e4 <malloc>
 8018852:	4602      	mov	r2, r0
 8018854:	f8c9 001c 	str.w	r0, [r9, #28]
 8018858:	b920      	cbnz	r0, 8018864 <_dtoa_r+0x34>
 801885a:	4ba9      	ldr	r3, [pc, #676]	@ (8018b00 <_dtoa_r+0x2d0>)
 801885c:	21ef      	movs	r1, #239	@ 0xef
 801885e:	48a9      	ldr	r0, [pc, #676]	@ (8018b04 <_dtoa_r+0x2d4>)
 8018860:	f002 fc3e 	bl	801b0e0 <__assert_func>
 8018864:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8018868:	6007      	str	r7, [r0, #0]
 801886a:	60c7      	str	r7, [r0, #12]
 801886c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8018870:	6819      	ldr	r1, [r3, #0]
 8018872:	b159      	cbz	r1, 801888c <_dtoa_r+0x5c>
 8018874:	685a      	ldr	r2, [r3, #4]
 8018876:	604a      	str	r2, [r1, #4]
 8018878:	2301      	movs	r3, #1
 801887a:	4093      	lsls	r3, r2
 801887c:	608b      	str	r3, [r1, #8]
 801887e:	4648      	mov	r0, r9
 8018880:	f001 f97c 	bl	8019b7c <_Bfree>
 8018884:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8018888:	2200      	movs	r2, #0
 801888a:	601a      	str	r2, [r3, #0]
 801888c:	1e2b      	subs	r3, r5, #0
 801888e:	bfb9      	ittee	lt
 8018890:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8018894:	9305      	strlt	r3, [sp, #20]
 8018896:	2300      	movge	r3, #0
 8018898:	6033      	strge	r3, [r6, #0]
 801889a:	9f05      	ldr	r7, [sp, #20]
 801889c:	4b9a      	ldr	r3, [pc, #616]	@ (8018b08 <_dtoa_r+0x2d8>)
 801889e:	bfbc      	itt	lt
 80188a0:	2201      	movlt	r2, #1
 80188a2:	6032      	strlt	r2, [r6, #0]
 80188a4:	43bb      	bics	r3, r7
 80188a6:	d112      	bne.n	80188ce <_dtoa_r+0x9e>
 80188a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80188aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80188ae:	6013      	str	r3, [r2, #0]
 80188b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80188b4:	4323      	orrs	r3, r4
 80188b6:	f000 855a 	beq.w	801936e <_dtoa_r+0xb3e>
 80188ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80188bc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8018b1c <_dtoa_r+0x2ec>
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	f000 855c 	beq.w	801937e <_dtoa_r+0xb4e>
 80188c6:	f10a 0303 	add.w	r3, sl, #3
 80188ca:	f000 bd56 	b.w	801937a <_dtoa_r+0xb4a>
 80188ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 80188d2:	2200      	movs	r2, #0
 80188d4:	ec51 0b17 	vmov	r0, r1, d7
 80188d8:	2300      	movs	r3, #0
 80188da:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80188de:	f7f0 f923 	bl	8008b28 <__aeabi_dcmpeq>
 80188e2:	4680      	mov	r8, r0
 80188e4:	b158      	cbz	r0, 80188fe <_dtoa_r+0xce>
 80188e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80188e8:	2301      	movs	r3, #1
 80188ea:	6013      	str	r3, [r2, #0]
 80188ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80188ee:	b113      	cbz	r3, 80188f6 <_dtoa_r+0xc6>
 80188f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80188f2:	4b86      	ldr	r3, [pc, #536]	@ (8018b0c <_dtoa_r+0x2dc>)
 80188f4:	6013      	str	r3, [r2, #0]
 80188f6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8018b20 <_dtoa_r+0x2f0>
 80188fa:	f000 bd40 	b.w	801937e <_dtoa_r+0xb4e>
 80188fe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8018902:	aa14      	add	r2, sp, #80	@ 0x50
 8018904:	a915      	add	r1, sp, #84	@ 0x54
 8018906:	4648      	mov	r0, r9
 8018908:	f001 fcd4 	bl	801a2b4 <__d2b>
 801890c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8018910:	9002      	str	r0, [sp, #8]
 8018912:	2e00      	cmp	r6, #0
 8018914:	d078      	beq.n	8018a08 <_dtoa_r+0x1d8>
 8018916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018918:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801891c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018920:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8018924:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8018928:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801892c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8018930:	4619      	mov	r1, r3
 8018932:	2200      	movs	r2, #0
 8018934:	4b76      	ldr	r3, [pc, #472]	@ (8018b10 <_dtoa_r+0x2e0>)
 8018936:	f7ef fcd7 	bl	80082e8 <__aeabi_dsub>
 801893a:	a36b      	add	r3, pc, #428	@ (adr r3, 8018ae8 <_dtoa_r+0x2b8>)
 801893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018940:	f7ef fe8a 	bl	8008658 <__aeabi_dmul>
 8018944:	a36a      	add	r3, pc, #424	@ (adr r3, 8018af0 <_dtoa_r+0x2c0>)
 8018946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801894a:	f7ef fccf 	bl	80082ec <__adddf3>
 801894e:	4604      	mov	r4, r0
 8018950:	4630      	mov	r0, r6
 8018952:	460d      	mov	r5, r1
 8018954:	f7ef fe16 	bl	8008584 <__aeabi_i2d>
 8018958:	a367      	add	r3, pc, #412	@ (adr r3, 8018af8 <_dtoa_r+0x2c8>)
 801895a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801895e:	f7ef fe7b 	bl	8008658 <__aeabi_dmul>
 8018962:	4602      	mov	r2, r0
 8018964:	460b      	mov	r3, r1
 8018966:	4620      	mov	r0, r4
 8018968:	4629      	mov	r1, r5
 801896a:	f7ef fcbf 	bl	80082ec <__adddf3>
 801896e:	4604      	mov	r4, r0
 8018970:	460d      	mov	r5, r1
 8018972:	f7f0 f921 	bl	8008bb8 <__aeabi_d2iz>
 8018976:	2200      	movs	r2, #0
 8018978:	4607      	mov	r7, r0
 801897a:	2300      	movs	r3, #0
 801897c:	4620      	mov	r0, r4
 801897e:	4629      	mov	r1, r5
 8018980:	f7f0 f8dc 	bl	8008b3c <__aeabi_dcmplt>
 8018984:	b140      	cbz	r0, 8018998 <_dtoa_r+0x168>
 8018986:	4638      	mov	r0, r7
 8018988:	f7ef fdfc 	bl	8008584 <__aeabi_i2d>
 801898c:	4622      	mov	r2, r4
 801898e:	462b      	mov	r3, r5
 8018990:	f7f0 f8ca 	bl	8008b28 <__aeabi_dcmpeq>
 8018994:	b900      	cbnz	r0, 8018998 <_dtoa_r+0x168>
 8018996:	3f01      	subs	r7, #1
 8018998:	2f16      	cmp	r7, #22
 801899a:	d852      	bhi.n	8018a42 <_dtoa_r+0x212>
 801899c:	4b5d      	ldr	r3, [pc, #372]	@ (8018b14 <_dtoa_r+0x2e4>)
 801899e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80189a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80189aa:	f7f0 f8c7 	bl	8008b3c <__aeabi_dcmplt>
 80189ae:	2800      	cmp	r0, #0
 80189b0:	d049      	beq.n	8018a46 <_dtoa_r+0x216>
 80189b2:	3f01      	subs	r7, #1
 80189b4:	2300      	movs	r3, #0
 80189b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80189b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80189ba:	1b9b      	subs	r3, r3, r6
 80189bc:	1e5a      	subs	r2, r3, #1
 80189be:	bf45      	ittet	mi
 80189c0:	f1c3 0301 	rsbmi	r3, r3, #1
 80189c4:	9300      	strmi	r3, [sp, #0]
 80189c6:	2300      	movpl	r3, #0
 80189c8:	2300      	movmi	r3, #0
 80189ca:	9206      	str	r2, [sp, #24]
 80189cc:	bf54      	ite	pl
 80189ce:	9300      	strpl	r3, [sp, #0]
 80189d0:	9306      	strmi	r3, [sp, #24]
 80189d2:	2f00      	cmp	r7, #0
 80189d4:	db39      	blt.n	8018a4a <_dtoa_r+0x21a>
 80189d6:	9b06      	ldr	r3, [sp, #24]
 80189d8:	970d      	str	r7, [sp, #52]	@ 0x34
 80189da:	443b      	add	r3, r7
 80189dc:	9306      	str	r3, [sp, #24]
 80189de:	2300      	movs	r3, #0
 80189e0:	9308      	str	r3, [sp, #32]
 80189e2:	9b07      	ldr	r3, [sp, #28]
 80189e4:	2b09      	cmp	r3, #9
 80189e6:	d863      	bhi.n	8018ab0 <_dtoa_r+0x280>
 80189e8:	2b05      	cmp	r3, #5
 80189ea:	bfc4      	itt	gt
 80189ec:	3b04      	subgt	r3, #4
 80189ee:	9307      	strgt	r3, [sp, #28]
 80189f0:	9b07      	ldr	r3, [sp, #28]
 80189f2:	f1a3 0302 	sub.w	r3, r3, #2
 80189f6:	bfcc      	ite	gt
 80189f8:	2400      	movgt	r4, #0
 80189fa:	2401      	movle	r4, #1
 80189fc:	2b03      	cmp	r3, #3
 80189fe:	d863      	bhi.n	8018ac8 <_dtoa_r+0x298>
 8018a00:	e8df f003 	tbb	[pc, r3]
 8018a04:	2b375452 	.word	0x2b375452
 8018a08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8018a0c:	441e      	add	r6, r3
 8018a0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8018a12:	2b20      	cmp	r3, #32
 8018a14:	bfc1      	itttt	gt
 8018a16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8018a1a:	409f      	lslgt	r7, r3
 8018a1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8018a20:	fa24 f303 	lsrgt.w	r3, r4, r3
 8018a24:	bfd6      	itet	le
 8018a26:	f1c3 0320 	rsble	r3, r3, #32
 8018a2a:	ea47 0003 	orrgt.w	r0, r7, r3
 8018a2e:	fa04 f003 	lslle.w	r0, r4, r3
 8018a32:	f7ef fd97 	bl	8008564 <__aeabi_ui2d>
 8018a36:	2201      	movs	r2, #1
 8018a38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8018a3c:	3e01      	subs	r6, #1
 8018a3e:	9212      	str	r2, [sp, #72]	@ 0x48
 8018a40:	e776      	b.n	8018930 <_dtoa_r+0x100>
 8018a42:	2301      	movs	r3, #1
 8018a44:	e7b7      	b.n	80189b6 <_dtoa_r+0x186>
 8018a46:	9010      	str	r0, [sp, #64]	@ 0x40
 8018a48:	e7b6      	b.n	80189b8 <_dtoa_r+0x188>
 8018a4a:	9b00      	ldr	r3, [sp, #0]
 8018a4c:	1bdb      	subs	r3, r3, r7
 8018a4e:	9300      	str	r3, [sp, #0]
 8018a50:	427b      	negs	r3, r7
 8018a52:	9308      	str	r3, [sp, #32]
 8018a54:	2300      	movs	r3, #0
 8018a56:	930d      	str	r3, [sp, #52]	@ 0x34
 8018a58:	e7c3      	b.n	80189e2 <_dtoa_r+0x1b2>
 8018a5a:	2301      	movs	r3, #1
 8018a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018a60:	eb07 0b03 	add.w	fp, r7, r3
 8018a64:	f10b 0301 	add.w	r3, fp, #1
 8018a68:	2b01      	cmp	r3, #1
 8018a6a:	9303      	str	r3, [sp, #12]
 8018a6c:	bfb8      	it	lt
 8018a6e:	2301      	movlt	r3, #1
 8018a70:	e006      	b.n	8018a80 <_dtoa_r+0x250>
 8018a72:	2301      	movs	r3, #1
 8018a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	dd28      	ble.n	8018ace <_dtoa_r+0x29e>
 8018a7c:	469b      	mov	fp, r3
 8018a7e:	9303      	str	r3, [sp, #12]
 8018a80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8018a84:	2100      	movs	r1, #0
 8018a86:	2204      	movs	r2, #4
 8018a88:	f102 0514 	add.w	r5, r2, #20
 8018a8c:	429d      	cmp	r5, r3
 8018a8e:	d926      	bls.n	8018ade <_dtoa_r+0x2ae>
 8018a90:	6041      	str	r1, [r0, #4]
 8018a92:	4648      	mov	r0, r9
 8018a94:	f001 f832 	bl	8019afc <_Balloc>
 8018a98:	4682      	mov	sl, r0
 8018a9a:	2800      	cmp	r0, #0
 8018a9c:	d142      	bne.n	8018b24 <_dtoa_r+0x2f4>
 8018a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8018b18 <_dtoa_r+0x2e8>)
 8018aa0:	4602      	mov	r2, r0
 8018aa2:	f240 11af 	movw	r1, #431	@ 0x1af
 8018aa6:	e6da      	b.n	801885e <_dtoa_r+0x2e>
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	e7e3      	b.n	8018a74 <_dtoa_r+0x244>
 8018aac:	2300      	movs	r3, #0
 8018aae:	e7d5      	b.n	8018a5c <_dtoa_r+0x22c>
 8018ab0:	2401      	movs	r4, #1
 8018ab2:	2300      	movs	r3, #0
 8018ab4:	9307      	str	r3, [sp, #28]
 8018ab6:	9409      	str	r4, [sp, #36]	@ 0x24
 8018ab8:	f04f 3bff 	mov.w	fp, #4294967295
 8018abc:	2200      	movs	r2, #0
 8018abe:	f8cd b00c 	str.w	fp, [sp, #12]
 8018ac2:	2312      	movs	r3, #18
 8018ac4:	920c      	str	r2, [sp, #48]	@ 0x30
 8018ac6:	e7db      	b.n	8018a80 <_dtoa_r+0x250>
 8018ac8:	2301      	movs	r3, #1
 8018aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8018acc:	e7f4      	b.n	8018ab8 <_dtoa_r+0x288>
 8018ace:	f04f 0b01 	mov.w	fp, #1
 8018ad2:	f8cd b00c 	str.w	fp, [sp, #12]
 8018ad6:	465b      	mov	r3, fp
 8018ad8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8018adc:	e7d0      	b.n	8018a80 <_dtoa_r+0x250>
 8018ade:	3101      	adds	r1, #1
 8018ae0:	0052      	lsls	r2, r2, #1
 8018ae2:	e7d1      	b.n	8018a88 <_dtoa_r+0x258>
 8018ae4:	f3af 8000 	nop.w
 8018ae8:	636f4361 	.word	0x636f4361
 8018aec:	3fd287a7 	.word	0x3fd287a7
 8018af0:	8b60c8b3 	.word	0x8b60c8b3
 8018af4:	3fc68a28 	.word	0x3fc68a28
 8018af8:	509f79fb 	.word	0x509f79fb
 8018afc:	3fd34413 	.word	0x3fd34413
 8018b00:	0801db61 	.word	0x0801db61
 8018b04:	0801db78 	.word	0x0801db78
 8018b08:	7ff00000 	.word	0x7ff00000
 8018b0c:	0801dcc2 	.word	0x0801dcc2
 8018b10:	3ff80000 	.word	0x3ff80000
 8018b14:	0801de90 	.word	0x0801de90
 8018b18:	0801dbd0 	.word	0x0801dbd0
 8018b1c:	0801db5d 	.word	0x0801db5d
 8018b20:	0801dcc1 	.word	0x0801dcc1
 8018b24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8018b28:	6018      	str	r0, [r3, #0]
 8018b2a:	9b03      	ldr	r3, [sp, #12]
 8018b2c:	2b0e      	cmp	r3, #14
 8018b2e:	f200 80a1 	bhi.w	8018c74 <_dtoa_r+0x444>
 8018b32:	2c00      	cmp	r4, #0
 8018b34:	f000 809e 	beq.w	8018c74 <_dtoa_r+0x444>
 8018b38:	2f00      	cmp	r7, #0
 8018b3a:	dd33      	ble.n	8018ba4 <_dtoa_r+0x374>
 8018b3c:	4b9c      	ldr	r3, [pc, #624]	@ (8018db0 <_dtoa_r+0x580>)
 8018b3e:	f007 020f 	and.w	r2, r7, #15
 8018b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018b46:	ed93 7b00 	vldr	d7, [r3]
 8018b4a:	05f8      	lsls	r0, r7, #23
 8018b4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8018b50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8018b54:	d516      	bpl.n	8018b84 <_dtoa_r+0x354>
 8018b56:	4b97      	ldr	r3, [pc, #604]	@ (8018db4 <_dtoa_r+0x584>)
 8018b58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8018b5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018b60:	f7ef fea4 	bl	80088ac <__aeabi_ddiv>
 8018b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018b68:	f004 040f 	and.w	r4, r4, #15
 8018b6c:	2603      	movs	r6, #3
 8018b6e:	4d91      	ldr	r5, [pc, #580]	@ (8018db4 <_dtoa_r+0x584>)
 8018b70:	b954      	cbnz	r4, 8018b88 <_dtoa_r+0x358>
 8018b72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8018b76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018b7a:	f7ef fe97 	bl	80088ac <__aeabi_ddiv>
 8018b7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018b82:	e028      	b.n	8018bd6 <_dtoa_r+0x3a6>
 8018b84:	2602      	movs	r6, #2
 8018b86:	e7f2      	b.n	8018b6e <_dtoa_r+0x33e>
 8018b88:	07e1      	lsls	r1, r4, #31
 8018b8a:	d508      	bpl.n	8018b9e <_dtoa_r+0x36e>
 8018b8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8018b90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018b94:	f7ef fd60 	bl	8008658 <__aeabi_dmul>
 8018b98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8018b9c:	3601      	adds	r6, #1
 8018b9e:	1064      	asrs	r4, r4, #1
 8018ba0:	3508      	adds	r5, #8
 8018ba2:	e7e5      	b.n	8018b70 <_dtoa_r+0x340>
 8018ba4:	f000 80af 	beq.w	8018d06 <_dtoa_r+0x4d6>
 8018ba8:	427c      	negs	r4, r7
 8018baa:	4b81      	ldr	r3, [pc, #516]	@ (8018db0 <_dtoa_r+0x580>)
 8018bac:	4d81      	ldr	r5, [pc, #516]	@ (8018db4 <_dtoa_r+0x584>)
 8018bae:	f004 020f 	and.w	r2, r4, #15
 8018bb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8018bbe:	f7ef fd4b 	bl	8008658 <__aeabi_dmul>
 8018bc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018bc6:	1124      	asrs	r4, r4, #4
 8018bc8:	2300      	movs	r3, #0
 8018bca:	2602      	movs	r6, #2
 8018bcc:	2c00      	cmp	r4, #0
 8018bce:	f040 808f 	bne.w	8018cf0 <_dtoa_r+0x4c0>
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d1d3      	bne.n	8018b7e <_dtoa_r+0x34e>
 8018bd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018bd8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	f000 8094 	beq.w	8018d0a <_dtoa_r+0x4da>
 8018be2:	4b75      	ldr	r3, [pc, #468]	@ (8018db8 <_dtoa_r+0x588>)
 8018be4:	2200      	movs	r2, #0
 8018be6:	4620      	mov	r0, r4
 8018be8:	4629      	mov	r1, r5
 8018bea:	f7ef ffa7 	bl	8008b3c <__aeabi_dcmplt>
 8018bee:	2800      	cmp	r0, #0
 8018bf0:	f000 808b 	beq.w	8018d0a <_dtoa_r+0x4da>
 8018bf4:	9b03      	ldr	r3, [sp, #12]
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	f000 8087 	beq.w	8018d0a <_dtoa_r+0x4da>
 8018bfc:	f1bb 0f00 	cmp.w	fp, #0
 8018c00:	dd34      	ble.n	8018c6c <_dtoa_r+0x43c>
 8018c02:	4620      	mov	r0, r4
 8018c04:	4b6d      	ldr	r3, [pc, #436]	@ (8018dbc <_dtoa_r+0x58c>)
 8018c06:	2200      	movs	r2, #0
 8018c08:	4629      	mov	r1, r5
 8018c0a:	f7ef fd25 	bl	8008658 <__aeabi_dmul>
 8018c0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018c12:	f107 38ff 	add.w	r8, r7, #4294967295
 8018c16:	3601      	adds	r6, #1
 8018c18:	465c      	mov	r4, fp
 8018c1a:	4630      	mov	r0, r6
 8018c1c:	f7ef fcb2 	bl	8008584 <__aeabi_i2d>
 8018c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018c24:	f7ef fd18 	bl	8008658 <__aeabi_dmul>
 8018c28:	4b65      	ldr	r3, [pc, #404]	@ (8018dc0 <_dtoa_r+0x590>)
 8018c2a:	2200      	movs	r2, #0
 8018c2c:	f7ef fb5e 	bl	80082ec <__adddf3>
 8018c30:	4605      	mov	r5, r0
 8018c32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8018c36:	2c00      	cmp	r4, #0
 8018c38:	d16a      	bne.n	8018d10 <_dtoa_r+0x4e0>
 8018c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018c3e:	4b61      	ldr	r3, [pc, #388]	@ (8018dc4 <_dtoa_r+0x594>)
 8018c40:	2200      	movs	r2, #0
 8018c42:	f7ef fb51 	bl	80082e8 <__aeabi_dsub>
 8018c46:	4602      	mov	r2, r0
 8018c48:	460b      	mov	r3, r1
 8018c4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018c4e:	462a      	mov	r2, r5
 8018c50:	4633      	mov	r3, r6
 8018c52:	f7ef ff91 	bl	8008b78 <__aeabi_dcmpgt>
 8018c56:	2800      	cmp	r0, #0
 8018c58:	f040 8298 	bne.w	801918c <_dtoa_r+0x95c>
 8018c5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018c60:	462a      	mov	r2, r5
 8018c62:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8018c66:	f7ef ff69 	bl	8008b3c <__aeabi_dcmplt>
 8018c6a:	bb38      	cbnz	r0, 8018cbc <_dtoa_r+0x48c>
 8018c6c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8018c70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8018c74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	f2c0 8157 	blt.w	8018f2a <_dtoa_r+0x6fa>
 8018c7c:	2f0e      	cmp	r7, #14
 8018c7e:	f300 8154 	bgt.w	8018f2a <_dtoa_r+0x6fa>
 8018c82:	4b4b      	ldr	r3, [pc, #300]	@ (8018db0 <_dtoa_r+0x580>)
 8018c84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8018c88:	ed93 7b00 	vldr	d7, [r3]
 8018c8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	ed8d 7b00 	vstr	d7, [sp]
 8018c94:	f280 80e5 	bge.w	8018e62 <_dtoa_r+0x632>
 8018c98:	9b03      	ldr	r3, [sp, #12]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	f300 80e1 	bgt.w	8018e62 <_dtoa_r+0x632>
 8018ca0:	d10c      	bne.n	8018cbc <_dtoa_r+0x48c>
 8018ca2:	4b48      	ldr	r3, [pc, #288]	@ (8018dc4 <_dtoa_r+0x594>)
 8018ca4:	2200      	movs	r2, #0
 8018ca6:	ec51 0b17 	vmov	r0, r1, d7
 8018caa:	f7ef fcd5 	bl	8008658 <__aeabi_dmul>
 8018cae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018cb2:	f7ef ff57 	bl	8008b64 <__aeabi_dcmpge>
 8018cb6:	2800      	cmp	r0, #0
 8018cb8:	f000 8266 	beq.w	8019188 <_dtoa_r+0x958>
 8018cbc:	2400      	movs	r4, #0
 8018cbe:	4625      	mov	r5, r4
 8018cc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018cc2:	4656      	mov	r6, sl
 8018cc4:	ea6f 0803 	mvn.w	r8, r3
 8018cc8:	2700      	movs	r7, #0
 8018cca:	4621      	mov	r1, r4
 8018ccc:	4648      	mov	r0, r9
 8018cce:	f000 ff55 	bl	8019b7c <_Bfree>
 8018cd2:	2d00      	cmp	r5, #0
 8018cd4:	f000 80bd 	beq.w	8018e52 <_dtoa_r+0x622>
 8018cd8:	b12f      	cbz	r7, 8018ce6 <_dtoa_r+0x4b6>
 8018cda:	42af      	cmp	r7, r5
 8018cdc:	d003      	beq.n	8018ce6 <_dtoa_r+0x4b6>
 8018cde:	4639      	mov	r1, r7
 8018ce0:	4648      	mov	r0, r9
 8018ce2:	f000 ff4b 	bl	8019b7c <_Bfree>
 8018ce6:	4629      	mov	r1, r5
 8018ce8:	4648      	mov	r0, r9
 8018cea:	f000 ff47 	bl	8019b7c <_Bfree>
 8018cee:	e0b0      	b.n	8018e52 <_dtoa_r+0x622>
 8018cf0:	07e2      	lsls	r2, r4, #31
 8018cf2:	d505      	bpl.n	8018d00 <_dtoa_r+0x4d0>
 8018cf4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018cf8:	f7ef fcae 	bl	8008658 <__aeabi_dmul>
 8018cfc:	3601      	adds	r6, #1
 8018cfe:	2301      	movs	r3, #1
 8018d00:	1064      	asrs	r4, r4, #1
 8018d02:	3508      	adds	r5, #8
 8018d04:	e762      	b.n	8018bcc <_dtoa_r+0x39c>
 8018d06:	2602      	movs	r6, #2
 8018d08:	e765      	b.n	8018bd6 <_dtoa_r+0x3a6>
 8018d0a:	9c03      	ldr	r4, [sp, #12]
 8018d0c:	46b8      	mov	r8, r7
 8018d0e:	e784      	b.n	8018c1a <_dtoa_r+0x3ea>
 8018d10:	4b27      	ldr	r3, [pc, #156]	@ (8018db0 <_dtoa_r+0x580>)
 8018d12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018d14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018d18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018d1c:	4454      	add	r4, sl
 8018d1e:	2900      	cmp	r1, #0
 8018d20:	d054      	beq.n	8018dcc <_dtoa_r+0x59c>
 8018d22:	4929      	ldr	r1, [pc, #164]	@ (8018dc8 <_dtoa_r+0x598>)
 8018d24:	2000      	movs	r0, #0
 8018d26:	f7ef fdc1 	bl	80088ac <__aeabi_ddiv>
 8018d2a:	4633      	mov	r3, r6
 8018d2c:	462a      	mov	r2, r5
 8018d2e:	f7ef fadb 	bl	80082e8 <__aeabi_dsub>
 8018d32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8018d36:	4656      	mov	r6, sl
 8018d38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018d3c:	f7ef ff3c 	bl	8008bb8 <__aeabi_d2iz>
 8018d40:	4605      	mov	r5, r0
 8018d42:	f7ef fc1f 	bl	8008584 <__aeabi_i2d>
 8018d46:	4602      	mov	r2, r0
 8018d48:	460b      	mov	r3, r1
 8018d4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018d4e:	f7ef facb 	bl	80082e8 <__aeabi_dsub>
 8018d52:	3530      	adds	r5, #48	@ 0x30
 8018d54:	4602      	mov	r2, r0
 8018d56:	460b      	mov	r3, r1
 8018d58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018d5c:	f806 5b01 	strb.w	r5, [r6], #1
 8018d60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8018d64:	f7ef feea 	bl	8008b3c <__aeabi_dcmplt>
 8018d68:	2800      	cmp	r0, #0
 8018d6a:	d172      	bne.n	8018e52 <_dtoa_r+0x622>
 8018d6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018d70:	4911      	ldr	r1, [pc, #68]	@ (8018db8 <_dtoa_r+0x588>)
 8018d72:	2000      	movs	r0, #0
 8018d74:	f7ef fab8 	bl	80082e8 <__aeabi_dsub>
 8018d78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8018d7c:	f7ef fede 	bl	8008b3c <__aeabi_dcmplt>
 8018d80:	2800      	cmp	r0, #0
 8018d82:	f040 80b4 	bne.w	8018eee <_dtoa_r+0x6be>
 8018d86:	42a6      	cmp	r6, r4
 8018d88:	f43f af70 	beq.w	8018c6c <_dtoa_r+0x43c>
 8018d8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8018d90:	4b0a      	ldr	r3, [pc, #40]	@ (8018dbc <_dtoa_r+0x58c>)
 8018d92:	2200      	movs	r2, #0
 8018d94:	f7ef fc60 	bl	8008658 <__aeabi_dmul>
 8018d98:	4b08      	ldr	r3, [pc, #32]	@ (8018dbc <_dtoa_r+0x58c>)
 8018d9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8018d9e:	2200      	movs	r2, #0
 8018da0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018da4:	f7ef fc58 	bl	8008658 <__aeabi_dmul>
 8018da8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018dac:	e7c4      	b.n	8018d38 <_dtoa_r+0x508>
 8018dae:	bf00      	nop
 8018db0:	0801de90 	.word	0x0801de90
 8018db4:	0801de68 	.word	0x0801de68
 8018db8:	3ff00000 	.word	0x3ff00000
 8018dbc:	40240000 	.word	0x40240000
 8018dc0:	401c0000 	.word	0x401c0000
 8018dc4:	40140000 	.word	0x40140000
 8018dc8:	3fe00000 	.word	0x3fe00000
 8018dcc:	4631      	mov	r1, r6
 8018dce:	4628      	mov	r0, r5
 8018dd0:	f7ef fc42 	bl	8008658 <__aeabi_dmul>
 8018dd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8018dd8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8018dda:	4656      	mov	r6, sl
 8018ddc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018de0:	f7ef feea 	bl	8008bb8 <__aeabi_d2iz>
 8018de4:	4605      	mov	r5, r0
 8018de6:	f7ef fbcd 	bl	8008584 <__aeabi_i2d>
 8018dea:	4602      	mov	r2, r0
 8018dec:	460b      	mov	r3, r1
 8018dee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018df2:	f7ef fa79 	bl	80082e8 <__aeabi_dsub>
 8018df6:	3530      	adds	r5, #48	@ 0x30
 8018df8:	f806 5b01 	strb.w	r5, [r6], #1
 8018dfc:	4602      	mov	r2, r0
 8018dfe:	460b      	mov	r3, r1
 8018e00:	42a6      	cmp	r6, r4
 8018e02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018e06:	f04f 0200 	mov.w	r2, #0
 8018e0a:	d124      	bne.n	8018e56 <_dtoa_r+0x626>
 8018e0c:	4baf      	ldr	r3, [pc, #700]	@ (80190cc <_dtoa_r+0x89c>)
 8018e0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8018e12:	f7ef fa6b 	bl	80082ec <__adddf3>
 8018e16:	4602      	mov	r2, r0
 8018e18:	460b      	mov	r3, r1
 8018e1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018e1e:	f7ef feab 	bl	8008b78 <__aeabi_dcmpgt>
 8018e22:	2800      	cmp	r0, #0
 8018e24:	d163      	bne.n	8018eee <_dtoa_r+0x6be>
 8018e26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8018e2a:	49a8      	ldr	r1, [pc, #672]	@ (80190cc <_dtoa_r+0x89c>)
 8018e2c:	2000      	movs	r0, #0
 8018e2e:	f7ef fa5b 	bl	80082e8 <__aeabi_dsub>
 8018e32:	4602      	mov	r2, r0
 8018e34:	460b      	mov	r3, r1
 8018e36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018e3a:	f7ef fe7f 	bl	8008b3c <__aeabi_dcmplt>
 8018e3e:	2800      	cmp	r0, #0
 8018e40:	f43f af14 	beq.w	8018c6c <_dtoa_r+0x43c>
 8018e44:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8018e46:	1e73      	subs	r3, r6, #1
 8018e48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018e4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018e4e:	2b30      	cmp	r3, #48	@ 0x30
 8018e50:	d0f8      	beq.n	8018e44 <_dtoa_r+0x614>
 8018e52:	4647      	mov	r7, r8
 8018e54:	e03b      	b.n	8018ece <_dtoa_r+0x69e>
 8018e56:	4b9e      	ldr	r3, [pc, #632]	@ (80190d0 <_dtoa_r+0x8a0>)
 8018e58:	f7ef fbfe 	bl	8008658 <__aeabi_dmul>
 8018e5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018e60:	e7bc      	b.n	8018ddc <_dtoa_r+0x5ac>
 8018e62:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8018e66:	4656      	mov	r6, sl
 8018e68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018e6c:	4620      	mov	r0, r4
 8018e6e:	4629      	mov	r1, r5
 8018e70:	f7ef fd1c 	bl	80088ac <__aeabi_ddiv>
 8018e74:	f7ef fea0 	bl	8008bb8 <__aeabi_d2iz>
 8018e78:	4680      	mov	r8, r0
 8018e7a:	f7ef fb83 	bl	8008584 <__aeabi_i2d>
 8018e7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018e82:	f7ef fbe9 	bl	8008658 <__aeabi_dmul>
 8018e86:	4602      	mov	r2, r0
 8018e88:	460b      	mov	r3, r1
 8018e8a:	4620      	mov	r0, r4
 8018e8c:	4629      	mov	r1, r5
 8018e8e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8018e92:	f7ef fa29 	bl	80082e8 <__aeabi_dsub>
 8018e96:	f806 4b01 	strb.w	r4, [r6], #1
 8018e9a:	9d03      	ldr	r5, [sp, #12]
 8018e9c:	eba6 040a 	sub.w	r4, r6, sl
 8018ea0:	42a5      	cmp	r5, r4
 8018ea2:	4602      	mov	r2, r0
 8018ea4:	460b      	mov	r3, r1
 8018ea6:	d133      	bne.n	8018f10 <_dtoa_r+0x6e0>
 8018ea8:	f7ef fa20 	bl	80082ec <__adddf3>
 8018eac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018eb0:	4604      	mov	r4, r0
 8018eb2:	460d      	mov	r5, r1
 8018eb4:	f7ef fe60 	bl	8008b78 <__aeabi_dcmpgt>
 8018eb8:	b9c0      	cbnz	r0, 8018eec <_dtoa_r+0x6bc>
 8018eba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018ebe:	4620      	mov	r0, r4
 8018ec0:	4629      	mov	r1, r5
 8018ec2:	f7ef fe31 	bl	8008b28 <__aeabi_dcmpeq>
 8018ec6:	b110      	cbz	r0, 8018ece <_dtoa_r+0x69e>
 8018ec8:	f018 0f01 	tst.w	r8, #1
 8018ecc:	d10e      	bne.n	8018eec <_dtoa_r+0x6bc>
 8018ece:	9902      	ldr	r1, [sp, #8]
 8018ed0:	4648      	mov	r0, r9
 8018ed2:	f000 fe53 	bl	8019b7c <_Bfree>
 8018ed6:	2300      	movs	r3, #0
 8018ed8:	7033      	strb	r3, [r6, #0]
 8018eda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018edc:	3701      	adds	r7, #1
 8018ede:	601f      	str	r7, [r3, #0]
 8018ee0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	f000 824b 	beq.w	801937e <_dtoa_r+0xb4e>
 8018ee8:	601e      	str	r6, [r3, #0]
 8018eea:	e248      	b.n	801937e <_dtoa_r+0xb4e>
 8018eec:	46b8      	mov	r8, r7
 8018eee:	4633      	mov	r3, r6
 8018ef0:	461e      	mov	r6, r3
 8018ef2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018ef6:	2a39      	cmp	r2, #57	@ 0x39
 8018ef8:	d106      	bne.n	8018f08 <_dtoa_r+0x6d8>
 8018efa:	459a      	cmp	sl, r3
 8018efc:	d1f8      	bne.n	8018ef0 <_dtoa_r+0x6c0>
 8018efe:	2230      	movs	r2, #48	@ 0x30
 8018f00:	f108 0801 	add.w	r8, r8, #1
 8018f04:	f88a 2000 	strb.w	r2, [sl]
 8018f08:	781a      	ldrb	r2, [r3, #0]
 8018f0a:	3201      	adds	r2, #1
 8018f0c:	701a      	strb	r2, [r3, #0]
 8018f0e:	e7a0      	b.n	8018e52 <_dtoa_r+0x622>
 8018f10:	4b6f      	ldr	r3, [pc, #444]	@ (80190d0 <_dtoa_r+0x8a0>)
 8018f12:	2200      	movs	r2, #0
 8018f14:	f7ef fba0 	bl	8008658 <__aeabi_dmul>
 8018f18:	2200      	movs	r2, #0
 8018f1a:	2300      	movs	r3, #0
 8018f1c:	4604      	mov	r4, r0
 8018f1e:	460d      	mov	r5, r1
 8018f20:	f7ef fe02 	bl	8008b28 <__aeabi_dcmpeq>
 8018f24:	2800      	cmp	r0, #0
 8018f26:	d09f      	beq.n	8018e68 <_dtoa_r+0x638>
 8018f28:	e7d1      	b.n	8018ece <_dtoa_r+0x69e>
 8018f2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018f2c:	2a00      	cmp	r2, #0
 8018f2e:	f000 80ea 	beq.w	8019106 <_dtoa_r+0x8d6>
 8018f32:	9a07      	ldr	r2, [sp, #28]
 8018f34:	2a01      	cmp	r2, #1
 8018f36:	f300 80cd 	bgt.w	80190d4 <_dtoa_r+0x8a4>
 8018f3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018f3c:	2a00      	cmp	r2, #0
 8018f3e:	f000 80c1 	beq.w	80190c4 <_dtoa_r+0x894>
 8018f42:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8018f46:	9c08      	ldr	r4, [sp, #32]
 8018f48:	9e00      	ldr	r6, [sp, #0]
 8018f4a:	9a00      	ldr	r2, [sp, #0]
 8018f4c:	441a      	add	r2, r3
 8018f4e:	9200      	str	r2, [sp, #0]
 8018f50:	9a06      	ldr	r2, [sp, #24]
 8018f52:	2101      	movs	r1, #1
 8018f54:	441a      	add	r2, r3
 8018f56:	4648      	mov	r0, r9
 8018f58:	9206      	str	r2, [sp, #24]
 8018f5a:	f000 ff0d 	bl	8019d78 <__i2b>
 8018f5e:	4605      	mov	r5, r0
 8018f60:	b166      	cbz	r6, 8018f7c <_dtoa_r+0x74c>
 8018f62:	9b06      	ldr	r3, [sp, #24]
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	dd09      	ble.n	8018f7c <_dtoa_r+0x74c>
 8018f68:	42b3      	cmp	r3, r6
 8018f6a:	9a00      	ldr	r2, [sp, #0]
 8018f6c:	bfa8      	it	ge
 8018f6e:	4633      	movge	r3, r6
 8018f70:	1ad2      	subs	r2, r2, r3
 8018f72:	9200      	str	r2, [sp, #0]
 8018f74:	9a06      	ldr	r2, [sp, #24]
 8018f76:	1af6      	subs	r6, r6, r3
 8018f78:	1ad3      	subs	r3, r2, r3
 8018f7a:	9306      	str	r3, [sp, #24]
 8018f7c:	9b08      	ldr	r3, [sp, #32]
 8018f7e:	b30b      	cbz	r3, 8018fc4 <_dtoa_r+0x794>
 8018f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	f000 80c6 	beq.w	8019114 <_dtoa_r+0x8e4>
 8018f88:	2c00      	cmp	r4, #0
 8018f8a:	f000 80c0 	beq.w	801910e <_dtoa_r+0x8de>
 8018f8e:	4629      	mov	r1, r5
 8018f90:	4622      	mov	r2, r4
 8018f92:	4648      	mov	r0, r9
 8018f94:	f000 ffa8 	bl	8019ee8 <__pow5mult>
 8018f98:	9a02      	ldr	r2, [sp, #8]
 8018f9a:	4601      	mov	r1, r0
 8018f9c:	4605      	mov	r5, r0
 8018f9e:	4648      	mov	r0, r9
 8018fa0:	f000 ff00 	bl	8019da4 <__multiply>
 8018fa4:	9902      	ldr	r1, [sp, #8]
 8018fa6:	4680      	mov	r8, r0
 8018fa8:	4648      	mov	r0, r9
 8018faa:	f000 fde7 	bl	8019b7c <_Bfree>
 8018fae:	9b08      	ldr	r3, [sp, #32]
 8018fb0:	1b1b      	subs	r3, r3, r4
 8018fb2:	9308      	str	r3, [sp, #32]
 8018fb4:	f000 80b1 	beq.w	801911a <_dtoa_r+0x8ea>
 8018fb8:	9a08      	ldr	r2, [sp, #32]
 8018fba:	4641      	mov	r1, r8
 8018fbc:	4648      	mov	r0, r9
 8018fbe:	f000 ff93 	bl	8019ee8 <__pow5mult>
 8018fc2:	9002      	str	r0, [sp, #8]
 8018fc4:	2101      	movs	r1, #1
 8018fc6:	4648      	mov	r0, r9
 8018fc8:	f000 fed6 	bl	8019d78 <__i2b>
 8018fcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018fce:	4604      	mov	r4, r0
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	f000 81d8 	beq.w	8019386 <_dtoa_r+0xb56>
 8018fd6:	461a      	mov	r2, r3
 8018fd8:	4601      	mov	r1, r0
 8018fda:	4648      	mov	r0, r9
 8018fdc:	f000 ff84 	bl	8019ee8 <__pow5mult>
 8018fe0:	9b07      	ldr	r3, [sp, #28]
 8018fe2:	2b01      	cmp	r3, #1
 8018fe4:	4604      	mov	r4, r0
 8018fe6:	f300 809f 	bgt.w	8019128 <_dtoa_r+0x8f8>
 8018fea:	9b04      	ldr	r3, [sp, #16]
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	f040 8097 	bne.w	8019120 <_dtoa_r+0x8f0>
 8018ff2:	9b05      	ldr	r3, [sp, #20]
 8018ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	f040 8093 	bne.w	8019124 <_dtoa_r+0x8f4>
 8018ffe:	9b05      	ldr	r3, [sp, #20]
 8019000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019004:	0d1b      	lsrs	r3, r3, #20
 8019006:	051b      	lsls	r3, r3, #20
 8019008:	b133      	cbz	r3, 8019018 <_dtoa_r+0x7e8>
 801900a:	9b00      	ldr	r3, [sp, #0]
 801900c:	3301      	adds	r3, #1
 801900e:	9300      	str	r3, [sp, #0]
 8019010:	9b06      	ldr	r3, [sp, #24]
 8019012:	3301      	adds	r3, #1
 8019014:	9306      	str	r3, [sp, #24]
 8019016:	2301      	movs	r3, #1
 8019018:	9308      	str	r3, [sp, #32]
 801901a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801901c:	2b00      	cmp	r3, #0
 801901e:	f000 81b8 	beq.w	8019392 <_dtoa_r+0xb62>
 8019022:	6923      	ldr	r3, [r4, #16]
 8019024:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019028:	6918      	ldr	r0, [r3, #16]
 801902a:	f000 fe59 	bl	8019ce0 <__hi0bits>
 801902e:	f1c0 0020 	rsb	r0, r0, #32
 8019032:	9b06      	ldr	r3, [sp, #24]
 8019034:	4418      	add	r0, r3
 8019036:	f010 001f 	ands.w	r0, r0, #31
 801903a:	f000 8082 	beq.w	8019142 <_dtoa_r+0x912>
 801903e:	f1c0 0320 	rsb	r3, r0, #32
 8019042:	2b04      	cmp	r3, #4
 8019044:	dd73      	ble.n	801912e <_dtoa_r+0x8fe>
 8019046:	9b00      	ldr	r3, [sp, #0]
 8019048:	f1c0 001c 	rsb	r0, r0, #28
 801904c:	4403      	add	r3, r0
 801904e:	9300      	str	r3, [sp, #0]
 8019050:	9b06      	ldr	r3, [sp, #24]
 8019052:	4403      	add	r3, r0
 8019054:	4406      	add	r6, r0
 8019056:	9306      	str	r3, [sp, #24]
 8019058:	9b00      	ldr	r3, [sp, #0]
 801905a:	2b00      	cmp	r3, #0
 801905c:	dd05      	ble.n	801906a <_dtoa_r+0x83a>
 801905e:	9902      	ldr	r1, [sp, #8]
 8019060:	461a      	mov	r2, r3
 8019062:	4648      	mov	r0, r9
 8019064:	f000 ff9a 	bl	8019f9c <__lshift>
 8019068:	9002      	str	r0, [sp, #8]
 801906a:	9b06      	ldr	r3, [sp, #24]
 801906c:	2b00      	cmp	r3, #0
 801906e:	dd05      	ble.n	801907c <_dtoa_r+0x84c>
 8019070:	4621      	mov	r1, r4
 8019072:	461a      	mov	r2, r3
 8019074:	4648      	mov	r0, r9
 8019076:	f000 ff91 	bl	8019f9c <__lshift>
 801907a:	4604      	mov	r4, r0
 801907c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801907e:	2b00      	cmp	r3, #0
 8019080:	d061      	beq.n	8019146 <_dtoa_r+0x916>
 8019082:	9802      	ldr	r0, [sp, #8]
 8019084:	4621      	mov	r1, r4
 8019086:	f000 fff5 	bl	801a074 <__mcmp>
 801908a:	2800      	cmp	r0, #0
 801908c:	da5b      	bge.n	8019146 <_dtoa_r+0x916>
 801908e:	2300      	movs	r3, #0
 8019090:	9902      	ldr	r1, [sp, #8]
 8019092:	220a      	movs	r2, #10
 8019094:	4648      	mov	r0, r9
 8019096:	f000 fd93 	bl	8019bc0 <__multadd>
 801909a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801909c:	9002      	str	r0, [sp, #8]
 801909e:	f107 38ff 	add.w	r8, r7, #4294967295
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	f000 8177 	beq.w	8019396 <_dtoa_r+0xb66>
 80190a8:	4629      	mov	r1, r5
 80190aa:	2300      	movs	r3, #0
 80190ac:	220a      	movs	r2, #10
 80190ae:	4648      	mov	r0, r9
 80190b0:	f000 fd86 	bl	8019bc0 <__multadd>
 80190b4:	f1bb 0f00 	cmp.w	fp, #0
 80190b8:	4605      	mov	r5, r0
 80190ba:	dc6f      	bgt.n	801919c <_dtoa_r+0x96c>
 80190bc:	9b07      	ldr	r3, [sp, #28]
 80190be:	2b02      	cmp	r3, #2
 80190c0:	dc49      	bgt.n	8019156 <_dtoa_r+0x926>
 80190c2:	e06b      	b.n	801919c <_dtoa_r+0x96c>
 80190c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80190c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80190ca:	e73c      	b.n	8018f46 <_dtoa_r+0x716>
 80190cc:	3fe00000 	.word	0x3fe00000
 80190d0:	40240000 	.word	0x40240000
 80190d4:	9b03      	ldr	r3, [sp, #12]
 80190d6:	1e5c      	subs	r4, r3, #1
 80190d8:	9b08      	ldr	r3, [sp, #32]
 80190da:	42a3      	cmp	r3, r4
 80190dc:	db09      	blt.n	80190f2 <_dtoa_r+0x8c2>
 80190de:	1b1c      	subs	r4, r3, r4
 80190e0:	9b03      	ldr	r3, [sp, #12]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	f6bf af30 	bge.w	8018f48 <_dtoa_r+0x718>
 80190e8:	9b00      	ldr	r3, [sp, #0]
 80190ea:	9a03      	ldr	r2, [sp, #12]
 80190ec:	1a9e      	subs	r6, r3, r2
 80190ee:	2300      	movs	r3, #0
 80190f0:	e72b      	b.n	8018f4a <_dtoa_r+0x71a>
 80190f2:	9b08      	ldr	r3, [sp, #32]
 80190f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80190f6:	9408      	str	r4, [sp, #32]
 80190f8:	1ae3      	subs	r3, r4, r3
 80190fa:	441a      	add	r2, r3
 80190fc:	9e00      	ldr	r6, [sp, #0]
 80190fe:	9b03      	ldr	r3, [sp, #12]
 8019100:	920d      	str	r2, [sp, #52]	@ 0x34
 8019102:	2400      	movs	r4, #0
 8019104:	e721      	b.n	8018f4a <_dtoa_r+0x71a>
 8019106:	9c08      	ldr	r4, [sp, #32]
 8019108:	9e00      	ldr	r6, [sp, #0]
 801910a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801910c:	e728      	b.n	8018f60 <_dtoa_r+0x730>
 801910e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8019112:	e751      	b.n	8018fb8 <_dtoa_r+0x788>
 8019114:	9a08      	ldr	r2, [sp, #32]
 8019116:	9902      	ldr	r1, [sp, #8]
 8019118:	e750      	b.n	8018fbc <_dtoa_r+0x78c>
 801911a:	f8cd 8008 	str.w	r8, [sp, #8]
 801911e:	e751      	b.n	8018fc4 <_dtoa_r+0x794>
 8019120:	2300      	movs	r3, #0
 8019122:	e779      	b.n	8019018 <_dtoa_r+0x7e8>
 8019124:	9b04      	ldr	r3, [sp, #16]
 8019126:	e777      	b.n	8019018 <_dtoa_r+0x7e8>
 8019128:	2300      	movs	r3, #0
 801912a:	9308      	str	r3, [sp, #32]
 801912c:	e779      	b.n	8019022 <_dtoa_r+0x7f2>
 801912e:	d093      	beq.n	8019058 <_dtoa_r+0x828>
 8019130:	9a00      	ldr	r2, [sp, #0]
 8019132:	331c      	adds	r3, #28
 8019134:	441a      	add	r2, r3
 8019136:	9200      	str	r2, [sp, #0]
 8019138:	9a06      	ldr	r2, [sp, #24]
 801913a:	441a      	add	r2, r3
 801913c:	441e      	add	r6, r3
 801913e:	9206      	str	r2, [sp, #24]
 8019140:	e78a      	b.n	8019058 <_dtoa_r+0x828>
 8019142:	4603      	mov	r3, r0
 8019144:	e7f4      	b.n	8019130 <_dtoa_r+0x900>
 8019146:	9b03      	ldr	r3, [sp, #12]
 8019148:	2b00      	cmp	r3, #0
 801914a:	46b8      	mov	r8, r7
 801914c:	dc20      	bgt.n	8019190 <_dtoa_r+0x960>
 801914e:	469b      	mov	fp, r3
 8019150:	9b07      	ldr	r3, [sp, #28]
 8019152:	2b02      	cmp	r3, #2
 8019154:	dd1e      	ble.n	8019194 <_dtoa_r+0x964>
 8019156:	f1bb 0f00 	cmp.w	fp, #0
 801915a:	f47f adb1 	bne.w	8018cc0 <_dtoa_r+0x490>
 801915e:	4621      	mov	r1, r4
 8019160:	465b      	mov	r3, fp
 8019162:	2205      	movs	r2, #5
 8019164:	4648      	mov	r0, r9
 8019166:	f000 fd2b 	bl	8019bc0 <__multadd>
 801916a:	4601      	mov	r1, r0
 801916c:	4604      	mov	r4, r0
 801916e:	9802      	ldr	r0, [sp, #8]
 8019170:	f000 ff80 	bl	801a074 <__mcmp>
 8019174:	2800      	cmp	r0, #0
 8019176:	f77f ada3 	ble.w	8018cc0 <_dtoa_r+0x490>
 801917a:	4656      	mov	r6, sl
 801917c:	2331      	movs	r3, #49	@ 0x31
 801917e:	f806 3b01 	strb.w	r3, [r6], #1
 8019182:	f108 0801 	add.w	r8, r8, #1
 8019186:	e59f      	b.n	8018cc8 <_dtoa_r+0x498>
 8019188:	9c03      	ldr	r4, [sp, #12]
 801918a:	46b8      	mov	r8, r7
 801918c:	4625      	mov	r5, r4
 801918e:	e7f4      	b.n	801917a <_dtoa_r+0x94a>
 8019190:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8019194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019196:	2b00      	cmp	r3, #0
 8019198:	f000 8101 	beq.w	801939e <_dtoa_r+0xb6e>
 801919c:	2e00      	cmp	r6, #0
 801919e:	dd05      	ble.n	80191ac <_dtoa_r+0x97c>
 80191a0:	4629      	mov	r1, r5
 80191a2:	4632      	mov	r2, r6
 80191a4:	4648      	mov	r0, r9
 80191a6:	f000 fef9 	bl	8019f9c <__lshift>
 80191aa:	4605      	mov	r5, r0
 80191ac:	9b08      	ldr	r3, [sp, #32]
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d05c      	beq.n	801926c <_dtoa_r+0xa3c>
 80191b2:	6869      	ldr	r1, [r5, #4]
 80191b4:	4648      	mov	r0, r9
 80191b6:	f000 fca1 	bl	8019afc <_Balloc>
 80191ba:	4606      	mov	r6, r0
 80191bc:	b928      	cbnz	r0, 80191ca <_dtoa_r+0x99a>
 80191be:	4b82      	ldr	r3, [pc, #520]	@ (80193c8 <_dtoa_r+0xb98>)
 80191c0:	4602      	mov	r2, r0
 80191c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80191c6:	f7ff bb4a 	b.w	801885e <_dtoa_r+0x2e>
 80191ca:	692a      	ldr	r2, [r5, #16]
 80191cc:	3202      	adds	r2, #2
 80191ce:	0092      	lsls	r2, r2, #2
 80191d0:	f105 010c 	add.w	r1, r5, #12
 80191d4:	300c      	adds	r0, #12
 80191d6:	f7ff fa8c 	bl	80186f2 <memcpy>
 80191da:	2201      	movs	r2, #1
 80191dc:	4631      	mov	r1, r6
 80191de:	4648      	mov	r0, r9
 80191e0:	f000 fedc 	bl	8019f9c <__lshift>
 80191e4:	f10a 0301 	add.w	r3, sl, #1
 80191e8:	9300      	str	r3, [sp, #0]
 80191ea:	eb0a 030b 	add.w	r3, sl, fp
 80191ee:	9308      	str	r3, [sp, #32]
 80191f0:	9b04      	ldr	r3, [sp, #16]
 80191f2:	f003 0301 	and.w	r3, r3, #1
 80191f6:	462f      	mov	r7, r5
 80191f8:	9306      	str	r3, [sp, #24]
 80191fa:	4605      	mov	r5, r0
 80191fc:	9b00      	ldr	r3, [sp, #0]
 80191fe:	9802      	ldr	r0, [sp, #8]
 8019200:	4621      	mov	r1, r4
 8019202:	f103 3bff 	add.w	fp, r3, #4294967295
 8019206:	f7ff fa8b 	bl	8018720 <quorem>
 801920a:	4603      	mov	r3, r0
 801920c:	3330      	adds	r3, #48	@ 0x30
 801920e:	9003      	str	r0, [sp, #12]
 8019210:	4639      	mov	r1, r7
 8019212:	9802      	ldr	r0, [sp, #8]
 8019214:	9309      	str	r3, [sp, #36]	@ 0x24
 8019216:	f000 ff2d 	bl	801a074 <__mcmp>
 801921a:	462a      	mov	r2, r5
 801921c:	9004      	str	r0, [sp, #16]
 801921e:	4621      	mov	r1, r4
 8019220:	4648      	mov	r0, r9
 8019222:	f000 ff43 	bl	801a0ac <__mdiff>
 8019226:	68c2      	ldr	r2, [r0, #12]
 8019228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801922a:	4606      	mov	r6, r0
 801922c:	bb02      	cbnz	r2, 8019270 <_dtoa_r+0xa40>
 801922e:	4601      	mov	r1, r0
 8019230:	9802      	ldr	r0, [sp, #8]
 8019232:	f000 ff1f 	bl	801a074 <__mcmp>
 8019236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019238:	4602      	mov	r2, r0
 801923a:	4631      	mov	r1, r6
 801923c:	4648      	mov	r0, r9
 801923e:	920c      	str	r2, [sp, #48]	@ 0x30
 8019240:	9309      	str	r3, [sp, #36]	@ 0x24
 8019242:	f000 fc9b 	bl	8019b7c <_Bfree>
 8019246:	9b07      	ldr	r3, [sp, #28]
 8019248:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801924a:	9e00      	ldr	r6, [sp, #0]
 801924c:	ea42 0103 	orr.w	r1, r2, r3
 8019250:	9b06      	ldr	r3, [sp, #24]
 8019252:	4319      	orrs	r1, r3
 8019254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019256:	d10d      	bne.n	8019274 <_dtoa_r+0xa44>
 8019258:	2b39      	cmp	r3, #57	@ 0x39
 801925a:	d027      	beq.n	80192ac <_dtoa_r+0xa7c>
 801925c:	9a04      	ldr	r2, [sp, #16]
 801925e:	2a00      	cmp	r2, #0
 8019260:	dd01      	ble.n	8019266 <_dtoa_r+0xa36>
 8019262:	9b03      	ldr	r3, [sp, #12]
 8019264:	3331      	adds	r3, #49	@ 0x31
 8019266:	f88b 3000 	strb.w	r3, [fp]
 801926a:	e52e      	b.n	8018cca <_dtoa_r+0x49a>
 801926c:	4628      	mov	r0, r5
 801926e:	e7b9      	b.n	80191e4 <_dtoa_r+0x9b4>
 8019270:	2201      	movs	r2, #1
 8019272:	e7e2      	b.n	801923a <_dtoa_r+0xa0a>
 8019274:	9904      	ldr	r1, [sp, #16]
 8019276:	2900      	cmp	r1, #0
 8019278:	db04      	blt.n	8019284 <_dtoa_r+0xa54>
 801927a:	9807      	ldr	r0, [sp, #28]
 801927c:	4301      	orrs	r1, r0
 801927e:	9806      	ldr	r0, [sp, #24]
 8019280:	4301      	orrs	r1, r0
 8019282:	d120      	bne.n	80192c6 <_dtoa_r+0xa96>
 8019284:	2a00      	cmp	r2, #0
 8019286:	ddee      	ble.n	8019266 <_dtoa_r+0xa36>
 8019288:	9902      	ldr	r1, [sp, #8]
 801928a:	9300      	str	r3, [sp, #0]
 801928c:	2201      	movs	r2, #1
 801928e:	4648      	mov	r0, r9
 8019290:	f000 fe84 	bl	8019f9c <__lshift>
 8019294:	4621      	mov	r1, r4
 8019296:	9002      	str	r0, [sp, #8]
 8019298:	f000 feec 	bl	801a074 <__mcmp>
 801929c:	2800      	cmp	r0, #0
 801929e:	9b00      	ldr	r3, [sp, #0]
 80192a0:	dc02      	bgt.n	80192a8 <_dtoa_r+0xa78>
 80192a2:	d1e0      	bne.n	8019266 <_dtoa_r+0xa36>
 80192a4:	07da      	lsls	r2, r3, #31
 80192a6:	d5de      	bpl.n	8019266 <_dtoa_r+0xa36>
 80192a8:	2b39      	cmp	r3, #57	@ 0x39
 80192aa:	d1da      	bne.n	8019262 <_dtoa_r+0xa32>
 80192ac:	2339      	movs	r3, #57	@ 0x39
 80192ae:	f88b 3000 	strb.w	r3, [fp]
 80192b2:	4633      	mov	r3, r6
 80192b4:	461e      	mov	r6, r3
 80192b6:	3b01      	subs	r3, #1
 80192b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80192bc:	2a39      	cmp	r2, #57	@ 0x39
 80192be:	d04e      	beq.n	801935e <_dtoa_r+0xb2e>
 80192c0:	3201      	adds	r2, #1
 80192c2:	701a      	strb	r2, [r3, #0]
 80192c4:	e501      	b.n	8018cca <_dtoa_r+0x49a>
 80192c6:	2a00      	cmp	r2, #0
 80192c8:	dd03      	ble.n	80192d2 <_dtoa_r+0xaa2>
 80192ca:	2b39      	cmp	r3, #57	@ 0x39
 80192cc:	d0ee      	beq.n	80192ac <_dtoa_r+0xa7c>
 80192ce:	3301      	adds	r3, #1
 80192d0:	e7c9      	b.n	8019266 <_dtoa_r+0xa36>
 80192d2:	9a00      	ldr	r2, [sp, #0]
 80192d4:	9908      	ldr	r1, [sp, #32]
 80192d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80192da:	428a      	cmp	r2, r1
 80192dc:	d028      	beq.n	8019330 <_dtoa_r+0xb00>
 80192de:	9902      	ldr	r1, [sp, #8]
 80192e0:	2300      	movs	r3, #0
 80192e2:	220a      	movs	r2, #10
 80192e4:	4648      	mov	r0, r9
 80192e6:	f000 fc6b 	bl	8019bc0 <__multadd>
 80192ea:	42af      	cmp	r7, r5
 80192ec:	9002      	str	r0, [sp, #8]
 80192ee:	f04f 0300 	mov.w	r3, #0
 80192f2:	f04f 020a 	mov.w	r2, #10
 80192f6:	4639      	mov	r1, r7
 80192f8:	4648      	mov	r0, r9
 80192fa:	d107      	bne.n	801930c <_dtoa_r+0xadc>
 80192fc:	f000 fc60 	bl	8019bc0 <__multadd>
 8019300:	4607      	mov	r7, r0
 8019302:	4605      	mov	r5, r0
 8019304:	9b00      	ldr	r3, [sp, #0]
 8019306:	3301      	adds	r3, #1
 8019308:	9300      	str	r3, [sp, #0]
 801930a:	e777      	b.n	80191fc <_dtoa_r+0x9cc>
 801930c:	f000 fc58 	bl	8019bc0 <__multadd>
 8019310:	4629      	mov	r1, r5
 8019312:	4607      	mov	r7, r0
 8019314:	2300      	movs	r3, #0
 8019316:	220a      	movs	r2, #10
 8019318:	4648      	mov	r0, r9
 801931a:	f000 fc51 	bl	8019bc0 <__multadd>
 801931e:	4605      	mov	r5, r0
 8019320:	e7f0      	b.n	8019304 <_dtoa_r+0xad4>
 8019322:	f1bb 0f00 	cmp.w	fp, #0
 8019326:	bfcc      	ite	gt
 8019328:	465e      	movgt	r6, fp
 801932a:	2601      	movle	r6, #1
 801932c:	4456      	add	r6, sl
 801932e:	2700      	movs	r7, #0
 8019330:	9902      	ldr	r1, [sp, #8]
 8019332:	9300      	str	r3, [sp, #0]
 8019334:	2201      	movs	r2, #1
 8019336:	4648      	mov	r0, r9
 8019338:	f000 fe30 	bl	8019f9c <__lshift>
 801933c:	4621      	mov	r1, r4
 801933e:	9002      	str	r0, [sp, #8]
 8019340:	f000 fe98 	bl	801a074 <__mcmp>
 8019344:	2800      	cmp	r0, #0
 8019346:	dcb4      	bgt.n	80192b2 <_dtoa_r+0xa82>
 8019348:	d102      	bne.n	8019350 <_dtoa_r+0xb20>
 801934a:	9b00      	ldr	r3, [sp, #0]
 801934c:	07db      	lsls	r3, r3, #31
 801934e:	d4b0      	bmi.n	80192b2 <_dtoa_r+0xa82>
 8019350:	4633      	mov	r3, r6
 8019352:	461e      	mov	r6, r3
 8019354:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019358:	2a30      	cmp	r2, #48	@ 0x30
 801935a:	d0fa      	beq.n	8019352 <_dtoa_r+0xb22>
 801935c:	e4b5      	b.n	8018cca <_dtoa_r+0x49a>
 801935e:	459a      	cmp	sl, r3
 8019360:	d1a8      	bne.n	80192b4 <_dtoa_r+0xa84>
 8019362:	2331      	movs	r3, #49	@ 0x31
 8019364:	f108 0801 	add.w	r8, r8, #1
 8019368:	f88a 3000 	strb.w	r3, [sl]
 801936c:	e4ad      	b.n	8018cca <_dtoa_r+0x49a>
 801936e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8019370:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80193cc <_dtoa_r+0xb9c>
 8019374:	b11b      	cbz	r3, 801937e <_dtoa_r+0xb4e>
 8019376:	f10a 0308 	add.w	r3, sl, #8
 801937a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801937c:	6013      	str	r3, [r2, #0]
 801937e:	4650      	mov	r0, sl
 8019380:	b017      	add	sp, #92	@ 0x5c
 8019382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019386:	9b07      	ldr	r3, [sp, #28]
 8019388:	2b01      	cmp	r3, #1
 801938a:	f77f ae2e 	ble.w	8018fea <_dtoa_r+0x7ba>
 801938e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019390:	9308      	str	r3, [sp, #32]
 8019392:	2001      	movs	r0, #1
 8019394:	e64d      	b.n	8019032 <_dtoa_r+0x802>
 8019396:	f1bb 0f00 	cmp.w	fp, #0
 801939a:	f77f aed9 	ble.w	8019150 <_dtoa_r+0x920>
 801939e:	4656      	mov	r6, sl
 80193a0:	9802      	ldr	r0, [sp, #8]
 80193a2:	4621      	mov	r1, r4
 80193a4:	f7ff f9bc 	bl	8018720 <quorem>
 80193a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80193ac:	f806 3b01 	strb.w	r3, [r6], #1
 80193b0:	eba6 020a 	sub.w	r2, r6, sl
 80193b4:	4593      	cmp	fp, r2
 80193b6:	ddb4      	ble.n	8019322 <_dtoa_r+0xaf2>
 80193b8:	9902      	ldr	r1, [sp, #8]
 80193ba:	2300      	movs	r3, #0
 80193bc:	220a      	movs	r2, #10
 80193be:	4648      	mov	r0, r9
 80193c0:	f000 fbfe 	bl	8019bc0 <__multadd>
 80193c4:	9002      	str	r0, [sp, #8]
 80193c6:	e7eb      	b.n	80193a0 <_dtoa_r+0xb70>
 80193c8:	0801dbd0 	.word	0x0801dbd0
 80193cc:	0801db54 	.word	0x0801db54

080193d0 <_free_r>:
 80193d0:	b538      	push	{r3, r4, r5, lr}
 80193d2:	4605      	mov	r5, r0
 80193d4:	2900      	cmp	r1, #0
 80193d6:	d041      	beq.n	801945c <_free_r+0x8c>
 80193d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80193dc:	1f0c      	subs	r4, r1, #4
 80193de:	2b00      	cmp	r3, #0
 80193e0:	bfb8      	it	lt
 80193e2:	18e4      	addlt	r4, r4, r3
 80193e4:	f7fd fbb0 	bl	8016b48 <__malloc_lock>
 80193e8:	4a1d      	ldr	r2, [pc, #116]	@ (8019460 <_free_r+0x90>)
 80193ea:	6813      	ldr	r3, [r2, #0]
 80193ec:	b933      	cbnz	r3, 80193fc <_free_r+0x2c>
 80193ee:	6063      	str	r3, [r4, #4]
 80193f0:	6014      	str	r4, [r2, #0]
 80193f2:	4628      	mov	r0, r5
 80193f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80193f8:	f7fd bbac 	b.w	8016b54 <__malloc_unlock>
 80193fc:	42a3      	cmp	r3, r4
 80193fe:	d908      	bls.n	8019412 <_free_r+0x42>
 8019400:	6820      	ldr	r0, [r4, #0]
 8019402:	1821      	adds	r1, r4, r0
 8019404:	428b      	cmp	r3, r1
 8019406:	bf01      	itttt	eq
 8019408:	6819      	ldreq	r1, [r3, #0]
 801940a:	685b      	ldreq	r3, [r3, #4]
 801940c:	1809      	addeq	r1, r1, r0
 801940e:	6021      	streq	r1, [r4, #0]
 8019410:	e7ed      	b.n	80193ee <_free_r+0x1e>
 8019412:	461a      	mov	r2, r3
 8019414:	685b      	ldr	r3, [r3, #4]
 8019416:	b10b      	cbz	r3, 801941c <_free_r+0x4c>
 8019418:	42a3      	cmp	r3, r4
 801941a:	d9fa      	bls.n	8019412 <_free_r+0x42>
 801941c:	6811      	ldr	r1, [r2, #0]
 801941e:	1850      	adds	r0, r2, r1
 8019420:	42a0      	cmp	r0, r4
 8019422:	d10b      	bne.n	801943c <_free_r+0x6c>
 8019424:	6820      	ldr	r0, [r4, #0]
 8019426:	4401      	add	r1, r0
 8019428:	1850      	adds	r0, r2, r1
 801942a:	4283      	cmp	r3, r0
 801942c:	6011      	str	r1, [r2, #0]
 801942e:	d1e0      	bne.n	80193f2 <_free_r+0x22>
 8019430:	6818      	ldr	r0, [r3, #0]
 8019432:	685b      	ldr	r3, [r3, #4]
 8019434:	6053      	str	r3, [r2, #4]
 8019436:	4408      	add	r0, r1
 8019438:	6010      	str	r0, [r2, #0]
 801943a:	e7da      	b.n	80193f2 <_free_r+0x22>
 801943c:	d902      	bls.n	8019444 <_free_r+0x74>
 801943e:	230c      	movs	r3, #12
 8019440:	602b      	str	r3, [r5, #0]
 8019442:	e7d6      	b.n	80193f2 <_free_r+0x22>
 8019444:	6820      	ldr	r0, [r4, #0]
 8019446:	1821      	adds	r1, r4, r0
 8019448:	428b      	cmp	r3, r1
 801944a:	bf04      	itt	eq
 801944c:	6819      	ldreq	r1, [r3, #0]
 801944e:	685b      	ldreq	r3, [r3, #4]
 8019450:	6063      	str	r3, [r4, #4]
 8019452:	bf04      	itt	eq
 8019454:	1809      	addeq	r1, r1, r0
 8019456:	6021      	streq	r1, [r4, #0]
 8019458:	6054      	str	r4, [r2, #4]
 801945a:	e7ca      	b.n	80193f2 <_free_r+0x22>
 801945c:	bd38      	pop	{r3, r4, r5, pc}
 801945e:	bf00      	nop
 8019460:	20014280 	.word	0x20014280

08019464 <rshift>:
 8019464:	6903      	ldr	r3, [r0, #16]
 8019466:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801946a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801946e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019472:	f100 0414 	add.w	r4, r0, #20
 8019476:	dd45      	ble.n	8019504 <rshift+0xa0>
 8019478:	f011 011f 	ands.w	r1, r1, #31
 801947c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019480:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019484:	d10c      	bne.n	80194a0 <rshift+0x3c>
 8019486:	f100 0710 	add.w	r7, r0, #16
 801948a:	4629      	mov	r1, r5
 801948c:	42b1      	cmp	r1, r6
 801948e:	d334      	bcc.n	80194fa <rshift+0x96>
 8019490:	1a9b      	subs	r3, r3, r2
 8019492:	009b      	lsls	r3, r3, #2
 8019494:	1eea      	subs	r2, r5, #3
 8019496:	4296      	cmp	r6, r2
 8019498:	bf38      	it	cc
 801949a:	2300      	movcc	r3, #0
 801949c:	4423      	add	r3, r4
 801949e:	e015      	b.n	80194cc <rshift+0x68>
 80194a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80194a4:	f1c1 0820 	rsb	r8, r1, #32
 80194a8:	40cf      	lsrs	r7, r1
 80194aa:	f105 0e04 	add.w	lr, r5, #4
 80194ae:	46a1      	mov	r9, r4
 80194b0:	4576      	cmp	r6, lr
 80194b2:	46f4      	mov	ip, lr
 80194b4:	d815      	bhi.n	80194e2 <rshift+0x7e>
 80194b6:	1a9a      	subs	r2, r3, r2
 80194b8:	0092      	lsls	r2, r2, #2
 80194ba:	3a04      	subs	r2, #4
 80194bc:	3501      	adds	r5, #1
 80194be:	42ae      	cmp	r6, r5
 80194c0:	bf38      	it	cc
 80194c2:	2200      	movcc	r2, #0
 80194c4:	18a3      	adds	r3, r4, r2
 80194c6:	50a7      	str	r7, [r4, r2]
 80194c8:	b107      	cbz	r7, 80194cc <rshift+0x68>
 80194ca:	3304      	adds	r3, #4
 80194cc:	1b1a      	subs	r2, r3, r4
 80194ce:	42a3      	cmp	r3, r4
 80194d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80194d4:	bf08      	it	eq
 80194d6:	2300      	moveq	r3, #0
 80194d8:	6102      	str	r2, [r0, #16]
 80194da:	bf08      	it	eq
 80194dc:	6143      	streq	r3, [r0, #20]
 80194de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194e2:	f8dc c000 	ldr.w	ip, [ip]
 80194e6:	fa0c fc08 	lsl.w	ip, ip, r8
 80194ea:	ea4c 0707 	orr.w	r7, ip, r7
 80194ee:	f849 7b04 	str.w	r7, [r9], #4
 80194f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80194f6:	40cf      	lsrs	r7, r1
 80194f8:	e7da      	b.n	80194b0 <rshift+0x4c>
 80194fa:	f851 cb04 	ldr.w	ip, [r1], #4
 80194fe:	f847 cf04 	str.w	ip, [r7, #4]!
 8019502:	e7c3      	b.n	801948c <rshift+0x28>
 8019504:	4623      	mov	r3, r4
 8019506:	e7e1      	b.n	80194cc <rshift+0x68>

08019508 <__hexdig_fun>:
 8019508:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801950c:	2b09      	cmp	r3, #9
 801950e:	d802      	bhi.n	8019516 <__hexdig_fun+0xe>
 8019510:	3820      	subs	r0, #32
 8019512:	b2c0      	uxtb	r0, r0
 8019514:	4770      	bx	lr
 8019516:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801951a:	2b05      	cmp	r3, #5
 801951c:	d801      	bhi.n	8019522 <__hexdig_fun+0x1a>
 801951e:	3847      	subs	r0, #71	@ 0x47
 8019520:	e7f7      	b.n	8019512 <__hexdig_fun+0xa>
 8019522:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8019526:	2b05      	cmp	r3, #5
 8019528:	d801      	bhi.n	801952e <__hexdig_fun+0x26>
 801952a:	3827      	subs	r0, #39	@ 0x27
 801952c:	e7f1      	b.n	8019512 <__hexdig_fun+0xa>
 801952e:	2000      	movs	r0, #0
 8019530:	4770      	bx	lr
	...

08019534 <__gethex>:
 8019534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019538:	b085      	sub	sp, #20
 801953a:	468a      	mov	sl, r1
 801953c:	9302      	str	r3, [sp, #8]
 801953e:	680b      	ldr	r3, [r1, #0]
 8019540:	9001      	str	r0, [sp, #4]
 8019542:	4690      	mov	r8, r2
 8019544:	1c9c      	adds	r4, r3, #2
 8019546:	46a1      	mov	r9, r4
 8019548:	f814 0b01 	ldrb.w	r0, [r4], #1
 801954c:	2830      	cmp	r0, #48	@ 0x30
 801954e:	d0fa      	beq.n	8019546 <__gethex+0x12>
 8019550:	eba9 0303 	sub.w	r3, r9, r3
 8019554:	f1a3 0b02 	sub.w	fp, r3, #2
 8019558:	f7ff ffd6 	bl	8019508 <__hexdig_fun>
 801955c:	4605      	mov	r5, r0
 801955e:	2800      	cmp	r0, #0
 8019560:	d168      	bne.n	8019634 <__gethex+0x100>
 8019562:	49a0      	ldr	r1, [pc, #640]	@ (80197e4 <__gethex+0x2b0>)
 8019564:	2201      	movs	r2, #1
 8019566:	4648      	mov	r0, r9
 8019568:	f7fe fff8 	bl	801855c <strncmp>
 801956c:	4607      	mov	r7, r0
 801956e:	2800      	cmp	r0, #0
 8019570:	d167      	bne.n	8019642 <__gethex+0x10e>
 8019572:	f899 0001 	ldrb.w	r0, [r9, #1]
 8019576:	4626      	mov	r6, r4
 8019578:	f7ff ffc6 	bl	8019508 <__hexdig_fun>
 801957c:	2800      	cmp	r0, #0
 801957e:	d062      	beq.n	8019646 <__gethex+0x112>
 8019580:	4623      	mov	r3, r4
 8019582:	7818      	ldrb	r0, [r3, #0]
 8019584:	2830      	cmp	r0, #48	@ 0x30
 8019586:	4699      	mov	r9, r3
 8019588:	f103 0301 	add.w	r3, r3, #1
 801958c:	d0f9      	beq.n	8019582 <__gethex+0x4e>
 801958e:	f7ff ffbb 	bl	8019508 <__hexdig_fun>
 8019592:	fab0 f580 	clz	r5, r0
 8019596:	096d      	lsrs	r5, r5, #5
 8019598:	f04f 0b01 	mov.w	fp, #1
 801959c:	464a      	mov	r2, r9
 801959e:	4616      	mov	r6, r2
 80195a0:	3201      	adds	r2, #1
 80195a2:	7830      	ldrb	r0, [r6, #0]
 80195a4:	f7ff ffb0 	bl	8019508 <__hexdig_fun>
 80195a8:	2800      	cmp	r0, #0
 80195aa:	d1f8      	bne.n	801959e <__gethex+0x6a>
 80195ac:	498d      	ldr	r1, [pc, #564]	@ (80197e4 <__gethex+0x2b0>)
 80195ae:	2201      	movs	r2, #1
 80195b0:	4630      	mov	r0, r6
 80195b2:	f7fe ffd3 	bl	801855c <strncmp>
 80195b6:	2800      	cmp	r0, #0
 80195b8:	d13f      	bne.n	801963a <__gethex+0x106>
 80195ba:	b944      	cbnz	r4, 80195ce <__gethex+0x9a>
 80195bc:	1c74      	adds	r4, r6, #1
 80195be:	4622      	mov	r2, r4
 80195c0:	4616      	mov	r6, r2
 80195c2:	3201      	adds	r2, #1
 80195c4:	7830      	ldrb	r0, [r6, #0]
 80195c6:	f7ff ff9f 	bl	8019508 <__hexdig_fun>
 80195ca:	2800      	cmp	r0, #0
 80195cc:	d1f8      	bne.n	80195c0 <__gethex+0x8c>
 80195ce:	1ba4      	subs	r4, r4, r6
 80195d0:	00a7      	lsls	r7, r4, #2
 80195d2:	7833      	ldrb	r3, [r6, #0]
 80195d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80195d8:	2b50      	cmp	r3, #80	@ 0x50
 80195da:	d13e      	bne.n	801965a <__gethex+0x126>
 80195dc:	7873      	ldrb	r3, [r6, #1]
 80195de:	2b2b      	cmp	r3, #43	@ 0x2b
 80195e0:	d033      	beq.n	801964a <__gethex+0x116>
 80195e2:	2b2d      	cmp	r3, #45	@ 0x2d
 80195e4:	d034      	beq.n	8019650 <__gethex+0x11c>
 80195e6:	1c71      	adds	r1, r6, #1
 80195e8:	2400      	movs	r4, #0
 80195ea:	7808      	ldrb	r0, [r1, #0]
 80195ec:	f7ff ff8c 	bl	8019508 <__hexdig_fun>
 80195f0:	1e43      	subs	r3, r0, #1
 80195f2:	b2db      	uxtb	r3, r3
 80195f4:	2b18      	cmp	r3, #24
 80195f6:	d830      	bhi.n	801965a <__gethex+0x126>
 80195f8:	f1a0 0210 	sub.w	r2, r0, #16
 80195fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019600:	f7ff ff82 	bl	8019508 <__hexdig_fun>
 8019604:	f100 3cff 	add.w	ip, r0, #4294967295
 8019608:	fa5f fc8c 	uxtb.w	ip, ip
 801960c:	f1bc 0f18 	cmp.w	ip, #24
 8019610:	f04f 030a 	mov.w	r3, #10
 8019614:	d91e      	bls.n	8019654 <__gethex+0x120>
 8019616:	b104      	cbz	r4, 801961a <__gethex+0xe6>
 8019618:	4252      	negs	r2, r2
 801961a:	4417      	add	r7, r2
 801961c:	f8ca 1000 	str.w	r1, [sl]
 8019620:	b1ed      	cbz	r5, 801965e <__gethex+0x12a>
 8019622:	f1bb 0f00 	cmp.w	fp, #0
 8019626:	bf0c      	ite	eq
 8019628:	2506      	moveq	r5, #6
 801962a:	2500      	movne	r5, #0
 801962c:	4628      	mov	r0, r5
 801962e:	b005      	add	sp, #20
 8019630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019634:	2500      	movs	r5, #0
 8019636:	462c      	mov	r4, r5
 8019638:	e7b0      	b.n	801959c <__gethex+0x68>
 801963a:	2c00      	cmp	r4, #0
 801963c:	d1c7      	bne.n	80195ce <__gethex+0x9a>
 801963e:	4627      	mov	r7, r4
 8019640:	e7c7      	b.n	80195d2 <__gethex+0x9e>
 8019642:	464e      	mov	r6, r9
 8019644:	462f      	mov	r7, r5
 8019646:	2501      	movs	r5, #1
 8019648:	e7c3      	b.n	80195d2 <__gethex+0x9e>
 801964a:	2400      	movs	r4, #0
 801964c:	1cb1      	adds	r1, r6, #2
 801964e:	e7cc      	b.n	80195ea <__gethex+0xb6>
 8019650:	2401      	movs	r4, #1
 8019652:	e7fb      	b.n	801964c <__gethex+0x118>
 8019654:	fb03 0002 	mla	r0, r3, r2, r0
 8019658:	e7ce      	b.n	80195f8 <__gethex+0xc4>
 801965a:	4631      	mov	r1, r6
 801965c:	e7de      	b.n	801961c <__gethex+0xe8>
 801965e:	eba6 0309 	sub.w	r3, r6, r9
 8019662:	3b01      	subs	r3, #1
 8019664:	4629      	mov	r1, r5
 8019666:	2b07      	cmp	r3, #7
 8019668:	dc0a      	bgt.n	8019680 <__gethex+0x14c>
 801966a:	9801      	ldr	r0, [sp, #4]
 801966c:	f000 fa46 	bl	8019afc <_Balloc>
 8019670:	4604      	mov	r4, r0
 8019672:	b940      	cbnz	r0, 8019686 <__gethex+0x152>
 8019674:	4b5c      	ldr	r3, [pc, #368]	@ (80197e8 <__gethex+0x2b4>)
 8019676:	4602      	mov	r2, r0
 8019678:	21e4      	movs	r1, #228	@ 0xe4
 801967a:	485c      	ldr	r0, [pc, #368]	@ (80197ec <__gethex+0x2b8>)
 801967c:	f001 fd30 	bl	801b0e0 <__assert_func>
 8019680:	3101      	adds	r1, #1
 8019682:	105b      	asrs	r3, r3, #1
 8019684:	e7ef      	b.n	8019666 <__gethex+0x132>
 8019686:	f100 0a14 	add.w	sl, r0, #20
 801968a:	2300      	movs	r3, #0
 801968c:	4655      	mov	r5, sl
 801968e:	469b      	mov	fp, r3
 8019690:	45b1      	cmp	r9, r6
 8019692:	d337      	bcc.n	8019704 <__gethex+0x1d0>
 8019694:	f845 bb04 	str.w	fp, [r5], #4
 8019698:	eba5 050a 	sub.w	r5, r5, sl
 801969c:	10ad      	asrs	r5, r5, #2
 801969e:	6125      	str	r5, [r4, #16]
 80196a0:	4658      	mov	r0, fp
 80196a2:	f000 fb1d 	bl	8019ce0 <__hi0bits>
 80196a6:	016d      	lsls	r5, r5, #5
 80196a8:	f8d8 6000 	ldr.w	r6, [r8]
 80196ac:	1a2d      	subs	r5, r5, r0
 80196ae:	42b5      	cmp	r5, r6
 80196b0:	dd54      	ble.n	801975c <__gethex+0x228>
 80196b2:	1bad      	subs	r5, r5, r6
 80196b4:	4629      	mov	r1, r5
 80196b6:	4620      	mov	r0, r4
 80196b8:	f000 fea9 	bl	801a40e <__any_on>
 80196bc:	4681      	mov	r9, r0
 80196be:	b178      	cbz	r0, 80196e0 <__gethex+0x1ac>
 80196c0:	1e6b      	subs	r3, r5, #1
 80196c2:	1159      	asrs	r1, r3, #5
 80196c4:	f003 021f 	and.w	r2, r3, #31
 80196c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80196cc:	f04f 0901 	mov.w	r9, #1
 80196d0:	fa09 f202 	lsl.w	r2, r9, r2
 80196d4:	420a      	tst	r2, r1
 80196d6:	d003      	beq.n	80196e0 <__gethex+0x1ac>
 80196d8:	454b      	cmp	r3, r9
 80196da:	dc36      	bgt.n	801974a <__gethex+0x216>
 80196dc:	f04f 0902 	mov.w	r9, #2
 80196e0:	4629      	mov	r1, r5
 80196e2:	4620      	mov	r0, r4
 80196e4:	f7ff febe 	bl	8019464 <rshift>
 80196e8:	442f      	add	r7, r5
 80196ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80196ee:	42bb      	cmp	r3, r7
 80196f0:	da42      	bge.n	8019778 <__gethex+0x244>
 80196f2:	9801      	ldr	r0, [sp, #4]
 80196f4:	4621      	mov	r1, r4
 80196f6:	f000 fa41 	bl	8019b7c <_Bfree>
 80196fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80196fc:	2300      	movs	r3, #0
 80196fe:	6013      	str	r3, [r2, #0]
 8019700:	25a3      	movs	r5, #163	@ 0xa3
 8019702:	e793      	b.n	801962c <__gethex+0xf8>
 8019704:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8019708:	2a2e      	cmp	r2, #46	@ 0x2e
 801970a:	d012      	beq.n	8019732 <__gethex+0x1fe>
 801970c:	2b20      	cmp	r3, #32
 801970e:	d104      	bne.n	801971a <__gethex+0x1e6>
 8019710:	f845 bb04 	str.w	fp, [r5], #4
 8019714:	f04f 0b00 	mov.w	fp, #0
 8019718:	465b      	mov	r3, fp
 801971a:	7830      	ldrb	r0, [r6, #0]
 801971c:	9303      	str	r3, [sp, #12]
 801971e:	f7ff fef3 	bl	8019508 <__hexdig_fun>
 8019722:	9b03      	ldr	r3, [sp, #12]
 8019724:	f000 000f 	and.w	r0, r0, #15
 8019728:	4098      	lsls	r0, r3
 801972a:	ea4b 0b00 	orr.w	fp, fp, r0
 801972e:	3304      	adds	r3, #4
 8019730:	e7ae      	b.n	8019690 <__gethex+0x15c>
 8019732:	45b1      	cmp	r9, r6
 8019734:	d8ea      	bhi.n	801970c <__gethex+0x1d8>
 8019736:	492b      	ldr	r1, [pc, #172]	@ (80197e4 <__gethex+0x2b0>)
 8019738:	9303      	str	r3, [sp, #12]
 801973a:	2201      	movs	r2, #1
 801973c:	4630      	mov	r0, r6
 801973e:	f7fe ff0d 	bl	801855c <strncmp>
 8019742:	9b03      	ldr	r3, [sp, #12]
 8019744:	2800      	cmp	r0, #0
 8019746:	d1e1      	bne.n	801970c <__gethex+0x1d8>
 8019748:	e7a2      	b.n	8019690 <__gethex+0x15c>
 801974a:	1ea9      	subs	r1, r5, #2
 801974c:	4620      	mov	r0, r4
 801974e:	f000 fe5e 	bl	801a40e <__any_on>
 8019752:	2800      	cmp	r0, #0
 8019754:	d0c2      	beq.n	80196dc <__gethex+0x1a8>
 8019756:	f04f 0903 	mov.w	r9, #3
 801975a:	e7c1      	b.n	80196e0 <__gethex+0x1ac>
 801975c:	da09      	bge.n	8019772 <__gethex+0x23e>
 801975e:	1b75      	subs	r5, r6, r5
 8019760:	4621      	mov	r1, r4
 8019762:	9801      	ldr	r0, [sp, #4]
 8019764:	462a      	mov	r2, r5
 8019766:	f000 fc19 	bl	8019f9c <__lshift>
 801976a:	1b7f      	subs	r7, r7, r5
 801976c:	4604      	mov	r4, r0
 801976e:	f100 0a14 	add.w	sl, r0, #20
 8019772:	f04f 0900 	mov.w	r9, #0
 8019776:	e7b8      	b.n	80196ea <__gethex+0x1b6>
 8019778:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801977c:	42bd      	cmp	r5, r7
 801977e:	dd6f      	ble.n	8019860 <__gethex+0x32c>
 8019780:	1bed      	subs	r5, r5, r7
 8019782:	42ae      	cmp	r6, r5
 8019784:	dc34      	bgt.n	80197f0 <__gethex+0x2bc>
 8019786:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801978a:	2b02      	cmp	r3, #2
 801978c:	d022      	beq.n	80197d4 <__gethex+0x2a0>
 801978e:	2b03      	cmp	r3, #3
 8019790:	d024      	beq.n	80197dc <__gethex+0x2a8>
 8019792:	2b01      	cmp	r3, #1
 8019794:	d115      	bne.n	80197c2 <__gethex+0x28e>
 8019796:	42ae      	cmp	r6, r5
 8019798:	d113      	bne.n	80197c2 <__gethex+0x28e>
 801979a:	2e01      	cmp	r6, #1
 801979c:	d10b      	bne.n	80197b6 <__gethex+0x282>
 801979e:	9a02      	ldr	r2, [sp, #8]
 80197a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80197a4:	6013      	str	r3, [r2, #0]
 80197a6:	2301      	movs	r3, #1
 80197a8:	6123      	str	r3, [r4, #16]
 80197aa:	f8ca 3000 	str.w	r3, [sl]
 80197ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80197b0:	2562      	movs	r5, #98	@ 0x62
 80197b2:	601c      	str	r4, [r3, #0]
 80197b4:	e73a      	b.n	801962c <__gethex+0xf8>
 80197b6:	1e71      	subs	r1, r6, #1
 80197b8:	4620      	mov	r0, r4
 80197ba:	f000 fe28 	bl	801a40e <__any_on>
 80197be:	2800      	cmp	r0, #0
 80197c0:	d1ed      	bne.n	801979e <__gethex+0x26a>
 80197c2:	9801      	ldr	r0, [sp, #4]
 80197c4:	4621      	mov	r1, r4
 80197c6:	f000 f9d9 	bl	8019b7c <_Bfree>
 80197ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80197cc:	2300      	movs	r3, #0
 80197ce:	6013      	str	r3, [r2, #0]
 80197d0:	2550      	movs	r5, #80	@ 0x50
 80197d2:	e72b      	b.n	801962c <__gethex+0xf8>
 80197d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d1f3      	bne.n	80197c2 <__gethex+0x28e>
 80197da:	e7e0      	b.n	801979e <__gethex+0x26a>
 80197dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d1dd      	bne.n	801979e <__gethex+0x26a>
 80197e2:	e7ee      	b.n	80197c2 <__gethex+0x28e>
 80197e4:	0801db18 	.word	0x0801db18
 80197e8:	0801dbd0 	.word	0x0801dbd0
 80197ec:	0801dbe1 	.word	0x0801dbe1
 80197f0:	1e6f      	subs	r7, r5, #1
 80197f2:	f1b9 0f00 	cmp.w	r9, #0
 80197f6:	d130      	bne.n	801985a <__gethex+0x326>
 80197f8:	b127      	cbz	r7, 8019804 <__gethex+0x2d0>
 80197fa:	4639      	mov	r1, r7
 80197fc:	4620      	mov	r0, r4
 80197fe:	f000 fe06 	bl	801a40e <__any_on>
 8019802:	4681      	mov	r9, r0
 8019804:	117a      	asrs	r2, r7, #5
 8019806:	2301      	movs	r3, #1
 8019808:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801980c:	f007 071f 	and.w	r7, r7, #31
 8019810:	40bb      	lsls	r3, r7
 8019812:	4213      	tst	r3, r2
 8019814:	4629      	mov	r1, r5
 8019816:	4620      	mov	r0, r4
 8019818:	bf18      	it	ne
 801981a:	f049 0902 	orrne.w	r9, r9, #2
 801981e:	f7ff fe21 	bl	8019464 <rshift>
 8019822:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8019826:	1b76      	subs	r6, r6, r5
 8019828:	2502      	movs	r5, #2
 801982a:	f1b9 0f00 	cmp.w	r9, #0
 801982e:	d047      	beq.n	80198c0 <__gethex+0x38c>
 8019830:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019834:	2b02      	cmp	r3, #2
 8019836:	d015      	beq.n	8019864 <__gethex+0x330>
 8019838:	2b03      	cmp	r3, #3
 801983a:	d017      	beq.n	801986c <__gethex+0x338>
 801983c:	2b01      	cmp	r3, #1
 801983e:	d109      	bne.n	8019854 <__gethex+0x320>
 8019840:	f019 0f02 	tst.w	r9, #2
 8019844:	d006      	beq.n	8019854 <__gethex+0x320>
 8019846:	f8da 3000 	ldr.w	r3, [sl]
 801984a:	ea49 0903 	orr.w	r9, r9, r3
 801984e:	f019 0f01 	tst.w	r9, #1
 8019852:	d10e      	bne.n	8019872 <__gethex+0x33e>
 8019854:	f045 0510 	orr.w	r5, r5, #16
 8019858:	e032      	b.n	80198c0 <__gethex+0x38c>
 801985a:	f04f 0901 	mov.w	r9, #1
 801985e:	e7d1      	b.n	8019804 <__gethex+0x2d0>
 8019860:	2501      	movs	r5, #1
 8019862:	e7e2      	b.n	801982a <__gethex+0x2f6>
 8019864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019866:	f1c3 0301 	rsb	r3, r3, #1
 801986a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801986c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801986e:	2b00      	cmp	r3, #0
 8019870:	d0f0      	beq.n	8019854 <__gethex+0x320>
 8019872:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019876:	f104 0314 	add.w	r3, r4, #20
 801987a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801987e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019882:	f04f 0c00 	mov.w	ip, #0
 8019886:	4618      	mov	r0, r3
 8019888:	f853 2b04 	ldr.w	r2, [r3], #4
 801988c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019890:	d01b      	beq.n	80198ca <__gethex+0x396>
 8019892:	3201      	adds	r2, #1
 8019894:	6002      	str	r2, [r0, #0]
 8019896:	2d02      	cmp	r5, #2
 8019898:	f104 0314 	add.w	r3, r4, #20
 801989c:	d13c      	bne.n	8019918 <__gethex+0x3e4>
 801989e:	f8d8 2000 	ldr.w	r2, [r8]
 80198a2:	3a01      	subs	r2, #1
 80198a4:	42b2      	cmp	r2, r6
 80198a6:	d109      	bne.n	80198bc <__gethex+0x388>
 80198a8:	1171      	asrs	r1, r6, #5
 80198aa:	2201      	movs	r2, #1
 80198ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80198b0:	f006 061f 	and.w	r6, r6, #31
 80198b4:	fa02 f606 	lsl.w	r6, r2, r6
 80198b8:	421e      	tst	r6, r3
 80198ba:	d13a      	bne.n	8019932 <__gethex+0x3fe>
 80198bc:	f045 0520 	orr.w	r5, r5, #32
 80198c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80198c2:	601c      	str	r4, [r3, #0]
 80198c4:	9b02      	ldr	r3, [sp, #8]
 80198c6:	601f      	str	r7, [r3, #0]
 80198c8:	e6b0      	b.n	801962c <__gethex+0xf8>
 80198ca:	4299      	cmp	r1, r3
 80198cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80198d0:	d8d9      	bhi.n	8019886 <__gethex+0x352>
 80198d2:	68a3      	ldr	r3, [r4, #8]
 80198d4:	459b      	cmp	fp, r3
 80198d6:	db17      	blt.n	8019908 <__gethex+0x3d4>
 80198d8:	6861      	ldr	r1, [r4, #4]
 80198da:	9801      	ldr	r0, [sp, #4]
 80198dc:	3101      	adds	r1, #1
 80198de:	f000 f90d 	bl	8019afc <_Balloc>
 80198e2:	4681      	mov	r9, r0
 80198e4:	b918      	cbnz	r0, 80198ee <__gethex+0x3ba>
 80198e6:	4b1a      	ldr	r3, [pc, #104]	@ (8019950 <__gethex+0x41c>)
 80198e8:	4602      	mov	r2, r0
 80198ea:	2184      	movs	r1, #132	@ 0x84
 80198ec:	e6c5      	b.n	801967a <__gethex+0x146>
 80198ee:	6922      	ldr	r2, [r4, #16]
 80198f0:	3202      	adds	r2, #2
 80198f2:	f104 010c 	add.w	r1, r4, #12
 80198f6:	0092      	lsls	r2, r2, #2
 80198f8:	300c      	adds	r0, #12
 80198fa:	f7fe fefa 	bl	80186f2 <memcpy>
 80198fe:	4621      	mov	r1, r4
 8019900:	9801      	ldr	r0, [sp, #4]
 8019902:	f000 f93b 	bl	8019b7c <_Bfree>
 8019906:	464c      	mov	r4, r9
 8019908:	6923      	ldr	r3, [r4, #16]
 801990a:	1c5a      	adds	r2, r3, #1
 801990c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019910:	6122      	str	r2, [r4, #16]
 8019912:	2201      	movs	r2, #1
 8019914:	615a      	str	r2, [r3, #20]
 8019916:	e7be      	b.n	8019896 <__gethex+0x362>
 8019918:	6922      	ldr	r2, [r4, #16]
 801991a:	455a      	cmp	r2, fp
 801991c:	dd0b      	ble.n	8019936 <__gethex+0x402>
 801991e:	2101      	movs	r1, #1
 8019920:	4620      	mov	r0, r4
 8019922:	f7ff fd9f 	bl	8019464 <rshift>
 8019926:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801992a:	3701      	adds	r7, #1
 801992c:	42bb      	cmp	r3, r7
 801992e:	f6ff aee0 	blt.w	80196f2 <__gethex+0x1be>
 8019932:	2501      	movs	r5, #1
 8019934:	e7c2      	b.n	80198bc <__gethex+0x388>
 8019936:	f016 061f 	ands.w	r6, r6, #31
 801993a:	d0fa      	beq.n	8019932 <__gethex+0x3fe>
 801993c:	4453      	add	r3, sl
 801993e:	f1c6 0620 	rsb	r6, r6, #32
 8019942:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8019946:	f000 f9cb 	bl	8019ce0 <__hi0bits>
 801994a:	42b0      	cmp	r0, r6
 801994c:	dbe7      	blt.n	801991e <__gethex+0x3ea>
 801994e:	e7f0      	b.n	8019932 <__gethex+0x3fe>
 8019950:	0801dbd0 	.word	0x0801dbd0

08019954 <L_shift>:
 8019954:	f1c2 0208 	rsb	r2, r2, #8
 8019958:	0092      	lsls	r2, r2, #2
 801995a:	b570      	push	{r4, r5, r6, lr}
 801995c:	f1c2 0620 	rsb	r6, r2, #32
 8019960:	6843      	ldr	r3, [r0, #4]
 8019962:	6804      	ldr	r4, [r0, #0]
 8019964:	fa03 f506 	lsl.w	r5, r3, r6
 8019968:	432c      	orrs	r4, r5
 801996a:	40d3      	lsrs	r3, r2
 801996c:	6004      	str	r4, [r0, #0]
 801996e:	f840 3f04 	str.w	r3, [r0, #4]!
 8019972:	4288      	cmp	r0, r1
 8019974:	d3f4      	bcc.n	8019960 <L_shift+0xc>
 8019976:	bd70      	pop	{r4, r5, r6, pc}

08019978 <__match>:
 8019978:	b530      	push	{r4, r5, lr}
 801997a:	6803      	ldr	r3, [r0, #0]
 801997c:	3301      	adds	r3, #1
 801997e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019982:	b914      	cbnz	r4, 801998a <__match+0x12>
 8019984:	6003      	str	r3, [r0, #0]
 8019986:	2001      	movs	r0, #1
 8019988:	bd30      	pop	{r4, r5, pc}
 801998a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801998e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8019992:	2d19      	cmp	r5, #25
 8019994:	bf98      	it	ls
 8019996:	3220      	addls	r2, #32
 8019998:	42a2      	cmp	r2, r4
 801999a:	d0f0      	beq.n	801997e <__match+0x6>
 801999c:	2000      	movs	r0, #0
 801999e:	e7f3      	b.n	8019988 <__match+0x10>

080199a0 <__hexnan>:
 80199a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199a4:	680b      	ldr	r3, [r1, #0]
 80199a6:	6801      	ldr	r1, [r0, #0]
 80199a8:	115e      	asrs	r6, r3, #5
 80199aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80199ae:	f013 031f 	ands.w	r3, r3, #31
 80199b2:	b087      	sub	sp, #28
 80199b4:	bf18      	it	ne
 80199b6:	3604      	addne	r6, #4
 80199b8:	2500      	movs	r5, #0
 80199ba:	1f37      	subs	r7, r6, #4
 80199bc:	4682      	mov	sl, r0
 80199be:	4690      	mov	r8, r2
 80199c0:	9301      	str	r3, [sp, #4]
 80199c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80199c6:	46b9      	mov	r9, r7
 80199c8:	463c      	mov	r4, r7
 80199ca:	9502      	str	r5, [sp, #8]
 80199cc:	46ab      	mov	fp, r5
 80199ce:	784a      	ldrb	r2, [r1, #1]
 80199d0:	1c4b      	adds	r3, r1, #1
 80199d2:	9303      	str	r3, [sp, #12]
 80199d4:	b342      	cbz	r2, 8019a28 <__hexnan+0x88>
 80199d6:	4610      	mov	r0, r2
 80199d8:	9105      	str	r1, [sp, #20]
 80199da:	9204      	str	r2, [sp, #16]
 80199dc:	f7ff fd94 	bl	8019508 <__hexdig_fun>
 80199e0:	2800      	cmp	r0, #0
 80199e2:	d151      	bne.n	8019a88 <__hexnan+0xe8>
 80199e4:	9a04      	ldr	r2, [sp, #16]
 80199e6:	9905      	ldr	r1, [sp, #20]
 80199e8:	2a20      	cmp	r2, #32
 80199ea:	d818      	bhi.n	8019a1e <__hexnan+0x7e>
 80199ec:	9b02      	ldr	r3, [sp, #8]
 80199ee:	459b      	cmp	fp, r3
 80199f0:	dd13      	ble.n	8019a1a <__hexnan+0x7a>
 80199f2:	454c      	cmp	r4, r9
 80199f4:	d206      	bcs.n	8019a04 <__hexnan+0x64>
 80199f6:	2d07      	cmp	r5, #7
 80199f8:	dc04      	bgt.n	8019a04 <__hexnan+0x64>
 80199fa:	462a      	mov	r2, r5
 80199fc:	4649      	mov	r1, r9
 80199fe:	4620      	mov	r0, r4
 8019a00:	f7ff ffa8 	bl	8019954 <L_shift>
 8019a04:	4544      	cmp	r4, r8
 8019a06:	d952      	bls.n	8019aae <__hexnan+0x10e>
 8019a08:	2300      	movs	r3, #0
 8019a0a:	f1a4 0904 	sub.w	r9, r4, #4
 8019a0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8019a12:	f8cd b008 	str.w	fp, [sp, #8]
 8019a16:	464c      	mov	r4, r9
 8019a18:	461d      	mov	r5, r3
 8019a1a:	9903      	ldr	r1, [sp, #12]
 8019a1c:	e7d7      	b.n	80199ce <__hexnan+0x2e>
 8019a1e:	2a29      	cmp	r2, #41	@ 0x29
 8019a20:	d157      	bne.n	8019ad2 <__hexnan+0x132>
 8019a22:	3102      	adds	r1, #2
 8019a24:	f8ca 1000 	str.w	r1, [sl]
 8019a28:	f1bb 0f00 	cmp.w	fp, #0
 8019a2c:	d051      	beq.n	8019ad2 <__hexnan+0x132>
 8019a2e:	454c      	cmp	r4, r9
 8019a30:	d206      	bcs.n	8019a40 <__hexnan+0xa0>
 8019a32:	2d07      	cmp	r5, #7
 8019a34:	dc04      	bgt.n	8019a40 <__hexnan+0xa0>
 8019a36:	462a      	mov	r2, r5
 8019a38:	4649      	mov	r1, r9
 8019a3a:	4620      	mov	r0, r4
 8019a3c:	f7ff ff8a 	bl	8019954 <L_shift>
 8019a40:	4544      	cmp	r4, r8
 8019a42:	d936      	bls.n	8019ab2 <__hexnan+0x112>
 8019a44:	f1a8 0204 	sub.w	r2, r8, #4
 8019a48:	4623      	mov	r3, r4
 8019a4a:	f853 1b04 	ldr.w	r1, [r3], #4
 8019a4e:	f842 1f04 	str.w	r1, [r2, #4]!
 8019a52:	429f      	cmp	r7, r3
 8019a54:	d2f9      	bcs.n	8019a4a <__hexnan+0xaa>
 8019a56:	1b3b      	subs	r3, r7, r4
 8019a58:	f023 0303 	bic.w	r3, r3, #3
 8019a5c:	3304      	adds	r3, #4
 8019a5e:	3401      	adds	r4, #1
 8019a60:	3e03      	subs	r6, #3
 8019a62:	42b4      	cmp	r4, r6
 8019a64:	bf88      	it	hi
 8019a66:	2304      	movhi	r3, #4
 8019a68:	4443      	add	r3, r8
 8019a6a:	2200      	movs	r2, #0
 8019a6c:	f843 2b04 	str.w	r2, [r3], #4
 8019a70:	429f      	cmp	r7, r3
 8019a72:	d2fb      	bcs.n	8019a6c <__hexnan+0xcc>
 8019a74:	683b      	ldr	r3, [r7, #0]
 8019a76:	b91b      	cbnz	r3, 8019a80 <__hexnan+0xe0>
 8019a78:	4547      	cmp	r7, r8
 8019a7a:	d128      	bne.n	8019ace <__hexnan+0x12e>
 8019a7c:	2301      	movs	r3, #1
 8019a7e:	603b      	str	r3, [r7, #0]
 8019a80:	2005      	movs	r0, #5
 8019a82:	b007      	add	sp, #28
 8019a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a88:	3501      	adds	r5, #1
 8019a8a:	2d08      	cmp	r5, #8
 8019a8c:	f10b 0b01 	add.w	fp, fp, #1
 8019a90:	dd06      	ble.n	8019aa0 <__hexnan+0x100>
 8019a92:	4544      	cmp	r4, r8
 8019a94:	d9c1      	bls.n	8019a1a <__hexnan+0x7a>
 8019a96:	2300      	movs	r3, #0
 8019a98:	f844 3c04 	str.w	r3, [r4, #-4]
 8019a9c:	2501      	movs	r5, #1
 8019a9e:	3c04      	subs	r4, #4
 8019aa0:	6822      	ldr	r2, [r4, #0]
 8019aa2:	f000 000f 	and.w	r0, r0, #15
 8019aa6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8019aaa:	6020      	str	r0, [r4, #0]
 8019aac:	e7b5      	b.n	8019a1a <__hexnan+0x7a>
 8019aae:	2508      	movs	r5, #8
 8019ab0:	e7b3      	b.n	8019a1a <__hexnan+0x7a>
 8019ab2:	9b01      	ldr	r3, [sp, #4]
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d0dd      	beq.n	8019a74 <__hexnan+0xd4>
 8019ab8:	f1c3 0320 	rsb	r3, r3, #32
 8019abc:	f04f 32ff 	mov.w	r2, #4294967295
 8019ac0:	40da      	lsrs	r2, r3
 8019ac2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8019ac6:	4013      	ands	r3, r2
 8019ac8:	f846 3c04 	str.w	r3, [r6, #-4]
 8019acc:	e7d2      	b.n	8019a74 <__hexnan+0xd4>
 8019ace:	3f04      	subs	r7, #4
 8019ad0:	e7d0      	b.n	8019a74 <__hexnan+0xd4>
 8019ad2:	2004      	movs	r0, #4
 8019ad4:	e7d5      	b.n	8019a82 <__hexnan+0xe2>

08019ad6 <__ascii_mbtowc>:
 8019ad6:	b082      	sub	sp, #8
 8019ad8:	b901      	cbnz	r1, 8019adc <__ascii_mbtowc+0x6>
 8019ada:	a901      	add	r1, sp, #4
 8019adc:	b142      	cbz	r2, 8019af0 <__ascii_mbtowc+0x1a>
 8019ade:	b14b      	cbz	r3, 8019af4 <__ascii_mbtowc+0x1e>
 8019ae0:	7813      	ldrb	r3, [r2, #0]
 8019ae2:	600b      	str	r3, [r1, #0]
 8019ae4:	7812      	ldrb	r2, [r2, #0]
 8019ae6:	1e10      	subs	r0, r2, #0
 8019ae8:	bf18      	it	ne
 8019aea:	2001      	movne	r0, #1
 8019aec:	b002      	add	sp, #8
 8019aee:	4770      	bx	lr
 8019af0:	4610      	mov	r0, r2
 8019af2:	e7fb      	b.n	8019aec <__ascii_mbtowc+0x16>
 8019af4:	f06f 0001 	mvn.w	r0, #1
 8019af8:	e7f8      	b.n	8019aec <__ascii_mbtowc+0x16>
	...

08019afc <_Balloc>:
 8019afc:	b570      	push	{r4, r5, r6, lr}
 8019afe:	69c6      	ldr	r6, [r0, #28]
 8019b00:	4604      	mov	r4, r0
 8019b02:	460d      	mov	r5, r1
 8019b04:	b976      	cbnz	r6, 8019b24 <_Balloc+0x28>
 8019b06:	2010      	movs	r0, #16
 8019b08:	f7fc ff6c 	bl	80169e4 <malloc>
 8019b0c:	4602      	mov	r2, r0
 8019b0e:	61e0      	str	r0, [r4, #28]
 8019b10:	b920      	cbnz	r0, 8019b1c <_Balloc+0x20>
 8019b12:	4b18      	ldr	r3, [pc, #96]	@ (8019b74 <_Balloc+0x78>)
 8019b14:	4818      	ldr	r0, [pc, #96]	@ (8019b78 <_Balloc+0x7c>)
 8019b16:	216b      	movs	r1, #107	@ 0x6b
 8019b18:	f001 fae2 	bl	801b0e0 <__assert_func>
 8019b1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019b20:	6006      	str	r6, [r0, #0]
 8019b22:	60c6      	str	r6, [r0, #12]
 8019b24:	69e6      	ldr	r6, [r4, #28]
 8019b26:	68f3      	ldr	r3, [r6, #12]
 8019b28:	b183      	cbz	r3, 8019b4c <_Balloc+0x50>
 8019b2a:	69e3      	ldr	r3, [r4, #28]
 8019b2c:	68db      	ldr	r3, [r3, #12]
 8019b2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019b32:	b9b8      	cbnz	r0, 8019b64 <_Balloc+0x68>
 8019b34:	2101      	movs	r1, #1
 8019b36:	fa01 f605 	lsl.w	r6, r1, r5
 8019b3a:	1d72      	adds	r2, r6, #5
 8019b3c:	0092      	lsls	r2, r2, #2
 8019b3e:	4620      	mov	r0, r4
 8019b40:	f001 faec 	bl	801b11c <_calloc_r>
 8019b44:	b160      	cbz	r0, 8019b60 <_Balloc+0x64>
 8019b46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019b4a:	e00e      	b.n	8019b6a <_Balloc+0x6e>
 8019b4c:	2221      	movs	r2, #33	@ 0x21
 8019b4e:	2104      	movs	r1, #4
 8019b50:	4620      	mov	r0, r4
 8019b52:	f001 fae3 	bl	801b11c <_calloc_r>
 8019b56:	69e3      	ldr	r3, [r4, #28]
 8019b58:	60f0      	str	r0, [r6, #12]
 8019b5a:	68db      	ldr	r3, [r3, #12]
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d1e4      	bne.n	8019b2a <_Balloc+0x2e>
 8019b60:	2000      	movs	r0, #0
 8019b62:	bd70      	pop	{r4, r5, r6, pc}
 8019b64:	6802      	ldr	r2, [r0, #0]
 8019b66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019b6a:	2300      	movs	r3, #0
 8019b6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019b70:	e7f7      	b.n	8019b62 <_Balloc+0x66>
 8019b72:	bf00      	nop
 8019b74:	0801db61 	.word	0x0801db61
 8019b78:	0801dc41 	.word	0x0801dc41

08019b7c <_Bfree>:
 8019b7c:	b570      	push	{r4, r5, r6, lr}
 8019b7e:	69c6      	ldr	r6, [r0, #28]
 8019b80:	4605      	mov	r5, r0
 8019b82:	460c      	mov	r4, r1
 8019b84:	b976      	cbnz	r6, 8019ba4 <_Bfree+0x28>
 8019b86:	2010      	movs	r0, #16
 8019b88:	f7fc ff2c 	bl	80169e4 <malloc>
 8019b8c:	4602      	mov	r2, r0
 8019b8e:	61e8      	str	r0, [r5, #28]
 8019b90:	b920      	cbnz	r0, 8019b9c <_Bfree+0x20>
 8019b92:	4b09      	ldr	r3, [pc, #36]	@ (8019bb8 <_Bfree+0x3c>)
 8019b94:	4809      	ldr	r0, [pc, #36]	@ (8019bbc <_Bfree+0x40>)
 8019b96:	218f      	movs	r1, #143	@ 0x8f
 8019b98:	f001 faa2 	bl	801b0e0 <__assert_func>
 8019b9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019ba0:	6006      	str	r6, [r0, #0]
 8019ba2:	60c6      	str	r6, [r0, #12]
 8019ba4:	b13c      	cbz	r4, 8019bb6 <_Bfree+0x3a>
 8019ba6:	69eb      	ldr	r3, [r5, #28]
 8019ba8:	6862      	ldr	r2, [r4, #4]
 8019baa:	68db      	ldr	r3, [r3, #12]
 8019bac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019bb0:	6021      	str	r1, [r4, #0]
 8019bb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019bb6:	bd70      	pop	{r4, r5, r6, pc}
 8019bb8:	0801db61 	.word	0x0801db61
 8019bbc:	0801dc41 	.word	0x0801dc41

08019bc0 <__multadd>:
 8019bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bc4:	690d      	ldr	r5, [r1, #16]
 8019bc6:	4607      	mov	r7, r0
 8019bc8:	460c      	mov	r4, r1
 8019bca:	461e      	mov	r6, r3
 8019bcc:	f101 0c14 	add.w	ip, r1, #20
 8019bd0:	2000      	movs	r0, #0
 8019bd2:	f8dc 3000 	ldr.w	r3, [ip]
 8019bd6:	b299      	uxth	r1, r3
 8019bd8:	fb02 6101 	mla	r1, r2, r1, r6
 8019bdc:	0c1e      	lsrs	r6, r3, #16
 8019bde:	0c0b      	lsrs	r3, r1, #16
 8019be0:	fb02 3306 	mla	r3, r2, r6, r3
 8019be4:	b289      	uxth	r1, r1
 8019be6:	3001      	adds	r0, #1
 8019be8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019bec:	4285      	cmp	r5, r0
 8019bee:	f84c 1b04 	str.w	r1, [ip], #4
 8019bf2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019bf6:	dcec      	bgt.n	8019bd2 <__multadd+0x12>
 8019bf8:	b30e      	cbz	r6, 8019c3e <__multadd+0x7e>
 8019bfa:	68a3      	ldr	r3, [r4, #8]
 8019bfc:	42ab      	cmp	r3, r5
 8019bfe:	dc19      	bgt.n	8019c34 <__multadd+0x74>
 8019c00:	6861      	ldr	r1, [r4, #4]
 8019c02:	4638      	mov	r0, r7
 8019c04:	3101      	adds	r1, #1
 8019c06:	f7ff ff79 	bl	8019afc <_Balloc>
 8019c0a:	4680      	mov	r8, r0
 8019c0c:	b928      	cbnz	r0, 8019c1a <__multadd+0x5a>
 8019c0e:	4602      	mov	r2, r0
 8019c10:	4b0c      	ldr	r3, [pc, #48]	@ (8019c44 <__multadd+0x84>)
 8019c12:	480d      	ldr	r0, [pc, #52]	@ (8019c48 <__multadd+0x88>)
 8019c14:	21ba      	movs	r1, #186	@ 0xba
 8019c16:	f001 fa63 	bl	801b0e0 <__assert_func>
 8019c1a:	6922      	ldr	r2, [r4, #16]
 8019c1c:	3202      	adds	r2, #2
 8019c1e:	f104 010c 	add.w	r1, r4, #12
 8019c22:	0092      	lsls	r2, r2, #2
 8019c24:	300c      	adds	r0, #12
 8019c26:	f7fe fd64 	bl	80186f2 <memcpy>
 8019c2a:	4621      	mov	r1, r4
 8019c2c:	4638      	mov	r0, r7
 8019c2e:	f7ff ffa5 	bl	8019b7c <_Bfree>
 8019c32:	4644      	mov	r4, r8
 8019c34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019c38:	3501      	adds	r5, #1
 8019c3a:	615e      	str	r6, [r3, #20]
 8019c3c:	6125      	str	r5, [r4, #16]
 8019c3e:	4620      	mov	r0, r4
 8019c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c44:	0801dbd0 	.word	0x0801dbd0
 8019c48:	0801dc41 	.word	0x0801dc41

08019c4c <__s2b>:
 8019c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c50:	460c      	mov	r4, r1
 8019c52:	4615      	mov	r5, r2
 8019c54:	461f      	mov	r7, r3
 8019c56:	2209      	movs	r2, #9
 8019c58:	3308      	adds	r3, #8
 8019c5a:	4606      	mov	r6, r0
 8019c5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8019c60:	2100      	movs	r1, #0
 8019c62:	2201      	movs	r2, #1
 8019c64:	429a      	cmp	r2, r3
 8019c66:	db09      	blt.n	8019c7c <__s2b+0x30>
 8019c68:	4630      	mov	r0, r6
 8019c6a:	f7ff ff47 	bl	8019afc <_Balloc>
 8019c6e:	b940      	cbnz	r0, 8019c82 <__s2b+0x36>
 8019c70:	4602      	mov	r2, r0
 8019c72:	4b19      	ldr	r3, [pc, #100]	@ (8019cd8 <__s2b+0x8c>)
 8019c74:	4819      	ldr	r0, [pc, #100]	@ (8019cdc <__s2b+0x90>)
 8019c76:	21d3      	movs	r1, #211	@ 0xd3
 8019c78:	f001 fa32 	bl	801b0e0 <__assert_func>
 8019c7c:	0052      	lsls	r2, r2, #1
 8019c7e:	3101      	adds	r1, #1
 8019c80:	e7f0      	b.n	8019c64 <__s2b+0x18>
 8019c82:	9b08      	ldr	r3, [sp, #32]
 8019c84:	6143      	str	r3, [r0, #20]
 8019c86:	2d09      	cmp	r5, #9
 8019c88:	f04f 0301 	mov.w	r3, #1
 8019c8c:	6103      	str	r3, [r0, #16]
 8019c8e:	dd16      	ble.n	8019cbe <__s2b+0x72>
 8019c90:	f104 0909 	add.w	r9, r4, #9
 8019c94:	46c8      	mov	r8, r9
 8019c96:	442c      	add	r4, r5
 8019c98:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019c9c:	4601      	mov	r1, r0
 8019c9e:	3b30      	subs	r3, #48	@ 0x30
 8019ca0:	220a      	movs	r2, #10
 8019ca2:	4630      	mov	r0, r6
 8019ca4:	f7ff ff8c 	bl	8019bc0 <__multadd>
 8019ca8:	45a0      	cmp	r8, r4
 8019caa:	d1f5      	bne.n	8019c98 <__s2b+0x4c>
 8019cac:	f1a5 0408 	sub.w	r4, r5, #8
 8019cb0:	444c      	add	r4, r9
 8019cb2:	1b2d      	subs	r5, r5, r4
 8019cb4:	1963      	adds	r3, r4, r5
 8019cb6:	42bb      	cmp	r3, r7
 8019cb8:	db04      	blt.n	8019cc4 <__s2b+0x78>
 8019cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019cbe:	340a      	adds	r4, #10
 8019cc0:	2509      	movs	r5, #9
 8019cc2:	e7f6      	b.n	8019cb2 <__s2b+0x66>
 8019cc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019cc8:	4601      	mov	r1, r0
 8019cca:	3b30      	subs	r3, #48	@ 0x30
 8019ccc:	220a      	movs	r2, #10
 8019cce:	4630      	mov	r0, r6
 8019cd0:	f7ff ff76 	bl	8019bc0 <__multadd>
 8019cd4:	e7ee      	b.n	8019cb4 <__s2b+0x68>
 8019cd6:	bf00      	nop
 8019cd8:	0801dbd0 	.word	0x0801dbd0
 8019cdc:	0801dc41 	.word	0x0801dc41

08019ce0 <__hi0bits>:
 8019ce0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8019ce4:	4603      	mov	r3, r0
 8019ce6:	bf36      	itet	cc
 8019ce8:	0403      	lslcc	r3, r0, #16
 8019cea:	2000      	movcs	r0, #0
 8019cec:	2010      	movcc	r0, #16
 8019cee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8019cf2:	bf3c      	itt	cc
 8019cf4:	021b      	lslcc	r3, r3, #8
 8019cf6:	3008      	addcc	r0, #8
 8019cf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019cfc:	bf3c      	itt	cc
 8019cfe:	011b      	lslcc	r3, r3, #4
 8019d00:	3004      	addcc	r0, #4
 8019d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019d06:	bf3c      	itt	cc
 8019d08:	009b      	lslcc	r3, r3, #2
 8019d0a:	3002      	addcc	r0, #2
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	db05      	blt.n	8019d1c <__hi0bits+0x3c>
 8019d10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8019d14:	f100 0001 	add.w	r0, r0, #1
 8019d18:	bf08      	it	eq
 8019d1a:	2020      	moveq	r0, #32
 8019d1c:	4770      	bx	lr

08019d1e <__lo0bits>:
 8019d1e:	6803      	ldr	r3, [r0, #0]
 8019d20:	4602      	mov	r2, r0
 8019d22:	f013 0007 	ands.w	r0, r3, #7
 8019d26:	d00b      	beq.n	8019d40 <__lo0bits+0x22>
 8019d28:	07d9      	lsls	r1, r3, #31
 8019d2a:	d421      	bmi.n	8019d70 <__lo0bits+0x52>
 8019d2c:	0798      	lsls	r0, r3, #30
 8019d2e:	bf49      	itett	mi
 8019d30:	085b      	lsrmi	r3, r3, #1
 8019d32:	089b      	lsrpl	r3, r3, #2
 8019d34:	2001      	movmi	r0, #1
 8019d36:	6013      	strmi	r3, [r2, #0]
 8019d38:	bf5c      	itt	pl
 8019d3a:	6013      	strpl	r3, [r2, #0]
 8019d3c:	2002      	movpl	r0, #2
 8019d3e:	4770      	bx	lr
 8019d40:	b299      	uxth	r1, r3
 8019d42:	b909      	cbnz	r1, 8019d48 <__lo0bits+0x2a>
 8019d44:	0c1b      	lsrs	r3, r3, #16
 8019d46:	2010      	movs	r0, #16
 8019d48:	b2d9      	uxtb	r1, r3
 8019d4a:	b909      	cbnz	r1, 8019d50 <__lo0bits+0x32>
 8019d4c:	3008      	adds	r0, #8
 8019d4e:	0a1b      	lsrs	r3, r3, #8
 8019d50:	0719      	lsls	r1, r3, #28
 8019d52:	bf04      	itt	eq
 8019d54:	091b      	lsreq	r3, r3, #4
 8019d56:	3004      	addeq	r0, #4
 8019d58:	0799      	lsls	r1, r3, #30
 8019d5a:	bf04      	itt	eq
 8019d5c:	089b      	lsreq	r3, r3, #2
 8019d5e:	3002      	addeq	r0, #2
 8019d60:	07d9      	lsls	r1, r3, #31
 8019d62:	d403      	bmi.n	8019d6c <__lo0bits+0x4e>
 8019d64:	085b      	lsrs	r3, r3, #1
 8019d66:	f100 0001 	add.w	r0, r0, #1
 8019d6a:	d003      	beq.n	8019d74 <__lo0bits+0x56>
 8019d6c:	6013      	str	r3, [r2, #0]
 8019d6e:	4770      	bx	lr
 8019d70:	2000      	movs	r0, #0
 8019d72:	4770      	bx	lr
 8019d74:	2020      	movs	r0, #32
 8019d76:	4770      	bx	lr

08019d78 <__i2b>:
 8019d78:	b510      	push	{r4, lr}
 8019d7a:	460c      	mov	r4, r1
 8019d7c:	2101      	movs	r1, #1
 8019d7e:	f7ff febd 	bl	8019afc <_Balloc>
 8019d82:	4602      	mov	r2, r0
 8019d84:	b928      	cbnz	r0, 8019d92 <__i2b+0x1a>
 8019d86:	4b05      	ldr	r3, [pc, #20]	@ (8019d9c <__i2b+0x24>)
 8019d88:	4805      	ldr	r0, [pc, #20]	@ (8019da0 <__i2b+0x28>)
 8019d8a:	f240 1145 	movw	r1, #325	@ 0x145
 8019d8e:	f001 f9a7 	bl	801b0e0 <__assert_func>
 8019d92:	2301      	movs	r3, #1
 8019d94:	6144      	str	r4, [r0, #20]
 8019d96:	6103      	str	r3, [r0, #16]
 8019d98:	bd10      	pop	{r4, pc}
 8019d9a:	bf00      	nop
 8019d9c:	0801dbd0 	.word	0x0801dbd0
 8019da0:	0801dc41 	.word	0x0801dc41

08019da4 <__multiply>:
 8019da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019da8:	4617      	mov	r7, r2
 8019daa:	690a      	ldr	r2, [r1, #16]
 8019dac:	693b      	ldr	r3, [r7, #16]
 8019dae:	429a      	cmp	r2, r3
 8019db0:	bfa8      	it	ge
 8019db2:	463b      	movge	r3, r7
 8019db4:	4689      	mov	r9, r1
 8019db6:	bfa4      	itt	ge
 8019db8:	460f      	movge	r7, r1
 8019dba:	4699      	movge	r9, r3
 8019dbc:	693d      	ldr	r5, [r7, #16]
 8019dbe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019dc2:	68bb      	ldr	r3, [r7, #8]
 8019dc4:	6879      	ldr	r1, [r7, #4]
 8019dc6:	eb05 060a 	add.w	r6, r5, sl
 8019dca:	42b3      	cmp	r3, r6
 8019dcc:	b085      	sub	sp, #20
 8019dce:	bfb8      	it	lt
 8019dd0:	3101      	addlt	r1, #1
 8019dd2:	f7ff fe93 	bl	8019afc <_Balloc>
 8019dd6:	b930      	cbnz	r0, 8019de6 <__multiply+0x42>
 8019dd8:	4602      	mov	r2, r0
 8019dda:	4b41      	ldr	r3, [pc, #260]	@ (8019ee0 <__multiply+0x13c>)
 8019ddc:	4841      	ldr	r0, [pc, #260]	@ (8019ee4 <__multiply+0x140>)
 8019dde:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8019de2:	f001 f97d 	bl	801b0e0 <__assert_func>
 8019de6:	f100 0414 	add.w	r4, r0, #20
 8019dea:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8019dee:	4623      	mov	r3, r4
 8019df0:	2200      	movs	r2, #0
 8019df2:	4573      	cmp	r3, lr
 8019df4:	d320      	bcc.n	8019e38 <__multiply+0x94>
 8019df6:	f107 0814 	add.w	r8, r7, #20
 8019dfa:	f109 0114 	add.w	r1, r9, #20
 8019dfe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8019e02:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8019e06:	9302      	str	r3, [sp, #8]
 8019e08:	1beb      	subs	r3, r5, r7
 8019e0a:	3b15      	subs	r3, #21
 8019e0c:	f023 0303 	bic.w	r3, r3, #3
 8019e10:	3304      	adds	r3, #4
 8019e12:	3715      	adds	r7, #21
 8019e14:	42bd      	cmp	r5, r7
 8019e16:	bf38      	it	cc
 8019e18:	2304      	movcc	r3, #4
 8019e1a:	9301      	str	r3, [sp, #4]
 8019e1c:	9b02      	ldr	r3, [sp, #8]
 8019e1e:	9103      	str	r1, [sp, #12]
 8019e20:	428b      	cmp	r3, r1
 8019e22:	d80c      	bhi.n	8019e3e <__multiply+0x9a>
 8019e24:	2e00      	cmp	r6, #0
 8019e26:	dd03      	ble.n	8019e30 <__multiply+0x8c>
 8019e28:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d055      	beq.n	8019edc <__multiply+0x138>
 8019e30:	6106      	str	r6, [r0, #16]
 8019e32:	b005      	add	sp, #20
 8019e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e38:	f843 2b04 	str.w	r2, [r3], #4
 8019e3c:	e7d9      	b.n	8019df2 <__multiply+0x4e>
 8019e3e:	f8b1 a000 	ldrh.w	sl, [r1]
 8019e42:	f1ba 0f00 	cmp.w	sl, #0
 8019e46:	d01f      	beq.n	8019e88 <__multiply+0xe4>
 8019e48:	46c4      	mov	ip, r8
 8019e4a:	46a1      	mov	r9, r4
 8019e4c:	2700      	movs	r7, #0
 8019e4e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8019e52:	f8d9 3000 	ldr.w	r3, [r9]
 8019e56:	fa1f fb82 	uxth.w	fp, r2
 8019e5a:	b29b      	uxth	r3, r3
 8019e5c:	fb0a 330b 	mla	r3, sl, fp, r3
 8019e60:	443b      	add	r3, r7
 8019e62:	f8d9 7000 	ldr.w	r7, [r9]
 8019e66:	0c12      	lsrs	r2, r2, #16
 8019e68:	0c3f      	lsrs	r7, r7, #16
 8019e6a:	fb0a 7202 	mla	r2, sl, r2, r7
 8019e6e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8019e72:	b29b      	uxth	r3, r3
 8019e74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019e78:	4565      	cmp	r5, ip
 8019e7a:	f849 3b04 	str.w	r3, [r9], #4
 8019e7e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8019e82:	d8e4      	bhi.n	8019e4e <__multiply+0xaa>
 8019e84:	9b01      	ldr	r3, [sp, #4]
 8019e86:	50e7      	str	r7, [r4, r3]
 8019e88:	9b03      	ldr	r3, [sp, #12]
 8019e8a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8019e8e:	3104      	adds	r1, #4
 8019e90:	f1b9 0f00 	cmp.w	r9, #0
 8019e94:	d020      	beq.n	8019ed8 <__multiply+0x134>
 8019e96:	6823      	ldr	r3, [r4, #0]
 8019e98:	4647      	mov	r7, r8
 8019e9a:	46a4      	mov	ip, r4
 8019e9c:	f04f 0a00 	mov.w	sl, #0
 8019ea0:	f8b7 b000 	ldrh.w	fp, [r7]
 8019ea4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8019ea8:	fb09 220b 	mla	r2, r9, fp, r2
 8019eac:	4452      	add	r2, sl
 8019eae:	b29b      	uxth	r3, r3
 8019eb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019eb4:	f84c 3b04 	str.w	r3, [ip], #4
 8019eb8:	f857 3b04 	ldr.w	r3, [r7], #4
 8019ebc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019ec0:	f8bc 3000 	ldrh.w	r3, [ip]
 8019ec4:	fb09 330a 	mla	r3, r9, sl, r3
 8019ec8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8019ecc:	42bd      	cmp	r5, r7
 8019ece:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019ed2:	d8e5      	bhi.n	8019ea0 <__multiply+0xfc>
 8019ed4:	9a01      	ldr	r2, [sp, #4]
 8019ed6:	50a3      	str	r3, [r4, r2]
 8019ed8:	3404      	adds	r4, #4
 8019eda:	e79f      	b.n	8019e1c <__multiply+0x78>
 8019edc:	3e01      	subs	r6, #1
 8019ede:	e7a1      	b.n	8019e24 <__multiply+0x80>
 8019ee0:	0801dbd0 	.word	0x0801dbd0
 8019ee4:	0801dc41 	.word	0x0801dc41

08019ee8 <__pow5mult>:
 8019ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019eec:	4615      	mov	r5, r2
 8019eee:	f012 0203 	ands.w	r2, r2, #3
 8019ef2:	4607      	mov	r7, r0
 8019ef4:	460e      	mov	r6, r1
 8019ef6:	d007      	beq.n	8019f08 <__pow5mult+0x20>
 8019ef8:	4c25      	ldr	r4, [pc, #148]	@ (8019f90 <__pow5mult+0xa8>)
 8019efa:	3a01      	subs	r2, #1
 8019efc:	2300      	movs	r3, #0
 8019efe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019f02:	f7ff fe5d 	bl	8019bc0 <__multadd>
 8019f06:	4606      	mov	r6, r0
 8019f08:	10ad      	asrs	r5, r5, #2
 8019f0a:	d03d      	beq.n	8019f88 <__pow5mult+0xa0>
 8019f0c:	69fc      	ldr	r4, [r7, #28]
 8019f0e:	b97c      	cbnz	r4, 8019f30 <__pow5mult+0x48>
 8019f10:	2010      	movs	r0, #16
 8019f12:	f7fc fd67 	bl	80169e4 <malloc>
 8019f16:	4602      	mov	r2, r0
 8019f18:	61f8      	str	r0, [r7, #28]
 8019f1a:	b928      	cbnz	r0, 8019f28 <__pow5mult+0x40>
 8019f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8019f94 <__pow5mult+0xac>)
 8019f1e:	481e      	ldr	r0, [pc, #120]	@ (8019f98 <__pow5mult+0xb0>)
 8019f20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8019f24:	f001 f8dc 	bl	801b0e0 <__assert_func>
 8019f28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019f2c:	6004      	str	r4, [r0, #0]
 8019f2e:	60c4      	str	r4, [r0, #12]
 8019f30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8019f34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019f38:	b94c      	cbnz	r4, 8019f4e <__pow5mult+0x66>
 8019f3a:	f240 2171 	movw	r1, #625	@ 0x271
 8019f3e:	4638      	mov	r0, r7
 8019f40:	f7ff ff1a 	bl	8019d78 <__i2b>
 8019f44:	2300      	movs	r3, #0
 8019f46:	f8c8 0008 	str.w	r0, [r8, #8]
 8019f4a:	4604      	mov	r4, r0
 8019f4c:	6003      	str	r3, [r0, #0]
 8019f4e:	f04f 0900 	mov.w	r9, #0
 8019f52:	07eb      	lsls	r3, r5, #31
 8019f54:	d50a      	bpl.n	8019f6c <__pow5mult+0x84>
 8019f56:	4631      	mov	r1, r6
 8019f58:	4622      	mov	r2, r4
 8019f5a:	4638      	mov	r0, r7
 8019f5c:	f7ff ff22 	bl	8019da4 <__multiply>
 8019f60:	4631      	mov	r1, r6
 8019f62:	4680      	mov	r8, r0
 8019f64:	4638      	mov	r0, r7
 8019f66:	f7ff fe09 	bl	8019b7c <_Bfree>
 8019f6a:	4646      	mov	r6, r8
 8019f6c:	106d      	asrs	r5, r5, #1
 8019f6e:	d00b      	beq.n	8019f88 <__pow5mult+0xa0>
 8019f70:	6820      	ldr	r0, [r4, #0]
 8019f72:	b938      	cbnz	r0, 8019f84 <__pow5mult+0x9c>
 8019f74:	4622      	mov	r2, r4
 8019f76:	4621      	mov	r1, r4
 8019f78:	4638      	mov	r0, r7
 8019f7a:	f7ff ff13 	bl	8019da4 <__multiply>
 8019f7e:	6020      	str	r0, [r4, #0]
 8019f80:	f8c0 9000 	str.w	r9, [r0]
 8019f84:	4604      	mov	r4, r0
 8019f86:	e7e4      	b.n	8019f52 <__pow5mult+0x6a>
 8019f88:	4630      	mov	r0, r6
 8019f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f8e:	bf00      	nop
 8019f90:	0801de5c 	.word	0x0801de5c
 8019f94:	0801db61 	.word	0x0801db61
 8019f98:	0801dc41 	.word	0x0801dc41

08019f9c <__lshift>:
 8019f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fa0:	460c      	mov	r4, r1
 8019fa2:	6849      	ldr	r1, [r1, #4]
 8019fa4:	6923      	ldr	r3, [r4, #16]
 8019fa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019faa:	68a3      	ldr	r3, [r4, #8]
 8019fac:	4607      	mov	r7, r0
 8019fae:	4691      	mov	r9, r2
 8019fb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019fb4:	f108 0601 	add.w	r6, r8, #1
 8019fb8:	42b3      	cmp	r3, r6
 8019fba:	db0b      	blt.n	8019fd4 <__lshift+0x38>
 8019fbc:	4638      	mov	r0, r7
 8019fbe:	f7ff fd9d 	bl	8019afc <_Balloc>
 8019fc2:	4605      	mov	r5, r0
 8019fc4:	b948      	cbnz	r0, 8019fda <__lshift+0x3e>
 8019fc6:	4602      	mov	r2, r0
 8019fc8:	4b28      	ldr	r3, [pc, #160]	@ (801a06c <__lshift+0xd0>)
 8019fca:	4829      	ldr	r0, [pc, #164]	@ (801a070 <__lshift+0xd4>)
 8019fcc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8019fd0:	f001 f886 	bl	801b0e0 <__assert_func>
 8019fd4:	3101      	adds	r1, #1
 8019fd6:	005b      	lsls	r3, r3, #1
 8019fd8:	e7ee      	b.n	8019fb8 <__lshift+0x1c>
 8019fda:	2300      	movs	r3, #0
 8019fdc:	f100 0114 	add.w	r1, r0, #20
 8019fe0:	f100 0210 	add.w	r2, r0, #16
 8019fe4:	4618      	mov	r0, r3
 8019fe6:	4553      	cmp	r3, sl
 8019fe8:	db33      	blt.n	801a052 <__lshift+0xb6>
 8019fea:	6920      	ldr	r0, [r4, #16]
 8019fec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019ff0:	f104 0314 	add.w	r3, r4, #20
 8019ff4:	f019 091f 	ands.w	r9, r9, #31
 8019ff8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019ffc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a000:	d02b      	beq.n	801a05a <__lshift+0xbe>
 801a002:	f1c9 0e20 	rsb	lr, r9, #32
 801a006:	468a      	mov	sl, r1
 801a008:	2200      	movs	r2, #0
 801a00a:	6818      	ldr	r0, [r3, #0]
 801a00c:	fa00 f009 	lsl.w	r0, r0, r9
 801a010:	4310      	orrs	r0, r2
 801a012:	f84a 0b04 	str.w	r0, [sl], #4
 801a016:	f853 2b04 	ldr.w	r2, [r3], #4
 801a01a:	459c      	cmp	ip, r3
 801a01c:	fa22 f20e 	lsr.w	r2, r2, lr
 801a020:	d8f3      	bhi.n	801a00a <__lshift+0x6e>
 801a022:	ebac 0304 	sub.w	r3, ip, r4
 801a026:	3b15      	subs	r3, #21
 801a028:	f023 0303 	bic.w	r3, r3, #3
 801a02c:	3304      	adds	r3, #4
 801a02e:	f104 0015 	add.w	r0, r4, #21
 801a032:	4560      	cmp	r0, ip
 801a034:	bf88      	it	hi
 801a036:	2304      	movhi	r3, #4
 801a038:	50ca      	str	r2, [r1, r3]
 801a03a:	b10a      	cbz	r2, 801a040 <__lshift+0xa4>
 801a03c:	f108 0602 	add.w	r6, r8, #2
 801a040:	3e01      	subs	r6, #1
 801a042:	4638      	mov	r0, r7
 801a044:	612e      	str	r6, [r5, #16]
 801a046:	4621      	mov	r1, r4
 801a048:	f7ff fd98 	bl	8019b7c <_Bfree>
 801a04c:	4628      	mov	r0, r5
 801a04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a052:	f842 0f04 	str.w	r0, [r2, #4]!
 801a056:	3301      	adds	r3, #1
 801a058:	e7c5      	b.n	8019fe6 <__lshift+0x4a>
 801a05a:	3904      	subs	r1, #4
 801a05c:	f853 2b04 	ldr.w	r2, [r3], #4
 801a060:	f841 2f04 	str.w	r2, [r1, #4]!
 801a064:	459c      	cmp	ip, r3
 801a066:	d8f9      	bhi.n	801a05c <__lshift+0xc0>
 801a068:	e7ea      	b.n	801a040 <__lshift+0xa4>
 801a06a:	bf00      	nop
 801a06c:	0801dbd0 	.word	0x0801dbd0
 801a070:	0801dc41 	.word	0x0801dc41

0801a074 <__mcmp>:
 801a074:	690a      	ldr	r2, [r1, #16]
 801a076:	4603      	mov	r3, r0
 801a078:	6900      	ldr	r0, [r0, #16]
 801a07a:	1a80      	subs	r0, r0, r2
 801a07c:	b530      	push	{r4, r5, lr}
 801a07e:	d10e      	bne.n	801a09e <__mcmp+0x2a>
 801a080:	3314      	adds	r3, #20
 801a082:	3114      	adds	r1, #20
 801a084:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801a088:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801a08c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a090:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a094:	4295      	cmp	r5, r2
 801a096:	d003      	beq.n	801a0a0 <__mcmp+0x2c>
 801a098:	d205      	bcs.n	801a0a6 <__mcmp+0x32>
 801a09a:	f04f 30ff 	mov.w	r0, #4294967295
 801a09e:	bd30      	pop	{r4, r5, pc}
 801a0a0:	42a3      	cmp	r3, r4
 801a0a2:	d3f3      	bcc.n	801a08c <__mcmp+0x18>
 801a0a4:	e7fb      	b.n	801a09e <__mcmp+0x2a>
 801a0a6:	2001      	movs	r0, #1
 801a0a8:	e7f9      	b.n	801a09e <__mcmp+0x2a>
	...

0801a0ac <__mdiff>:
 801a0ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0b0:	4689      	mov	r9, r1
 801a0b2:	4606      	mov	r6, r0
 801a0b4:	4611      	mov	r1, r2
 801a0b6:	4648      	mov	r0, r9
 801a0b8:	4614      	mov	r4, r2
 801a0ba:	f7ff ffdb 	bl	801a074 <__mcmp>
 801a0be:	1e05      	subs	r5, r0, #0
 801a0c0:	d112      	bne.n	801a0e8 <__mdiff+0x3c>
 801a0c2:	4629      	mov	r1, r5
 801a0c4:	4630      	mov	r0, r6
 801a0c6:	f7ff fd19 	bl	8019afc <_Balloc>
 801a0ca:	4602      	mov	r2, r0
 801a0cc:	b928      	cbnz	r0, 801a0da <__mdiff+0x2e>
 801a0ce:	4b3f      	ldr	r3, [pc, #252]	@ (801a1cc <__mdiff+0x120>)
 801a0d0:	f240 2137 	movw	r1, #567	@ 0x237
 801a0d4:	483e      	ldr	r0, [pc, #248]	@ (801a1d0 <__mdiff+0x124>)
 801a0d6:	f001 f803 	bl	801b0e0 <__assert_func>
 801a0da:	2301      	movs	r3, #1
 801a0dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a0e0:	4610      	mov	r0, r2
 801a0e2:	b003      	add	sp, #12
 801a0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0e8:	bfbc      	itt	lt
 801a0ea:	464b      	movlt	r3, r9
 801a0ec:	46a1      	movlt	r9, r4
 801a0ee:	4630      	mov	r0, r6
 801a0f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801a0f4:	bfba      	itte	lt
 801a0f6:	461c      	movlt	r4, r3
 801a0f8:	2501      	movlt	r5, #1
 801a0fa:	2500      	movge	r5, #0
 801a0fc:	f7ff fcfe 	bl	8019afc <_Balloc>
 801a100:	4602      	mov	r2, r0
 801a102:	b918      	cbnz	r0, 801a10c <__mdiff+0x60>
 801a104:	4b31      	ldr	r3, [pc, #196]	@ (801a1cc <__mdiff+0x120>)
 801a106:	f240 2145 	movw	r1, #581	@ 0x245
 801a10a:	e7e3      	b.n	801a0d4 <__mdiff+0x28>
 801a10c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801a110:	6926      	ldr	r6, [r4, #16]
 801a112:	60c5      	str	r5, [r0, #12]
 801a114:	f109 0310 	add.w	r3, r9, #16
 801a118:	f109 0514 	add.w	r5, r9, #20
 801a11c:	f104 0e14 	add.w	lr, r4, #20
 801a120:	f100 0b14 	add.w	fp, r0, #20
 801a124:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801a128:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801a12c:	9301      	str	r3, [sp, #4]
 801a12e:	46d9      	mov	r9, fp
 801a130:	f04f 0c00 	mov.w	ip, #0
 801a134:	9b01      	ldr	r3, [sp, #4]
 801a136:	f85e 0b04 	ldr.w	r0, [lr], #4
 801a13a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801a13e:	9301      	str	r3, [sp, #4]
 801a140:	fa1f f38a 	uxth.w	r3, sl
 801a144:	4619      	mov	r1, r3
 801a146:	b283      	uxth	r3, r0
 801a148:	1acb      	subs	r3, r1, r3
 801a14a:	0c00      	lsrs	r0, r0, #16
 801a14c:	4463      	add	r3, ip
 801a14e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801a152:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801a156:	b29b      	uxth	r3, r3
 801a158:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801a15c:	4576      	cmp	r6, lr
 801a15e:	f849 3b04 	str.w	r3, [r9], #4
 801a162:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a166:	d8e5      	bhi.n	801a134 <__mdiff+0x88>
 801a168:	1b33      	subs	r3, r6, r4
 801a16a:	3b15      	subs	r3, #21
 801a16c:	f023 0303 	bic.w	r3, r3, #3
 801a170:	3415      	adds	r4, #21
 801a172:	3304      	adds	r3, #4
 801a174:	42a6      	cmp	r6, r4
 801a176:	bf38      	it	cc
 801a178:	2304      	movcc	r3, #4
 801a17a:	441d      	add	r5, r3
 801a17c:	445b      	add	r3, fp
 801a17e:	461e      	mov	r6, r3
 801a180:	462c      	mov	r4, r5
 801a182:	4544      	cmp	r4, r8
 801a184:	d30e      	bcc.n	801a1a4 <__mdiff+0xf8>
 801a186:	f108 0103 	add.w	r1, r8, #3
 801a18a:	1b49      	subs	r1, r1, r5
 801a18c:	f021 0103 	bic.w	r1, r1, #3
 801a190:	3d03      	subs	r5, #3
 801a192:	45a8      	cmp	r8, r5
 801a194:	bf38      	it	cc
 801a196:	2100      	movcc	r1, #0
 801a198:	440b      	add	r3, r1
 801a19a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a19e:	b191      	cbz	r1, 801a1c6 <__mdiff+0x11a>
 801a1a0:	6117      	str	r7, [r2, #16]
 801a1a2:	e79d      	b.n	801a0e0 <__mdiff+0x34>
 801a1a4:	f854 1b04 	ldr.w	r1, [r4], #4
 801a1a8:	46e6      	mov	lr, ip
 801a1aa:	0c08      	lsrs	r0, r1, #16
 801a1ac:	fa1c fc81 	uxtah	ip, ip, r1
 801a1b0:	4471      	add	r1, lr
 801a1b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801a1b6:	b289      	uxth	r1, r1
 801a1b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801a1bc:	f846 1b04 	str.w	r1, [r6], #4
 801a1c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a1c4:	e7dd      	b.n	801a182 <__mdiff+0xd6>
 801a1c6:	3f01      	subs	r7, #1
 801a1c8:	e7e7      	b.n	801a19a <__mdiff+0xee>
 801a1ca:	bf00      	nop
 801a1cc:	0801dbd0 	.word	0x0801dbd0
 801a1d0:	0801dc41 	.word	0x0801dc41

0801a1d4 <__ulp>:
 801a1d4:	b082      	sub	sp, #8
 801a1d6:	ed8d 0b00 	vstr	d0, [sp]
 801a1da:	9a01      	ldr	r2, [sp, #4]
 801a1dc:	4b0f      	ldr	r3, [pc, #60]	@ (801a21c <__ulp+0x48>)
 801a1de:	4013      	ands	r3, r2
 801a1e0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	dc08      	bgt.n	801a1fa <__ulp+0x26>
 801a1e8:	425b      	negs	r3, r3
 801a1ea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801a1ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a1f2:	da04      	bge.n	801a1fe <__ulp+0x2a>
 801a1f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801a1f8:	4113      	asrs	r3, r2
 801a1fa:	2200      	movs	r2, #0
 801a1fc:	e008      	b.n	801a210 <__ulp+0x3c>
 801a1fe:	f1a2 0314 	sub.w	r3, r2, #20
 801a202:	2b1e      	cmp	r3, #30
 801a204:	bfda      	itte	le
 801a206:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801a20a:	40da      	lsrle	r2, r3
 801a20c:	2201      	movgt	r2, #1
 801a20e:	2300      	movs	r3, #0
 801a210:	4619      	mov	r1, r3
 801a212:	4610      	mov	r0, r2
 801a214:	ec41 0b10 	vmov	d0, r0, r1
 801a218:	b002      	add	sp, #8
 801a21a:	4770      	bx	lr
 801a21c:	7ff00000 	.word	0x7ff00000

0801a220 <__b2d>:
 801a220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a224:	6906      	ldr	r6, [r0, #16]
 801a226:	f100 0814 	add.w	r8, r0, #20
 801a22a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801a22e:	1f37      	subs	r7, r6, #4
 801a230:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a234:	4610      	mov	r0, r2
 801a236:	f7ff fd53 	bl	8019ce0 <__hi0bits>
 801a23a:	f1c0 0320 	rsb	r3, r0, #32
 801a23e:	280a      	cmp	r0, #10
 801a240:	600b      	str	r3, [r1, #0]
 801a242:	491b      	ldr	r1, [pc, #108]	@ (801a2b0 <__b2d+0x90>)
 801a244:	dc15      	bgt.n	801a272 <__b2d+0x52>
 801a246:	f1c0 0c0b 	rsb	ip, r0, #11
 801a24a:	fa22 f30c 	lsr.w	r3, r2, ip
 801a24e:	45b8      	cmp	r8, r7
 801a250:	ea43 0501 	orr.w	r5, r3, r1
 801a254:	bf34      	ite	cc
 801a256:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a25a:	2300      	movcs	r3, #0
 801a25c:	3015      	adds	r0, #21
 801a25e:	fa02 f000 	lsl.w	r0, r2, r0
 801a262:	fa23 f30c 	lsr.w	r3, r3, ip
 801a266:	4303      	orrs	r3, r0
 801a268:	461c      	mov	r4, r3
 801a26a:	ec45 4b10 	vmov	d0, r4, r5
 801a26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a272:	45b8      	cmp	r8, r7
 801a274:	bf3a      	itte	cc
 801a276:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a27a:	f1a6 0708 	subcc.w	r7, r6, #8
 801a27e:	2300      	movcs	r3, #0
 801a280:	380b      	subs	r0, #11
 801a282:	d012      	beq.n	801a2aa <__b2d+0x8a>
 801a284:	f1c0 0120 	rsb	r1, r0, #32
 801a288:	fa23 f401 	lsr.w	r4, r3, r1
 801a28c:	4082      	lsls	r2, r0
 801a28e:	4322      	orrs	r2, r4
 801a290:	4547      	cmp	r7, r8
 801a292:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801a296:	bf8c      	ite	hi
 801a298:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801a29c:	2200      	movls	r2, #0
 801a29e:	4083      	lsls	r3, r0
 801a2a0:	40ca      	lsrs	r2, r1
 801a2a2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801a2a6:	4313      	orrs	r3, r2
 801a2a8:	e7de      	b.n	801a268 <__b2d+0x48>
 801a2aa:	ea42 0501 	orr.w	r5, r2, r1
 801a2ae:	e7db      	b.n	801a268 <__b2d+0x48>
 801a2b0:	3ff00000 	.word	0x3ff00000

0801a2b4 <__d2b>:
 801a2b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a2b8:	460f      	mov	r7, r1
 801a2ba:	2101      	movs	r1, #1
 801a2bc:	ec59 8b10 	vmov	r8, r9, d0
 801a2c0:	4616      	mov	r6, r2
 801a2c2:	f7ff fc1b 	bl	8019afc <_Balloc>
 801a2c6:	4604      	mov	r4, r0
 801a2c8:	b930      	cbnz	r0, 801a2d8 <__d2b+0x24>
 801a2ca:	4602      	mov	r2, r0
 801a2cc:	4b23      	ldr	r3, [pc, #140]	@ (801a35c <__d2b+0xa8>)
 801a2ce:	4824      	ldr	r0, [pc, #144]	@ (801a360 <__d2b+0xac>)
 801a2d0:	f240 310f 	movw	r1, #783	@ 0x30f
 801a2d4:	f000 ff04 	bl	801b0e0 <__assert_func>
 801a2d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a2dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a2e0:	b10d      	cbz	r5, 801a2e6 <__d2b+0x32>
 801a2e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a2e6:	9301      	str	r3, [sp, #4]
 801a2e8:	f1b8 0300 	subs.w	r3, r8, #0
 801a2ec:	d023      	beq.n	801a336 <__d2b+0x82>
 801a2ee:	4668      	mov	r0, sp
 801a2f0:	9300      	str	r3, [sp, #0]
 801a2f2:	f7ff fd14 	bl	8019d1e <__lo0bits>
 801a2f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a2fa:	b1d0      	cbz	r0, 801a332 <__d2b+0x7e>
 801a2fc:	f1c0 0320 	rsb	r3, r0, #32
 801a300:	fa02 f303 	lsl.w	r3, r2, r3
 801a304:	430b      	orrs	r3, r1
 801a306:	40c2      	lsrs	r2, r0
 801a308:	6163      	str	r3, [r4, #20]
 801a30a:	9201      	str	r2, [sp, #4]
 801a30c:	9b01      	ldr	r3, [sp, #4]
 801a30e:	61a3      	str	r3, [r4, #24]
 801a310:	2b00      	cmp	r3, #0
 801a312:	bf0c      	ite	eq
 801a314:	2201      	moveq	r2, #1
 801a316:	2202      	movne	r2, #2
 801a318:	6122      	str	r2, [r4, #16]
 801a31a:	b1a5      	cbz	r5, 801a346 <__d2b+0x92>
 801a31c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801a320:	4405      	add	r5, r0
 801a322:	603d      	str	r5, [r7, #0]
 801a324:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801a328:	6030      	str	r0, [r6, #0]
 801a32a:	4620      	mov	r0, r4
 801a32c:	b003      	add	sp, #12
 801a32e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a332:	6161      	str	r1, [r4, #20]
 801a334:	e7ea      	b.n	801a30c <__d2b+0x58>
 801a336:	a801      	add	r0, sp, #4
 801a338:	f7ff fcf1 	bl	8019d1e <__lo0bits>
 801a33c:	9b01      	ldr	r3, [sp, #4]
 801a33e:	6163      	str	r3, [r4, #20]
 801a340:	3020      	adds	r0, #32
 801a342:	2201      	movs	r2, #1
 801a344:	e7e8      	b.n	801a318 <__d2b+0x64>
 801a346:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a34a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801a34e:	6038      	str	r0, [r7, #0]
 801a350:	6918      	ldr	r0, [r3, #16]
 801a352:	f7ff fcc5 	bl	8019ce0 <__hi0bits>
 801a356:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a35a:	e7e5      	b.n	801a328 <__d2b+0x74>
 801a35c:	0801dbd0 	.word	0x0801dbd0
 801a360:	0801dc41 	.word	0x0801dc41

0801a364 <__ratio>:
 801a364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a368:	b085      	sub	sp, #20
 801a36a:	e9cd 1000 	strd	r1, r0, [sp]
 801a36e:	a902      	add	r1, sp, #8
 801a370:	f7ff ff56 	bl	801a220 <__b2d>
 801a374:	9800      	ldr	r0, [sp, #0]
 801a376:	a903      	add	r1, sp, #12
 801a378:	ec55 4b10 	vmov	r4, r5, d0
 801a37c:	f7ff ff50 	bl	801a220 <__b2d>
 801a380:	9b01      	ldr	r3, [sp, #4]
 801a382:	6919      	ldr	r1, [r3, #16]
 801a384:	9b00      	ldr	r3, [sp, #0]
 801a386:	691b      	ldr	r3, [r3, #16]
 801a388:	1ac9      	subs	r1, r1, r3
 801a38a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801a38e:	1a9b      	subs	r3, r3, r2
 801a390:	ec5b ab10 	vmov	sl, fp, d0
 801a394:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801a398:	2b00      	cmp	r3, #0
 801a39a:	bfce      	itee	gt
 801a39c:	462a      	movgt	r2, r5
 801a39e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a3a2:	465a      	movle	r2, fp
 801a3a4:	462f      	mov	r7, r5
 801a3a6:	46d9      	mov	r9, fp
 801a3a8:	bfcc      	ite	gt
 801a3aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a3ae:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801a3b2:	464b      	mov	r3, r9
 801a3b4:	4652      	mov	r2, sl
 801a3b6:	4620      	mov	r0, r4
 801a3b8:	4639      	mov	r1, r7
 801a3ba:	f7ee fa77 	bl	80088ac <__aeabi_ddiv>
 801a3be:	ec41 0b10 	vmov	d0, r0, r1
 801a3c2:	b005      	add	sp, #20
 801a3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a3c8 <__copybits>:
 801a3c8:	3901      	subs	r1, #1
 801a3ca:	b570      	push	{r4, r5, r6, lr}
 801a3cc:	1149      	asrs	r1, r1, #5
 801a3ce:	6914      	ldr	r4, [r2, #16]
 801a3d0:	3101      	adds	r1, #1
 801a3d2:	f102 0314 	add.w	r3, r2, #20
 801a3d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a3da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a3de:	1f05      	subs	r5, r0, #4
 801a3e0:	42a3      	cmp	r3, r4
 801a3e2:	d30c      	bcc.n	801a3fe <__copybits+0x36>
 801a3e4:	1aa3      	subs	r3, r4, r2
 801a3e6:	3b11      	subs	r3, #17
 801a3e8:	f023 0303 	bic.w	r3, r3, #3
 801a3ec:	3211      	adds	r2, #17
 801a3ee:	42a2      	cmp	r2, r4
 801a3f0:	bf88      	it	hi
 801a3f2:	2300      	movhi	r3, #0
 801a3f4:	4418      	add	r0, r3
 801a3f6:	2300      	movs	r3, #0
 801a3f8:	4288      	cmp	r0, r1
 801a3fa:	d305      	bcc.n	801a408 <__copybits+0x40>
 801a3fc:	bd70      	pop	{r4, r5, r6, pc}
 801a3fe:	f853 6b04 	ldr.w	r6, [r3], #4
 801a402:	f845 6f04 	str.w	r6, [r5, #4]!
 801a406:	e7eb      	b.n	801a3e0 <__copybits+0x18>
 801a408:	f840 3b04 	str.w	r3, [r0], #4
 801a40c:	e7f4      	b.n	801a3f8 <__copybits+0x30>

0801a40e <__any_on>:
 801a40e:	f100 0214 	add.w	r2, r0, #20
 801a412:	6900      	ldr	r0, [r0, #16]
 801a414:	114b      	asrs	r3, r1, #5
 801a416:	4298      	cmp	r0, r3
 801a418:	b510      	push	{r4, lr}
 801a41a:	db11      	blt.n	801a440 <__any_on+0x32>
 801a41c:	dd0a      	ble.n	801a434 <__any_on+0x26>
 801a41e:	f011 011f 	ands.w	r1, r1, #31
 801a422:	d007      	beq.n	801a434 <__any_on+0x26>
 801a424:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a428:	fa24 f001 	lsr.w	r0, r4, r1
 801a42c:	fa00 f101 	lsl.w	r1, r0, r1
 801a430:	428c      	cmp	r4, r1
 801a432:	d10b      	bne.n	801a44c <__any_on+0x3e>
 801a434:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a438:	4293      	cmp	r3, r2
 801a43a:	d803      	bhi.n	801a444 <__any_on+0x36>
 801a43c:	2000      	movs	r0, #0
 801a43e:	bd10      	pop	{r4, pc}
 801a440:	4603      	mov	r3, r0
 801a442:	e7f7      	b.n	801a434 <__any_on+0x26>
 801a444:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a448:	2900      	cmp	r1, #0
 801a44a:	d0f5      	beq.n	801a438 <__any_on+0x2a>
 801a44c:	2001      	movs	r0, #1
 801a44e:	e7f6      	b.n	801a43e <__any_on+0x30>

0801a450 <_malloc_usable_size_r>:
 801a450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a454:	1f18      	subs	r0, r3, #4
 801a456:	2b00      	cmp	r3, #0
 801a458:	bfbc      	itt	lt
 801a45a:	580b      	ldrlt	r3, [r1, r0]
 801a45c:	18c0      	addlt	r0, r0, r3
 801a45e:	4770      	bx	lr

0801a460 <__ascii_wctomb>:
 801a460:	4603      	mov	r3, r0
 801a462:	4608      	mov	r0, r1
 801a464:	b141      	cbz	r1, 801a478 <__ascii_wctomb+0x18>
 801a466:	2aff      	cmp	r2, #255	@ 0xff
 801a468:	d904      	bls.n	801a474 <__ascii_wctomb+0x14>
 801a46a:	228a      	movs	r2, #138	@ 0x8a
 801a46c:	601a      	str	r2, [r3, #0]
 801a46e:	f04f 30ff 	mov.w	r0, #4294967295
 801a472:	4770      	bx	lr
 801a474:	700a      	strb	r2, [r1, #0]
 801a476:	2001      	movs	r0, #1
 801a478:	4770      	bx	lr

0801a47a <__ssputs_r>:
 801a47a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a47e:	688e      	ldr	r6, [r1, #8]
 801a480:	461f      	mov	r7, r3
 801a482:	42be      	cmp	r6, r7
 801a484:	680b      	ldr	r3, [r1, #0]
 801a486:	4682      	mov	sl, r0
 801a488:	460c      	mov	r4, r1
 801a48a:	4690      	mov	r8, r2
 801a48c:	d82d      	bhi.n	801a4ea <__ssputs_r+0x70>
 801a48e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a492:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a496:	d026      	beq.n	801a4e6 <__ssputs_r+0x6c>
 801a498:	6965      	ldr	r5, [r4, #20]
 801a49a:	6909      	ldr	r1, [r1, #16]
 801a49c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a4a0:	eba3 0901 	sub.w	r9, r3, r1
 801a4a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a4a8:	1c7b      	adds	r3, r7, #1
 801a4aa:	444b      	add	r3, r9
 801a4ac:	106d      	asrs	r5, r5, #1
 801a4ae:	429d      	cmp	r5, r3
 801a4b0:	bf38      	it	cc
 801a4b2:	461d      	movcc	r5, r3
 801a4b4:	0553      	lsls	r3, r2, #21
 801a4b6:	d527      	bpl.n	801a508 <__ssputs_r+0x8e>
 801a4b8:	4629      	mov	r1, r5
 801a4ba:	f7fc fac5 	bl	8016a48 <_malloc_r>
 801a4be:	4606      	mov	r6, r0
 801a4c0:	b360      	cbz	r0, 801a51c <__ssputs_r+0xa2>
 801a4c2:	6921      	ldr	r1, [r4, #16]
 801a4c4:	464a      	mov	r2, r9
 801a4c6:	f7fe f914 	bl	80186f2 <memcpy>
 801a4ca:	89a3      	ldrh	r3, [r4, #12]
 801a4cc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a4d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a4d4:	81a3      	strh	r3, [r4, #12]
 801a4d6:	6126      	str	r6, [r4, #16]
 801a4d8:	6165      	str	r5, [r4, #20]
 801a4da:	444e      	add	r6, r9
 801a4dc:	eba5 0509 	sub.w	r5, r5, r9
 801a4e0:	6026      	str	r6, [r4, #0]
 801a4e2:	60a5      	str	r5, [r4, #8]
 801a4e4:	463e      	mov	r6, r7
 801a4e6:	42be      	cmp	r6, r7
 801a4e8:	d900      	bls.n	801a4ec <__ssputs_r+0x72>
 801a4ea:	463e      	mov	r6, r7
 801a4ec:	6820      	ldr	r0, [r4, #0]
 801a4ee:	4632      	mov	r2, r6
 801a4f0:	4641      	mov	r1, r8
 801a4f2:	f000 fdb8 	bl	801b066 <memmove>
 801a4f6:	68a3      	ldr	r3, [r4, #8]
 801a4f8:	1b9b      	subs	r3, r3, r6
 801a4fa:	60a3      	str	r3, [r4, #8]
 801a4fc:	6823      	ldr	r3, [r4, #0]
 801a4fe:	4433      	add	r3, r6
 801a500:	6023      	str	r3, [r4, #0]
 801a502:	2000      	movs	r0, #0
 801a504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a508:	462a      	mov	r2, r5
 801a50a:	f7fc fb31 	bl	8016b70 <_realloc_r>
 801a50e:	4606      	mov	r6, r0
 801a510:	2800      	cmp	r0, #0
 801a512:	d1e0      	bne.n	801a4d6 <__ssputs_r+0x5c>
 801a514:	6921      	ldr	r1, [r4, #16]
 801a516:	4650      	mov	r0, sl
 801a518:	f7fe ff5a 	bl	80193d0 <_free_r>
 801a51c:	230c      	movs	r3, #12
 801a51e:	f8ca 3000 	str.w	r3, [sl]
 801a522:	89a3      	ldrh	r3, [r4, #12]
 801a524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a528:	81a3      	strh	r3, [r4, #12]
 801a52a:	f04f 30ff 	mov.w	r0, #4294967295
 801a52e:	e7e9      	b.n	801a504 <__ssputs_r+0x8a>

0801a530 <_svfiprintf_r>:
 801a530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a534:	4698      	mov	r8, r3
 801a536:	898b      	ldrh	r3, [r1, #12]
 801a538:	061b      	lsls	r3, r3, #24
 801a53a:	b09d      	sub	sp, #116	@ 0x74
 801a53c:	4607      	mov	r7, r0
 801a53e:	460d      	mov	r5, r1
 801a540:	4614      	mov	r4, r2
 801a542:	d510      	bpl.n	801a566 <_svfiprintf_r+0x36>
 801a544:	690b      	ldr	r3, [r1, #16]
 801a546:	b973      	cbnz	r3, 801a566 <_svfiprintf_r+0x36>
 801a548:	2140      	movs	r1, #64	@ 0x40
 801a54a:	f7fc fa7d 	bl	8016a48 <_malloc_r>
 801a54e:	6028      	str	r0, [r5, #0]
 801a550:	6128      	str	r0, [r5, #16]
 801a552:	b930      	cbnz	r0, 801a562 <_svfiprintf_r+0x32>
 801a554:	230c      	movs	r3, #12
 801a556:	603b      	str	r3, [r7, #0]
 801a558:	f04f 30ff 	mov.w	r0, #4294967295
 801a55c:	b01d      	add	sp, #116	@ 0x74
 801a55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a562:	2340      	movs	r3, #64	@ 0x40
 801a564:	616b      	str	r3, [r5, #20]
 801a566:	2300      	movs	r3, #0
 801a568:	9309      	str	r3, [sp, #36]	@ 0x24
 801a56a:	2320      	movs	r3, #32
 801a56c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a570:	f8cd 800c 	str.w	r8, [sp, #12]
 801a574:	2330      	movs	r3, #48	@ 0x30
 801a576:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a714 <_svfiprintf_r+0x1e4>
 801a57a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a57e:	f04f 0901 	mov.w	r9, #1
 801a582:	4623      	mov	r3, r4
 801a584:	469a      	mov	sl, r3
 801a586:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a58a:	b10a      	cbz	r2, 801a590 <_svfiprintf_r+0x60>
 801a58c:	2a25      	cmp	r2, #37	@ 0x25
 801a58e:	d1f9      	bne.n	801a584 <_svfiprintf_r+0x54>
 801a590:	ebba 0b04 	subs.w	fp, sl, r4
 801a594:	d00b      	beq.n	801a5ae <_svfiprintf_r+0x7e>
 801a596:	465b      	mov	r3, fp
 801a598:	4622      	mov	r2, r4
 801a59a:	4629      	mov	r1, r5
 801a59c:	4638      	mov	r0, r7
 801a59e:	f7ff ff6c 	bl	801a47a <__ssputs_r>
 801a5a2:	3001      	adds	r0, #1
 801a5a4:	f000 80a7 	beq.w	801a6f6 <_svfiprintf_r+0x1c6>
 801a5a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a5aa:	445a      	add	r2, fp
 801a5ac:	9209      	str	r2, [sp, #36]	@ 0x24
 801a5ae:	f89a 3000 	ldrb.w	r3, [sl]
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	f000 809f 	beq.w	801a6f6 <_svfiprintf_r+0x1c6>
 801a5b8:	2300      	movs	r3, #0
 801a5ba:	f04f 32ff 	mov.w	r2, #4294967295
 801a5be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a5c2:	f10a 0a01 	add.w	sl, sl, #1
 801a5c6:	9304      	str	r3, [sp, #16]
 801a5c8:	9307      	str	r3, [sp, #28]
 801a5ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a5ce:	931a      	str	r3, [sp, #104]	@ 0x68
 801a5d0:	4654      	mov	r4, sl
 801a5d2:	2205      	movs	r2, #5
 801a5d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a5d8:	484e      	ldr	r0, [pc, #312]	@ (801a714 <_svfiprintf_r+0x1e4>)
 801a5da:	f7ed fe29 	bl	8008230 <memchr>
 801a5de:	9a04      	ldr	r2, [sp, #16]
 801a5e0:	b9d8      	cbnz	r0, 801a61a <_svfiprintf_r+0xea>
 801a5e2:	06d0      	lsls	r0, r2, #27
 801a5e4:	bf44      	itt	mi
 801a5e6:	2320      	movmi	r3, #32
 801a5e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a5ec:	0711      	lsls	r1, r2, #28
 801a5ee:	bf44      	itt	mi
 801a5f0:	232b      	movmi	r3, #43	@ 0x2b
 801a5f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a5f6:	f89a 3000 	ldrb.w	r3, [sl]
 801a5fa:	2b2a      	cmp	r3, #42	@ 0x2a
 801a5fc:	d015      	beq.n	801a62a <_svfiprintf_r+0xfa>
 801a5fe:	9a07      	ldr	r2, [sp, #28]
 801a600:	4654      	mov	r4, sl
 801a602:	2000      	movs	r0, #0
 801a604:	f04f 0c0a 	mov.w	ip, #10
 801a608:	4621      	mov	r1, r4
 801a60a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a60e:	3b30      	subs	r3, #48	@ 0x30
 801a610:	2b09      	cmp	r3, #9
 801a612:	d94b      	bls.n	801a6ac <_svfiprintf_r+0x17c>
 801a614:	b1b0      	cbz	r0, 801a644 <_svfiprintf_r+0x114>
 801a616:	9207      	str	r2, [sp, #28]
 801a618:	e014      	b.n	801a644 <_svfiprintf_r+0x114>
 801a61a:	eba0 0308 	sub.w	r3, r0, r8
 801a61e:	fa09 f303 	lsl.w	r3, r9, r3
 801a622:	4313      	orrs	r3, r2
 801a624:	9304      	str	r3, [sp, #16]
 801a626:	46a2      	mov	sl, r4
 801a628:	e7d2      	b.n	801a5d0 <_svfiprintf_r+0xa0>
 801a62a:	9b03      	ldr	r3, [sp, #12]
 801a62c:	1d19      	adds	r1, r3, #4
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	9103      	str	r1, [sp, #12]
 801a632:	2b00      	cmp	r3, #0
 801a634:	bfbb      	ittet	lt
 801a636:	425b      	neglt	r3, r3
 801a638:	f042 0202 	orrlt.w	r2, r2, #2
 801a63c:	9307      	strge	r3, [sp, #28]
 801a63e:	9307      	strlt	r3, [sp, #28]
 801a640:	bfb8      	it	lt
 801a642:	9204      	strlt	r2, [sp, #16]
 801a644:	7823      	ldrb	r3, [r4, #0]
 801a646:	2b2e      	cmp	r3, #46	@ 0x2e
 801a648:	d10a      	bne.n	801a660 <_svfiprintf_r+0x130>
 801a64a:	7863      	ldrb	r3, [r4, #1]
 801a64c:	2b2a      	cmp	r3, #42	@ 0x2a
 801a64e:	d132      	bne.n	801a6b6 <_svfiprintf_r+0x186>
 801a650:	9b03      	ldr	r3, [sp, #12]
 801a652:	1d1a      	adds	r2, r3, #4
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	9203      	str	r2, [sp, #12]
 801a658:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a65c:	3402      	adds	r4, #2
 801a65e:	9305      	str	r3, [sp, #20]
 801a660:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a724 <_svfiprintf_r+0x1f4>
 801a664:	7821      	ldrb	r1, [r4, #0]
 801a666:	2203      	movs	r2, #3
 801a668:	4650      	mov	r0, sl
 801a66a:	f7ed fde1 	bl	8008230 <memchr>
 801a66e:	b138      	cbz	r0, 801a680 <_svfiprintf_r+0x150>
 801a670:	9b04      	ldr	r3, [sp, #16]
 801a672:	eba0 000a 	sub.w	r0, r0, sl
 801a676:	2240      	movs	r2, #64	@ 0x40
 801a678:	4082      	lsls	r2, r0
 801a67a:	4313      	orrs	r3, r2
 801a67c:	3401      	adds	r4, #1
 801a67e:	9304      	str	r3, [sp, #16]
 801a680:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a684:	4824      	ldr	r0, [pc, #144]	@ (801a718 <_svfiprintf_r+0x1e8>)
 801a686:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a68a:	2206      	movs	r2, #6
 801a68c:	f7ed fdd0 	bl	8008230 <memchr>
 801a690:	2800      	cmp	r0, #0
 801a692:	d036      	beq.n	801a702 <_svfiprintf_r+0x1d2>
 801a694:	4b21      	ldr	r3, [pc, #132]	@ (801a71c <_svfiprintf_r+0x1ec>)
 801a696:	bb1b      	cbnz	r3, 801a6e0 <_svfiprintf_r+0x1b0>
 801a698:	9b03      	ldr	r3, [sp, #12]
 801a69a:	3307      	adds	r3, #7
 801a69c:	f023 0307 	bic.w	r3, r3, #7
 801a6a0:	3308      	adds	r3, #8
 801a6a2:	9303      	str	r3, [sp, #12]
 801a6a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a6a6:	4433      	add	r3, r6
 801a6a8:	9309      	str	r3, [sp, #36]	@ 0x24
 801a6aa:	e76a      	b.n	801a582 <_svfiprintf_r+0x52>
 801a6ac:	fb0c 3202 	mla	r2, ip, r2, r3
 801a6b0:	460c      	mov	r4, r1
 801a6b2:	2001      	movs	r0, #1
 801a6b4:	e7a8      	b.n	801a608 <_svfiprintf_r+0xd8>
 801a6b6:	2300      	movs	r3, #0
 801a6b8:	3401      	adds	r4, #1
 801a6ba:	9305      	str	r3, [sp, #20]
 801a6bc:	4619      	mov	r1, r3
 801a6be:	f04f 0c0a 	mov.w	ip, #10
 801a6c2:	4620      	mov	r0, r4
 801a6c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a6c8:	3a30      	subs	r2, #48	@ 0x30
 801a6ca:	2a09      	cmp	r2, #9
 801a6cc:	d903      	bls.n	801a6d6 <_svfiprintf_r+0x1a6>
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d0c6      	beq.n	801a660 <_svfiprintf_r+0x130>
 801a6d2:	9105      	str	r1, [sp, #20]
 801a6d4:	e7c4      	b.n	801a660 <_svfiprintf_r+0x130>
 801a6d6:	fb0c 2101 	mla	r1, ip, r1, r2
 801a6da:	4604      	mov	r4, r0
 801a6dc:	2301      	movs	r3, #1
 801a6de:	e7f0      	b.n	801a6c2 <_svfiprintf_r+0x192>
 801a6e0:	ab03      	add	r3, sp, #12
 801a6e2:	9300      	str	r3, [sp, #0]
 801a6e4:	462a      	mov	r2, r5
 801a6e6:	4b0e      	ldr	r3, [pc, #56]	@ (801a720 <_svfiprintf_r+0x1f0>)
 801a6e8:	a904      	add	r1, sp, #16
 801a6ea:	4638      	mov	r0, r7
 801a6ec:	f7fd f91c 	bl	8017928 <_printf_float>
 801a6f0:	1c42      	adds	r2, r0, #1
 801a6f2:	4606      	mov	r6, r0
 801a6f4:	d1d6      	bne.n	801a6a4 <_svfiprintf_r+0x174>
 801a6f6:	89ab      	ldrh	r3, [r5, #12]
 801a6f8:	065b      	lsls	r3, r3, #25
 801a6fa:	f53f af2d 	bmi.w	801a558 <_svfiprintf_r+0x28>
 801a6fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a700:	e72c      	b.n	801a55c <_svfiprintf_r+0x2c>
 801a702:	ab03      	add	r3, sp, #12
 801a704:	9300      	str	r3, [sp, #0]
 801a706:	462a      	mov	r2, r5
 801a708:	4b05      	ldr	r3, [pc, #20]	@ (801a720 <_svfiprintf_r+0x1f0>)
 801a70a:	a904      	add	r1, sp, #16
 801a70c:	4638      	mov	r0, r7
 801a70e:	f7fd fba3 	bl	8017e58 <_printf_i>
 801a712:	e7ed      	b.n	801a6f0 <_svfiprintf_r+0x1c0>
 801a714:	0801dc9a 	.word	0x0801dc9a
 801a718:	0801dca4 	.word	0x0801dca4
 801a71c:	08017929 	.word	0x08017929
 801a720:	0801a47b 	.word	0x0801a47b
 801a724:	0801dca0 	.word	0x0801dca0

0801a728 <_sungetc_r>:
 801a728:	b538      	push	{r3, r4, r5, lr}
 801a72a:	1c4b      	adds	r3, r1, #1
 801a72c:	4614      	mov	r4, r2
 801a72e:	d103      	bne.n	801a738 <_sungetc_r+0x10>
 801a730:	f04f 35ff 	mov.w	r5, #4294967295
 801a734:	4628      	mov	r0, r5
 801a736:	bd38      	pop	{r3, r4, r5, pc}
 801a738:	8993      	ldrh	r3, [r2, #12]
 801a73a:	f023 0320 	bic.w	r3, r3, #32
 801a73e:	8193      	strh	r3, [r2, #12]
 801a740:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a742:	6852      	ldr	r2, [r2, #4]
 801a744:	b2cd      	uxtb	r5, r1
 801a746:	b18b      	cbz	r3, 801a76c <_sungetc_r+0x44>
 801a748:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801a74a:	4293      	cmp	r3, r2
 801a74c:	dd08      	ble.n	801a760 <_sungetc_r+0x38>
 801a74e:	6823      	ldr	r3, [r4, #0]
 801a750:	1e5a      	subs	r2, r3, #1
 801a752:	6022      	str	r2, [r4, #0]
 801a754:	f803 5c01 	strb.w	r5, [r3, #-1]
 801a758:	6863      	ldr	r3, [r4, #4]
 801a75a:	3301      	adds	r3, #1
 801a75c:	6063      	str	r3, [r4, #4]
 801a75e:	e7e9      	b.n	801a734 <_sungetc_r+0xc>
 801a760:	4621      	mov	r1, r4
 801a762:	f000 fc46 	bl	801aff2 <__submore>
 801a766:	2800      	cmp	r0, #0
 801a768:	d0f1      	beq.n	801a74e <_sungetc_r+0x26>
 801a76a:	e7e1      	b.n	801a730 <_sungetc_r+0x8>
 801a76c:	6921      	ldr	r1, [r4, #16]
 801a76e:	6823      	ldr	r3, [r4, #0]
 801a770:	b151      	cbz	r1, 801a788 <_sungetc_r+0x60>
 801a772:	4299      	cmp	r1, r3
 801a774:	d208      	bcs.n	801a788 <_sungetc_r+0x60>
 801a776:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801a77a:	42a9      	cmp	r1, r5
 801a77c:	d104      	bne.n	801a788 <_sungetc_r+0x60>
 801a77e:	3b01      	subs	r3, #1
 801a780:	3201      	adds	r2, #1
 801a782:	6023      	str	r3, [r4, #0]
 801a784:	6062      	str	r2, [r4, #4]
 801a786:	e7d5      	b.n	801a734 <_sungetc_r+0xc>
 801a788:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801a78c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a790:	6363      	str	r3, [r4, #52]	@ 0x34
 801a792:	2303      	movs	r3, #3
 801a794:	63a3      	str	r3, [r4, #56]	@ 0x38
 801a796:	4623      	mov	r3, r4
 801a798:	f803 5f46 	strb.w	r5, [r3, #70]!
 801a79c:	6023      	str	r3, [r4, #0]
 801a79e:	2301      	movs	r3, #1
 801a7a0:	e7dc      	b.n	801a75c <_sungetc_r+0x34>

0801a7a2 <__ssrefill_r>:
 801a7a2:	b510      	push	{r4, lr}
 801a7a4:	460c      	mov	r4, r1
 801a7a6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801a7a8:	b169      	cbz	r1, 801a7c6 <__ssrefill_r+0x24>
 801a7aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a7ae:	4299      	cmp	r1, r3
 801a7b0:	d001      	beq.n	801a7b6 <__ssrefill_r+0x14>
 801a7b2:	f7fe fe0d 	bl	80193d0 <_free_r>
 801a7b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a7b8:	6063      	str	r3, [r4, #4]
 801a7ba:	2000      	movs	r0, #0
 801a7bc:	6360      	str	r0, [r4, #52]	@ 0x34
 801a7be:	b113      	cbz	r3, 801a7c6 <__ssrefill_r+0x24>
 801a7c0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801a7c2:	6023      	str	r3, [r4, #0]
 801a7c4:	bd10      	pop	{r4, pc}
 801a7c6:	6923      	ldr	r3, [r4, #16]
 801a7c8:	6023      	str	r3, [r4, #0]
 801a7ca:	2300      	movs	r3, #0
 801a7cc:	6063      	str	r3, [r4, #4]
 801a7ce:	89a3      	ldrh	r3, [r4, #12]
 801a7d0:	f043 0320 	orr.w	r3, r3, #32
 801a7d4:	81a3      	strh	r3, [r4, #12]
 801a7d6:	f04f 30ff 	mov.w	r0, #4294967295
 801a7da:	e7f3      	b.n	801a7c4 <__ssrefill_r+0x22>

0801a7dc <__ssvfiscanf_r>:
 801a7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7e0:	460c      	mov	r4, r1
 801a7e2:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801a7e6:	2100      	movs	r1, #0
 801a7e8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801a7ec:	49a6      	ldr	r1, [pc, #664]	@ (801aa88 <__ssvfiscanf_r+0x2ac>)
 801a7ee:	91a0      	str	r1, [sp, #640]	@ 0x280
 801a7f0:	f10d 0804 	add.w	r8, sp, #4
 801a7f4:	49a5      	ldr	r1, [pc, #660]	@ (801aa8c <__ssvfiscanf_r+0x2b0>)
 801a7f6:	4fa6      	ldr	r7, [pc, #664]	@ (801aa90 <__ssvfiscanf_r+0x2b4>)
 801a7f8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801a7fc:	4606      	mov	r6, r0
 801a7fe:	91a1      	str	r1, [sp, #644]	@ 0x284
 801a800:	9300      	str	r3, [sp, #0]
 801a802:	f892 9000 	ldrb.w	r9, [r2]
 801a806:	f1b9 0f00 	cmp.w	r9, #0
 801a80a:	f000 8158 	beq.w	801aabe <__ssvfiscanf_r+0x2e2>
 801a80e:	f817 3009 	ldrb.w	r3, [r7, r9]
 801a812:	f013 0308 	ands.w	r3, r3, #8
 801a816:	f102 0501 	add.w	r5, r2, #1
 801a81a:	d019      	beq.n	801a850 <__ssvfiscanf_r+0x74>
 801a81c:	6863      	ldr	r3, [r4, #4]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	dd0f      	ble.n	801a842 <__ssvfiscanf_r+0x66>
 801a822:	6823      	ldr	r3, [r4, #0]
 801a824:	781a      	ldrb	r2, [r3, #0]
 801a826:	5cba      	ldrb	r2, [r7, r2]
 801a828:	0712      	lsls	r2, r2, #28
 801a82a:	d401      	bmi.n	801a830 <__ssvfiscanf_r+0x54>
 801a82c:	462a      	mov	r2, r5
 801a82e:	e7e8      	b.n	801a802 <__ssvfiscanf_r+0x26>
 801a830:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801a832:	3201      	adds	r2, #1
 801a834:	9245      	str	r2, [sp, #276]	@ 0x114
 801a836:	6862      	ldr	r2, [r4, #4]
 801a838:	3301      	adds	r3, #1
 801a83a:	3a01      	subs	r2, #1
 801a83c:	6062      	str	r2, [r4, #4]
 801a83e:	6023      	str	r3, [r4, #0]
 801a840:	e7ec      	b.n	801a81c <__ssvfiscanf_r+0x40>
 801a842:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801a844:	4621      	mov	r1, r4
 801a846:	4630      	mov	r0, r6
 801a848:	4798      	blx	r3
 801a84a:	2800      	cmp	r0, #0
 801a84c:	d0e9      	beq.n	801a822 <__ssvfiscanf_r+0x46>
 801a84e:	e7ed      	b.n	801a82c <__ssvfiscanf_r+0x50>
 801a850:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801a854:	f040 8085 	bne.w	801a962 <__ssvfiscanf_r+0x186>
 801a858:	9341      	str	r3, [sp, #260]	@ 0x104
 801a85a:	9343      	str	r3, [sp, #268]	@ 0x10c
 801a85c:	7853      	ldrb	r3, [r2, #1]
 801a85e:	2b2a      	cmp	r3, #42	@ 0x2a
 801a860:	bf02      	ittt	eq
 801a862:	2310      	moveq	r3, #16
 801a864:	1c95      	addeq	r5, r2, #2
 801a866:	9341      	streq	r3, [sp, #260]	@ 0x104
 801a868:	220a      	movs	r2, #10
 801a86a:	46aa      	mov	sl, r5
 801a86c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801a870:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801a874:	2b09      	cmp	r3, #9
 801a876:	d91e      	bls.n	801a8b6 <__ssvfiscanf_r+0xda>
 801a878:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801aa94 <__ssvfiscanf_r+0x2b8>
 801a87c:	2203      	movs	r2, #3
 801a87e:	4658      	mov	r0, fp
 801a880:	f7ed fcd6 	bl	8008230 <memchr>
 801a884:	b138      	cbz	r0, 801a896 <__ssvfiscanf_r+0xba>
 801a886:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801a888:	eba0 000b 	sub.w	r0, r0, fp
 801a88c:	2301      	movs	r3, #1
 801a88e:	4083      	lsls	r3, r0
 801a890:	4313      	orrs	r3, r2
 801a892:	9341      	str	r3, [sp, #260]	@ 0x104
 801a894:	4655      	mov	r5, sl
 801a896:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a89a:	2b78      	cmp	r3, #120	@ 0x78
 801a89c:	d806      	bhi.n	801a8ac <__ssvfiscanf_r+0xd0>
 801a89e:	2b57      	cmp	r3, #87	@ 0x57
 801a8a0:	d810      	bhi.n	801a8c4 <__ssvfiscanf_r+0xe8>
 801a8a2:	2b25      	cmp	r3, #37	@ 0x25
 801a8a4:	d05d      	beq.n	801a962 <__ssvfiscanf_r+0x186>
 801a8a6:	d857      	bhi.n	801a958 <__ssvfiscanf_r+0x17c>
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	d075      	beq.n	801a998 <__ssvfiscanf_r+0x1bc>
 801a8ac:	2303      	movs	r3, #3
 801a8ae:	9347      	str	r3, [sp, #284]	@ 0x11c
 801a8b0:	230a      	movs	r3, #10
 801a8b2:	9342      	str	r3, [sp, #264]	@ 0x108
 801a8b4:	e088      	b.n	801a9c8 <__ssvfiscanf_r+0x1ec>
 801a8b6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801a8b8:	fb02 1103 	mla	r1, r2, r3, r1
 801a8bc:	3930      	subs	r1, #48	@ 0x30
 801a8be:	9143      	str	r1, [sp, #268]	@ 0x10c
 801a8c0:	4655      	mov	r5, sl
 801a8c2:	e7d2      	b.n	801a86a <__ssvfiscanf_r+0x8e>
 801a8c4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801a8c8:	2a20      	cmp	r2, #32
 801a8ca:	d8ef      	bhi.n	801a8ac <__ssvfiscanf_r+0xd0>
 801a8cc:	a101      	add	r1, pc, #4	@ (adr r1, 801a8d4 <__ssvfiscanf_r+0xf8>)
 801a8ce:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a8d2:	bf00      	nop
 801a8d4:	0801a9a7 	.word	0x0801a9a7
 801a8d8:	0801a8ad 	.word	0x0801a8ad
 801a8dc:	0801a8ad 	.word	0x0801a8ad
 801a8e0:	0801aa01 	.word	0x0801aa01
 801a8e4:	0801a8ad 	.word	0x0801a8ad
 801a8e8:	0801a8ad 	.word	0x0801a8ad
 801a8ec:	0801a8ad 	.word	0x0801a8ad
 801a8f0:	0801a8ad 	.word	0x0801a8ad
 801a8f4:	0801a8ad 	.word	0x0801a8ad
 801a8f8:	0801a8ad 	.word	0x0801a8ad
 801a8fc:	0801a8ad 	.word	0x0801a8ad
 801a900:	0801aa17 	.word	0x0801aa17
 801a904:	0801a9fd 	.word	0x0801a9fd
 801a908:	0801a95f 	.word	0x0801a95f
 801a90c:	0801a95f 	.word	0x0801a95f
 801a910:	0801a95f 	.word	0x0801a95f
 801a914:	0801a8ad 	.word	0x0801a8ad
 801a918:	0801a9b9 	.word	0x0801a9b9
 801a91c:	0801a8ad 	.word	0x0801a8ad
 801a920:	0801a8ad 	.word	0x0801a8ad
 801a924:	0801a8ad 	.word	0x0801a8ad
 801a928:	0801a8ad 	.word	0x0801a8ad
 801a92c:	0801aa27 	.word	0x0801aa27
 801a930:	0801a9c1 	.word	0x0801a9c1
 801a934:	0801a99f 	.word	0x0801a99f
 801a938:	0801a8ad 	.word	0x0801a8ad
 801a93c:	0801a8ad 	.word	0x0801a8ad
 801a940:	0801aa23 	.word	0x0801aa23
 801a944:	0801a8ad 	.word	0x0801a8ad
 801a948:	0801a9fd 	.word	0x0801a9fd
 801a94c:	0801a8ad 	.word	0x0801a8ad
 801a950:	0801a8ad 	.word	0x0801a8ad
 801a954:	0801a9a7 	.word	0x0801a9a7
 801a958:	3b45      	subs	r3, #69	@ 0x45
 801a95a:	2b02      	cmp	r3, #2
 801a95c:	d8a6      	bhi.n	801a8ac <__ssvfiscanf_r+0xd0>
 801a95e:	2305      	movs	r3, #5
 801a960:	e031      	b.n	801a9c6 <__ssvfiscanf_r+0x1ea>
 801a962:	6863      	ldr	r3, [r4, #4]
 801a964:	2b00      	cmp	r3, #0
 801a966:	dd0d      	ble.n	801a984 <__ssvfiscanf_r+0x1a8>
 801a968:	6823      	ldr	r3, [r4, #0]
 801a96a:	781a      	ldrb	r2, [r3, #0]
 801a96c:	454a      	cmp	r2, r9
 801a96e:	f040 80a6 	bne.w	801aabe <__ssvfiscanf_r+0x2e2>
 801a972:	3301      	adds	r3, #1
 801a974:	6862      	ldr	r2, [r4, #4]
 801a976:	6023      	str	r3, [r4, #0]
 801a978:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801a97a:	3a01      	subs	r2, #1
 801a97c:	3301      	adds	r3, #1
 801a97e:	6062      	str	r2, [r4, #4]
 801a980:	9345      	str	r3, [sp, #276]	@ 0x114
 801a982:	e753      	b.n	801a82c <__ssvfiscanf_r+0x50>
 801a984:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801a986:	4621      	mov	r1, r4
 801a988:	4630      	mov	r0, r6
 801a98a:	4798      	blx	r3
 801a98c:	2800      	cmp	r0, #0
 801a98e:	d0eb      	beq.n	801a968 <__ssvfiscanf_r+0x18c>
 801a990:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801a992:	2800      	cmp	r0, #0
 801a994:	f040 808b 	bne.w	801aaae <__ssvfiscanf_r+0x2d2>
 801a998:	f04f 30ff 	mov.w	r0, #4294967295
 801a99c:	e08b      	b.n	801aab6 <__ssvfiscanf_r+0x2da>
 801a99e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801a9a0:	f042 0220 	orr.w	r2, r2, #32
 801a9a4:	9241      	str	r2, [sp, #260]	@ 0x104
 801a9a6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801a9a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801a9ac:	9241      	str	r2, [sp, #260]	@ 0x104
 801a9ae:	2210      	movs	r2, #16
 801a9b0:	2b6e      	cmp	r3, #110	@ 0x6e
 801a9b2:	9242      	str	r2, [sp, #264]	@ 0x108
 801a9b4:	d902      	bls.n	801a9bc <__ssvfiscanf_r+0x1e0>
 801a9b6:	e005      	b.n	801a9c4 <__ssvfiscanf_r+0x1e8>
 801a9b8:	2300      	movs	r3, #0
 801a9ba:	9342      	str	r3, [sp, #264]	@ 0x108
 801a9bc:	2303      	movs	r3, #3
 801a9be:	e002      	b.n	801a9c6 <__ssvfiscanf_r+0x1ea>
 801a9c0:	2308      	movs	r3, #8
 801a9c2:	9342      	str	r3, [sp, #264]	@ 0x108
 801a9c4:	2304      	movs	r3, #4
 801a9c6:	9347      	str	r3, [sp, #284]	@ 0x11c
 801a9c8:	6863      	ldr	r3, [r4, #4]
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	dd39      	ble.n	801aa42 <__ssvfiscanf_r+0x266>
 801a9ce:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801a9d0:	0659      	lsls	r1, r3, #25
 801a9d2:	d404      	bmi.n	801a9de <__ssvfiscanf_r+0x202>
 801a9d4:	6823      	ldr	r3, [r4, #0]
 801a9d6:	781a      	ldrb	r2, [r3, #0]
 801a9d8:	5cba      	ldrb	r2, [r7, r2]
 801a9da:	0712      	lsls	r2, r2, #28
 801a9dc:	d438      	bmi.n	801aa50 <__ssvfiscanf_r+0x274>
 801a9de:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801a9e0:	2b02      	cmp	r3, #2
 801a9e2:	dc47      	bgt.n	801aa74 <__ssvfiscanf_r+0x298>
 801a9e4:	466b      	mov	r3, sp
 801a9e6:	4622      	mov	r2, r4
 801a9e8:	a941      	add	r1, sp, #260	@ 0x104
 801a9ea:	4630      	mov	r0, r6
 801a9ec:	f000 f86c 	bl	801aac8 <_scanf_chars>
 801a9f0:	2801      	cmp	r0, #1
 801a9f2:	d064      	beq.n	801aabe <__ssvfiscanf_r+0x2e2>
 801a9f4:	2802      	cmp	r0, #2
 801a9f6:	f47f af19 	bne.w	801a82c <__ssvfiscanf_r+0x50>
 801a9fa:	e7c9      	b.n	801a990 <__ssvfiscanf_r+0x1b4>
 801a9fc:	220a      	movs	r2, #10
 801a9fe:	e7d7      	b.n	801a9b0 <__ssvfiscanf_r+0x1d4>
 801aa00:	4629      	mov	r1, r5
 801aa02:	4640      	mov	r0, r8
 801aa04:	f000 fabc 	bl	801af80 <__sccl>
 801aa08:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801aa0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aa0e:	9341      	str	r3, [sp, #260]	@ 0x104
 801aa10:	4605      	mov	r5, r0
 801aa12:	2301      	movs	r3, #1
 801aa14:	e7d7      	b.n	801a9c6 <__ssvfiscanf_r+0x1ea>
 801aa16:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801aa18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aa1c:	9341      	str	r3, [sp, #260]	@ 0x104
 801aa1e:	2300      	movs	r3, #0
 801aa20:	e7d1      	b.n	801a9c6 <__ssvfiscanf_r+0x1ea>
 801aa22:	2302      	movs	r3, #2
 801aa24:	e7cf      	b.n	801a9c6 <__ssvfiscanf_r+0x1ea>
 801aa26:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801aa28:	06c3      	lsls	r3, r0, #27
 801aa2a:	f53f aeff 	bmi.w	801a82c <__ssvfiscanf_r+0x50>
 801aa2e:	9b00      	ldr	r3, [sp, #0]
 801aa30:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801aa32:	1d19      	adds	r1, r3, #4
 801aa34:	9100      	str	r1, [sp, #0]
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	07c0      	lsls	r0, r0, #31
 801aa3a:	bf4c      	ite	mi
 801aa3c:	801a      	strhmi	r2, [r3, #0]
 801aa3e:	601a      	strpl	r2, [r3, #0]
 801aa40:	e6f4      	b.n	801a82c <__ssvfiscanf_r+0x50>
 801aa42:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801aa44:	4621      	mov	r1, r4
 801aa46:	4630      	mov	r0, r6
 801aa48:	4798      	blx	r3
 801aa4a:	2800      	cmp	r0, #0
 801aa4c:	d0bf      	beq.n	801a9ce <__ssvfiscanf_r+0x1f2>
 801aa4e:	e79f      	b.n	801a990 <__ssvfiscanf_r+0x1b4>
 801aa50:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801aa52:	3201      	adds	r2, #1
 801aa54:	9245      	str	r2, [sp, #276]	@ 0x114
 801aa56:	6862      	ldr	r2, [r4, #4]
 801aa58:	3a01      	subs	r2, #1
 801aa5a:	2a00      	cmp	r2, #0
 801aa5c:	6062      	str	r2, [r4, #4]
 801aa5e:	dd02      	ble.n	801aa66 <__ssvfiscanf_r+0x28a>
 801aa60:	3301      	adds	r3, #1
 801aa62:	6023      	str	r3, [r4, #0]
 801aa64:	e7b6      	b.n	801a9d4 <__ssvfiscanf_r+0x1f8>
 801aa66:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801aa68:	4621      	mov	r1, r4
 801aa6a:	4630      	mov	r0, r6
 801aa6c:	4798      	blx	r3
 801aa6e:	2800      	cmp	r0, #0
 801aa70:	d0b0      	beq.n	801a9d4 <__ssvfiscanf_r+0x1f8>
 801aa72:	e78d      	b.n	801a990 <__ssvfiscanf_r+0x1b4>
 801aa74:	2b04      	cmp	r3, #4
 801aa76:	dc0f      	bgt.n	801aa98 <__ssvfiscanf_r+0x2bc>
 801aa78:	466b      	mov	r3, sp
 801aa7a:	4622      	mov	r2, r4
 801aa7c:	a941      	add	r1, sp, #260	@ 0x104
 801aa7e:	4630      	mov	r0, r6
 801aa80:	f000 f87c 	bl	801ab7c <_scanf_i>
 801aa84:	e7b4      	b.n	801a9f0 <__ssvfiscanf_r+0x214>
 801aa86:	bf00      	nop
 801aa88:	0801a729 	.word	0x0801a729
 801aa8c:	0801a7a3 	.word	0x0801a7a3
 801aa90:	0801dd59 	.word	0x0801dd59
 801aa94:	0801dca0 	.word	0x0801dca0
 801aa98:	4b0a      	ldr	r3, [pc, #40]	@ (801aac4 <__ssvfiscanf_r+0x2e8>)
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	f43f aec6 	beq.w	801a82c <__ssvfiscanf_r+0x50>
 801aaa0:	466b      	mov	r3, sp
 801aaa2:	4622      	mov	r2, r4
 801aaa4:	a941      	add	r1, sp, #260	@ 0x104
 801aaa6:	4630      	mov	r0, r6
 801aaa8:	f3af 8000 	nop.w
 801aaac:	e7a0      	b.n	801a9f0 <__ssvfiscanf_r+0x214>
 801aaae:	89a3      	ldrh	r3, [r4, #12]
 801aab0:	065b      	lsls	r3, r3, #25
 801aab2:	f53f af71 	bmi.w	801a998 <__ssvfiscanf_r+0x1bc>
 801aab6:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801aaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aabe:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801aac0:	e7f9      	b.n	801aab6 <__ssvfiscanf_r+0x2da>
 801aac2:	bf00      	nop
 801aac4:	00000000 	.word	0x00000000

0801aac8 <_scanf_chars>:
 801aac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aacc:	4615      	mov	r5, r2
 801aace:	688a      	ldr	r2, [r1, #8]
 801aad0:	4680      	mov	r8, r0
 801aad2:	460c      	mov	r4, r1
 801aad4:	b932      	cbnz	r2, 801aae4 <_scanf_chars+0x1c>
 801aad6:	698a      	ldr	r2, [r1, #24]
 801aad8:	2a00      	cmp	r2, #0
 801aada:	bf14      	ite	ne
 801aadc:	f04f 32ff 	movne.w	r2, #4294967295
 801aae0:	2201      	moveq	r2, #1
 801aae2:	608a      	str	r2, [r1, #8]
 801aae4:	6822      	ldr	r2, [r4, #0]
 801aae6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801ab78 <_scanf_chars+0xb0>
 801aaea:	06d1      	lsls	r1, r2, #27
 801aaec:	bf5f      	itttt	pl
 801aaee:	681a      	ldrpl	r2, [r3, #0]
 801aaf0:	1d11      	addpl	r1, r2, #4
 801aaf2:	6019      	strpl	r1, [r3, #0]
 801aaf4:	6816      	ldrpl	r6, [r2, #0]
 801aaf6:	2700      	movs	r7, #0
 801aaf8:	69a0      	ldr	r0, [r4, #24]
 801aafa:	b188      	cbz	r0, 801ab20 <_scanf_chars+0x58>
 801aafc:	2801      	cmp	r0, #1
 801aafe:	d107      	bne.n	801ab10 <_scanf_chars+0x48>
 801ab00:	682b      	ldr	r3, [r5, #0]
 801ab02:	781a      	ldrb	r2, [r3, #0]
 801ab04:	6963      	ldr	r3, [r4, #20]
 801ab06:	5c9b      	ldrb	r3, [r3, r2]
 801ab08:	b953      	cbnz	r3, 801ab20 <_scanf_chars+0x58>
 801ab0a:	2f00      	cmp	r7, #0
 801ab0c:	d031      	beq.n	801ab72 <_scanf_chars+0xaa>
 801ab0e:	e022      	b.n	801ab56 <_scanf_chars+0x8e>
 801ab10:	2802      	cmp	r0, #2
 801ab12:	d120      	bne.n	801ab56 <_scanf_chars+0x8e>
 801ab14:	682b      	ldr	r3, [r5, #0]
 801ab16:	781b      	ldrb	r3, [r3, #0]
 801ab18:	f819 3003 	ldrb.w	r3, [r9, r3]
 801ab1c:	071b      	lsls	r3, r3, #28
 801ab1e:	d41a      	bmi.n	801ab56 <_scanf_chars+0x8e>
 801ab20:	6823      	ldr	r3, [r4, #0]
 801ab22:	06da      	lsls	r2, r3, #27
 801ab24:	bf5e      	ittt	pl
 801ab26:	682b      	ldrpl	r3, [r5, #0]
 801ab28:	781b      	ldrbpl	r3, [r3, #0]
 801ab2a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801ab2e:	682a      	ldr	r2, [r5, #0]
 801ab30:	686b      	ldr	r3, [r5, #4]
 801ab32:	3201      	adds	r2, #1
 801ab34:	602a      	str	r2, [r5, #0]
 801ab36:	68a2      	ldr	r2, [r4, #8]
 801ab38:	3b01      	subs	r3, #1
 801ab3a:	3a01      	subs	r2, #1
 801ab3c:	606b      	str	r3, [r5, #4]
 801ab3e:	3701      	adds	r7, #1
 801ab40:	60a2      	str	r2, [r4, #8]
 801ab42:	b142      	cbz	r2, 801ab56 <_scanf_chars+0x8e>
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	dcd7      	bgt.n	801aaf8 <_scanf_chars+0x30>
 801ab48:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801ab4c:	4629      	mov	r1, r5
 801ab4e:	4640      	mov	r0, r8
 801ab50:	4798      	blx	r3
 801ab52:	2800      	cmp	r0, #0
 801ab54:	d0d0      	beq.n	801aaf8 <_scanf_chars+0x30>
 801ab56:	6823      	ldr	r3, [r4, #0]
 801ab58:	f013 0310 	ands.w	r3, r3, #16
 801ab5c:	d105      	bne.n	801ab6a <_scanf_chars+0xa2>
 801ab5e:	68e2      	ldr	r2, [r4, #12]
 801ab60:	3201      	adds	r2, #1
 801ab62:	60e2      	str	r2, [r4, #12]
 801ab64:	69a2      	ldr	r2, [r4, #24]
 801ab66:	b102      	cbz	r2, 801ab6a <_scanf_chars+0xa2>
 801ab68:	7033      	strb	r3, [r6, #0]
 801ab6a:	6923      	ldr	r3, [r4, #16]
 801ab6c:	443b      	add	r3, r7
 801ab6e:	6123      	str	r3, [r4, #16]
 801ab70:	2000      	movs	r0, #0
 801ab72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab76:	bf00      	nop
 801ab78:	0801dd59 	.word	0x0801dd59

0801ab7c <_scanf_i>:
 801ab7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab80:	4698      	mov	r8, r3
 801ab82:	4b74      	ldr	r3, [pc, #464]	@ (801ad54 <_scanf_i+0x1d8>)
 801ab84:	460c      	mov	r4, r1
 801ab86:	4682      	mov	sl, r0
 801ab88:	4616      	mov	r6, r2
 801ab8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ab8e:	b087      	sub	sp, #28
 801ab90:	ab03      	add	r3, sp, #12
 801ab92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ab96:	4b70      	ldr	r3, [pc, #448]	@ (801ad58 <_scanf_i+0x1dc>)
 801ab98:	69a1      	ldr	r1, [r4, #24]
 801ab9a:	4a70      	ldr	r2, [pc, #448]	@ (801ad5c <_scanf_i+0x1e0>)
 801ab9c:	2903      	cmp	r1, #3
 801ab9e:	bf08      	it	eq
 801aba0:	461a      	moveq	r2, r3
 801aba2:	68a3      	ldr	r3, [r4, #8]
 801aba4:	9201      	str	r2, [sp, #4]
 801aba6:	1e5a      	subs	r2, r3, #1
 801aba8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801abac:	bf88      	it	hi
 801abae:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801abb2:	4627      	mov	r7, r4
 801abb4:	bf82      	ittt	hi
 801abb6:	eb03 0905 	addhi.w	r9, r3, r5
 801abba:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801abbe:	60a3      	strhi	r3, [r4, #8]
 801abc0:	f857 3b1c 	ldr.w	r3, [r7], #28
 801abc4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801abc8:	bf98      	it	ls
 801abca:	f04f 0900 	movls.w	r9, #0
 801abce:	6023      	str	r3, [r4, #0]
 801abd0:	463d      	mov	r5, r7
 801abd2:	f04f 0b00 	mov.w	fp, #0
 801abd6:	6831      	ldr	r1, [r6, #0]
 801abd8:	ab03      	add	r3, sp, #12
 801abda:	7809      	ldrb	r1, [r1, #0]
 801abdc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801abe0:	2202      	movs	r2, #2
 801abe2:	f7ed fb25 	bl	8008230 <memchr>
 801abe6:	b328      	cbz	r0, 801ac34 <_scanf_i+0xb8>
 801abe8:	f1bb 0f01 	cmp.w	fp, #1
 801abec:	d159      	bne.n	801aca2 <_scanf_i+0x126>
 801abee:	6862      	ldr	r2, [r4, #4]
 801abf0:	b92a      	cbnz	r2, 801abfe <_scanf_i+0x82>
 801abf2:	6822      	ldr	r2, [r4, #0]
 801abf4:	2108      	movs	r1, #8
 801abf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801abfa:	6061      	str	r1, [r4, #4]
 801abfc:	6022      	str	r2, [r4, #0]
 801abfe:	6822      	ldr	r2, [r4, #0]
 801ac00:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801ac04:	6022      	str	r2, [r4, #0]
 801ac06:	68a2      	ldr	r2, [r4, #8]
 801ac08:	1e51      	subs	r1, r2, #1
 801ac0a:	60a1      	str	r1, [r4, #8]
 801ac0c:	b192      	cbz	r2, 801ac34 <_scanf_i+0xb8>
 801ac0e:	6832      	ldr	r2, [r6, #0]
 801ac10:	1c51      	adds	r1, r2, #1
 801ac12:	6031      	str	r1, [r6, #0]
 801ac14:	7812      	ldrb	r2, [r2, #0]
 801ac16:	f805 2b01 	strb.w	r2, [r5], #1
 801ac1a:	6872      	ldr	r2, [r6, #4]
 801ac1c:	3a01      	subs	r2, #1
 801ac1e:	2a00      	cmp	r2, #0
 801ac20:	6072      	str	r2, [r6, #4]
 801ac22:	dc07      	bgt.n	801ac34 <_scanf_i+0xb8>
 801ac24:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801ac28:	4631      	mov	r1, r6
 801ac2a:	4650      	mov	r0, sl
 801ac2c:	4790      	blx	r2
 801ac2e:	2800      	cmp	r0, #0
 801ac30:	f040 8085 	bne.w	801ad3e <_scanf_i+0x1c2>
 801ac34:	f10b 0b01 	add.w	fp, fp, #1
 801ac38:	f1bb 0f03 	cmp.w	fp, #3
 801ac3c:	d1cb      	bne.n	801abd6 <_scanf_i+0x5a>
 801ac3e:	6863      	ldr	r3, [r4, #4]
 801ac40:	b90b      	cbnz	r3, 801ac46 <_scanf_i+0xca>
 801ac42:	230a      	movs	r3, #10
 801ac44:	6063      	str	r3, [r4, #4]
 801ac46:	6863      	ldr	r3, [r4, #4]
 801ac48:	4945      	ldr	r1, [pc, #276]	@ (801ad60 <_scanf_i+0x1e4>)
 801ac4a:	6960      	ldr	r0, [r4, #20]
 801ac4c:	1ac9      	subs	r1, r1, r3
 801ac4e:	f000 f997 	bl	801af80 <__sccl>
 801ac52:	f04f 0b00 	mov.w	fp, #0
 801ac56:	68a3      	ldr	r3, [r4, #8]
 801ac58:	6822      	ldr	r2, [r4, #0]
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	d03d      	beq.n	801acda <_scanf_i+0x15e>
 801ac5e:	6831      	ldr	r1, [r6, #0]
 801ac60:	6960      	ldr	r0, [r4, #20]
 801ac62:	f891 c000 	ldrb.w	ip, [r1]
 801ac66:	f810 000c 	ldrb.w	r0, [r0, ip]
 801ac6a:	2800      	cmp	r0, #0
 801ac6c:	d035      	beq.n	801acda <_scanf_i+0x15e>
 801ac6e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801ac72:	d124      	bne.n	801acbe <_scanf_i+0x142>
 801ac74:	0510      	lsls	r0, r2, #20
 801ac76:	d522      	bpl.n	801acbe <_scanf_i+0x142>
 801ac78:	f10b 0b01 	add.w	fp, fp, #1
 801ac7c:	f1b9 0f00 	cmp.w	r9, #0
 801ac80:	d003      	beq.n	801ac8a <_scanf_i+0x10e>
 801ac82:	3301      	adds	r3, #1
 801ac84:	f109 39ff 	add.w	r9, r9, #4294967295
 801ac88:	60a3      	str	r3, [r4, #8]
 801ac8a:	6873      	ldr	r3, [r6, #4]
 801ac8c:	3b01      	subs	r3, #1
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	6073      	str	r3, [r6, #4]
 801ac92:	dd1b      	ble.n	801accc <_scanf_i+0x150>
 801ac94:	6833      	ldr	r3, [r6, #0]
 801ac96:	3301      	adds	r3, #1
 801ac98:	6033      	str	r3, [r6, #0]
 801ac9a:	68a3      	ldr	r3, [r4, #8]
 801ac9c:	3b01      	subs	r3, #1
 801ac9e:	60a3      	str	r3, [r4, #8]
 801aca0:	e7d9      	b.n	801ac56 <_scanf_i+0xda>
 801aca2:	f1bb 0f02 	cmp.w	fp, #2
 801aca6:	d1ae      	bne.n	801ac06 <_scanf_i+0x8a>
 801aca8:	6822      	ldr	r2, [r4, #0]
 801acaa:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801acae:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801acb2:	d1c4      	bne.n	801ac3e <_scanf_i+0xc2>
 801acb4:	2110      	movs	r1, #16
 801acb6:	6061      	str	r1, [r4, #4]
 801acb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801acbc:	e7a2      	b.n	801ac04 <_scanf_i+0x88>
 801acbe:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801acc2:	6022      	str	r2, [r4, #0]
 801acc4:	780b      	ldrb	r3, [r1, #0]
 801acc6:	f805 3b01 	strb.w	r3, [r5], #1
 801acca:	e7de      	b.n	801ac8a <_scanf_i+0x10e>
 801accc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801acd0:	4631      	mov	r1, r6
 801acd2:	4650      	mov	r0, sl
 801acd4:	4798      	blx	r3
 801acd6:	2800      	cmp	r0, #0
 801acd8:	d0df      	beq.n	801ac9a <_scanf_i+0x11e>
 801acda:	6823      	ldr	r3, [r4, #0]
 801acdc:	05d9      	lsls	r1, r3, #23
 801acde:	d50d      	bpl.n	801acfc <_scanf_i+0x180>
 801ace0:	42bd      	cmp	r5, r7
 801ace2:	d909      	bls.n	801acf8 <_scanf_i+0x17c>
 801ace4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801ace8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801acec:	4632      	mov	r2, r6
 801acee:	4650      	mov	r0, sl
 801acf0:	4798      	blx	r3
 801acf2:	f105 39ff 	add.w	r9, r5, #4294967295
 801acf6:	464d      	mov	r5, r9
 801acf8:	42bd      	cmp	r5, r7
 801acfa:	d028      	beq.n	801ad4e <_scanf_i+0x1d2>
 801acfc:	6822      	ldr	r2, [r4, #0]
 801acfe:	f012 0210 	ands.w	r2, r2, #16
 801ad02:	d113      	bne.n	801ad2c <_scanf_i+0x1b0>
 801ad04:	702a      	strb	r2, [r5, #0]
 801ad06:	6863      	ldr	r3, [r4, #4]
 801ad08:	9e01      	ldr	r6, [sp, #4]
 801ad0a:	4639      	mov	r1, r7
 801ad0c:	4650      	mov	r0, sl
 801ad0e:	47b0      	blx	r6
 801ad10:	f8d8 3000 	ldr.w	r3, [r8]
 801ad14:	6821      	ldr	r1, [r4, #0]
 801ad16:	1d1a      	adds	r2, r3, #4
 801ad18:	f8c8 2000 	str.w	r2, [r8]
 801ad1c:	f011 0f20 	tst.w	r1, #32
 801ad20:	681b      	ldr	r3, [r3, #0]
 801ad22:	d00f      	beq.n	801ad44 <_scanf_i+0x1c8>
 801ad24:	6018      	str	r0, [r3, #0]
 801ad26:	68e3      	ldr	r3, [r4, #12]
 801ad28:	3301      	adds	r3, #1
 801ad2a:	60e3      	str	r3, [r4, #12]
 801ad2c:	6923      	ldr	r3, [r4, #16]
 801ad2e:	1bed      	subs	r5, r5, r7
 801ad30:	445d      	add	r5, fp
 801ad32:	442b      	add	r3, r5
 801ad34:	6123      	str	r3, [r4, #16]
 801ad36:	2000      	movs	r0, #0
 801ad38:	b007      	add	sp, #28
 801ad3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad3e:	f04f 0b00 	mov.w	fp, #0
 801ad42:	e7ca      	b.n	801acda <_scanf_i+0x15e>
 801ad44:	07ca      	lsls	r2, r1, #31
 801ad46:	bf4c      	ite	mi
 801ad48:	8018      	strhmi	r0, [r3, #0]
 801ad4a:	6018      	strpl	r0, [r3, #0]
 801ad4c:	e7eb      	b.n	801ad26 <_scanf_i+0x1aa>
 801ad4e:	2001      	movs	r0, #1
 801ad50:	e7f2      	b.n	801ad38 <_scanf_i+0x1bc>
 801ad52:	bf00      	nop
 801ad54:	0801bfc0 	.word	0x0801bfc0
 801ad58:	0801b239 	.word	0x0801b239
 801ad5c:	0801b319 	.word	0x0801b319
 801ad60:	0801dcbb 	.word	0x0801dcbb

0801ad64 <__sflush_r>:
 801ad64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ad68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad6c:	0716      	lsls	r6, r2, #28
 801ad6e:	4605      	mov	r5, r0
 801ad70:	460c      	mov	r4, r1
 801ad72:	d454      	bmi.n	801ae1e <__sflush_r+0xba>
 801ad74:	684b      	ldr	r3, [r1, #4]
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	dc02      	bgt.n	801ad80 <__sflush_r+0x1c>
 801ad7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	dd48      	ble.n	801ae12 <__sflush_r+0xae>
 801ad80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ad82:	2e00      	cmp	r6, #0
 801ad84:	d045      	beq.n	801ae12 <__sflush_r+0xae>
 801ad86:	2300      	movs	r3, #0
 801ad88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ad8c:	682f      	ldr	r7, [r5, #0]
 801ad8e:	6a21      	ldr	r1, [r4, #32]
 801ad90:	602b      	str	r3, [r5, #0]
 801ad92:	d030      	beq.n	801adf6 <__sflush_r+0x92>
 801ad94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ad96:	89a3      	ldrh	r3, [r4, #12]
 801ad98:	0759      	lsls	r1, r3, #29
 801ad9a:	d505      	bpl.n	801ada8 <__sflush_r+0x44>
 801ad9c:	6863      	ldr	r3, [r4, #4]
 801ad9e:	1ad2      	subs	r2, r2, r3
 801ada0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ada2:	b10b      	cbz	r3, 801ada8 <__sflush_r+0x44>
 801ada4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ada6:	1ad2      	subs	r2, r2, r3
 801ada8:	2300      	movs	r3, #0
 801adaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801adac:	6a21      	ldr	r1, [r4, #32]
 801adae:	4628      	mov	r0, r5
 801adb0:	47b0      	blx	r6
 801adb2:	1c43      	adds	r3, r0, #1
 801adb4:	89a3      	ldrh	r3, [r4, #12]
 801adb6:	d106      	bne.n	801adc6 <__sflush_r+0x62>
 801adb8:	6829      	ldr	r1, [r5, #0]
 801adba:	291d      	cmp	r1, #29
 801adbc:	d82b      	bhi.n	801ae16 <__sflush_r+0xb2>
 801adbe:	4a2a      	ldr	r2, [pc, #168]	@ (801ae68 <__sflush_r+0x104>)
 801adc0:	40ca      	lsrs	r2, r1
 801adc2:	07d6      	lsls	r6, r2, #31
 801adc4:	d527      	bpl.n	801ae16 <__sflush_r+0xb2>
 801adc6:	2200      	movs	r2, #0
 801adc8:	6062      	str	r2, [r4, #4]
 801adca:	04d9      	lsls	r1, r3, #19
 801adcc:	6922      	ldr	r2, [r4, #16]
 801adce:	6022      	str	r2, [r4, #0]
 801add0:	d504      	bpl.n	801addc <__sflush_r+0x78>
 801add2:	1c42      	adds	r2, r0, #1
 801add4:	d101      	bne.n	801adda <__sflush_r+0x76>
 801add6:	682b      	ldr	r3, [r5, #0]
 801add8:	b903      	cbnz	r3, 801addc <__sflush_r+0x78>
 801adda:	6560      	str	r0, [r4, #84]	@ 0x54
 801addc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801adde:	602f      	str	r7, [r5, #0]
 801ade0:	b1b9      	cbz	r1, 801ae12 <__sflush_r+0xae>
 801ade2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ade6:	4299      	cmp	r1, r3
 801ade8:	d002      	beq.n	801adf0 <__sflush_r+0x8c>
 801adea:	4628      	mov	r0, r5
 801adec:	f7fe faf0 	bl	80193d0 <_free_r>
 801adf0:	2300      	movs	r3, #0
 801adf2:	6363      	str	r3, [r4, #52]	@ 0x34
 801adf4:	e00d      	b.n	801ae12 <__sflush_r+0xae>
 801adf6:	2301      	movs	r3, #1
 801adf8:	4628      	mov	r0, r5
 801adfa:	47b0      	blx	r6
 801adfc:	4602      	mov	r2, r0
 801adfe:	1c50      	adds	r0, r2, #1
 801ae00:	d1c9      	bne.n	801ad96 <__sflush_r+0x32>
 801ae02:	682b      	ldr	r3, [r5, #0]
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d0c6      	beq.n	801ad96 <__sflush_r+0x32>
 801ae08:	2b1d      	cmp	r3, #29
 801ae0a:	d001      	beq.n	801ae10 <__sflush_r+0xac>
 801ae0c:	2b16      	cmp	r3, #22
 801ae0e:	d11e      	bne.n	801ae4e <__sflush_r+0xea>
 801ae10:	602f      	str	r7, [r5, #0]
 801ae12:	2000      	movs	r0, #0
 801ae14:	e022      	b.n	801ae5c <__sflush_r+0xf8>
 801ae16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ae1a:	b21b      	sxth	r3, r3
 801ae1c:	e01b      	b.n	801ae56 <__sflush_r+0xf2>
 801ae1e:	690f      	ldr	r7, [r1, #16]
 801ae20:	2f00      	cmp	r7, #0
 801ae22:	d0f6      	beq.n	801ae12 <__sflush_r+0xae>
 801ae24:	0793      	lsls	r3, r2, #30
 801ae26:	680e      	ldr	r6, [r1, #0]
 801ae28:	bf08      	it	eq
 801ae2a:	694b      	ldreq	r3, [r1, #20]
 801ae2c:	600f      	str	r7, [r1, #0]
 801ae2e:	bf18      	it	ne
 801ae30:	2300      	movne	r3, #0
 801ae32:	eba6 0807 	sub.w	r8, r6, r7
 801ae36:	608b      	str	r3, [r1, #8]
 801ae38:	f1b8 0f00 	cmp.w	r8, #0
 801ae3c:	dde9      	ble.n	801ae12 <__sflush_r+0xae>
 801ae3e:	6a21      	ldr	r1, [r4, #32]
 801ae40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ae42:	4643      	mov	r3, r8
 801ae44:	463a      	mov	r2, r7
 801ae46:	4628      	mov	r0, r5
 801ae48:	47b0      	blx	r6
 801ae4a:	2800      	cmp	r0, #0
 801ae4c:	dc08      	bgt.n	801ae60 <__sflush_r+0xfc>
 801ae4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ae56:	81a3      	strh	r3, [r4, #12]
 801ae58:	f04f 30ff 	mov.w	r0, #4294967295
 801ae5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae60:	4407      	add	r7, r0
 801ae62:	eba8 0800 	sub.w	r8, r8, r0
 801ae66:	e7e7      	b.n	801ae38 <__sflush_r+0xd4>
 801ae68:	20400001 	.word	0x20400001

0801ae6c <_fflush_r>:
 801ae6c:	b538      	push	{r3, r4, r5, lr}
 801ae6e:	690b      	ldr	r3, [r1, #16]
 801ae70:	4605      	mov	r5, r0
 801ae72:	460c      	mov	r4, r1
 801ae74:	b913      	cbnz	r3, 801ae7c <_fflush_r+0x10>
 801ae76:	2500      	movs	r5, #0
 801ae78:	4628      	mov	r0, r5
 801ae7a:	bd38      	pop	{r3, r4, r5, pc}
 801ae7c:	b118      	cbz	r0, 801ae86 <_fflush_r+0x1a>
 801ae7e:	6a03      	ldr	r3, [r0, #32]
 801ae80:	b90b      	cbnz	r3, 801ae86 <_fflush_r+0x1a>
 801ae82:	f7fd f993 	bl	80181ac <__sinit>
 801ae86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d0f3      	beq.n	801ae76 <_fflush_r+0xa>
 801ae8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ae90:	07d0      	lsls	r0, r2, #31
 801ae92:	d404      	bmi.n	801ae9e <_fflush_r+0x32>
 801ae94:	0599      	lsls	r1, r3, #22
 801ae96:	d402      	bmi.n	801ae9e <_fflush_r+0x32>
 801ae98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ae9a:	f7fd fc20 	bl	80186de <__retarget_lock_acquire_recursive>
 801ae9e:	4628      	mov	r0, r5
 801aea0:	4621      	mov	r1, r4
 801aea2:	f7ff ff5f 	bl	801ad64 <__sflush_r>
 801aea6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801aea8:	07da      	lsls	r2, r3, #31
 801aeaa:	4605      	mov	r5, r0
 801aeac:	d4e4      	bmi.n	801ae78 <_fflush_r+0xc>
 801aeae:	89a3      	ldrh	r3, [r4, #12]
 801aeb0:	059b      	lsls	r3, r3, #22
 801aeb2:	d4e1      	bmi.n	801ae78 <_fflush_r+0xc>
 801aeb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801aeb6:	f7fd fc13 	bl	80186e0 <__retarget_lock_release_recursive>
 801aeba:	e7dd      	b.n	801ae78 <_fflush_r+0xc>

0801aebc <__swhatbuf_r>:
 801aebc:	b570      	push	{r4, r5, r6, lr}
 801aebe:	460c      	mov	r4, r1
 801aec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aec4:	2900      	cmp	r1, #0
 801aec6:	b096      	sub	sp, #88	@ 0x58
 801aec8:	4615      	mov	r5, r2
 801aeca:	461e      	mov	r6, r3
 801aecc:	da0d      	bge.n	801aeea <__swhatbuf_r+0x2e>
 801aece:	89a3      	ldrh	r3, [r4, #12]
 801aed0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801aed4:	f04f 0100 	mov.w	r1, #0
 801aed8:	bf14      	ite	ne
 801aeda:	2340      	movne	r3, #64	@ 0x40
 801aedc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801aee0:	2000      	movs	r0, #0
 801aee2:	6031      	str	r1, [r6, #0]
 801aee4:	602b      	str	r3, [r5, #0]
 801aee6:	b016      	add	sp, #88	@ 0x58
 801aee8:	bd70      	pop	{r4, r5, r6, pc}
 801aeea:	466a      	mov	r2, sp
 801aeec:	f000 f8d6 	bl	801b09c <_fstat_r>
 801aef0:	2800      	cmp	r0, #0
 801aef2:	dbec      	blt.n	801aece <__swhatbuf_r+0x12>
 801aef4:	9901      	ldr	r1, [sp, #4]
 801aef6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801aefa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801aefe:	4259      	negs	r1, r3
 801af00:	4159      	adcs	r1, r3
 801af02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801af06:	e7eb      	b.n	801aee0 <__swhatbuf_r+0x24>

0801af08 <__smakebuf_r>:
 801af08:	898b      	ldrh	r3, [r1, #12]
 801af0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801af0c:	079d      	lsls	r5, r3, #30
 801af0e:	4606      	mov	r6, r0
 801af10:	460c      	mov	r4, r1
 801af12:	d507      	bpl.n	801af24 <__smakebuf_r+0x1c>
 801af14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801af18:	6023      	str	r3, [r4, #0]
 801af1a:	6123      	str	r3, [r4, #16]
 801af1c:	2301      	movs	r3, #1
 801af1e:	6163      	str	r3, [r4, #20]
 801af20:	b003      	add	sp, #12
 801af22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af24:	ab01      	add	r3, sp, #4
 801af26:	466a      	mov	r2, sp
 801af28:	f7ff ffc8 	bl	801aebc <__swhatbuf_r>
 801af2c:	9f00      	ldr	r7, [sp, #0]
 801af2e:	4605      	mov	r5, r0
 801af30:	4639      	mov	r1, r7
 801af32:	4630      	mov	r0, r6
 801af34:	f7fb fd88 	bl	8016a48 <_malloc_r>
 801af38:	b948      	cbnz	r0, 801af4e <__smakebuf_r+0x46>
 801af3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801af3e:	059a      	lsls	r2, r3, #22
 801af40:	d4ee      	bmi.n	801af20 <__smakebuf_r+0x18>
 801af42:	f023 0303 	bic.w	r3, r3, #3
 801af46:	f043 0302 	orr.w	r3, r3, #2
 801af4a:	81a3      	strh	r3, [r4, #12]
 801af4c:	e7e2      	b.n	801af14 <__smakebuf_r+0xc>
 801af4e:	89a3      	ldrh	r3, [r4, #12]
 801af50:	6020      	str	r0, [r4, #0]
 801af52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801af56:	81a3      	strh	r3, [r4, #12]
 801af58:	9b01      	ldr	r3, [sp, #4]
 801af5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801af5e:	b15b      	cbz	r3, 801af78 <__smakebuf_r+0x70>
 801af60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801af64:	4630      	mov	r0, r6
 801af66:	f000 f8ab 	bl	801b0c0 <_isatty_r>
 801af6a:	b128      	cbz	r0, 801af78 <__smakebuf_r+0x70>
 801af6c:	89a3      	ldrh	r3, [r4, #12]
 801af6e:	f023 0303 	bic.w	r3, r3, #3
 801af72:	f043 0301 	orr.w	r3, r3, #1
 801af76:	81a3      	strh	r3, [r4, #12]
 801af78:	89a3      	ldrh	r3, [r4, #12]
 801af7a:	431d      	orrs	r5, r3
 801af7c:	81a5      	strh	r5, [r4, #12]
 801af7e:	e7cf      	b.n	801af20 <__smakebuf_r+0x18>

0801af80 <__sccl>:
 801af80:	b570      	push	{r4, r5, r6, lr}
 801af82:	780b      	ldrb	r3, [r1, #0]
 801af84:	4604      	mov	r4, r0
 801af86:	2b5e      	cmp	r3, #94	@ 0x5e
 801af88:	bf0b      	itete	eq
 801af8a:	784b      	ldrbeq	r3, [r1, #1]
 801af8c:	1c4a      	addne	r2, r1, #1
 801af8e:	1c8a      	addeq	r2, r1, #2
 801af90:	2100      	movne	r1, #0
 801af92:	bf08      	it	eq
 801af94:	2101      	moveq	r1, #1
 801af96:	3801      	subs	r0, #1
 801af98:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801af9c:	f800 1f01 	strb.w	r1, [r0, #1]!
 801afa0:	42a8      	cmp	r0, r5
 801afa2:	d1fb      	bne.n	801af9c <__sccl+0x1c>
 801afa4:	b90b      	cbnz	r3, 801afaa <__sccl+0x2a>
 801afa6:	1e50      	subs	r0, r2, #1
 801afa8:	bd70      	pop	{r4, r5, r6, pc}
 801afaa:	f081 0101 	eor.w	r1, r1, #1
 801afae:	54e1      	strb	r1, [r4, r3]
 801afb0:	4610      	mov	r0, r2
 801afb2:	4602      	mov	r2, r0
 801afb4:	f812 5b01 	ldrb.w	r5, [r2], #1
 801afb8:	2d2d      	cmp	r5, #45	@ 0x2d
 801afba:	d005      	beq.n	801afc8 <__sccl+0x48>
 801afbc:	2d5d      	cmp	r5, #93	@ 0x5d
 801afbe:	d016      	beq.n	801afee <__sccl+0x6e>
 801afc0:	2d00      	cmp	r5, #0
 801afc2:	d0f1      	beq.n	801afa8 <__sccl+0x28>
 801afc4:	462b      	mov	r3, r5
 801afc6:	e7f2      	b.n	801afae <__sccl+0x2e>
 801afc8:	7846      	ldrb	r6, [r0, #1]
 801afca:	2e5d      	cmp	r6, #93	@ 0x5d
 801afcc:	d0fa      	beq.n	801afc4 <__sccl+0x44>
 801afce:	42b3      	cmp	r3, r6
 801afd0:	dcf8      	bgt.n	801afc4 <__sccl+0x44>
 801afd2:	3002      	adds	r0, #2
 801afd4:	461a      	mov	r2, r3
 801afd6:	3201      	adds	r2, #1
 801afd8:	4296      	cmp	r6, r2
 801afda:	54a1      	strb	r1, [r4, r2]
 801afdc:	dcfb      	bgt.n	801afd6 <__sccl+0x56>
 801afde:	1af2      	subs	r2, r6, r3
 801afe0:	3a01      	subs	r2, #1
 801afe2:	1c5d      	adds	r5, r3, #1
 801afe4:	42b3      	cmp	r3, r6
 801afe6:	bfa8      	it	ge
 801afe8:	2200      	movge	r2, #0
 801afea:	18ab      	adds	r3, r5, r2
 801afec:	e7e1      	b.n	801afb2 <__sccl+0x32>
 801afee:	4610      	mov	r0, r2
 801aff0:	e7da      	b.n	801afa8 <__sccl+0x28>

0801aff2 <__submore>:
 801aff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aff6:	460c      	mov	r4, r1
 801aff8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801affa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801affe:	4299      	cmp	r1, r3
 801b000:	d11d      	bne.n	801b03e <__submore+0x4c>
 801b002:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801b006:	f7fb fd1f 	bl	8016a48 <_malloc_r>
 801b00a:	b918      	cbnz	r0, 801b014 <__submore+0x22>
 801b00c:	f04f 30ff 	mov.w	r0, #4294967295
 801b010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b014:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b018:	63a3      	str	r3, [r4, #56]	@ 0x38
 801b01a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801b01e:	6360      	str	r0, [r4, #52]	@ 0x34
 801b020:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801b024:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801b028:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801b02c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801b030:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801b034:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801b038:	6020      	str	r0, [r4, #0]
 801b03a:	2000      	movs	r0, #0
 801b03c:	e7e8      	b.n	801b010 <__submore+0x1e>
 801b03e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801b040:	0077      	lsls	r7, r6, #1
 801b042:	463a      	mov	r2, r7
 801b044:	f7fb fd94 	bl	8016b70 <_realloc_r>
 801b048:	4605      	mov	r5, r0
 801b04a:	2800      	cmp	r0, #0
 801b04c:	d0de      	beq.n	801b00c <__submore+0x1a>
 801b04e:	eb00 0806 	add.w	r8, r0, r6
 801b052:	4601      	mov	r1, r0
 801b054:	4632      	mov	r2, r6
 801b056:	4640      	mov	r0, r8
 801b058:	f7fd fb4b 	bl	80186f2 <memcpy>
 801b05c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801b060:	f8c4 8000 	str.w	r8, [r4]
 801b064:	e7e9      	b.n	801b03a <__submore+0x48>

0801b066 <memmove>:
 801b066:	4288      	cmp	r0, r1
 801b068:	b510      	push	{r4, lr}
 801b06a:	eb01 0402 	add.w	r4, r1, r2
 801b06e:	d902      	bls.n	801b076 <memmove+0x10>
 801b070:	4284      	cmp	r4, r0
 801b072:	4623      	mov	r3, r4
 801b074:	d807      	bhi.n	801b086 <memmove+0x20>
 801b076:	1e43      	subs	r3, r0, #1
 801b078:	42a1      	cmp	r1, r4
 801b07a:	d008      	beq.n	801b08e <memmove+0x28>
 801b07c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b080:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b084:	e7f8      	b.n	801b078 <memmove+0x12>
 801b086:	4402      	add	r2, r0
 801b088:	4601      	mov	r1, r0
 801b08a:	428a      	cmp	r2, r1
 801b08c:	d100      	bne.n	801b090 <memmove+0x2a>
 801b08e:	bd10      	pop	{r4, pc}
 801b090:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b094:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b098:	e7f7      	b.n	801b08a <memmove+0x24>
	...

0801b09c <_fstat_r>:
 801b09c:	b538      	push	{r3, r4, r5, lr}
 801b09e:	4d07      	ldr	r5, [pc, #28]	@ (801b0bc <_fstat_r+0x20>)
 801b0a0:	2300      	movs	r3, #0
 801b0a2:	4604      	mov	r4, r0
 801b0a4:	4608      	mov	r0, r1
 801b0a6:	4611      	mov	r1, r2
 801b0a8:	602b      	str	r3, [r5, #0]
 801b0aa:	f7f4 fb79 	bl	800f7a0 <_fstat>
 801b0ae:	1c43      	adds	r3, r0, #1
 801b0b0:	d102      	bne.n	801b0b8 <_fstat_r+0x1c>
 801b0b2:	682b      	ldr	r3, [r5, #0]
 801b0b4:	b103      	cbz	r3, 801b0b8 <_fstat_r+0x1c>
 801b0b6:	6023      	str	r3, [r4, #0]
 801b0b8:	bd38      	pop	{r3, r4, r5, pc}
 801b0ba:	bf00      	nop
 801b0bc:	200143c0 	.word	0x200143c0

0801b0c0 <_isatty_r>:
 801b0c0:	b538      	push	{r3, r4, r5, lr}
 801b0c2:	4d06      	ldr	r5, [pc, #24]	@ (801b0dc <_isatty_r+0x1c>)
 801b0c4:	2300      	movs	r3, #0
 801b0c6:	4604      	mov	r4, r0
 801b0c8:	4608      	mov	r0, r1
 801b0ca:	602b      	str	r3, [r5, #0]
 801b0cc:	f7f4 fb78 	bl	800f7c0 <_isatty>
 801b0d0:	1c43      	adds	r3, r0, #1
 801b0d2:	d102      	bne.n	801b0da <_isatty_r+0x1a>
 801b0d4:	682b      	ldr	r3, [r5, #0]
 801b0d6:	b103      	cbz	r3, 801b0da <_isatty_r+0x1a>
 801b0d8:	6023      	str	r3, [r4, #0]
 801b0da:	bd38      	pop	{r3, r4, r5, pc}
 801b0dc:	200143c0 	.word	0x200143c0

0801b0e0 <__assert_func>:
 801b0e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b0e2:	4614      	mov	r4, r2
 801b0e4:	461a      	mov	r2, r3
 801b0e6:	4b09      	ldr	r3, [pc, #36]	@ (801b10c <__assert_func+0x2c>)
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	4605      	mov	r5, r0
 801b0ec:	68d8      	ldr	r0, [r3, #12]
 801b0ee:	b14c      	cbz	r4, 801b104 <__assert_func+0x24>
 801b0f0:	4b07      	ldr	r3, [pc, #28]	@ (801b110 <__assert_func+0x30>)
 801b0f2:	9100      	str	r1, [sp, #0]
 801b0f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b0f8:	4906      	ldr	r1, [pc, #24]	@ (801b114 <__assert_func+0x34>)
 801b0fa:	462b      	mov	r3, r5
 801b0fc:	f000 f90e 	bl	801b31c <fiprintf>
 801b100:	f000 f91e 	bl	801b340 <abort>
 801b104:	4b04      	ldr	r3, [pc, #16]	@ (801b118 <__assert_func+0x38>)
 801b106:	461c      	mov	r4, r3
 801b108:	e7f3      	b.n	801b0f2 <__assert_func+0x12>
 801b10a:	bf00      	nop
 801b10c:	200001fc 	.word	0x200001fc
 801b110:	0801dcc6 	.word	0x0801dcc6
 801b114:	0801dcd3 	.word	0x0801dcd3
 801b118:	0801dd01 	.word	0x0801dd01

0801b11c <_calloc_r>:
 801b11c:	b570      	push	{r4, r5, r6, lr}
 801b11e:	fba1 5402 	umull	r5, r4, r1, r2
 801b122:	b934      	cbnz	r4, 801b132 <_calloc_r+0x16>
 801b124:	4629      	mov	r1, r5
 801b126:	f7fb fc8f 	bl	8016a48 <_malloc_r>
 801b12a:	4606      	mov	r6, r0
 801b12c:	b928      	cbnz	r0, 801b13a <_calloc_r+0x1e>
 801b12e:	4630      	mov	r0, r6
 801b130:	bd70      	pop	{r4, r5, r6, pc}
 801b132:	220c      	movs	r2, #12
 801b134:	6002      	str	r2, [r0, #0]
 801b136:	2600      	movs	r6, #0
 801b138:	e7f9      	b.n	801b12e <_calloc_r+0x12>
 801b13a:	462a      	mov	r2, r5
 801b13c:	4621      	mov	r1, r4
 801b13e:	f7fd fa05 	bl	801854c <memset>
 801b142:	e7f4      	b.n	801b12e <_calloc_r+0x12>

0801b144 <_strtol_l.isra.0>:
 801b144:	2b24      	cmp	r3, #36	@ 0x24
 801b146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b14a:	4686      	mov	lr, r0
 801b14c:	4690      	mov	r8, r2
 801b14e:	d801      	bhi.n	801b154 <_strtol_l.isra.0+0x10>
 801b150:	2b01      	cmp	r3, #1
 801b152:	d106      	bne.n	801b162 <_strtol_l.isra.0+0x1e>
 801b154:	f7fd fa98 	bl	8018688 <__errno>
 801b158:	2316      	movs	r3, #22
 801b15a:	6003      	str	r3, [r0, #0]
 801b15c:	2000      	movs	r0, #0
 801b15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b162:	4834      	ldr	r0, [pc, #208]	@ (801b234 <_strtol_l.isra.0+0xf0>)
 801b164:	460d      	mov	r5, r1
 801b166:	462a      	mov	r2, r5
 801b168:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b16c:	5d06      	ldrb	r6, [r0, r4]
 801b16e:	f016 0608 	ands.w	r6, r6, #8
 801b172:	d1f8      	bne.n	801b166 <_strtol_l.isra.0+0x22>
 801b174:	2c2d      	cmp	r4, #45	@ 0x2d
 801b176:	d110      	bne.n	801b19a <_strtol_l.isra.0+0x56>
 801b178:	782c      	ldrb	r4, [r5, #0]
 801b17a:	2601      	movs	r6, #1
 801b17c:	1c95      	adds	r5, r2, #2
 801b17e:	f033 0210 	bics.w	r2, r3, #16
 801b182:	d115      	bne.n	801b1b0 <_strtol_l.isra.0+0x6c>
 801b184:	2c30      	cmp	r4, #48	@ 0x30
 801b186:	d10d      	bne.n	801b1a4 <_strtol_l.isra.0+0x60>
 801b188:	782a      	ldrb	r2, [r5, #0]
 801b18a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801b18e:	2a58      	cmp	r2, #88	@ 0x58
 801b190:	d108      	bne.n	801b1a4 <_strtol_l.isra.0+0x60>
 801b192:	786c      	ldrb	r4, [r5, #1]
 801b194:	3502      	adds	r5, #2
 801b196:	2310      	movs	r3, #16
 801b198:	e00a      	b.n	801b1b0 <_strtol_l.isra.0+0x6c>
 801b19a:	2c2b      	cmp	r4, #43	@ 0x2b
 801b19c:	bf04      	itt	eq
 801b19e:	782c      	ldrbeq	r4, [r5, #0]
 801b1a0:	1c95      	addeq	r5, r2, #2
 801b1a2:	e7ec      	b.n	801b17e <_strtol_l.isra.0+0x3a>
 801b1a4:	2b00      	cmp	r3, #0
 801b1a6:	d1f6      	bne.n	801b196 <_strtol_l.isra.0+0x52>
 801b1a8:	2c30      	cmp	r4, #48	@ 0x30
 801b1aa:	bf14      	ite	ne
 801b1ac:	230a      	movne	r3, #10
 801b1ae:	2308      	moveq	r3, #8
 801b1b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801b1b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b1b8:	2200      	movs	r2, #0
 801b1ba:	fbbc f9f3 	udiv	r9, ip, r3
 801b1be:	4610      	mov	r0, r2
 801b1c0:	fb03 ca19 	mls	sl, r3, r9, ip
 801b1c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801b1c8:	2f09      	cmp	r7, #9
 801b1ca:	d80f      	bhi.n	801b1ec <_strtol_l.isra.0+0xa8>
 801b1cc:	463c      	mov	r4, r7
 801b1ce:	42a3      	cmp	r3, r4
 801b1d0:	dd1b      	ble.n	801b20a <_strtol_l.isra.0+0xc6>
 801b1d2:	1c57      	adds	r7, r2, #1
 801b1d4:	d007      	beq.n	801b1e6 <_strtol_l.isra.0+0xa2>
 801b1d6:	4581      	cmp	r9, r0
 801b1d8:	d314      	bcc.n	801b204 <_strtol_l.isra.0+0xc0>
 801b1da:	d101      	bne.n	801b1e0 <_strtol_l.isra.0+0x9c>
 801b1dc:	45a2      	cmp	sl, r4
 801b1de:	db11      	blt.n	801b204 <_strtol_l.isra.0+0xc0>
 801b1e0:	fb00 4003 	mla	r0, r0, r3, r4
 801b1e4:	2201      	movs	r2, #1
 801b1e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b1ea:	e7eb      	b.n	801b1c4 <_strtol_l.isra.0+0x80>
 801b1ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801b1f0:	2f19      	cmp	r7, #25
 801b1f2:	d801      	bhi.n	801b1f8 <_strtol_l.isra.0+0xb4>
 801b1f4:	3c37      	subs	r4, #55	@ 0x37
 801b1f6:	e7ea      	b.n	801b1ce <_strtol_l.isra.0+0x8a>
 801b1f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801b1fc:	2f19      	cmp	r7, #25
 801b1fe:	d804      	bhi.n	801b20a <_strtol_l.isra.0+0xc6>
 801b200:	3c57      	subs	r4, #87	@ 0x57
 801b202:	e7e4      	b.n	801b1ce <_strtol_l.isra.0+0x8a>
 801b204:	f04f 32ff 	mov.w	r2, #4294967295
 801b208:	e7ed      	b.n	801b1e6 <_strtol_l.isra.0+0xa2>
 801b20a:	1c53      	adds	r3, r2, #1
 801b20c:	d108      	bne.n	801b220 <_strtol_l.isra.0+0xdc>
 801b20e:	2322      	movs	r3, #34	@ 0x22
 801b210:	f8ce 3000 	str.w	r3, [lr]
 801b214:	4660      	mov	r0, ip
 801b216:	f1b8 0f00 	cmp.w	r8, #0
 801b21a:	d0a0      	beq.n	801b15e <_strtol_l.isra.0+0x1a>
 801b21c:	1e69      	subs	r1, r5, #1
 801b21e:	e006      	b.n	801b22e <_strtol_l.isra.0+0xea>
 801b220:	b106      	cbz	r6, 801b224 <_strtol_l.isra.0+0xe0>
 801b222:	4240      	negs	r0, r0
 801b224:	f1b8 0f00 	cmp.w	r8, #0
 801b228:	d099      	beq.n	801b15e <_strtol_l.isra.0+0x1a>
 801b22a:	2a00      	cmp	r2, #0
 801b22c:	d1f6      	bne.n	801b21c <_strtol_l.isra.0+0xd8>
 801b22e:	f8c8 1000 	str.w	r1, [r8]
 801b232:	e794      	b.n	801b15e <_strtol_l.isra.0+0x1a>
 801b234:	0801dd59 	.word	0x0801dd59

0801b238 <_strtol_r>:
 801b238:	f7ff bf84 	b.w	801b144 <_strtol_l.isra.0>

0801b23c <_strtoul_l.isra.0>:
 801b23c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b240:	4e34      	ldr	r6, [pc, #208]	@ (801b314 <_strtoul_l.isra.0+0xd8>)
 801b242:	4686      	mov	lr, r0
 801b244:	460d      	mov	r5, r1
 801b246:	4628      	mov	r0, r5
 801b248:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b24c:	5d37      	ldrb	r7, [r6, r4]
 801b24e:	f017 0708 	ands.w	r7, r7, #8
 801b252:	d1f8      	bne.n	801b246 <_strtoul_l.isra.0+0xa>
 801b254:	2c2d      	cmp	r4, #45	@ 0x2d
 801b256:	d110      	bne.n	801b27a <_strtoul_l.isra.0+0x3e>
 801b258:	782c      	ldrb	r4, [r5, #0]
 801b25a:	2701      	movs	r7, #1
 801b25c:	1c85      	adds	r5, r0, #2
 801b25e:	f033 0010 	bics.w	r0, r3, #16
 801b262:	d115      	bne.n	801b290 <_strtoul_l.isra.0+0x54>
 801b264:	2c30      	cmp	r4, #48	@ 0x30
 801b266:	d10d      	bne.n	801b284 <_strtoul_l.isra.0+0x48>
 801b268:	7828      	ldrb	r0, [r5, #0]
 801b26a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801b26e:	2858      	cmp	r0, #88	@ 0x58
 801b270:	d108      	bne.n	801b284 <_strtoul_l.isra.0+0x48>
 801b272:	786c      	ldrb	r4, [r5, #1]
 801b274:	3502      	adds	r5, #2
 801b276:	2310      	movs	r3, #16
 801b278:	e00a      	b.n	801b290 <_strtoul_l.isra.0+0x54>
 801b27a:	2c2b      	cmp	r4, #43	@ 0x2b
 801b27c:	bf04      	itt	eq
 801b27e:	782c      	ldrbeq	r4, [r5, #0]
 801b280:	1c85      	addeq	r5, r0, #2
 801b282:	e7ec      	b.n	801b25e <_strtoul_l.isra.0+0x22>
 801b284:	2b00      	cmp	r3, #0
 801b286:	d1f6      	bne.n	801b276 <_strtoul_l.isra.0+0x3a>
 801b288:	2c30      	cmp	r4, #48	@ 0x30
 801b28a:	bf14      	ite	ne
 801b28c:	230a      	movne	r3, #10
 801b28e:	2308      	moveq	r3, #8
 801b290:	f04f 38ff 	mov.w	r8, #4294967295
 801b294:	2600      	movs	r6, #0
 801b296:	fbb8 f8f3 	udiv	r8, r8, r3
 801b29a:	fb03 f908 	mul.w	r9, r3, r8
 801b29e:	ea6f 0909 	mvn.w	r9, r9
 801b2a2:	4630      	mov	r0, r6
 801b2a4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801b2a8:	f1bc 0f09 	cmp.w	ip, #9
 801b2ac:	d810      	bhi.n	801b2d0 <_strtoul_l.isra.0+0x94>
 801b2ae:	4664      	mov	r4, ip
 801b2b0:	42a3      	cmp	r3, r4
 801b2b2:	dd1e      	ble.n	801b2f2 <_strtoul_l.isra.0+0xb6>
 801b2b4:	f1b6 3fff 	cmp.w	r6, #4294967295
 801b2b8:	d007      	beq.n	801b2ca <_strtoul_l.isra.0+0x8e>
 801b2ba:	4580      	cmp	r8, r0
 801b2bc:	d316      	bcc.n	801b2ec <_strtoul_l.isra.0+0xb0>
 801b2be:	d101      	bne.n	801b2c4 <_strtoul_l.isra.0+0x88>
 801b2c0:	45a1      	cmp	r9, r4
 801b2c2:	db13      	blt.n	801b2ec <_strtoul_l.isra.0+0xb0>
 801b2c4:	fb00 4003 	mla	r0, r0, r3, r4
 801b2c8:	2601      	movs	r6, #1
 801b2ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b2ce:	e7e9      	b.n	801b2a4 <_strtoul_l.isra.0+0x68>
 801b2d0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801b2d4:	f1bc 0f19 	cmp.w	ip, #25
 801b2d8:	d801      	bhi.n	801b2de <_strtoul_l.isra.0+0xa2>
 801b2da:	3c37      	subs	r4, #55	@ 0x37
 801b2dc:	e7e8      	b.n	801b2b0 <_strtoul_l.isra.0+0x74>
 801b2de:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801b2e2:	f1bc 0f19 	cmp.w	ip, #25
 801b2e6:	d804      	bhi.n	801b2f2 <_strtoul_l.isra.0+0xb6>
 801b2e8:	3c57      	subs	r4, #87	@ 0x57
 801b2ea:	e7e1      	b.n	801b2b0 <_strtoul_l.isra.0+0x74>
 801b2ec:	f04f 36ff 	mov.w	r6, #4294967295
 801b2f0:	e7eb      	b.n	801b2ca <_strtoul_l.isra.0+0x8e>
 801b2f2:	1c73      	adds	r3, r6, #1
 801b2f4:	d106      	bne.n	801b304 <_strtoul_l.isra.0+0xc8>
 801b2f6:	2322      	movs	r3, #34	@ 0x22
 801b2f8:	f8ce 3000 	str.w	r3, [lr]
 801b2fc:	4630      	mov	r0, r6
 801b2fe:	b932      	cbnz	r2, 801b30e <_strtoul_l.isra.0+0xd2>
 801b300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b304:	b107      	cbz	r7, 801b308 <_strtoul_l.isra.0+0xcc>
 801b306:	4240      	negs	r0, r0
 801b308:	2a00      	cmp	r2, #0
 801b30a:	d0f9      	beq.n	801b300 <_strtoul_l.isra.0+0xc4>
 801b30c:	b106      	cbz	r6, 801b310 <_strtoul_l.isra.0+0xd4>
 801b30e:	1e69      	subs	r1, r5, #1
 801b310:	6011      	str	r1, [r2, #0]
 801b312:	e7f5      	b.n	801b300 <_strtoul_l.isra.0+0xc4>
 801b314:	0801dd59 	.word	0x0801dd59

0801b318 <_strtoul_r>:
 801b318:	f7ff bf90 	b.w	801b23c <_strtoul_l.isra.0>

0801b31c <fiprintf>:
 801b31c:	b40e      	push	{r1, r2, r3}
 801b31e:	b503      	push	{r0, r1, lr}
 801b320:	4601      	mov	r1, r0
 801b322:	ab03      	add	r3, sp, #12
 801b324:	4805      	ldr	r0, [pc, #20]	@ (801b33c <fiprintf+0x20>)
 801b326:	f853 2b04 	ldr.w	r2, [r3], #4
 801b32a:	6800      	ldr	r0, [r0, #0]
 801b32c:	9301      	str	r3, [sp, #4]
 801b32e:	f000 f837 	bl	801b3a0 <_vfiprintf_r>
 801b332:	b002      	add	sp, #8
 801b334:	f85d eb04 	ldr.w	lr, [sp], #4
 801b338:	b003      	add	sp, #12
 801b33a:	4770      	bx	lr
 801b33c:	200001fc 	.word	0x200001fc

0801b340 <abort>:
 801b340:	b508      	push	{r3, lr}
 801b342:	2006      	movs	r0, #6
 801b344:	f000 f96c 	bl	801b620 <raise>
 801b348:	2001      	movs	r0, #1
 801b34a:	f7f4 f9d9 	bl	800f700 <_exit>

0801b34e <__sfputc_r>:
 801b34e:	6893      	ldr	r3, [r2, #8]
 801b350:	3b01      	subs	r3, #1
 801b352:	2b00      	cmp	r3, #0
 801b354:	b410      	push	{r4}
 801b356:	6093      	str	r3, [r2, #8]
 801b358:	da08      	bge.n	801b36c <__sfputc_r+0x1e>
 801b35a:	6994      	ldr	r4, [r2, #24]
 801b35c:	42a3      	cmp	r3, r4
 801b35e:	db01      	blt.n	801b364 <__sfputc_r+0x16>
 801b360:	290a      	cmp	r1, #10
 801b362:	d103      	bne.n	801b36c <__sfputc_r+0x1e>
 801b364:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b368:	f7fd b85c 	b.w	8018424 <__swbuf_r>
 801b36c:	6813      	ldr	r3, [r2, #0]
 801b36e:	1c58      	adds	r0, r3, #1
 801b370:	6010      	str	r0, [r2, #0]
 801b372:	7019      	strb	r1, [r3, #0]
 801b374:	4608      	mov	r0, r1
 801b376:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b37a:	4770      	bx	lr

0801b37c <__sfputs_r>:
 801b37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b37e:	4606      	mov	r6, r0
 801b380:	460f      	mov	r7, r1
 801b382:	4614      	mov	r4, r2
 801b384:	18d5      	adds	r5, r2, r3
 801b386:	42ac      	cmp	r4, r5
 801b388:	d101      	bne.n	801b38e <__sfputs_r+0x12>
 801b38a:	2000      	movs	r0, #0
 801b38c:	e007      	b.n	801b39e <__sfputs_r+0x22>
 801b38e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b392:	463a      	mov	r2, r7
 801b394:	4630      	mov	r0, r6
 801b396:	f7ff ffda 	bl	801b34e <__sfputc_r>
 801b39a:	1c43      	adds	r3, r0, #1
 801b39c:	d1f3      	bne.n	801b386 <__sfputs_r+0xa>
 801b39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b3a0 <_vfiprintf_r>:
 801b3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3a4:	460d      	mov	r5, r1
 801b3a6:	b09d      	sub	sp, #116	@ 0x74
 801b3a8:	4614      	mov	r4, r2
 801b3aa:	4698      	mov	r8, r3
 801b3ac:	4606      	mov	r6, r0
 801b3ae:	b118      	cbz	r0, 801b3b8 <_vfiprintf_r+0x18>
 801b3b0:	6a03      	ldr	r3, [r0, #32]
 801b3b2:	b90b      	cbnz	r3, 801b3b8 <_vfiprintf_r+0x18>
 801b3b4:	f7fc fefa 	bl	80181ac <__sinit>
 801b3b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b3ba:	07d9      	lsls	r1, r3, #31
 801b3bc:	d405      	bmi.n	801b3ca <_vfiprintf_r+0x2a>
 801b3be:	89ab      	ldrh	r3, [r5, #12]
 801b3c0:	059a      	lsls	r2, r3, #22
 801b3c2:	d402      	bmi.n	801b3ca <_vfiprintf_r+0x2a>
 801b3c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b3c6:	f7fd f98a 	bl	80186de <__retarget_lock_acquire_recursive>
 801b3ca:	89ab      	ldrh	r3, [r5, #12]
 801b3cc:	071b      	lsls	r3, r3, #28
 801b3ce:	d501      	bpl.n	801b3d4 <_vfiprintf_r+0x34>
 801b3d0:	692b      	ldr	r3, [r5, #16]
 801b3d2:	b99b      	cbnz	r3, 801b3fc <_vfiprintf_r+0x5c>
 801b3d4:	4629      	mov	r1, r5
 801b3d6:	4630      	mov	r0, r6
 801b3d8:	f7fd f862 	bl	80184a0 <__swsetup_r>
 801b3dc:	b170      	cbz	r0, 801b3fc <_vfiprintf_r+0x5c>
 801b3de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b3e0:	07dc      	lsls	r4, r3, #31
 801b3e2:	d504      	bpl.n	801b3ee <_vfiprintf_r+0x4e>
 801b3e4:	f04f 30ff 	mov.w	r0, #4294967295
 801b3e8:	b01d      	add	sp, #116	@ 0x74
 801b3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3ee:	89ab      	ldrh	r3, [r5, #12]
 801b3f0:	0598      	lsls	r0, r3, #22
 801b3f2:	d4f7      	bmi.n	801b3e4 <_vfiprintf_r+0x44>
 801b3f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b3f6:	f7fd f973 	bl	80186e0 <__retarget_lock_release_recursive>
 801b3fa:	e7f3      	b.n	801b3e4 <_vfiprintf_r+0x44>
 801b3fc:	2300      	movs	r3, #0
 801b3fe:	9309      	str	r3, [sp, #36]	@ 0x24
 801b400:	2320      	movs	r3, #32
 801b402:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b406:	f8cd 800c 	str.w	r8, [sp, #12]
 801b40a:	2330      	movs	r3, #48	@ 0x30
 801b40c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b5bc <_vfiprintf_r+0x21c>
 801b410:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b414:	f04f 0901 	mov.w	r9, #1
 801b418:	4623      	mov	r3, r4
 801b41a:	469a      	mov	sl, r3
 801b41c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b420:	b10a      	cbz	r2, 801b426 <_vfiprintf_r+0x86>
 801b422:	2a25      	cmp	r2, #37	@ 0x25
 801b424:	d1f9      	bne.n	801b41a <_vfiprintf_r+0x7a>
 801b426:	ebba 0b04 	subs.w	fp, sl, r4
 801b42a:	d00b      	beq.n	801b444 <_vfiprintf_r+0xa4>
 801b42c:	465b      	mov	r3, fp
 801b42e:	4622      	mov	r2, r4
 801b430:	4629      	mov	r1, r5
 801b432:	4630      	mov	r0, r6
 801b434:	f7ff ffa2 	bl	801b37c <__sfputs_r>
 801b438:	3001      	adds	r0, #1
 801b43a:	f000 80a7 	beq.w	801b58c <_vfiprintf_r+0x1ec>
 801b43e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b440:	445a      	add	r2, fp
 801b442:	9209      	str	r2, [sp, #36]	@ 0x24
 801b444:	f89a 3000 	ldrb.w	r3, [sl]
 801b448:	2b00      	cmp	r3, #0
 801b44a:	f000 809f 	beq.w	801b58c <_vfiprintf_r+0x1ec>
 801b44e:	2300      	movs	r3, #0
 801b450:	f04f 32ff 	mov.w	r2, #4294967295
 801b454:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b458:	f10a 0a01 	add.w	sl, sl, #1
 801b45c:	9304      	str	r3, [sp, #16]
 801b45e:	9307      	str	r3, [sp, #28]
 801b460:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b464:	931a      	str	r3, [sp, #104]	@ 0x68
 801b466:	4654      	mov	r4, sl
 801b468:	2205      	movs	r2, #5
 801b46a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b46e:	4853      	ldr	r0, [pc, #332]	@ (801b5bc <_vfiprintf_r+0x21c>)
 801b470:	f7ec fede 	bl	8008230 <memchr>
 801b474:	9a04      	ldr	r2, [sp, #16]
 801b476:	b9d8      	cbnz	r0, 801b4b0 <_vfiprintf_r+0x110>
 801b478:	06d1      	lsls	r1, r2, #27
 801b47a:	bf44      	itt	mi
 801b47c:	2320      	movmi	r3, #32
 801b47e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b482:	0713      	lsls	r3, r2, #28
 801b484:	bf44      	itt	mi
 801b486:	232b      	movmi	r3, #43	@ 0x2b
 801b488:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b48c:	f89a 3000 	ldrb.w	r3, [sl]
 801b490:	2b2a      	cmp	r3, #42	@ 0x2a
 801b492:	d015      	beq.n	801b4c0 <_vfiprintf_r+0x120>
 801b494:	9a07      	ldr	r2, [sp, #28]
 801b496:	4654      	mov	r4, sl
 801b498:	2000      	movs	r0, #0
 801b49a:	f04f 0c0a 	mov.w	ip, #10
 801b49e:	4621      	mov	r1, r4
 801b4a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b4a4:	3b30      	subs	r3, #48	@ 0x30
 801b4a6:	2b09      	cmp	r3, #9
 801b4a8:	d94b      	bls.n	801b542 <_vfiprintf_r+0x1a2>
 801b4aa:	b1b0      	cbz	r0, 801b4da <_vfiprintf_r+0x13a>
 801b4ac:	9207      	str	r2, [sp, #28]
 801b4ae:	e014      	b.n	801b4da <_vfiprintf_r+0x13a>
 801b4b0:	eba0 0308 	sub.w	r3, r0, r8
 801b4b4:	fa09 f303 	lsl.w	r3, r9, r3
 801b4b8:	4313      	orrs	r3, r2
 801b4ba:	9304      	str	r3, [sp, #16]
 801b4bc:	46a2      	mov	sl, r4
 801b4be:	e7d2      	b.n	801b466 <_vfiprintf_r+0xc6>
 801b4c0:	9b03      	ldr	r3, [sp, #12]
 801b4c2:	1d19      	adds	r1, r3, #4
 801b4c4:	681b      	ldr	r3, [r3, #0]
 801b4c6:	9103      	str	r1, [sp, #12]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	bfbb      	ittet	lt
 801b4cc:	425b      	neglt	r3, r3
 801b4ce:	f042 0202 	orrlt.w	r2, r2, #2
 801b4d2:	9307      	strge	r3, [sp, #28]
 801b4d4:	9307      	strlt	r3, [sp, #28]
 801b4d6:	bfb8      	it	lt
 801b4d8:	9204      	strlt	r2, [sp, #16]
 801b4da:	7823      	ldrb	r3, [r4, #0]
 801b4dc:	2b2e      	cmp	r3, #46	@ 0x2e
 801b4de:	d10a      	bne.n	801b4f6 <_vfiprintf_r+0x156>
 801b4e0:	7863      	ldrb	r3, [r4, #1]
 801b4e2:	2b2a      	cmp	r3, #42	@ 0x2a
 801b4e4:	d132      	bne.n	801b54c <_vfiprintf_r+0x1ac>
 801b4e6:	9b03      	ldr	r3, [sp, #12]
 801b4e8:	1d1a      	adds	r2, r3, #4
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	9203      	str	r2, [sp, #12]
 801b4ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b4f2:	3402      	adds	r4, #2
 801b4f4:	9305      	str	r3, [sp, #20]
 801b4f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b5cc <_vfiprintf_r+0x22c>
 801b4fa:	7821      	ldrb	r1, [r4, #0]
 801b4fc:	2203      	movs	r2, #3
 801b4fe:	4650      	mov	r0, sl
 801b500:	f7ec fe96 	bl	8008230 <memchr>
 801b504:	b138      	cbz	r0, 801b516 <_vfiprintf_r+0x176>
 801b506:	9b04      	ldr	r3, [sp, #16]
 801b508:	eba0 000a 	sub.w	r0, r0, sl
 801b50c:	2240      	movs	r2, #64	@ 0x40
 801b50e:	4082      	lsls	r2, r0
 801b510:	4313      	orrs	r3, r2
 801b512:	3401      	adds	r4, #1
 801b514:	9304      	str	r3, [sp, #16]
 801b516:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b51a:	4829      	ldr	r0, [pc, #164]	@ (801b5c0 <_vfiprintf_r+0x220>)
 801b51c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b520:	2206      	movs	r2, #6
 801b522:	f7ec fe85 	bl	8008230 <memchr>
 801b526:	2800      	cmp	r0, #0
 801b528:	d03f      	beq.n	801b5aa <_vfiprintf_r+0x20a>
 801b52a:	4b26      	ldr	r3, [pc, #152]	@ (801b5c4 <_vfiprintf_r+0x224>)
 801b52c:	bb1b      	cbnz	r3, 801b576 <_vfiprintf_r+0x1d6>
 801b52e:	9b03      	ldr	r3, [sp, #12]
 801b530:	3307      	adds	r3, #7
 801b532:	f023 0307 	bic.w	r3, r3, #7
 801b536:	3308      	adds	r3, #8
 801b538:	9303      	str	r3, [sp, #12]
 801b53a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b53c:	443b      	add	r3, r7
 801b53e:	9309      	str	r3, [sp, #36]	@ 0x24
 801b540:	e76a      	b.n	801b418 <_vfiprintf_r+0x78>
 801b542:	fb0c 3202 	mla	r2, ip, r2, r3
 801b546:	460c      	mov	r4, r1
 801b548:	2001      	movs	r0, #1
 801b54a:	e7a8      	b.n	801b49e <_vfiprintf_r+0xfe>
 801b54c:	2300      	movs	r3, #0
 801b54e:	3401      	adds	r4, #1
 801b550:	9305      	str	r3, [sp, #20]
 801b552:	4619      	mov	r1, r3
 801b554:	f04f 0c0a 	mov.w	ip, #10
 801b558:	4620      	mov	r0, r4
 801b55a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b55e:	3a30      	subs	r2, #48	@ 0x30
 801b560:	2a09      	cmp	r2, #9
 801b562:	d903      	bls.n	801b56c <_vfiprintf_r+0x1cc>
 801b564:	2b00      	cmp	r3, #0
 801b566:	d0c6      	beq.n	801b4f6 <_vfiprintf_r+0x156>
 801b568:	9105      	str	r1, [sp, #20]
 801b56a:	e7c4      	b.n	801b4f6 <_vfiprintf_r+0x156>
 801b56c:	fb0c 2101 	mla	r1, ip, r1, r2
 801b570:	4604      	mov	r4, r0
 801b572:	2301      	movs	r3, #1
 801b574:	e7f0      	b.n	801b558 <_vfiprintf_r+0x1b8>
 801b576:	ab03      	add	r3, sp, #12
 801b578:	9300      	str	r3, [sp, #0]
 801b57a:	462a      	mov	r2, r5
 801b57c:	4b12      	ldr	r3, [pc, #72]	@ (801b5c8 <_vfiprintf_r+0x228>)
 801b57e:	a904      	add	r1, sp, #16
 801b580:	4630      	mov	r0, r6
 801b582:	f7fc f9d1 	bl	8017928 <_printf_float>
 801b586:	4607      	mov	r7, r0
 801b588:	1c78      	adds	r0, r7, #1
 801b58a:	d1d6      	bne.n	801b53a <_vfiprintf_r+0x19a>
 801b58c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b58e:	07d9      	lsls	r1, r3, #31
 801b590:	d405      	bmi.n	801b59e <_vfiprintf_r+0x1fe>
 801b592:	89ab      	ldrh	r3, [r5, #12]
 801b594:	059a      	lsls	r2, r3, #22
 801b596:	d402      	bmi.n	801b59e <_vfiprintf_r+0x1fe>
 801b598:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b59a:	f7fd f8a1 	bl	80186e0 <__retarget_lock_release_recursive>
 801b59e:	89ab      	ldrh	r3, [r5, #12]
 801b5a0:	065b      	lsls	r3, r3, #25
 801b5a2:	f53f af1f 	bmi.w	801b3e4 <_vfiprintf_r+0x44>
 801b5a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b5a8:	e71e      	b.n	801b3e8 <_vfiprintf_r+0x48>
 801b5aa:	ab03      	add	r3, sp, #12
 801b5ac:	9300      	str	r3, [sp, #0]
 801b5ae:	462a      	mov	r2, r5
 801b5b0:	4b05      	ldr	r3, [pc, #20]	@ (801b5c8 <_vfiprintf_r+0x228>)
 801b5b2:	a904      	add	r1, sp, #16
 801b5b4:	4630      	mov	r0, r6
 801b5b6:	f7fc fc4f 	bl	8017e58 <_printf_i>
 801b5ba:	e7e4      	b.n	801b586 <_vfiprintf_r+0x1e6>
 801b5bc:	0801dc9a 	.word	0x0801dc9a
 801b5c0:	0801dca4 	.word	0x0801dca4
 801b5c4:	08017929 	.word	0x08017929
 801b5c8:	0801b37d 	.word	0x0801b37d
 801b5cc:	0801dca0 	.word	0x0801dca0

0801b5d0 <_raise_r>:
 801b5d0:	291f      	cmp	r1, #31
 801b5d2:	b538      	push	{r3, r4, r5, lr}
 801b5d4:	4605      	mov	r5, r0
 801b5d6:	460c      	mov	r4, r1
 801b5d8:	d904      	bls.n	801b5e4 <_raise_r+0x14>
 801b5da:	2316      	movs	r3, #22
 801b5dc:	6003      	str	r3, [r0, #0]
 801b5de:	f04f 30ff 	mov.w	r0, #4294967295
 801b5e2:	bd38      	pop	{r3, r4, r5, pc}
 801b5e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b5e6:	b112      	cbz	r2, 801b5ee <_raise_r+0x1e>
 801b5e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b5ec:	b94b      	cbnz	r3, 801b602 <_raise_r+0x32>
 801b5ee:	4628      	mov	r0, r5
 801b5f0:	f000 f830 	bl	801b654 <_getpid_r>
 801b5f4:	4622      	mov	r2, r4
 801b5f6:	4601      	mov	r1, r0
 801b5f8:	4628      	mov	r0, r5
 801b5fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b5fe:	f000 b817 	b.w	801b630 <_kill_r>
 801b602:	2b01      	cmp	r3, #1
 801b604:	d00a      	beq.n	801b61c <_raise_r+0x4c>
 801b606:	1c59      	adds	r1, r3, #1
 801b608:	d103      	bne.n	801b612 <_raise_r+0x42>
 801b60a:	2316      	movs	r3, #22
 801b60c:	6003      	str	r3, [r0, #0]
 801b60e:	2001      	movs	r0, #1
 801b610:	e7e7      	b.n	801b5e2 <_raise_r+0x12>
 801b612:	2100      	movs	r1, #0
 801b614:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b618:	4620      	mov	r0, r4
 801b61a:	4798      	blx	r3
 801b61c:	2000      	movs	r0, #0
 801b61e:	e7e0      	b.n	801b5e2 <_raise_r+0x12>

0801b620 <raise>:
 801b620:	4b02      	ldr	r3, [pc, #8]	@ (801b62c <raise+0xc>)
 801b622:	4601      	mov	r1, r0
 801b624:	6818      	ldr	r0, [r3, #0]
 801b626:	f7ff bfd3 	b.w	801b5d0 <_raise_r>
 801b62a:	bf00      	nop
 801b62c:	200001fc 	.word	0x200001fc

0801b630 <_kill_r>:
 801b630:	b538      	push	{r3, r4, r5, lr}
 801b632:	4d07      	ldr	r5, [pc, #28]	@ (801b650 <_kill_r+0x20>)
 801b634:	2300      	movs	r3, #0
 801b636:	4604      	mov	r4, r0
 801b638:	4608      	mov	r0, r1
 801b63a:	4611      	mov	r1, r2
 801b63c:	602b      	str	r3, [r5, #0]
 801b63e:	f7f4 f84f 	bl	800f6e0 <_kill>
 801b642:	1c43      	adds	r3, r0, #1
 801b644:	d102      	bne.n	801b64c <_kill_r+0x1c>
 801b646:	682b      	ldr	r3, [r5, #0]
 801b648:	b103      	cbz	r3, 801b64c <_kill_r+0x1c>
 801b64a:	6023      	str	r3, [r4, #0]
 801b64c:	bd38      	pop	{r3, r4, r5, pc}
 801b64e:	bf00      	nop
 801b650:	200143c0 	.word	0x200143c0

0801b654 <_getpid_r>:
 801b654:	f7f4 b83c 	b.w	800f6d0 <_getpid>

0801b658 <_sbrk>:
 801b658:	4a04      	ldr	r2, [pc, #16]	@ (801b66c <_sbrk+0x14>)
 801b65a:	6811      	ldr	r1, [r2, #0]
 801b65c:	4603      	mov	r3, r0
 801b65e:	b909      	cbnz	r1, 801b664 <_sbrk+0xc>
 801b660:	4903      	ldr	r1, [pc, #12]	@ (801b670 <_sbrk+0x18>)
 801b662:	6011      	str	r1, [r2, #0]
 801b664:	6810      	ldr	r0, [r2, #0]
 801b666:	4403      	add	r3, r0
 801b668:	6013      	str	r3, [r2, #0]
 801b66a:	4770      	bx	lr
 801b66c:	200143c8 	.word	0x200143c8
 801b670:	200143d0 	.word	0x200143d0

0801b674 <_init>:
 801b674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b676:	bf00      	nop
 801b678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b67a:	bc08      	pop	{r3}
 801b67c:	469e      	mov	lr, r3
 801b67e:	4770      	bx	lr

0801b680 <_fini>:
 801b680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b682:	bf00      	nop
 801b684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b686:	bc08      	pop	{r3}
 801b688:	469e      	mov	lr, r3
 801b68a:	4770      	bx	lr
